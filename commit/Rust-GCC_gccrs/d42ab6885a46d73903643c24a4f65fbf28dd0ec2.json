{"sha": "d42ab6885a46d73903643c24a4f65fbf28dd0ec2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyYWI2ODg1YTQ2ZDczOTAzNjQzYzI0YTRmNjVmYmYyOGRkMGVjMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-03-24T08:44:36Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-03-24T08:44:36Z"}, "message": "tighten funcspec regexps\n\nIn -mcmodel=large, callee symbols are pulled ahead of the call insns.\n\nThe patterns in funcspec-[12].c tests in gcc.target/i386 match even\nline breaks between 'call' and a function symbol expected to be\ncalled, however, so it ends up unexpectedly matching a previous,\nunrelated indirect call, up to the insn that loads the address of the\nintended callee to a register, for all but the first callee, that\ndoesn't have a call insn before it.\n\nAll of these apparent passes are false positives.  We are NOT\ngenerating the expected call insns.\n\nThis patch fixes only the patterns, so that they won't trigger false\npositives any more.  There are several dozens of other tests that fail\nwith -mcmodel=large for similar reasons, but I'm still not sure about\nhow to deal with them.  I see no point in holding up this small\nimprovement over the lack of a larger solution of a different problem,\nthough.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/funcspec-2.c: Tighten regexps to avoid false\n\tpositives with -mcmodel=large.\n\t* gcc.target/i386/funcspec-3.c: Likewise.", "tree": {"sha": "e178b5698fab10916a5a29baa33e7990539be1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e178b5698fab10916a5a29baa33e7990539be1af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d42ab6885a46d73903643c24a4f65fbf28dd0ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42ab6885a46d73903643c24a4f65fbf28dd0ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42ab6885a46d73903643c24a4f65fbf28dd0ec2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42ab6885a46d73903643c24a4f65fbf28dd0ec2/comments", "author": null, "committer": null, "parents": [{"sha": "4be312862dec5c8e49c76249dd5aed220c72039e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be312862dec5c8e49c76249dd5aed220c72039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be312862dec5c8e49c76249dd5aed220c72039e"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "147f62321fd77b9d10660bd5c4d65885e93099b1", "filename": "gcc/testsuite/gcc.target/i386/funcspec-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42ab6885a46d73903643c24a4f65fbf28dd0ec2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42ab6885a46d73903643c24a4f65fbf28dd0ec2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-2.c?ref=d42ab6885a46d73903643c24a4f65fbf28dd0ec2", "patch": "@@ -89,11 +89,11 @@ int main ()\n /* { dg-final { scan-assembler \"vfnmaddsd\" } } */\n /* { dg-final { scan-assembler \"vfnmsubss\" } } */\n /* { dg-final { scan-assembler \"vfnmsubsd\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_mul_sub\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_neg_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)flt_neg_mul_sub\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_mul_sub\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_neg_mul_add\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)dbl_neg_mul_sub\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)flt_mul_add\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)flt_mul_sub\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)flt_neg_mul_add\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)flt_neg_mul_sub\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)dbl_mul_add\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)dbl_mul_sub\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)dbl_neg_mul_add\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)dbl_neg_mul_sub\" } } */"}, {"sha": "8fb425b925add1b717064ffb05a26d77d9b78f7a", "filename": "gcc/testsuite/gcc.target/i386/funcspec-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42ab6885a46d73903643c24a4f65fbf28dd0ec2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42ab6885a46d73903643c24a4f65fbf28dd0ec2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-3.c?ref=d42ab6885a46d73903643c24a4f65fbf28dd0ec2", "patch": "@@ -63,6 +63,6 @@ int main ()\n /* { dg-final { scan-assembler \"popcntl\" { target { ! *-*-darwin* } } } } */\n /* { dg-final { scan-assembler \"popcntq\" { target { ! *-*-darwin* } } } } */\n /* { dg-final { scan-assembler-times \"popcnt\" 2 { target *-*-darwin* } } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)sse4a_pop_i\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)sse42_pop_l\" } } */\n-/* { dg-final { scan-assembler \"call\\t(.*)popcountdi2\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)sse4a_pop_i\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)sse42_pop_l\" } } */\n+/* { dg-final { scan-assembler \"call\\t(\\[^\\n\\r\\]*)popcountdi2\" } } */"}]}