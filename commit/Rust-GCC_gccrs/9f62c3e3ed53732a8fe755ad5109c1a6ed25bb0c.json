{"sha": "9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MmMzZTNlZDUzNzMyYThmZTc1NWFkNTEwOWMxYTZlZDI1YmIwYw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2005-04-25T19:35:18Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2005-04-25T19:35:18Z"}, "message": "target-def.h (TARGET_CXX_USE_AEABI_ATEXIT): Define.\n\n\t* target-def.h (TARGET_CXX_USE_AEABI_ATEXIT): Define.\n\t* target.h (struct gcc_target): Add cxx.use_aeabi_atexit.\n\t* config/arm/arm.c (arm_cxx_atexit_name): New function.\n\t(TARGET_CXX_USE_AEABI_ATEXIT): New macro.\n\t* cp/decl.c (get_atexit_node): Reorder arguments for __aeabi_atexit.\n\t(register_dtor_fn): Likewise.\n\t* doc/tm.texi: Document TARGET_CXX_USE_AEABI_ATEXIT.\n\nFrom-SVN: r98732", "tree": {"sha": "97d2a98c9b56ae4fd8ac24614ee3652b1607571c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97d2a98c9b56ae4fd8ac24614ee3652b1607571c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/comments", "author": null, "committer": null, "parents": [{"sha": "934790cc6719ae6f0d6a7f408cedba1acab9f93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934790cc6719ae6f0d6a7f408cedba1acab9f93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934790cc6719ae6f0d6a7f408cedba1acab9f93d"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "fea482b414c3cfbb455cefedbe538842a294f113", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "patch": "@@ -1,3 +1,13 @@\n+2005-04-05  Paul Brook  <julian@codesourcery.com>\n+\n+\t* target-def.h (TARGET_CXX_USE_AEABI_ATEXIT): Define.\n+\t* target.h (struct gcc_target): Add cxx.use_aeabi_atexit.\n+\t* config/arm/arm.c (arm_cxx_atexit_name): New function.\n+\t(TARGET_CXX_USE_AEABI_ATEXIT): New macro.\n+\t* cp/decl.c (get_atexit_node): Reorder arguments for __aeabi_atexit.\n+\t(register_dtor_fn): Likewise.\n+\t* doc/tm.texi: Document TARGET_CXX_USE_AEABI_ATEXIT.\n+\n 2005-04-25  Ian Lance Taylor  <ian@airs.com>\n \n \t* c-common.def (EXPR_STMT): Remove, moved to C++ frontend."}, {"sha": "8189909f2ebabf2fa7b27274c219aac1ad7bfc77", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "patch": "@@ -174,6 +174,7 @@ static bool arm_cxx_cdtor_returns_this (void);\n static bool arm_cxx_key_method_may_be_inline (void);\n static void arm_cxx_determine_class_data_visibility (tree);\n static bool arm_cxx_class_data_always_comdat (void);\n+static bool arm_cxx_use_aeabi_atexit (void);\n static void arm_init_libfuncs (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n \f\n@@ -308,6 +309,9 @@ static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n #undef TARGET_CXX_KEY_METHOD_MAY_BE_INLINE\n #define TARGET_CXX_KEY_METHOD_MAY_BE_INLINE arm_cxx_key_method_may_be_inline\n \n+#undef TARGET_CXX_USE_AEABI_ATEXIT\n+#define TARGET_CXX_USE_AEABI_ATEXIT arm_cxx_use_aeabi_atexit\n+\n #undef TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY\n #define TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY \\\n   arm_cxx_determine_class_data_visibility\n@@ -14354,6 +14358,17 @@ arm_cxx_class_data_always_comdat (void)\n   return !TARGET_AAPCS_BASED;\n }\n \n+\n+/* The EABI says __aeabi_atexit should be used to register static\n+   destructors.  */\n+\n+static bool\n+arm_cxx_use_aeabi_atexit (void)\n+{\n+  return TARGET_AAPCS_BASED;\n+}\n+\n+\n void\n arm_set_return_address (rtx source, rtx scratch)\n {"}, {"sha": "91f57ef0de562881fb65301d755d5a7e89d65f89", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "patch": "@@ -4998,6 +4998,7 @@ get_atexit_node (void)\n   tree fn_type;\n   tree fn_ptr_type;\n   const char *name;\n+  bool use_aeabi_atexit;\n \n   if (atexit_node)\n     return atexit_node;\n@@ -5011,19 +5012,31 @@ get_atexit_node (void)\n \t We build up the argument types and then then function type\n \t itself.  */\n \n+      use_aeabi_atexit = targetm.cxx.use_aeabi_atexit ();\n       /* First, build the pointer-to-function type for the first\n \t argument.  */\n       arg_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n       fn_type = build_function_type (void_type_node, arg_types);\n       fn_ptr_type = build_pointer_type (fn_type);\n       /* Then, build the rest of the argument types.  */\n       arg_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-      arg_types = tree_cons (NULL_TREE, ptr_type_node, arg_types);\n-      arg_types = tree_cons (NULL_TREE, fn_ptr_type, arg_types);\n+      if (use_aeabi_atexit)\n+\t{\n+\t  arg_types = tree_cons (NULL_TREE, fn_ptr_type, arg_types);\n+\t  arg_types = tree_cons (NULL_TREE, ptr_type_node, arg_types);\n+\t}\n+      else\n+\t{\n+\t  arg_types = tree_cons (NULL_TREE, ptr_type_node, arg_types);\n+\t  arg_types = tree_cons (NULL_TREE, fn_ptr_type, arg_types);\n+\t}\n       /* And the final __cxa_atexit type.  */\n       fn_type = build_function_type (integer_type_node, arg_types);\n       fn_ptr_type = build_pointer_type (fn_type);\n-      name = \"__cxa_atexit\";\n+      if (use_aeabi_atexit)\n+\tname = \"__aeabi_atexit\";\n+      else\n+\tname = \"__cxa_atexit\";\n     }\n   else\n     {\n@@ -5184,8 +5197,16 @@ register_dtor_fn (tree decl)\n       args = tree_cons (NULL_TREE,\n \t\t\tbuild_unary_op (ADDR_EXPR, get_dso_handle_node (), 0),\n \t\t\tNULL_TREE);\n-      args = tree_cons (NULL_TREE, null_pointer_node, args);\n-      args = tree_cons (NULL_TREE, cleanup, args);\n+      if (targetm.cxx.use_aeabi_atexit ())\n+\t{\n+\t  args = tree_cons (NULL_TREE, cleanup, args);\n+\t  args = tree_cons (NULL_TREE, null_pointer_node, args);\n+\t}\n+      else\n+\t{\n+\t  args = tree_cons (NULL_TREE, null_pointer_node, args);\n+\t  args = tree_cons (NULL_TREE, cleanup, args);\n+\t}\n     }\n   else\n     args = tree_cons (NULL_TREE, cleanup, NULL_TREE);"}, {"sha": "771461618cc0cf7ee7ce48a0a4c30dbe147144ad", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "patch": "@@ -8735,6 +8735,12 @@ classes whose virtual table will be emitted in only one translation\n unit will not be COMDAT.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CXX_USE_AEABI_ATEXIT (void)\n+This hook returns true if @code{__aeabi_atexit} (as defined by the ARM EABI)\n+should be used to register static destructors when @option{-fuse-cxa-atexit}\n+is in effect.  The default is to return false to use @code{__cxa_atexit}.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "6e8a578341e0aa0dc84ac57dd139bc4b4588297e", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "patch": "@@ -477,6 +477,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT hook_bool_void_true\n #endif\n \n+#ifndef TARGET_CXX_USE_AEABI_ATEXIT\n+#define TARGET_CXX_USE_AEABI_ATEXIT hook_bool_void_false\n+#endif\n+\n #define TARGET_CXX\t\t\t\t\\\n   {\t\t\t\t\t\t\\\n     TARGET_CXX_GUARD_TYPE,\t\t\t\\\n@@ -488,6 +492,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n     TARGET_CXX_KEY_METHOD_MAY_BE_INLINE,\t\\\n     TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY,\t\\\n     TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT,        \\\n+    TARGET_CXX_USE_AEABI_ATEXIT\t\t\t\\\n   }\n \n /* The whole shebang.  */"}, {"sha": "1786379ed55cf5f6b2f135cb803fe2ba93c152d4", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "patch": "@@ -603,6 +603,9 @@ struct gcc_target\n        class data for classes whose virtual table will be emitted in\n        only one translation unit will not be COMDAT.  */\n     bool (*class_data_always_comdat) (void);\n+    /* Returns true if __aeabi_atexit should be used to register static\n+       destructors.  */\n+    bool (*use_aeabi_atexit) (void);\n   } cxx;\n \n   /* Leave the boolean fields at the end.  */"}]}