{"sha": "05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhMDNmMzk4NmRiMjVjYjUwNzZiNDA5ZjQwNDhlOWRiYjVkYmZkZg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-10T11:00:18Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-11T02:18:42Z"}, "message": "Extend ldexp{s,d}f3 to vscalefs{s,d} when TARGET_AVX512F and TARGET_SSE_MATH.\n\ngcc/ChangeLog:\n\n\tPR target/98309\n\t* config/i386/i386.md (ldexp<mode>3): Extend to vscalefs[sd]\n\twhen TARGET_AVX512F and TARGET_SSE_MATH.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/98309\n\t* gcc.target/i386/pr98309-1.c: New test.\n\t* gcc.target/i386/pr98309-2.c: New test.", "tree": {"sha": "1a5d2fc73cb8c8c538805c97b4f10bcb73e7d74f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a5d2fc73cb8c8c538805c97b4f10bcb73e7d74f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f7016940e5a7281e3fd7628fbf1360d900b581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f7016940e5a7281e3fd7628fbf1360d900b581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f7016940e5a7281e3fd7628fbf1360d900b581"}], "stats": {"total": 91, "additions": 83, "deletions": 8}, "files": [{"sha": "56b09c566ed99f90d2648b247bd755ac168384f3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "patch": "@@ -17914,17 +17914,35 @@\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"general_operand\"))\n    (use (match_operand:SI 2 \"register_operand\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-       || TARGET_MIX_SSE_I387)\n+  \"((TARGET_USE_FANCY_MATH_387\n+     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+\t || TARGET_MIX_SSE_I387))\n+    || (TARGET_AVX512F && TARGET_SSE_MATH))\n    && flag_unsafe_math_optimizations\"\n {\n-  rtx op0 = gen_reg_rtx (XFmode);\n-  rtx op1 = gen_reg_rtx (XFmode);\n+  /* Prefer avx512f version.  */\n+  if (TARGET_AVX512F && TARGET_SSE_MATH)\n+   {\n+     rtx op2 = gen_reg_rtx (<MODE>mode);\n+     emit_insn (gen_floatsi<mode>2 (op2, operands[2]));\n+     operands[0] = lowpart_subreg (<ssevecmodef>mode, operands[0], <MODE>mode);\n+     if (MEM_P (operands[1]))\n+       operands[1] = force_reg (<MODE>mode, operands[1]);\n+     operands[1] = lowpart_subreg (<ssevecmodef>mode, operands[1], <MODE>mode);\n+     op2 = lowpart_subreg (<ssevecmodef>mode, op2, <MODE>mode);\n+     emit_insn (gen_avx512f_vmscalef<ssevecmodelower> (operands[0],\n+\t\t\t\t\t\t       operands[1],\n+\t\t\t\t\t\t       op2));\n+   }\n+  else\n+    {\n+      rtx op0 = gen_reg_rtx (XFmode);\n+      rtx op1 = gen_reg_rtx (XFmode);\n \n-  emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n-  emit_insn (gen_ldexpxf3 (op0, op1, operands[2]));\n-  emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+      emit_insn (gen_extend<mode>xf2 (op1, operands[1]));\n+      emit_insn (gen_ldexpxf3 (op0, op1, operands[2]));\n+      emit_insn (gen_truncxf<mode>2 (operands[0], op0));\n+  }\n   DONE;\n })\n "}, {"sha": "3a7afb5897137e51584ed44f0a70e572b99e1968", "filename": "gcc/testsuite/gcc.target/i386/pr98309-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98309-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98309-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98309-1.c?ref=05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2 -mfpmath=sse -ffast-math\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsi2s\\[sd\\]\" \"2\" } } */\n+/* { dg-final { scan-assembler-times \"vscalefs\\[sd\\]\" \"2\" } } */\n+\n+double\n+__attribute__((noipa))\n+foo (double a, int b)\n+{\n+  return __builtin_ldexp (a, b);\n+}\n+\n+float\n+__attribute__((noipa))\n+foo2 (float a, int b)\n+{\n+  return __builtin_ldexpf (a, b);\n+}"}, {"sha": "ecfb9168b7db82a9c66b9b442be9f07000bee95b", "filename": "gcc/testsuite/gcc.target/i386/pr98309-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98309-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a03f3986db25cb5076b409f4048e9dbb5dbfdf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98309-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98309-2.c?ref=05a03f3986db25cb5076b409f4048e9dbb5dbfdf", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2 -mfpmath=sse -ffast-math\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#include \"pr98309-1.c\"\n+\n+double\n+__attribute__((noipa, target(\"fpmath=387\")))\n+foo_i387 (double a, int b)\n+{\n+  return __builtin_ldexp (a, b);\n+}\n+\n+float\n+__attribute__((noipa, target(\"fpmath=387\")))\n+foo2_i387 (float a, int b)\n+{\n+  return __builtin_ldexpf (a, b);\n+}\n+\n+static void\n+test_512 (void)\n+{\n+  float fa = 14.5;\n+  double da = 44.5;\n+  int fb = 12;\n+  int db = 8;\n+  if (foo_i387 (da, db) != foo (da, db))\n+    abort ();\n+  if (foo2_i387 (fa, fb) != foo2 (fa, fb))\n+    abort ();\n+}"}]}