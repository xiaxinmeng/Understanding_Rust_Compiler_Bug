{"sha": "715e529d70b264c2392fab72bb4b17ec18fb93fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1ZTUyOWQ3MGIyNjRjMjM5MmZhYjcyYmI0YjE3ZWMxOGZiOTNmZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:43:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-31T11:43:09Z"}, "message": "[multiple changes]\n\n2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Access_Attribute): Do not emit error\n\tmessage if reference does not come from source, as in the case\n\tfor the controlling argument of a dispatching call. Error is\n\tdiagnosed when call is resolved.\n\t* sem_ch4.adb (Complete_Object_Operation); Fix incorrect RM\n\treference in error message.\n\t* sem_res.adb (Check_Prefixed_Call): ditto.\n\n2014-10-31  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings): Do not\n\tsuppress checks when pragma Restrictions (No_Exception) is used in\n\tCodePeer or GNATprove mode.\n\n2014-10-31  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Explicitly mark language\n\tchecks as not suppressed in GNATprove mode.\n\n2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_elab.adb (Check_Elab_Call): Nothing to check if call is\n\tbeing pre-analyzed.\n\t* sem_ch3.adb (Complete_Private_Subtype): If all rep items of full\n\tview are those of the base, use rep_item chain of partial view,\n\twhich may include aspects.\n\t* sem_cat.adb (Is_non_Remote_Access_Type): Use underlying type\n\tof base type, to handle properly declared subtypes.\n\nFrom-SVN: r216969", "tree": {"sha": "bf9d7a859d74f52e68daa61936080f0142af7728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9d7a859d74f52e68daa61936080f0142af7728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715e529d70b264c2392fab72bb4b17ec18fb93fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715e529d70b264c2392fab72bb4b17ec18fb93fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715e529d70b264c2392fab72bb4b17ec18fb93fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715e529d70b264c2392fab72bb4b17ec18fb93fd/comments", "author": null, "committer": null, "parents": [{"sha": "88305f176dd10ea3f8c60ed65ca7eb189591e069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88305f176dd10ea3f8c60ed65ca7eb189591e069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88305f176dd10ea3f8c60ed65ca7eb189591e069"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "96f94e2f2478ce2fa082f2dbfd5e9f92bd687526", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -1,3 +1,34 @@\n+2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Access_Attribute): Do not emit error\n+\tmessage if reference does not come from source, as in the case\n+\tfor the controlling argument of a dispatching call. Error is\n+\tdiagnosed when call is resolved.\n+\t* sem_ch4.adb (Complete_Object_Operation); Fix incorrect RM\n+\treference in error message.\n+\t* sem_res.adb (Check_Prefixed_Call): ditto.\n+\n+2014-10-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings): Do not\n+\tsuppress checks when pragma Restrictions (No_Exception) is used in\n+\tCodePeer or GNATprove mode.\n+\n+2014-10-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Explicitly mark language\n+\tchecks as not suppressed in GNATprove mode.\n+\n+2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_elab.adb (Check_Elab_Call): Nothing to check if call is\n+\tbeing pre-analyzed.\n+\t* sem_ch3.adb (Complete_Private_Subtype): If all rep items of full\n+\tview are those of the base, use rep_item chain of partial view,\n+\twhich may include aspects.\n+\t* sem_cat.adb (Is_non_Remote_Access_Type): Use underlying type\n+\tof base type, to handle properly declared subtypes.\n+\n 2014-10-31  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb (Analyze_Generic_Package_Declaration): If there"}, {"sha": "0da8a51fe786f7b89fbf974e27c236a0f75c0479", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -363,6 +363,12 @@ procedure Gnat1drv is\n          --  happens anyway because this expansion is simply not done in the\n          --  SPARK version of the expander.\n \n+         --  On the contrary, we need to enable explicitly all language checks,\n+         --  as they may have been marked as suppressed by the use of switch\n+         --  -gnatp\n+\n+         Suppress_Options.Suppress := (others => False);\n+\n          --  Turn off dynamic elaboration checks: generates inconsistencies in\n          --  trees between specs compiled as part of a main unit or as part of\n          --  a with-clause."}, {"sha": "ced9831a61fa5e38d7fc7ede0a492eca5e7133ce", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -1041,12 +1041,17 @@ package body Sem_Attr is\n          if not Is_Aliased_View (P)\n            and then not In_Instance\n            and then not In_Inlined_Body\n+           and then Comes_From_Source (N)\n          then\n             --  Here we have a non-aliased view. This is illegal unless we\n             --  have the case of Unrestricted_Access, where for now we allow\n             --  this (we will reject later if expected type is access to an\n             --  unconstrained array with a thin pointer).\n \n+            --  No need for an error message on a generated access reference\n+            --  for the controlling argument in a dispatching call: error will\n+            --  be reported when resolving the call.\n+\n             if Aname /= Name_Unrestricted_Access then\n                Error_Attr_P (\"prefix of % attribute must be aliased\");\n                Check_No_Implicit_Aliasing (P);"}, {"sha": "06460fd5ecb5662de96e6f44dc47a97da51cd253", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -634,7 +634,9 @@ package body Sem_Cat is\n    -------------------------------\n \n    function Is_Non_Remote_Access_Type (E : Entity_Id) return Boolean is\n-      U_E : constant Entity_Id := Underlying_Type (E);\n+      U_E : constant Entity_Id := Underlying_Type (Base_Type (E));\n+      --  Use full view of base type to handle subtypes properly.\n+\n    begin\n       if No (U_E) then\n \n@@ -1932,7 +1934,7 @@ package body Sem_Cat is\n \n       Typ := First_Entity (Name_U);\n       while Present (Typ) and then Typ /= First_Priv_Ent loop\n-         U_Typ := Underlying_Type (Typ);\n+         U_Typ := Underlying_Type (Base_Type (Typ));\n \n          if No (U_Typ) then\n             U_Typ := Typ;"}, {"sha": "9e79041a3026cbf58d33339016eeb51bc8f1e61b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -11555,9 +11555,13 @@ package body Sem_Ch3 is\n          Item := First_Rep_Item (Full);\n \n          --  If no existing rep items on full type, we can just link directly\n-         --  to the list of items on the private type.\n+         --  to the list of items on the private type. Same if the rep items\n+         --  are only those inherited from the base\n \n-         if No (Item) then\n+         if No (Item)\n+           or else Nkind (Item) /= N_Aspect_Specification\n+           or else Entity (Item) = Full_Base\n+         then\n             Set_First_Rep_Item (Full, First_Rep_Item (Priv));\n \n          --  Otherwise, search to the end of items currently linked to the full"}, {"sha": "6f58d001639208dc321c382e0279db97fa0a9b85", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -7585,7 +7585,7 @@ package body Sem_Ch4 is\n             if not Is_Aliased_View (Obj) then\n                Error_Msg_NE\n                  (\"object in prefixed call to & must be aliased \"\n-                  & \"(RM-2005 4.3.1 (13))\", Prefix (First_Actual), Subprog);\n+                  & \"(RM 4.1.3 (13 1/2))\", Prefix (First_Actual), Subprog);\n             end if;\n \n             Analyze (First_Actual);"}, {"sha": "ad1b0493a968103603f03923ce5d764b553d6ae3", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -1216,6 +1216,12 @@ package body Sem_Elab is\n         and then No (Enclosing_Generic_Body (N))\n       then\n          return;\n+\n+      --  Nothing to do if call is being pre-analyzed, as when within a\n+      --  pre/postcondition, a predicate, or an invariant.\n+\n+      elsif In_Spec_Expression then\n+         return;\n       end if;\n \n       --  Nothing to do if this is a call to a postcondition, which is always"}, {"sha": "3f0b9b83345d01b09ad9af8e7782893f46dcb4e0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -8952,7 +8952,15 @@ package body Sem_Prag is\n                --  Atomic_Synchronization is not a real check, so it is not\n                --  affected by this processing).\n \n-               if R_Id = No_Exceptions and then not Warn then\n+               --  Ignore the effect of pragma Restrictions (No_Exceptions) on\n+               --  run-time checks in CodePeer and GNATprove modes: we want to\n+               --  generate checks for analysis purposes, as set respectively\n+               --  by -gnatC and -gnatd.F\n+\n+               if not Warn\n+                 and then not (CodePeer_Mode or GNATprove_Mode)\n+                 and then R_Id = No_Exceptions\n+               then\n                   for J in Scope_Suppress.Suppress'Range loop\n                      if J /= Atomic_Synchronization then\n                         Scope_Suppress.Suppress (J) := True;"}, {"sha": "97f6ea12c3860ce26d1b818a3f6ca73ce08c2710", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715e529d70b264c2392fab72bb4b17ec18fb93fd/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=715e529d70b264c2392fab72bb4b17ec18fb93fd", "patch": "@@ -3261,7 +3261,7 @@ package body Sem_Res is\n                if not Is_Aliased_View (Act) then\n                   Error_Msg_NE\n                     (\"object in prefixed call to& must be aliased \"\n-                     & \"(RM-2005 4.3.1 (13))\",\n+                     & \"(RM 4.1.3 (13 1/2))\",\n                     Prefix (Act), Nam);\n                end if;\n "}]}