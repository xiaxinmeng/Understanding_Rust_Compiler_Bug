{"sha": "dc777f6b0646fed2f18a580ce249cb6404f89205", "node_id": "C_kwDOANBUbNoAKGRjNzc3ZjZiMDY0NmZlZDJmMThhNTgwY2UyNDljYjY0MDRmODkyMDU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-12T08:06:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-13T10:45:31Z"}, "message": "path solver: Merge path_range_query constructors.\n\nThere's no need for two constructors, when we can do it all with one\nthat defaults to the common behavior:\n\npath_range_query (bool resolve = true, gimple_ranger *ranger = NULL);\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc (path_range_query::path_range_query): Merge\n\tctors.\n\t(path_range_query::import_p): Move from header file.\n\t(path_range_query::~path_range_query): Adjust for combined ctors.\n\t* gimple-range-path.h: Merge ctors.\n\t(path_range_query::import_p): Move to .cc file.", "tree": {"sha": "0a9b090c4e3bfdecb0343487999d7781fd7b4c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9b090c4e3bfdecb0343487999d7781fd7b4c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc777f6b0646fed2f18a580ce249cb6404f89205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc777f6b0646fed2f18a580ce249cb6404f89205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc777f6b0646fed2f18a580ce249cb6404f89205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc777f6b0646fed2f18a580ce249cb6404f89205/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3d43a35155685b1795b4392e20e1c14a33c38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3d43a35155685b1795b4392e20e1c14a33c38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3d43a35155685b1795b4392e20e1c14a33c38f"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "32b2cb5759774c890858e69a0b990259a05c3d66", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc777f6b0646fed2f18a580ce249cb6404f89205/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc777f6b0646fed2f18a580ce249cb6404f89205/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=dc777f6b0646fed2f18a580ce249cb6404f89205", "patch": "@@ -36,33 +36,36 @@ along with GCC; see the file COPYING3.  If not see\n // Internal construct to help facilitate debugging of solver.\n #define DEBUG_SOLVER (dump_file && (param_threader_debug == THREADER_DEBUG_ALL))\n \n-path_range_query::path_range_query (gimple_ranger *ranger, bool resolve)\n+path_range_query::path_range_query (bool resolve, gimple_ranger *ranger)\n   : m_cache (new ssa_global_cache),\n     m_has_cache_entry (BITMAP_ALLOC (NULL)),\n-    m_ranger (ranger),\n     m_resolve (resolve),\n-    m_alloced_ranger (false)\n+    m_alloced_ranger (!ranger)\n {\n-  m_oracle = new path_oracle (ranger->oracle ());\n-}\n+  if (m_alloced_ranger)\n+    m_ranger = new gimple_ranger;\n+  else\n+    m_ranger = ranger;\n \n-path_range_query::path_range_query (bool resolve)\n-  : m_cache (new ssa_global_cache),\n-    m_has_cache_entry (BITMAP_ALLOC (NULL)),\n-    m_ranger (new gimple_ranger),\n-    m_resolve (resolve),\n-    m_alloced_ranger (true)\n-{\n   m_oracle = new path_oracle (m_ranger->oracle ());\n }\n \n path_range_query::~path_range_query ()\n {\n-  BITMAP_FREE (m_has_cache_entry);\n-  delete m_cache;\n   delete m_oracle;\n   if (m_alloced_ranger)\n     delete m_ranger;\n+  BITMAP_FREE (m_has_cache_entry);\n+  delete m_cache;\n+}\n+\n+// Return TRUE if NAME is in the import bitmap.\n+\n+bool\n+path_range_query::import_p (tree name)\n+{\n+  return (TREE_CODE (name) == SSA_NAME\n+\t  && bitmap_bit_p (m_imports, SSA_NAME_VERSION (name)));\n }\n \n // Mark cache entry for NAME as unused."}, {"sha": "f8b2b04e57c07a7a32499afc91b3fc4d7fa5d0ae", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc777f6b0646fed2f18a580ce249cb6404f89205/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc777f6b0646fed2f18a580ce249cb6404f89205/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=dc777f6b0646fed2f18a580ce249cb6404f89205", "patch": "@@ -32,10 +32,10 @@ along with GCC; see the file COPYING3.  If not see\n class path_range_query : public range_query\n {\n public:\n-  path_range_query (class gimple_ranger *ranger, bool resolve = true);\n-  path_range_query (bool resolve = true);\n+  path_range_query (bool resolve = true, class gimple_ranger *ranger = NULL);\n   virtual ~path_range_query ();\n-  void compute_ranges (const vec<basic_block> &, const bitmap_head *imports = NULL);\n+  void compute_ranges (const vec<basic_block> &,\n+\t\t       const bitmap_head *imports = NULL);\n   void compute_ranges (edge e);\n   void compute_imports (bitmap imports, basic_block exit);\n   bool range_of_expr (irange &r, tree name, gimple * = NULL) override;\n@@ -64,7 +64,7 @@ class path_range_query : public range_query\n   void compute_phi_relations (basic_block bb, basic_block prev);\n   void maybe_register_phi_relation (gphi *, tree arg);\n   bool add_to_imports (tree name, bitmap imports);\n-  inline bool import_p (tree name);\n+  bool import_p (tree name);\n \n   // Path navigation.\n   void set_path (const vec<basic_block> &);\n@@ -104,13 +104,4 @@ class path_range_query : public range_query\n   bool m_alloced_ranger;\n };\n \n-// Return TRUE if NAME is in the import bitmap.\n-\n-bool\n-path_range_query::import_p (tree name)\n-{\n-  return (TREE_CODE (name) == SSA_NAME\n-\t  && bitmap_bit_p (m_imports, SSA_NAME_VERSION (name)));\n-}\n-\n #endif // GCC_TREE_SSA_THREADSOLVER_H"}]}