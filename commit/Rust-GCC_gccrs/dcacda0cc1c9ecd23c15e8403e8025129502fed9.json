{"sha": "dcacda0cc1c9ecd23c15e8403e8025129502fed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhY2RhMGNjMWM5ZWNkMjNjMTVlODQwM2U4MDI1MTI5NTAyZmVkOQ==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2017-11-29T15:15:48Z"}, "committer": {"name": "Daniel Hellstrom", "email": "danielh@gcc.gnu.org", "date": "2017-11-29T15:15:48Z"}, "message": "[SPARC] Errata workaround for GRLIB-TN-0012\n\nThis patch provides a workaround for the errata described in GRLIB-TN-0012.\n\nIf the workaround is enabled it will:\n\n * Prevent any floating-point operation from being placed in the\n   delay slot of an annulled integer branch.\n\n * Place a NOP at the branch target of an integer branch if it is\n   a floating-point operation or a floating-point branch.\n\nIt is applicable to GR712RC.\n\n2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n\ngcc/\n\t* config/sparc/sparc.c (fpop_insn_p): New function.\n\t(sparc_do_work_around_errata): Insert NOP instructions to\n\tprevent sequences that could trigger the TN-0012 errata for\n\tGR712RC.\n\t(pass_work_around_errata::gate): Also test sparc_fix_gr712rc.\n\t* config/sparc/sparc.md (fix_gr712rc): New attribute.\n\t(in_branch_annul_delay): Prevent floating-point instructions\n\tin delay slot of annulled integer branch.\n\nFrom-SVN: r255234", "tree": {"sha": "e20f603705106c0bdc0546ee661b6c279d4ba2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e20f603705106c0bdc0546ee661b6c279d4ba2ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcacda0cc1c9ecd23c15e8403e8025129502fed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcacda0cc1c9ecd23c15e8403e8025129502fed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcacda0cc1c9ecd23c15e8403e8025129502fed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcacda0cc1c9ecd23c15e8403e8025129502fed9/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7300fff74becf365cdadd23c9447521da852e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7300fff74becf365cdadd23c9447521da852e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7300fff74becf365cdadd23c9447521da852e84"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "390a0b79b1e1098696cc2305737b05033cca333f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcacda0cc1c9ecd23c15e8403e8025129502fed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcacda0cc1c9ecd23c15e8403e8025129502fed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcacda0cc1c9ecd23c15e8403e8025129502fed9", "patch": "@@ -1,3 +1,14 @@\n+2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (fpop_insn_p): New function.\n+\t(sparc_do_work_around_errata): Insert NOP instructions to\n+\tprevent sequences that could trigger the TN-0012 errata for\n+\tGR712RC.\n+\t(pass_work_around_errata::gate): Also test sparc_fix_gr712rc.\n+\t* config/sparc/sparc.md (fix_gr712rc): New attribute.\n+\t(in_branch_annul_delay): Prevent floating-point instructions\n+\tin delay slot of annulled integer branch.\n+\n 2017-11-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83202"}, {"sha": "32081659e99dd794c0e39fa0bdc714107f7ffe46", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcacda0cc1c9ecd23c15e8403e8025129502fed9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcacda0cc1c9ecd23c15e8403e8025129502fed9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=dcacda0cc1c9ecd23c15e8403e8025129502fed9", "patch": "@@ -945,6 +945,31 @@ mem_ref (rtx x)\n   return NULL_RTX;\n }\n \n+/* True if INSN is a floating-point instruction.  */\n+\n+static bool\n+fpop_insn_p (rtx_insn *insn)\n+{\n+  if (GET_CODE (PATTERN (insn)) != SET)\n+    return false;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_FPMOVE:\n+    case TYPE_FPCMOVE:\n+    case TYPE_FP:\n+    case TYPE_FPCMP:\n+    case TYPE_FPMUL:\n+    case TYPE_FPDIVS:\n+    case TYPE_FPSQRTS:\n+    case TYPE_FPDIVD:\n+    case TYPE_FPSQRTD:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n /* We use a machine specific pass to enable workarounds for errata.\n \n    We need to have the (essentially) final form of the insn stream in order\n@@ -970,11 +995,34 @@ sparc_do_work_around_errata (void)\n     {\n       bool insert_nop = false;\n       rtx set;\n+      rtx_insn *jump;\n+      rtx_sequence *seq;\n \n       /* Look into the instruction in a delay slot.  */\n-      if (NONJUMP_INSN_P (insn))\n-\tif (rtx_sequence *seq = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n-\t  insn = seq->insn (1);\n+      if (NONJUMP_INSN_P (insn)\n+\t  && (seq = dyn_cast <rtx_sequence *> (PATTERN (insn))))\n+\t  {\n+\t    jump = seq->insn (0);\n+\t    insn = seq->insn (1);\n+\t  }\n+      else if (JUMP_P (insn))\n+\tjump = insn;\n+      else\n+\tjump = NULL;\n+\n+      /* Place a NOP at the branch target of an integer branch if it is\n+\t a floating-point operation or a floating-point branch.  */\n+      if (sparc_fix_gr712rc\n+\t  && jump != NULL_RTX\n+\t  && get_attr_branch_type (jump) == BRANCH_TYPE_ICC)\n+\t{\n+\t  rtx_insn *target = next_active_insn (JUMP_LABEL_AS_INSN (jump));\n+\t  if (target\n+\t      && (fpop_insn_p (target)\n+\t\t  || ((JUMP_P (target)\n+\t\t       && get_attr_branch_type (target) == BRANCH_TYPE_FCC))))\n+\t    emit_insn_before (gen_nop (), target);\n+\t}\n \n       /* Look for either of these two sequences:\n \n@@ -1303,7 +1351,8 @@ class pass_work_around_errata : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return sparc_fix_at697f || sparc_fix_ut699 || sparc_fix_b2bst;\n+      return sparc_fix_at697f || sparc_fix_ut699 || sparc_fix_b2bst\n+\t  || sparc_fix_gr712rc;\n     }\n \n   virtual unsigned int execute (function *)"}, {"sha": "c6f3b61ad6a115e7e04268673637b9b6d02807f7", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcacda0cc1c9ecd23c15e8403e8025129502fed9/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcacda0cc1c9ecd23c15e8403e8025129502fed9/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=dcacda0cc1c9ecd23c15e8403e8025129502fed9", "patch": "@@ -430,6 +430,10 @@\n    (symbol_ref \"(sparc_fix_b2bst != 0\n \t\t ? FIX_B2BST_TRUE : FIX_B2BST_FALSE)\"))\n \n+(define_attr \"fix_gr712rc\" \"false,true\"\n+   (symbol_ref \"(sparc_fix_gr712rc != 0\n+\t\t ? FIX_GR712RC_TRUE : FIX_GR712RC_FALSE)\"))\n+\n ;; Length (in # of insns).\n ;; Beware that setting a length greater or equal to 3 for conditional branches\n ;; has a side-effect (see output_cbranch and output_v9branch).\n@@ -590,6 +594,15 @@\n \t   (const_string \"true\")\n \t] (const_string \"false\")))\n \n+(define_attr \"in_integer_branch_annul_delay\" \"false,true\"\n+  (cond [(and (eq_attr \"fix_gr712rc\" \"true\")\n+\t      (eq_attr \"type\" \"fp,fpcmp,fpmove,fpcmove,fpmul,\n+\t\t\t       fpdivs,fpsqrts,fpdivd,fpsqrtd\"))\n+\t   (const_string \"false\")\n+\t (eq_attr \"in_branch_delay\" \"true\")\n+\t   (const_string \"true\")\n+\t] (const_string \"false\")))\n+\n (define_delay (eq_attr \"type\" \"call\")\n   [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n \n@@ -599,9 +612,15 @@\n (define_delay (eq_attr \"type\" \"return\")\n   [(eq_attr \"in_return_delay\" \"true\") (nil) (nil)])\n \n-(define_delay (eq_attr \"type\" \"branch\")\n+(define_delay (and (eq_attr \"type\" \"branch\")\n+\t      (not (eq_attr \"branch_type\" \"icc\")))\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (eq_attr \"in_branch_delay\" \"true\")])\n \n+(define_delay (and (eq_attr \"type\" \"branch\")\n+\t      (eq_attr \"branch_type\" \"icc\"))\n+  [(eq_attr \"in_branch_delay\" \"true\") (nil)\n+  (eq_attr \"in_integer_branch_annul_delay\" \"true\")])\n+\n (define_delay (eq_attr \"type\" \"uncond_branch\")\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n "}]}