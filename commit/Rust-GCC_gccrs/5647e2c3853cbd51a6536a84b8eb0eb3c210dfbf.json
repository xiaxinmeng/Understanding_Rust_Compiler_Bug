{"sha": "5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf", "node_id": "C_kwDOANBUbNoAKDU2NDdlMmMzODUzY2JkNTFhNjUzNmE4NGI4ZWIwZWIzYzIxMGRmYmY", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-07-07T07:45:42Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-07-07T10:38:51Z"}, "message": "Enhance 'libgomp.c-c++-common/requires-4.c', 'libgomp.c-c++-common/requires-5.c' testing\n\nThese should compile and link and execute in all configurations; host-fallback\nexecution, which we may actually verify.\n\nFollow-up to recent commit 683f11843974f0bdf42f79cdcbb0c2b43c7b81b0\n\"OpenMP: Move omp requires checks to libgomp\".\n\n\tlibgomp/\n\t* testsuite/libgomp.c-c++-common/requires-4.c: Enhance testing.\n\t* testsuite/libgomp.c-c++-common/requires-5.c: Likewise.", "tree": {"sha": "4a4b0c74037c43ec40f8550534eb3886b90ea4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a4b0c74037c43ec40f8550534eb3886b90ea4cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99831ceb872cd1a3f3207fd2dfe03ef65dd9089b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99831ceb872cd1a3f3207fd2dfe03ef65dd9089b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99831ceb872cd1a3f3207fd2dfe03ef65dd9089b"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "6ed5a5f647a8b5656f7b3cb944843097d6f38626", "filename": "libgomp/testsuite/libgomp.c-c++-common/requires-4.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-4.c?ref=5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf", "patch": "@@ -1,22 +1,33 @@\n-/* { dg-do link { target offloading_enabled } } */\n /* { dg-additional-options \"-flto\" } */\n /* { dg-additional-sources requires-4-aux.c } */\n \n-/* Check diagnostic by device-compiler's or host compiler's lto1.\n+/* Check no diagnostic by device-compiler's or host compiler's lto1.\n    Other file uses: 'requires reverse_offload', but that's inactive as\n    there are no declare target directives, device constructs nor device routines  */\n \n+/* Depending on offload device capabilities, it may print something like the\n+   following (only) if GOMP_DEBUG=1:\n+   \"devices present but 'omp requires unified_address, unified_shared_memory, reverse_offload' cannot be fulfilled\"\n+   and in that case does host-fallback execution.\n+\n+   No offload devices support USM at present, so we may verify host-fallback\n+   execution by presence of separate memory spaces.  */\n+\n #pragma omp requires unified_address,unified_shared_memory\n \n-int a[10];\n+int a[10] = { 0 };\n extern void foo (void);\n \n int\n main (void)\n {\n-  #pragma omp target\n+  #pragma omp target map(to: a)\n+  for (int i = 0; i < 10; i++)\n+    a[i] = i;\n+\n   for (int i = 0; i < 10; i++)\n-    a[i] = 0;\n+    if (a[i] != i)\n+      __builtin_abort ();\n \n   foo ();\n   return 0;"}, {"sha": "7fe0c735d277e8acd7de610358b8970546901e10", "filename": "libgomp/testsuite/libgomp.c-c++-common/requires-5.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-5.c?ref=5647e2c3853cbd51a6536a84b8eb0eb3c210dfbf", "patch": "@@ -1,21 +1,29 @@\n-/* { dg-do run { target { offload_target_nvptx || offload_target_amdgcn } } } */\n /* { dg-additional-sources requires-5-aux.c } */\n \n+/* Depending on offload device capabilities, it may print something like the\n+   following (only) if GOMP_DEBUG=1:\n+   \"devices present but 'omp requires unified_address, unified_shared_memory, reverse_offload' cannot be fulfilled\"\n+   and in that case does host-fallback execution.\n+\n+   As no offload devices support USM at present, we may verify host-fallback\n+   execution by absence of separate memory spaces.  */\n+\n #pragma omp requires unified_shared_memory, unified_address, reverse_offload\n \n-int a[10];\n+int a[10] = { 0 };\n extern void foo (void);\n \n int\n main (void)\n {\n-  #pragma omp target\n+  #pragma omp target map(to: a)\n   for (int i = 0; i < 10; i++)\n-    a[i] = 0;\n+    a[i] = i;\n+\n+  for (int i = 0; i < 10; i++)\n+    if (a[i] != i)\n+      __builtin_abort ();\n \n   foo ();\n   return 0;\n }\n-\n-/* (Only) if GOMP_DEBUG=1, should print at runtime the following:\n-   \"devices present but 'omp requires unified_address, unified_shared_memory, reverse_offload' cannot be fulfilled\" */"}]}