{"sha": "bcb8c3bba756feb252340757e0944956684b7cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiOGMzYmJhNzU2ZmViMjUyMzQwNzU3ZTA5NDQ5NTY2ODRiN2NmYg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-03-29T12:46:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-05T13:09:13Z"}, "message": "[Ada] INOX: prototype alternative accessibility model\n\ngcc/ada/\n\n\t* checks.adb (Accessibility_Checks_Suppressed): Add check\n\tagainst restriction No_Dynamic_Accessibility_Checks.\n\t(Apply_Accessibility_Check): Add assertion to check restriction\n\tNo_Dynamic_Accessibility_Checks is not active.\n\t* debug.adb: Add documentation for new debugging switch to\n\tcontrol which accessibility model gets employed under\n\trestriction No_Dynamic_Accessibility_Checks.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Disable dynamic\n\taccessibility check generation when\n\tNo_Dynamic_Accessibility_Checks is active.\n\t* exp_ch4.adb (Apply_Accessibility_Check): Skip check generation\n\twhen restriction No_Dynamic_Accessibility_Checks is active.\n\t(Expand_N_Allocator): Disable dynamic accessibility checks when\n\tNo_Dynamic_Accessibility_Checks is active.\n\t(Expand_N_In): Disable dynamic accessibility checks when\n\tNo_Dynamic_Accessibility_Checks is active.\n\t(Expand_N_Type_Conversion): Disable dynamic accessibility checks\n\twhen No_Dynamic_Accessibility_Checks is active.\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Disable\n\talternative accessibility model calculations when computing a\n\tdynamic level for a SAOAAT.\n\t* exp_ch6.adb (Add_Call_By_Copy_Code): Disable dynamic\n\taccessibility check generation when\n\tNo_Dynamic_Accessibility_Checks is active.\n\t(Expand_Branch): Disable alternative accessibility model\n\tcalculations.\n\t(Expand_Call_Helper): Disable alternative accessibility model\n\tcalculations.\n\t* restrict.adb, restrict.ads: Add new restriction\n\tNo_Dynamic_Accessibility_Checks.\n\t(No_Dynamic_Accessibility_Checks_Enabled): Created to test when\n\texperimental features (which are generally incompatible with\n\tstandard Ada) can be enabled.\n\t* sem_attr.adb (Safe_Value_Conversions): Add handling of new\n\taccessibility model under the restriction\n\tNo_Dynamic_Accessibility_Checks.\n\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n\tDisallow new restriction No_Dynamic_Accessibility_Checks from\n\tbeing exclusively specified within a body or subunit without\n\tbeing present in a specification.\n\t* sem_res.adb (Check_Fully_Declared_Prefix): Minor comment\n\tfixup.\n\t(Valid_Conversion): Omit implicit conversion checks on anonymous\n\taccess types and perform static checking instead when\n\tNo_Dynamic_Accessibility_Checks is active.\n\t* sem_util.adb, sem_util.ads (Accessibility_Level): Add special\n\thandling of anonymous access objects, formal parameters,\n\tanonymous access components, and function return objects.\n\t(Deepest_Type_Access_Level): When\n\tNo_Dynamic_Accessibility_Checks is active employ an alternative\n\tmodel. Add paramter Allow_Alt_Model to override the new behavior\n\tin certain cases.\n\t(Type_Access_Level): When No_Dynamic_Accessibility_Checks is\n\tactive employ an alternative model. Add parameter\n\tAllow_Alt_Model to override the new behavior in certain cases.\n\t(Typ_Access_Level): Created within Accessibility_Level for\n\tconvenience.\n\t* libgnat/s-rident.ads, snames.ads-tmpl: Add handing for\n\tNo_Dynamic_Accessibility_Checks.", "tree": {"sha": "f01d8dbd3bee7d2e95ad86c9dc787cfca8cd5e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f01d8dbd3bee7d2e95ad86c9dc787cfca8cd5e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb8c3bba756feb252340757e0944956684b7cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb8c3bba756feb252340757e0944956684b7cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb8c3bba756feb252340757e0944956684b7cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb8c3bba756feb252340757e0944956684b7cfb/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d721c09a5c8e4fb48d0a7a07da9220915bf0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d721c09a5c8e4fb48d0a7a07da9220915bf0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d721c09a5c8e4fb48d0a7a07da9220915bf0c1"}], "stats": {"total": 387, "additions": 332, "deletions": 55}, "files": [{"sha": "96a2a3f3df1d5359599a048b9aa7209587d18cac", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -379,8 +379,12 @@ package body Checks is\n \n    function Accessibility_Checks_Suppressed (E : Entity_Id) return Boolean is\n    begin\n-      if Present (E) and then Checks_May_Be_Suppressed (E) then\n+      if No_Dynamic_Accessibility_Checks_Enabled (E) then\n+         return True;\n+\n+      elsif Present (E) and then Checks_May_Be_Suppressed (E) then\n          return Is_Check_Suppressed (E, Accessibility_Check);\n+\n       else\n          return Scope_Suppress.Suppress (Accessibility_Check);\n       end if;\n@@ -582,6 +586,11 @@ package body Checks is\n       Type_Level  : Node_Id;\n \n    begin\n+      --  Verify we haven't tried to add a dynamic accessibility check when we\n+      --  shouldn't.\n+\n+      pragma Assert (not No_Dynamic_Accessibility_Checks_Enabled (N));\n+\n       if Ada_Version >= Ada_2012\n          and then not Present (Param_Ent)\n          and then Is_Entity_Name (N)"}, {"sha": "5a4d1d3cdaaf1a8d744d57faee90022d4ee66951", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -140,7 +140,7 @@ package body Debug is\n    --  d.Z  Do not enable expansion in configurable run-time mode\n \n    --  d_a  Stop elaboration checks on accept or select statement\n-   --  d_b\n+   --  d_b  Use compatibility model under No_Dynamic_Accessibility_Checks\n    --  d_c  CUDA compilation : compile for the host\n    --  d_d\n    --  d_e  Ignore entry calls and requeue statements for elaboration"}, {"sha": "067e7ede704618a2f3867f0a9fa7fba5538760fe", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -2366,6 +2366,7 @@ package body Exp_Attr is\n                          = E_Anonymous_Access_Type\n               and then Present (Extra_Accessibility\n                                 (Entity (Prefix (Enc_Object))))\n+              and then not No_Dynamic_Accessibility_Checks_Enabled (Enc_Object)\n             then\n                Apply_Accessibility_Check (Prefix (Enc_Object), Typ, N);\n "}, {"sha": "d608a30a6912036afac1cec756c2b2f982ab39f7", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -615,6 +615,7 @@ package body Exp_Ch4 is\n            and then Is_Class_Wide_Type (DesigT)\n            and then Tagged_Type_Expansion\n            and then not Scope_Suppress.Suppress (Accessibility_Check)\n+           and then not No_Dynamic_Accessibility_Checks_Enabled (Ref)\n            and then\n              (Type_Access_Level (Etype (Exp)) > Type_Access_Level (PtrT)\n                or else\n@@ -5277,6 +5278,8 @@ package body Exp_Ch4 is\n                         if Ada_Version >= Ada_2005\n                           and then\n                             Ekind (Etype (Nod)) = E_Anonymous_Access_Type\n+                          and then not\n+                            No_Dynamic_Accessibility_Checks_Enabled (Nod)\n                         then\n                            Apply_Accessibility_Check\n                              (Nod, Typ, Insert_Node => Nod);\n@@ -6865,6 +6868,7 @@ package body Exp_Ch4 is\n             if Ada_Version >= Ada_2012\n               and then Is_Acc\n               and then Ekind (Ltyp) = E_Anonymous_Access_Type\n+              and then not No_Dynamic_Accessibility_Checks_Enabled (Lop)\n             then\n                declare\n                   Expr_Entity : Entity_Id := Empty;\n@@ -12333,6 +12337,7 @@ package body Exp_Ch4 is\n            and then Ekind (Etype (Operand_Acc)) = E_Anonymous_Access_Type\n            and then (Nkind (Original_Node (N)) /= N_Attribute_Reference\n                       or else Attribute_Name (Original_Node (N)) = Name_Access)\n+           and then not No_Dynamic_Accessibility_Checks_Enabled (N)\n          then\n             if not Comes_From_Source (N)\n               and then Nkind (Parent (N)) in N_Function_Call"}, {"sha": "2cc8b64f083b88fa3369c6195e3baa30e540e418", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -2771,7 +2771,9 @@ package body Exp_Ch5 is\n                                             (Entity (Lhs)), Loc),\n                                      Expression =>\n                                        Accessibility_Level\n-                                         (Rhs, Dynamic_Level));\n+                                         (Expr            => Rhs,\n+                                          Level           => Dynamic_Level,\n+                                          Allow_Alt_Model => False));\n \n          begin\n             if not Accessibility_Checks_Suppressed (Entity (Lhs)) then"}, {"sha": "80ed21b597243a4c6083e362a5f42b0b8459c5c1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -1803,6 +1803,7 @@ package body Exp_Ch6 is\n                  and then Is_Entity_Name (Lhs)\n                  and then\n                    Present (Effective_Extra_Accessibility (Entity (Lhs)))\n+                 and then not No_Dynamic_Accessibility_Checks_Enabled (Lhs)\n                then\n                   --  Copyback target is an Ada 2012 stand-alone object of an\n                   --  anonymous access type.\n@@ -2929,7 +2930,9 @@ package body Exp_Ch6 is\n                       Name       => New_Occurrence_Of (Lvl, Loc),\n                       Expression =>\n                         Accessibility_Level\n-                          (Expression (Res_Assn), Dynamic_Level)));\n+                          (Expr            => Expression (Res_Assn),\n+                           Level           => Dynamic_Level,\n+                           Allow_Alt_Model => False)));\n                end if;\n             end Expand_Branch;\n \n@@ -3857,9 +3860,10 @@ package body Exp_Ch6 is\n                   end if;\n \n                   Add_Extra_Actual\n-                    (Expr =>\n-                       New_Occurrence_Of\n-                         (Get_Dynamic_Accessibility (Parm_Ent), Loc),\n+                    (Expr => Accessibility_Level\n+                               (Expr            => Parm_Ent,\n+                                Level           => Dynamic_Level,\n+                                Allow_Alt_Model => False),\n                      EF   => Extra_Accessibility (Formal));\n                end;\n \n@@ -3890,15 +3894,20 @@ package body Exp_Ch6 is\n \n                Add_Extra_Actual\n                  (Expr => Accessibility_Level\n-                            (Expr  => Expression (Parent (Entity (Prev))),\n-                             Level => Dynamic_Level),\n+                            (Expr            => Expression\n+                                                  (Parent (Entity (Prev))),\n+                             Level           => Dynamic_Level,\n+                             Allow_Alt_Model => False),\n                   EF   => Extra_Accessibility (Formal));\n \n             --  Normal case\n \n             else\n                Add_Extra_Actual\n-                 (Expr => Accessibility_Level (Prev, Dynamic_Level),\n+                 (Expr => Accessibility_Level\n+                            (Expr            => Prev,\n+                             Level           => Dynamic_Level,\n+                             Allow_Alt_Model => False),\n                   EF   => Extra_Accessibility (Formal));\n             end if;\n          end if;\n@@ -4142,8 +4151,10 @@ package body Exp_Ch6 is\n             --  Otherwise get the level normally based on the call node\n \n             else\n-               Level := Accessibility_Level (Call_Node, Dynamic_Level);\n-\n+               Level := Accessibility_Level\n+                          (Expr            => Call_Node,\n+                           Level           => Dynamic_Level,\n+                           Allow_Alt_Model => False);\n             end if;\n \n             --  It may be possible that we are re-expanding an already"}, {"sha": "10d374ee53955f9d2c16e769615bfbaea3e78a2a", "filename": "gcc/ada/libgnat/s-rident.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Flibgnat%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Flibgnat%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rident.ads?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -103,6 +103,7 @@ package System.Rident is\n       No_Direct_Boolean_Operators,               -- GNAT\n       No_Dispatch,                               -- (RM H.4(19))\n       No_Dispatching_Calls,                      -- GNAT\n+      No_Dynamic_Accessibility_Checks,           -- GNAT\n       No_Dynamic_Attachment,                     -- Ada 2012 (RM E.7(10/3))\n       No_Dynamic_CPU_Assignment,                 -- Ada 202x (RM D.7(10/3))\n       No_Dynamic_Priorities,                     -- (RM D.9(9))"}, {"sha": "4f1dea4adef17c52fec4eab3517d9126947ae0aa", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -924,6 +924,21 @@ package body Restrict is\n         or else Targparm.Restrictions_On_Target.Set (No_Tasking);\n    end Global_No_Tasking;\n \n+   ---------------------------------------------\n+   -- No_Dynamic_Accessibility_Checks_Enabled --\n+   ---------------------------------------------\n+\n+   function No_Dynamic_Accessibility_Checks_Enabled\n+     (N : Node_Id) return Boolean\n+   is\n+      pragma Unreferenced (N);\n+      --  N is currently unreferenced but present for debugging purposes and\n+      --  potential future use.\n+\n+   begin\n+      return Restrictions.Set (No_Dynamic_Accessibility_Checks);\n+   end No_Dynamic_Accessibility_Checks_Enabled;\n+\n    -------------------------------\n    -- No_Exception_Handlers_Set --\n    -------------------------------"}, {"sha": "eec85c21283e6ea61a67eebeb75f135f6947bb9a", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -114,6 +114,7 @@ package Restrict is\n       No_Default_Initialization          => True,\n       No_Direct_Boolean_Operators        => True,\n       No_Dispatching_Calls               => True,\n+      No_Dynamic_Accessibility_Checks    => True,\n       No_Dynamic_Attachment              => True,\n       No_Elaboration_Code                => True,\n       No_Enumeration_Maps                => True,\n@@ -377,6 +378,15 @@ package Restrict is\n    --  pragma Restrictions_Warning, or attribute Restriction_Set. Returns\n    --  True if N has the proper form for an entity name, False otherwise.\n \n+   function No_Dynamic_Accessibility_Checks_Enabled\n+     (N : Node_Id) return Boolean;\n+   --  Test to see if the current restrictions settings specify that\n+   --  No_Dynamic_Accessibility_Checks is activated.\n+\n+   --  N is currently unused, but is reserved for future use and debugging\n+   --  purposes to provide more context on a node for which an accessibility\n+   --  check is being performed or generated (e.g. is N in a predefined unit).\n+\n    function No_Exception_Handlers_Set return Boolean;\n    --  Test to see if current restrictions settings specify that no exception\n    --  handlers are present. This function is called by Gigi when it needs to"}, {"sha": "e0b2072307fc0b0237477d6bbb1c6c4389437b36", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -11290,7 +11290,11 @@ package body Sem_Attr is\n                   --  this kind of warning is an error in SPARK mode.\n \n                   if In_Instance_Body then\n-                     Error_Msg_Warn := SPARK_Mode /= On;\n+                     Error_Msg_Warn :=\n+                       SPARK_Mode /= On\n+                         and then\n+                           not No_Dynamic_Accessibility_Checks_Enabled (P);\n+\n                      Error_Msg_F\n                        (\"non-local pointer cannot point to local object<<\", P);\n                      Error_Msg_F (\"\\Program_Error [<<\", P);\n@@ -11422,10 +11426,13 @@ package body Sem_Attr is\n                --  Check the static accessibility rule of 3.10.2(28). Note that\n                --  this check is not performed for the case of an anonymous\n                --  access type, since the access attribute is always legal\n-               --  in such a context.\n+               --  in such a context - unless the restriction\n+               --  No_Dynamic_Accessibility_Checks is active.\n \n                if Attr_Id /= Attribute_Unchecked_Access\n-                 and then Ekind (Btyp) = E_General_Access_Type\n+                 and then\n+                   (Ekind (Btyp) = E_General_Access_Type\n+                      or else No_Dynamic_Accessibility_Checks_Enabled (Btyp))\n \n                  --  Call Accessibility_Level directly to avoid returning zero\n                  --  on cases where the prefix is an explicitly aliased"}, {"sha": "fa63fdae7300d3cd54ea68736b383eb8a60b875a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -10483,6 +10483,41 @@ package body Sem_Prag is\n                      Add_To_Config_Boolean_Restrictions (No_Elaboration_Code);\n                   end if;\n \n+               --  Special processing for No_Dynamic_Accessibility_Checks to\n+               --  disallow exclusive specification in a body or subunit.\n+\n+               elsif R_Id = No_Dynamic_Accessibility_Checks\n+                 --  Check if the restriction is within configuration pragma\n+                 --  in a similar way to No_Elaboration_Code.\n+\n+                 and then not (Current_Sem_Unit = Main_Unit\n+                                or else In_Extended_Main_Source_Unit (N))\n+\n+                 and then Nkind (Unit (Parent (N))) = N_Compilation_Unit\n+\n+                 and then (Nkind (Unit (Parent (N))) = N_Package_Body\n+                            or else Nkind (Unit (Parent (N))) = N_Subunit)\n+\n+                 and then not Restriction_Active\n+                                (No_Dynamic_Accessibility_Checks)\n+               then\n+                  Error_Msg_N\n+                    (\"invalid specification of \" &\n+                     \"\"\"No_Dynamic_Accessibility_Checks\"\"\", N);\n+\n+                  if Nkind (Unit (Parent (N))) = N_Package_Body then\n+                     Error_Msg_N\n+                       (\"\\restriction cannot be specified in a package \" &\n+                         \"body\", N);\n+\n+                  elsif Nkind (Unit (Parent (N))) = N_Subunit then\n+                     Error_Msg_N\n+                       (\"\\restriction cannot be specified in a subunit\", N);\n+                  end if;\n+\n+                  Error_Msg_N\n+                    (\"\\unless also specified in spec\", N);\n+\n                --  Special processing for No_Tasking restriction (not just a\n                --  warning) when it appears as a configuration pragma.\n "}, {"sha": "fb40484f2a6314ca692a5ed5e5355ae8309186a4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -654,9 +654,9 @@ package body Sem_Res is\n       end if;\n    end Check_For_Visible_Operator;\n \n-   ----------------------------------\n-   --  Check_Fully_Declared_Prefix --\n-   ----------------------------------\n+   ---------------------------------\n+   -- Check_Fully_Declared_Prefix --\n+   ---------------------------------\n \n    procedure Check_Fully_Declared_Prefix\n      (Typ  : Entity_Id;\n@@ -13676,12 +13676,24 @@ package body Sem_Res is\n             then\n                if Is_Itype (Opnd_Type) then\n \n+                  --  When applying restriction No_Dynamic_Accessibility_Check,\n+                  --  implicit conversions are allowed when the operand type is\n+                  --  not deeper than the target type.\n+\n+                  if No_Dynamic_Accessibility_Checks_Enabled (N) then\n+                     if Type_Access_Level (Opnd_Type)\n+                          > Deepest_Type_Access_Level (Target_Type)\n+                     then\n+                        Conversion_Error_N\n+                          (\"operand has deeper level than target\", Operand);\n+                     end if;\n+\n                   --  Implicit conversions aren't allowed for objects of an\n                   --  anonymous access type, since such objects have nonstatic\n                   --  levels in Ada 2012.\n \n-                  if Nkind (Associated_Node_For_Itype (Opnd_Type)) =\n-                       N_Object_Declaration\n+                  elsif Nkind (Associated_Node_For_Itype (Opnd_Type))\n+                          = N_Object_Declaration\n                   then\n                      Conversion_Error_N\n                        (\"implicit conversion of stand-alone anonymous \""}, {"sha": "e0a12bddca12ed22c4736c0d81d53a9ba44b605d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 184, "deletions": 31, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -177,9 +177,9 @@ package body Sem_Util is\n    --  \"subp:file:line:col\", corresponding to the source location of the\n    --  body of the subprogram.\n \n-   ------------------------------\n-   --  Abstract_Interface_List --\n-   ------------------------------\n+   -----------------------------\n+   -- Abstract_Interface_List --\n+   -----------------------------\n \n    function Abstract_Interface_List (Typ : Entity_Id) return List_Id is\n       Nod : Node_Id;\n@@ -260,7 +260,8 @@ package body Sem_Util is\n    function Accessibility_Level\n      (Expr              : Node_Id;\n       Level             : Accessibility_Level_Kind;\n-      In_Return_Context : Boolean := False) return Node_Id\n+      In_Return_Context : Boolean := False;\n+      Allow_Alt_Model   : Boolean := True) return Node_Id\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n \n@@ -281,6 +282,11 @@ package body Sem_Util is\n       --  Centralized processing of subprogram calls which may appear in\n       --  prefix notation.\n \n+      function Typ_Access_Level (Typ : Entity_Id) return Uint\n+        is (Type_Access_Level (Typ, Allow_Alt_Model));\n+      --  Renaming of Type_Access_Level with Allow_Alt_Model specified to avoid\n+      --  passing the parameter specifically in every call.\n+\n       ----------------------------------\n       -- Innermost_Master_Scope_Depth --\n       ----------------------------------\n@@ -375,7 +381,7 @@ package body Sem_Util is\n                         (Subprogram_Access_Level (Entity (Name (N))));\n             else\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (Prefix (Name (N)))));\n+                        (Typ_Access_Level (Etype (Prefix (Name (N)))));\n             end if;\n \n          --  We ignore coextensions as they cannot be implemented under the\n@@ -392,19 +398,39 @@ package body Sem_Util is\n          --  Named access types have a designated level\n \n          if Is_Named_Access_Type (Etype (N)) then\n-            return Make_Level_Literal (Type_Access_Level (Etype (N)));\n+            return Make_Level_Literal (Typ_Access_Level (Etype (N)));\n \n          --  Otherwise, the level is dictated by RM 3.10.2 (10.7/3)\n \n          else\n+            --  Check No_Dynamic_Accessibility_Checks restriction override for\n+            --  alternative accessibility model.\n+\n+            if Allow_Alt_Model\n+              and then No_Dynamic_Accessibility_Checks_Enabled (N)\n+              and then Is_Anonymous_Access_Type (Etype (N))\n+            then\n+               --  In the alternative model the level is that of the subprogram\n+\n+               if Debug_Flag_Underscore_B then\n+                  return Make_Level_Literal\n+                           (Subprogram_Access_Level (Current_Subprogram));\n+               end if;\n+\n+               --  Otherwise the level is that of the designated type\n+\n+               return Make_Level_Literal\n+                        (Typ_Access_Level (Etype (N)));\n+            end if;\n+\n             if Nkind (N) = N_Function_Call then\n                --  Dynamic checks are generated when we are within a return\n                --  value or we are in a function call within an anonymous\n                --  access discriminant constraint of a return object (signified\n                --  by In_Return_Context) on the side of the callee.\n \n-               --  So, in this case, return library accessibility level to null\n-               --  out the check on the side of the caller.\n+               --  So, in this case, return accessibility level of the\n+               --  enclosing subprogram.\n \n                if In_Return_Value (N)\n                  or else In_Return_Context\n@@ -414,6 +440,17 @@ package body Sem_Util is\n                end if;\n             end if;\n \n+            --  When the call is being dereferenced the level is that of the\n+            --  enclosing master of the dereferenced call.\n+\n+            if Nkind (Parent (N)) in N_Explicit_Dereference\n+                                   | N_Indexed_Component\n+                                   | N_Selected_Component\n+            then\n+               return Make_Level_Literal\n+                        (Innermost_Master_Scope_Depth (Expr));\n+            end if;\n+\n             --  Find any relevant enclosing parent nodes that designate an\n             --  object being initialized.\n \n@@ -434,7 +471,7 @@ package body Sem_Util is\n                  and then Is_Named_Access_Type (Etype (Par))\n                then\n                   return Make_Level_Literal\n-                           (Type_Access_Level (Etype (Par)));\n+                           (Typ_Access_Level (Etype (Par)));\n                end if;\n \n                --  Jump out when we hit an object declaration or the right-hand\n@@ -551,7 +588,7 @@ package body Sem_Util is\n \n                if Is_Named_Access_Type (Etype (Pre)) then\n                   return Make_Level_Literal\n-                           (Type_Access_Level (Etype (Pre)));\n+                           (Typ_Access_Level (Etype (Pre)));\n \n                --  Anonymous access types\n \n@@ -616,8 +653,36 @@ package body Sem_Util is\n                            (Scope_Depth (Standard_Standard));\n                end if;\n \n-               return\n-                 New_Occurrence_Of (Get_Dynamic_Accessibility (E), Loc);\n+               --  No_Dynamic_Accessibility_Checks restriction override for\n+               --  alternative accessibility model.\n+\n+               if Allow_Alt_Model\n+                 and then No_Dynamic_Accessibility_Checks_Enabled (E)\n+               then\n+                  --  In the alternative model the level depends on the\n+                  --  entity's context.\n+\n+                  if Debug_Flag_Underscore_B then\n+                     if Is_Formal (E) then\n+                        return Make_Level_Literal\n+                                 (Subprogram_Access_Level\n+                                   (Enclosing_Subprogram (E)));\n+                     end if;\n+\n+                     return Make_Level_Literal\n+                              (Scope_Depth (Enclosing_Dynamic_Scope (E)));\n+                  end if;\n+\n+                  --  Otherwise the level is that of the designated type\n+\n+                  return Make_Level_Literal\n+                           (Typ_Access_Level (Etype (E)));\n+               end if;\n+\n+               --  Return the dynamic level in the normal case\n+\n+               return New_Occurrence_Of\n+                        (Get_Dynamic_Accessibility (E), Loc);\n \n             --  Initialization procedures have a special extra accessitility\n             --  parameter associated with the level at which the object\n@@ -635,8 +700,18 @@ package body Sem_Util is\n             --  according to RM 3.10.2 (21).\n \n             elsif Is_Type (E) then\n-               return Make_Level_Literal\n-                        (Type_Access_Level (E) + 1);\n+               --  When restriction No_Dynamic_Accessibility_Checks is active\n+\n+               if Allow_Alt_Model\n+                 and then No_Dynamic_Accessibility_Checks_Enabled (E)\n+                 and then not Debug_Flag_Underscore_B\n+               then\n+                  return Make_Level_Literal (Typ_Access_Level (E));\n+               end if;\n+\n+               --  Normal path\n+\n+               return Make_Level_Literal (Typ_Access_Level (E) + 1);\n \n             --  Move up the renamed entity if it came from source since\n             --  expansion may have created a dummy renaming under certain\n@@ -651,7 +726,7 @@ package body Sem_Util is\n \n             elsif Is_Named_Access_Type (Etype (E)) then\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (E)));\n+                        (Typ_Access_Level (Etype (E)));\n \n             --  When E is a component of the current instance of a\n             --  protected type, we assume the level to be deeper than that of\n@@ -702,15 +777,15 @@ package body Sem_Util is\n \n             elsif Is_Named_Access_Type (Etype (Pre)) then\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (Pre)));\n+                        (Typ_Access_Level (Etype (Pre)));\n \n             --  The current expression is a named access type, so there is no\n             --  reason to look at the prefix. Instead obtain the level of E's\n             --  named access type.\n \n             elsif Is_Named_Access_Type (Etype (E)) then\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (E)));\n+                        (Typ_Access_Level (Etype (E)));\n \n             --  A nondiscriminant selected component where the component\n             --  is an anonymous access type means that its associated\n@@ -723,8 +798,21 @@ package body Sem_Util is\n                              and then Ekind (Entity (Selector_Name (E)))\n                                         = E_Discriminant)\n             then\n+               --  When restriction No_Dynamic_Accessibility_Checks is active\n+               --  the level is that of the designated type.\n+\n+               if Allow_Alt_Model\n+                 and then No_Dynamic_Accessibility_Checks_Enabled (E)\n+                 and then not Debug_Flag_Underscore_B\n+               then\n+                  return Make_Level_Literal\n+                           (Typ_Access_Level (Etype (E)));\n+               end if;\n+\n+               --  Otherwise proceed normally\n+\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (Prefix (E))));\n+                        (Typ_Access_Level (Etype (Prefix (E))));\n \n             --  Similar to the previous case - arrays featuring components of\n             --  anonymous access components get their corresponding level from\n@@ -736,8 +824,21 @@ package body Sem_Util is\n               and then Ekind (Component_Type (Base_Type (Etype (Pre))))\n                          = E_Anonymous_Access_Type\n             then\n+               --  When restriction No_Dynamic_Accessibility_Checks is active\n+               --  the level is that of the designated type.\n+\n+               if Allow_Alt_Model\n+                 and then No_Dynamic_Accessibility_Checks_Enabled (E)\n+                 and then not Debug_Flag_Underscore_B\n+               then\n+                  return Make_Level_Literal\n+                           (Typ_Access_Level (Etype (E)));\n+               end if;\n+\n+               --  Otherwise proceed normally\n+\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (Prefix (E))));\n+                        (Typ_Access_Level (Etype (Prefix (E))));\n \n             --  The accessibility calculation routine that handles function\n             --  calls (Function_Call_Level) assumes, in the case the\n@@ -785,7 +886,7 @@ package body Sem_Util is\n          when N_Qualified_Expression =>\n             if Is_Named_Access_Type (Etype (E)) then\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (E)));\n+                        (Typ_Access_Level (Etype (E)));\n             else\n                return Accessibility_Level (Expression (E));\n             end if;\n@@ -804,7 +905,7 @@ package body Sem_Util is\n             --  its type.\n \n             if Is_Named_Access_Type (Etype (Pre)) then\n-               return Make_Level_Literal (Type_Access_Level (Etype (Pre)));\n+               return Make_Level_Literal (Typ_Access_Level (Etype (Pre)));\n \n             --  Otherwise, recurse deeper\n \n@@ -831,7 +932,7 @@ package body Sem_Util is\n \n             elsif Is_Named_Access_Type (Etype (E)) then\n                return Make_Level_Literal\n-                        (Type_Access_Level (Etype (E)));\n+                        (Typ_Access_Level (Etype (E)));\n \n             --  In section RM 3.10.2 (10/4) the accessibility rules for\n             --  aggregates and value conversions are outlined. Are these\n@@ -847,7 +948,7 @@ package body Sem_Util is\n          --  expression's entity.\n \n          when others =>\n-            return Make_Level_Literal (Type_Access_Level (Etype (E)));\n+            return Make_Level_Literal (Typ_Access_Level (Etype (E)));\n       end case;\n    end Accessibility_Level;\n \n@@ -7102,12 +7203,25 @@ package body Sem_Util is\n    -- Deepest_Type_Access_Level --\n    -------------------------------\n \n-   function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint is\n+   function Deepest_Type_Access_Level\n+     (Typ             : Entity_Id;\n+      Allow_Alt_Model : Boolean := True) return Uint\n+   is\n    begin\n       if Ekind (Typ) = E_Anonymous_Access_Type\n         and then not Is_Local_Anonymous_Access (Typ)\n         and then Nkind (Associated_Node_For_Itype (Typ)) = N_Object_Declaration\n       then\n+         --  No_Dynamic_Accessibility_Checks override for alternative\n+         --  accessibility model.\n+\n+         if Allow_Alt_Model\n+           and then No_Dynamic_Accessibility_Checks_Enabled (Typ)\n+           and then Debug_Flag_Underscore_B\n+         then\n+            return Type_Access_Level (Typ, Allow_Alt_Model);\n+         end if;\n+\n          --  Typ is the type of an Ada 2012 stand-alone object of an anonymous\n          --  access type.\n \n@@ -7123,7 +7237,7 @@ package body Sem_Util is\n          return UI_From_Int (Int'Last);\n \n       else\n-         return Type_Access_Level (Typ);\n+         return Type_Access_Level (Typ, Allow_Alt_Model);\n       end if;\n    end Deepest_Type_Access_Level;\n \n@@ -28982,12 +29096,14 @@ package body Sem_Util is\n    -- Type_Access_Level --\n    -----------------------\n \n-   function Type_Access_Level (Typ : Entity_Id) return Uint is\n-      Btyp : Entity_Id;\n+   function Type_Access_Level\n+     (Typ             : Entity_Id;\n+      Allow_Alt_Model : Boolean := True) return Uint\n+   is\n+      Btyp    : Entity_Id := Base_Type (Typ);\n+      Def_Ent : Entity_Id;\n \n    begin\n-      Btyp := Base_Type (Typ);\n-\n       --  Ada 2005 (AI-230): For most cases of anonymous access types, we\n       --  simply use the level where the type is declared. This is true for\n       --  stand-alone object declarations, and for anonymous access types\n@@ -28998,13 +29114,50 @@ package body Sem_Util is\n \n       if Is_Access_Type (Btyp) then\n          if Ekind (Btyp) = E_Anonymous_Access_Type then\n+            --  No_Dynamic_Accessibility_Checks restriction override for\n+            --  alternative accessibility model.\n+\n+            if Allow_Alt_Model\n+              and then No_Dynamic_Accessibility_Checks_Enabled (Btyp)\n+            then\n+               --  In the normal model, the level of an anonymous access\n+               --  type is always that of the designated type.\n+\n+               if not Debug_Flag_Underscore_B then\n+                  return Type_Access_Level\n+                           (Designated_Type (Btyp), Allow_Alt_Model);\n+               end if;\n+\n+               --  Otherwise the secondary model dictates special handling\n+               --  depending on the context of the anonymous access type.\n+\n+               --  Obtain the defining entity for the internally generated\n+               --  anonymous access type.\n+\n+               Def_Ent := Defining_Entity_Or_Empty\n+                            (Associated_Node_For_Itype (Typ));\n+\n+               if Present (Def_Ent) then\n+                  --  When the type comes from an anonymous access parameter,\n+                  --  the level is that of the subprogram declaration.\n+\n+                  if Ekind (Def_Ent) in Subprogram_Kind then\n+                     return Scope_Depth (Def_Ent);\n+\n+                  --  When the type is an access discriminant, the level is\n+                  --  that of the type.\n+\n+                  elsif Ekind (Def_Ent) = E_Discriminant then\n+                     return Scope_Depth (Scope (Def_Ent));\n+                  end if;\n+               end if;\n \n             --  If the type is a nonlocal anonymous access type (such as for\n             --  an access parameter) we treat it as being declared at the\n             --  library level to ensure that names such as X.all'access don't\n             --  fail static accessibility checks.\n \n-            if not Is_Local_Anonymous_Access (Typ) then\n+            elsif not Is_Local_Anonymous_Access (Typ) then\n                return Scope_Depth (Standard_Standard);\n \n             --  If this is a return object, the accessibility level is that of\n@@ -29038,7 +29191,7 @@ package body Sem_Util is\n                   --  Treat the return object's type as having the level of the\n                   --  function's result subtype (as per RM05-6.5(5.3/2)).\n \n-                  return Type_Access_Level (Etype (Scop));\n+                  return Type_Access_Level (Etype (Scop), Allow_Alt_Model);\n                end;\n             end if;\n          end if;"}, {"sha": "a49272e080f253bdc2e06da1bfe31be631b0ad68", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -65,15 +65,19 @@ package Sem_Util is\n    function Accessibility_Level\n      (Expr              : Node_Id;\n       Level             : Accessibility_Level_Kind;\n-      In_Return_Context : Boolean := False) return Node_Id;\n+      In_Return_Context : Boolean := False;\n+      Allow_Alt_Model   : Boolean := True) return Node_Id;\n    --  Centralized accessibility level calculation routine for finding the\n    --  accessibility level of a given expression Expr.\n \n-   --  In_Return_Context forcing the Accessibility_Level calculations to be\n+   --  In_Return_Context forces the Accessibility_Level calculations to be\n    --  carried out \"as if\" Expr existed in a return value. This is useful for\n    --  calculating the accessibility levels for discriminant associations\n    --  and return aggregates.\n \n+   --  The Allow_Alt_Model parameter allows the alternative level calculation\n+   --  under the restriction No_Dynamic_Accessibility_Checks to be performed.\n+\n    function Acquire_Warning_Match_String (Str_Lit : Node_Id) return String;\n    --  Used by pragma Warnings (Off, string), and Warn_As_Error (string) to get\n    --  the given string argument, adding leading and trailing asterisks if they\n@@ -662,7 +666,10 @@ package Sem_Util is\n    --  when pragma Restrictions (No_Finalization) applies, in which case we\n    --  know that class-wide objects do not contain controlled parts.\n \n-   function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint;\n+   function Deepest_Type_Access_Level\n+     (Typ             : Entity_Id;\n+      Allow_Alt_Model : Boolean := True) return Uint;\n+\n    --  Same as Type_Access_Level, except that if the type is the type of an Ada\n    --  2012 stand-alone object of an anonymous access type, then return the\n    --  static accessibility level of the object. In that case, the dynamic\n@@ -672,6 +679,9 @@ package Sem_Util is\n    --  in the case of a descendant of a generic formal type (returns Int'Last\n    --  instead of 0).\n \n+   --  The Allow_Alt_Model parameter allows the alternative level calculation\n+   --  under the restriction No_Dynamic_Accessibility_Checks to be performed.\n+\n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the\n    --  declaration has a specification, the entity is obtained from the\n@@ -3246,9 +3256,14 @@ package Sem_Util is\n    --  returned, i.e. Traverse_More_Func is called and the result is simply\n    --  discarded.\n \n-   function Type_Access_Level (Typ : Entity_Id) return Uint;\n+   function Type_Access_Level\n+     (Typ             : Entity_Id;\n+      Allow_Alt_Model : Boolean := True) return Uint;\n    --  Return the accessibility level of Typ\n \n+   --  The Allow_Alt_Model parameter allows the alternative level calculation\n+   --  under the restriction No_Dynamic_Accessibility_Checks to be performed.\n+\n    function Type_Without_Stream_Operation\n      (T  : Entity_Id;\n       Op : TSS_Name_Type := TSS_Null) return Entity_Id;"}, {"sha": "a67623b788b63532edaba7d6e523551c224d9228", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb8c3bba756feb252340757e0944956684b7cfb/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=bcb8c3bba756feb252340757e0944956684b7cfb", "patch": "@@ -827,6 +827,7 @@ package Snames is\n    Name_No_Access_Parameter_Allocators : constant Name_Id := N + $;\n    Name_No_Coextensions                : constant Name_Id := N + $;\n    Name_No_Dependence                  : constant Name_Id := N + $;\n+   Name_No_Dynamic_Accessibility_Checks : constant Name_Id := N + $;\n    Name_No_Dynamic_Attachment          : constant Name_Id := N + $;\n    Name_No_Dynamic_Interrupts          : constant Name_Id := N + $;\n    Name_No_Elaboration_Code            : constant Name_Id := N + $;"}]}