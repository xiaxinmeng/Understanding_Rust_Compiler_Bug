{"sha": "22291e2f95b19681852cbc2d5ab14b4b5f8af251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyOTFlMmY5NWIxOTY4MTg1MmNiYzJkNWFiMTRiNGI1ZjhhZjI1MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-07-06T20:45:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-07-06T20:45:59Z"}, "message": "(LEGITIMATE_BASE_REG_P): New macro.\n\n(INDIRECTABLE_1_ADDRESS_P, GO_IF_INDEXABLE_BASE,\nLEGITIMATE_INDEX_REG_P): Accept SUBREG everywhere REG is accepted.\n\nFrom-SVN: r4863", "tree": {"sha": "48b8006565abfc83928187b9f02cc8b5c5b488d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b8006565abfc83928187b9f02cc8b5c5b488d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22291e2f95b19681852cbc2d5ab14b4b5f8af251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22291e2f95b19681852cbc2d5ab14b4b5f8af251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22291e2f95b19681852cbc2d5ab14b4b5f8af251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22291e2f95b19681852cbc2d5ab14b4b5f8af251/comments", "author": null, "committer": null, "parents": [{"sha": "b165d4711a22ec9aa68b0a60126291034639168f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b165d4711a22ec9aa68b0a60126291034639168f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b165d4711a22ec9aa68b0a60126291034639168f"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "7a24ae349030f3ff463d49f55c7024efdd86da9c", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22291e2f95b19681852cbc2d5ab14b4b5f8af251/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22291e2f95b19681852cbc2d5ab14b4b5f8af251/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=22291e2f95b19681852cbc2d5ab14b4b5f8af251", "patch": "@@ -1120,14 +1120,23 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n    The other macros defined here are used only in GO_IF_LEGITIMATE_ADDRESS.  */\n \n+/* Allow SUBREG everywhere we allow REG.  This results in better code.  It\n+   also makes function inlining work when inline functions are called with\n+   arguments that are SUBREGs.  */\n+\n+#define LEGITIMATE_BASE_REG_P(X)   \\\n+  ((GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\\\n+   || (GET_CODE (X) == SUBREG\t\t\t\t\\\n+       && GET_CODE (SUBREG_REG (X)) == REG\t\t\\\n+       && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n+\n #define INDIRECTABLE_1_ADDRESS_P(X)  \\\n   ((CONSTANT_ADDRESS_P (X) && (!flag_pic || LEGITIMATE_PIC_OPERAND_P (X))) \\\n-   || (GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X))\t\t\t\\\n+   || LEGITIMATE_BASE_REG_P (X)\t\t\t\t\t\t\\\n    || ((GET_CODE (X) == PRE_DEC || GET_CODE (X) == POST_INC)\t\t\\\n-       && REG_P (XEXP (X, 0))\t\t\t\t\t\t\\\n-       && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\t\t\\\n+       && LEGITIMATE_BASE_REG_P (XEXP (X, 0)))\t\t\t\t\\\n    || (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n-       && REG_P (XEXP (X, 0)) && REG_OK_FOR_BASE_P (XEXP (X, 0))\t\\\n+       && LEGITIMATE_BASE_REG_P (XEXP (X, 0))\t\t\t\t\\\n        && GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n        && ((unsigned) INTVAL (XEXP (X, 1)) + 0x8000) < 0x10000)\t\t\\\n    || (GET_CODE (X) == PLUS && XEXP (X, 0) == pic_offset_table_rtx \t\\\n@@ -1156,7 +1165,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n       && (GET_CODE (PATTERN (temp)) == ADDR_VEC\t\t\t\\\n \t  || GET_CODE (PATTERN (temp)) == ADDR_DIFF_VEC))\t\\\n     goto ADDR;\t\t\t\t\t\t\t\\\n-  if (GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X)) goto ADDR; }\n+  if (LEGITIMATE_BASE_REG_P (X)) goto ADDR; }\n \n #define GO_IF_INDEXING(X, ADDR)\t\\\n { if (GET_CODE (X) == PLUS && LEGITIMATE_INDEX_P (XEXP (X, 0)))\t\t\\\n@@ -1179,7 +1188,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    || (GET_CODE (X) == SIGN_EXTEND\t\t\t\\\n        && GET_CODE (XEXP (X, 0)) == REG\t\t\t\\\n        && GET_MODE (XEXP (X, 0)) == HImode\t\t\\\n-       && REG_OK_FOR_INDEX_P (XEXP (X, 0))))\n+       && REG_OK_FOR_INDEX_P (XEXP (X, 0)))\t\t\\\n+   || (GET_CODE (X) == SUBREG\t\t\t\t\\\n+       && GET_CODE (SUBREG_REG (X)) == REG\t\t\\\n+       && REG_OK_FOR_INDEX_P (SUBREG_REG (X))))\n \n #define LEGITIMATE_INDEX_P(X)   \\\n    (LEGITIMATE_INDEX_REG_P (X)\t\t\t\t\\"}]}