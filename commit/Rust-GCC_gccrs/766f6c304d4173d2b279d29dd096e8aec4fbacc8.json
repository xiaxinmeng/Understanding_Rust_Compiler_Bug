{"sha": "766f6c304d4173d2b279d29dd096e8aec4fbacc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2ZjZjMzA0ZDQxNzNkMmIyNzlkMjlkZDA5NmU4YWVjNGZiYWNjOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-04T19:36:42Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-04T19:36:42Z"}, "message": "(truthvalue_conversion): Handle COMPLEX_EXPR.\n\nFrom-SVN: r3638", "tree": {"sha": "43366ca8ed642d0d7298b15c40661970ed582514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43366ca8ed642d0d7298b15c40661970ed582514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766f6c304d4173d2b279d29dd096e8aec4fbacc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766f6c304d4173d2b279d29dd096e8aec4fbacc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766f6c304d4173d2b279d29dd096e8aec4fbacc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766f6c304d4173d2b279d29dd096e8aec4fbacc8/comments", "author": null, "committer": null, "parents": [{"sha": "1cc1b11a2edb824cebfcee7eddad213be0454a9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc1b11a2edb824cebfcee7eddad213be0454a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc1b11a2edb824cebfcee7eddad213be0454a9f"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "8dfc1e725d419c38d3149f2ef0314d16ff1269f9", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766f6c304d4173d2b279d29dd096e8aec4fbacc8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766f6c304d4173d2b279d29dd096e8aec4fbacc8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=766f6c304d4173d2b279d29dd096e8aec4fbacc8", "patch": "@@ -373,7 +373,13 @@ convert_and_check (type, expr)\n   tree t = convert (type, expr);\n   if (TREE_CODE (t) == INTEGER_CST)\n     {\n-      if (TREE_CONSTANT_OVERFLOW (t))\n+      if (TREE_UNSIGNED (TREE_TYPE (expr))\n+\t  && !TREE_UNSIGNED (type)\n+\t  && TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n+\t  && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (expr)))\n+\t/* No warning for converting 0x80000000 to int.  */\n+\tTREE_CONSTANT_OVERFLOW (t) = 0;\n+      else if (TREE_CONSTANT_OVERFLOW (t))\n \t{\n \t  pedwarn (\"overflow in implicit constant conversion\");\n \t  TREE_CONSTANT_OVERFLOW (t) = 0;\n@@ -829,7 +835,8 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t TYPE is already properly set.  */\n     }\n   else if (real1 && real2\n-\t   && TYPE_PRECISION (TREE_TYPE (primop0)) == TYPE_PRECISION (TREE_TYPE (primop1)))\n+\t   && (TYPE_PRECISION (TREE_TYPE (primop0))\n+\t       == TYPE_PRECISION (TREE_TYPE (primop1))))\n     type = TREE_TYPE (primop0);\n \n   /* If args' natural types are both narrower than nominal type\n@@ -959,6 +966,12 @@ truthvalue_conversion (expr)\n       else\n \treturn integer_one_node;\n \n+    case COMPLEX_EXPR:\n+      return build_binary_op (TRUTH_ANDIF_EXPR,\n+\t\t\t      truthvalue_conversion (TREE_REALPART (expr)),\n+\t\t\t      truthvalue_conversion (TREE_IMAGPART (expr)),\n+\t\t\t      0);\n+\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:"}]}