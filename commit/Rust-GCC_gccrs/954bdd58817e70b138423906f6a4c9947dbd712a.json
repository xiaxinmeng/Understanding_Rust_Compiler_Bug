{"sha": "954bdd58817e70b138423906f6a4c9947dbd712a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0YmRkNTg4MTdlNzBiMTM4NDIzOTA2ZjZhNGM5OTQ3ZGJkNzEyYQ==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2015-01-15T10:44:57Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2015-01-15T10:44:57Z"}, "message": "Add support for the R6 LSA and DLSA instructions\n\ngcc/\n\n\t* config/mips/mips.c (mips_rtx_costs): Set costs for LSA/DLSA.\n\t(mips_print_operand): Support 'y' to print exact log2 in decimal\n\tof a const_int.\n\t* config/mips/mips.h (ISA_HAS_LSA): New define.\n\t(ISA_HAS_DLSA): Likewise.\n\t* config/mips/mips.md (<GPR:d>lsa): New define_insn.\n\t* config/mips/predicates.md (const_immlsa_operand): New predicate.\n\ngcc/testsuite/\n\n\t* gcc.target/mips/lsa.c: New file.\n\t* gcc.target/mips/mips64-lsa.c: Likewise.\n\t* gcc.target/mips/mulsize-2.c: Require !HAS_LSA.\n\t* gcc.target/mips/mulsize-4.c: Likewise.\n\t* gcc.target/mips/mulsize-5.c: New file.\n\t* gcc.target/mips/mulsize-6.c: Likewise.\n\t* gcc.target/mips/mips.exp (mips_option_groups): Support HAS_LSA\n\tand !HAS_LSA as ghost options.\n\t(mips-dg-options): Require rev 6 for HAS_LSA. Downgrade to rev 5\n\tfor !HAS_LSA.\n\nFrom-SVN: r219638", "tree": {"sha": "eed15a79d06347bc2b53bfc3bde78a728e3c6f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eed15a79d06347bc2b53bfc3bde78a728e3c6f3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/954bdd58817e70b138423906f6a4c9947dbd712a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954bdd58817e70b138423906f6a4c9947dbd712a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954bdd58817e70b138423906f6a4c9947dbd712a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954bdd58817e70b138423906f6a4c9947dbd712a/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "953bcfa6c846d1bc6b010a8c28dbf854fade7a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953bcfa6c846d1bc6b010a8c28dbf854fade7a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953bcfa6c846d1bc6b010a8c28dbf854fade7a93"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "356422321c43a842f664afcd5069cd558e34a2fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -1,3 +1,13 @@\n+2015-01-14  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* config/mips/mips.c (mips_rtx_costs): Set costs for LSA/DLSA.\n+\t(mips_print_operand): Support 'y' to print exact log2 in decimal\n+\tof a const_int.\n+\t* config/mips/mips.h (ISA_HAS_LSA): New define.\n+\t(ISA_HAS_DLSA): Likewise.\n+\t* config/mips/mips.md (<GPR:d>lsa): New define_insn.\n+\t* config/mips/predicates.md (const_immlsa_operand): New predicate.\n+\n 2015-01-15  Martin Liska  <mliska@suse.cz>\n \n \tPR target/64377"}, {"sha": "00801bb3ce868778a7f5c2334099028ee3bc6aea", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -4114,6 +4114,22 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t  return false;\n \t}\n \n+      /* If it's an add + mult (which is equivalent to shift left) and\n+         it's immediate operand satisfies const_immlsa_operand predicate.  */\n+      if (((ISA_HAS_LSA && mode == SImode)\n+\t   || (ISA_HAS_DLSA && mode == DImode))\n+\t  && GET_CODE (XEXP (x, 0)) == MULT)\n+\t{\n+\t  rtx op2 = XEXP (XEXP (x, 0), 1);\n+\t  if (const_immlsa_operand (op2, mode))\n+\t    {\n+\t      *total = (COSTS_N_INSNS (1)\n+\t\t\t+ set_src_cost (XEXP (XEXP (x, 0), 0), speed)\n+\t\t\t+ set_src_cost (XEXP (x, 1), speed));\n+\t      return true;\n+\t    }\n+\t}\n+\n       /* Double-word operations require three single-word operations and\n \t an SLTU.  The MIPS16 version then needs to move the result of\n \t the SLTU from $24 to a MIPS16 register.  */\n@@ -8419,6 +8435,7 @@ mips_print_operand_punct_valid_p (unsigned char code)\n    'x'\tPrint the low 16 bits of CONST_INT OP in hexadecimal format.\n    'd'\tPrint CONST_INT OP in decimal.\n    'm'\tPrint one less than CONST_INT OP in decimal.\n+   'y'\tPrint exact log2 of CONST_INT OP in decimal.\n    'h'\tPrint the high-part relocation associated with OP, after stripping\n \t  any outermost HIGH.\n    'R'\tPrint the low-part relocation associated with OP.\n@@ -8482,6 +8499,19 @@ mips_print_operand (FILE *file, rtx op, int letter)\n \toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n       break;\n \n+    case 'y':\n+      if (CONST_INT_P (op))\n+\t{\n+\t  int val = exact_log2 (INTVAL (op));\n+\t  if (val != -1)\n+\t    fprintf (file, \"%d\", val);\n+\t  else\n+\t    output_operand_lossage (\"invalid use of '%%%c'\", letter);\n+\t}\n+      else\n+\toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n+      break;\n+\n     case 'h':\n       if (code == HIGH)\n \top = XEXP (op, 0);"}, {"sha": "c5ea2401a17a00fba5860ae809f2ec4ff0a8f61d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -181,6 +181,12 @@ struct mips_cpu_info {\n #define ISA_HAS_DSP_MULT ISA_HAS_DSPR2\n #endif\n \n+/* ISA has LSA available.  */\n+#define ISA_HAS_LSA\t\t(mips_isa_rev >= 6)\n+\n+/* ISA has DLSA available.  */\n+#define ISA_HAS_DLSA\t\t(TARGET_64BIT && mips_isa_rev >= 6)\n+\n /* The ISA compression flags that are currently in effect.  */\n #define TARGET_COMPRESSION (target_flags & (MASK_MIPS16 | MASK_MICROMIPS))\n "}, {"sha": "2fb278650ca946a465a048e0885d70a45d728318", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -5541,6 +5541,16 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"extended_mips16\" \"no,no,yes\")])\n \n+(define_insn \"<GPR:d>lsa\"\n+ [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+       (plus:GPR (mult:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand 2 \"const_immlsa_operand\" \"\"))\n+\t\t(match_operand:GPR 3 \"register_operand\" \"d\")))]\n+ \"ISA_HAS_<GPR:D>LSA\"\n+ \"<GPR:d>lsa\\t%0,%1,%3,%y2\"\n+ [(set_attr \"type\" \"arith\")\n+  (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n ;; We need separate DImode MIPS16 patterns because of the irregularity\n ;; of right shifts.\n (define_insn \"*ashldi3_mips16\""}, {"sha": "fa17ac7ca4b3f1ec5162e3ca5e34884afdc762df", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -33,6 +33,10 @@\n   (ior (match_operand 0 \"const_arith_operand\")\n        (match_operand 0 \"register_operand\")))\n \n+(define_predicate \"const_immlsa_operand\"\n+  (and (match_code \"const_int\")\n+         (match_test \"IN_RANGE (exact_log2 (INTVAL (op)), 1, 4)\")))\n+\n (define_predicate \"const_uimm6_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"UIMM6_OPERAND (INTVAL (op))\")))"}, {"sha": "6b73d3159fb1ce2dddec961118b9a4b0cf1fd78f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -1,3 +1,16 @@\n+2015-01-14  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* gcc.target/mips/lsa.c: New file.\n+\t* gcc.target/mips/mips64-lsa.c: Likewise.\n+\t* gcc.target/mips/mulsize-2.c: Require !HAS_LSA.\n+\t* gcc.target/mips/mulsize-4.c: Likewise.\n+\t* gcc.target/mips/mulsize-5.c: New file.\n+\t* gcc.target/mips/mulsize-6.c: Likewise.\n+\t* gcc.target/mips/mips.exp (mips_option_groups): Support HAS_LSA\n+\tand !HAS_LSA as ghost options.\n+\t(mips-dg-options): Require rev 6 for HAS_LSA. Downgrade to rev 5\n+\tfor !HAS_LSA.\n+\n 2015-01-15  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* g++.dg/torture/20141013.c: Set -fno-short-enums."}, {"sha": "d7be17409a3a012367ba628330740340755975ca", "filename": "gcc/testsuite/gcc.target/mips/lsa.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flsa.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -0,0 +1,11 @@\n+/* Test MIPS32R6 LSA instruction */\n+/* { dg-do compile } */\n+/* { dg-options \"-mgp32 (HAS_LSA)\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tlsa\\t\" } } */\n+\n+NOMIPS16 signed short test (signed short *a, int index)\n+{\n+  return a[index];\n+}"}, {"sha": "3d6da815c49d10a3759f14a64b2c7e4d937ea39a", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -253,6 +253,7 @@ set mips_option_groups {\n     movn \"HAS_MOVN\"\n     madd \"HAS_MADD\"\n     maddps \"HAS_MADDPS\"\n+    lsa \"(|!)HAS_LSA\"\n }\n \n for { set option 0 } { $option < 32 } { incr option } {\n@@ -1061,11 +1062,21 @@ proc mips-dg-options { args } {\n     # Handle dependencies between the pre-arch options and the arch option.\n     # This should mirror the arch and post-arch code below.\n     if { !$arch_test_option_p } {\n+\t# We need a revision 6 or better ISA for:\n+\t#\n+\t#   - When the LSA instruction is required\n+\tif { $isa_rev < 6\n+\t     && ([mips_have_test_option_p options \"HAS_LSA\"]) } {\n+\t    if { $gp_size == 32 } {\n+\t\tmips_make_test_option options \"-mips32r6\"\n+\t    } else {\n+\t\tmips_make_test_option options \"-mips64r6\"\n+\t    }\n \t# We need a revision 2 or better ISA for:\n \t#\n \t#   - the combination of -mgp32 -mfp64\n \t#   - the DSP ASE\n-\tif { $isa_rev < 2\n+\t} elseif { $isa_rev < 2\n \t     && (($gp_size == 32 && [mips_have_test_option_p options \"-mfp64\"])\n \t\t || [mips_have_test_option_p options \"-msynci\"]\n \t\t || [mips_have_test_option_p options \"-mdsp\"]\n@@ -1142,7 +1153,8 @@ proc mips-dg-options { args } {\n \t\t       || [mips_have_test_option_p options \"HAS_MADD\"]\n \t\t       || [mips_have_test_option_p options \"-mpaired-single\"]\n \t\t       || [mips_have_test_option_p options \"-mnan=legacy\"]\n-\t\t       || [mips_have_test_option_p options \"-mabs=legacy\"]) } {\n+\t\t       || [mips_have_test_option_p options \"-mabs=legacy\"]\n+\t\t       || [mips_have_test_option_p options \"!HAS_LSA\"]) } {\n \t    if { $gp_size == 32 } {\n \t\tmips_make_test_option options \"-mips32r5\"\n \t    } else {"}, {"sha": "940847efc55a800c587a1b6d2aa216730208d846", "filename": "gcc/testsuite/gcc.target/mips/mips64-lsa.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-lsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-lsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-lsa.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -0,0 +1,11 @@\n+/* Test MIPS64R6 LSA instruction */\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=64 (HAS_LSA)\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tdlsa\\t\" } } */\n+\n+NOMIPS16 signed long long test (signed long long *a, int index)\n+{\n+  return a[index];\n+}"}, {"sha": "7c84bfd9cddaefc8cce78a54ec75f3655eca7c8f", "filename": "gcc/testsuite/gcc.target/mips/mulsize-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-2.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"(!HAS_LSA)\" } */\n /* { dg-final { scan-assembler \"\\t.globl\\tf9\" } } */\n /* { dg-final { scan-assembler \"\\tsll\\t\" } } */\n /* { dg-final { scan-assembler \"\\taddu\\t\" } } */"}, {"sha": "f8a94a9588e94294002dbb4fb9709602254b9506", "filename": "gcc/testsuite/gcc.target/mips/mulsize-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-4.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"(!HAS_LSA)\" } */\n /* { dg-final { scan-assembler \"\\t.globl\\tf17\" } } */\n /* { dg-final { scan-assembler \"\\tsll\\t\" } } */\n /* { dg-final { scan-assembler \"\\taddu\\t\" } } */"}, {"sha": "1c39a7e3f914e948d900dec82b62462353370ab1", "filename": "gcc/testsuite/gcc.target/mips/mulsize-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-5.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"(HAS_LSA)\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"\\t.globl\\tf9\" } } */\n+/* { dg-final { scan-assembler \"\\tlsa\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsll\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\taddu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tli\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmul\\t\" } } */\n+int\n+f9(int x)\n+{\n+  return x * 9;\n+}"}, {"sha": "6e9ca003fc794f0247ab8fc648226b5f053a4328", "filename": "gcc/testsuite/gcc.target/mips/mulsize-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954bdd58817e70b138423906f6a4c9947dbd712a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmulsize-6.c?ref=954bdd58817e70b138423906f6a4c9947dbd712a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"(HAS_LSA)\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"\\t.globl\\tf17\" } } */\n+/* { dg-final { scan-assembler \"\\tlsa\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsll\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\taddu\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tli\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmul\\t\" } } */\n+int\n+f17(int x)\n+{\n+  return x * 17;\n+}"}]}