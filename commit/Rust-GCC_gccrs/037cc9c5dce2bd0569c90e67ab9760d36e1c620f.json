{"sha": "037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM3Y2M5YzVkY2UyYmQwNTY5YzkwZTY3YWI5NzYwZDM2ZTFjNjIwZg==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2004-09-23T18:22:25Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2004-09-23T18:22:25Z"}, "message": "PR c++/9844, PR c++/13989\n\nPR c++/9844, PR c++/13989\nReviewed by Mark Mitchel.\n\nFrom-SVN: r87971", "tree": {"sha": "df77b7d51d9b71c598887245fda31d867e50e5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df77b7d51d9b71c598887245fda31d867e50e5b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/comments", "author": null, "committer": null, "parents": [{"sha": "093942ac675fab472ce829446c86b8233f25ee1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093942ac675fab472ce829446c86b8233f25ee1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093942ac675fab472ce829446c86b8233f25ee1d"}], "stats": {"total": 253, "additions": 241, "deletions": 12}, "files": [{"sha": "b54874f56838f1d2ec33701b04ab9aeaa9b07584", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -1,3 +1,18 @@\n+2004-09-21 Fariborz Jahanian <fjahanian@apple.com>\n+\tPR c++/13989\n+\tPR c++/9844\n+\n+\t* cp/decl.c (grokfndecl): Add new argument \"attrlist\", use it \n+  \tto call cplus_decl_attributes.\n+\t(start_function): Remove call to cplus_decl_attributes.\n+\t* tree.c (reconstruct_complex_type): Remove extra \"this\".\n+\t* cp/cvt.c (ocp_convert): Add support to use type conversion\n+\tfunction to vector type.\n+\t* cp/parser.c (cp_parser_conversion_type_id): Add attributes, if any,\n+\t to the parsed type. \n+\t* config/rs6000/rs6000.c (rs6000_handle_altivec_attribute): \n+\tAdd V4SFmode to case statement.\n+\n 2004-09-23  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/16833"}, {"sha": "39ace238fa3f2ca209b14deb2eca95b0f12a2587", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -16265,7 +16265,7 @@ rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n \t    /* If the user says 'vector int bool', we may be handed the 'bool'\n \t       attribute _before_ the 'vector' attribute, and so select the proper\n \t       type in the 'b' case below.  */\n-\t  case V4SImode: case V8HImode: case V16QImode: result = type;\n+\t  case V4SImode: case V8HImode: case V16QImode: case V4SFmode: result = type;\n \t  default: break;\n \t}\n       break;"}, {"sha": "5db41468c903e5cf46246d0c473acf121171b78d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -699,7 +699,20 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n   if (POINTER_TYPE_P (type) || TYPE_PTR_TO_MEMBER_P (type))\n     return fold (cp_convert_to_pointer (type, e, false));\n   if (code == VECTOR_TYPE)\n-    return fold (convert_to_vector (type, e));\n+    {\n+      tree in_vtype = TREE_TYPE (e);\n+      if (IS_AGGR_TYPE (in_vtype))\n+\t{\n+\t  tree ret_val;\n+\t  ret_val = build_type_conversion (type, e);\n+          if (ret_val)\n+            return ret_val;\n+          if (flags & LOOKUP_COMPLAIN)\n+            error (\"`%#T' used where a `%T' was expected\", in_vtype, type);\n+          return error_mark_node;\n+\t}\n+      return fold (convert_to_vector (type, e));\n+    }\n   if (code == REAL_TYPE || code == COMPLEX_TYPE)\n     {\n       if (IS_AGGR_TYPE (TREE_TYPE (e)))"}, {"sha": "b3cdd6978bce82da38b11cfe3fe22241867b717b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -63,7 +63,8 @@ static void push_local_name (tree);\n static tree grok_reference_init (tree, tree, tree, tree *);\n static tree grokfndecl (tree, tree, tree, tree, tree, int,\n \t\t\tenum overload_flags, cp_cv_quals,\n-\t\t\ttree, int, int, int, int, int, int, tree);\n+\t\t\ttree, int, int, int, int, int, int, tree, \n+\t\t\ttree *);\n static tree grokvardecl (tree, tree, const cp_decl_specifier_seq *,\n \t\t\t int, int, tree);\n static void record_unknown_type (tree, const char *);\n@@ -5534,7 +5535,8 @@ grokfndecl (tree ctype,\n             int inlinep,\n             int funcdef_flag,\n             int template_count,\n-            tree in_namespace)\n+            tree in_namespace,\n+\t    tree* attrlist)\n {\n   tree decl;\n   int staticp = ctype && TREE_CODE (type) == FUNCTION_TYPE;\n@@ -5752,6 +5754,12 @@ grokfndecl (tree ctype,\n   if (decl == error_mark_node)\n     return NULL_TREE;\n \n+  if (attrlist)\n+    {\n+      cplus_decl_attributes (&decl, *attrlist, 0);\n+      *attrlist = NULL_TREE;\n+    }\n+\n   if (ctype != NULL_TREE\n       && (! TYPE_FOR_JAVA (ctype) || check_java_method (decl))\n       && check)\n@@ -5762,7 +5770,7 @@ grokfndecl (tree ctype,\n \t\t\t\t(processing_template_decl\n \t\t\t\t > template_class_depth (ctype))\n \t\t\t\t? current_template_parms\n-\t\t\t\t: NULL_TREE);\n+\t\t\t\t: NULL_TREE); \n \n       if (old_decl && TREE_CODE (old_decl) == TEMPLATE_DECL)\n \t/* Because grokfndecl is always supposed to return a\n@@ -7839,7 +7847,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       unqualified_id,\n \t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, publicp, inlinep,\n-\t\t\t       funcdef_flag, template_count, in_namespace);\n+\t\t\t       funcdef_flag, template_count, in_namespace, attrlist);\n \t    if (decl == NULL_TREE)\n \t      return decl;\n #if 0\n@@ -7886,7 +7894,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       unqualified_id,\n \t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, 1, 0, funcdef_flag,\n-\t\t\t       template_count, in_namespace);\n+\t\t\t       template_count, in_namespace, attrlist);\n \t    if (decl == NULL_TREE)\n \t      return NULL_TREE;\n \t  }\n@@ -8070,7 +8078,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t   virtualp, flags, quals, raises,\n \t\t\t   1, friendp,\n \t\t\t   publicp, inlinep, funcdef_flag,\n-\t\t\t   template_count, in_namespace);\n+\t\t\t   template_count, in_namespace, attrlist);\n \tif (decl == NULL_TREE)\n \t  return NULL_TREE;\n \n@@ -10088,8 +10096,6 @@ start_function (cp_decl_specifier_seq *declspecs,\n   if (decl1 == NULL_TREE || TREE_CODE (decl1) != FUNCTION_DECL)\n     return 0;\n \n-  cplus_decl_attributes (&decl1, attrs, 0);\n-\n   /* If #pragma weak was used, mark the decl weak now.  */\n   if (global_scope_p (current_binding_level))\n     maybe_apply_pragma_weak (decl1);"}, {"sha": "db779a201b9f0d75215e55cb3a995a483c8800e5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -7441,6 +7441,7 @@ cp_parser_conversion_type_id (cp_parser* parser)\n   tree attributes;\n   cp_decl_specifier_seq type_specifiers;\n   cp_declarator *declarator;\n+  tree type_specified;\n \n   /* Parse the attributes.  */\n   attributes = cp_parser_attributes_opt (parser);\n@@ -7452,8 +7453,11 @@ cp_parser_conversion_type_id (cp_parser* parser)\n   /* Parse the conversion-declarator.  */\n   declarator = cp_parser_conversion_declarator_opt (parser);\n \n-  return grokdeclarator (declarator, &type_specifiers, TYPENAME,\n-\t\t\t /*initialized=*/0, &attributes);\n+  type_specified =  grokdeclarator (declarator, &type_specifiers, TYPENAME,\n+\t\t\t            /*initialized=*/0, &attributes);\n+  if (attributes)\n+    cplus_decl_attributes (&type_specified, attributes, /*flags=*/0);\n+  return type_specified;\n }\n \n /* Parse an (optional) conversion-declarator."}, {"sha": "2b852db57e52da681c1bf6496b8d663eb15a0dc8", "filename": "gcc/testsuite/g++.dg/ext/attribute-test-1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-1.C?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do run }\n+// PR c++/13989\n+\n+extern \"C\" void abort();\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+struct Constants {\n+   inline vector unsigned int deadbeef(void) const {\n+       return (vector unsigned int){0xdeadbeef, 0xabababab, 0x55555555, 0x12345678};\n+   };\n+};\n+\n+inline vector unsigned int const_deadbeef(Constants &C)\n+{\n+  return C.deadbeef();\n+}\n+\n+union u {\n+              unsigned int f[4];\n+              vector unsigned int v;\n+} data;\n+\n+int main()\n+{\n+  Constants c;\n+  data.v = const_deadbeef(c);\n+  \n+  if (data.f[0] != 0xdeadbeef || data.f[1] != 0xabababab \n+      || data.f[2] != 0x55555555 || data.f[3] != 0x12345678)\n+    abort();\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "95a287e7ca8bef8c0dce601decc516405e236c52", "filename": "gcc/testsuite/g++.dg/ext/attribute-test-2.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-2.C?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run }\n+// PR c++/9844\n+\n+extern \"C\" void abort();\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+class vector_holder\n+{\n+   char __attribute__((vector_size(16))) vec;\n+   char __attribute__((vector_size(16))) vec1;\n+public:\n+   operator __attribute__((vector_size(16))) short (void) {\n+     return (__attribute__((vector_size(16))) short) vec;\n+   }\n+\n+   operator __attribute__((vector_size(16))) int (void) {\n+     return (__attribute__((vector_size(16))) int) vec1;\n+   }\n+\n+   vector_holder () {\n+\tvec = (__attribute__((vector_size(16))) char) {'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd',\n+\t\t\t\t\t\t       'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'};\n+\tvec1 = (__attribute__((vector_size(16))) char) {'m', 'n', 'o', 'q', 'm', 'n', 'o', 'p',\n+\t\t\t\t\t\t\t'm', 'n', 'o', 'q', 'm', 'n', 'o', 'p'};\n+   }\n+};\n+\n+union u {\n+              char f[16];\n+              vector unsigned int v;\n+} data;\n+\n+\n+vector_holder vh;\n+\n+int main()\n+{\n+  data.v = (__attribute__((vector_size(16))) short) vh;\n+  if (data.f[0] != 'a' || data.f[15] != 'd')\n+    abort(); \n+  data.v = (__attribute__((vector_size(16))) int) vh;\n+  if (data.f[0] != 'm' || data.f[15] != 'p')\n+    abort(); \n+\n+  return 0;\n+}"}, {"sha": "76045f7f845250f27b55ab09baa66cd742f737c7", "filename": "gcc/testsuite/g++.dg/ext/attribute-test-3.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-3.C?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -0,0 +1,55 @@\n+// { dg-do run }\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+extern \"C\" void abort();\n+\n+class Star\n+{\n+  public:\n+        inline vector float foo() const;\n+\n+\tStar() \n+\t  {\n+\t    data.f[0] = 1.0; data.f[1] = 2.0; data.f[2] = 3.0, data.f[3] = 4.0;\n+\t  }\n+\n+  private:\n+         union {\n+              float f[4];\n+              vector float v;\n+         } data;\n+\n+\tfriend vector float fTest(const Star &);\n+};\n+\n+vector float Star::foo() const\n+{\n+    return data.v;\n+}\n+\n+vector float fTest(const Star & val)\n+{\n+    vector float vf = val.foo();\n+    return vf;\n+}\n+\n+int main() {\n+\n+  Star s;\n+\n+  union u {\n+              float f[4];\n+              vector float v;\n+  } data;\n+\n+  data.v = fTest(s);\n+  for (int i=0 ; i < 4; i++)\n+     if (data.f[i] != (float)(i+1))\n+       abort();\n+  return 0;\n+}\n+\n+\n+  \n+"}, {"sha": "d06365ca8f8f21ac1a3aade3c6d73ded7f830cc5", "filename": "gcc/testsuite/g++.dg/ext/attribute-test-4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattribute-test-4.C?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run }\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+extern \"C\" void abort();\n+\n+union U {\n+              float f[4];\n+              vector float v;\n+} data;\n+\n+class Star\n+{\n+  public:\n+        static vector float foo();\n+\n+\tStar() \n+\t  {\n+\t    data.f[0] = 1.0; data.f[1] = 2.0; data.f[2] = 3.0, data.f[3] = 4.0;\n+\t  }\n+\n+  private:\n+\tfriend vector float fTest();\n+};\n+\n+vector float Star::foo() \n+{\n+    return data.v;\n+}\n+\n+vector float fTest()\n+{\n+    vector float vf = Star::foo();\n+    return vf;\n+}\n+\n+int main() {\n+\n+  U data;\n+  Star s;\n+\n+\n+  data.v = fTest();\n+  for (int i=0 ; i < 4; i++)\n+     if (data.f[i] != (float)(i+1))\n+       abort();\n+  return 0;\n+}"}, {"sha": "0237d072271d9e4c45df92c5f594bded756b81ea", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037cc9c5dce2bd0569c90e67ab9760d36e1c620f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=037cc9c5dce2bd0569c90e67ab9760d36e1c620f", "patch": "@@ -5642,10 +5642,15 @@ reconstruct_complex_type (tree type, tree bottom)\n     }\n   else if (TREE_CODE (type) == METHOD_TYPE)\n     {\n+      tree argtypes;\n       inner = reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      /* The build_method_type_directly() routine prepends 'this' to argument list,\n+         so we must compensate by getting rid of it.  */\n+      argtypes = TYPE_ARG_TYPES (type);\n       outer = build_method_type_directly (TYPE_METHOD_BASETYPE (type),\n \t\t\t\t\t  inner,\n \t\t\t\t\t  TYPE_ARG_TYPES (type));\n+      TYPE_ARG_TYPES (outer) = argtypes;\n     }\n   else\n     return bottom;"}]}