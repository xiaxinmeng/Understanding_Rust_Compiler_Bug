{"sha": "88e508f9f112acd07d0c49c53589160db8c85fcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlNTA4ZjlmMTEyYWNkMDdkMGM0OWM1MzU4OTE2MGRiOGM4NWZjZA==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2020-04-07T19:05:38Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-04-07T19:08:06Z"}, "message": "S/390: Fix PR91628\n\nWith this patch we get rid of the usage of the glibc-internal symbol\n__tls_get_addr_internal.\n\nIf build with multilib, the file\ngcc/libphobos/libdruntime/config/systemz/get_tls_offset.S is used\nfor both configurations: systemz and s390.\nTherefore both implementations are now in the systemz file which\nuses an \"#ifdef __s390x__\" in order to distinguish both cases.\nThe s390 file is just including the systemz one.\n\nlibphobos/ChangeLog:\n\n2020-04-07  Robin Dapp  <rdapp@linux.ibm.com>\n            Stefan Liebler  <stli@linux.ibm.com>\n\n\t* configure: Regenerate.\n\t* libdruntime/Makefile.am: Add s390x and s390.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* libdruntime/config/s390/get_tls_offset.S: New file.\n\t* libdruntime/config/systemz/get_tls_offset.S: New file.\n\t* libdruntime/gcc/sections/elf_shared.d: Use ibmz_get_tls_offset.\n\t* m4/druntime/cpu.m4: Add s390x and s390.", "tree": {"sha": "a86b2b2c6d8467dc434f994aff6f52aa8ba4aedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a86b2b2c6d8467dc434f994aff6f52aa8ba4aedc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e508f9f112acd07d0c49c53589160db8c85fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e508f9f112acd07d0c49c53589160db8c85fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e508f9f112acd07d0c49c53589160db8c85fcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e508f9f112acd07d0c49c53589160db8c85fcd/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c7853216e8511971c55b51d7fe29173db4749b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c7853216e8511971c55b51d7fe29173db4749b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c7853216e8511971c55b51d7fe29173db4749b"}], "stats": {"total": 222, "additions": 209, "deletions": 13}, "files": [{"sha": "86468e150290b69a726889eec65577d071e235cf", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -1,3 +1,14 @@\n+2020-04-07  Robin Dapp  <rdapp@linux.ibm.com>\n+\t    Stefan Liebler  <stli@linux.ibm.com>\n+\n+\t* configure: Regenerate.\n+\t* libdruntime/Makefile.am: Add s390x and s390.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/config/s390/get_tls_offset.S: New file.\n+\t* libdruntime/config/systemz/get_tls_offset.S: New file.\n+\t* libdruntime/gcc/sections/elf_shared.d: Use ibmz_get_tls_offset.\n+\t* m4/druntime/cpu.m4: Add s390x and s390.\n+\n 2020-04-07  Stefan Liebler  <stli@linux.ibm.com>\n \n \t* libdruntime/core/sys/posix/signal.d:"}, {"sha": "04a6e6aeb0fabd303b6954cfa1cef1f9329e82ed", "filename": "libphobos/configure", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -683,6 +683,10 @@ DRUNTIME_OS_AIX_FALSE\n DRUNTIME_OS_AIX_TRUE\n DRUNTIME_OS_UNIX_FALSE\n DRUNTIME_OS_UNIX_TRUE\n+DRUNTIME_CPU_S390_FALSE\n+DRUNTIME_CPU_S390_TRUE\n+DRUNTIME_CPU_SYSTEMZ_FALSE\n+DRUNTIME_CPU_SYSTEMZ_TRUE\n DRUNTIME_CPU_X86_FALSE\n DRUNTIME_CPU_X86_TRUE\n DRUNTIME_CPU_POWERPC64_FALSE\n@@ -11644,7 +11648,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11647 \"configure\"\n+#line 11651 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11750,7 +11754,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11753 \"configure\"\n+#line 11757 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14012,6 +14016,12 @@ fi\n       i[34567]86|x86_64)\n                druntime_target_cpu_parsed=\"x86\"\n                ;;\n+      s390x)\n+               druntime_target_cpu_parsed=\"s390x\"\n+               ;;\n+      s390)\n+               druntime_target_cpu_parsed=\"s390\"\n+               ;;\n   esac\n    if test \"$druntime_target_cpu_parsed\" = \"aarch64\"; then\n   DRUNTIME_CPU_AARCH64_TRUE=\n@@ -14061,6 +14071,22 @@ else\n   DRUNTIME_CPU_X86_FALSE=\n fi\n \n+   if test \"$druntime_target_cpu_parsed\" = \"s390x\"; then\n+  DRUNTIME_CPU_SYSTEMZ_TRUE=\n+  DRUNTIME_CPU_SYSTEMZ_FALSE='#'\n+else\n+  DRUNTIME_CPU_SYSTEMZ_TRUE='#'\n+  DRUNTIME_CPU_SYSTEMZ_FALSE=\n+fi\n+\n+   if test \"$druntime_target_cpu_parsed\" = \"s390\"; then\n+  DRUNTIME_CPU_S390_TRUE=\n+  DRUNTIME_CPU_S390_FALSE='#'\n+else\n+  DRUNTIME_CPU_S390_TRUE='#'\n+  DRUNTIME_CPU_S390_FALSE=\n+fi\n+\n \n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for target OS\" >&5\n@@ -15561,6 +15587,14 @@ if test -z \"${DRUNTIME_CPU_X86_TRUE}\" && test -z \"${DRUNTIME_CPU_X86_FALSE}\"; th\n   as_fn_error $? \"conditional \\\"DRUNTIME_CPU_X86\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${DRUNTIME_CPU_SYSTEMZ_TRUE}\" && test -z \"${DRUNTIME_CPU_SYSTEMZ_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_SYSTEMZ\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n+if test -z \"${DRUNTIME_CPU_S390_TRUE}\" && test -z \"${DRUNTIME_CPU_S390_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_CPU_S390\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${DRUNTIME_OS_UNIX_TRUE}\" && test -z \"${DRUNTIME_OS_UNIX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_UNIX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "b6f4329906419a0f32d346a2a16c9ec054e4e975", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -98,6 +98,12 @@ else\n     DRUNTIME_SOURCES_CONFIGURED += config/x86/switchcontext.S\n endif\n endif\n+if DRUNTIME_CPU_SYSTEMZ\n+    DRUNTIME_SOURCES_CONFIGURED += config/systemz/get_tls_offset.S\n+endif\n+if DRUNTIME_CPU_S390\n+    DRUNTIME_SOURCES_CONFIGURED += config/s390/get_tls_offset.S\n+endif\n \n # Provide __start_minfo, __stop_minfo if linker doesn't.\n if !DRUNTIME_OS_MINFO_BRACKETING"}, {"sha": "cbbe6298537fcab7c0525b98829348f9724eb41b", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -130,6 +130,8 @@ target_triplet = @target@\n @DRUNTIME_CPU_POWERPC64_TRUE@am__append_17 = config/powerpc64/callwithstack.S\n @DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__append_18 = config/mingw/switchcontext.S\n @DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__append_19 = config/x86/switchcontext.S\n+@DRUNTIME_CPU_SYSTEMZ_TRUE@am__append_20 = config/systemz/get_tls_offset.S\n+@DRUNTIME_CPU_S390_TRUE@am__append_21 = config/s390/get_tls_offset.S\n subdir = libdruntime\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n@@ -450,17 +452,19 @@ am__objects_25 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n @DRUNTIME_CPU_POWERPC64_TRUE@am__objects_31 = config/powerpc64/libgdruntime_la-callwithstack.lo\n @DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_TRUE@am__objects_32 = config/mingw/libgdruntime_la-switchcontext.lo\n @DRUNTIME_CPU_X86_TRUE@@DRUNTIME_OS_MINGW_FALSE@am__objects_33 = config/x86/libgdruntime_la-switchcontext.lo\n-am__objects_34 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n+@DRUNTIME_CPU_SYSTEMZ_TRUE@am__objects_34 = config/systemz/libgdruntime_la-get_tls_offset.lo\n+@DRUNTIME_CPU_S390_TRUE@am__objects_35 = config/s390/libgdruntime_la-get_tls_offset.lo\n+am__objects_36 = $(am__objects_4) $(am__objects_6) $(am__objects_8) \\\n \t$(am__objects_10) $(am__objects_12) $(am__objects_14) \\\n \t$(am__objects_16) $(am__objects_18) $(am__objects_20) \\\n \t$(am__objects_22) $(am__objects_24) $(am__objects_26) \\\n \t$(am__objects_27) $(am__objects_28) $(am__objects_29) \\\n \t$(am__objects_30) $(am__objects_31) $(am__objects_32) \\\n-\t$(am__objects_33)\n-am__objects_35 = gcc/config.lo gcc/libbacktrace.lo\n-am__objects_36 = $(am__objects_1) $(am__objects_2) $(am__objects_34) \\\n-\t$(am__objects_35)\n-am_libgdruntime_la_OBJECTS = $(am__objects_36)\n+\t$(am__objects_33) $(am__objects_34) $(am__objects_35)\n+am__objects_37 = gcc/config.lo gcc/libbacktrace.lo\n+am__objects_38 = $(am__objects_1) $(am__objects_2) $(am__objects_36) \\\n+\t$(am__objects_37)\n+am_libgdruntime_la_OBJECTS = $(am__objects_38)\n libgdruntime_la_OBJECTS = $(am_libgdruntime_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -729,7 +733,8 @@ DRUNTIME_SOURCES_CONFIGURED = $(am__append_1) $(am__append_2) \\\n \t$(am__append_9) $(am__append_10) $(am__append_11) \\\n \t$(am__append_12) $(am__append_13) $(am__append_14) \\\n \t$(am__append_15) $(am__append_16) $(am__append_17) \\\n-\t$(am__append_18) $(am__append_19)\n+\t$(am__append_18) $(am__append_19) $(am__append_20) \\\n+\t$(am__append_21)\n \n # Provide __start_minfo, __stop_minfo if linker doesn't.\n @DRUNTIME_OS_MINFO_BRACKETING_FALSE@DRTSTUFF = gcc/drtbegin.o gcc/drtend.o\n@@ -1736,6 +1741,16 @@ config/x86/$(am__dirstamp):\n \t@: > config/x86/$(am__dirstamp)\n config/x86/libgdruntime_la-switchcontext.lo:  \\\n \tconfig/x86/$(am__dirstamp)\n+config/systemz/$(am__dirstamp):\n+\t@$(MKDIR_P) config/systemz\n+\t@: > config/systemz/$(am__dirstamp)\n+config/systemz/libgdruntime_la-get_tls_offset.lo:  \\\n+\tconfig/systemz/$(am__dirstamp)\n+config/s390/$(am__dirstamp):\n+\t@$(MKDIR_P) config/s390\n+\t@: > config/s390/$(am__dirstamp)\n+config/s390/libgdruntime_la-get_tls_offset.lo:  \\\n+\tconfig/s390/$(am__dirstamp)\n gcc/config.lo: gcc/$(am__dirstamp)\n gcc/libbacktrace.lo: gcc/$(am__dirstamp)\n \n@@ -1756,6 +1771,10 @@ mostlyclean-compile:\n \t-rm -f config/powerpc/*.lo\n \t-rm -f config/powerpc64/*.$(OBJEXT)\n \t-rm -f config/powerpc64/*.lo\n+\t-rm -f config/s390/*.$(OBJEXT)\n+\t-rm -f config/s390/*.lo\n+\t-rm -f config/systemz/*.$(OBJEXT)\n+\t-rm -f config/systemz/*.lo\n \t-rm -f config/x86/*.$(OBJEXT)\n \t-rm -f config/x86/*.lo\n \t-rm -f core/*.$(OBJEXT)\n@@ -1876,6 +1895,12 @@ config/mingw/libgdruntime_la-switchcontext.lo: config/mingw/switchcontext.S\n config/x86/libgdruntime_la-switchcontext.lo: config/x86/switchcontext.S\n \t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/x86/libgdruntime_la-switchcontext.lo `test -f 'config/x86/switchcontext.S' || echo '$(srcdir)/'`config/x86/switchcontext.S\n \n+config/systemz/libgdruntime_la-get_tls_offset.lo: config/systemz/get_tls_offset.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/systemz/libgdruntime_la-get_tls_offset.lo `test -f 'config/systemz/get_tls_offset.S' || echo '$(srcdir)/'`config/systemz/get_tls_offset.S\n+\n+config/s390/libgdruntime_la-get_tls_offset.lo: config/s390/get_tls_offset.S\n+\t$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(libgdruntime_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o config/s390/libgdruntime_la-get_tls_offset.lo `test -f 'config/s390/get_tls_offset.S' || echo '$(srcdir)/'`config/s390/get_tls_offset.S\n+\n .c.o:\n \t$(AM_V_CC)$(COMPILE) -c -o $@ $<\n \n@@ -1899,6 +1924,8 @@ clean-libtool:\n \t-rm -rf config/mips/.libs config/mips/_libs\n \t-rm -rf config/powerpc/.libs config/powerpc/_libs\n \t-rm -rf config/powerpc64/.libs config/powerpc64/_libs\n+\t-rm -rf config/s390/.libs config/s390/_libs\n+\t-rm -rf config/systemz/.libs config/systemz/_libs\n \t-rm -rf config/x86/.libs config/x86/_libs\n \t-rm -rf core/.libs core/_libs\n \t-rm -rf core/internal/.libs core/internal/_libs\n@@ -2054,6 +2081,8 @@ distclean-generic:\n \t-rm -f config/mips/$(am__dirstamp)\n \t-rm -f config/powerpc/$(am__dirstamp)\n \t-rm -f config/powerpc64/$(am__dirstamp)\n+\t-rm -f config/s390/$(am__dirstamp)\n+\t-rm -f config/systemz/$(am__dirstamp)\n \t-rm -f config/x86/$(am__dirstamp)\n \t-rm -f core/$(am__dirstamp)\n \t-rm -f core/internal/$(am__dirstamp)"}, {"sha": "aaca05cce078742776c6132f118220c75288a13d", "filename": "libphobos/libdruntime/config/s390/get_tls_offset.S", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2Fconfig%2Fs390%2Fget_tls_offset.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2Fconfig%2Fs390%2Fget_tls_offset.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fs390%2Fget_tls_offset.S?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -0,0 +1,25 @@\n+/* IBM Z support code for TLS offsets.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../systemz/get_tls_offset.S\""}, {"sha": "e9e6dc7a1ca1d1cb2d6dac67e4135967639ad247", "filename": "libphobos/libdruntime/config/systemz/get_tls_offset.S", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2Fconfig%2Fsystemz%2Fget_tls_offset.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2Fconfig%2Fsystemz%2Fget_tls_offset.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fconfig%2Fsystemz%2Fget_tls_offset.S?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -0,0 +1,79 @@\n+/* IBM Z support code for TLS offsets.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* __tls_get_offset expects the GOT pointer in %r12 and adds\n+   it to its argument in %r2.  In order to get the offset of\n+   ti, we load it into %r2, subtract the current %r12 from %r2\n+   so the addition will result in a nop (%r2 - %r12 + %r12).\n+\n+   Note: This file is shared between systemz and s390 as the\n+\t same file is used in multilib case for s390x and s390.  */\n+\n+#include \"../common/threadasm.S\"\n+\n+    .text\n+    .globl CSYM(__ibmz_get_tls_offset)\n+    .type CSYM(__ibmz_get_tls_offset), @function\n+    .align 8\n+CSYM(__ibmz_get_tls_offset):\n+    .cfi_startproc\n+\n+#ifdef __s390x__\n+     .machinemode zarch\n+     stmg\t%r14,%r15,112(%r15)\n+     .cfi_offset 14, -48\n+     .cfi_offset 15, -40\n+     aghi\t%r15,-160\n+     .cfi_def_cfa_offset 320\n+     sgr\t%r2,%r12\n+     brasl\t%r14,__tls_get_offset@PLT\n+     lg\t\t%r4,272(%r15)\n+     lmg\t%r14,%r15,272(%r15)\n+     .cfi_restore 15\n+     .cfi_restore 14\n+     .cfi_def_cfa_offset 160\n+     br\t%r4\n+#else\n+    .machinemode esa\n+    stm\t%r12,%r15,48(%r15)\n+    .cfi_offset 12, -48\n+    .cfi_offset 13, -44\n+    .cfi_offset 14, -40\n+    .cfi_offset 15, -36\n+    ahi\t%r15,-96\n+    .cfi_def_cfa_offset 192\n+    larl\t%r12,_GLOBAL_OFFSET_TABLE_\n+    sr\t\t%r2,%r12\n+    brasl\t%r14,__tls_get_offset@PLT\n+    l\t\t%r4,152(%r15)\n+    lm\t\t%r12,%r15,144(%r15)\n+    .cfi_restore 15\n+    .cfi_restore 14\n+    .cfi_restore 13\n+    .cfi_restore 12\n+    .cfi_def_cfa_offset 96\n+    br\t%r4\n+#endif\n+     .cfi_endproc\n+     .size\t__ibmz_get_tls_offset, .-__ibmz_get_tls_offset"}, {"sha": "7ff87a8cec77f7377f78f939956b624daa98a910", "filename": "libphobos/libdruntime/gcc/sections/elf_shared.d", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -1028,7 +1028,7 @@ struct tls_index\n }\n \n extern(C) void* __tls_get_addr(tls_index* ti) nothrow @nogc;\n-extern(C) void* __tls_get_addr_internal(tls_index* ti) nothrow @nogc;\n+extern(C) void* __ibmz_get_tls_offset(tls_index *ti) nothrow @nogc;\n \n /* The dynamic thread vector (DTV) pointers may point 0x8000 past the start of\n  * each TLS block. This is at least true for PowerPC and Mips platforms.\n@@ -1086,9 +1086,11 @@ void[] getTLSRange(size_t mod, size_t sz) nothrow @nogc\n         auto ti = tls_index(mod, 0);\n         version (IBMZ_Any)\n         {\n-            auto idx = cast(void *)__tls_get_addr_internal(&ti)\n-                + cast(ulong)__builtin_thread_pointer();\n-            return idx[0 .. sz];\n+            // IBM Z only provides __tls_get_offset instead of __tls_get_addr\n+            // which returns an offset relative to the thread pointer.\n+            auto addr = __ibmz_get_tls_offset(&ti);\n+            addr = addr + cast(c_ulong)__builtin_thread_pointer();\n+            return addr[0 .. sz];\n         }\n         else\n             return (__tls_get_addr(&ti)-TLS_DTV_OFFSET)[0 .. sz];"}, {"sha": "4887248fd09c2f83adeb7c29be713bba835ea8d9", "filename": "libphobos/m4/druntime/cpu.m4", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Fm4%2Fdruntime%2Fcpu.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e508f9f112acd07d0c49c53589160db8c85fcd/libphobos%2Fm4%2Fdruntime%2Fcpu.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Fcpu.m4?ref=88e508f9f112acd07d0c49c53589160db8c85fcd", "patch": "@@ -25,6 +25,12 @@ AC_DEFUN([DRUNTIME_CPU_SOURCES],\n       i[[34567]]86|x86_64)\n                druntime_target_cpu_parsed=\"x86\"\n                ;;\n+      s390x)\n+               druntime_target_cpu_parsed=\"s390x\"\n+               ;;\n+      s390)\n+               druntime_target_cpu_parsed=\"s390\"\n+               ;;\n   esac\n   AM_CONDITIONAL([DRUNTIME_CPU_AARCH64],\n                  [test \"$druntime_target_cpu_parsed\" = \"aarch64\"])\n@@ -38,6 +44,10 @@ AC_DEFUN([DRUNTIME_CPU_SOURCES],\n                  [test \"$druntime_target_cpu_parsed\" = \"powerpc64\"])\n   AM_CONDITIONAL([DRUNTIME_CPU_X86],\n                  [test \"$druntime_target_cpu_parsed\" = \"x86\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_SYSTEMZ],\n+                 [test \"$druntime_target_cpu_parsed\" = \"s390x\"])\n+  AM_CONDITIONAL([DRUNTIME_CPU_S390],\n+                 [test \"$druntime_target_cpu_parsed\" = \"s390\"])\n ])\n \n "}]}