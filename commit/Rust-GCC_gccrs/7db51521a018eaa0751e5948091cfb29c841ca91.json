{"sha": "7db51521a018eaa0751e5948091cfb29c841ca91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiNTE1MjFhMDE4ZWFhMDc1MWU1OTQ4MDkxY2ZiMjljODQxY2E5MQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-07-27T23:57:07Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-07-27T23:57:07Z"}, "message": "mauve-libgcj: Activated serialization tests.\n\n\t* mauve-libgcj: Activated serialization tests.\n\t* gcj/field.h (getModifiers): Mask off unknown flags.\n\t* gnu/java/security/provider/SHA.java (munch): Reset buffer to 0 so\n\tspurious bits don't cause discrepancies.\n\t* java/io/ObjectOutputStream.java: Fixed typo in comment.\n\t* java/io/ObjectStreamClass.java: Fixed typos in comments.\n\t(lookup): Applied patch from Brian Jones <cbj@gnu.org> to optimize.\n\t(hasClassInitializer): Call getDeclaredMethod instead of getMethod.\n\t* java/lang/Throwable.java (serialVersionUID): New field.\n\t* java/lang/reflect/Modifier.java (ALL_FLAGS): Preserve STRICT if used.\n\t* java/lang/reflect/natConstructor.cc (getModifiers): Mask off\n\tunknown flags.\n\t* java/lang/reflect/natMethod.cc: Ditto.\n\t* java/security/Key.java (serialVersionUID): Removed field for now.\n\t* java/security/interfaces/DSAPrivateKey.java (serialVersionUID): Ditto.\n\t* java/security/interfaces/DSAPublicKey.java (serialVersionUID): Ditto.\n\nSerialization mods.\n\nFrom-SVN: r35302", "tree": {"sha": "ff39f131cca0a0da7843ec7d8797e9f7c82bd82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff39f131cca0a0da7843ec7d8797e9f7c82bd82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7db51521a018eaa0751e5948091cfb29c841ca91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db51521a018eaa0751e5948091cfb29c841ca91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db51521a018eaa0751e5948091cfb29c841ca91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db51521a018eaa0751e5948091cfb29c841ca91/comments", "author": null, "committer": null, "parents": [{"sha": "b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2244c65f518cfb4b6a5385ddfe45bc3ce2cf9c0"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "48743844716909c7d7a477de0c2ab67ba7245fa6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -1,3 +1,22 @@\n+2000-07-27  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* mauve-libgcj: Activated serialization tests.\n+\t* gcj/field.h (getModifiers): Mask off unknown flags.\n+\t* gnu/java/security/provider/SHA.java (munch): Reset buffer to 0 so\n+\tspurious bits don't cause discrepancies.\n+\t* java/io/ObjectOutputStream.java: Fixed typo in comment.\n+\t* java/io/ObjectStreamClass.java: Fixed typos in comments.\n+\t(lookup): Applied patch from Brian Jones <cbj@gnu.org> to optimize.\n+\t(hasClassInitializer): Call getDeclaredMethod instead of getMethod.\n+\t* java/lang/Throwable.java (serialVersionUID): New field.\n+\t* java/lang/reflect/Modifier.java (ALL_FLAGS): Preserve STRICT if used.\n+\t* java/lang/reflect/natConstructor.cc (getModifiers): Mask off\n+\tunknown flags.\n+\t* java/lang/reflect/natMethod.cc: Ditto.\n+\t* java/security/Key.java (serialVersionUID): Removed field for now.\n+\t* java/security/interfaces/DSAPrivateKey.java (serialVersionUID): Ditto.\n+\t* java/security/interfaces/DSAPublicKey.java (serialVersionUID): Ditto.\n+\n 2000-07-22  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/awt/geom/RectangularShape.java (getPathIterator):"}, {"sha": "0ad381c321f79f845641436f13023822a44d7797", "filename": "libjava/gcj/field.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fgcj%2Ffield.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fgcj%2Ffield.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Ffield.h?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -13,6 +13,7 @@ details.  */\n \n #include <java/lang/Class.h>\n #include <java/lang/reflect/Field.h>\n+#include <java/lang/reflect/Modifier.h>\n \n #define _Jv_FIELD_UNRESOLVED_FLAG\t0x8000\n #define\t_Jv_FIELD_CONSTANT_VALUE\t0x4000\n@@ -74,8 +75,11 @@ struct _Jv_Field\n     return type;\n   }\n \n-  // FIXME - may need to mask off internal flags.\n-  int getModifiers() { return flags; }\n+  // Need to mask off all unknown/internal flags before returning.\n+  int getModifiers()\n+  {\n+    return flags & java::lang::reflect::Modifier::ALL_FLAGS;\n+  }\n \n #ifdef COMPACT_FIELDS\n   _Jv_Utf8Const * getNameUtf8Const (jclass cls)"}, {"sha": "e2f72fc2ac073110cf9b187ef60319b4d6ad4a33", "filename": "libjava/gnu/java/security/provider/SHA.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -1,5 +1,5 @@\n /* SHA.java -- Class implementing the SHA-1 algorithm as specified in [1].\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -198,6 +198,10 @@ private void munch ()\n     H2 += C;\n     H3 += D;\n     H4 += E;\n+\n+    // Reset W by clearing it.\n+    for (int t = 0; t < 80; ++ t)\n+      W[t] = 0;\n   }\n   \n   public Object clone ()"}, {"sha": "a13f14a9d58e5a4f6b4afb92b3a13ade9a0ebbf6", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -54,7 +54,7 @@\n \n    Using default serialization, information about the class of an\n    object is written, all of the non-transient, non-static fields of\n-   the object are written, if any of these fields are objects, the are\n+   the object are written, if any of these fields are objects, they are\n    written out in the same manner.\n \n    An object is only written out the first time it is encountered.  If"}, {"sha": "f39d365ad274a0d149c33430f9281525371a71ea", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -1,6 +1,6 @@\n /* ObjectStreamClass.java -- Class used to write class information\n    about serialized objects.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -51,7 +51,7 @@ public class ObjectStreamClass implements Serializable\n   /**\n      Returns the <code>ObjectStreamClass</code> for <code>cl</code>.\n      If <code>cl</code> is null, or is not <code>Serializable</code>,\n-     null is returned.  <code>ObjectStreamClass</code>'s are memoized;\n+     null is returned.  <code>ObjectStreamClass</code>'s are memorized;\n      later calls to this method with the same class will return the\n      same <code>ObjectStreamClass</code> object and no recalculation\n      will be done.\n@@ -62,13 +62,13 @@ public static ObjectStreamClass lookup (Class cl)\n   {\n     if (cl == null)\n       return null;\n+    if (! (Serializable.class).isAssignableFrom (cl))\n+      return null;\n \n     ObjectStreamClass osc = (ObjectStreamClass)classLookupTable.get (cl);\n \n     if (osc != null)\n       return osc;\n-    else if (! (Serializable.class).isAssignableFrom (cl))\n-      return null;\n     else\n     {\n       osc = new ObjectStreamClass (cl);\n@@ -161,7 +161,7 @@ public String toString ()\n   // private void writeObject (ObjectOutputStream)\n   //\n   // This method is used by the class to override default\n-  // serialization behaivior.\n+  // serialization behavior.\n   boolean hasWriteMethod ()\n   {\n     return (flags & ObjectStreamConstants.SC_WRITE_METHOD) != 0;\n@@ -396,7 +396,7 @@ private void setFields (Class cl)\n     calculateOffsets ();\n   }\n \n-  // Sets uid be serial version UID defined by class, or if that\n+  // Sets uid to be serial version UID defined by class, or if that\n   // isn't present, calculates value of serial version UID.\n   private void setUID (Class cl)\n   {\n@@ -603,7 +603,7 @@ private static boolean hasClassInitializer (Class clazz)\n     try\n       {\n \tClass classArgs[] = {};\n-\tm = clazz.getMethod (\"<clinit>\", classArgs);\n+\tm = clazz.getDeclaredMethod (\"<clinit>\", classArgs);\n       }\n     catch (java.lang.NoSuchMethodException e)\n       {"}, {"sha": "610a499a2cb41b4a23da2a3df01c5a86028733a1", "filename": "libjava/java/lang/Throwable.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2FThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2FThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThrowable.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -165,4 +165,5 @@ public String toString ()\n   private String detailMessage;\n \n   private transient byte stackTrace[];\n+  private static final long serialVersionUID = -3042686055658047285L;\n }"}, {"sha": "5fddbc695e4c41b26d9ad32dd9f7dd4989c8b55a", "filename": "libjava/java/lang/reflect/Modifier.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2Freflect%2FModifier.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2Freflect%2FModifier.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FModifier.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -37,7 +37,7 @@\n   public static final int STRICT    = 0x800;\n \n   // This is only used by the C++ code, so it is not public.\n-  static final int ALL_FLAGS = 0x7ff;\n+  static final int ALL_FLAGS = 0xfff;\n \n   public static boolean isAbstract (int mod)\n   {"}, {"sha": "a8da794bdb8844fafb4120083af2f05502667119", "filename": "libjava/java/lang/reflect/natConstructor.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2Freflect%2FnatConstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2Freflect%2FnatConstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatConstructor.cc?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -23,7 +23,8 @@ details.  */\n jint\n java::lang::reflect::Constructor::getModifiers ()\n {\n-  return _Jv_FromReflectedConstructor (this)->accflags;\n+  // Ignore all unknown flags.\n+  return _Jv_FromReflectedConstructor (this)->accflags & Modifier::ALL_FLAGS;\n }\n \n void"}, {"sha": "ce4a15cfc17fa1b8489f265562f0a9cebb8c279e", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -182,7 +182,8 @@ java::lang::reflect::Method::invoke (jobject obj, jobjectArray args)\n jint\n java::lang::reflect::Method::getModifiers ()\n {\n-  return _Jv_FromReflectedMethod (this)->accflags;\n+  // Ignore all unknown flags.\n+  return _Jv_FromReflectedMethod (this)->accflags & Modifier::ALL_FLAGS;\n }\n \n jstring"}, {"sha": "b3f2bef0432279c5cabf13d26f46d982d02b1730", "filename": "libjava/java/security/Key.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fsecurity%2FKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fsecurity%2FKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKey.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -21,7 +21,7 @@\n public interface Key extends Serializable\n {\n   // FIXME: need to set this at some point when serialization is implemented.\n-  public static final long serialVersionUID = 0;\n+  // public static final long serialVersionUID = 0L;\n \n   public String getAlgorithm();\n   public String getFormat();"}, {"sha": "c0efe21b490153dbcb55e9dbfec9b53b238ac339", "filename": "libjava/java/security/interfaces/DSAPrivateKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -22,7 +22,7 @@\n public interface DSAPrivateKey extends DSAKey, PrivateKey\n {\n   // FIXME: need to set this at some point when serialization is implemented.\n-  public static final long serialVersionUID = 0;\n+  // public static final long serialVersionUID = 0L;\n \n   public BigInteger getX();\n }"}, {"sha": "43eedaf1e84278d0b6a317795a009e50ffda5dc4", "filename": "libjava/java/security/interfaces/DSAPublicKey.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -22,7 +22,7 @@\n public interface DSAPublicKey extends DSAKey, PublicKey\n {\n   // FIXME: need to set this at some point when serialization is implemented.\n-  public static final long serialVersionUID = 0;\n+  // public static final long serialVersionUID = 0L;\n \n   public BigInteger getY();\n }"}, {"sha": "bdf807185f5bb7c1fa0b46653f6953fe00c7294d", "filename": "libjava/mauve-libgcj", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fmauve-libgcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db51521a018eaa0751e5948091cfb29c841ca91/libjava%2Fmauve-libgcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fmauve-libgcj?ref=7db51521a018eaa0751e5948091cfb29c841ca91", "patch": "@@ -8,9 +8,9 @@ java.lang.Character.classify12\n java.lang.String.hash\n # We support 1.2 for these 3 tests.\n java.lang.reflect.Modifier.toString12\n-!java.io.ObjectInputOutput.InputTest\n-!java.io.ObjectInputOutput.OutputTest\n-!java.io.ObjectStreamClass.Test\n+java.io.ObjectInputOutput.InputTest\n+java.io.ObjectInputOutput.OutputTest\n+java.io.ObjectStreamClass.Test\n java.math\n !java.rmi\n java.security"}]}