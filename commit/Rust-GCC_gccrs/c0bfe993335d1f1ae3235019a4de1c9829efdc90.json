{"sha": "c0bfe993335d1f1ae3235019a4de1c9829efdc90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiZmU5OTMzMzVkMWYxYWUzMjM1MDE5YTRkZTFjOTgyOWVmZGM5MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-10-08T17:54:15Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-10-08T17:54:15Z"}, "message": "cppfiles.c (open_file): Don't mark zero-length files never-reread here.\n\n\t* cppfiles.c (open_file): Don't mark zero-length files\n\tnever-reread here.  Don't output diagnostics here either.\n\t(stack_include_file): Mark them never-reread here.\n\t(_cpp_read_file): Update.\n\nFrom-SVN: r46084", "tree": {"sha": "f86b7349baa4cd17384b32dbf3756e3d852aa6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86b7349baa4cd17384b32dbf3756e3d852aa6bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0bfe993335d1f1ae3235019a4de1c9829efdc90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bfe993335d1f1ae3235019a4de1c9829efdc90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0bfe993335d1f1ae3235019a4de1c9829efdc90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bfe993335d1f1ae3235019a4de1c9829efdc90/comments", "author": null, "committer": null, "parents": [{"sha": "d5d1b9e2d10970fdb018ff0aeddf1b04b9c27f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d1b9e2d10970fdb018ff0aeddf1b04b9c27f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d1b9e2d10970fdb018ff0aeddf1b04b9c27f38"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "6c22095fe3df2481053db5e30f955fb3c286ed1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bfe993335d1f1ae3235019a4de1c9829efdc90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bfe993335d1f1ae3235019a4de1c9829efdc90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0bfe993335d1f1ae3235019a4de1c9829efdc90", "patch": "@@ -1,3 +1,10 @@\n+2001-10-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppfiles.c (open_file): Don't mark zero-length files\n+\tnever-reread here.  Don't output diagnostics here either.\n+\t(stack_include_file): Mark them never-reread here.\n+\t(_cpp_read_file): Update.\n+\n 2001-10-08  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/sol2.h (UNALIGNED_DOUBLE_INT_ASM_OP): New."}, {"sha": "ebefd9538c6718bcac41830e77b7e5c4817d1414", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bfe993335d1f1ae3235019a4de1c9829efdc90/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bfe993335d1f1ae3235019a4de1c9829efdc90/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=c0bfe993335d1f1ae3235019a4de1c9829efdc90", "patch": "@@ -248,30 +248,15 @@ open_file (pfile, filename)\n \n   if (file->fd != -1 && fstat (file->fd, &file->st) == 0)\n     {\n+      if (!S_ISDIR (file->st.st_mode))\n+\treturn file;\n       /* If it's a directory, we return null and continue the search\n \t as the file we're looking for may appear elsewhere in the\n \t search path.  */\n-      if (S_ISDIR (file->st.st_mode))\n-\terrno = ENOENT;\n-      else\n-\t{\n-\t  /* Mark a regular, zero-length file never-reread now.  */\n-\t  if (S_ISREG (file->st.st_mode) && file->st.st_size == 0)\n-\t    {\n-\t      _cpp_never_reread (file);\n-\t      close (file->fd);\n-\t      file->fd = -1;\n-\t    }\n-\n-\t  return file;\n-\t}\n+      errno = ENOENT;\n     }\n \n-  /* Don't issue an error message if the file doesn't exist.  */\n   file->err_no = errno;\n-  if (errno != ENOENT && errno != ENOTDIR)\n-    cpp_error_from_errno (pfile, file->name);\n-\n   return 0;\n }\n \n@@ -302,9 +287,14 @@ stack_include_file (pfile, inc)\n   /* Not in cache?  */\n   if (! inc->buffer)\n     {\n-      /* If an error occurs, do not try to read this file again.  */\n-      if (read_include_file (pfile, inc))\n+      /* Mark a regular, zero-length file never-reread.  Zero-length\n+\t files are stacked the first time, so preprocessing a main\n+\t file of zero length does not raise an error.  */\n+      if (S_ISREG (inc->st.st_mode) && inc->st.st_size == 0)\n+\t_cpp_never_reread (inc);\n+      else if (read_include_file (pfile, inc))\n \t{\n+\t  /* If an error occurs, do not try to read this file again.  */\n \t  _cpp_never_reread (inc);\n \t  return false;\n \t}\n@@ -710,14 +700,14 @@ _cpp_read_file (pfile, fname)\n      const char *fname;\n {\n   struct include_file *f = open_file (pfile, fname);\n-  bool stacked = false;\n \n   if (f == NULL)\n-    cpp_error_from_errno (pfile, fname);\n-  else\n-    stacked = stack_include_file (pfile, f);\n+    {\n+      cpp_error_from_errno (pfile, fname);\n+      return false;\n+    }\n \n-  return stacked;\n+  return stack_include_file (pfile, f);\n }\n \n /* Do appropriate cleanup when a file buffer is popped off the input"}]}