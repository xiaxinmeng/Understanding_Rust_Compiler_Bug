{"sha": "b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4YTA1ZDA4MzA2YmQyYTBiODFlMWE1OWUwZDdiM2Q2NmRkYWNhMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-07T03:40:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-07T03:40:19Z"}, "message": "decl.c (grokdeclarator): Don't bother checking for CHAR_TYPE.\n\n\n\t* decl.c (grokdeclarator): Don't bother checking for CHAR_TYPE.\n\t* rtti.c (typeinfo_in_lib_p): Likewise.\n\t* cp-tree.h (INTEGRAL_CODE_P, CP_INTEGRAL_TYPE_P): Likewise.\n\t* name-lookup.c (arg_assoc_type): Likewise.\n\nFrom-SVN: r110687", "tree": {"sha": "9e27cd6f5a27692de0259155b401527de3591637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e27cd6f5a27692de0259155b401527de3591637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/comments", "author": null, "committer": null, "parents": [{"sha": "0cc8f5c5a09116a8696ec33c5cf4651c8fe37fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc8f5c5a09116a8696ec33c5cf4651c8fe37fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc8f5c5a09116a8696ec33c5cf4651c8fe37fb6"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "18da1285724a01e7ec6c360e6e38e18bb5cb82b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "patch": "@@ -1,3 +1,10 @@\n+2006-02-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* decl.c (grokdeclarator): Don't bother checking for CHAR_TYPE.\n+\t* rtti.c (typeinfo_in_lib_p): Likewise.\n+\t* cp-tree.h (INTEGRAL_CODE_P, CP_INTEGRAL_TYPE_P): Likewise.\n+\t* name-lookup.c (arg_assoc_type): Likewise.\n+\n 2006-02-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cp-tree.h (tf_warn_or_error): New substituion flag."}, {"sha": "1ae93e9b0360acddf0788e54ec32d0f3c817ff4b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C++ parsing and type checking.\n    Copyright (C) 1987, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005  Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -2358,12 +2358,12 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define DECL_EXTERNAL_LINKAGE_P(DECL) \\\n   (decl_linkage (DECL) == lk_external)\n \n-/* Keep these codes in ascending code order.  CHAR_TYPE is used here\n-   to completely fill the range.  */\n+/* Keep these codes in ascending code order.  */\n \n-#define INTEGRAL_CODE_P(CODE)\t\t\t\t\\\n-  ((CODE) == ENUMERAL_TYPE || (CODE) == BOOLEAN_TYPE\t\\\n-   || (CODE) == CHAR_TYPE || (CODE) == INTEGER_TYPE)\n+#define INTEGRAL_CODE_P(CODE)\t\\\n+  ((CODE) == ENUMERAL_TYPE\t\\\n+   || (CODE) == BOOLEAN_TYPE\t\\\n+   || (CODE) == INTEGER_TYPE)\n \n /* [basic.fundamental]\n \n@@ -2372,11 +2372,9 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n \n    Note that INTEGRAL_TYPE_P, as defined in tree.h, allows enumeration\n    types as well, which is incorrect in C++.  Keep these checks in\n-   ascending code order.  CHAR_TYPE is added to complete the interval of\n-   values.  */\n+   ascending code order.  */\n #define CP_INTEGRAL_TYPE_P(TYPE)\t\t\\\n   (TREE_CODE (TYPE) == BOOLEAN_TYPE\t\t\\\n-   || TREE_CODE (TYPE) == CHAR_TYPE\t\t\\\n    || TREE_CODE (TYPE) == INTEGER_TYPE)\n \n /* Returns true if TYPE is an integral or enumeration name.  Keep"}, {"sha": "f9b24264d4bc81d437deebbbd11c52e0b956b843", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005  Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -7035,8 +7035,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t     `signed int' cannot be so controlled.  */\n \t  && !(typedef_decl\n \t       && C_TYPEDEF_EXPLICITLY_SIGNED (typedef_decl))\n-\t  && (TREE_CODE (type) == INTEGER_TYPE\n-\t      || TREE_CODE (type) == CHAR_TYPE)\n+\t  && TREE_CODE (type) == INTEGER_TYPE\n \t  && !same_type_p (TYPE_MAIN_VARIANT (type), wchar_type_node)))\n     {\n       if (longlong)"}, {"sha": "449b8c625ac3d28c41338d61f40030fa10cf3722", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for C++ name lookup routines.\n-   Copyright (C) 2003, 2004, 2005  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006  Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n This file is part of GCC.\n@@ -4445,7 +4445,6 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n-    case CHAR_TYPE:\n     case BOOLEAN_TYPE:\n       return false;\n     case RECORD_TYPE:"}, {"sha": "7b1a667c214058d0b24dcc8f8f1958b0e16c0ff5", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=b38a05d08306bd2a0b81e1a59e0d7b3d66ddaca2", "patch": "@@ -1,6 +1,6 @@\n /* RunTime Type Identification\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005\n+   2005, 2006\n    Free Software Foundation, Inc.\n    Mostly written by Jason Merrill (jason@cygnus.com).\n \n@@ -986,7 +986,6 @@ typeinfo_in_lib_p (tree type)\n     {\n     case INTEGER_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case REAL_TYPE:\n     case VOID_TYPE:\n       return true;"}]}