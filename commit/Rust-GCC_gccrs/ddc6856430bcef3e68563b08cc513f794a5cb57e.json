{"sha": "ddc6856430bcef3e68563b08cc513f794a5cb57e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjNjg1NjQzMGJjZWYzZTY4NTYzYjA4Y2M1MTNmNzk0YTVjYjU3ZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-03-04T10:23:23Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-03-04T10:23:23Z"}, "message": "real.c (encode_ibm_extended): Don't bother rounding low double.\n\n\t* real.c (encode_ibm_extended): Don't bother rounding low double.\n\t* c-cppbuiltin.c (builtin_define_float_constants): Tweak MAX\n\twhen fmt->pnan < fmt->p.\n\nFrom-SVN: r78900", "tree": {"sha": "2a5b34507a773fc68de86a6f3a19dec1a8df7b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a5b34507a773fc68de86a6f3a19dec1a8df7b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc6856430bcef3e68563b08cc513f794a5cb57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc6856430bcef3e68563b08cc513f794a5cb57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc6856430bcef3e68563b08cc513f794a5cb57e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc6856430bcef3e68563b08cc513f794a5cb57e/comments", "author": null, "committer": null, "parents": [{"sha": "ca87076c9bfac0090fcc26c06dd1c24dc5e72bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca87076c9bfac0090fcc26c06dd1c24dc5e72bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca87076c9bfac0090fcc26c06dd1c24dc5e72bc9"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "071f579e3bdbcfea5e2ead89ae92093fb6a028b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc6856430bcef3e68563b08cc513f794a5cb57e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc6856430bcef3e68563b08cc513f794a5cb57e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddc6856430bcef3e68563b08cc513f794a5cb57e", "patch": "@@ -1,3 +1,9 @@\n+2004-03-04  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* real.c (encode_ibm_extended): Don't bother rounding low double.\n+\t* c-cppbuiltin.c (builtin_define_float_constants): Tweak MAX\n+\twhen fmt->pnan < fmt->p.\n+\n 2004-03-04  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.h (FUNCTION_ARG_REGNO_P): Fix to check"}, {"sha": "8573b8c5a46e1165a4cab0e4196ed7178b1b7a90", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc6856430bcef3e68563b08cc513f794a5cb57e/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc6856430bcef3e68563b08cc513f794a5cb57e/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=ddc6856430bcef3e68563b08cc513f794a5cb57e", "patch": "@@ -193,6 +193,16 @@ builtin_define_float_constants (const char *name_prefix, const char *fp_suffix,\n     if (i < n)\n       *p++ = \"08ce\"[n - i];\n     sprintf (p, \"p%d\", fmt->emax * fmt->log2_b);\n+    if (fmt->pnan < fmt->p)\n+      {\n+\t/* This is an IBM extended double format made up of two IEEE\n+\t   doubles.  The value of the long double is the sum of the\n+\t   values of the two parts.  The most significant part is\n+\t   required to be the value of the long double rounded to the\n+\t   nearest double.  Rounding means we need a slightly smaller\n+\t   value for LDBL_MAX.  */\n+\tbuf[4 + fmt->pnan / 4] = \"7bde\"[fmt->pnan % 4];\n+      }\n   }\n   sprintf (name, \"__%s_MAX__\", name_prefix);\n   builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix);"}, {"sha": "d578ace08831ee4578f6efe89a932dd1acfffa28", "filename": "gcc/real.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc6856430bcef3e68563b08cc513f794a5cb57e/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc6856430bcef3e68563b08cc513f794a5cb57e/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=ddc6856430bcef3e68563b08cc513f794a5cb57e", "patch": "@@ -3248,7 +3248,9 @@ encode_ibm_extended (const struct real_format *fmt, long *buf,\n   if (u.class == rvc_normal)\n     {\n       do_add (&v, &normr, &u, 1);\n-      round_for_format (base_fmt, &v);\n+      /* The low double won't need rounding, since we round to a 106 bit\n+\t mantissa before calling this function, and we've just\n+\t subtracted off the top 54 bits.  (53+1 because u is rounded.)  */\n       encode_ieee_double (base_fmt, &buf[2], &v);\n     }\n   else"}]}