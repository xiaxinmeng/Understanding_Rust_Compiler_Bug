{"sha": "8afd015aab1d0e10840c6b7962e9cbc130f13dbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmZDAxNWFhYjFkMGUxMDg0MGM2Yjc5NjJlOWNiYzEzMGYxM2RiZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-12-09T23:04:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-12-09T23:04:01Z"}, "message": "gimplify.c (gimplify_init_constructor): Revert to using < rather than <= for sparseness test.\n\n        * gimplify.c (gimplify_init_constructor): Revert to using < rather\n        than <= for sparseness test.\n\nFrom-SVN: r142618", "tree": {"sha": "e7282b8a93811ed9d5f8f3c86baf9e66d6127e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7282b8a93811ed9d5f8f3c86baf9e66d6127e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8afd015aab1d0e10840c6b7962e9cbc130f13dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afd015aab1d0e10840c6b7962e9cbc130f13dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afd015aab1d0e10840c6b7962e9cbc130f13dbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afd015aab1d0e10840c6b7962e9cbc130f13dbd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0889e9bc6841c76484e029eeed31f85a35ae4e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889e9bc6841c76484e029eeed31f85a35ae4e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0889e9bc6841c76484e029eeed31f85a35ae4e55"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "407237718f797fef89c5a3bc06fac3c7657d62d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afd015aab1d0e10840c6b7962e9cbc130f13dbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afd015aab1d0e10840c6b7962e9cbc130f13dbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8afd015aab1d0e10840c6b7962e9cbc130f13dbd", "patch": "@@ -166,6 +166,9 @@\n \n 2008-12-09  Jason Merrill  <jason@redhat.com>\n \n+\t* gimplify.c (gimplify_init_constructor): Revert to using < rather\n+\tthan <= for sparseness test.\n+\n \tPR c++/38410\n \t* gimplify.c (gimplify_init_constructor): Don't write out a static\n \tcopy of the CONSTRUCTOR for TREE_ADDRESSABLE types or small sparse"}, {"sha": "607743b73f0e2f19f52c7c80b2329b67680be5a9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afd015aab1d0e10840c6b7962e9cbc130f13dbd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afd015aab1d0e10840c6b7962e9cbc130f13dbd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8afd015aab1d0e10840c6b7962e9cbc130f13dbd", "patch": "@@ -3502,7 +3502,7 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tstruct gimplify_init_ctor_preeval_data preeval_data;\n \tHOST_WIDE_INT num_type_elements, num_ctor_elements;\n \tHOST_WIDE_INT num_nonzero_elements;\n-\tbool cleared, valid_const_initializer, sparse;\n+\tbool cleared, valid_const_initializer;\n \n \t/* Aggregate types must lower constructors to initialization of\n \t   individual elements.  The exception is that a CONSTRUCTOR node\n@@ -3558,9 +3558,6 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n \tnum_type_elements = count_type_elements (type, true);\n \n-\t/* Are there significantly more zeros than non-zeros?  */\n-\tsparse = (num_nonzero_elements <= num_type_elements/4);\n-\n \t/* If count_type_elements could not determine number of type elements\n \t   for a constant-sized object, assume clearing is needed.\n \t   Don't do this for variable-sized objects, as store_constructor\n@@ -3570,7 +3567,7 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t/* If there are \"lots\" of zeros, then block clear the object first.  */\n \telse if (num_type_elements - num_nonzero_elements\n \t\t > CLEAR_RATIO (optimize_function_for_speed_p (cfun))\n-\t\t && sparse)\n+\t\t && num_nonzero_elements < num_type_elements/4)\n \t  cleared = true;\n \t/* ??? This bit ought not be needed.  For any element not present\n \t   in the initializer, we should simply set them to zero.  Except\n@@ -3585,9 +3582,12 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t   be dropped to memory, and then memcpy'd out.  Don't do this\n \t   for sparse arrays, though, as it's more efficient to follow\n \t   the standard CONSTRUCTOR behavior of memset followed by\n-\t   individual element initialization.  Also don't try to do\n-\t   bitwise copies of TREE_ADDRESSABLE types.  */\n-\tif (valid_const_initializer && !(cleared || sparse)\n+\t   individual element initialization.  Also don't do this for small\n+\t   all-zero initializers (which aren't big enough to merit\n+\t   clearing), and don't try to make bitwise copies of\n+\t   TREE_ADDRESSABLE types.  */\n+\tif (valid_const_initializer\n+\t    && !(cleared || num_nonzero_elements == 0)\n \t    && !TREE_ADDRESSABLE (type))\n \t  {\n \t    HOST_WIDE_INT size = int_size_in_bytes (type);"}]}