{"sha": "58747e480855841d1d510af687f7292c95151d17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3NDdlNDgwODU1ODQxZDFkNTEwYWY2ODdmNzI5MmM5NTE1MWQxNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:30:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-10T12:30:10Z"}, "message": "[multiple changes]\n\n2013-10-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-oscons-tmplt.c, s-taprop-posix.adb (CLOCK_REALTIME): Always define,\n\tpossibly using a dummy placeholder value.\n\t(Compute_Deadline): For the case of an\n\tAbsolute_Calendar deadline, if the target uses another clock\n\tthan CLOCK_REALTIME as CLOCK_RT_Ada, compensate for possible\n\tdifferent epoch.\n\n2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Expanded_Name): Handle properly a fully\n\tqualified reference to a generic child unit within itself,\n\tin an instantiation.\n\nFrom-SVN: r203363", "tree": {"sha": "663e8bb2e76b347fa1c551e019012f3479123e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/663e8bb2e76b347fa1c551e019012f3479123e11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58747e480855841d1d510af687f7292c95151d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58747e480855841d1d510af687f7292c95151d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58747e480855841d1d510af687f7292c95151d17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58747e480855841d1d510af687f7292c95151d17/comments", "author": null, "committer": null, "parents": [{"sha": "4530b919823b0cd7cdaddd14350310e2cb5711c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4530b919823b0cd7cdaddd14350310e2cb5711c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4530b919823b0cd7cdaddd14350310e2cb5711c4"}], "stats": {"total": 80, "additions": 65, "deletions": 15}, "files": [{"sha": "8936328f37af0f064235be63725fc60d794221be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58747e480855841d1d510af687f7292c95151d17", "patch": "@@ -1,3 +1,18 @@\n+2013-10-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-oscons-tmplt.c, s-taprop-posix.adb (CLOCK_REALTIME): Always define,\n+\tpossibly using a dummy placeholder value.\n+\t(Compute_Deadline): For the case of an\n+\tAbsolute_Calendar deadline, if the target uses another clock\n+\tthan CLOCK_REALTIME as CLOCK_RT_Ada, compensate for possible\n+\tdifferent epoch.\n+\n+2013-10-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Expanded_Name): Handle properly a fully\n+\tqualified reference to a generic child unit within itself,\n+\tin an instantiation.\n+\n 2013-10-10  Pascal Obry  <obry@adacore.com>\n \n \t* prj-conf.adb: Minor typo fixes in comment."}, {"sha": "7a6d9eba7854478a6118cd3f27ee8cc45326ed83", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=58747e480855841d1d510af687f7292c95151d17", "patch": "@@ -1389,13 +1389,10 @@ CST(Inet_Pton_Linkname, \"\")\n \n /* Note: On HP-UX, CLOCK_REALTIME is an enum, not a macro. */\n \n-#if defined(CLOCK_REALTIME) || defined (__hpux__)\n-# define HAVE_CLOCK_REALTIME\n+#if !(defined (__hpux__) || defined (CLOCK_REALTIME))\n+# define CLOCK_REALTIME -1\n #endif\n-\n-#ifdef HAVE_CLOCK_REALTIME\n CND(CLOCK_REALTIME, \"System realtime clock\")\n-#endif\n \n #ifdef CLOCK_MONOTONIC\n CND(CLOCK_MONOTONIC, \"System monotonic clock\")"}, {"sha": "cf45eb4b6dbb570f6b3cb23f9d17f5bb9949c069", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=58747e480855841d1d510af687f7292c95151d17", "patch": "@@ -262,19 +262,49 @@ package body System.Task_Primitives.Operations is\n    begin\n       Check_Time := Monotonic_Clock;\n \n+      --  Relative deadline\n+\n       if Mode = Relative then\n          Abs_Time := Duration'Min (Time, Max_Sensible_Delay) + Check_Time;\n \n          if Relative_Timed_Wait then\n             Rel_Time := Duration'Min (Max_Sensible_Delay, Time);\n          end if;\n \n-      else\n+         pragma Warnings (Off);\n+         --  Must comment a pragma Warnings (Off) to say why ???\n+\n+      --  Absolute deadline specified using the tasking clock (CLOCK_RT_Ada)\n+\n+      elsif Mode = Absolute_RT\n+              or else OSC.CLOCK_RT_Ada = OSC.CLOCK_REALTIME\n+      then\n+         pragma Warnings (On);\n          Abs_Time := Duration'Min (Check_Time + Max_Sensible_Delay, Time);\n \n          if Relative_Timed_Wait then\n             Rel_Time := Duration'Min (Max_Sensible_Delay, Time - Check_Time);\n          end if;\n+\n+      --  Absolute deadline specified using the real-time clock, in the\n+      --  case where it is not the same as the tasking clock: compensate for\n+      --  difference between clock epochs (Base_Time - Base_Cal_Time).\n+\n+      else\n+         declare\n+            Cal_Check_Time : constant Duration :=\n+                               OS_Primitives.Monotonic_Clock;\n+            RT_Time        : constant Duration :=\n+                               Time + Check_Time - Cal_Check_Time;\n+         begin\n+            Abs_Time :=\n+              Duration'Min (Check_Time + Max_Sensible_Delay, RT_Time);\n+\n+            if Relative_Timed_Wait then\n+               Rel_Time :=\n+                 Duration'Min (Max_Sensible_Delay, RT_Time - Check_Time);\n+            end if;\n+         end;\n       end if;\n    end Compute_Deadline;\n "}, {"sha": "ee2749f86560b431faca44df71554ae639e67117", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58747e480855841d1d510af687f7292c95151d17/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=58747e480855841d1d510af687f7292c95151d17", "patch": "@@ -5157,12 +5157,10 @@ package body Sem_Ch8 is\n       Selector  : constant Node_Id := Selector_Name (N);\n       Candidate : Entity_Id        := Empty;\n       P_Name    : Entity_Id;\n-      O_Name    : Entity_Id;\n       Id        : Entity_Id;\n \n    begin\n       P_Name := Entity (Prefix (N));\n-      O_Name := P_Name;\n \n       --  If the prefix is a renamed package, look for the entity in the\n       --  original package.\n@@ -5340,15 +5338,22 @@ package body Sem_Ch8 is\n             else\n                --  Within the instantiation of a child unit, the prefix may\n                --  denote the parent instance, but the selector has the name\n-               --  of the original child. Find whether we are within the\n-               --  corresponding instance, and get the proper entity, which\n-               --  can only be an enclosing scope.\n-\n-               if O_Name /= P_Name\n-                 and then In_Open_Scopes (P_Name)\n+               --  of the original child. That is to say, when A.B appears\n+               --  within an instantiation of generic child unit B, the scope\n+               --  stack includes an instance of A (P_Name) and an instance\n+               --  of B under some other name. We scan the scope to find this\n+               --  child instance, which is the desired entity.\n+               --  Note that the parent may itself be a child instance, if\n+               --  the reference is of the form A.B.C, in which case A.B has\n+               --  already been rewritten with the proper entity.\n+\n+               if In_Open_Scopes (P_Name)\n                  and then Is_Generic_Instance (P_Name)\n                then\n                   declare\n+                     Gen_Par : constant Entity_Id :=\n+                                 Generic_Parent (Specification\n+                                   (Unit_Declaration_Node (P_Name)));\n                      S : Entity_Id := Current_Scope;\n                      P : Entity_Id;\n \n@@ -5365,9 +5370,12 @@ package body Sem_Ch8 is\n                            P := Generic_Parent (Specification\n                                   (Unit_Declaration_Node (S)));\n \n+                           --  Check that P is a generic child of the generic\n+                           --  parent of the prefix.\n+\n                            if Present (P)\n-                             and then Chars (Scope (P)) = Chars (O_Name)\n                              and then Chars (P) = Chars (Selector)\n+                             and then Scope (P) = Gen_Par\n                            then\n                               Id := S;\n                               goto Found;"}]}