{"sha": "26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkNmFlNTVkODhkZGRjMmYyZjk5ZDlhYzdiZjExOTM1MzA3YjRlYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-05-23T20:50:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-05-23T20:50:10Z"}, "message": "re PR c++/70972 (Inheriting constructors taking parameters by value should move them, not copy)\n\n/cp\n2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70972\n\t* method.c (forward_parm): Use cp_build_reference_type.\n\n/testsuite\n2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70972\n\t* g++.dg/cpp0x/inh-ctor20.C: New.\n\t* g++.dg/cpp0x/inh-ctor21.C: Likewise.\n\nFrom-SVN: r236614", "tree": {"sha": "0b372cc8356ef8c62ff86c557de938fa92ebfe15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b372cc8356ef8c62ff86c557de938fa92ebfe15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/comments", "author": null, "committer": null, "parents": [{"sha": "447caf82a46a3f14ef475897791d11051f2f100c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447caf82a46a3f14ef475897791d11051f2f100c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447caf82a46a3f14ef475897791d11051f2f100c"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "6201bdaa036f36ce3ca1eba3c8825ccba9d3d83d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "patch": "@@ -1,3 +1,8 @@\n+2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70972\n+\t* method.c (forward_parm): Use cp_build_reference_type.\n+\n 2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/69095"}, {"sha": "cd8faaf483f67cabc724820042a2e1058ed11f63", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "patch": "@@ -484,6 +484,8 @@ forward_parm (tree parm)\n   tree type = TREE_TYPE (parm);\n   if (DECL_PACK_P (parm))\n     type = PACK_EXPANSION_PATTERN (type);\n+  if (TREE_CODE (type) != REFERENCE_TYPE)\n+    type = cp_build_reference_type (type, /*rval=*/true);\n   exp = build_static_cast (type, exp, tf_warning_or_error);\n   if (DECL_PACK_P (parm))\n     exp = make_pack_expansion (exp);"}, {"sha": "ef528f203447deedd385718d6846cb4374df45d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "patch": "@@ -1,3 +1,9 @@\n+2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70972\n+\t* g++.dg/cpp0x/inh-ctor20.C: New.\n+\t* g++.dg/cpp0x/inh-ctor21.C: Likewise.\n+\n 2016-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/69095"}, {"sha": "f33056df49376dfe0100e7fc6df00f525786fa7f", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor20.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor20.C?ref=26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/70972\n+// { dg-do compile { target c++11 } }\n+\n+struct moveonly {\n+    moveonly(moveonly&&) = default;\n+    moveonly() = default;\n+};\n+\n+struct A {\n+    A(moveonly) {}\n+};\n+struct B : A {\n+    using A::A;\n+};\n+\n+B b(moveonly{});"}, {"sha": "64655068a0a9aa10df704f39489bfbbb1548731a", "filename": "gcc/testsuite/g++.dg/cpp0x/inh-ctor21.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finh-ctor21.C?ref=26d6ae55d88dddc2f2f99d9ac7bf11935307b4ec", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/70972\n+// { dg-do run { target c++11 } }\n+\n+struct abort_on_copy{\n+    abort_on_copy(abort_on_copy&&) = default;\n+    abort_on_copy(const abort_on_copy&) { __builtin_abort(); }\n+    abort_on_copy() = default;\n+};\n+\n+struct A {\n+    A(abort_on_copy) {}\n+};\n+struct B : A {\n+    using A::A;\n+};\n+\n+int main() {\n+    B b(abort_on_copy{});\n+}"}]}