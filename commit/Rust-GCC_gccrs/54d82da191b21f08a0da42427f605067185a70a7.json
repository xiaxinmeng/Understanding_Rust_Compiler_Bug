{"sha": "54d82da191b21f08a0da42427f605067185a70a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkODJkYTE5MWIyMWYwOGEwZGE0MjQyN2Y2MDUwNjcxODVhNzBhNw==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2007-07-16T09:19:26Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2007-07-16T09:19:26Z"}, "message": "ctype_base.h: Use the generic libstdc++ masks rather than MSVCRT defines.\n\n\t* config/os/mingw32/ctype_base.h: Use the generic libstdc++ masks\n\trather than MSVCRT defines.\n\t* config/os/mingw32/ctype_noninline.h (classic_table): Construct\n\tand return a static classic table based on generic libstdc++ masks.\n\nFrom-SVN: r126674", "tree": {"sha": "c437a67a07f904f8658f8781da1f88ce1a16dd5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c437a67a07f904f8658f8781da1f88ce1a16dd5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d82da191b21f08a0da42427f605067185a70a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d82da191b21f08a0da42427f605067185a70a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d82da191b21f08a0da42427f605067185a70a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d82da191b21f08a0da42427f605067185a70a7/comments", "author": null, "committer": null, "parents": [{"sha": "19ddfd3a76d907e457e9894061df5ece46d6785b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ddfd3a76d907e457e9894061df5ece46d6785b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ddfd3a76d907e457e9894061df5ece46d6785b"}], "stats": {"total": 198, "additions": 176, "deletions": 22}, "files": [{"sha": "3870147c39b886af21884598efdf29c5d4630c7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d82da191b21f08a0da42427f605067185a70a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d82da191b21f08a0da42427f605067185a70a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54d82da191b21f08a0da42427f605067185a70a7", "patch": "@@ -1,3 +1,10 @@\n+2007-07-16  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* config/os/mingw32/ctype_base.h: Use the generic libstdc++ masks\n+\trather than MSVCRT defines.\n+\t* config/os/mingw32/ctype_noninline.h (classic_table): Construct\n+\tand return a static classic table based on generic libstdc++ masks.\n+\n 2007-07-12  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* testsuite/tr1/3_function_objects/bind/all_bound.cc: Disambiguate"}, {"sha": "d4365f9b0838c0468674c59dff293a5011e8b46d", "filename": "libstdc++-v3/config/os/mingw32/ctype_base.h", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d82da191b21f08a0da42427f605067185a70a7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d82da191b21f08a0da42427f605067185a70a7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_base.h?ref=54d82da191b21f08a0da42427f605067185a70a7", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,9 +30,15 @@\n //\n // ISO C++ 14882: 22.1  Locales\n //\n-  \n-// Information, as gleaned from /mingw32/include/ctype.h.\n-  \n+\n+//  We don't use the C-locale masks defined in mingw/include/ctype.h\n+//  because those masks do not conform to the requirements of 22.2.1.\n+//  In particular, a separate 'print' bitmask does not exist (isprint(c)\n+//  relies on a combination of flags) and the  '_ALPHA' mask is also a\n+//  combination of simple bitmasks.  Thus, we define libstdc++-specific\n+//  masks here, based on the generic masks, and the corresponding\n+//  classic_table in ctype_noninline.h.\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// @brief  Base class for ctype.\n@@ -44,17 +50,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n     typedef unsigned short \tmask;   \n-    static const mask upper    \t= _UPPER;\n-    static const mask lower \t= _LOWER;\n-    static const mask alpha \t= _ALPHA;\n-    static const mask digit \t= _DIGIT;\n-    static const mask xdigit \t= _HEX;\n-    static const mask space \t= _SPACE;\n-    static const mask print \t= (_BLANK | _PUNCT| _ALPHA | _DIGIT);\n-    static const mask graph \t= (_PUNCT | _ALPHA | _DIGIT);\n-    static const mask cntrl \t= _CONTROL;\n-    static const mask punct \t= _PUNCT;\n-    static const mask alnum \t= (_ALPHA | _DIGIT);\n+    static const mask upper\t= 1 << 0;\n+    static const mask lower\t= 1 << 1;\n+    static const mask alpha\t= 1 << 2;\n+    static const mask digit\t= 1 << 3;\n+    static const mask xdigit\t= 1 << 4;\n+    static const mask space\t= 1 << 5;\n+    static const mask print\t= 1 << 6;\n+    static const mask graph\t= (1 << 2) | (1 << 3) | (1 << 9);  // alnum|punct\n+    static const mask cntrl\t= 1 << 8;\n+    static const mask punct \t= 1 << 9;\n+    static const mask alnum\t= (1 << 2) | (1 << 3);  // alpha|digit\n   };\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "b7b0c2969b153205ca02b66ead40e8ca7b6cc451", "filename": "libstdc++-v3/config/os/mingw32/ctype_noninline.h", "status": "modified", "additions": 148, "deletions": 7, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d82da191b21f08a0da42427f605067185a70a7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d82da191b21f08a0da42427f605067185a70a7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h?ref=54d82da191b21f08a0da42427f605067185a70a7", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2002, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,15 +37,155 @@\n // ISO C++ 14882: 22.1  Locales\n //\n   \n-// Information as gleaned from /mingw32/include/ctype.h.\n-\n-  // This should be in mingw's ctype.h but isn't in older versions\n-  // Static classic C-locale table.  _ctype[0] is EOF\n-  extern \"C\"  unsigned short  __declspec(dllimport) _ctype[];\n+// The classic table used in libstdc++ is *not* the C _ctype table\n+// used by mscvrt, but is based on the ctype masks defined for libstdc++\n+// in ctype_base.h.\n \n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n-  { return _ctype + 1; }  \n+  {\n+    static const ctype_base::mask _S_classic_table[256] = \n+    {\n+      cntrl /* null */,\n+      cntrl /* ^A */,\n+      cntrl /* ^B */,\n+      cntrl /* ^C */,\n+      cntrl /* ^D */,\n+      cntrl /* ^E */,\n+      cntrl /* ^F */,\n+      cntrl /* ^G */,\n+      cntrl /* ^H */,\n+      ctype_base::mask(space | cntrl) /* tab */,\n+      ctype_base::mask(space | cntrl) /* LF */,\n+      ctype_base::mask(space | cntrl) /* ^K */,\n+      ctype_base::mask(space | cntrl) /* FF */,\n+      ctype_base::mask(space | cntrl) /* ^M */,\n+      cntrl /* ^N */,\n+      cntrl /* ^O */,\n+      cntrl /* ^P */,\n+      cntrl /* ^Q */,\n+      cntrl /* ^R */,\n+      cntrl /* ^S */,\n+      cntrl /* ^T */,\n+      cntrl /* ^U */,\n+      cntrl /* ^V */,\n+      cntrl /* ^W */,\n+      cntrl /* ^X */,\n+      cntrl /* ^Y */,\n+      cntrl /* ^Z */,\n+      cntrl /* esc */,\n+      cntrl /* ^\\ */,\n+      cntrl /* ^] */,\n+      cntrl /* ^^ */,\n+      cntrl /* ^_ */,\n+      ctype_base::mask(space | print) /*   */,\n+      ctype_base::mask(punct | print) /* ! */,\n+      ctype_base::mask(punct | print) /* \" */,\n+      ctype_base::mask(punct | print) /* # */,\n+      ctype_base::mask(punct | print) /* $ */,\n+      ctype_base::mask(punct | print) /* % */,\n+      ctype_base::mask(punct | print) /* & */,\n+      ctype_base::mask(punct | print) /* ' */,\n+      ctype_base::mask(punct | print) /* ( */,\n+      ctype_base::mask(punct | print) /* ) */,\n+      ctype_base::mask(punct | print) /* * */,\n+      ctype_base::mask(punct | print) /* + */,\n+      ctype_base::mask(punct | print) /* , */,\n+      ctype_base::mask(punct | print) /* - */,\n+      ctype_base::mask(punct | print) /* . */,\n+      ctype_base::mask(punct | print) /* / */,\n+      ctype_base::mask(digit | xdigit | print) /* 0 */,\n+      ctype_base::mask(digit | xdigit | print) /* 1 */,\n+      ctype_base::mask(digit | xdigit | print) /* 2 */,\n+      ctype_base::mask(digit | xdigit | print) /* 3 */,\n+      ctype_base::mask(digit | xdigit | print) /* 4 */,\n+      ctype_base::mask(digit | xdigit | print) /* 5 */,\n+      ctype_base::mask(digit | xdigit | print) /* 6 */,\n+      ctype_base::mask(digit | xdigit | print) /* 7 */,\n+      ctype_base::mask(digit | xdigit | print) /* 8 */,\n+      ctype_base::mask(digit | xdigit | print) /* 9 */,\n+      ctype_base::mask(punct | print) /* : */,\n+      ctype_base::mask(punct | print) /* ; */,\n+      ctype_base::mask(punct | print) /* < */,\n+      ctype_base::mask(punct | print) /* = */,\n+      ctype_base::mask(punct | print) /* > */,\n+      ctype_base::mask(punct | print) /* ? */,\n+      ctype_base::mask(punct | print) /* ! */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* A */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* B */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* C */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* D */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* E */,\n+      ctype_base::mask(alpha | upper | xdigit | print) /* F */,\n+      ctype_base::mask(alpha | upper | print) /* G */,\n+      ctype_base::mask(alpha | upper | print) /* H */,\n+      ctype_base::mask(alpha | upper | print) /* I */,\n+      ctype_base::mask(alpha | upper | print) /* J */,\n+      ctype_base::mask(alpha | upper | print) /* K */,\n+      ctype_base::mask(alpha | upper | print) /* L */,\n+      ctype_base::mask(alpha | upper | print) /* M */,\n+      ctype_base::mask(alpha | upper | print) /* N */,\n+      ctype_base::mask(alpha | upper | print) /* O */,\n+      ctype_base::mask(alpha | upper | print) /* P */,\n+      ctype_base::mask(alpha | upper | print) /* Q */,\n+      ctype_base::mask(alpha | upper | print) /* R */,\n+      ctype_base::mask(alpha | upper | print) /* S */,\n+      ctype_base::mask(alpha | upper | print) /* T */,\n+      ctype_base::mask(alpha | upper | print) /* U */,\n+      ctype_base::mask(alpha | upper | print) /* V */,\n+      ctype_base::mask(alpha | upper | print) /* W */,\n+      ctype_base::mask(alpha | upper | print) /* X */,\n+      ctype_base::mask(alpha | upper | print) /* Y */,\n+      ctype_base::mask(alpha | upper | print) /* Z */,\n+      ctype_base::mask(punct | print) /* [ */,\n+      ctype_base::mask(punct | print) /* \\ */,\n+      ctype_base::mask(punct | print) /* ] */,\n+      ctype_base::mask(punct | print) /* ^ */,\n+      ctype_base::mask(punct | print) /* _ */,\n+      ctype_base::mask(punct | print) /* ` */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* a */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* b */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* c */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* d */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* e */,\n+      ctype_base::mask(alpha | lower | xdigit | print) /* f */,\n+      ctype_base::mask(alpha | lower | print) /* g */,\n+      ctype_base::mask(alpha | lower | print) /* h */,\n+      ctype_base::mask(alpha | lower | print) /* i */,\n+      ctype_base::mask(alpha | lower | print) /* j */,\n+      ctype_base::mask(alpha | lower | print) /* k */,\n+      ctype_base::mask(alpha | lower | print) /* l */,\n+      ctype_base::mask(alpha | lower | print) /* m */,\n+      ctype_base::mask(alpha | lower | print) /* n */,\n+      ctype_base::mask(alpha | lower | print) /* o */,\n+      ctype_base::mask(alpha | lower | print) /* p */,\n+      ctype_base::mask(alpha | lower | print) /* q */,\n+      ctype_base::mask(alpha | lower | print) /* r */,\n+      ctype_base::mask(alpha | lower | print) /* s */,\n+      ctype_base::mask(alpha | lower | print) /* t */,\n+      ctype_base::mask(alpha | lower | print) /* u */,\n+      ctype_base::mask(alpha | lower | print) /* v */,\n+      ctype_base::mask(alpha | lower | print) /* w */,\n+      ctype_base::mask(alpha | lower | print) /* x */,\n+      ctype_base::mask(alpha | lower | print) /* y */,\n+      ctype_base::mask(alpha | lower | print) /* x */,\n+      ctype_base::mask(punct | print) /* { */,\n+      ctype_base::mask(punct | print) /* | */,\n+      ctype_base::mask(punct | print) /* } */,\n+      ctype_base::mask(punct | print) /* ~ */,\n+      cntrl /* del (0x7f)*/,\n+      /* The next 128 entries are all 0.   */\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+    };\n+    return _S_classic_table;\n+  }\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) "}]}