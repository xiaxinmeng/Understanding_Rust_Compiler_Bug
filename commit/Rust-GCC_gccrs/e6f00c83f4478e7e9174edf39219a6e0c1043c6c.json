{"sha": "e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmMDBjODNmNDQ3OGU3ZTkxNzRlZGYzOTIxOWE2ZTBjMTA0M2M2Yw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-17T00:07:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-17T00:07:32Z"}, "message": "[libbacktrace] Return struct dwarf_data pointer from elf_add\n\nAllow the caller of elf_add access to the struct dwarf_data pointer\ncorresponding to the added elf.\n\n2019-01-17  Tom de Vries  <tdevries@suse.de>\n\n\t* internal.h (backtrace_dwarf_add): Add fileline_entry parameter.\n\t* dwarf.c (backtrace_dwarf_add): Add and handle fileline_entry parameter.\n\t* elf.c\t(elf_add): Add and handle fileline_entry parameter.  Add\n\targument to backtrace_dwarf_add call.\n\t(phdr_callback, backtrace_initialize): Add argument to elf_add calls.\n\t* pecoff.c (coff_add): Add argument to backtrace_dwarf_add call.\n\t* xcoff.c (xcoff_add): Same.\n\nFrom-SVN: r267993", "tree": {"sha": "c45e23be50aa5e71905476e8df2e1ee1299a73ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c45e23be50aa5e71905476e8df2e1ee1299a73ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34c2a3d19b096a97184253d1e1f225f13bd3a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34c2a3d19b096a97184253d1e1f225f13bd3a0f"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "f2d2954b1c6adbb42975a2da5ef2aada0a89b80c", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "patch": "@@ -1,3 +1,13 @@\n+2019-01-17  Tom de Vries  <tdevries@suse.de>\n+\n+\t* internal.h (backtrace_dwarf_add): Add fileline_entry parameter.\n+\t* dwarf.c (backtrace_dwarf_add): Add and handle fileline_entry parameter.\n+\t* elf.c\t(elf_add): Add and handle fileline_entry parameter.  Add\n+\targument to backtrace_dwarf_add call.\n+\t(phdr_callback, backtrace_initialize): Add argument to elf_add calls.\n+\t* pecoff.c (coff_add): Add argument to backtrace_dwarf_add call.\n+\t* xcoff.c (xcoff_add): Same.\n+\n 2019-01-17  Tom de Vries  <tdevries@suse.de>\n \n \t* elf.c (elf_add): Add and handle with_buildid_data and"}, {"sha": "190c6fc131f9f28bece08b6d2438f7484d8a0e04", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "patch": "@@ -3064,7 +3064,8 @@ backtrace_dwarf_add (struct backtrace_state *state,\n \t\t     size_t dwarf_str_size,\n \t\t     int is_bigendian,\n \t\t     backtrace_error_callback error_callback,\n-\t\t     void *data, fileline *fileline_fn)\n+\t\t     void *data, fileline *fileline_fn,\n+\t\t     struct dwarf_data **fileline_entry)\n {\n   struct dwarf_data *fdata;\n \n@@ -3076,6 +3077,9 @@ backtrace_dwarf_add (struct backtrace_state *state,\n   if (fdata == NULL)\n     return 0;\n \n+  if (fileline_entry != NULL)\n+    *fileline_entry = fdata;\n+\n   if (!state->threaded)\n     {\n       struct dwarf_data **pp;"}, {"sha": "a863327df10824f153e8e4148713e16158b8d817", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "patch": "@@ -2638,8 +2638,8 @@ static int\n elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t uintptr_t base_address, backtrace_error_callback error_callback,\n \t void *data, fileline *fileline_fn, int *found_sym, int *found_dwarf,\n-\t int exe, int debuginfo, const char *with_buildid_data,\n-\t uint32_t with_buildid_size)\n+\t struct dwarf_data **fileline_entry, int exe, int debuginfo,\n+\t const char *with_buildid_data, uint32_t with_buildid_size)\n {\n   struct backtrace_view ehdr_view;\n   b_elf_ehdr ehdr;\n@@ -3042,7 +3042,8 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t    backtrace_release_view (state, &debugaltlink_view, error_callback,\n \t\t\t\t    data);\n \t  ret = elf_add (state, NULL, d, base_address, error_callback, data,\n-\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1, NULL, 0);\n+\t\t\t fileline_fn, found_sym, found_dwarf, NULL, 0, 1, NULL,\n+\t\t\t 0);\n \t  if (ret < 0)\n \t    backtrace_close (d, error_callback, data);\n \t  else\n@@ -3080,7 +3081,8 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t    backtrace_release_view (state, &debugaltlink_view, error_callback,\n \t\t\t\t    data);\n \t  ret = elf_add (state, NULL, d, base_address, error_callback, data,\n-\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1, NULL, 0);\n+\t\t\t fileline_fn, found_sym, found_dwarf, NULL, 0, 1, NULL,\n+\t\t\t 0);\n \t  if (ret < 0)\n \t    backtrace_close (d, error_callback, data);\n \t  else\n@@ -3106,8 +3108,9 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t  int ret;\n \n \t  ret = elf_add (state, filename, d, base_address, error_callback, data,\n-\t\t\t fileline_fn, found_sym, found_dwarf, 0, 1,\n-\t\t\t debugaltlink_buildid_data, debugaltlink_buildid_size);\n+\t\t\t fileline_fn, found_sym, found_dwarf, NULL,\n+\t\t\t 0, 1, debugaltlink_buildid_data,\n+\t\t\t debugaltlink_buildid_size);\n \t  backtrace_release_view (state, &debugaltlink_view, error_callback,\n \t\t\t\t  data);\n \t  debugaltlink_view_valid = 0;\n@@ -3262,7 +3265,8 @@ elf_add (struct backtrace_state *state, const char *filename, int descriptor,\n \t\t\t    sections[DEBUG_STR].data,\n \t\t\t    sections[DEBUG_STR].size,\n \t\t\t    ehdr.e_ident[EI_DATA] == ELFDATA2MSB,\n-\t\t\t    error_callback, data, fileline_fn))\n+\t\t\t    error_callback, data, fileline_fn,\n+\t\t\t    fileline_entry))\n     goto fail;\n \n   *found_dwarf = 1;\n@@ -3352,7 +3356,7 @@ phdr_callback (struct dl_phdr_info *info, size_t size ATTRIBUTE_UNUSED,\n \n   if (elf_add (pd->state, filename, descriptor, info->dlpi_addr,\n \t       pd->error_callback, pd->data, &elf_fileline_fn, pd->found_sym,\n-\t       &found_dwarf, 0, 0, NULL, 0))\n+\t       &found_dwarf, NULL, 0, 0, NULL, 0))\n     {\n       if (found_dwarf)\n \t{\n@@ -3380,7 +3384,8 @@ backtrace_initialize (struct backtrace_state *state, const char *filename,\n   struct phdr_data pd;\n \n   ret = elf_add (state, filename, descriptor, 0, error_callback, data,\n-\t\t &elf_fileline_fn, &found_sym, &found_dwarf, 1, 0, NULL, 0);\n+\t\t &elf_fileline_fn, &found_sym, &found_dwarf, NULL, 1, 0, NULL,\n+\t\t 0);\n   if (!ret)\n     return 0;\n "}, {"sha": "d9ab401ce416b9f42b29a1045edac6dff644f786", "filename": "libbacktrace/internal.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Finternal.h?ref=e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "patch": "@@ -286,6 +286,8 @@ extern int backtrace_initialize (struct backtrace_state *state,\n \t\t\t\t void *data,\n \t\t\t\t fileline *fileline_fn);\n \n+struct dwarf_data;\n+\n /* Add file/line information for a DWARF module.  */\n \n extern int backtrace_dwarf_add (struct backtrace_state *state,\n@@ -302,7 +304,8 @@ extern int backtrace_dwarf_add (struct backtrace_state *state,\n \t\t\t\tsize_t dwarf_str_size,\n \t\t\t\tint is_bigendian,\n \t\t\t\tbacktrace_error_callback error_callback,\n-\t\t\t\tvoid *data, fileline *fileline_fn);\n+\t\t\t\tvoid *data, fileline *fileline_fn,\n+\t\t\t\tstruct dwarf_data **fileline_entry);\n \n /* A test-only hook for elf_uncompress_zdebug.  */\n "}, {"sha": "cd20cbe17a740182902cce2e67f637cdfc2b100a", "filename": "libbacktrace/pecoff.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Fpecoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Fpecoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fpecoff.c?ref=e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "patch": "@@ -867,7 +867,8 @@ coff_add (struct backtrace_state *state, int descriptor,\n \t\t\t    sections[DEBUG_STR].data,\n \t\t\t    sections[DEBUG_STR].size,\n \t\t\t    0, /* FIXME */\n-\t\t\t    error_callback, data, fileline_fn))\n+\t\t\t    error_callback, data, fileline_fn,\n+\t\t\t    NULL))\n     goto fail;\n \n   *found_dwarf = 1;"}, {"sha": "095800b4f717d9e7602727c0691a3cfd3b889ebe", "filename": "libbacktrace/xcoff.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Fxcoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6f00c83f4478e7e9174edf39219a6e0c1043c6c/libbacktrace%2Fxcoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fxcoff.c?ref=e6f00c83f4478e7e9174edf39219a6e0c1043c6c", "patch": "@@ -1315,7 +1315,8 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n \t\t\t\tdwsect[DWSECT_STR].data,\n \t\t\t\tdwsect[DWSECT_STR].size,\n \t\t\t\t1, /* big endian */\n-\t\t\t\terror_callback, data, fileline_fn))\n+\t\t\t\terror_callback, data, fileline_fn,\n+\t\t\t\tNULL))\n \tgoto fail;\n     }\n "}]}