{"sha": "2e886eef7f2b5aadb00171af868f0895b647c3a4", "node_id": "C_kwDOANBUbNoAKDJlODg2ZWVmN2YyYjVhYWRiMDAxNzFhZjg2OGYwODk1YjY0N2MzYTQ", "commit": {"author": {"name": "Raphael Moreira Zinsly", "email": "rzinsly@ventanamicro.com", "date": "2022-12-27T23:29:25Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-12-27T23:30:58Z"}, "message": "RISC-V: Produce better code with complex constants [PR95632] [PR106602]\n\ngcc/Changelog:\n\tPR target/95632\n\tPR target/106602\n\t* config/riscv/riscv.md: New pattern to simulate complex\n\tconst_int loads.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/riscv/pr95632.c: New test.\n\t* gcc.target/riscv/pr106602.c: New test.", "tree": {"sha": "3e9fbc45354568320184e1d1cf3e74df0fb6a0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e9fbc45354568320184e1d1cf3e74df0fb6a0c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e886eef7f2b5aadb00171af868f0895b647c3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e886eef7f2b5aadb00171af868f0895b647c3a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e886eef7f2b5aadb00171af868f0895b647c3a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e886eef7f2b5aadb00171af868f0895b647c3a4/comments", "author": {"login": "rzinsly", "id": 6718397, "node_id": "MDQ6VXNlcjY3MTgzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6718397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rzinsly", "html_url": "https://github.com/rzinsly", "followers_url": "https://api.github.com/users/rzinsly/followers", "following_url": "https://api.github.com/users/rzinsly/following{/other_user}", "gists_url": "https://api.github.com/users/rzinsly/gists{/gist_id}", "starred_url": "https://api.github.com/users/rzinsly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rzinsly/subscriptions", "organizations_url": "https://api.github.com/users/rzinsly/orgs", "repos_url": "https://api.github.com/users/rzinsly/repos", "events_url": "https://api.github.com/users/rzinsly/events{/privacy}", "received_events_url": "https://api.github.com/users/rzinsly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c755fd9018821b79ddc32ee507897860510986c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c755fd9018821b79ddc32ee507897860510986c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c755fd9018821b79ddc32ee507897860510986c"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "020833b92069d76b262ce71908e60e997699d0da", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e886eef7f2b5aadb00171af868f0895b647c3a4/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e886eef7f2b5aadb00171af868f0895b647c3a4/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=2e886eef7f2b5aadb00171af868f0895b647c3a4", "patch": "@@ -1670,6 +1670,23 @@\n \t\t      MAX_MACHINE_MODE, &operands[3], TRUE);\n })\n \n+;; Pretend to have the ability to load complex const_int in order to get\n+;; better code generation around them.\n+;;\n+;; But avoid constants that are special cased elsewhere.\n+(define_insn_and_split \"*mvconst_internal\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+        (match_operand:GPR 1 \"splittable_const_int_operand\" \"i\"))]\n+  \"!(p2m1_shift_operand (operands[1]) || high_mask_shift_operand (operands[1]))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  riscv_move_integer (operands[0], operands[0], INTVAL (operands[1]),\n+                      <MODE>mode, TRUE);\n+  DONE;\n+})\n+\n ;; 64-bit integer moves\n \n (define_expand \"movdi\""}, {"sha": "825b1a143b54782987c1ca04946c81450e1c6f89", "filename": "gcc/testsuite/gcc.target/riscv/pr106602.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e886eef7f2b5aadb00171af868f0895b647c3a4/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr106602.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e886eef7f2b5aadb00171af868f0895b647c3a4/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr106602.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr106602.c?ref=2e886eef7f2b5aadb00171af868f0895b647c3a4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned long\n+foo2 (unsigned long a)\n+{\n+  return (unsigned long)(unsigned int) a << 6;\n+}\n+\n+/* { dg-final { scan-assembler-times \"slli\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"srli\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"\\tli\\t\" } } */\n+/* { dg-final { scan-assembler-not \"addi\\t\" } } */\n+/* { dg-final { scan-assembler-not \"and\\t\" } } */"}, {"sha": "b865c2f2e97b0c13cc28037365889be50947e40d", "filename": "gcc/testsuite/gcc.target/riscv/pr95632.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e886eef7f2b5aadb00171af868f0895b647c3a4/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr95632.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e886eef7f2b5aadb00171af868f0895b647c3a4/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr95632.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr95632.c?ref=2e886eef7f2b5aadb00171af868f0895b647c3a4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned short\n+foo (unsigned short crc)\n+{\n+  crc ^= 0x4002;\n+  crc >>= 1;\n+  crc |= 0x8000;\n+\n+  return crc;\n+}\n+\n+/* { dg-final { scan-assembler-times \"srli\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"slli\\t\" } } */"}]}