{"sha": "349ab34dc64a10fe0b1eda66d13b62862878b73e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ5YWIzNGRjNjRhMTBmZTBiMWVkYTY2ZDEzYjYyODYyODc4YjczZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-12T08:34:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-12T08:34:00Z"}, "message": "tree-dse: Fix mem* head trimming if call has lhs [PR94130]\n\nAs the testcase shows, if DSE decides to head trim {mem{set,cpy,move},strncpy}\nand the call has lhs, it is incorrect to leave the lhs as is, because it\nwill then point to the adjusted address (base + head_trim) instead of the\noriginal base.\nThe following patch fixes that by dropping the lhs of the call and assigning\nlhs the original base in a following statement.\n\n2020-03-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94130\n\t* tree-ssa-dse.c: Include gimplify.h.\n\t(increment_start_addr): If stmt has lhs, drop the lhs from call and\n\tset it after the call to the original value of the first argument.\n\tFormatting fixes.\n\t(decrement_count): Formatting fix.\n\n\t* gcc.c-torture/execute/pr94130.c: New test.", "tree": {"sha": "c4a06e3f4052b53c3edf78fbc472cad52ddaa82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a06e3f4052b53c3edf78fbc472cad52ddaa82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/349ab34dc64a10fe0b1eda66d13b62862878b73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349ab34dc64a10fe0b1eda66d13b62862878b73e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349ab34dc64a10fe0b1eda66d13b62862878b73e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349ab34dc64a10fe0b1eda66d13b62862878b73e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4069adf4bbc90d16b603e0308b48499c36b2b637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4069adf4bbc90d16b603e0308b48499c36b2b637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4069adf4bbc90d16b603e0308b48499c36b2b637"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "d6a75081f24c0c63f26d4bcb7acb2a0cb0dc921f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=349ab34dc64a10fe0b1eda66d13b62862878b73e", "patch": "@@ -1,3 +1,12 @@\n+2020-03-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94130\n+\t* tree-ssa-dse.c: Include gimplify.h.\n+\t(increment_start_addr): If stmt has lhs, drop the lhs from call and\n+\tset it after the call to the original value of the first argument.\n+\tFormatting fixes.\n+\t(decrement_count): Formatting fix.\n+\n 2020-03-11  Delia Burduv  <delia.burduv@arm.com>\n \n \t* config/arm/arm-builtins.c"}, {"sha": "5e232c691d5186c44fb3357c320d79764eb5a5e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=349ab34dc64a10fe0b1eda66d13b62862878b73e", "patch": "@@ -1,5 +1,8 @@\n 2020-03-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94130\n+\t* gcc.c-torture/execute/pr94130.c: New test.\n+\n \tPR c++/93907\n \t* g++.dg/cpp2a/concepts-using2.C (cc): Use long long instead of\n \t__int128 if __SIZEOF_INT128__ isn't defined."}, {"sha": "044e578d373938e717127df30ee100b6fbc156ca", "filename": "gcc/testsuite/gcc.c-torture/execute/pr94130.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94130.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94130.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94130.c?ref=349ab34dc64a10fe0b1eda66d13b62862878b73e", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/94130 */\n+\n+int\n+main ()\n+{\n+  int a[8];\n+  char *b = __builtin_memset (a, 0, sizeof (a));\n+  a[0] = 1;\n+  a[1] = 2;\n+  a[2] = 3;\n+  if (b != (char *) a)\n+    __builtin_abort ();\n+  else\n+    asm volatile (\"\" : : \"g\" (a) : \"memory\");\n+  return 0;\n+}"}, {"sha": "3ab15e2107ad318864c3afe275e54562d67e9aab", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/349ab34dc64a10fe0b1eda66d13b62862878b73e/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=349ab34dc64a10fe0b1eda66d13b62862878b73e", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-dse.h\"\n #include \"builtins.h\"\n #include \"gimple-fold.h\"\n+#include \"gimplify.h\"\n \n /* This file implements dead store elimination.\n \n@@ -422,29 +423,38 @@ decrement_count (gimple *stmt, int decrement)\n   gcc_assert (TREE_CODE (*countp) == INTEGER_CST);\n   *countp = wide_int_to_tree (TREE_TYPE (*countp), (TREE_INT_CST_LOW (*countp)\n \t\t\t\t\t\t    - decrement));\n-\n }\n \n static void\n increment_start_addr (gimple *stmt, tree *where, int increment)\n {\n+  if (tree lhs = gimple_call_lhs (stmt))\n+    if (where == gimple_call_arg_ptr (stmt, 0))\n+      {\n+\tgassign *newop = gimple_build_assign (lhs, unshare_expr (*where));\n+\tgimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\tgsi_insert_after (&gsi, newop, GSI_SAME_STMT);\n+\tgimple_call_set_lhs (stmt, NULL_TREE);\n+\tupdate_stmt (stmt);\n+      }\n+\n   if (TREE_CODE (*where) == SSA_NAME)\n     {\n       tree tem = make_ssa_name (TREE_TYPE (*where));\n       gassign *newop\n-        = gimple_build_assign (tem, POINTER_PLUS_EXPR, *where,\n+\t= gimple_build_assign (tem, POINTER_PLUS_EXPR, *where,\n \t\t\t       build_int_cst (sizetype, increment));\n       gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n       gsi_insert_before (&gsi, newop, GSI_SAME_STMT);\n       *where = tem;\n-      update_stmt (gsi_stmt (gsi));\n+      update_stmt (stmt);\n       return;\n     }\n \n   *where = build_fold_addr_expr (fold_build2 (MEM_REF, char_type_node,\n-                                             *where,\n-                                             build_int_cst (ptr_type_node,\n-                                                            increment)));\n+\t\t\t\t\t      *where,\n+\t\t\t\t\t      build_int_cst (ptr_type_node,\n+\t\t\t\t\t\t\t     increment)));\n }\n \n /* STMT is builtin call that writes bytes in bitmap ORIG, some bytes are dead"}]}