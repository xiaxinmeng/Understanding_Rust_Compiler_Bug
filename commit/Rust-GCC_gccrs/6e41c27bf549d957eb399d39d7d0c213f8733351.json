{"sha": "6e41c27bf549d957eb399d39d7d0c213f8733351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0MWMyN2JmNTQ5ZDk1N2ViMzk5ZDM5ZDdkMGMyMTNmODczMzM1MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-09T14:03:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-10T08:52:47Z"}, "message": "fix constant folding from array CTORs\n\nThis fixes the case where we try to fold a read from an\narray initalizer and happen to cross the boundary of\nmultiple CTORs which isn't really supported.  For the\ninteresting cases like the testcase we actually handle\nthe folding by encoding the whole initializer.\n\n2020-07-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96133\n\t* gimple-fold.c (fold_array_ctor_reference): Do not\n\trecurse to folding a CTOR that does not fully cover the\n\tasked for object.\n\n\t* gcc.dg/torture/pr96133.c: New testcase.", "tree": {"sha": "bfd509af5c0156df1f28bc7c79a85132ac7e4802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfd509af5c0156df1f28bc7c79a85132ac7e4802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e41c27bf549d957eb399d39d7d0c213f8733351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e41c27bf549d957eb399d39d7d0c213f8733351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e41c27bf549d957eb399d39d7d0c213f8733351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e41c27bf549d957eb399d39d7d0c213f8733351/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9c87d3255f168db811dd1fa69e5011d4e8194f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9c87d3255f168db811dd1fa69e5011d4e8194f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9c87d3255f168db811dd1fa69e5011d4e8194f"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "dfda6db5e9670166fadd3426c69ab4cce9fb7823", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e41c27bf549d957eb399d39d7d0c213f8733351/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e41c27bf549d957eb399d39d7d0c213f8733351/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6e41c27bf549d957eb399d39d7d0c213f8733351", "patch": "@@ -6875,10 +6875,17 @@ fold_array_ctor_reference (tree type, tree ctor,\n \t     SIZE to the size of the accessed element.  */\n \t  inner_offset = 0;\n \t  type = TREE_TYPE (val);\n-\t  size = elt_size.to_uhwi () * BITS_PER_UNIT;\n+\t  size = elt_sz * BITS_PER_UNIT;\n \t}\n+      else if (size && access_index < CONSTRUCTOR_NELTS (ctor) - 1\n+\t       && TREE_CODE (val) == CONSTRUCTOR\n+\t       && (elt_sz * BITS_PER_UNIT - inner_offset) < size)\n+\t/* If this isn't the last element in the CTOR and a CTOR itself\n+\t   and it does not cover the whole object we are requesting give up\n+\t   since we're not set up for combining from multiple CTORs.  */\n+\treturn NULL_TREE;\n \n-      *suboff += (access_index * elt_size * BITS_PER_UNIT).to_uhwi ();\n+      *suboff += access_index.to_uhwi () * elt_sz * BITS_PER_UNIT;\n       return fold_ctor_reference (type, val, inner_offset, size, from_decl,\n \t\t\t\t  suboff);\n     }"}, {"sha": "8d051ce291354d9be79134074f8968b65e8ed862", "filename": "gcc/testsuite/gcc.dg/torture/pr96133.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e41c27bf549d957eb399d39d7d0c213f8733351/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr96133.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e41c27bf549d957eb399d39d7d0c213f8733351/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr96133.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr96133.c?ref=6e41c27bf549d957eb399d39d7d0c213f8733351", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+\n+typedef int T;\n+static const T a[2][3] = { { 1, 2, 3 }, { 4, 5, 6 } };\n+typedef T v2 __attribute__((vector_size(2*sizeof(T))));\n+\n+int\n+main()\n+{\n+  const T *p = &a[0][2];\n+  v2 x = *(const v2 *)p;\n+  T z = x[1];\n+  if (z != 4)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}