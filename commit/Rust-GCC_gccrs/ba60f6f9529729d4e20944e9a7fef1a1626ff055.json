{"sha": "ba60f6f9529729d4e20944e9a7fef1a1626ff055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2MGY2Zjk1Mjk3MjlkNGUyMDk0NGU5YTdmZWYxYTE2MjZmZjA1NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-12-30T22:44:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-12-30T22:44:42Z"}, "message": "tuple (_Tuple_impl<>::_Tuple_impl(typename std::remove_reference<>::type&&, typename std::remove_reference<>::type&&...), [...]): Add.\n\n2007-12-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/tuple (_Tuple_impl<>::_Tuple_impl(typename\n\tstd::remove_reference<>::type&&, typename\n\tstd::remove_reference<>::type&&...),\n\t_Tuple_impl(const _Tuple_impl<>&), _Tuple_impl(_Tuple_impl&&),\n\t_Tuple_impl(_Tuple_impl<>&&), operator=(_Tuple_impl&&),\n\toperator=(const _Tuple_impl<>&), operator=(_Tuple_impl<>&&)): Add.\n\t(tuple<>::tuple(const _Elements&...), tuple(_UElements&&...),\n\ttuple(tuple&&), tuple(const tuple<>&), tuple(tuple<>&&),\n\toperator=(tuple&&), operator=(const tuple<>&), operator=(tuple<>&&)):\n\tLikewise.\n\t(tuple<_T1, _T2>::tuple(const _T1&, const _T2&, tuple(_U1&&, _U2&&),\n\ttuple(tuple&&), tuple(tuple<>&&), tuple(pair<>&&), operator=(tuple&&),\n\toperator=(tuple<>&&), operator=(pair<>&&)): Likewise.\n\t(tuple<>::tuple(typename __add_c_ref<_Elements>::type...),\n\ttuple<_T1, _T2>::tuple(typename __add_c_ref<>::type,\n\ttypename __add_c_ref<>::type)): Remove.\n\t* testsuite/tr1/6_containers/tuple/creation_functions/tie2.cc: New.\n\t* testsuite/20_util/tuple/creation_functions/tie2.cc: Likewise.\n\t* testsuite/20_util/tuple/moveable.cc: Likewise.\n\nFrom-SVN: r131230", "tree": {"sha": "49af98b991c2c29b188d1f453677c026ce6ef5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49af98b991c2c29b188d1f453677c026ce6ef5f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba60f6f9529729d4e20944e9a7fef1a1626ff055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba60f6f9529729d4e20944e9a7fef1a1626ff055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba60f6f9529729d4e20944e9a7fef1a1626ff055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba60f6f9529729d4e20944e9a7fef1a1626ff055/comments", "author": null, "committer": null, "parents": [{"sha": "da6ea4c802184c1d879ea159350dfdfb242019fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6ea4c802184c1d879ea159350dfdfb242019fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6ea4c802184c1d879ea159350dfdfb242019fc"}], "stats": {"total": 316, "additions": 284, "deletions": 32}, "files": [{"sha": "5b472c06837b1308b1c6539f470008624959b45d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba60f6f9529729d4e20944e9a7fef1a1626ff055", "patch": "@@ -1,3 +1,25 @@\n+2007-12-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/tuple (_Tuple_impl<>::_Tuple_impl(typename\n+\tstd::remove_reference<>::type&&, typename\n+\tstd::remove_reference<>::type&&...),\n+\t_Tuple_impl(const _Tuple_impl<>&), _Tuple_impl(_Tuple_impl&&),\n+\t_Tuple_impl(_Tuple_impl<>&&), operator=(_Tuple_impl&&),\n+\toperator=(const _Tuple_impl<>&), operator=(_Tuple_impl<>&&)): Add.\n+\t(tuple<>::tuple(const _Elements&...), tuple(_UElements&&...),\n+\ttuple(tuple&&), tuple(const tuple<>&), tuple(tuple<>&&),\n+\toperator=(tuple&&), operator=(const tuple<>&), operator=(tuple<>&&)):\n+\tLikewise.\n+\t(tuple<_T1, _T2>::tuple(const _T1&, const _T2&, tuple(_U1&&, _U2&&),\n+\ttuple(tuple&&), tuple(tuple<>&&), tuple(pair<>&&), operator=(tuple&&),\n+\toperator=(tuple<>&&), operator=(pair<>&&)): Likewise.\n+\t(tuple<>::tuple(typename __add_c_ref<_Elements>::type...),\n+\ttuple<_T1, _T2>::tuple(typename __add_c_ref<>::type,\n+\ttypename __add_c_ref<>::type)): Remove.\n+\t* testsuite/tr1/6_containers/tuple/creation_functions/tie2.cc: New.\n+\t* testsuite/20_util/tuple/creation_functions/tie2.cc: Likewise.\n+\t* testsuite/20_util/tuple/moveable.cc: Likewise.\n+\n 2007-12-29  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* config/os/mingw32/error_constants.h: Fix typo in comment."}, {"sha": "61302f1da3547aed3b8703f900311b23a1ffb71c", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 135, "deletions": 32, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=ba60f6f9529729d4e20944e9a7fef1a1626ff055", "patch": "@@ -63,8 +63,8 @@ namespace std\n     { typedef _Tp& type; };\n \n   template<int _Idx, typename _Head, bool _IsEmpty>\n-    struct _Head_base;    \n- \n+    struct _Head_base;\n+\n   template<int _Idx, typename _Head>\n     struct _Head_base<_Idx, _Head, true>\n     : public _Head\n@@ -151,21 +151,28 @@ namespace std\n \t\t  typename __add_c_ref<_Tail>::type... __tail)\n       : _Inherited(__tail...), _Base(__head) { }\n \n-      template<typename... _UElements>\n-      _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n-      : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n+      template<typename _UHead, typename... _UTail> \n+        explicit\n+        _Tuple_impl(typename std::remove_reference<_UHead>::type&& __head,\n+\t\t    typename std::remove_reference<_UTail>::type&&... __tail)\n+\t: _Inherited(std::forward<_Inherited>(__tail)...),\n+\t  _Base(std::forward<_Base>(__head)) { }\n \n       _Tuple_impl(const _Tuple_impl& __in)\n       : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n \n+      _Tuple_impl(_Tuple_impl&& __in)\n+      : _Inherited(std::forward<_Inherited>(__in._M_tail())),\n+\t_Base(std::forward<_Base>(__in._M_head())) { }\n+\n       template<typename... _UElements>\n-        _Tuple_impl&\n-        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)\n-        {\n-\t  _M_head() = __in._M_head();\n-\t  _M_tail() = __in._M_tail();\n-\t  return *this;\n-\t}\n+        _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n+\t: _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n+\n+      template<typename... _UElements>\n+        _Tuple_impl(_Tuple_impl<_Idx, _UElements...>&& __in)\n+\t: _Inherited(std::forward<_Inherited>(__in._M_tail())),\n+\t  _Base(std::forward<_Base>(__in._M_head())) { }\n \n       _Tuple_impl&\n       operator=(const _Tuple_impl& __in)\n@@ -174,6 +181,32 @@ namespace std\n \t_M_tail() = __in._M_tail();\n \treturn *this;\n       }\n+\n+      _Tuple_impl&\n+      operator=(_Tuple_impl&& __in)\n+      {\n+\t_M_head() = std::move(__in._M_head());\n+\t_M_tail() = std::move(__in._M_tail());\n+\treturn *this;\n+      }\n+\n+      template<typename... _UElements>\n+        _Tuple_impl&\n+        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)\n+        {\n+\t  _M_head() = __in._M_head();\n+\t  _M_tail() = __in._M_tail();\n+\t  return *this;\n+\t}\n+\n+      template<typename... _UElements>\n+        _Tuple_impl&\n+        operator=(_Tuple_impl<_Idx, _UElements...>&& __in)\n+        {\n+\t  _M_head() = std::move(__in._M_head());\n+\t  _M_tail() = std::move(__in._M_tail());\n+\t  return *this;\n+\t}\n     };\n \n   template<typename... _Elements> \n@@ -186,30 +219,57 @@ namespace std\n       : _Inherited() { }\n \n       explicit\n-      tuple(typename __add_c_ref<_Elements>::type... __elements)\n+      tuple(const _Elements&... __elements)\n       : _Inherited(__elements...) { }\n \n       template<typename... _UElements>\n-        tuple(const tuple<_UElements...>& __in)\n-\t: _Inherited(__in) { }\n+        explicit\n+        tuple(_UElements&&... __elements)\n+\t: _Inherited(std::forward<_UElements>(__elements)...) { }\n \n       tuple(const tuple& __in)\n       : _Inherited(__in) { }\n \n+      tuple(tuple&& __in)\n+      : _Inherited(std::move(__in)) { }\n+\n       template<typename... _UElements>\n-        tuple&\n-        operator=(const tuple<_UElements...>& __in)\n-        {\n-\t  static_cast<_Inherited&>(*this) = __in;\n-\t  return *this;\n-\t}\n+        tuple(const tuple<_UElements...>& __in)\n+\t: _Inherited(__in) { }\n+\n+      template<typename... _UElements>\n+        tuple(tuple<_UElements...>&& __in)\n+\t: _Inherited(std::move(__in)) { }\n \n       tuple&\n       operator=(const tuple& __in)\n       {\n \tstatic_cast<_Inherited&>(*this) = __in;\n \treturn *this;\n       }\n+\n+      tuple&\n+      operator=(tuple&& __in)\n+      {\n+\tstatic_cast<_Inherited&>(*this) = std::move(__in);\n+\treturn *this;\n+      }\n+\n+      template<typename... _UElements>\n+        tuple&\n+        operator=(const tuple<_UElements...>& __in)\n+        {\n+\t  static_cast<_Inherited&>(*this) = __in;\n+\t  return *this;\n+\t}\n+\n+      template<typename... _UElements>\n+        tuple&\n+        operator=(tuple<_UElements...>&& __in)\n+        {\n+\t  static_cast<_Inherited&>(*this) = std::move(__in);\n+\t  return *this;\n+\t}\n     };\n \n   template<> class tuple<> { };\n@@ -225,32 +285,43 @@ namespace std\n       : _Inherited() { }\n \n       explicit\n-      tuple(typename __add_c_ref<_T1>::type __a1,\n-\t    typename __add_c_ref<_T2>::type __a2)\n+      tuple(const _T1& __a1, const _T2& __a2)\n       : _Inherited(__a1, __a2) { }\n \n       template<typename _U1, typename _U2>\n-        tuple(const tuple<_U1, _U2>& __in)\n-\t: _Inherited(__in) { }\n+        explicit\n+        tuple(_U1&& __a1, _U2&& __a2)\n+\t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n \n       tuple(const tuple& __in)\n       : _Inherited(__in) { }\n \n+      tuple(tuple&& __in)\n+      : _Inherited(std::move(__in)) { }\n+\n+      template<typename _U1, typename _U2>\n+        tuple(const tuple<_U1, _U2>& __in)\n+\t: _Inherited(__in) { }\n+\n+      template<typename _U1, typename _U2>\n+        tuple(tuple<_U1, _U2>&& __in)\n+\t: _Inherited(std::move(__in)) { }\n+\n       template<typename _U1, typename _U2>\n         tuple(const pair<_U1, _U2>& __in)\n \t: _Inherited(_Tuple_impl<0, \n \t\t     typename __add_c_ref<_U1>::type,\n \t\t     typename __add_c_ref<_U2>::type>(__in.first, \n \t\t\t\t\t\t      __in.second))\n         { }\n-  \n+\n       template<typename _U1, typename _U2>\n-        tuple&\n-        operator=(const tuple<_U1, _U2>& __in)\n-        {\n-\t  static_cast<_Inherited&>(*this) = __in;\n-\t  return *this;\n-\t}\n+        tuple(pair<_U1, _U2>&& __in)\n+\t: _Inherited(_Tuple_impl<0, \n+\t\t     typename std::remove_reference<_U1>::type&&,\n+\t\t     typename std::remove_reference<_U2>::type&&>\n+\t\t     (std::move(__in.first), std::move(__in.second)))\n+        { }\n \n       tuple&\n       operator=(const tuple& __in)\n@@ -259,6 +330,29 @@ namespace std\n \treturn *this;\n       }\n \n+      tuple&\n+      operator=(tuple&& __in)\n+      {\n+\tstatic_cast<_Inherited&>(*this) = std::move(__in);\n+\treturn *this;\n+      }\n+\n+      template<typename _U1, typename _U2>\n+        tuple&\n+        operator=(const tuple<_U1, _U2>& __in)\n+        {\n+\t  static_cast<_Inherited&>(*this) = __in;\n+\t  return *this;\n+\t}\n+\n+      template<typename _U1, typename _U2>\n+        tuple&\n+        operator=(tuple<_U1, _U2>&& __in)\n+        {\n+\t  static_cast<_Inherited&>(*this) = std::move(__in);\n+\t  return *this;\n+\t}\n+\n       template<typename _U1, typename _U2>\n         tuple&\n         operator=(const pair<_U1, _U2>& __in)\n@@ -267,6 +361,15 @@ namespace std\n \t  this->_M_tail()._M_head() = __in.second;\n \t  return *this;\n \t}\n+\n+      template<typename _U1, typename _U2>\n+        tuple&\n+        operator=(pair<_U1, _U2>&& __in)\n+        {\n+\t  this->_M_head() = std::move(__in.first);\n+\t  this->_M_tail()._M_head() = std::move(__in.second);\n+\t  return *this;\n+\t}\n     };\n \n "}, {"sha": "c0b52f57a005363b34c944d3903775cbd4ecfb5d", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/tie2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Ftie2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Ftie2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Ftie2.cc?ref=ba60f6f9529729d4e20944e9a7fef1a1626ff055", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// Tuple\n+\n+#include <tuple>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  bool test __attribute__((unused)) = true; \n+  using namespace std;\n+\n+  int i;\n+  string s;\n+\n+  tie(i, ignore, s) = make_tuple(42, 3.14, \"C++\");\n+  VERIFY( i == 42 );\n+  VERIFY( s == \"C++\" );\n+}"}, {"sha": "bd2f18ad86e161fbb693753f91858021a6e969e0", "filename": "libstdc++-v3/testsuite/20_util/tuple/moveable.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmoveable.cc?ref=ba60f6f9529729d4e20944e9a7fef1a1626ff055", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on tuple.  If the implementation changed\n+// this test may begin to fail.\n+\n+#include <tuple>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tuple<int, double> a(1, 2.0), b;\n+  b = std::move(a);\n+  VERIFY( std::get<0>(b) == 1 && std::get<1>(b) == 2.0 );\n+  VERIFY( std::get<0>(a) == 1 && std::get<1>(a) == 2.0 );\n+\n+  std::tuple<int, double> c(std::move(b));\n+  VERIFY( std::get<0>(c) == 1 && std::get<1>(c) == 2.0 );\n+  VERIFY( std::get<0>(b) == 1 && std::get<1>(b) == 2.0 );\n+  return 0;\n+}"}, {"sha": "4682424cafa575990def6434eeaaf152d208d702", "filename": "libstdc++-v3/testsuite/tr1/6_containers/tuple/creation_functions/tie2.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Ftuple%2Fcreation_functions%2Ftie2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60f6f9529729d4e20944e9a7fef1a1626ff055/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Ftuple%2Fcreation_functions%2Ftie2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Ftuple%2Fcreation_functions%2Ftie2.cc?ref=ba60f6f9529729d4e20944e9a7fef1a1626ff055", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// Tuple\n+\n+#include <tr1/tuple>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  bool test __attribute__((unused)) = true; \n+  using namespace std::tr1;\n+\n+  int i;\n+  std::string s;\n+\n+  tie(i, ignore, s) = make_tuple(42, 3.14, \"C++\");\n+  VERIFY( i == 42 );\n+  VERIFY( s == \"C++\" );\n+}"}]}