{"sha": "21761d2b2b01f6cef4287c646845f6b3006546aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE3NjFkMmIyYjAxZjZjZWY0Mjg3YzY0Njg0NWY2YjMwMDY1NDZhYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-21T11:54:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-21T11:54:29Z"}, "message": "c++: REF_PARENTHESIZED_P wrapper inhibiting NRVO [PR67302]\n\nHere, in C++14 or later, we remember the parentheses around 'a' in the\nreturn statement by using a REF_PARENTHESIZED_P wrapper, which ends up\ninhibiting NRVO because we don't look through this wrapper before\nchecking the conditions for NRVO.  This patch fixes this by calling\nmaybe_undo_parenthesized_ref sooner in check_return_expr.\n\n\tPR c++/67302\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (check_return_expr): Call maybe_undo_parenthesized_ref\n\tsooner, before the NRVO handling.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/opt/nrv21.C: New test.", "tree": {"sha": "001f0fe3f5626d1c87adb930b584484eefe8ccc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001f0fe3f5626d1c87adb930b584484eefe8ccc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21761d2b2b01f6cef4287c646845f6b3006546aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21761d2b2b01f6cef4287c646845f6b3006546aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21761d2b2b01f6cef4287c646845f6b3006546aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21761d2b2b01f6cef4287c646845f6b3006546aa/comments", "author": null, "committer": null, "parents": [{"sha": "de31f5445b12fd9ab9969dc536d821fe6f0edad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de31f5445b12fd9ab9969dc536d821fe6f0edad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de31f5445b12fd9ab9969dc536d821fe6f0edad0"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "937581ae83cef461d7fe09234cc6c473c834c3b6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21761d2b2b01f6cef4287c646845f6b3006546aa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21761d2b2b01f6cef4287c646845f6b3006546aa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=21761d2b2b01f6cef4287c646845f6b3006546aa", "patch": "@@ -10311,7 +10311,10 @@ check_return_expr (tree retval, bool *no_warning)\n \n      See finish_function and finalize_nrv for the rest of this optimization.  */\n   if (retval)\n-    STRIP_ANY_LOCATION_WRAPPER (retval);\n+    {\n+      retval = maybe_undo_parenthesized_ref (retval);\n+      STRIP_ANY_LOCATION_WRAPPER (retval);\n+    }\n \n   bool named_return_value_okay_p = can_do_nrvo_p (retval, functype);\n   if (fn_returns_value_p && flag_elide_constructors)\n@@ -10345,10 +10348,6 @@ check_return_expr (tree retval, bool *no_warning)\n       if (VOID_TYPE_P (functype))\n \treturn error_mark_node;\n \n-      /* If we had an id-expression obfuscated by force_paren_expr, we need\n-\t to undo it so we can try to treat it as an rvalue below.  */\n-      retval = maybe_undo_parenthesized_ref (retval);\n-\n       if (processing_template_decl)\n \tretval = build_non_dependent_expr (retval);\n "}, {"sha": "ff33852745646dfea70d1cba68610bf662c1f0a6", "filename": "gcc/testsuite/g++.dg/opt/nrv21.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21761d2b2b01f6cef4287c646845f6b3006546aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21761d2b2b01f6cef4287c646845f6b3006546aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fnrv21.C?ref=21761d2b2b01f6cef4287c646845f6b3006546aa", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/67302\n+// { dg-additional-options -fdump-tree-gimple }\n+// { dg-final { scan-tree-dump-not \"<retval> = a\" \"gimple\" } }\n+\n+struct A\n+{\n+  int ar[42];\n+  A();\n+};\n+\n+A f() {\n+  A a;\n+  return (a); // The parens should not inhibit NRVO.\n+}"}]}