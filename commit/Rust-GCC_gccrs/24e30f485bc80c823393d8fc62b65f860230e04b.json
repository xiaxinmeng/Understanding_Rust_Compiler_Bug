{"sha": "24e30f485bc80c823393d8fc62b65f860230e04b", "node_id": "C_kwDOANBUbNoAKDI0ZTMwZjQ4NWJjODBjODIzMzkzZDhmYzYyYjY1Zjg2MDIzMGUwNGI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T15:53:57Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-29T18:27:53Z"}, "message": "[PR102501] Adjust jump threading testcases for ppc64* and others.\n\nI really don't know what to do here.  This is a bit of whack-o-mole.\nThe IL is sufficiently different for various architectures that any\ntweak can cause the number of jump threads to vary.\n\nFor the pr7745-2.c testcase, we have less threading candidates because 2\nof them now cross loop boundaries.  Interestingly, this test matches\n\"Jumps threaded\", not threads registered, so the block copier can\ndrop threads at copying time adding further confusion.\n\nFor example, we can register N threads, but the old copier can cancel\nN-M threads while updating the CFG for a variety of different reasons\n(removed edges, threading through loop exits, etc).  This makes the\n\"Registering jump threads\" not to match the total number of threads this\ntest checks for with \"Jumps threaded\".\n\nThe pr66752-3.c test OTOH, is just a matter of thread4 eliminating the\n\"if\".  I had erroneously thought it would always be eliminated by\nthread3, but we really don't care where it gets cleaned up.  All we know\nis that DCE can't depend on the early threaders doing this work, because\nit may cross loop boundaries.  I've chosen thread4 arbitrarily, but we\ncould just as easily pick the \".optimized\" dump.\n\nSorry, I'm really at my wits end here.  I don't see any clean path\nforward, except rewrite these tests as gimple IL.  They're close to useless\nas they sit.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/102501\n\t* gcc.dg/tree-ssa/pr66752-3.c: Adjust.\n\t* gcc.dg/tree-ssa/pr77445-2.c: Adjust.", "tree": {"sha": "02155f23f67c3dce8677c6de65158b46ce54951a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02155f23f67c3dce8677c6de65158b46ce54951a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24e30f485bc80c823393d8fc62b65f860230e04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e30f485bc80c823393d8fc62b65f860230e04b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24e30f485bc80c823393d8fc62b65f860230e04b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e30f485bc80c823393d8fc62b65f860230e04b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77731cb8f3cfd2cc94219e03e7521822d679c6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77731cb8f3cfd2cc94219e03e7521822d679c6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77731cb8f3cfd2cc94219e03e7521822d679c6a4"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ba7025ae33ba78503a70939d4d187350bebc04d5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66752-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e30f485bc80c823393d8fc62b65f860230e04b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e30f485bc80c823393d8fc62b65f860230e04b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c?ref=24e30f485bc80c823393d8fc62b65f860230e04b", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-thread3\" } */\n+/* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-thread4\" } */\n \n extern int status, pt;\n extern int count;\n@@ -43,4 +43,4 @@ foo (int N, int c, int b, int *a)\n    run after loop optimizations , can successfully eliminate the\n    references to FLAG.  Verify that ther are no references by the late\n    threading passes.  */\n-/* { dg-final { scan-tree-dump-not \"if .flag\" \"thread3\"} } */\n+/* { dg-final { scan-tree-dump-not \"if .flag\" \"thread4\"} } */"}, {"sha": "18f7aab2be7d264d666599caf593d2d7c56a2f3a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e30f485bc80c823393d8fc62b65f860230e04b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e30f485bc80c823393d8fc62b65f860230e04b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c?ref=24e30f485bc80c823393d8fc62b65f860230e04b", "patch": "@@ -123,7 +123,7 @@ enum STATES FMS( u8 **in , u32 *transitions) {\n    aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 9\" \"thread1\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: \\[7-9\\]\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-times \"Invalid sum\" 1 \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread2\" } } */"}]}