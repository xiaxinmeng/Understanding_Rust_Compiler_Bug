{"sha": "2c87347376c1048bd3c22e6951db24f33ce051d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4NzM0NzM3NmMxMDQ4YmQzYzIyZTY5NTFkYjI0ZjMzY2UwNTFkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-16T17:32:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-16T17:32:26Z"}, "message": "i386.h: Fix comment typo.\n\n        * config/i386/i386.h: Fix comment typo.\n        * config/i386/i386.md (shift+compare pattern names): s/cmpno/cmp/\n        (ashr+compare patterns): Match CCGOCmode not CCNOmode.\n\nFrom-SVN: r39070", "tree": {"sha": "6460f7c1a0836e1deab86d051253d6ad9d90c02c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6460f7c1a0836e1deab86d051253d6ad9d90c02c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c87347376c1048bd3c22e6951db24f33ce051d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c87347376c1048bd3c22e6951db24f33ce051d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c87347376c1048bd3c22e6951db24f33ce051d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c87347376c1048bd3c22e6951db24f33ce051d4/comments", "author": null, "committer": null, "parents": [{"sha": "a26e7fb5aaccf225730f2da59e99c0944c198240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26e7fb5aaccf225730f2da59e99c0944c198240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26e7fb5aaccf225730f2da59e99c0944c198240"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "ae77318e9c03f5e7094c088f5d8b714e8fc3dd74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c87347376c1048bd3c22e6951db24f33ce051d4", "patch": "@@ -1,3 +1,9 @@\n+2001-01-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.h: Fix comment typo.\n+\t* config/i386/i386.md (shift+compare pattern names): s/cmpno/cmp/\n+\t(ashr+compare patterns): Match CCGOCmode not CCNOmode.\n+\n 2001-01-16  Phil Edwards  <pme@sources.redhat.com>\n \n \t* gcc.c:  Revert previous -fsyntax-only-related change; move"}, {"sha": "016aac6c31a066d9bc5906e580470863572578e8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2c87347376c1048bd3c22e6951db24f33ce051d4", "patch": "@@ -2505,7 +2505,7 @@ while (0)\n    unspecified garbage in the Carry flag.  This mode is used\n    by inc/dec instructions.\n \n-   Add CCGCO to indicate comparisons agains zero that allows\n+   Add CCGOC to indicate comparisons agains zero that allows\n    unspecified garbage in the Carry and Overflow flag. This\n    mode is used to simulate comparisons of (a-b) and (a+b)\n    against zero using sub/cmp/add operations."}, {"sha": "1e50a6b9821ea40ef7d36718af04f5f01061e5f9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2c87347376c1048bd3c22e6951db24f33ce051d4", "patch": "@@ -7715,7 +7715,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashlsi3_cmpno\"\n+(define_insn \"*ashlsi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n@@ -7844,7 +7844,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashlhi3_cmpno\"\n+(define_insn \"*ashlhi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n@@ -8011,7 +8011,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashlqi3_cmpno\"\n+(define_insn \"*ashlqi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n@@ -8205,15 +8205,15 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashrsi3_one_bit_cmpno\"\n+(define_insn \"*ashrsi3_one_bit_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\\\t%0\"\n@@ -8226,15 +8226,15 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashrsi3_cmpno\"\n+(define_insn \"*ashrsi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n@@ -8277,15 +8277,15 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashrhi3_one_bit_cmpno\"\n+(define_insn \"*ashrhi3_one_bit_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\\\t%0\"\n@@ -8298,15 +8298,15 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashrhi3_cmpno\"\n+(define_insn \"*ashrhi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n@@ -8349,15 +8349,15 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashrqi3_cmpno_one_bit\"\n+(define_insn \"*ashrqi3_one_bit_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"const_int_1_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\\\t%0\"\n@@ -8370,15 +8370,15 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*ashrqi3_cmpno\"\n+(define_insn \"*ashrqi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n@@ -8478,7 +8478,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*lshrsi3_cmpno_one_bit\"\n+(define_insn \"*lshrsi3_one_bit_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n@@ -8499,7 +8499,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*lshrsi3_cmpno\"\n+(define_insn \"*lshrsi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n@@ -8550,7 +8550,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*lshrhi3_cmpno_one_bit\"\n+(define_insn \"*lshrhi3_one_bit_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n@@ -8571,7 +8571,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*lshrhi3_cmpno\"\n+(define_insn \"*lshrhi3_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n@@ -8622,7 +8622,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*lshrqi2_cmpno_one_bit\"\n+(define_insn \"*lshrqi2_one_bit_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n@@ -8643,7 +8643,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*lshrqi2_cmpno\"\n+(define_insn \"*lshrqi2_cmp\"\n   [(set (reg 17)\n \t(compare\n \t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")"}, {"sha": "b77d6fb8123d4212b6cbfa7767485eada0e4906f", "filename": "gcc/testsuite/gcc.c-torture/execute/20010116-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010116-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c87347376c1048bd3c22e6951db24f33ce051d4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010116-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010116-1.c?ref=2c87347376c1048bd3c22e6951db24f33ce051d4", "patch": "@@ -0,0 +1,32 @@\n+/* Distilled from optimization/863.  */\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern void ok (int);\n+\n+typedef struct\n+{\n+  int x, y, z;\n+} Data;\n+\n+void find (Data *first, Data *last)\n+{\n+  int i;\n+  for (i = (last - first) >> 2; i > 0; --i)\n+    ok(i);\n+  abort ();\n+}\n+\n+void ok(int i)\n+{\n+  if (i != 1)\n+    abort ();\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  Data DataList[4];\n+  find (DataList + 0, DataList + 4);\n+}"}]}