{"sha": "6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjNzU3MWQwNmZiYzJmOGFlMTBiMDIxNjVkZjdlNmE1NTgzMTRhNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-26T15:12:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-26T15:12:58Z"}, "message": "Add prototypes for static functions.\n\n({l,r}{shift,rotate}_double): COUNT arg is HOST_WIDE_INT, PREC is int.\n(all_ones_mask): Remove __inline__.\n(range_test): Make static; not used elsewhere.\n\nFrom-SVN: r4750", "tree": {"sha": "8de387f35b1848b798b7bed0560a2d96a4848640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de387f35b1848b798b7bed0560a2d96a4848640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc7571d06fbc2f8ae10b02165df7e6a558314a7/comments", "author": null, "committer": null, "parents": [{"sha": "6e716e89dc2fbd6bb6e9a2e938ce181c0322f149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e716e89dc2fbd6bb6e9a2e938ce181c0322f149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e716e89dc2fbd6bb6e9a2e938ce181c0322f149"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "67e3c5d31a6e5d55a422eaabde5c7749648d772e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dc7571d06fbc2f8ae10b02165df7e6a558314a7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dc7571d06fbc2f8ae10b02165df7e6a558314a7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "patch": "@@ -48,11 +48,34 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Handle floating overflow for `const_binop'.  */\n static jmp_buf float_error;\n \n-void lshift_double ();\n-void rshift_double ();\n-void lrotate_double ();\n-void rrotate_double ();\n-static tree const_binop ();\n+static void encode\tPROTO((short *, HOST_WIDE_INT, HOST_WIDE_INT));\n+static void decode\tPROTO((short *, HOST_WIDE_INT *, HOST_WIDE_INT *));\n+static int div_and_round_double PROTO((enum tree_code, int, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT *,\n+\t\t\t\t       HOST_WIDE_INT *, HOST_WIDE_INT *,\n+\t\t\t\t       HOST_WIDE_INT *));\n+static int split_tree\tPROTO((tree, enum tree_code, tree *, tree *, int *));\n+static tree const_binop PROTO((enum tree_code, tree, tree, int));\n+static tree fold_convert PROTO((tree, tree));\n+static enum tree_code invert_tree_comparison PROTO((enum tree_code));\n+static enum tree_code swap_tree_comparison PROTO((enum tree_code));\n+static int operand_equal_for_comparison_p PROTO((tree, tree, tree));\n+static int twoval_comparison_p PROTO((tree, tree *, tree *));\n+static tree eval_subst\tPROTO((tree, tree, tree, tree, tree));\n+static tree omit_one_operand PROTO((tree, tree, tree));\n+static tree distribute_bit_expr PROTO((enum tree_code, tree, tree, tree));\n+static tree make_bit_field_ref PROTO((tree, tree, int, int, int));\n+static tree optimize_bit_field_compare PROTO((enum tree_code, tree,\n+\t\t\t\t\t      tree, tree));\n+static tree decode_field_reference PROTO((tree, int *, int *,\n+\t\t\t\t\t  enum machine_mode *, int *,\n+\t\t\t\t\t  int *, tree *));\n+static int all_ones_mask_p PROTO((tree, int));\n+static int simple_operand_p PROTO((tree));\n+static tree range_test\tPROTO((enum tree_code, tree, enum tree_code,\n+\t\t\t       enum tree_code, tree, tree, tree));\n+static tree fold_truthop PROTO((enum tree_code, tree, tree, tree));\n \n #ifndef BRANCH_COST\n #define BRANCH_COST 1\n@@ -345,8 +368,8 @@ mul_double (l1, h1, l2, h2, lv, hv)\n \n void\n lshift_double (l1, h1, count, prec, lv, hv, arith)\n-     HOST_WIDE_INT l1, h1;\n-     int count, prec;\n+     HOST_WIDE_INT l1, h1, count;\n+     int prec;\n      HOST_WIDE_INT *lv, *hv;\n      int arith;\n {\n@@ -387,7 +410,8 @@ lshift_double (l1, h1, count, prec, lv, hv, arith)\n \n void\n rshift_double (l1, h1, count, prec, lv, hv, arith)\n-     HOST_WIDE_INT l1, h1, count, prec;\n+     HOST_WIDE_INT l1, h1, count;\n+     int prec;\n      HOST_WIDE_INT *lv, *hv;\n      int arith;\n {\n@@ -422,7 +446,8 @@ rshift_double (l1, h1, count, prec, lv, hv, arith)\n \n void\n lrotate_double (l1, h1, count, prec, lv, hv)\n-     HOST_WIDE_INT l1, h1, count, prec;\n+     HOST_WIDE_INT l1, h1, count;\n+     int prec;\n      HOST_WIDE_INT *lv, *hv;\n {\n   short arg1[MAX_SHORTS];\n@@ -461,7 +486,8 @@ lrotate_double (l1, h1, count, prec, lv, hv)\n \n void\n rrotate_double (l1, h1, count, prec, lv, hv)\n-     HOST_WIDE_INT l1, h1, count, prec;\n+     HOST_WIDE_INT l1, h1, count;\n+     int prec;\n      HOST_WIDE_INT *lv, *hv;\n {\n   short arg1[MAX_SHORTS];\n@@ -2487,9 +2513,6 @@ all_ones_mask_p (mask, size)\n /* Subroutine for fold_truthop: determine if an operand is simple enough\n    to be evaluated unconditionally.  */\n \n-#ifdef __GNUC__\n-__inline\n-#endif\n static int \n simple_operand_p (exp)\n      tree exp;\n@@ -2531,7 +2554,7 @@ simple_operand_p (exp)\n \n    We return the simplified tree or 0 if no optimization is possible.  */\n \n-tree\n+static tree\n range_test (jcode, type, lo_code, hi_code, var, lo_cst, hi_cst)\n      enum tree_code jcode, lo_code, hi_code;\n      tree type, var, lo_cst, hi_cst;"}]}