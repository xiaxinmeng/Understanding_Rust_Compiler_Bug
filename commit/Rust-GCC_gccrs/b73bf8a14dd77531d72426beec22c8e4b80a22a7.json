{"sha": "b73bf8a14dd77531d72426beec22c8e4b80a22a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczYmY4YTE0ZGQ3NzUzMWQ3MjQyNmJlZWMyMmM4ZTRiODBhMjJhNw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-06T03:46:34Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T02:20:26Z"}, "message": "cris: Enable single-bit btst/btstq to set condition codes.\n\nEnables the use of btst / btstq for a single bit (at other bits\nthan 0, including as indicated by a variable) to set\ncondition-codes.  There's also a bug-fix for the bit-0-btstq\npattern; it shouldn't generate CCmode as only the Z flag is\nvalid, still using CC_NZmode is ok, as only equality-tests are\ngenerated.  The cris_rtx_costs tweak is necessary or else\ncombine will consider the btst not preferable.  It reduces the\ndifference to cc0-costs beyond the threshold to the\ntransformation being seen as profitable, but there's still a\ndifference in values for the pre-split-time btst+branch as\nopposed to the cc0 btst and branch, with both appearing to be\nthe cost of several insns (18 and 22).\n\ngcc:\n\t* config/cris/cris-modes.def (CC_ZnN): New CC_MODE.\n\t* config/cris/cris.c (cris_rtx_costs): Handle pre-split bit-test\n\t* config/cris/cris.md (ZnNNZSET, ZnNNZUSE): New mode_iterators.\n\t(znnCC, rznnCC): New code_attrs.\n\t(\"*btst<mode>\"): Iterator over ZnNNZSET instead of NZVCSET.  Remove\n\tobseolete comment.  Add belt-and-suspenders mode-test to condition.\n\tAdd fixme regarding remaining matched-but-not-generated case.\n\t(\"*cbranch<mode>4_btstrq1_<CC>\"): New insn_and_split.\n\t(\"*cbranch<mode>4_btstqb0_<CC>\"): Rename from\n\t\"*cbranch<mode>4_btstq<CC>\".  Split to CC_NZ instead of CC.\n\t(\"*b<zcond:code><mode>\"): Iterate over ZnNNZUSE instead of NZUSE.\n\tHandle output of CC_ZnNmode.\n\t(\"*b<nzcond:code>_reversed<mode>\"): Ditto.", "tree": {"sha": "7193f5f847be8df8670ba68a4eb42a838fc506ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7193f5f847be8df8670ba68a4eb42a838fc506ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b73bf8a14dd77531d72426beec22c8e4b80a22a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73bf8a14dd77531d72426beec22c8e4b80a22a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73bf8a14dd77531d72426beec22c8e4b80a22a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73bf8a14dd77531d72426beec22c8e4b80a22a7/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d137723be6b9bb0f7c0e69aea0c6735ad092f366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d137723be6b9bb0f7c0e69aea0c6735ad092f366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d137723be6b9bb0f7c0e69aea0c6735ad092f366"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "8f14fdba64a73b9e3a20ec5321db152be632d082", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b73bf8a14dd77531d72426beec22c8e4b80a22a7", "patch": "@@ -153,6 +153,20 @@\n \tfrom \"bswapsi2\".\n \t(\"*uminsi3<setcc><setnz><setnzvc>\"): Rename from \"*uminsi3\".\n \n+\t* config/cris/cris-modes.def (CC_ZnN): New CC_MODE.\n+\t* config/cris/cris.c (cris_rtx_costs): Handle pre-split bit-test\n+\t* config/cris/cris.md (ZnNNZSET, ZnNNZUSE): New mode_iterators.\n+\t(znnCC, rznnCC): New code_attrs.\n+\t(\"*btst<mode>\"): Iterator over ZnNNZSET instead of NZVCSET.  Remove\n+\tobseolete comment.  Add belt-and-suspenders mode-test to condition.\n+\tAdd fixme regarding remaining matched-but-not-generated case.\n+\t(\"*cbranch<mode>4_btstrq1_<CC>\"): New insn_and_split.\n+\t(\"*cbranch<mode>4_btstqb0_<CC>\"): Rename from\n+\t\"*cbranch<mode>4_btstq<CC>\".  Split to CC_NZ instead of CC.\n+\t(\"*b<zcond:code><mode>\"): Iterate over ZnNNZUSE instead of NZUSE.\n+\tHandle output of CC_ZnNmode.\n+\t(\"*b<nzcond:code>_reversed<mode>\"): Ditto.\n+\n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-color.c (update_costs_from_allocno): Remove"}, {"sha": "1aaf12a0f5ba04d6eed718aab6772c8157234651", "filename": "gcc/config/cris/cris-modes.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2Fconfig%2Fcris%2Fcris-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2Fconfig%2Fcris%2Fcris-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-modes.def?ref=b73bf8a14dd77531d72426beec22c8e4b80a22a7", "patch": "@@ -28,8 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n    (fpcraz).  The two subsets meaningful to gcc are all of N, Z, V, C\n    versus just N, Z; some CC-users care only about N and/or Z and some\n    that care about at least one of those flags together with V and/or C.\n-   (FIXME: the result of testing a single bit using the btst instruction\n-   should be described as a separate mode.)\n \n    The plain \"CC_MODE (CC)\" (which is always present in gcc), is used to\n    reflect the \"unoptimized\" state, where the CC-setter is a compare\n@@ -52,3 +50,7 @@ CC_MODE (CC_NZ);\n    are set to usable values, fpcraz.  For a condition-code user: at least\n    one of V and C are used and possibly N and Z too.  */\n CC_MODE (CC_NZVC);\n+\n+/* The result of a btst / btstq instruction for extracting a single bit\n+   goes negated into the N flag, or in olde cc0-parlance, CC_Z_IN_NOT_N.  */\n+CC_MODE (CC_ZnN);"}, {"sha": "d0807adc87f1801f29b1fafdb498a4c7becfe91c", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b73bf8a14dd77531d72426beec22c8e4b80a22a7", "patch": "@@ -1772,8 +1772,30 @@ cris_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno,\n       return false;\n \n     case ZERO_EXTRACT:\n-      if (outer_code != COMPARE)\n-        return false;\n+      /* Conditionals are split after reload, giving a different look.  */\n+      if (reload_completed)\n+\t{\n+\t  if (outer_code != COMPARE)\n+\t    return false;\n+\t}\n+      else\n+\tswitch (outer_code)\n+\t  {\n+\t  case EQ:\n+\t  case NE:\n+\t  case LT:\n+\t  case LTU:\n+\t  case LE:\n+\t  case LEU:\n+\t  case GT:\n+\t  case GTU:\n+\t  case GE:\n+\t  case GEU:\n+\t    break;\n+\n+\t  default:\n+\t    return false;\n+\t  }\n       /* fall through */\n \n     case ZERO_EXTEND: case SIGN_EXTEND:"}, {"sha": "1e895a375c33e10b780007c8de1dbadfb4d247b2", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 54, "deletions": 16, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b73bf8a14dd77531d72426beec22c8e4b80a22a7/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=b73bf8a14dd77531d72426beec22c8e4b80a22a7", "patch": "@@ -197,6 +197,8 @@\n (define_mode_iterator NZUSE [CC CC_NZ CC_NZVC])\n (define_mode_iterator NZVCSET [CC CC_NZVC CC_NZ])\n (define_mode_iterator NZVCUSE [CC_NZVC])\n+(define_mode_iterator ZnNNZSET [CC_ZnN CC_NZ])\n+(define_mode_iterator ZnNNZUSE [CC CC_ZnN CC_NZ CC_NZVC])\n \n ;; All conditions.\n (define_code_iterator cond [eq ne gtu ltu geu leu gt le lt ge])\n@@ -230,6 +232,12 @@\n ;; Reverse of oCC.\n (define_code_attr roCC [(lt \"pl\") (ge \"mi\") (gtu \"eq\") (ltu \"ne\")])\n \n+;; CC_Z_IN_NOT_N, a.k.a. CC_ZnNmode.\n+(define_code_attr znnCC [(eq \"pl\") (ne \"mi\")])\n+\n+;;; ...and the reverse\n+(define_code_attr rznnCC [(eq \"mi\") (ne \"pl\")])\n+\n ;; Required unoptimized CCmode, different for nzcond and nzvccond.\n (define_code_attr xCC [(eq \"CC\") (ne \"CC\") (gtu \"CC\") (ltu \"CC_NZVC\")\n \t\t       (geu \"CC_NZVC\") (leu \"CC\") (lt \"CC\") (ge \"CC\")\n@@ -386,20 +394,20 @@\n ;; of zeros starting at bit 0).\n \n ;; SImode.  This mode is the only one needed, since gcc automatically\n-;; extends subregs for lower-size modes.  FIXME: Add testcase.\n+;; extends subregs for lower-size modes.\n (define_insn \"*btst<mode>\"\n-  [(set (reg:NZVCSET CRIS_CC0_REGNUM)\n-\t(compare:NZVCSET\n+  [(set (reg:ZnNNZSET CRIS_CC0_REGNUM)\n+\t(compare:ZnNNZSET\n \t (zero_extract:SI\n \t  (match_operand:SI 0 \"nonmemory_operand\" \"r, r,r, r,r, r,Kp\")\n \t  (match_operand:SI 1 \"const_int_operand\" \"Kc,n,Kc,n,Kc,n,n\")\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"M, M,Kc,n,r, r,r\"))\n \t (const_int 0)))]\n   ;; Either it is a single bit, or consecutive ones starting at 0.\n-  ;; The btst ones depend on stuff in NOTICE_UPDATE_CC.\n   \"reload_completed\n    && CONST_INT_P (operands[1])\n-   && (operands[1] == const1_rtx || operands[2] == const0_rtx)\n+   && ((operands[1] == const1_rtx && <MODE>mode == CC_ZnNmode)\n+       || (operands[2] == const0_rtx && <MODE>mode == CC_NZmode))\n    && (REG_S_P (operands[0])\n        || (operands[1] == const1_rtx\n \t   && REG_S_P (operands[2])\n@@ -410,7 +418,7 @@\n ;; The next-to-last \"&&\" condition above should be caught by some kind of\n ;; canonicalization in gcc, but we can easily help with it here.\n ;;  It results from expressions of the type\n-;; \"power_of_2_value & (1 << y)\".\n+;; \"power_of_2_value & (1 << y)\".  FIXME: Add testcase.\n ;;\n ;; Since there may be codes with tests in on bits (in constant position)\n ;; beyond the size of a word, handle that by assuming those bits are 0.\n@@ -2099,8 +2107,34 @@\n \t\t      (pc)))]\n   \"\")\n \n-;; FIXME: this matches only a subset of what the \"*btst\" pattern can handle.\n-(define_insn_and_split \"*cbranch<mode>4_btstq<CC>\"\n+;; Test a single bit at operand[0] against 0/non-0.\n+(define_insn_and_split \"*cbranch<mode>4_btstrq1_<CC>\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (zcond\n+\t  (zero_extract:BWD\n+\t   (match_operand:BWD 0 \"register_operand\" \"r,r\")\n+\t   (const_int 1)\n+\t   (match_operand:SI 1 \"nonmemory_operand\" \"Kc,r\"))\n+\t  (const_int 0))\n+\t (label_ref (match_operand 2 \"\"))\n+\t (pc)))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:CC_ZnN CRIS_CC0_REGNUM)\n+\t(compare:CC_ZnN\n+\t (zero_extract:SI (match_dup 0) (const_int 1) (match_dup 1))\n+\t (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (zcond (reg:CC_ZnN CRIS_CC0_REGNUM) (const_int 0))\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"\")\n+\n+;; Test a field of bits starting at bit 0 against 0/non-0.\n+(define_insn_and_split \"*cbranch<mode>4_btstqb0_<CC>\"\n   [(set (pc)\n \t(if_then_else\n \t (zcond\n@@ -2115,12 +2149,12 @@\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (reg:CC CRIS_CC0_REGNUM)\n-\t(compare:CC\n+  [(set (reg:CC_NZ CRIS_CC0_REGNUM)\n+\t(compare:CC_NZ\n \t (zero_extract:SI (match_dup 0) (match_dup 1) (const_int 0))\n \t (const_int 0)))\n    (set (pc)\n-\t(if_then_else (zcond (reg:CC CRIS_CC0_REGNUM) (const_int 0))\n+\t(if_then_else (zcond (reg:CC_NZ CRIS_CC0_REGNUM) (const_int 0))\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n   \"\")\n@@ -2132,12 +2166,14 @@\n \n (define_insn \"*b<zcond:code><mode>\"\n   [(set (pc)\n-\t(if_then_else (zcond (reg:NZUSE CRIS_CC0_REGNUM)\n+\t(if_then_else (zcond (reg:ZnNNZUSE CRIS_CC0_REGNUM)\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"reload_completed\"\n-  \"b<CC> %l0%#\"\n+{\n+  return <MODE>mode == CC_ZnNmode ? \"b<znnCC> %l0%#\" : \"b<CC> %l0%#\";\n+}\n   [(set_attr \"slottable\" \"has_slot\")])\n \n (define_insn \"*b<nzvccond:code><mode>\"\n@@ -2166,12 +2202,14 @@\n \n (define_insn \"*b<nzcond:code>_reversed<mode>\"\n   [(set (pc)\n-\t(if_then_else (nzcond (reg:NZUSE CRIS_CC0_REGNUM)\n-\t\t\t     (const_int 0))\n+\t(if_then_else (nzcond (reg:ZnNNZUSE CRIS_CC0_REGNUM)\n+\t\t\t      (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"reload_completed\"\n-  \"b<rCC> %l0%#\"\n+{\n+  return <MODE>mode == CC_ZnNmode ? \"b<rznnCC> %l0%#\" : \"b<rCC> %l0%#\";\n+}\n   [(set_attr \"slottable\" \"has_slot\")])\n \n (define_insn \"*b<nzvccond:code>_reversed<mode>\""}]}