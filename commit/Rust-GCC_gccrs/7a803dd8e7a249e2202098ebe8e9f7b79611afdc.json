{"sha": "7a803dd8e7a249e2202098ebe8e9f7b79611afdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4MDNkZDhlN2EyNDllMjIwMjA5OGViZThlOWY3Yjc5NjExYWZkYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-07-02T10:10:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-07-02T10:10:15Z"}, "message": "* decl.c (make_type_from_size) <INTEGER_TYPE>: Fix typo and tidy up.\n\nFrom-SVN: r137350", "tree": {"sha": "a59070fcf6386353d629e220b6650062c30ddc0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a59070fcf6386353d629e220b6650062c30ddc0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a803dd8e7a249e2202098ebe8e9f7b79611afdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a803dd8e7a249e2202098ebe8e9f7b79611afdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a803dd8e7a249e2202098ebe8e9f7b79611afdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a803dd8e7a249e2202098ebe8e9f7b79611afdc/comments", "author": null, "committer": null, "parents": [{"sha": "a167a67620fe7124ed29891ba32e7af676831a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a167a67620fe7124ed29891ba32e7af676831a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a167a67620fe7124ed29891ba32e7af676831a3c"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "c2fb2dad0aee75889701e15654ae669ff92f0a23", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a803dd8e7a249e2202098ebe8e9f7b79611afdc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a803dd8e7a249e2202098ebe8e9f7b79611afdc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a803dd8e7a249e2202098ebe8e9f7b79611afdc", "patch": "@@ -1,3 +1,7 @@\n+2008-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (make_type_from_size) <INTEGER_TYPE>: Fix typo and tidy up.\n+\n 2008-06-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ada-tree.h (SET_TYPE_LANG_SPECIFIC, SET_DECL_LANG_SPECIFIC): Fix"}, {"sha": "ebc2e5edd1409bf414fddc0083c13ae7d5b29404", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a803dd8e7a249e2202098ebe8e9f7b79611afdc/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a803dd8e7a249e2202098ebe8e9f7b79611afdc/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=7a803dd8e7a249e2202098ebe8e9f7b79611afdc", "patch": "@@ -7105,41 +7105,43 @@ set_rm_size (Uint uint_size, tree gnu_type, Entity_Id gnat_entity)\n \f\n /* Given a type TYPE, return a new type whose size is appropriate for SIZE.\n    If TYPE is the best type, return it.  Otherwise, make a new type.  We\n-   only support new integral and pointer types.  BIASED_P is nonzero if\n+   only support new integral and pointer types.  FOR_BIASED is nonzero if\n    we are making a biased type.  */\n \n static tree\n-make_type_from_size (tree type, tree size_tree, bool biased_p)\n+make_type_from_size (tree type, tree size_tree, bool for_biased)\n {\n-  tree new_type;\n   unsigned HOST_WIDE_INT size;\n-  bool unsigned_p;\n+  bool biased_p;\n+  tree new_type;\n \n-  /* If size indicates an error, just return TYPE to avoid propagating the\n-     error.  Likewise if it's too large to represent.  */\n+  /* If size indicates an error, just return TYPE to avoid propagating\n+     the error.  Likewise if it's too large to represent.  */\n   if (!size_tree || !host_integerp (size_tree, 1))\n     return type;\n \n   size = tree_low_cst (size_tree, 1);\n+\n   switch (TREE_CODE (type))\n     {\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n-      /* Only do something if the type is not already the proper size and is\n-\t not a packed array type.  */\n+      biased_p = (TREE_CODE (type) == INTEGER_TYPE\n+\t\t  && TYPE_BIASED_REPRESENTATION_P (type));\n+\n+      /* Only do something if the type is not a packed array type and\n+\t doesn't already have the proper size.  */\n       if (TYPE_PACKED_ARRAY_TYPE_P (type)\n-\t  || (TYPE_PRECISION (type) == size\n-\t      && biased_p == (TREE_CODE (type) == INTEGER_CST\n-\t\t\t      && TYPE_BIASED_REPRESENTATION_P (type))))\n+\t  || (TYPE_PRECISION (type) == size && biased_p == for_biased))\n \tbreak;\n \n-      biased_p |= (TREE_CODE (type) == INTEGER_TYPE\n-\t\t   && TYPE_BIASED_REPRESENTATION_P (type));\n-      unsigned_p = TYPE_UNSIGNED (type) || biased_p;\n-\n+      biased_p |= for_biased;\n       size = MIN (size, LONG_LONG_TYPE_SIZE);\n-      new_type\n-\t= unsigned_p ? make_unsigned_type (size) : make_signed_type (size);\n+\n+      if (TYPE_UNSIGNED (type) || biased_p)\n+\tnew_type = make_unsigned_type (size);\n+      else\n+\tnew_type = make_signed_type (size);\n       TREE_TYPE (new_type) = TREE_TYPE (type) ? TREE_TYPE (type) : type;\n       TYPE_MIN_VALUE (new_type)\n \t= convert (TREE_TYPE (new_type), TYPE_MIN_VALUE (type));\n@@ -7164,7 +7166,6 @@ make_type_from_size (tree type, tree size_tree, bool biased_p)\n       if (TYPE_THIN_POINTER_P (type) && size >= POINTER_SIZE * 2)\n \treturn\n \t  build_pointer_type (TYPE_UNCONSTRAINED_ARRAY (TREE_TYPE (type)));\n-\n       break;\n \n     default:"}]}