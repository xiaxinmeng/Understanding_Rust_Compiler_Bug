{"sha": "9931a2bf8c807326be1596dc0698872e32823e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzMWEyYmY4YzgwNzMyNmJlMTU5NmRjMDY5ODg3MmUzMjgyM2UxNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-02-21T15:35:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-02-21T15:35:44Z"}, "message": "re PR c++/47207 ([C++0x] ICE: in decl_constant_var_p, at cp/decl2.c:3563 on invalid code)\n\n\tPR c++/47207\n\t* decl2.c (decl_constant_var_p): A constexpr var needs an\n\tinitializer to be constant.\n\t* semantics.c (cxx_eval_constant_expression): Complain about\n\tconstexpr var used in its own initializer.\n\t* call.c (set_up_extended_ref_temp): Set\n\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P too.\n\nFrom-SVN: r170365", "tree": {"sha": "b4c3ba53f68b6d7631c54b3b504bd02dcf9ce100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c3ba53f68b6d7631c54b3b504bd02dcf9ce100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9931a2bf8c807326be1596dc0698872e32823e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9931a2bf8c807326be1596dc0698872e32823e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9931a2bf8c807326be1596dc0698872e32823e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9931a2bf8c807326be1596dc0698872e32823e17/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e292d00367ce0a736a7c1e1433e7920eeb0673cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e292d00367ce0a736a7c1e1433e7920eeb0673cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e292d00367ce0a736a7c1e1433e7920eeb0673cf"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "208bb8ca237e9a96b54af64049b4fc6cc1907f40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9931a2bf8c807326be1596dc0698872e32823e17", "patch": "@@ -1,3 +1,13 @@\n+2011-02-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/47207\n+\t* decl2.c (decl_constant_var_p): A constexpr var needs an\n+\tinitializer to be constant.\n+\t* semantics.c (cxx_eval_constant_expression): Complain about\n+\tconstexpr var used in its own initializer.\n+\t* call.c (set_up_extended_ref_temp): Set\n+\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P too.\n+\n 2011-02-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47199"}, {"sha": "8dccbbef4124f5e31b7b5f0c0f782f034743f505", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9931a2bf8c807326be1596dc0698872e32823e17", "patch": "@@ -8149,6 +8149,7 @@ set_up_extended_ref_temp (tree decl, tree expr, tree *cleanup, tree *initp)\n \t     Currently this is only useful for initializer_list temporaries,\n \t     since reference vars can't appear in constant expressions.  */\n \t  DECL_DECLARED_CONSTEXPR_P (var) = true;\n+\t  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (var) = true;\n \t  TREE_CONSTANT (var) = true;\n \t}\n       DECL_INITIAL (var) = init;"}, {"sha": "93d44a4d6b5f3bd59d2bc49aff884348d0db558b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9931a2bf8c807326be1596dc0698872e32823e17", "patch": "@@ -3550,20 +3550,21 @@ decl_constant_var_p (tree decl)\n   tree type = TREE_TYPE (decl);\n   if (TREE_CODE (decl) != VAR_DECL)\n     return false;\n-  if (DECL_DECLARED_CONSTEXPR_P (decl))\n-    ret = true;\n-  else if (CP_TYPE_CONST_NON_VOLATILE_P (type)\n-\t   && INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+  if (DECL_DECLARED_CONSTEXPR_P (decl)\n+      || (CP_TYPE_CONST_NON_VOLATILE_P (type)\n+\t  && INTEGRAL_OR_ENUMERATION_TYPE_P (type)))\n     {\n       /* We don't know if a template static data member is initialized with\n-\t a constant expression until we instantiate its initializer.  */\n+\t a constant expression until we instantiate its initializer.  Even\n+\t in the case of a constexpr variable, we can't treat it as a\n+\t constant until its initializer is complete in case it's used in\n+\t its own initializer.  */\n       mark_used (decl);\n       ret = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl);\n     }\n   else\n     ret = false;\n \n-  gcc_assert (!ret || DECL_INITIAL (decl));\n   return ret;\n }\n "}, {"sha": "6a9c6a08d18a1f6ad8aea7d5c229be22b9f273ee", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9931a2bf8c807326be1596dc0698872e32823e17", "patch": "@@ -6768,7 +6768,10 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \t      tree type = TREE_TYPE (r);\n \t      error (\"the value of %qD is not usable in a constant \"\n \t\t     \"expression\", r);\n-\t      if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+\t      if (DECL_DECLARED_CONSTEXPR_P (r))\n+\t\tinform (DECL_SOURCE_LOCATION (r),\n+\t\t\t\"%qD used in its own initializer\", r);\n+\t      else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n \t\t{\n \t\t  if (!CP_TYPE_CONST_P (type))\n \t\t    inform (DECL_SOURCE_LOCATION (r),"}, {"sha": "3c989f802f99c763c48cec584bb5ea795b3c7e39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9931a2bf8c807326be1596dc0698872e32823e17", "patch": "@@ -1,3 +1,7 @@\n+2011-02-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-diag2.C: New.\n+\n 2011-02-20  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-ctor7.C: New."}, {"sha": "c78416ec1a333feead4a83a8f73f43c140deef14", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9931a2bf8c807326be1596dc0698872e32823e17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag2.C?ref=9931a2bf8c807326be1596dc0698872e32823e17", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/47207\n+// { dg-options -std=c++0x }\n+\n+constexpr int X (X);\t\t// { dg-error \"not usable\" }\n+// { dg-message \"own initializer\" \"\" { target *-*-* } 4 }"}]}