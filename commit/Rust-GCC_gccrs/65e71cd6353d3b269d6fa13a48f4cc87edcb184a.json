{"sha": "65e71cd6353d3b269d6fa13a48f4cc87edcb184a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlNzFjZDYzNTNkM2IyNjlkNmZhMTNhNDhmNGNjODdlZGNiMTg0YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-10-13T14:09:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-10-13T14:09:05Z"}, "message": "Fix incomplete commit.\n\nFrom-SVN: r88986", "tree": {"sha": "402f646b4bc79cb380c0b2c3a633faae0120a075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/402f646b4bc79cb380c0b2c3a633faae0120a075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e71cd6353d3b269d6fa13a48f4cc87edcb184a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e71cd6353d3b269d6fa13a48f4cc87edcb184a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e71cd6353d3b269d6fa13a48f4cc87edcb184a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e71cd6353d3b269d6fa13a48f4cc87edcb184a/comments", "author": null, "committer": null, "parents": [{"sha": "b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9bf58e5fa4b31a077b5fe0711b7884f5d0148ed"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "dbdb614cf46d6eea09105efde35ff70ebfc5433f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e71cd6353d3b269d6fa13a48f4cc87edcb184a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e71cd6353d3b269d6fa13a48f4cc87edcb184a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=65e71cd6353d3b269d6fa13a48f4cc87edcb184a", "patch": "@@ -4374,7 +4374,7 @@ You need not define this macro if you did not define\n @code{DELAY_SLOTS_FOR_EPILOGUE}.\n @end defmac\n \n-@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, tree @var{function})\n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, HOST_WIDE_INT @var{vcall_offset}, tree @var{function})\n A function that outputs the assembler code for a thunk\n function, used to implement C++ virtual function calls with multiple\n inheritance.  The thunk acts as a wrapper around a virtual function,\n@@ -4388,7 +4388,15 @@ in C++.  This is the incoming argument @emph{before} the function prologue,\n e.g.@: @samp{%o0} on a sparc.  The addition must preserve the values of\n all other incoming arguments.\n \n-After the addition, emit code to jump to @var{function}, which is a\n+Then, if @var{vcall_offset} is nonzero, an additional adjustment should be\n+made after adding @code{delta}.  In particular, if @var{p} is the\n+adjusted pointer, the following adjustment should be made:\n+\n+@smallexample\n+p += (*((ptrdiff_t **)p))[vcall_offset/sizeof(ptrdiff_t)]\n+@end smallexample\n+\n+After the additions, emit code to jump to @var{function}, which is a\n @code{FUNCTION_DECL}.  This is a direct pure jump, not a call, and does\n not touch the return address.  Hence returning from @var{FUNCTION} will\n return to whoever called the current @samp{thunk}.\n@@ -4408,19 +4416,12 @@ front end will generate a less efficient heavyweight thunk that calls\n not support varargs.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_VCALL_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, int @var{vcall_offset}, tree @var{function})\n-A function like @code{TARGET_ASM_OUTPUT_MI_THUNK}, except that if\n-@var{vcall_offset} is nonzero, an additional adjustment should be made\n-after adding @code{delta}.  In particular, if @var{p} is the\n-adjusted pointer, the following adjustment should be made:\n-\n-@smallexample\n-p += (*((ptrdiff_t **)p))[vcall_offset/sizeof(ptrdiff_t)]\n-@end smallexample\n-\n-@noindent\n-If this function is defined, it will always be used in place of\n-@code{TARGET_ASM_OUTPUT_MI_THUNK}.\n+@deftypefn {Target Hook} bool TARGET_ASM_CAN_OUTPUT_MI_THUNK (tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, HOST_WIDE_INT @var{vcall_offset}, tree @var{function})\n+A function that returns true if TARGET_ASM_OUTPUT_MI_THUNK would be able\n+to output the assembler code for the thunk function specified by the\n+arguments it is passed, and false otherwise.  In the latter case, the\n+generic approach will be used by the C++ front end, with the limitations\n+previously exposed.\n @end deftypefn\n \n @node Profiling"}]}