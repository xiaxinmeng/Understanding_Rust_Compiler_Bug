{"sha": "1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwOWZmNmI5YTlmZDNmZjIwOTdiYzgwMmYzMjhkODUzMGFiMjQyMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2006-03-01T15:15:38Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2006-03-01T15:15:38Z"}, "message": "re PR middle-end/26022 (ICE with references and virtual functions)\n\n2006-01-23  Andrew Pinski  <pinskia@physics.uc.edu>\n\n\tPR middle-end/26022\n\tRevert:\n\tPR middle-end/24437\n\t* tree-ssa-ccp.c (fold_stmt): Move folding of OBJ_TYPE_REF\n\twith a call expr to ...\n\t* fold-const.c (fold_ternary) <case CALL_EXPR>: Here.\n\n2006-02-28  Andrew Pinski  <pinskia@physics.uc.edu>\n\n\tPR middle-end/26022\n\t* g++.dg/opt/return-slot1.C: New test.\n\nFrom-SVN: r111602", "tree": {"sha": "dbc68e04e55cfcfd5acfe0bb930d61ef8c0bef2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc68e04e55cfcfd5acfe0bb930d61ef8c0bef2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/comments", "author": null, "committer": null, "parents": [{"sha": "c10bc6e9a0f720a8e8db03c90960017218fe9879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c10bc6e9a0f720a8e8db03c90960017218fe9879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c10bc6e9a0f720a8e8db03c90960017218fe9879"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "b912f617a9865e61f3e89dc5031230e096beed6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "patch": "@@ -1,3 +1,12 @@\n+2006-01-23  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/26022\n+\tRevert:\n+\tPR middle-end/24437\n+\t* tree-ssa-ccp.c (fold_stmt): Move folding of OBJ_TYPE_REF\n+\twith a call expr to ...\n+\t* fold-const.c (fold_ternary) <case CALL_EXPR>: Here.\n+\n 2006-03-01  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-vrp.c (extract_range_from_assert): Remove special"}, {"sha": "2e8996984e551c2992c9d07f3348a26ae281fd0a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "patch": "@@ -10565,26 +10565,6 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t  && TREE_CODE (TREE_OPERAND (op0, 0)) == FUNCTION_DECL\n \t  && DECL_BUILT_IN (TREE_OPERAND (op0, 0)))\n \treturn fold_builtin (TREE_OPERAND (op0, 0), op1, false);\n-      /* Check for resolvable OBJ_TYPE_REF.  The only sorts we can resolve\n-         here are when we've propagated the address of a decl into the\n-         object slot.  */\n-      if (TREE_CODE (op0) == OBJ_TYPE_REF\n-\t  && lang_hooks.fold_obj_type_ref\n-\t  && TREE_CODE (OBJ_TYPE_REF_OBJECT (op0)) == ADDR_EXPR\n-\t  && DECL_P (TREE_OPERAND (OBJ_TYPE_REF_OBJECT (op0), 0)))\n-\t{\n-\t  tree t;\n-\n-\t  /* ??? Caution: Broken ADDR_EXPR semantics means that\n-             looking at the type of the operand of the addr_expr\n-             can yield an array type.  See silly exception in\n-             check_pointer_types_r.  */\n-\n-\t  t = TREE_TYPE (TREE_TYPE (OBJ_TYPE_REF_OBJECT (op0)));\n-\t  t = lang_hooks.fold_obj_type_ref (op0, t);\n-\t  if (t)\n-\t   return fold_build3 (code, type, t, op1, op2);\n-\t}\n       return NULL_TREE;\n \n     case BIT_FIELD_REF:"}, {"sha": "d5c50deb8f6dd2b1e2d647c0c2f31fbc9137b03c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "patch": "@@ -1,3 +1,8 @@\n+2006-02-28  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/26022\n+\t* g++.dg/opt/return-slot1.C: New test.\n+\n 2006-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26136"}, {"sha": "fcc6cea5abe1e138fd5c736888b33e62a05224f0", "filename": "gcc/testsuite/g++.dg/opt/return-slot1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freturn-slot1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freturn-slot1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Freturn-slot1.C?ref=1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+struct A\n+{\n+    A();\n+    virtual A foo() const;\n+};\n+\n+void bar()\n+{\n+    const A& a=A();\n+    a.foo();\n+}"}, {"sha": "309a2827848989ecdc1f24702213790050fb897d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1809ff6b9a9fd3ff2097bc802f328d8530ab2420/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=1809ff6b9a9fd3ff2097bc802f328d8530ab2420", "patch": "@@ -2350,6 +2350,40 @@ fold_stmt (tree *stmt_p)\n       callee = get_callee_fndecl (rhs);\n       if (callee && DECL_BUILT_IN (callee))\n \tresult = ccp_fold_builtin (stmt, rhs);\n+      else\n+\t{\n+\t  /* Check for resolvable OBJ_TYPE_REF.  The only sorts we can resolve\n+\t     here are when we've propagated the address of a decl into the\n+\t     object slot.  */\n+\t  /* ??? Should perhaps do this in fold proper.  However, doing it\n+\t     there requires that we create a new CALL_EXPR, and that requires\n+\t     copying EH region info to the new node.  Easier to just do it\n+\t     here where we can just smash the call operand. Also\n+\t     CALL_EXPR_RETURN_SLOT_OPT needs to be handled correctly and\n+\t     copied, fold_ternary does not have not information. */\n+\t  callee = TREE_OPERAND (rhs, 0);\n+\t  if (TREE_CODE (callee) == OBJ_TYPE_REF\n+\t      && lang_hooks.fold_obj_type_ref\n+\t      && TREE_CODE (OBJ_TYPE_REF_OBJECT (callee)) == ADDR_EXPR\n+\t      && DECL_P (TREE_OPERAND\n+\t\t\t (OBJ_TYPE_REF_OBJECT (callee), 0)))\n+\t    {\n+\t      tree t;\n+\n+\t      /* ??? Caution: Broken ADDR_EXPR semantics means that\n+\t\t looking at the type of the operand of the addr_expr\n+\t\t can yield an array type.  See silly exception in\n+\t\t check_pointer_types_r.  */\n+\n+\t      t = TREE_TYPE (TREE_TYPE (OBJ_TYPE_REF_OBJECT (callee)));\n+\t      t = lang_hooks.fold_obj_type_ref (callee, t);\n+\t      if (t)\n+\t\t{\n+\t\t  TREE_OPERAND (rhs, 0) = t;\n+\t\t  changed = true;\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   /* If we couldn't fold the RHS, hand over to the generic fold routines.  */"}]}