{"sha": "58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhOWUzYzQwNmNmYjU4YmRkYmE4M2NmOWU3NGI4Y2Q3YTEzOTQ3MQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-10-28T15:15:25Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-10-28T15:15:25Z"}, "message": "check.c (gfc_check_atan_2): Typo in comment.\n\n2011-10-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* check.c (gfc_check_atan_2): Typo in comment.\n\t(gfc_check_nearest): If 's' is constant, check that it is not 0.\n\t* simplify.c (simplify_dshift, gfc_simplify_ibclr, gfc_simplify_ibits,\n\tgfc_simplify_ibset, simplify_shift, gfc_simplify_ishftc,\n\tgfc_simplify_nearest): Remove dead code.\n\n2011-10-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* gfortran.dg/nearest_5.f90: New test.\n\nFrom-SVN: r180618", "tree": {"sha": "fafe950c42f4eaba3e345ba76cb3260be6084ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafe950c42f4eaba3e345ba76cb3260be6084ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/comments", "author": null, "committer": null, "parents": [{"sha": "e8a25ac83c1850d2af91db335625ee7cf5cf526f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a25ac83c1850d2af91db335625ee7cf5cf526f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a25ac83c1850d2af91db335625ee7cf5cf526f"}], "stats": {"total": 118, "additions": 43, "deletions": 75}, "files": [{"sha": "fb3e52bbbbf9fedbbe4d10571f4a022d1907bdc2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "patch": "@@ -1,3 +1,11 @@\n+2011-10-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* check.c (gfc_check_atan_2): Typo in comment.\n+\t(gfc_check_nearest): If 's' is constant, check that it is not 0.\n+\t* simplify.c (simplify_dshift, gfc_simplify_ibclr, gfc_simplify_ibits,\n+\tgfc_simplify_ibset, simplify_shift, gfc_simplify_ishftc,\n+\tgfc_simplify_nearest): Remove dead code.\n+\n 2011-10-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* simplify.c (simplify_transformation_to_array): Fix memory leak."}, {"sha": "0f54ccd4b632a2b97d7ea00500cb708228e7d98b", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "patch": "@@ -934,7 +934,7 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n gfc_try\n gfc_check_atan_2 (gfc_expr *y, gfc_expr *x)\n {\n-  /* gfc_notify_std would be a wast of time as the return value\n+  /* gfc_notify_std would be a waste of time as the return value\n      is seemingly used only for the generic resolution.  The error\n      will be: Too many arguments.  */\n   if ((gfc_option.allow_std & GFC_STD_F2008) == 0)\n@@ -2710,6 +2710,16 @@ gfc_check_nearest (gfc_expr *x, gfc_expr *s)\n   if (type_check (s, 1, BT_REAL) == FAILURE)\n     return FAILURE;\n \n+  if (s->expr_type == EXPR_CONSTANT)\n+    {\n+      if (mpfr_sgn (s->value.real) == 0)\n+\t{\n+\t  gfc_error (\"Argument 'S' of NEAREST at %L shall not be zero\",\n+\t\t     &s->where);\n+\t  return FAILURE;\n+\t}\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "01071cfe13882c672ea818c09330620df727b35a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 10, "deletions": 74, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "patch": "@@ -1899,13 +1899,7 @@ simplify_dshift (gfc_expr *arg1, gfc_expr *arg2, gfc_expr *shiftarg,\n   k = gfc_validate_kind (BT_INTEGER, arg1->ts.kind, false);\n   size = gfc_integer_kinds[k].bit_size;\n \n-  if (gfc_extract_int (shiftarg, &shift) != NULL)\n-    {\n-      gfc_error (\"Invalid SHIFT argument of DSHIFTL at %L\", &shiftarg->where);\n-      return &gfc_bad_expr;\n-    }\n-\n-  gcc_assert (shift >= 0 && shift <= size);\n+  gfc_extract_int (shiftarg, &shift);\n \n   /* DSHIFTR(I,J,SHIFT) = DSHIFTL(I,J,SIZE-SHIFT).  */\n   if (right)\n@@ -2509,21 +2503,10 @@ gfc_simplify_ibclr (gfc_expr *x, gfc_expr *y)\n   if (x->expr_type != EXPR_CONSTANT || y->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  if (gfc_extract_int (y, &pos) != NULL || pos < 0)\n-    {\n-      gfc_error (\"Invalid second argument of IBCLR at %L\", &y->where);\n-      return &gfc_bad_expr;\n-    }\n+  gfc_extract_int (y, &pos);\n \n   k = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n-  if (pos >= gfc_integer_kinds[k].bit_size)\n-    {\n-      gfc_error (\"Second argument of IBCLR exceeds bit size at %L\",\n-\t\t &y->where);\n-      return &gfc_bad_expr;\n-    }\n-\n   result = gfc_copy_expr (x);\n \n   convert_mpz_to_unsigned (result->value.integer,\n@@ -2551,17 +2534,8 @@ gfc_simplify_ibits (gfc_expr *x, gfc_expr *y, gfc_expr *z)\n       || z->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  if (gfc_extract_int (y, &pos) != NULL || pos < 0)\n-    {\n-      gfc_error (\"Invalid second argument of IBITS at %L\", &y->where);\n-      return &gfc_bad_expr;\n-    }\n-\n-  if (gfc_extract_int (z, &len) != NULL || len < 0)\n-    {\n-      gfc_error (\"Invalid third argument of IBITS at %L\", &z->where);\n-      return &gfc_bad_expr;\n-    }\n+  gfc_extract_int (y, &pos);\n+  gfc_extract_int (z, &len);\n \n   k = gfc_validate_kind (BT_INTEGER, x->ts.kind, false);\n \n@@ -2614,21 +2588,10 @@ gfc_simplify_ibset (gfc_expr *x, gfc_expr *y)\n   if (x->expr_type != EXPR_CONSTANT || y->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  if (gfc_extract_int (y, &pos) != NULL || pos < 0)\n-    {\n-      gfc_error (\"Invalid second argument of IBSET at %L\", &y->where);\n-      return &gfc_bad_expr;\n-    }\n+  gfc_extract_int (y, &pos);\n \n   k = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n \n-  if (pos >= gfc_integer_kinds[k].bit_size)\n-    {\n-      gfc_error (\"Second argument of IBSET exceeds bit size at %L\",\n-\t\t &y->where);\n-      return &gfc_bad_expr;\n-    }\n-\n   result = gfc_copy_expr (x);\n \n   convert_mpz_to_unsigned (result->value.integer,\n@@ -3004,11 +2967,8 @@ simplify_shift (gfc_expr *e, gfc_expr *s, const char *name,\n \n   if (e->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n     return NULL;\n-  if (gfc_extract_int (s, &shift) != NULL)\n-    {\n-      gfc_error (\"Invalid second argument of %s at %L\", name, &s->where);\n-      return &gfc_bad_expr;\n-    }\n+\n+  gfc_extract_int (s, &shift);\n \n   k = gfc_validate_kind (BT_INTEGER, e->ts.kind, false);\n   bitsize = gfc_integer_kinds[k].bit_size;\n@@ -3146,11 +3106,7 @@ gfc_simplify_ishftc (gfc_expr *e, gfc_expr *s, gfc_expr *sz)\n   if (e->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  if (gfc_extract_int (s, &shift) != NULL)\n-    {\n-      gfc_error (\"Invalid second argument of ISHFTC at %L\", &s->where);\n-      return &gfc_bad_expr;\n-    }\n+  gfc_extract_int (s, &shift);\n \n   k = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n   isize = gfc_integer_kinds[k].bit_size;\n@@ -3160,18 +3116,8 @@ gfc_simplify_ishftc (gfc_expr *e, gfc_expr *s, gfc_expr *sz)\n       if (sz->expr_type != EXPR_CONSTANT)\n \treturn NULL;\n \n-      if (gfc_extract_int (sz, &ssize) != NULL || ssize <= 0)\n-\t{\n-\t  gfc_error (\"Invalid third argument of ISHFTC at %L\", &sz->where);\n-\t  return &gfc_bad_expr;\n-\t}\n+      gfc_extract_int (sz, &ssize);\n \n-      if (ssize > isize)\n-\t{\n-\t  gfc_error (\"Magnitude of third argument of ISHFTC exceeds \"\n-\t\t     \"BIT_SIZE of first argument at %L\", &s->where);\n-\t  return &gfc_bad_expr;\n-\t}\n     }\n   else\n     ssize = isize;\n@@ -3183,10 +3129,7 @@ gfc_simplify_ishftc (gfc_expr *e, gfc_expr *s, gfc_expr *sz)\n \n   if (ashift > ssize)\n     {\n-      if (sz != NULL)\n-\tgfc_error (\"Magnitude of second argument of ISHFTC exceeds \"\n-\t\t   \"third argument at %L\", &s->where);\n-      else\n+      if (sz == NULL)\n \tgfc_error (\"Magnitude of second argument of ISHFTC exceeds \"\n \t\t   \"BIT_SIZE of first argument at %L\", &s->where);\n       return &gfc_bad_expr;\n@@ -4382,13 +4325,6 @@ gfc_simplify_nearest (gfc_expr *x, gfc_expr *s)\n   if (x->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  if (mpfr_sgn (s->value.real) == 0)\n-    {\n-      gfc_error (\"Second argument of NEAREST at %L shall not be zero\",\n-\t\t &s->where);\n-      return &gfc_bad_expr;\n-    }\n-\n   result = gfc_copy_expr (x);\n \n   /* Save current values of emin and emax.  */"}, {"sha": "f2f1c58b68ba04094594b6a7f5770c599dc073bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "patch": "@@ -1,3 +1,7 @@\n+2011-10-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* gfortran.dg/nearest_5.f90: New test.\n+\n 2011-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/vshift-1.c: New test."}, {"sha": "dbb0b7209af631f9264d13d0a011f1d488b2e7df", "filename": "gcc/testsuite/gfortran.dg/nearest_5.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a9e3c406cfb58bddba83cf9e74b8cd7a139471/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnearest_5.f90?ref=58a9e3c406cfb58bddba83cf9e74b8cd7a139471", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+program a\n+  real x, y(2)\n+  x = 1./3.\n+  y = [1, 2] / 3.\n+  print *, nearest(x, 0.)              ! { dg-error \"shall not be zero\" }\n+  print *, nearest(y, 0.)              ! { dg-error \"shall not be zero\" }\n+  print *, nearest([1., 2.] / 3., 0.)  ! { dg-error \"shall not be zero\" }\n+  print *, nearest(1., 0.)             ! { dg-error \"shall not be zero\" }\n+end program a"}]}