{"sha": "69405ebb53323f5c32062b75ab7af304e7eb6656", "node_id": "C_kwDOANBUbNoAKDY5NDA1ZWJiNTMzMjNmNWMzMjA2MmI3NWFiN2FmMzA0ZTdlYjY2NTY", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:29:57Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:21Z"}, "message": "arm: improve tests for vmladavaq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c: Likewise.", "tree": {"sha": "239e615bbffeeca34430749f8cdd81e72777b155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/239e615bbffeeca34430749f8cdd81e72777b155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69405ebb53323f5c32062b75ab7af304e7eb6656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69405ebb53323f5c32062b75ab7af304e7eb6656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69405ebb53323f5c32062b75ab7af304e7eb6656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69405ebb53323f5c32062b75ab7af304e7eb6656/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce9dd996b9de7727e092769055931f07bc6f4e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9dd996b9de7727e092769055931f07bc6f4e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9dd996b9de7727e092769055931f07bc6f4e5c"}], "stats": {"total": 417, "additions": 336, "deletions": 81}, "files": [{"sha": "f3e5eba3b08277db124fbf4ae3d16755b21622f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_s16.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s16.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+foo (int32_t add, int16x8_t m1, int16x8_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p_s16 (a, b, c, p);\n+  return vmladavaq_p_s16 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+foo1 (int32_t add, int16x8_t m1, int16x8_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p (a, b, c, p);\n+  return vmladavaq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.s16\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavat.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "71f6957bfc59669d8b1d66ff96921bc276009278", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_s32.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s32.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+foo (int32_t add, int32x4_t m1, int32x4_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p_s32 (a, b, c, p);\n+  return vmladavaq_p_s32 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+foo1 (int32_t add, int32x4_t m1, int32x4_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p (a, b, c, p);\n+  return vmladavaq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.s32\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavat.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a74317aeff939b2280f6975454b16183288e83c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_s8.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_s8.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+foo (int32_t add, int8x16_t m1, int8x16_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p_s8 (a, b, c, p);\n+  return vmladavaq_p_s8 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+foo1 (int32_t add, int8x16_t m1, int8x16_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p (a, b, c, p);\n+  return vmladavaq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.s8\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavat.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9ac84d46a0756c26c9d7bb37c25df971afa5f157", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_u16.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u16.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+foo (uint32_t add, uint16x8_t m1, uint16x8_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p_u16 (a, b, c, p);\n+  return vmladavaq_p_u16 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo1 (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+foo1 (uint32_t add, uint16x8_t m1, uint16x8_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p (a, b, c, p);\n+  return vmladavaq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.u16\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavat.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint16x8_t m1, uint16x8_t m2, mve_pred16_t p)\n+{\n+  return vmladavaq_p (1, m1, m2, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4a3d109ed905278041e340116f155d1fa87f6fd9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_u32.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u32.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+foo (uint32_t add, uint32x4_t m1, uint32x4_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p_u32 (a, b, c, p);\n+  return vmladavaq_p_u32 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo1 (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+foo1 (uint32_t add, uint32x4_t m1, uint32x4_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p (a, b, c, p);\n+  return vmladavaq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.u32\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavat.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint32x4_t m1, uint32x4_t m2, mve_pred16_t p)\n+{\n+  return vmladavaq_p (1, m1, m2, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a17440f4675a1e65909a779cb8ff2ec4059d070f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaq_p_u8.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaq_p_u8.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+foo (uint32_t add, uint8x16_t m1, uint8x16_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p_u8 (a, b, c, p);\n+  return vmladavaq_p_u8 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo1 (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+foo1 (uint32_t add, uint8x16_t m1, uint8x16_t m2, mve_pred16_t p)\n {\n-  return vmladavaq_p (a, b, c, p);\n+  return vmladavaq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavat.u8\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavat.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavat.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint8x16_t m1, uint8x16_t m2, mve_pred16_t p)\n+{\n+  return vmladavaq_p (1, m1, m2, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f201d5fa047e35a4d476427406370e95f1433f85", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s16.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavaxt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+foo (int32_t add, int16x8_t m1, int16x8_t m2, mve_pred16_t p)\n {\n-  return vmladavaxq_p_s16 (a, b, c, p);\n+  return vmladavaxq_p_s16 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavaxt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavaxt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+foo1 (int32_t add, int16x8_t m1, int16x8_t m2, mve_pred16_t p)\n {\n-  return vmladavaxq_p (a, b, c, p);\n+  return vmladavaxq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavaxt.s16\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavaxt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c90647a506412d23ce7f3c0b1141a76f9872da44", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s32.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavaxt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+foo (int32_t add, int32x4_t m1, int32x4_t m2, mve_pred16_t p)\n {\n-  return vmladavaxq_p_s32 (a, b, c, p);\n+  return vmladavaxq_p_s32 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavaxt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavaxt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+foo1 (int32_t add, int32x4_t m1, int32x4_t m2, mve_pred16_t p)\n {\n-  return vmladavaxq_p (a, b, c, p);\n+  return vmladavaxq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavaxt.s32\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavaxt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "57af7bc1c787bdf968868e99e064d3577354f161", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_p_s8.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavaxt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+foo (int32_t add, int8x16_t m1, int8x16_t m2, mve_pred16_t p)\n {\n-  return vmladavaxq_p_s8 (a, b, c, p);\n+  return vmladavaxq_p_s8 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavaxt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmladavaxt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+foo1 (int32_t add, int8x16_t m1, int8x16_t m2, mve_pred16_t p)\n {\n-  return vmladavaxq_p (a, b, c, p);\n+  return vmladavaxq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmladavaxt.s8\"  }  } */\n-/* { dg-final { scan-assembler \"vmladavaxt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "684580d1c36666a31a1b15ba0a242ab5b7e46c28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s16.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmladavax.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int16x8_t b, int16x8_t c)\n+foo (int32_t add, int16x8_t m1, int16x8_t m2)\n {\n-  return vmladavaxq_s16 (a, b, c);\n+  return vmladavaxq_s16 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmladavax.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmladavax.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int16x8_t b, int16x8_t c)\n+foo1 (int32_t add, int16x8_t m1, int16x8_t m2)\n {\n-  return vmladavaxq (a, b, c);\n+  return vmladavaxq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmladavax.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5d152647b558e0817c563dd7e82b544506935f66", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s32.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmladavax.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int32x4_t b, int32x4_t c)\n+foo (int32_t add, int32x4_t m1, int32x4_t m2)\n {\n-  return vmladavaxq_s32 (a, b, c);\n+  return vmladavaxq_s32 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmladavax.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmladavax.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int32x4_t b, int32x4_t c)\n+foo1 (int32_t add, int32x4_t m1, int32x4_t m2)\n {\n-  return vmladavaxq (a, b, c);\n+  return vmladavaxq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmladavax.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "71bcdc9b55eae785736f2edcdf865ee59c18a4a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69405ebb53323f5c32062b75ab7af304e7eb6656/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmladavaxq_s8.c?ref=69405ebb53323f5c32062b75ab7af304e7eb6656", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmladavax.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo (int32_t a, int8x16_t b, int8x16_t c)\n+foo (int32_t add, int8x16_t m1, int8x16_t m2)\n {\n-  return vmladavaxq_s8 (a, b, c);\n+  return vmladavaxq_s8 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmladavax.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmladavax.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n-foo1 (int32_t a, int8x16_t b, int8x16_t c)\n+foo1 (int32_t add, int8x16_t m1, int8x16_t m2)\n {\n-  return vmladavaxq (a, b, c);\n+  return vmladavaxq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmladavax.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}