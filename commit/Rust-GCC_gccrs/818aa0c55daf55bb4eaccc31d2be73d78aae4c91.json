{"sha": "818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4YWEwYzU1ZGFmNTViYjRlYWNjYzMxZDJiZTczZDc4YWFlNGM5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-11-02T19:31:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-11-02T19:31:59Z"}, "message": "basic-block.h (insert_insn_end_bb_new): Delete.\n\n\t* basic-block.h (insert_insn_end_bb_new): Delete.\n\t* cfgrtl.c (insert_insn_end_bb_new): Likewise.\n\nFrom-SVN: r166212", "tree": {"sha": "4720a2cb3b5261b3840875e626c7a380cb27a172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4720a2cb3b5261b3840875e626c7a380cb27a172"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/comments", "author": null, "committer": null, "parents": [{"sha": "53dc5044ed4fde8b489ba024923f49720db8129d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53dc5044ed4fde8b489ba024923f49720db8129d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53dc5044ed4fde8b489ba024923f49720db8129d"}], "stats": {"total": 96, "additions": 5, "deletions": 91}, "files": [{"sha": "5b8a3c43dc9c71695673b3fd41e6bd20a15b94f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "patch": "@@ -1,3 +1,8 @@\n+2010-11-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* basic-block.h (insert_insn_end_bb_new): Delete.\n+\t* cfgrtl.c (insert_insn_end_bb_new): Likewise.\n+\n 2010-11-02  Uros Bizjak  <ubizjak@gmail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "c90fc1198fe9d64c711e6368cf253d65c77ee1f6", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "patch": "@@ -881,9 +881,6 @@ extern basic_block get_bb_copy (basic_block);\n void set_loop_copy (struct loop *, struct loop *);\n struct loop *get_loop_copy (struct loop *);\n \n-\n-extern rtx insert_insn_end_bb_new (rtx, basic_block);\n-\n #include \"cfghooks.h\"\n \n /* Return true when one of the predecessor edges of BB is marked with EDGE_EH.  */"}, {"sha": "66f0b14f2c428faaaba2d87340ac69497a9bd971", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818aa0c55daf55bb4eaccc31d2be73d78aae4c91/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=818aa0c55daf55bb4eaccc31d2be73d78aae4c91", "patch": "@@ -3090,94 +3090,6 @@ init_rtl_bb_info (basic_block bb)\n   bb->il.rtl = ggc_alloc_cleared_rtl_bb_info ();\n }\n \n-\n-/* Add EXPR to the end of basic block BB.  */\n-\n-rtx\n-insert_insn_end_bb_new (rtx pat, basic_block bb)\n-{\n-  rtx insn = BB_END (bb);\n-  rtx new_insn;\n-  rtx pat_end = pat;\n-\n-  while (NEXT_INSN (pat_end) != NULL_RTX)\n-    pat_end = NEXT_INSN (pat_end);\n-\n-  /* If the last insn is a jump, insert EXPR in front [taking care to\n-     handle cc0, etc. properly].  Similarly we need to care trapping\n-     instructions in presence of non-call exceptions.  */\n-\n-  if (JUMP_P (insn)\n-      || (NONJUMP_INSN_P (insn)\n-          && (!single_succ_p (bb)\n-              || single_succ_edge (bb)->flags & EDGE_ABNORMAL)))\n-    {\n-#ifdef HAVE_cc0\n-      rtx note;\n-#endif\n-      /* If this is a jump table, then we can't insert stuff here.  Since\n-         we know the previous real insn must be the tablejump, we insert\n-         the new instruction just before the tablejump.  */\n-      if (GET_CODE (PATTERN (insn)) == ADDR_VEC\n-          || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC)\n-        insn = prev_real_insn (insn);\n-\n-#ifdef HAVE_cc0\n-      /* FIXME: 'twould be nice to call prev_cc0_setter here but it aborts\n-         if cc0 isn't set.  */\n-      note = find_reg_note (insn, REG_CC_SETTER, NULL_RTX);\n-      if (note)\n-        insn = XEXP (note, 0);\n-      else\n-        {\n-          rtx maybe_cc0_setter = prev_nonnote_insn (insn);\n-          if (maybe_cc0_setter\n-              && INSN_P (maybe_cc0_setter)\n-              && sets_cc0_p (PATTERN (maybe_cc0_setter)))\n-            insn = maybe_cc0_setter;\n-        }\n-#endif\n-      /* FIXME: What if something in cc0/jump uses value set in new\n-         insn?  */\n-      new_insn = emit_insn_before_noloc (pat, insn, bb);\n-    }\n-\n-  /* Likewise if the last insn is a call, as will happen in the presence\n-     of exception handling.  */\n-  else if (CALL_P (insn)\n-           && (!single_succ_p (bb)\n-               || single_succ_edge (bb)->flags & EDGE_ABNORMAL))\n-    {\n-      /* Keeping in mind targets with small register classes and parameters\n-         in registers, we search backward and place the instructions before\n-\t the first parameter is loaded.  Do this for everyone for consistency\n-\t and a presumption that we'll get better code elsewhere as well.  */\n-\n-      /* Since different machines initialize their parameter registers\n-         in different orders, assume nothing.  Collect the set of all\n-         parameter registers.  */\n-      insn = find_first_parameter_load (insn, BB_HEAD (bb));\n-\n-      /* If we found all the parameter loads, then we want to insert\n-         before the first parameter load.\n-\n-         If we did not find all the parameter loads, then we might have\n-         stopped on the head of the block, which could be a CODE_LABEL.\n-         If we inserted before the CODE_LABEL, then we would be putting\n-         the insn in the wrong basic block.  In that case, put the insn\n-         after the CODE_LABEL.  Also, respect NOTE_INSN_BASIC_BLOCK.  */\n-      while (LABEL_P (insn)\n-             || NOTE_INSN_BASIC_BLOCK_P (insn))\n-        insn = NEXT_INSN (insn);\n-\n-      new_insn = emit_insn_before_noloc (pat, insn, bb);\n-    }\n-  else\n-    new_insn = emit_insn_after_noloc (pat, insn, bb);\n-\n-  return new_insn;\n-}\n-\n /* Returns true if it is possible to remove edge E by redirecting\n    it to the destination of the other edge from E->src.  */\n "}]}