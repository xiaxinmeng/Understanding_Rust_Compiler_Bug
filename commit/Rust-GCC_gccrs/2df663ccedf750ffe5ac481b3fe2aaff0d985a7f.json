{"sha": "2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmNjYzY2NlZGY3NTBmZmU1YWM0ODFiM2ZlMmFhZmYwZDk4NWE3Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:36:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:36:55Z"}, "message": "cp-tree.h (abstract_class_use): New enum.\n\n\t* cp-tree.h (abstract_class_use): New enum.\n\t* typeck2.c (pending_abstract_type): Add use field.\n\t(abstract_virtuals_error_sfinae): Add overloads taking\n\tabstract_class_use instead of tree.\n\t* typeck.c (build_static_cast_1): Call it.\n\t* except.c (is_admissible_throw_operand_or_catch_parameter): Call it.\n\t* pt.c: Adjust calls.\n\t* decl.c (cp_finish_decl): Don't handle functions specially.\n\t(grokdeclarator): Always check return type.\n\t* init.c (build_new_1): Adjust call.\n\nFrom-SVN: r196735", "tree": {"sha": "effd0899444bec8cd82684550c9fc410b899aa0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/effd0899444bec8cd82684550c9fc410b899aa0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95ffad49d5499e3de6fcd0d261fa3870755995c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ffad49d5499e3de6fcd0d261fa3870755995c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ffad49d5499e3de6fcd0d261fa3870755995c2"}], "stats": {"total": 159, "additions": 120, "deletions": 39}, "files": [{"sha": "b57800e0da274a58e74eef5e1ce366cf2f67cb06", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -1,5 +1,16 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (abstract_class_use): New enum.\n+\t* typeck2.c (pending_abstract_type): Add use field.\n+\t(abstract_virtuals_error_sfinae): Add overloads taking\n+\tabstract_class_use instead of tree.\n+\t* typeck.c (build_static_cast_1): Call it.\n+\t* except.c (is_admissible_throw_operand_or_catch_parameter): Call it.\n+\t* pt.c: Adjust calls.\n+\t* decl.c (cp_finish_decl): Don't handle functions specially.\n+\t(grokdeclarator): Always check return type.\n+\t* init.c (build_new_1): Adjust call.\n+\n \tDR 337\n \tPR c++/17232\n \t* pt.c (tsubst) [ARRAY_TYPE]: Use abstract_virtuals_error_sfinae."}, {"sha": "53940a67086c59329aa14682d9027109ba85b9de", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -463,6 +463,19 @@ typedef enum impl_conv_void {\n   ICV_THIRD_IN_FOR     /* for increment expression */\n } impl_conv_void;\n \n+/* Possible invalid uses of an abstract class that might not have a\n+   specific associated declaration.  */\n+typedef enum abstract_class_use {\n+  ACU_UNKNOWN,\t\t\t/* unknown or decl provided */\n+  ACU_CAST,\t\t\t/* cast to abstract class */\n+  ACU_NEW,\t\t\t/* new-expression of abstract class */\n+  ACU_THROW,\t\t\t/* throw-expression of abstract class */\n+  ACU_CATCH,\t\t\t/* catch-parameter of abstract class */\n+  ACU_ARRAY,\t\t\t/* array of abstract class */\n+  ACU_RETURN,\t\t\t/* return type of abstract class */\n+  ACU_PARM\t\t\t/* parameter type of abstract class */\n+} abstract_class_use;\n+\n /* Macros for access to language-specific slots in an identifier.  */\n \n #define IDENTIFIER_NAMESPACE_BINDINGS(NODE)\t\\\n@@ -5983,7 +5996,9 @@ extern tree binfo_or_else\t\t\t(tree, tree);\n extern void cxx_readonly_error\t\t\t(tree, enum lvalue_use);\n extern void complete_type_check_abstract\t(tree);\n extern int abstract_virtuals_error\t\t(tree, tree);\n+extern int abstract_virtuals_error\t\t(abstract_class_use, tree);\n extern int abstract_virtuals_error_sfinae\t(tree, tree, tsubst_flags_t);\n+extern int abstract_virtuals_error_sfinae\t(abstract_class_use, tree, tsubst_flags_t);\n \n extern tree store_init_value\t\t\t(tree, tree, vec<tree, va_gc>**, int);\n extern void check_narrowing\t\t\t(tree, tree);"}, {"sha": "40152b194fbf3229a6c9f769915c57f496f8e2c8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -6434,11 +6434,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       /* Check for abstractness of the type. Notice that there is no\n \t need to strip array types here since the check for those types\n \t is already done within create_array_type_for_decl.  */\n-      if (TREE_CODE (type) == FUNCTION_TYPE\n-\t  || TREE_CODE (type) == METHOD_TYPE)\n-\tabstract_virtuals_error (decl, TREE_TYPE (type));\n-      else\n-\tabstract_virtuals_error (decl, type);\n+      abstract_virtuals_error (decl, type);\n \n       if (TREE_TYPE (decl) == error_mark_node)\n \t/* No initialization required.  */\n@@ -8656,6 +8652,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool template_type_arg = false;\n   bool template_parm_flag = false;\n   bool constexpr_p = decl_spec_seq_has_spec_p (declspecs, ds_constexpr);\n+  source_location saved_loc = input_location;\n   const char *errmsg;\n \n   signed_p = decl_spec_seq_has_spec_p (declspecs, ds_signed);\n@@ -9340,7 +9337,6 @@ grokdeclarator (const cp_declarator *declarator,\n   if (declspecs->std_attributes)\n     {\n       /* Apply the c++11 attributes to the type preceding them.  */\n-      source_location saved_loc = input_location;\n       input_location = declspecs->locations[ds_std_attribute];\n       decl_attributes (&type, declspecs->std_attributes, 0);\n       input_location = saved_loc;\n@@ -9428,11 +9424,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t\terror (\"%qs declared as function returning an array\", name);\n \t\treturn error_mark_node;\n \t      }\n-\t    /* When decl_context == NORMAL we emit a better error message\n-\t       later in abstract_virtuals_error.  */\n-\t    if (decl_context == TYPENAME && ABSTRACT_CLASS_TYPE_P (type))\n-\t      error (\"%qs declared as function returning an abstract \"\n-\t\t     \"class type\", name);\n+\n+\t    input_location = declspecs->locations[ds_type_spec];\n+\t    abstract_virtuals_error (ACU_RETURN, type);\n+\t    input_location = saved_loc;\n \n \t    /* Pick up type qualifiers which should be applied to `this'.  */\n \t    memfn_quals = declarator->u.function.qualifiers;"}, {"sha": "52ba1cdeae528eee0939f605190ff9e3d2b77d2e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -972,16 +972,8 @@ is_admissible_throw_operand_or_catch_parameter (tree t, bool is_throw)\n   /* 10.4/3 An abstract class shall not be used as a parameter type,\n \t    as a function return type or as type of an explicit\n \t    conversion.  */\n-  else if (ABSTRACT_CLASS_TYPE_P (type))\n-    {\n-      if (is_throw)\n-\terror (\"expression %qE of abstract class type %qT cannot \"\n-\t       \"be used in throw-expression\", expr, type);\n-      else\n-\terror (\"cannot declare catch parameter to be of abstract \"\n-\t       \"class type %qT\", type);\n-      return false;\n-    }\n+  else if (abstract_virtuals_error (is_throw ? ACU_THROW : ACU_CATCH, type))\n+    return false;\n   else if (!is_throw\n \t   && TREE_CODE (type) == REFERENCE_TYPE\n \t   && TYPE_REF_IS_RVALUE (type))"}, {"sha": "679c47d7dd979bc27201e4cb41360c9b12ef9705", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -2301,7 +2301,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       return error_mark_node;\n     }\n \n-  if (abstract_virtuals_error_sfinae (NULL_TREE, elt_type, complain))\n+  if (abstract_virtuals_error_sfinae (ACU_NEW, elt_type, complain))\n     return error_mark_node;\n \n   is_initialized = (type_build_ctor_call (elt_type) || *init != NULL);"}, {"sha": "edc2d0bfdc079a784a3075ce394526ac0ba3dfee", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -10851,7 +10851,7 @@ tsubst_arg_types (tree arg_types,\n         return error_mark_node;\n     }\n     /* DR 657. */\n-    if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n+    if (abstract_virtuals_error_sfinae (ACU_PARM, type, complain))\n       return error_mark_node;\n     \n     /* Do array-to-pointer, function-to-pointer conversion, and ignore\n@@ -10930,7 +10930,7 @@ tsubst_function_type (tree t,\n       return error_mark_node;\n     }\n   /* And DR 657. */\n-  if (abstract_virtuals_error_sfinae (NULL_TREE, return_type, complain))\n+  if (abstract_virtuals_error_sfinae (ACU_RETURN, return_type, complain))\n     return error_mark_node;\n \n   /* Substitute the argument types.  */\n@@ -11654,7 +11654,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    return error_mark_node;\n \t  }\n \n-\tif (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n+\tif (abstract_virtuals_error_sfinae (ACU_ARRAY, type, complain))\n \t  return error_mark_node;\n \n \tr = build_cplus_array_type (type, domain);"}, {"sha": "3ced85866635a6a58e2c08b3e4f5d467b1280699", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -6238,6 +6238,12 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n   if (TREE_CODE (type) == VOID_TYPE)\n     return convert_to_void (expr, ICV_CAST, complain);\n \n+  /* [class.abstract]\n+     An abstract class shall not be used ... as the type of an explicit\n+     conversion.  */\n+  if (abstract_virtuals_error_sfinae (ACU_CAST, type, complain))\n+    return error_mark_node;\n+\n   /* [expr.static.cast]\n \n      An expression e can be explicitly converted to a type T using a"}, {"sha": "3bac67cf1192f567fb1b3988b9984973553c7e29", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 70, "deletions": 14, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -141,6 +141,9 @@ struct GTY((chain_next (\"%h.next\"))) pending_abstract_type {\n   /* Type which will be checked for abstractness.  */\n   tree type;\n \n+  /* Kind of use in an unnamed declarator.  */\n+  abstract_class_use use;\n+\n   /* Position of the declaration. This is only needed for IDENTIFIER_NODEs,\n      because DECLs already carry locus information.  */\n   location_t locus;\n@@ -181,6 +184,7 @@ pat_compare (const void* val1, const void* val2)\n static GTY ((param_is (struct pending_abstract_type)))\n htab_t abstract_pending_vars = NULL;\n \n+static int abstract_virtuals_error_sfinae (tree, tree, abstract_class_use, tsubst_flags_t);\n \n /* This function is called after TYPE is completed, and will check if there\n    are pending declarations for which we still need to verify the abstractness\n@@ -231,7 +235,8 @@ complete_type_check_abstract (tree type)\n \t    location. Notice that this is only needed if the decl is an\n \t    IDENTIFIER_NODE.  */\n \t  input_location = pat->locus;\n-\t  abstract_virtuals_error (pat->decl, pat->type);\n+\t  abstract_virtuals_error_sfinae (pat->decl, pat->type, pat->use,\n+\t\t\t\t\t  tf_warning_or_error);\n \t  pat = pat->next;\n \t}\n     }\n@@ -244,11 +249,13 @@ complete_type_check_abstract (tree type)\n \n /* If TYPE has abstract virtual functions, issue an error about trying\n    to create an object of that type.  DECL is the object declared, or\n-   NULL_TREE if the declaration is unavailable.  Returns 1 if an error\n-   occurred; zero if all was well.  */\n+   NULL_TREE if the declaration is unavailable, in which case USE specifies\n+   the kind of invalid use.  Returns 1 if an error occurred; zero if\n+   all was well.  */\n \n-int\n-abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n+static int\n+abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n+\t\t\t\ttsubst_flags_t complain)\n {\n   vec<tree, va_gc> *pure;\n \n@@ -284,6 +291,7 @@ abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n       pat = ggc_alloc_pending_abstract_type ();\n       pat->type = type;\n       pat->decl = decl;\n+      pat->use = use;\n       pat->locus = ((decl && DECL_P (decl))\n \t\t    ? DECL_SOURCE_LOCATION (decl)\n \t\t    : input_location);\n@@ -312,8 +320,14 @@ abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n \terror (\"cannot declare variable %q+D to be of abstract \"\n \t       \"type %qT\", decl, type);\n       else if (TREE_CODE (decl) == PARM_DECL)\n-\terror (\"cannot declare parameter %q+D to be of abstract type %qT\",\n-\t       decl, type);\n+\t{\n+\t  if (DECL_NAME (decl))\n+\t    error (\"cannot declare parameter %q+D to be of abstract type %qT\",\n+\t\t   decl, type);\n+\t  else\n+\t    error (\"cannot declare parameter to be of abstract type %qT\",\n+\t\t   type);\n+\t}\n       else if (TREE_CODE (decl) == FIELD_DECL)\n \terror (\"cannot declare field %q+D to be of abstract type %qT\",\n \t       decl, type);\n@@ -328,8 +342,34 @@ abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n       else\n \terror (\"invalid abstract type for %q+D\", decl);\n     }\n-  else\n-    error (\"cannot allocate an object of abstract type %qT\", type);\n+  else switch (use)\n+    {\n+    case ACU_ARRAY:\n+      error (\"creating array of %qT, which is an abstract class type\", type);\n+      break;\n+    case ACU_CAST:\n+      error (\"invalid cast to abstract class type %qT\", type);\n+      break;\n+    case ACU_NEW:\n+      error (\"invalid new-expression of abstract class type %qT\", type);\n+      break;\n+    case ACU_RETURN:\n+      error (\"invalid abstract return type %qT\", type);\n+      break;\n+    case ACU_PARM:\n+      error (\"invalid abstract parameter type %qT\", type);\n+      break;\n+    case ACU_THROW:\n+      error (\"expression of abstract class type %qT cannot \"\n+\t     \"be used in throw-expression\", type);\n+      break;\n+    case ACU_CATCH:\n+      error (\"cannot declare catch parameter to be of abstract \"\n+\t     \"class type %qT\", type);\n+      break;\n+    default:\n+      error (\"cannot allocate an object of abstract type %qT\", type);\n+    }\n \n   /* Only go through this once.  */\n   if (pure->length ())\n@@ -351,14 +391,24 @@ abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n \t again.  */\n       pure->truncate (0);\n     }\n-  else\n-    inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n-\t    \"  since type %qT has pure virtual functions\",\n-\t    type);\n \n   return 1;\n }\n \n+int\n+abstract_virtuals_error_sfinae (tree decl, tree type, tsubst_flags_t complain)\n+{\n+  return abstract_virtuals_error_sfinae (decl, type, ACU_UNKNOWN, complain);\n+}\n+\n+int\n+abstract_virtuals_error_sfinae (abstract_class_use use, tree type,\n+\t\t\t\ttsubst_flags_t complain)\n+{\n+  return abstract_virtuals_error_sfinae (NULL_TREE, type, use, complain);\n+}\n+\n+\n /* Wrapper for the above function in the common case of wanting errors.  */\n \n int\n@@ -367,6 +417,12 @@ abstract_virtuals_error (tree decl, tree type)\n   return abstract_virtuals_error_sfinae (decl, type, tf_warning_or_error);\n }\n \n+int\n+abstract_virtuals_error (abstract_class_use use, tree type)\n+{\n+  return abstract_virtuals_error_sfinae (use, type, tf_warning_or_error);\n+}\n+\n /* Print an error message for invalid use of an incomplete type.\n    VALUE is the expression that was used (or 0 if that isn't known)\n    and TYPE is the type that was invalid.  DIAG_KIND indicates the\n@@ -1733,7 +1789,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \n   if (!complete_type_or_maybe_complain (type, NULL_TREE, complain))\n     return error_mark_node;\n-  if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n+  if (abstract_virtuals_error_sfinae (ACU_CAST, type, complain))\n     return error_mark_node;\n \n   /* [expr.type.conv]"}, {"sha": "d13dd9e5160e81ee3b33d5b0b4ddfbb1f9dad982", "filename": "gcc/testsuite/g++.dg/other/abstract5.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df663ccedf750ffe5ac481b3fe2aaff0d985a7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fabstract5.C?ref=2df663ccedf750ffe5ac481b3fe2aaff0d985a7f", "patch": "@@ -0,0 +1,6 @@\n+struct A\n+{\n+  virtual void f() = 0;\n+};\n+\n+typedef A (*fp)();\t\t// { dg-error \"abstract\" }"}]}