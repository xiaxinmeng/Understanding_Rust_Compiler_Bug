{"sha": "db51f624df2a965f70de70239c35e882b4897582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1MWY2MjRkZjJhOTY1ZjcwZGU3MDIzOWMzNWU4ODJiNDg5NzU4Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-29T10:29:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-29T10:29:44Z"}, "message": "profile-count.c (profile_count::to_cgraph_frequency, [...]): Check for compaibility of counts.\n\n\n\t* profile-count.c (profile_count::to_cgraph_frequency,\n\tprofile_count::to_sreal_scale): Check for compaibility of counts.\n\t* profile-count.h (compatible_p): Make public; add checking for\n\tglobal0 versus global types.\n\t* cgraph.c (cgraph_node::verify_node): Verify count compatibility.\n\nFrom-SVN: r278835", "tree": {"sha": "25f8ed56b4c02634f18203902cde0e06f274974e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f8ed56b4c02634f18203902cde0e06f274974e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db51f624df2a965f70de70239c35e882b4897582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db51f624df2a965f70de70239c35e882b4897582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db51f624df2a965f70de70239c35e882b4897582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db51f624df2a965f70de70239c35e882b4897582/comments", "author": null, "committer": null, "parents": [{"sha": "60178a322b4e8d0dc6cf50f57f8fa1fdf624a1f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60178a322b4e8d0dc6cf50f57f8fa1fdf624a1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60178a322b4e8d0dc6cf50f57f8fa1fdf624a1f0"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "9e0340c552af0a87868c83b7740fd69938ae2ee5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db51f624df2a965f70de70239c35e882b4897582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db51f624df2a965f70de70239c35e882b4897582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db51f624df2a965f70de70239c35e882b4897582", "patch": "@@ -1,3 +1,11 @@\n+2019-11-29  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* profile-count.c (profile_count::to_cgraph_frequency,\n+\tprofile_count::to_sreal_scale): Check for compaibility of counts.\n+\t* profile-count.h (compatible_p): Make public; add checking for\n+\tglobal0 versus global types.\n+\t* cgraph.c (cgraph_node::verify_node): Verify count compatibility.\n+\n 2019-11-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92715"}, {"sha": "180d21e47969800c0382ab9dfed0c760113d4df7", "filename": "gcc/cgraph.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db51f624df2a965f70de70239c35e882b4897582/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db51f624df2a965f70de70239c35e882b4897582/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=db51f624df2a965f70de70239c35e882b4897582", "patch": "@@ -3061,6 +3061,13 @@ cgraph_node::verify_node (void)\n       error (\"inline clone in same comdat group list\");\n       error_found = true;\n     }\n+  if (inlined_to && !count.compatible_p (inlined_to->count))\n+    {\n+      error (\"inline clone count is not compatible\");\n+      count.debug ();\n+      inlined_to->count.debug ();\n+      error_found = true;\n+    }\n   if (!definition && !in_other_partition && local)\n     {\n       error (\"local symbols must be defined\");\n@@ -3089,6 +3096,13 @@ cgraph_node::verify_node (void)\n \t\t identifier_to_locale (e->caller->name ()));\n \t  error_found = true;\n \t}\n+      if (!e->count.compatible_p (count))\n+\t{\n+\t  error (\"edge count is not compatible with function count\");\n+\t  e->count.debug ();\n+\t  count.debug ();\n+\t  error_found = true;\n+\t}\n       if (!e->indirect_unknown_callee\n \t  || !e->indirect_info)\n \t{\n@@ -3137,6 +3151,13 @@ cgraph_node::verify_node (void)\n     {\n       if (e->verify_count ())\n \terror_found = true;\n+      if (!e->count.compatible_p (count))\n+\t{\n+\t  error (\"edge count is not compatible with function count\");\n+\t  e->count.debug ();\n+\t  count.debug ();\n+\t  error_found = true;\n+\t}\n       if (gimple_has_body_p (e->caller->decl)\n \t  && !e->caller->inlined_to\n \t  && !e->speculative"}, {"sha": "81a969175d2b8bccf552537f4659baf019054e24", "filename": "gcc/profile-count.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db51f624df2a965f70de70239c35e882b4897582/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db51f624df2a965f70de70239c35e882b4897582/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=db51f624df2a965f70de70239c35e882b4897582", "patch": "@@ -291,6 +291,7 @@ profile_count::to_cgraph_frequency (profile_count entry_bb_count) const\n     return 0;\n   gcc_checking_assert (entry_bb_count.initialized_p ());\n   uint64_t scale;\n+  gcc_checking_assert (compatible_p (entry_bb_count));\n   if (!safe_scale_64bit (!entry_bb_count.m_val ? m_val + 1 : m_val,\n \t\t\t CGRAPH_FREQ_BASE, MAX (1, entry_bb_count.m_val), &scale))\n     return CGRAPH_FREQ_MAX;\n@@ -328,6 +329,7 @@ profile_count::to_sreal_scale (profile_count in, bool *known) const\n     return 0;\n   if (m_val == in.m_val)\n     return 1;\n+  gcc_checking_assert (compatible_p (in));\n \n   if (!in.m_val)\n     {"}, {"sha": "5a5c046005b184f0d0d6db709c7bc1fc51d0c80d", "filename": "gcc/profile-count.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db51f624df2a965f70de70239c35e882b4897582/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db51f624df2a965f70de70239c35e882b4897582/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=db51f624df2a965f70de70239c35e882b4897582", "patch": "@@ -700,6 +700,7 @@ struct GTY(()) profile_count\n   uint64_t UINT64_BIT_FIELD_ALIGN m_val : n_bits;\n #undef UINT64_BIT_FIELD_ALIGN\n   enum profile_quality m_quality : 3;\n+public:\n \n   /* Return true if both values can meaningfully appear in single function\n      body.  We have either all counters in function local or global, otherwise\n@@ -711,9 +712,18 @@ struct GTY(()) profile_count\n       if (*this == zero ()\n \t  || other == zero ())\n \treturn true;\n+      /* Do not allow nonzero global profile together with local guesses\n+\t that are globally0.  */\n+      if (ipa ().nonzero_p ()\n+\t  && !(other.ipa () == other))\n+\treturn false;\n+      if (other.ipa ().nonzero_p ()\n+\t  && !(ipa () == *this))\n+\treturn false;\n+\t\n       return ipa_p () == other.ipa_p ();\n     }\n-public:\n+\n   /* Used for counters which are expected to be never executed.  */\n   static profile_count zero ()\n     {"}]}