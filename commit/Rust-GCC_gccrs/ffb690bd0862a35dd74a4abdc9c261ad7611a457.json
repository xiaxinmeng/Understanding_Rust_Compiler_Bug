{"sha": "ffb690bd0862a35dd74a4abdc9c261ad7611a457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiNjkwYmQwODYyYTM1ZGQ3NGE0YWJkYzljMjYxYWQ3NjExYTQ1Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-08T06:04:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-08T06:04:28Z"}, "message": "[multiple changes]\n\nTue Oct  7 23:00:12 1997  Mark Mitchell  <mmitchell@usa.net>\n\n\t* decl.c (make_typename_type): Do not try to call lookup_field for\n\tnon-aggregate types.\n\nTue Oct  7 22:52:10 1997  Jason Merrill  <jason@yorick.cygnus.com>\n\n\t* typeck.c (build_reinterpret_cast): Tweak.\n\nTue Oct  7 22:45:31 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n\n\t* typeck.c (build_reinterpret_cast): converting a void pointer\n\tto function pointer with a reinterpret_cast produces a warning\n\tif -pedantic is issued\n\nTue Oct  7 22:43:43 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n\n\t* typeck.c (c_expand_return): Don't warn about returning a\n\treference-type variable as a reference.\n\nFrom-SVN: r15876", "tree": {"sha": "56e1a0e652c0365adc29984d4f8015790e87d229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e1a0e652c0365adc29984d4f8015790e87d229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb690bd0862a35dd74a4abdc9c261ad7611a457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb690bd0862a35dd74a4abdc9c261ad7611a457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb690bd0862a35dd74a4abdc9c261ad7611a457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb690bd0862a35dd74a4abdc9c261ad7611a457/comments", "author": null, "committer": null, "parents": [{"sha": "51cbea761be56017136003c9d81b0acf4aeba6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51cbea761be56017136003c9d81b0acf4aeba6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51cbea761be56017136003c9d81b0acf4aeba6aa"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "b3d17955340fd6088e8b5ef2c6e3cc9fd23ad581", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb690bd0862a35dd74a4abdc9c261ad7611a457/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb690bd0862a35dd74a4abdc9c261ad7611a457/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ffb690bd0862a35dd74a4abdc9c261ad7611a457", "patch": "@@ -1,3 +1,23 @@\n+Tue Oct  7 23:00:12 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* decl.c (make_typename_type): Do not try to call lookup_field for\n+\tnon-aggregate types.\n+\n+Tue Oct  7 22:52:10 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_reinterpret_cast): Tweak.\n+\n+Tue Oct  7 22:45:31 1997  Alexandre Oliva  <oliva@dcc.unicamp.br>\n+\n+\t* typeck.c (build_reinterpret_cast): converting a void pointer\n+\tto function pointer with a reinterpret_cast produces a warning\n+\tif -pedantic is issued\n+\n+Tue Oct  7 22:43:43 1997  Bruno Haible  <bruno@linuix.mathematik.uni-karlsruhe.de>\n+\n+\t* typeck.c (c_expand_return): Don't warn about returning a\n+\treference-type variable as a reference.\n+\n Tue Oct  7 21:11:22 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* method.c (build_static_name): Fix typo."}, {"sha": "9c896706875293eebbc45df8e8592706e75966dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb690bd0862a35dd74a4abdc9c261ad7611a457/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb690bd0862a35dd74a4abdc9c261ad7611a457/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ffb690bd0862a35dd74a4abdc9c261ad7611a457", "patch": "@@ -4349,7 +4349,11 @@ make_typename_type (context, name)\n   if (! uses_template_parms (context)\n       || context == current_class_type)\n     {\n-      t = lookup_field (context, name, 0, 1);\n+      if (IS_AGGR_TYPE (context))\n+\tt = lookup_field (context, name, 0, 1);\n+      else\n+\tt = NULL_TREE;\n+\n       if (t == NULL_TREE)\n \t{\n \t  cp_error (\"no type named `%#T' in `%#T'\", name, context);"}, {"sha": "96d1c26e3e868567ef657c74d040e0a0e5402a91", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb690bd0862a35dd74a4abdc9c261ad7611a457/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb690bd0862a35dd74a4abdc9c261ad7611a457/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ffb690bd0862a35dd74a4abdc9c261ad7611a457", "patch": "@@ -5380,6 +5380,14 @@ build_reinterpret_cast (type, expr)\n \texpr = decl_constant_value (expr);\n       return fold (build1 (NOP_EXPR, type, expr));\n     }\n+  else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))\n+\t   || (TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype)))\n+    {\n+      pedwarn (\"ANSI C++ forbids casting between pointers to functions and objects\");\n+      if (TREE_READONLY_DECL_P (expr))\n+\texpr = decl_constant_value (expr);\n+      return fold (build1 (NOP_EXPR, type, expr));\n+    }\n   else\n     {\n       cp_error (\"reinterpret_cast from `%T' to `%T'\", intype, type);\n@@ -7298,7 +7306,8 @@ c_expand_return (retval)\n \t    {\n \t      if (TEMP_NAME_P (DECL_NAME (whats_returned)))\n \t\twarning (\"reference to non-lvalue returned\");\n-\t      else if (! TREE_STATIC (whats_returned)\n+\t      else if (TREE_CODE (TREE_TYPE (whats_returned)) != REFERENCE_TYPE\n+\t\t       && ! TREE_STATIC (whats_returned)\n \t\t       && IDENTIFIER_LOCAL_VALUE (DECL_NAME (whats_returned))\n \t\t       && !TREE_PUBLIC (whats_returned))\n \t\tcp_warning_at (\"reference to local variable `%D' returned\", whats_returned);"}]}