{"sha": "204a7ecb02199cdef17e445821c1effbfaf21bae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0YTdlY2IwMjE5OWNkZWYxN2U0NDU4MjFjMWVmZmJmYWYyMWJhZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-13T08:35:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-13T08:35:53Z"}, "message": "re PR tree-optimization/84339 (Wrong-code with optimizing strlen)\n\n\tPR tree-optimization/84339\n\t* gimple-fold.c (get_range_strlen): Set *FLEXP to true when handling\n\tARRAY_REF where first operand is array_at_struct_end_p COMPONENT_REF.\n\tFormatting fixes.\n\n\t* gcc.c-torture/execute/pr84339.c: New test.\n\nFrom-SVN: r257618", "tree": {"sha": "5acc0ef8db33596f096d2b3140f6820babe3bc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5acc0ef8db33596f096d2b3140f6820babe3bc45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/204a7ecb02199cdef17e445821c1effbfaf21bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204a7ecb02199cdef17e445821c1effbfaf21bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204a7ecb02199cdef17e445821c1effbfaf21bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204a7ecb02199cdef17e445821c1effbfaf21bae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "848bb6fc0e502345536b25e1a110eb7f01eccbc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848bb6fc0e502345536b25e1a110eb7f01eccbc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848bb6fc0e502345536b25e1a110eb7f01eccbc1"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "325eea600385e1f529f60a47a8ccd313b07a1ec9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=204a7ecb02199cdef17e445821c1effbfaf21bae", "patch": "@@ -1,5 +1,10 @@\n 2018-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/84339\n+\t* gimple-fold.c (get_range_strlen): Set *FLEXP to true when handling\n+\tARRAY_REF where first operand is array_at_struct_end_p COMPONENT_REF.\n+\tFormatting fixes.\n+\n \tPR middle-end/84309\n \t* match.pd (pow(C,x) -> exp(log(C)*x)): Optimize instead into\n \texp2(log2(C)*x) if C is a power of 2 and c99 runtime is available."}, {"sha": "e556f050e43cbda185069d436c1127acc48e1b95", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=204a7ecb02199cdef17e445821c1effbfaf21bae", "patch": "@@ -1380,9 +1380,15 @@ get_range_strlen (tree arg, tree length[2], bitmap *visited, int type,\n \t      /* Set the minimum size to zero since the string in\n \t\t the array could have zero length.  */\n \t      *minlen = ssize_int (0);\n+\n+\t      if (TREE_CODE (TREE_OPERAND (arg, 0)) == COMPONENT_REF\n+\t\t  && type == TREE_TYPE (TREE_OPERAND (arg, 0))\n+\t\t  && array_at_struct_end_p (TREE_OPERAND (arg, 0)))\n+\t\t*flexp = true;\n \t    }\n \t  else if (TREE_CODE (arg) == COMPONENT_REF\n-\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (arg, 1))) == ARRAY_TYPE)\n+\t\t   && (TREE_CODE (TREE_TYPE (TREE_OPERAND (arg, 1)))\n+\t\t       == ARRAY_TYPE))\n \t    {\n \t      /* Use the type of the member array to determine the upper\n \t\t bound on the length of the array.  This may be overly\n@@ -1428,7 +1434,7 @@ get_range_strlen (tree arg, tree length[2], bitmap *visited, int type,\n \t\t      || integer_zerop (val))\n \t\t    return false;\n \t\t  val = wide_int_to_tree (TREE_TYPE (val),\n-\t\t\t\t\t  wi::sub(wi::to_wide (val), 1));\n+\t\t\t\t\t  wi::sub (wi::to_wide (val), 1));\n \t\t  /* Set the minimum size to zero since the string in\n \t\t     the array could have zero length.  */\n \t\t  *minlen = ssize_int (0);"}, {"sha": "cbe0b84cb476918f94f6142d62096b4ea125aed0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=204a7ecb02199cdef17e445821c1effbfaf21bae", "patch": "@@ -1,5 +1,8 @@\n 2018-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/84339\n+\t* gcc.c-torture/execute/pr84339.c: New test.\n+\n \tPR middle-end/84309\n \t* gcc.dg/pr84309.c: New test.\n \t* gcc.target/i386/pr84309.c: New test."}, {"sha": "06fa3a0d3d3411053c21f49dfb3c0bf3541ad569", "filename": "gcc/testsuite/gcc.c-torture/execute/pr84339.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84339.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204a7ecb02199cdef17e445821c1effbfaf21bae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84339.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84339.c?ref=204a7ecb02199cdef17e445821c1effbfaf21bae", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/84339 */\n+\n+struct S { int a; char b[1]; };\n+\n+__attribute__((noipa)) int\n+foo (struct S *p)\n+{\n+  return __builtin_strlen (&p->b[0]);\n+}\n+\n+__attribute__((noipa)) int\n+bar (struct S *p)\n+{\n+  return __builtin_strlen (p->b);\n+}\n+\n+int\n+main ()\n+{\n+  struct S *p = __builtin_malloc (sizeof (struct S) + 16);\n+  if (p)\n+    {\n+      p->a = 1;\n+      __builtin_strcpy (p->b, \"abcdefg\");\n+      if (foo (p) != 7 || bar (p) != 7)\n+\t__builtin_abort ();\n+      __builtin_free (p);\n+    }\n+  return 0;\n+}"}]}