{"sha": "a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxZDc4YzZhMGIyNWRiYzkwNzZlMzU3OTI1YTliMDdhNWQ5NmY3Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-11T11:53:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-11T11:53:11Z"}, "message": "* gcc-interface/trans.c (Case_Statement_to_gnu): Deal with characters.\n\nFrom-SVN: r237326", "tree": {"sha": "1562578e5731260633e914c9171050cb45fc4203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1562578e5731260633e914c9171050cb45fc4203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/comments", "author": null, "committer": null, "parents": [{"sha": "773392af39c9e5fea4b20ef865ec1326ce885efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/773392af39c9e5fea4b20ef865ec1326ce885efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/773392af39c9e5fea4b20ef865ec1326ce885efd"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "f37a42075a8aa999dc55f30543c20421ba70b145", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "patch": "@@ -1,3 +1,7 @@\n+2016-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Case_Statement_to_gnu): Deal with characters.\n+\n 2016-06-11  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not clobber"}, {"sha": "dd40dbeb2076f6faa03b4ad2b9201c7ebbd2d031", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "patch": "@@ -2472,13 +2472,15 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n static tree\n Case_Statement_to_gnu (Node_Id gnat_node)\n {\n-  tree gnu_result, gnu_expr, gnu_label;\n+  tree gnu_result, gnu_expr, gnu_type, gnu_label;\n   Node_Id gnat_when;\n   location_t end_locus;\n   bool may_fallthru = false;\n \n   gnu_expr = gnat_to_gnu (Expression (gnat_node));\n   gnu_expr = convert (get_base_type (TREE_TYPE (gnu_expr)), gnu_expr);\n+  gnu_expr = maybe_character_value (gnu_expr);\n+  gnu_type = TREE_TYPE (gnu_expr);\n \n   /* We build a SWITCH_EXPR that contains the code with interspersed\n      CASE_LABEL_EXPRs for each label.  */\n@@ -2548,6 +2550,11 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t  gcc_assert (!gnu_low  || TREE_CODE (gnu_low)  == INTEGER_CST);\n \t  gcc_assert (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST);\n \n+\t  if (gnu_low && TREE_TYPE (gnu_low) != gnu_type)\n+\t    gnu_low = convert (gnu_type, gnu_low);\n+\t  if (gnu_high && TREE_TYPE (gnu_high) != gnu_type)\n+\t    gnu_high = convert (gnu_type, gnu_high);\n+\n \t  add_stmt_with_node (build_case_label (gnu_low, gnu_high, label),\n \t\t\t      gnat_choice);\n \t  choices_added_p = true;\n@@ -2579,8 +2586,8 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n   /* Now emit a definition of the label the cases branch to, if any.  */\n   if (may_fallthru)\n     add_stmt (build1 (LABEL_EXPR, void_type_node, gnu_label));\n-  gnu_result = build3 (SWITCH_EXPR, TREE_TYPE (gnu_expr), gnu_expr,\n-\t\t       end_stmt_group (), NULL_TREE);\n+  gnu_result\n+    = build3 (SWITCH_EXPR, gnu_type, gnu_expr, end_stmt_group (), NULL_TREE);\n \n   return gnu_result;\n }"}, {"sha": "62d3450c76716032511f106374842d0d20a20b77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "patch": "@@ -1,3 +1,7 @@\n+2016-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/case_character.adb: New test.\n+\n 2016-06-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR middle-end/71310"}, {"sha": "59c9b66987d5ce099f1341064045870daf1b2d7c", "filename": "gcc/testsuite/gnat.dg/case_character.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_character.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31d78c6a0b25dbc9076e357925a9b07a5d96f73/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_character.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcase_character.adb?ref=a31d78c6a0b25dbc9076e357925a9b07a5d96f73", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do run }\n+\n+procedure Case_Character is\n+\n+  function Test (C : Character) return Integer is\n+  begin\n+    case C is\n+      when ASCII.HT | ' ' .. Character'Last => return 1;\n+      when others => return 0;\n+    end case;\n+  end;\n+\n+begin\n+\n+  if Test ('A') /= 1 then\n+    raise Program_Error;\n+  end if;\n+\n+end;"}]}