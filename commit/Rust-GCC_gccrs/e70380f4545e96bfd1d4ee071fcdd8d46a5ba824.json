{"sha": "e70380f4545e96bfd1d4ee071fcdd8d46a5ba824", "node_id": "C_kwDOANBUbNoAKGU3MDM4MGY0NTQ1ZTk2YmZkMWQ0ZWUwNzFmY2RkOGQ0NmE1YmE4MjQ", "commit": {"author": {"name": "Arsen Arsenovi\u0107", "email": "arsen@aarsen.me", "date": "2022-12-22T11:03:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-23T00:44:07Z"}, "message": "contrib: Add dg-out-generator.pl\n\nThis script is a helper used to generate dg-output lines from an existing\nprogram output conveniently.  It takes care of escaping Tcl and ARE stuff.\n\ncontrib/ChangeLog:\n\n\t* dg-out-generator.pl: New file.", "tree": {"sha": "9a26ac66bed7e9d2b0a6867c6544360e48a782fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a26ac66bed7e9d2b0a6867c6544360e48a782fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e70380f4545e96bfd1d4ee071fcdd8d46a5ba824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70380f4545e96bfd1d4ee071fcdd8d46a5ba824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70380f4545e96bfd1d4ee071fcdd8d46a5ba824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70380f4545e96bfd1d4ee071fcdd8d46a5ba824/comments", "author": {"login": "ArsenArsen", "id": 7805050, "node_id": "MDQ6VXNlcjc4MDUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7805050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArsenArsen", "html_url": "https://github.com/ArsenArsen", "followers_url": "https://api.github.com/users/ArsenArsen/followers", "following_url": "https://api.github.com/users/ArsenArsen/following{/other_user}", "gists_url": "https://api.github.com/users/ArsenArsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArsenArsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArsenArsen/subscriptions", "organizations_url": "https://api.github.com/users/ArsenArsen/orgs", "repos_url": "https://api.github.com/users/ArsenArsen/repos", "events_url": "https://api.github.com/users/ArsenArsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ArsenArsen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40b8ac12dfce49a956bcd61f3d53f779dec2c630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b8ac12dfce49a956bcd61f3d53f779dec2c630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b8ac12dfce49a956bcd61f3d53f779dec2c630"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "cd5e99d0a0c4cc2c7f31f8b48135db579cfcec77", "filename": "contrib/dg-out-generator.pl", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70380f4545e96bfd1d4ee071fcdd8d46a5ba824/contrib%2Fdg-out-generator.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70380f4545e96bfd1d4ee071fcdd8d46a5ba824/contrib%2Fdg-out-generator.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fdg-out-generator.pl?ref=e70380f4545e96bfd1d4ee071fcdd8d46a5ba824", "patch": "@@ -0,0 +1,79 @@\n+#!/usr/bin/env perl\n+#\n+# Copyright (C) 2022 Free Software Foundation, Inc.\n+# Contributed by Arsen Arsenovi\u0107.\n+#\n+# This script is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+\n+# This script reads program output on STDIN, and out of it produces a block of\n+# dg-output lines that can be yanked at the end of a file.  It will escape\n+# special ARE and Tcl constructs automatically.\n+#\n+# Each argument passed on the standard input is treated as a string to be\n+# replaced by ``.*'' in the final result.  This is intended to mask out build\n+# paths, filenames, etc.\n+#\n+# Usage example:\n+\n+# $ g++-13 -fcontracts -o test \\\n+#  'g++.dg/contracts/contracts-access1.C' && \\\n+#   ./test |& dg-out-generator.pl 'g++.dg/contracts/contracts-access1.C'\n+# // { dg-output {contract violation in function Base::b at .*:11: pub > 0(\\n|\\r\\n|\\r)} }\n+# // { dg-output {\\[level:default, role:default, continuation mode:never\\](\\n|\\r\\n|\\r)} }\n+# // { dg-output {terminate called without an active exception(\\n|\\r\\n|\\r)} }\n+\n+# You can now freely dump the above into your testcase.\n+\n+use strict;\n+use warnings;\n+use POSIX 'floor';\n+\n+my $escapees = '(' . join ('|', map { quotemeta } @ARGV) . ')';\n+\n+sub gboundary($)\n+{\n+  my $str = shift;\n+  my $sz = 10.0;\n+  for (;;)\n+    {\n+      my $bnd = join '', (map chr 64 + rand 27, 1 .. floor $sz);\n+      return $bnd unless index ($str, $bnd) >= 0;\n+      $sz += 0.1;\n+    }\n+}\n+\n+while (<STDIN>)\n+  {\n+    # Escape our escapees.\n+    my $boundary;\n+    if (@ARGV) {\n+      # Checking this is necessary to avoid a spurious .* between all\n+      # characters if no arguments are passed.\n+      $boundary = gboundary $_;\n+      s/$escapees/$boundary/g;\n+    }\n+\n+    # Quote stuff special in Tcl ARE.  This step also effectively nulls any\n+    # concern about escaping.  As long as all curly braces are escaped, the\n+    # string will, when passing through the braces rule of Tcl, be identical to\n+    # the input.\n+    s/([[\\]*+?{}()\\\\])/\\\\$1/g;\n+\n+    # Newlines should be more tolerant.\n+    s/\\n$/(\\\\n|\\\\r\\\\n|\\\\r)/;\n+\n+    # Then split out the boundary, replacing it with .*.\n+    s/$boundary/.*/g if defined $boundary;\n+\n+    # Then, let's print it in a dg-output block.  If you'd prefer /* keep in\n+    # mind that if your string contains */ it could terminate the comment\n+    # early.  Maybe add an extra s!\\*/!*()/!g or something.\n+    print \"// { dg-output {$_} }\\n\";\n+  }\n+\n+# File Local Vars:\n+# indent-tabs-mode: nil\n+# End:"}]}