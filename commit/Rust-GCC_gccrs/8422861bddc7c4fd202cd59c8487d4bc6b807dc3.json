{"sha": "8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "node_id": "C_kwDOANBUbNoAKDg0MjI4NjFiZGRjN2M0ZmQyMDJjZDU5Yzg0ODdkNGJjNmI4MDdkYzM", "commit": {"author": {"name": "Guillermo E. Martinez", "email": "guillermo.e.martinez@oracle.com", "date": "2022-10-31T16:32:50Z"}, "committer": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2022-10-31T16:34:22Z"}, "message": "btf: Add support to BTF_KIND_ENUM64 type\n\nBTF supports 64-bits enumerators with following encoding:\n\n  struct btf_type:\n    name_off: 0 or offset to a valid C identifier\n    info.kind_flag: 0 for unsigned, 1 for signed\n    info.kind: BTF_KIND_ENUM64\n    info.vlen: number of enum values\n    size: 1/2/4/8\n\nThe btf_type is followed by info.vlen number of:\n\n    struct btf_enum64\n    {\n      uint32_t name_off;   /* Offset in string section of enumerator name.  */\n      uint32_t val_lo32;   /* lower 32-bit value for a 64-bit value Enumerator */\n      uint32_t val_hi32;   /* high 32-bit value for a 64-bit value Enumerator */\n    };\n\nSo, a new btf_enum64 structure was added to represent BTF_KIND_ENUM64\nand a new field dtd_enum_unsigned in ctf_dtdef structure to distinguish\nwhen CTF enum is a signed or unsigned type, later that information is\nused to encode the BTF enum type.\n\ngcc/ChangeLog:\n\n\t* btfout.cc (btf_calc_num_vbytes): Compute enumeration size depending of\n\tenumerator type btf_enum{,64}.\n\t(btf_asm_type): Update btf_kflag according to enumeration type sign\n\tusing dtd_enum_unsigned field for both:  BTF_KIND_ENUM{,64}.\n\t(btf_asm_enum_const): New argument to represent the size of\n\tthe BTF enum type, writing the enumerator constant value for\n\t32 bits, if it's 64 bits then explicitly writes lower 32-bits\n\tvalue and higher 32-bits value.\n\t(output_asm_btf_enum_list): Add enumeration size argument.\n\t* ctfc.cc (ctf_add_enum): New argument to represent CTF enum\n\tbasic information.\n\t(ctf_add_generic): Use of ei_{name. size, unsigned} to build the\n\tdtd structure containing enumeration information.\n\t(ctf_add_enumerator): Update comment mention support for BTF\n\tenumeration in 64-bits.\n\t* dwarf2ctf.cc (gen_ctf_enumeration_type): Extract signedness\n\tfor enumeration type and use it in ctf_add_enum.\n\t* ctfc.h (ctf_dmdef): Update dmd_value to HOST_WIDE_INT to allow\n\tuse 32/64 bits enumerators.\n\tinformation.\n\t(ctf_dtdef): New field to describe enum signedness.\n\ninclude/\n\t* btf.h (btf_enum64): Add new definition and new symbolic\n\tconstant to BTF_KIND_ENUM64 and BTF_KF_ENUM_{UN,}SIGNED.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/debug/btf/btf-enum-1.c: Update testcase, with correct\n\tinfo.kflags encoding.\n\t* gcc.dg/debug/btf/btf-enum64-1.c: New testcase.", "tree": {"sha": "77b0ba2573ec7b9086227a747d7457d3b2047fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b0ba2573ec7b9086227a747d7457d3b2047fce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/comments", "author": {"login": "gemaq", "id": 104849283, "node_id": "U_kgDOBj_fgw", "avatar_url": "https://avatars.githubusercontent.com/u/104849283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gemaq", "html_url": "https://github.com/gemaq", "followers_url": "https://api.github.com/users/gemaq/followers", "following_url": "https://api.github.com/users/gemaq/following{/other_user}", "gists_url": "https://api.github.com/users/gemaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/gemaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gemaq/subscriptions", "organizations_url": "https://api.github.com/users/gemaq/orgs", "repos_url": "https://api.github.com/users/gemaq/repos", "events_url": "https://api.github.com/users/gemaq/events{/privacy}", "received_events_url": "https://api.github.com/users/gemaq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf56503d5e2bbafb06a507cb37d30805a1013a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf56503d5e2bbafb06a507cb37d30805a1013a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf56503d5e2bbafb06a507cb37d30805a1013a0"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "aef9fd70a283c2a2804c8e2c1ab5489600e562d1", "filename": "gcc/btfout.cc", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fbtfout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fbtfout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbtfout.cc?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -223,7 +223,9 @@ btf_calc_num_vbytes (ctf_dtdef_ref dtd)\n       break;\n \n     case BTF_KIND_ENUM:\n-      vlen_bytes += vlen * sizeof (struct btf_enum);\n+      vlen_bytes += (dtd->dtd_data.ctti_size == 0x8)\n+\t\t\t? vlen * sizeof (struct btf_enum64)\n+\t\t\t: vlen * sizeof (struct btf_enum);\n       break;\n \n     case BTF_KIND_FUNC_PROTO:\n@@ -622,6 +624,15 @@ btf_asm_type (ctf_container_ref ctfc, ctf_dtdef_ref dtd)\n       btf_size_type = 0;\n     }\n \n+  if (btf_kind == BTF_KIND_ENUM)\n+    {\n+      btf_kflag = dtd->dtd_enum_unsigned\n+\t\t    ? BTF_KF_ENUM_UNSIGNED\n+\t\t    : BTF_KF_ENUM_SIGNED;\n+      if (dtd->dtd_data.ctti_size == 0x8)\n+\tbtf_kind = BTF_KIND_ENUM64;\n+   }\n+\n   dw2_asm_output_data (4, dtd->dtd_data.ctti_name, \"btt_name\");\n   dw2_asm_output_data (4, BTF_TYPE_INFO (btf_kind, btf_kflag, btf_vlen),\n \t\t       \"btt_info: kind=%u, kflag=%u, vlen=%u\",\n@@ -634,6 +645,7 @@ btf_asm_type (ctf_container_ref ctfc, ctf_dtdef_ref dtd)\n     case BTF_KIND_UNION:\n     case BTF_KIND_ENUM:\n     case BTF_KIND_DATASEC:\n+    case BTF_KIND_ENUM64:\n       dw2_asm_output_data (4, dtd->dtd_data.ctti_size, \"btt_size: %uB\",\n \t\t\t   dtd->dtd_data.ctti_size);\n       return;\n@@ -707,13 +719,19 @@ btf_asm_sou_member (ctf_container_ref ctfc, ctf_dmdef_t * dmd)\n     }\n }\n \n-/* Asm'out an enum constant following a BTF_KIND_ENUM.  */\n+/* Asm'out an enum constant following a BTF_KIND_ENUM{,64}.  */\n \n static void\n-btf_asm_enum_const (ctf_dmdef_t * dmd)\n+btf_asm_enum_const (unsigned int size, ctf_dmdef_t * dmd)\n {\n   dw2_asm_output_data (4, dmd->dmd_name_offset, \"bte_name\");\n-  dw2_asm_output_data (4, dmd->dmd_value, \"bte_value\");\n+  if (size == 4)\n+    dw2_asm_output_data (size, dmd->dmd_value, \"bte_value\");\n+  else\n+    {\n+      dw2_asm_output_data (4, dmd->dmd_value & 0xffffffff, \"bte_value_lo32\");\n+      dw2_asm_output_data (4, (dmd->dmd_value >> 32) & 0xffffffff, \"bte_value_hi32\");\n+    }\n }\n \n /* Asm'out a function parameter description following a BTF_KIND_FUNC_PROTO.  */\n@@ -871,7 +889,7 @@ output_asm_btf_sou_fields (ctf_container_ref ctfc, ctf_dtdef_ref dtd)\n       btf_asm_sou_member (ctfc, dmd);\n }\n \n-/* Output all enumerator constants following a BTF_KIND_ENUM.  */\n+/* Output all enumerator constants following a BTF_KIND_ENUM{,64}.  */\n \n static void\n output_asm_btf_enum_list (ctf_container_ref ARG_UNUSED (ctfc),\n@@ -881,7 +899,7 @@ output_asm_btf_enum_list (ctf_container_ref ARG_UNUSED (ctfc),\n \n   for (dmd = dtd->dtd_u.dtu_members;\n        dmd != NULL; dmd = (ctf_dmdef_t *) ctf_dmd_list_next (dmd))\n-    btf_asm_enum_const (dmd);\n+    btf_asm_enum_const (dtd->dtd_data.ctti_size, dmd);\n }\n \n /* Output all function arguments following a BTF_KIND_FUNC_PROTO.  */"}, {"sha": "11ec1f9c647067e14303defd6e069366cd67f3bb", "filename": "gcc/ctfc.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fctfc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fctfc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fctfc.cc?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -577,7 +577,7 @@ ctf_add_array (ctf_container_ref ctfc, uint32_t flag, const ctf_arinfo_t * arp,\n \n ctf_id_t\n ctf_add_enum (ctf_container_ref ctfc, uint32_t flag, const char * name,\n-\t      HOST_WIDE_INT size, dw_die_ref die)\n+\t      HOST_WIDE_INT size, bool eunsigned, dw_die_ref die)\n {\n   ctf_dtdef_ref dtd;\n   ctf_id_t type;\n@@ -604,6 +604,7 @@ ctf_add_enum (ctf_container_ref ctfc, uint32_t flag, const char * name,\n   gcc_assert (size <= CTF_MAX_SIZE);\n \n   dtd->dtd_data.ctti_size = size;\n+  dtd->dtd_enum_unsigned = eunsigned;\n \n   ctfc->ctfc_num_stypes++;\n \n@@ -630,10 +631,12 @@ ctf_add_enumerator (ctf_container_ref ctfc, ctf_id_t enid, const char * name,\n \n   gcc_assert (kind == CTF_K_ENUM && vlen < CTF_MAX_VLEN);\n \n-  /* Enum value is of type HOST_WIDE_INT in the compiler, dmd_value is int32_t\n-     on the other hand.  Check bounds and skip adding this enum value if out of\n-     bounds.  */\n-  if ((value > INT_MAX) || (value < INT_MIN))\n+  /* Enum value is of type HOST_WIDE_INT in the compiler, CTF enumerators\n+     values in ctf_enum_t is limited to int32_t, BTF supports signed and\n+     unsigned enumerators values of 32 and 64 bits, for both debug formats\n+     we use ctf_dmdef_t.dmd_value entry of HOST_WIDE_INT type. So check\n+     CTF bounds and skip adding this enum value if out of bounds.  */\n+  if (!btf_debuginfo_p() && ((value > INT_MAX) || (value < INT_MIN)))\n     {\n       /* FIXME - Note this TBD_CTF_REPRESENTATION_LIMIT.  */\n       return (1);"}, {"sha": "48c381a008d6168cdc6b5e3d3da0efad35a6ceee", "filename": "gcc/ctfc.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fctfc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fctfc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fctfc.h?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -133,7 +133,7 @@ typedef struct GTY ((chain_next (\"%h.dmd_next\"))) ctf_dmdef\n   ctf_id_t dmd_type;\t\t/* Type of this member (for sou).  */\n   uint32_t dmd_name_offset;\t/* Offset of the name in str table.  */\n   uint64_t dmd_offset;\t\t/* Offset of this member in bits (for sou).  */\n-  int dmd_value;\t\t/* Value of this member (for enum).  */\n+  HOST_WIDE_INT dmd_value;\t/* Value of this member (for enum).  */\n   struct ctf_dmdef * dmd_next;\t/* A list node.  */\n } ctf_dmdef_t;\n \n@@ -162,6 +162,7 @@ struct GTY ((for_user)) ctf_dtdef\n   bool from_global_func; /* Whether this type was added from a global\n \t\t\t    function.  */\n   uint32_t linkage;           /* Used in function types.  0=local, 1=global.  */\n+  bool dtd_enum_unsigned;     /* Enum signedness.  */\n   union GTY ((desc (\"ctf_dtu_d_union_selector (&%1)\")))\n   {\n     /* struct, union, or enum.  */\n@@ -406,7 +407,7 @@ extern const char * ctf_add_string (ctf_container_ref, const char *,\n extern ctf_id_t ctf_add_reftype (ctf_container_ref, uint32_t, ctf_id_t,\n \t\t\t\t uint32_t, dw_die_ref);\n extern ctf_id_t ctf_add_enum (ctf_container_ref, uint32_t, const char *,\n-\t\t\t      HOST_WIDE_INT, dw_die_ref);\n+\t\t\t      HOST_WIDE_INT, bool, dw_die_ref);\n extern ctf_id_t ctf_add_slice (ctf_container_ref, uint32_t, ctf_id_t,\n \t\t\t       uint32_t, uint32_t, dw_die_ref);\n extern ctf_id_t ctf_add_float (ctf_container_ref, uint32_t, const char *,"}, {"sha": "748dd0cd8af4d42141d06d6d3aa6333af0833689", "filename": "gcc/dwarf2ctf.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fdwarf2ctf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Fdwarf2ctf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2ctf.cc?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -736,6 +736,7 @@ gen_ctf_enumeration_type (ctf_container_ref ctfc, dw_die_ref enumeration)\n {\n   const char *enum_name = get_AT_string (enumeration, DW_AT_name);\n   unsigned int bit_size = ctf_die_bitsize (enumeration);\n+  unsigned int signedness = get_AT_unsigned (enumeration, DW_AT_encoding);\n   int declaration_p = get_AT_flag (enumeration, DW_AT_declaration);\n \n   ctf_id_t enumeration_type_id;\n@@ -759,7 +760,9 @@ gen_ctf_enumeration_type (ctf_container_ref ctfc, dw_die_ref enumeration)\n \n   /* Generate a CTF type for the enumeration.  */\n   enumeration_type_id = ctf_add_enum (ctfc, CTF_ADD_ROOT,\n-\t\t\t\t      enum_name, bit_size / 8, enumeration);\n+\t\t\t\t      enum_name, bit_size / 8,\n+\t\t\t\t      (signedness == DW_ATE_unsigned),\n+\t\t\t\t      enumeration);\n \n   /* Process the enumerators.  */\n   {"}, {"sha": "7e940529f1b6dbf8f906c39f0e7b6dc59539289b", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-enum-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-enum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-enum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-enum-1.c?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -4,7 +4,7 @@\n /* { dg-options \"-O0 -gbtf -dA\" } */\n \n /* { dg-final { scan-assembler-times \"\\[\\t \\]0x6000004\\[\\t \\]+\\[^\\n\\]*btt_info\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\[\\t \\]0x6000003\\[\\t \\]+\\[^\\n\\]*btt_info\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x86000003\\[\\t \\]+\\[^\\n\\]*btt_info\" 1 } } */\n /* { dg-final { scan-assembler-times \"ascii \\\"QAD.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n /* { dg-final { scan-assembler-times \"ascii \\\"QED.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n /* { dg-final { scan-assembler-times \"ascii \\\"QOD.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */"}, {"sha": "e443d4c8c00fcb85152ab7b33b2b288b288d4ed0", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-enum64-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-enum64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-enum64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-enum64-1.c?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -0,0 +1,44 @@\n+/* Test BTF generation for 64 bits enums.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA\" } */\n+\n+/* { dg-final { scan-assembler-times \"\\[\\t \\].size\\[\\t \\]myenum1,\\[\\t \\]8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\].size\\[\\t \\]myenum2,\\[\\t \\]8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\].size\\[\\t \\]myenum3,\\[\\t \\]8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x13000003\\[\\t \\]+\\[^\\n\\]*btt_info\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x93000003\\[\\t \\]+\\[^\\n\\]*btt_info\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0xffffffaa\\[\\t \\]+\\[^\\n\\]*bte_value_lo32\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0xff\\[\\t \\]+\\[^\\n\\]*bte_value_hi32\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"B1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"B2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"B3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"C1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"C2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"C3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"D1.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"D2.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"D3.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bte_value_lo32\" 9 } } */\n+/* { dg-final { scan-assembler-times \"bte_value_hi32\" 9 } } */\n+\n+enum default_enum\n+{\n+  B1 = 0xffffffffaa,\n+  B2 = 0xbbbbbbbb,\n+  B3 = 0xaabbccdd,\n+} myenum1 = B1;\n+\n+enum explicit_unsigned\n+{\n+  C1 = 0xffffffffbbUL,\n+  C2 = 0xbbbbbbbb,\n+  C3 = 0xaabbccdd,\n+} myenum2 = C1;\n+\n+enum signed64\n+{\n+  D1 = 0xffffffffaa,\n+  D2 = 0xbbbbbbbb,\n+  D3 = -0x1,\n+} myenum3 = D1;"}, {"sha": "eba67f9d599f49a0c82e613a69723dd912960ecc", "filename": "include/btf.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/include%2Fbtf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8422861bddc7c4fd202cd59c8487d4bc6b807dc3/include%2Fbtf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fbtf.h?ref=8422861bddc7c4fd202cd59c8487d4bc6b807dc3", "patch": "@@ -109,7 +109,8 @@ struct btf_type\n #define BTF_KIND_VAR\t\t14\t/* Variable.  */\n #define BTF_KIND_DATASEC\t15\t/* Section such as .bss or .data.  */\n #define BTF_KIND_FLOAT\t\t16\t/* Floating point.  */\n-#define BTF_KIND_MAX\t\tBTF_KIND_FLOAT\n+#define BTF_KIND_ENUM64 \t19\t/* Enumeration up to 64 bits.  */\n+#define BTF_KIND_MAX\t\tBTF_KIND_ENUM64\n #define NR_BTF_KINDS\t\t(BTF_KIND_MAX + 1)\n \n /* For some BTF_KINDs, struct btf_type is immediately followed by\n@@ -130,14 +131,17 @@ struct btf_type\n #define BTF_INT_BOOL\t(1 << 2)\n \n /* BTF_KIND_ENUM is followed by VLEN struct btf_enum entries,\n-   which describe the enumerators. Note that BTF currently only\n-   supports signed 32-bit enumerator values.  */\n+   which describe the enumerators. */\n struct btf_enum\n {\n   uint32_t name_off;\t/* Offset in string section of enumerator name.  */\n   int32_t  val;\t\t/* Enumerator value.  */\n };\n \n+/* BTF_KF_ENUM_ holds the flags for kflags in BTF_KIND_ENUM{,64}.  */\n+#define BTF_KF_ENUM_UNSIGNED\t(0)\n+#define BTF_KF_ENUM_SIGNED \t(1 << 0)\n+\n /* BTF_KIND_ARRAY is followed by a single struct btf_array.  */\n struct btf_array\n {\n@@ -190,6 +194,15 @@ struct btf_var_secinfo\n   uint32_t size;\t/* Size (in bytes) of variable.  */\n };\n \n+/* BTF_KIND_ENUM64 is followed by VLEN struct btf_enum64 entries,\n+   which describe the 64 bits enumerators.  */\n+struct btf_enum64\n+{\n+  uint32_t name_off;\t/* Offset in string section of enumerator name.  */\n+  uint32_t val_lo32;\t/* lower 32-bit value for a 64-bit value Enumerator */\n+  uint32_t val_hi32;\t/* high 32-bit value for a 64-bit value Enumerator */\n+};\n+\n #ifdef\t__cplusplus\n }\n #endif"}]}