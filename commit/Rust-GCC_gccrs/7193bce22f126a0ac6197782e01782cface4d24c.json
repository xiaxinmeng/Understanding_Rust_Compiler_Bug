{"sha": "7193bce22f126a0ac6197782e01782cface4d24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5M2JjZTIyZjEyNmEwYWM2MTk3NzgyZTAxNzgyY2ZhY2U0ZDI0Yw==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-07-02T01:26:01Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-07-02T01:26:01Z"}, "message": "(constant_expression_warning, overflow_warning,\n\nconvert_and_check): Distinguish between TREE_OVERFLOW, which is just\nfor warnings, and TREE_CONSTANT_OVERFLOW, which is for required\npedantic diagnostics.\n\nFrom-SVN: r4827", "tree": {"sha": "ef2cbf1ab647609afde85b1a57e0992ea4bdaa70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef2cbf1ab647609afde85b1a57e0992ea4bdaa70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7193bce22f126a0ac6197782e01782cface4d24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7193bce22f126a0ac6197782e01782cface4d24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7193bce22f126a0ac6197782e01782cface4d24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7193bce22f126a0ac6197782e01782cface4d24c/comments", "author": null, "committer": null, "parents": [{"sha": "261450e857ea7f69f12dc9232cf884ade69ab53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261450e857ea7f69f12dc9232cf884ade69ab53c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261450e857ea7f69f12dc9232cf884ade69ab53c"}], "stats": {"total": 40, "additions": 12, "deletions": 28}, "files": [{"sha": "087332c98b9aa43faee85e538c84f8ef322fdfe2", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193bce22f126a0ac6197782e01782cface4d24c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193bce22f126a0ac6197782e01782cface4d24c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7193bce22f126a0ac6197782e01782cface4d24c", "patch": "@@ -349,15 +349,8 @@ constant_expression_warning (value)\n      tree value;\n {\n   if (TREE_CODE (value) == INTEGER_CST && TREE_CONSTANT_OVERFLOW (value))\n-    {\n-      /* ??? This is a warning, not a pedwarn, in 2.4,\n-\t because it happens in contexts that are not\n-\t \"constant expressions\" in ANSI C.\n-\t Fix the problem differently in 2.5.  */\n-      warning (\"overflow in constant expression\");\n-      /* Suppress duplicate warnings.  */\n-      TREE_CONSTANT_OVERFLOW (value) = 0;\n-    }\n+    if (pedantic)\n+      pedwarn (\"overflow in constant expression\");\n }\n \n /* Print a warning if an expression had overflow in folding.\n@@ -371,14 +364,10 @@ void\n overflow_warning (value)\n      tree value;\n {\n-  if (TREE_CODE (value) == INTEGER_CST && TREE_CONSTANT_OVERFLOW (value))\n+  if (TREE_CODE (value) == INTEGER_CST && TREE_OVERFLOW (value))\n     {\n-      /* ??? This is a warning, not a pedwarn, in 2.4,\n-\t because it happens in contexts that are not\n-\t \"constant expressions\" in ANSI C.\n-\t Fix the problem differently in 2.5.  */\n+      TREE_OVERFLOW (value) = 0;\n       warning (\"integer overflow in expression\");\n-      TREE_CONSTANT_OVERFLOW (value) = 0;\n     }\n }\n \n@@ -415,20 +404,15 @@ convert_and_check (type, expr)\n   tree t = convert (type, expr);\n   if (TREE_CODE (t) == INTEGER_CST)\n     {\n-      if (TREE_UNSIGNED (TREE_TYPE (expr))\n-\t  && !TREE_UNSIGNED (type)\n-\t  && TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n-\t  && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (expr)))\n-\t/* No warning for converting 0x80000000 to int.  */\n-\tTREE_CONSTANT_OVERFLOW (t) = 0;\n-      else if (TREE_CONSTANT_OVERFLOW (t))\n+      if (TREE_OVERFLOW (t))\n \t{\n-\t  /* ??? This is a warning, not a pedwarn, in 2.4,\n-\t     because it happens in contexts that are not\n-\t     \"constant expressions\" in ANSI C.\n-\t     Fix the problem differently in 2.5.  */\n-\t  warning (\"overflow in implicit constant conversion\");\n-\t  TREE_CONSTANT_OVERFLOW (t) = 0;\n+\t  TREE_OVERFLOW (t) = 0;\n+\n+\t  /* No warning for converting 0x80000000 to int.  */\n+\t  if (!(TREE_UNSIGNED (type) < TREE_UNSIGNED (TREE_TYPE (expr))\n+\t\t&& TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n+\t\t&& TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (expr))))\n+\t    warning (\"overflow in implicit constant conversion\");\n \t}\n       else\n \tunsigned_conversion_warning (t, expr);"}]}