{"sha": "c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4ZTFkMjg4YWI3MjdkZTZlYjQ5M2UxYWEyZWFkZjVkNWVlZjNhYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-30T17:12:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-30T17:12:36Z"}, "message": "c++: Fix push_access_scope and introduce RAII wrapper for it\n\nWhen push_access_scope is passed a TYPE_DECL for a class type (which\ncan happen during e.g. satisfaction), we undesirably push only the\nenclosing context of the class instead of the class itself.  This\ncauses us to mishandle e.g. testcase below due to us not entering the\nscope of A before checking its constraints.\n\nThis patch adjusts push_access_scope accordingly, and introduces an\nRAII wrapper for it.  We make use of this wrapper right away by\nreplacing the only user of push_nested_class_guard with this new\nwrapper, which means we can remove push_nested_class_guard (whose\nfunctionality is basically subsumed by the new wrapper).\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (get_normalized_constraints_from_decl): Use\n\tpush_access_scope_guard instead of push_nested_class_guard.\n\t* cp-tree.h (struct push_nested_class_guard): Replace with ...\n\t(struct push_access_scope_guard): ... this.\n\t* pt.c (push_access_scope): When the argument corresponds to\n\ta class type, push the class instead of its context.\n\t(pop_access_scope): Adjust accordingly.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-access2.C: New test.", "tree": {"sha": "e345163ba2fd085640f5288911c6c2bbe91fe8f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e345163ba2fd085640f5288911c6c2bbe91fe8f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/comments", "author": null, "committer": null, "parents": [{"sha": "b5bb7f328d56cccfb85932ff586138e5a4ef1436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bb7f328d56cccfb85932ff586138e5a4ef1436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bb7f328d56cccfb85932ff586138e5a4ef1436"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "99d3ccc69980b0451f31f4c60d10e4fcb6d534f2", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "patch": "@@ -926,12 +926,7 @@ get_normalized_constraints_from_decl (tree d, bool diag = false)\n   tree norm = NULL_TREE;\n   if (tree ci = get_constraints (decl))\n     {\n-      push_nested_class_guard pncs (DECL_CONTEXT (d));\n-\n-      temp_override<tree> ovr (current_function_decl);\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tcurrent_function_decl = decl;\n-\n+      push_access_scope_guard pas (decl);\n       norm = get_normalized_constraints_from_info (ci, tmpl, diag);\n     }\n "}, {"sha": "58da746000159b56f01e51036e256b9d746220be", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "patch": "@@ -8463,21 +8463,24 @@ is_constrained_auto (const_tree t)\n   return is_auto (t) && PLACEHOLDER_TYPE_CONSTRAINTS_INFO (t);\n }\n \n-/* RAII class to push/pop class scope T; if T is not a class, do nothing.  */\n+/* RAII class to push/pop the access scope for T.  */\n \n-struct push_nested_class_guard\n+struct push_access_scope_guard\n {\n-  bool push;\n-  push_nested_class_guard (tree t)\n-    : push (t && CLASS_TYPE_P (t))\n+  tree decl;\n+  push_access_scope_guard (tree t)\n+    : decl (t)\n   {\n-    if (push)\n-      push_nested_class (t);\n+    if (VAR_OR_FUNCTION_DECL_P (decl)\n+\t|| TREE_CODE (decl) == TYPE_DECL)\n+      push_access_scope (decl);\n+    else\n+      decl = NULL_TREE;\n   }\n-  ~push_nested_class_guard ()\n+  ~push_access_scope_guard ()\n   {\n-    if (push)\n-      pop_nested_class ();\n+    if (decl)\n+      pop_access_scope (decl);\n   }\n };\n "}, {"sha": "f8f7616bf2a106f275b323602a94bc6eae91a3d6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "patch": "@@ -224,7 +224,7 @@ static void instantiate_body (tree pattern, tree args, tree d, bool nested);\n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n    template, VAR_DECL for static member variable, or TYPE_DECL for\n-   alias template (needed by instantiate_decl).  */\n+   for a class or alias template (needed by instantiate_decl).  */\n \n void\n push_access_scope (tree t)\n@@ -234,6 +234,9 @@ push_access_scope (tree t)\n \n   if (DECL_FRIEND_CONTEXT (t))\n     push_nested_class (DECL_FRIEND_CONTEXT (t));\n+  else if (DECL_IMPLICIT_TYPEDEF_P (t)\n+\t   && CLASS_TYPE_P (TREE_TYPE (t)))\n+    push_nested_class (TREE_TYPE (t));\n   else if (DECL_CLASS_SCOPE_P (t))\n     push_nested_class (DECL_CONTEXT (t));\n   else if (deduction_guide_p (t) && DECL_ARTIFICIAL (t))\n@@ -260,6 +263,8 @@ pop_access_scope (tree t)\n     current_function_decl = saved_access_scope->pop();\n \n   if (DECL_FRIEND_CONTEXT (t)\n+      || (DECL_IMPLICIT_TYPEDEF_P (t)\n+\t  && CLASS_TYPE_P (TREE_TYPE (t)))\n       || DECL_CLASS_SCOPE_P (t)\n       || (deduction_guide_p (t) && DECL_ARTIFICIAL (t)))\n     pop_nested_class ();"}, {"sha": "8ddcad236e39b04df97d61dc548770d59531f3e8", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-access2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-access2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-access2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-access2.C?ref=c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target concepts } }\n+\n+template<class T> requires T::value struct A { };\n+template<class T> requires T::value struct B { }; // { dg-error \"private\" }\n+\n+struct S {\n+private:\n+  static constexpr bool value = true;\n+  template<class T> requires T::value friend struct A;\n+};\n+\n+A<S> x;\n+B<S> y; // { dg-error \"constraint\" }"}]}