{"sha": "e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYjFjNGE0YWI0ZDYxNDFhNTdlODI3ZjFiMmE1NDhmNTc3ZDdiYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-10-11T13:25:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-11T13:25:50Z"}, "message": "pt.c (tsubst_default_argument): Handle DEFAULT_ARG.\n\n\t* pt.c (tsubst_default_argument): Handle DEFAULT_ARG.\n\t(tsubst_default_arguments): Only do this once for cloned fns.\n\t(tsubst): Use typedef_variant_p.  Handle LANG_TYPE.  Don't\n\thandle expressions.\n\t(tsubst_expr): Avoid calling tsubst_expr for non-expressions.\n\t(tsubst_copy_and_build): Likewise.\n\t(tsubst_initializer_list): Likewise.\n\t(tsubst_copy): Change default to gcc_unreachable.  Handle\n\tOVERLOAD and PTRMEM_CST.\n\nFrom-SVN: r165307", "tree": {"sha": "84566f40566eb0b3d002b5d97d9ddff253581a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84566f40566eb0b3d002b5d97d9ddff253581a9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c3c8ad74024641107dc60942263e502371eb50b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3c8ad74024641107dc60942263e502371eb50b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3c8ad74024641107dc60942263e502371eb50b"}], "stats": {"total": 139, "additions": 71, "deletions": 68}, "files": [{"sha": "6d4095c911b3798df157a0bd1058ee8efbed534a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba", "patch": "@@ -1,3 +1,15 @@\n+2010-10-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (tsubst_default_argument): Handle DEFAULT_ARG.\n+\t(tsubst_default_arguments): Only do this once for cloned fns.\n+\t(tsubst): Use typedef_variant_p.  Handle LANG_TYPE.  Don't\n+\thandle expressions.\n+\t(tsubst_expr): Avoid calling tsubst_expr for non-expressions.\n+\t(tsubst_copy_and_build): Likewise.\n+\t(tsubst_initializer_list): Likewise.\n+\t(tsubst_copy): Change default to gcc_unreachable.  Handle\n+\tOVERLOAD and PTRMEM_CST.\n+\n 2010-10-10  Jason Merrill  <jason@redhat.com>\n \n \tPR lto/45959"}, {"sha": "84901d30673f56d260946e724484cd723ed04438", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 59, "deletions": 68, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e90b1c4a4ab4d6141a57e827f1b2a548f577d7ba", "patch": "@@ -8871,6 +8871,10 @@ tsubst_default_argument (tree fn, tree type, tree arg)\n   tree saved_class_ptr = NULL_TREE;\n   tree saved_class_ref = NULL_TREE;\n \n+  /* This can happen in invalid code.  */\n+  if (TREE_CODE (arg) == DEFAULT_ARG)\n+    return arg;\n+\n   /* This default argument came from a template.  Instantiate the\n      default argument here, not in tsubst.  In the case of\n      something like:\n@@ -8935,6 +8939,9 @@ tsubst_default_arguments (tree fn)\n      its default arguments.  */\n   if (uses_template_parms (tmpl_args))\n     return;\n+  /* Don't do this again for clones.  */\n+  if (DECL_CLONED_FUNCTION_P (fn))\n+    return;\n \n   for (arg = TYPE_ARG_TYPES (TREE_TYPE (fn));\n        arg;\n@@ -10033,8 +10040,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   /* Reuse typedefs.  We need to do this to handle dependent attributes,\n      such as attribute aligned.  */\n   if (TYPE_P (t)\n-      && TYPE_NAME (t)\n-      && TYPE_NAME (t) != TYPE_MAIN_DECL (t))\n+      && typedef_variant_p (t))\n     {\n       tree decl = TYPE_NAME (t);\n       \n@@ -10090,9 +10096,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n     case BOOLEAN_TYPE:\n-    case INTEGER_CST:\n-    case REAL_CST:\n-    case STRING_CST:\n+    case LANG_TYPE:\n       return t;\n \n     case INTEGER_TYPE:\n@@ -10541,29 +10545,6 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \treturn r;\n       }\n \n-    case PLUS_EXPR:\n-    case MINUS_EXPR:\n-      {\n-\ttree e1 = tsubst (TREE_OPERAND (t, 0), args, complain, in_decl);\n-\ttree e2 = tsubst (TREE_OPERAND (t, 1), args, complain, in_decl);\n-\n-\tif (e1 == error_mark_node || e2 == error_mark_node)\n-\t  return error_mark_node;\n-\n-\treturn fold_build2_loc (input_location,\n-\t\t\t\tcode, TREE_TYPE (t), e1, e2);\n-      }\n-\n-    case NEGATE_EXPR:\n-    case NOP_EXPR:\n-      {\n-\ttree e = tsubst (TREE_OPERAND (t, 0), args, complain, in_decl);\n-\tif (e == error_mark_node)\n-\t  return error_mark_node;\n-\n-\treturn fold_build1_loc (input_location, code, TREE_TYPE (t), e);\n-      }\n-\n     case TYPENAME_TYPE:\n       {\n \ttree ctx = tsubst_aggr_type (TYPE_CONTEXT (t), args, complain,\n@@ -10639,33 +10620,6 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \treturn make_unbound_class_template (ctx, name, parm_list, complain);\n       }\n \n-    case INDIRECT_REF:\n-    case ADDR_EXPR:\n-    case CALL_EXPR:\n-      gcc_unreachable ();\n-\n-    case ARRAY_REF:\n-      {\n-\ttree e1 = tsubst (TREE_OPERAND (t, 0), args, complain, in_decl);\n-\ttree e2 = tsubst_expr (TREE_OPERAND (t, 1), args, complain, in_decl,\n-\t\t\t       /*integral_constant_expression_p=*/false);\n-\tif (e1 == error_mark_node || e2 == error_mark_node)\n-\t  return error_mark_node;\n-\n-\treturn build_nt (ARRAY_REF, e1, e2, NULL_TREE, NULL_TREE);\n-      }\n-\n-    case SCOPE_REF:\n-      {\n-\ttree e1 = tsubst (TREE_OPERAND (t, 0), args, complain, in_decl);\n-\ttree e2 = tsubst (TREE_OPERAND (t, 1), args, complain, in_decl);\n-\tif (e1 == error_mark_node || e2 == error_mark_node)\n-\t  return error_mark_node;\n-\n-\treturn build_qualified_name (/*type=*/NULL_TREE,\n-\t\t\t\t     e1, e2, QUALIFIED_NAME_IS_TEMPLATE (t));\n-      }\n-\n     case TYPEOF_TYPE:\n       {\n \ttree type;\n@@ -10734,6 +10688,21 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       }\n       break;\n \n+    case INTEGER_CST:\n+    case REAL_CST:\n+    case STRING_CST:\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+    case NEGATE_EXPR:\n+    case NOP_EXPR:\n+    case INDIRECT_REF:\n+    case ADDR_EXPR:\n+    case CALL_EXPR:\n+    case ARRAY_REF:\n+    case SCOPE_REF:\n+      /* We should use one of the expression tsubsts for these codes.  */\n+      gcc_unreachable ();\n+\n     default:\n       sorry (\"use of %qs in template\", tree_code_name [(int) code]);\n       return error_mark_node;\n@@ -11047,6 +11016,13 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       mark_used (t);\n       return t;\n \n+    case OVERLOAD:\n+      /* An OVERLOAD will always be a non-dependent overload set; an\n+\t overload set from function scope will just be represented with an\n+\t IDENTIFIER_NODE, and from class scope with a BASELINK.  */\n+      gcc_assert (!uses_template_parms (t));\n+      return t;\n+\n     case BASELINK:\n       return tsubst_baselink (t, current_class_type, args, complain, in_decl);\n \n@@ -11384,8 +11360,14 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \treturn r;\n       }\n \n-    default:\n+    case PTRMEM_CST:\n+      /* These can sometimes show up in a partial instantiation, but never\n+\t involve template parms.  */\n+      gcc_assert (!uses_template_parms (t));\n       return t;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n }\n \n@@ -11666,7 +11648,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       break;\n \n     case USING_STMT:\n-      do_using_directive (RECUR (USING_STMT_NAMESPACE (t)));\n+      do_using_directive (USING_STMT_NAMESPACE (t));\n       break;\n \n     case DECL_EXPR:\n@@ -11683,7 +11665,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t    tree name = DECL_NAME (decl);\n \t    tree decl;\n \n-\t    scope = RECUR (scope);\n+\t    scope = tsubst (scope, args, complain, in_decl);\n \t    decl = lookup_qualified_name (scope, name,\n \t\t\t\t\t  /*is_type_p=*/false,\n \t\t\t\t\t  /*complain=*/false);\n@@ -12276,15 +12258,15 @@ tsubst_copy_and_build (tree t,\n \n     case ADDR_EXPR:\n       op1 = TREE_OPERAND (t, 0);\n+      if (TREE_CODE (op1) == LABEL_DECL)\n+\treturn finish_label_address_expr (DECL_NAME (op1),\n+\t\t\t\t\t  EXPR_LOCATION (op1));\n       if (TREE_CODE (op1) == SCOPE_REF)\n \top1 = tsubst_qualified_id (op1, args, complain, in_decl,\n \t\t\t\t   /*done=*/true, /*address_p=*/true);\n       else\n \top1 = tsubst_non_call_postfix_expression (op1, args, complain,\n \t\t\t\t\t\t  in_decl);\n-      if (TREE_CODE (op1) == LABEL_DECL)\n-\treturn finish_label_address_expr (DECL_NAME (op1),\n-\t\t\t\t\t  EXPR_LOCATION (op1));\n       return build_x_unary_op (ADDR_EXPR, op1, complain);\n \n     case PLUS_EXPR:\n@@ -12459,7 +12441,7 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \tret = build_new (&placement_vec,\n-\t\t\t RECUR (TREE_OPERAND (t, 1)),\n+\t\t\t tsubst (TREE_OPERAND (t, 1), args, complain, in_decl),\n \t\t\t RECUR (TREE_OPERAND (t, 2)),\n \t\t\t &init_vec,\n \t\t\t NEW_EXPR_USE_GLOBAL (t),\n@@ -12909,10 +12891,17 @@ tsubst_copy_and_build (tree t,\n \n     case TYPEID_EXPR:\n       {\n-\ttree operand_0 = RECUR (TREE_OPERAND (t, 0));\n+\ttree operand_0 = TREE_OPERAND (t, 0);\n \tif (TYPE_P (operand_0))\n-\t  return get_typeid (operand_0);\n-\treturn build_typeid (operand_0);\n+\t  {\n+\t    operand_0 = tsubst (operand_0, args, complain, in_decl);\n+\t    return get_typeid (operand_0);\n+\t  }\n+\telse\n+\t  {\n+\t    operand_0 = RECUR (operand_0);\n+\t    return build_typeid (operand_0);\n+\t  }\n       }\n \n     case VAR_DECL:\n@@ -17279,9 +17268,11 @@ tsubst_initializer_list (tree t, tree argvec)\n               if (decl && !DECL_P (decl))\n                 in_base_initializer = 1;\n \n-              init = tsubst_expr (TREE_VALUE (t), argvec, \n-\t\t\t\t  tf_warning_or_error, NULL_TREE,\n-                                  /*integral_constant_expression_p=*/false);\n+\t      init = TREE_VALUE (t);\n+\t      if (init != void_type_node)\n+\t\tinit = tsubst_expr (init, argvec,\n+\t\t\t\t    tf_warning_or_error, NULL_TREE,\n+\t\t\t\t    /*integral_constant_expression_p=*/false);\n               in_base_initializer = 0;\n             }\n "}]}