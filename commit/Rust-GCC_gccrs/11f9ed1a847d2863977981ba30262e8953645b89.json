{"sha": "11f9ed1a847d2863977981ba30262e8953645b89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmOWVkMWE4NDdkMjg2Mzk3Nzk4MWJhMzAyNjJlODk1MzY0NWI4OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-12-16T16:09:06Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-12-16T16:09:06Z"}, "message": "avr.c (avr_simplify_comparision_p, [...]): Don't use the 'U' suffix.\n\n\t* avr.c (avr_simplify_comparision_p, adjust_insn_length,\n\tmask_one_bit_p, output_reload_insisf): Don't use the 'U' suffix.\n\t* avr.h (reg_class): Likewise.\n\t* avr.md: Likewise.\n\t* mcore.c (try_constant_tricks, mcore_byte_offset,\n\tmcore_halfword_offset): Likewise.\n\t* sh.c (shl_sext_kind, gen_block_redirect, split_branches): Likewise.\n\t* v850.c (not_power_of_two_operand): Likewise.\n\nFrom-SVN: r48073", "tree": {"sha": "4dda8f59f600b4c7df07cba6426a94707505e514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dda8f59f600b4c7df07cba6426a94707505e514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f9ed1a847d2863977981ba30262e8953645b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f9ed1a847d2863977981ba30262e8953645b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f9ed1a847d2863977981ba30262e8953645b89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f9ed1a847d2863977981ba30262e8953645b89/comments", "author": null, "committer": null, "parents": [{"sha": "aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "7bda459f172dfa89cd46bf365e45355f4407d554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -1,5 +1,14 @@\n 2001-12-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* avr.c (avr_simplify_comparision_p, adjust_insn_length,\n+\tmask_one_bit_p, output_reload_insisf): Don't use the 'U' suffix.\n+\t* avr.h (reg_class): Likewise.\n+\t* avr.md: Likewise.\n+\t* mcore.c (try_constant_tricks, mcore_byte_offset,\n+\tmcore_halfword_offset): Likewise.\n+\t* sh.c (shl_sext_kind, gen_block_redirect, split_branches): Likewise.\n+\t* v850.c (not_power_of_two_operand): Likewise.\n+\n \t* clipper/clix.h (ASM_OUTPUT_ASCII): Avoid signed/unsigned\n \twarnings.\n \t* convex.h (ASM_OUTPUT_ASCII): Likewise."}, {"sha": "8b7e1a12861489a06733390ab1a17ba9067324ad", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -1358,7 +1358,7 @@ avr_simplify_comparision_p (mode, operator, x)\n {\n   unsigned int max = (mode == QImode ? 0xff :\n                       mode == HImode ? 0xffff :\n-                      mode == SImode ? 0xffffffffU : 0);\n+                      mode == SImode ? 0xffffffff : 0);\n   if (max && operator && GET_CODE (x) == CONST_INT)\n     {\n       if (unsigned_condition (operator) != operator)\n@@ -4242,8 +4242,8 @@ adjust_insn_length (insn, len)\n \t      if (GET_MODE (op[1]) == SImode)\n \t\tlen = (((mask & 0xff) != 0xff)\n \t\t       + ((mask & 0xff00) != 0xff00)\n-\t\t       + ((mask & 0xff0000UL) != 0xff0000UL)\n-\t\t       + ((mask & 0xff000000UL) != 0xff000000UL));\n+\t\t       + ((mask & 0xff0000L) != 0xff0000L)\n+\t\t       + ((mask & 0xff000000L) != 0xff000000L));\n \t      else if (GET_MODE (op[1]) == HImode)\n \t\tlen = (((mask & 0xff) != 0xff)\n \t\t       + ((mask & 0xff00) != 0xff00));\n@@ -4257,8 +4257,8 @@ adjust_insn_length (insn, len)\n \t      if (GET_MODE (op[1]) == SImode)\n \t\tlen = (((mask & 0xff) != 0)\n \t\t       + ((mask & 0xff00) != 0)\n-\t\t       + ((mask & 0xff0000UL) != 0)\n-\t\t       + ((mask & 0xff000000UL) != 0));\n+\t\t       + ((mask & 0xff0000L) != 0)\n+\t\t       + ((mask & 0xff000000L) != 0));\n \t      else if (GET_MODE (op[1]) == HImode)\n \t\tlen = (((mask & 0xff) != 0)\n \t\t       + ((mask & 0xff00) != 0));\n@@ -5162,9 +5162,9 @@ mask_one_bit_p (mask)\n   unsigned HOST_WIDE_INT n=mask;\n   for (i = 0; i < 32; ++i)\n     {\n-      if (n & 0x80000000UL)\n+      if (n & 0x80000000L)\n \t{\n-\t  if (n & 0x7fffffffUL)\n+\t  if (n & 0x7fffffffL)\n \t    return 0;\n \t  else\n \t    return 32-i;\n@@ -5347,7 +5347,7 @@ output_reload_insisf (insn, operands, len)\n \t*len = 4 + ((INTVAL (src) & 0xff) != 0)\n \t\t+ ((INTVAL (src) & 0xff00) != 0)\n \t\t+ ((INTVAL (src) & 0xff0000) != 0)\n-\t\t+ ((INTVAL (src) & 0xff000000U) != 0);\n+\t\t+ ((INTVAL (src) & 0xff000000) != 0);\n       else\n \t*len = 8;\n \n@@ -5375,7 +5375,7 @@ output_reload_insisf (insn, operands, len)\n       output_asm_insn (AS2 (ldi, %2, hlo8(%1)), operands);\n       output_asm_insn (AS2 (mov, %C0, %2), operands);\n     }\n-  if (cnst && ((INTVAL (src) & 0xff000000U) == 0))\n+  if (cnst && ((INTVAL (src) & 0xff000000) == 0))\n     output_asm_insn (AS2 (mov, %D0, __zero_reg__), operands);\n   else\n     {"}, {"sha": "23810bf46299220135c9b01a5f04ce4a649576a5", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -613,8 +613,8 @@ enum reg_class {\n   {(3 << REG_X)|(3 << REG_Y)|(3 << REG_Z)|(3 << REG_W)|(0xff << 16),\t\\\n      0x00000000},\t/* LD_REGS, r16 - r31 */\t\t\t\\\n   {0x0000ffff,0x00000000}, \t/* NO_LD_REGS  r0 - r15 */              \\\n-  {0xffffffffu,0x00000000},\t/* GENERAL_REGS, r0 - r31 */\t\t\\\n-  {0xffffffffu,0x00000003}\t/* ALL_REGS */\t\t\t\t\\\n+  {0xffffffff,0x00000000},\t/* GENERAL_REGS, r0 - r31 */\t\t\\\n+  {0xffffffff,0x00000003}\t/* ALL_REGS */\t\t\t\t\\\n }\n /* An initializer containing the contents of the register classes, as\n    integers which are bit masks.  The Nth integer specifies the"}, {"sha": "3c1432d900204b5e789cc5f3ed3aa1a6527d366a", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -996,9 +996,9 @@\n \t    output_asm_insn (AS2 (andi,%A0,lo8(%2)), operands);\n \t  if ((mask & 0xff00) != 0xff00)\n \t    output_asm_insn (AS2 (andi,%B0,hi8(%2)), operands);\n-\t  if ((mask & 0xff0000UL) != 0xff0000UL)\n+\t  if ((mask & 0xff0000L) != 0xff0000L)\n \t    output_asm_insn (AS2 (andi,%C0,hlo8(%2)), operands);\n-\t  if ((mask & 0xff000000UL) != 0xff000000UL)\n+\t  if ((mask & 0xff000000L) != 0xff000000L)\n \t    output_asm_insn (AS2 (andi,%D0,hhi8(%2)), operands);\n \t  return \\\"\\\";\n         }\n@@ -1080,9 +1080,9 @@\n \t  output_asm_insn (AS2 (ori,%A0,lo8(%2)), operands);\n \tif (mask & 0xff00)\n \t  output_asm_insn (AS2 (ori,%B0,hi8(%2)), operands);\n-\tif (mask & 0xff0000UL)\n+\tif (mask & 0xff0000L)\n \t  output_asm_insn (AS2 (ori,%C0,hlo8(%2)), operands);\n-\tif (mask & 0xff000000UL)\n+\tif (mask & 0xff000000L)\n \t  output_asm_insn (AS2 (ori,%D0,hhi8(%2)), operands);\n \treturn \\\"\\\";\n       }"}, {"sha": "a367a557c5ccc43458634c35f76024a36b9b65dd", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -719,7 +719,7 @@ try_constant_tricks (value, x, y)\n \t    }\n \t}\n       \n-      bit = 0x80000000UL;\n+      bit = 0x80000000L;\n       \n       for (i = 0; i <= 31; i++)\n \t{\n@@ -886,13 +886,13 @@ int\n mcore_byte_offset (mask)\n      unsigned int mask;\n {\n-  if (mask == 0x00ffffffUL)\n+  if (mask == 0x00ffffffL)\n     return 0;\n-  else if (mask == 0xff00ffffUL)\n+  else if (mask == 0xff00ffffL)\n     return 1;\n-  else if (mask == 0xffff00ffUL)\n+  else if (mask == 0xffff00ffL)\n     return 2;\n-  else if (mask == 0xffffff00UL)\n+  else if (mask == 0xffffff00L)\n     return 3;\n \n   return -1;\n@@ -906,7 +906,7 @@ mcore_halfword_offset (mask)\n {\n   if (mask == 0x0000ffffL)\n     return 0;\n-  else if (mask == 0xffff0000UL)\n+  else if (mask == 0xffff0000L)\n     return 1;\n \n   return -1;"}, {"sha": "322de210a1805f1a07e3f35662fad1c193556c52", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -1716,7 +1716,7 @@ shl_sext_kind (left_rtx, size_rtx, costp)\n \t  cost = ext_shift_insns[ext - insize] + 1 + shift_insns[size - ext];\n \t  if (cost < best_cost)\n \t    {\n-\t      kind = ext / 8U;\n+\t      kind = ext / (unsigned) 8;\n \t      best_cost = cost;\n \t    }\n \t}\n@@ -1733,7 +1733,7 @@ shl_sext_kind (left_rtx, size_rtx, costp)\n \tcontinue;\n       if (cost < best_cost)\n \t{\n-\t  kind = ext / 8U + 2;\n+\t  kind = ext / (unsigned) 8 + 2;\n \t  best_cost = cost;\n \t}\n     }\n@@ -2688,7 +2688,8 @@ gen_block_redirect (jump, addr, need_block)\n   dest = XEXP (SET_SRC (PATTERN (jump)), 0);\n   /* If the branch is out of range, try to find a scratch register for it.  */\n   if (optimize\n-      && (INSN_ADDRESSES (INSN_UID (dest)) - addr + 4092U > 4092 + 4098))\n+      && (INSN_ADDRESSES (INSN_UID (dest)) - addr + (unsigned) 4092\n+\t  > 4092 + 4098))\n     {\n       rtx scan;\n       /* Don't look for the stack pointer as a scratch register,\n@@ -2764,7 +2765,7 @@ gen_block_redirect (jump, addr, need_block)\n \t{\n \t  dest = JUMP_LABEL (next);\n \t  if (dest\n-\t      && (INSN_ADDRESSES (INSN_UID (dest)) - addr + 4092U\n+\t      && (INSN_ADDRESSES (INSN_UID (dest)) - addr + (unsigned) 4092\n \t\t  > 4092 + 4098))\n \t    gen_block_redirect (next, INSN_ADDRESSES (INSN_UID (next)), -1);\n \t}\n@@ -3630,7 +3631,7 @@ split_branches (first)\n \t\t    && recog_memoized (beyond) == CODE_FOR_jump\n \t\t    && ((INSN_ADDRESSES\n \t\t\t (INSN_UID (XEXP (SET_SRC (PATTERN (beyond)), 0)))\n-\t\t\t - INSN_ADDRESSES (INSN_UID (insn)) + 252U)\n+\t\t\t - INSN_ADDRESSES (INSN_UID (insn)) + (unsigned) 252)\n \t\t\t> 252 + 258 + 2))\n \t\t  gen_block_redirect (beyond,\n \t\t\t\t      INSN_ADDRESSES (INSN_UID (beyond)), 1);\n@@ -3644,7 +3645,7 @@ split_branches (first)\n \t\t&& recog_memoized (next) == CODE_FOR_jump\n \t\t&& ((INSN_ADDRESSES\n \t\t     (INSN_UID (XEXP (SET_SRC (PATTERN (next)), 0)))\n-\t\t     - INSN_ADDRESSES (INSN_UID (insn)) + 252U)\n+\t\t     - INSN_ADDRESSES (INSN_UID (insn)) + (unsigned) 252)\n \t\t    > 252 + 258 + 2))\n \t      gen_block_redirect (next, INSN_ADDRESSES (INSN_UID (next)), 1);\n \t  }"}, {"sha": "0d45ac97b5bba43320941a40b99f4d55c95af19e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f9ed1a847d2863977981ba30262e8953645b89/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=11f9ed1a847d2863977981ba30262e8953645b89", "patch": "@@ -1047,7 +1047,7 @@ not_power_of_two_operand (op, mode)\n   else if (mode == HImode)\n     mask = 0xffff;\n   else if (mode == SImode)\n-    mask = 0xffffffffU;\n+    mask = 0xffffffff;\n   else\n     return 0;\n "}]}