{"sha": "61e3c180ad6913fa5af39059de5ba7b3bde50cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlM2MxODBhZDY5MTNmYTVhZjM5MDU5ZGU1YmE3YjNiZGU1MGNkYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-16T08:39:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-16T08:41:47Z"}, "message": "Fix PR tree-optimization/98272\n\nThis fixes the precision mismatch introduced by the previous change.\n\ngcc/ChangeLog:\n\tPR tree-optimization/98272\n\t* tree-switch-conversion.c (bit_test_cluster::emit): When finding\n\tout whether the entry test can be merged in the bit test, do the\n\tcomputation using the type of the index expression.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/pr98272.c: New test.", "tree": {"sha": "7f04e65fce1b54282a2c8160d02ebaa2951cb60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f04e65fce1b54282a2c8160d02ebaa2951cb60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e3c180ad6913fa5af39059de5ba7b3bde50cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e3c180ad6913fa5af39059de5ba7b3bde50cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e3c180ad6913fa5af39059de5ba7b3bde50cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e3c180ad6913fa5af39059de5ba7b3bde50cda/comments", "author": null, "committer": null, "parents": [{"sha": "31008a8bb30d8979bba5240be6b504140c5665ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31008a8bb30d8979bba5240be6b504140c5665ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31008a8bb30d8979bba5240be6b504140c5665ff"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "126a61642e4da0d66fe1ddbb7a4eefc0337cb7a1", "filename": "gcc/testsuite/gcc.dg/pr98272.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e3c180ad6913fa5af39059de5ba7b3bde50cda/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98272.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e3c180ad6913fa5af39059de5ba7b3bde50cda/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98272.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98272.c?ref=61e3c180ad6913fa5af39059de5ba7b3bde50cda", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/98272 */\n+/* Reported by Zdenek Sojka <zsojka@seznam.cz> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-tree-forwprop\" } */\n+\n+void bar (void);\n+\n+void\n+foo (unsigned char uc)\n+{\n+  if (uc >= 5)\n+    return;\n+\n+  switch (uc)\n+    {\n+    case 0:\n+    case 2:\n+    case 4:\n+      bar ();\n+    }\n+}"}, {"sha": "08dfd6f3580e120f30aaf877b54bb4544f789128", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e3c180ad6913fa5af39059de5ba7b3bde50cda/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e3c180ad6913fa5af39059de5ba7b3bde50cda/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=61e3c180ad6913fa5af39059de5ba7b3bde50cda", "patch": "@@ -1557,21 +1557,22 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n       && get_range_info (index_expr, &min, &max) == VR_RANGE\n       && wi::leu_p (max - min, prec - 1))\n     {\n+      tree index_type = TREE_TYPE (index_expr);\n+      minval = fold_convert (index_type, minval);\n       wide_int iminval = wi::to_wide (minval);\n-      tree minval_type = TREE_TYPE (minval);\n-      if (wi::lt_p (min, iminval, TYPE_SIGN (minval_type)))\n+      if (wi::lt_p (min, iminval, TYPE_SIGN (index_type)))\n \t{\n-\t  minval = wide_int_to_tree (minval_type, min);\n+\t  minval = wide_int_to_tree (index_type, min);\n \t  for (i = 0; i < count; i++)\n \t    test[i].mask = wi::lshift (test[i].mask, iminval - min);\n \t}\n-      else if (wi::gt_p (min, iminval, TYPE_SIGN (minval_type)))\n+      else if (wi::gt_p (min, iminval, TYPE_SIGN (index_type)))\n \t{\n-\t  minval = wide_int_to_tree (minval_type, min);\n+\t  minval = wide_int_to_tree (index_type, min);\n \t  for (i = 0; i < count; i++)\n \t    test[i].mask = wi::lrshift (test[i].mask, min - iminval);\n \t}\n-      maxval = wide_int_to_tree (minval_type, max);\n+      maxval = wide_int_to_tree (index_type, max);\n       entry_test_needed = false;\n     }\n   else"}]}