{"sha": "520435ec6e7f89235bf0a17b82082498b4c0f7fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwNDM1ZWM2ZTdmODkyMzViZjBhMTdiODIwODI0OThiNGMwZjdmYw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-04-26T11:16:07Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-04-26T11:16:07Z"}, "message": "tree-if-conv.c (any_pred_load_store): New static variable.\n\n\t* tree-if-conv.c (any_pred_load_store): New static variable.\n\t(if_convertible_gimple_assign_stmt_p): Remove parameter.  Use\n\tany_pred_load_store instead of and_mask_load_store.\n\t(if_convertible_stmt_p, if_convertible_loop_p_1): Ditto.\n\t(if_convertible_loop_p, insert_gimplified_predicates): Ditto.\n\t(combine_blocks, tree_if_conversion): Ditto.\n\nFrom-SVN: r235437", "tree": {"sha": "69257d5be0ed6e86d5b636f584af904f7e0f207f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69257d5be0ed6e86d5b636f584af904f7e0f207f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/520435ec6e7f89235bf0a17b82082498b4c0f7fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520435ec6e7f89235bf0a17b82082498b4c0f7fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520435ec6e7f89235bf0a17b82082498b4c0f7fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520435ec6e7f89235bf0a17b82082498b4c0f7fc/comments", "author": null, "committer": null, "parents": [{"sha": "00f615afef5bed8d1ef1f9c11033b3995641fab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f615afef5bed8d1ef1f9c11033b3995641fab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f615afef5bed8d1ef1f9c11033b3995641fab2"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "dfc008167cc7813211d750d4ffbb633d24ba30c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520435ec6e7f89235bf0a17b82082498b4c0f7fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520435ec6e7f89235bf0a17b82082498b4c0f7fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=520435ec6e7f89235bf0a17b82082498b4c0f7fc", "patch": "@@ -1,3 +1,12 @@\n+2016-04-26  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-if-conv.c (any_pred_load_store): New static variable.\n+\t(if_convertible_gimple_assign_stmt_p): Remove parameter.  Use\n+\tany_pred_load_store instead of and_mask_load_store.\n+\t(if_convertible_stmt_p, if_convertible_loop_p_1): Ditto.\n+\t(if_convertible_loop_p, insert_gimplified_predicates): Ditto.\n+\t(combine_blocks, tree_if_conversion): Ditto.\n+\n 2016-04-26  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/70771"}, {"sha": "32ced164081c34f268be740a15153987fa76b81d", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520435ec6e7f89235bf0a17b82082498b4c0f7fc/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520435ec6e7f89235bf0a17b82082498b4c0f7fc/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=520435ec6e7f89235bf0a17b82082498b4c0f7fc", "patch": "@@ -113,6 +113,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"builtins.h\"\n #include \"params.h\"\n+ \n+/* Indicate if new load/store that needs to be predicated is introduced\n+   during if conversion.  */\n+static bool any_pred_load_store;\n \n /* Hash for struct innermost_loop_behavior.  It depends on the user to\n    free the memory.  */\n@@ -867,8 +871,7 @@ ifcvt_can_use_mask_load_store (gimple *stmt)\n \n static bool\n if_convertible_gimple_assign_stmt_p (gimple *stmt,\n-\t\t\t\t     vec<data_reference_p> refs,\n-\t\t\t\t     bool *any_mask_load_store)\n+\t\t\t\t     vec<data_reference_p> refs)\n {\n   tree lhs = gimple_assign_lhs (stmt);\n \n@@ -906,7 +909,7 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n       if (ifcvt_can_use_mask_load_store (stmt))\n \t{\n \t  gimple_set_plf (stmt, GF_PLF_2, true);\n-\t  *any_mask_load_store = true;\n+\t  any_pred_load_store = true;\n \t  return true;\n \t}\n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -917,7 +920,7 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n   /* When if-converting stores force versioning, likewise if we\n      ended up generating store data races.  */\n   if (gimple_vdef (stmt))\n-    *any_mask_load_store = true;\n+    any_pred_load_store = true;\n \n   return true;\n }\n@@ -930,8 +933,7 @@ if_convertible_gimple_assign_stmt_p (gimple *stmt,\n    - it is builtins call.  */\n \n static bool\n-if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs,\n-\t\t       bool *any_mask_load_store)\n+if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs)\n {\n   switch (gimple_code (stmt))\n     {\n@@ -941,8 +943,7 @@ if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs,\n       return true;\n \n     case GIMPLE_ASSIGN:\n-      return if_convertible_gimple_assign_stmt_p (stmt, refs,\n-\t\t\t\t\t\t  any_mask_load_store);\n+      return if_convertible_gimple_assign_stmt_p (stmt, refs);\n \n     case GIMPLE_CALL:\n       {\n@@ -1248,9 +1249,7 @@ predicate_bbs (loop_p loop)\n    in if_convertible_loop_p.  */\n \n static bool\n-if_convertible_loop_p_1 (struct loop *loop,\n-\t\t\t vec<data_reference_p> *refs,\n-\t\t\t bool *any_mask_load_store)\n+if_convertible_loop_p_1 (struct loop *loop, vec<data_reference_p> *refs)\n {\n   unsigned int i;\n   basic_block exit_bb = NULL;\n@@ -1354,8 +1353,7 @@ if_convertible_loop_p_1 (struct loop *loop,\n       /* Check the if-convertibility of statements in predicated BBs.  */\n       if (!dominated_by_p (CDI_DOMINATORS, loop->latch, bb))\n \tfor (itr = gsi_start_bb (bb); !gsi_end_p (itr); gsi_next (&itr))\n-\t  if (!if_convertible_stmt_p (gsi_stmt (itr), *refs,\n-\t\t\t\t      any_mask_load_store))\n+\t  if (!if_convertible_stmt_p (gsi_stmt (itr), *refs))\n \t    return false;\n     }\n \n@@ -1389,7 +1387,7 @@ if_convertible_loop_p_1 (struct loop *loop,\n    - if its basic blocks and phi nodes are if convertible.  */\n \n static bool\n-if_convertible_loop_p (struct loop *loop, bool *any_mask_load_store)\n+if_convertible_loop_p (struct loop *loop)\n {\n   edge e;\n   edge_iterator ei;\n@@ -1427,7 +1425,7 @@ if_convertible_loop_p (struct loop *loop, bool *any_mask_load_store)\n       return false;\n \n   refs.create (5);\n-  res = if_convertible_loop_p_1 (loop, &refs, any_mask_load_store);\n+  res = if_convertible_loop_p_1 (loop, &refs);\n \n   data_reference_p dr;\n   unsigned int i;\n@@ -1896,7 +1894,7 @@ predicate_all_scalar_phis (struct loop *loop)\n    gimplification of the predicates.  */\n \n static void\n-insert_gimplified_predicates (loop_p loop, bool any_mask_load_store)\n+insert_gimplified_predicates (loop_p loop)\n {\n   unsigned int i;\n \n@@ -1918,7 +1916,7 @@ insert_gimplified_predicates (loop_p loop, bool any_mask_load_store)\n       stmts = bb_predicate_gimplified_stmts (bb);\n       if (stmts)\n \t{\n-\t  if (any_mask_load_store)\n+\t  if (any_pred_load_store)\n \t    {\n \t      /* Insert the predicate of the BB just after the label,\n \t\t as the if-conversion of memory writes will use this\n@@ -2228,7 +2226,7 @@ remove_conditions_and_labels (loop_p loop)\n    blocks.  Replace PHI nodes with conditional modify expressions.  */\n \n static void\n-combine_blocks (struct loop *loop, bool any_mask_load_store)\n+combine_blocks (struct loop *loop)\n {\n   basic_block bb, exit_bb, merge_target_bb;\n   unsigned int orig_loop_num_nodes = loop->num_nodes;\n@@ -2238,10 +2236,10 @@ combine_blocks (struct loop *loop, bool any_mask_load_store)\n \n   predicate_bbs (loop);\n   remove_conditions_and_labels (loop);\n-  insert_gimplified_predicates (loop, any_mask_load_store);\n+  insert_gimplified_predicates (loop);\n   predicate_all_scalar_phis (loop);\n \n-  if (any_mask_load_store)\n+  if (any_pred_load_store)\n     predicate_mem_writes (loop);\n \n   /* Merge basic blocks: first remove all the edges in the loop,\n@@ -2716,7 +2714,7 @@ tree_if_conversion (struct loop *loop)\n {\n   unsigned int todo = 0;\n   ifc_bbs = NULL;\n-  bool any_mask_load_store = false;\n+  any_pred_load_store = false;\n \n   /* Set up aggressive if-conversion for loops marked with simd pragma.  */\n   aggressive_if_conv = loop->force_vectorize;\n@@ -2732,22 +2730,22 @@ tree_if_conversion (struct loop *loop)\n     if (!ifcvt_split_critical_edges (loop))\n       goto cleanup;\n \n-  if (!if_convertible_loop_p (loop, &any_mask_load_store)\n+  if (!if_convertible_loop_p (loop)\n       || !dbg_cnt (if_conversion_tree))\n     goto cleanup;\n \n-  if (any_mask_load_store\n+  if (any_pred_load_store\n       && ((!flag_tree_loop_vectorize && !loop->force_vectorize)\n \t  || loop->dont_vectorize))\n     goto cleanup;\n \n-  if (any_mask_load_store && !version_loop_for_if_conversion (loop))\n+  if (any_pred_load_store && !version_loop_for_if_conversion (loop))\n     goto cleanup;\n \n   /* Now all statements are if-convertible.  Combine all the basic\n      blocks into one huge basic block doing the if-conversion\n      on-the-fly.  */\n-  combine_blocks (loop, any_mask_load_store);\n+  combine_blocks (loop);\n \n   /* Delete dead predicate computations and repair tree correspondent\n      to bool pattern to delete multiple uses of predicates.  */"}]}