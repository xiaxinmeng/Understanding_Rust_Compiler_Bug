{"sha": "55e8f926f260342e0b89765a306a3027daeaa10e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVlOGY5MjZmMjYwMzQyZTBiODk3NjVhMzA2YTMwMjdkYWVhYTEwZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-09-05T13:40:17Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-09-05T13:40:17Z"}, "message": "re PR target/91615 ([armeb] ICEs since r274986)\n\n2019-09-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/91615\n        * expr.c (expand_expr_real_1): Handle misaligned TARGET_MEM_REF\n        without movmisalign optab.\n\nFrom-SVN: r275409", "tree": {"sha": "25c1b4373437ace18c3e38d785f91c245d6a530e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c1b4373437ace18c3e38d785f91c245d6a530e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55e8f926f260342e0b89765a306a3027daeaa10e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e8f926f260342e0b89765a306a3027daeaa10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e8f926f260342e0b89765a306a3027daeaa10e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e8f926f260342e0b89765a306a3027daeaa10e/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "728347922a60d5e560a4071d23c492e8baeab115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728347922a60d5e560a4071d23c492e8baeab115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728347922a60d5e560a4071d23c492e8baeab115"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "6caf6357e48fe5f27e89aee9b6950278c0049777", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e8f926f260342e0b89765a306a3027daeaa10e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e8f926f260342e0b89765a306a3027daeaa10e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55e8f926f260342e0b89765a306a3027daeaa10e", "patch": "@@ -1,3 +1,9 @@\n+2019-09-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/91615\n+\t* expr.c (expand_expr_real_1): Handle misaligned TARGET_MEM_REF\n+\twithout movmisalign optab.\n+\n 2019-09-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91001"}, {"sha": "3f4c98c3f6e8341ae5a0c6bb11c29373e9cd5b1d", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e8f926f260342e0b89765a306a3027daeaa10e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e8f926f260342e0b89765a306a3027daeaa10e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=55e8f926f260342e0b89765a306a3027daeaa10e", "patch": "@@ -10313,7 +10313,6 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n       {\n \taddr_space_t as\n \t  = TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))));\n-\tenum insn_code icode;\n \tunsigned int align;\n \n \top0 = addr_for_mem_ref (exp, as, true);\n@@ -10325,21 +10324,27 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tif (modifier != EXPAND_WRITE\n \t    && modifier != EXPAND_MEMORY\n \t    && mode != BLKmode\n-\t    && align < GET_MODE_ALIGNMENT (mode)\n-\t    /* If the target does not have special handling for unaligned\n-\t       loads of mode then it can use regular moves for them.  */\n-\t    && ((icode = optab_handler (movmisalign_optab, mode))\n-\t\t!= CODE_FOR_nothing))\n+\t    && align < GET_MODE_ALIGNMENT (mode))\n \t  {\n-\t    class expand_operand ops[2];\n+\t    enum insn_code icode;\n \n-\t    /* We've already validated the memory, and we're creating a\n-\t       new pseudo destination.  The predicates really can't fail,\n-\t       nor can the generator.  */\n-\t    create_output_operand (&ops[0], NULL_RTX, mode);\n-\t    create_fixed_operand (&ops[1], temp);\n-\t    expand_insn (icode, 2, ops);\n-\t    temp = ops[0].value;\n+\t    if ((icode = optab_handler (movmisalign_optab, mode))\n+\t\t!= CODE_FOR_nothing)\n+\t      {\n+\t\tclass expand_operand ops[2];\n+\n+\t\t/* We've already validated the memory, and we're creating a\n+\t\t   new pseudo destination.  The predicates really can't fail,\n+\t\t   nor can the generator.  */\n+\t\tcreate_output_operand (&ops[0], NULL_RTX, mode);\n+\t\tcreate_fixed_operand (&ops[1], temp);\n+\t\texpand_insn (icode, 2, ops);\n+\t\ttemp = ops[0].value;\n+\t      }\n+\t    else if (targetm.slow_unaligned_access (mode, align))\n+\t      temp = extract_bit_field (temp, GET_MODE_BITSIZE (mode),\n+\t\t\t\t\t0, unsignedp, NULL_RTX,\n+\t\t\t\t\tmode, mode, false, NULL);\n \t  }\n \treturn temp;\n       }"}]}