{"sha": "413519aef85273d74fab2b26aff5ee339c29dc8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzNTE5YWVmODUyNzNkNzRmYWIyYjI2YWZmNWVlMzM5YzI5ZGM4Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-04T10:17:11Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-04T10:17:11Z"}, "message": "options.texi (ToLower): Document.\n\n\t* doc/options.texi (ToLower): Document.\n\t* opt-functions.awk (switch_bit_fields): Initialize cl_tolower\n\tfield.\n\t* opts-common.c (decode_cmdline_option): Handle cl_tolower.\n\t* opts.h (cl_option): Add cl_tolower field.\n\t* config/rx/rx.c (rx_handle_option): Use strcmp of -mcpu=\n\targuments with lowercase strings.\n\t* config/rx/rx.opt (mcpu=): Add ToLower.\n\t* config/rx/t-rx (MULTILIB_MATCHES): Don't handle uppercase -mcpu=\n\targument.\n\nFrom-SVN: r171932", "tree": {"sha": "80b585242934f43f5933e85676bd17af4fba0f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80b585242934f43f5933e85676bd17af4fba0f01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413519aef85273d74fab2b26aff5ee339c29dc8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413519aef85273d74fab2b26aff5ee339c29dc8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413519aef85273d74fab2b26aff5ee339c29dc8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413519aef85273d74fab2b26aff5ee339c29dc8f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aeaa366ad0dff200eb4c9b660b24a150f69f6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aeaa366ad0dff200eb4c9b660b24a150f69f6a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aeaa366ad0dff200eb4c9b660b24a150f69f6a6"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "4447037cbc61887f45acd5e4237684e4204e757f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -1,3 +1,16 @@\n+2011-04-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/options.texi (ToLower): Document.\n+\t* opt-functions.awk (switch_bit_fields): Initialize cl_tolower\n+\tfield.\n+\t* opts-common.c (decode_cmdline_option): Handle cl_tolower.\n+\t* opts.h (cl_option): Add cl_tolower field.\n+\t* config/rx/rx.c (rx_handle_option): Use strcmp of -mcpu=\n+\targuments with lowercase strings.\n+\t* config/rx/rx.opt (mcpu=): Add ToLower.\n+\t* config/rx/t-rx (MULTILIB_MATCHES): Don't handle uppercase -mcpu=\n+\targument.\n+\n 2011-04-04  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/pdp11/pdp11.h (IRA_COVER_CLASSES): Delete."}, {"sha": "f0a97abd500cfe0e66e3f8e77b9e380a2a004423", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -2308,14 +2308,14 @@ rx_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n       return value >= 0 && value <= 4;\n \n     case OPT_mcpu_:\n-      if (strcasecmp (arg, \"RX610\") == 0)\n+      if (strcmp (arg, \"rx610\") == 0)\n \trx_cpu_type = RX610;\n-      else if (strcasecmp (arg, \"RX200\") == 0)\n+      else if (strcmp (arg, \"rx200\") == 0)\n \t{\n \t  target_flags |= MASK_NO_USE_FPU;\n \t  rx_cpu_type = RX200;\n \t}\n-      else if (strcasecmp (arg, \"RX600\") != 0)\n+      else if (strcmp (arg, \"rx600\") != 0)\n \twarning (0, \"unrecognized argument '%s' to -mcpu= option\", arg);\n       break;\n       "}, {"sha": "99f262c07736a678284a613c77c402ed7a003a5a", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -1,5 +1,5 @@\n ; Command line options for the Renesas RX port of GCC.\n-; Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n ; Contributed by Red Hat.\n ;\n ; This file is part of GCC.\n@@ -43,7 +43,7 @@ Enable the use of RX FPU instructions.  This is the default.\n ;---------------------------------------------------\n \n mcpu=\n-Target RejectNegative Joined Var(rx_cpu_name) Report\n+Target RejectNegative Joined Var(rx_cpu_name) Report ToLower\n Specify the target RX cpu type.\n \n ;---------------------------------------------------"}, {"sha": "3889314398151a6d464b277acfbda9907cafaaae", "filename": "gcc/config/rx/t-rx", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-rx?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -1,5 +1,5 @@\n # Makefile fragment for building GCC for the Renesas RX target.\n-# Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n # Contributed by Red Hat.\n #\n # This file is part of GCC.\n@@ -23,7 +23,7 @@\n MULTILIB_OPTIONS    = m64bit-doubles  nofpu        mbig-endian-data \n MULTILIB_DIRNAMES   =  64-bit-double  no-fpu-libs   big-endian-data \n \n-MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200  nofpu=mcpu?RX200\n+MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200\n \n MULTILIB_EXCEPTIONS =\n MULTILIB_EXTRA_OPTS = "}, {"sha": "69e73645893b62203e1fcdc53730e0c2546548a2", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -257,6 +257,11 @@ option handler.  @code{UInteger} should also be used on options like\n @code{-falign-loops}=@var{n} are supported to make sure the saved\n options are given a full integer.\n \n+@item ToLower\n+The option's argument should be converted to lowercase as part of\n+putting it in canonical form, and before comparing with the strings\n+indicated by any @code{Enum} property.\n+\n @item NoDriverArg\n For an option marked @code{Separate}, the option only takes an\n argument in the compiler proper, not in the driver.  This is for"}, {"sha": "68575790e52cfbde8c8c8b8135e7c4cbb75ff066", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -126,6 +126,7 @@ function switch_bit_fields (flags)\n \t  flag_init(\"RejectNegative\", flags) \\\n \t  flag_init(\"JoinedOrMissing\", flags) \\\n \t  flag_init(\"UInteger\", flags) \\\n+\t  flag_init(\"ToLower\", flags) \\\n \t  flag_init(\"Report\", flags)\n \n \tsub(\", $\", \"\", result)"}, {"sha": "e314cb35213e7881cf04f520f0fb862c9a477c54", "filename": "gcc/opts-common.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -567,6 +567,19 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   if (!option_ok_for_language (option, lang_mask))\n     errors |= CL_ERR_WRONG_LANG;\n \n+  /* Convert the argument to lowercase if appropriate.  */\n+  if (arg && option->cl_tolower)\n+    {\n+      size_t j;\n+      size_t len = strlen (arg);\n+      char *arg_lower = XNEWVEC (char, len + 1);\n+\n+      for (j = 0; j < len; j++)\n+\targ_lower[j] = TOLOWER ((unsigned char) arg[j]);\n+      arg_lower[len] = 0;\n+      arg = arg_lower;\n+    }\n+\n   /* If the switch takes an integer, convert it.  */\n   if (arg && option->cl_uinteger)\n     {"}, {"sha": "c0c597f860144d7f7059908802ee9ae153f8295d", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413519aef85273d74fab2b26aff5ee339c29dc8f/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=413519aef85273d74fab2b26aff5ee339c29dc8f", "patch": "@@ -96,6 +96,8 @@ struct cl_option\n   BOOL_BITFIELD cl_missing_ok : 1;\n   /* Argument is an integer >=0.  */\n   BOOL_BITFIELD cl_uinteger : 1;\n+  /* Argument should be converted to lowercase.  */\n+  BOOL_BITFIELD cl_tolower : 1;\n   /* Report argument with -fverbose-asm  */\n   BOOL_BITFIELD cl_report : 1;\n   /* Offset of field for this option in struct gcc_options, or"}]}