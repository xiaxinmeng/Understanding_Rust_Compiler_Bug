{"sha": "ccd02e734e0f1742629403b46e5b1c650b00fd65", "node_id": "C_kwDOANBUbNoAKGNjZDAyZTczNGUwZjE3NDI2Mjk0MDNiNDZlNWIxYzY1MGIwMGZkNjU", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-10T04:19:32Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-11T20:15:30Z"}, "message": "xtensa: Improve instruction cost estimation and suggestion\n\nThis patch implements a new target-specific relative RTL insn cost function\nbecause of suboptimal cost estimation by default, and fixes several \"length\"\ninsn attributes (related to the cost estimation).\n\nAnd also introduces a new machine-dependent option \"-mextra-l32r-costs=\"\nthat tells implementation-specific InstRAM/ROM access penalty for L32R\ninstruction to the compiler (in clock-cycle units, 0 by default).\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa.cc (xtensa_rtx_costs): Correct wrong case\n\tfor ABS and NEG, add missing case for BSWAP and CLRSB, and\n\tdouble the costs for integer divisions using libfuncs if\n\toptimizing for speed, in order to take advantage of fast constant\n\tdivision by multiplication.\n\t(TARGET_INSN_COST): New macro definition.\n\t(xtensa_is_insn_L32R_p, xtensa_insn_cost): New functions for\n\tcalculating relative costs of a RTL insns, for both of speed and\n\tsize.\n\t* config/xtensa/xtensa.md (return, nop, trap): Correct values of\n\tthe attribute \"length\" that depends on TARGET_DENSITY.\n\t(define_asm_attributes, blockage, frame_blockage): Add missing\n\tattributes.\n\t* config/xtensa/xtensa.opt (-mextra-l32r-costs=): New machine-\n\tdependent option, however, preparatory work for now.", "tree": {"sha": "132b6c5a54d45fb302361a7144a62e7ca6826e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132b6c5a54d45fb302361a7144a62e7ca6826e1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccd02e734e0f1742629403b46e5b1c650b00fd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd02e734e0f1742629403b46e5b1c650b00fd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd02e734e0f1742629403b46e5b1c650b00fd65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd02e734e0f1742629403b46e5b1c650b00fd65/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fddf0e1057fe24eff0d894fbc2959b4086464a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddf0e1057fe24eff0d894fbc2959b4086464a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fddf0e1057fe24eff0d894fbc2959b4086464a96"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "597a36e1a97341095ac9964cf54d7bd2a60cf26e", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 108, "deletions": 8, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd02e734e0f1742629403b46e5b1c650b00fd65/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd02e734e0f1742629403b46e5b1c650b00fd65/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=ccd02e734e0f1742629403b46e5b1c650b00fd65", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"hw-doloop.h\"\n #include \"rtl-iter.h\"\n+#include \"insn-attr.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -134,6 +135,7 @@ static unsigned int xtensa_multibss_section_type_flags (tree, const char *,\n static section *xtensa_select_rtx_section (machine_mode, rtx,\n \t\t\t\t\t   unsigned HOST_WIDE_INT);\n static bool xtensa_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n+static int xtensa_insn_cost (rtx_insn *, bool);\n static int xtensa_register_move_cost (machine_mode, reg_class_t,\n \t\t\t\t      reg_class_t);\n static int xtensa_memory_move_cost (machine_mode, reg_class_t, bool);\n@@ -212,6 +214,8 @@ static rtx xtensa_delegitimize_address (rtx);\n #define TARGET_MEMORY_MOVE_COST xtensa_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS xtensa_rtx_costs\n+#undef TARGET_INSN_COST\n+#define TARGET_INSN_COST xtensa_insn_cost\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n \n@@ -3937,7 +3941,7 @@ xtensa_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n static bool\n xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t\t  int opno ATTRIBUTE_UNUSED,\n-\t\t  int *total, bool speed ATTRIBUTE_UNUSED)\n+\t\t  int *total, bool speed)\n {\n   int code = GET_CODE (x);\n \n@@ -4025,9 +4029,14 @@ xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n       return true;\n \n     case CLZ:\n+    case CLRSB:\n       *total = COSTS_N_INSNS (TARGET_NSA ? 1 : 50);\n       return true;\n \n+    case BSWAP:\n+      *total = COSTS_N_INSNS (mode == HImode ? 3 : 5);\n+      return true;\n+\n     case NOT:\n       *total = COSTS_N_INSNS (mode == DImode ? 3 : 2);\n       return true;\n@@ -4051,13 +4060,16 @@ xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n       return true;\n \n     case ABS:\n+    case NEG:\n       {\n \tif (mode == SFmode)\n \t  *total = COSTS_N_INSNS (TARGET_HARD_FLOAT ? 1 : 50);\n \telse if (mode == DFmode)\n \t  *total = COSTS_N_INSNS (50);\n-\telse\n+\telse if (mode == DImode)\n \t  *total = COSTS_N_INSNS (4);\n+\telse\n+\t  *total = COSTS_N_INSNS (1);\n \treturn true;\n       }\n \n@@ -4073,10 +4085,6 @@ xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \treturn true;\n       }\n \n-    case NEG:\n-      *total = COSTS_N_INSNS (mode == DImode ? 4 : 2);\n-      return true;\n-\n     case MULT:\n       {\n \tif (mode == SFmode)\n@@ -4116,11 +4124,11 @@ xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     case UMOD:\n       {\n \tif (mode == DImode)\n-\t  *total = COSTS_N_INSNS (50);\n+\t  *total = COSTS_N_INSNS (speed ? 100 : 50);\n \telse if (TARGET_DIV32)\n \t  *total = COSTS_N_INSNS (32);\n \telse\n-\t  *total = COSTS_N_INSNS (50);\n+\t  *total = COSTS_N_INSNS (speed ? 100 : 50);\n \treturn true;\n       }\n \n@@ -4153,6 +4161,98 @@ xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     }\n }\n \n+static bool\n+xtensa_is_insn_L32R_p(const rtx_insn *insn)\n+{\n+  rtx x = PATTERN (insn);\n+\n+  if (GET_CODE (x) == SET)\n+    {\n+      x = XEXP (x, 1);\n+      if (GET_CODE (x) == MEM)\n+\t{\n+\t  x = XEXP (x, 0);\n+\t  return (GET_CODE (x) == SYMBOL_REF || CONST_INT_P (x))\n+\t\t && CONSTANT_POOL_ADDRESS_P (x);\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+/* Compute a relative costs of RTL insns.  This is necessary in order to\n+   achieve better RTL insn splitting/combination result.  */\n+\n+static int\n+xtensa_insn_cost (rtx_insn *insn, bool speed)\n+{\n+  if (!(recog_memoized (insn) < 0))\n+    {\n+      int len = get_attr_length (insn), n = (len + 2) / 3;\n+\n+      if (len == 0)\n+\treturn COSTS_N_INSNS (0);\n+\n+      if (speed)  /* For speed cost.  */\n+\t{\n+\t  /* \"L32R\" may be particular slow (implementation-dependent).  */\n+\t  if (xtensa_is_insn_L32R_p (insn))\n+\t    return COSTS_N_INSNS (1 + xtensa_extra_l32r_costs);\n+\n+\t  /* Cost based on the pipeline model.  */\n+\t  switch (get_attr_type (insn))\n+\t    {\n+\t    case TYPE_STORE:\n+\t    case TYPE_MOVE:\n+\t    case TYPE_ARITH:\n+\t    case TYPE_MULTI:\n+\t    case TYPE_NOP:\n+\t    case TYPE_FSTORE:\n+\t      return COSTS_N_INSNS (n);\n+\n+\t    case TYPE_LOAD:\n+\t      return COSTS_N_INSNS (n - 1 + 2);\n+\n+\t    case TYPE_JUMP:\n+\t    case TYPE_CALL:\n+\t      return COSTS_N_INSNS (n - 1 + 3);\n+\n+\t    case TYPE_FCONV:\n+\t    case TYPE_FLOAD:\n+\t    case TYPE_MUL16:\n+\t    case TYPE_MUL32:\n+\t    case TYPE_RSR:\n+\t      return COSTS_N_INSNS (n * 2);\n+\n+\t    case TYPE_FMADD:\n+\t      return COSTS_N_INSNS (n * 4);\n+\n+\t    case TYPE_DIV32:\n+\t      return COSTS_N_INSNS (n * 16);\n+\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n+      else  /* For size cost.  */\n+\t{\n+\t  /* Cost based on the instruction length.  */\n+\t  if (get_attr_type (insn) != TYPE_UNKNOWN)\n+\t    {\n+\t      /* \"L32R\" itself plus constant in litpool.  */\n+\t      if (xtensa_is_insn_L32R_p (insn))\n+\t\treturn COSTS_N_INSNS (2) + 1;\n+\n+\t      /* Consider \".n\" short instructions.  */\n+\t      return COSTS_N_INSNS (n) - (n * 3 - len);\n+\t    }\n+\t}\n+    }\n+\n+  /* Fall back.  */\n+  return pattern_cost (PATTERN (insn), speed);\n+}\n+\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool"}, {"sha": "f6c6be4af2420dbbf37c069b93d7460ba10584d9", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd02e734e0f1742629403b46e5b1c650b00fd65/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd02e734e0f1742629403b46e5b1c650b00fd65/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=ccd02e734e0f1742629403b46e5b1c650b00fd65", "patch": "@@ -98,7 +98,10 @@\n \n ;; Describe a user's asm statement.\n (define_asm_attributes\n-  [(set_attr \"type\" \"multi\")])\n+  [(set_attr \"type\"\t\"multi\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"3\")])  ;; Should be the maximum possible length\n+\t\t\t\t;; of a single machine instruction.\n \n \f\n ;; Pipeline model.\n@@ -1879,7 +1882,10 @@\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"2\")])\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"TARGET_DENSITY\")\n+\t\t      (const_int 2)\n+\t\t      (const_int 3)))])\n \n \f\n ;; Miscellaneous instructions.\n@@ -1934,7 +1940,10 @@\n }\n   [(set_attr \"type\"\t\"nop\")\n    (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"3\")])\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"TARGET_DENSITY\")\n+\t\t      (const_int 2)\n+\t\t      (const_int 3)))])\n \n (define_expand \"nonlocal_goto\"\n   [(match_operand:SI 0 \"general_operand\" \"\")\n@@ -1998,8 +2007,9 @@\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)]\n   \"\"\n   \"\"\n-  [(set_attr \"length\" \"0\")\n-   (set_attr \"type\" \"nop\")])\n+  [(set_attr \"type\"\t\"nop\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"0\")])\n \n ;; Do not schedule instructions accessing memory before this point.\n \n@@ -2018,7 +2028,9 @@\n         (unspec:BLK [(match_operand:SI 1 \"\" \"\")] UNSPEC_FRAME_BLOCKAGE))]\n   \"\"\n   \"\"\n-  [(set_attr \"length\" \"0\")])\n+  [(set_attr \"type\"\t\"nop\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"0\")])\n \n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]\n@@ -2031,7 +2043,10 @@\n }\n   [(set_attr \"type\"\t\"trap\")\n    (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"3\")])\n+   (set (attr \"length\")\n+\t(if_then_else (match_test \"!TARGET_DEBUG && TARGET_DENSITY\")\n+\t\t      (const_int 2)\n+\t\t      (const_int 3)))])\n \n ;; Setting up a frame pointer is tricky for Xtensa because GCC doesn't\n ;; know if a frame pointer is required until the reload pass, and"}, {"sha": "08338e39060b166d994c4a2f49c8151259df7d47", "filename": "gcc/config/xtensa/xtensa.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd02e734e0f1742629403b46e5b1c650b00fd65/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd02e734e0f1742629403b46e5b1c650b00fd65/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt?ref=ccd02e734e0f1742629403b46e5b1c650b00fd65", "patch": "@@ -30,6 +30,10 @@ mlongcalls\n Target Mask(LONGCALLS)\n Use indirect CALLXn instructions for large programs.\n \n+mextra-l32r-costs=\n+Target RejectNegative Joined UInteger Var(xtensa_extra_l32r_costs) Init(0)\n+Set extra memory access cost for L32R instruction, in clock-cycle units.\n+\n mtarget-align\n Target\n Automatically align branch targets to reduce branch penalties."}]}