{"sha": "d750d0def7a6f560292abcb8d6fab830724bc5f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1MGQwZGVmN2E2ZjU2MDI5MmFiY2I4ZDZmYWI4MzA3MjRiYzVmMw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-04-26T16:59:55Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-04-26T16:59:55Z"}, "message": "(memop define_splits): Rewrite to not use memop.\n\nPreserve MEM_IN_STRUCT_P, MEM_VOLATILE_P, RTX_UNCHANGING_P bits.\n\nFrom-SVN: r9476", "tree": {"sha": "af4903759ba8cfb099fb45630b406846cf90066f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4903759ba8cfb099fb45630b406846cf90066f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d750d0def7a6f560292abcb8d6fab830724bc5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d750d0def7a6f560292abcb8d6fab830724bc5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d750d0def7a6f560292abcb8d6fab830724bc5f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d750d0def7a6f560292abcb8d6fab830724bc5f3/comments", "author": null, "committer": null, "parents": [{"sha": "33cf5823a5cb6439135e3820e924695819a4759f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cf5823a5cb6439135e3820e924695819a4759f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33cf5823a5cb6439135e3820e924695819a4759f"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "841195f783ca4f9071b3a8c8d6228f137247fe9e", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d750d0def7a6f560292abcb8d6fab830724bc5f3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d750d0def7a6f560292abcb8d6fab830724bc5f3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d750d0def7a6f560292abcb8d6fab830724bc5f3", "patch": "@@ -5238,56 +5238,71 @@\n ;; either before or after register allocation.\n \n (define_split\n-  [(set (match_operator 0 \"memop\" [(match_operand:SI 1 \"symbolic_operand\" \"\")])\n-\t(match_operand 2 \"reg_or_0_operand\" \"\"))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand 0 \"splittable_symbolic_memory_operand\" \"\")\n+\t(match_operand 1 \"reg_or_0_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"! flag_pic\"\n-  [(set (match_dup 3) (high:SI (match_dup 1)))\n-   (set (match_op_dup 0 [(lo_sum:SI (match_dup 3) (match_dup 1))])\n-\t(match_dup 2))]\n-  \"\")\n+  [(set (match_dup 2) (high:SI (match_dup 3)))\n+   (set (match_dup 4) (match_dup 1))]\n+  \"\n+{\n+  operands[3] = XEXP (operands[0], 0);\n+  operands[4] = gen_rtx (MEM, GET_MODE (operands[0]),\n+\t\t\t gen_rtx (LO_SUM, SImode, operands[2], operands[3]));\n+  MEM_IN_STRUCT_P (operands[4]) = MEM_IN_STRUCT_P (operands[0]);\n+  MEM_VOLATILE_P (operands[4]) = MEM_VOLATILE_P (operands[0]);\n+  RTX_UNCHANGING_P (operands[4]) = RTX_UNCHANGING_P (operands[0]);\n+}\")\n \n (define_split\n-  [(set (match_operator 0 \"memop\"\n-\t\t\t[(match_operand:SI 1 \"immediate_operand\" \"\")])\n-\t(match_operand 2 \"general_operand\" \"\"))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  [(set (match_operand 0 \"splittable_immediate_memory_operand\" \"\")\n+\t(match_operand 1 \"general_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"flag_pic\"\n-  [(set (match_op_dup 0 [(match_dup 1)])\n-\t(match_dup 2))]\n+  [(set (match_dup 3) (match_dup 1))]\n   \"\n {\n-  operands[1] = legitimize_pic_address (operands[1], GET_MODE (operands[0]),\n-\t\t\t\t\toperands[3]);\n+  rtx addr = legitimize_pic_address (XEXP (operands[0], 0),\n+\t\t\t\t     GET_MODE (operands[0]),\n+\t\t\t\t     operands[2]);\n+  operands[3] = gen_rtx (MEM, GET_MODE (operands[0]), addr);\n+  MEM_IN_STRUCT_P (operands[3]) = MEM_IN_STRUCT_P (operands[0]);\n+  MEM_VOLATILE_P (operands[3]) = MEM_VOLATILE_P (operands[0]);\n+  RTX_UNCHANGING_P (operands[3]) = RTX_UNCHANGING_P (operands[0]);\n }\")\n \n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n-\t(match_operator 1 \"memop\"\n-\t\t\t[(match_operand:SI 2 \"immediate_operand\" \"\")]))]\n+\t(match_operand 1 \"splittable_immediate_memory_operand\" \"\"))]\n   \"flag_pic\"\n-  [(set (match_dup 0)\n-\t(match_op_dup 1 [(match_dup 2)]))]\n+  [(set (match_dup 0) (match_dup 2))]\n   \"\n {\n-  operands[2] = legitimize_pic_address (operands[2], GET_MODE (operands[1]),\n-\t\t\t\t\toperands[0]);\n+  rtx addr = legitimize_pic_address (XEXP (operands[1], 0),\n+\t\t\t\t     GET_MODE (operands[1]),\n+\t\t\t\t     operands[0]);\n+  operands[2] = gen_rtx (MEM, GET_MODE (operands[1]), addr);\n+  MEM_IN_STRUCT_P (operands[2]) = MEM_IN_STRUCT_P (operands[1]);\n+  MEM_VOLATILE_P (operands[2]) = MEM_VOLATILE_P (operands[1]);\n+  RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n }\")\n \n ;; Sign- and Zero-extend operations can have symbolic memory operands.\n \n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n-\t(match_operator 1 \"extend_op\"\n-\t\t\t[(match_operator 2 \"memop\"\n-\t\t\t\t\t [(match_operand:SI 3 \"immediate_operand\" \"\")])]))]\n+\t(match_operator 1 \"extend_op\" [(match_operand 2 \"splittable_immediate_memory_operand\" \"\")]))]\n   \"flag_pic\"\n-  [(set (match_dup 0)\n-\t(match_op_dup 1 [(match_op_dup 2 [(match_dup 3)])]))]\n+  [(set (match_dup 0) (match_op_dup 1 [(match_dup 3)]))]\n   \"\n {\n-  operands[3] = legitimize_pic_address (operands[3], GET_MODE (operands[2]),\n-\t\t\t\t\toperands[0]);\n+  rtx addr = legitimize_pic_address (XEXP (operands[2], 0),\n+\t\t\t\t     GET_MODE (operands[2]),\n+\t\t\t\t     operands[0]);\n+  operands[3] = gen_rtx (MEM, GET_MODE (operands[2]), addr);\n+  MEM_IN_STRUCT_P (operands[3]) = MEM_IN_STRUCT_P (operands[2]);\n+  MEM_VOLATILE_P (operands[3]) = MEM_VOLATILE_P (operands[2]);\n+  RTX_UNCHANGING_P (operands[3]) = RTX_UNCHANGING_P (operands[2]);\n }\")\n \n (define_split"}]}