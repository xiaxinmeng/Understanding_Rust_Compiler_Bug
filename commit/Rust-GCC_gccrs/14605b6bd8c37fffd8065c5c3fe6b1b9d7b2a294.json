{"sha": "14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2MDViNmJkOGMzN2ZmZmQ4MDY1YzVjM2ZlNmIxYjlkN2IyYTI5NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-12T08:01:12Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-12T08:01:12Z"}, "message": "tree-vect-generic: Tweak build_replicated_const [PR94980 2/3]\n\nThis patch makes build_replicated_const take the number of bits\nin VALUE rather than calculating the width from the element type.\nThe callers can then use vector_element_bits to calculate the\ncorrect element size from the vector type.\n\n2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/94980\n\t* tree-vect-generic.c (build_replicated_const): Take the number\n\tof bits as a parameter, instead of the type of the elements.\n\t(do_plus_minus): Update accordingly, using vector_element_bits\n\tto calculate the correct number of bits.\n\t(do_negate): Likewise.", "tree": {"sha": "fef1c5025d2ab05315c5357596506ec5e8e55165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fef1c5025d2ab05315c5357596506ec5e8e55165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17a896da1e898928d337596d029f0ece0039d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17a896da1e898928d337596d029f0ece0039d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17a896da1e898928d337596d029f0ece0039d55"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "bcaad02166c1495bfb9ac2861c4bfda759beabb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "patch": "@@ -1,3 +1,12 @@\n+2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94980\n+\t* tree-vect-generic.c (build_replicated_const): Take the number\n+\tof bits as a parameter, instead of the type of the elements.\n+\t(do_plus_minus): Update accordingly, using vector_element_bits\n+\tto calculate the correct number of bits.\n+\t(do_negate): Likewise.\n+\n 2020-05-12  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94980"}, {"sha": "adea9337a976f558d259c9c040830c00a02e19e1", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294", "patch": "@@ -67,11 +67,10 @@ subparts_gt (tree type1, tree type2)\n }\n \n /* Build a constant of type TYPE, made of VALUE's bits replicated\n-   every TYPE_SIZE (INNER_TYPE) bits to fit TYPE's precision.  */\n+   every WIDTH bits to fit TYPE's precision.  */\n static tree\n-build_replicated_const (tree type, tree inner_type, HOST_WIDE_INT value)\n+build_replicated_const (tree type, unsigned int width, HOST_WIDE_INT value)\n {\n-  int width = tree_to_uhwi (TYPE_SIZE (inner_type));\n   int n = (TYPE_PRECISION (type) + HOST_BITS_PER_WIDE_INT - 1) \n     / HOST_BITS_PER_WIDE_INT;\n   unsigned HOST_WIDE_INT low, mask;\n@@ -214,13 +213,14 @@ do_plus_minus (gimple_stmt_iterator *gsi, tree word_type, tree a, tree b,\n \t       tree bitpos ATTRIBUTE_UNUSED, tree bitsize ATTRIBUTE_UNUSED,\n \t       enum tree_code code, tree type ATTRIBUTE_UNUSED)\n {\n+  unsigned int width = vector_element_bits (TREE_TYPE (a));\n   tree inner_type = TREE_TYPE (TREE_TYPE (a));\n   unsigned HOST_WIDE_INT max;\n   tree low_bits, high_bits, a_low, b_low, result_low, signs;\n \n   max = GET_MODE_MASK (TYPE_MODE (inner_type));\n-  low_bits = build_replicated_const (word_type, inner_type, max >> 1);\n-  high_bits = build_replicated_const (word_type, inner_type, max & ~(max >> 1));\n+  low_bits = build_replicated_const (word_type, width, max >> 1);\n+  high_bits = build_replicated_const (word_type, width, max & ~(max >> 1));\n \n   a = tree_vec_extract (gsi, word_type, a, bitsize, bitpos);\n   b = tree_vec_extract (gsi, word_type, b, bitsize, bitpos);\n@@ -247,13 +247,14 @@ do_negate (gimple_stmt_iterator *gsi, tree word_type, tree b,\n \t   enum tree_code code ATTRIBUTE_UNUSED,\n \t   tree type ATTRIBUTE_UNUSED)\n {\n+  unsigned int width = vector_element_bits (TREE_TYPE (b));\n   tree inner_type = TREE_TYPE (TREE_TYPE (b));\n   HOST_WIDE_INT max;\n   tree low_bits, high_bits, b_low, result_low, signs;\n \n   max = GET_MODE_MASK (TYPE_MODE (inner_type));\n-  low_bits = build_replicated_const (word_type, inner_type, max >> 1);\n-  high_bits = build_replicated_const (word_type, inner_type, max & ~(max >> 1));\n+  low_bits = build_replicated_const (word_type, width, max >> 1);\n+  high_bits = build_replicated_const (word_type, width, max & ~(max >> 1));\n \n   b = tree_vec_extract (gsi, word_type, b, bitsize, bitpos);\n "}]}