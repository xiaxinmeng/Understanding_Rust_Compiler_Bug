{"sha": "a9e7ba81398e8157a97d2d626509dd53ee7eed26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllN2JhODEzOThlODE1N2E5N2QyZDYyNjUwOWRkNTNlZTdlZWQyNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-25T15:24:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-25T15:24:36Z"}, "message": "type_traits: Implement is_enum (usual caveats about the nasty consequences of c++/19076...).\n\n2004-12-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_enum (usual caveats about\n\tthe nasty consequences of c++/19076...).\n\t* testsuite/testsuite_tr1.h: Add ConvType.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_scalar/is_scalar.cc: New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_scalar/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_enum/is_enum.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_enum/typedefs.cc: Likewise.\n\nFrom-SVN: r92604", "tree": {"sha": "4b05911b8080767aa711d21449e7e582f9cf097f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b05911b8080767aa711d21449e7e582f9cf097f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9e7ba81398e8157a97d2d626509dd53ee7eed26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e7ba81398e8157a97d2d626509dd53ee7eed26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e7ba81398e8157a97d2d626509dd53ee7eed26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e7ba81398e8157a97d2d626509dd53ee7eed26/comments", "author": null, "committer": null, "parents": [{"sha": "7f514158b2a4eae91168bc4e173f99244e65a3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f514158b2a4eae91168bc4e173f99244e65a3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f514158b2a4eae91168bc4e173f99244e65a3e0"}], "stats": {"total": 258, "additions": 252, "deletions": 6}, "files": [{"sha": "b644e008c2ffc71cb999b4d94f3dbf0a01f6d164", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -1,3 +1,17 @@\n+2004-12-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_enum (usual caveats about\n+\tthe nasty consequences of c++/19076...).\n+\t* testsuite/testsuite_tr1.h: Add ConvType.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_scalar/is_scalar.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_scalar/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_enum/is_enum.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_enum/typedefs.cc: Likewise.\n+\n 2004-12-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Add missing undef."}, {"sha": "9816adafa5206f2e0a83fe790d669a84ab31863d", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -33,7 +33,7 @@ namespace std\n {\n namespace tr1\n {\n-  // For use in is_function and elsewhere.\n+  // For use in is_enum, is_function, and elsewhere.\n   struct __sfinae_types\n   {\n     typedef char __one;\n@@ -149,27 +149,71 @@ namespace tr1\n     : public false_type { };\n   _DEFINE_SPEC(2, is_member_function_pointer, _Tp _Cp::*)\n \n+  template<typename _Tp, bool = (is_fundamental<_Tp>::value\n+\t\t\t\t || is_array<_Tp>::value\n+\t\t\t\t || is_pointer<_Tp>::value\n+\t\t\t\t || is_reference<_Tp>::value\n+\t\t\t\t || is_member_pointer<_Tp>::value\n+\t\t\t\t || is_function<_Tp>::value)>\n+    struct __is_enum_helper\n+    : public __sfinae_types\n+    {\n+    private:\n+      static __one __test(bool);\n+      static __one __test(char);\n+      static __one __test(signed char);\n+      static __one __test(unsigned char);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+      static __one __test(wchar_t);\n+#endif\n+      static __one __test(short);\n+      static __one __test(unsigned short);\n+      static __one __test(int);\n+      static __one __test(unsigned int);\n+      static __one __test(long);\n+      static __one __test(unsigned long);\n+      static __one __test(long long);\n+      static __one __test(unsigned long long);\n+      static __two __test(...);\n+\n+      template<typename _Up>\n+        struct __convert\n+\t{ operator _Up() const; };\n+\n+    public:\n+      static const bool __value = sizeof(__test(__convert<_Tp>())) == 1;\n+    };\n+\n   template<typename _Tp>\n+    struct __is_enum_helper<_Tp, true>\n+    { static const bool __value = false; };\n+\n+  template<typename _Tp>\n+    struct is_enum\n+    : integral_constant<bool, __is_enum_helper<_Tp>::__value> { };\n+\n+  template<typename _Tp, bool = (is_reference<_Tp>::value\n+\t\t\t\t || is_void<_Tp>::value)>\n     struct __is_function_helper\n     : public __sfinae_types\n     {\n     private:\n       template<typename>\n         static __one __test(...);\n-\n       template<typename _Up>\n         static __two __test(_Up(*)[1]);\n     \n     public:\n       static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n     };\n   \n+  template<typename _Tp>\n+    struct __is_function_helper<_Tp, true>\n+    { static const bool __value = false; };\n+\n   template<typename _Tp>\n     struct is_function\n-    : public integral_constant<bool, (__is_function_helper<_Tp>::__value\n-\t\t\t\t      && !is_reference<_Tp>::value\n-\t\t\t\t      && !is_void<_Tp>::value)>\n-    { };\n+    : public integral_constant<bool, __is_function_helper<_Tp>::__value> { };\n \n   /// @brief  composite type traits [4.5.2].\n   template<typename _Tp>"}, {"sha": "0ad8ac14313cc7c51006505544138c84f8107a74", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -78,6 +78,12 @@ namespace __gnu_test\n   typedef const ClassType           cClassType;\n   typedef volatile ClassType        vClassType;\n   typedef const volatile ClassType  cvClassType;\n+\n+  enum EnumType { };\n+\n+  struct ConvType\n+  { operator int() const; };\n+  \n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_TR1_H"}, {"sha": "37d6592f04f5667f7745499863b6bcc982a1eda6", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_scalar/is_scalar.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Fis_scalar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Fis_scalar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Fis_scalar.cc?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -0,0 +1,50 @@\n+// 2004-12-25  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_scalar;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_scalar, int>(true)) );\n+  VERIFY( (test_category<is_scalar, float>(true)) );\n+  VERIFY( (test_category<is_scalar, EnumType>(true)) );\n+  VERIFY( (test_category<is_scalar, int*>(true)) );\n+  VERIFY( (test_category<is_scalar, int(*)(int)>(true)) );\n+  VERIFY( (test_category<is_scalar, int (ClassType::*)>(true)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_category<is_scalar, int (ClassType::*) (int)>(true)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_scalar, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5a1740fc8ee2bd988c56ab43bcae2977c13ab57f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_scalar/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_scalar%2Ftypedefs.cc?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-25  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_scalar<int>            test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "3de48c4084f190487b2a41dbe63247a1b601f452", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_enum/is_enum.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Fis_enum.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Fis_enum.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Fis_enum.cc?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -0,0 +1,60 @@\n+// 2004-12-25  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_enum;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_category<is_enum, EnumType>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_category<is_enum, void>(false)) );\n+  VERIFY( (test_category<is_enum, int>(false)) );\n+  VERIFY( (test_category<is_enum, float>(false)) );\n+  VERIFY( (test_category<is_enum, int[2]>(false)) );\n+  VERIFY( (test_category<is_enum, int*>(false)) );\n+  VERIFY( (test_category<is_enum, int(*)(int)>(false)) );\n+  VERIFY( (test_category<is_enum, float&>(false)) );\n+  VERIFY( (test_category<is_enum, float(&)(float)>(false)) );\n+  VERIFY( (test_category<is_enum, int (ClassType::*)>(false)) );\n+  // Temporarily disabled because of c++/19076 :-(\n+  // VERIFY( (test_category<is_enum, int (ClassType::*) (int)>(false)) );\n+  VERIFY( (test_category<is_enum, int (int)>(false)) );\n+\n+  VERIFY( (test_category<is_enum, ConvType>(false)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_enum, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eeb10936c581dcfb93f4dcd5b9b430b66070c9a8", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_enum/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e7ba81398e8157a97d2d626509dd53ee7eed26/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2Ftypedefs.cc?ref=a9e7ba81398e8157a97d2d626509dd53ee7eed26", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-25  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_enum<int>              test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}