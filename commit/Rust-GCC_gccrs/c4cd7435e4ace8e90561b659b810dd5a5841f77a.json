{"sha": "c4cd7435e4ace8e90561b659b810dd5a5841f77a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjZDc0MzVlNGFjZThlOTA1NjFiNjU5YjgxMGRkNWE1ODQxZjc3YQ==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2014-02-18T05:41:29Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2014-02-18T05:41:29Z"}, "message": "re PR rtl-optimization/58960 (ICE in bmp_iter_set_init)\n\n        PR rtl-optimization/58960\n        * haifa-sched.c (alloc_global_sched_pressure_data): New,\n        factored out from ...\n        (sched_init): ... here.\n        (free_global_sched_pressure_data): New, factored out from ...\n        (sched_finish): ... here.\n        * sched-int.h (free_global_sched_pressure_data): Declare.\n        * sched-rgn.c (nr_regions_initial): New static global.\n        (haifa_find_rgns): Initialize it.\n        (schedule_region): Disable sched-pressure for the newly\n        generated regions.\n\nFrom-SVN: r207832", "tree": {"sha": "1bed52a7e0c474f02696375301f02d1025258742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bed52a7e0c474f02696375301f02d1025258742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4cd7435e4ace8e90561b659b810dd5a5841f77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4cd7435e4ace8e90561b659b810dd5a5841f77a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4cd7435e4ace8e90561b659b810dd5a5841f77a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4cd7435e4ace8e90561b659b810dd5a5841f77a/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "877ae087f4ec1ca3505b0008f26ca92e2ef906e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877ae087f4ec1ca3505b0008f26ca92e2ef906e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877ae087f4ec1ca3505b0008f26ca92e2ef906e8"}], "stats": {"total": 113, "additions": 78, "deletions": 35}, "files": [{"sha": "dbd04dbef42dceb536a33246aed1ac5278116403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4cd7435e4ace8e90561b659b810dd5a5841f77a", "patch": "@@ -1,3 +1,17 @@\n+2014-02-18  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/58960\n+\t* haifa-sched.c (alloc_global_sched_pressure_data): New,\n+\tfactored out from ...\n+\t(sched_init): ... here.\n+\t(free_global_sched_pressure_data): New, factored out from ...\n+\t(sched_finish): ... here.\n+\t* sched-int.h (free_global_sched_pressure_data): Declare.\n+\t* sched-rgn.c (nr_regions_initial): New static global.\n+\t(haifa_find_rgns): Initialize it.\n+\t(schedule_region): Disable sched-pressure for the newly\n+\tgenerated regions.\n+\n 2014-02-17  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (free_stmt_vec_info): Clear BB and"}, {"sha": "e0d467497fadb9ad370fe749358b26e5224af626", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 50, "deletions": 35, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=c4cd7435e4ace8e90561b659b810dd5a5841f77a", "patch": "@@ -6553,6 +6553,54 @@ setup_sched_dump (void)\n \t\t? stderr : dump_file);\n }\n \n+/* Allocate data for register pressure sensitive scheduling.  */\n+static void\n+alloc_global_sched_pressure_data (void)\n+{\n+  if (sched_pressure != SCHED_PRESSURE_NONE)\n+    {\n+      int i, max_regno = max_reg_num ();\n+\n+      if (sched_dump != NULL)\n+\t/* We need info about pseudos for rtl dumps about pseudo\n+\t   classes and costs.  */\n+\tregstat_init_n_sets_and_refs ();\n+      ira_set_pseudo_classes (true, sched_verbose ? sched_dump : NULL);\n+      sched_regno_pressure_class\n+\t= (enum reg_class *) xmalloc (max_regno * sizeof (enum reg_class));\n+      for (i = 0; i < max_regno; i++)\n+\tsched_regno_pressure_class[i]\n+\t  = (i < FIRST_PSEUDO_REGISTER\n+\t     ? ira_pressure_class_translate[REGNO_REG_CLASS (i)]\n+\t     : ira_pressure_class_translate[reg_allocno_class (i)]);\n+      curr_reg_live = BITMAP_ALLOC (NULL);\n+      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n+\t{\n+\t  saved_reg_live = BITMAP_ALLOC (NULL);\n+\t  region_ref_regs = BITMAP_ALLOC (NULL);\n+\t}\n+    }\n+}\n+\n+/*  Free data for register pressure sensitive scheduling.  Also called\n+    from schedule_region when stopping sched-pressure early.  */\n+void\n+free_global_sched_pressure_data (void)\n+{\n+  if (sched_pressure != SCHED_PRESSURE_NONE)\n+    {\n+      if (regstat_n_sets_and_refs != NULL)\n+\tregstat_free_n_sets_and_refs ();\n+      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n+\t{\n+\t  BITMAP_FREE (region_ref_regs);\n+\t  BITMAP_FREE (saved_reg_live);\n+\t}\n+      BITMAP_FREE (curr_reg_live);\n+      free (sched_regno_pressure_class);\n+    }\n+}\n+\n /* Initialize some global state for the scheduler.  This function works\n    with the common data shared between all the schedulers.  It is called\n    from the scheduler specific initialization routine.  */\n@@ -6656,29 +6704,7 @@ sched_init (void)\n   if (targetm.sched.init_global)\n     targetm.sched.init_global (sched_dump, sched_verbose, get_max_uid () + 1);\n \n-  if (sched_pressure != SCHED_PRESSURE_NONE)\n-    {\n-      int i, max_regno = max_reg_num ();\n-\n-      if (sched_dump != NULL)\n-\t/* We need info about pseudos for rtl dumps about pseudo\n-\t   classes and costs.  */\n-\tregstat_init_n_sets_and_refs ();\n-      ira_set_pseudo_classes (true, sched_verbose ? sched_dump : NULL);\n-      sched_regno_pressure_class\n-\t= (enum reg_class *) xmalloc (max_regno * sizeof (enum reg_class));\n-      for (i = 0; i < max_regno; i++)\n-\tsched_regno_pressure_class[i]\n-\t  = (i < FIRST_PSEUDO_REGISTER\n-\t     ? ira_pressure_class_translate[REGNO_REG_CLASS (i)]\n-\t     : ira_pressure_class_translate[reg_allocno_class (i)]);\n-      curr_reg_live = BITMAP_ALLOC (NULL);\n-      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n-\t{\n-\t  saved_reg_live = BITMAP_ALLOC (NULL);\n-\t  region_ref_regs = BITMAP_ALLOC (NULL);\n-\t}\n-    }\n+  alloc_global_sched_pressure_data ();\n \n   curr_state = xmalloc (dfa_state_size);\n }\n@@ -6777,18 +6803,7 @@ void\n sched_finish (void)\n {\n   haifa_finish_h_i_d ();\n-  if (sched_pressure != SCHED_PRESSURE_NONE)\n-    {\n-      if (regstat_n_sets_and_refs != NULL)\n-\tregstat_free_n_sets_and_refs ();\n-      if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n-\t{\n-\t  BITMAP_FREE (region_ref_regs);\n-\t  BITMAP_FREE (saved_reg_live);\n-\t}\n-      BITMAP_FREE (curr_reg_live);\n-      free (sched_regno_pressure_class);\n-    }\n+  free_global_sched_pressure_data ();\n   free (curr_state);\n \n   if (targetm.sched.finish_global)"}, {"sha": "d04bf0876b1f20be6b1a87e835fc132e59807cc5", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=c4cd7435e4ace8e90561b659b810dd5a5841f77a", "patch": "@@ -1340,6 +1340,7 @@ extern void debug_ds (ds_t);\n extern void initialize_live_range_shrinkage (void);\n extern void finish_live_range_shrinkage (void);\n extern void sched_init_region_reg_pressure_info (void);\n+extern void free_global_sched_pressure_data (void);\n extern int haifa_classify_insn (const_rtx);\n extern void get_ebb_head_tail (basic_block, basic_block, rtx *, rtx *);\n extern int no_real_insns_p (const_rtx, const_rtx);"}, {"sha": "0573b6a6e8f77a94e0f7b75d44300d1fbc41cfce", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4cd7435e4ace8e90561b659b810dd5a5841f77a/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=c4cd7435e4ace8e90561b659b810dd5a5841f77a", "patch": "@@ -79,6 +79,9 @@ static int is_cfg_nonregular (void);\n /* Number of regions in the procedure.  */\n int nr_regions = 0;\n \n+/* Same as above before adding any new regions.  */\n+static int nr_regions_initial = 0;\n+\n /* Table of region descriptions.  */\n region *rgn_table = NULL;\n \n@@ -1064,6 +1067,7 @@ haifa_find_rgns (void)\n \tBLOCK_TO_BB (bb->index) = 0;\n       }\n \n+  nr_regions_initial = nr_regions;\n   free (max_hdr);\n   free (degree);\n   free (stack);\n@@ -2991,6 +2995,15 @@ schedule_region (int rgn)\n \n   rgn_n_insns = 0;\n \n+  /* Do not support register pressure sensitive scheduling for the new regions\n+     as we don't update the liveness info for them.  */\n+  if (rgn >= nr_regions_initial)\n+    {\n+      if (sched_pressure != SCHED_PRESSURE_NONE)\n+\tfree_global_sched_pressure_data ();\n+      sched_pressure = SCHED_PRESSURE_NONE;\n+    }\n+\n   rgn_setup_region (rgn);\n \n   /* Don't schedule region that is marked by"}]}