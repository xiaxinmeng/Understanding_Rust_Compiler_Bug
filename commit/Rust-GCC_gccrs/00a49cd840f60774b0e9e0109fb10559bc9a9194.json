{"sha": "00a49cd840f60774b0e9e0109fb10559bc9a9194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhNDljZDg0MGY2MDc3NGIwZTllMDEwOWZiMTA1NTliYzlhOTE5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-31T22:10:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-01T00:06:37Z"}, "message": "c++: Fix sizeof VLA lambda capture.\n\nsizeof a VLA type is not a constant in C or the GNU C++ extension, so we\nneed to capture the VLA even in unevaluated context.  For PR60855 we stopped\nlooking through a previous capture, but we also need to capture the first\ntime the variable is mentioned.\n\n\tPR c++/86216\n\t* semantics.c (process_outer_var_ref): Capture VLAs even in\n\tunevaluated context.", "tree": {"sha": "d8daf51a689a88ba7901d32f63fedfe8fc9ab22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8daf51a689a88ba7901d32f63fedfe8fc9ab22f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a49cd840f60774b0e9e0109fb10559bc9a9194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a49cd840f60774b0e9e0109fb10559bc9a9194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a49cd840f60774b0e9e0109fb10559bc9a9194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a49cd840f60774b0e9e0109fb10559bc9a9194/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98ebda074bf8fc5f630a93085af81f52437d851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98ebda074bf8fc5f630a93085af81f52437d851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98ebda074bf8fc5f630a93085af81f52437d851"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "999348d2e2904da7e6ef8a756122da6a85c4d84a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a49cd840f60774b0e9e0109fb10559bc9a9194/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a49cd840f60774b0e9e0109fb10559bc9a9194/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00a49cd840f60774b0e9e0109fb10559bc9a9194", "patch": "@@ -1,5 +1,9 @@\n 2020-01-31  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/86216\n+\t* semantics.c (process_outer_var_ref): Capture VLAs even in\n+\tunevaluated context.\n+\n \tPR c++/14179\n \t* decl.c (reshape_init_array_1): Reuse a single CONSTRUCTOR with\n \tnon-aggregate elements."}, {"sha": "90f1e18e48a9ae3e266dd8a5f4748ce6229708cf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a49cd840f60774b0e9e0109fb10559bc9a9194/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a49cd840f60774b0e9e0109fb10559bc9a9194/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=00a49cd840f60774b0e9e0109fb10559bc9a9194", "patch": "@@ -3524,8 +3524,15 @@ tree\n process_outer_var_ref (tree decl, tsubst_flags_t complain, bool odr_use)\n {\n   if (cp_unevaluated_operand)\n-    /* It's not a use (3.2) if we're in an unevaluated context.  */\n-    return decl;\n+    {\n+      tree type = TREE_TYPE (decl);\n+      if (!dependent_type_p (type)\n+\t  && variably_modified_type_p (type, NULL_TREE))\n+\t/* VLAs are used even in unevaluated context.  */;\n+      else\n+\t/* It's not a use (3.2) if we're in an unevaluated context.  */\n+\treturn decl;\n+    }\n   if (decl == error_mark_node)\n     return decl;\n "}, {"sha": "f3390b2d09f0b31f4913eb96ff05669c63aac567", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-vla5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a49cd840f60774b0e9e0109fb10559bc9a9194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-vla5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a49cd840f60774b0e9e0109fb10559bc9a9194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-vla5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-vla5.C?ref=00a49cd840f60774b0e9e0109fb10559bc9a9194", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/86216\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -Wno-vla }\n+\n+template <typename T> void b(int n, T arg) {\n+  int buffer[arg];\n+  int buffer2[arg][arg];\n+  [&] {\n+    n = sizeof(buffer);\n+    n = sizeof(buffer2);\t// { dg-bogus \"sorry\" \"\" { xfail *-*-* } }\n+  }();\n+}\n+int main() { b(2, 3); }"}]}