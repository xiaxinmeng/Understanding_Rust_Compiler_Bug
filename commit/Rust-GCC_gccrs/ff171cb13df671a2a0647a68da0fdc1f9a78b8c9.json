{"sha": "ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "node_id": "C_kwDOANBUbNoAKGZmMTcxY2IxM2RmNjcxYTJhMDY0N2E2OGRhMGZkYzFmOWE3OGI4Yzk", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-20T14:05:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-20T14:05:54Z"}, "message": "Use \"final\" and \"override\" directly, rather than via macros\n\nAs of GCC 11 onwards we have required a C++11 compiler, such as GCC 4.8\nor later.  On the assumption that any such compiler correctly implements\n\"final\" and \"override\", this patch updates the source tree to stop using\nthe FINAL and OVERRIDE macros from ansidecl.h, in favor of simply using\n\"final\" and \"override\" directly.\n\nlibcpp/ChangeLog:\n\t* lex.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with \"final\" and\n\t\"override\".\n\ngcc/analyzer/ChangeLog:\n\t* analyzer-pass.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with\n\t\"final\" and \"override\".\n\t* call-info.h: Likewise.\n\t* checker-path.h: Likewise.\n\t* constraint-manager.cc: Likewise.\n\t* diagnostic-manager.cc: Likewise.\n\t* engine.cc: Likewise.\n\t* exploded-graph.h: Likewise.\n\t* feasible-graph.h: Likewise.\n\t* pending-diagnostic.h: Likewise.\n\t* region-model-impl-calls.cc: Likewise.\n\t* region-model.cc: Likewise.\n\t* region-model.h: Likewise.\n\t* region.h: Likewise.\n\t* sm-file.cc: Likewise.\n\t* sm-malloc.cc: Likewise.\n\t* sm-pattern-test.cc: Likewise.\n\t* sm-sensitive.cc: Likewise.\n\t* sm-signal.cc: Likewise.\n\t* sm-taint.cc: Likewise.\n\t* state-purge.h: Likewise.\n\t* store.cc: Likewise.\n\t* store.h: Likewise.\n\t* supergraph.h: Likewise.\n\t* svalue.h: Likewise.\n\t* trimmed-graph.h: Likewise.\n\t* varargs.cc: Likewise.\n\ngcc/c-family/ChangeLog:\n\t* c-format.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with \"final\"\n\tand \"override\".\n\t* c-pretty-print.h: Likewise.\n\ngcc/cp/ChangeLog:\n\t* cxx-pretty-print.h: Replace uses of \"FINAL\" and \"OVERRIDE\" with\n\t\"final\" and \"override\".\n\t* error.cc: Likewise.\n\ngcc/jit/ChangeLog:\n\t* jit-playback.h: Replace uses of \"FINAL\" and \"OVERRIDE\" with\n\t\"final\" and \"override\".\n\t* jit-recording.cc: Likewise.\n\t* jit-recording.h: Likewise.\n\ngcc/ChangeLog:\n\t* config/aarch64/aarch64-sve-builtins-base.cc: Replace uses of\n\t\"FINAL\" and \"OVERRIDE\" with \"final\" and \"override\".\n\t* config/aarch64/aarch64-sve-builtins-functions.h: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n\t* diagnostic-path.h: Likewise.\n\t* digraph.cc: Likewise.\n\t* gcc-rich-location.h: Likewise.\n\t* gimple-array-bounds.cc: Likewise.\n\t* gimple-loop-versioning.cc: Likewise.\n\t* gimple-range-cache.cc: Likewise.\n\t* gimple-range-cache.h: Likewise.\n\t* gimple-range-fold.cc: Likewise.\n\t* gimple-range-fold.h: Likewise.\n\t* gimple-range-tests.cc: Likewise.\n\t* gimple-range.h: Likewise.\n\t* gimple-ssa-evrp.cc: Likewise.\n\t* input.cc: Likewise.\n\t* json.h: Likewise.\n\t* read-rtl-function.cc: Likewise.\n\t* tree-complex.cc: Likewise.\n\t* tree-diagnostic-path.cc: Likewise.\n\t* tree-ssa-ccp.cc: Likewise.\n\t* tree-ssa-copy.cc: Likewise.\n\t* tree-vrp.cc: Likewise.\n\t* value-query.h: Likewise.\n\t* vr-values.h: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "099c56c115ca15e17c84d4178b546191fdf0b2b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099c56c115ca15e17c84d4178b546191fdf0b2b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c420193e86b39a09304b2845335571eefe24d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c420193e86b39a09304b2845335571eefe24d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c420193e86b39a09304b2845335571eefe24d5d"}], "stats": {"total": 2690, "additions": 1345, "deletions": 1345}, "files": [{"sha": "f6cef58bc7c3174fa90cf75ebd1a4a7ec463b679", "filename": "gcc/analyzer/analyzer-pass.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fanalyzer-pass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fanalyzer-pass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-pass.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -66,8 +66,8 @@ class pass_analyzer : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  bool gate (function *) FINAL OVERRIDE;\n-  unsigned int execute (function *) FINAL OVERRIDE;\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n }; // class pass_analyzer\n \n /* Only run the analyzer if -fanalyzer.  */"}, {"sha": "4bb7dd7e198d0181ae68e7762e68c1a2f3eaa9d1", "filename": "gcc/analyzer/call-info.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fcall-info.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fcall-info.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-info.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -30,9 +30,9 @@ namespace ana {\n class call_info : public custom_edge_info\n {\n public:\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  void print (pretty_printer *pp) const final override;\n   void add_events_to_path (checker_path *emission_path,\n-\t\t\t   const exploded_edge &eedge) const FINAL OVERRIDE;\n+\t\t\t   const exploded_edge &eedge) const final override;\n \n   const gcall *get_call_stmt () const { return m_call_stmt; }\n   tree get_fndecl () const { return m_fndecl; }\n@@ -58,7 +58,7 @@ class call_info : public custom_edge_info\n class success_call_info : public call_info\n {\n public:\n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n protected:\n   success_call_info (const call_details &cd) : call_info (cd) {}\n@@ -72,7 +72,7 @@ class success_call_info : public call_info\n class failed_call_info : public call_info\n {\n public:\n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n protected:\n   failed_call_info (const call_details &cd) : call_info (cd) {}"}, {"sha": "fd274e52ac3d05d3ba75e2ea2f28bc904a7ea915", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -91,9 +91,9 @@ class checker_event : public diagnostic_event\n \n   /* Implementation of diagnostic_event.  */\n \n-  location_t get_location () const FINAL OVERRIDE { return m_loc; }\n-  tree get_fndecl () const FINAL OVERRIDE { return m_fndecl; }\n-  int get_stack_depth () const FINAL OVERRIDE { return m_depth; }\n+  location_t get_location () const final override { return m_loc; }\n+  tree get_fndecl () const final override { return m_fndecl; }\n+  int get_stack_depth () const final override { return m_depth; }\n \n   /* Additional functionality.  */\n \n@@ -141,7 +141,7 @@ class debug_event : public checker_event\n     free (m_desc);\n   }\n \n-  label_text get_desc (bool) const FINAL OVERRIDE;\n+  label_text get_desc (bool) const final override;\n \n private:\n   char *m_desc;\n@@ -175,7 +175,7 @@ class precanned_custom_event : public custom_event\n     free (m_desc);\n   }\n \n-  label_text get_desc (bool) const FINAL OVERRIDE;\n+  label_text get_desc (bool) const final override;\n \n private:\n   char *m_desc;\n@@ -190,7 +190,7 @@ class statement_event : public checker_event\n   statement_event (const gimple *stmt, tree fndecl, int depth,\n \t\t   const program_state &dst_state);\n \n-  label_text get_desc (bool) const FINAL OVERRIDE;\n+  label_text get_desc (bool) const final override;\n \n   const gimple * const m_stmt;\n   const program_state m_dst_state;\n@@ -205,7 +205,7 @@ class region_creation_event : public checker_event\n   region_creation_event (const region *reg,\n \t\t\t location_t loc, tree fndecl, int depth);\n \n-  label_text get_desc (bool) const FINAL OVERRIDE;\n+  label_text get_desc (bool) const final override;\n \n private:\n   const region *m_reg;\n@@ -221,9 +221,9 @@ class function_entry_event : public checker_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n-  bool is_function_entry_p () const FINAL OVERRIDE { return true; }\n+  bool is_function_entry_p () const final override { return true; }\n };\n \n /* Subclass of checker_event describing a state change.  */\n@@ -240,7 +240,7 @@ class state_change_event : public checker_event\n \t\t      const svalue *origin,\n \t\t      const program_state &dst_state);\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n   function *get_dest_function () const\n   {\n@@ -314,7 +314,7 @@ class start_cfg_edge_event : public cfg_edge_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n  private:\n   label_text maybe_describe_condition (bool can_colorize) const;\n@@ -338,7 +338,7 @@ class end_cfg_edge_event : public cfg_edge_event\n   {\n   }\n \n-  label_text get_desc (bool /*can_colorize*/) const FINAL OVERRIDE\n+  label_text get_desc (bool /*can_colorize*/) const final override\n   {\n     return label_text::borrow (\"...to here\");\n   }\n@@ -352,9 +352,9 @@ class call_event : public superedge_event\n   call_event (const exploded_edge &eedge,\n \t      location_t loc, tree fndecl, int depth);\n \n-  label_text get_desc (bool can_colorize) const OVERRIDE;\n+  label_text get_desc (bool can_colorize) const override;\n \n-  bool is_call_p () const FINAL OVERRIDE;\n+  bool is_call_p () const final override;\n \n protected:\n   tree get_caller_fndecl () const;\n@@ -372,9 +372,9 @@ class return_event : public superedge_event\n   return_event (const exploded_edge &eedge,\n \t\tlocation_t loc, tree fndecl, int depth);\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n-  bool is_return_p () const FINAL OVERRIDE;\n+  bool is_return_p () const final override;\n \n   const supernode *m_src_snode;\n   const supernode *m_dest_snode;\n@@ -393,7 +393,7 @@ class start_consolidated_cfg_edges_event : public checker_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n  private:\n   bool m_edge_sense;\n@@ -410,7 +410,7 @@ class end_consolidated_cfg_edges_event : public checker_event\n   {\n   }\n \n-  label_text get_desc (bool /*can_colorize*/) const FINAL OVERRIDE\n+  label_text get_desc (bool /*can_colorize*/) const final override\n   {\n     return label_text::borrow (\"...to here\");\n   }\n@@ -428,11 +428,11 @@ class setjmp_event : public checker_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n   void prepare_for_emission (checker_path *path,\n \t\t\t     pending_diagnostic *pd,\n-\t\t\t     diagnostic_event_id_t emission_id) FINAL OVERRIDE;\n+\t\t\t     diagnostic_event_id_t emission_id) final override;\n \n private:\n   const exploded_node *m_enode;\n@@ -477,7 +477,7 @@ class rewind_from_longjmp_event : public rewind_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n };\n \n /* A concrete event subclass for rewinding from a longjmp to a setjmp,\n@@ -494,11 +494,11 @@ class rewind_to_setjmp_event : public rewind_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n   void prepare_for_emission (checker_path *path,\n \t\t\t     pending_diagnostic *pd,\n-\t\t\t     diagnostic_event_id_t emission_id) FINAL OVERRIDE;\n+\t\t\t     diagnostic_event_id_t emission_id) final override;\n \n private:\n   diagnostic_event_id_t m_original_setjmp_event_id;\n@@ -520,7 +520,7 @@ class warning_event : public checker_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n+  label_text get_desc (bool can_colorize) const final override;\n \n private:\n   const state_machine *m_sm;\n@@ -537,12 +537,12 @@ class checker_path : public diagnostic_path\n \n   /* Implementation of diagnostic_path vfuncs.  */\n \n-  unsigned num_events () const FINAL OVERRIDE\n+  unsigned num_events () const final override\n   {\n     return m_events.length ();\n   }\n \n-  const diagnostic_event & get_event (int idx) const FINAL OVERRIDE\n+  const diagnostic_event & get_event (int idx) const final override\n   {\n     return *m_events[idx];\n   }"}, {"sha": "02e8ce9a45726396ebfcec0b627f047497badaf0", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -2905,7 +2905,7 @@ class merger_fact_visitor : public fact_visitor\n   {}\n \n   void on_fact (const svalue *lhs, enum tree_code code, const svalue *rhs)\n-    FINAL OVERRIDE\n+    final override\n   {\n     /* Special-case for widening.  */\n     if (lhs->get_kind () == SK_WIDENING)\n@@ -2933,7 +2933,7 @@ class merger_fact_visitor : public fact_visitor\n   }\n \n   void on_ranges (const svalue *lhs_sval,\n-\t\t  const bounded_ranges *ranges) FINAL OVERRIDE\n+\t\t  const bounded_ranges *ranges) final override\n   {\n     for (const auto &iter : m_cm_b->m_bounded_ranges_constraints)\n       {"}, {"sha": "e90cd001f1a1ba1d0478f40d079cbbcd5ab9fb86", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -565,7 +565,7 @@ class dump_eg_with_shortest_path : public eg_traits::dump_args_t\n   }\n \n   void dump_extra_info (const exploded_node *enode,\n-\t\t\tpretty_printer *pp) const FINAL OVERRIDE\n+\t\t\tpretty_printer *pp) const final override\n   {\n     pp_printf (pp, \"sp: %i\", m_sep.get_shortest_path (enode).length ());\n     pp_newline (pp);\n@@ -1430,7 +1430,7 @@ class state_change_event_creator : public state_change_visitor\n   bool on_global_state_change (const state_machine &sm,\n \t\t\t       state_machine::state_t src_sm_val,\n \t\t\t       state_machine::state_t dst_sm_val)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (&sm != m_pb.get_sm ())\n       return false;\n@@ -1460,7 +1460,7 @@ class state_change_event_creator : public state_change_visitor\n \t\t\tstate_machine::state_t src_sm_val,\n \t\t\tstate_machine::state_t dst_sm_val,\n \t\t\tconst svalue *sval,\n-\t\t\tconst svalue *dst_origin_sval) FINAL OVERRIDE\n+\t\t\tconst svalue *dst_origin_sval) final override\n   {\n     if (&sm != m_pb.get_sm ())\n       return false;\n@@ -1588,13 +1588,13 @@ struct null_assignment_sm_context : public sm_context\n   {\n   }\n \n-  tree get_fndecl_for_call (const gcall */*call*/) FINAL OVERRIDE\n+  tree get_fndecl_for_call (const gcall */*call*/) final override\n   {\n     return NULL_TREE;\n   }\n \n   state_machine::state_t get_state (const gimple *stmt ATTRIBUTE_UNUSED,\n-\t\t\t\t    tree var) FINAL OVERRIDE\n+\t\t\t\t    tree var) final override\n   {\n     const svalue *var_old_sval\n       = m_old_state->m_region_model->get_rvalue (var, NULL);\n@@ -1607,7 +1607,7 @@ struct null_assignment_sm_context : public sm_context\n   }\n \n   state_machine::state_t get_state (const gimple *stmt ATTRIBUTE_UNUSED,\n-\t\t\t\t    const svalue *sval) FINAL OVERRIDE\n+\t\t\t\t    const svalue *sval) final override\n   {\n     const sm_state_map *old_smap = m_old_state->m_checker_states[m_sm_idx];\n     state_machine::state_t current = old_smap->get_state (sval, m_ext_state);\n@@ -1617,7 +1617,7 @@ struct null_assignment_sm_context : public sm_context\n   void set_next_state (const gimple *stmt,\n \t\t       tree var,\n \t\t       state_machine::state_t to,\n-\t\t       tree origin ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+\t\t       tree origin ATTRIBUTE_UNUSED) final override\n   {\n     state_machine::state_t from = get_state (stmt, var);\n     if (from != m_sm.get_start_state ())\n@@ -1641,7 +1641,7 @@ struct null_assignment_sm_context : public sm_context\n   void set_next_state (const gimple *stmt,\n \t\t       const svalue *sval,\n \t\t       state_machine::state_t to,\n-\t\t       tree origin ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+\t\t       tree origin ATTRIBUTE_UNUSED) final override\n   {\n     state_machine::state_t from = get_state (stmt, sval);\n     if (from != m_sm.get_start_state ())\n@@ -1661,41 +1661,41 @@ struct null_assignment_sm_context : public sm_context\n   }\n \n   void warn (const supernode *, const gimple *,\n-\t     tree, pending_diagnostic *d) FINAL OVERRIDE\n+\t     tree, pending_diagnostic *d) final override\n   {\n     delete d;\n   }\n   void warn (const supernode *, const gimple *,\n-\t     const svalue *, pending_diagnostic *d) FINAL OVERRIDE\n+\t     const svalue *, pending_diagnostic *d) final override\n   {\n     delete d;\n   }\n \n-  tree get_diagnostic_tree (tree expr) FINAL OVERRIDE\n+  tree get_diagnostic_tree (tree expr) final override\n   {\n     return expr;\n   }\n \n-  tree get_diagnostic_tree (const svalue *sval) FINAL OVERRIDE\n+  tree get_diagnostic_tree (const svalue *sval) final override\n   {\n     return m_new_state->m_region_model->get_representative_tree (sval);\n   }\n \n-  state_machine::state_t get_global_state () const FINAL OVERRIDE\n+  state_machine::state_t get_global_state () const final override\n   {\n     return 0;\n   }\n \n-  void set_global_state (state_machine::state_t) FINAL OVERRIDE\n+  void set_global_state (state_machine::state_t) final override\n   {\n     /* No-op.  */\n   }\n \n-  void on_custom_transition (custom_transition *) FINAL OVERRIDE\n+  void on_custom_transition (custom_transition *) final override\n   {\n   }\n \n-  tree is_zero_assignment (const gimple *stmt) FINAL OVERRIDE\n+  tree is_zero_assignment (const gimple *stmt) final override\n   {\n     const gassign *assign_stmt = dyn_cast <const gassign *> (stmt);\n     if (!assign_stmt)\n@@ -1708,11 +1708,11 @@ struct null_assignment_sm_context : public sm_context\n     return NULL_TREE;\n   }\n \n-  const program_state *get_old_program_state () const FINAL OVERRIDE\n+  const program_state *get_old_program_state () const final override\n   {\n     return m_old_state;\n   }\n-  const program_state *get_new_program_state () const FINAL OVERRIDE\n+  const program_state *get_new_program_state () const final override\n   {\n     return m_new_state;\n   }"}, {"sha": "c59374be81a139f42fd7d10da65a4c4a05c9c621", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -318,7 +318,7 @@ class impl_sm_context : public sm_context\n \n   logger *get_logger () const { return m_logger.get_logger (); }\n \n-  tree get_fndecl_for_call (const gcall *call) FINAL OVERRIDE\n+  tree get_fndecl_for_call (const gcall *call) final override\n   {\n     impl_region_model_context old_ctxt\n       (m_eg, m_enode_for_diag, NULL, NULL, NULL/*m_enode->get_state ()*/,\n@@ -417,7 +417,7 @@ class impl_sm_context : public sm_context\n   }\n \n   void warn (const supernode *snode, const gimple *stmt,\n-\t     tree var, pending_diagnostic *d) FINAL OVERRIDE\n+\t     tree var, pending_diagnostic *d) final override\n   {\n     LOG_FUNC (get_logger ());\n     gcc_assert (d); // take ownership\n@@ -436,7 +436,7 @@ class impl_sm_context : public sm_context\n   }\n \n   void warn (const supernode *snode, const gimple *stmt,\n-\t     const svalue *sval, pending_diagnostic *d) FINAL OVERRIDE\n+\t     const svalue *sval, pending_diagnostic *d) final override\n   {\n     LOG_FUNC (get_logger ());\n     gcc_assert (d); // take ownership\n@@ -458,7 +458,7 @@ class impl_sm_context : public sm_context\n      we can print:\n        \"double-free of 'inbuf.data'\".  */\n \n-  tree get_diagnostic_tree (tree expr) FINAL OVERRIDE\n+  tree get_diagnostic_tree (tree expr) final override\n   {\n     /* Only for SSA_NAMEs of temporaries; otherwise, return EXPR, as it's\n        likely to be the least surprising tree to report.  */\n@@ -476,29 +476,29 @@ class impl_sm_context : public sm_context\n       return expr;\n   }\n \n-  tree get_diagnostic_tree (const svalue *sval) FINAL OVERRIDE\n+  tree get_diagnostic_tree (const svalue *sval) final override\n   {\n     return m_new_state->m_region_model->get_representative_tree (sval);\n   }\n \n-  state_machine::state_t get_global_state () const FINAL OVERRIDE\n+  state_machine::state_t get_global_state () const final override\n   {\n     return m_old_state->m_checker_states[m_sm_idx]->get_global_state ();\n   }\n \n-  void set_global_state (state_machine::state_t state) FINAL OVERRIDE\n+  void set_global_state (state_machine::state_t state) final override\n   {\n     m_new_state->m_checker_states[m_sm_idx]->set_global_state (state);\n   }\n \n-  void on_custom_transition (custom_transition *transition) FINAL OVERRIDE\n+  void on_custom_transition (custom_transition *transition) final override\n   {\n     transition->impl_transition (&m_eg,\n \t\t\t\t const_cast<exploded_node *> (m_enode_for_diag),\n \t\t\t\t m_sm_idx);\n   }\n \n-  tree is_zero_assignment (const gimple *stmt) FINAL OVERRIDE\n+  tree is_zero_assignment (const gimple *stmt) final override\n   {\n     const gassign *assign_stmt = dyn_cast <const gassign *> (stmt);\n     if (!assign_stmt)\n@@ -514,22 +514,22 @@ class impl_sm_context : public sm_context\n     return NULL_TREE;\n   }\n \n-  path_context *get_path_context () const FINAL OVERRIDE\n+  path_context *get_path_context () const final override\n   {\n     return m_path_ctxt;\n   }\n \n-  bool unknown_side_effects_p () const FINAL OVERRIDE\n+  bool unknown_side_effects_p () const final override\n   {\n     return m_unknown_side_effects;\n   }\n \n-  const program_state *get_old_program_state () const FINAL OVERRIDE\n+  const program_state *get_old_program_state () const final override\n   {\n     return m_old_state;\n   }\n \n-  const program_state *get_new_program_state () const FINAL OVERRIDE\n+  const program_state *get_new_program_state () const final override\n   {\n     return m_new_state;\n   }\n@@ -557,13 +557,13 @@ class leak_stmt_finder : public stmt_finder\n   leak_stmt_finder (const exploded_graph &eg, tree var)\n   : m_eg (eg), m_var (var) {}\n \n-  stmt_finder *clone () const FINAL OVERRIDE\n+  stmt_finder *clone () const final override\n   {\n     return new leak_stmt_finder (m_eg, m_var);\n   }\n \n   const gimple *find_stmt (const exploded_path &epath)\n-    FINAL OVERRIDE\n+    final override\n   {\n     logger * const logger = m_eg.get_logger ();\n     LOG_FUNC (logger);\n@@ -1545,12 +1545,12 @@ class stale_jmp_buf : public pending_diagnostic_subclass<stale_jmp_buf>\n     m_setjmp_point (setjmp_point), m_stack_pop_event (NULL)\n   {}\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_stale_setjmp_buffer;\n   }\n \n-  bool emit (rich_location *richloc) FINAL OVERRIDE\n+  bool emit (rich_location *richloc) final override\n   {\n     return warning_at\n       (richloc, get_controlling_option (),\n@@ -1559,7 +1559,7 @@ class stale_jmp_buf : public pending_diagnostic_subclass<stale_jmp_buf>\n        get_user_facing_name (m_setjmp_call));\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   { return \"stale_jmp_buf\"; }\n \n   bool operator== (const stale_jmp_buf &other) const\n@@ -1571,7 +1571,7 @@ class stale_jmp_buf : public pending_diagnostic_subclass<stale_jmp_buf>\n   bool\n   maybe_add_custom_events_for_superedge (const exploded_edge &eedge,\n \t\t\t\t\t checker_path *emission_path)\n-    FINAL OVERRIDE\n+    final override\n   {\n     /* Detect exactly when the stack first becomes invalid,\n        and issue an event then.  */\n@@ -2435,7 +2435,7 @@ class tainted_args_function_custom_event : public custom_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE\n+  label_text get_desc (bool can_colorize) const final override\n   {\n     return make_label_text\n       (can_colorize,\n@@ -2457,21 +2457,21 @@ class tainted_args_function_info : public custom_edge_info\n   : m_fndecl (fndecl)\n   {}\n \n-  void print (pretty_printer *pp) const FINAL OVERRIDE\n+  void print (pretty_printer *pp) const final override\n   {\n     pp_string (pp, \"call to tainted_args function\");\n   };\n \n   bool update_model (region_model *,\n \t\t     const exploded_edge *,\n-\t\t     region_model_context *) const FINAL OVERRIDE\n+\t\t     region_model_context *) const final override\n   {\n     /* No-op.  */\n     return true;\n   }\n \n   void add_events_to_path (checker_path *emission_path,\n-\t\t\t   const exploded_edge &) const FINAL OVERRIDE\n+\t\t\t   const exploded_edge &) const final override\n   {\n     emission_path->add_event\n       (new tainted_args_function_custom_event\n@@ -2852,7 +2852,7 @@ class tainted_args_field_custom_event : public custom_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE\n+  label_text get_desc (bool can_colorize) const final override\n   {\n     return make_label_text (can_colorize,\n \t\t\t    \"field %qE of %qT\"\n@@ -2878,7 +2878,7 @@ class tainted_args_callback_custom_event : public custom_event\n   {\n   }\n \n-  label_text get_desc (bool can_colorize) const FINAL OVERRIDE\n+  label_text get_desc (bool can_colorize) const final override\n   {\n     return make_label_text (can_colorize,\n \t\t\t    \"function %qE used as initializer for field %qE\"\n@@ -2900,21 +2900,21 @@ class tainted_args_call_info : public custom_edge_info\n   : m_field (field), m_fndecl (fndecl), m_loc (loc)\n   {}\n \n-  void print (pretty_printer *pp) const FINAL OVERRIDE\n+  void print (pretty_printer *pp) const final override\n   {\n     pp_string (pp, \"call to tainted field\");\n   };\n \n   bool update_model (region_model *,\n \t\t     const exploded_edge *,\n-\t\t     region_model_context *) const FINAL OVERRIDE\n+\t\t     region_model_context *) const final override\n   {\n     /* No-op.  */\n     return true;\n   }\n \n   void add_events_to_path (checker_path *emission_path,\n-\t\t\t   const exploded_edge &) const FINAL OVERRIDE\n+\t\t\t   const exploded_edge &) const final override\n   {\n     /* Show the field in the struct declaration, e.g.\n        \"(1) field 'store' is marked with '__attribute__((tainted_args))'\"  */\n@@ -3611,7 +3611,7 @@ class impl_path_context : public path_context\n   }\n \n   void\n-  bifurcate (custom_edge_info *info) FINAL OVERRIDE\n+  bifurcate (custom_edge_info *info) final override\n   {\n     if (m_state_at_bifurcation)\n       /* Verify that the state at bifurcation is consistent when we\n@@ -3627,12 +3627,12 @@ class impl_path_context : public path_context\n     m_custom_eedge_infos.safe_push (info);\n   }\n \n-  void terminate_path () FINAL OVERRIDE\n+  void terminate_path () final override\n   {\n     m_terminate_path = true;\n   }\n \n-  bool terminate_path_p () const FINAL OVERRIDE\n+  bool terminate_path_p () const final override\n   {\n     return m_terminate_path;\n   }\n@@ -4668,7 +4668,7 @@ class supernode_cluster : public exploded_cluster\n \n   // TODO: dtor?\n \n-  void dump_dot (graphviz_out *gv, const dump_args_t &args) const FINAL OVERRIDE\n+  void dump_dot (graphviz_out *gv, const dump_args_t &args) const final override\n   {\n     gv->println (\"subgraph \\\"cluster_supernode_%i\\\" {\", m_supernode->m_index);\n     gv->indent ();\n@@ -4687,7 +4687,7 @@ class supernode_cluster : public exploded_cluster\n     gv->println (\"}\");\n   }\n \n-  void add_node (exploded_node *en) FINAL OVERRIDE\n+  void add_node (exploded_node *en) final override\n   {\n     m_enodes.safe_push (en);\n   }\n@@ -4725,7 +4725,7 @@ class function_call_string_cluster : public exploded_cluster\n       delete (*iter).second;\n   }\n \n-  void dump_dot (graphviz_out *gv, const dump_args_t &args) const FINAL OVERRIDE\n+  void dump_dot (graphviz_out *gv, const dump_args_t &args) const final override\n   {\n     const char *funcname = function_name (m_fun);\n \n@@ -4757,7 +4757,7 @@ class function_call_string_cluster : public exploded_cluster\n     gv->println (\"}\");\n   }\n \n-  void add_node (exploded_node *en) FINAL OVERRIDE\n+  void add_node (exploded_node *en) final override\n   {\n     const supernode *supernode = en->get_supernode ();\n     gcc_assert (supernode);\n@@ -4872,7 +4872,7 @@ class root_cluster : public exploded_cluster\n       delete (*iter).second;\n   }\n \n-  void dump_dot (graphviz_out *gv, const dump_args_t &args) const FINAL OVERRIDE\n+  void dump_dot (graphviz_out *gv, const dump_args_t &args) const final override\n   {\n     int i;\n     exploded_node *enode;\n@@ -4893,7 +4893,7 @@ class root_cluster : public exploded_cluster\n       child_cluster->dump_dot (gv, args);\n   }\n \n-  void add_node (exploded_node *en) FINAL OVERRIDE\n+  void add_node (exploded_node *en) final override\n   {\n     function *fun = en->get_function ();\n     if (!fun)\n@@ -4941,7 +4941,7 @@ class enode_label : public range_label\n \t       exploded_node *enode)\n   : m_ext_state (ext_state), m_enode (enode) {}\n \n-  label_text get_text (unsigned) const FINAL OVERRIDE\n+  label_text get_text (unsigned) const final override\n   {\n     pretty_printer pp;\n     pp_format_decoder (&pp) = default_tree_printer;\n@@ -5243,7 +5243,7 @@ class viz_callgraph_node : public dnode<viz_callgraph_traits>\n     gcc_assert (fun);\n   }\n \n-  void dump_dot (graphviz_out *gv, const dump_args_t &args) const FINAL OVERRIDE\n+  void dump_dot (graphviz_out *gv, const dump_args_t &args) const final override\n   {\n     pretty_printer *pp = gv->get_pp ();\n \n@@ -5348,7 +5348,7 @@ class viz_callgraph_edge : public dedge<viz_callgraph_traits>\n   {}\n \n   void dump_dot (graphviz_out *gv, const dump_args_t &) const\n-    FINAL OVERRIDE\n+    final override\n   {\n     pretty_printer *pp = gv->get_pp ();\n \n@@ -5491,7 +5491,7 @@ class exploded_graph_annotator : public dot_annotator\n   /* Show exploded nodes for BEFORE_SUPERNODE points before N.  */\n   bool add_node_annotations (graphviz_out *gv, const supernode &n,\n \t\t\t     bool within_table)\n-    const FINAL OVERRIDE\n+    const final override\n   {\n     if (!within_table)\n       return false;\n@@ -5525,7 +5525,7 @@ class exploded_graph_annotator : public dot_annotator\n   /* Show exploded nodes for STMT.  */\n   void add_stmt_annotations (graphviz_out *gv, const gimple *stmt,\n \t\t\t     bool within_row)\n-    const FINAL OVERRIDE\n+    const final override\n   {\n     if (!within_row)\n       return;\n@@ -5556,7 +5556,7 @@ class exploded_graph_annotator : public dot_annotator\n \n   /* Show exploded nodes for AFTER_SUPERNODE points after N.  */\n   bool add_after_node_annotations (graphviz_out *gv, const supernode &n)\n-    const FINAL OVERRIDE\n+    const final override\n   {\n     gv->begin_tr ();\n     pretty_printer *pp = gv->get_pp ();\n@@ -5717,12 +5717,12 @@ class plugin_analyzer_init_impl : public plugin_analyzer_init_iface\n     m_logger (logger)\n   {}\n \n-  void register_state_machine (state_machine *sm) FINAL OVERRIDE\n+  void register_state_machine (state_machine *sm) final override\n   {\n     m_checkers->safe_push (sm);\n   }\n \n-  logger *get_logger () const FINAL OVERRIDE\n+  logger *get_logger () const final override\n   {\n     return m_logger;\n   }"}, {"sha": "101f4f9a0a01d234b1b5992b6356084005799a92", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -47,12 +47,12 @@ class impl_region_model_context : public region_model_context\n \t\t\t     uncertainty_t *uncertainty,\n \t\t\t     logger *logger = NULL);\n \n-  bool warn (pending_diagnostic *d) FINAL OVERRIDE;\n-  void add_note (pending_note *pn) FINAL OVERRIDE;\n-  void on_svalue_leak (const svalue *) OVERRIDE;\n+  bool warn (pending_diagnostic *d) final override;\n+  void add_note (pending_note *pn) final override;\n+  void on_svalue_leak (const svalue *) override;\n   void on_liveness_change (const svalue_set &live_svalues,\n-\t\t\t   const region_model *model) FINAL OVERRIDE;\n-  logger *get_logger () FINAL OVERRIDE\n+\t\t\t   const region_model *model) final override;\n+  logger *get_logger () final override\n   {\n     return m_logger.get_logger ();\n   }\n@@ -63,35 +63,35 @@ class impl_region_model_context : public region_model_context\n \n   void on_condition (const svalue *lhs,\n \t\t     enum tree_code op,\n-\t\t     const svalue *rhs) FINAL OVERRIDE;\n+\t\t     const svalue *rhs) final override;\n \n-  void on_unknown_change (const svalue *sval, bool is_mutable) FINAL OVERRIDE;\n+  void on_unknown_change (const svalue *sval, bool is_mutable) final override;\n \n-  void on_phi (const gphi *phi, tree rhs) FINAL OVERRIDE;\n+  void on_phi (const gphi *phi, tree rhs) final override;\n \n   void on_unexpected_tree_code (tree t,\n-\t\t\t\tconst dump_location_t &loc) FINAL OVERRIDE;\n+\t\t\t\tconst dump_location_t &loc) final override;\n \n-  void on_escaped_function (tree fndecl) FINAL OVERRIDE;\n+  void on_escaped_function (tree fndecl) final override;\n \n-  uncertainty_t *get_uncertainty () FINAL OVERRIDE;\n+  uncertainty_t *get_uncertainty () final override;\n \n-  void purge_state_involving (const svalue *sval) FINAL OVERRIDE;\n+  void purge_state_involving (const svalue *sval) final override;\n \n-  void bifurcate (custom_edge_info *info) FINAL OVERRIDE;\n-  void terminate_path () FINAL OVERRIDE;\n-  const extrinsic_state *get_ext_state () const FINAL OVERRIDE\n+  void bifurcate (custom_edge_info *info) final override;\n+  void terminate_path () final override;\n+  const extrinsic_state *get_ext_state () const final override\n   {\n     return &m_ext_state;\n   }\n   bool get_malloc_map (sm_state_map **out_smap,\n \t\t       const state_machine **out_sm,\n-\t\t       unsigned *out_sm_idx) FINAL OVERRIDE;\n+\t\t       unsigned *out_sm_idx) final override;\n   bool get_taint_map (sm_state_map **out_smap,\n \t\t       const state_machine **out_sm,\n-\t\t       unsigned *out_sm_idx) FINAL OVERRIDE;\n+\t\t       unsigned *out_sm_idx) final override;\n \n-  const gimple *get_stmt () const OVERRIDE { return m_stmt; }\n+  const gimple *get_stmt () const override { return m_stmt; }\n \n   exploded_graph *m_eg;\n   log_user m_logger;\n@@ -205,7 +205,7 @@ class exploded_node : public dnode<eg_traits>\n \n   const char * get_dot_fillcolor () const;\n   void dump_dot (graphviz_out *gv, const dump_args_t &args)\n-    const FINAL OVERRIDE;\n+    const final override;\n   void dump_dot_id (pretty_printer *pp) const;\n \n   void dump_to_pp (pretty_printer *pp, const extrinsic_state &ext_state) const;\n@@ -343,7 +343,7 @@ class exploded_edge : public dedge<eg_traits>\n \t\t custom_edge_info *custom_info);\n   ~exploded_edge ();\n   void dump_dot (graphviz_out *gv, const dump_args_t &args)\n-    const FINAL OVERRIDE;\n+    const final override;\n   void dump_dot_label (pretty_printer *pp) const;\n \n   json::object *to_json () const;\n@@ -374,7 +374,7 @@ class dynamic_call_info_t : public custom_edge_info\n     m_is_returning_call (is_returning_call)\n   {}\n \n-  void print (pretty_printer *pp) const FINAL OVERRIDE\n+  void print (pretty_printer *pp) const final override\n   {\n     if (m_is_returning_call)\n       pp_string (pp, \"dynamic_return\");\n@@ -384,10 +384,10 @@ class dynamic_call_info_t : public custom_edge_info\n \n   bool update_model (region_model *model,\n \t\t     const exploded_edge *eedge,\n-\t\t     region_model_context *ctxt) const FINAL OVERRIDE;\n+\t\t     region_model_context *ctxt) const final override;\n \n   void add_events_to_path (checker_path *emission_path,\n-\t\t\t   const exploded_edge &eedge) const FINAL OVERRIDE;\n+\t\t\t   const exploded_edge &eedge) const final override;\n private:\n   const gcall *m_dynamic_call;\n   const bool m_is_returning_call;\n@@ -406,17 +406,17 @@ class rewind_info_t : public custom_edge_info\n     m_longjmp_call (longjmp_call)\n   {}\n \n-  void print (pretty_printer *pp) const FINAL OVERRIDE\n+  void print (pretty_printer *pp) const final override\n   {\n     pp_string (pp, \"rewind\");\n   }\n \n   bool update_model (region_model *model,\n \t\t     const exploded_edge *eedge,\n-\t\t     region_model_context *ctxt) const FINAL OVERRIDE;\n+\t\t     region_model_context *ctxt) const final override;\n \n   void add_events_to_path (checker_path *emission_path,\n-\t\t\t   const exploded_edge &eedge) const FINAL OVERRIDE;\n+\t\t\t   const exploded_edge &eedge) const final override;\n \n   const program_point &get_setjmp_point () const\n   {"}, {"sha": "253011955e6e9aa014e3190a68276b9859f51c35", "filename": "gcc/analyzer/feasible-graph.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Ffeasible-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Ffeasible-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ffeasible-graph.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -91,7 +91,7 @@ class feasible_node : public base_feasible_node\n   }\n \n   void dump_dot (graphviz_out *gv,\n-\t\t const dump_args_t &args) const FINAL OVERRIDE;\n+\t\t const dump_args_t &args) const final override;\n \n   const feasibility_state &get_state () const { return m_state; }\n   const region_model &get_model () const { return m_state.get_model (); }\n@@ -123,7 +123,7 @@ class infeasible_node : public base_feasible_node\n   ~infeasible_node () { delete m_rc; }\n \n   void dump_dot (graphviz_out *gv,\n-\t\t const dump_args_t &args) const FINAL OVERRIDE;\n+\t\t const dump_args_t &args) const final override;\n \n private:\n   rejected_constraint *m_rc;\n@@ -135,7 +135,7 @@ class base_feasible_edge : public dedge<fg_traits>\n {\n  public:\n   void dump_dot (graphviz_out *gv,\n-\t\t const dump_args_t &args) const FINAL OVERRIDE;\n+\t\t const dump_args_t &args) const final override;\n \n   const exploded_edge *get_inner_edge () const { return m_inner_edge; }\n "}, {"sha": "a273f89bc202e65dd7a280764dc56e0fc6c346e0", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -331,7 +331,7 @@ class pending_diagnostic_subclass : public pending_diagnostic\n {\n  public:\n   bool subclass_equal_p (const pending_diagnostic &base_other) const\n-    FINAL OVERRIDE\n+    final override\n   {\n     const Subclass &other = (const Subclass &)base_other;\n     return *(const Subclass*)this == other;\n@@ -374,7 +374,7 @@ class pending_note_subclass : public pending_note\n {\n  public:\n   bool subclass_equal_p (const pending_note &base_other) const\n-    FINAL OVERRIDE\n+    final override\n   {\n     const Subclass &other = (const Subclass &)base_other;\n     return *(const Subclass*)this == other;"}, {"sha": "55d6fa7f76b349f81b110fe203eae8a8b20102ea", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -621,7 +621,7 @@ region_model::impl_call_realloc (const call_details &cd)\n \n     bool update_model (region_model *model,\n \t\t       const exploded_edge *,\n-\t\t       region_model_context *ctxt) const FINAL OVERRIDE\n+\t\t       region_model_context *ctxt) const final override\n     {\n       /* Return NULL; everything else is unchanged.  */\n       const call_details cd (get_call_details (model, ctxt));\n@@ -647,7 +647,7 @@ region_model::impl_call_realloc (const call_details &cd)\n     {\n     }\n \n-    label_text get_desc (bool can_colorize) const FINAL OVERRIDE\n+    label_text get_desc (bool can_colorize) const final override\n     {\n       return make_label_text (can_colorize,\n \t\t\t      \"when %qE succeeds, without moving buffer\",\n@@ -656,7 +656,7 @@ region_model::impl_call_realloc (const call_details &cd)\n \n     bool update_model (region_model *model,\n \t\t       const exploded_edge *,\n-\t\t       region_model_context *ctxt) const FINAL OVERRIDE\n+\t\t       region_model_context *ctxt) const final override\n     {\n       /* Update size of buffer and return the ptr unchanged.  */\n       const call_details cd (get_call_details (model, ctxt));\n@@ -699,15 +699,15 @@ region_model::impl_call_realloc (const call_details &cd)\n     {\n     }\n \n-    label_text get_desc (bool can_colorize) const FINAL OVERRIDE\n+    label_text get_desc (bool can_colorize) const final override\n     {\n       return make_label_text (can_colorize,\n \t\t\t      \"when %qE succeeds, moving buffer\",\n \t\t\t      get_fndecl ());\n     }\n     bool update_model (region_model *model,\n \t\t       const exploded_edge *,\n-\t\t       region_model_context *ctxt) const FINAL OVERRIDE\n+\t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n       const svalue *old_ptr_sval = cd.get_arg_svalue (0);\n@@ -800,7 +800,7 @@ region_model::impl_call_strchr (const call_details &cd)\n     {\n     }\n \n-    label_text get_desc (bool can_colorize) const FINAL OVERRIDE\n+    label_text get_desc (bool can_colorize) const final override\n     {\n       if (m_found)\n \treturn make_label_text (can_colorize,\n@@ -814,7 +814,7 @@ region_model::impl_call_strchr (const call_details &cd)\n \n     bool update_model (region_model *model,\n \t\t       const exploded_edge *,\n-\t\t       region_model_context *ctxt) const FINAL OVERRIDE\n+\t\t       region_model_context *ctxt) const final override\n     {\n       const call_details cd (get_call_details (model, ctxt));\n       if (tree lhs_type = cd.get_lhs_type ())"}, {"sha": "6f6a061cf75abf31e7154959edb567b51dfddc98", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -465,9 +465,9 @@ class poisoned_value_diagnostic\n     m_src_region (src_region)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"poisoned_value_diagnostic\"; }\n+  const char *get_kind () const final override { return \"poisoned_value_diagnostic\"; }\n \n-  bool use_of_uninit_p () const FINAL OVERRIDE\n+  bool use_of_uninit_p () const final override\n   {\n     return m_pkind == POISON_KIND_UNINIT;\n   }\n@@ -479,7 +479,7 @@ class poisoned_value_diagnostic\n \t    && m_src_region == other.m_src_region);\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     switch (m_pkind)\n       {\n@@ -494,7 +494,7 @@ class poisoned_value_diagnostic\n       }\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     switch (m_pkind)\n       {\n@@ -530,7 +530,7 @@ class poisoned_value_diagnostic\n       }\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     switch (m_pkind)\n       {\n@@ -549,7 +549,7 @@ class poisoned_value_diagnostic\n       }\n   }\n \n-  void mark_interesting_stuff (interesting_t *interest) FINAL OVERRIDE\n+  void mark_interesting_stuff (interesting_t *interest) final override\n   {\n     if (m_src_region)\n       interest->add_region_creation (m_src_region);\n@@ -572,7 +572,7 @@ class shift_count_negative_diagnostic\n   : m_assign (assign), m_count_cst (count_cst)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"shift_count_negative_diagnostic\";\n   }\n@@ -583,18 +583,18 @@ class shift_count_negative_diagnostic\n \t    && same_tree_p (m_count_cst, other.m_count_cst));\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_shift_count_negative;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"shift by negative count (%qE)\", m_count_cst);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"shift by negative amount here (%qE)\", m_count_cst);\n   }\n@@ -618,7 +618,7 @@ class shift_count_overflow_diagnostic\n     m_count_cst (count_cst)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"shift_count_overflow_diagnostic\";\n   }\n@@ -630,19 +630,19 @@ class shift_count_overflow_diagnostic\n \t    && same_tree_p (m_count_cst, other.m_count_cst));\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_shift_count_overflow;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"shift by count (%qE) >= precision of type (%qi)\",\n \t\t       m_count_cst, m_operand_precision);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"shift by count %qE here\", m_count_cst);\n   }\n@@ -1117,18 +1117,18 @@ class dump_path_diagnostic\n   : public pending_diagnostic_subclass<dump_path_diagnostic>\n {\n public:\n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return 0;\n   }\n \n-  bool emit (rich_location *richloc) FINAL OVERRIDE\n+  bool emit (rich_location *richloc) final override\n   {\n     inform (richloc, \"path\");\n     return true;\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"dump_path_diagnostic\"; }\n+  const char *get_kind () const final override { return \"dump_path_diagnostic\"; }\n \n   bool operator== (const dump_path_diagnostic &) const\n   {\n@@ -1638,7 +1638,7 @@ class reason_attr_access : public pending_note_subclass<reason_attr_access>\n   {\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"reason_attr_access\"; }\n+  const char *get_kind () const final override { return \"reason_attr_access\"; }\n \n   void emit () const\n   {\n@@ -1719,7 +1719,7 @@ check_external_function_for_access_attr (const gcall *call,\n \t      m_access (access)\n \t    {\n \t    }\n-\t    pending_note *make_note () FINAL OVERRIDE\n+\t    pending_note *make_note () final override\n \t    {\n \t      return new reason_attr_access (m_callee_fndecl, m_access);\n \t    }\n@@ -2566,7 +2566,7 @@ class write_to_const_diagnostic\n   : m_reg (reg), m_decl (decl)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"write_to_const_diagnostic\";\n   }\n@@ -2577,12 +2577,12 @@ class write_to_const_diagnostic\n \t    && m_decl == other.m_decl);\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_write_to_const;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     bool warned;\n@@ -2606,7 +2606,7 @@ class write_to_const_diagnostic\n     return warned;\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     switch (m_reg->get_kind ())\n       {\n@@ -2635,7 +2635,7 @@ class write_to_string_literal_diagnostic\n   : m_reg (reg)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"write_to_string_literal_diagnostic\";\n   }\n@@ -2645,20 +2645,20 @@ class write_to_string_literal_diagnostic\n     return m_reg == other.m_reg;\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_write_to_string_literal;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"write to string literal\");\n     /* Ideally we would show the location of the STRING_CST as well,\n        but it is not available at this point.  */\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"write to string literal here\");\n   }"}, {"sha": "1bfa56a8cd2226783afe697f38e2f56d0e3ee777", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -970,52 +970,52 @@ class region_model_context\n class noop_region_model_context : public region_model_context\n {\n public:\n-  bool warn (pending_diagnostic *) OVERRIDE { return false; }\n-  void add_note (pending_note *pn) OVERRIDE;\n-  void on_svalue_leak (const svalue *) OVERRIDE {}\n+  bool warn (pending_diagnostic *) override { return false; }\n+  void add_note (pending_note *pn) override;\n+  void on_svalue_leak (const svalue *) override {}\n   void on_liveness_change (const svalue_set &,\n-\t\t\t   const region_model *) OVERRIDE {}\n-  logger *get_logger () OVERRIDE { return NULL; }\n+\t\t\t   const region_model *) override {}\n+  logger *get_logger () override { return NULL; }\n   void on_condition (const svalue *lhs ATTRIBUTE_UNUSED,\n \t\t     enum tree_code op ATTRIBUTE_UNUSED,\n-\t\t     const svalue *rhs ATTRIBUTE_UNUSED) OVERRIDE\n+\t\t     const svalue *rhs ATTRIBUTE_UNUSED) override\n   {\n   }\n   void on_unknown_change (const svalue *sval ATTRIBUTE_UNUSED,\n-\t\t\t  bool is_mutable ATTRIBUTE_UNUSED) OVERRIDE\n+\t\t\t  bool is_mutable ATTRIBUTE_UNUSED) override\n   {\n   }\n   void on_phi (const gphi *phi ATTRIBUTE_UNUSED,\n-\t       tree rhs ATTRIBUTE_UNUSED) OVERRIDE\n+\t       tree rhs ATTRIBUTE_UNUSED) override\n   {\n   }\n-  void on_unexpected_tree_code (tree, const dump_location_t &) OVERRIDE {}\n+  void on_unexpected_tree_code (tree, const dump_location_t &) override {}\n \n-  void on_escaped_function (tree) OVERRIDE {}\n+  void on_escaped_function (tree) override {}\n \n-  uncertainty_t *get_uncertainty () OVERRIDE { return NULL; }\n+  uncertainty_t *get_uncertainty () override { return NULL; }\n \n-  void purge_state_involving (const svalue *sval ATTRIBUTE_UNUSED) OVERRIDE {}\n+  void purge_state_involving (const svalue *sval ATTRIBUTE_UNUSED) override {}\n \n-  void bifurcate (custom_edge_info *info) OVERRIDE;\n-  void terminate_path () OVERRIDE;\n+  void bifurcate (custom_edge_info *info) override;\n+  void terminate_path () override;\n \n-  const extrinsic_state *get_ext_state () const OVERRIDE { return NULL; }\n+  const extrinsic_state *get_ext_state () const override { return NULL; }\n \n   bool get_malloc_map (sm_state_map **,\n \t\t       const state_machine **,\n-\t\t       unsigned *) OVERRIDE\n+\t\t       unsigned *) override\n   {\n     return false;\n   }\n   bool get_taint_map (sm_state_map **,\n \t\t      const state_machine **,\n-\t\t      unsigned *) OVERRIDE\n+\t\t      unsigned *) override\n   {\n     return false;\n   }\n \n-  const gimple *get_stmt () const OVERRIDE { return NULL; }\n+  const gimple *get_stmt () const override { return NULL; }\n };\n \n /* A subclass of region_model_context for determining if operations fail\n@@ -1027,7 +1027,7 @@ class tentative_region_model_context : public noop_region_model_context\n   tentative_region_model_context () : m_num_unexpected_codes (0) {}\n \n   void on_unexpected_tree_code (tree, const dump_location_t &)\n-    FINAL OVERRIDE\n+    final override\n   {\n     m_num_unexpected_codes++;\n   }\n@@ -1044,100 +1044,100 @@ class tentative_region_model_context : public noop_region_model_context\n class region_model_context_decorator : public region_model_context\n {\n  public:\n-  bool warn (pending_diagnostic *d) OVERRIDE\n+  bool warn (pending_diagnostic *d) override\n   {\n     return m_inner->warn (d);\n   }\n \n-  void add_note (pending_note *pn) OVERRIDE\n+  void add_note (pending_note *pn) override\n   {\n     m_inner->add_note (pn);\n   }\n \n-  void on_svalue_leak (const svalue *sval) OVERRIDE\n+  void on_svalue_leak (const svalue *sval) override\n   {\n     m_inner->on_svalue_leak (sval);\n   }\n \n   void on_liveness_change (const svalue_set &live_svalues,\n-\t\t\t   const region_model *model) OVERRIDE\n+\t\t\t   const region_model *model) override\n   {\n     m_inner->on_liveness_change (live_svalues, model);\n   }\n \n-  logger *get_logger () OVERRIDE\n+  logger *get_logger () override\n   {\n     return m_inner->get_logger ();\n   }\n \n   void on_condition (const svalue *lhs,\n \t\t     enum tree_code op,\n-\t\t     const svalue *rhs) OVERRIDE\n+\t\t     const svalue *rhs) override\n   {\n     m_inner->on_condition (lhs, op, rhs);\n   }\n \n-  void on_unknown_change (const svalue *sval, bool is_mutable) OVERRIDE\n+  void on_unknown_change (const svalue *sval, bool is_mutable) override\n   {\n     m_inner->on_unknown_change (sval, is_mutable);\n   }\n \n-  void on_phi (const gphi *phi, tree rhs) OVERRIDE\n+  void on_phi (const gphi *phi, tree rhs) override\n   {\n     m_inner->on_phi (phi, rhs);\n   }\n \n   void on_unexpected_tree_code (tree t,\n-\t\t\t\tconst dump_location_t &loc) OVERRIDE\n+\t\t\t\tconst dump_location_t &loc) override\n   {\n     m_inner->on_unexpected_tree_code (t, loc);\n   }\n \n-  void on_escaped_function (tree fndecl) OVERRIDE\n+  void on_escaped_function (tree fndecl) override\n   {\n     m_inner->on_escaped_function (fndecl);\n   }\n \n-  uncertainty_t *get_uncertainty () OVERRIDE\n+  uncertainty_t *get_uncertainty () override\n   {\n     return m_inner->get_uncertainty ();\n   }\n \n-  void purge_state_involving (const svalue *sval) OVERRIDE\n+  void purge_state_involving (const svalue *sval) override\n   {\n     m_inner->purge_state_involving (sval);\n   }\n \n-  void bifurcate (custom_edge_info *info) OVERRIDE\n+  void bifurcate (custom_edge_info *info) override\n   {\n     m_inner->bifurcate (info);\n   }\n \n-  void terminate_path () OVERRIDE\n+  void terminate_path () override\n   {\n     m_inner->terminate_path ();\n   }\n \n-  const extrinsic_state *get_ext_state () const OVERRIDE\n+  const extrinsic_state *get_ext_state () const override\n   {\n     return m_inner->get_ext_state ();\n   }\n \n   bool get_malloc_map (sm_state_map **out_smap,\n \t\t       const state_machine **out_sm,\n-\t\t       unsigned *out_sm_idx) OVERRIDE\n+\t\t       unsigned *out_sm_idx) override\n   {\n     return m_inner->get_malloc_map (out_smap, out_sm, out_sm_idx);\n   }\n \n   bool get_taint_map (sm_state_map **out_smap,\n \t\t      const state_machine **out_sm,\n-\t\t      unsigned *out_sm_idx) OVERRIDE\n+\t\t      unsigned *out_sm_idx) override\n   {\n     return m_inner->get_taint_map (out_smap, out_sm, out_sm_idx);\n   }\n \n-  const gimple *get_stmt () const OVERRIDE\n+  const gimple *get_stmt () const override\n   {\n     return m_inner->get_stmt ();\n   }\n@@ -1158,7 +1158,7 @@ class region_model_context_decorator : public region_model_context\n class note_adding_context : public region_model_context_decorator\n {\n public:\n-  bool warn (pending_diagnostic *d) OVERRIDE\n+  bool warn (pending_diagnostic *d) override\n   {\n     if (m_inner->warn (d))\n       {\n@@ -1248,7 +1248,7 @@ class rejected_op_constraint : public rejected_constraint\n     m_lhs (lhs), m_op (op), m_rhs (rhs)\n   {}\n \n-  void dump_to_pp (pretty_printer *pp) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp) const final override;\n \n   tree m_lhs;\n   enum tree_code m_op;\n@@ -1264,7 +1264,7 @@ class rejected_ranges_constraint : public rejected_constraint\n     m_expr (expr), m_ranges (ranges)\n   {}\n \n-  void dump_to_pp (pretty_printer *pp) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp) const final override;\n \n private:\n   tree m_expr;\n@@ -1305,7 +1305,7 @@ using namespace ::selftest;\n class test_region_model_context : public noop_region_model_context\n {\n public:\n-  bool warn (pending_diagnostic *d) FINAL OVERRIDE\n+  bool warn (pending_diagnostic *d) final override\n   {\n     m_diagnostics.safe_push (d);\n     return true;\n@@ -1314,7 +1314,7 @@ class test_region_model_context : public noop_region_model_context\n   unsigned get_num_diagnostics () const { return m_diagnostics.length (); }\n \n   void on_unexpected_tree_code (tree t, const dump_location_t &)\n-    FINAL OVERRIDE\n+    final override\n   {\n     internal_error (\"unhandled tree code: %qs\",\n \t\t    get_tree_code_name (TREE_CODE (t)));"}, {"sha": "60d8149f51359a89ca4ab0414d5ed11cc44543a1", "filename": "gcc/analyzer/region.h", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fregion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -306,13 +306,13 @@ class frame_region : public space_region\n   ~frame_region ();\n \n   /* region vfuncs.  */\n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_FRAME; }\n-  const frame_region * dyn_cast_frame_region () const FINAL OVERRIDE\n+  enum region_kind get_kind () const final override { return RK_FRAME; }\n+  const frame_region * dyn_cast_frame_region () const final override\n   {\n     return this;\n   }\n-  void accept (visitor *v) const FINAL OVERRIDE;\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void accept (visitor *v) const final override;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   /* Accessors.  */\n   const frame_region *get_calling_frame () const { return m_calling_frame; }\n@@ -371,8 +371,8 @@ class globals_region : public space_region\n   {}\n \n   /* region vfuncs.  */\n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_GLOBALS; }\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  enum region_kind get_kind () const final override { return RK_GLOBALS; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n };\n \n } // namespace ana\n@@ -398,8 +398,8 @@ class code_region : public space_region\n   {}\n \n   /* region vfuncs.  */\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_CODE; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  enum region_kind get_kind () const final override { return RK_CODE; }\n \n   const region *get_element (region_model *model,\n \t\t\tconst svalue *index,\n@@ -432,10 +432,10 @@ class function_region : public region\n   }\n \n   /* region vfuncs.  */\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_FUNCTION; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  enum region_kind get_kind () const final override { return RK_FUNCTION; }\n   const function_region *\n-  dyn_cast_function_region () const FINAL OVERRIDE{ return this; }\n+  dyn_cast_function_region () const final override{ return this; }\n \n   tree get_fndecl () const { return m_fndecl; }\n \n@@ -472,8 +472,8 @@ class label_region : public region\n   }\n \n   /* region vfuncs.  */\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_LABEL; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  enum region_kind get_kind () const final override { return RK_LABEL; }\n \n   tree get_label () const { return m_label; }\n \n@@ -503,9 +503,9 @@ class stack_region : public space_region\n   : space_region (id, parent)\n   {}\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_STACK; }\n+  enum region_kind get_kind () const final override { return RK_STACK; }\n };\n \n } // namespace ana\n@@ -530,8 +530,8 @@ class heap_region : public space_region\n   : space_region (id, parent)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_HEAP; }\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  enum region_kind get_kind () const final override { return RK_HEAP; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n };\n \n } // namespace ana\n@@ -555,8 +555,8 @@ class root_region : public region\n public:\n   root_region (unsigned id);\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_ROOT; }\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  enum region_kind get_kind () const final override { return RK_ROOT; }\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n };\n \n } // namespace ana\n@@ -614,11 +614,11 @@ class symbolic_region : public region\n   symbolic_region (unsigned id, region *parent, const svalue *sval_ptr);\n \n   const symbolic_region *\n-  dyn_cast_symbolic_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_symbolic_region () const final override { return this; }\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_SYMBOLIC; }\n-  void accept (visitor *v) const FINAL OVERRIDE;\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  enum region_kind get_kind () const final override { return RK_SYMBOLIC; }\n+  void accept (visitor *v) const final override;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   const svalue *get_pointer () const { return m_sval_ptr; }\n \n@@ -656,13 +656,13 @@ class decl_region : public region\n     m_tracked (calc_tracked_p (decl))\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_DECL; }\n+  enum region_kind get_kind () const final override { return RK_DECL; }\n   const decl_region *\n-  dyn_cast_decl_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_decl_region () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n-  bool tracked_p () const FINAL OVERRIDE { return m_tracked; }\n+  bool tracked_p () const final override { return m_tracked; }\n \n   tree get_decl () const { return m_decl; }\n   int get_stack_depth () const;\n@@ -738,15 +738,15 @@ class field_region : public region\n     m_field (field)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_FIELD; }\n+  enum region_kind get_kind () const final override { return RK_FIELD; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n   const field_region *\n-  dyn_cast_field_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_field_region () const final override { return this; }\n \n   tree get_field () const { return m_field; }\n \n-  bool get_relative_concrete_offset (bit_offset_t *out) const FINAL OVERRIDE;\n+  bool get_relative_concrete_offset (bit_offset_t *out) const final override;\n \n private:\n   tree m_field;\n@@ -819,18 +819,18 @@ class element_region : public region\n     m_index (index)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_ELEMENT; }\n+  enum region_kind get_kind () const final override { return RK_ELEMENT; }\n   const element_region *\n-  dyn_cast_element_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_element_region () const final override { return this; }\n \n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void accept (visitor *v) const final override;\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   const svalue *get_index () const { return m_index; }\n \n   virtual bool\n-  get_relative_concrete_offset (bit_offset_t *out) const FINAL OVERRIDE;\n+  get_relative_concrete_offset (bit_offset_t *out) const final override;\n \n private:\n   const svalue *m_index;\n@@ -904,17 +904,17 @@ class offset_region : public region\n     m_byte_offset (byte_offset)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_OFFSET; }\n+  enum region_kind get_kind () const final override { return RK_OFFSET; }\n   const offset_region *\n-  dyn_cast_offset_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_offset_region () const final override { return this; }\n \n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void accept (visitor *v) const final override;\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   const svalue *get_byte_offset () const { return m_byte_offset; }\n \n-  bool get_relative_concrete_offset (bit_offset_t *out) const FINAL OVERRIDE;\n+  bool get_relative_concrete_offset (bit_offset_t *out) const final override;\n \n private:\n   const svalue *m_byte_offset;\n@@ -992,19 +992,19 @@ class sized_region : public region\n     m_byte_size_sval (byte_size_sval)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_SIZED; }\n+  enum region_kind get_kind () const final override { return RK_SIZED; }\n   const sized_region *\n-  dyn_cast_sized_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_sized_region () const final override { return this; }\n \n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void accept (visitor *v) const final override;\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n-  bool get_byte_size (byte_size_t *out) const FINAL OVERRIDE;\n-  bool get_bit_size (bit_size_t *out) const FINAL OVERRIDE;\n+  bool get_byte_size (byte_size_t *out) const final override;\n+  bool get_bit_size (bit_size_t *out) const final override;\n \n   const svalue *\n-  get_byte_size_sval (region_model_manager *) const FINAL OVERRIDE\n+  get_byte_size_sval (region_model_manager *) const final override\n   {\n     return m_byte_size_sval;\n   }\n@@ -1074,11 +1074,11 @@ class cast_region : public region\n     m_original_region (original_region)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_CAST; }\n+  enum region_kind get_kind () const final override { return RK_CAST; }\n   const cast_region *\n-  dyn_cast_cast_region () const FINAL OVERRIDE { return this; }\n-  void accept (visitor *v) const FINAL OVERRIDE;\n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  dyn_cast_cast_region () const final override { return this; }\n+  void accept (visitor *v) const final override;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   const region *get_original_region () const { return m_original_region; }\n \n@@ -1115,9 +1115,9 @@ class heap_allocated_region : public region\n   {}\n \n   enum region_kind\n-  get_kind () const FINAL OVERRIDE { return RK_HEAP_ALLOCATED; }\n+  get_kind () const final override { return RK_HEAP_ALLOCATED; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n };\n \n /* An untyped region dynamically allocated on the stack via \"alloca\".  */\n@@ -1129,9 +1129,9 @@ class alloca_region : public region\n   : region (complexity (parent), id, parent, NULL_TREE)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_ALLOCA; }\n+  enum region_kind get_kind () const final override { return RK_ALLOCA; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n };\n \n /* A region for a STRING_CST.  */\n@@ -1145,11 +1145,11 @@ class string_region : public region\n   {}\n \n   const string_region *\n-  dyn_cast_string_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_string_region () const final override { return this; }\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_STRING; }\n+  enum region_kind get_kind () const final override { return RK_STRING; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   tree get_string_cst () const { return m_string_cst; }\n \n@@ -1220,18 +1220,18 @@ class bit_range_region : public region\n   {}\n \n   const bit_range_region *\n-  dyn_cast_bit_range_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_bit_range_region () const final override { return this; }\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_BIT_RANGE; }\n+  enum region_kind get_kind () const final override { return RK_BIT_RANGE; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   const bit_range &get_bits () const { return m_bits; }\n \n-  bool get_byte_size (byte_size_t *out) const FINAL OVERRIDE;\n-  bool get_bit_size (bit_size_t *out) const FINAL OVERRIDE;\n-  const svalue *get_byte_size_sval (region_model_manager *mgr) const FINAL OVERRIDE;\n-  bool get_relative_concrete_offset (bit_offset_t *out) const FINAL OVERRIDE;\n+  bool get_byte_size (byte_size_t *out) const final override;\n+  bool get_bit_size (bit_size_t *out) const final override;\n+  const svalue *get_byte_size_sval (region_model_manager *mgr) const final override;\n+  bool get_relative_concrete_offset (bit_offset_t *out) const final override;\n \n private:\n   bit_range m_bits;\n@@ -1305,11 +1305,11 @@ class var_arg_region : public region\n   {}\n \n   const var_arg_region *\n-  dyn_cast_var_arg_region () const FINAL OVERRIDE { return this; }\n+  dyn_cast_var_arg_region () const final override { return this; }\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_VAR_ARG; }\n+  enum region_kind get_kind () const final override { return RK_VAR_ARG; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n   const frame_region *get_frame_region () const;\n   unsigned get_index () const { return m_idx; }\n@@ -1345,9 +1345,9 @@ class unknown_region : public region\n   : region (complexity (parent), id, parent, type)\n   {}\n \n-  enum region_kind get_kind () const FINAL OVERRIDE { return RK_UNKNOWN; }\n+  enum region_kind get_kind () const final override { return RK_UNKNOWN; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n };\n \n } // namespace ana"}, {"sha": "e9b5b8be2e745ff056040d2cee153a8bc9f3c0fe", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -57,10 +57,10 @@ class fileptr_state_machine : public state_machine\n public:\n   fileptr_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return false; }\n+  bool inherited_state_p () const final override { return false; }\n \n   state_machine::state_t\n-  get_default_state (const svalue *sval) const FINAL OVERRIDE\n+  get_default_state (const svalue *sval) const final override\n   {\n     if (tree cst = sval->maybe_get_constant ())\n       {\n@@ -72,17 +72,17 @@ class fileptr_state_machine : public state_machine\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n   void on_condition (sm_context *sm_ctxt,\n \t\t     const supernode *node,\n \t\t     const gimple *stmt,\n \t\t     const svalue *lhs,\n \t\t     enum tree_code op,\n-\t\t     const svalue *rhs) const FINAL OVERRIDE;\n+\t\t     const svalue *rhs) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n-  pending_diagnostic *on_leak (tree var) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n+  pending_diagnostic *on_leak (tree var) const final override;\n \n   /* State for a FILE * returned from fopen that hasn't been checked for\n      NULL.\n@@ -111,13 +111,13 @@ class file_diagnostic : public pending_diagnostic\n   : m_sm (sm), m_arg (arg)\n   {}\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     return same_tree_p (m_arg, ((const file_diagnostic &)base_other).m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    OVERRIDE\n+    override\n   {\n     if (change.m_old_state == m_sm.get_start_state ()\n \t&& change.m_new_state == m_sm.m_unchecked)\n@@ -155,22 +155,22 @@ class double_fclose : public file_diagnostic\n     : file_diagnostic (sm, arg)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"double_fclose\"; }\n+  const char *get_kind () const final override { return \"double_fclose\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_double_fclose;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"double %<fclose%> of FILE %qE\",\n \t\t       m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    OVERRIDE\n+    override\n   {\n     if (change.m_new_state == m_sm.m_closed)\n       {\n@@ -180,7 +180,7 @@ class double_fclose : public file_diagnostic\n     return file_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_first_fclose_event.known_p ())\n       return ev.formatted_print (\"second %qs here; first %qs was at %@\",\n@@ -200,14 +200,14 @@ class file_leak : public file_diagnostic\n     : file_diagnostic (sm, arg)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"file_leak\"; }\n+  const char *get_kind () const final override { return \"file_leak\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_file_leak;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     /* CWE-775: \"Missing Release of File Descriptor or Handle after\n@@ -223,7 +223,7 @@ class file_leak : public file_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.m_new_state == m_sm.m_unchecked)\n       {\n@@ -233,7 +233,7 @@ class file_leak : public file_diagnostic\n     return file_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_fopen_event.known_p ())\n       {"}, {"sha": "abdce6b0e7e3b1bed3666e855dede1134296bc1e", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -128,7 +128,7 @@ struct allocation_state : public state_machine::state\n     m_deallocator (deallocator)\n   {}\n \n-  void dump_to_pp (pretty_printer *pp) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp) const final override;\n \n   const allocation_state *get_nonnull () const;\n \n@@ -243,9 +243,9 @@ struct custom_deallocator_set : public deallocator_set\n \t\t\t  //unsigned arg_idx,\n \t\t\t  enum wording wording);\n \n-  bool contains_p (const deallocator *d) const FINAL OVERRIDE;\n-  const deallocator *maybe_get_single () const FINAL OVERRIDE;\n-  void dump_to_pp (pretty_printer *pp) const FINAL OVERRIDE;\n+  bool contains_p (const deallocator *d) const final override;\n+  const deallocator *maybe_get_single () const final override;\n+  void dump_to_pp (pretty_printer *pp) const final override;\n \n   auto_vec <const deallocator *> m_deallocator_vec;\n };\n@@ -259,9 +259,9 @@ struct standard_deallocator_set : public deallocator_set\n \t\t\t    const char *name,\n \t\t\t    enum wording wording);\n \n-  bool contains_p (const deallocator *d) const FINAL OVERRIDE;\n-  const deallocator *maybe_get_single () const FINAL OVERRIDE;\n-  void dump_to_pp (pretty_printer *pp) const FINAL OVERRIDE;\n+  bool contains_p (const deallocator *d) const final override;\n+  const deallocator *maybe_get_single () const final override;\n+  void dump_to_pp (pretty_printer *pp) const final override;\n \n   standard_deallocator m_deallocator;\n };\n@@ -343,10 +343,10 @@ class malloc_state_machine : public state_machine\n \t     const deallocator_set *deallocators,\n \t     const deallocator *deallocator);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return false; }\n+  bool inherited_state_p () const final override { return false; }\n \n   state_machine::state_t\n-  get_default_state (const svalue *sval) const FINAL OVERRIDE\n+  get_default_state (const svalue *sval) const final override\n   {\n     if (tree cst = sval->maybe_get_constant ())\n       {\n@@ -372,25 +372,25 @@ class malloc_state_machine : public state_machine\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n   void on_phi (sm_context *sm_ctxt,\n \t       const supernode *node,\n \t       const gphi *phi,\n-\t       tree rhs) const FINAL OVERRIDE;\n+\t       tree rhs) const final override;\n \n   void on_condition (sm_context *sm_ctxt,\n \t\t     const supernode *node,\n \t\t     const gimple *stmt,\n \t\t     const svalue *lhs,\n \t\t     enum tree_code op,\n-\t\t     const svalue *rhs) const FINAL OVERRIDE;\n+\t\t     const svalue *rhs) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n-  pending_diagnostic *on_leak (tree var) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n+  pending_diagnostic *on_leak (tree var) const final override;\n \n   bool reset_when_passed_to_unknown_fn_p (state_t s,\n-\t\t\t\t\t  bool is_mutable) const FINAL OVERRIDE;\n+\t\t\t\t\t  bool is_mutable) const final override;\n \n   static bool unaffected_by_call_p (tree fndecl);\n \n@@ -689,13 +689,13 @@ class malloc_diagnostic : public pending_diagnostic\n   : m_sm (sm), m_arg (arg)\n   {}\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     return same_tree_p (m_arg, ((const malloc_diagnostic &)base_other).m_arg);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    OVERRIDE\n+    override\n   {\n     if (change.m_old_state == m_sm.get_start_state ()\n \t&& unchecked_p (change.m_new_state))\n@@ -755,17 +755,17 @@ class mismatching_deallocation : public malloc_diagnostic\n     m_actual_dealloc (actual_dealloc)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"mismatching_deallocation\";\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_mismatching_deallocation;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n@@ -785,7 +785,7 @@ class mismatching_deallocation : public malloc_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (unchecked_p (change.m_new_state))\n       {\n@@ -801,7 +801,7 @@ class mismatching_deallocation : public malloc_diagnostic\n     return malloc_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_alloc_event.known_p ())\n       {\n@@ -837,14 +837,14 @@ class double_free : public malloc_diagnostic\n   : malloc_diagnostic (sm, arg), m_funcname (funcname)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"double_free\"; }\n+  const char *get_kind () const final override { return \"double_free\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_double_free;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n@@ -854,7 +854,7 @@ class double_free : public malloc_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (freed_p (change.m_new_state))\n       {\n@@ -865,7 +865,7 @@ class double_free : public malloc_diagnostic\n   }\n \n   label_text describe_call_with_state (const evdesc::call_with_state &info)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (freed_p (info.m_state))\n       return info.formatted_print\n@@ -874,7 +874,7 @@ class double_free : public malloc_diagnostic\n     return label_text ();\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_first_free_event.known_p ())\n       return ev.formatted_print (\"second %qs here; first %qs was at %@\",\n@@ -899,7 +899,7 @@ class possible_null : public malloc_diagnostic\n   {}\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.m_old_state == m_sm.get_start_state ()\n \t&& unchecked_p (change.m_new_state))\n@@ -911,7 +911,7 @@ class possible_null : public malloc_diagnostic\n   }\n \n   label_text describe_return_of_state (const evdesc::return_of_state &info)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (unchecked_p (info.m_state))\n       return info.formatted_print (\"possible return of NULL to %qE from %qE\",\n@@ -933,14 +933,14 @@ class possible_null_deref : public possible_null\n   : possible_null (sm, arg)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"possible_null_deref\"; }\n+  const char *get_kind () const final override { return \"possible_null_deref\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_possible_null_dereference;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-690: Unchecked Return Value to NULL Pointer Dereference.  */\n     diagnostic_metadata m;\n@@ -949,7 +949,7 @@ class possible_null_deref : public possible_null\n \t\t\t \"dereference of possibly-NULL %qE\", m_arg);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_origin_of_unchecked_event.known_p ())\n       return ev.formatted_print (\"%qE could be NULL: unchecked value from %@\",\n@@ -1013,7 +1013,7 @@ class possible_null_arg : public possible_null\n     m_fndecl (fndecl), m_arg_idx (arg_idx)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"possible_null_arg\"; }\n+  const char *get_kind () const final override { return \"possible_null_arg\"; }\n \n   bool subclass_equal_p (const pending_diagnostic &base_other) const\n   {\n@@ -1024,12 +1024,12 @@ class possible_null_arg : public possible_null\n \t    && m_arg_idx == sub_other.m_arg_idx);\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_possible_null_argument;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-690: Unchecked Return Value to NULL Pointer Dereference.  */\n     auto_diagnostic_group d;\n@@ -1044,7 +1044,7 @@ class possible_null_arg : public possible_null\n     return warned;\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     label_text arg_desc = describe_argument_index (m_fndecl, m_arg_idx);\n     label_text result;\n@@ -1074,14 +1074,14 @@ class null_deref : public malloc_diagnostic\n   null_deref (const malloc_state_machine &sm, tree arg)\n   : malloc_diagnostic (sm, arg) {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"null_deref\"; }\n+  const char *get_kind () const final override { return \"null_deref\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_null_dereference;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-476: NULL Pointer Dereference.  */\n     diagnostic_metadata m;\n@@ -1091,15 +1091,15 @@ class null_deref : public malloc_diagnostic\n   }\n \n   label_text describe_return_of_state (const evdesc::return_of_state &info)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (info.m_state == m_sm.m_null)\n       return info.formatted_print (\"return of NULL to %qE from %qE\",\n \t\t\t\t   info.m_caller_fndecl, info.m_callee_fndecl);\n     return label_text ();\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"dereference of NULL %qE\", ev.m_expr);\n   }\n@@ -1117,7 +1117,7 @@ class null_arg : public malloc_diagnostic\n     m_fndecl (fndecl), m_arg_idx (arg_idx)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"null_arg\"; }\n+  const char *get_kind () const final override { return \"null_arg\"; }\n \n   bool subclass_equal_p (const pending_diagnostic &base_other) const\n   {\n@@ -1128,12 +1128,12 @@ class null_arg : public malloc_diagnostic\n \t    && m_arg_idx == sub_other.m_arg_idx);\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_null_argument;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-476: NULL Pointer Dereference.  */\n     auto_diagnostic_group d;\n@@ -1153,7 +1153,7 @@ class null_arg : public malloc_diagnostic\n     return warned;\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     label_text arg_desc = describe_argument_index (m_fndecl, m_arg_idx);\n     label_text result;\n@@ -1184,14 +1184,14 @@ class use_after_free : public malloc_diagnostic\n     gcc_assert (deallocator);\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"use_after_free\"; }\n+  const char *get_kind () const final override { return \"use_after_free\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_use_after_free;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-416: Use After Free.  */\n     diagnostic_metadata m;\n@@ -1202,7 +1202,7 @@ class use_after_free : public malloc_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (freed_p (change.m_new_state))\n       {\n@@ -1223,7 +1223,7 @@ class use_after_free : public malloc_diagnostic\n     return malloc_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     const char *funcname = m_deallocator->m_name;\n     if (m_free_event.known_p ())\n@@ -1259,7 +1259,7 @@ class use_after_free : public malloc_diagnostic\n      that if they are accessed after the free, it looks like\n      they are uninitialized).  */\n \n-  bool supercedes_p (const pending_diagnostic &other) const FINAL OVERRIDE\n+  bool supercedes_p (const pending_diagnostic &other) const final override\n   {\n     if (other.use_of_uninit_p ())\n       return true;\n@@ -1278,14 +1278,14 @@ class malloc_leak : public malloc_diagnostic\n   malloc_leak (const malloc_state_machine &sm, tree arg)\n   : malloc_diagnostic (sm, arg) {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"malloc_leak\"; }\n+  const char *get_kind () const final override { return \"malloc_leak\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_malloc_leak;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     m.add_cwe (401);\n@@ -1298,7 +1298,7 @@ class malloc_leak : public malloc_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (unchecked_p (change.m_new_state)\n \t|| (start_p (change.m_old_state) && nonnull_p (change.m_new_state)))\n@@ -1309,7 +1309,7 @@ class malloc_leak : public malloc_diagnostic\n     return malloc_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (ev.m_expr)\n       {\n@@ -1343,22 +1343,22 @@ class free_of_non_heap : public malloc_diagnostic\n   {\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"free_of_non_heap\"; }\n+  const char *get_kind () const final override { return \"free_of_non_heap\"; }\n \n   bool subclass_equal_p (const pending_diagnostic &base_other) const\n-    FINAL OVERRIDE\n+    final override\n   {\n     const free_of_non_heap &other = (const free_of_non_heap &)base_other;\n     return (same_tree_p (m_arg, other.m_arg)\n \t    && m_freed_reg == other.m_freed_reg);\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_free_of_non_heap;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n@@ -1387,17 +1387,17 @@ class free_of_non_heap : public malloc_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &)\n-    FINAL OVERRIDE\n+    final override\n   {\n     return label_text::borrow (\"pointer is from here\");\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"call to %qs here\", m_funcname);\n   }\n \n-  void mark_interesting_stuff (interesting_t *interest) FINAL OVERRIDE\n+  void mark_interesting_stuff (interesting_t *interest) final override\n   {\n     if (m_freed_reg)\n       interest->add_region_creation (m_freed_reg);"}, {"sha": "9b2ad68e26a76be9b7453c9e84375c36023ade44", "filename": "gcc/analyzer/sm-pattern-test.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-pattern-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-pattern-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-pattern-test.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -58,20 +58,20 @@ class pattern_test_state_machine : public state_machine\n public:\n   pattern_test_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return false; }\n+  bool inherited_state_p () const final override { return false; }\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n   void on_condition (sm_context *sm_ctxt,\n \t\t     const supernode *node,\n \t\t     const gimple *stmt,\n \t\t     const svalue *lhs,\n \t\t     enum tree_code op,\n-\t\t     const svalue *rhs) const FINAL OVERRIDE;\n+\t\t     const svalue *rhs) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n };\n \n class pattern_match : public pending_diagnostic_subclass<pattern_match>\n@@ -80,7 +80,7 @@ class pattern_match : public pending_diagnostic_subclass<pattern_match>\n   pattern_match (tree lhs, enum tree_code op, tree rhs)\n   : m_lhs (lhs), m_op (op), m_rhs (rhs) {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"pattern_match\"; }\n+  const char *get_kind () const final override { return \"pattern_match\"; }\n \n   bool operator== (const pattern_match &other) const\n   {\n@@ -89,12 +89,12 @@ class pattern_match : public pending_diagnostic_subclass<pattern_match>\n \t    && same_tree_p (m_rhs, other.m_rhs));\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return 0;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"pattern match on %<%E %s %E%>\","}, {"sha": "20809dd72b006c5f09977b43f75b86cd1d07d7f7", "filename": "gcc/analyzer/sm-sensitive.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-sensitive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-sensitive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-sensitive.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -52,13 +52,13 @@ class sensitive_state_machine : public state_machine\n public:\n   sensitive_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return true; }\n+  bool inherited_state_p () const final override { return true; }\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n \n   /* State for \"sensitive\" data, such as a password.  */\n   state_t m_sensitive;\n@@ -81,7 +81,7 @@ class exposure_through_output_file\n   : m_sm (sm), m_arg (arg)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"exposure_through_output_file\";\n   }\n@@ -91,12 +91,12 @@ class exposure_through_output_file\n     return same_tree_p (m_arg, other.m_arg);\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_exposure_through_output_file;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     /* CWE-532: Information Exposure Through Log Files */\n@@ -107,7 +107,7 @@ class exposure_through_output_file\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.m_new_state == m_sm.m_sensitive)\n       {\n@@ -118,7 +118,7 @@ class exposure_through_output_file\n   }\n \n   label_text describe_call_with_state (const evdesc::call_with_state &info)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (info.m_state == m_sm.m_sensitive)\n       return info.formatted_print\n@@ -128,15 +128,15 @@ class exposure_through_output_file\n   }\n \n   label_text describe_return_of_state (const evdesc::return_of_state &info)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (info.m_state == m_sm.m_sensitive)\n       return info.formatted_print (\"returning sensitive value to %qE from %qE\",\n \t\t\t\t   info.m_caller_fndecl, info.m_callee_fndecl);\n     return label_text ();\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_first_sensitive_event.known_p ())\n       return ev.formatted_print (\"sensitive value %qE written to output file\""}, {"sha": "1f48a096e5d3af9ac5a42542dd16d1dbc9fc034d", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -75,13 +75,13 @@ class signal_state_machine : public state_machine\n public:\n   signal_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return false; }\n+  bool inherited_state_p () const final override { return false; }\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n \n   /* These states are \"global\", rather than per-expression.  */\n \n@@ -106,19 +106,19 @@ class signal_unsafe_call\n     gcc_assert (m_unsafe_fndecl);\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"signal_unsafe_call\"; }\n+  const char *get_kind () const final override { return \"signal_unsafe_call\"; }\n \n   bool operator== (const signal_unsafe_call &other) const\n   {\n     return m_unsafe_call == other.m_unsafe_call;\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_unsafe_call_within_signal_handler;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n@@ -148,7 +148,7 @@ class signal_unsafe_call\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.is_global_p ()\n \t&& change.m_new_state == m_sm.m_in_signal_handler)\n@@ -160,7 +160,7 @@ class signal_unsafe_call\n     return label_text ();\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"call to %qD from within signal handler\",\n \t\t\t       m_unsafe_fndecl);\n@@ -213,7 +213,7 @@ update_model_for_signal_handler (region_model *model,\n class signal_delivery_edge_info_t : public custom_edge_info\n {\n public:\n-  void print (pretty_printer *pp) const FINAL OVERRIDE\n+  void print (pretty_printer *pp) const final override\n   {\n     pp_string (pp, \"signal delivered\");\n   }\n@@ -226,7 +226,7 @@ class signal_delivery_edge_info_t : public custom_edge_info\n \n   bool update_model (region_model *model,\n \t\t     const exploded_edge *eedge,\n-\t\t     region_model_context *) const FINAL OVERRIDE\n+\t\t     region_model_context *) const final override\n   {\n     gcc_assert (eedge);\n     update_model_for_signal_handler (model, eedge->m_dest->get_function ());\n@@ -235,7 +235,7 @@ class signal_delivery_edge_info_t : public custom_edge_info\n \n   void add_events_to_path (checker_path *emission_path,\n \t\t\t   const exploded_edge &eedge ATTRIBUTE_UNUSED)\n-    const FINAL OVERRIDE\n+    const final override\n   {\n     emission_path->add_event\n       (new precanned_custom_event\n@@ -261,7 +261,7 @@ class register_signal_handler : public custom_transition\n      on the node.  */\n   void impl_transition (exploded_graph *eg,\n \t\t\texploded_node *src_enode,\n-\t\t\tint sm_idx) FINAL OVERRIDE\n+\t\t\tint sm_idx) final override\n   {\n     function *handler_fun = DECL_STRUCT_FUNCTION (m_fndecl);\n     if (!handler_fun)"}, {"sha": "3aaa69ac4315bb46dd1a252e13543f740ec65f54", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -80,25 +80,25 @@ class taint_state_machine : public state_machine\n public:\n   taint_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return true; }\n+  bool inherited_state_p () const final override { return true; }\n \n   state_t alt_get_inherited_state (const sm_state_map &map,\n \t\t\t\t   const svalue *sval,\n \t\t\t\t   const extrinsic_state &ext_state)\n-    const FINAL OVERRIDE;\n+    const final override;\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n   void on_condition (sm_context *sm_ctxt,\n \t\t     const supernode *node,\n \t\t     const gimple *stmt,\n \t\t     const svalue *lhs,\n \t\t     enum tree_code op,\n-\t\t     const svalue *rhs) const FINAL OVERRIDE;\n+\t\t     const svalue *rhs) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n \n   bool get_taint (state_t s, tree type, enum bounds *out) const;\n \n@@ -135,15 +135,15 @@ class taint_diagnostic : public pending_diagnostic\n   : m_sm (sm), m_arg (arg), m_has_bounds (has_bounds)\n   {}\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     const taint_diagnostic &other = (const taint_diagnostic &)base_other;\n     return (same_tree_p (m_arg, other.m_arg)\n \t    && m_has_bounds == other.m_has_bounds);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.m_new_state == m_sm.m_tainted)\n       {\n@@ -180,14 +180,14 @@ class tainted_array_index : public taint_diagnostic\n   : taint_diagnostic (sm, arg, has_bounds)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"tainted_array_index\"; }\n+  const char *get_kind () const final override { return \"tainted_array_index\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_tainted_array_index;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     /* CWE-129: \"Improper Validation of Array Index\".  */\n@@ -217,7 +217,7 @@ class tainted_array_index : public taint_diagnostic\n       }\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     switch (m_has_bounds)\n       {\n@@ -253,14 +253,14 @@ class tainted_offset : public taint_diagnostic\n   : taint_diagnostic (sm, arg, has_bounds)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"tainted_offset\"; }\n+  const char *get_kind () const final override { return \"tainted_offset\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_tainted_offset;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     /* CWE-823: \"Use of Out-of-range Pointer Offset\".  */\n@@ -312,7 +312,7 @@ class tainted_offset : public taint_diagnostic\n \t}\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_arg)\n       switch (m_has_bounds)\n@@ -363,14 +363,14 @@ class tainted_size : public taint_diagnostic\n   : taint_diagnostic (sm, arg, has_bounds)\n   {}\n \n-  const char *get_kind () const OVERRIDE { return \"tainted_size\"; }\n+  const char *get_kind () const override { return \"tainted_size\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_tainted_size;\n   }\n \n-  bool emit (rich_location *rich_loc) OVERRIDE\n+  bool emit (rich_location *rich_loc) override\n   {\n     diagnostic_metadata m;\n     m.add_cwe (129);\n@@ -399,7 +399,7 @@ class tainted_size : public taint_diagnostic\n       }\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     switch (m_has_bounds)\n       {\n@@ -436,12 +436,12 @@ class tainted_access_attrib_size : public tainted_size\n   {\n   }\n \n-  const char *get_kind () const OVERRIDE\n+  const char *get_kind () const override\n   {\n     return \"tainted_access_attrib_size\";\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     bool warned = tainted_size::emit (rich_loc);\n     if (warned)\n@@ -470,14 +470,14 @@ class tainted_divisor : public taint_diagnostic\n   : taint_diagnostic (sm, arg, has_bounds)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"tainted_divisor\"; }\n+  const char *get_kind () const final override { return \"tainted_divisor\"; }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_tainted_divisor;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     /* CWE-369: \"Divide By Zero\".  */\n@@ -493,7 +493,7 @@ class tainted_divisor : public taint_diagnostic\n \t\t\t   \" without checking for zero\");\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_arg)\n       return ev.formatted_print\n@@ -520,12 +520,12 @@ class tainted_allocation_size : public taint_diagnostic\n   {\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"tainted_allocation_size\";\n   }\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     if (!taint_diagnostic::subclass_equal_p (base_other))\n       return false;\n@@ -534,12 +534,12 @@ class tainted_allocation_size : public taint_diagnostic\n     return m_mem_space == other.m_mem_space;\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_tainted_allocation_size;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n     /* \"CWE-789: Memory Allocation with Excessive Size Value\".  */\n@@ -614,7 +614,7 @@ class tainted_allocation_size : public taint_diagnostic\n     return warned;\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_arg)\n       switch (m_has_bounds)"}, {"sha": "53fd4a208ff2c822a95812a20ac94ba17d27762a", "filename": "gcc/analyzer/state-purge.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fstate-purge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fstate-purge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstate-purge.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -236,11 +236,11 @@ class state_purge_annotator : public dot_annotator\n   state_purge_annotator (const state_purge_map *map) : m_map (map) {}\n \n   bool add_node_annotations (graphviz_out *gv, const supernode &n, bool)\n-    const FINAL OVERRIDE;\n+    const final override;\n \n   void add_stmt_annotations (graphviz_out *gv, const gimple *stmt,\n \t\t\t     bool within_row)\n-    const FINAL OVERRIDE;\n+    const final override;\n \n private:\n   void print_needed (graphviz_out *gv,"}, {"sha": "1b7c818051b6b05d4f8d850a65084f7644a70182", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -2933,7 +2933,7 @@ store::remove_overlapping_bindings (store_manager *mgr, const region *reg,\n \n struct region_finder : public visitor\n {\n-  void visit_region (const region *reg) FINAL OVERRIDE\n+  void visit_region (const region *reg) final override\n   {\n     m_regs.add (reg);\n   }"}, {"sha": "368b2990ae8c96a6036f579a24ca6afaffc59baa", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -347,7 +347,7 @@ class concrete_binding : public binding_key\n   concrete_binding (bit_offset_t start_bit_offset, bit_size_t size_in_bits)\n   : m_bit_range (start_bit_offset, size_in_bits)\n   {}\n-  bool concrete_p () const FINAL OVERRIDE { return true; }\n+  bool concrete_p () const final override { return true; }\n \n   hashval_t hash () const\n   {\n@@ -361,9 +361,9 @@ class concrete_binding : public binding_key\n     return m_bit_range == other.m_bit_range;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n-  const concrete_binding *dyn_cast_concrete_binding () const FINAL OVERRIDE\n+  const concrete_binding *dyn_cast_concrete_binding () const final override\n   { return this; }\n \n   const bit_range &get_bit_range () const { return m_bit_range; }\n@@ -415,7 +415,7 @@ class symbolic_binding : public binding_key\n   typedef symbolic_binding key_t;\n \n   symbolic_binding (const region *region) : m_region (region) {}\n-  bool concrete_p () const FINAL OVERRIDE { return false; }\n+  bool concrete_p () const final override { return false; }\n \n   hashval_t hash () const\n   {\n@@ -426,9 +426,9 @@ class symbolic_binding : public binding_key\n     return m_region == other.m_region;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n \n-  const symbolic_binding *dyn_cast_symbolic_binding () const FINAL OVERRIDE\n+  const symbolic_binding *dyn_cast_symbolic_binding () const final override\n   { return this; }\n \n   const region *get_region () const { return m_region; }"}, {"sha": "cc53fcb7f241370df0cfc09bbe378c4aaae60699", "filename": "gcc/analyzer/supergraph.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsupergraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsupergraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -245,7 +245,7 @@ class supernode : public dnode<supergraph_traits>\n     return m_bb == EXIT_BLOCK_PTR_FOR_FN (m_fun);\n   }\n \n-  void dump_dot (graphviz_out *gv, const dump_args_t &args) const OVERRIDE;\n+  void dump_dot (graphviz_out *gv, const dump_args_t &args) const override;\n   void dump_dot_id (pretty_printer *pp) const;\n \n   json::object *to_json () const;\n@@ -389,14 +389,14 @@ class callgraph_superedge : public superedge\n   {}\n \n   void dump_label_to_pp (pretty_printer *pp, bool user_facing) const\n-    FINAL OVERRIDE;\n+    final override;\n \n-  callgraph_superedge *dyn_cast_callgraph_superedge () FINAL OVERRIDE\n+  callgraph_superedge *dyn_cast_callgraph_superedge () final override\n   {\n     return this;\n   }\n   const callgraph_superedge *dyn_cast_callgraph_superedge () const\n-    FINAL OVERRIDE\n+    final override\n   {\n     return this;\n   }\n@@ -439,11 +439,11 @@ class call_superedge : public callgraph_superedge\n   : callgraph_superedge (src, dst, SUPEREDGE_CALL, cedge)\n   {}\n \n-  call_superedge *dyn_cast_call_superedge () FINAL OVERRIDE\n+  call_superedge *dyn_cast_call_superedge () final override\n   {\n     return this;\n   }\n-  const call_superedge *dyn_cast_call_superedge () const FINAL OVERRIDE\n+  const call_superedge *dyn_cast_call_superedge () const final override\n   {\n     return this;\n   }\n@@ -475,8 +475,8 @@ class return_superedge : public callgraph_superedge\n   : callgraph_superedge (src, dst, SUPEREDGE_RETURN, cedge)\n   {}\n \n-  return_superedge *dyn_cast_return_superedge () FINAL OVERRIDE { return this; }\n-  const return_superedge *dyn_cast_return_superedge () const FINAL OVERRIDE\n+  return_superedge *dyn_cast_return_superedge () final override { return this; }\n+  const return_superedge *dyn_cast_return_superedge () const final override\n   {\n     return this;\n   }\n@@ -509,9 +509,9 @@ class cfg_superedge : public superedge\n     m_cfg_edge (e)\n   {}\n \n-  void dump_label_to_pp (pretty_printer *pp, bool user_facing) const OVERRIDE;\n-  cfg_superedge *dyn_cast_cfg_superedge () FINAL OVERRIDE { return this; }\n-  const cfg_superedge *dyn_cast_cfg_superedge () const FINAL OVERRIDE { return this; }\n+  void dump_label_to_pp (pretty_printer *pp, bool user_facing) const override;\n+  cfg_superedge *dyn_cast_cfg_superedge () final override { return this; }\n+  const cfg_superedge *dyn_cast_cfg_superedge () const final override { return this; }\n \n   ::edge get_cfg_edge () const { return m_cfg_edge; }\n   int get_flags () const { return m_cfg_edge->flags; }\n@@ -547,13 +547,13 @@ class switch_cfg_superedge : public cfg_superedge {\n   switch_cfg_superedge (supernode *src, supernode *dst, ::edge e);\n \n   const switch_cfg_superedge *dyn_cast_switch_cfg_superedge () const\n-    FINAL OVERRIDE\n+    final override\n   {\n     return this;\n   }\n \n   void dump_label_to_pp (pretty_printer *pp, bool user_facing) const\n-    FINAL OVERRIDE;\n+    final override;\n \n   gswitch *get_switch_stmt () const\n   {"}, {"sha": "f4cab0d4134b747da46b322a615db0ec9d2b6ac1", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -229,14 +229,14 @@ class region_svalue : public svalue\n     gcc_assert (m_reg != NULL);\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_REGION; }\n+  enum svalue_kind get_kind () const final override { return SK_REGION; }\n   const region_svalue *\n-  dyn_cast_region_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_region_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   const region * get_pointee () const { return m_reg; }\n \n@@ -278,14 +278,14 @@ class constant_svalue : public svalue\n     gcc_assert (CONSTANT_CLASS_P (cst_expr));\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_CONSTANT; }\n+  enum svalue_kind get_kind () const final override { return SK_CONSTANT; }\n   const constant_svalue *\n-  dyn_cast_constant_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_constant_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   tree get_constant () const { return m_cst_expr; }\n   static tristate eval_condition (const constant_svalue *lhs,\n@@ -295,9 +295,9 @@ class constant_svalue : public svalue\n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n-  bool all_zeroes_p () const FINAL OVERRIDE;\n+  bool all_zeroes_p () const final override;\n \n  private:\n   tree m_cst_expr;\n@@ -327,18 +327,18 @@ class unknown_svalue : public svalue\n   : svalue (complexity (1, 1), type)\n   {}\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_UNKNOWN; }\n+  enum svalue_kind get_kind () const final override { return SK_UNKNOWN; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n   /* Unknown values are singletons per-type, so can't have state.  */\n-  bool can_have_associated_state_p () const FINAL OVERRIDE { return false; }\n+  bool can_have_associated_state_p () const final override { return false; }\n };\n \n /* An enum describing a particular kind of \"poisoned\" value.  */\n@@ -395,22 +395,22 @@ class poisoned_svalue : public svalue\n   poisoned_svalue (enum poison_kind kind, tree type)\n   : svalue (complexity (1, 1), type), m_kind (kind) {}\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_POISONED; }\n+  enum svalue_kind get_kind () const final override { return SK_POISONED; }\n   const poisoned_svalue *\n-  dyn_cast_poisoned_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_poisoned_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n   enum poison_kind get_poison_kind () const { return m_kind; }\n \n   /* Poisoned svalues are singletons per-type, so can't have state.  */\n-  bool can_have_associated_state_p () const FINAL OVERRIDE { return false; }\n+  bool can_have_associated_state_p () const final override { return false; }\n \n  private:\n   enum poison_kind m_kind;\n@@ -504,12 +504,12 @@ class setjmp_svalue : public svalue\n   : svalue (complexity (1, 1), type), m_setjmp_record (setjmp_record)\n   {}\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_SETJMP; }\n+  enum svalue_kind get_kind () const final override { return SK_SETJMP; }\n   const setjmp_svalue *\n-  dyn_cast_setjmp_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_setjmp_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   int get_enode_index () const;\n \n@@ -554,14 +554,14 @@ class initial_svalue : public svalue\n     gcc_assert (m_reg != NULL);\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_INITIAL; }\n+  enum svalue_kind get_kind () const final override { return SK_INITIAL; }\n   const initial_svalue *\n-  dyn_cast_initial_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_initial_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   bool initial_value_of_param_p () const;\n \n@@ -628,22 +628,22 @@ class unaryop_svalue : public svalue\n     gcc_assert (arg->can_have_associated_state_p ());\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_UNARYOP; }\n+  enum svalue_kind get_kind () const final override { return SK_UNARYOP; }\n   const unaryop_svalue *\n-  dyn_cast_unaryop_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_unaryop_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   enum tree_code get_op () const { return m_op; }\n   const svalue *get_arg () const { return m_arg; }\n \n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n  private:\n   enum tree_code m_op;\n@@ -722,16 +722,16 @@ class binop_svalue : public svalue\n     gcc_assert (arg1->can_have_associated_state_p ());\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_BINOP; }\n-  const binop_svalue *dyn_cast_binop_svalue () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override { return SK_BINOP; }\n+  const binop_svalue *dyn_cast_binop_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   enum tree_code get_op () const { return m_op; }\n   const svalue *get_arg0 () const { return m_arg0; }\n@@ -803,16 +803,16 @@ class sub_svalue : public svalue\n   sub_svalue (tree type, const svalue *parent_svalue,\n \t       const region *subregion);\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_SUB; }\n-  const sub_svalue *dyn_cast_sub_svalue () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override { return SK_SUB; }\n+  const sub_svalue *dyn_cast_sub_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   const svalue *get_parent () const { return m_parent_svalue; }\n   const region *get_subregion () const { return m_subregion; }\n@@ -885,24 +885,24 @@ class repeated_svalue : public svalue\n \t\t   const svalue *outer_size,\n \t\t   const svalue *inner_svalue);\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_REPEATED; }\n-  const repeated_svalue *dyn_cast_repeated_svalue () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override { return SK_REPEATED; }\n+  const repeated_svalue *dyn_cast_repeated_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const svalue *get_outer_size () const { return m_outer_size; }\n   const svalue *get_inner_svalue () const { return m_inner_svalue; }\n \n-  bool all_zeroes_p () const FINAL OVERRIDE;\n+  bool all_zeroes_p () const final override;\n \n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n  private:\n   const svalue *m_outer_size;\n@@ -972,25 +972,25 @@ class bits_within_svalue : public svalue\n \t\t      const bit_range &bits,\n \t\t      const svalue *inner_svalue);\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_BITS_WITHIN; }\n+  enum svalue_kind get_kind () const final override { return SK_BITS_WITHIN; }\n   const bits_within_svalue *\n-  dyn_cast_bits_within_svalue () const FINAL OVERRIDE\n+  dyn_cast_bits_within_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   const bit_range &get_bits () const { return m_bits; }\n   const svalue *get_inner_svalue () const { return m_inner_svalue; }\n \n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n  private:\n   const bit_range m_bits;\n@@ -1034,14 +1034,14 @@ class unmergeable_svalue : public svalue\n   {\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_UNMERGEABLE; }\n+  enum svalue_kind get_kind () const final override { return SK_UNMERGEABLE; }\n   const unmergeable_svalue *\n-  dyn_cast_unmergeable_svalue () const FINAL OVERRIDE { return this; }\n+  dyn_cast_unmergeable_svalue () const final override { return this; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n   bool implicitly_live_p (const svalue_set *,\n-\t\t\t  const region_model *) const FINAL OVERRIDE;\n+\t\t\t  const region_model *) const final override;\n \n   const svalue *get_arg () const { return m_arg; }\n \n@@ -1074,10 +1074,10 @@ class placeholder_svalue : public svalue\n   {\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_PLACEHOLDER; }\n+  enum svalue_kind get_kind () const final override { return SK_PLACEHOLDER; }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const char *get_name () const { return m_name; }\n \n@@ -1165,14 +1165,14 @@ class widening_svalue : public svalue\n     gcc_assert (iter_sval->can_have_associated_state_p ());\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_WIDENING; }\n-  const widening_svalue *dyn_cast_widening_svalue () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override { return SK_WIDENING; }\n+  const widening_svalue *dyn_cast_widening_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const function_point &get_point () const { return m_point; }\n   const svalue *get_base_svalue () const { return m_base_sval; }\n@@ -1260,14 +1260,14 @@ class compound_svalue : public svalue\n \n   compound_svalue (tree type, const binding_map &map);\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_COMPOUND; }\n-  const compound_svalue *dyn_cast_compound_svalue () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override { return SK_COMPOUND; }\n+  const compound_svalue *dyn_cast_compound_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const binding_map &get_map () const { return m_map; }\n \n@@ -1282,7 +1282,7 @@ class compound_svalue : public svalue\n   const svalue *\n   maybe_fold_bits_within (tree type,\n \t\t\t  const bit_range &subrange,\n-\t\t\t  region_model_manager *mgr) const FINAL OVERRIDE;\n+\t\t\t  region_model_manager *mgr) const final override;\n \n  private:\n   static complexity calc_complexity (const binding_map &map);\n@@ -1394,14 +1394,14 @@ class conjured_svalue : public svalue\n     gcc_assert (m_stmt != NULL);\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_CONJURED; }\n-  const conjured_svalue *dyn_cast_conjured_svalue () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override { return SK_CONJURED; }\n+  const conjured_svalue *dyn_cast_conjured_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const gimple *get_stmt () const { return m_stmt; }\n   const region *get_id_region () const { return m_id_reg; }\n@@ -1515,15 +1515,15 @@ class asm_output_svalue : public svalue\n       m_input_arr[i] = inputs[i];\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE { return SK_ASM_OUTPUT; }\n+  enum svalue_kind get_kind () const final override { return SK_ASM_OUTPUT; }\n   const asm_output_svalue *\n-  dyn_cast_asm_output_svalue () const FINAL OVERRIDE\n+  dyn_cast_asm_output_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   const char *get_asm_string () const { return m_asm_string; }\n   unsigned get_output_idx () const { return m_output_idx; }\n@@ -1643,18 +1643,18 @@ class const_fn_result_svalue : public svalue\n       m_input_arr[i] = inputs[i];\n   }\n \n-  enum svalue_kind get_kind () const FINAL OVERRIDE\n+  enum svalue_kind get_kind () const final override\n   {\n     return SK_CONST_FN_RESULT;\n   }\n   const const_fn_result_svalue *\n-  dyn_cast_const_fn_result_svalue () const FINAL OVERRIDE\n+  dyn_cast_const_fn_result_svalue () const final override\n   {\n     return this;\n   }\n \n-  void dump_to_pp (pretty_printer *pp, bool simple) const FINAL OVERRIDE;\n-  void accept (visitor *v) const FINAL OVERRIDE;\n+  void dump_to_pp (pretty_printer *pp, bool simple) const final override;\n+  void accept (visitor *v) const final override;\n \n   tree get_fndecl () const { return m_fndecl; }\n   unsigned get_num_inputs () const { return m_num_inputs; }"}, {"sha": "89f36a54287e5a9846382522c7a85918e348a623", "filename": "gcc/analyzer/trimmed-graph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Ftrimmed-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Ftrimmed-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Ftrimmed-graph.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -61,7 +61,7 @@ class trimmed_node : public dnode<tg_traits>\n   : m_inner_node (inner_node) {}\n \n   void dump_dot (graphviz_out *gv,\n-\t\t const dump_args_t &args) const FINAL OVERRIDE;\n+\t\t const dump_args_t &args) const final override;\n \n private:\n   const exploded_node *m_inner_node;\n@@ -77,7 +77,7 @@ class trimmed_edge : public dedge<tg_traits>\n \t\tconst exploded_edge *inner_edge);\n \n   void dump_dot (graphviz_out *gv,\n-\t\t const dump_args_t &args) const FINAL OVERRIDE;\n+\t\t const dump_args_t &args) const final override;\n \n  private:\n   const exploded_edge *m_inner_edge;"}, {"sha": "3f15adaf2fc07579231a3f84ac604d6d00293961", "filename": "gcc/analyzer/varargs.cc", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fvarargs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fanalyzer%2Fvarargs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fvarargs.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -206,17 +206,17 @@ class va_list_state_machine : public state_machine\n public:\n   va_list_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return false; }\n+  bool inherited_state_p () const final override { return false; }\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE\n+  bool can_purge_p (state_t s) const final override\n   {\n     return s != m_started;\n   }\n-  pending_diagnostic *on_leak (tree var) const FINAL OVERRIDE;\n+  pending_diagnostic *on_leak (tree var) const final override;\n \n   /* State for a va_list that the result of a va_start or va_copy.  */\n   state_t m_started;\n@@ -319,7 +319,7 @@ get_stateful_arg (sm_context *sm_ctxt, const gcall *call, unsigned arg_idx)\n class va_list_sm_diagnostic : public pending_diagnostic\n {\n public:\n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     const va_list_sm_diagnostic &other\n       = (const va_list_sm_diagnostic &)base_other;\n@@ -328,7 +328,7 @@ class va_list_sm_diagnostic : public pending_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    OVERRIDE\n+    override\n   {\n     if (const char *fnname = maybe_get_fnname (change))\n       return change.formatted_print (\"%qs called here\", fnname);\n@@ -380,7 +380,7 @@ class va_list_use_after_va_end : public va_list_sm_diagnostic\n   {\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_va_list_use_after_va_end;\n   }\n@@ -391,27 +391,27 @@ class va_list_use_after_va_end : public va_list_sm_diagnostic\n \t    && 0 == strcmp (m_usage_fnname, other.m_usage_fnname));\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"%qs after %qs\", m_usage_fnname, \"va_end\");\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"va_list_use_after_va_end\";\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.m_new_state == m_sm.m_ended)\n       m_va_end_event = change.m_event_id;\n     return va_list_sm_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (ev.m_expr)\n       {\n@@ -456,7 +456,7 @@ class va_list_leak : public va_list_sm_diagnostic\n   {\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_va_list_leak;\n   }\n@@ -473,10 +473,10 @@ class va_list_leak : public va_list_sm_diagnostic\n \t\t       \"missing call to %qs\", \"va_end\");\n   }\n \n-  const char *get_kind () const FINAL OVERRIDE { return \"va_list_leak\"; }\n+  const char *get_kind () const final override { return \"va_list_leak\"; }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.m_new_state == m_sm.m_started)\n       {\n@@ -486,7 +486,7 @@ class va_list_leak : public va_list_sm_diagnostic\n     return va_list_sm_diagnostic::describe_state_change (change);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (ev.m_expr)\n       {\n@@ -718,7 +718,7 @@ class va_arg_diagnostic : public pending_diagnostic\n   /* Override of pending_diagnostic::add_call_event,\n      adding a custom call_event subclass.  */\n   void add_call_event (const exploded_edge &eedge,\n-\t\t       checker_path *emission_path) OVERRIDE\n+\t\t       checker_path *emission_path) override\n   {\n     /* As per call_event, but show the number of variadic arguments\n        in the call.  */\n@@ -733,7 +733,7 @@ class va_arg_diagnostic : public pending_diagnostic\n       {\n       }\n \n-      label_text get_desc (bool can_colorize) const OVERRIDE\n+      label_text get_desc (bool can_colorize) const override\n       {\n \treturn make_label_text_n\n \t  (can_colorize, m_num_variadic_arguments,\n@@ -778,7 +778,7 @@ class va_arg_diagnostic : public pending_diagnostic\n   : m_va_list_tree (va_list_tree), m_var_arg_reg (var_arg_reg)\n   {}\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     const va_arg_diagnostic &other = (const va_arg_diagnostic &)base_other;\n     return (same_tree_p (m_va_list_tree, other.m_va_list_tree)\n@@ -819,13 +819,13 @@ class va_arg_type_mismatch : public va_arg_diagnostic\n     m_expected_type (expected_type), m_actual_type (actual_type)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"va_arg_type_mismatch\";\n   }\n \n   bool subclass_equal_p (const pending_diagnostic &base_other)\n-    const FINAL OVERRIDE\n+    const final override\n   {\n     if (!va_arg_diagnostic::subclass_equal_p (base_other))\n       return false;\n@@ -835,12 +835,12 @@ class va_arg_type_mismatch : public va_arg_diagnostic\n \t    && same_tree_p (m_actual_type, other.m_actual_type));\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_va_arg_type_mismatch;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     bool warned\n@@ -852,7 +852,7 @@ class va_arg_type_mismatch : public va_arg_diagnostic\n     return warned;\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"%<va_arg%> expected %qT but received %qT\"\n \t\t\t       \" for variadic argument %i of %qE\",\n@@ -877,17 +877,17 @@ class va_list_exhausted : public va_arg_diagnostic\n   : va_arg_diagnostic (va_list_tree, var_arg_reg)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"va_list_exhausted\";\n   }\n \n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return OPT_Wanalyzer_va_list_exhausted;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     bool warned = warning_at (rich_loc, get_controlling_option (),\n@@ -896,7 +896,7 @@ class va_list_exhausted : public va_arg_diagnostic\n     return warned;\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"%qE has no more arguments (%i consumed)\",\n \t\t\t       m_va_list_tree, get_num_consumed ());"}, {"sha": "4559ca3e28f9b6746528676a0cce58f1bc972514", "filename": "gcc/c-family/c-format.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fc-family%2Fc-format.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fc-family%2Fc-format.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -4613,7 +4613,7 @@ class range_label_for_format_type_mismatch\n   {\n   }\n \n-  label_text get_text (unsigned range_idx) const FINAL OVERRIDE\n+  label_text get_text (unsigned range_idx) const final override\n   {\n     label_text text = range_label_for_type_mismatch::get_text (range_idx);\n     if (text.m_buffer == NULL)"}, {"sha": "be86bed4fee73f0a09dccafcb4ccbb4d60942915", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -51,7 +51,7 @@ class c_pretty_printer : public pretty_printer\n {\n public:\n   c_pretty_printer ();\n-  pretty_printer *clone () const OVERRIDE;\n+  pretty_printer *clone () const override;\n \n   // Format string, possibly translated.\n   void translate_string (const char *);"}, {"sha": "bee410929bd39d6d9883945ed1069dc785b6ea8b", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 130, "deletions": 130, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -148,7 +148,7 @@ class svabd_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* The integer operations are represented as the subtraction of the\n        minimum from the maximum, with the signedness of the instruction\n@@ -179,7 +179,7 @@ class svac_impl : public function_base\n   CONSTEXPR svac_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.add_ptrue_hint (0, e.gp_mode (0));\n     insn_code icode = code_for_aarch64_pred_fac (m_unspec, e.vector_mode (0));\n@@ -194,7 +194,7 @@ class svadda_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Put the predicate last, as required by mask_fold_left_plus_optab.  */\n     e.rotate_inputs_left (0, 3);\n@@ -211,7 +211,7 @@ class svadr_bhwd_impl : public function_base\n   CONSTEXPR svadr_bhwd_impl (unsigned int shift) : m_shift (shift) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = GET_MODE (e.args[0]);\n     if (m_shift == 0)\n@@ -231,7 +231,7 @@ class svbic_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert svbic of a constant into svand of its inverse.  */\n     if (CONST_INT_P (e.args[2]))\n@@ -261,7 +261,7 @@ class svbrk_binary_impl : public function_base\n   CONSTEXPR svbrk_binary_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (code_for_aarch64_brk (m_unspec));\n   }\n@@ -277,7 +277,7 @@ class svbrk_unary_impl : public function_base\n   CONSTEXPR svbrk_unary_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_cond_insn (code_for_aarch64_brk (m_unspec));\n   }\n@@ -290,7 +290,7 @@ class svcadd_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -311,7 +311,7 @@ class svclast_impl : public quiet<function_base>\n   CONSTEXPR svclast_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Match the fold_extract_optab order.  */\n     std::swap (e.args[0], e.args[1]);\n@@ -332,7 +332,7 @@ class svcmla_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -355,7 +355,7 @@ class svcmla_lane_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -384,7 +384,7 @@ class svcmp_impl : public function_base\n     : m_code (code), m_unspec_for_fp (unspec_for_fp) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree pg = gimple_call_arg (f.call, 0);\n     tree rhs1 = gimple_call_arg (f.call, 1);\n@@ -406,7 +406,7 @@ class svcmp_impl : public function_base\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n \n@@ -442,7 +442,7 @@ class svcmp_wide_impl : public function_base\n       m_unspec_for_uint (unspec_for_uint) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     bool unsigned_p = e.type_suffix (0).unsigned_p;\n@@ -480,7 +480,7 @@ class svcmpuo_impl : public quiet<function_base>\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.add_ptrue_hint (0, e.gp_mode (0));\n     return e.use_exact_insn (code_for_aarch64_pred_fcmuo (e.vector_mode (0)));\n@@ -491,7 +491,7 @@ class svcnot_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     if (e.pred == PRED_x)\n@@ -514,15 +514,15 @@ class svcnt_bhwd_impl : public function_base\n   CONSTEXPR svcnt_bhwd_impl (machine_mode ref_mode) : m_ref_mode (ref_mode) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree count = build_int_cstu (TREE_TYPE (f.lhs),\n \t\t\t\t GET_MODE_NUNITS (m_ref_mode));\n     return gimple_build_assign (f.lhs, count);\n   }\n \n   rtx\n-  expand (function_expander &) const OVERRIDE\n+  expand (function_expander &) const override\n   {\n     return gen_int_mode (GET_MODE_NUNITS (m_ref_mode), DImode);\n   }\n@@ -539,7 +539,7 @@ class svcnt_bhwd_pat_impl : public svcnt_bhwd_impl\n     : svcnt_bhwd_impl (ref_mode) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree pattern_arg = gimple_call_arg (f.call, 0);\n     aarch64_svpattern pattern = (aarch64_svpattern) tree_to_shwi (pattern_arg);\n@@ -562,7 +562,7 @@ class svcnt_bhwd_pat_impl : public svcnt_bhwd_impl\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     unsigned int elements_per_vq = 128 / GET_MODE_UNIT_BITSIZE (m_ref_mode);\n     e.args.quick_push (gen_int_mode (elements_per_vq, DImode));\n@@ -575,7 +575,7 @@ class svcntp_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     e.add_ptrue_hint (0, mode);\n@@ -591,7 +591,7 @@ class svcreate_impl : public quiet<multi_vector_function>\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     unsigned int nargs = gimple_call_num_args (f.call);\n     tree lhs_type = TREE_TYPE (f.lhs);\n@@ -621,7 +621,7 @@ class svcreate_impl : public quiet<multi_vector_function>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     rtx lhs_tuple = e.get_nonoverlapping_reg_target ();\n \n@@ -643,7 +643,7 @@ class svcvt_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode0 = e.vector_mode (0);\n     machine_mode mode1 = e.vector_mode (1);\n@@ -706,7 +706,7 @@ class svdot_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* In the optab, the multiplication operands come before the accumulator\n        operand.  The optab is keyed off the multiplication mode.  */\n@@ -729,7 +729,7 @@ class svdotprod_lane_impl : public unspec_based_function_base\n \t\t\t\t  unspec_for_float) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Use the same ordering as the dot_prod_optab, with the\n        accumulator last.  */\n@@ -744,7 +744,7 @@ class svdup_impl : public quiet<function_base>\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree vec_type = TREE_TYPE (f.lhs);\n     tree rhs = gimple_call_arg (f.call, f.pred == PRED_none ? 0 : 1);\n@@ -784,7 +784,7 @@ class svdup_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     if (e.pred == PRED_none || e.pred == PRED_x)\n       /* There's no benefit to using predicated instructions for _x here.  */\n@@ -812,7 +812,7 @@ class svdup_lane_impl : public quiet<function_base>\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* The native DUP lane has an index range of 64 bytes.  */\n     machine_mode mode = e.vector_mode (0);\n@@ -829,7 +829,7 @@ class svdupq_impl : public quiet<function_base>\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree vec_type = TREE_TYPE (f.lhs);\n     unsigned int nargs = gimple_call_num_args (f.call);\n@@ -851,7 +851,7 @@ class svdupq_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     unsigned int elements_per_vq = e.args.length ();\n@@ -900,7 +900,7 @@ class svdupq_lane_impl : public quiet<function_base>\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     rtx index = e.args[1];\n@@ -964,7 +964,7 @@ class svext_bhw_impl : public function_base\n     : m_from_mode (from_mode) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     if (e.type_suffix (0).unsigned_p)\n       {\n@@ -1006,7 +1006,7 @@ class svget_impl : public quiet<multi_vector_function>\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* Fold into a normal gimple component access.  */\n     tree rhs_tuple = gimple_call_arg (f.call, 0);\n@@ -1020,7 +1020,7 @@ class svget_impl : public quiet<multi_vector_function>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Fold the access into a subreg rvalue.  */\n     return simplify_gen_subreg (e.vector_mode (0), e.args[0],\n@@ -1033,7 +1033,7 @@ class svindex_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (e.direct_optab_handler (vec_series_optab));\n   }\n@@ -1043,7 +1043,7 @@ class svinsr_impl : public quiet<function_base>\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     gcall *new_call = gimple_build_call_internal (IFN_VEC_SHL_INSERT, 2,\n \t\t\t\t\t\t  gimple_call_arg (f.call, 0),\n@@ -1053,7 +1053,7 @@ class svinsr_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = direct_optab_handler (vec_shl_insert_optab,\n \t\t\t\t\t    e.vector_mode (0));\n@@ -1068,7 +1068,7 @@ class svlast_impl : public quiet<function_base>\n   CONSTEXPR svlast_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (code_for_extract (m_unspec, e.vector_mode (0)));\n   }\n@@ -1081,13 +1081,13 @@ class svld1_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree vectype = f.vector_type (0);\n \n@@ -1105,7 +1105,7 @@ class svld1_impl : public full_width_access\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = convert_optab_handler (maskload_optab,\n \t\t\t\t\t     e.vector_mode (0), e.gp_mode (0));\n@@ -1121,7 +1121,7 @@ class svld1_extend_impl : public extending_load\n     : extending_load (memory_type) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_load (UNSPEC_LD1_SVE, extend_rtx_code (),\n \t\t\t\t\t     e.vector_mode (0),\n@@ -1134,13 +1134,13 @@ class svld1_gather_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1);\n     /* Put the predicate last, as required by mask_gather_load_optab.  */\n@@ -1161,7 +1161,7 @@ class svld1_gather_extend_impl : public extending_load\n     : extending_load (memory_type) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1);\n     /* Put the predicate last, since the extending gathers use the same\n@@ -1180,13 +1180,13 @@ class load_replicate : public function_base\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   tree\n-  memory_scalar_type (const function_instance &fi) const OVERRIDE\n+  memory_scalar_type (const function_instance &fi) const override\n   {\n     return fi.scalar_type (0);\n   }\n@@ -1196,13 +1196,13 @@ class svld1rq_impl : public load_replicate\n {\n public:\n   machine_mode\n-  memory_vector_mode (const function_instance &fi) const OVERRIDE\n+  memory_vector_mode (const function_instance &fi) const override\n   {\n     return aarch64_vq_mode (GET_MODE_INNER (fi.vector_mode (0))).require ();\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_sve_ld1rq (e.vector_mode (0));\n     return e.use_contiguous_load_insn (icode);\n@@ -1213,13 +1213,13 @@ class svld1ro_impl : public load_replicate\n {\n public:\n   machine_mode\n-  memory_vector_mode (const function_instance &) const OVERRIDE\n+  memory_vector_mode (const function_instance &) const override\n   {\n     return OImode;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_sve_ld1ro (e.vector_mode (0));\n     return e.use_contiguous_load_insn (icode);\n@@ -1234,13 +1234,13 @@ class svld234_impl : public full_width_access\n     : full_width_access (vectors_per_tuple) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree tuple_type = TREE_TYPE (f.lhs);\n     tree vectype = f.vector_type (0);\n@@ -1275,7 +1275,7 @@ class svld234_impl : public full_width_access\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode tuple_mode = TYPE_MODE (TREE_TYPE (e.call_expr));\n     insn_code icode = convert_optab_handler (vec_mask_load_lanes_optab,\n@@ -1288,13 +1288,13 @@ class svldff1_gather_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY | CP_READ_FFR | CP_WRITE_FFR;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* See the block comment in aarch64-sve.md for details about the\n        FFR handling.  */\n@@ -1317,7 +1317,7 @@ class svldff1_gather_extend : public extending_load\n     : extending_load (memory_type) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* See the block comment in aarch64-sve.md for details about the\n        FFR handling.  */\n@@ -1340,13 +1340,13 @@ class svldnt1_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_ldnt1 (e.vector_mode (0));\n     return e.use_contiguous_load_insn (icode);\n@@ -1360,13 +1360,13 @@ class svldxf1_impl : public full_width_access\n   CONSTEXPR svldxf1_impl (int unspec) : m_unspec (unspec) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY | CP_READ_FFR | CP_WRITE_FFR;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* See the block comment in aarch64-sve.md for details about the\n        FFR handling.  */\n@@ -1388,13 +1388,13 @@ class svldxf1_extend_impl : public extending_load\n     : extending_load (memory_type), m_unspec (unspec) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY | CP_READ_FFR | CP_WRITE_FFR;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* See the block comment in aarch64-sve.md for details about the\n        FFR handling.  */\n@@ -1414,7 +1414,7 @@ class svlen_impl : public quiet<function_base>\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* The argument only exists for its type.  */\n     tree rhs_type = TREE_TYPE (gimple_call_arg (f.call, 0));\n@@ -1424,7 +1424,7 @@ class svlen_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* The argument only exists for its type.  */\n     return gen_int_mode (GET_MODE_NUNITS (e.vector_mode (0)), DImode);\n@@ -1435,7 +1435,7 @@ class svmad_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return expand_mad (e);\n   }\n@@ -1445,7 +1445,7 @@ class svmla_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Put the accumulator at the end (argument 3), but keep it as the\n        merge input for _m functions.  */\n@@ -1458,7 +1458,7 @@ class svmla_lane_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     if (e.type_suffix (0).integer_p)\n       {\n@@ -1473,7 +1473,7 @@ class svmls_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Put the accumulator at the end (argument 3), but keep it as the\n        merge input for _m functions.  */\n@@ -1486,15 +1486,15 @@ class svmov_impl : public function_base\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     return gimple_build_assign (f.lhs, BIT_AND_EXPR,\n \t\t\t\tgimple_call_arg (f.call, 0),\n \t\t\t\tgimple_call_arg (f.call, 1));\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* The canonical form for the assembler alias \"MOV Pa.B, Pb/Z, Pc.B\"\n        is \"AND Pa.B, Pb/Z, Pc.B, Pc.B\".  */\n@@ -1508,7 +1508,7 @@ class svmls_lane_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     if (e.type_suffix (0).integer_p)\n       {\n@@ -1523,7 +1523,7 @@ class svmmla_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode;\n     if (e.type_suffix (0).integer_p)\n@@ -1543,7 +1543,7 @@ class svmsb_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return expand_msb (e);\n   }\n@@ -1553,7 +1553,7 @@ class svnand_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     gcc_assert (e.pred == PRED_z);\n     return e.use_exact_insn (CODE_FOR_aarch64_pred_nandvnx16bi_z);\n@@ -1564,7 +1564,7 @@ class svnor_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     gcc_assert (e.pred == PRED_z);\n     return e.use_exact_insn (CODE_FOR_aarch64_pred_norvnx16bi_z);\n@@ -1577,7 +1577,7 @@ class svnot_impl : public rtx_code_function\n   CONSTEXPR svnot_impl () : rtx_code_function (NOT, NOT, -1) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     if (e.type_suffix_ids[0] == TYPE_SUFFIX_b)\n       {\n@@ -1595,7 +1595,7 @@ class svorn_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     gcc_assert (e.pred == PRED_z);\n     return e.use_exact_insn (CODE_FOR_aarch64_pred_ornvnx16bi_z);\n@@ -1606,13 +1606,13 @@ class svpfalse_impl : public function_base\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     return f.fold_to_pfalse ();\n   }\n \n   rtx\n-  expand (function_expander &) const OVERRIDE\n+  expand (function_expander &) const override\n   {\n     return CONST0_RTX (VNx16BImode);\n   }\n@@ -1625,7 +1625,7 @@ class svpfirst_svpnext_impl : public function_base\n   CONSTEXPR svpfirst_svpnext_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     e.add_ptrue_hint (0, mode);\n@@ -1643,13 +1643,13 @@ class svprf_bhwd_impl : public function_base\n   CONSTEXPR svprf_bhwd_impl (machine_mode mode) : m_mode (mode) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_PREFETCH_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_prefetch_operands ();\n     insn_code icode = code_for_aarch64_sve_prefetch (m_mode);\n@@ -1667,19 +1667,19 @@ class svprf_bhwd_gather_impl : public function_base\n   CONSTEXPR svprf_bhwd_gather_impl (machine_mode mode) : m_mode (mode) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_PREFETCH_MEMORY;\n   }\n \n   machine_mode\n-  memory_vector_mode (const function_instance &) const OVERRIDE\n+  memory_vector_mode (const function_instance &) const override\n   {\n     return m_mode;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_prefetch_operands ();\n     e.prepare_gather_address_operands (1);\n@@ -1705,7 +1705,7 @@ class svptest_impl : public function_base\n   CONSTEXPR svptest_impl (rtx_code compare) : m_compare (compare) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* See whether GP is an exact ptrue for some predicate mode;\n        i.e. whether converting the GP to that mode will not drop\n@@ -1751,13 +1751,13 @@ class svptrue_impl : public function_base\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     return f.fold_to_ptrue ();\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return aarch64_ptrue_all (e.type_suffix (0).element_bytes);\n   }\n@@ -1767,7 +1767,7 @@ class svptrue_pat_impl : public function_base\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree pattern_arg = gimple_call_arg (f.call, 0);\n     aarch64_svpattern pattern = (aarch64_svpattern) tree_to_shwi (pattern_arg);\n@@ -1788,7 +1788,7 @@ class svptrue_pat_impl : public function_base\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* In rtl, the predicate is represented as the constant:\n \n@@ -1816,7 +1816,7 @@ class svqdec_svqinc_bhwd_impl : public function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Treat non-_pat functions in the same way as _pat functions with\n        an SV_ALL argument.  */\n@@ -1877,7 +1877,7 @@ class svqdecp_svqincp_impl : public function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     rtx_code code = (e.type_suffix (0).unsigned_p\n \t\t     ? m_code_for_uint\n@@ -1908,13 +1908,13 @@ class svrdffr_impl : public function_base\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_FFR;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* See the block comment in aarch64-sve.md for details about the\n        FFR handling.  */\n@@ -1931,7 +1931,7 @@ class svreinterpret_impl : public quiet<function_base>\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* Punt to rtl if the effect of the reinterpret on registers does not\n        conform to GCC's endianness model.  */\n@@ -1947,7 +1947,7 @@ class svreinterpret_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     return e.use_exact_insn (code_for_aarch64_sve_reinterpret (mode));\n@@ -1958,7 +1958,7 @@ class svrev_impl : public permute\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* Punt for now on _b16 and wider; we'd need more complex evpc logic\n        to rerecognize the result.  */\n@@ -1974,7 +1974,7 @@ class svrev_impl : public permute\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (code_for_aarch64_sve_rev (e.vector_mode (0)));\n   }\n@@ -1984,7 +1984,7 @@ class svsel_impl : public quiet<function_base>\n {\n public:\n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* svsel corresponds exactly to VEC_COND_EXPR.  */\n     gimple_seq stmts = NULL;\n@@ -1996,7 +1996,7 @@ class svsel_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* svsel (cond, truev, falsev) is vcond_mask (truev, falsev, cond).  */\n     e.rotate_inputs_left (0, 3);\n@@ -2015,7 +2015,7 @@ class svset_impl : public quiet<multi_vector_function>\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree rhs_tuple = gimple_call_arg (f.call, 0);\n     tree index = gimple_call_arg (f.call, 1);\n@@ -2042,7 +2042,7 @@ class svset_impl : public quiet<multi_vector_function>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     rtx rhs_tuple = e.args[0];\n     unsigned int index = INTVAL (e.args[1]);\n@@ -2065,13 +2065,13 @@ class svsetffr_impl : public function_base\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_FFR;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.args.quick_push (CONSTM1_RTX (VNx16BImode));\n     return e.use_exact_insn (CODE_FOR_aarch64_wrffr);\n@@ -2082,13 +2082,13 @@ class svst1_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_MEMORY;\n   }\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree vectype = f.vector_type (0);\n \n@@ -2105,7 +2105,7 @@ class svst1_impl : public full_width_access\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = convert_optab_handler (maskstore_optab,\n \t\t\t\t\t     e.vector_mode (0), e.gp_mode (0));\n@@ -2117,13 +2117,13 @@ class svst1_scatter_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1);\n     /* Put the predicate last, as required by mask_scatter_store_optab.  */\n@@ -2144,7 +2144,7 @@ class svst1_scatter_truncate_impl : public truncating_store\n     : truncating_store (to_mode) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1);\n     /* Put the predicate last, since the truncating scatters use the same\n@@ -2164,7 +2164,7 @@ class svst1_truncate_impl : public truncating_store\n     : truncating_store (to_mode) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_store_trunc (e.memory_vector_mode (),\n \t\t\t\t\t\t    e.vector_mode (0));\n@@ -2180,13 +2180,13 @@ class svst234_impl : public full_width_access\n     : full_width_access (vectors_per_tuple) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_MEMORY;\n   }\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     tree vectype = f.vector_type (0);\n \n@@ -2208,7 +2208,7 @@ class svst234_impl : public full_width_access\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode tuple_mode = GET_MODE (e.args.last ());\n     insn_code icode = convert_optab_handler (vec_mask_store_lanes_optab,\n@@ -2221,13 +2221,13 @@ class svstnt1_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_stnt1 (e.vector_mode (0));\n     return e.use_contiguous_store_insn (icode);\n@@ -2241,7 +2241,7 @@ class svsub_impl : public rtx_code_function\n     : rtx_code_function (MINUS, MINUS, UNSPEC_COND_FSUB) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Canonicalize subtractions of constants to additions.  */\n     machine_mode mode = e.vector_mode (0);\n@@ -2256,7 +2256,7 @@ class svtbl_impl : public permute\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (code_for_aarch64_sve_tbl (e.vector_mode (0)));\n   }\n@@ -2270,7 +2270,7 @@ class svtrn_impl : public binary_permute\n     : binary_permute (base ? UNSPEC_TRN2 : UNSPEC_TRN1), m_base (base) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* svtrn1: { 0, nelts, 2, nelts + 2, 4, nelts + 4, ... }\n        svtrn2: as for svtrn1, but with 1 added to each index.  */\n@@ -2296,7 +2296,7 @@ class svundef_impl : public quiet<multi_vector_function>\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     rtx target = e.get_reg_target ();\n     emit_clobber (copy_rtx (target));\n@@ -2311,7 +2311,7 @@ class svunpk_impl : public quiet<function_base>\n   CONSTEXPR svunpk_impl (bool high_p) : m_high_p (high_p) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* Don't fold the predicate ops, since every bit of the svbool_t\n        result is significant.  */\n@@ -2326,7 +2326,7 @@ class svunpk_impl : public quiet<function_base>\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = GET_MODE (e.args[0]);\n     unsigned int unpacku = m_high_p ? UNSPEC_UNPACKUHI : UNSPEC_UNPACKULO;\n@@ -2353,7 +2353,7 @@ class svusdot_impl : public function_base\n   CONSTEXPR svusdot_impl (bool su) : m_su (su) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* The implementation of the ACLE function svsudot (for the non-lane\n        version) is through the USDOT instruction but with the second and third\n@@ -2382,7 +2382,7 @@ class svuzp_impl : public binary_permute\n     : binary_permute (base ? UNSPEC_UZP2 : UNSPEC_UZP1), m_base (base) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* svuzp1: { 0, 2, 4, 6, ... }\n        svuzp2: { 1, 3, 5, 7, ... }.  */\n@@ -2456,7 +2456,7 @@ class svwhilelx_impl : public while_comparison\n   }\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     if (f.type_suffix (1).unsigned_p)\n       return fold_type<poly_uint64> (f);\n@@ -2472,13 +2472,13 @@ class svwrffr_impl : public function_base\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_FFR;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (CODE_FOR_aarch64_wrffr);\n   }\n@@ -2492,7 +2492,7 @@ class svzip_impl : public binary_permute\n     : binary_permute (base ? UNSPEC_ZIP2 : UNSPEC_ZIP1), m_base (base) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     /* svzip1: { 0, nelts, 1, nelts + 1, 2, nelts + 2, ... }\n        svzip2: as for svzip1, but with nelts / 2 added to each index.  */"}, {"sha": "b8a86e33d5c7ed16cfae2c844f87ad336ac28d0d", "filename": "gcc/config/aarch64/aarch64-sve-builtins-functions.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -44,7 +44,7 @@ class quiet : public T\n     : T (t1, t2, t3) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return 0;\n   }\n@@ -59,7 +59,7 @@ class multi_vector_function : public function_base\n     : m_vectors_per_tuple (vectors_per_tuple) {}\n \n   unsigned int\n-  vectors_per_tuple () const OVERRIDE\n+  vectors_per_tuple () const override\n   {\n     return m_vectors_per_tuple;\n   }\n@@ -78,13 +78,13 @@ class full_width_access : public multi_vector_function\n     : multi_vector_function (vectors_per_tuple) {}\n \n   tree\n-  memory_scalar_type (const function_instance &fi) const OVERRIDE\n+  memory_scalar_type (const function_instance &fi) const override\n   {\n     return fi.scalar_type (0);\n   }\n \n   machine_mode\n-  memory_vector_mode (const function_instance &fi) const OVERRIDE\n+  memory_vector_mode (const function_instance &fi) const override\n   {\n     machine_mode mode = fi.vector_mode (0);\n     if (m_vectors_per_tuple != 1)\n@@ -103,19 +103,19 @@ class extending_load : public function_base\n     : m_memory_type (memory_type) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   tree\n-  memory_scalar_type (const function_instance &) const OVERRIDE\n+  memory_scalar_type (const function_instance &) const override\n   {\n     return scalar_types[type_suffixes[m_memory_type].vector_type];\n   }\n \n   machine_mode\n-  memory_vector_mode (const function_instance &fi) const OVERRIDE\n+  memory_vector_mode (const function_instance &fi) const override\n   {\n     machine_mode mem_mode = type_suffixes[m_memory_type].vector_mode;\n     machine_mode reg_mode = fi.vector_mode (0);\n@@ -145,13 +145,13 @@ class truncating_store : public function_base\n   CONSTEXPR truncating_store (scalar_int_mode to_mode) : m_to_mode (to_mode) {}\n \n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_MEMORY;\n   }\n \n   tree\n-  memory_scalar_type (const function_instance &fi) const OVERRIDE\n+  memory_scalar_type (const function_instance &fi) const override\n   {\n     /* In truncating stores, the signedness of the memory element is defined\n        to be the same as the signedness of the vector element.  The signedness\n@@ -163,7 +163,7 @@ class truncating_store : public function_base\n   }\n \n   machine_mode\n-  memory_vector_mode (const function_instance &fi) const OVERRIDE\n+  memory_vector_mode (const function_instance &fi) const override\n   {\n     poly_uint64 nunits = GET_MODE_NUNITS (fi.vector_mode (0));\n     return aarch64_sve_data_mode (m_to_mode, nunits).require ();\n@@ -205,7 +205,7 @@ class rtx_code_function : public rtx_code_function_base\n     : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.map_to_rtx_codes (m_code_for_sint, m_code_for_uint,\n \t\t\t       m_unspec_for_fp);\n@@ -225,7 +225,7 @@ class rtx_code_function_rotated : public rtx_code_function_base\n     : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Rotate the inputs into their normal order, but continue to make _m\n        functions merge with what was originally the first vector argument.  */\n@@ -279,7 +279,7 @@ class unspec_based_function : public unspec_based_function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.map_to_unspecs (m_unspec_for_sint, m_unspec_for_uint,\n \t\t\t     m_unspec_for_fp);\n@@ -301,7 +301,7 @@ class unspec_based_function_rotated : public unspec_based_function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Rotate the inputs into their normal order, but continue to make _m\n        functions merge with what was originally the first vector argument.  */\n@@ -329,7 +329,7 @@ class unspec_based_function_exact_insn : public unspec_based_function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (CODE (unspec_for (e), e.vector_mode (0)));\n   }\n@@ -386,7 +386,7 @@ class unspec_based_fused_function : public unspec_based_function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     int unspec = unspec_for (e);\n     insn_code icode;\n@@ -421,7 +421,7 @@ class unspec_based_fused_lane_function : public unspec_based_function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     int unspec = unspec_for (e);\n     insn_code icode;\n@@ -451,7 +451,7 @@ class code_for_mode_function : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (CODE_FOR_MODE (e.vector_mode (N)));\n   }\n@@ -477,7 +477,7 @@ class fixed_insn_function : public function_base\n   CONSTEXPR fixed_insn_function (insn_code code) : m_code (code) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (m_code);\n   }\n@@ -519,7 +519,7 @@ class binary_permute : public permute\n   CONSTEXPR binary_permute (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     insn_code icode = code_for_aarch64_sve (m_unspec, e.vector_mode (0));\n     return e.use_exact_insn (icode);\n@@ -547,7 +547,7 @@ class reduction : public function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     int unspec = (!e.type_suffix (0).integer_p ? m_unspec_for_fp\n@@ -576,7 +576,7 @@ class shift_wide : public function_base\n     : m_code (code), m_wide_unspec (wide_unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     machine_mode elem_mode = GET_MODE_INNER (mode);\n@@ -610,7 +610,7 @@ class unary_count : public quiet<function_base>\n   CONSTEXPR unary_count (rtx_code code) : m_code (code) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* The md patterns treat the operand as an integer.  */\n     machine_mode mode = aarch64_sve_int_mode (e.vector_mode (0));\n@@ -636,7 +636,7 @@ class while_comparison : public function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Suffix 0 determines the predicate mode, suffix 1 determines the\n        scalar mode and signedness.  */"}, {"sha": "8e26bd8a60fcef9782d91a7e8ca545f7d07c1afc", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 208, "deletions": 208, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -454,13 +454,13 @@ long_type_suffix (function_resolver &r, type_suffix_index type)\n struct nonoverloaded_base : public function_shape\n {\n   bool\n-  explicit_type_suffix_p (unsigned int) const OVERRIDE\n+  explicit_type_suffix_p (unsigned int) const override\n   {\n     return true;\n   }\n \n   tree\n-  resolve (function_resolver &) const OVERRIDE\n+  resolve (function_resolver &) const override\n   {\n     gcc_unreachable ();\n   }\n@@ -472,7 +472,7 @@ template<unsigned int EXPLICIT_MASK>\n struct overloaded_base : public function_shape\n {\n   bool\n-  explicit_type_suffix_p (unsigned int i) const OVERRIDE\n+  explicit_type_suffix_p (unsigned int i) const override\n   {\n     return (EXPLICIT_MASK >> i) & 1;\n   }\n@@ -484,7 +484,7 @@ struct adr_base : public overloaded_base<0>\n   /* The function takes two arguments: a vector base and a vector displacement\n      (either an index or an offset).  Resolve based on them both.  */\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     mode_suffix_index mode;\n@@ -503,7 +503,7 @@ template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n struct binary_imm_narrowb_base : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n@@ -515,7 +515,7 @@ struct binary_imm_narrowb_base : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (1, 1);\n   }\n@@ -528,7 +528,7 @@ template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n struct binary_imm_narrowt_base : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n@@ -540,7 +540,7 @@ struct binary_imm_narrowt_base : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -560,14 +560,14 @@ struct binary_imm_narrowt_base : public overloaded_base<0>\n struct binary_imm_long_base : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"v0,vh0,su64\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type, result_type;\n@@ -623,7 +623,7 @@ struct inc_dec_base : public overloaded_base<0>\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_range (m_pat_p ? 2 : 1, 1, 16);\n   }\n@@ -637,7 +637,7 @@ struct load_contiguous_base : public overloaded_base<0>\n   /* Resolve a call based purely on a pointer argument.  The other arguments\n      are a governing predicate and (for MODE_vnum) a vnum offset.  */\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     bool vnum_p = r.mode_suffix_id == MODE_vnum;\n     gcc_assert (r.mode_suffix_id == MODE_none || vnum_p);\n@@ -658,7 +658,7 @@ struct load_contiguous_base : public overloaded_base<0>\n struct load_gather_sv_base : public overloaded_base<0>\n {\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     mode_suffix_index mode;\n@@ -686,7 +686,7 @@ struct load_ext_gather_base : public overloaded_base<1>\n      The function has an explicit type suffix that determines the type\n      of the loaded data.  */\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     /* No resolution is needed for a vector base with no displacement;\n        there's a one-to-one mapping between short and long names.  */\n@@ -713,7 +713,7 @@ struct load_ext_gather_base : public overloaded_base<1>\n struct mmla_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     /* svmmla is distributed over several extensions.  Allow the common\n@@ -729,7 +729,7 @@ struct mmla_def : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -769,7 +769,7 @@ struct prefetch_gather_base : public overloaded_base<0>\n      The prefetch operation is the final argument.  This is purely a\n      mode-based resolution; there are no type suffixes.  */\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     bool has_displacement_p = r.displacement_units () != UNITS_none;\n \n@@ -791,7 +791,7 @@ template<typename BASE, unsigned int N>\n struct shift_right_imm_narrow_wrapper : public BASE\n {\n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bits = c.type_suffix (0).element_bits / 2;\n     return c.require_immediate_range (N, 1, bits);\n@@ -811,7 +811,7 @@ struct store_scatter_base : public overloaded_base<0>\n      The stored data is the final argument, and it determines the\n      type suffix.  */\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     bool has_displacement_p = r.displacement_units () != UNITS_none;\n \n@@ -832,14 +832,14 @@ struct store_scatter_base : public overloaded_base<0>\n struct ternary_shift_imm_base : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"v0,v0,v0,su64\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2, 1);\n   }\n@@ -862,7 +862,7 @@ template<unsigned int MODIFIER,\n struct ternary_resize2_opt_n_base : public overloaded_base<0>\n {\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -884,7 +884,7 @@ template<unsigned int MODIFIER,\n struct ternary_resize2_base : public overloaded_base<0>\n {\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -908,7 +908,7 @@ template<unsigned int MODIFIER,\n struct ternary_resize2_lane_base : public overloaded_base<0>\n {\n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -932,14 +932,14 @@ struct ternary_bfloat_lane_base\n   : public ternary_resize2_lane_base<16, TYPE_bfloat, TYPE_bfloat>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vB,vB,su64\", group, MODE_none);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_lane_index (3, N);\n   }\n@@ -954,7 +954,7 @@ struct ternary_qq_lane_base\n \t\t\t\t     TYPE_CLASS2, TYPE_CLASS3>\n {\n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_lane_index (3, 4);\n   }\n@@ -966,7 +966,7 @@ template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n struct unary_narrowb_base : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n@@ -978,7 +978,7 @@ struct unary_narrowb_base : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_unary (CLASS, r.HALF_SIZE);\n   }\n@@ -991,7 +991,7 @@ template<type_class_index CLASS = function_resolver::SAME_TYPE_CLASS>\n struct unary_narrowt_base : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     STATIC_ASSERT (CLASS == function_resolver::SAME_TYPE_CLASS\n@@ -1003,7 +1003,7 @@ struct unary_narrowt_base : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1023,7 +1023,7 @@ struct unary_narrowt_base : public overloaded_base<0>\n struct adr_index_def : public adr_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     build_all (b, \"b,b,d\", group, MODE_u32base_s32index);\n@@ -1041,7 +1041,7 @@ SHAPE (adr_index)\n struct adr_offset_def : public adr_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_offset);\n     build_all (b, \"b,b,d\", group, MODE_u32base_s32offset);\n@@ -1058,14 +1058,14 @@ SHAPE (adr_offset)\n struct binary_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2);\n   }\n@@ -1080,15 +1080,15 @@ SHAPE (binary)\n struct binary_int_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vs0\", group, MODE_none);\n     build_all (b, \"v0,v0,ss0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1108,20 +1108,20 @@ SHAPE (binary_int_opt_n)\n struct binary_lane_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_lane_index (2);\n   }\n@@ -1135,14 +1135,14 @@ SHAPE (binary_lane)\n struct binary_long_lane_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,vh0,vh0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type, result_type;\n@@ -1160,7 +1160,7 @@ struct binary_long_lane_def : public overloaded_base<0>\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_lane_index (2);\n   }\n@@ -1172,15 +1172,15 @@ SHAPE (binary_long_lane)\n struct binary_long_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,vh0,vh0\", group, MODE_none);\n     build_all (b, \"v0,vh0,sh0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type, result_type;\n@@ -1202,14 +1202,14 @@ SHAPE (binary_long_opt_n)\n struct binary_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"v0,v0,s0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1231,15 +1231,15 @@ SHAPE (binary_n)\n struct binary_narrowb_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vh0,v0,v0\", group, MODE_none);\n     build_all (b, \"vh0,v0,s0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform_opt_n (2);\n   }\n@@ -1253,15 +1253,15 @@ SHAPE (binary_narrowb_opt_n)\n struct binary_narrowt_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vh0,vh0,v0,v0\", group, MODE_none);\n     build_all (b, \"vh0,vh0,v0,s0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1284,7 +1284,7 @@ SHAPE (binary_narrowt_opt_n)\n struct binary_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0\", group, MODE_none);\n@@ -1298,7 +1298,7 @@ struct binary_opt_n_def : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform_opt_n (2);\n   }\n@@ -1309,7 +1309,7 @@ SHAPE (binary_opt_n)\n struct binary_pred_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"v0,v0,v0\", group, MODE_none);\n   }\n@@ -1322,20 +1322,20 @@ SHAPE (binary_pred)\n struct binary_rotate_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_either_or (2, 90, 270);\n   }\n@@ -1349,7 +1349,7 @@ SHAPE (binary_rotate)\n struct binary_scalar_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"v0,s0,s0\", group, MODE_none);\n   }\n@@ -1362,14 +1362,14 @@ SHAPE (binary_scalar)\n struct binary_to_uint_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vu0,v0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2);\n   }\n@@ -1383,14 +1383,14 @@ SHAPE (binary_to_uint)\n struct binary_uint_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vu0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1411,14 +1411,14 @@ SHAPE (binary_uint)\n struct binary_uint_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,su0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1440,15 +1440,15 @@ SHAPE (binary_uint_n)\n struct binary_uint_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vu0\", group, MODE_none);\n     build_all (b, \"v0,v0,su0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1468,14 +1468,14 @@ SHAPE (binary_uint_opt_n)\n struct binary_uint64_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1497,15 +1497,15 @@ SHAPE (binary_uint64_n)\n struct binary_uint64_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vu64\", group, MODE_none);\n     build_all (b, \"v0,v0,su64\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1522,14 +1522,14 @@ SHAPE (binary_uint64_opt_n)\n struct binary_wide_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vh0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1549,15 +1549,15 @@ SHAPE (binary_wide)\n struct binary_wide_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vh0\", group, MODE_none);\n     build_all (b, \"v0,v0,sh0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1576,15 +1576,15 @@ SHAPE (binary_wide_opt_n)\n struct clast_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0\", group, MODE_none);\n     build_all (b, \"s0,s0,v0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     if (!r.check_gp_argument (2, i, nargs)\n@@ -1615,14 +1615,14 @@ SHAPE (clast)\n struct compare_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vp,v0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2);\n   }\n@@ -1636,15 +1636,15 @@ SHAPE (compare)\n struct compare_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vp,v0,v0\", group, MODE_none);\n     build_all (b, \"vp,v0,s0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform_opt_n (2);\n   }\n@@ -1655,14 +1655,14 @@ SHAPE (compare_opt_n)\n struct compare_ptr_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vp,al,al\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1684,14 +1684,14 @@ SHAPE (compare_ptr)\n struct compare_scalar_def : public overloaded_base<1>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vp,s1,s1\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1714,15 +1714,15 @@ SHAPE (compare_scalar)\n struct compare_wide_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vp,v0,vw0\", group, MODE_none);\n     build_all (b, \"vp,v0,sw0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1739,7 +1739,7 @@ SHAPE (compare_wide_opt_n)\n struct count_inherent_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"su64\", group, MODE_none);\n   }\n@@ -1750,7 +1750,7 @@ SHAPE (count_inherent)\n struct count_pat_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"su64,epattern\", group, MODE_none);\n   }\n@@ -1761,7 +1761,7 @@ SHAPE (count_pat)\n struct count_pred_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"su64,vp\", group, MODE_none);\n   }\n@@ -1772,14 +1772,14 @@ SHAPE (count_pred)\n struct count_vector_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"su64,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (1);\n   }\n@@ -1792,14 +1792,14 @@ SHAPE (count_vector)\n struct create_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"t0,v0*t\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (r.vectors_per_tuple ());\n   }\n@@ -1813,15 +1813,15 @@ SHAPE (create)\n struct dupq_def : public overloaded_base<1>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     /* The \"_n\" suffix is optional; the full name has it, but the short\n        name doesn't.  */\n     build_all (b, \"v0,s0*q\", group, MODE_n, true);\n   }\n \n   tree\n-  resolve (function_resolver &) const OVERRIDE\n+  resolve (function_resolver &) const override\n   {\n     /* The short forms just make \"_n\" implicit, so no resolution is needed.  */\n     gcc_unreachable ();\n@@ -1836,20 +1836,20 @@ SHAPE (dupq)\n struct ext_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bytes = c.type_suffix (0).element_bytes;\n     return c.require_immediate_range (2, 0, 256 / bytes - 1);\n@@ -1861,14 +1861,14 @@ SHAPE (ext)\n struct fold_left_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"s0,s0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1889,14 +1889,14 @@ SHAPE (fold_left)\n struct get_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,t0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1909,7 +1909,7 @@ struct get_def : public overloaded_base<0>\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int nvectors = c.vectors_per_tuple ();\n     return c.require_immediate_range (1, 0, nvectors - 1);\n@@ -1927,7 +1927,7 @@ struct inc_dec_def : public inc_dec_base\n   CONSTEXPR inc_dec_def () : inc_dec_base (false) {}\n \n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     /* These functions are unusual in that the type suffixes for\n@@ -1952,7 +1952,7 @@ struct inc_dec_pat_def : public inc_dec_base\n   CONSTEXPR inc_dec_pat_def () : inc_dec_base (true) {}\n \n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     /* These functions are unusual in that the type suffixes for\n@@ -1971,14 +1971,14 @@ SHAPE (inc_dec_pat)\n struct inc_dec_pred_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vp\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -1998,14 +1998,14 @@ SHAPE (inc_dec_pred)\n struct inc_dec_pred_scalar_def : public overloaded_base<2>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"s0,s0,vp\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -2023,7 +2023,7 @@ SHAPE (inc_dec_pred_scalar)\n struct inherent_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"t0\", group, MODE_none);\n   }\n@@ -2034,15 +2034,15 @@ SHAPE (inherent)\n struct inherent_b_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     /* The \"_b\" suffix is optional; the full name has it, but the short\n        name doesn't.  */\n     build_all (b, \"v0\", group, MODE_none, true);\n   }\n \n   tree\n-  resolve (function_resolver &) const OVERRIDE\n+  resolve (function_resolver &) const override\n   {\n     /* The short forms just make \"_b\" implicit, so no resolution is needed.  */\n     gcc_unreachable ();\n@@ -2055,7 +2055,7 @@ SHAPE (inherent_b)\n struct load_def : public load_contiguous_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     b.add_overloaded_functions (group, MODE_vnum);\n@@ -2072,7 +2072,7 @@ SHAPE (load)\n struct load_ext_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"t0,al\", group, MODE_none);\n     build_all (b, \"t0,al,ss64\", group, MODE_vnum);\n@@ -2092,7 +2092,7 @@ SHAPE (load_ext)\n struct load_ext_gather_index_def : public load_ext_gather_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     build_sv_index (b, \"t0,al,d\", group);\n@@ -2112,7 +2112,7 @@ SHAPE (load_ext_gather_index)\n struct load_ext_gather_index_restricted_def : public load_ext_gather_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     build_sv_index64 (b, \"t0,al,d\", group);\n@@ -2136,7 +2136,7 @@ SHAPE (load_ext_gather_index_restricted)\n struct load_ext_gather_offset_def : public load_ext_gather_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_offset);\n     build_sv_offset (b, \"t0,al,d\", group);\n@@ -2161,7 +2161,7 @@ SHAPE (load_ext_gather_offset)\n struct load_ext_gather_offset_restricted_def : public load_ext_gather_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_offset);\n     build_sv_uint_offset (b, \"t0,al,d\", group);\n@@ -2183,7 +2183,7 @@ SHAPE (load_ext_gather_offset_restricted)\n struct load_gather_sv_def : public load_gather_sv_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     b.add_overloaded_functions (group, MODE_offset);\n@@ -2205,7 +2205,7 @@ SHAPE (load_gather_sv)\n struct load_gather_sv_restricted_def : public load_gather_sv_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     b.add_overloaded_functions (group, MODE_offset);\n@@ -2226,7 +2226,7 @@ SHAPE (load_gather_sv_restricted)\n struct load_gather_vs_def : public overloaded_base<1>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     /* The base vector mode is optional; the full name has it but the\n        short name doesn't.  There is no ambiguity with SHAPE_load_gather_sv\n@@ -2237,7 +2237,7 @@ struct load_gather_vs_def : public overloaded_base<1>\n   }\n \n   tree\n-  resolve (function_resolver &) const OVERRIDE\n+  resolve (function_resolver &) const override\n   {\n     /* The short name just makes the base vector mode implicit;\n        no resolution is needed.  */\n@@ -2252,7 +2252,7 @@ SHAPE (load_gather_vs)\n struct load_replicate_def : public load_contiguous_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"t0,al\", group, MODE_none);\n@@ -2264,7 +2264,7 @@ SHAPE (load_replicate)\n struct pattern_pred_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"vp,epattern\", group, MODE_none);\n   }\n@@ -2276,7 +2276,7 @@ SHAPE (pattern_pred)\n struct prefetch_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"_,ap,eprfop\", group, MODE_none);\n     build_all (b, \"_,ap,ss64,eprfop\", group, MODE_vnum);\n@@ -2297,7 +2297,7 @@ SHAPE (prefetch)\n struct prefetch_gather_index_def : public prefetch_gather_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     b.add_overloaded_functions (group, MODE_index);\n@@ -2321,7 +2321,7 @@ SHAPE (prefetch_gather_index)\n struct prefetch_gather_offset_def : public prefetch_gather_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     b.add_overloaded_functions (group, MODE_offset);\n@@ -2336,7 +2336,7 @@ SHAPE (prefetch_gather_offset)\n struct ptest_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"sp,vp\", group, MODE_none);\n   }\n@@ -2347,7 +2347,7 @@ SHAPE (ptest)\n struct rdffr_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"vp\", group, MODE_none);\n   }\n@@ -2358,14 +2358,14 @@ SHAPE (rdffr)\n struct reduction_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"s0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (1);\n   }\n@@ -2381,14 +2381,14 @@ SHAPE (reduction)\n struct reduction_wide_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"sw0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (1);\n   }\n@@ -2402,14 +2402,14 @@ SHAPE (reduction_wide)\n struct set_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"t0,t0,su64,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -2423,7 +2423,7 @@ struct set_def : public overloaded_base<0>\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int nvectors = c.vectors_per_tuple ();\n     return c.require_immediate_range (1, 0, nvectors - 1);\n@@ -2435,7 +2435,7 @@ SHAPE (set)\n struct setffr_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"_\", group, MODE_none);\n   }\n@@ -2449,20 +2449,20 @@ SHAPE (setffr)\n struct shift_left_imm_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"v0,v0,su64\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (1, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bits = c.type_suffix (0).element_bits;\n     return c.require_immediate_range (1, 0, bits - 1);\n@@ -2477,7 +2477,7 @@ SHAPE (shift_left_imm)\n struct shift_left_imm_long_def : public binary_imm_long_base\n {\n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bits = c.type_suffix (0).element_bits / 2;\n     return c.require_immediate_range (1, 0, bits - 1);\n@@ -2492,7 +2492,7 @@ SHAPE (shift_left_imm_long)\n struct shift_left_imm_to_uint_def : public shift_left_imm_def\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"vu0,v0,su64\", group, MODE_n);\n@@ -2507,20 +2507,20 @@ SHAPE (shift_left_imm_to_uint)\n struct shift_right_imm_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_n);\n     build_all (b, \"v0,v0,su64\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (1, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bits = c.type_suffix (0).element_bits;\n     return c.require_immediate_range (1, 1, bits);\n@@ -2572,7 +2572,7 @@ SHAPE (shift_right_imm_narrowt_to_uint)\n struct store_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     b.add_overloaded_functions (group, MODE_vnum);\n@@ -2581,7 +2581,7 @@ struct store_def : public overloaded_base<0>\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     bool vnum_p = r.mode_suffix_id == MODE_vnum;\n     gcc_assert (r.mode_suffix_id == MODE_none || vnum_p);\n@@ -2612,7 +2612,7 @@ SHAPE (store)\n struct store_scatter_index_def : public store_scatter_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     build_sv_index (b, \"_,as,d,t0\", group);\n@@ -2632,7 +2632,7 @@ SHAPE (store_scatter_index)\n struct store_scatter_index_restricted_def : public store_scatter_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_index);\n     build_sv_index64 (b, \"_,as,d,t0\", group);\n@@ -2657,7 +2657,7 @@ SHAPE (store_scatter_index_restricted)\n struct store_scatter_offset_def : public store_scatter_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     b.add_overloaded_functions (group, MODE_offset);\n@@ -2683,7 +2683,7 @@ SHAPE (store_scatter_offset)\n struct store_scatter_offset_restricted_def : public store_scatter_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     b.add_overloaded_functions (group, MODE_offset);\n@@ -2698,14 +2698,14 @@ SHAPE (store_scatter_offset_restricted)\n struct tbl_tuple_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,t0,vu0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -2724,7 +2724,7 @@ struct ternary_bfloat_def\n   : public ternary_resize2_base<16, TYPE_bfloat, TYPE_bfloat>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vB,vB\", group, MODE_none);\n@@ -2752,7 +2752,7 @@ struct ternary_bfloat_opt_n_def\n   : public ternary_resize2_opt_n_base<16, TYPE_bfloat, TYPE_bfloat>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vB,vB\", group, MODE_none);\n@@ -2770,7 +2770,7 @@ struct ternary_intq_uintq_lane_def\n   : public ternary_qq_lane_base<TYPE_signed, TYPE_unsigned>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vqs0,vqu0,su64\", group, MODE_none);\n@@ -2786,7 +2786,7 @@ struct ternary_intq_uintq_opt_n_def\n \t\t\t\t      TYPE_signed, TYPE_unsigned>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vqs0,vqu0\", group, MODE_none);\n@@ -2802,20 +2802,20 @@ SHAPE (ternary_intq_uintq_opt_n)\n struct ternary_lane_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (3, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_lane_index (3);\n   }\n@@ -2830,20 +2830,20 @@ SHAPE (ternary_lane)\n struct ternary_lane_rotate_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,v0,su64,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (3, 2);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return (c.require_immediate_lane_index (3, 2)\n \t    && c.require_immediate_one_of (4, 0, 90, 180, 270));\n@@ -2859,14 +2859,14 @@ struct ternary_long_lane_def\n   : public ternary_resize2_lane_base<function_resolver::HALF_SIZE>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vh0,vh0,su64\", group, MODE_none);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_lane_index (3);\n   }\n@@ -2883,7 +2883,7 @@ struct ternary_long_opt_n_def\n   : public ternary_resize2_opt_n_base<function_resolver::HALF_SIZE>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vh0,vh0\", group, MODE_none);\n@@ -2900,15 +2900,15 @@ SHAPE (ternary_long_opt_n)\n struct ternary_opt_n_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,v0\", group, MODE_none);\n     build_all (b, \"v0,v0,v0,s0\", group, MODE_n);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform_opt_n (3);\n   }\n@@ -2922,7 +2922,7 @@ SHAPE (ternary_opt_n)\n struct ternary_qq_lane_def : public ternary_qq_lane_base<>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vq0,vq0,su64\", group, MODE_none);\n@@ -2938,14 +2938,14 @@ SHAPE (ternary_qq_lane)\n struct ternary_qq_lane_rotate_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vq0,vq0,su64,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -2963,7 +2963,7 @@ struct ternary_qq_lane_rotate_def : public overloaded_base<0>\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return (c.require_immediate_lane_index (3, 4)\n \t    && c.require_immediate_one_of (4, 0, 90, 180, 270));\n@@ -2981,7 +2981,7 @@ struct ternary_qq_opt_n_def\n   : public ternary_resize2_opt_n_base<function_resolver::QUARTER_SIZE>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vq0,vq0\", group, MODE_none);\n@@ -2998,14 +2998,14 @@ SHAPE (ternary_qq_opt_n)\n struct ternary_qq_rotate_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vq0,vq0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -3022,7 +3022,7 @@ struct ternary_qq_rotate_def : public overloaded_base<0>\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_one_of (3, 0, 90, 180, 270);\n   }\n@@ -3036,20 +3036,20 @@ SHAPE (ternary_qq_rotate)\n struct ternary_rotate_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (3, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_one_of (3, 0, 90, 180, 270);\n   }\n@@ -3063,7 +3063,7 @@ SHAPE (ternary_rotate)\n struct ternary_shift_left_imm_def : public ternary_shift_imm_base\n {\n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bits = c.type_suffix (0).element_bits;\n     return c.require_immediate_range (2, 0, bits - 1);\n@@ -3078,7 +3078,7 @@ SHAPE (ternary_shift_left_imm)\n struct ternary_shift_right_imm_def : public ternary_shift_imm_base\n {\n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     unsigned int bits = c.type_suffix (0).element_bits;\n     return c.require_immediate_range (2, 1, bits);\n@@ -3090,14 +3090,14 @@ SHAPE (ternary_shift_right_imm)\n struct ternary_uint_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,vu0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -3119,7 +3119,7 @@ struct ternary_uintq_intq_def\n \t\t\t\tTYPE_unsigned, TYPE_signed>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vqu0,vqs0\", group, MODE_none);\n@@ -3136,7 +3136,7 @@ struct ternary_uintq_intq_lane_def\n   : public ternary_qq_lane_base<TYPE_unsigned, TYPE_signed>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vqu0,vqs0,su64\", group, MODE_none);\n@@ -3152,7 +3152,7 @@ struct ternary_uintq_intq_opt_n_def\n \t\t\t\t      TYPE_unsigned, TYPE_signed>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,vqu0,vqs0\", group, MODE_none);\n@@ -3168,20 +3168,20 @@ SHAPE (ternary_uintq_intq_opt_n)\n struct tmad_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0,v0,su64\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_uniform (2, 1);\n   }\n \n   bool\n-  check (function_checker &c) const OVERRIDE\n+  check (function_checker &c) const override\n   {\n     return c.require_immediate_range (2, 0, 7);\n   }\n@@ -3195,14 +3195,14 @@ SHAPE (tmad)\n struct unary_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_unary ();\n   }\n@@ -3216,14 +3216,14 @@ SHAPE (unary)\n struct unary_convert_def : public overloaded_base<1>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v1\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_unary (r.type_suffix (0).tclass,\n \t\t\t    r.type_suffix (0).element_bits);\n@@ -3239,14 +3239,14 @@ SHAPE (unary_convert)\n struct unary_convert_narrowt_def : public overloaded_base<1>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,v1\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_unary (r.type_suffix (0).tclass,\n \t\t\t    r.type_suffix (0).element_bits, true);\n@@ -3258,14 +3258,14 @@ SHAPE (unary_convert_narrowt)\n struct unary_long_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,vh0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type, result_type;\n@@ -3286,15 +3286,15 @@ SHAPE (unary_long)\n struct unary_n_def : public overloaded_base<1>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     /* The \"_n\" suffix is optional; the full name has it, but the short\n        name doesn't.  */\n     build_all (b, \"v0,s0\", group, MODE_n, true);\n   }\n \n   tree\n-  resolve (function_resolver &) const OVERRIDE\n+  resolve (function_resolver &) const override\n   {\n     /* The short forms just make \"_n\" implicit, so no resolution is needed.  */\n     gcc_unreachable ();\n@@ -3322,7 +3322,7 @@ SHAPE (unary_narrowt_to_uint)\n struct unary_pred_def : public nonoverloaded_base\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     build_all (b, \"v0,v0\", group, MODE_none);\n   }\n@@ -3336,14 +3336,14 @@ SHAPE (unary_pred)\n struct unary_to_int_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vs0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_unary (TYPE_signed);\n   }\n@@ -3357,14 +3357,14 @@ SHAPE (unary_to_int)\n struct unary_to_uint_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"vu0,v0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     return r.resolve_unary (TYPE_unsigned);\n   }\n@@ -3378,14 +3378,14 @@ SHAPE (unary_to_uint)\n struct unary_uint_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,vu0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;\n@@ -3414,14 +3414,14 @@ SHAPE (unary_uint)\n struct unary_widen_def : public overloaded_base<0>\n {\n   void\n-  build (function_builder &b, const function_group_info &group) const OVERRIDE\n+  build (function_builder &b, const function_group_info &group) const override\n   {\n     b.add_overloaded_functions (group, MODE_none);\n     build_all (b, \"v0,vh0\", group, MODE_none);\n   }\n \n   tree\n-  resolve (function_resolver &r) const OVERRIDE\n+  resolve (function_resolver &r) const override\n   {\n     unsigned int i, nargs;\n     type_suffix_index type;"}, {"sha": "c0104371a220d18d9b55603dd1ca5499b29145c2", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -82,7 +82,7 @@ class svaba_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     rtx_code max_code = e.type_suffix (0).unsigned_p ? UMAX : SMAX;\n     machine_mode mode = e.vector_mode (0);\n@@ -94,7 +94,7 @@ class svcdot_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -107,7 +107,7 @@ class svcdot_lane_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -120,13 +120,13 @@ class svldnt1_gather_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_READ_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1, false);\n     machine_mode mem_mode = e.memory_vector_mode ();\n@@ -142,7 +142,7 @@ class svldnt1_gather_extend_impl : public extending_load\n     : extending_load (memory_type) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1, false);\n     /* Add a constant predicate for the extension rtx.  */\n@@ -162,7 +162,7 @@ class svmatch_svnmatch_impl : public function_base\n   CONSTEXPR svmatch_svnmatch_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* These are UNSPEC_PRED_Z operations and so need a hint operand.  */\n     e.add_ptrue_hint (0, e.gp_mode (0));\n@@ -185,7 +185,7 @@ class svmovl_lb_impl : public unspec_based_function_base\n   {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.args.quick_push (const0_rtx);\n     return e.map_to_unspecs (m_unspec_for_sint, m_unspec_for_uint,\n@@ -197,7 +197,7 @@ class svqcadd_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -213,7 +213,7 @@ class svqrdcmlah_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -226,7 +226,7 @@ class svqrdcmlah_lane_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     /* Convert the rotation amount into a specific unspec.  */\n     int rot = INTVAL (e.args.pop ());\n@@ -242,7 +242,7 @@ class svqrshl_impl : public unspec_based_function\n     : unspec_based_function (UNSPEC_SQRSHL, UNSPEC_UQRSHL, -1) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     if (tree amount = uniform_integer_cst_p (gimple_call_arg (f.call, 2)))\n       {\n@@ -276,7 +276,7 @@ class svqshl_impl : public unspec_based_function\n     : unspec_based_function (UNSPEC_SQSHL, UNSPEC_UQSHL, -1) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     if (tree amount = uniform_integer_cst_p (gimple_call_arg (f.call, 2)))\n       {\n@@ -312,7 +312,7 @@ class svrshl_impl : public unspec_based_function\n     : unspec_based_function (UNSPEC_SRSHL, UNSPEC_URSHL, -1) {}\n \n   gimple *\n-  fold (gimple_folder &f) const OVERRIDE\n+  fold (gimple_folder &f) const override\n   {\n     if (tree amount = uniform_integer_cst_p (gimple_call_arg (f.call, 2)))\n       {\n@@ -349,7 +349,7 @@ class svsqadd_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     if (e.pred == PRED_x\n@@ -363,7 +363,7 @@ class svsra_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     rtx_code shift_code = e.type_suffix (0).unsigned_p ? LSHIFTRT : ASHIFTRT;\n     machine_mode mode = e.vector_mode (0);\n@@ -375,13 +375,13 @@ class svstnt1_scatter_impl : public full_width_access\n {\n public:\n   unsigned int\n-  call_properties (const function_instance &) const OVERRIDE\n+  call_properties (const function_instance &) const override\n   {\n     return CP_WRITE_MEMORY;\n   }\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1, false);\n     machine_mode mem_mode = e.memory_vector_mode ();\n@@ -397,7 +397,7 @@ class svstnt1_scatter_truncate_impl : public truncating_store\n     : truncating_store (to_mode) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     e.prepare_gather_address_operands (1, false);\n     insn_code icode = code_for_aarch64_scatter_stnt (e.vector_mode (0),\n@@ -412,7 +412,7 @@ class svtbl2_impl : public quiet<multi_vector_function>\n   CONSTEXPR svtbl2_impl () : quiet<multi_vector_function> (2) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     return e.use_exact_insn (code_for_aarch64_sve2_tbl2 (e.vector_mode (0)));\n   }\n@@ -422,7 +422,7 @@ class svuqadd_impl : public function_base\n {\n public:\n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     machine_mode mode = e.vector_mode (0);\n     if (e.pred == PRED_x\n@@ -440,7 +440,7 @@ class svwhilerw_svwhilewr_impl : public full_width_access\n   CONSTEXPR svwhilerw_svwhilewr_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n-  expand (function_expander &e) const OVERRIDE\n+  expand (function_expander &e) const override\n   {\n     for (unsigned int i = 0; i < 2; ++i)\n       e.args[i] = e.convert_to_pmode (e.args[i]);"}, {"sha": "5080f70a8e44fde2089517d29517c48777f7756e", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -34,7 +34,7 @@ class cxx_pretty_printer : public c_pretty_printer\n public:\n   cxx_pretty_printer ();\n \n-  pretty_printer *clone () const OVERRIDE;\n+  pretty_printer *clone () const override;\n \n   void constant (tree);\n   void id_expression (tree);"}, {"sha": "94181e76d0efa32456ecbc07e4ed55f24f9cafa3", "filename": "gcc/cp/error.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fcp%2Ferror.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fcp%2Ferror.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -144,12 +144,12 @@ class cxx_format_postprocessor : public format_postprocessor\n   : m_type_a (), m_type_b ()\n   {}\n \n-  format_postprocessor *clone() const FINAL OVERRIDE\n+  format_postprocessor *clone() const final override\n   {\n     return new cxx_format_postprocessor ();\n   }\n \n-  void handle (pretty_printer *pp) FINAL OVERRIDE;\n+  void handle (pretty_printer *pp) final override;\n \n   deferred_printed_type m_type_a;\n   deferred_printed_type m_type_b;"}, {"sha": "6c1190d6f2d212773697771a7e208fca3127fc25", "filename": "gcc/diagnostic-path.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fdiagnostic-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fdiagnostic-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-path.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -106,10 +106,10 @@ class simple_diagnostic_event : public diagnostic_event\n \t\t\t   const char *desc);\n   ~simple_diagnostic_event ();\n \n-  location_t get_location () const FINAL OVERRIDE { return m_loc; }\n-  tree get_fndecl () const FINAL OVERRIDE { return m_fndecl; }\n-  int get_stack_depth () const FINAL OVERRIDE { return m_depth; }\n-  label_text get_desc (bool) const FINAL OVERRIDE\n+  location_t get_location () const final override { return m_loc; }\n+  tree get_fndecl () const final override { return m_fndecl; }\n+  int get_stack_depth () const final override { return m_depth; }\n+  label_text get_desc (bool) const final override\n   {\n     return label_text::borrow (m_desc);\n   }\n@@ -130,8 +130,8 @@ class simple_diagnostic_path : public diagnostic_path\n   simple_diagnostic_path (pretty_printer *event_pp)\n   : m_event_pp (event_pp) {}\n \n-  unsigned num_events () const FINAL OVERRIDE;\n-  const diagnostic_event & get_event (int idx) const FINAL OVERRIDE;\n+  unsigned num_events () const final override;\n+  const diagnostic_event & get_event (int idx) const final override;\n \n   diagnostic_event_id_t add_event (location_t loc, tree fndecl, int depth,\n \t\t\t\t   const char *fmt, ...)"}, {"sha": "6a1cb1bfe441ae1c24979bc7503583797790f8bd", "filename": "gcc/digraph.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fdigraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fdigraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdigraph.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -51,7 +51,7 @@ struct test_graph_traits\n struct test_node : public dnode<test_graph_traits>\n {\n   test_node (const char *name, int index) : m_name (name), m_index (index) {}\n-  void dump_dot (graphviz_out *, const dump_args_t &) const OVERRIDE\n+  void dump_dot (graphviz_out *, const dump_args_t &) const override\n   {\n   }\n \n@@ -65,7 +65,7 @@ struct test_edge : public dedge<test_graph_traits>\n   : dedge<test_graph_traits> (src, dest)\n   {}\n \n-  void dump_dot (graphviz_out *gv, const dump_args_t &) const OVERRIDE\n+  void dump_dot (graphviz_out *gv, const dump_args_t &) const override\n   {\n     gv->println (\"%s %s %s%c\", m_src->m_name, \"->\", m_dest->m_name, ';');\n   }"}, {"sha": "789ce0eed3ae2ad499396763dade820c803bc99f", "filename": "gcc/gcc-rich-location.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgcc-rich-location.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgcc-rich-location.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -113,7 +113,7 @@ class text_range_label : public range_label\n  public:\n   text_range_label (const char *text) : m_text (text) {}\n \n-  label_text get_text (unsigned /*range_idx*/) const FINAL OVERRIDE\n+  label_text get_text (unsigned /*range_idx*/) const final override\n   {\n     return label_text::borrow (m_text);\n   }\n@@ -159,7 +159,7 @@ class range_label_for_type_mismatch : public range_label\n   {\n   }\n \n-  label_text get_text (unsigned range_idx) const OVERRIDE;\n+  label_text get_text (unsigned range_idx) const override;\n \n  protected:\n   tree m_labelled_type;\n@@ -178,7 +178,7 @@ class maybe_range_label_for_tree_type_mismatch : public range_label\n   {\n   }\n \n-  label_text get_text (unsigned range_idx) const FINAL OVERRIDE;\n+  label_text get_text (unsigned range_idx) const final override;\n \n  private:\n   tree m_expr;"}, {"sha": "0b48bdb0ae5d450bc5c4440addc158318ce85036", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -761,7 +761,7 @@ class check_array_bounds_dom_walker : public dom_walker\n     checker (checker) { }\n   ~check_array_bounds_dom_walker () {}\n \n-  edge before_dom_children (basic_block) FINAL OVERRIDE;\n+  edge before_dom_children (basic_block) final override;\n \n private:\n   array_bounds_checker *checker;"}, {"sha": "ab02bdd4b153063f43b223ed807e0787f1d41de9", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -258,7 +258,7 @@ class loop_versioning\n   public:\n     lv_dom_walker (loop_versioning &);\n \n-    edge before_dom_children (basic_block) FINAL OVERRIDE;\n+    edge before_dom_children (basic_block) final override;\n \n   private:\n     /* The parent pass.  */\n@@ -271,7 +271,7 @@ class loop_versioning\n   {\n   public:\n     name_prop (loop_info &li) : m_li (li) {}\n-    tree value_of_expr (tree name, gimple *) FINAL OVERRIDE;\n+    tree value_of_expr (tree name, gimple *) final override;\n \n   private:\n     /* Information about the versioning we've performed on the loop.  */"}, {"sha": "c726393b380497f29d796b9f88eb5d500390f530", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -77,9 +77,9 @@ class sbr_vector : public ssa_block_ranges\n public:\n   sbr_vector (tree t, irange_allocator *allocator);\n \n-  virtual bool set_bb_range (const_basic_block bb, const irange &r) OVERRIDE;\n-  virtual bool get_bb_range (irange &r, const_basic_block bb) OVERRIDE;\n-  virtual bool bb_range_p (const_basic_block bb) OVERRIDE;\n+  virtual bool set_bb_range (const_basic_block bb, const irange &r) override;\n+  virtual bool get_bb_range (irange &r, const_basic_block bb) override;\n+  virtual bool bb_range_p (const_basic_block bb) override;\n protected:\n   irange **m_tab;\t// Non growing vector.\n   int m_tab_size;\n@@ -192,9 +192,9 @@ class sbr_sparse_bitmap : public ssa_block_ranges\n {\n public:\n   sbr_sparse_bitmap (tree t, irange_allocator *allocator, bitmap_obstack *bm);\n-  virtual bool set_bb_range (const_basic_block bb, const irange &r) OVERRIDE;\n-  virtual bool get_bb_range (irange &r, const_basic_block bb) OVERRIDE;\n-  virtual bool bb_range_p (const_basic_block bb) OVERRIDE;\n+  virtual bool set_bb_range (const_basic_block bb, const irange &r) override;\n+  virtual bool get_bb_range (irange &r, const_basic_block bb) override;\n+  virtual bool bb_range_p (const_basic_block bb) override;\n private:\n   void bitmap_set_quad (bitmap head, int quad, int quad_value);\n   int bitmap_get_quad (const_bitmap head, int quad);"}, {"sha": "555fe32513f3495405eca6999299a88478d341ba", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -92,7 +92,7 @@ class ranger_cache : public range_query\n   side_effect_manager m_exit;\n \n   void dump_bb (FILE *f, basic_block bb);\n-  virtual void dump (FILE *f) OVERRIDE;\n+  virtual void dump (FILE *f) override;\n private:\n   ssa_global_cache m_globals;\n   block_range_cache m_on_entry;"}, {"sha": "0a947c16c584f07488a6f05cd746277c26dc7881", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -109,8 +109,8 @@ class fur_edge : public fur_source\n {\n public:\n   fur_edge (edge e, range_query *q = NULL);\n-  virtual bool get_operand (irange &r, tree expr) OVERRIDE;\n-  virtual bool get_phi_operand (irange &r, tree expr, edge e) OVERRIDE;\n+  virtual bool get_operand (irange &r, tree expr) override;\n+  virtual bool get_phi_operand (irange &r, tree expr, edge e) override;\n private:\n   edge m_edge;\n };\n@@ -217,8 +217,8 @@ class fur_list : public fur_source\n   fur_list (irange &r1);\n   fur_list (irange &r1, irange &r2);\n   fur_list (unsigned num, irange *list);\n-  virtual bool get_operand (irange &r, tree expr) OVERRIDE;\n-  virtual bool get_phi_operand (irange &r, tree expr, edge e) OVERRIDE;\n+  virtual bool get_operand (irange &r, tree expr) override;\n+  virtual bool get_phi_operand (irange &r, tree expr, edge e) override;\n private:\n   int_range_max m_local[2];\n   irange *m_list;"}, {"sha": "53a5bf85dd4cff095ad0376511ae0ee22bdfa337", "filename": "gcc/gimple-range-fold.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -143,9 +143,9 @@ class fur_stmt : public fur_source\n {\n public:\n   fur_stmt (gimple *s, range_query *q = NULL);\n-  virtual bool get_operand (irange &r, tree expr) OVERRIDE;\n-  virtual bool get_phi_operand (irange &r, tree expr, edge e) OVERRIDE;\n-  virtual relation_kind query_relation (tree op1, tree op2) OVERRIDE;\n+  virtual bool get_operand (irange &r, tree expr) override;\n+  virtual bool get_phi_operand (irange &r, tree expr, edge e) override;\n+  virtual relation_kind query_relation (tree op1, tree op2) override;\n private:\n   gimple *m_stmt;\n };\n@@ -158,9 +158,9 @@ class fur_depend : public fur_stmt\n public:\n   fur_depend (gimple *s, gori_compute *gori, range_query *q = NULL);\n   virtual void register_relation (gimple *stmt, relation_kind k, tree op1,\n-\t\t\t\t  tree op2) OVERRIDE;\n+\t\t\t\t  tree op2) override;\n   virtual void register_relation (edge e, relation_kind k, tree op1,\n-\t\t\t\t  tree op2) OVERRIDE;\n+\t\t\t\t  tree op2) override;\n protected:\n   relation_oracle *m_oracle;\n };"}, {"sha": "572acd33d7f5d98db094619ca6723895aa2f83c1", "filename": "gcc/gimple-range-tests.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-tests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range-tests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-tests.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -42,7 +42,7 @@ class test_expr_eval : public gimple_ranger\n     ASSERT_TRUE (r == expect);\n   }\n \n-  virtual bool range_of_expr (irange &r, tree expr, gimple * = NULL) OVERRIDE\n+  virtual bool range_of_expr (irange &r, tree expr, gimple * = NULL) override\n   {\n     if (expr == op0)\n       {"}, {"sha": "13d4c77883e31f848e1b1b9b6c59427d6f908eba", "filename": "gcc/gimple-range.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -48,14 +48,14 @@ class gimple_ranger : public range_query\n public:\n   gimple_ranger (bool use_imm_uses = true);\n   ~gimple_ranger ();\n-  virtual bool range_of_stmt (irange &r, gimple *, tree name = NULL) OVERRIDE;\n-  virtual bool range_of_expr (irange &r, tree name, gimple * = NULL) OVERRIDE;\n-  virtual bool range_on_edge (irange &r, edge e, tree name) OVERRIDE;\n+  virtual bool range_of_stmt (irange &r, gimple *, tree name = NULL) override;\n+  virtual bool range_of_expr (irange &r, tree name, gimple * = NULL) override;\n+  virtual bool range_on_edge (irange &r, edge e, tree name) override;\n   void range_on_entry (irange &r, basic_block bb, tree name);\n   void range_on_exit (irange &r, basic_block bb, tree name);\n   void export_global_ranges ();\n   inline gori_compute &gori ()  { return m_cache.m_gori; }\n-  virtual void dump (FILE *f) OVERRIDE;\n+  virtual void dump (FILE *f) override;\n   void debug ();\n   void dump_bb (FILE *f, basic_block bb);\n   auto_edge_flag non_executable_edge_flag;"}, {"sha": "20388ed5431fb927a71fe05838e82a0b5ef5d0e8", "filename": "gcc/gimple-ssa-evrp.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-ssa-evrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fgimple-ssa-evrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -68,19 +68,19 @@ class evrp_folder : public substitute_and_fold_engine\n       }\n   }\n \n-  tree value_of_expr (tree name, gimple *stmt) OVERRIDE\n+  tree value_of_expr (tree name, gimple *stmt) override\n   {\n     return m_range_analyzer.value_of_expr (name, stmt);\n   }\n \n-  void pre_fold_bb (basic_block bb) OVERRIDE\n+  void pre_fold_bb (basic_block bb) override\n   {\n     if (dump_file && (dump_flags & TDF_DETAILS))\n       fprintf (dump_file, \"evrp visiting BB%d\\n\", bb->index);\n     m_range_analyzer.enter (bb);\n   }\n \n-  void pre_fold_stmt (gimple *stmt) OVERRIDE\n+  void pre_fold_stmt (gimple *stmt) override\n   {\n     if (dump_file && (dump_flags & TDF_DETAILS))\n       {\n@@ -90,17 +90,17 @@ class evrp_folder : public substitute_and_fold_engine\n     m_range_analyzer.record_ranges_from_stmt (stmt, false);\n   }\n \n-  bool fold_stmt (gimple_stmt_iterator *gsi) OVERRIDE\n+  bool fold_stmt (gimple_stmt_iterator *gsi) override\n   {\n     return simplifier.simplify (gsi);\n   }\n \n-  void post_fold_bb (basic_block bb) OVERRIDE\n+  void post_fold_bb (basic_block bb) override\n   {\n     m_range_analyzer.leave (bb);\n   }\n \n-  void post_new_stmt (gimple *stmt) OVERRIDE\n+  void post_new_stmt (gimple *stmt) override\n   {\n     m_range_analyzer.set_defs_to_varying (stmt);\n   }\n@@ -157,7 +157,7 @@ class hybrid_folder : public evrp_folder\n     delete m_pta;\n   }\n \n-  bool fold_stmt (gimple_stmt_iterator *gsi) OVERRIDE\n+  bool fold_stmt (gimple_stmt_iterator *gsi) override\n     {\n       simplifier.set_range_query (first, first_exec_flag);\n       if (simplifier.simplify (gsi))\n@@ -173,27 +173,27 @@ class hybrid_folder : public evrp_folder\n       return false;\n     }\n \n-  void pre_fold_stmt (gimple *stmt) OVERRIDE\n+  void pre_fold_stmt (gimple *stmt) override\n   {\n     evrp_folder::pre_fold_stmt (stmt);\n     m_pta->visit_stmt (stmt);\n   }\n \n-  void pre_fold_bb (basic_block bb) OVERRIDE\n+  void pre_fold_bb (basic_block bb) override\n   {\n     evrp_folder::pre_fold_bb (bb);\n     m_pta->enter (bb);\n   }\n \n-  void post_fold_bb (basic_block bb) OVERRIDE\n+  void post_fold_bb (basic_block bb) override\n   {\n     evrp_folder::post_fold_bb (bb);\n     m_pta->leave (bb);\n   }\n \n-  tree value_of_expr (tree name, gimple *) OVERRIDE;\n-  tree value_on_edge (edge, tree name) OVERRIDE;\n-  tree value_of_stmt (gimple *, tree name) OVERRIDE;\n+  tree value_of_expr (tree name, gimple *) override;\n+  tree value_on_edge (edge, tree name) override;\n+  tree value_of_stmt (gimple *, tree name) override;\n \n private:\n   DISABLE_COPY_AND_ASSIGN (hybrid_folder);"}, {"sha": "2acbfdea4f8e23e58a00b438533534b1958ce901", "filename": "gcc/input.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Finput.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Finput.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -2310,7 +2310,7 @@ class ebcdic_execution_charset : public lexer_test_options\n       s_singleton = NULL;\n     }\n \n-  void apply (lexer_test &test) FINAL OVERRIDE\n+  void apply (lexer_test &test) final override\n   {\n     cpp_options *cpp_opts = cpp_get_options (test.m_parser);\n     cpp_opts->narrow_charset = \"IBM1047\";\n@@ -2375,7 +2375,7 @@ class lexer_diagnostic_sink : public lexer_test_options\n       free (str);\n   }\n \n-  void apply (lexer_test &test) FINAL OVERRIDE\n+  void apply (lexer_test &test) final override\n   {\n     cpp_callbacks *callbacks = cpp_get_callbacks (test.m_parser);\n     callbacks->diagnostic = on_diagnostic;"}, {"sha": "3ba02a0451a1ce89c88ff126b86d8d608c5466c3", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -378,7 +378,7 @@ class compile_to_memory : public context\n {\n  public:\n   compile_to_memory (recording::context *ctxt);\n-  void postprocess (const char *ctxt_progname) FINAL OVERRIDE;\n+  void postprocess (const char *ctxt_progname) final override;\n \n   result *get_result_obj () const { return m_result; }\n \n@@ -392,7 +392,7 @@ class compile_to_file : public context\n   compile_to_file (recording::context *ctxt,\n \t\t   enum gcc_jit_output_kind output_kind,\n \t\t   const char *output_path);\n-  void postprocess (const char *ctxt_progname) FINAL OVERRIDE;\n+  void postprocess (const char *ctxt_progname) final override;\n \n  private:\n   void\n@@ -483,7 +483,7 @@ class function : public wrapper\n   function(context *ctxt, tree fndecl, enum gcc_jit_function_kind kind);\n \n   void gt_ggc_mx ();\n-  void finalizer () FINAL OVERRIDE;\n+  void finalizer () final override;\n \n   tree get_return_type_as_tree () const;\n \n@@ -562,7 +562,7 @@ class block : public wrapper\n   block (function *func,\n \t const char *name);\n \n-  void finalizer () FINAL OVERRIDE;\n+  void finalizer () final override;\n \n   tree as_label_decl () const { return m_label_decl; }\n \n@@ -750,7 +750,7 @@ class source_file : public wrapper\n {\n public:\n   source_file (tree filename);\n-  void finalizer () FINAL OVERRIDE;\n+  void finalizer () final override;\n \n   source_line *\n   get_source_line (int line_num);\n@@ -771,7 +771,7 @@ class source_line : public wrapper\n {\n public:\n   source_line (source_file *file, int line_num);\n-  void finalizer () FINAL OVERRIDE;\n+  void finalizer () final override;\n \n   location *\n   get_location (recording::location *rloc, int column_num);"}, {"sha": "697dee66e73306b57ff145e065e3804e431caa18", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -3741,7 +3741,7 @@ class rvalue_usage_validator : public recording::rvalue_visitor\n \t\t\t  recording::statement *stmt);\n \n   void\n-  visit (recording::rvalue *rvalue) FINAL OVERRIDE;\n+  visit (recording::rvalue *rvalue) final override;\n \n  private:\n   const char *m_api_funcname;"}, {"sha": "2dd8a957ca7958544044e18b3b6ce0fc4e0a686e", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 293, "deletions": 293, "changes": 586, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -441,11 +441,11 @@ class string : public memento\n   static string * from_printf (context *ctxt, const char *fmt, ...)\n     GNU_PRINTF(2, 3);\n \n-  void replay_into (replayer *) FINAL OVERRIDE {}\n+  void replay_into (replayer *) final override {}\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   size_t m_len;\n@@ -469,7 +469,7 @@ class location : public memento\n     m_created_by_user (created_by_user)\n  {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n   playback::location *\n   playback_location (replayer *r)\n@@ -498,12 +498,12 @@ class location : public memento\n     return static_cast <playback::location *> (m_playback_obj);\n   }\n \n-  location *dyn_cast_location () FINAL OVERRIDE { return this; }\n+  location *dyn_cast_location () final override { return this; }\n   bool created_by_user () const { return m_created_by_user; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   string *m_filename;\n@@ -603,11 +603,11 @@ class memento_of_get_type : public type\n   : type (ctxt),\n     m_kind (kind) {}\n \n-  type *dereference () FINAL OVERRIDE;\n+  type *dereference () final override;\n \n-  size_t get_size () FINAL OVERRIDE;\n+  size_t get_size () final override;\n \n-  bool accepts_writes_from (type *rtype) FINAL OVERRIDE\n+  bool accepts_writes_from (type *rtype) final override\n   {\n     if (m_kind == GCC_JIT_TYPE_VOID_PTR)\n       {\n@@ -629,20 +629,20 @@ class memento_of_get_type : public type\n     return type::accepts_writes_from (rtype);\n   }\n \n-  bool is_int () const FINAL OVERRIDE;\n-  bool is_float () const FINAL OVERRIDE;\n-  bool is_bool () const FINAL OVERRIDE;\n-  type *is_pointer () FINAL OVERRIDE { return dereference (); }\n-  type *is_array () FINAL OVERRIDE { return NULL; }\n-  bool is_void () const FINAL OVERRIDE { return m_kind == GCC_JIT_TYPE_VOID; }\n-  bool is_signed () const FINAL OVERRIDE;\n+  bool is_int () const final override;\n+  bool is_float () const final override;\n+  bool is_bool () const final override;\n+  type *is_pointer () final override { return dereference (); }\n+  type *is_array () final override { return NULL; }\n+  bool is_void () const final override { return m_kind == GCC_JIT_TYPE_VOID; }\n+  bool is_signed () const final override;\n \n public:\n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   enum gcc_jit_types m_kind;\n@@ -656,24 +656,24 @@ class memento_of_get_pointer : public type\n   : type (other_type->m_ctxt),\n     m_other_type (other_type) {}\n \n-  type *dereference () FINAL OVERRIDE { return m_other_type; }\n+  type *dereference () final override { return m_other_type; }\n \n-  size_t get_size () FINAL OVERRIDE;\n+  size_t get_size () final override;\n \n-  bool accepts_writes_from (type *rtype) FINAL OVERRIDE;\n+  bool accepts_writes_from (type *rtype) final override;\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  bool is_int () const FINAL OVERRIDE { return false; }\n-  bool is_float () const FINAL OVERRIDE { return false; }\n-  bool is_bool () const FINAL OVERRIDE { return false; }\n-  type *is_pointer () FINAL OVERRIDE { return m_other_type; }\n-  type *is_array () FINAL OVERRIDE { return NULL; }\n-  bool is_signed () const FINAL OVERRIDE { return false; }\n+  bool is_int () const final override { return false; }\n+  bool is_float () const final override { return false; }\n+  bool is_bool () const final override { return false; }\n+  type *is_pointer () final override { return m_other_type; }\n+  type *is_array () final override { return NULL; }\n+  bool is_signed () const final override { return false; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   type *m_other_type;\n@@ -689,17 +689,17 @@ class decorated_type : public type\n   : type (other_type->m_ctxt),\n     m_other_type (other_type) {}\n \n-  type *dereference () FINAL OVERRIDE { return m_other_type->dereference (); }\n+  type *dereference () final override { return m_other_type->dereference (); }\n \n-  size_t get_size () FINAL OVERRIDE { return m_other_type->get_size (); };\n+  size_t get_size () final override { return m_other_type->get_size (); };\n \n-  bool is_int () const FINAL OVERRIDE { return m_other_type->is_int (); }\n-  bool is_float () const FINAL OVERRIDE { return m_other_type->is_float (); }\n-  bool is_bool () const FINAL OVERRIDE { return m_other_type->is_bool (); }\n-  type *is_pointer () FINAL OVERRIDE { return m_other_type->is_pointer (); }\n-  type *is_array () FINAL OVERRIDE { return m_other_type->is_array (); }\n-  struct_ *is_struct () FINAL OVERRIDE { return m_other_type->is_struct (); }\n-  bool is_signed () const FINAL OVERRIDE { return m_other_type->is_signed (); }\n+  bool is_int () const final override { return m_other_type->is_int (); }\n+  bool is_float () const final override { return m_other_type->is_float (); }\n+  bool is_bool () const final override { return m_other_type->is_bool (); }\n+  type *is_pointer () final override { return m_other_type->is_pointer (); }\n+  type *is_array () final override { return m_other_type->is_array (); }\n+  struct_ *is_struct () final override { return m_other_type->is_struct (); }\n+  bool is_signed () const final override { return m_other_type->is_signed (); }\n \n protected:\n   type *m_other_type;\n@@ -712,14 +712,14 @@ class memento_of_get_const : public decorated_type\n   memento_of_get_const (type *other_type)\n   : decorated_type (other_type) {}\n \n-  bool accepts_writes_from (type */*rtype*/) FINAL OVERRIDE\n+  bool accepts_writes_from (type */*rtype*/) final override\n   {\n     /* Can't write to a \"const\".  */\n     return false;\n   }\n \n   /* Strip off the \"const\", giving the underlying type.  */\n-  type *unqualified () FINAL OVERRIDE { return m_other_type; }\n+  type *unqualified () final override { return m_other_type; }\n \n   virtual bool is_same_type_as (type *other)\n   {\n@@ -730,11 +730,11 @@ class memento_of_get_const : public decorated_type\n \n   virtual type *is_const () { return m_other_type; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n };\n \n /* Result of \"gcc_jit_type_get_volatile\".  */\n@@ -752,15 +752,15 @@ class memento_of_get_volatile : public decorated_type\n   }\n \n   /* Strip off the \"volatile\", giving the underlying type.  */\n-  type *unqualified () FINAL OVERRIDE { return m_other_type; }\n+  type *unqualified () final override { return m_other_type; }\n \n   virtual type *is_volatile () { return m_other_type; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n };\n \n /* Result of \"gcc_jit_type_get_aligned\".  */\n@@ -772,13 +772,13 @@ class memento_of_get_aligned : public decorated_type\n     m_alignment_in_bytes (alignment_in_bytes) {}\n \n   /* Strip off the alignment, giving the underlying type.  */\n-  type *unqualified () FINAL OVERRIDE { return m_other_type; }\n+  type *unqualified () final override { return m_other_type; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   size_t m_alignment_in_bytes;\n@@ -794,17 +794,17 @@ class vector_type : public decorated_type\n \n   size_t get_num_units () const { return m_num_units; }\n \n-  vector_type *dyn_cast_vector_type () FINAL OVERRIDE { return this; }\n+  vector_type *dyn_cast_vector_type () final override { return this; }\n \n   type *get_element_type () { return m_other_type; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n-  vector_type *is_vector () FINAL OVERRIDE { return this; }\n+  vector_type *is_vector () final override { return this; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   size_t m_num_units;\n@@ -823,21 +823,21 @@ class array_type : public type\n     m_num_elements (num_elements)\n   {}\n \n-  type *dereference () FINAL OVERRIDE;\n+  type *dereference () final override;\n \n-  bool is_int () const FINAL OVERRIDE { return false; }\n-  bool is_float () const FINAL OVERRIDE { return false; }\n-  bool is_bool () const FINAL OVERRIDE { return false; }\n-  type *is_pointer () FINAL OVERRIDE { return NULL; }\n-  type *is_array () FINAL OVERRIDE { return m_element_type; }\n+  bool is_int () const final override { return false; }\n+  bool is_float () const final override { return false; }\n+  bool is_bool () const final override { return false; }\n+  type *is_pointer () final override { return NULL; }\n+  type *is_array () final override { return m_element_type; }\n   int num_elements () { return m_num_elements; }\n-  bool is_signed () const FINAL OVERRIDE { return false; }\n+  bool is_signed () const final override { return false; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n  private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n  private:\n   location *m_loc;\n@@ -854,20 +854,20 @@ class function_type : public type\n \t\t type **param_types,\n \t\t int is_variadic);\n \n-  type *dereference () FINAL OVERRIDE;\n-  function_type *dyn_cast_function_type () FINAL OVERRIDE { return this; }\n-  function_type *as_a_function_type () FINAL OVERRIDE { return this; }\n+  type *dereference () final override;\n+  function_type *dyn_cast_function_type () final override { return this; }\n+  function_type *as_a_function_type () final override { return this; }\n \n-  bool is_same_type_as (type *other) FINAL OVERRIDE;\n+  bool is_same_type_as (type *other) final override;\n \n-  bool is_int () const FINAL OVERRIDE { return false; }\n-  bool is_float () const FINAL OVERRIDE { return false; }\n-  bool is_bool () const FINAL OVERRIDE { return false; }\n-  type *is_pointer () FINAL OVERRIDE { return NULL; }\n-  type *is_array () FINAL OVERRIDE { return NULL; }\n-  bool is_signed () const FINAL OVERRIDE { return false; }\n+  bool is_int () const final override { return false; }\n+  bool is_float () const final override { return false; }\n+  bool is_bool () const final override { return false; }\n+  type *is_pointer () final override { return NULL; }\n+  type *is_array () final override { return NULL; }\n+  bool is_signed () const final override { return false; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n   type * get_return_type () const { return m_return_type; }\n   const vec<type *> &get_param_types () const { return m_param_types; }\n@@ -880,9 +880,9 @@ class function_type : public type\n \t\t\t     memento *ptr_type);\n \n  private:\n-  string * make_debug_string () FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n   string * make_debug_string_with (const char *);\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   type *m_return_type;\n@@ -909,9 +909,9 @@ class field : public memento\n   compound_type * get_container () const { return m_container; }\n   void set_container (compound_type *c) { m_container = c; }\n \n-  void replay_into (replayer *) OVERRIDE;\n+  void replay_into (replayer *) override;\n \n-  void write_to_dump (dump &d) OVERRIDE;\n+  void write_to_dump (dump &d) override;\n \n   playback::field *\n   playback_field () const\n@@ -920,8 +920,8 @@ class field : public memento\n   }\n \n private:\n-  string * make_debug_string () OVERRIDE;\n-  void write_reproducer (reproducer &r) OVERRIDE;\n+  string * make_debug_string () override;\n+  void write_reproducer (reproducer &r) override;\n \n protected:\n   location *m_loc;\n@@ -943,13 +943,13 @@ class bitfield : public field\n       m_width (width)\n   {}\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   int m_width;\n@@ -972,16 +972,16 @@ class compound_type : public type\n \t      int num_fields,\n \t      field **fields);\n \n-  type *dereference () FINAL OVERRIDE;\n+  type *dereference () final override;\n \n-  bool is_int () const FINAL OVERRIDE { return false; }\n-  bool is_float () const FINAL OVERRIDE { return false; }\n-  bool is_bool () const FINAL OVERRIDE { return false; }\n-  type *is_pointer () FINAL OVERRIDE { return NULL; }\n-  type *is_array () FINAL OVERRIDE { return NULL; }\n-  bool is_signed () const FINAL OVERRIDE { return false; }\n+  bool is_int () const final override { return false; }\n+  bool is_float () const final override { return false; }\n+  bool is_bool () const final override { return false; }\n+  type *is_pointer () final override { return NULL; }\n+  type *is_array () final override { return NULL; }\n+  bool is_signed () const final override { return false; }\n \n-  bool has_known_size () const FINAL OVERRIDE { return m_fields != NULL; }\n+  bool has_known_size () const final override { return m_fields != NULL; }\n \n   playback::compound_type *\n   playback_compound_type ()\n@@ -1002,20 +1002,20 @@ class struct_ : public compound_type\n \t   location *loc,\n \t   string *name);\n \n-  struct_ *dyn_cast_struct () FINAL OVERRIDE { return this; }\n+  struct_ *dyn_cast_struct () final override { return this; }\n \n   type *\n   as_type () { return this; }\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  const char *access_as_type (reproducer &r) FINAL OVERRIDE;\n+  const char *access_as_type (reproducer &r) final override;\n \n-  struct_ *is_struct () FINAL OVERRIDE { return this; }\n+  struct_ *is_struct () final override { return this; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n };\n \n // memento of struct_::set_fields\n@@ -1026,16 +1026,16 @@ class fields : public memento\n \t  int num_fields,\n \t  field **fields);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n   int length () const { return m_fields.length (); }\n   field *get_field (int i) const { return m_fields[i]; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   compound_type *m_struct_or_union;\n@@ -1049,13 +1049,13 @@ class union_ : public compound_type\n \t  location *loc,\n \t  string *name);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  virtual bool is_union () const FINAL OVERRIDE { return true; }\n+  virtual bool is_union () const final override { return true; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n };\n \n /* An abstract base class for operations that visit all rvalues within an\n@@ -1192,7 +1192,7 @@ class lvalue : public rvalue\n   rvalue *\n   as_rvalue () { return this; }\n \n-  const char *access_as_rvalue (reproducer &r) OVERRIDE;\n+  const char *access_as_rvalue (reproducer &r) override;\n   virtual const char *access_as_lvalue (reproducer &r);\n   virtual bool is_global () const { return false; }\n   void set_tls_model (enum gcc_jit_tls_model model);\n@@ -1221,25 +1221,25 @@ class param : public lvalue\n   lvalue *\n   as_lvalue () { return this; }\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n+  void visit_children (rvalue_visitor *) final override {}\n \n   playback::param *\n   playback_param () const\n   {\n     return static_cast <playback::param *> (m_playback_obj);\n   }\n \n-  param *dyn_cast_param () FINAL OVERRIDE { return this; }\n+  param *dyn_cast_param () final override { return this; }\n \n-  const char *access_as_rvalue (reproducer &r) FINAL OVERRIDE;\n-  const char *access_as_lvalue (reproducer &r) FINAL OVERRIDE;\n+  const char *access_as_rvalue (reproducer &r) final override;\n+  const char *access_as_lvalue (reproducer &r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE { return m_name; }\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override { return m_name; }\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -1261,7 +1261,7 @@ class function : public memento\n \t    int is_variadic,\n \t    enum built_in_function builtin_id);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n   playback::function *\n   playback_function () const\n@@ -1291,7 +1291,7 @@ class function : public memento\n \n   bool is_variadic () const { return m_is_variadic; }\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n   void validate ();\n \n@@ -1300,8 +1300,8 @@ class function : public memento\n   rvalue *get_address (location *loc);\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   location *m_loc;\n@@ -1395,7 +1395,7 @@ class block : public memento\n     return static_cast <playback::block *> (m_playback_obj);\n   }\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n   bool validate ();\n \n@@ -1407,10 +1407,10 @@ class block : public memento\n   vec <block *> get_successor_blocks () const;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n   void dump_to_dot (pretty_printer *pp);\n   void dump_edges_to_dot (pretty_printer *pp);\n@@ -1446,13 +1446,13 @@ class global : public lvalue\n     free (m_initializer);\n   }\n \n-  void replay_into (replayer *) FINAL OVERRIDE;\n+  void replay_into (replayer *) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n+  void visit_children (rvalue_visitor *) final override {}\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n-  bool is_global () const FINAL OVERRIDE { return true; }\n+  bool is_global () const final override { return true; }\n \n   void\n   set_initializer (const void *initializer,\n@@ -1483,11 +1483,11 @@ class global : public lvalue\n   void set_rvalue_init (rvalue *val) { m_rvalue_init = val; }\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE { return m_name; }\n+  string * make_debug_string () final override { return m_name; }\n   template <typename T>\n   void write_initializer_reproducer (const char *id, reproducer &r);\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -1512,18 +1512,18 @@ class memento_of_new_rvalue_from_const : public rvalue\n   : rvalue (ctxt, loc, type),\n     m_value (value) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n+  void visit_children (rvalue_visitor *) final override {}\n \n-  bool is_constant () const FINAL OVERRIDE { return true; }\n+  bool is_constant () const final override { return true; }\n \n-  bool get_wide_int (wide_int *out) const FINAL OVERRIDE;\n+  bool get_wide_int (wide_int *out) const final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -1541,14 +1541,14 @@ class memento_of_new_string_literal : public rvalue\n   : rvalue (ctxt, loc, ctxt->get_type (GCC_JIT_TYPE_CONST_CHAR_PTR)),\n     m_value (value) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n+  void visit_children (rvalue_visitor *) final override {}\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -1565,14 +1565,14 @@ class memento_of_new_rvalue_from_vector : public rvalue\n \t\t\t\t     vector_type *type,\n \t\t\t\t     rvalue **elements);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -1591,14 +1591,14 @@ class ctor : public rvalue\n   : rvalue (ctxt, loc, type)\n   { }\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -1621,14 +1621,14 @@ class unary_op : public rvalue\n     m_a (a)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_UNARY;\n   }\n@@ -1651,14 +1651,14 @@ class binary_op : public rvalue\n     m_a (a),\n     m_b (b) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override;\n \n private:\n   enum gcc_jit_binary_op m_op;\n@@ -1679,14 +1679,14 @@ class comparison : public rvalue\n     m_b (b)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override;\n \n private:\n   enum gcc_jit_comparison m_op;\n@@ -1705,14 +1705,14 @@ class cast : public rvalue\n     m_rvalue (a)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_CAST;\n   }\n@@ -1732,14 +1732,14 @@ class bitcast : public rvalue\n     m_rvalue (a)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_CAST;\n   }\n@@ -1757,12 +1757,12 @@ class base_call : public rvalue\n \t     int numargs,\n \t     rvalue **args);\n \n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_POSTFIX;\n   }\n \n-  base_call *dyn_cast_base_call () FINAL OVERRIDE { return this; }\n+  base_call *dyn_cast_base_call () final override { return this; }\n \n   void set_require_tail_call (bool require_tail_call)\n   {\n@@ -1786,13 +1786,13 @@ class call : public base_call\n \tint numargs,\n \trvalue **args);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   function *m_func;\n@@ -1807,13 +1807,13 @@ class call_through_ptr : public base_call\n \t\t    int numargs,\n \t\t    rvalue **args);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   rvalue *m_fn_ptr;\n@@ -1831,14 +1831,14 @@ class array_access : public lvalue\n     m_index (index)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_POSTFIX;\n   }\n@@ -1860,14 +1860,14 @@ class access_field_of_lvalue : public lvalue\n     m_field (field)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_POSTFIX;\n   }\n@@ -1889,14 +1889,14 @@ class access_field_rvalue : public rvalue\n     m_field (field)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_POSTFIX;\n   }\n@@ -1918,14 +1918,14 @@ class dereference_field_rvalue : public lvalue\n     m_field (field)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_POSTFIX;\n   }\n@@ -1944,14 +1944,14 @@ class dereference_rvalue : public lvalue\n   : lvalue (ctxt, loc, val->get_type ()->dereference ()),\n     m_rvalue (val) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_UNARY;\n   }\n@@ -1970,14 +1970,14 @@ class get_address_of_lvalue : public rvalue\n     m_lvalue (val)\n   {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_UNARY;\n   }\n@@ -1996,14 +1996,14 @@ class function_pointer : public rvalue\n   : rvalue (ctxt, loc, type),\n     m_fn (fn) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *v) FINAL OVERRIDE;\n+  void visit_children (rvalue_visitor *v) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_UNARY;\n   }\n@@ -2023,16 +2023,16 @@ class local : public lvalue\n     set_scope (func);\n   }\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n+  void visit_children (rvalue_visitor *) final override {}\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE { return m_name; }\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n-  enum precedence get_precedence () const FINAL OVERRIDE\n+  string * make_debug_string () final override { return m_name; }\n+  void write_reproducer (reproducer &r) final override;\n+  enum precedence get_precedence () const final override\n   {\n     return PRECEDENCE_PRIMARY;\n   }\n@@ -2047,7 +2047,7 @@ class statement : public memento\n public:\n   virtual vec <block *> get_successor_blocks () const;\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n   block *get_block () const { return m_block; }\n   location *get_loc () const { return m_loc; }\n@@ -2078,11 +2078,11 @@ class eval : public statement\n   : statement (b, loc),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   rvalue *m_rvalue;\n@@ -2099,11 +2099,11 @@ class assignment : public statement\n     m_lvalue (lvalue),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   lvalue *m_lvalue;\n@@ -2123,11 +2123,11 @@ class assignment_op : public statement\n     m_op (op),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   lvalue *m_lvalue;\n@@ -2144,11 +2144,11 @@ class comment : public statement\n   : statement (b, loc),\n     m_text (text) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   string *m_text;\n@@ -2167,13 +2167,13 @@ class conditional : public statement\n     m_on_true (on_true),\n     m_on_false (on_false) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n+  vec <block *> get_successor_blocks () const final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   rvalue *m_boolval;\n@@ -2190,13 +2190,13 @@ class jump : public statement\n   : statement (b, loc),\n     m_target (target) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n+  vec <block *> get_successor_blocks () const final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   block *m_target;\n@@ -2211,13 +2211,13 @@ class return_ : public statement\n   : statement (b, loc),\n     m_rvalue (rvalue) {}\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n+  vec <block *> get_successor_blocks () const final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   rvalue *m_rvalue;\n@@ -2240,12 +2240,12 @@ class case_ : public memento\n   rvalue *get_max_value () const { return m_max_value; }\n   block *get_dest_block () const { return m_dest_block; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE { /* empty */ }\n+  void replay_into (replayer *) final override { /* empty */ }\n \n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n \n  private:\n   rvalue *m_min_value;\n@@ -2263,13 +2263,13 @@ class switch_ : public statement\n \t   int num_cases,\n \t   case_ **cases);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n \n-  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n+  vec <block *> get_successor_blocks () const final override;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   rvalue *m_expr;\n@@ -2300,7 +2300,7 @@ class asm_operand : public memento\n   virtual void print (pretty_printer *pp) const;\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n \n protected:\n   extended_asm *m_ext_asm;\n@@ -2321,12 +2321,12 @@ class output_asm_operand : public asm_operand\n \n   lvalue *get_lvalue () const { return m_dest; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE {}\n+  void replay_into (replayer *) final override {}\n \n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  void print (pretty_printer *pp) const final override;\n \n private:\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   lvalue *m_dest;\n@@ -2345,12 +2345,12 @@ class input_asm_operand : public asm_operand\n \n   rvalue *get_rvalue () const { return m_src; }\n \n-  void replay_into (replayer *) FINAL OVERRIDE {}\n+  void replay_into (replayer *) final override {}\n \n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  void print (pretty_printer *pp) const final override;\n \n private:\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   rvalue *m_src;\n@@ -2381,7 +2381,7 @@ class extended_asm : public statement\n \t\t\t  rvalue *src);\n   void add_clobber (const char *victim);\n \n-  void replay_into (replayer *r) OVERRIDE;\n+  void replay_into (replayer *r) override;\n \n   string *get_asm_template () const { return m_asm_template; }\n \n@@ -2393,7 +2393,7 @@ class extended_asm : public statement\n   void write_clobbers (reproducer &r);\n \n private:\n-  string * make_debug_string () FINAL OVERRIDE;\n+  string * make_debug_string () final override;\n   virtual void maybe_populate_playback_blocks\n     (auto_vec <playback::block *> *out) = 0;\n \n@@ -2418,13 +2418,13 @@ class extended_asm_simple : public extended_asm\n   : extended_asm (b, loc, asm_template)\n   {}\n \n-  void write_reproducer (reproducer &r) OVERRIDE;\n-  bool is_goto () const FINAL OVERRIDE { return false; }\n-  void maybe_print_gotos (pretty_printer *) const FINAL OVERRIDE {}\n+  void write_reproducer (reproducer &r) override;\n+  bool is_goto () const final override { return false; }\n+  void maybe_print_gotos (pretty_printer *) const final override {}\n \n private:\n   void maybe_populate_playback_blocks\n-    (auto_vec <playback::block *> *) FINAL OVERRIDE\n+    (auto_vec <playback::block *> *) final override\n   {}\n };\n \n@@ -2441,17 +2441,17 @@ class extended_asm_goto : public extended_asm\n \t\t     block **goto_blocks,\n \t\t     block *fallthrough_block);\n \n-  void replay_into (replayer *r) FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) OVERRIDE;\n+  void replay_into (replayer *r) final override;\n+  void write_reproducer (reproducer &r) override;\n \n-  vec <block *> get_successor_blocks () const FINAL OVERRIDE;\n+  vec <block *> get_successor_blocks () const final override;\n \n-  bool is_goto () const FINAL OVERRIDE { return true; }\n-  void maybe_print_gotos (pretty_printer *) const FINAL OVERRIDE;\n+  bool is_goto () const final override { return true; }\n+  void maybe_print_gotos (pretty_printer *) const final override;\n \n private:\n   void maybe_populate_playback_blocks\n-    (auto_vec <playback::block *> *out) FINAL OVERRIDE;\n+    (auto_vec <playback::block *> *out) final override;\n \n private:\n   auto_vec <block *> m_goto_blocks;\n@@ -2466,12 +2466,12 @@ class top_level_asm : public memento\n public:\n   top_level_asm (context *ctxt, location *loc, string *asm_stmts);\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n private:\n-  void replay_into (replayer *r) FINAL OVERRIDE;\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   location *m_loc;\n@@ -2484,12 +2484,12 @@ class global_init_rvalue : public memento\n   global_init_rvalue (context *ctxt, lvalue *variable, rvalue *init) :\n     memento (ctxt), m_variable (variable), m_init (init) {};\n \n-  void write_to_dump (dump &d) FINAL OVERRIDE;\n+  void write_to_dump (dump &d) final override;\n \n private:\n-  void replay_into (replayer *r) FINAL OVERRIDE;\n-  string * make_debug_string () FINAL OVERRIDE;\n-  void write_reproducer (reproducer &r) FINAL OVERRIDE;\n+  void replay_into (replayer *r) final override;\n+  string * make_debug_string () final override;\n+  void write_reproducer (reproducer &r) final override;\n \n private:\n   lvalue *m_variable;"}, {"sha": "f272981259b80a6e65d99fe43309cec7b26e30a0", "filename": "gcc/json.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -90,8 +90,8 @@ class object : public value\n  public:\n   ~object ();\n \n-  enum kind get_kind () const FINAL OVERRIDE { return JSON_OBJECT; }\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  enum kind get_kind () const final override { return JSON_OBJECT; }\n+  void print (pretty_printer *pp) const final override;\n \n   void set (const char *key, value *v);\n   value *get (const char *key) const;\n@@ -109,8 +109,8 @@ class array : public value\n  public:\n   ~array ();\n \n-  enum kind get_kind () const FINAL OVERRIDE { return JSON_ARRAY; }\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  enum kind get_kind () const final override { return JSON_ARRAY; }\n+  void print (pretty_printer *pp) const final override;\n \n   void append (value *v);\n \n@@ -125,8 +125,8 @@ class float_number : public value\n  public:\n   float_number (double value) : m_value (value) {}\n \n-  enum kind get_kind () const FINAL OVERRIDE { return JSON_FLOAT; }\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  enum kind get_kind () const final override { return JSON_FLOAT; }\n+  void print (pretty_printer *pp) const final override;\n \n   double get () const { return m_value; }\n \n@@ -141,8 +141,8 @@ class integer_number : public value\n  public:\n   integer_number (long value) : m_value (value) {}\n \n-  enum kind get_kind () const FINAL OVERRIDE { return JSON_INTEGER; }\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  enum kind get_kind () const final override { return JSON_INTEGER; }\n+  void print (pretty_printer *pp) const final override;\n \n   long get () const { return m_value; }\n \n@@ -159,8 +159,8 @@ class string : public value\n   string (const char *utf8);\n   ~string () { free (m_utf8); }\n \n-  enum kind get_kind () const FINAL OVERRIDE { return JSON_STRING; }\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  enum kind get_kind () const final override { return JSON_STRING; }\n+  void print (pretty_printer *pp) const final override;\n \n   const char *get_string () const { return m_utf8; }\n \n@@ -179,8 +179,8 @@ class literal : public value\n   /* Construct literal for a boolean value.  */\n   literal (bool value): m_kind (value ? JSON_TRUE : JSON_FALSE) {}\n \n-  enum kind get_kind () const FINAL OVERRIDE { return m_kind; }\n-  void print (pretty_printer *pp) const FINAL OVERRIDE;\n+  enum kind get_kind () const final override { return m_kind; }\n+  void print (pretty_printer *pp) const final override;\n \n  private:\n   enum kind m_kind;"}, {"sha": "eacbe4c12005ec0f5b8ae716e09beb877fc0f7df", "filename": "gcc/read-rtl-function.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fread-rtl-function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fread-rtl-function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -77,13 +77,13 @@ class function_reader : public rtx_reader\n   ~function_reader ();\n \n   /* Overridden vfuncs of class md_reader.  */\n-  void handle_unknown_directive (file_location, const char *) FINAL OVERRIDE;\n+  void handle_unknown_directive (file_location, const char *) final override;\n \n   /* Overridden vfuncs of class rtx_reader.  */\n-  rtx read_rtx_operand (rtx x, int idx) FINAL OVERRIDE;\n-  void handle_any_trailing_information (rtx x) FINAL OVERRIDE;\n-  rtx postprocess (rtx) FINAL OVERRIDE;\n-  const char *finalize_string (char *stringbuf) FINAL OVERRIDE;\n+  rtx read_rtx_operand (rtx x, int idx) final override;\n+  void handle_any_trailing_information (rtx x) final override;\n+  rtx postprocess (rtx) final override;\n+  const char *finalize_string (char *stringbuf) final override;\n \n   rtx_insn **get_insn_by_uid (int uid);\n   tree parse_mem_expr (const char *desc);"}, {"sha": "f722057bfec26ec5e11e7516e5581741bb8b13b7", "filename": "gcc/tree-complex.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-complex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-complex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -64,8 +64,8 @@ typedef int complex_lattice_t;\n \n class complex_propagate : public ssa_propagation_engine\n {\n-  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n-  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) final override;\n+  enum ssa_prop_result visit_phi (gphi *) final override;\n };\n \n static vec<complex_lattice_t> complex_lattice_values;"}, {"sha": "4aa694448c53d2888ded783790fb9d8eb4d66540", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -51,7 +51,7 @@ class path_label : public range_label\n   : m_path (path), m_start_idx (start_idx)\n   {}\n \n-  label_text get_text (unsigned range_idx) const FINAL OVERRIDE\n+  label_text get_text (unsigned range_idx) const final override\n   {\n     unsigned event_idx = m_start_idx + range_idx;\n     const diagnostic_event &event = m_path->get_event (event_idx);"}, {"sha": "81c97676625bafe1dd5f25a311b32306bc9a58b9", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -180,8 +180,8 @@ class ccp_prop_value_t {\n class ccp_propagate : public ssa_propagation_engine\n {\n  public:\n-  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n-  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) final override;\n+  enum ssa_prop_result visit_phi (gphi *) final override;\n };\n \n /* Array of propagated constant values.  After propagation,\n@@ -947,8 +947,8 @@ do_dbg_cnt (void)\n class ccp_folder : public substitute_and_fold_engine\n {\n  public:\n-  tree value_of_expr (tree, gimple *) FINAL OVERRIDE;\n-  bool fold_stmt (gimple_stmt_iterator *) FINAL OVERRIDE;\n+  tree value_of_expr (tree, gimple *) final override;\n+  bool fold_stmt (gimple_stmt_iterator *) final override;\n };\n \n /* This method just wraps GET_CONSTANT_VALUE for now.  Over time"}, {"sha": "050a6d11434fd4fdcee6b3a7f063e742403d6a62", "filename": "gcc/tree-ssa-copy.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-ssa-copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-ssa-copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -71,8 +71,8 @@ struct prop_value_t {\n class copy_prop : public ssa_propagation_engine\n {\n  public:\n-  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n-  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) final override;\n+  enum ssa_prop_result visit_phi (gphi *) final override;\n };\n \n static prop_value_t *copy_of;\n@@ -492,7 +492,7 @@ init_copy_prop (void)\n class copy_folder : public substitute_and_fold_engine\n {\n  public:\n-  tree value_of_expr (tree name, gimple *) FINAL OVERRIDE;\n+  tree value_of_expr (tree name, gimple *) final override;\n };\n \n /* Callback for substitute_and_fold to get at the final copy-of values.  */"}, {"sha": "0784d658567de9c1bf5c70223cae1c66edf5a162", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -3795,8 +3795,8 @@ class vrp_prop : public ssa_propagation_engine\n   void finalize ();\n \n private:\n-  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n-  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) final override;\n+  enum ssa_prop_result visit_phi (gphi *) final override;\n \n   struct function *fun;\n   vr_values *m_vr_values;\n@@ -4036,11 +4036,11 @@ class vrp_folder : public substitute_and_fold_engine\n   void simplify_casted_conds (function *fun);\n \n private:\n-  tree value_of_expr (tree name, gimple *stmt) OVERRIDE\n+  tree value_of_expr (tree name, gimple *stmt) override\n     {\n       return m_vr_values->value_of_expr (name, stmt);\n     }\n-  bool fold_stmt (gimple_stmt_iterator *) FINAL OVERRIDE;\n+  bool fold_stmt (gimple_stmt_iterator *) final override;\n   bool fold_predicate_in (gimple_stmt_iterator *);\n \n   vr_values *m_vr_values;\n@@ -4269,7 +4269,7 @@ class rvrp_folder : public substitute_and_fold_engine\n     delete m_pta;\n   }\n \n-  tree value_of_expr (tree name, gimple *s = NULL) OVERRIDE\n+  tree value_of_expr (tree name, gimple *s = NULL) override\n   {\n     // Shortcircuit subst_and_fold callbacks for abnormal ssa_names.\n     if (TREE_CODE (name) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n@@ -4280,7 +4280,7 @@ class rvrp_folder : public substitute_and_fold_engine\n     return ret;\n   }\n \n-  tree value_on_edge (edge e, tree name) OVERRIDE\n+  tree value_on_edge (edge e, tree name) override\n   {\n     // Shortcircuit subst_and_fold callbacks for abnormal ssa_names.\n     if (TREE_CODE (name) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n@@ -4291,33 +4291,33 @@ class rvrp_folder : public substitute_and_fold_engine\n     return ret;\n   }\n \n-  tree value_of_stmt (gimple *s, tree name = NULL) OVERRIDE\n+  tree value_of_stmt (gimple *s, tree name = NULL) override\n   {\n     // Shortcircuit subst_and_fold callbacks for abnormal ssa_names.\n     if (TREE_CODE (name) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))\n       return NULL;\n     return m_ranger->value_of_stmt (s, name);\n   }\n \n-  void pre_fold_bb (basic_block bb) OVERRIDE\n+  void pre_fold_bb (basic_block bb) override\n   {\n     m_pta->enter (bb);\n     for (gphi_iterator gsi = gsi_start_phis (bb); !gsi_end_p (gsi);\n \t gsi_next (&gsi))\n       m_ranger->register_side_effects (gsi.phi ());\n   }\n \n-  void post_fold_bb (basic_block bb) OVERRIDE\n+  void post_fold_bb (basic_block bb) override\n   {\n     m_pta->leave (bb);\n   }\n \n-  void pre_fold_stmt (gimple *stmt) OVERRIDE\n+  void pre_fold_stmt (gimple *stmt) override\n   {\n     m_pta->visit_stmt (stmt);\n   }\n \n-  bool fold_stmt (gimple_stmt_iterator *gsi) OVERRIDE\n+  bool fold_stmt (gimple_stmt_iterator *gsi) override\n   {\n     bool ret = m_simplifier.simplify (gsi);\n     if (!ret)"}, {"sha": "cf1a1d74de3f9830115841946bd77b9572c12abf", "filename": "gcc/value-query.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fvalue-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fvalue-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -79,9 +79,9 @@ class range_query : public value_query\n   range_query ();\n   virtual ~range_query ();\n \n-  virtual tree value_of_expr (tree expr, gimple * = NULL) OVERRIDE;\n-  virtual tree value_on_edge (edge, tree expr) OVERRIDE;\n-  virtual tree value_of_stmt (gimple *, tree name = NULL) OVERRIDE;\n+  virtual tree value_of_expr (tree expr, gimple * = NULL) override;\n+  virtual tree value_on_edge (edge, tree expr) override;\n+  virtual tree value_of_stmt (gimple *, tree name = NULL) override;\n \n   // These are the range equivalents of the value_* methods.  Instead\n   // of returning a singleton, they calculate a range and return it in\n@@ -123,7 +123,7 @@ class range_query : public value_query\n class global_range_query : public range_query\n {\n public:\n-  bool range_of_expr (irange &r, tree expr, gimple * = NULL) OVERRIDE;\n+  bool range_of_expr (irange &r, tree expr, gimple * = NULL) override;\n };\n \n extern global_range_query global_ranges;"}, {"sha": "7a377cebd013d6302dd0ddc893dabba3a5c20fb0", "filename": "gcc/vr-values.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -109,12 +109,12 @@ class vr_values : public range_query\n   vr_values (void);\n   ~vr_values (void);\n \n-  virtual bool range_of_expr (irange &r, tree expr, gimple *stmt) OVERRIDE;\n-  virtual tree value_of_expr (tree, gimple * = NULL) OVERRIDE;\n-  virtual tree value_on_edge (edge, tree) OVERRIDE;\n-  virtual tree value_of_stmt (gimple *, tree = NULL_TREE) OVERRIDE;\n+  virtual bool range_of_expr (irange &r, tree expr, gimple *stmt) override;\n+  virtual tree value_of_expr (tree, gimple * = NULL) override;\n+  virtual tree value_on_edge (edge, tree) override;\n+  virtual tree value_of_stmt (gimple *, tree = NULL_TREE) override;\n   virtual const value_range_equiv *get_value_range (const_tree,\n-\t\t\t\t\t\t    gimple * = NULL) OVERRIDE;\n+\t\t\t\t\t\t    gimple * = NULL) override;\n   void set_vr_value (tree, value_range_equiv *);\n   value_range_equiv *swap_vr_value (tree, value_range_equiv *);\n \n@@ -124,7 +124,7 @@ class vr_values : public range_query\n   tree op_with_constant_singleton_value_range (tree);\n   void adjust_range_with_scev (value_range_equiv *, class loop *,\n \t\t\t       gimple *, tree);\n-  virtual void dump (FILE *) OVERRIDE;\n+  virtual void dump (FILE *) override;\n \n   void extract_range_for_var_from_comparison_expr (tree, enum tree_code,\n \t\t\t\t\t\t   tree, tree,"}, {"sha": "f891d3e17df0f727543a27179f2835b714a727a9", "filename": "libcpp/lex.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/libcpp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff171cb13df671a2a0647a68da0fdc1f9a78b8c9/libcpp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.cc?ref=ff171cb13df671a2a0647a68da0fdc1f9a78b8c9", "patch": "@@ -1523,7 +1523,7 @@ class unpaired_bidi_rich_location : public rich_location\n   class custom_range_label : public range_label\n   {\n    public:\n-     label_text get_text (unsigned range_idx) const FINAL OVERRIDE\n+     label_text get_text (unsigned range_idx) const final override\n      {\n        /* range 0 is the primary location; each subsequent range i + 1\n \t  is for bidi::vec[i].  */"}]}