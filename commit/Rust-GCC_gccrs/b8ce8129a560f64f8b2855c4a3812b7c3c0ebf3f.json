{"sha": "b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjZTgxMjlhNTYwZjY0ZjhiMjg1NWM0YTM4MTJiN2MzYzBlYmYzZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-10-04T14:36:55Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-04T14:36:55Z"}, "message": "Redirect call within specific target attribute among MV clones (PR ipa/82625).\n\n2018-10-04  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/82625\n\t* multiple_target.c (redirect_to_specific_clone): New function.\n\t(ipa_target_clone): Use it.\n\t* tree-inline.c: Fix comment.\n2018-10-04  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/82625\n\t* g++.dg/ext/pr82625.C: New test.\n\nFrom-SVN: r264845", "tree": {"sha": "02aaab6f5293cdf28242006b5feaf40288117680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02aaab6f5293cdf28242006b5feaf40288117680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d98e5a6bc715cc865b9110ff0255572ac22570d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d98e5a6bc715cc865b9110ff0255572ac22570d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d98e5a6bc715cc865b9110ff0255572ac22570d"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "f7a15e34646d46aae622a0f97b350f370177e426", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "patch": "@@ -1,3 +1,10 @@\n+2018-10-04  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/82625\n+\t* multiple_target.c (redirect_to_specific_clone): New function.\n+\t(ipa_target_clone): Use it.\n+\t* tree-inline.c: Fix comment.\n+\n 2018-10-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dumpfile.c (gcc::dump_manager::dump_manager): Initialize new"}, {"sha": "2d892f201c5d06eda2c7b12f380bc0151d63e7e8", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "patch": "@@ -451,6 +451,54 @@ expand_target_clones (struct cgraph_node *node, bool definition)\n   return ret;\n }\n \n+/* When NODE is a target clone, consider all callees and redirect\n+   to a clone with equal target attributes.  That prevents multiple\n+   multi-versioning dispatches and a call-chain can be optimized.  */\n+\n+static void\n+redirect_to_specific_clone (cgraph_node *node)\n+{\n+  cgraph_function_version_info *fv = node->function_version ();\n+  if (fv == NULL)\n+    return;\n+\n+  tree attr_target = lookup_attribute (\"target\", DECL_ATTRIBUTES (node->decl));\n+  if (attr_target == NULL_TREE)\n+    return;\n+\n+  /* We need to remember NEXT_CALLER as it could be modified in the loop.  */\n+  for (cgraph_edge *e = node->callees; e ; e = e->next_callee)\n+    {\n+      cgraph_function_version_info *fv2 = e->callee->function_version ();\n+      if (!fv2)\n+\tcontinue;\n+\n+      tree attr_target2 = lookup_attribute (\"target\",\n+\t\t\t\t\t    DECL_ATTRIBUTES (e->callee->decl));\n+\n+      /* Function is not calling proper target clone.  */\n+      if (!attribute_list_equal (attr_target, attr_target2))\n+\t{\n+\t  while (fv2->prev != NULL)\n+\t    fv2 = fv2->prev;\n+\n+\t  /* Try to find a clone with equal target attribute.  */\n+\t  for (; fv2 != NULL; fv2 = fv2->next)\n+\t    {\n+\t      cgraph_node *callee = fv2->this_node;\n+\t      attr_target2 = lookup_attribute (\"target\",\n+\t\t\t\t\t       DECL_ATTRIBUTES (callee->decl));\n+\t      if (attribute_list_equal (attr_target, attr_target2))\n+\t\t{\n+\t\t  e->redirect_callee (callee);\n+\t\t  e->redirect_call_stmt_to_callee ();\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n static unsigned int\n ipa_target_clone (void)\n {\n@@ -464,6 +512,9 @@ ipa_target_clone (void)\n   for (unsigned i = 0; i < to_dispatch.length (); i++)\n     create_dispatcher_calls (to_dispatch[i]);\n \n+  FOR_EACH_FUNCTION (node)\n+    redirect_to_specific_clone (node);\n+\n   return 0;\n }\n "}, {"sha": "ee8a184c26af186aeb350ed8d8f2ca872f3da41f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "patch": "@@ -1,3 +1,8 @@\n+2018-10-04  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/82625\n+\t* g++.dg/ext/pr82625.C: New test.\n+\n 2018-10-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/dump-1.c: New test."}, {"sha": "47bd2df1104237a03311ce13ef4843947c594430", "filename": "gcc/testsuite/g++.dg/ext/pr82625.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr82625.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr82625.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr82625.C?ref=b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+__attribute__ ((target (\"default\")))\n+static unsigned foo(const char *buf, unsigned size) {\n+  return 1;\n+}\n+\n+__attribute__ ((target (\"avx\")))\n+static unsigned foo(const char *buf, unsigned size) {\n+  return 2;\n+}\n+\n+__attribute__ ((target (\"default\")))\n+unsigned bar() {\n+  char buf[4096];\n+  unsigned acc = 0;\n+  for (int i = 0; i < sizeof(buf); i++) {\n+    acc += foo(&buf[i], 1);\n+  }\n+  return acc;\n+}\n+\n+__attribute__ ((target (\"avx\")))\n+unsigned bar() {\n+  char buf[4096];\n+  unsigned acc = 0;\n+  for (int i = 0; i < sizeof(buf); i++) {\n+    acc += foo(&buf[i], 1);\n+  }\n+  return acc;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 4096;\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 8192;\" 1 \"optimized\" } } */"}, {"sha": "913425394e076d598d747b8ea7d647fa9a88458b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b8ce8129a560f64f8b2855c4a3812b7c3c0ebf3f", "patch": "@@ -2631,7 +2631,7 @@ copy_loops (copy_body_data *id,\n     }\n }\n \n-/* Call cgraph_redirect_edge_call_stmt_to_callee on all calls in BB */\n+/* Call redirect_call_stmt_to_callee on all calls in BB.  */\n \n void\n redirect_all_calls (copy_body_data * id, basic_block bb)"}]}