{"sha": "ed70cedf84c6e58b338d1b9452c0f36933757203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3MGNlZGY4NGM2ZTU4YjMzOGQxYjk0NTJjMGYzNjkzMzc1NzIwMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-10-28T23:41:22Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-10-28T23:41:22Z"}, "message": "ms1.h (TARGET_MS1_64_001): New.\n\n        * config/ms1/ms1.h (TARGET_MS1_64_001): New.\n        (TARGET_MS1_16_002): New.\n        (TARGET_MS1_16_003): New.\n\n        * config/ms1/ms1.md (\"decrement_and_branch_until_zero\"): Rewrite.\n        (\"*decrement_and_branch_until_zero_no_clobber\"): New.\n        Add corresponding splitter for decrement_and_branch_until_zero\n        instruction.\n        Key all decrement_and_branch_until_zero patterns off of\n        TARGET_MS1_16_003.\n\nFrom-SVN: r105974", "tree": {"sha": "b1e754ded31ac35cefa64306fafbbd14b67c7826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1e754ded31ac35cefa64306fafbbd14b67c7826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed70cedf84c6e58b338d1b9452c0f36933757203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed70cedf84c6e58b338d1b9452c0f36933757203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed70cedf84c6e58b338d1b9452c0f36933757203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed70cedf84c6e58b338d1b9452c0f36933757203/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "185d7d97506315bcf48bae38d410f68af50eba4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185d7d97506315bcf48bae38d410f68af50eba4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/185d7d97506315bcf48bae38d410f68af50eba4a"}], "stats": {"total": 97, "additions": 73, "deletions": 24}, "files": [{"sha": "76ccffe0055a8415ba6e38498e2ce76b12255bdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70cedf84c6e58b338d1b9452c0f36933757203/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70cedf84c6e58b338d1b9452c0f36933757203/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed70cedf84c6e58b338d1b9452c0f36933757203", "patch": "@@ -1,3 +1,16 @@\n+2005-10-28  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/ms1/ms1.h (TARGET_MS1_64_001): New.\n+        (TARGET_MS1_16_002): New.\n+        (TARGET_MS1_16_003): New.\n+\n+        * config/ms1/ms1.md (\"decrement_and_branch_until_zero\"): Rewrite.\n+        (\"*decrement_and_branch_until_zero_no_clobber\"): New.\n+        Add corresponding splitter for decrement_and_branch_until_zero\n+        instruction.\n+        Key all decrement_and_branch_until_zero patterns off of\n+        TARGET_MS1_16_003.\n+\n 2005-10-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24362"}, {"sha": "477c9ccdbffbba2f820b77245508578c2a6b10fe", "filename": "gcc/config/ms1/ms1.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70cedf84c6e58b338d1b9452c0f36933757203/gcc%2Fconfig%2Fms1%2Fms1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70cedf84c6e58b338d1b9452c0f36933757203/gcc%2Fconfig%2Fms1%2Fms1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.h?ref=ed70cedf84c6e58b338d1b9452c0f36933757203", "patch": "@@ -86,6 +86,10 @@ march=MS1-16-003:exit-16-003.o%s} \\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_MS1_64_001 (ms1_cpu == PROCESSOR_MS1_64_001)\n+#define TARGET_MS1_16_002 (ms1_cpu == PROCESSOR_MS1_16_002)\n+#define TARGET_MS1_16_003 (ms1_cpu == PROCESSOR_MS1_16_003)\n+\n #define TARGET_VERSION  fprintf (stderr, \" (ms1)\");\n \n #define OVERRIDE_OPTIONS ms1_override_options ()"}, {"sha": "b96dfc07d60046bf926db057a17f50c97fc674df", "filename": "gcc/config/ms1/ms1.md", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70cedf84c6e58b338d1b9452c0f36933757203/gcc%2Fconfig%2Fms1%2Fms1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70cedf84c6e58b338d1b9452c0f36933757203/gcc%2Fconfig%2Fms1%2Fms1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fms1%2Fms1.md?ref=ed70cedf84c6e58b338d1b9452c0f36933757203", "patch": "@@ -68,34 +68,66 @@\n \t\t [(eq_attr \"type\" \"arith\") (nil) (nil)])\n \n \f\n-;; Issue 64382\n-;; This pattern implements the decrement and branch non-zero instruction\n-;; which can be used by gcc loop optimizer under certain conditions.\n-;; For an example of it being used try compiling the gcc test case\n-;; gcc.c-torture/execute/921213-1.c with optimizations enabled.\n-\n-;; XXX - FIXME - TARGET_MUL is used as a condition since it is set when the\n-;; target is the MS1-16-003, which is the only Morpho CPU which currently\n-;; implements this instruction.  Strictly speaking we ought to define a\n-;; new command line switch to enable/disable the DBNZ instruction or else\n-;; change this pattern so that it explicitly checks for an MS1-16-003\n-;; architecture.\n-\n (define_insn \"decrement_and_branch_until_zero\"\n-  [(parallel [(set (pc)\n-\t           (if_then_else\n-\t              (ne (match_operand:SI 0 \"register_operand\" \"+r\") (const_int 0))\n-\t              (label_ref (match_operand 1 \"\" \"\"))\n-\t              (pc)))\n-              (set (match_dup 0)\n-\t           (plus:SI (match_dup 0) (const_int -1)))\n-\t     ])\n-  ]\n-  \"TARGET_MUL\"\n+   [(set (pc)\n+\t (if_then_else\n+\t  (ne (match_operand:SI 0 \"nonimmediate_operand\" \"+r,*m\")\n+\t      (const_int 0))\n+\t  (label_ref (match_operand 1 \"\" \"\"))\n+\t  (pc)))\n+    (set (match_dup 0)\n+\t (plus:SI (match_dup 0)\n+\t\t  (const_int -1)))\n+    (clobber (match_scratch:SI 2 \"=X,r\"))]\n+  \"TARGET_MS1_16_003\"\n+  \"@\n+   dbnz\\t%0, %l1%#\n+   #\"\n+  [(set_attr \"length\" \"4,16\")]\n+)\n+\n+;; Same as above, but without the clobber. The peephole below will\n+;; match this pattern.\n+(define_insn \"*decrement_and_branch_until_zero_no_clobber\"\n+   [(set (pc)\n+\t (if_then_else\n+\t  (ne (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t      (const_int 0))\n+\t  (label_ref (match_operand 1 \"\" \"\"))\n+\t  (pc)))\n+    (set (match_dup 0)\n+\t (plus:SI (match_dup 0)\n+\t\t  (const_int -1)))]\n+  \"TARGET_MS1_16_003\"\n   \"dbnz\\t%0, %l1%#\"\n   [(set_attr \"length\" \"4\")]\n )\n \n+;; Split the above to handle the case where operand 0 is in memory\n+;; (a register that couldn't get a hard register).\n+(define_split\n+  [(set (pc)\n+\t(if_then_else\n+\t  (ne (match_operand:SI 0 \"memory_operand\" \"\")\n+\t      (const_int 0))\n+\t  (label_ref (match_operand 1 \"\" \"\"))\n+\t  (pc)))\n+    (set (match_dup 0)\n+\t (plus:SI (match_dup 0)\n+\t\t  (const_int -1)))\n+    (clobber (match_scratch:SI 2 \"\"))]\n+  \"TARGET_MS1_16_003\"\n+  [(set (match_dup 2) (match_dup 0))\n+   (set (match_dup 2) (plus:SI (match_dup 2) (const_int -1)))\n+   (set (match_dup 0) (match_dup 2))\n+   (set (pc)\n+\t(if_then_else\n+\t (ne (match_dup 2)\n+\t     (const_int 0))\n+\t (label_ref (match_dup 1))\n+\t (pc)))]\n+  \"\")\n+\n ;; This peephole is defined in the vain hope that it might actually trigger one\n ;; day, although I have yet to find a test case that matches it.  The normal\n ;; problem is that GCC likes to move the loading of the constant value -1 out\n@@ -111,7 +143,7 @@\n \t\t(label_ref (match_operand 2 \"\" \"\"))\n \t\t(pc)))\n    ]\n-  \"TARGET_MUL\"\n+  \"TARGET_MS1_16_003\"\n   [(parallel [(set (pc)\n \t           (if_then_else\n \t              (ne (match_dup 0) (const_int 0))"}]}