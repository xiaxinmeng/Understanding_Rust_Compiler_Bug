{"sha": "07e1534f44b26a1acb0b3393aae7d1a4a90fa942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlMTUzNGY0NGIyNmExYWNiMGIzMzkzYWFlN2QxYTRhOTBmYTk0Mg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-16T20:47:02Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-16T20:47:02Z"}, "message": "[libbacktrace] Factor out read_referenced_name_from_attr\n\nFactor out the common handling of DW_AT_abstract_origin and\nDW_AT_specification from read_function_entry and read_referenced_name.\n\n2019-01-16  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf.c (read_referenced_name_from_attr): New function.  Factor out\n\tof ...\n \t(read_referenced_name): ... here, and ...\n\t(read_function_entry): ... here.\n\nFrom-SVN: r267986", "tree": {"sha": "3e356bb8164268e1ca12f5d0ce9f6c8d5daeaef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e356bb8164268e1ca12f5d0ce9f6c8d5daeaef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07e1534f44b26a1acb0b3393aae7d1a4a90fa942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e1534f44b26a1acb0b3393aae7d1a4a90fa942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e1534f44b26a1acb0b3393aae7d1a4a90fa942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e1534f44b26a1acb0b3393aae7d1a4a90fa942/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e42589bd629d1c4b38aee2c8fcb924c37c6889b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42589bd629d1c4b38aee2c8fcb924c37c6889b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42589bd629d1c4b38aee2c8fcb924c37c6889b7"}], "stats": {"total": 96, "additions": 61, "deletions": 35}, "files": [{"sha": "cc8bb74d083169395515203fa406268d5d50f682", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e1534f44b26a1acb0b3393aae7d1a4a90fa942/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e1534f44b26a1acb0b3393aae7d1a4a90fa942/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=07e1534f44b26a1acb0b3393aae7d1a4a90fa942", "patch": "@@ -1,3 +1,10 @@\n+2019-01-16  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf.c (read_referenced_name_from_attr): New function.  Factor out\n+\tof ...\n+ \t(read_referenced_name): ... here, and ...\n+\t(read_function_entry): ... here.\n+\n 2019-01-16  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf.c (read_referenced_name): Don't allow DW_AT_name to override any"}, {"sha": "dca5d909d9f6473ef460d3d9ce86c9fef38a8583", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e1534f44b26a1acb0b3393aae7d1a4a90fa942/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e1534f44b26a1acb0b3393aae7d1a4a90fa942/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=07e1534f44b26a1acb0b3393aae7d1a4a90fa942", "patch": "@@ -2087,6 +2087,43 @@ read_line_info (struct backtrace_state *state, struct dwarf_data *ddata,\n   return 0;\n }\n \n+static const char *read_referenced_name (struct dwarf_data *, struct unit *,\n+\t\t\t\t\t uint64_t, backtrace_error_callback,\n+\t\t\t\t\t void *);\n+\n+/* Read the name of a function from a DIE referenced by ATTR with VAL.  */\n+\n+static const char *\n+read_referenced_name_from_attr (struct dwarf_data *ddata, struct unit *u,\n+\t\t\t\tstruct attr *attr, struct attr_val *val,\n+\t\t\t\tbacktrace_error_callback error_callback,\n+\t\t\t\tvoid *data)\n+{\n+  switch (attr->name)\n+    {\n+    case DW_AT_abstract_origin:\n+    case DW_AT_specification:\n+      break;\n+    default:\n+      return NULL;\n+    }\n+\n+  if (attr->form == DW_FORM_ref_addr\n+      || attr->form == DW_FORM_ref_sig8)\n+    {\n+      /* This refers to an abstract origin defined in\n+\t some other compilation unit.  We can handle\n+\t this case if we must, but it's harder.  */\n+      return NULL;\n+    }\n+\n+  if (val->encoding == ATTR_VAL_UINT\n+      || val->encoding == ATTR_VAL_REF_UNIT)\n+    return read_referenced_name (ddata, u, val->u.uint, error_callback, data);\n+\n+  return NULL;\n+}\n+\n /* Read the name of a function from a DIE referenced by a\n    DW_AT_abstract_origin or DW_AT_specification tag.  OFFSET is within\n    the same compilation unit.  */\n@@ -2170,24 +2207,14 @@ read_referenced_name (struct dwarf_data *ddata, struct unit *u,\n \tcase DW_AT_specification:\n \t  /* Second name preference: override DW_AT_name, don't override\n \t     DW_AT_linkage_name.  */\n-\t  if (abbrev->attrs[i].form == DW_FORM_ref_addr\n-\t      || abbrev->attrs[i].form == DW_FORM_ref_sig8)\n-\t    {\n-\t      /* This refers to a specification defined in some other\n-\t\t compilation unit.  We can handle this case if we\n-\t\t must, but it's harder.  */\n-\t      break;\n-\t    }\n-\t  if (val.encoding == ATTR_VAL_UINT\n-\t      || val.encoding == ATTR_VAL_REF_UNIT)\n-\t    {\n-\t      const char *name;\n+\t  {\n+\t    const char *name;\n \n-\t      name = read_referenced_name (ddata, u, val.u.uint,\n-\t\t\t\t\t   error_callback, data);\n-\t      if (name != NULL)\n-\t\tret = name;\n-\t    }\n+\t    name = read_referenced_name_from_attr (ddata, u, &abbrev->attrs[i],\n+\t\t\t\t\t\t   &val, error_callback, data);\n+\t    if (name != NULL)\n+\t      ret = name;\n+\t  }\n \t  break;\n \n \tdefault:\n@@ -2412,24 +2439,16 @@ read_function_entry (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t     DW_AT_linkage_name.  */\n \t\t  if (have_linkage_name)\n \t\t    break;\n-\t\t  if (abbrev->attrs[i].form == DW_FORM_ref_addr\n-\t\t      || abbrev->attrs[i].form == DW_FORM_ref_sig8)\n-\t\t    {\n-\t\t      /* This refers to an abstract origin defined in\n-\t\t\t some other compilation unit.  We can handle\n-\t\t\t this case if we must, but it's harder.  */\n-\t\t      break;\n-\t\t    }\n-\t\t  if (val.encoding == ATTR_VAL_UINT\n-\t\t      || val.encoding == ATTR_VAL_REF_UNIT)\n-\t\t    {\n-\t\t      const char *name;\n-\n-\t\t      name = read_referenced_name (ddata, u, val.u.uint,\n-\t\t\t\t\t\t   error_callback, data);\n-\t\t      if (name != NULL)\n-\t\t\tfunction->name = name;\n-\t\t    }\n+\t\t  {\n+\t\t    const char *name;\n+\n+\t\t    name\n+\t\t      = read_referenced_name_from_attr (ddata, u,\n+\t\t\t\t\t\t\t&abbrev->attrs[i], &val,\n+\t\t\t\t\t\t\terror_callback, data);\n+\t\t    if (name != NULL)\n+\t\t      function->name = name;\n+\t\t  }\n \t\t  break;\n \n \t\tcase DW_AT_name:"}]}