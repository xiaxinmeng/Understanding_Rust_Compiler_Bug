{"sha": "8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4OGRhNDA2YmM4YzAzNzc1ZTE1YjRmN2QyYzhiYzIwMWNmZmI0ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-15T04:23:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-15T04:23:46Z"}, "message": "locale_facets.tcc (time_put::put): Correct output iterator positions.\n\n\n2002-01-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc (time_put::put): Correct output\n\titerator positions.\n\t* testsuite/22_locale/time_put_members_char.cc (test02): Add.\n\t* testsuite/22_locale/time_put_members_wchar_t.cc (test02): Add.\n\t* testsuite/22_locale/time_get_members_wchar_t.cc (test06): Add.\n\t* testsuite/22_locale/time_get_members_char.cc (test06): Add.\n\nFrom-SVN: r48861", "tree": {"sha": "c56d068f51cc259e0edee3031fb8158cee00e687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c56d068f51cc259e0edee3031fb8158cee00e687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/comments", "author": null, "committer": null, "parents": [{"sha": "749d98f055f8db6d901ce6e3c1f552a83040a970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749d98f055f8db6d901ce6e3c1f552a83040a970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749d98f055f8db6d901ce6e3c1f552a83040a970"}], "stats": {"total": 302, "additions": 290, "deletions": 12}, "files": [{"sha": "0394ed1f2743be0ab32694ab4b35513de71908ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -1,3 +1,12 @@\n+2002-01-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc (time_put::put): Correct output\n+\titerator positions.\n+\t* testsuite/22_locale/time_put_members_char.cc (test02): Add.\n+\t* testsuite/22_locale/time_put_members_wchar_t.cc (test02): Add.\n+\t* testsuite/22_locale/time_get_members_wchar_t.cc (test06): Add.\n+\t* testsuite/22_locale/time_get_members_char.cc (test06): Add.\n+\n 2002-01-14  Craig Rodrigues  <rodrigc@gcc.gnu.org>\n \n \t* docs/html/17_intro/porting-howto.xml: Update filebuf section."}, {"sha": "57cab783fe68693061d5a07411a6a96f5d257ff3", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -1516,13 +1516,13 @@ namespace std\n \t\t  break;\n \t\tcase 'I':\n \t\t  // Hour [01, 12]. [tm_hour]\n-\t\t  _M_extract_num(__beg, __end, __tm->tm_hour, 1, 12, 2,\n+\t\t  _M_extract_num(__beg, __end, __tm->tm_hour, 1, 12, 2, \n \t\t\t\t __ctype, __err);\n \t\t  break;\n \t\tcase 'm':\n \t\t  // Month [01, 12]. [tm_mon]\n-\t\t  _M_extract_num(__beg, __end, __mem, 1, 12, 2,\n-\t\t\t\t __ctype, __err);\n+\t\t  _M_extract_num(__beg, __end, __mem, 1, 12, 2, __ctype, \n+\t\t\t\t __err);\n \t\t  if (!__err)\n \t\t    __tm->tm_mon = __mem - 1;\n \t\t  break;\n@@ -1905,10 +1905,14 @@ namespace std\n \t\t}\n \t      else\n \t\t__format = __c;\n-\t      this->do_put(__s, __io, char_type(), __tm, __format, __mod);\n+\t      __s = this->do_put(__s, __io, char_type(), __tm, __format, \n+\t\t\t\t __mod);\n \t    }\n \t  else\n-\t    __s = __c;\n+\t    {\n+\t      *__s = __c;\n+\t      ++__s;\n+\t    }\n \t}\n       return __s;\n     }\n@@ -1951,8 +1955,8 @@ namespace std\n \n       // Write resulting, fully-formatted string to output iterator.\n       size_t __len = char_traits<char_type>::length(__res);\n-      for (size_t __i = 0; __i < __len; ++__i)\n-\t__s = __res[__i];\n+      for (size_t __i = 0; __i < __len; ++__i, ++__s)\n+\t*__s = __res[__i];\n       return __s;\n     }\n "}, {"sha": "3c5ef00edae8a4ac1873c932aa8a02fa437c215b", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -290,4 +290,3 @@ int main()\n   test03();\n   return 0;\n }\n-"}, {"sha": "2b69be3317ad9f99a5fbc94da5fd78956ba895a3", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -585,12 +585,101 @@ void test05()\n   VERIFY( errorstate == ios_base::eofbit );\n }\n \n+void test06()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check time_get works with other iterators besides streambuf\n+  // input iterators.\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  // Cindy Sherman's Untitled Film Stills\n+  // June 26-September 2, 1997\n+  const string str = \"12:00:00 06/26/97 Tuesday September 1997 Cindy Sherman\";\n+ \n+  // Create \"C\" time objects\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  tm tm1;\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  // 01 get_time\n+  // 02 get_date\n+  // 03 get_weekday\n+  // 04 get_monthname\n+  // 05 get_year\n+\n+  // 01 get_time\n+  string res1;\n+  err = goodbit;\n+  iter_type end1 = tg.get_time(str.begin(), str.end(), iss, err, &tm1);\n+  string rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_sec == time_sanity.tm_sec );\n+  VERIFY( tm1.tm_min == time_sanity.tm_min );\n+  VERIFY( tm1.tm_hour == time_sanity.tm_hour );\n+  VERIFY( rem1 ==  \" 06/26/97 Tuesday September 1997 Cindy Sherman\" );\n+\n+  // 02 get_date\n+  string res2;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end2 = tg.get_date(++end1, str.end(), iss, err, &tm1);\n+  string rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( tm1.tm_mon == time_sanity.tm_mon );\n+  VERIFY( tm1.tm_mday == time_sanity.tm_mday );\n+  VERIFY( rem2 ==  \" Tuesday September 1997 Cindy Sherman\" );\n+\n+  // 03 get_weekday\n+  string res3;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end3 = tg.get_weekday(++end2, str.end(), iss, err, &tm1);\n+  string rem3(end3, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_wday == time_sanity.tm_wday );\n+  VERIFY( rem3 ==  \" September 1997 Cindy Sherman\" );\n+\n+  // 04 get_monthname\n+  string res4;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end4 = tg.get_monthname(++end3, str.end(), iss, err, &tm1);\n+  string rem4(end4, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_mon == 8 );\n+  VERIFY( rem4 ==  \" 1997 Cindy Sherman\" );\n+\n+  // 05 get_year\n+  string res5;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end5 = tg.get_year(++end4, str.end(), iss, err, &tm1);\n+  string rem5(end5, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( rem5 ==  \" Cindy Sherman\" );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n+  \n+  test06();\n   return 0;\n }"}, {"sha": "298d85a12c5674603daa0d17a9437ecc0e1e819c", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_wchar_t.cc", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -1,6 +1,6 @@\n // 2001-10-02 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -584,6 +584,93 @@ void test05()\n   VERIFY( time20.tm_year == time_bday.tm_year );\n   VERIFY( errorstate == ios_base::eofbit );\n }\n+\n+void test06()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check time_get works with other iterators besides streambuf\n+  // input iterators.\n+  typedef wstring::const_iterator iter_type;\n+  typedef time_get<wchar_t, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  // Cindy Sherman's Untitled Film Stills\n+  // June 26-September 2, 1997\n+  const wstring str = L\"12:00:00 06/26/97 Tuesday September 1997 Cindy Sherman\";\n+ \n+  // Create \"C\" time objects\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  tm tm1;\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  // 01 get_time\n+  // 02 get_date\n+  // 03 get_weekday\n+  // 04 get_monthname\n+  // 05 get_year\n+\n+  // 01 get_time\n+  wstring res1;\n+  err = goodbit;\n+  iter_type end1 = tg.get_time(str.begin(), str.end(), iss, err, &tm1);\n+  wstring rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_sec == time_sanity.tm_sec );\n+  VERIFY( tm1.tm_min == time_sanity.tm_min );\n+  VERIFY( tm1.tm_hour == time_sanity.tm_hour );\n+  VERIFY( rem1 ==  L\" 06/26/97 Tuesday September 1997 Cindy Sherman\" );\n+\n+  // 02 get_date\n+  wstring res2;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end2 = tg.get_date(++end1, str.end(), iss, err, &tm1);\n+  wstring rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( tm1.tm_mon == time_sanity.tm_mon );\n+  VERIFY( tm1.tm_mday == time_sanity.tm_mday );\n+  VERIFY( rem2 ==  L\" Tuesday September 1997 Cindy Sherman\" );\n+\n+  // 03 get_weekday\n+  wstring res3;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end3 = tg.get_weekday(++end2, str.end(), iss, err, &tm1);\n+  wstring rem3(end3, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_wday == time_sanity.tm_wday );\n+  VERIFY( rem3 ==  L\" September 1997 Cindy Sherman\" );\n+\n+  // 04 get_monthname\n+  wstring res4;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end4 = tg.get_monthname(++end3, str.end(), iss, err, &tm1);\n+  wstring rem4(end4, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_mon == 8 );\n+  VERIFY( rem4 ==  L\" 1997 Cindy Sherman\" );\n+\n+  // 05 get_year\n+  wstring res5;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end5 = tg.get_year(++end4, str.end(), iss, err, &tm1);\n+  wstring rem5(end5, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( rem5 ==  L\" Cindy Sherman\" );\n+}\n #endif\n \n int main()\n@@ -594,6 +681,8 @@ int main()\n   test03();\n   test04();\n   test05();\n+\n+  test06();\n #endif\n   return 0;\n }"}, {"sha": "96d24fc041e82d7707294a0ab9d783e1ddf63316", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_char.cc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -188,8 +188,52 @@ void test01()\n   VERIFY( result12 != result11 );\n }\n \n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check time_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef string::iterator iter_type;\n+  typedef char_traits<char> traits;\n+  typedef time_put<char, iter_type> time_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  const string x(50, 'x'); // have to have allocated string!\n+  string res;\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  const char* date = \"%X, %A, the second of %B, %Y\";\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new time_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_put_type& tp = use_facet<time_put_type>(oss.getloc());\n+\n+  // 01 date format\n+  res = x;\n+  iter_type ret1 = tp.put(res.begin(), oss, ' ', &time_sanity, \n+\t\t\t  date, date + traits::length(date));\n+  string sanity1(res.begin(), ret1);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == \"12:00:00, Tuesday, the second of June, 1997xxxxxxx\" );\n+  VERIFY( sanity1 == \"12:00:00, Tuesday, the second of June, 1997\" );\n+\n+  // 02 char format\n+  res = x;\n+  iter_type ret2 = tp.put(res.begin(), oss, ' ', &time_sanity, 'A');\n+  string sanity2(res.begin(), ret2);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == \"Tuesdayxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" );\n+  VERIFY( sanity2 == \"Tuesday\" );\n+}\n+\n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}, {"sha": "48543b7132dc326e64c53a2f86fede7c83287d45", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_wchar_t.cc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f88da406bc8c03775e15b4f7d2c8bc201cffb4e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_wchar_t.cc?ref=8f88da406bc8c03775e15b4f7d2c8bc201cffb4e", "patch": "@@ -1,6 +1,6 @@\n // 2001-10-02 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -189,12 +189,56 @@ void test01()\n   wstring result12 = oss.str();\n   VERIFY( result12 != result11 );\n }\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check time_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::iterator iter_type;\n+  typedef char_traits<wchar_t> traits;\n+  typedef time_put<wchar_t, iter_type> time_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  const wstring x(50, L'x'); // have to have allocated string!\n+  wstring res;\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  const wchar_t* date = L\"%X, %A, the second of %B, %Y\";\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new time_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_put_type& tp = use_facet<time_put_type>(oss.getloc());\n+\n+  // 01 date format\n+  res = x;\n+  iter_type ret1 = tp.put(res.begin(), oss, L' ', &time_sanity, \n+\t\t\t  date, date + traits::length(date));\n+  wstring sanity1(res.begin(), ret1);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == L\"12:00:00, Tuesday, the second of June, 1997xxxxxxx\" );\n+  VERIFY( sanity1 == L\"12:00:00, Tuesday, the second of June, 1997\" );\n+\n+  // 02 char format\n+  res = x;\n+  iter_type ret2 = tp.put(res.begin(), oss, L' ', &time_sanity, 'A');\n+  wstring sanity2(res.begin(), ret2);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == L\"Tuesdayxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" );\n+  VERIFY( sanity2 == L\"Tuesday\" );\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n+  test02();\n #endif\n   return 0;\n }"}]}