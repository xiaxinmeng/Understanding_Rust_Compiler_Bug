{"sha": "13c21337f882406c1de0e67fb5439727a44c8274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjMjEzMzdmODgyNDA2YzFkZTBlNjdmYjU0Mzk3MjdhNDRjODI3NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-31T21:45:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-31T21:45:51Z"}, "message": "dwarf2out.c (dwarf_AT): Handle DW_AT_dwo_name.\n\n\t* dwarf2out.c (dwarf_AT): Handle DW_AT_dwo_name.\n\t(use_debug_types): Adjust comment for DWARF5 DW_UT_type units.\n\t(new_die): Handle DW_TAG_skeleton_unit like DW_TAG_compile_unit.\n\t(is_cu_die, is_unit_die): Likewise.\n\t(should_move_die_to_comdat, break_out_comdat_types): Adjust\n\tcomments for DWARF5 DW_UT_type units.\n\t(output_compilation_unit_header): Add UT argument, output\n\tstart of DWARF5 .debug_info section header.\n\t(output_comp_unit): Add dwo_id argument.  Adjust\n\toutput_compilation_unit_header caller, for DW_UT_split_compile\n\temit dwo_id field, otherwise padding1.  Emit padding2 field.\n\t(add_top_level_skeleton_die_attrs): Add DW_AT_dwo_name\n\trather than DW_AT_GNU_dwo_name attr for -gdwarf-5.\n\t(output_skeleton_debug_sections): Add dwo_id argument, for\n\t-gdwarf-5 emit DWARF 5 DW_UT_skeleton header.\n\t(output_comdat_type_unit): For -gdwarf-5 emit .debug_info\n\tDW_UT_type or DW_UT_split_type units rather than .debug_types.\n\t(dwarf2out_finish): Use DW_TAG_skeleton_unit rather than\n\tDW_TAG_compile_unit for skeleton unit die.  Don't add\n\tDW_AT_GNU_dwo_id attributes for -gdwarf-5, instead pass checksum\n\taddress to output_comp_unit and output_skeleton_debug_sections.\n\nFrom-SVN: r241724", "tree": {"sha": "0dfffa8a6e7983b6705b8d0d163e18cd6507afe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dfffa8a6e7983b6705b8d0d163e18cd6507afe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c21337f882406c1de0e67fb5439727a44c8274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c21337f882406c1de0e67fb5439727a44c8274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c21337f882406c1de0e67fb5439727a44c8274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c21337f882406c1de0e67fb5439727a44c8274/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3aa46b47b266fdb36067253fe5b88628c2bf39f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa46b47b266fdb36067253fe5b88628c2bf39f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa46b47b266fdb36067253fe5b88628c2bf39f8"}], "stats": {"total": 159, "additions": 121, "deletions": 38}, "files": [{"sha": "cdb09d22a4b07e164ca8271651efc9794dcaff2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c21337f882406c1de0e67fb5439727a44c8274/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c21337f882406c1de0e67fb5439727a44c8274/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13c21337f882406c1de0e67fb5439727a44c8274", "patch": "@@ -1,5 +1,27 @@\n 2016-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (dwarf_AT): Handle DW_AT_dwo_name.\n+\t(use_debug_types): Adjust comment for DWARF5 DW_UT_type units.\n+\t(new_die): Handle DW_TAG_skeleton_unit like DW_TAG_compile_unit.\n+\t(is_cu_die, is_unit_die): Likewise.\n+\t(should_move_die_to_comdat, break_out_comdat_types): Adjust\n+\tcomments for DWARF5 DW_UT_type units.\n+\t(output_compilation_unit_header): Add UT argument, output\n+\tstart of DWARF5 .debug_info section header.\n+\t(output_comp_unit): Add dwo_id argument.  Adjust\n+\toutput_compilation_unit_header caller, for DW_UT_split_compile\n+\temit dwo_id field, otherwise padding1.  Emit padding2 field.\n+\t(add_top_level_skeleton_die_attrs): Add DW_AT_dwo_name\n+\trather than DW_AT_GNU_dwo_name attr for -gdwarf-5.\n+\t(output_skeleton_debug_sections): Add dwo_id argument, for\n+\t-gdwarf-5 emit DWARF 5 DW_UT_skeleton header.\n+\t(output_comdat_type_unit): For -gdwarf-5 emit .debug_info\n+\tDW_UT_type or DW_UT_split_type units rather than .debug_types.\n+\t(dwarf2out_finish): Use DW_TAG_skeleton_unit rather than\n+\tDW_TAG_compile_unit for skeleton unit die.  Don't add\n+\tDW_AT_GNU_dwo_id attributes for -gdwarf-5, instead pass checksum\n+\taddress to output_comp_unit and output_skeleton_debug_sections.\n+\n \t* dwarf2out.c (debug_line_str_section): New variable.\n \t(debug_line_str_hash): Likewise.\n \t(DEBUG_LINE_STR_SECTION): Define."}, {"sha": "8259ae0cfe8eeba682c91d13ae0abe290e569044", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 99, "deletions": 38, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c21337f882406c1de0e67fb5439727a44c8274/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c21337f882406c1de0e67fb5439727a44c8274/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=13c21337f882406c1de0e67fb5439727a44c8274", "patch": "@@ -1637,6 +1637,11 @@ dwarf_AT (enum dwarf_attribute at)\n \treturn DW_AT_GNU_all_tail_call_sites;\n       break;\n \n+    case DW_AT_dwo_name:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_dwo_name;\n+      break;\n+\n     default:\n       break;\n     }\n@@ -2761,7 +2766,8 @@ const struct gcc_debug_hooks dwarf2_lineno_debug_hooks =\n    -fno-debug-types-section.  It is more efficient to put them in a\n    separate comdat sections since the linker will then be able to\n    remove duplicates.  But not all tools support .debug_types sections\n-   yet.  */\n+   yet.  For Dwarf V5 or higher .debug_types doesn't exist any more,\n+   it is DW_UT_type unit type in .debug_info section.  */\n \n #define use_debug_types (dwarf_version >= 4 && flag_debug_types_section)\n \n@@ -3410,8 +3416,8 @@ static void output_abbrev_section (void);\n static void output_die_abbrevs (unsigned long, dw_die_ref);\n static void output_die_symbol (dw_die_ref);\n static void output_die (dw_die_ref);\n-static void output_compilation_unit_header (void);\n-static void output_comp_unit (dw_die_ref, int);\n+static void output_compilation_unit_header (enum dwarf_unit_type);\n+static void output_comp_unit (dw_die_ref, int, const unsigned char *);\n static void output_comdat_type_unit (comdat_type_node *);\n static const char *dwarf2_name (tree, int);\n static void add_pubname (tree, dw_die_ref);\n@@ -5213,6 +5219,7 @@ new_die (enum dwarf_tag tag_value, dw_die_ref parent_die, tree t)\n \t  /* These are allowed because they're generated while\n \t     breaking out COMDAT units late.  */\n \t  && tag_value != DW_TAG_type_unit\n+\t  && tag_value != DW_TAG_skeleton_unit\n \t  && !early_dwarf\n \t  /* Allow nested functions to live in limbo because they will\n \t     only temporarily live there, as decls_for_scope will fix\n@@ -7241,7 +7248,8 @@ is_symbol_die (dw_die_ref c)\n static inline bool\n is_cu_die (dw_die_ref c)\n {\n-  return c && c->die_tag == DW_TAG_compile_unit;\n+  return c && (c->die_tag == DW_TAG_compile_unit\n+\t       || c->die_tag == DW_TAG_skeleton_unit);\n }\n \n /* Returns true iff C is a unit DIE of some sort.  */\n@@ -7251,7 +7259,8 @@ is_unit_die (dw_die_ref c)\n {\n   return c && (c->die_tag == DW_TAG_compile_unit\n \t       || c->die_tag == DW_TAG_partial_unit\n-\t       || c->die_tag == DW_TAG_type_unit);\n+\t       || c->die_tag == DW_TAG_type_unit\n+\t       || c->die_tag == DW_TAG_skeleton_unit);\n }\n \n /* Returns true iff C is a namespace DIE.  */\n@@ -7536,7 +7545,8 @@ contains_subprogram_definition (dw_die_ref die)\n }\n \n /* Return non-zero if this is a type DIE that should be moved to a\n-   COMDAT .debug_types section.  */\n+   COMDAT .debug_types section or .debug_info section with DW_UT_*type\n+   unit type.  */\n \n static int\n should_move_die_to_comdat (dw_die_ref die)\n@@ -8053,8 +8063,9 @@ copy_dwarf_procs_ref_in_dies (dw_die_ref die,\n \t\t\t\t\t\t\tcopied_dwarf_procs));\n }\n \n-/* Traverse the DIE and set up additional .debug_types sections for each\n-   type worthy of being placed in a COMDAT section.  */\n+/* Traverse the DIE and set up additional .debug_types or .debug_info\n+   DW_UT_*type sections for each type worthy of being placed in a COMDAT\n+   section.  */\n \n static void\n break_out_comdat_types (dw_die_ref die)\n@@ -10153,12 +10164,8 @@ output_die (dw_die_ref die)\n    .debug_info section, and precedes the DIE descriptions.  */\n \n static void\n-output_compilation_unit_header (void)\n+output_compilation_unit_header (enum dwarf_unit_type ut)\n {\n-  /* We don't support actual DWARFv5 units yet, we just use some\n-     DWARFv5 draft DIE tags in DWARFv4 format.  */\n-  int ver = dwarf_version < 5 ? dwarf_version : 4;\n-\n   if (!XCOFF_DEBUGGING_INFO)\n     {\n       if (DWARF_INITIAL_LENGTH_SIZE - DWARF_OFFSET_SIZE == 4)\n@@ -10169,17 +10176,33 @@ output_compilation_unit_header (void)\n \t\t\t   \"Length of Compilation Unit Info\");\n     }\n \n-  dw2_asm_output_data (2, ver, \"DWARF version number\");\n+  dw2_asm_output_data (2, dwarf_version, \"DWARF version number\");\n+  if (dwarf_version >= 5)\n+    {\n+      const char *name;\n+      switch (ut)\n+\t{\n+\tcase DW_UT_compile: name = \"DW_UT_compile\"; break;\n+\tcase DW_UT_type: name = \"DW_UT_type\"; break;\n+\tcase DW_UT_split_compile: name = \"DW_UT_split_compile\"; break;\n+\tcase DW_UT_split_type: name = \"DW_UT_split_type\"; break;\n+\tdefault: gcc_unreachable ();\n+\t}\n+      dw2_asm_output_data (1, ut, name);\n+      dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n+    }\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, abbrev_section_label,\n \t\t\t debug_abbrev_section,\n \t\t\t \"Offset Into Abbrev. Section\");\n-  dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n+  if (dwarf_version < 5)\n+    dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n }\n \n /* Output the compilation unit DIE and its children.  */\n \n static void\n-output_comp_unit (dw_die_ref die, int output_if_empty)\n+output_comp_unit (dw_die_ref die, int output_if_empty,\n+\t\t  const unsigned char *dwo_id)\n {\n   const char *secname, *oldsym;\n   char *tmp;\n@@ -10231,7 +10254,20 @@ output_comp_unit (dw_die_ref die, int output_if_empty)\n     }\n \n   /* Output debugging information.  */\n-  output_compilation_unit_header ();\n+  output_compilation_unit_header (dwo_id\n+\t\t\t\t  ? DW_UT_split_compile : DW_UT_compile);\n+  if (dwarf_version >= 5)\n+    {\n+      if (dwo_id != NULL)\n+\tfor (int i = 0; i < 8; i++)\n+\t  dw2_asm_output_data (1, dwo_id[i], i == 0 ? \"DWO id\" : NULL);\n+      else\n+\t/* Hope all the padding will be removed for DWARF 5 final for\n+\t   DW_AT_compile and DW_AT_partial.  */\n+\tdw2_asm_output_data (8, 0, \"Padding 1\");\n+\n+      dw2_asm_output_data (DWARF_OFFSET_SIZE, 0, \"Padding 2\");\n+    }\n   output_die (die);\n \n   /* Leave the marks on the main CU, so we can check them in\n@@ -10300,7 +10336,7 @@ add_top_level_skeleton_die_attrs (dw_die_ref die)\n   const char *dwo_file_name = concat (aux_base_name, \".dwo\", NULL);\n   const char *comp_dir = comp_dir_string ();\n \n-  add_skeleton_AT_string (die, DW_AT_GNU_dwo_name, dwo_file_name);\n+  add_skeleton_AT_string (die, dwarf_AT (DW_AT_dwo_name), dwo_file_name);\n   if (comp_dir != NULL)\n     add_skeleton_AT_string (die, DW_AT_comp_dir, comp_dir);\n   add_AT_pubnames (die);\n@@ -10310,12 +10346,9 @@ add_top_level_skeleton_die_attrs (dw_die_ref die)\n /* Output skeleton debug sections that point to the dwo file.  */\n \n static void\n-output_skeleton_debug_sections (dw_die_ref comp_unit)\n+output_skeleton_debug_sections (dw_die_ref comp_unit,\n+\t\t\t\tconst unsigned char *dwo_id)\n {\n-  /* We don't support actual DWARFv5 units yet, we just use some\n-     DWARFv5 draft DIE tags in DWARFv4 format.  */\n-  int ver = dwarf_version < 5 ? dwarf_version : 4;\n-\n   /* These attributes will be found in the full debug_info section.  */\n   remove_AT (comp_unit, DW_AT_producer);\n   remove_AT (comp_unit, DW_AT_language);\n@@ -10335,11 +10368,24 @@ output_skeleton_debug_sections (dw_die_ref comp_unit)\n                        - DWARF_INITIAL_LENGTH_SIZE\n                        + size_of_die (comp_unit),\n                       \"Length of Compilation Unit Info\");\n-  dw2_asm_output_data (2, ver, \"DWARF version number\");\n+  dw2_asm_output_data (2, dwarf_version, \"DWARF version number\");\n+  if (dwarf_version >= 5)\n+    {\n+      dw2_asm_output_data (1, DW_UT_skeleton, \"DW_UT_skeleton\");\n+      dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n+    }\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_skeleton_abbrev_section_label,\n-                         debug_abbrev_section,\n+\t\t\t debug_skeleton_abbrev_section,\n                          \"Offset Into Abbrev. Section\");\n-  dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n+  if (dwarf_version < 5)\n+    dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n+  else\n+    {\n+      for (int i = 0; i < 8; i++)\n+\tdw2_asm_output_data (1, dwo_id[i], i == 0 ? \"DWO id\" : NULL);\n+\n+      dw2_asm_output_data (DWARF_OFFSET_SIZE, 0, \"Padding 2\");\n+    }\n \n   comp_unit->die_abbrev = SKELETON_COMP_DIE_ABBREV;\n   output_die (comp_unit);\n@@ -10380,13 +10426,20 @@ output_comdat_type_unit (comdat_type_node *node)\n   calc_die_sizes (node->root_die);\n \n #if defined (OBJECT_FORMAT_ELF)\n-  if (!dwarf_split_debug_info)\n+  if (dwarf_version >= 5)\n+    {\n+      if (!dwarf_split_debug_info)\n+\tsecname = \".debug_info\";\n+      else\n+\tsecname = \".debug_info.dwo\";\n+    }\n+  else if (!dwarf_split_debug_info)\n     secname = \".debug_types\";\n   else\n     secname = \".debug_types.dwo\";\n \n   tmp = XALLOCAVEC (char, 4 + DWARF_TYPE_SIGNATURE_SIZE * 2);\n-  sprintf (tmp, \"wt.\");\n+  sprintf (tmp, dwarf_version >= 5 ? \"wi.\" : \"wt.\");\n   for (i = 0; i < DWARF_TYPE_SIGNATURE_SIZE; i++)\n     sprintf (tmp + 3 + i * 2, \"%02x\", node->signature[i] & 0xff);\n   comdat_key = get_identifier (tmp);\n@@ -10395,15 +10448,17 @@ output_comdat_type_unit (comdat_type_node *node)\n                                  comdat_key);\n #else\n   tmp = XALLOCAVEC (char, 18 + DWARF_TYPE_SIGNATURE_SIZE * 2);\n-  sprintf (tmp, \".gnu.linkonce.wt.\");\n+  sprintf (tmp, (dwarf_version >= 5\n+\t\t ? \".gnu.linkonce.wi.\" : \".gnu.linkonce.wt.\"));\n   for (i = 0; i < DWARF_TYPE_SIGNATURE_SIZE; i++)\n     sprintf (tmp + 17 + i * 2, \"%02x\", node->signature[i] & 0xff);\n   secname = tmp;\n   switch_to_section (get_section (secname, SECTION_DEBUG, NULL));\n #endif\n \n   /* Output debugging information.  */\n-  output_compilation_unit_header ();\n+  output_compilation_unit_header (dwarf_split_debug_info\n+\t\t\t\t  ? DW_UT_split_type : DW_UT_type);\n   output_signature (node->signature, \"Type Signature\");\n   dw2_asm_output_data (DWARF_OFFSET_SIZE, node->type_die->die_offset,\n \t\t       \"Offset to Type DIE\");\n@@ -28844,6 +28899,7 @@ dwarf2out_finish (const char *)\n {\n   comdat_type_node *ctnode;\n   dw_die_ref main_comp_unit_die;\n+  unsigned char checksum[16];\n \n   /* Flush out any latecomers to the limbo party.  */\n   flush_limbo_die_list ();\n@@ -28889,6 +28945,8 @@ dwarf2out_finish (const char *)\n     {\n       limbo_die_node *cu;\n       main_comp_unit_die = gen_compile_unit_die (NULL);\n+      if (dwarf_version >= 5)\n+\tmain_comp_unit_die->die_tag = DW_TAG_skeleton_unit;\n       cu = limbo_die_list;\n       gcc_assert (cu->die == main_comp_unit_die);\n       limbo_die_list = limbo_die_list->next;\n@@ -29020,7 +29078,7 @@ dwarf2out_finish (const char *)\n   /* Output all of the compilation units.  We put the main one last so that\n      the offsets are available to output_pubnames.  */\n   for (node = cu_die_list; node; node = node->next)\n-    output_comp_unit (node->die, 0);\n+    output_comp_unit (node->die, 0, NULL);\n \n   hash_table<comdat_type_hasher> comdat_type_table (100);\n   for (ctnode = comdat_type_list; ctnode != NULL; ctnode = ctnode->next)\n@@ -29054,7 +29112,6 @@ dwarf2out_finish (const char *)\n   if (dwarf_split_debug_info)\n     {\n       int mark;\n-      unsigned char checksum[16];\n       struct md5_ctx ctx;\n \n       /* Compute a checksum of the comp_unit to use as the dwo_id.  */\n@@ -29064,10 +29121,13 @@ dwarf2out_finish (const char *)\n       unmark_all_dies (comp_unit_die ());\n       md5_finish_ctx (&ctx, checksum);\n \n-      /* Use the first 8 bytes of the checksum as the dwo_id,\n-        and add it to both comp-unit DIEs.  */\n-      add_AT_data8 (main_comp_unit_die, DW_AT_GNU_dwo_id, checksum);\n-      add_AT_data8 (comp_unit_die (), DW_AT_GNU_dwo_id, checksum);\n+      if (dwarf_version < 5)\n+\t{\n+\t  /* Use the first 8 bytes of the checksum as the dwo_id,\n+\t     and add it to both comp-unit DIEs.  */\n+\t  add_AT_data8 (main_comp_unit_die, DW_AT_GNU_dwo_id, checksum);\n+\t  add_AT_data8 (comp_unit_die (), DW_AT_GNU_dwo_id, checksum);\n+\t}\n \n       /* Add the base offset of the ranges table to the skeleton\n         comp-unit DIE.  */\n@@ -29082,10 +29142,11 @@ dwarf2out_finish (const char *)\n \n   /* Output the main compilation unit if non-empty or if .debug_macinfo\n      or .debug_macro will be emitted.  */\n-  output_comp_unit (comp_unit_die (), have_macinfo);\n+  output_comp_unit (comp_unit_die (), have_macinfo,\n+\t\t    dwarf_split_debug_info ? checksum : NULL);\n \n   if (dwarf_split_debug_info && info_section_emitted)\n-    output_skeleton_debug_sections (main_comp_unit_die);\n+    output_skeleton_debug_sections (main_comp_unit_die, checksum);\n \n   /* Output the abbreviation table.  */\n   if (vec_safe_length (abbrev_die_table) != 1)"}]}