{"sha": "4fb5478c936efb66fb417557182cb7cf7f4513b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZiNTQ3OGM5MzZlZmI2NmZiNDE3NTU3MTgyY2I3Y2Y3ZjQ1MTNiNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-05-28T15:24:35Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-05-28T15:24:35Z"}, "message": "trans-expr.c (gfc_conv_procedure_call): Deallocate polymorphic arrays for allocatable intent(out) dummies.\n\n2013-05-28  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-expr.c (gfc_conv_procedure_call): Deallocate\n        polymorphic arrays for allocatable intent(out) dummies.\n        (gfc_reset_vptr): New function, moved from trans-stmt.c\n        and extended.\n        * trans-stmt.c (reset_vptr): Remove.\n        (gfc_trans_deallocate): Update calls.\n        * trans.h (gfc_reset_vptr): New prototype.\n\n2013-05-28  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/class_array_16.f90: New.\n\nFrom-SVN: r199383", "tree": {"sha": "4946cdd562283965bd2d2588c37bb5e905e50166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4946cdd562283965bd2d2588c37bb5e905e50166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fb5478c936efb66fb417557182cb7cf7f4513b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb5478c936efb66fb417557182cb7cf7f4513b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb5478c936efb66fb417557182cb7cf7f4513b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb5478c936efb66fb417557182cb7cf7f4513b4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fdf9c1ec0cc0be111e5d22d4da1cfa36a384c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdf9c1ec0cc0be111e5d22d4da1cfa36a384c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fdf9c1ec0cc0be111e5d22d4da1cfa36a384c42"}], "stats": {"total": 208, "additions": 181, "deletions": 27}, "files": [{"sha": "b9a4a6998df84e8e3e0862d82c35054ca8fa742b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4fb5478c936efb66fb417557182cb7cf7f4513b4", "patch": "@@ -1,3 +1,13 @@\n+2013-05-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (gfc_conv_procedure_call): Deallocate\n+\tpolymorphic arrays for allocatable intent(out) dummies.\n+\t(gfc_reset_vptr): New function, moved from trans-stmt.c\n+\tand extended.\n+\t* trans-stmt.c (reset_vptr): Remove.\n+\t(gfc_trans_deallocate): Update calls.\n+\t* trans.h (gfc_reset_vptr): New prototype.\n+\n 2013-05-28  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/57435"}, {"sha": "07b0fa6125ee50ac36ed1aab13854e6580edc6fd", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4fb5478c936efb66fb417557182cb7cf7f4513b4", "patch": "@@ -214,6 +214,55 @@ gfc_vtable_final_get (tree decl)\n #undef VTABLE_FINAL_FIELD\n \n \n+/* Reset the vptr to the declared type, e.g. after deallocation.  */\n+\n+void\n+gfc_reset_vptr (stmtblock_t *block, gfc_expr *e)\n+{\n+  gfc_expr *rhs, *lhs = gfc_copy_expr (e);\n+  gfc_symbol *vtab;\n+  tree tmp;\n+  gfc_ref *ref;\n+\n+  /* If we have a class array, we need go back to the class\n+     container. */\n+  if (lhs->ref && lhs->ref->next && !lhs->ref->next->next\n+      && lhs->ref->next->type == REF_ARRAY\n+      && lhs->ref->next->u.ar.type == AR_FULL\n+      && lhs->ref->type == REF_COMPONENT\n+      && strcmp (lhs->ref->u.c.component->name, \"_data\") == 0)\n+    {\n+      gfc_free_ref_list (lhs->ref);\n+      lhs->ref = NULL;\n+    }\n+  else\n+    for (ref = lhs->ref; ref; ref = ref->next)\n+      if (ref->next && ref->next->next && !ref->next->next->next\n+\t  && ref->next->next->type == REF_ARRAY\n+\t  && ref->next->next->u.ar.type == AR_FULL\n+\t  && ref->next->type == REF_COMPONENT\n+\t  && strcmp (ref->next->u.c.component->name, \"_data\") == 0)\n+\t{\n+\t  gfc_free_ref_list (ref->next);\n+\t  ref->next = NULL;\n+\t}\n+\n+  gfc_add_vptr_component (lhs);\n+\n+  if (UNLIMITED_POLY (e))\n+    rhs = gfc_get_null_expr (NULL);\n+  else\n+    {\n+      vtab = gfc_find_derived_vtab (e->ts.u.derived);\n+      rhs = gfc_lval_expr_from_sym (vtab);\n+    }\n+  tmp = gfc_trans_pointer_assignment (lhs, rhs);\n+  gfc_add_expr_to_block (block, tmp);\n+  gfc_free_expr (lhs);\n+  gfc_free_expr (rhs);\n+}\n+\n+\n /* Obtain the vptr of the last class reference in an expression.\n    Return NULL_TREE if no class reference is found.  */\n \n@@ -4320,6 +4369,49 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t    {\n \t      /* Pass a class array.  */\n \t      gfc_conv_expr_descriptor (&parmse, e);\n+\n+\t      /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is\n+\t\t allocated on entry, it must be deallocated.  */\n+\t      if (fsym->attr.intent == INTENT_OUT\n+\t\t  && CLASS_DATA (fsym)->attr.allocatable)\n+\t\t{\n+\t\t  stmtblock_t block;\n+\t\t  tree ptr;\n+\n+\t\t  gfc_init_block  (&block);\n+\t\t  ptr = parmse.expr;\n+\t\t  ptr = gfc_class_data_get (ptr);\n+\n+\t\t  tmp = gfc_deallocate_with_status (ptr, NULL_TREE,\n+\t\t\t\t\t\t    NULL_TREE, NULL_TREE,\n+\t\t\t\t\t\t    NULL_TREE, true, e,\n+\t\t\t\t\t\t    false);\n+\t\t  gfc_add_expr_to_block (&block, tmp);\n+\t\t  tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t\t\t void_type_node, ptr,\n+\t\t\t\t\t null_pointer_node);\n+\t\t  gfc_add_expr_to_block (&block, tmp);\n+\t\t  gfc_reset_vptr (&block, e);\n+\n+\t\t  if (fsym->attr.optional\n+\t\t      && e->expr_type == EXPR_VARIABLE\n+\t\t      && (!e->ref\n+\t\t\t  || (e->ref->type == REF_ARRAY\n+\t\t\t      && !e->ref->u.ar.type != AR_FULL))\n+\t\t      && e->symtree->n.sym->attr.optional)\n+\t\t    {\n+\t\t      tmp = fold_build3_loc (input_location, COND_EXPR,\n+\t\t\t\t    void_type_node,\n+\t\t\t\t    gfc_conv_expr_present (e->symtree->n.sym),\n+\t\t\t\t    gfc_finish_block (&block),\n+\t\t\t\t    build_empty_stmt (input_location));\n+\t\t    }\n+\t\t  else\n+\t\t    tmp = gfc_finish_block (&block);\n+\n+\t\t      gfc_add_expr_to_block (&se->pre, tmp);\n+}\n+\n \t      /* The conversion does not repackage the reference to a class\n \t         array - _data descriptor.  */\n \t      gfc_conv_class_to_class (&parmse, e, fsym->ts, false,"}, {"sha": "058fd99a14cba9dcdf7d7e2dbb9ec1974d2ff6a8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=4fb5478c936efb66fb417557182cb7cf7f4513b4", "patch": "@@ -5349,30 +5349,6 @@ gfc_trans_allocate (gfc_code * code)\n }\n \n \n-/* Reset the vptr after deallocation.  */\n-\n-static void\n-reset_vptr (stmtblock_t *block, gfc_expr *e)\n-{\n-  gfc_expr *rhs, *lhs = gfc_copy_expr (e);\n-  gfc_symbol *vtab;\n-  tree tmp;\n-\n-  if (UNLIMITED_POLY (e))\n-    rhs = gfc_get_null_expr (NULL);\n-  else\n-    {\n-      vtab = gfc_find_derived_vtab (e->ts.u.derived);\n-      rhs = gfc_lval_expr_from_sym (vtab);\n-    }\n-  gfc_add_vptr_component (lhs);\n-  tmp = gfc_trans_pointer_assignment (lhs, rhs);\n-  gfc_add_expr_to_block (block, tmp);\n-  gfc_free_expr (lhs);\n-  gfc_free_expr (rhs);\n-}\n-\n-\n /* Translate a DEALLOCATE statement.  */\n \n tree\n@@ -5453,8 +5429,8 @@ gfc_trans_deallocate (gfc_code *code)\n \t  tmp = gfc_array_deallocate (se.expr, pstat, errmsg, errlen,\n \t\t\t\t      label_finish, expr);\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n-\t  if (UNLIMITED_POLY (al->expr))\n-\t    reset_vptr (&se.pre, al->expr);\n+\t  if (al->expr->ts.type == BT_CLASS)\n+\t    gfc_reset_vptr (&se.pre, al->expr);\n \t}\n       else\n \t{\n@@ -5469,7 +5445,7 @@ gfc_trans_deallocate (gfc_code *code)\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n \n \t  if (al->expr->ts.type == BT_CLASS)\n-\t    reset_vptr (&se.pre, al->expr);\n+\t    gfc_reset_vptr (&se.pre, al->expr);\n \t}\n \n       if (code->expr1)"}, {"sha": "0c0fe5d2058db4c2feba5ffdb13038f06c310298", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=4fb5478c936efb66fb417557182cb7cf7f4513b4", "patch": "@@ -341,6 +341,7 @@ gfc_wrapped_block;\n /* Class API functions.  */\n tree gfc_class_data_get (tree);\n tree gfc_class_vptr_get (tree);\n+void gfc_reset_vptr (stmtblock_t *, gfc_expr *);\n tree gfc_class_set_static_fields (tree, tree, tree);\n tree gfc_vtable_hash_get (tree);\n tree gfc_vtable_size_get (tree);"}, {"sha": "fa8802eb2e2e6499792fecb058571afce933d3e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fb5478c936efb66fb417557182cb7cf7f4513b4", "patch": "@@ -1,3 +1,7 @@\n+2013-05-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/class_array_16.f90: New.\n+\n 2013-05-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57435"}, {"sha": "fc8edbf140a0a3fdc91826f9a876152113dd082f", "filename": "gcc/testsuite/gfortran.dg/class_array_16.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fb5478c936efb66fb417557182cb7cf7f4513b4/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_16.f90?ref=4fb5478c936efb66fb417557182cb7cf7f4513b4", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+module m\n+  implicit none\n+  type t\n+  end type t\n+\n+  type, extends(t) :: t2\n+  end type t2\n+\n+  type(t) :: var_t\n+  type(t2) :: var_t2\n+contains\n+  subroutine sub(x)\n+     class(t), allocatable, intent(out) :: x(:)\n+\n+     if (allocated (x)) call abort()\n+     if (.not. same_type_as(x, var_t)) call abort()\n+\n+     allocate (t2 :: x(5))\n+  end subroutine sub\n+\n+  subroutine sub2(x)\n+     class(t), allocatable, OPTIONAL, intent(out) :: x(:)\n+\n+     if (.not. present(x)) return\n+     if (allocated (x)) call abort()\n+     if (.not. same_type_as(x, var_t)) call abort()\n+\n+     allocate (t2 :: x(5))\n+  end subroutine sub2\n+end module m\n+\n+use m\n+implicit none\n+class(t), save, allocatable :: y(:)\n+\n+if (allocated (y)) call abort()\n+if (.not. same_type_as(y,var_t)) call abort()\n+\n+call sub(y)\n+if (.not.allocated(y)) call abort()\n+if (.not. same_type_as(y, var_t2)) call abort()\n+if (size (y) /= 5) call abort()\n+\n+call sub(y)\n+if (.not.allocated(y)) call abort()\n+if (.not. same_type_as(y, var_t2)) call abort()\n+if (size (y) /= 5) call abort()\n+\n+deallocate (y)\n+if (allocated (y)) call abort()\n+if (.not. same_type_as(y,var_t)) call abort()\n+\n+call sub2()\n+\n+call sub2(y)\n+if (.not.allocated(y)) call abort()\n+if (.not. same_type_as(y, var_t2)) call abort()\n+if (size (y) /= 5) call abort()\n+\n+call sub2(y)\n+if (.not.allocated(y)) call abort()\n+if (.not. same_type_as(y, var_t2)) call abort()\n+if (size (y) /= 5) call abort()\n+end\n+\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 5 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"finally\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}