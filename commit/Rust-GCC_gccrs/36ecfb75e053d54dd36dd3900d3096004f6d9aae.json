{"sha": "36ecfb75e053d54dd36dd3900d3096004f6d9aae", "node_id": "C_kwDOANBUbNoAKDM2ZWNmYjc1ZTA1M2Q1NGRkMzZkZDM5MDBkMzA5NjAwNGY2ZDlhYWU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T10:08:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T14:23:36Z"}, "message": "libstdc++: Fix conversion to/from net::ip::address_v4::bytes_type\n\nI messed up the endianness of the address_v4::bytes_type array, which\nshould always be in network byte order. We can just use bit_cast to\nconvert the _M_addr member to/from bytes_type.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/internet (address_4(const bytes_type&)):\n\tUse __builtin_bit_cast if available, otherwise convert to\n\tnetwork byte order.\n\t(address_v4::to_bytes()): Likewise, but convert from network\n\tbyte order.\n\t* testsuite/experimental/net/internet/address/v4/cons.cc: Fix\n\tincorrect tests. Check for constexpr too.\n\t* testsuite/experimental/net/internet/address/v4/creation.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/address/v4/members.cc:\n\tCheck that bytes_type is a standard-layout type.", "tree": {"sha": "ad5466885c5735d1deb21b2457df843d2dd87cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5466885c5735d1deb21b2457df843d2dd87cd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ecfb75e053d54dd36dd3900d3096004f6d9aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ecfb75e053d54dd36dd3900d3096004f6d9aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ecfb75e053d54dd36dd3900d3096004f6d9aae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ecfb75e053d54dd36dd3900d3096004f6d9aae/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "363f0ef50bd143fce77a1c7905b0ed707f4a9358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363f0ef50bd143fce77a1c7905b0ed707f4a9358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363f0ef50bd143fce77a1c7905b0ed707f4a9358"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "3fd200251faaf9cd9ddb29c5eddcc5a97cd28d15", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=36ecfb75e053d54dd36dd3900d3096004f6d9aae", "patch": "@@ -198,7 +198,12 @@ namespace ip\n \n     constexpr\n     address_v4(const bytes_type& __b)\n-    : _M_addr((__b[0] << 24) | (__b[1] << 16) | (__b[2] << 8) | __b[3])\n+#if __has_builtin(__builtin_bit_cast)\n+    : _M_addr(__builtin_bit_cast(uint_type, __b))\n+#else\n+    : _M_addr(_S_hton_32((__b[0] << 24) | (__b[1] << 16)\n+\t\t\t   | (__b[2] << 8) | __b[3]))\n+#endif\n     { }\n \n     explicit constexpr\n@@ -227,12 +232,17 @@ namespace ip\n     constexpr bytes_type\n     to_bytes() const noexcept\n     {\n+#if __has_builtin(__builtin_bit_cast)\n+      return __builtin_bit_cast(bytes_type, _M_addr);\n+#else\n+      auto __host = to_uint();\n       return bytes_type{\n-\t  (_M_addr >> 24) & 0xFF,\n-\t  (_M_addr >> 16) & 0xFF,\n-\t  (_M_addr >> 8) & 0xFF,\n-\t  _M_addr & 0xFF\n+\t(__host >> 24) & 0xFF,\n+\t(__host >> 16) & 0xFF,\n+\t(__host >> 8) & 0xFF,\n+\t__host & 0xFF\n       };\n+#endif\n     }\n \n     constexpr uint_type"}, {"sha": "af9fef2215ec243d186b97ac2fd377c0960cf716", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/cons.cc", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc?ref=36ecfb75e053d54dd36dd3900d3096004f6d9aae", "patch": "@@ -24,41 +24,45 @@\n \n using std::experimental::net::ip::address_v4;\n \n-void\n-test01()\n+#if __cplusplus < 202002L\n+// Naughty, but operator== for std::array is not constexpr until C++20.\n+constexpr bool\n+operator==(const address_v4::bytes_type& lhs, const address_v4::bytes_type& rhs)\n {\n-  bool test __attribute__((unused)) = false;\n+  return lhs[0] == rhs[0] && lhs[1] == rhs[1]\n+      && lhs[2] == rhs[2] && lhs[3] == rhs[3];\n+}\n+#endif\n \n+constexpr void\n+test01()\n+{\n   address_v4 a0;\n   VERIFY( a0.to_uint() == 0 );\n   VERIFY( a0.to_bytes() == address_v4::bytes_type{} );\n }\n \n-void\n+constexpr void\n test02()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   address_v4 a0{ address_v4::bytes_type{} };\n   VERIFY( a0.to_uint() == 0 );\n   VERIFY( a0.to_bytes() == address_v4::bytes_type{} );\n \n   address_v4::bytes_type b1{ 1, 2, 3, 4 };\n   address_v4 a1{ b1 };\n-  VERIFY( a1.to_uint() == ntohl((1 << 24) | (2 << 16) | (3 << 8) | 4) );\n+  VERIFY( a1.to_uint() == ((1 << 24) | (2 << 16) | (3 << 8) | 4) );\n   VERIFY( a1.to_bytes() == b1 );\n }\n \n-void\n+constexpr void\n test03()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   address_v4 a0{ 0u };\n   VERIFY( a0.to_uint() == 0 );\n   VERIFY( a0.to_bytes() == address_v4::bytes_type{} );\n \n-  address_v4::uint_type u1 = ntohl((5 << 24) | (6 << 16) | (7 << 8) | 8);\n+  address_v4::uint_type u1 = (5 << 24) | (6 << 16) | (7 << 8) | 8;\n   address_v4 a1{ u1 };\n   VERIFY( a1.to_uint() == u1 );\n   VERIFY( a1.to_bytes() == address_v4::bytes_type( 5, 6, 7, 8 ) );\n@@ -70,4 +74,11 @@ main()\n   test01();\n   test02();\n   test03();\n+\n+  constexpr bool c = []{\n+    test01();\n+    test02();\n+    test03();\n+    return true;\n+  };\n }"}, {"sha": "84aebbb7adce792ac13e575a3c3222587353dd4f", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/creation.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc?ref=36ecfb75e053d54dd36dd3900d3096004f6d9aae", "patch": "@@ -25,7 +25,17 @@\n namespace net = std::experimental::net;\n using net::ip::address_v4;\n \n-void\n+#if __cplusplus < 202002L\n+// Naughty, but operator== for std::array is not constexpr until C++20.\n+constexpr bool\n+operator==(const address_v4::bytes_type& lhs, const address_v4::bytes_type& rhs)\n+{\n+  return lhs[0] == rhs[0] && lhs[1] == rhs[1]\n+      && lhs[2] == rhs[2] && lhs[3] == rhs[3];\n+}\n+#endif\n+\n+constexpr void\n test01()\n {\n   auto a0 = make_address_v4( address_v4::bytes_type{} );\n@@ -34,18 +44,18 @@ test01()\n \n   address_v4::bytes_type b1{ 1, 2, 3, 4 };\n   auto a1 = make_address_v4( b1 );\n-  VERIFY( a1.to_uint() == ntohl((1 << 24) | (2 << 16) | (3 << 8) | 4) );\n+  VERIFY( a1.to_uint() == ((1 << 24) | (2 << 16) | (3 << 8) | 4) );\n   VERIFY( a1.to_bytes() == b1 );\n }\n \n-void\n+constexpr void\n test02()\n {\n   auto a0 = net::ip::make_address_v4(0u);\n   VERIFY( a0.to_uint() == 0 );\n   VERIFY( a0.to_bytes() == address_v4::bytes_type{} );\n \n-  address_v4::uint_type u1 = ntohl((5 << 24) | (6 << 16) | (7 << 8) | 8);\n+  address_v4::uint_type u1 = ((5 << 24) | (6 << 16) | (7 << 8) | 8);\n   auto a1 = net::ip::make_address_v4( u1 );\n   VERIFY( a1.to_uint() == u1 );\n   VERIFY( a1.to_bytes() == address_v4::bytes_type( 5, 6, 7, 8 ) );\n@@ -84,4 +94,10 @@ main()\n   test01();\n   test02();\n   test03();\n+\n+  constexpr bool c = []{\n+    test01();\n+    test02();\n+    return true;\n+  };\n }"}, {"sha": "ac59405c5997727924d49276b2d6bcfd76f82a8f", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/members.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ecfb75e053d54dd36dd3900d3096004f6d9aae/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc?ref=36ecfb75e053d54dd36dd3900d3096004f6d9aae", "patch": "@@ -26,6 +26,9 @@\n \n using std::experimental::net::ip::address_v4;\n \n+static_assert(std::is_standard_layout<address_v4::bytes_type>::value,\n+    \"net::ip::address_v4::bytes_type is a standard layout type\");\n+\n constexpr bool\n test01()\n {"}]}