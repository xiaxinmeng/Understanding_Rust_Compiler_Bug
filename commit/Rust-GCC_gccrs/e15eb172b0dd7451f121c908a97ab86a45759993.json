{"sha": "e15eb172b0dd7451f121c908a97ab86a45759993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1ZWIxNzJiMGRkNzQ1MWYxMjFjOTA4YTk3YWI4NmE0NTc1OTk5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-19T21:27:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-19T21:27:51Z"}, "message": "re PR other/59545 (Signed integer overflow issues)\n\n\tPR other/59545\n\t* genattrtab.c (struct attr_hash): Change hashcode type to unsigned.\n\t(attr_hash_add_rtx, attr_hash_add_string): Change hashcode parameter\n\tto unsigned.\n\t(attr_rtx_1): Change hashcode variable to unsigned.\n\t(attr_string): Likewise.  Perform first multiplication in unsigned\n\ttype.\n\t* ifcvt.c (noce_try_store_flag_constants): Avoid signed integer\n\toverflows.\n\t* double-int.c (neg_double): Likewise.\n\t* stor-layout.c (set_min_and_max_values_for_integral_type): Likewise.\n\t* combine.c (force_to_mode): Likewise.\n\t* postreload.c (move2add_use_add2_insn, move2add_use_add3_insn,\n\treload_cse_move2add, move2add_note_store): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation,\n\tsimplify_const_binary_operation): Likewise.\n\t* ipa-split.c (find_split_points): Initialize first.can_split\n\tand first.non_ssa_vars.\n\t* gengtype-state.c (read_state_files_list): Fix up check.\n\t* genautomata.c (reserv_sets_hash_value): Use portable rotation\n\tidiom.\njava/\n\t* class.c (hashUtf8String): Compute hash in unsigned type.\n\t* javaop.h (WORD_TO_INT): Avoid signed integer overflow.\n\nFrom-SVN: r206134", "tree": {"sha": "0dd1c959d5fa1a9b4256002c3671f2654e454c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dd1c959d5fa1a9b4256002c3671f2654e454c31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e15eb172b0dd7451f121c908a97ab86a45759993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15eb172b0dd7451f121c908a97ab86a45759993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15eb172b0dd7451f121c908a97ab86a45759993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15eb172b0dd7451f121c908a97ab86a45759993/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d79c1df220d94f4c285e0a6e1e750bfb488d78"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "c2cc196d82daae71801710551bb5150cbb8b3ccf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -1,3 +1,27 @@\n+2013-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/59545\n+\t* genattrtab.c (struct attr_hash): Change hashcode type to unsigned.\n+\t(attr_hash_add_rtx, attr_hash_add_string): Change hashcode parameter\n+\tto unsigned.\n+\t(attr_rtx_1): Change hashcode variable to unsigned.\n+\t(attr_string): Likewise.  Perform first multiplication in unsigned\n+\ttype.\n+\t* ifcvt.c (noce_try_store_flag_constants): Avoid signed integer\n+\toverflows.\n+\t* double-int.c (neg_double): Likewise.\n+\t* stor-layout.c (set_min_and_max_values_for_integral_type): Likewise.\n+\t* combine.c (force_to_mode): Likewise.\n+\t* postreload.c (move2add_use_add2_insn, move2add_use_add3_insn,\n+\treload_cse_move2add, move2add_note_store): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation,\n+\tsimplify_const_binary_operation): Likewise.\n+\t* ipa-split.c (find_split_points): Initialize first.can_split\n+\tand first.non_ssa_vars.\n+\t* gengtype-state.c (read_state_files_list): Fix up check.\n+\t* genautomata.c (reserv_sets_hash_value): Use portable rotation\n+\tidiom.\n+\n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/neon-docgen.ml: Add crypto intrinsics documentation."}, {"sha": "ed1dac9d0534a0262839e0ab7d86fcafe98c6332", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -8200,9 +8200,7 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n       /* If X is (minus C Y) where C's least set bit is larger than any bit\n \t in the mask, then we may replace with (neg Y).  */\n       if (CONST_INT_P (XEXP (x, 0))\n-\t  && (((unsigned HOST_WIDE_INT) (INTVAL (XEXP (x, 0))\n-\t\t\t\t\t& -INTVAL (XEXP (x, 0))))\n-\t      > mask))\n+\t  && ((UINTVAL (XEXP (x, 0)) & -UINTVAL (XEXP (x, 0))) > mask))\n \t{\n \t  x = simplify_gen_unary (NEG, GET_MODE (x), XEXP (x, 1),\n \t\t\t\t  GET_MODE (x));"}, {"sha": "a810a050e5779ee7be9bce8a87d7b89e95e4abb6", "filename": "gcc/double-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -138,7 +138,7 @@ neg_double (unsigned HOST_WIDE_INT l1, HOST_WIDE_INT h1,\n   if (l1 == 0)\n     {\n       *lv = 0;\n-      *hv = - h1;\n+      *hv = - (unsigned HOST_WIDE_INT) h1;\n       return (*hv & h1) < 0;\n     }\n   else"}, {"sha": "70f35316404823cd4314537e037709a8d2d0200f", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -320,7 +320,7 @@ static FILE *attr_file, *dfa_file, *latency_file;\n struct attr_hash\n {\n   struct attr_hash *next;\t/* Next structure in the bucket.  */\n-  int hashcode;\t\t\t/* Hash code of this rtx or string.  */\n+  unsigned int hashcode;\t/* Hash code of this rtx or string.  */\n   union\n     {\n       char *str;\t\t/* The string (negative hash codes) */\n@@ -345,7 +345,7 @@ static struct attr_hash *attr_hash_table[RTL_HASH_SIZE];\n /* Add an entry to the hash table for RTL with hash code HASHCODE.  */\n \n static void\n-attr_hash_add_rtx (int hashcode, rtx rtl)\n+attr_hash_add_rtx (unsigned int hashcode, rtx rtl)\n {\n   struct attr_hash *h;\n \n@@ -359,7 +359,7 @@ attr_hash_add_rtx (int hashcode, rtx rtl)\n /* Add an entry to the hash table for STRING with hash code HASHCODE.  */\n \n static void\n-attr_hash_add_string (int hashcode, char *str)\n+attr_hash_add_string (unsigned int hashcode, char *str)\n {\n   struct attr_hash *h;\n \n@@ -384,7 +384,7 @@ static rtx\n attr_rtx_1 (enum rtx_code code, va_list p)\n {\n   rtx rt_val = NULL_RTX;/* RTX to return to caller...\t\t*/\n-  int hashcode;\n+  unsigned int hashcode;\n   struct attr_hash *h;\n   struct obstack *old_obstack = rtl_obstack;\n \n@@ -612,15 +612,15 @@ static char *\n attr_string (const char *str, int len)\n {\n   struct attr_hash *h;\n-  int hashcode;\n+  unsigned int hashcode;\n   int i;\n   char *new_str;\n \n   /* Compute the hash code.  */\n-  hashcode = (len + 1) * 613 + (unsigned) str[0];\n+  hashcode = (len + 1) * 613U + (unsigned) str[0];\n   for (i = 1; i < len; i += 2)\n     hashcode = ((hashcode * 613) + (unsigned) str[i]);\n-  if (hashcode < 0)\n+  if ((int) hashcode < 0)\n     hashcode = -hashcode;\n \n   /* Search the table for the string.  */"}, {"sha": "372ba90efc8d30dc7efff37fcab5dc5f6a0a12df", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -3494,7 +3494,7 @@ reserv_sets_hash_value (reserv_sets_t reservs)\n     {\n       reservs_num--;\n       hash_value += ((*reserv_ptr >> i)\n-\t\t     | (*reserv_ptr << (sizeof (set_el_t) * CHAR_BIT - i)));\n+\t\t     | (*reserv_ptr << ((sizeof (set_el_t) * CHAR_BIT) & -i)));\n       i++;\n       if (i == sizeof (set_el_t) * CHAR_BIT)\n \ti = 0;"}, {"sha": "ef7713ff06a0beedd97933054b293366500008e9", "filename": "gcc/gengtype-state.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fgengtype-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fgengtype-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -2651,7 +2651,7 @@ read_state_files_list (void)\n \t\t\t\t \"expecting file in !fileslist of state file\");\n \t};\n       t0 = peek_state_token (0);\n-      if (!state_token_kind (t0) == STOK_RIGHTPAR)\n+      if (state_token_kind (t0) != STOK_RIGHTPAR)\n \tfatal_reading_state (t0, \"missing ) for !fileslist in state file\");\n       next_state_tokens (1);\n     }"}, {"sha": "db5b8a23eb84c32d2d19e2c547b16045ccbfab92", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -1112,12 +1112,13 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n       ifalse = INTVAL (if_info->a);\n       itrue = INTVAL (if_info->b);\n \n+      diff = (unsigned HOST_WIDE_INT) itrue - ifalse;\n       /* Make sure we can represent the difference between the two values.  */\n-      if ((itrue - ifalse > 0)\n+      if ((diff > 0)\n \t  != ((ifalse < 0) != (itrue < 0) ? ifalse < 0 : ifalse < itrue))\n \treturn FALSE;\n \n-      diff = trunc_int_for_mode (itrue - ifalse, mode);\n+      diff = trunc_int_for_mode (diff, mode);\n \n       can_reverse = (reversed_comparison_code (if_info->cond, if_info->jump)\n \t\t     != UNKNOWN);\n@@ -1148,7 +1149,7 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n       if (reversep)\n \t{\n \t  tmp = itrue; itrue = ifalse; ifalse = tmp;\n-\t  diff = trunc_int_for_mode (-diff, mode);\n+\t  diff = trunc_int_for_mode (-(unsigned HOST_WIDE_INT) diff, mode);\n \t}\n \n       start_sequence ();"}, {"sha": "40c8fd6f99b21c9f1ad94a475c8b7004bb598e71", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -950,7 +950,9 @@ find_split_points (int overall_time, int overall_size)\n   first.earliest = INT_MAX;\n   first.set_ssa_names = 0;\n   first.used_ssa_names = 0;\n+  first.non_ssa_vars = 0;\n   first.bbs_visited = 0;\n+  first.can_split = false;\n   stack.safe_push (first);\n   ENTRY_BLOCK_PTR_FOR_FN (cfun)->aux = (void *)(intptr_t)-1;\n "}, {"sha": "5ab19210cb7258028dc0a47aebbf88cec6ecda7a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -1,3 +1,9 @@\n+2013-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/59545\n+\t* class.c (hashUtf8String): Compute hash in unsigned type.\n+\t* javaop.h (WORD_TO_INT): Avoid signed integer overflow.\n+\n 2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* java-gimplify.c: Add required include files from gimple.h."}, {"sha": "e5d2e6d8e8c47473d37039fbec7538a7f38c7d4e", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -920,7 +920,7 @@ hashUtf8String (const char *str, int len)\n {\n   const unsigned char* ptr = (const unsigned char*) str;\n   const unsigned char *limit = ptr + len;\n-  int32 hash = 0;\n+  uint32 hash = 0;\n   for (; ptr < limit;)\n     {\n       int ch = UTF8_GET (ptr, limit);"}, {"sha": "bffa857cc3ebdc1169a8b50d35a26f6456d73d89", "filename": "gcc/java/javaop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fjava%2Fjavaop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fjava%2Fjavaop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjavaop.h?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -154,7 +154,7 @@ WORD_TO_INT(jword w)\n {\n   jint n = w & 0xffffffff; /* Mask lower 32 bits.  */\n   n ^= (jint)1 << 31;\n-  n -= (jint)1 << 31; /* Sign extend lower 32 bits to upper.  */\n+  n -= (uint32)1 << 31; /* Sign extend lower 32 bits to upper.  */\n   return n;\n } \n "}, {"sha": "478a552608f73db6f1cc3e07dda2aa527fb521fd", "filename": "gcc/postreload.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -1766,7 +1766,7 @@ move2add_use_add2_insn (rtx reg, rtx sym, rtx off, rtx insn)\n   rtx pat = PATTERN (insn);\n   rtx src = SET_SRC (pat);\n   int regno = REGNO (reg);\n-  rtx new_src = gen_int_mode (INTVAL (off) - reg_offset[regno],\n+  rtx new_src = gen_int_mode (UINTVAL (off) - reg_offset[regno],\n \t\t\t      GET_MODE (reg));\n   bool speed = optimize_bb_for_speed_p (BLOCK_FOR_INSN (insn));\n   bool changed = false;\n@@ -1866,7 +1866,7 @@ move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx insn)\n \t&& reg_symbol_ref[i] != NULL_RTX\n \t&& rtx_equal_p (sym, reg_symbol_ref[i]))\n       {\n-\trtx new_src = gen_int_mode (INTVAL (off) - reg_offset[i],\n+\trtx new_src = gen_int_mode (UINTVAL (off) - reg_offset[i],\n \t\t\t\t    GET_MODE (reg));\n \t/* (set (reg) (plus (reg) (const_int 0))) is not canonical;\n \t   use (set (reg) (reg)) instead.\n@@ -1901,7 +1901,7 @@ move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx insn)\n       tem = gen_rtx_REG (GET_MODE (reg), min_regno);\n       if (i != min_regno)\n \t{\n-\t  rtx new_src = gen_int_mode (INTVAL (off) - reg_offset[min_regno],\n+\t  rtx new_src = gen_int_mode (UINTVAL (off) - reg_offset[min_regno],\n \t\t\t\t      GET_MODE (reg));\n \t  tem = gen_rtx_PLUS (GET_MODE (reg), tem, new_src);\n \t}\n@@ -2010,7 +2010,7 @@ reload_cse_move2add (rtx first)\n \t\t      && CONST_INT_P (XEXP (SET_SRC (set), 1)))\n \t\t    {\n \t\t      rtx src3 = XEXP (SET_SRC (set), 1);\n-\t\t      HOST_WIDE_INT added_offset = INTVAL (src3);\n+\t\t      unsigned HOST_WIDE_INT added_offset = UINTVAL (src3);\n \t\t      HOST_WIDE_INT base_offset = reg_offset[REGNO (src)];\n \t\t      HOST_WIDE_INT regno_offset = reg_offset[regno];\n \t\t      rtx new_src =\n@@ -2224,7 +2224,7 @@ move2add_note_store (rtx dst, const_rtx set, void *data)\n     {\n       rtx src = SET_SRC (set);\n       rtx base_reg;\n-      HOST_WIDE_INT offset;\n+      unsigned HOST_WIDE_INT offset;\n       int base_regno;\n \n       switch (GET_CODE (src))\n@@ -2235,7 +2235,7 @@ move2add_note_store (rtx dst, const_rtx set, void *data)\n \t      base_reg = XEXP (src, 0);\n \n \t      if (CONST_INT_P (XEXP (src, 1)))\n-\t\toffset = INTVAL (XEXP (src, 1));\n+\t\toffset = UINTVAL (XEXP (src, 1));\n \t      else if (REG_P (XEXP (src, 1))\n \t\t       && move2add_valid_value_p (REGNO (XEXP (src, 1)), mode))\n \t\t{"}, {"sha": "3019fd86112dd7d1a99e136a2df31909b2542e2f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -1647,7 +1647,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  break;\n \n \tcase NEG:\n-\t  val = - arg0;\n+\t  val = - (unsigned HOST_WIDE_INT) arg0;\n \t  break;\n \n \tcase ABS:\n@@ -4117,15 +4117,15 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n       switch (code)\n \t{\n \tcase PLUS:\n-\t  val = arg0s + arg1s;\n+\t  val = (unsigned HOST_WIDE_INT) arg0s + arg1s;\n \t  break;\n \n \tcase MINUS:\n-\t  val = arg0s - arg1s;\n+\t  val = (unsigned HOST_WIDE_INT) arg0s - arg1s;\n \t  break;\n \n \tcase MULT:\n-\t  val = arg0s * arg1s;\n+\t  val = (unsigned HOST_WIDE_INT) arg0s * arg1s;\n \t  break;\n \n \tcase DIV:"}, {"sha": "675a12386eba59495789f4d4981a3e5dc05bd6e0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15eb172b0dd7451f121c908a97ab86a45759993/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=e15eb172b0dd7451f121c908a97ab86a45759993", "patch": "@@ -2521,7 +2521,7 @@ set_min_and_max_values_for_integral_type (tree type,\n       max_value\n \t= build_int_cst_wide (type, precision - HOST_BITS_PER_WIDE_INT >= 0\n \t\t\t      ? -1\n-\t\t\t      : ((HOST_WIDE_INT) 1 << precision) - 1,\n+\t\t\t      : (HOST_WIDE_INT_1U << precision) - 1,\n \t\t\t      precision - HOST_BITS_PER_WIDE_INT > 0\n \t\t\t      ? ((unsigned HOST_WIDE_INT) ~0\n \t\t\t\t >> (HOST_BITS_PER_WIDE_INT\n@@ -2534,7 +2534,7 @@ set_min_and_max_values_for_integral_type (tree type,\n \t= build_int_cst_wide (type,\n \t\t\t      (precision - HOST_BITS_PER_WIDE_INT > 0\n \t\t\t       ? 0\n-\t\t\t       : (HOST_WIDE_INT) (-1) << (precision - 1)),\n+\t\t\t       : HOST_WIDE_INT_M1U << (precision - 1)),\n \t\t\t      (((HOST_WIDE_INT) (-1)\n \t\t\t\t<< (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n \t\t\t\t    ? precision - HOST_BITS_PER_WIDE_INT - 1"}]}