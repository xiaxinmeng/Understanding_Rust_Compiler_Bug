{"sha": "0ab142b0273f6b8f76386e524702c969b7609afe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiMTQyYjAyNzNmNmI4Zjc2Mzg2ZTUyNDcwMmM5NjliNzYwOWFmZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-07-27T15:12:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-07-27T15:12:49Z"}, "message": "class.c (mark_primary_virtual_base): Don't adjust base offsets here.\n\ncp:\n\t* class.c (mark_primary_virtual_base): Don't adjust base\n\toffsets here.\n\t(dfs_unshared_virtual_bases): Adjust them here.\n\t(mark_primary_bases): Explain why we adjust at the end.\ntestsuite:\n\t* g++.dg/abi/vbase8-21.C: New test.\n\nFrom-SVN: r44425", "tree": {"sha": "9a1ca077f80ae1edb19df119baaea738f59a70d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1ca077f80ae1edb19df119baaea738f59a70d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab142b0273f6b8f76386e524702c969b7609afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab142b0273f6b8f76386e524702c969b7609afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab142b0273f6b8f76386e524702c969b7609afe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab142b0273f6b8f76386e524702c969b7609afe/comments", "author": null, "committer": null, "parents": [{"sha": "d60d223b176c68cf2559eed8244977f935b39be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60d223b176c68cf2559eed8244977f935b39be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60d223b176c68cf2559eed8244977f935b39be9"}], "stats": {"total": 117, "additions": 106, "deletions": 11}, "files": [{"sha": "6a02eb60a530fced037b366a9e870f6e02dd84e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ab142b0273f6b8f76386e524702c969b7609afe", "patch": "@@ -1,3 +1,10 @@\n+2001-07-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (mark_primary_virtual_base): Don't adjust base\n+\toffsets here.\n+\t(dfs_unshared_virtual_bases): Adjust them here.\n+\t(mark_primary_bases): Explain why we adjust at the end.\n+\n 2001-07-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (finish_struct_1): When copying the primary base's"}, {"sha": "7f2ea6017757260e2fe2b70fe5314eca665a3269", "filename": "gcc/cp/class.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0ab142b0273f6b8f76386e524702c969b7609afe", "patch": "@@ -1523,7 +1523,6 @@ mark_primary_virtual_base (binfo, base_binfo, type)\n      tree type;\n {\n   tree shared_binfo = binfo_for_vbase (BINFO_TYPE (base_binfo), type);\n-  tree delta;\n \n   if (BINFO_PRIMARY_P (shared_binfo))\n     {\n@@ -1542,12 +1541,6 @@ mark_primary_virtual_base (binfo, base_binfo, type)\n   if (base_binfo != shared_binfo)\n     force_canonical_binfo (base_binfo, shared_binfo, type, NULL);\n \n-  delta = size_diffop (BINFO_OFFSET (binfo), BINFO_OFFSET (base_binfo));\n-  if (!integer_zerop (delta))\n-    {\n-      propagate_binfo_offsets (base_binfo, delta, type);\n-      BINFO_OFFSET (base_binfo) = BINFO_OFFSET (binfo);\n-    }\n   return base_binfo;\n }\n \n@@ -1580,14 +1573,25 @@ static tree dfs_unshared_virtual_bases (binfo, data)\n       my_friendly_assert (unshared_base != binfo, 20010612);\n       BINFO_LOST_PRIMARY_P (binfo) = BINFO_LOST_PRIMARY_P (unshared_base);\n       if (!BINFO_LOST_PRIMARY_P (binfo))\n-\t      BINFO_PRIMARY_BASE_OF (get_primary_binfo (binfo)) = binfo;\n+\tBINFO_PRIMARY_BASE_OF (get_primary_binfo (binfo)) = binfo;\n     }\n   \n   if (binfo != TYPE_BINFO (t))\n     /* The vtable fields will have been copied when duplicating the\n        base binfos. That information is bogus, make sure we don't try\n        and use it. */\n     BINFO_VTABLE (binfo) = NULL_TREE;\n+\n+  /* If this is a virtual primary base, make sure its offset matches\n+     that which it is primary for. */\n+  if (BINFO_PRIMARY_P (binfo) && TREE_VIA_VIRTUAL (binfo) &&\n+      binfo_for_vbase (BINFO_TYPE (binfo), t) == binfo)\n+    {\n+      tree delta = size_diffop (BINFO_OFFSET (BINFO_PRIMARY_BASE_OF (binfo)),\n+\t\t\t\tBINFO_OFFSET (binfo));\n+      if (!integer_zerop (delta))\n+\tpropagate_binfo_offsets (binfo, delta, t);\n+    }\n   \n   BINFO_UNSHARED_MARKED (binfo) = 0;\n   return NULL;\n@@ -1621,9 +1625,14 @@ mark_primary_bases (type)\n       \n       BINFO_UNSHARED_MARKED (binfo) = 1;\n     }\n-  /* There could remain unshared morally virtual bases which were not visited\n-     in the inheritance graph walk. These bases will have lost their\n-     virtual primary base (should they have one). We must now find them. */\n+  /* There could remain unshared morally virtual bases which were not\n+     visited in the inheritance graph walk. These bases will have lost\n+     their virtual primary base (should they have one). We must now\n+     find them. Also we must fix up the BINFO_OFFSETs of primary\n+     virtual bases. We could not do that as we went along, as they\n+     were originally copied from the bases we inherited from by\n+     unshare_base_binfos. That may have decided differently about\n+     where a virtual primary base went.  */\n   dfs_walk (TYPE_BINFO (type), dfs_unshared_virtual_bases, NULL, type);\n }\n "}, {"sha": "87d3d799eb2f450e61af91a77d28cf4dd45d4edb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ab142b0273f6b8f76386e524702c969b7609afe", "patch": "@@ -1,3 +1,7 @@\n+2001-07-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/abi/vbase8-21.C: New test.\n+\n 2001-07-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/abi/vbase8-10.C: New test."}, {"sha": "0da644625899e8b2db6fd2f3b92f47036fde0383", "filename": "gcc/testsuite/g++.dg/abi/vbase8-21.C", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase8-21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab142b0273f6b8f76386e524702c969b7609afe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase8-21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase8-21.C?ref=0ab142b0273f6b8f76386e524702c969b7609afe", "patch": "@@ -0,0 +1,75 @@\n+// { dg-options -w }\n+// { dg-do run }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Jul 2001 <nathan@codesourcery.com>\n+\n+// Origin stefan@space.twc.de\n+// Bug 3145 case 10. Horribly complicated class hierarchy\n+\n+class C0\n+{};\n+class C1\n+ :  virtual public C0\n+{};\n+class C2\n+ :  virtual public C1\n+ ,  virtual public C0\n+{};\n+class C3\n+ :  virtual public C2\n+ ,  virtual public C1\n+{};\n+class C4\n+ :  virtual public C2\n+ ,  public C0\n+ ,  public C1\n+{};\n+class C5\n+ :  virtual public C0\n+ ,  public C2\n+ ,  virtual public C1\n+ ,  virtual public C3\n+ ,  virtual public C4\n+{};\n+class C6\n+ :  virtual public C1\n+ ,  virtual public C3\n+ ,  public C0\n+ ,  public C2\n+ ,  virtual public C4\n+{};\n+class C7\n+ :  virtual public C5\n+ ,  public C2\n+ ,  public C6\n+ ,  virtual public C0\n+ ,  public C3\n+{};\n+class C8\n+ :  virtual public C5\n+ ,  public C7\n+ ,  virtual public C0\n+ ,  virtual public C2\n+ ,  virtual public C6\n+{};\n+class C9\n+ :  virtual public C2\n+ ,  virtual public C4\n+ ,  public C1\n+ ,  virtual public C0\n+ ,  public C7\n+ ,  public C5\n+{};\n+main() {\n+  C0 c0;\n+  C1 c1;\n+  C2 c2;\n+  C3 c3;\n+  C4 c4;\n+  C5 c5;\n+  C6 c6;\n+  C7 c7;\n+  C8 c8;\n+  C9 c9;\n+}"}]}