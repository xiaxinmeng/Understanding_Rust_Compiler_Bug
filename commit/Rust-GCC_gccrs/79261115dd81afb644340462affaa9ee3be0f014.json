{"sha": "79261115dd81afb644340462affaa9ee3be0f014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkyNjExMTVkZDgxYWZiNjQ0MzQwNDYyYWZmYWE5ZWUzYmUwZjAxNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-06-13T15:56:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-06-13T15:56:55Z"}, "message": "sfp-machine.h (__sfp_handle_exceptions): New function declaration.\n\n\t* config/ia64/sfp-machine.h (__sfp_handle_exceptions): New\n\tfunction declaration.\n\t(FP_HANDLE_EXCEPTIONS): Use __sfp_handle_exceptions.\n\t(FP_RND_MASK): New.\n\t* config/ia64/sfp-exceptions.c: New.\n\t* config/ia64/t-softfp (LIB2ADD): Add sfp-exceptions.c.\n\nFrom-SVN: r188520", "tree": {"sha": "43221ca140e992658f7ac0f2dfdc3c7022e6d7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43221ca140e992658f7ac0f2dfdc3c7022e6d7e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79261115dd81afb644340462affaa9ee3be0f014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79261115dd81afb644340462affaa9ee3be0f014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79261115dd81afb644340462affaa9ee3be0f014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79261115dd81afb644340462affaa9ee3be0f014/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb5c97d42c4985f83fef5f45eb207ca23c26bd8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5c97d42c4985f83fef5f45eb207ca23c26bd8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5c97d42c4985f83fef5f45eb207ca23c26bd8c"}], "stats": {"total": 129, "additions": 85, "deletions": 44}, "files": [{"sha": "7f89da395c0b7af149302dde0dff7d37c2c6f5ac", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=79261115dd81afb644340462affaa9ee3be0f014", "patch": "@@ -1,3 +1,12 @@\n+2012-06-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+       * config/ia64/sfp-machine.h (__sfp_handle_exceptions): New\n+       function declaration.\n+       (FP_HANDLE_EXCEPTIONS): Use __sfp_handle_exceptions.\n+       (FP_RND_MASK): New.\n+       * config/ia64/sfp-exceptions.c: New.\n+       * config/ia64/t-softfp (LIB2ADD): Add sfp-exceptions.c.\n+\n 2012-06-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/32/sfp-machine.h (_FP_NANSIGN_S, _FP_NANSIGN_D,"}, {"sha": "58113c749d0504af5620a9d4ccee7decde653abe", "filename": "libgcc/config/ia64/sfp-exceptions.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2Fconfig%2Fia64%2Fsfp-exceptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2Fconfig%2Fia64%2Fsfp-exceptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fsfp-exceptions.c?ref=79261115dd81afb644340462affaa9ee3be0f014", "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (C) 2012 Free Software Foundation, Inc.\n+ *\n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 3, or (at your option) any\n+ * later version.\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * Under Section 7 of GPL version 3, you are granted additional\n+ * permissions described in the GCC Runtime Library Exception, version\n+ * 3.1, as published by the Free Software Foundation.\n+ *\n+ * You should have received a copy of the GNU General Public License and\n+ * a copy of the GCC Runtime Library Exception along with this program;\n+ * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+ * <http://www.gnu.org/licenses/>.\n+ */\n+\n+#include \"sfp-machine.h\"\n+\n+void\n+__sfp_handle_exceptions (int _fex)\n+{\n+  double d;\n+\n+  if (_fex & FP_EX_INVALID)\n+    {\n+      asm volatile (\"frcpa.s0 %0, p1 = f0, f0\" : \"=f\" (d) : : \"p1\");\n+    }\n+  if (_fex & FP_EX_DIVZERO)\n+    {\n+      asm volatile (\"frcpa.s0 %0, p1 = f1, f0\" : \"=f\" (d) : : \"p1\");\n+    }\n+  if (_fex & FP_EX_OVERFLOW)\n+    {\n+      d = __DBL_MAX__;\n+      asm volatile (\"fadd.d.s0 %0 = %0, %0\" : \"+f\" (d));\n+    }\n+  if (_fex & FP_EX_UNDERFLOW)\n+    {\n+      d = __DBL_MIN__;\n+      asm volatile (\"fnma.d.s0 %0 = %0, %0, f0\" : \"+f\" (d));\n+    }\n+  if (_fex & FP_EX_INEXACT)\n+    {\n+      d = __DBL_MAX__;\n+      asm volatile (\"fsub.d.s0 %0 = %0, f1\" : \"+f\" (d));\n+    }\n+}"}, {"sha": "e86b7e3ae471ab56cccaa58b64264909e7ba73bd", "filename": "libgcc/config/ia64/sfp-machine.h", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2Fconfig%2Fia64%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2Fconfig%2Fia64%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fsfp-machine.h?ref=79261115dd81afb644340462affaa9ee3be0f014", "patch": "@@ -13,7 +13,7 @@ typedef unsigned int UTItype __attribute__ ((mode (TI)));\n typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define CMPtype __gcc_CMPtype\n \n-#define _FP_MUL_MEAT_Q(R,X,Y)                           \\\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n   _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n \n #define _FP_DIV_MEAT_Q(R,X,Y)   _FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n@@ -22,13 +22,14 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define _FP_NANFRAC_D\t\t_FP_QNANBIT_D\n #define _FP_NANFRAC_E\t\t_FP_QNANBIT_E, 0\n #define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0\n+\n+#define _FP_KEEPNANFRACP\t1\n+\n #define _FP_NANSIGN_S\t\t1\n #define _FP_NANSIGN_D\t\t1\n #define _FP_NANSIGN_E\t\t1\n #define _FP_NANSIGN_Q\t\t1\n \n-#define _FP_KEEPNANFRACP 1\n-\n /* Here is something Intel misdesigned: the specs don't define\n    the case where we have two NaNs with same mantissas, but\n    different sign. Different operations pick up different NaNs.  */\n@@ -38,12 +39,12 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n \t|| (_FP_FRAC_EQ_##wc(X,Y) && (OP == '+' || OP == '*')))\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tR##_s = X##_s;\t\t\t\t\t\t\\\n-        _FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tR##_s = Y##_s;\t\t\t\t\t\t\\\n-        _FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n   } while (0)\n@@ -55,55 +56,30 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #define FP_EX_UNDERFLOW\t\t0x10\n #define FP_EX_INEXACT\t\t0x20\n \n-#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    double tmp, dummy;\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\ttmp = 0.0;\t\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"frcpa.s0 %0,p1=f0,f0\"\t\t\t\\\n-\t\t\t      : \"=f\" (tmp) : : \"p1\" );\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"frcpa.s0 %0,p1=f1,f0\"\t\t\t\\\n-\t\t\t      : \"=f\" (tmp) : : \"p1\" );\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tdummy = __DBL_MAX__;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fadd.d.s0 %0=%1,%1\"\t\t\t\\\n-\t\t\t      : \"=f\" (dummy) : \"0\" (dummy));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tdummy = __DBL_MIN__;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fnma.d.s0 %0=%1,%1,f0\"\t\t\t\\\n-\t\t\t      : \"=f\" (tmp) : \"f\" (dummy));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tdummy = __DBL_MAX__;\t\t\t\t\t\t\\\n-\t__asm__ __volatile__ (\"fsub.d.s0 %0=%1,f1\"\t\t\t\\\n-\t\t\t      : \"=f\" (dummy) : \"0\" (dummy));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+void __sfp_handle_exceptions (int);\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    if (_fex)\t\t\t\t\t\\\n+      __sfp_handle_exceptions (_fex);\t\t\\\n+  } while (0);\n \n #define FP_RND_NEAREST\t\t0\n #define FP_RND_ZERO\t\t0xc00L\n #define FP_RND_PINF\t\t0x800L\n #define FP_RND_MINF\t\t0x400L\n \n+#define FP_RND_MASK\t\t0xc00L\n+\n #define _FP_DECL_EX \\\n-  unsigned long int _fpsr __attribute__ ((unused)) = FP_RND_NEAREST\n+  unsigned long int _fcw __attribute__ ((unused)) = FP_RND_NEAREST\n \n-#define FP_INIT_ROUNDMODE\t\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    __asm__ __volatile__ (\"mov.m %0=ar.fpsr\"\t\\\n-\t\t\t  : \"=r\" (_fpsr));\t\\\n+#define FP_INIT_ROUNDMODE\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    __asm__ __volatile__ (\"mov.m %0 = ar.fpsr\" : \"=r\" (_fcw));\t\\\n   } while (0)\n \n-#define FP_ROUNDMODE\t\t(_fpsr & 0xc00L)\n+#define FP_ROUNDMODE\t\t(_fcw & FP_RND_MASK)\n \n #define\t__LITTLE_ENDIAN\t1234\n #define\t__BIG_ENDIAN\t4321"}, {"sha": "0ac35e72da776691b17285ae08772baf398cae6a", "filename": "libgcc/config/ia64/t-softfp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2Fconfig%2Fia64%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79261115dd81afb644340462affaa9ee3be0f014/libgcc%2Fconfig%2Fia64%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-softfp?ref=79261115dd81afb644340462affaa9ee3be0f014", "patch": "@@ -1,2 +1,4 @@\n # Provide fallbacks for __builtin_copysignq and __builtin_fabsq.\n LIB2ADD += $(srcdir)/config/ia64/tf-signs.c\n+\n+LIB2ADD += $(srcdir)/config/ia64/sfp-exceptions.c"}]}