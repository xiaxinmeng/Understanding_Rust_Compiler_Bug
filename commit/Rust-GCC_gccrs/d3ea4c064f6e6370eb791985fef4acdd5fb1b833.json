{"sha": "d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlYTRjMDY0ZjZlNjM3MGViNzkxOTg1ZmVmNGFjZGQ1ZmIxYjgzMw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-06-03T19:23:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-06-03T19:23:20Z"}, "message": "re PR c++/66130 (\"invalid use of non-static member function\" message could be clearer)\n\n2015-06-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/66130\n\t* typeck.c (invalid_nonstatic_memfn_p): Add location_t parameter and\n\tuse it in the diagnostic.\n\t(decay_conversion): Adjust call.\n\t* semantics.c (finish_decltype_type): Likewise.\n\t* call.c (resolve_args, build_new_op_1,\n\tperform_implicit_conversion_flags): Adjust calls.\n\t* cvt.c (ocp_convert, convert_to_void): Likewise.\n\t* cp-tree.h (invalid_nonstatic_memfn_p): Update declaration.\n\n2015-06-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/66130\n\t* g++.dg/other/pr66130.C: New.\n\t* g++.dg/cpp0x/pr66130.C: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r224099", "tree": {"sha": "8c52823d6a36b1409914c63e7e541f67d8c6a56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c52823d6a36b1409914c63e7e541f67d8c6a56d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/comments", "author": null, "committer": null, "parents": [{"sha": "4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4753e009664aa5d4cdf0ce86a03224f5bc1f9d7b"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "39888b970b0ee1f6c884c8f78a225dc101562286", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -1,3 +1,16 @@\n+2015-06-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/66130\n+\t* typeck.c (invalid_nonstatic_memfn_p): Add location_t parameter and\n+\tuse it in the diagnostic.\n+\t(decay_conversion): Adjust call.\n+\t* semantics.c (finish_decltype_type): Likewise.\n+\t* call.c (resolve_args, build_new_op_1,\n+\tperform_implicit_conversion_flags): Adjust calls.\n+\t* cvt.c (ocp_convert, convert_to_void): Likewise.\n+\t* cp-tree.h (invalid_nonstatic_memfn_p): Update declaration.\n+\n 2015-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (check_tag_decl): Use declspecs->locations as locations in"}, {"sha": "71f7e06013c2fa3f474df8556d801d2f651c3864", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -3941,7 +3941,7 @@ resolve_args (vec<tree, va_gc> *args, tsubst_flags_t complain)\n \t    error (\"invalid use of void expression\");\n \t  return NULL;\n \t}\n-      else if (invalid_nonstatic_memfn_p (arg, complain))\n+      else if (invalid_nonstatic_memfn_p (input_location, arg, complain))\n \treturn NULL;\n     }\n   return args;\n@@ -5542,9 +5542,9 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n \t\t/* If one of the arguments of the operator represents\n \t\t   an invalid use of member function pointer, try to report\n \t\t   a meaningful error ...  */\n-\t\tif (invalid_nonstatic_memfn_p (arg1, tf_error)\n-\t\t    || invalid_nonstatic_memfn_p (arg2, tf_error)\n-\t\t    || invalid_nonstatic_memfn_p (arg3, tf_error))\n+\t      if (invalid_nonstatic_memfn_p (loc, arg1, tf_error)\n+\t\t    || invalid_nonstatic_memfn_p (loc, arg2, tf_error)\n+\t\t    || invalid_nonstatic_memfn_p (loc, arg3, tf_error))\n \t\t  /* We displayed the error message.  */;\n \t\telse\n \t\t  {\n@@ -9445,7 +9445,7 @@ perform_implicit_conversion_flags (tree type, tree expr,\n \t     Call instantiate_type to get good error messages.  */\n \t  if (TREE_TYPE (expr) == unknown_type_node)\n \t    instantiate_type (type, expr, complain);\n-\t  else if (invalid_nonstatic_memfn_p (expr, complain))\n+\t  else if (invalid_nonstatic_memfn_p (loc, expr, complain))\n \t    /* We gave an error.  */;\n \t  else\n \t    error_at (loc, \"could not convert %qE from %qT to %qT\", expr,"}, {"sha": "76be7cca6f12656b3d3b72436006c7839f32729f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -6281,7 +6281,8 @@ extern tree build_address\t\t\t(tree);\n extern tree build_nop\t\t\t\t(tree, tree);\n extern tree non_reference\t\t\t(tree);\n extern tree lookup_anon_field\t\t\t(tree, tree);\n-extern bool invalid_nonstatic_memfn_p\t\t(tree, tsubst_flags_t);\n+extern bool invalid_nonstatic_memfn_p\t\t(location_t, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree convert_member_func_to_ptr\t\t(tree, tree, tsubst_flags_t);\n extern tree convert_ptrmem\t\t\t(tree, tree, bool, bool,\n \t\t\t\t\t\t tsubst_flags_t);"}, {"sha": "ae0326eaba2aef4db1639173ac79ce585edb4322", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -902,7 +902,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n     {\n       /* If the conversion failed and expr was an invalid use of pointer to\n \t member function, try to report a meaningful error.  */\n-      if (invalid_nonstatic_memfn_p (expr, complain))\n+      if (invalid_nonstatic_memfn_p (loc, expr, complain))\n \t/* We displayed the error message.  */;\n       else\n \terror_at (loc, \"conversion from %qT to non-scalar type %qT requested\",\n@@ -960,7 +960,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \n   if (!TREE_TYPE (expr))\n     return expr;\n-  if (invalid_nonstatic_memfn_p (expr, complain))\n+  if (invalid_nonstatic_memfn_p (loc, expr, complain))\n     return error_mark_node;\n   if (TREE_CODE (expr) == PSEUDO_DTOR_EXPR)\n     {"}, {"sha": "b1c280f67481ad6e98a9fbf02893098a9d1b25d1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -7237,7 +7237,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \n   expr = resolve_nondeduced_context (expr);\n \n-  if (invalid_nonstatic_memfn_p (expr, complain))\n+  if (invalid_nonstatic_memfn_p (input_location, expr, complain))\n     return error_mark_node;\n \n   if (type_unknown_p (expr))"}, {"sha": "4da6275f0df007b7f2002dabc5202a0b4d4f598f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -1810,7 +1810,7 @@ cxx_alignas_expr (tree e)\n    violates these rules.  */\n \n bool\n-invalid_nonstatic_memfn_p (tree expr, tsubst_flags_t complain)\n+invalid_nonstatic_memfn_p (location_t loc, tree expr, tsubst_flags_t complain)\n {\n   if (expr == NULL_TREE)\n     return false;\n@@ -1822,7 +1822,17 @@ invalid_nonstatic_memfn_p (tree expr, tsubst_flags_t complain)\n   if (DECL_NONSTATIC_MEMBER_FUNCTION_P (expr))\n     {\n       if (complain & tf_error)\n-        error (\"invalid use of non-static member function\");\n+\t{\n+\t  if (DECL_P (expr))\n+\t    {\n+\t      error_at (loc, \"invalid use of non-static member function %qD\",\n+\t\t\texpr);\n+\t      inform (DECL_SOURCE_LOCATION (expr), \"declared here\");\n+\t    }\n+\t  else\n+\t    error_at (loc, \"invalid use of non-static member function of \"\n+\t\t      \"type %qT\", TREE_TYPE (expr));\n+\t}\n       return true;\n     }\n   return false;\n@@ -1946,7 +1956,7 @@ decay_conversion (tree exp, tsubst_flags_t complain)\n \terror_at (loc, \"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n-  if (invalid_nonstatic_memfn_p (exp, complain))\n+  if (invalid_nonstatic_memfn_p (loc, exp, complain))\n     return error_mark_node;\n   if (code == FUNCTION_TYPE || is_overloaded_fn (exp))\n     return cp_build_addr_expr (exp, complain);"}, {"sha": "a74be77df88b4d59d6589fb78a425c0eb56a2bde", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/66130\n+\t* g++.dg/other/pr66130.C: New.\n+\t* g++.dg/cpp0x/pr66130.C: Likewise.\n+\n 2015-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/decl-loc1.C: New."}, {"sha": "5d4a72e1a7bf81e41e8ce64d09ef5de1a11a99d1", "filename": "gcc/testsuite/g++.dg/cpp0x/pr66130.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66130.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66130.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr66130.C?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/66130\n+// { dg-do compile { target c++11 } }\n+\n+struct Local\n+{\n+  void f();\n+};\n+\n+Local *l;\n+void (Local::*ptr)();\n+decltype((l->*ptr)) i;  // { dg-error \"member function of type 'void \\\\(Local::\\\\)\\\\(\\\\)'\" }"}, {"sha": "b109b9300ff04934498902a1d811bb2f8b15b3f7", "filename": "gcc/testsuite/g++.dg/other/pr66130.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr66130.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ea4c064f6e6370eb791985fef4acdd5fb1b833/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr66130.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr66130.C?ref=d3ea4c064f6e6370eb791985fef4acdd5fb1b833", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/66130\n+\n+struct X {\n+  X(void *);\n+  void m();  // { dg-message \"declared here\" }\n+};\n+\n+struct Y : public X{\n+  Y(void*a, void *b) : X(m), mb(b) { }  // { dg-error \"member function 'void X::m\\\\(\\\\)'\" }\n+  void *mb;\n+};"}]}