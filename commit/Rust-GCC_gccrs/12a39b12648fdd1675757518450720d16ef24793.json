{"sha": "12a39b12648fdd1675757518450720d16ef24793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhMzliMTI2NDhmZGQxNjc1NzU3NTE4NDUwNzIwZDE2ZWYyNDc5Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-09-23T21:03:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-09-23T21:03:53Z"}, "message": "toplev.c (documented_lang_options): Add -fshort-wchar.\n\n\t* toplev.c (documented_lang_options): Add -fshort-wchar.\n\t* c-decl.c (c_decode_option): Likewise.\n\t(init_decl_processing): If -fshort-wchar, use 'short unsigned int'\n\tfor wchar_t.\n\t* c-common.c, c-lex.c: Get WCHAR_TYPE_SIZE from wchar_type_node.\n\t* gcc.c (default_compilers): If -fshort-wchar,\n\toverride __WCHAR_TYPE__.\n\t* tm.texi (C Dialect Options): Add -fshort-wchar.\n\nFrom-SVN: r29638", "tree": {"sha": "f1348bbe949f8cba90abd610eefdbe630bdaa2c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1348bbe949f8cba90abd610eefdbe630bdaa2c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a39b12648fdd1675757518450720d16ef24793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a39b12648fdd1675757518450720d16ef24793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a39b12648fdd1675757518450720d16ef24793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a39b12648fdd1675757518450720d16ef24793/comments", "author": null, "committer": null, "parents": [{"sha": "e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e689ae67255aca55fddb4b01b0b9ded6d3f151ea"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "aea059ce5028a2e01c56513c62bf421eec6a28cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a39b12648fdd1675757518450720d16ef24793/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a39b12648fdd1675757518450720d16ef24793/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12a39b12648fdd1675757518450720d16ef24793", "patch": "@@ -1,5 +1,14 @@\n Thu Sep 23 13:40:02 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* toplev.c (documented_lang_options): Add -fshort-wchar.\n+\t* c-decl.c (c_decode_option): Likewise.\n+\t(init_decl_processing): If -fshort-wchar, use 'short unsigned int'\n+\tfor wchar_t.\n+\t* c-common.c, c-lex.c: Get WCHAR_TYPE_SIZE from wchar_type_node.\n+\t* gcc.c (default_compilers): If -fshort-wchar, \n+\toverride __WCHAR_TYPE__.\n+\t* tm.texi (C Dialect Options): Add -fshort-wchar.\n+\n \t* dwarf2out.c (output_aranges): Use DW_AT_location to find the\n \tsymbol for a variable.\n "}, {"sha": "2fa89e6fc3f04e48fb7237a52baca64e012f3c0f", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=12a39b12648fdd1675757518450720d16ef24793", "patch": "@@ -38,13 +38,8 @@ cpp_options parse_options;\n enum cpp_token cpp_token;\n #endif\n \n-#ifndef WCHAR_TYPE_SIZE\n-#ifdef INT_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n-#else\n-#define WCHAR_TYPE_SIZE\tBITS_PER_WORD\n-#endif\n-#endif\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE TYPE_PRECISION (wchar_type_node)\n \n /* The following symbols are subsumed in the c_global_trees array, and\n    listed here individually for documentation purposes. "}, {"sha": "b2f32c6b9368b5d3984cc62d97539c47dc3f3fe5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=12a39b12648fdd1675757518450720d16ef24793", "patch": "@@ -304,6 +304,10 @@ int flag_cond_mismatch;\n \n int flag_short_double;\n \n+/* Nonzero means give `wchar_t' the same size as `short'.  */\n+\n+int flag_short_wchar;\n+\n /* Nonzero means don't recognize the keyword `asm'.  */\n \n int flag_no_asm;\n@@ -580,6 +584,10 @@ c_decode_option (argc, argv)\n     flag_short_enums = 1;\n   else if (!strcmp (p, \"-fno-short-enums\"))\n     flag_short_enums = 0;\n+  else if (!strcmp (p, \"-fshort-wchar\"))\n+    flag_short_wchar = 1;\n+  else if (!strcmp (p, \"-fno-short-wchar\"))\n+    flag_short_wchar = 0;\n   else if (!strcmp (p, \"-fcond-mismatch\"))\n     flag_cond_mismatch = 1;\n   else if (!strcmp (p, \"-fno-cond-mismatch\"))\n@@ -2984,8 +2992,10 @@ init_decl_processing ()\n   pushdecl (build_decl (TYPE_DECL,\n \t\t\tridpointers[(int) RID_VOID], void_type_node));\n \n-  wchar_type_node\n-    = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WCHAR_TYPE)));\n+  wchar_type_node = get_identifier (flag_short_wchar\n+\t\t\t\t    ? \"short unsigned int\"\n+\t\t\t\t    : WCHAR_TYPE);\n+  wchar_type_node = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (wchar_type_node));\n   wchar_type_size = TYPE_PRECISION (wchar_type_node);\n   signed_wchar_type_node = signed_type (wchar_type_node);\n   unsigned_wchar_type_node = unsigned_type (wchar_type_node);"}, {"sha": "55f9acb797acf34245185f67fea5fac7eb587016", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=12a39b12648fdd1675757518450720d16ef24793", "patch": "@@ -135,13 +135,8 @@ extern int yydebug;\n /* File used for outputting assembler code.  */\n extern FILE *asm_out_file;\n \n-#ifndef WCHAR_TYPE_SIZE\n-#ifdef INT_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE INT_TYPE_SIZE\n-#else\n-#define WCHAR_TYPE_SIZE\tBITS_PER_WORD\n-#endif\n-#endif\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE TYPE_PRECISION (wchar_type_node)\n \n /* Number of bytes in a wide character.  */\n #define WCHAR_BYTES (WCHAR_TYPE_SIZE / BITS_PER_UNIT)"}, {"sha": "343811f3c872a8aa3c1844a0ee50b9fbd24e8c75", "filename": "gcc/gcc.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a39b12648fdd1675757518450720d16ef24793/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=12a39b12648fdd1675757518450720d16ef24793", "patch": "@@ -610,6 +610,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n+\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{fleading-underscore} %{fno-leading-underscore}\\\n@@ -624,6 +625,8 @@ static struct compiler default_compilers[] =\n \t\t  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n                   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t\t  %{ffast-math:-D__FAST_MATH__}\\\n+\t\t  %{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n+\t\t  %{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n                   %{H} %C %{D*} %{U*} %{i*} %Z\\\n                   %{ftraditional:-traditional}\\\n                   %{traditional-cpp:-traditional}\\\n@@ -646,6 +649,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n+\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{fleading-underscore} %{fno-leading-underscore}\\\n@@ -674,6 +678,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n+\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{fleading-underscore} %{fno-leading-underscore}\\\n@@ -691,6 +696,8 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!std=*:%p}%{std=gnu*:%p} %P} %{trigraphs}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n+\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n+\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{fleading-underscore} %{fno-leading-underscore}\\\n@@ -720,6 +727,7 @@ static struct compiler default_compilers[] =\n         -$ %{!undef:%p %P} -D__ASSEMBLER__ \\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n \t%{ffast-math:-D__FAST_MATH__}\\\n+\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n         %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{fleading-underscore} %{fno-leading-underscore}\\"}, {"sha": "a126de002b73a0fbc0c076511fea5d8694f36c0d", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a39b12648fdd1675757518450720d16ef24793/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a39b12648fdd1675757518450720d16ef24793/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=12a39b12648fdd1675757518450720d16ef24793", "patch": "@@ -1043,6 +1043,8 @@ documented_lang_options[] =\n   { \"-fno-short-double\", \"\" },\n   { \"-fshort-enums\", \"Use the smallest fitting integer to hold enums\"},\n   { \"-fno-short-enums\", \"\" },\n+  { \"-fshort-wchar\", \"Override the underlying type for wchar_t to `unsigned short'\" },\n+  { \"-fno-short-wchar\", \"\" },\n \n   { \"-Wall\", \"Enable most warning messages\" },\n   { \"-Wbad-function-cast\","}]}