{"sha": "19199a6f2b0f4ce4b100856c78706d56a16b1956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxOTlhNmYyYjBmNGNlNGIxMDA4NTZjNzg3MDZkNTZhMTZiMTk1Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-30T14:43:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-30T14:43:36Z"}, "message": "aarch64: PR target/99822 Don't allow zero register in first operand of SUBS/ADDS-immediate\n\nIn this PR we end up generating an invalid instruction:\nadds x1,xzr,#2\n\nbecause the pattern accepts zero as an operand in the comparison, but the instruction doesn't.\nFix it by adjusting the predicate and constraints.\n\ngcc/ChangeLog:\n\n\tPR target/99822\n\t* config/aarch64/aarch64.md (sub<mode>3_compare1_imm): Do not allow zero\n\tin operand 1.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99822\n\t* gcc.c-torture/compile/pr99822.c: New test.", "tree": {"sha": "f2d8b40b2c33cc40cd67c9bac772184ed94315b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d8b40b2c33cc40cd67c9bac772184ed94315b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19199a6f2b0f4ce4b100856c78706d56a16b1956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19199a6f2b0f4ce4b100856c78706d56a16b1956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19199a6f2b0f4ce4b100856c78706d56a16b1956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19199a6f2b0f4ce4b100856c78706d56a16b1956/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64b91568f3ac8f152c6c617b4fcc6b51da10ac4"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "b139c0848193b7efd0bef5375794e0cb8af46c89", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19199a6f2b0f4ce4b100856c78706d56a16b1956/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19199a6f2b0f4ce4b100856c78706d56a16b1956/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=19199a6f2b0f4ce4b100856c78706d56a16b1956", "patch": "@@ -3034,7 +3034,7 @@\n (define_insn \"sub<mode>3_compare1_imm\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n-\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rkZ,rkZ\")\n+\t  (match_operand:GPI 1 \"register_operand\" \"rk,rk\")\n \t  (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\")))\n    (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n \t(plus:GPI"}, {"sha": "0660784bf896c47af306dc85e6d4bfbd76dab2b2", "filename": "gcc/testsuite/gcc.c-torture/compile/pr99822.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19199a6f2b0f4ce4b100856c78706d56a16b1956/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99822.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19199a6f2b0f4ce4b100856c78706d56a16b1956/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99822.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr99822.c?ref=19199a6f2b0f4ce4b100856c78706d56a16b1956", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/99822 */\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target int128 } */\n+\n+int zt, bm, p5 = 1;\n+\n+void __attribute__ ((cold))\n+l2 (unsigned long int hz)\n+{\n+  __int128 d9 = 0;\n+  unsigned long int *mg = hz ? &hz : (unsigned long int *) &d9;\n+\n+  while (d9 < 1)\n+    {\n+      bm = bm > d9;\n+      bm = bm == (d9 = bm || hz);\n+\n+      hz = 0x197000000;\n+      d9 = hz * hz;\n+\n+      while (p5 < 1)\n+        {\n+          bm = ((hz = 3) ? zt : 0) > 0x1001;\n+          if (bm != 0)\n+            {\n+              __int128 *nd = (__int128 *) bm;\n+\n+              *nd /= 3;\n+            }\n+\n+          *mg = 0x1001;\n+          p5 -= *mg;\n+        }\n+\n+      for (zt = 0; zt >= 0; zt += 2)\n+        d9 = 0;\n+\n+      d9 += 2;\n+    }\n+}\n+"}]}