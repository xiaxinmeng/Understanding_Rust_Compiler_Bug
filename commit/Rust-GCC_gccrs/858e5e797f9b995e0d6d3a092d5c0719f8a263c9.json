{"sha": "858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4ZTVlNzk3ZjliOTk1ZTBkNmQzYTA5MmQ1YzA3MTlmOGEyNjNjOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-01T15:02:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-01T15:02:16Z"}, "message": "i386.c (ix86_builtin_type): Add V8HI_FTYPE_V8HI_V8HI_COUNT...\n\n2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_builtin_type): Add\n\tV8HI_FTYPE_V8HI_V8HI_COUNT, V8HI_FTYPE_V8HI_SI_COUNT,\n\tV4SI_FTYPE_V4SI_V4SI_COUNT, V4SI_FTYPE_V4SI_SI_COUNT,\n\tV4HI_FTYPE_V4HI_V4HI_COUNT, V4HI_FTYPE_V4HI_SI_COUNT,\n\tV2DI_FTYPE_V2DI_V2DI_COUNT, V2DI_FTYPE_V2DI_SI_COUNT,\n\tV2SI_FTYPE_V2SI_V2SI_COUNT, V2SI_FTYPE_V2SI_SI_COUNT,\n\tV1DI_FTYPE_V1DI_V1DI_COUNT, V1DI_FTYPE_V1DI_SI_COUNT,\n\tV8HI_FTYPE_V8HI_INT, V4SI_FTYPE_V4SI_INT, V4HI_FTYPE_V4HI_INT,\n\tV2DI2TI_FTYPE_V2DI2TI_INT, V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT\n\tand DI_FTYPE_DI_DI_INT.\n\t(bdesc_args): Add MMX/SSE shift, shuffle and palignr builtins.\n\t(ix86_init_mmx_sse_builtins): Updated.\n\t(ix86_expand_args_builtin): Likewise.\n\t(ix86_expand_builtin): Likewise.\n\t(ix86_expand_binop_imm_builtin): Removed.\n\n\t* doc/extend.texi: Correct __builtin_ia32_palignr128.\n\nFrom-SVN: r134853", "tree": {"sha": "f9f4dab1e031a31976e8141dd4aee9efbecc8313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9f4dab1e031a31976e8141dd4aee9efbecc8313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "035052e6511187c5fac9fc114b55251cd83f6438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/035052e6511187c5fac9fc114b55251cd83f6438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/035052e6511187c5fac9fc114b55251cd83f6438"}], "stats": {"total": 510, "additions": 223, "deletions": 287}, "files": [{"sha": "4691edd2630cade5c51d6bac0b850742d34ee1ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "patch": "@@ -1,3 +1,23 @@\n+2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_builtin_type): Add\n+\tV8HI_FTYPE_V8HI_V8HI_COUNT, V8HI_FTYPE_V8HI_SI_COUNT,\n+\tV4SI_FTYPE_V4SI_V4SI_COUNT, V4SI_FTYPE_V4SI_SI_COUNT,\n+\tV4HI_FTYPE_V4HI_V4HI_COUNT, V4HI_FTYPE_V4HI_SI_COUNT,\n+\tV2DI_FTYPE_V2DI_V2DI_COUNT, V2DI_FTYPE_V2DI_SI_COUNT,\n+\tV2SI_FTYPE_V2SI_V2SI_COUNT, V2SI_FTYPE_V2SI_SI_COUNT,\n+\tV1DI_FTYPE_V1DI_V1DI_COUNT, V1DI_FTYPE_V1DI_SI_COUNT,\n+\tV8HI_FTYPE_V8HI_INT, V4SI_FTYPE_V4SI_INT, V4HI_FTYPE_V4HI_INT,\n+\tV2DI2TI_FTYPE_V2DI2TI_INT, V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT\n+\tand DI_FTYPE_DI_DI_INT.\n+\t(bdesc_args): Add MMX/SSE shift, shuffle and palignr builtins.\n+\t(ix86_init_mmx_sse_builtins): Updated.\n+\t(ix86_expand_args_builtin): Likewise.\n+\t(ix86_expand_builtin): Likewise.\n+\t(ix86_expand_binop_imm_builtin): Removed.\n+\n+\t* doc/extend.texi: Correct __builtin_ia32_palignr128.\n+\n 2008-04-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/32921"}, {"sha": "7c914791cf57397c70bc107186237b6dda8d2b89", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 202, "deletions": 286, "changes": 488, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "patch": "@@ -18037,39 +18037,55 @@ enum ix86_builtin_type\n   V8QI_FTYPE_V8QI_V8QI,\n   V8QI_FTYPE_V4HI_V4HI,\n   V8HI_FTYPE_V8HI_V8HI,\n+  V8HI_FTYPE_V8HI_V8HI_COUNT,\n   V8HI_FTYPE_V16QI_V16QI,\n   V8HI_FTYPE_V4SI_V4SI,\n+  V8HI_FTYPE_V8HI_SI_COUNT,\n   V4SI_FTYPE_V4SI_V4SI,\n+  V4SI_FTYPE_V4SI_V4SI_COUNT,\n   V4SI_FTYPE_V8HI_V8HI,\n   V4SI_FTYPE_V4SF_V4SF,\n   V4SI_FTYPE_V2DF_V2DF,\n+  V4SI_FTYPE_V4SI_SI_COUNT,\n   V4HI_FTYPE_V4HI_V4HI,\n+  V4HI_FTYPE_V4HI_V4HI_COUNT,\n   V4HI_FTYPE_V8QI_V8QI,\n   V4HI_FTYPE_V2SI_V2SI,\n+  V4HI_FTYPE_V4HI_SI_COUNT,\n   V4SF_FTYPE_V4SF_V4SF,\n   V4SF_FTYPE_V4SF_V4SF_SWAP,\n   V4SF_FTYPE_V4SF_V2SI,\n   V4SF_FTYPE_V4SF_V2DF,\n   V4SF_FTYPE_V4SF_DI,\n   V4SF_FTYPE_V4SF_SI,\n   V2DI_FTYPE_V2DI_V2DI,\n+  V2DI_FTYPE_V2DI_V2DI_COUNT,\n   V2DI_FTYPE_V16QI_V16QI,\n   V2DI_FTYPE_V4SI_V4SI,\n   V2DI_FTYPE_V2DF_V2DF,\n+  V2DI_FTYPE_V2DI_SI_COUNT,\n   V2SI_FTYPE_V2SI_V2SI,\n+  V2SI_FTYPE_V2SI_V2SI_COUNT,\n   V2SI_FTYPE_V4HI_V4HI,\n   V2SI_FTYPE_V2SF_V2SF,\n+  V2SI_FTYPE_V2SI_SI_COUNT,\n   V2DF_FTYPE_V2DF_V2DF,\n   V2DF_FTYPE_V2DF_V2DF_SWAP,\n   V2DF_FTYPE_V2DF_V4SF,\n   V2DF_FTYPE_V2DF_DI,\n   V2DF_FTYPE_V2DF_SI,\n   V2SF_FTYPE_V2SF_V2SF,\n   V1DI_FTYPE_V1DI_V1DI,\n+  V1DI_FTYPE_V1DI_V1DI_COUNT,\n   V1DI_FTYPE_V8QI_V8QI,\n   V1DI_FTYPE_V2SI_V2SI,\n+  V1DI_FTYPE_V1DI_SI_COUNT,\n+  V8HI_FTYPE_V8HI_INT,\n+  V4SI_FTYPE_V4SI_INT,\n+  V4HI_FTYPE_V4HI_INT,\n   V4SF_FTYPE_V4SF_INT,\n   V2DI_FTYPE_V2DI_INT,\n+  V2DI2TI_FTYPE_V2DI2TI_INT,\n   V2DF_FTYPE_V2DF_INT,\n   V16QI_FTYPE_V16QI_V16QI_V16QI,\n   V4SF_FTYPE_V4SF_V4SF_V4SF,\n@@ -18079,7 +18095,9 @@ enum ix86_builtin_type\n   V4SI_FTYPE_V4SI_V4SI_INT,\n   V4SF_FTYPE_V4SF_V4SF_INT,\n   V2DI_FTYPE_V2DI_V2DI_INT,\n-  V2DF_FTYPE_V2DF_V2DF_INT\n+  V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT,\n+  V2DF_FTYPE_V2DF_V2DF_INT,\n+  DI_FTYPE_DI_DI_INT\n };\n \n /* Builtins with variable number of arguments.  */\n@@ -18130,6 +18148,25 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_pmaddwd, \"__builtin_ia32_pmaddwd\", IX86_BUILTIN_PMADDWD, UNKNOWN, (int) V2SI_FTYPE_V4HI_V4HI },\n \n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, \"__builtin_ia32_psllwi\", IX86_BUILTIN_PSLLWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, \"__builtin_ia32_pslldi\", IX86_BUILTIN_PSLLDI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv1di3, \"__builtin_ia32_psllqi\", IX86_BUILTIN_PSLLQI, UNKNOWN, (int) V1DI_FTYPE_V1DI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv4hi3, \"__builtin_ia32_psllw\", IX86_BUILTIN_PSLLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv2si3, \"__builtin_ia32_pslld\", IX86_BUILTIN_PSLLD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashlv1di3, \"__builtin_ia32_psllq\", IX86_BUILTIN_PSLLQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_COUNT },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, \"__builtin_ia32_psrlwi\", IX86_BUILTIN_PSRLWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, \"__builtin_ia32_psrldi\", IX86_BUILTIN_PSRLDI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv1di3, \"__builtin_ia32_psrlqi\", IX86_BUILTIN_PSRLQI, UNKNOWN, (int) V1DI_FTYPE_V1DI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv4hi3, \"__builtin_ia32_psrlw\", IX86_BUILTIN_PSRLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv2si3, \"__builtin_ia32_psrld\", IX86_BUILTIN_PSRLD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_lshrv1di3, \"__builtin_ia32_psrlq\", IX86_BUILTIN_PSRLQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_COUNT },\n+\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, \"__builtin_ia32_psrawi\", IX86_BUILTIN_PSRAWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, \"__builtin_ia32_psradi\", IX86_BUILTIN_PSRADI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv4hi3, \"__builtin_ia32_psraw\", IX86_BUILTIN_PSRAW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT },\n+  { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_ashrv2si3, \"__builtin_ia32_psrad\", IX86_BUILTIN_PSRAD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT },\n+\n   /* 3DNow! */\n   { OPTION_MASK_ISA_3DNOW, CODE_FOR_mmx_pf2id, \"__builtin_ia32_pf2id\", IX86_BUILTIN_PF2ID, UNKNOWN, (int) V2SI_FTYPE_V2SF },\n   { OPTION_MASK_ISA_3DNOW, CODE_FOR_mmx_floatv2si2, \"__builtin_ia32_pi2fd\", IX86_BUILTIN_PI2FD, UNKNOWN, (int) V2SF_FTYPE_V2SI },\n@@ -18228,7 +18265,11 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_cvtsi2ss, \"__builtin_ia32_cvtsi2ss\", IX86_BUILTIN_CVTSI2SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_SI },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtsi2ssq, \"__builtin_ia32_cvtsi642ss\", IX86_BUILTIN_CVTSI642SS, UNKNOWN, V4SF_FTYPE_V4SF_DI },\n \n-  /* SSE 3DNow!A */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshufd, \"__builtin_ia32_pshufd\", IX86_BUILTIN_PSHUFD, UNKNOWN, (int) V4SI_FTYPE_V4SI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshuflw, \"__builtin_ia32_pshuflw\", IX86_BUILTIN_PSHUFLW, UNKNOWN, (int) V8HI_FTYPE_V8HI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pshufhw, \"__builtin_ia32_pshufhw\", IX86_BUILTIN_PSHUFHW, UNKNOWN, (int) V8HI_FTYPE_V8HI_INT },\n+\n+  /* SSE MMX or 3Dnow!A */\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI },\n@@ -18241,6 +18282,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_psadbw, \"__builtin_ia32_psadbw\", IX86_BUILTIN_PSADBW, UNKNOWN, (int) V1DI_FTYPE_V8QI_V8QI },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_pmovmskb, \"__builtin_ia32_pmovmskb\", IX86_BUILTIN_PMOVMSKB, UNKNOWN, (int) INT_FTYPE_V8QI },\n \n+  { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_pshufw, \"__builtin_ia32_pshufw\", IX86_BUILTIN_PSHUFW, UNKNOWN, (int) V4HI_FTYPE_V4HI_INT },\n+\n   /* SSE2 */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_shufpd, \"__builtin_ia32_shufpd\", IX86_BUILTIN_SHUFPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n \n@@ -18313,7 +18356,6 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_pack_sfix_v2df, \"__builtin_ia32_vec_pack_sfix\", IX86_BUILTIN_VEC_PACK_SFIX, UNKNOWN, (int) V4SI_FTYPE_V2DF_V2DF },\n \n-  /* SSE2 */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_addv16qi3, \"__builtin_ia32_paddb128\", IX86_BUILTIN_PADDB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_addv8hi3, \"__builtin_ia32_paddw128\", IX86_BUILTIN_PADDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddd128\", IX86_BUILTIN_PADDD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n@@ -18381,6 +18423,27 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2ss, \"__builtin_ia32_cvtsd2ss\", IX86_BUILTIN_CVTSD2SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtss2sd, \"__builtin_ia32_cvtss2sd\", IX86_BUILTIN_CVTSS2SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V4SF },\n \n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_ashlti3, \"__builtin_ia32_pslldqi128\", IX86_BUILTIN_PSLLDQI128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI2TI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, \"__builtin_ia32_psllwi128\", IX86_BUILTIN_PSLLWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, \"__builtin_ia32_pslldi128\", IX86_BUILTIN_PSLLDI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, \"__builtin_ia32_psllqi128\", IX86_BUILTIN_PSLLQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, \"__builtin_ia32_psllw128\", IX86_BUILTIN_PSLLW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, \"__builtin_ia32_pslld128\", IX86_BUILTIN_PSLLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, \"__builtin_ia32_psllq128\", IX86_BUILTIN_PSLLQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_COUNT },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lshrti3, \"__builtin_ia32_psrldqi128\", IX86_BUILTIN_PSRLDQI128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI2TI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, \"__builtin_ia32_psrlwi128\", IX86_BUILTIN_PSRLWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, \"__builtin_ia32_psrldi128\", IX86_BUILTIN_PSRLDI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, \"__builtin_ia32_psrlqi128\", IX86_BUILTIN_PSRLQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, \"__builtin_ia32_psrlw128\", IX86_BUILTIN_PSRLW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, \"__builtin_ia32_psrld128\", IX86_BUILTIN_PSRLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, \"__builtin_ia32_psrlq128\", IX86_BUILTIN_PSRLQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_COUNT },\n+\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv8hi3, \"__builtin_ia32_psrawi128\", IX86_BUILTIN_PSRAWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv4si3, \"__builtin_ia32_psradi128\", IX86_BUILTIN_PSRADI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv8hi3, \"__builtin_ia32_psraw128\", IX86_BUILTIN_PSRAW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_COUNT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_ashrv4si3, \"__builtin_ia32_psrad128\", IX86_BUILTIN_PSRAD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_COUNT },\n+\n   /* SSE2 MMX */\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_addv1di3, \"__builtin_ia32_paddq\", IX86_BUILTIN_PADDQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_mmx_subv1di3, \"__builtin_ia32_psubq\", IX86_BUILTIN_PSUBQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI },\n@@ -18429,6 +18492,10 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv4si3, \"__builtin_ia32_psignd128\", IX86_BUILTIN_PSIGND128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv2si3, \"__builtin_ia32_psignd\", IX86_BUILTIN_PSIGND, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n \n+  /* SSSE3.  */\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_palignrti, \"__builtin_ia32_palignr128\", IX86_BUILTIN_PALIGNR128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_palignrdi, \"__builtin_ia32_palignr\", IX86_BUILTIN_PALIGNR, UNKNOWN, (int) DI_FTYPE_DI_DI_INT },\n+\n   /* SSE4.1 */\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendpd, \"__builtin_ia32_blendpd\", IX86_BUILTIN_BLENDPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_blendps, \"__builtin_ia32_blendps\", IX86_BUILTIN_BLENDPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n@@ -19432,6 +19499,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v8qi_ftype_v4hi_v4hi;\n \t  break;\n \tcase V8HI_FTYPE_V8HI_V8HI:\n+\tcase V8HI_FTYPE_V8HI_V8HI_COUNT:\n \t  type = v8hi_ftype_v8hi_v8hi;\n \t  break;\n \tcase V8HI_FTYPE_V16QI_V16QI:\n@@ -19440,7 +19508,11 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V8HI_FTYPE_V4SI_V4SI:\n \t  type = v8hi_ftype_v4si_v4si;\n \t  break;\n+\tcase V8HI_FTYPE_V8HI_SI_COUNT:\n+\t  type = v8hi_ftype_v8hi_int;\n+\t  break;\n \tcase V4SI_FTYPE_V4SI_V4SI:\n+\tcase V4SI_FTYPE_V4SI_V4SI_COUNT:\n \t  type = v4si_ftype_v4si_v4si;\n \t  break;\n \tcase V4SI_FTYPE_V8HI_V8HI:\n@@ -19452,7 +19524,11 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V4SI_FTYPE_V2DF_V2DF:\n \t  type = v4si_ftype_v2df_v2df;\n \t  break;\n+\tcase V4SI_FTYPE_V4SI_SI_COUNT:\n+\t  type = v4si_ftype_v4si_int;\n+\t  break;\n \tcase V4HI_FTYPE_V4HI_V4HI:\n+\tcase V4HI_FTYPE_V4HI_V4HI_COUNT:\n \t  type = v4hi_ftype_v4hi_v4hi;\n \t  break;\n \tcase V4HI_FTYPE_V8QI_V8QI:\n@@ -19461,6 +19537,9 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V4HI_FTYPE_V2SI_V2SI:\n \t  type = v4hi_ftype_v2si_v2si;\n \t  break;\n+\tcase V4HI_FTYPE_V4HI_SI_COUNT:\n+\t  type = v4hi_ftype_v4hi_int;\n+\t  break;\n \tcase V4SF_FTYPE_V4SF_V4SF:\n \tcase V4SF_FTYPE_V4SF_V4SF_SWAP:\n \t  type = v4sf_ftype_v4sf_v4sf;\n@@ -19478,6 +19557,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v4sf_ftype_v4sf_int;\n \t  break;\n \tcase V2DI_FTYPE_V2DI_V2DI:\n+\tcase V2DI_FTYPE_V2DI_V2DI_COUNT:\n \t  type = v2di_ftype_v2di_v2di;\n \t  break;\n \tcase V2DI_FTYPE_V16QI_V16QI:\n@@ -19489,7 +19569,11 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V2DI_FTYPE_V2DF_V2DF:\n \t  type = v2di_ftype_v2df_v2df;\n \t  break;\n+\tcase V2DI_FTYPE_V2DI_SI_COUNT:\n+\t  type = v2di_ftype_v2di_int;\n+\t  break;\n \tcase V2SI_FTYPE_V2SI_V2SI:\n+\tcase V2SI_FTYPE_V2SI_V2SI_COUNT:\n \t  type = v2si_ftype_v2si_v2si;\n \t  break;\n \tcase V2SI_FTYPE_V4HI_V4HI:\n@@ -19498,6 +19582,9 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V2SI_FTYPE_V2SF_V2SF:\n \t  type = v2si_ftype_v2sf_v2sf;\n \t  break;\n+\tcase V2SI_FTYPE_V2SI_SI_COUNT:\n+\t  type = v2si_ftype_v2si_int;\n+\t  break;\n \tcase V2DF_FTYPE_V2DF_V2DF:\n \tcase V2DF_FTYPE_V2DF_V2DF_SWAP:\n \t  type = v2df_ftype_v2df_v2df;\n@@ -19515,6 +19602,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v2sf_ftype_v2sf_v2sf;\n \t  break;\n \tcase V1DI_FTYPE_V1DI_V1DI:\n+\tcase V1DI_FTYPE_V1DI_V1DI_COUNT:\n \t  type = v1di_ftype_v1di_v1di;\n \t  break;\n \tcase V1DI_FTYPE_V8QI_V8QI:\n@@ -19523,10 +19611,23 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V1DI_FTYPE_V2SI_V2SI:\n \t  type = v1di_ftype_v2si_v2si;\n \t  break;\n+\tcase V1DI_FTYPE_V1DI_SI_COUNT:\n+\t  type = v1di_ftype_v1di_int;\n+\t  break;\n+\tcase V8HI_FTYPE_V8HI_INT:\n+\t  type = v8hi_ftype_v8hi_int;\n+\t  break;\n+\tcase V4SI_FTYPE_V4SI_INT:\n+\t  type = v4si_ftype_v4si_int;\n+\t  break;\n+\tcase V4HI_FTYPE_V4HI_INT:\n+\t  type = v4hi_ftype_v4hi_int;\n+\t  break;\n \tcase V4SF_FTYPE_V4SF_INT:\n \t  type = v4sf_ftype_v4sf_int;\n \t  break;\n \tcase V2DI_FTYPE_V2DI_INT:\n+\tcase V2DI2TI_FTYPE_V2DI2TI_INT:\n \t  type = v2di_ftype_v2di_int;\n \t  break;\n \tcase V2DF_FTYPE_V2DF_INT:\n@@ -19554,11 +19655,15 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v4sf_ftype_v4sf_v4sf_int;\n \t  break;\n \tcase V2DI_FTYPE_V2DI_V2DI_INT:\n+\tcase V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT:\n \t  type = v2di_ftype_v2di_v2di_int;\n \t  break;\n \tcase V2DF_FTYPE_V2DF_V2DF_INT:\n \t  type = v2df_ftype_v2df_v2df_int;\n \t  break;\n+\tcase DI_FTYPE_DI_DI_INT:\n+\t  type = di_ftype_di_di_int;\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -19593,27 +19698,6 @@ ix86_init_mmx_sse_builtins (void)\n   /* Add the remaining MMX insns with somewhat more complicated types.  */\n   def_builtin (OPTION_MASK_ISA_MMX, \"__builtin_ia32_emms\", void_ftype_void, IX86_BUILTIN_EMMS);\n \n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllwi\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSLLWI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_pslldi\", v2si_ftype_v2si_int, IX86_BUILTIN_PSLLDI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllqi\", v1di_ftype_v1di_int, IX86_BUILTIN_PSLLQI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PSLLW);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_pslld\", v2si_ftype_v2si_v2si, IX86_BUILTIN_PSLLD);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psllq\", v1di_ftype_v1di_v1di, IX86_BUILTIN_PSLLQ);\n-\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlwi\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSRLWI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrldi\", v2si_ftype_v2si_int, IX86_BUILTIN_PSRLDI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlqi\", v1di_ftype_v1di_int, IX86_BUILTIN_PSRLQI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PSRLW);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrld\", v2si_ftype_v2si_v2si, IX86_BUILTIN_PSRLD);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrlq\", v1di_ftype_v1di_v1di, IX86_BUILTIN_PSRLQ);\n-\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrawi\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSRAWI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psradi\", v2si_ftype_v2si_int, IX86_BUILTIN_PSRADI);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psraw\", v4hi_ftype_v4hi_v4hi, IX86_BUILTIN_PSRAW);\n-  def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_psrad\", v2si_ftype_v2si_v2si, IX86_BUILTIN_PSRAD);\n-\n-  def_builtin_const (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, \"__builtin_ia32_pshufw\", v4hi_ftype_v4hi_int, IX86_BUILTIN_PSHUFW);\n-\n   /* comi/ucomi insns.  */\n   for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n     if (d->mask == OPTION_MASK_ISA_SSE2)\n@@ -19667,10 +19751,6 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_movntpd\", void_ftype_pdouble_v2df, IX86_BUILTIN_MOVNTPD);\n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_movntdq\", void_ftype_pv2di_v2di, IX86_BUILTIN_MOVNTDQ);\n \n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pshufd\", v4si_ftype_v4si_int, IX86_BUILTIN_PSHUFD);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pshuflw\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSHUFLW);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pshufhw\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSHUFHW);\n-\n   def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_sqrtsd\", v2df_ftype_v2df, IX86_BUILTIN_SQRTSD);\n \n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_clflush\", void_ftype_pcvoid, IX86_BUILTIN_CLFLUSH);\n@@ -19680,36 +19760,11 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_loaddqu\", v16qi_ftype_pcchar, IX86_BUILTIN_LOADDQU);\n   def_builtin (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_storedqu\", void_ftype_pchar_v16qi, IX86_BUILTIN_STOREDQU);\n \n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pslldqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSLLDQI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psllwi128\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSLLWI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pslldi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSLLDI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psllqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSLLQI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psllw128\", v8hi_ftype_v8hi_v8hi, IX86_BUILTIN_PSLLW128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_pslld128\", v4si_ftype_v4si_v4si, IX86_BUILTIN_PSLLD128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psllq128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_PSLLQ128);\n-\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrldqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSRLDQI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrlwi128\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSRLWI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrldi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSRLDI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrlqi128\", v2di_ftype_v2di_int, IX86_BUILTIN_PSRLQI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrlw128\", v8hi_ftype_v8hi_v8hi, IX86_BUILTIN_PSRLW128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrld128\", v4si_ftype_v4si_v4si, IX86_BUILTIN_PSRLD128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrlq128\", v2di_ftype_v2di_v2di, IX86_BUILTIN_PSRLQ128);\n-\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrawi128\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSRAWI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psradi128\", v4si_ftype_v4si_int, IX86_BUILTIN_PSRADI128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psraw128\", v8hi_ftype_v8hi_v8hi, IX86_BUILTIN_PSRAW128);\n-  def_builtin_const (OPTION_MASK_ISA_SSE2, \"__builtin_ia32_psrad128\", v4si_ftype_v4si_v4si, IX86_BUILTIN_PSRAD128);\n-\n   /* SSE3.  */\n   def_builtin (OPTION_MASK_ISA_SSE3, \"__builtin_ia32_monitor\", void_ftype_pcvoid_unsigned_unsigned, IX86_BUILTIN_MONITOR);\n   def_builtin (OPTION_MASK_ISA_SSE3, \"__builtin_ia32_mwait\", void_ftype_unsigned_unsigned, IX86_BUILTIN_MWAIT);\n   def_builtin (OPTION_MASK_ISA_SSE3, \"__builtin_ia32_lddqu\", v16qi_ftype_pcchar, IX86_BUILTIN_LDDQU);\n \n-  /* SSSE3.  */\n-  def_builtin_const (OPTION_MASK_ISA_SSSE3, \"__builtin_ia32_palignr128\", v2di_ftype_v2di_v2di_int, IX86_BUILTIN_PALIGNR128);\n-  def_builtin_const (OPTION_MASK_ISA_SSSE3, \"__builtin_ia32_palignr\", di_ftype_di_di_int, IX86_BUILTIN_PALIGNR);\n-\n   /* SSE4.1. */\n   def_builtin (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_movntdqa\", v2di_ftype_pv2di, IX86_BUILTIN_MOVNTDQA);\n \n@@ -19964,44 +20019,6 @@ ix86_expand_crc32 (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n-/* Subroutine of ix86_expand_builtin to take care of binop insns\n-   with an immediate.  */\n-\n-static rtx\n-ix86_expand_binop_imm_builtin (enum insn_code icode, tree exp,\n-\t\t\t\trtx target)\n-{\n-  rtx pat;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n-\n-  if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-    {\n-      op0 = copy_to_reg (op0);\n-      op0 = simplify_gen_subreg (mode0, op0, GET_MODE (op0), 0);\n-    }\n-\n-  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n-    {\n-      error (\"the last operand must be an immediate\");\n-      return const0_rtx;\n-    }\n-\n-  target = gen_reg_rtx (V2DImode);\n-  pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target,\n-\t\t\t\t\t      V2DImode, 0),\n-\t\t\t op0, op1);\n-  if (! pat)\n-    return 0;\n-  emit_insn (pat);\n-  return target;\n-}\n-\n /* Subroutine of ix86_expand_builtin to take care of binop insns.  */\n \n static rtx\n@@ -20395,20 +20412,24 @@ static rtx\n ix86_expand_args_builtin (const struct builtin_description *d,\n \t\t\t  tree exp, rtx target)\n {\n-  rtx pat;\n+  rtx pat, real_target;\n   unsigned int i, nargs;\n   int num_memory = 0;\n   struct\n     {\n       rtx op;\n       enum machine_mode mode;\n     } args[3];\n-  bool last_arg_constant = false;\n+  bool last_arg_constant = false, last_arg_count = false;\n   enum insn_code icode = d->icode;\n   const struct insn_data *insn_p = &insn_data[icode];\n   enum machine_mode tmode = insn_p->operand[0].mode;\n+  enum machine_mode cmode;\n   bool swap = false;\n   enum rtx_code comparison = d->comparison;\n+  enum { none, ti } convert;\n+\n+  convert = none;\n \n   switch ((enum ix86_builtin_type) d->flag)\n     {\n@@ -20493,6 +20514,29 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       nargs = 2;\n       swap = true;\n       break;\n+    case V8HI_FTYPE_V8HI_V8HI_COUNT:\n+    case V8HI_FTYPE_V8HI_SI_COUNT:\n+    case V4SI_FTYPE_V4SI_V4SI_COUNT:\n+    case V4SI_FTYPE_V4SI_SI_COUNT:\n+    case V4HI_FTYPE_V4HI_V4HI_COUNT:\n+    case V4HI_FTYPE_V4HI_SI_COUNT:\n+    case V2DI_FTYPE_V2DI_V2DI_COUNT:\n+    case V2DI_FTYPE_V2DI_SI_COUNT:\n+    case V2SI_FTYPE_V2SI_V2SI_COUNT:\n+    case V2SI_FTYPE_V2SI_SI_COUNT:\n+    case V1DI_FTYPE_V1DI_V1DI_COUNT:\n+    case V1DI_FTYPE_V1DI_SI_COUNT:\n+      nargs = 2;\n+      last_arg_count = true;\n+      break;\n+    case V2DI2TI_FTYPE_V2DI2TI_INT:\n+      nargs = 2;\n+      convert = ti;\n+      last_arg_constant = true;\n+      break;\n+    case V8HI_FTYPE_V8HI_INT:\n+    case V4SI_FTYPE_V4SI_INT:\n+    case V4HI_FTYPE_V4HI_INT:\n     case V4SF_FTYPE_V4SF_INT:\n     case V2DI_FTYPE_V2DI_INT:\n     case V2DF_FTYPE_V2DF_INT:\n@@ -20513,6 +20557,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       nargs = 3;\n       last_arg_constant = true;\n       break;\n+    case V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT:\n+      nargs = 3;\n+      convert = ti;\n+      last_arg_constant = true;\n+      break;\n+    case DI_FTYPE_DI_DI_INT:\n+      nargs = 3;\n+      last_arg_constant = true;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -20525,11 +20578,31 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       return ix86_expand_sse_compare (d, exp, target, swap);\n     }\n \n-  if (optimize\n-      || target == 0\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_p->operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n+  switch (convert)\n+    {\n+    case ti:\n+      gcc_assert (tmode == TImode);\n+      cmode = V2DImode;\n+      break;\n+    case none:\n+      cmode = VOIDmode;\n+      break;\n+    }\n+\n+  if (cmode == VOIDmode)\n+    {\n+      if (optimize\n+\t  || target == 0\n+\t  || GET_MODE (target) != tmode\n+\t  || ! (*insn_p->operand[0].predicate) (target, tmode))\n+\ttarget = gen_reg_rtx (tmode);\n+      real_target = target;\n+    }\n+  else\n+    {\n+      target = gen_reg_rtx (cmode);\n+      real_target = simplify_gen_subreg (tmode, target, cmode, 0);\n+    }\n \n   for (i = 0; i < nargs; i++)\n     {\n@@ -20538,7 +20611,19 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       enum machine_mode mode = insn_p->operand[i + 1].mode;\n       bool match = (*insn_p->operand[i + 1].predicate) (op, mode);\n \n-      if (last_arg_constant && (i + 1) == nargs)\n+      if (last_arg_count && (i + 1) == nargs)\n+\t{\n+\t  /* SIMD shift insns take either an 8-bit immediate or\n+\t     register as count.  But builtin functions take int as\n+\t     count.  If count doesn't match, we put it in register.  */\n+\t  if (!match)\n+\t    {\n+\t      op = simplify_gen_subreg (SImode, op, GET_MODE (op), 0);\n+\t      if (!(*insn_p->operand[i + 1].predicate) (op, mode))\n+\t\top = copy_to_reg (op);\n+\t    }\n+\t}\n+      else if (last_arg_constant && (i + 1) == nargs)\n \t{\n \t  if (!match)\n \t    switch (icode)\n@@ -20570,11 +20655,22 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t  if (memory_operand (op, mode))\n \t    num_memory++;\n \n-\t  gcc_assert (GET_MODE (op) == mode\n-\t\t      || GET_MODE (op) == VOIDmode);\n+\t  if (cmode == VOIDmode)\n+\t    {\n+\t      gcc_assert (GET_MODE (op) == mode\n+\t\t\t  || GET_MODE (op) == VOIDmode);\n+\n+\t      if (optimize || !match || num_memory > 1)\n+\t\top = copy_to_mode_reg (mode, op);\n+\t    }\n+\t  else\n+\t    {\n+\t      gcc_assert (GET_MODE (op) == cmode\n+\t\t\t  && mode == tmode);\n \n-\t  if (optimize || !match || num_memory > 1)\n-\t    op = copy_to_mode_reg (mode, op);\n+\t      op = copy_to_reg (op);\n+\t      op = simplify_gen_subreg (mode, op, GET_MODE (op), 0);\n+\t    }\n \t}\n \n       args[i].op = op;\n@@ -20584,13 +20680,13 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n   switch (nargs)\n     {\n     case 1:\n-      pat = GEN_FCN (icode) (target, args[0].op);\n+      pat = GEN_FCN (icode) (real_target, args[0].op);\n       break;\n     case 2:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n+      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op);\n       break;\n     case 3:\n-      pat = GEN_FCN (icode) (target, args[0].op, args[1].op,\n+      pat = GEN_FCN (icode) (real_target, args[0].op, args[1].op,\n \t\t\t     args[2].op);\n       break;\n     default:\n@@ -21164,140 +21260,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (gen_sse_stmxcsr (target));\n       return copy_to_mode_reg (SImode, target);\n \n-    case IX86_BUILTIN_PSHUFW:\n-    case IX86_BUILTIN_PSHUFD:\n-    case IX86_BUILTIN_PSHUFHW:\n-    case IX86_BUILTIN_PSHUFLW:\n-      icode = (  fcode == IX86_BUILTIN_PSHUFHW ? CODE_FOR_sse2_pshufhw\n-\t       : fcode == IX86_BUILTIN_PSHUFLW ? CODE_FOR_sse2_pshuflw\n-\t       : fcode == IX86_BUILTIN_PSHUFD ? CODE_FOR_sse2_pshufd\n-\t       : CODE_FOR_mmx_pshufw);\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      mode2 = insn_data[icode].operand[2].mode;\n-\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-\top0 = copy_to_mode_reg (mode1, op0);\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n-\t{\n-\t  /* @@@ better error message */\n-\t  error (\"mask must be an immediate\");\n-\t  return const0_rtx;\n-\t}\n-      if (target == 0\n-\t  || GET_MODE (target) != tmode\n-\t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-\ttarget = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-\n-    case IX86_BUILTIN_PSLLW:\n-    case IX86_BUILTIN_PSLLWI:\n-      icode = CODE_FOR_mmx_ashlv4hi3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSLLD:\n-    case IX86_BUILTIN_PSLLDI:\n-      icode = CODE_FOR_mmx_ashlv2si3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSLLQ:\n-    case IX86_BUILTIN_PSLLQI:\n-      icode = CODE_FOR_mmx_ashlv1di3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRAW:\n-    case IX86_BUILTIN_PSRAWI:\n-      icode = CODE_FOR_mmx_ashrv4hi3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRAD:\n-    case IX86_BUILTIN_PSRADI:\n-      icode = CODE_FOR_mmx_ashrv2si3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRLW:\n-    case IX86_BUILTIN_PSRLWI:\n-      icode = CODE_FOR_mmx_lshrv4hi3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRLD:\n-    case IX86_BUILTIN_PSRLDI:\n-      icode = CODE_FOR_mmx_lshrv2si3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRLQ:\n-    case IX86_BUILTIN_PSRLQI:\n-      icode = CODE_FOR_mmx_lshrv1di3;\n-      goto do_pshift;\n-\n-    case IX86_BUILTIN_PSLLW128:\n-    case IX86_BUILTIN_PSLLWI128:\n-      icode = CODE_FOR_ashlv8hi3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSLLD128:\n-    case IX86_BUILTIN_PSLLDI128:\n-      icode = CODE_FOR_ashlv4si3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSLLQ128:\n-    case IX86_BUILTIN_PSLLQI128:\n-      icode = CODE_FOR_ashlv2di3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRAW128:\n-    case IX86_BUILTIN_PSRAWI128:\n-      icode = CODE_FOR_ashrv8hi3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRAD128:\n-    case IX86_BUILTIN_PSRADI128:\n-      icode = CODE_FOR_ashrv4si3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRLW128:\n-    case IX86_BUILTIN_PSRLWI128:\n-      icode = CODE_FOR_lshrv8hi3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRLD128:\n-    case IX86_BUILTIN_PSRLDI128:\n-      icode = CODE_FOR_lshrv4si3;\n-      goto do_pshift;\n-    case IX86_BUILTIN_PSRLQ128:\n-    case IX86_BUILTIN_PSRLQI128:\n-      icode = CODE_FOR_lshrv2di3;\n-\n-    do_pshift:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-\top0 = copy_to_reg (op0);\n-\n-      if (!CONST_INT_P (op1))\n-\top1 = simplify_gen_subreg (SImode, op1, GET_MODE (op1), 0);\n-\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, SImode))\n-\top1 = copy_to_reg (op1);\n-\n-      target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (!pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-\n-    case IX86_BUILTIN_PSLLDQI128:\n-      return ix86_expand_binop_imm_builtin (CODE_FOR_sse2_ashlti3,\n-\t\t\t\t\t     exp, target);\n-      break;\n-\n-    case IX86_BUILTIN_PSRLDQI128:\n-      return ix86_expand_binop_imm_builtin (CODE_FOR_sse2_lshrti3,\n-\t\t\t\t\t     exp, target);\n-      break;\n-\n     case IX86_BUILTIN_FEMMS:\n       emit_insn (gen_mmx_femms ());\n       return NULL_RTX;\n@@ -21373,52 +21335,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       return ix86_expand_unop_builtin (CODE_FOR_sse3_lddqu, exp,\n \t\t\t\t       target, 1);\n \n-    case IX86_BUILTIN_PALIGNR:\n-    case IX86_BUILTIN_PALIGNR128:\n-      if (fcode == IX86_BUILTIN_PALIGNR)\n-\t{\n-\t  icode = CODE_FOR_ssse3_palignrdi;\n-\t  mode = DImode;\n-\t}\n-      else\n-\t{\n-\t  icode = CODE_FOR_ssse3_palignrti;\n-\t  mode = V2DImode;\n-\t}\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      arg2 = CALL_EXPR_ARG (exp, 2);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n-      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n-      op2 = expand_expr (arg2, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      mode2 = insn_data[icode].operand[2].mode;\n-      mode3 = insn_data[icode].operand[3].mode;\n-\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-\t{\n-\t  op0 = copy_to_reg (op0);\n-\t  op0 = simplify_gen_subreg (mode1, op0, GET_MODE (op0), 0);\n-\t}\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n-\t{\n-\t  op1 = copy_to_reg (op1);\n-\t  op1 = simplify_gen_subreg (mode2, op1, GET_MODE (op1), 0);\n-\t}\n-      if (! (*insn_data[icode].operand[3].predicate) (op2, mode3))\n-\t{\n-\t  error (\"shift must be an immediate\");\n-\t  return const0_rtx;\n-\t}\n-      target = gen_reg_rtx (mode);\n-      pat = GEN_FCN (icode) (simplify_gen_subreg (tmode, target, mode, 0),\n-\t\t\t     op0, op1, op2);\n-      if (! pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-\n     case IX86_BUILTIN_MOVNTDQA:\n       return ix86_expand_unop_builtin (CODE_FOR_sse4_1_movntdqa, exp,\n \t\t\t\t       target, 1);"}, {"sha": "82d40c60dd4d6284b191a21ab80d6c2958eba199", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858e5e797f9b995e0d6d3a092d5c0719f8a263c9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=858e5e797f9b995e0d6d3a092d5c0719f8a263c9", "patch": "@@ -7881,7 +7881,7 @@ v16qi __builtin_ia32_pshufb128 (v16qi, v16qi)\n v16qi __builtin_ia32_psignb128 (v16qi, v16qi)\n v4si __builtin_ia32_psignd128 (v4si, v4si)\n v8hi __builtin_ia32_psignw128 (v8hi, v8hi)\n-v2di __builtin_ia32_palignr (v2di, v2di, int)\n+v2di __builtin_ia32_palignr128 (v2di, v2di, int)\n v16qi __builtin_ia32_pabsb128 (v16qi)\n v4si __builtin_ia32_pabsd128 (v4si)\n v8hi __builtin_ia32_pabsw128 (v8hi)"}]}