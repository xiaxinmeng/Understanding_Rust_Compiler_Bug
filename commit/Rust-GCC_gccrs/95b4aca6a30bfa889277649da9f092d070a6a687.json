{"sha": "95b4aca6a30bfa889277649da9f092d070a6a687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTViNGFjYTZhMzBiZmE4ODkyNzc2NDlkYTlmMDkyZDA3MGE2YTY4Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-05T09:35:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-05T09:35:44Z"}, "message": "c-tree.h (TYPE_ACTUAL_ARG_TYPES): Use TYPE_LANG_SLOT_1.\n\n\t* c-tree.h (TYPE_ACTUAL_ARG_TYPES): Use TYPE_LANG_SLOT_1.\n\t* dwarf2out.c (add_data_member_location_attribute): Check for\n\tTREE_BINFO.\n\t* tree.c (tree_node_kinds): Add \"binfos\".\n\t(binfo_lang_slots): New.\n\t(make_node_stat): Add TREE_BINFO.\n\t(make_tree_binfo_stat): New.\n\t(tree_node_structure): Add TREE_BINFO.\n\t* tree.def (TREE_BINFO): New.\n\t* tree.h (REC_OR_UNION_CHECK): Rename to ...\n\t(RECORD_OR_UNION_CHECK): ... here.\n\t(NOT_RECORD_OR_UNION_CHECK): New.\n\t(TRE_VIA_VIRTUAL): Allow TREE_LIST or TREE_BINFO.\n\t(TYPE_FIELDS, TYPE_METHODS, TYPE_VFIELD): Adjust for\n\tRECORD_OR_UNION_CHECK.\n\t(TYPE_BINFO): Use RECORD_OR_UNION_CHECK.\n\t(TYPE_LANG_SLOT_1): New.\n\t(BINFO_TYPE, BINFO_OFFSET, BINFO_VTABLE, BINFO_VIRTUALS,\n\tBINFO_BASETYPES, TYPE_BINFO_BASETYPES, BINFO_VPTR_FIELD,\n\tBINFO_BASEACCESSES, BINFO_INHERITANCE_CHAIN): Adjust.\n\t(BINFO_ELTS): Remove.\n\t(BINFO_LANG_SLOT): New.\n\t(struct tree_binfo): New.\n\t(binfo_lang_slots): Declare.\n\t(enum tree_node_structure_enum): Add TS_BINFO.\n\t(union tree_node): Add binfo.\n\t(make_tree_binfo_stat): Declare.\n\t(make_tree_binfo): New.\n\t(enum tree_node_kind): Add binfo_kind.\n\n\t* cp/call.c (enforce_access): Expect TREE_BINFO.\n\t* cp/class.c (binfo_ctor_vtable): Check TREE_BINFO.\n\t* cp/cp-tree.h (RECORD_OR_UNION_TYPE_CHECK): Remove.\n\t(BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX, BINFO_PRIMARY_BASE_OF):\n\tAdjust.\n\t(BINFO_LANG_ELTS): Remove.\n\t(BINFO_LANG_SLOTS): New.\n\t(TYPE_RAISES_EXCEPTIONS, ENUM_TEMPLATE_INFO): Use TYPE_LANG_SLOT_1.\n\t(CLASSTYPE_TEMPLATE_INFO): Adjust.\n\t* cp/pt.c (tsubst): Split TREE_BINFO case from TREE_VEC case.\n\t* cp/search.c (lookup_member): Check TREE_BINFO.\n\t* cp/semantics.c (perform_or_defer_access_check): Likewise.\n\t(check_accessibility_of_qualified_id): Check\n\tdeferred_access_no_check.\n\t* cp/tree.c (make_binfo): Use make_tree_binfo.\n\n\t* java/class.c (make_class): Use make_tree_binfo.\n\t(set_super_info, add_interface_do): Likewise.\n\t* java/java-tree.h (CLASS_HAS_SUPER_FLAG): Expect a BINFO.\n\n\t* objc/objc-act.c (start_class, objc_declare_protocols,\n\tstart_protocols): Use TYPE_LANG_SLOT_1.\n\t* objc/objc-act.h (CLASS_BINFO_ELTS, PROTOCOL_BINFO_ELTS): Rename\n\tto ...\n\t(CLASS_LANG_SLOT_ELTS, PROTOCOL_LANG_SLOT_ELTS): ... here.\n\t(CLASS_IVARS, CLASS_RAW_IVARS, CLASS_STATIC_TEMPLATE,\n\tCLASS_CATEGORY_LIST, CLASS_PROTOCOL_LIST, CLASS_OWN_IVARS,\n\tPROTOCOL_LIST, PROTOCOL_FORWARD_DECL): Use TYPE_LANG_SLOT_1.\n\nFrom-SVN: r84110", "tree": {"sha": "345ee905cf45afd981c579fc9648f137846a592f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/345ee905cf45afd981c579fc9648f137846a592f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95b4aca6a30bfa889277649da9f092d070a6a687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b4aca6a30bfa889277649da9f092d070a6a687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b4aca6a30bfa889277649da9f092d070a6a687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b4aca6a30bfa889277649da9f092d070a6a687/comments", "author": null, "committer": null, "parents": [{"sha": "acf8677f4e8df04a0285d37c653eb69d12e0cb64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf8677f4e8df04a0285d37c653eb69d12e0cb64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf8677f4e8df04a0285d37c653eb69d12e0cb64"}], "stats": {"total": 302, "additions": 222, "deletions": 80}, "files": [{"sha": "33b69c2f3a6e81e93d3e54a9a946f4bb44c355cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -1,3 +1,44 @@\n+2004-07-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-tree.h (TYPE_ACTUAL_ARG_TYPES): Use TYPE_LANG_SLOT_1.\n+\t* dwarf2out.c (add_data_member_location_attribute): Check for\n+\tTREE_BINFO.\n+\t* tree.c (tree_node_kinds): Add \"binfos\".\n+\t(binfo_lang_slots): New.\n+\t(make_node_stat): Add TREE_BINFO.\n+\t(make_tree_binfo_stat): New.\n+\t(tree_node_structure): Add TREE_BINFO.\n+\t* tree.def (TREE_BINFO): New.\n+\t* tree.h (REC_OR_UNION_CHECK): Rename to ...\n+\t(RECORD_OR_UNION_CHECK): ... here.\n+\t(NOT_RECORD_OR_UNION_CHECK): New.\n+\t(TRE_VIA_VIRTUAL): Allow TREE_LIST or TREE_BINFO.\n+\t(TYPE_FIELDS, TYPE_METHODS, TYPE_VFIELD): Adjust for\n+\tRECORD_OR_UNION_CHECK.\n+\t(TYPE_BINFO): Use RECORD_OR_UNION_CHECK.\n+\t(TYPE_LANG_SLOT_1): New.\n+\t(BINFO_TYPE, BINFO_OFFSET, BINFO_VTABLE, BINFO_VIRTUALS,\n+\tBINFO_BASETYPES, TYPE_BINFO_BASETYPES, BINFO_VPTR_FIELD,\n+\tBINFO_BASEACCESSES, BINFO_INHERITANCE_CHAIN): Adjust.\n+\t(BINFO_ELTS): Remove.\n+\t(BINFO_LANG_SLOT): New.\n+\t(struct tree_binfo): New.\n+\t(binfo_lang_slots): Declare.\n+\t(enum tree_node_structure_enum): Add TS_BINFO.\n+\t(union tree_node): Add binfo.\n+\t(make_tree_binfo_stat): Declare.\n+\t(make_tree_binfo): New.\n+\t(enum tree_node_kind): Add binfo_kind.\n+\t\n+\t* objc/objc-act.c (start_class, objc_declare_protocols,\n+\tstart_protocols): Use TYPE_LANG_SLOT_1.\n+\t* objc/objc-act.h (CLASS_BINFO_ELTS, PROTOCOL_BINFO_ELTS): Rename\n+\tto ...\n+\t(CLASS_LANG_SLOT_ELTS, PROTOCOL_LANG_SLOT_ELTS): ... here.\n+\t(CLASS_IVARS, CLASS_RAW_IVARS, CLASS_STATIC_TEMPLATE,\n+\tCLASS_CATEGORY_LIST, CLASS_PROTOCOL_LIST, CLASS_OWN_IVARS,\n+\tPROTOCOL_LIST, PROTOCOL_FORWARD_DECL): Use TYPE_LANG_SLOT_1.\n+\n 2004-07-05  Steven Bosscher  <stevenb@suse.de>\n \n \t* rtl.h (struct rtx_def): Remove the integrated flag."}, {"sha": "ad731d422a438c78e43def400df0fed8fabfa349", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -114,7 +114,7 @@ struct lang_type GTY(())\n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions\n    without prototypes.  */\n-#define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_BINFO (NODE)\n+#define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_LANG_SLOT_1 (NODE)\n \n /* Save and restore the variables in this file and elsewhere\n    that keep track of the progress of compilation of the current function."}, {"sha": "f611cb3fce5aa1ff805e002a7a64394dcdbc25c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -1,3 +1,21 @@\n+2004-07-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* call.c (enforce_access): Expect TREE_BINFO.\n+\t* class.c (binfo_ctor_vtable): Check TREE_BINFO.\n+\t* cp-tree.h (RECORD_OR_UNION_TYPE_CHECK): Remove.\n+\t(BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX, BINFO_PRIMARY_BASE_OF):\n+\tAdjust.\n+\t(BINFO_LANG_ELTS): Remove.\n+\t(BINFO_LANG_SLOTS): New.\n+\t(TYPE_RAISES_EXCEPTIONS, ENUM_TEMPLATE_INFO): Use TYPE_LANG_SLOT_1.\n+\t(CLASSTYPE_TEMPLATE_INFO): Adjust.\n+\t* pt.c (tsubst): Split TREE_BINFO case from TREE_VEC case.\n+\t* search.c (lookup_member): Check TREE_BINFO.\n+\t* semantics.c (perform_or_defer_access_check): Likewise.\n+\t(check_accessibility_of_qualified_id): Check\n+\tdeferred_access_no_check.\n+\t* tree.c (make_binfo): Use make_tree_binfo.\n+\n 2004-07-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* method.c (implicitly_declare_fn): Set linkage of generated"}, {"sha": "82355c2941c5928895bb52e24420669b83c7ab4d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -4049,7 +4049,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n bool\n enforce_access (tree basetype_path, tree decl)\n {\n-  my_friendly_assert (TREE_CODE (basetype_path) == TREE_VEC, 20030624);\n+  my_friendly_assert (TREE_CODE (basetype_path) == TREE_BINFO, 20030624);\n   \n   if (!accessible_p (basetype_path, decl))\n     {"}, {"sha": "85f8864a206622885278a257d72a169e2476d34d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -6873,7 +6873,7 @@ binfo_ctor_vtable (tree binfo)\n       vt = BINFO_VTABLE (binfo);\n       if (TREE_CODE (vt) == TREE_LIST)\n \tvt = TREE_VALUE (vt);\n-      if (TREE_CODE (vt) == TREE_VEC)\n+      if (TREE_CODE (vt) == TREE_BINFO)\n \tbinfo = vt;\n       else\n \tbreak;"}, {"sha": "4ae4f4496638a7033521da135323ae5b5c1c76ea", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -119,7 +119,7 @@ struct diagnostic_context;\n      forth as a substitute for the mark bits provided in `lang_type'.\n      At present, only the six low-order bits are used.\n \n-   TYPE_BINFO\n+   TYPE_LANG_SLOT_1\n      For an ENUMERAL_TYPE, this is ENUM_TEMPLATE_INFO.\n      For a FUNCTION_TYPE or METHOD_TYPE, this is TYPE_RAISES_EXCEPTIONS\n \n@@ -169,9 +169,6 @@ struct diagnostic_context;\n #define VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK(NODE) \\\n   TREE_CHECK4(NODE,VAR_DECL,FUNCTION_DECL,TYPE_DECL,TEMPLATE_DECL)\n \n-#define RECORD_OR_UNION_TYPE_CHECK(NODE) \\\n-  TREE_CHECK2(NODE,RECORD_TYPE,UNION_TYPE)\n-\n #define BOUND_TEMPLATE_TEMPLATE_PARM_TYPE_CHECK(NODE) \\\n   TREE_CHECK(NODE,BOUND_TEMPLATE_TEMPLATE_PARM)\n \n@@ -1436,21 +1433,21 @@ struct lang_type GTY(())\n \n /* The index in the VTT where this subobject's sub-VTT can be found.\n    NULL_TREE if there is no sub-VTT.  */\n-#define BINFO_SUBVTT_INDEX(NODE) TREE_VEC_ELT (NODE, BINFO_ELTS + 0)\n+#define BINFO_SUBVTT_INDEX(NODE) BINFO_LANG_SLOT(NODE, 0)\n \n /* The index in the VTT where the vptr for this subobject can be\n    found.  NULL_TREE if there is no secondary vptr in the VTT.  */\n-#define BINFO_VPTR_INDEX(NODE) TREE_VEC_ELT (NODE, BINFO_ELTS + 1)\n+#define BINFO_VPTR_INDEX(NODE) BINFO_LANG_SLOT(NODE, 1)\n \n /* The binfo of which NODE is a primary base.  (This is different from\n    BINFO_INHERITANCE_CHAIN for virtual base because a virtual base is\n    sometimes a primary base for a class for which it is not an\n    immediate base.)  */\n-#define BINFO_PRIMARY_BASE_OF(NODE) TREE_VEC_ELT (NODE, BINFO_ELTS + 2)\n+#define BINFO_PRIMARY_BASE_OF(NODE) BINFO_LANG_SLOT(NODE, 2)\n \n /* C++ binfos have 3 additional entries.  */\n \n-#define BINFO_LANG_ELTS (BINFO_ELTS + 3)\n+#define BINFO_LANG_SLOTS (3)\n \n /* Nonzero if this binfo is for a dependent base - one that should not\n    be searched.  */\n@@ -1528,7 +1525,7 @@ struct lang_type GTY(())\n    this type can raise.  Each TREE_VALUE is a _TYPE.  The TREE_VALUE\n    will be NULL_TREE to indicate a throw specification of `()', or\n    no exceptions allowed.  */\n-#define TYPE_RAISES_EXCEPTIONS(NODE) TYPE_BINFO (NODE)\n+#define TYPE_RAISES_EXCEPTIONS(NODE) TYPE_LANG_SLOT_1 (NODE)\n \n /* For FUNCTION_TYPE or METHOD_TYPE, return 1 iff it is declared `throw()'.  */\n #define TYPE_NOTHROW_P(NODE) \\\n@@ -2087,13 +2084,14 @@ struct lang_decl GTY(())\n \n /* Template information for a RECORD_TYPE or UNION_TYPE.  */\n #define CLASSTYPE_TEMPLATE_INFO(NODE) \\\n-  (LANG_TYPE_CLASS_CHECK (RECORD_OR_UNION_TYPE_CHECK (NODE))->template_info)\n+  (LANG_TYPE_CLASS_CHECK (RECORD_OR_UNION_CHECK (NODE))->template_info)\n \n /* Template information for an ENUMERAL_TYPE.  Although an enumeration may\n    not be a primary template, it may be declared within the scope of a\n    primary template and the enumeration constants may depend on\n    non-type template parameters.  */\n-#define ENUM_TEMPLATE_INFO(NODE) (TYPE_BINFO (ENUMERAL_TYPE_CHECK (NODE)))\n+#define ENUM_TEMPLATE_INFO(NODE) \\\n+  (TYPE_LANG_SLOT_1 (ENUMERAL_TYPE_CHECK (NODE)))\n \n /* Template information for a template template parameter.  */\n #define TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO(NODE) \\"}, {"sha": "ca52f65fded3260d90049df7714583a66e52067a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -6877,29 +6877,30 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  return t;\n \treturn hash_tree_cons (purpose, value, chain);\n       }\n-    case TREE_VEC:\n-      if (type != NULL_TREE)\n-\t{\n-\t  /* A binfo node.  We always need to make a copy, of the node\n-\t     itself and of its BINFO_BASETYPES.  */\n-\n-\t  t = copy_node (t);\n-\n-\t  /* Make sure type isn't a typedef copy.  */\n-\t  type = BINFO_TYPE (TYPE_BINFO (type));\n+      \n+    case TREE_BINFO:\n+      /* A binfo node.  We always need to make a copy, of the node\n+\t itself and of its BINFO_BASETYPES.  */\n+      my_friendly_assert (type, 20040628);\n+      \n+      t = copy_node (t);\n \n-\t  TREE_TYPE (t) = complete_type (type);\n-\t  if (IS_AGGR_TYPE (type))\n-\t    {\n-\t      BINFO_VTABLE (t) = TYPE_BINFO_VTABLE (type);\n-\t      BINFO_VIRTUALS (t) = TYPE_BINFO_VIRTUALS (type);\n-\t      if (TYPE_BINFO_BASETYPES (type) != NULL_TREE)\n-\t\tBINFO_BASETYPES (t) = copy_node (TYPE_BINFO_BASETYPES (type));\n-\t    }\n-\t  return t;\n+      /* Make sure type isn't a typedef copy.  */\n+      type = BINFO_TYPE (TYPE_BINFO (type));\n+      \n+      TREE_TYPE (t) = complete_type (type);\n+      if (IS_AGGR_TYPE (type))\n+\t{\n+\t  BINFO_VTABLE (t) = TYPE_BINFO_VTABLE (type);\n+\t  BINFO_VIRTUALS (t) = TYPE_BINFO_VIRTUALS (type);\n+\t  if (TYPE_BINFO_BASETYPES (type) != NULL_TREE)\n+\t    BINFO_BASETYPES (t) = copy_node (TYPE_BINFO_BASETYPES (type));\n \t}\n+      return t;\n \n-      /* Otherwise, a vector of template arguments.  */\n+    case TREE_VEC:\n+      /* A vector of template arguments.  */\n+      my_friendly_assert (!type, 20040628);\n       return tsubst_template_args (t, args, complain, in_decl);\n \n     case POINTER_TYPE:"}, {"sha": "b28d7a22922f1c19ea4ab840b23296383d904b59", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -1248,7 +1248,7 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type)\n \n   my_friendly_assert (TREE_CODE (name) == IDENTIFIER_NODE, 20030624);\n \n-  if (TREE_CODE (xbasetype) == TREE_VEC)\n+  if (TREE_CODE (xbasetype) == TREE_BINFO)\n     {\n       type = BINFO_TYPE (xbasetype);\n       basetype_path = xbasetype;"}, {"sha": "15cd946aa20e884556fac3c52c8470db107edff5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -306,7 +306,7 @@ perform_or_defer_access_check (tree binfo, tree decl)\n   if (deferred_access_no_check)\n     return;\n   \n-  my_friendly_assert (TREE_CODE (binfo) == TREE_VEC, 20030623);\n+  my_friendly_assert (TREE_CODE (binfo) == TREE_BINFO, 20030623);\n \n   ptr = VEC_last (deferred_access, deferred_access_stack);\n   \n@@ -1337,6 +1337,10 @@ check_accessibility_of_qualified_id (tree decl,\n {\n   tree scope;\n   tree qualifying_type = NULL_TREE;\n+\n+  /* If we're not checking, return imediately.  */\n+  if (deferred_access_no_check)\n+    return;\n   \n   /* Determine the SCOPE of DECL.  */\n   scope = context_for_name_lookup (decl);"}, {"sha": "c91164db75b62138ad89b94d4d7a4600fa00725a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -771,10 +771,10 @@ hash_chainon (tree list1, tree list2)\n tree\n make_binfo (tree offset, tree binfo, tree vtable, tree virtuals)\n {\n-  tree new_binfo = make_tree_vec (BINFO_LANG_ELTS);\n+  tree new_binfo = make_tree_binfo (BINFO_LANG_SLOTS);\n   tree type;\n \n-  if (TREE_CODE (binfo) == TREE_VEC)\n+  if (TREE_CODE (binfo) == TREE_BINFO)\n     {\n       type = BINFO_TYPE (binfo);\n       BINFO_DEPENDENT_BASE_P (new_binfo) = BINFO_DEPENDENT_BASE_P (binfo);"}, {"sha": "f954b828e41827cf9784c786117354f1afbf0353", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -9468,7 +9468,7 @@ add_data_member_location_attribute (dw_die_ref die, tree decl)\n   HOST_WIDE_INT offset;\n   dw_loc_descr_ref loc_descr = 0;\n \n-  if (TREE_CODE (decl) == TREE_VEC)\n+  if (TREE_CODE (decl) == TREE_BINFO)\n     {\n       /* We're working on the TAG_inheritance for a base class.  */\n       if (TREE_VIA_VIRTUAL (decl) && is_cxx ())"}, {"sha": "671c865650f0533e544115c1283cea76b3df071b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -1,3 +1,9 @@\n+2004-07-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (make_class): Use make_tree_binfo.\n+\t(set_super_info, add_interface_do): Likewise.\n+\t* java-tree.h (CLASS_HAS_SUPER_FLAG): Expect a BINFO.\n+\n 2004-07-04  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* verify.c: Correct array element access formatting thinko.\n@@ -8161,7 +8167,7 @@\n \tproperly initialize `finished_label'. Don't emit gotos for empty\n \ttry statements.\n \n-2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+2000-03-19  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n \n \t* except.c (emit_handlers): Clear catch_clauses_last.\n "}, {"sha": "1083efb1792aa043ded5310ee70a351442342378", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -318,7 +318,7 @@ make_class (void)\n {\n   tree type;\n   type = make_node (RECORD_TYPE);\n-  TYPE_BINFO (type) = make_tree_vec (BINFO_ELTS);\n+  TYPE_BINFO (type) = make_tree_binfo (0);\n   MAYBE_CREATE_TYPE_TYPE_LANG_SPECIFIC (type);\n \n   return type;\n@@ -480,7 +480,7 @@ set_super_info (int access_flags, tree this_class,\n   TYPE_BINFO_BASETYPES (this_class) = make_tree_vec (total_supers);\n   if (super_class)\n     {\n-      tree super_binfo = make_tree_vec (BINFO_ELTS);\n+      tree super_binfo = make_tree_binfo (0);\n       BINFO_TYPE (super_binfo) = super_class;\n       BINFO_OFFSET (super_binfo) = integer_zero_node;\n       TREE_VEC_ELT (BINFO_BASETYPES (TYPE_BINFO (this_class)), 0)\n@@ -612,7 +612,7 @@ common_enclosing_context_p (tree type1, tree type2)\n static void\n add_interface_do (tree basetype_vec, tree interface_class, int i)\n {\n-  tree interface_binfo = make_tree_vec (BINFO_ELTS);\n+  tree interface_binfo = make_tree_binfo (0);\n   BINFO_TYPE (interface_binfo) = interface_class;\n   BINFO_OFFSET (interface_binfo) = integer_zero_node;\n   BINFO_VPTR_FIELD (interface_binfo) = integer_zero_node;"}, {"sha": "792f2acceab0acf0360755e4e2da313fdb0a758c", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -48,7 +48,7 @@ struct JCF;\n       SUPPRESS_UNREACHABLE_ERROR (for other _EXPR nodes)\n       ANONYMOUS_CLASS_P (in RECORD_TYPE)\n       ARG_FINAL_P (in TREE_LIST)\n-   1: CLASS_HAS_SUPER_FLAG (in TREE_VEC).\n+   1: CLASS_HAS_SUPER_FLAG (in TREE_BINFO).\n       IS_A_CLASSFILE_NAME (in IDENTIFIER_NODE)\n       COMPOUND_ASSIGN_P (in EXPR (binop_*))\n       LOCAL_CLASS_P (in RECORD_TYPE)\n@@ -122,7 +122,7 @@ struct JCF;\n \n /* True if the class whose TYPE_BINFO this is has a superclass.\n    (True of all classes except Object.) */\n-#define CLASS_HAS_SUPER_FLAG(BINFO) TREE_LANG_FLAG_1 (TREE_VEC_CHECK (BINFO))\n+#define CLASS_HAS_SUPER_FLAG(BINFO) TREE_LANG_FLAG_1 (TREE_BINFO_CHECK (BINFO))\n #define CLASS_HAS_SUPER(TYPE) CLASS_HAS_SUPER_FLAG (TYPE_BINFO (TYPE))\n \n /* Return the supertype of class TYPE, or NULL_TREE is it has none. */"}, {"sha": "4526e1845ce0cc1a5af9d1173bd0d1871dbaf103", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -6761,7 +6761,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n     }\n \n   class = make_node (code);\n-  TYPE_BINFO (class) = make_tree_vec (CLASS_BINFO_ELTS);\n+  TYPE_LANG_SLOT_1 (class) = make_tree_vec (CLASS_LANG_SLOT_ELTS);\n \n   CLASS_NAME (class) = class_name;\n   CLASS_SUPER_NAME (class) = super_name;\n@@ -7050,7 +7050,8 @@ objc_declare_protocols (tree names)\n \t{\n \t  tree protocol = make_node (PROTOCOL_INTERFACE_TYPE);\n \n-\t  TYPE_BINFO (protocol) = make_tree_vec (2);\n+\t  TYPE_LANG_SLOT_1 (protocol)\n+\t    = make_tree_vec (PROTOCOL_LANG_SLOT_ELTS);\n \t  PROTOCOL_NAME (protocol) = name;\n \t  PROTOCOL_LIST (protocol) = NULL_TREE;\n \t  add_protocol (protocol);\n@@ -7081,7 +7082,7 @@ start_protocol (enum tree_code code, tree name, tree list)\n   if (!protocol)\n     {\n       protocol = make_node (code);\n-      TYPE_BINFO (protocol) = make_tree_vec (2);\n+      TYPE_LANG_SLOT_1 (protocol) = make_tree_vec (PROTOCOL_LANG_SLOT_ELTS);\n \n       PROTOCOL_NAME (protocol) = name;\n       PROTOCOL_LIST (protocol) = lookup_and_install_protocols (list);"}, {"sha": "dab0950c3f1af48b3a5d3e98475ba50124c40f1d", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -82,8 +82,8 @@ tree build_encode_expr (tree);\n \n /* Objective-C structures */\n \n-#define CLASS_BINFO_ELTS\t\t6\n-#define PROTOCOL_BINFO_ELTS\t\t2\n+#define CLASS_LANG_SLOT_ELTS\t\t6\n+#define PROTOCOL_LANG_SLOT_ELTS\t\t2\n \n /* KEYWORD_DECL */\n #define KEYWORD_KEY_NAME(DECL) ((DECL)->decl.name)\n@@ -101,19 +101,19 @@ tree build_encode_expr (tree);\n    PROTOCOL_INTERFACE_TYPE */\n #define CLASS_NAME(CLASS) ((CLASS)->type.name)\n #define CLASS_SUPER_NAME(CLASS) (TYPE_CHECK (CLASS)->type.context)\n-#define CLASS_IVARS(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 0)\n-#define CLASS_RAW_IVARS(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 1)\n+#define CLASS_IVARS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 0)\n+#define CLASS_RAW_IVARS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 1)\n #define CLASS_NST_METHODS(CLASS) ((CLASS)->type.minval)\n #define CLASS_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n-#define CLASS_STATIC_TEMPLATE(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 2)\n-#define CLASS_CATEGORY_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 3)\n-#define CLASS_PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 4)\n-#define CLASS_OWN_IVARS(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 5)\n+#define CLASS_STATIC_TEMPLATE(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 2)\n+#define CLASS_CATEGORY_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 3)\n+#define CLASS_PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 4)\n+#define CLASS_OWN_IVARS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 5)\n #define PROTOCOL_NAME(CLASS) ((CLASS)->type.name)\n-#define PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 0)\n+#define PROTOCOL_LIST(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 0)\n #define PROTOCOL_NST_METHODS(CLASS) ((CLASS)->type.minval)\n #define PROTOCOL_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n-#define PROTOCOL_FORWARD_DECL(CLASS) TREE_VEC_ELT (TYPE_BINFO (CLASS), 1)\n+#define PROTOCOL_FORWARD_DECL(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 1)\n #define PROTOCOL_DEFINED(CLASS) TREE_USED (CLASS)\n /* We need to distinguish TYPE_PROTOCOL_LISTs from TYPE_CONTEXTs, both of which\n    are stored in the same accessor slot.  */"}, {"sha": "a4bbd668bb324365def7ef001875dfab66649270", "filename": "gcc/tree.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -71,6 +71,7 @@ static const char * const tree_node_kind_names[] = {\n   \"perm_tree_lists\",\n   \"temp_tree_lists\",\n   \"vecs\",\n+  \"binfos\",\n   \"phi_nodes\",\n   \"ssa names\",\n   \"random kinds\",\n@@ -93,6 +94,9 @@ struct type_hash GTY(())\n   tree type;\n };\n \n+/* Additional language-dependent binfo slots.  */\n+unsigned binfo_lang_slots;\n+\n /* Initial size of the hash table (rounded to next prime).  */\n #define TYPE_HASH_INITIAL_SIZE 1000\n \n@@ -267,6 +271,8 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \tkind = id_kind;\n       else if (code == TREE_VEC)\n \tkind = vec_kind;\n+      else if (code == TREE_BINFO)\n+\tkind = binfo_kind;\n       else if (code == PHI_NODE)\n \tkind = phi_kind;\n       else if (code == SSA_NAME)\n@@ -573,6 +579,39 @@ build_complex (tree type, tree real, tree imag)\n   return t;\n }\n \n+/* Build a BINFO with LEN language slots.  */\n+\n+tree\n+make_tree_binfo_stat (unsigned lang_slots MEM_STAT_DECL)\n+{\n+  tree t;\n+  static unsigned length;\n+  \n+  if (!length)\n+    {\n+      length = (offsetof (struct tree_binfo, lang_slots)\n+\t\t+ (sizeof (((struct tree_binfo *)0)->lang_slots[0])\n+\t\t   * lang_slots));\n+      binfo_lang_slots = lang_slots;\n+    }\n+  else if (binfo_lang_slots != lang_slots)\n+    abort ();\n+  \n+#ifdef GATHER_STATISTICS\n+  tree_node_counts[(int) binfo_kind]++;\n+  tree_node_sizes[(int) binfo_kind] += length;\n+#endif\n+\n+  t = ggc_alloc_zone_stat (length, tree_zone PASS_MEM_STAT);\n+\n+  memset (t, 0, length);\n+\n+  TREE_SET_CODE (t, TREE_BINFO);\n+\n+  return t;\n+}\n+\n+\n /* Build a newly constructed TREE_VEC node of length LEN.  */\n \n tree\n@@ -1493,6 +1532,7 @@ tree_node_structure (tree t)\n     case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n     case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n     case BLOCK:\t\t\treturn TS_BLOCK;\n+    case TREE_BINFO:\t\treturn TS_BINFO;\n     case VALUE_HANDLE:\t\treturn TS_VALUE_HANDLE;\n \n     default:"}, {"sha": "79dcd94ff183f911a34b425ee1179e98b2978854", "filename": "gcc/tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -903,6 +903,10 @@ DEFTREECODE (STATEMENT_LIST, \"statement_list\", 'x', 0)\n    the same value, they will be assigned the same value handle.  */\n DEFTREECODE (VALUE_HANDLE, \"value_handle\", 'x', 0)\n \n+/* Base class information. Holds information about a class as a\n+   baseclass of itself or another class.  */\n+DEFTREECODE (TREE_BINFO, \"tree_binfo\", 'x', 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "fc854d5c616a4698215ac9f12ff4129428409875", "filename": "gcc/tree.h", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b4aca6a30bfa889277649da9f092d070a6a687/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=95b4aca6a30bfa889277649da9f092d070a6a687", "patch": "@@ -203,7 +203,7 @@ struct tree_common GTY(())\n        TREE_STATIC in\n            VAR_DECL, FUNCTION_DECL, CONSTRUCTOR, ADDR_EXPR\n        TREE_VIA_VIRTUAL in\n-           TREE_LIST or TREE_VEC\n+           TREE_LIST or TREE_BINFO\n        TREE_CONSTANT_OVERFLOW in\n            INTEGER_CST, REAL_CST, COMPLEX_CST, VECTOR_CST\n        TREE_SYMBOL_REFERENCED in\n@@ -558,9 +558,11 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #define SET_OR_ARRAY_CHECK(T) \\\n   TREE_CHECK2 (T, ARRAY_TYPE, SET_TYPE)\n \n-#define REC_OR_UNION_CHECK(T)\t\\\n+#define RECORD_OR_UNION_CHECK(T)\t\\\n   TREE_CHECK3 (T, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE)\n-\n+#define NOT_RECORD_OR_UNION_CHECK(T) \\\n+  TREE_NOT_CHECK3 (T, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE)\n+    \n #define NUMERICAL_TYPE_CHECK(T)\t\t\t\t\t\\\n   TREE_CHECK5 (T, INTEGER_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE,\t\\\n \t       CHAR_TYPE, REAL_TYPE)\n@@ -736,10 +738,10 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    implicitly and should not lead to any sort of warning.  */\n #define TREE_NO_WARNING(NODE) ((NODE)->common.nowarning_flag)\n \n-/* Nonzero for a TREE_LIST or TREE_VEC node means that the derivation\n+/* Nonzero for a TREE_LIST or TREE_BINFO node means that the derivation\n    chain is via a `virtual' declaration.  */\n #define TREE_VIA_VIRTUAL(NODE) \\\n-  (TREE_CHECK2 (NODE, TREE_LIST, TREE_VEC)->common.static_flag)\n+  (TREE_CHECK2 (NODE, TREE_LIST, TREE_BINFO)->common.static_flag)\n \n /* In an INTEGER_CST, REAL_CST, COMPLEX_CST, or VECTOR_CST this means\n    there was an overflow in folding.  This is distinct from\n@@ -1366,9 +1368,9 @@ struct tree_block GTY(())\n #define TYPE_ORIG_SIZE_TYPE(NODE) (INTEGER_TYPE_CHECK (NODE)->type.values)\n #define TYPE_VALUES(NODE) (ENUMERAL_TYPE_CHECK (NODE)->type.values)\n #define TYPE_DOMAIN(NODE) (SET_OR_ARRAY_CHECK (NODE)->type.values)\n-#define TYPE_FIELDS(NODE) (REC_OR_UNION_CHECK (NODE)->type.values)\n-#define TYPE_METHODS(NODE) (REC_OR_UNION_CHECK (NODE)->type.maxval)\n-#define TYPE_VFIELD(NODE) (REC_OR_UNION_CHECK (NODE)->type.minval)\n+#define TYPE_FIELDS(NODE) (RECORD_OR_UNION_CHECK (NODE)->type.values)\n+#define TYPE_METHODS(NODE) (RECORD_OR_UNION_CHECK (NODE)->type.maxval)\n+#define TYPE_VFIELD(NODE) (RECORD_OR_UNION_CHECK (NODE)->type.minval)\n #define TYPE_ARG_TYPES(NODE) (FUNC_OR_METHOD_CHECK (NODE)->type.values)\n #define TYPE_METHOD_BASETYPE(NODE) (FUNC_OR_METHOD_CHECK (NODE)->type.maxval)\n #define TYPE_OFFSET_BASETYPE(NODE) (OFFSET_TYPE_CHECK (NODE)->type.maxval)\n@@ -1393,10 +1395,12 @@ struct tree_block GTY(())\n    structure containing an array.  */\n #define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (VECTOR_TYPE_CHECK (NODE)->type.values)\n \n-/* For aggregate types, information about this type, as a base type\n-   for itself.  Used in a language-dependent way for types that are\n-   neither a RECORD_TYPE, QUAL_UNION_TYPE, nor a UNION_TYPE.  */\n-#define TYPE_BINFO(NODE) (TYPE_CHECK (NODE)->type.binfo)\n+/* For record and union types, information about this type, as a base type\n+   for itself. */\n+#define TYPE_BINFO(NODE) (RECORD_OR_UNION_CHECK(NODE)->type.binfo)\n+\n+/* For non record and union types, used in a language-dependent way.  */\n+#define TYPE_LANG_SLOT_1(NODE) (NOT_RECORD_OR_UNION_CHECK(NODE)->type.binfo)\n \n /* The (language-specific) typed-based alias set for this type.\n    Objects whose TYPE_ALIAS_SETs are different cannot alias each\n@@ -1594,29 +1598,29 @@ struct tree_type GTY(())\n    of D acting as a basetype for C by looking at C's binfo's basetypes.  */\n \n /* The actual data type node being inherited in this basetype.  */\n-#define BINFO_TYPE(NODE) TREE_TYPE (NODE)\n+#define BINFO_TYPE(NODE) TREE_TYPE (TREE_BINFO_CHECK(NODE))\n \n /* The offset where this basetype appears in its containing type.\n    BINFO_OFFSET slot holds the offset (in bytes)\n    from the base of the complete object to the base of the part of the\n    object that is allocated on behalf of this `type'.\n    This is always 0 except when there is multiple inheritance.  */\n \n-#define BINFO_OFFSET(NODE) TREE_VEC_ELT ((NODE), 1)\n+#define BINFO_OFFSET(NODE) (TREE_BINFO_CHECK(NODE)->binfo.offset)\n #define TYPE_BINFO_OFFSET(NODE) BINFO_OFFSET (TYPE_BINFO (NODE))\n #define BINFO_OFFSET_ZEROP(NODE) (integer_zerop (BINFO_OFFSET (NODE)))\n \n /* The virtual function table belonging to this basetype.  Virtual\n    function tables provide a mechanism for run-time method dispatching.\n    The entries of a virtual function table are language-dependent.  */\n \n-#define BINFO_VTABLE(NODE) TREE_VEC_ELT ((NODE), 2)\n+#define BINFO_VTABLE(NODE) (TREE_BINFO_CHECK(NODE)->binfo.vtable)\n #define TYPE_BINFO_VTABLE(NODE) BINFO_VTABLE (TYPE_BINFO (NODE))\n \n /* The virtual functions in the virtual function table.  This is\n    a TREE_LIST that is used as an initial approximation for building\n    a virtual function table for this basetype.  */\n-#define BINFO_VIRTUALS(NODE) TREE_VEC_ELT ((NODE), 3)\n+#define BINFO_VIRTUALS(NODE) (TREE_BINFO_CHECK(NODE)->binfo.virtuals)\n #define TYPE_BINFO_VIRTUALS(NODE) BINFO_VIRTUALS (TYPE_BINFO (NODE))\n \n /* A vector of binfos for the direct basetypes inherited by this\n@@ -1630,8 +1634,8 @@ struct tree_type GTY(())\n    base types at the end of this TREE_VEC (instead of using\n    another TREE_VEC).  This would simplify the calculation\n    of how many basetypes a given type had.  */\n-#define BINFO_BASETYPES(NODE) TREE_VEC_ELT ((NODE), 4)\n-#define TYPE_BINFO_BASETYPES(NODE) TREE_VEC_ELT (TYPE_BINFO (NODE), 4)\n+#define BINFO_BASETYPES(NODE) (TREE_BINFO_CHECK(NODE)->binfo.base_types)\n+#define TYPE_BINFO_BASETYPES(NODE) BINFO_BASETYPES (TYPE_BINFO (NODE))\n \n /* The number of basetypes for NODE.  */\n #define BINFO_N_BASETYPES(NODE) \\\n@@ -1647,18 +1651,18 @@ struct tree_type GTY(())\n    base.  The actual contents are language-dependent.  In the C++\n    front-end this field is an INTEGER_CST giving an offset into the\n    vtable where the offset to the virtual base can be found.  */\n-#define BINFO_VPTR_FIELD(NODE) TREE_VEC_ELT (NODE, 5)\n+#define BINFO_VPTR_FIELD(NODE) (TREE_BINFO_CHECK(NODE)->binfo.vptr_field)\n \n /* Indicates the accesses this binfo has to its bases. The values are\n    access_public_node, access_protected_node or access_private_node.\n    If this array is not present, public access is implied.  */\n-#define BINFO_BASEACCESSES(NODE) TREE_VEC_ELT ((NODE), 6)\n+#define BINFO_BASEACCESSES(NODE) (TREE_BINFO_CHECK(NODE)->binfo.base_accesses)\n #define BINFO_BASEACCESS(NODE,N) TREE_VEC_ELT (BINFO_BASEACCESSES(NODE), (N))\n \n /* Number of language independent elements in a binfo.  Languages may\n    add additional trailing elements.  */\n \n-#define BINFO_ELTS 7\n+#define BINFO_LANG_SLOT(NODE,N) (TREE_BINFO_CHECK(NODE)->binfo.lang_slots[N])\n \n /* Slot used to build a chain that represents a use of inheritance.\n    For example, if X is derived from Y, and Y is derived from Z,\n@@ -1671,7 +1675,25 @@ struct tree_type GTY(())\n    consing new space pointing to binfo nodes).\n    It is up to the language-dependent front-ends to maintain\n    this information as necessary.  */\n-#define BINFO_INHERITANCE_CHAIN(NODE) TREE_VEC_ELT ((NODE), 0)\n+#define BINFO_INHERITANCE_CHAIN(NODE) \\\n+\t(TREE_BINFO_CHECK(NODE)->binfo.inheritance)\n+\n+struct tree_binfo GTY (())\n+{\n+  struct tree_common common;\n+\n+  tree offset;\n+  tree vtable;\n+  tree virtuals;\n+  tree base_types;\n+  tree vptr_field;\n+  tree base_accesses;\n+  tree inheritance;\n+\n+  tree GTY ((length (\"binfo_lang_slots\"))) lang_slots[1];\n+};\n+extern GTY (()) unsigned binfo_lang_slots;\n+\n \f\n /* Define fields and accessors for nodes representing declared names.  */\n \n@@ -2313,6 +2335,7 @@ enum tree_node_structure_enum {\n   TS_SSA_NAME,\n   TS_PHI_NODE,\n   TS_BLOCK,\n+  TS_BINFO,\n   TS_STATEMENT_LIST,\n   TS_VALUE_HANDLE,\n   LAST_TS_ENUM\n@@ -2340,6 +2363,7 @@ union tree_node GTY ((ptr_alias (union lang_tree_node),\n   struct tree_ssa_name GTY ((tag (\"TS_SSA_NAME\"))) ssa_name;\n   struct tree_phi_node GTY ((tag (\"TS_PHI_NODE\"))) phi;\n   struct tree_block GTY ((tag (\"TS_BLOCK\"))) block;\n+  struct tree_binfo GTY ((tag (\"TS_BINFO\"))) binfo;\n   struct tree_statement_list GTY ((tag (\"TS_STATEMENT_LIST\"))) stmt_list;\n   struct tree_value_handle GTY ((tag (\"TS_VALUE_HANDLE\"))) value_handle;\n };\n@@ -2587,6 +2611,10 @@ extern tree copy_node_stat (tree MEM_STAT_DECL);\n \n extern tree copy_list (tree);\n \n+/* Make a BINFO.  */\n+extern tree make_tree_binfo_stat (unsigned MEM_STAT_DECL);\n+#define make_tree_binfo(t) make_tree_binfo_stat (t MEM_STAT_INFO)\n+\n /* Make a TREE_VEC.  */\n \n extern tree make_tree_vec_stat (int MEM_STAT_DECL);\n@@ -3727,6 +3755,7 @@ typedef enum\n   perm_list_kind,\n   temp_list_kind,\n   vec_kind,\n+  binfo_kind,\n   phi_kind,\n   ssa_name_kind,\n   x_kind,"}]}