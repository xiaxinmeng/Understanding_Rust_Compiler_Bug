{"sha": "5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlN2MzY2YyZTIxNTM0ZGRhNmFmNTdjNWMzNDMxOGQzMGQwYzk4YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T11:48:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T11:48:57Z"}, "message": "[multiple changes]\n\n2015-02-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sysdep.c, expect.c, s-oscons-tmplt.c, gsocket.h, adaint.c: Remove\n\tobsolete references to RTX, nucleus, VMS.\n\n2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Fix_Error): For an illegal Type_Invariant'Class\n\taspect, use name that mentions Class explicitly, rather than\n\tcompiler-internal name.\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Add documentation for -gnatd.2 (allow statements\n\tin decl sequences).\n\t* par-ch3.adb (P_Identifier_Declarations): Handle\n\tstatement appearing where declaration expected more cleanly.\n\t(Statement_When_Declaration_Expected): Implement debug flag\n\t-gnatd.2.\n\n2015-02-20  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-dinopr.ads: Add spec for this package (Unimplemented_Unit).\n\t* a-dispat.ads (Yield): Include procedure added in Ada 2012.\n\t* a-dispat.adb (Yield): Implement procedure added in Ada 2012.\n\t* impunit.adb (Non_Imp_File_Names_05): Mark unit a-dinopr.ads as\n\tdefined by Ada 2005.\n\t* snames.ads-tmpl (Name_Non_Preemptive_FIFO_Within_Priorities):\n\tThis is the correct name for the dispatching policy (FIFO was\n\tmissing).\n\n2015-02-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_res.adb (Resolve_Type_Conversion): If the type of the\n\toperand is the limited-view of a class-wide type then recover\n\tthe class-wide type of the non-limited view.\n\nFrom-SVN: r220852", "tree": {"sha": "b3519027eb878c4eb6330ce33a284ccc86f264f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3519027eb878c4eb6330ce33a284ccc86f264f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/comments", "author": null, "committer": null, "parents": [{"sha": "5865a63df4a19147d7a5ae804e97aa79371dfd7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5865a63df4a19147d7a5ae804e97aa79371dfd7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5865a63df4a19147d7a5ae804e97aa79371dfd7b"}], "stats": {"total": 512, "additions": 269, "deletions": 243}, "files": [{"sha": "cdaacd253307c6f7482ba7ce21555c47136019bd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -1,3 +1,40 @@\n+2015-02-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sysdep.c, expect.c, s-oscons-tmplt.c, gsocket.h, adaint.c: Remove\n+\tobsolete references to RTX, nucleus, VMS.\n+\n+2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Fix_Error): For an illegal Type_Invariant'Class\n+\taspect, use name that mentions Class explicitly, rather than\n+\tcompiler-internal name.\n+\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Add documentation for -gnatd.2 (allow statements\n+\tin decl sequences).\n+\t* par-ch3.adb (P_Identifier_Declarations): Handle\n+\tstatement appearing where declaration expected more cleanly.\n+\t(Statement_When_Declaration_Expected): Implement debug flag\n+\t-gnatd.2.\n+\n+2015-02-20  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-dinopr.ads: Add spec for this package (Unimplemented_Unit).\n+\t* a-dispat.ads (Yield): Include procedure added in Ada 2012.\n+\t* a-dispat.adb (Yield): Implement procedure added in Ada 2012.\n+\t* impunit.adb (Non_Imp_File_Names_05): Mark unit a-dinopr.ads as\n+\tdefined by Ada 2005.\n+\t* snames.ads-tmpl (Name_Non_Preemptive_FIFO_Within_Priorities):\n+\tThis is the correct name for the dispatching policy (FIFO was\n+\tmissing).\n+\n+2015-02-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): If the type of the\n+\toperand is the limited-view of a class-wide type then recover\n+\tthe class-wide type of the non-limited view.\n+\n 2015-02-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Remove references to nucleus."}, {"sha": "396aeaeae971e820570f92016d86b1c69bd8247a", "filename": "gcc/ada/a-dinopr.ads", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fa-dinopr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fa-dinopr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dinopr.ads?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -0,0 +1,31 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--       A D A . D I S P A T C H I N G . N O N _ P R E E M P T I V E        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This unit is not implemented in typical GNAT implementations that lie on\n+--  top of operating systems, because it is infeasible to implement in such\n+--  environments.\n+\n+--  If a target environment provides appropriate support for this package,\n+--  then the Unimplemented_Unit pragma should be removed from this spec and\n+--  an appropriate body provided.\n+\n+package Ada.Dispatching.Non_Preemptive is\n+   pragma Preelaborate (Non_Preemptive);\n+\n+   pragma Unimplemented_Unit;\n+\n+   procedure Yield_To_Higher;\n+   procedure Yield_To_Same_Or_Higher renames Yield;\n+end Ada.Dispatching.Non_Preemptive;"}, {"sha": "b00a17ffcb78bef8e949c34d5dcacd35cad996e1", "filename": "gcc/ada/a-dispat.adb", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fa-dispat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fa-dispat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dispat.adb?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                       A D A . D I S P A T C H I N G                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2015, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Exceptions;\n+with System.Tasking;\n+with System.Task_Primitives.Operations;\n+\n+package body Ada.Dispatching is\n+\n+   procedure Yield is\n+      Self_Id : constant System.Tasking.Task_Id :=\n+         System.Task_Primitives.Operations.Self;\n+\n+   begin\n+      --  If pragma Detect_Blocking is active, Program_Error must be\n+      --  raised if this potentially blocking operation is called from a\n+      --  protected action.\n+\n+      if System.Tasking.Detect_Blocking\n+        and then Self_Id.Common.Protected_Action_Nesting > 0\n+      then\n+         Ada.Exceptions.Raise_Exception\n+           (Program_Error'Identity, \"potentially blocking operation\");\n+      else\n+         System.Task_Primitives.Operations.Yield;\n+      end if;\n+   end Yield;\n+\n+end Ada.Dispatching;"}, {"sha": "a1939409d146aabbc395dbcc4a0c5cf70ef24b04", "filename": "gcc/ada/a-dispat.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fa-dispat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fa-dispat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dispat.ads?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -14,7 +14,9 @@\n ------------------------------------------------------------------------------\n \n package Ada.Dispatching is\n-   pragma Pure (Dispatching);\n+   pragma Preelaborate (Dispatching);\n+\n+   procedure Yield;\n \n    Dispatching_Policy_Error : exception;\n end Ada.Dispatching;"}, {"sha": "05c805509ebac64335b11d56bcd9e5e7a3858248", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 38, "deletions": 109, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -108,16 +108,11 @@ extern \"C\" {\n \n #if defined (__MINGW32__) || defined (__CYGWIN__)\n \n-#if defined (RTX)\n-#include <windows.h>\n-#include <Rtapi.h>\n-#else\n #include \"mingw32.h\"\n \n /* Current code page and CCS encoding to use, set in initialize.c.  */\n UINT CurrentCodePage;\n UINT CurrentCCSEncoding;\n-#endif\n \n #include <sys/utime.h>\n \n@@ -157,7 +152,7 @@ UINT CurrentCCSEncoding;\n    preventing the inclusion of the GCC header from doing anything.  */\n # define GCC_RESOURCE_H\n # include <sys/wait.h>\n-#elif defined (__nucleus__) || defined (__PikeOS__)\n+#elif defined (__PikeOS__)\n /* No wait() or waitpid() calls available.  */\n #else\n /* Default case.  */\n@@ -253,7 +248,7 @@ char __gnat_path_separator = PATH_SEPARATOR;\n \n const char *__gnat_library_template = GNAT_LIBRARY_TEMPLATE;\n \n-#if defined (__vxworks) || defined (__OPENNT) || defined(__nucleus__)\n+#if defined (__vxworks)\n #define GNAT_MAX_PATH_LEN PATH_MAX\n \n #else\n@@ -418,7 +413,7 @@ __gnat_readlink (char *path ATTRIBUTE_UNUSED,\n \t\t size_t bufsiz ATTRIBUTE_UNUSED)\n {\n #if defined (_WIN32) \\\n-  || defined(__vxworks) || defined (__nucleus__) || defined (__PikeOS__)\n+  || defined(__vxworks) || defined (__PikeOS__)\n   return -1;\n #else\n   return readlink (path, buf, bufsiz);\n@@ -434,7 +429,7 @@ __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \t\tchar *newpath ATTRIBUTE_UNUSED)\n {\n #if defined (_WIN32) \\\n-  || defined(__vxworks) || defined (__nucleus__) || defined (__PikeOS__)\n+  || defined(__vxworks) || defined (__PikeOS__)\n   return -1;\n #else\n   return symlink (oldpath, newpath);\n@@ -443,7 +438,7 @@ __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \n /* Try to lock a file, return 1 if success.  */\n \n-#if defined (__vxworks) || defined (__nucleus__) \\\n+#if defined (__vxworks) \\\n   || defined (_WIN32) || defined (__PikeOS__)\n \n /* Version that does not use link. */\n@@ -985,8 +980,6 @@ __gnat_open_new_temp (char *path, int fmode)\n   return mkstemp (path);\n #elif defined (__Lynx__)\n   mktemp (path);\n-#elif defined (__nucleus__)\n-  return -1;\n #else\n   if (mktemp (path) == NULL)\n     return -1;\n@@ -1063,7 +1056,7 @@ __gnat_stat_to_attr (int fd, char* name, struct file_attributes* attr)\n \n   attr->exists = !ret;\n \n-#if !defined (_WIN32) || defined (RTX)\n+#if !defined (_WIN32)\n   /* on Windows requires extra system call, see __gnat_is_readable_file_attr */\n   attr->readable   = (!ret && (statbuf.st_mode & S_IRUSR));\n   attr->writable   = (!ret && (statbuf.st_mode & S_IWUSR));\n@@ -1121,15 +1114,7 @@ __gnat_named_file_length (char *name)\n void\n __gnat_tmp_name (char *tmp_filename)\n {\n-#ifdef RTX\n-  /* Variable used to create a series of unique names */\n-  static int counter = 0;\n-\n-  /* RTX in RTSS mode does not support tempnam nor tmpnam so we emulate it */\n-  strcpy (tmp_filename, \"c:\\\\WINDOWS\\\\Temp\\\\gnat-\");\n-  sprintf (&tmp_filename[strlen (tmp_filename)], \"%d\\0\", counter++);\n-\n-#elif defined (__MINGW32__)\n+#if defined (__MINGW32__)\n   {\n     char *pname;\n     char prefix[25];\n@@ -1205,12 +1190,7 @@ __gnat_tmp_name (char *tmp_filename)\n \n DIR* __gnat_opendir (char *name)\n {\n-#if defined (RTX)\n-  /* Not supported in RTX */\n-\n-  return NULL;\n-\n-#elif defined (__MINGW32__)\n+#if defined (__MINGW32__)\n   TCHAR wname[GNAT_MAX_PATH_LEN];\n \n   S2WSC (wname, name, GNAT_MAX_PATH_LEN);\n@@ -1234,12 +1214,7 @@ DIR* __gnat_opendir (char *name)\n char *\n __gnat_readdir (DIR *dirp, char *buffer, int *len)\n {\n-#if defined (RTX)\n-  /* Not supported in RTX */\n-\n-  return NULL;\n-\n-#elif defined (__MINGW32__)\n+#if defined (__MINGW32__)\n   struct _tdirent *dirent = _treaddir ((_TDIR*)dirp);\n \n   if (dirent != NULL)\n@@ -1281,12 +1256,7 @@ __gnat_readdir (DIR *dirp, char *buffer, int *len)\n \n int __gnat_closedir (DIR *dirp)\n {\n-#if defined (RTX)\n-  /* Not supported in RTX */\n-\n-  return 0;\n-\n-#elif defined (__MINGW32__)\n+#if defined (__MINGW32__)\n   return _tclosedir ((_TDIR*)dirp);\n \n #else\n@@ -1306,7 +1276,7 @@ __gnat_readdir_is_thread_safe (void)\n #endif\n }\n \n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n /* Number of seconds between <Jan 1st 1601> and <Jan 1st 1970>.  */\n static const unsigned long long w32_epoch_offset = 11644473600ULL;\n \n@@ -1354,7 +1324,7 @@ OS_Time\n __gnat_file_time_name_attr (char* name, struct file_attributes* attr)\n {\n    if (attr->timestamp == (OS_Time)-2) {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n       BOOL res;\n       WIN32_FILE_ATTRIBUTE_DATA fad;\n       __time64_t ret = -1;\n@@ -1385,7 +1355,7 @@ OS_Time\n __gnat_file_time_fd_attr (int fd, struct file_attributes* attr)\n {\n    if (attr->timestamp == (OS_Time)-2) {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n      HANDLE h = (HANDLE) _get_osfhandle (fd);\n      time_t ret = win32_filetime (h);\n      attr->timestamp = (OS_Time) ret;\n@@ -1415,7 +1385,7 @@ __gnat_set_file_time_name (char *name, time_t time_stamp)\n \n /* Code to implement __gnat_set_file_time_name for these systems.  */\n \n-#elif defined (_WIN32) && !defined (RTX)\n+#elif defined (_WIN32)\n   union\n   {\n     FILETIME ft_time;\n@@ -1466,8 +1436,7 @@ __gnat_get_libraries_from_registry (void)\n \n   result[0] = '\\0';\n \n-#if defined (_WIN32) && ! defined (__vxworks) && ! defined (IS_CROSS) \\\n-  && ! defined (RTX)\n+#if defined (_WIN32) && ! defined (__vxworks) && ! defined (IS_CROSS)\n \n   HKEY reg_key;\n   DWORD name_size, value_size;\n@@ -1699,7 +1668,7 @@ __gnat_is_directory (char *name)\n    return __gnat_is_directory_attr (name, &attr);\n }\n \n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n \n /* Returns the same constant as GetDriveType but takes a pathname as\n    argument. */\n@@ -1887,14 +1856,14 @@ __gnat_can_use_acl (TCHAR *wname)\n   return __gnat_use_acl && GetDriveTypeFromPath (wname) != DRIVE_REMOTE;\n }\n \n-#endif /* defined (_WIN32) && !defined (RTX) */\n+#endif /* defined (_WIN32) */\n \n int\n __gnat_is_readable_file_attr (char* name, struct file_attributes* attr)\n {\n    if (attr->readable == ATTR_UNSET)\n      {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n        TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n        GENERIC_MAPPING GenericMapping;\n \n@@ -1931,7 +1900,7 @@ __gnat_is_writable_file_attr (char* name, struct file_attributes* attr)\n {\n    if (attr->writable == ATTR_UNSET)\n      {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n        TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n        GENERIC_MAPPING GenericMapping;\n \n@@ -1972,7 +1941,7 @@ __gnat_is_executable_file_attr (char* name, struct file_attributes* attr)\n {\n    if (attr->executable == ATTR_UNSET)\n      {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n        TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n        GENERIC_MAPPING GenericMapping;\n \n@@ -2019,7 +1988,7 @@ __gnat_is_executable_file (char *name)\n void\n __gnat_set_writable (char *name)\n {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n \n   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n@@ -2029,8 +1998,7 @@ __gnat_set_writable (char *name)\n \n   SetFileAttributes\n     (wname, GetFileAttributes (wname) & ~FILE_ATTRIBUTE_READONLY);\n-#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n-  ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2049,16 +2017,15 @@ __gnat_set_writable (char *name)\n void\n __gnat_set_executable (char *name, int mode ATTRIBUTE_UNUSED)\n {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n \n   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n   if (__gnat_can_use_acl (wname))\n     __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_EXECUTE);\n \n-#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n-  ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2077,7 +2044,7 @@ __gnat_set_executable (char *name, int mode ATTRIBUTE_UNUSED)\n void\n __gnat_set_non_writable (char *name)\n {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n \n   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n@@ -2090,8 +2057,7 @@ __gnat_set_non_writable (char *name)\n \n   SetFileAttributes\n     (wname, GetFileAttributes (wname) | FILE_ATTRIBUTE_READONLY);\n-#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n-  ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2105,16 +2071,15 @@ __gnat_set_non_writable (char *name)\n void\n __gnat_set_readable (char *name)\n {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n \n   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n   if (__gnat_can_use_acl (wname))\n     __gnat_set_OWNER_ACL (wname, GRANT_ACCESS, FILE_GENERIC_READ);\n \n-#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n-  ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2127,16 +2092,15 @@ __gnat_set_readable (char *name)\n void\n __gnat_set_non_readable (char *name)\n {\n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n \n   S2WSC (wname, name, GNAT_MAX_PATH_LEN + 2);\n \n   if (__gnat_can_use_acl (wname))\n     __gnat_set_OWNER_ACL (wname, DENY_ACCESS, FILE_GENERIC_READ);\n \n-#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) && \\\n-  ! defined(__nucleus__)\n+#elif ! (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6)\n   GNAT_STRUCT_STAT statbuf;\n \n   if (GNAT_STAT (name, &statbuf) == 0)\n@@ -2152,7 +2116,7 @@ __gnat_is_symbolic_link_attr (char* name ATTRIBUTE_UNUSED,\n {\n    if (attr->symbolic_link == ATTR_UNSET)\n      {\n-#if defined (__vxworks) || defined (__nucleus__)\n+#if defined (__vxworks)\n        attr->symbolic_link = 0;\n \n #elif defined (_AIX) || defined (__APPLE__) || defined (__unix__)\n@@ -2190,8 +2154,7 @@ __gnat_portable_spawn (char *args[] ATTRIBUTE_UNUSED)\n   int finished ATTRIBUTE_UNUSED;\n   int pid ATTRIBUTE_UNUSED;\n \n-#if defined (__vxworks) || defined(__nucleus__) || defined(RTX) \\\n-  || defined(__PikeOS__)\n+#if defined (__vxworks) || defined(__PikeOS__)\n   return -1;\n \n #elif defined (_WIN32)\n@@ -2309,7 +2272,7 @@ __gnat_number_of_cpus (void)\n \n /* WIN32 code to implement a wait call that wait for any child process.  */\n \n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n \n /* Synchronization code, to be thread safe.  */\n \n@@ -2560,8 +2523,7 @@ int\n __gnat_portable_no_block_spawn (char *args[] ATTRIBUTE_UNUSED)\n {\n \n-#if defined (__vxworks) || defined (__nucleus__) || defined (RTX) \\\n-  || defined (__PikeOS__)\n+#if defined (__vxworks) || defined (__PikeOS__)\n   /* Not supported.  */\n   return -1;\n \n@@ -2601,8 +2563,7 @@ __gnat_portable_wait (int *process_status)\n   int status = 0;\n   int pid = 0;\n \n-#if defined (__vxworks) || defined (__nucleus__) || defined (RTX) \\\n-  || defined (__PikeOS__)\n+#if defined (__vxworks) || defined (__PikeOS__)\n   /* Not sure what to do here, so do nothing but return zero.  */\n \n #elif defined (_WIN32)\n@@ -2779,7 +2740,7 @@ __gnat_locate_exec_on_path (char *exec_name)\n {\n   char *apath_val;\n \n-#if defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32)\n   TCHAR *wpath_val = _tgetenv (_T(\"PATH\"));\n   TCHAR *wapath_val;\n   /* In Win32 systems we expand the PATH as for XP environment\n@@ -2918,11 +2879,10 @@ int\n __gnat_copy_attribs (char *from ATTRIBUTE_UNUSED, char *to ATTRIBUTE_UNUSED,\n                      int mode ATTRIBUTE_UNUSED)\n {\n-#if (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6) || \\\n-  defined (__nucleus__)\n+#if (defined (__vxworks) && _WRS_VXWORKS_MAJOR < 6)\n   return -1;\n \n-#elif defined (_WIN32) && !defined (RTX)\n+#elif defined (_WIN32)\n   TCHAR wfrom [GNAT_MAX_PATH_LEN + 2];\n   TCHAR wto [GNAT_MAX_PATH_LEN + 2];\n   BOOL res;\n@@ -3076,37 +3036,6 @@ __gnat_sals_init_using_constructors (void)\n #endif\n }\n \n-#ifdef RTX\n-\n-/* In RTX mode, the procedure to get the time (as file time) is different\n-   in RTSS mode and Win32 mode. In order to avoid duplicating an Ada file,\n-   we introduce an intermediate procedure to link against the corresponding\n-   one in each situation. */\n-\n-extern void GetTimeAsFileTime (LPFILETIME pTime);\n-\n-void GetTimeAsFileTime (LPFILETIME pTime)\n-{\n-#ifdef RTSS\n-  RtGetRtssTimeAsFileTime (pTime); /* RTSS interface */\n-#else\n-  GetSystemTimeAsFileTime (pTime); /* w32 interface */\n-#endif\n-}\n-\n-#ifdef RTSS\n-/* Add symbol that is required to link. It would otherwise be taken from\n-   libgcc.a and it would try to use the gcc constructors that are not\n-   supported by Microsoft linker. */\n-\n-extern void __main (void);\n-\n-void __main (void)\n-{\n-}\n-#endif /* RTSS */\n-#endif /* RTX */\n-\n #if defined (__ANDROID__)\n \n #include <pthread.h>"}, {"sha": "5869e96446392ff37361a165152e9a59afd070e2", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -155,8 +155,8 @@ package body Debug is\n    --  d8   Force opposite endianness in packed stuff\n    --  d9   Allow lock free implementation\n \n-   --  d.1\n-   --  d.2\n+   --  d.1  Enable unnesting of nested procedures\n+   --  d.2  Allow statements in declarative part\n    --  d.3\n    --  d.4\n    --  d.5\n@@ -746,6 +746,14 @@ package body Debug is\n    --  d9   This allows lock free implementation for protected objects\n    --       (see Exp_Ch9).\n \n+   --  d.1  Enable unnesting of nested procedures. This special pass does not\n+   --       actually unnest things, but it ensures that a nested procedure\n+   --       does not contain any uplevel references.\n+\n+   --  d.2  Allow statements within declarative parts. This is not usually\n+   --       allowed, but in some debugging contexts (e.g. testing the circuit\n+   --       for unnesting of procedures), it is useful to allow this.\n+\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "a6c1c8fee03ab48c6267ae9e0d82717c6a6e9d85", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2001-2014, AdaCore                     *\n+ *                     Copyright (C) 2001-2015, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -54,8 +54,8 @@\n   /* ??? See comment in adaint.c.  */\n # define GCC_RESOURCE_H\n # include <sys/wait.h>\n-#elif defined (__nucleus__) || defined (__PikeOS__)\n-  /* No wait.h available on Nucleus */\n+#elif defined (__PikeOS__)\n+  /* No wait.h available */\n #else\n #include <sys/wait.h>\n #endif\n@@ -350,7 +350,7 @@ __gnat_expect_poll (int *fd,\n \n   return ready;\n }\n-#elif defined (__unix__) && !defined (__nucleus__)\n+#elif defined (__unix__)\n \n #ifdef __hpux__\n #include <sys/ptyio.h>"}, {"sha": "4f3ed23f6493f418ce3b404aa8685c83787a0b17", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *         Copyright (C) 2004-2014, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2004-2015, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -29,7 +29,7 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-#if defined(__nucleus__) || defined(VTHREADS) || defined(__PikeOS__)\n+#if defined(VTHREADS) || defined(__PikeOS__)\n \n /* Sockets not supported on these platforms.  */\n #undef HAVE_SOCKETS\n@@ -251,4 +251,4 @@\n # define HAVE_INET_PTON\n #endif\n \n-#endif /* defined(__nucleus__) */\n+#endif /* defined(VTHREADS) */"}, {"sha": "5b8676e7b0b628f6b9bc350797f7af7ee27b32c5", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2000-2014, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2000-2015, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -427,6 +427,7 @@ package body Impunit is\n     (\"a-coorse\", T),  -- Ada.Containers.Ordered_Sets\n     (\"a-coteio\", T),  -- Ada.Complex_Text_IO\n     (\"a-direct\", T),  -- Ada.Directories\n+    (\"a-dinopr\", T),  -- Ada.Dispatching.Non_Preemptive\n     (\"a-diroro\", T),  -- Ada.Dispatching.Round_Robin\n     (\"a-disedf\", T),  -- Ada.Dispatching.EDF\n     (\"a-dispat\", T),  -- Ada.Dispatching"}, {"sha": "4a393bdd6ae5a498f8b24b0be2eee257dacb1e2d", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1455,6 +1455,16 @@ package body Ch3 is\n \n          else\n             Restore_Scan_State (Scan_State);\n+\n+            --  Reset Token_Node, because it already got changed from an\n+            --  Identifier to a Defining_Identifier, and we don't want that\n+            --  for a statement!\n+\n+            Token_Node :=\n+              Make_Identifier (Sloc (Token_Node), Chars (Token_Node));\n+\n+            --  And now scan out one or more statements\n+\n             Statement_When_Declaration_Expected (Decls, Done, In_Spec);\n             return;\n          end if;\n@@ -4777,6 +4787,12 @@ package body Ch3 is\n          if In_Spec then\n             null;\n \n+         --  Just ignore it if we are in -gnatd.2 (allow statements to appear\n+         --  in declaration sequences) mode.\n+\n+         elsif Debug_Flag_Dot_2 then\n+            null;\n+\n          --  In the declarative part case, take a second statement as a sure\n          --  sign that we really have a missing BEGIN, and end the declarative\n          --  part now. Note that the caller will fix up the first message to\n@@ -4790,26 +4806,32 @@ package body Ch3 is\n       --  Case of first occurrence of unexpected statement\n \n       else\n-         --  If we are in a package spec, then give message of statement\n-         --  not allowed in package spec. This message never gets changed.\n+         --  Do not give error message if we are operating in -gnatd.2 mode\n+         --  (alllow statements to appear in declarative parts).\n \n-         if In_Spec then\n-            Error_Msg_SC (\"statement not allowed in package spec\");\n+         if not Debug_Flag_Dot_2 then\n \n-         --  If in declarative part, then we give the message complaining\n-         --  about finding a statement when a declaration is expected. This\n-         --  gets changed to a complaint about a missing BEGIN if we later\n-         --  find that no BEGIN is present.\n+            --  If we are in a package spec, then give message of statement\n+            --  not allowed in package spec. This message never gets changed.\n \n-         else\n-            Error_Msg_SC (\"statement not allowed in declarative part\");\n-         end if;\n+            if In_Spec then\n+               Error_Msg_SC (\"statement not allowed in package spec\");\n \n-         --  Capture message Id. This is used for two purposes, first to\n-         --  stop multiple messages, see test above, and second, to allow\n-         --  the replacement of the message in the declarative part case.\n+            --  If in declarative part, then we give the message complaining\n+            --  about finding a statement when a declaration is expected. This\n+            --  gets changed to a complaint about a missing BEGIN if we later\n+            --  find that no BEGIN is present.\n \n-         Missing_Begin_Msg := Get_Msg_Id;\n+            else\n+               Error_Msg_SC (\"statement not allowed in declarative part\");\n+            end if;\n+\n+            --  Capture message Id. This is used for two purposes, first to\n+            --  stop multiple messages, see test above, and second, to allow\n+            --  the replacement of the message in the declarative part case.\n+\n+            Missing_Begin_Msg := Get_Msg_Id;\n+         end if;\n       end if;\n \n       --  In all cases except the case in which we decided to terminate the"}, {"sha": "053d4a71bbaced3748748526ca99322f458cb524", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -108,16 +108,7 @@ pragma Style_Checks (\"M32766\");\n #include <fcntl.h>\n #include <time.h>\n \n-#if defined (__VMS)\n-/** VMS is unable to do vector IO operations with default value of IOV_MAX,\n- ** so its value is redefined to a small one which is known to work properly.\n- **/\n-#undef IOV_MAX\n-#define IOV_MAX 16\n-#endif\n-\n-#if ! (defined (__vxworks) || defined (__VMS) || defined (__MINGW32__) || \\\n-       defined (__nucleus__))\n+#if ! (defined (__vxworks) || defined (__MINGW32__))\n # define HAVE_TERMIOS\n #endif\n \n@@ -286,12 +277,10 @@ package System.OS_Constants is\n    -- General platform parameters --\n    ---------------------------------\n \n-   type OS_Type is (Windows, VMS, Other_OS);\n+   type OS_Type is (Windows, Other_OS);\n */\n #if defined (__MINGW32__)\n # define TARGET_OS \"Windows\"\n-#elif defined (__VMS)\n-# define TARGET_OS \"VMS\"\n #else\n # define TARGET_OS \"Other_OS\"\n #endif"}, {"sha": "df97ee61833b7e3eb484479813a3a0a7d574b43f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -5918,6 +5918,17 @@ package body Sem_Prag is\n             --  Get name from corresponding aspect\n \n             Error_Msg_Name_1 := Original_Aspect_Name (N);\n+\n+            if Class_Present (N) then\n+\n+               --  Replace the name with a leading underscore used\n+               --  internally, with a name that is more user-friendly.\n+\n+               if Error_Msg_Name_1 = Name_uType_Invariant then\n+                  Error_Msg_Name_1 := Name_Type_Invariant_Class;\n+               end if;\n+            end if;\n+\n          end if;\n \n          --  Return possibly modified message"}, {"sha": "d5038ee59adc443bea7e8d8b9bb8e92d9da21c14", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -10715,14 +10715,22 @@ package body Sem_Res is\n \n          begin\n             --  If the type of the operand is a limited view, use the non-\n-            --  limited view when available.\n+            --  limited view when available. If it is a class-wide type,\n+            --  recover class_wide type of the non-limited view.\n \n-            if From_Limited_With (Opnd)\n-              and then Ekind (Opnd) in Incomplete_Kind\n-              and then Present (Non_Limited_View (Opnd))\n-            then\n-               Opnd := Non_Limited_View (Opnd);\n-               Set_Etype (Expression (N), Opnd);\n+            if From_Limited_With (Opnd) then\n+               if Ekind (Opnd) in Incomplete_Kind\n+                 and then Present (Non_Limited_View (Opnd))\n+               then\n+                  Opnd := Non_Limited_View (Opnd);\n+                  Set_Etype (Expression (N), Opnd);\n+\n+               elsif Is_Class_Wide_Type (Opnd)\n+                 and then Present (Non_Limited_View (Etype (Opnd)))\n+               then\n+                  Opnd := Class_Wide_Type (Non_Limited_View (Etype (Opnd)));\n+                  Set_Etype (Expression (N), Opnd);\n+               end if;\n             end if;\n \n             if Is_Access_Type (Opnd) then"}, {"sha": "6e1aec85a6b67ad92f95c807a4e69eca940c0b4e", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -1063,12 +1063,12 @@ package Snames is\n    --  for FIFO_Within_Priorities). If new policy names are added, the first\n    --  character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name    : constant Name_Id := N + $;\n-   Name_EDF_Across_Priorities            : constant Name_Id := N + $;\n-   Name_FIFO_Within_Priorities           : constant Name_Id := N + $;\n-   Name_Non_Preemptive_Within_Priorities : constant Name_Id := N + $;\n-   Name_Round_Robin_Within_Priorities    : constant Name_Id := N + $;\n-   Last_Task_Dispatching_Policy_Name     : constant Name_Id := N + $;\n+   First_Task_Dispatching_Policy_Name         : constant Name_Id := N + $;\n+   Name_EDF_Across_Priorities                 : constant Name_Id := N + $;\n+   Name_FIFO_Within_Priorities                : constant Name_Id := N + $;\n+   Name_Non_Preemptive_FIFO_Within_Priorities : constant Name_Id := N + $;\n+   Name_Round_Robin_Within_Priorities         : constant Name_Id := N + $;\n+   Last_Task_Dispatching_Policy_Name          : constant Name_Id := N + $;\n \n    --  Names of recognized partition elaboration policy identifiers\n "}, {"sha": "fd90ffe5b0793433f5cb97213ac547d52b9d912e", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 10, "deletions": 79, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7c3cf2e21534dda6af57c5c34318d30d0c98a/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=5ae7c3cf2e21534dda6af57c5c34318d30d0c98a", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2014, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2015, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -58,9 +58,6 @@\n #include \"tsystem.h\"\n #include <fcntl.h>\n #include <sys/stat.h>\n-#ifdef VMS\n-#include <unixio.h>\n-#endif\n #else\n #include \"config.h\"\n #include \"system.h\"\n@@ -190,8 +187,6 @@ __gnat_ttyname (int filedes)\n #if defined (__CYGWIN__) || defined (__MINGW32__)\n #include <windows.h>\n \n-#ifndef RTX\n-\n int __gnat_is_windows_xp (void);\n \n int\n@@ -216,8 +211,6 @@ __gnat_is_windows_xp (void)\n   return is_win_xp;\n }\n \n-#endif /* !RTX */\n-\n /* Get the bounds of the stack.  The stack pointer is supposed to be\n    initialized to BASE when a thread is created and the stack can be extended\n    to LIMIT before reaching a guard page.\n@@ -279,13 +272,13 @@ __gnat_set_mode (int handle ATTRIBUTE_UNUSED, int mode ATTRIBUTE_UNUSED)\n char *\n __gnat_ttyname (int filedes)\n {\n-#if defined (__vxworks) || defined (__nucleus)\n+#if defined (__vxworks)\n   return \"\";\n #else\n   extern char *ttyname (int);\n \n   return ttyname (filedes);\n-#endif /* defined (__vxworks) || defined (__nucleus) */\n+#endif /* defined (__vxworks) */\n }\n #endif\n \f\n@@ -306,11 +299,6 @@ __gnat_ttyname (int filedes)\n #  include <termios.h>\n # endif\n \n-#else\n-# if defined (VMS)\n-extern char *decc$ga_stdscr;\n-static int initted = 0;\n-# endif\n #endif\n \n /* Implements the common processing for getc_immediate and\n@@ -424,29 +412,6 @@ getc_immediate_common (FILE *stream,\n     }\n \n   else\n-#elif defined (VMS)\n-  int fd = fileno (stream);\n-\n-  if (isatty (fd))\n-    {\n-      if (initted == 0)\n-\t{\n-\t  decc$bsd_initscr ();\n-\t  initted = 1;\n-\t}\n-\n-      decc$bsd_cbreak ();\n-      *ch = decc$bsd_wgetch (decc$ga_stdscr);\n-\n-      if (*ch == 4)\n-\t*end_of_file = 1;\n-      else\n-\t*end_of_file = 0;\n-\n-      *avail = 1;\n-      decc$bsd_nocbreak ();\n-    }\n-  else\n #elif defined (__MINGW32__)\n   int fd = fileno (stream);\n   int char_waiting;\n@@ -629,23 +594,6 @@ rts_get_nShowCmd (void)\n }\n \n #endif /* WINNT */\n-#ifdef VMS\n-\n-/* This gets around a problem with using the old threads library on VMS 7.0. */\n-\n-extern long get_gmtoff (void);\n-\n-long\n-get_gmtoff (void)\n-{\n-  time_t t;\n-  struct tm *ts;\n-\n-  t = time ((time_t) 0);\n-  ts = localtime (&t);\n-  return ts->tm_gmtoff;\n-}\n-#endif\n \n /* This value is returned as the time zone offset when a valid value\n    cannot be determined. It is simply a bizarre value that will never\n@@ -689,25 +637,18 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n {\n   TIME_ZONE_INFORMATION tzi;\n \n-  BOOL  rtx_active;\n   DWORD tzi_status;\n \n-#ifdef RTX\n-  rtx_active = 1;\n-#else\n-  rtx_active = 0;\n-#endif\n-\n   (*Lock_Task) ();\n \n   tzi_status = GetTimeZoneInformation (&tzi);\n \n-  /* Processing for RTX targets or cases where we simply want to extract the\n-     offset of the current time zone, regardless of the date. A value of \"0\"\n-     for flag \"is_historic\" signifies that the date is NOT historic, see the\n+  /* Cases where we simply want to extract the offset of the current time\n+     zone, regardless of the date. A value of \"0\" for flag \"is_historic\"\n+     signifies that the date is NOT historic, see the\n      body of Ada.Calendar.UTC_Time_Offset. */\n \n-  if (rtx_active || *is_historic == 0) {\n+  if (*is_historic == 0) {\n     *off = tzi.Bias;\n \n     /* The system is operating in the range covered by the StandardDate\n@@ -775,12 +716,10 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n   (*Unlock_Task) ();\n }\n \n-#else\n+#elif defined (__Lynx__)\n \n /* On Lynx, all time values are treated in GMT */\n \n-#if defined (__Lynx__)\n-\n /* As of LynxOS 3.1.0a patch level 040, LynuxWorks changes the\n    prototype to the C library function localtime_r from the POSIX.4\n    Draft 9 to the POSIX 1.c version. Before this change the following\n@@ -798,13 +737,7 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n \n #else\n \n-/* VMS does not need __gnat_localtime_tzoff */\n-\n-#if defined (VMS)\n-\n-/* Other targets except Lynx, VMS and Windows provide a standard localtime_r */\n-\n-#else\n+/* Other targets except Lynx and Windows provide a standard localtime_r */\n \n #define Lock_Task system__soft_links__lock_task\n extern void (*Lock_Task) (void);\n@@ -898,11 +831,9 @@ __gnat_localtime_tzoff (const time_t *timer ATTRIBUTE_UNUSED,\n #else\n   *off = 0;\n \n-#endif\n+#endif  /* defined(_AIX) ... */\n }\n \n-#endif\n-#endif\n #endif\n \n #ifdef __vxworks"}]}