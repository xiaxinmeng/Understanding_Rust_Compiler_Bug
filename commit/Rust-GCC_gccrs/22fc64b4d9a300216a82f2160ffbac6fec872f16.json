{"sha": "22fc64b4d9a300216a82f2160ffbac6fec872f16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmYzY0YjRkOWEzMDAyMTZhODJmMjE2MGZmYmFjNmZlYzg3MmYxNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-09-04T11:08:12Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-09-04T11:08:12Z"}, "message": "re PR tree-optimization/41112 (ACATS c43205b fails at -O2 (tree-sra))\n\n2009-09-04  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/41112\n\t* tree-sra.c (build_ref_for_offset_1): Signal that we cannot\n\thandle variable-bounded arrays.\n\t(expr_with_var_bounded_array_refs_p): New function.\n\t(analyze_access_subtree): Call expr_with_var_bounded_array_refs_p.\n\n\t* testsuite/gnat.dg/array8.adb: New test.\n\nFrom-SVN: r151420", "tree": {"sha": "bea51968c32cbdd16ec16f2806c946162b2b9d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea51968c32cbdd16ec16f2806c946162b2b9d90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22fc64b4d9a300216a82f2160ffbac6fec872f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fc64b4d9a300216a82f2160ffbac6fec872f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fc64b4d9a300216a82f2160ffbac6fec872f16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fc64b4d9a300216a82f2160ffbac6fec872f16/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cdece442dfe6cb678193e67b395ad4e7b2942c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdece442dfe6cb678193e67b395ad4e7b2942c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cdece442dfe6cb678193e67b395ad4e7b2942c5"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "0b160b41dba35ca404de6baa31d892374bf5fbc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22fc64b4d9a300216a82f2160ffbac6fec872f16", "patch": "@@ -1,3 +1,11 @@\n+2009-09-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/41112\n+\t* tree-sra.c (build_ref_for_offset_1): Signal that we cannot\n+\thandle variable-bounded arrays.\n+\t(expr_with_var_bounded_array_refs_p): New function.\n+\t(analyze_access_subtree): Call expr_with_var_bounded_array_refs_p.\n+\n 2009-09-04  Wolfgang Gellerich  <gellerich@de.ibm.com>\n \n \t* config/s390/2097.md: Removed two incorrect bypasses."}, {"sha": "d51cc0215f4877688b1ebd5ac66236181eced163", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22fc64b4d9a300216a82f2160ffbac6fec872f16", "patch": "@@ -1,3 +1,8 @@\n+2009-09-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/41112\n+\t* gnat.dg/array8.adb: New test.\n+\n 2009-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/guality/guality.exp: Only run guality tests if a trivial"}, {"sha": "6e18ecadf94f39dabba73d7b24a3afef0a166ebf", "filename": "gcc/testsuite/gnat.dg/array8.adb", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2Ftestsuite%2Fgnat.dg%2Farray8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2Ftestsuite%2Fgnat.dg%2Farray8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray8.adb?ref=22fc64b4d9a300216a82f2160ffbac6fec872f16", "patch": "@@ -0,0 +1,34 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+PROCEDURE Array8 IS\n+\n+  function ID (I : Integer) return Integer is\n+  begin\n+    return I;\n+  end;\n+\n+  SUBTYPE STB IS INTEGER RANGE ID(-8) .. -5;\n+\n+  TYPE TB IS ARRAY (STB RANGE <>) OF INTEGER;\n+\n+  GENERIC\n+    B1 : TB;\n+  PROCEDURE PROC1;\n+\n+  PROCEDURE PROC1 IS\n+  BEGIN\n+    IF B1'FIRST /= -8 THEN\n+      raise Program_Error;\n+    ELSIF B1'LAST /= ID(-5) THEN\n+      raise Program_Error;\n+    ELSIF B1 /= (7, 6, 5, 4) THEN\n+      raise Program_Error;\n+    END IF;\n+  END;\n+\n+  PROCEDURE PROC2 IS NEW PROC1 ((7, 6, ID(5), 4));\n+\n+BEGIN\n+  PROC2;\n+END;"}, {"sha": "a801839043b9d5eda701a2022d40717b366a0e43", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fc64b4d9a300216a82f2160ffbac6fec872f16/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=22fc64b4d9a300216a82f2160ffbac6fec872f16", "patch": "@@ -1039,7 +1039,7 @@ build_ref_for_offset_1 (tree *res, tree type, HOST_WIDE_INT offset,\n   while (1)\n     {\n       tree fld;\n-      tree tr_size, index;\n+      tree tr_size, index, minidx;\n       HOST_WIDE_INT el_size;\n \n       if (offset == 0 && exp_type\n@@ -1090,13 +1090,14 @@ build_ref_for_offset_1 (tree *res, tree type, HOST_WIDE_INT offset,\n \t    return false;\n \t  el_size = tree_low_cst (tr_size, 1);\n \n+\t  minidx = TYPE_MIN_VALUE (TYPE_DOMAIN (type));\n+\t  if (TREE_CODE (minidx) != INTEGER_CST)\n+\t    return false;\n \t  if (res)\n \t    {\n \t      index = build_int_cst (TYPE_DOMAIN (type), offset / el_size);\n-\t      if (!integer_zerop (TYPE_MIN_VALUE (TYPE_DOMAIN (type))))\n-\t\tindex = int_const_binop (PLUS_EXPR, index,\n-\t\t\t\t\t TYPE_MIN_VALUE (TYPE_DOMAIN (type)),\n-\t\t\t\t\t 0);\n+\t      if (!integer_zerop (minidx))\n+\t\tindex = int_const_binop (PLUS_EXPR, index, minidx, 0);\n \t      *res = build4 (ARRAY_REF, TREE_TYPE (type), *res, index,\n \t\t\t     NULL_TREE, NULL_TREE);\n \t    }\n@@ -1378,6 +1379,22 @@ build_access_trees (struct access *access)\n     }\n }\n \n+/* Return true if expr contains some ARRAY_REFs into a variable bounded\n+   array.  */\n+\n+static bool\n+expr_with_var_bounded_array_refs_p (tree expr)\n+{\n+  while (handled_component_p (expr))\n+    {\n+      if (TREE_CODE (expr) == ARRAY_REF\n+\t  && !host_integerp (array_ref_low_bound (expr), 0))\n+\treturn true;\n+      expr = TREE_OPERAND (expr, 0);\n+    }\n+  return false;\n+}\n+\n /* Analyze the subtree of accesses rooted in ROOT, scheduling replacements when\n    both seeming beneficial and when ALLOW_REPLACEMENTS allows it.  Also set\n    all sorts of access flags appropriately along the way, notably always ser\n@@ -1407,6 +1424,9 @@ analyze_access_subtree (struct access *root, bool allow_replacements,\n   if (root->grp_unscalarizable_region)\n     allow_replacements = false;\n \n+  if (allow_replacements && expr_with_var_bounded_array_refs_p (root->expr))\n+    allow_replacements = false;\n+\n   for (child = root->first_child; child; child = child->next_sibling)\n     {\n       if (!hole && child->offset < covered_to)"}]}