{"sha": "b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2OWRlM2JhYzQyZDMxMzRhOWExZmNmOTFlMjNkMTFmMWU0MmU5Nw==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2002-07-31T23:18:44Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2002-07-31T23:18:44Z"}, "message": "config.gcc (i[34567]86-*-darwin*): New configuration.\n\n        * config.gcc (i[34567]86-*-darwin*): New configuration.\n        * config/darwin.h (TARGET_ENCODE_SECTION_INFO): Undefine before\n        defining.\n        (TARGET_ENCODE_SECTION_INFO): Ditto.\n        (ASM_PREFERRED_EH_DATA_FORMAT): Ditto.\n        * config/darwin.c (machopic_indirect_data_reference): Remove\n        setting of RTX_UNCHANGING_P.\n        (machopic_legitimize_pic_address): Move RTX_UNCHANGING_P up so as\n        * config/i386/t-darwin: New file.\n        * config/i386/darwin.h: New file.\n        * config/i386/i386.h (TARGET_MACHO): Add default definition.\n        * config/i386/i386.md (tablejump): Add TARGET_MACHO case.\n        * config/i386/i386.c (output_set_got): For Mach-O, output Mach-O\n        label and not the GOT add.\n        (constant_address_p): For Mach-O, seeing a CONST is enough.\n        (legitimate_pic_address_disp_p): Add a Mach-O case.\n        (legitimate_address_p): Also test machopic_operand_p if Mach-O.\n        (legitimize_pic_address): Use generic Mach-O code to legitimize.\n        (output_pic_addr_const): Suppress @PLT if Mach-O, and parens\n        if outputting a difference.\n        (ix86_output_addr_diff_elt): Add Mach-O case.\n        (ix86_expand_move): Similarly.\n        (ix86_expand_call): Similarly.\n        (current_machopic_label_num): New global.\n        (machopic_output_stub): New function.\n        (ix86_value_regno): New function.\n        (ix86_function_value): Use it instead of VALUE_REGNO.\n        (ix86_libcall_value): Ditto.\n        * config/i386/unix.h (VALUE_REGNO): Remove.\n\nFrom-SVN: r55916", "tree": {"sha": "96a5f93ea3117283ee1e9bf6784b35209fbc702d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a5f93ea3117283ee1e9bf6784b35209fbc702d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/comments", "author": null, "committer": null, "parents": [{"sha": "b3a646eb0f57b57697fce6d40163cc4dfa53369c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a646eb0f57b57697fce6d40163cc4dfa53369c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a646eb0f57b57697fce6d40163cc4dfa53369c"}], "stats": {"total": 369, "additions": 347, "deletions": 22}, "files": [{"sha": "0b57f3685622f71ae641fe844bad718136a03940", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -1,3 +1,36 @@\n+2002-07-31  Stan Shebs  <shebs@apple.com>\n+\n+\t* config.gcc (i[34567]86-*-darwin*): New configuration.\n+\t* config/darwin.h (TARGET_ENCODE_SECTION_INFO): Undefine before\n+\tdefining.\n+\t(TARGET_ENCODE_SECTION_INFO): Ditto.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Ditto.\n+\t* config/darwin.c (machopic_indirect_data_reference): Remove\n+\tsetting of RTX_UNCHANGING_P.\n+\t(machopic_legitimize_pic_address): Move RTX_UNCHANGING_P up so as\n+\tnot to be applied to sums.\n+\t* config/i386/t-darwin: New file.\n+\t* config/i386/darwin.h: New file.\n+\t* config/i386/i386.h (TARGET_MACHO): Add default definition.\n+\t* config/i386/i386.md (tablejump): Add TARGET_MACHO case.\n+\t* config/i386/i386.c (output_set_got): For Mach-O, output Mach-O\n+\tlabel and not the GOT add.\n+\t(constant_address_p): For Mach-O, seeing a CONST is enough.\n+\t(legitimate_pic_address_disp_p): Add a Mach-O case.\n+\t(legitimate_address_p): Also test machopic_operand_p if Mach-O.\n+\t(legitimize_pic_address): Use generic Mach-O code to legitimize.\n+\t(output_pic_addr_const): Suppress @PLT if Mach-O, and parens\n+\tif outputting a difference.\n+\t(ix86_output_addr_diff_elt): Add Mach-O case.\n+\t(ix86_expand_move): Similarly.\n+\t(ix86_expand_call): Similarly.\n+\t(current_machopic_label_num): New global.\n+\t(machopic_output_stub): New function.\n+\t(ix86_value_regno): New function.\n+\t(ix86_function_value): Use it instead of VALUE_REGNO.\n+\t(ix86_libcall_value): Ditto.\n+\t* config/i386/unix.h (VALUE_REGNO): Remove.\n+\n 2002-07-31  Graham Stott  <grahas@btinternet.com>\n \n \t* config/rs6000/rs6000.c(rs6000_hash_constant): Fix"}, {"sha": "f8d0176de2fb496210cac8361b9202ecbfe38d6c", "filename": "gcc/config.gcc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -998,6 +998,18 @@ i370-*-linux*)\n \t\tthread_file='posix'\n \tfi\n \t;;\n+i[34567]86-*-darwin*)\n+\ttm_file=\"${tm_file} darwin.h i386/darwin.h\"\n+\ttm_p_file=\"${tm_p_file} darwin-protos.h\"\n+\ttmake_file=i386/t-darwin\n+\textra_objs=\"darwin.o\"\n+\ttarget_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n+\tc_target_objs=\"darwin-c.o\"\n+\tcxx_target_objs=\"darwin-c.o\"\n+\t# Darwin linker does collect2 functionality\n+\tuse_collect2=no\n+\tfloat_format=i386\n+\t;;\n i[34567]86-*-elf*)\n \txm_defines=POSIX\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h\""}, {"sha": "4d34537b851dcd9d388155f3b9db28a81d7a9f66", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -491,9 +491,6 @@ machopic_indirect_data_reference (orig, reg)\n       else\n \tresult = gen_rtx (PLUS, Pmode, base, orig);\n \n-      if (RTX_UNCHANGING_P (base) && RTX_UNCHANGING_P (orig))\n-\tRTX_UNCHANGING_P (result) = 1;\n-\n       if (MACHOPIC_JUST_INDIRECT && GET_CODE (base) == MEM)\n \t{\n \t  if (reg)\n@@ -665,10 +662,10 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t    }\n \t  \n #if !defined (TARGET_TOC)\n-\t  RTX_UNCHANGING_P (pic_ref) = 1;\n \t  emit_move_insn (reg, pic_ref);\n \t  pic_ref = gen_rtx (MEM, GET_MODE (orig), reg);\n #endif\n+\t  RTX_UNCHANGING_P (pic_ref) = 1;\n \t}\n       else\n \t{\n@@ -700,13 +697,15 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t\t\t\t  gen_rtx (LO_SUM, Pmode,\n \t\t\t\t\t   hi_sum_reg, offset)));\n \t      pic_ref = reg;\n+\t      RTX_UNCHANGING_P (pic_ref) = 1;\n #else\n \t      emit_insn (gen_rtx (SET, VOIDmode, reg,\n \t\t\t\t  gen_rtx (HIGH, Pmode, offset)));\n \t      emit_insn (gen_rtx (SET, VOIDmode, reg,\n \t\t\t\t  gen_rtx (LO_SUM, Pmode, reg, offset)));\n \t      pic_ref = gen_rtx (PLUS, Pmode,\n \t\t\t\t pic_offset_table_rtx, reg);\n+\t      RTX_UNCHANGING_P (pic_ref) = 1;\n #endif\n \t    }\n \t  else\n@@ -737,8 +736,6 @@ machopic_legitimize_pic_address (orig, mode, reg)\n \t    }\n \t}\n \n-      RTX_UNCHANGING_P (pic_ref) = 1;\n-\n       if (GET_CODE (pic_ref) != REG)\n         {\n           if (reg != 0)"}, {"sha": "85456c65c81838994dd1e8e7da61e8ecbebbb99e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -548,7 +548,9 @@ enum machopic_addr_class {\n #define MACHOPIC_JUST_INDIRECT (flag_pic == 1)\n #define MACHOPIC_PURE          (flag_pic == 2)\n \n+#undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  darwin_encode_section_info\n+#undef TARGET_STRIP_NAME_ENCODING\n #define TARGET_STRIP_NAME_ENCODING  darwin_strip_name_encoding\n \n #define GEN_BINDER_NAME_FOR_STUB(BUF,STUB,STUB_LENGTH)\t\t\\\n@@ -611,6 +613,7 @@ enum machopic_addr_class {\n \n #define TARGET_ASM_EH_FRAME_SECTION darwin_eh_frame_section\n   \n+#undef ASM_PREFERRED_EH_DATA_FORMAT\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n   (((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n "}, {"sha": "96324bcfb9975d1d185c47c92794e1186250910a", "filename": "gcc/config/i386/darwin.h", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -0,0 +1,124 @@\n+/* Target definitions for x86 running Darwin.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Enable Mach-O bits in generic x86 code.  */\n+#undef TARGET_MACHO\n+#define TARGET_MACHO 1\n+\n+#define TARGET_VERSION fprintf (stderr, \" (i386 Darwin)\");\n+\n+#define TARGET_OS_CPP_BUILTINS()                \\\n+  do                                            \\\n+    {                                           \\\n+      builtin_define (\"__i386__\");              \\\n+      builtin_define (\"__LITTLE_ENDIAN__\");     \\\n+      builtin_define (\"__MACH__\");              \\\n+      builtin_define (\"__APPLE__\");             \\\n+    }                                           \\\n+  while (0)\n+\n+/* We want -fPIC by default, unless we're using -static to compile for\n+   the kernel or some such.  */\n+\n+#undef CC1_SPEC\n+#define CC1_SPEC \"%{!static:-fPIC}\"\n+\n+/* The Darwin assembler mostly follows AT&T syntax.  */\n+#undef ASSEMBLER_DIALECT\n+#define ASSEMBLER_DIALECT ASM_ATT\n+\n+/* Define macro used to output shift-double opcodes when the shift\n+   count is in %cl.  Some assemblers require %cl as an argument;\n+   some don't.  This macro controls what to do: by default, don't\n+   print %cl.  */\n+\n+#define SHIFT_DOUBLE_OMITS_COUNT 0\n+\n+/* Define the syntax of pseudo-ops, labels and comments.  */\n+\n+/* String containing the assembler's comment-starter.  */\n+\n+#define ASM_COMMENT_START \"#\"\n+\n+/* By default, target has a 80387, uses IEEE compatible arithmetic,\n+   and returns float values in the 387.  */\n+\n+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n+\n+/* TARGET_DEEP_BRANCH_PREDICTION is incompatible with Mach-O PIC.  */\n+\n+#undef TARGET_DEEP_BRANCH_PREDICTION\n+#define TARGET_DEEP_BRANCH_PREDICTION   0\n+\n+/* Define the syntax of pseudo-ops, labels and comments.  */\n+\n+#define LPREFIX \"L\"\n+\n+/* This definition is unlikely to be used, but provide it just in\n+   case.  */\n+\n+#define USER_LABEL_PREFIX \"_\"\n+\n+/* Assembler pseudos to introduce constants of various size.  */\n+\n+#define ASM_BYTE_OP \"\\t.byte\\t\"\n+#define ASM_SHORT \"\\t.word\\t\"\n+#define ASM_LONG \"\\t.long\\t\"\n+/* Darwin as doesn't do \".quad\".  */\n+\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+ do { if ((LOG) != 0)\t\t\t\\\n+      if (in_text_section ()\t\t\\\n+          ) \\\n+\tfprintf (FILE, \"\\t%s %d,0x90\\n\", ALIGN_ASM_OP, (LOG)); \\\n+      else \\\n+\tfprintf (FILE, \"\\t%s %d\\n\", ALIGN_ASM_OP, (LOG)); \\\n+    } while (0)\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This says how to output an assembler line\n+   to define a local common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".lcomm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* Darwin profiling -- call mcount.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+      if (MACHOPIC_INDIRECT)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  const char *name = machopic_stub_name (\"*mcount\");\t\t\\\n+\t  fprintf (FILE, \"\\tcall %s\\n\", name+1);  /*  skip '&'  */\t\\\n+\t  machopic_validate_stub_or_non_lazy_ptr (name, /*stub:*/1);\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n+    } while (0)"}, {"sha": "3771d4f315e5f4ece89d20304832a9dbb790f3a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 155, "deletions": 7, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -744,6 +744,7 @@ static int ix86_comp_type_attributes PARAMS ((tree, tree));\n const struct attribute_spec ix86_attribute_table[];\n static tree ix86_handle_cdecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree ix86_handle_regparm_attribute PARAMS ((tree *, tree, tree, int, bool *));\n+static int ix86_value_regno PARAMS ((enum machine_mode));\n \n #if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n static void ix86_svr3_asm_out_constructor PARAMS ((rtx, int));\n@@ -2235,7 +2236,8 @@ ix86_function_value (valtype)\n       return ret;\n     }\n   else\n-    return gen_rtx_REG (TYPE_MODE (valtype), VALUE_REGNO (TYPE_MODE (valtype)));\n+    return gen_rtx_REG (TYPE_MODE (valtype),\n+\t\t\tix86_value_regno (TYPE_MODE (valtype)));\n }\n \n /* Return false iff type is returned in memory.  */\n@@ -2285,7 +2287,20 @@ ix86_libcall_value (mode)\n \t}\n     }\n   else\n-   return gen_rtx_REG (mode, VALUE_REGNO (mode));\n+   return gen_rtx_REG (mode, ix86_value_regno (mode));\n+}\n+\n+/* Given a mode, return the register to use for a return value.  */\n+\n+static int\n+ix86_value_regno (mode)\n+     enum machine_mode mode;\n+{\n+  if (GET_MODE_CLASS (mode) == MODE_FLOAT && TARGET_FLOAT_RETURNS_IN_80387)\n+    return FIRST_FLOAT_REG;\n+  if (mode == TImode || VECTOR_MODE_P (mode))\n+    return FIRST_SSE_REG;\n+  return 0;\n }\n \f\n /* Create the va_list data type.  */\n@@ -3950,6 +3965,11 @@ output_set_got (dest)\n       else\n \toutput_asm_insn (\"call\\t%a2\", xops);\n \n+#if TARGET_MACHO\n+      /* Output the \"canonical\" label name (\"Lxx$pb\") here too.  This\n+         is what will be referred to by the Mach-O PIC subsystem.  */\n+      ASM_OUTPUT_LABEL (asm_out_file, machopic_function_base_name ());\n+#endif\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n \t\t\t\t CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n \n@@ -3969,7 +3989,7 @@ output_set_got (dest)\n \n   if (!flag_pic || TARGET_DEEP_BRANCH_PREDICTION)\n     output_asm_insn (\"add{l}\\t{%1, %0|%0, %1}\", xops);\n-  else\n+  else if (!TARGET_MACHO)\n     output_asm_insn (\"add{l}\\t{%1+[.-%a2], %0|%0, %a1+(.-%a2)}\", xops);\n \n   return \"\";\n@@ -4861,6 +4881,10 @@ constant_address_p (x)\n       return TARGET_64BIT;\n \n     case CONST:\n+      /* For Mach-O, really believe the CONST.  */\n+      if (TARGET_MACHO)\n+\treturn true;\n+      /* Otherwise fall through.  */\n     case SYMBOL_REF:\n       return !flag_pic && legitimate_constant_p (x);\n \n@@ -4959,6 +4983,19 @@ legitimate_pic_address_disp_p (disp)\n       saw_plus = true;\n     }\n \n+  /* Allow {LABEL | SYMBOL}_REF - SYMBOL_REF-FOR-PICBASE for Mach-O.  */\n+  if (TARGET_MACHO && GET_CODE (disp) == MINUS)\n+    {\n+      if (GET_CODE (XEXP (disp, 0)) == LABEL_REF\n+          || GET_CODE (XEXP (disp, 0)) == SYMBOL_REF)\n+        if (GET_CODE (XEXP (disp, 1)) == SYMBOL_REF)\n+          {\n+            const char *sym_name = XSTR (XEXP (disp, 1), 0);\n+            if (strstr (sym_name, \"$pb\") != 0)\n+              return 1;\n+          }\n+    }\n+\n   if (GET_CODE (disp) != UNSPEC)\n     return 0;\n \n@@ -5160,7 +5197,11 @@ legitimate_address_p (mode, addr, strict)\n \t    goto report_error;\n \t  }\n \n-      else if (flag_pic && SYMBOLIC_CONST (disp))\n+      else if (flag_pic && (SYMBOLIC_CONST (disp)\n+#if TARGET_MACHO\n+\t\t\t    && !machopic_operand_p (disp)\n+#endif\n+\t\t\t    ))\n \t{\n \tis_legitimate_pic:\n \t  if (TARGET_64BIT && (index || base))\n@@ -5255,6 +5296,13 @@ legitimize_pic_address (orig, reg)\n   rtx new = orig;\n   rtx base;\n \n+#if TARGET_MACHO\n+  if (reg == 0)\n+    reg = gen_reg_rtx (Pmode);\n+  /* Use the generic Mach-O PIC machinery.  */\n+  return machopic_legitimize_pic_address (orig, GET_MODE (orig), reg);\n+#endif\n+\n   if (local_symbolic_operand (addr, Pmode))\n     {\n       /* In 64bit mode we can address such objects directly.  */\n@@ -5767,7 +5815,7 @@ output_pic_addr_const (file, x, code)\n \n     case SYMBOL_REF:\n       assemble_name (file, XSTR (x, 0));\n-      if (code == 'P' && ! SYMBOL_REF_FLAG (x))\n+      if (!TARGET_MACHO && code == 'P' && ! SYMBOL_REF_FLAG (x))\n \tfputs (\"@PLT\", file);\n       break;\n \n@@ -5825,11 +5873,13 @@ output_pic_addr_const (file, x, code)\n       break;\n \n     case MINUS:\n-      putc (ASSEMBLER_DIALECT == ASM_INTEL ? '(' : '[', file);\n+      if (!TARGET_MACHO)\n+\tputc (ASSEMBLER_DIALECT == ASM_INTEL ? '(' : '[', file);\n       output_pic_addr_const (file, XEXP (x, 0), code);\n       putc ('-', file);\n       output_pic_addr_const (file, XEXP (x, 1), code);\n-      putc (ASSEMBLER_DIALECT == ASM_INTEL ? ')' : ']', file);\n+      if (!TARGET_MACHO)\n+\tputc (ASSEMBLER_DIALECT == ASM_INTEL ? ')' : ']', file);\n       break;\n \n      case UNSPEC:\n@@ -7266,6 +7316,11 @@ ix86_output_addr_diff_elt (file, value, rel)\n \t     ASM_LONG, LPREFIX, value, LPREFIX, rel);\n   else if (HAVE_AS_GOTOFF_IN_DATA)\n     fprintf (file, \"%s%s%d@GOTOFF\\n\", ASM_LONG, LPREFIX, value);\n+#if TARGET_MACHO\n+  else if (TARGET_MACHO)\n+    fprintf (file, \"%s%s%d-%s\\n\", ASM_LONG, LPREFIX, value,\n+\t     machopic_function_base_name () + 1);\n+#endif\n   else\n     asm_fprintf (file, \"%s%U_GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\",\n \t\t ASM_LONG, LPREFIX, value);\n@@ -7378,6 +7433,29 @@ ix86_expand_move (mode, operands)\n     }\n   else if (flag_pic && mode == Pmode && symbolic_operand (op1, Pmode))\n     {\n+#if TARGET_MACHO\n+      if (MACHOPIC_PURE)\n+\t{\n+\t  rtx temp = ((reload_in_progress\n+\t\t       || ((op0 && GET_CODE (op0) == REG)\n+\t\t\t   && mode == Pmode))\n+\t\t      ? op0 : gen_reg_rtx (Pmode));\n+\t  op1 = machopic_indirect_data_reference (op1, temp);\n+\t  op1 = machopic_legitimize_pic_address (op1, mode,\n+\t\t\t\t\t\t temp == op1 ? 0 : temp);\n+\t}\n+      else\n+\t{\n+\t  if (MACHOPIC_INDIRECT)\n+\t    op1 = machopic_indirect_data_reference (op1, 0);\n+\t}\n+      if (op0 != op1)\n+\t{\n+\t  insn = gen_rtx_SET (VOIDmode, op0, op1);\n+\t  emit_insn (insn);\n+\t}\n+      return;\n+#endif /* TARGET_MACHO */\n       if (GET_CODE (op0) == MEM)\n \top1 = force_reg (Pmode, op1);\n       else\n@@ -10495,6 +10573,10 @@ ix86_expand_call (retval, fnaddr, callarg1, callarg2, pop)\n   if (TARGET_64BIT && pop)\n     abort ();\n \n+#if TARGET_MACHO\n+  if (flag_pic && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF)\n+    fnaddr = machopic_indirect_call_target (fnaddr);\n+#else\n   /* Static functions and indirect calls don't need the pic register.  */\n   if (! TARGET_64BIT && flag_pic\n       && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n@@ -10507,6 +10589,7 @@ ix86_expand_call (retval, fnaddr, callarg1, callarg2, pop)\n       emit_move_insn (al, callarg2);\n       use_reg (&use, al);\n     }\n+#endif /* TARGET_MACHO */\n \n   if (! call_insn_operand (XEXP (fnaddr, 0), Pmode))\n     {\n@@ -13545,6 +13628,71 @@ ix86_svr3_asm_out_constructor (symbol, priority)\n }\n #endif\n \n+#if TARGET_MACHO\n+\n+static int current_machopic_label_num;\n+\n+/* Given a symbol name and its associated stub, write out the\n+   definition of the stub.  */\n+\n+void\n+machopic_output_stub (file, symb, stub)\n+     FILE *file;\n+     const char *symb, *stub;\n+{\n+  unsigned int length;\n+  char *binder_name, *symbol_name, lazy_ptr_name[32];\n+  int label = ++current_machopic_label_num;\n+\n+  /* Lose our funky encoding stuff so it doesn't contaminate the stub.  */\n+  symb = (*targetm.strip_name_encoding) (symb);\n+\n+  length = strlen (stub);\n+  binder_name = alloca (length + 32);\n+  GEN_BINDER_NAME_FOR_STUB (binder_name, stub, length);\n+\n+  length = strlen (symb);\n+  symbol_name = alloca (length + 32);\n+  GEN_SYMBOL_NAME_FOR_SYMBOL (symbol_name, symb, length);\n+\n+  sprintf (lazy_ptr_name, \"L%d$lz\", label);\n+\n+  if (MACHOPIC_PURE)\n+    machopic_picsymbol_stub_section ();\n+  else\n+    machopic_symbol_stub_section ();\n+\n+  fprintf (file, \"%s:\\n\", stub);\n+  fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n+\n+  if (MACHOPIC_PURE)\n+    {\n+      fprintf (file, \"\\tcall LPC$%d\\nLPC$%d:\\tpopl %%eax\\n\", label, label);\n+      fprintf (file, \"\\tmovl %s-LPC$%d(%%eax),%%edx\\n\", lazy_ptr_name, label);\n+      fprintf (file, \"\\tjmp %%edx\\n\");\n+    }\n+  else\n+    fprintf (file, \"\\tjmp *%s\\n\", lazy_ptr_name);\n+  \n+  fprintf (file, \"%s:\\n\", binder_name);\n+  \n+  if (MACHOPIC_PURE)\n+    {\n+      fprintf (file, \"\\tlea %s-LPC$%d(%%eax),%%eax\\n\", lazy_ptr_name, label);\n+      fprintf (file, \"\\tpushl %%eax\\n\");\n+    }\n+  else\n+    fprintf (file, \"\\t pushl $%s\\n\", lazy_ptr_name);\n+\n+  fprintf (file, \"\\tjmp dyld_stub_binding_helper\\n\");\n+\n+  machopic_lazy_symbol_ptr_section ();\n+  fprintf (file, \"%s:\\n\", lazy_ptr_name);\n+  fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n+  fprintf (file, \"\\t.long %s\\n\", binder_name);\n+}\n+#endif /* TARGET_MACHO */\n+\n /* Order the registers for register allocator.  */\n \n void"}, {"sha": "0daf4e2f3a264e3a3775bfe8376903a4d5fa8710", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -383,6 +383,11 @@ extern int x86_prefetch_sse;\n    the frame pointer in leaf functions.  */\n #define TARGET_DEFAULT 0\n \n+/* This is not really a target flag, but is done this way so that\n+   it's analogous to similar code for Mach-O on PowerPC.  darwin.h\n+   redefines this to 1.  */\n+#define TARGET_MACHO 0\n+\n /* This macro is similar to `TARGET_SWITCHES' but defines names of\n    command options that have values.  Its definition is an\n    initializer with a subgrouping for each command option."}, {"sha": "653583bfe3ee6ec4e75278ce40c133bb0a0f5559", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -13141,7 +13141,7 @@\n \t  op0 = operands[0];\n \t  op1 = gen_rtx_LABEL_REF (Pmode, operands[1]);\n \t}\n-      else if (HAVE_AS_GOTOFF_IN_DATA)\n+      else if (TARGET_MACHO || HAVE_AS_GOTOFF_IN_DATA)\n \t{\n \t  code = PLUS;\n \t  op0 = operands[0];"}, {"sha": "51285570d68de64e477e1a4892a48e24fcc5c164", "filename": "gcc/config/i386/t-darwin", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-darwin?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -0,0 +1,11 @@\n+darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) $(RTL_BASE_H) \\\n+          $(REGS_H) hard-reg-set.h insn-config.h conditions.h output.h \\\n+          insn-attr.h flags.h $(TREE_H) $(EXPR_H) reload.h \\\n+          function.h $(GGC_H) $(TM_P_H) gt-darwin.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+\t    $(TREE_H) $(C_TREE_H) c-pragma.h toplev.h cpplib.h $(TM_P_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+gt-darwin.h : s-gtype ; @true"}, {"sha": "3ba1bd5da7d554030e594af459f133ad5f607dfe", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b069de3bac42d3134a9a1fcf91e23d11f1e42e97/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=b069de3bac42d3134a9a1fcf91e23d11f1e42e97", "patch": "@@ -66,14 +66,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n-/* Floating-point return values come in the FP register.  */\n-\n-#define VALUE_REGNO(MODE) \\\n-  (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\t\\\n-   && TARGET_FLOAT_RETURNS_IN_80387 ? FIRST_FLOAT_REG\t\t\\\n-   : (MODE) == TImode || VECTOR_MODE_P (MODE) ? FIRST_SSE_REG\t\\\n-   : 0)\n-\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\"}]}