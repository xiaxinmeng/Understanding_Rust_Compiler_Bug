{"sha": "498758a1c238a539b364ac2c632742a9b64ab4a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4NzU4YTFjMjM4YTUzOWIzNjRhYzJjNjMyNzQyYTliNjRhYjRhNQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-17T16:53:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-17T16:53:30Z"}, "message": "Merge #374\n\n374: Add basic wrapper over gcc rich_location r=philberty a=philberty\n\nAdding rich location will improve our error message diagnostics, this is\r\nan initial building block to keep a wrapper over the GCC stuff we call.\r\n\r\nAddresses: #97 \r\nFixes: #327 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "0928f7368779b2589237d6d77b464caa1b61beef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0928f7368779b2589237d6d77b464caa1b61beef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/498758a1c238a539b364ac2c632742a9b64ab4a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgexKKCRBK7hj4Ov3rIwAAaIIIAHnsrWzyibSm+C3y808/HJe8\nfUi+Ztfa6SakDYB6sZDk/3JxRv0te9MKtUCR8+M+aWEgocnAAFxx8njZzxF+GIHZ\nv5EZoc2fgUwCWBllicAgcJBnujf7xcv/sCQmr+83lw3oH1BrWjFBqnJqdY1+Mx6M\nVUnPFMkqEnS617k+a7imCbTVaYgqZBEXMTqrZnYHmJJZMCour5KQauaTeUSjCzeI\nXpgGQtdb6nTTm9rZ2tuZyXiGGOPKsC9N1ehwrlmg5QMRs3xQoT8LTkpKSuKdz2e4\nANUWJLBRBs19Cn05++Hjs775NBFiXWadblSxmTfsguhu3tmK2HWfH3Zn65z0VoY=\n=jdkL\n-----END PGP SIGNATURE-----\n", "payload": "tree 0928f7368779b2589237d6d77b464caa1b61beef\nparent f958d1717745ad66a19c346c0e4b0bba1c813e7b\nparent 5b8de2be3ac5250d07dad6b54b729e6e8c4da9be\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618678410 +0000\ncommitter GitHub <noreply@github.com> 1618678410 +0000\n\nMerge #374\n\n374: Add basic wrapper over gcc rich_location r=philberty a=philberty\n\nAdding rich location will improve our error message diagnostics, this is\r\nan initial building block to keep a wrapper over the GCC stuff we call.\r\n\r\nAddresses: #97 \r\nFixes: #327 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498758a1c238a539b364ac2c632742a9b64ab4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498758a1c238a539b364ac2c632742a9b64ab4a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498758a1c238a539b364ac2c632742a9b64ab4a5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f958d1717745ad66a19c346c0e4b0bba1c813e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f958d1717745ad66a19c346c0e4b0bba1c813e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f958d1717745ad66a19c346c0e4b0bba1c813e7b"}, {"sha": "5b8de2be3ac5250d07dad6b54b729e6e8c4da9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8de2be3ac5250d07dad6b54b729e6e8c4da9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8de2be3ac5250d07dad6b54b729e6e8c4da9be"}], "stats": {"total": 299, "additions": 216, "deletions": 83}, "files": [{"sha": "fe0eecb1f29aeea97065f681679cbc615817283a", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -44,8 +44,9 @@ class ResolveToplevelImplItem : public ResolverBase\n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (constant.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (constant.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n     resolver->insert_new_definition (constant.get_node_id (),\n \t\t\t\t     Definition{constant.get_node_id (),\n@@ -59,8 +60,9 @@ class ResolveToplevelImplItem : public ResolverBase\n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (function.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (function.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n     resolver->insert_new_definition (function.get_node_id (),\n \t\t\t\t     Definition{function.get_node_id (),\n@@ -74,8 +76,9 @@ class ResolveToplevelImplItem : public ResolverBase\n     resolver->get_name_scope ().insert (\n       path, method.get_node_id (), method.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (method.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (method.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n     resolver->insert_new_definition (method.get_node_id (),\n \t\t\t\t     Definition{method.get_node_id (),"}, {"sha": "fa3f8a52cc5123dc35dcd9e88ffe17682c3bf071", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -45,8 +45,9 @@ class ResolveTopLevel : public ResolverBase\n       CanonicalPath (alias.get_new_type_name ()), alias.get_node_id (),\n       alias.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (alias.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (alias.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n   }\n \n@@ -56,8 +57,9 @@ class ResolveTopLevel : public ResolverBase\n       CanonicalPath (struct_decl.get_identifier ()), struct_decl.get_node_id (),\n       struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (struct_decl.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (struct_decl.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n   }\n \n@@ -67,8 +69,9 @@ class ResolveTopLevel : public ResolverBase\n       CanonicalPath (struct_decl.get_identifier ()), struct_decl.get_node_id (),\n       struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (struct_decl.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (struct_decl.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n   }\n \n@@ -78,8 +81,9 @@ class ResolveTopLevel : public ResolverBase\n       CanonicalPath (var.get_identifier ()), var.get_node_id (),\n       var.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (var.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (var.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n     resolver->insert_new_definition (var.get_node_id (),\n \t\t\t\t     Definition{var.get_node_id (),\n@@ -94,8 +98,9 @@ class ResolveTopLevel : public ResolverBase\n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (constant.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (constant.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n     resolver->insert_new_definition (constant.get_node_id (),\n \t\t\t\t     Definition{constant.get_node_id (),\n@@ -109,8 +114,9 @@ class ResolveTopLevel : public ResolverBase\n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\trust_error_at (function.get_locus (), \"redefined multiple times\");\n-\trust_error_at (locus, \"was defined here\");\n+\tRichLocation r (function.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n       });\n     resolver->insert_new_definition (function.get_node_id (),\n \t\t\t\t     Definition{function.get_node_id (),"}, {"sha": "8ec78570b497d65fa606b5719b90d45f9847e4f7", "filename": "gcc/rust/rust-diagnostics.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.cc?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -186,6 +186,17 @@ rust_inform (const Location location, const char *fmt, ...)\n   va_end (ap);\n }\n \n+// Rich Locations\n+void\n+rust_error_at (const RichLocation location, const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  rust_be_error_at (location, expand_message (fmt, ap));\n+  va_end (ap);\n+}\n+\n // rust_debug uses normal printf formatting, not GCC diagnostic formatting.\n \n void"}, {"sha": "d861267fc3f0876e33532da6e6062fe38a2579e3", "filename": "gcc/rust/rust-diagnostics.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-diagnostics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-diagnostics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -48,6 +48,7 @@\n // All other format specifiers are as defined by 'sprintf'. The final resulting\n // message is then sent to the back end via rust_be_error_at/rust_be_warning_at.\n \n+// simple location\n extern void\n rust_error_at (const Location, const char *fmt, ...)\n   RUST_ATTRIBUTE_GCC_DIAG (2, 3);\n@@ -61,6 +62,11 @@ extern void\n rust_inform (const Location, const char *fmt, ...)\n   RUST_ATTRIBUTE_GCC_DIAG (2, 3);\n \n+// rich locations\n+extern void\n+rust_error_at (const RichLocation, const char *fmt, ...)\n+  RUST_ATTRIBUTE_GCC_DIAG (2, 3);\n+\n // These interfaces provide a way for the front end to ask for\n // the open/close quote characters it should use when formatting\n // diagnostics (warnings, errors).\n@@ -78,6 +84,8 @@ rust_close_quote ();\n extern void\n rust_be_error_at (const Location, const std::string &errmsg);\n extern void\n+rust_be_error_at (const RichLocation, const std::string &errmsg);\n+extern void\n rust_be_warning_at (const Location, int opt, const std::string &warningmsg);\n extern void\n rust_be_fatal_error (const Location, const std::string &errmsg);"}, {"sha": "11da6a3d4cce82abb08c5253ddd5ff4cb4338f34", "filename": "gcc/rust/rust-gcc-diagnostics.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-gcc-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-gcc-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc-diagnostics.cc?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -50,6 +50,13 @@ rust_be_inform (const Location location, const std::string &infomsg)\n   inform (gcc_loc, \"%s\", infomsg.c_str ());\n }\n \n+void\n+rust_be_error_at (const RichLocation location, const std::string &errmsg)\n+{\n+  rich_location gcc_loc = location.get ();\n+  error_at (&gcc_loc, \"%s\", errmsg.c_str ());\n+}\n+\n void\n rust_be_get_quotechars (const char **open_qu, const char **close_qu)\n {"}, {"sha": "79c97acff79f031f9f0fbf2e85feedb2fa60135f", "filename": "gcc/rust/rust-linemap.cc", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-linemap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-linemap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-linemap.cc?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -175,3 +175,46 @@ rust_get_linemap ()\n {\n   return new Gcc_linemap;\n }\n+\n+RichLocation::RichLocation (Location root)\n+  : gcc_rich_loc (line_table, root.gcc_location ())\n+{\n+  /*rich_location (line_maps *set, location_t loc,\n+\t\t const range_label *label = NULL);*/\n+}\n+\n+RichLocation::~RichLocation () {}\n+\n+void\n+RichLocation::add_range (Location loc)\n+{\n+  gcc_rich_loc.add_range (loc.gcc_location ());\n+}\n+\n+void\n+RichLocation::add_fixit_insert_before (const std::string &new_parent)\n+{\n+  gcc_rich_loc.add_fixit_insert_before (new_parent.c_str ());\n+}\n+\n+void\n+RichLocation::add_fixit_insert_before (Location where,\n+\t\t\t\t       const std::string &new_parent)\n+{\n+  gcc_rich_loc.add_fixit_insert_before (where.gcc_location (),\n+\t\t\t\t\tnew_parent.c_str ());\n+}\n+\n+void\n+RichLocation::add_fixit_insert_after (const std::string &new_parent)\n+{\n+  gcc_rich_loc.add_fixit_insert_after (new_parent.c_str ());\n+}\n+\n+void\n+RichLocation::add_fixit_insert_after (Location where,\n+\t\t\t\t      const std::string &new_parent)\n+{\n+  gcc_rich_loc.add_fixit_insert_after (where.gcc_location (),\n+\t\t\t\t       new_parent.c_str ());\n+}"}, {"sha": "4fd61cc0139003329c5b288c23a98f38a24c1aab", "filename": "gcc/rust/rust-location.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-location.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Frust-location.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-location.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -80,4 +80,26 @@ operator- (Location lhs, location_t rhs)\n   return lhs;\n }\n \n+class RichLocation\n+{\n+public:\n+  RichLocation (Location root);\n+  ~RichLocation ();\n+\n+  void add_range (Location loc);\n+\n+  void add_fixit_insert_before (const std::string &new_parent);\n+\n+  void add_fixit_insert_before (Location where, const std::string &new_parent);\n+\n+  void add_fixit_insert_after (const std::string &new_parent);\n+\n+  void add_fixit_insert_after (Location where, const std::string &new_parent);\n+\n+  rich_location get () const { return gcc_rich_loc; }\n+\n+private:\n+  rich_location gcc_rich_loc;\n+};\n+\n #endif // !defined(RUST_LOCATION_H)"}, {"sha": "63095949d2d342861f0771bb0bb59e568ca9cde6", "filename": "gcc/rust/typecheck/rust-hir-inherent-impl-overlap.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-inherent-impl-overlap.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -189,18 +189,17 @@ class OverlappingImplItemPass : public TypeCheckBase\n   void collision_detected (HIR::InherentImplItem *query,\n \t\t\t   HIR::InherentImplItem *dup, const std::string &name)\n   {\n-    Location qlocus;\n+    Location qlocus; // query\n     bool ok = GetLocusFromImplItem::Resolve (query, qlocus);\n     rust_assert (ok);\n \n-    Location dlocus;\n+    Location dlocus; // dup\n     ok = GetLocusFromImplItem::Resolve (dup, dlocus);\n     rust_assert (ok);\n \n-    // this needs GCC Rich locations see\n-    // https://github.com/Rust-GCC/gccrs/issues/97\n-    rust_error_at (qlocus, \"duplicate definitions with name %s\", name.c_str ());\n-    rust_error_at (dlocus, \"duplicate def associated with\");\n+    RichLocation r (qlocus);\n+    r.add_range (dlocus);\n+    rust_error_at (r, \"duplicate definitions with name %s\", name.c_str ());\n   }\n \n private:\n@@ -209,9 +208,6 @@ class OverlappingImplItemPass : public TypeCheckBase\n   std::map<TyTy::BaseType *,\n \t   std::set<std::pair<HIR::InherentImplItem *, std::string> > >\n     impl_mappings;\n-\n-  std::map<TyTy::BaseType *, std::set<TyTy::BaseType *> >\n-    possible_colliding_impls;\n };\n \n } // namespace Resolver"}, {"sha": "5dda90a2e0926772b7a18259f216697258e9a2c1", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -129,31 +129,34 @@ class ReportMultipleCandidateError : private TypeCheckBase\n   static void Report (std::vector<PathProbeCandidate> &candidates,\n \t\t      const HIR::PathIdentSegment &query, Location query_locus)\n   {\n-    rust_error_at (query_locus, \"multiple applicable items in scope for: %s\",\n-\t\t   query.as_string ().c_str ());\n-\n-    ReportMultipleCandidateError visitor;\n+    RichLocation r (query_locus);\n+    ReportMultipleCandidateError visitor (r);\n     for (auto &c : candidates)\n       c.impl_item->accept_vis (visitor);\n+\n+    rust_error_at (r, \"multiple applicable items in scope for: %s\",\n+\t\t   query.as_string ().c_str ());\n   }\n \n   void visit (HIR::ConstantItem &constant) override\n   {\n-    rust_error_at (constant.get_locus (), \"possible candidate\");\n+    r.add_range (constant.get_locus ());\n   }\n \n   void visit (HIR::Function &function) override\n   {\n-    rust_error_at (function.get_locus (), \"possible candidate\");\n+    r.add_range (function.get_locus ());\n   }\n \n   void visit (HIR::Method &method) override\n   {\n-    rust_error_at (method.get_locus (), \"possible candidate\");\n+    r.add_range (method.get_locus ());\n   }\n \n private:\n-  ReportMultipleCandidateError () : TypeCheckBase () {}\n+  ReportMultipleCandidateError (RichLocation &r) : TypeCheckBase (), r (r) {}\n+\n+  RichLocation &r;\n };\n \n } // namespace Resolver"}, {"sha": "6b6eed07df894367131beceabcdfa9dd8aeed195", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -290,11 +290,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     auto result = lhs->unify (rhs);\n     if (result->get_kind () == TyTy::TypeKind::ERROR)\n-      {\n-\trust_error_at (expr.get_locus (),\n-\t\t       \"type resolution failure in AssignmentExpr\");\n-\treturn;\n-      }\n+      return;\n \n     // in the case of declare first for an ADT Type:\n     //"}, {"sha": "e0e7adcd75c601c2106caa4a5f1245a9b15768f4", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -76,11 +76,7 @@ class TypeCheckStmt : public TypeCheckBase\n       {\n \tauto unified_ty = specified_ty->unify (init_expr_ty);\n \tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n-\t  {\n-\t    rust_fatal_error (stmt.get_locus (),\n-\t\t\t      \"failure in setting up let stmt type\");\n-\t    return;\n-\t  }\n+\t  return;\n \n \tcontext->insert_type (stmt.get_mappings (), unified_ty);\n       }"}, {"sha": "03fe0d85abca684a479dcb01558e9c9a98216915", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 68, "deletions": 17, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -109,135 +109,186 @@ class BaseRules : public TyVisitor\n   virtual void visit (TupleType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ADTType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (InferType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (FnType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (FnPtr &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ArrayType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (BoolType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (IntType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (UintType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (USizeType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ISizeType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (FloatType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ErrorType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (CharType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ReferenceType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (ParamType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n \n   virtual void visit (StrType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }"}, {"sha": "714a6be7afb55713d39105b393a7ed67dddc4ec8", "filename": "gcc/testsuite/rust.test/xfail_compile/arrays1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays1.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     let xs: [i32; 5] = [1, 2, 3, 4, 5];\n     let a: bool = xs[0]; // { dg-error \"expected .bool. got .i32.\" }\n-    // { dg-error \"failure in setting up let stmt type\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "31ae1e230945dc2e5fe7e4a4d0a088216d4cd41a", "filename": "gcc/testsuite/rust.test/xfail_compile/arrays2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,5 +1,4 @@\n fn main() {\n     let array: [i32; 5] = [1, 2, 3]; // { dg-error \"mismatch in array capacity\" }\n-    // { dg-error \"expected ..i32:5.. got ..i32:3..\" \"\" { target { *-*-* } } .-1 }\n-    // { dg-error \"failure in setting up let stmt type\" \"\" { target { *-*-* } } .-2 }\n+                                     // { dg-error \"expected ..i32:5.. got ..i32:3..\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "93de439704fde9ecaeba299915fb34f32b67be16", "filename": "gcc/testsuite/rust.test/xfail_compile/bad_type1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type1.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,3 @@\n fn main() {\n     let logical: bool = 123; // { dg-error \"expected .bool. got .<integer>.\" }\n-    // { dg-error \"failure in setting up let stmt type\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "e47b8aac0e7ca19e0bfac35c552304a194b342a4", "filename": "gcc/testsuite/rust.test/xfail_compile/bad_type2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbad_type2.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -9,7 +9,6 @@ fn main() {\n     let mut x;\n     x = 1;\n     x = true; // { dg-error \"expected .<integer>. got .bool.\" }\n-    // { dg-error \"type resolution failure in AssignmentExpr\" \"\" { target { *-*-* } } .-1 }\n \n     let call_test = test(1);\n }"}, {"sha": "7042099b4593b73646ffd5763077a6e057f33d91", "filename": "gcc/testsuite/rust.test/xfail_compile/generics1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a2: GenericStruct<i8>;\n     a2 = GenericStruct::<_>(1, 456);\n \n-    let b2: i32 = a2.0; // { dg-error \"failure in setting up let stmt type\" }\n+    let b2: i32 = a2.0;\n     let c2: usize = a2.1;\n }"}, {"sha": "eb53c2415eeb118b5c0670adfb1196bc09a8392f", "filename": "gcc/testsuite/rust.test/xfail_compile/generics2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a2: GenericStruct<i8>;\n     a2 = GenericStruct(1, 456);\n \n-    let b2: i32 = a2.0; // { dg-error \"failure in setting up let stmt type\" }\n+    let b2: i32 = a2.0;\n     let c2: usize = a2.1;\n }"}, {"sha": "bc49a656356c4a31cd26a40bc75411330c26a841", "filename": "gcc/testsuite/rust.test/xfail_compile/generics3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     let a2;\n     a2 = GenericStruct::<i8>(1, 456);\n \n-    let b2: i32 = a2.0; // { dg-error \"failure in setting up let stmt type\" }\n+    let b2: i32 = a2.0;\n     let c2: usize = a2.1;\n }"}, {"sha": "78b6149437cf5d8a38da644fe93df0b7d17c0c62", "filename": "gcc/testsuite/rust.test/xfail_compile/generics7.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics7.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,3 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<A> {\n     a: A,\n }\n@@ -16,7 +15,7 @@ impl Foo<char> {\n }\n \n impl<T> Foo<T> {\n-    fn bar(self) -> T {\n+    fn bar(self) -> T { // { dg-error \"duplicate definitions with name bar\" }\n         self.a\n     }\n }"}, {"sha": "ae51e36c87f495f80ee93e7576283f975b02330b", "filename": "gcc/testsuite/rust.test/xfail_compile/redef_error1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error1.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,4 @@\n-struct S1 { // { dg-error \"was defined here\" }\n+struct S1 {\n     x: f64,\n     y: f64,\n }"}, {"sha": "65793bcda8a25ae2304a04c3260404d56f7da9ae", "filename": "gcc/testsuite/rust.test/xfail_compile/redef_error2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error2.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,4 @@\n-const TEST: i32 = 2;  // { dg-error \"was defined here\" }\n-const TEST: f32 = 3.0;  // { dg-error \"redefined multiple times\" }\n+const TEST: i32 = 2;\n+const TEST: f32 = 3.0; // { dg-error \"redefined multiple times\" }\n \n fn main() {}"}, {"sha": "a4bf1ed3d8ce831847eb16d3fbc7b4fb92d6d66d", "filename": "gcc/testsuite/rust.test/xfail_compile/redef_error3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error3.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,4 @@\n-fn test() -> bool {  // { dg-error \"was defined here\" }\n+fn test() -> bool {\n     true\n }\n "}, {"sha": "a250c0ac00e2ee86af52792df58f4ee3331151ec", "filename": "gcc/testsuite/rust.test/xfail_compile/redef_error4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error4.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -5,7 +5,7 @@ impl Foo {\n         Foo(a, b)\n     }\n \n-    fn test() -> i32 { // { dg-error \"was defined here\" }\n+    fn test() -> i32 {\n         test()\n     }\n "}, {"sha": "dc6ad50e1045a0aa7b169cd98ac8e4c547a6b49c", "filename": "gcc/testsuite/rust.test/xfail_compile/redef_error5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error5.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,7 +1,7 @@\n struct Foo(i32, bool);\n \n impl Foo {\n-    const TEST: i32 = 123; // { dg-error \"was defined here\"  }\n+    const TEST: i32 = 123;\n     const TEST: bool = false; // { dg-error \"redefined multiple times\"  }\n }\n "}, {"sha": "664c6ae9894cbc1ab392582571b0fd7255b50ce9", "filename": "gcc/testsuite/rust.test/xfail_compile/redef_error6.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fredef_error6.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,13 +1,11 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<T>(T, usize);\n \n impl Foo<i32> {\n     fn test() -> i32 {\n         123\n     }\n \n-    fn test(self) -> i32 {\n-        // { dg-error \"redefined multiple times\" \"\" { target *-*-* } .-1 }\n+    fn test(self) -> i32 { // { dg-error \"redefined multiple times\" }\n         self.0\n     }\n }"}, {"sha": "84179b137272a5d2c9c07fffad0cf799cb198574", "filename": "gcc/testsuite/rust.test/xfail_compile/tuple1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple1.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,3 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n fn main() {\n     let a: (i32, bool) = (123, 123); // { dg-error \"expected .bool. got .<integer>.\" }\n     let b;"}, {"sha": "c7d7048246a99336f1c55fe6cd8ec95382ba540f", "filename": "gcc/testsuite/rust.test/xfail_compile/type-alias1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-alias1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498758a1c238a539b364ac2c632742a9b64ab4a5/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-alias1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-alias1.rs?ref=498758a1c238a539b364ac2c632742a9b64ab4a5", "patch": "@@ -1,4 +1,3 @@\n-// { dg-excess-errors \"Noisy error and debug\" }\n type TypeAlias = (i32, u32);\n \n fn main() {"}]}