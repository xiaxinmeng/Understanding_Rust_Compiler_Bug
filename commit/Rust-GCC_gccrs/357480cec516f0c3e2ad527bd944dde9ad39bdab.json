{"sha": "357480cec516f0c3e2ad527bd944dde9ad39bdab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3NDgwY2VjNTE2ZjBjM2UyYWQ1MjdiZDk0NGRkZTlhZDM5YmRhYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-05-09T05:21:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-05-09T05:21:36Z"}, "message": "cxxabi.h (_GLIBCXX_NOTHROW): New macro.\n\n\t* libstdc++-v3/libsupc++/cxxabi.h (_GLIBCXX_NOTHROW): New macro.\n\t(__cxa_atexit): Use it.\n\n\t* testsuite/lib/libstdc++.exp (v3_target_compile_as_c): For\n\tinstalled-tree testing, search more include directories.\n\nFrom-SVN: r124565", "tree": {"sha": "fbbbc42d50b1443261a77091b9a93eeb544cce2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbbbc42d50b1443261a77091b9a93eeb544cce2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/357480cec516f0c3e2ad527bd944dde9ad39bdab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357480cec516f0c3e2ad527bd944dde9ad39bdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357480cec516f0c3e2ad527bd944dde9ad39bdab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357480cec516f0c3e2ad527bd944dde9ad39bdab/comments", "author": null, "committer": null, "parents": [{"sha": "ee72fa38841b7da8c16bef043b462595ec3b7ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee72fa38841b7da8c16bef043b462595ec3b7ac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee72fa38841b7da8c16bef043b462595ec3b7ac9"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "2e8282eba07025e9d62fb84e1481c7259293bff8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357480cec516f0c3e2ad527bd944dde9ad39bdab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357480cec516f0c3e2ad527bd944dde9ad39bdab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=357480cec516f0c3e2ad527bd944dde9ad39bdab", "patch": "@@ -1,3 +1,11 @@\n+2007-05-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* libstdc++-v3/libsupc++/cxxabi.h (_GLIBCXX_NOTHROW): New macro.\n+\t(__cxa_atexit): Use it.\n+\n+\t* testsuite/lib/libstdc++.exp (v3_target_compile_as_c): For\n+\tinstalled-tree testing, search more include directories.\n+\n 2007-05-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/type_traits (make_signed): Remove specializations\n@@ -94,8 +102,12 @@\n \t* testsuite/23_containers/vector/requirements/dr438/\n \tconstructor_2_neg.cc: Likewise.\n \n+>>>>>>> .r124554\n 2007-05-07  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* testsuite/lib/libstdc++.exp (v3_target_compile_as_c): For\n+\tinstalled-tree testing, search more include directories.\n+\n \t* testsuite/22_locale/num_put/put/char/14220.cc: XFAIL on Solaris\n \t2.10.\n \t* testsuite/22_locale/num_put/put/wchar_t/14220.cc: Likewise."}, {"sha": "d75515e07c42c944c2e8a7e063029676d3d50569", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357480cec516f0c3e2ad527bd944dde9ad39bdab/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357480cec516f0c3e2ad527bd944dde9ad39bdab/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=357480cec516f0c3e2ad527bd944dde9ad39bdab", "patch": "@@ -52,6 +52,12 @@\n #include <bits/cxxabi_tweaks.h>\n #include <cxxabi-forced.h>\n  \n+#ifdef __cplusplus\n+#define _GLIBCXX_NOTHROW throw() \n+#else\n+#define _GLIBCXX_NOTHROW __attribute__((nothrow))\n+#endif\n+\n #ifdef __cplusplus\n namespace __cxxabiv1\n {  \n@@ -137,11 +143,7 @@ namespace __cxxabiv1\n \n   // DSO destruction.\n   int\n-  __cxa_atexit(void (*)(void*), void*, void*)\n-#ifdef __cplusplus\n-    throw ()\n-#endif\n-    ;\n+  __cxa_atexit(void (*)(void*), void*, void*) _GLIBCXX_NOTHROW;\n \n   int\n   __cxa_finalize(void*);"}, {"sha": "7a27ad1977dec247298e9ed7efbfe6a4dab0fcd8", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357480cec516f0c3e2ad527bd944dde9ad39bdab/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357480cec516f0c3e2ad527bd944dde9ad39bdab/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=357480cec516f0c3e2ad527bd944dde9ad39bdab", "patch": "@@ -398,6 +398,9 @@ proc v3_target_compile_as_c { source dest type options } {\n     # the includes variable is not likely to include the necessary\n     # info.\n     if { ![file exists $flags_file] } {\n+\t# ??? We need a --print-include-dirs option to GCC, so that\n+\t# we can avoid these hacks.  The heuristics here will not\n+\t# work with non-standard --with-includedir= options.\n \tset version [remote_exec host ${cc} -dumpversion]\n \t# Remove the trailing newline from the output.\n \tset version [string trimright [lindex $version 1]]\n@@ -406,6 +409,13 @@ proc v3_target_compile_as_c { source dest type options } {\n \tset comp_base_dir [remote_exec host ${cc} --print-prog-name=cc1]\n \tset comp_base_dir [lindex $comp_base_dir 1]\n \tset comp_base_dir [file dirname [file dirname [file dirname [file dirname [file dirname $comp_base_dir]]]]]\n+\t# For a cross compiler, the header files will be located in a\n+\t# machine-specific subdirectory.\n+\tset crossbase \"${comp_base_dir}/${machine}/include/c++/${version}\"\n+\tset crosstarget \"${crossbase}/${machine}\"\n+\tset cc_final [concat $cc_final \"-I$crossbase -I$crosstarget\"]\n+\t# For a native compiler, the header files will be located at \n+\t# the top level.\n \tset includesbase \"${comp_base_dir}/include/c++/${version}\"\n \tset includestarget \"${includesbase}/${machine}\"\n \tset cc_final [concat $cc_final \"-I$includesbase -I$includestarget\"]"}]}