{"sha": "6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "node_id": "C_kwDOANBUbNoAKDZhZDZhNzhhNGFlNDIzNThlMWYyY2JkMzZmMjY3NDBhZTA1ZTIxNDY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T18:05:14Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "ast: Add outer attribute getter to Expr class\n\nWe need to retrieve outer attributes from some Expressions depending on\ntheir context. This means this should be retrieved from their parent\nnode. But expr did not have a getter for outer attributes since some\nexpr can't have any outer attribute.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h: Add getter to Expr class.\n\t* ast/rust-expr.h: Add override attribute to existing getters.\n\tAlso implement it for RangeExpr, attempting to retrieve outer\n\tattributes on those types will crash the compiler.\n\t* ast/rust-macro.h: Add override attribute to existing getters.\n\t* ast/rust-path.h: Likewise.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "5967e9b98ca90551b4cbc7a59af9c6f278b5ea3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5967e9b98ca90551b4cbc7a59af9c6f278b5ea3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe11b51bd316141618b41292e74b4439b02860ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe11b51bd316141618b41292e74b4439b02860ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe11b51bd316141618b41292e74b4439b02860ac"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "09eef4eec298417662efe096c4c2bbf9890956ec", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "patch": "@@ -980,6 +980,8 @@ class Expr : public Node\n \n   virtual void set_node_id (NodeId id) { node_id = id; }\n \n+  virtual std::vector<Attribute> &get_outer_attrs () = 0;\n+\n protected:\n   // Constructor\n   Expr () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n@@ -1064,7 +1066,7 @@ class IdentifierExpr : public ExprWithoutBlock\n   bool is_marked_for_strip () const override { return ident.empty (); }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {"}, {"sha": "bcf5ab3b364c36d8baddc494cb976502772ddaad", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "patch": "@@ -78,7 +78,7 @@ class LiteralExpr : public ExprWithoutBlock\n   bool is_marked_for_strip () const override { return literal.is_error (); }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -269,7 +269,7 @@ class OperatorExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -865,7 +865,7 @@ class GroupedExpr : public ExprWithoutBlock\n   std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1096,7 +1096,7 @@ class ArrayExpr : public ExprWithoutBlock\n   std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1256,7 +1256,7 @@ class ArrayIndexExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1290,7 +1290,7 @@ class TupleExpr : public ExprWithoutBlock\n   std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1439,7 +1439,7 @@ class TupleIndexExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1483,7 +1483,7 @@ class StructExpr : public ExprWithoutBlock\n   bool is_marked_for_strip () const override { return struct_name.is_error (); }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1938,7 +1938,7 @@ class CallExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2041,7 +2041,7 @@ class MethodCallExpr : public ExprWithoutBlock\n   PathExprSegment &get_method_name () { return method_name; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2126,7 +2126,7 @@ class FieldAccessExpr : public ExprWithoutBlock\n   Identifier get_field_name () const { return field; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2254,7 +2254,7 @@ class ClosureExpr : public ExprWithoutBlock\n   std::vector<ClosureParam> &get_params () { return params; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2449,7 +2449,7 @@ class BlockExpr : public ExprWithBlock\n   void strip_tail_expr () { expr = nullptr; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2594,7 +2594,7 @@ class ContinueExpr : public ExprWithoutBlock\n   bool is_marked_for_strip () const override { return marked_for_strip; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2690,7 +2690,7 @@ class BreakExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -2725,6 +2725,12 @@ class RangeExpr : public ExprWithoutBlock\n   {\n     rust_assert (false);\n   }\n+\n+  std::vector<Attribute> &get_outer_attrs () override\n+  {\n+    // RangeExpr cannot have any outer attributes\n+    rust_assert (false);\n+  }\n };\n \n // Range from (inclusive) and to (exclusive) expression AST node object\n@@ -3180,7 +3186,7 @@ class ReturnExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -3262,7 +3268,7 @@ class UnsafeBlockExpr : public ExprWithBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -3381,7 +3387,7 @@ class BaseLoopExpr : public ExprWithBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -3730,7 +3736,7 @@ class IfExpr : public ExprWithBlock\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n protected:\n   // Base clone function but still concrete as concrete base class\n@@ -3979,7 +3985,7 @@ class IfLetExpr : public ExprWithBlock\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -4455,7 +4461,7 @@ class MatchExpr : public ExprWithBlock\n   std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -4544,7 +4550,7 @@ class AwaitExpr : public ExprWithoutBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -4626,7 +4632,7 @@ class AsyncBlockExpr : public ExprWithBlock\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {"}, {"sha": "e66da0d0becaa2ef0598253c60ab2f820d61f4e5", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "patch": "@@ -673,7 +673,7 @@ class MacroInvocation : public TypeNoBounds,\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {"}, {"sha": "b76faefb42bf78aae7627bd2ccbf2531f9e516e2", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad6a78a4ae42358e1f2cbd36f26740ae05e2146/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=6ad6a78a4ae42358e1f2cbd36f26740ae05e2146", "patch": "@@ -636,7 +636,7 @@ class PathInExpression : public PathPattern, public PathExpr\n   NodeId get_node_id () const override { return _node_id; }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {\n@@ -1233,7 +1233,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n   }\n \n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  std::vector<Attribute> &get_outer_attrs () override { return outer_attrs; }\n \n   void set_outer_attrs (std::vector<Attribute> new_attrs) override\n   {"}]}