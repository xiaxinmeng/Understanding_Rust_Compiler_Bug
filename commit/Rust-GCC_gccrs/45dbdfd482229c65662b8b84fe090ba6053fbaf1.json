{"sha": "45dbdfd482229c65662b8b84fe090ba6053fbaf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkYmRmZDQ4MjIyOWM2NTY2MmI4Yjg0ZmUwOTBiYTYwNTNmYmFmMQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-10-10T16:39:26Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-10-10T16:39:26Z"}, "message": "cris.c (cris_preferred_reload_class): New function.\n\n\t* config/cris/cris.c (cris_preferred_reload_class): New function.\n\t(TARGET_PREFERRED_RELOAD_CLASS): Define.\n\t* config/cris/cris.h (PREFERRED_RELOAD_CLASS): Remove.\n\nFrom-SVN: r179761", "tree": {"sha": "dc23909a3b5d9a74c80010fa9d89718463f846ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc23909a3b5d9a74c80010fa9d89718463f846ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45dbdfd482229c65662b8b84fe090ba6053fbaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dbdfd482229c65662b8b84fe090ba6053fbaf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45dbdfd482229c65662b8b84fe090ba6053fbaf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dbdfd482229c65662b8b84fe090ba6053fbaf1/comments", "author": null, "committer": null, "parents": [{"sha": "917e14f3d2781c8b4e3b944313e9b9ef3af77425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917e14f3d2781c8b4e3b944313e9b9ef3af77425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917e14f3d2781c8b4e3b944313e9b9ef3af77425"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "5dc668056bd520973b0ff717b416ea3b6920517b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dbdfd482229c65662b8b84fe090ba6053fbaf1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dbdfd482229c65662b8b84fe090ba6053fbaf1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45dbdfd482229c65662b8b84fe090ba6053fbaf1", "patch": "@@ -1,3 +1,9 @@\n+2011-10-10  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/cris/cris.c (cris_preferred_reload_class): New function.\n+\t(TARGET_PREFERRED_RELOAD_CLASS): Define.\n+\t* config/cris/cris.h (PREFERRED_RELOAD_CLASS): Remove.\n+\n 2011-10-10  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (*tablejump_rjmp): Change insn condition to"}, {"sha": "35ecaa8e2fd6b050ce1fec5e6532cc588c1cc9d3", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dbdfd482229c65662b8b84fe090ba6053fbaf1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dbdfd482229c65662b8b84fe090ba6053fbaf1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=45dbdfd482229c65662b8b84fe090ba6053fbaf1", "patch": "@@ -123,6 +123,8 @@ static void cris_asm_output_mi_thunk\n static void cris_file_start (void);\n static void cris_init_libfuncs (void);\n \n+static reg_class_t cris_preferred_reload_class (rtx, reg_class_t);\n+\n static int cris_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n static int cris_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool cris_rtx_costs (rtx, int, int, int, int *, bool);\n@@ -198,6 +200,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS cris_init_libfuncs\n \n+#undef TARGET_PREFERRED_RELOAD_CLASS\n+#define TARGET_PREFERRED_RELOAD_CLASS cris_preferred_reload_class\n+\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST cris_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST\n@@ -1342,6 +1347,31 @@ cris_reload_address_legitimized (rtx x,\n   return false;\n }\n \n+\n+/* Worker function for TARGET_PREFERRED_RELOAD_CLASS.\n+\n+   It seems like gcc (2.7.2 and 2.9x of 2000-03-22) may send \"NO_REGS\" as\n+   the class for a constant (testcase: __Mul in arit.c).  To avoid forcing\n+   out a constant into the constant pool, we will trap this case and\n+   return something a bit more sane.  FIXME: Check if this is a bug.\n+   Beware that we must not \"override\" classes that can be specified as\n+   constraint letters, or else asm operands using them will fail when\n+   they need to be reloaded.  FIXME: Investigate whether that constitutes\n+   a bug.  */\n+\n+static reg_class_t\n+cris_preferred_reload_class (rtx x ATTRIBUTE_UNUSED, reg_class_t rclass)\n+{\n+  if (rclass != ACR_REGS\n+      && rclass != MOF_REGS\n+      && rclass != SRP_REGS\n+      && rclass != CC0_REGS\n+      && rclass != SPECIAL_REGS)\n+    return GENERAL_REGS;\n+\n+  return rclass;\n+}\n+\n /* Worker function for TARGET_REGISTER_MOVE_COST.  */\n \n static int"}, {"sha": "4c28e4530abb1932f394192a9c5ecc580f576749", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dbdfd482229c65662b8b84fe090ba6053fbaf1/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dbdfd482229c65662b8b84fe090ba6053fbaf1/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=45dbdfd482229c65662b8b84fe090ba6053fbaf1", "patch": "@@ -583,22 +583,6 @@ enum reg_class\n /* See REGNO_OK_FOR_BASE_P.  */\n #define REGNO_OK_FOR_INDEX_P(REGNO) REGNO_OK_FOR_BASE_P(REGNO)\n \n-/* It seems like gcc (2.7.2 and 2.9x of 2000-03-22) may send \"NO_REGS\" as\n-   the class for a constant (testcase: __Mul in arit.c).  To avoid forcing\n-   out a constant into the constant pool, we will trap this case and\n-   return something a bit more sane.  FIXME: Check if this is a bug.\n-   Beware that we must not \"override\" classes that can be specified as\n-   constraint letters, or else asm operands using them will fail when\n-   they need to be reloaded.  FIXME: Investigate whether that constitutes\n-   a bug.  */\n-#define PREFERRED_RELOAD_CLASS(X, CLASS)\t\\\n- ((CLASS) != ACR_REGS\t\t\t\t\\\n-  && (CLASS) != MOF_REGS\t\t\t\\\n-  && (CLASS) != SRP_REGS\t\t\t\\\n-  && (CLASS) != CC0_REGS\t\t\t\\\n-  && (CLASS) != SPECIAL_REGS\t\t\t\\\n-  ? GENERAL_REGS : (CLASS))\n-\n /* We can't move special registers to and from memory in smaller than\n    word_mode.  We also can't move between special registers.  Luckily,\n    -1, as returned by true_regnum for non-sub/registers, is valid as a"}]}