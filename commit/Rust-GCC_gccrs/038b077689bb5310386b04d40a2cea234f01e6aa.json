{"sha": "038b077689bb5310386b04d40a2cea234f01e6aa", "node_id": "C_kwDOANBUbNoAKDAzOGIwNzc2ODliYjUzMTAzODZiMDRkNDBhMmNlYTIzNGYwMWU2YWE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-06-22T10:27:15Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-06-22T10:27:15Z"}, "message": "data-ref: Improve non-loop disambiguation [PR106019]\n\nWhen dr_may_alias_p is called without a loop context, it tries\nto use the tree-affine interface to calculate the difference\nbetween the two addresses and use that difference to check whether\nthe gap between the accesses is known at compile time.  However, as the\nexample in the PR shows, this doesn't expand SSA_NAMEs and so can easily\nbe defeated by things like reassociation.\n\nOne fix would have been to use aff_combination_expand to expand the\nSSA_NAMEs, but we'd then need some way of maintaining the associated\ncache.  This patch instead reuses the innermost_loop_behavior fields\n(which exist even when no loop context is provided).\n\nIt might still be useful to do the aff_combination_expand thing too,\nif an example turns out to need it.\n\ngcc/\n\tPR tree-optimization/106019\n\t* tree-data-ref.cc (dr_may_alias_p): Try using the\n\tinnermost_loop_behavior to disambiguate non-loop queries.\n\ngcc/testsuite/\n\tPR tree-optimization/106019\n\t* gcc.dg/vect/bb-slp-pr106019.c: New test.", "tree": {"sha": "7171bb5b1ab6060b86aef2959504158ac972a7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7171bb5b1ab6060b86aef2959504158ac972a7a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/038b077689bb5310386b04d40a2cea234f01e6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038b077689bb5310386b04d40a2cea234f01e6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038b077689bb5310386b04d40a2cea234f01e6aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038b077689bb5310386b04d40a2cea234f01e6aa/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b6e62cf5e7d477b5797084da59561f6d018668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b6e62cf5e7d477b5797084da59561f6d018668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b6e62cf5e7d477b5797084da59561f6d018668"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "218d7cca33d5c9320d665e095706a10bcee59ebf", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr106019.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038b077689bb5310386b04d40a2cea234f01e6aa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr106019.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038b077689bb5310386b04d40a2cea234f01e6aa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr106019.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr106019.c?ref=038b077689bb5310386b04d40a2cea234f01e6aa", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+void f(double *p, long i)\n+{\n+    p[i+0] += 1;\n+    p[i+1] += 1;\n+}\n+void g(double *p, long i)\n+{\n+    double *q = p + i;\n+    q[0] += 1;\n+    q[1] += 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"can't determine dependence\" slp2 } } */"}, {"sha": "ff9327f6deb2bb85abbd3853dca9c666699e7a37", "filename": "gcc/tree-data-ref.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/038b077689bb5310386b04d40a2cea234f01e6aa/gcc%2Ftree-data-ref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/038b077689bb5310386b04d40a2cea234f01e6aa/gcc%2Ftree-data-ref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.cc?ref=038b077689bb5310386b04d40a2cea234f01e6aa", "patch": "@@ -2968,6 +2968,25 @@ dr_may_alias_p (const struct data_reference *a, const struct data_reference *b,\n      disambiguation.  */\n   if (!loop_nest)\n     {\n+      tree tree_size_a = TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (a)));\n+      tree tree_size_b = TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (b)));\n+\n+      if (DR_BASE_ADDRESS (a)\n+\t  && DR_BASE_ADDRESS (b)\n+\t  && operand_equal_p (DR_BASE_ADDRESS (a), DR_BASE_ADDRESS (b))\n+\t  && operand_equal_p (DR_OFFSET (a), DR_OFFSET (b))\n+\t  && poly_int_tree_p (tree_size_a)\n+\t  && poly_int_tree_p (tree_size_b)\n+\t  && !ranges_maybe_overlap_p (wi::to_widest (DR_INIT (a)),\n+\t\t\t\t      wi::to_widest (tree_size_a),\n+\t\t\t\t      wi::to_widest (DR_INIT (b)),\n+\t\t\t\t      wi::to_widest (tree_size_b)))\n+\t{\n+\t  gcc_assert (integer_zerop (DR_STEP (a))\n+\t\t      && integer_zerop (DR_STEP (b)));\n+\t  return false;\n+\t}\n+\n       aff_tree off1, off2;\n       poly_widest_int size1, size2;\n       get_inner_reference_aff (DR_REF (a), &off1, &size1);"}]}