{"sha": "38ee08158813b3e8c5191017af03ed5d21a12f63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlZTA4MTU4ODEzYjNlOGM1MTkxMDE3YWYwM2VkNWQyMWExMmY2Mw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-01-27T18:17:41Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-01-27T18:17:41Z"}, "message": "avr-protos.h (lpm_reg_rtx, [...]): Make global.\n\n\t* config/avr/avr-protos.h (lpm_reg_rtx, lpm_addr_reg_rtx,\n\ttmp_reg_rtx, zero_reg_rtx, all_regs_rtx, rampz_rtx): Make global.\n\t* config/avr/avr.c: Ditto.\n\t(avr_regnames): Remove because unused.\n\t* config/avr/avr.md (*cpse.ne): New peephole.\n\t(*cpse.eq): New peephole from former cpse peepholes.\n\nFrom-SVN: r183638", "tree": {"sha": "a10e8f615e0c15b8585dd863090e0556134ed729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a10e8f615e0c15b8585dd863090e0556134ed729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38ee08158813b3e8c5191017af03ed5d21a12f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ee08158813b3e8c5191017af03ed5d21a12f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ee08158813b3e8c5191017af03ed5d21a12f63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ee08158813b3e8c5191017af03ed5d21a12f63/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c71382973462c5ac36e8740c692066020eedfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c71382973462c5ac36e8740c692066020eedfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c71382973462c5ac36e8740c692066020eedfe8"}], "stats": {"total": 110, "additions": 82, "deletions": 28}, "files": [{"sha": "8773d622c182536ab5278869db8ffc8d007362b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38ee08158813b3e8c5191017af03ed5d21a12f63", "patch": "@@ -1,3 +1,12 @@\n+2012-01-27  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-protos.h (lpm_reg_rtx, lpm_addr_reg_rtx,\n+\ttmp_reg_rtx, zero_reg_rtx, all_regs_rtx, rampz_rtx): Make global.\n+\t* config/avr/avr.c: Ditto.\n+\t(avr_regnames): Remove because unused.\n+\t* config/avr/avr.md (*cpse.ne): New peephole.\n+\t(*cpse.eq): New peephole from former cpse peepholes.\n+\n 2012-01-27  Michael Eager  <eager@eagercon.com>\n \n \t* config/microblaze.c (microblaze_emit_compare): Correct"}, {"sha": "2575fc497cd74349183414f26dd35aae8ce731c0", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=38ee08158813b3e8c5191017af03ed5d21a12f63", "patch": "@@ -124,6 +124,14 @@ extern bool avr_mem_flash_p (rtx);\n extern bool avr_mem_memx_p (rtx);\n extern bool avr_load_libgcc_p (rtx);\n extern bool avr_xload_libgcc_p (enum machine_mode);\n+\n+extern rtx lpm_reg_rtx;\n+extern rtx lpm_addr_reg_rtx;\n+extern rtx tmp_reg_rtx;\n+extern rtx zero_reg_rtx;\n+extern rtx all_regs_rtx[32];\n+extern rtx rampz_rtx;\n+\n #endif /* RTX_CODE */\n \n #ifdef REAL_VALUE_TYPE"}, {"sha": "968f450c4f44853f9f0e60ccd8a31f2451d160ad", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=38ee08158813b3e8c5191017af03ed5d21a12f63", "patch": "@@ -140,30 +140,33 @@ static bool avr_rtx_costs (rtx, int, int, int, int *, bool);\n #define FIRST_CUM_REG 26\n \n /* Implicit target register of LPM instruction (R0) */\n-static GTY(()) rtx lpm_reg_rtx;\n+extern GTY(()) rtx lpm_reg_rtx;\n+rtx lpm_reg_rtx;\n \n /* (Implicit) address register of LPM instruction (R31:R30 = Z) */\n-static GTY(()) rtx lpm_addr_reg_rtx;\n+extern GTY(()) rtx lpm_addr_reg_rtx;\n+rtx lpm_addr_reg_rtx;\n \n-/* Temporary register RTX (gen_rtx_REG (QImode, TMP_REGNO)) */\n-static GTY(()) rtx tmp_reg_rtx;\n+/* Temporary register RTX (reg:QI TMP_REGNO) */\n+extern GTY(()) rtx tmp_reg_rtx;\n+rtx tmp_reg_rtx;\n \n-/* Zeroed register RTX (gen_rtx_REG (QImode, ZERO_REGNO)) */\n-static GTY(()) rtx zero_reg_rtx;\n+/* Zeroed register RTX (reg:QI ZERO_REGNO) */\n+extern GTY(()) rtx zero_reg_rtx;\n+rtx zero_reg_rtx;\n+\n+/* RTXs for all general purpose registers as QImode */\n+extern GTY(()) rtx all_regs_rtx[32];\n+rtx all_regs_rtx[32];\n \n /* RAMPZ special function register */\n-static GTY(()) rtx rampz_rtx;\n+extern GTY(()) rtx rampz_rtx;\n+rtx rampz_rtx;\n \n /* RTX containing the strings \"\" and \"e\", respectively */\n static GTY(()) rtx xstring_empty;\n static GTY(()) rtx xstring_e;\n \n-/* RTXs for all general purpose registers as QImode */\n-static GTY(()) rtx all_regs_rtx[32];\n-\n-/* AVR register names {\"r0\", \"r1\", ..., \"r31\"} */\n-static const char *const avr_regnames[] = REGISTER_NAMES;\n-\n /* Preprocessor macros to define depending on MCU type.  */\n const char *avr_extra_arch_macro;\n "}, {"sha": "24044b3a8f9ca37a4ed8f175e6458becffe950eb", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38ee08158813b3e8c5191017af03ed5d21a12f63/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=38ee08158813b3e8c5191017af03ed5d21a12f63", "patch": "@@ -5010,27 +5010,61 @@\n           AS1 (jmp,%1));\n }\")\n \n-(define_peephole\n+\n+(define_peephole ; \"*cpse.eq\"\n   [(set (cc0)\n-\t(compare (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t (const_int 0)))\n+        (compare (match_operand:QI 1 \"register_operand\" \"r,r\")\n+                 (match_operand:QI 2 \"reg_or_0_operand\" \"r,L\")))\n    (set (pc)\n-\t(if_then_else (eq (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 1 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"jump_over_one_insn_p (insn, operands[1])\"\n-  \"cpse %0,__zero_reg__\")\n+        (if_then_else (eq (cc0)\n+                          (const_int 0))\n+                      (label_ref (match_operand 0 \"\" \"\"))\n+                      (pc)))]\n+  \"jump_over_one_insn_p (insn, operands[0])\"\n+  \"@\n+\tcpse %1,%2\n+\tcpse %1,__zero_reg__\")\n \n-(define_peephole\n+;; This peephole avoids code like\n+;;\n+;;     TST   Rn     ; *cmpqi\n+;;     BREQ  .+2    ; branch\n+;;     RJMP  .Lm\n+;;\n+;; Notice that the peephole is always shorter than cmpqi + branch.\n+;; The reason to write it as peephole is that sequences like\n+;;     \n+;;     AND   Rm, Rn\n+;;     BRNE  .La\n+;;\n+;; shall not be superseeded.  With a respective combine pattern\n+;; the latter sequence would be \n+;;     \n+;;     AND   Rm, Rn\n+;;     CPSE  Rm, __zero_reg__\n+;;     RJMP  .La\n+;;\n+;; and thus longer and slower and not easy to be rolled back.\n+\n+(define_peephole ; \"*cpse.ne\"\n   [(set (cc0)\n-        (compare (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t (match_operand:QI 1 \"register_operand\" \"\")))\n+        (compare (match_operand:QI 1 \"register_operand\" \"\")\n+                 (match_operand:QI 2 \"reg_or_0_operand\" \"\")))\n    (set (pc)\n-\t(if_then_else (eq (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+        (if_then_else (ne (cc0)\n+                          (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n-  \"jump_over_one_insn_p (insn, operands[2])\"\n-  \"cpse %0,%1\")\n+  \"!AVR_HAVE_JMP_CALL\n+   || !avr_current_device->errata_skip\"\n+  {\n+    if (operands[2] == const0_rtx)\n+      operands[2] = zero_reg_rtx;\n+\n+    return 3 == avr_jump_mode (operands[0], insn)\n+      ? \"cpse %1,%2\\;jmp %0\"\n+      : \"cpse %1,%2\\;rjmp %0\";\n+  })\n \n ;;pppppppppppppppppppppppppppppppppppppppppppppppppppp\n ;;prologue/epilogue support instructions"}]}