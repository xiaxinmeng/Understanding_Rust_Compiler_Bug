{"sha": "a460d06d168e1406f780dd3f5a71b23684bf0769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2MGQwNmQxNjhlMTQwNmY3ODBkZDNmNWE3MWIyMzY4NGJmMDc2OQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-07-29T12:41:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-07-29T12:41:32Z"}, "message": "range_access.h: Change class to typename in every template.\n\n2015-07-29  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\t* include/bits/range_access.h: Change class to typename in every\n\ttemplate.\n\t(size, empty, data): New functions from N4280.\n\t* testsuite/24_iterators/container_access.cc: New.\n\nFrom-SVN: r226348", "tree": {"sha": "835179fd52aee02b4f5df9b66a94d7d6c67d8d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835179fd52aee02b4f5df9b66a94d7d6c67d8d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a460d06d168e1406f780dd3f5a71b23684bf0769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a460d06d168e1406f780dd3f5a71b23684bf0769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a460d06d168e1406f780dd3f5a71b23684bf0769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a460d06d168e1406f780dd3f5a71b23684bf0769/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa9ba224e9c93221cda08900070b7e66b5541ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa9ba224e9c93221cda08900070b7e66b5541ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa9ba224e9c93221cda08900070b7e66b5541ee"}], "stats": {"total": 126, "additions": 108, "deletions": 18}, "files": [{"sha": "bf774bfba96da8a817b7a34d30d97661286c1e2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a460d06d168e1406f780dd3f5a71b23684bf0769/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a460d06d168e1406f780dd3f5a71b23684bf0769/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a460d06d168e1406f780dd3f5a71b23684bf0769", "patch": "@@ -1,5 +1,10 @@\n 2015-07-29  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n+\t* include/bits/range_access.h: Change class to typename in every\n+\ttemplate.\n+\t(size, empty, data): New functions from N4280.\n+\t* testsuite/24_iterators/container_access.cc: New.\n+\n \tPR libstdc++/60970\n \t* include/bits/functional_hash.h (__hash_enum): New.\n \t(hash): Derive from __hash_enum."}, {"sha": "2a1059885d7b34d29ab0ee478327768e826d01ae", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 103, "deletions": 18, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a460d06d168e1406f780dd3f5a71b23684bf0769/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a460d06d168e1406f780dd3f5a71b23684bf0769/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=a460d06d168e1406f780dd3f5a71b23684bf0769", "patch": "@@ -43,7 +43,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     begin(_Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     begin(const _Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n@@ -63,7 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     end(_Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n@@ -73,7 +73,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     end(const _Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n@@ -82,7 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Return an iterator pointing to the first element of the array.\n    *  @param  __arr  Array.\n    */\n-  template<class _Tp, size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n     begin(_Tp (&__arr)[_Nm])\n     { return __arr; }\n@@ -92,7 +92,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          of the array.\n    *  @param  __arr  Array.\n    */\n-  template<class _Tp, size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n     end(_Tp (&__arr)[_Nm])\n     { return __arr + _Nm; }\n@@ -103,7 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline constexpr auto\n     cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))\n       -> decltype(std::begin(__cont))\n@@ -114,7 +114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline constexpr auto\n     cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))\n       -> decltype(std::end(__cont))\n@@ -125,7 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     rbegin(_Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n@@ -135,7 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     rend(_Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     rend(const _Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n@@ -165,7 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the array.\n    *  @param  __arr  Array.\n    */\n-  template<class _Tp, size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     inline reverse_iterator<_Tp*>\n     rbegin(_Tp (&__arr)[_Nm])\n     { return reverse_iterator<_Tp*>(__arr + _Nm); }\n@@ -175,7 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the array.\n    *  @param  __arr  Array.\n    */\n-  template<class _Tp, size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     inline reverse_iterator<_Tp*>\n     rend(_Tp (&__arr)[_Nm])\n     { return reverse_iterator<_Tp*>(__arr); }\n@@ -185,7 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the initializer_list.\n    *  @param  __il  initializer_list.\n    */\n-  template<class _Tp>\n+  template<typename _Tp>\n     inline reverse_iterator<const _Tp*>\n     rbegin(initializer_list<_Tp> __il)\n     { return reverse_iterator<const _Tp*>(__il.end()); }\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the initializer_list.\n    *  @param  __il  initializer_list.\n    */\n-  template<class _Tp>\n+  template<typename _Tp>\n     inline reverse_iterator<const _Tp*>\n     rend(initializer_list<_Tp> __il)\n     { return reverse_iterator<const _Tp*>(__il.begin()); }\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\n     { return std::rbegin(__cont); }\n@@ -215,13 +215,98 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *          the const container.\n    *  @param  __cont  Container.\n    */\n-  template<class _Container>\n+  template<typename _Container>\n     inline auto\n     crend(const _Container& __cont) -> decltype(std::rend(__cont))\n     { return std::rend(__cont); }\n \n #endif // C++14\n \n+#if __cplusplus > 201402L\n+\n+  /**\n+   *  @brief  Return the size of a container.\n+   *  @param  __cont  Container.\n+   */\n+  template <typename _Container>\n+    constexpr auto\n+    size(const _Container& __cont) -> decltype(__cont.size())\n+    { return __cont.size(); }\n+\n+  /**\n+   *  @brief  Return the size of an array.\n+   *  @param  __array  Array.\n+   */\n+  template <typename _Tp, size_t _N>\n+    constexpr size_t\n+    size(const _Tp (&/*__array*/)[_N]) noexcept\n+    { return _N; }\n+\n+  /**\n+   *  @brief  Return whether a container is empty.\n+   *  @param  __cont  Container.\n+   */\n+  template <typename _Container>\n+    constexpr auto\n+    empty(const _Container& __cont) -> decltype(__cont.empty())\n+    { return __cont.empty(); }\n+\n+  /**\n+   *  @brief  Return whether an array is empty (always false).\n+   *  @param  __array  Container.\n+   */\n+  template <typename _Tp, size_t _N>\n+    constexpr bool\n+    empty(const _Tp (&/*__array*/)[_N]) noexcept\n+    { return false; }\n+\n+  /**\n+   *  @brief  Return whether an initializer_list is empty.\n+   *  @param  __il  Initializer list.\n+   */\n+  template <typename _Tp>\n+    constexpr bool\n+    empty(initializer_list<_Tp> __il) noexcept\n+    { return __il.size() == 0;}\n+\n+  /**\n+   *  @brief  Return the data pointer of a container.\n+   *  @param  __cont  Container.\n+   */\n+  template <typename _Container>\n+    constexpr auto\n+    data(_Container& __cont) -> decltype(__cont.data())\n+    { return __cont.data(); }\n+\n+  /**\n+   *  @brief  Return the data pointer of a const container.\n+   *  @param  __cont  Container.\n+   */\n+  template <typename _Container>\n+    constexpr auto\n+    data(const _Container& __cont) -> decltype(__cont.data())\n+    { return __cont.data(); }\n+\n+  /**\n+   *  @brief  Return the data pointer of an array.\n+   *  @param  __array  Array.\n+   */\n+  template <typename _Tp, size_t _N>\n+    constexpr _Tp*\n+    data(_Tp (&__array)[_N]) noexcept\n+    { return __array; }\n+\n+  /**\n+   *  @brief  Return the data pointer of an initializer list.\n+   *  @param  __il  Initializer list.\n+   */\n+  template <typename _Tp>\n+    constexpr const _Tp*\n+    data(initializer_list<_Tp> __il) noexcept\n+    { return __il.begin(); }\n+\n+#endif // C++17\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}]}