{"sha": "1e326708e83b2e03807c689f14ed3772cd346efc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzMjY3MDhlODNiMmUwMzgwN2M2ODlmMTRlZDM3NzJjZDM0NmVmYw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1998-09-30T18:09:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-30T18:09:47Z"}, "message": "regs.h (HARD_REGNO_CALL_PART_CLOBBERED): New macro.\n\n        * regs.h (HARD_REGNO_CALL_PART_CLOBBERED):  New macro.\n        * local-alloc.c (find_free_reg): Use it.\n        * global.c (find_reg): Likewise.\n        * tm.texi: Document HARD_REGNO_CALL_PART_CLOBBERED.\n\nFrom-SVN: r22688", "tree": {"sha": "4cad448709fc0bd1befbe6fec3245d112509581d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cad448709fc0bd1befbe6fec3245d112509581d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e326708e83b2e03807c689f14ed3772cd346efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e326708e83b2e03807c689f14ed3772cd346efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e326708e83b2e03807c689f14ed3772cd346efc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e326708e83b2e03807c689f14ed3772cd346efc/comments", "author": null, "committer": null, "parents": [{"sha": "b8c08e043a09a5e0ccb342bc89ffe5d39d206635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c08e043a09a5e0ccb342bc89ffe5d39d206635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c08e043a09a5e0ccb342bc89ffe5d39d206635"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "be78bfb144854ddcd6bd031b479d567a104c8367", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e326708e83b2e03807c689f14ed3772cd346efc", "patch": "@@ -24,6 +24,11 @@ Wed Sep 30 18:29:26 1998  Jeffrey A Law  (law@cygnus.com)\n \n Wed Sep 30 18:19:27 1998  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n+\t* regs.h (HARD_REGNO_CALL_PART_CLOBBERED):  New macro.\n+\t* local-alloc.c (find_free_reg): Use it.\n+\t* global.c (find_reg): Likewise.\n+\t* tm.texi: Document HARD_REGNO_CALL_PART_CLOBBERED.\n+\n \t* regs.h (HARD_REGNO_CALLER_SAVE_MODE): New macro.\n \t* caller-save.c (init_caller_save): Use it.\n \t* tm.texi: Document HARD_REGNO_CALLER_SAVE_MODE."}, {"sha": "3b0c0ec7a4cc3136f6d6800c5c272e7ae058edf6", "filename": "gcc/global.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=1e326708e83b2e03807c689f14ed3772cd346efc", "patch": "@@ -976,7 +976,10 @@ find_reg (allocno, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t  int regno = i;\n #endif\n \t  if (! TEST_HARD_REG_BIT (used, regno)\n-\t      && HARD_REGNO_MODE_OK (regno, mode))\n+\t      && HARD_REGNO_MODE_OK (regno, mode)\n+\t      && (allocno_calls_crossed[allocno] == 0\n+\t\t  || accept_call_clobbered\n+\t\t  || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n \t    {\n \t      register int j;\n \t      register int lim = regno + HARD_REGNO_NREGS (regno, mode);"}, {"sha": "3049a98800785ae5995d99c88e3587b5294e3966", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=1e326708e83b2e03807c689f14ed3772cd346efc", "patch": "@@ -2043,7 +2043,10 @@ find_free_reg (class, mode, qty, accept_call_clobbered, just_try_suggested,\n       int regno = i;\n #endif\n       if (! TEST_HARD_REG_BIT (first_used, regno)\n-\t  && HARD_REGNO_MODE_OK (regno, mode))\n+\t  && HARD_REGNO_MODE_OK (regno, mode)\n+\t  && (qty_n_calls_crossed[qty] == 0\n+\t      || accept_call_clobbered\n+\t      || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode)))\n \t{\n \t  register int j;\n \t  register int size1 = HARD_REGNO_NREGS (regno, mode);"}, {"sha": "a4065e6e371fe439d07ea903f596b3104aecd07c", "filename": "gcc/regs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=1e326708e83b2e03807c689f14ed3772cd346efc", "patch": "@@ -217,6 +217,12 @@ extern int caller_save_needed;\n   choose_hard_reg_mode (REGNO, NREGS)\n #endif\n \n+/* Registers that get partially clobbered by a call in a given mode. \n+   These must not be call used registers.  */\n+#ifndef HARD_REGNO_CALL_PART_CLOBBERED\n+#define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE) 0\n+#endif\n+\n /* Allocated in local_alloc.  */\n \n /* A list of SCRATCH rtl allocated by local-alloc.  */"}, {"sha": "463ae8ef6c021534a0010bce890b5bfb82bf8f23", "filename": "gcc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e326708e83b2e03807c689f14ed3772cd346efc/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=1e326708e83b2e03807c689f14ed3772cd346efc", "patch": "@@ -1333,6 +1333,17 @@ If a register has 0 in @code{CALL_USED_REGISTERS}, the compiler\n automatically saves it on function entry and restores it on function\n exit, if the register is used within the function.\n \n+@findex HARD_REGNO_CALL_PART_CLOBBERED\n+@item HARD_REGNO_CALL_PART_CLOBBERED (@var{regno}, @var{mode})\n+@cindex call-used register\n+@cindex call-clobbered register\n+@cindex call-saved register\n+A C expression that is non-zero if it is not permissible to store a\n+value of mode @var{mode} in hard register number @var{regno} across a\n+call without some part of it being clobbered.  For most machines this\n+macro need not be defined.  It is only required for machines that do not\n+preserve the entire contents of a register across a call.\n+\n @findex CONDITIONAL_REGISTER_USAGE\n @findex fixed_regs\n @findex call_used_regs"}]}