{"sha": "246e0bd8798671c3952781a6c1f530c0294a8d65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ2ZTBiZDg3OTg2NzFjMzk1Mjc4MWE2YzFmNTMwYzAyOTRhOGQ2NQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@geoffk.org", "date": "2005-06-24T23:43:15Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-06-24T23:43:15Z"}, "message": "inclhack.def (AAB_darwin7_9_long_double_funcs): New.\n\n\t* inclhack.def (AAB_darwin7_9_long_double_funcs): New.\n\t(AAB_darwin7_9_long_double_funcs_2): New.\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r101305", "tree": {"sha": "1e2705395d305d0c98bff69e13f4b8ac4cb10313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e2705395d305d0c98bff69e13f4b8ac4cb10313"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/246e0bd8798671c3952781a6c1f530c0294a8d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246e0bd8798671c3952781a6c1f530c0294a8d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/246e0bd8798671c3952781a6c1f530c0294a8d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246e0bd8798671c3952781a6c1f530c0294a8d65/comments", "author": {"login": "geoffk02", "id": 34037634, "node_id": "MDQ6VXNlcjM0MDM3NjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34037634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk02", "html_url": "https://github.com/geoffk02", "followers_url": "https://api.github.com/users/geoffk02/followers", "following_url": "https://api.github.com/users/geoffk02/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk02/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk02/subscriptions", "organizations_url": "https://api.github.com/users/geoffk02/orgs", "repos_url": "https://api.github.com/users/geoffk02/repos", "events_url": "https://api.github.com/users/geoffk02/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk02/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e399e2331cb4a82ab314c552c8492da1a9e39e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e399e2331cb4a82ab314c552c8492da1a9e39e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e399e2331cb4a82ab314c552c8492da1a9e39e5"}], "stats": {"total": 283, "additions": 278, "deletions": 5}, "files": [{"sha": "107220d8d5d3310e52fd61c1febd776573ca230f", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246e0bd8798671c3952781a6c1f530c0294a8d65/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246e0bd8798671c3952781a6c1f530c0294a8d65/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=246e0bd8798671c3952781a6c1f530c0294a8d65", "patch": "@@ -1,3 +1,9 @@\n+2005-06-24  Geoffrey Keating  <geoffk@geoffk.org>\n+\n+\t* inclhack.def (AAB_darwin7_9_long_double_funcs): New.\n+\t(AAB_darwin7_9_long_double_funcs_2): New.\n+\t* fixincl.x: Regenerate.\n+\n 2005-06-15  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR libfortran/15266"}, {"sha": "271c14e29ed4b85e07dfe6816e273c9d5d8d8043", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 165, "deletions": 5, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246e0bd8798671c3952781a6c1f530c0294a8d65/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246e0bd8798671c3952781a6c1f530c0294a8d65/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=246e0bd8798671c3952781a6c1f530c0294a8d65", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Wednesday June  8, 2005 at 12:02:02 AM MEST\n+ * It has been AutoGen-ed  Friday June 24, 2005 at 01:40:52 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Wed Jun  8 00:02:03 MEST 2005\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Fri Jun 24 13:40:52 EDT 2005\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 188 fixup descriptions.\n+ * This file contains 190 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -40,6 +40,154 @@\n  *             Boston,  MA  02111-1307, USA.\n  */\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Darwin7_9_Long_Double_Funcs fix\n+ */\n+tSCC zAab_Darwin7_9_Long_Double_FuncsName[] =\n+     \"AAB_darwin7_9_long_double_funcs\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Darwin7_9_Long_Double_FuncsList[] =\n+  \"|architecture/ppc/math.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Darwin7_9_Long_Double_FuncsMachs[] = {\n+        \"*-*-darwin7.9*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zAab_Darwin7_9_Long_Double_FuncsBypass0[] =\n+       \"powl\";\n+\n+#define    AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_TEST_CT  1\n+static tTestDesc aAab_Darwin7_9_Long_Double_FuncsTests[] = {\n+  { TT_NEGREP,   zAab_Darwin7_9_Long_Double_FuncsBypass0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aab_Darwin7_9_Long_Double_Funcs\n+ */\n+static const char* apzAab_Darwin7_9_Long_Double_FuncsPatch[] = {\n+\"/* This file prototypes the long double functions available on Mac OS\\n\\\n+   10.3.9.  */\\n\\\n+#ifndef __MATH__\\n\\\n+# include_next <architecture/ppc/math.h>\\n\\\n+# ifndef __LIBMLDBL_COMPAT\\n\\\n+#  ifdef __LONG_DOUBLE_128__\\n\\\n+#   define __LIBMLDBL_COMPAT(sym) __asm(\\\"_\\\" #sym \\\"$LDBL128\\\")\\n\\\n+#  else\\n\\\n+#   define __LIBMLDBL_COMPAT(sym)\\n\\\n+#  endif /* __LONG_DOUBLE_128__ */\\n\\\n+# endif /* __LIBMLDBL_COMPAT */\\n\\\n+# ifdef __cplusplus\\n\\\n+   extern \\\"C\\\" {\\n\\\n+# endif\\n\\\n+  extern long double acosl( long double ) __LIBMLDBL_COMPAT(acosl);\\n\\\n+  extern long double asinl( long double ) __LIBMLDBL_COMPAT(asinl);\\n\\\n+  extern long double atanl( long double ) __LIBMLDBL_COMPAT(atanl);\\n\\\n+  extern long double atan2l( long double, long double ) __LIBMLDBL_COMPAT(atan2l);\\n\\\n+  extern long double cosl( long double ) __LIBMLDBL_COMPAT(cosl);\\n\\\n+  extern long double sinl( long double ) __LIBMLDBL_COMPAT(sinl);\\n\\\n+  extern long double tanl( long double ) __LIBMLDBL_COMPAT(tanl);\\n\\\n+  extern long double acoshl( long double ) __LIBMLDBL_COMPAT(acoshl);\\n\\\n+  extern long double asinhl( long double ) __LIBMLDBL_COMPAT(asinhl);\\n\\\n+  extern long double atanhl( long double ) __LIBMLDBL_COMPAT(atanhl);\\n\\\n+  extern long double coshl( long double ) __LIBMLDBL_COMPAT(coshl);\\n\\\n+  extern long double sinhl( long double ) __LIBMLDBL_COMPAT(sinhl);\\n\\\n+  extern long double tanhl( long double ) __LIBMLDBL_COMPAT(tanhl);\\n\\\n+  extern long double expl( long double ) __LIBMLDBL_COMPAT(expl);\\n\\\n+  extern long double exp2l( long double ) __LIBMLDBL_COMPAT(exp2l);\\n\\\n+  extern long double expm1l( long double ) __LIBMLDBL_COMPAT(expm1l);\\n\\\n+  extern long double logl( long double ) __LIBMLDBL_COMPAT(logl);\\n\\\n+  extern long double log10l( long double ) __LIBMLDBL_COMPAT(log10l);\\n\\\n+  extern long double log2l( long double ) __LIBMLDBL_COMPAT(log2l);\\n\\\n+  extern long double log1pl( long double ) __LIBMLDBL_COMPAT(log1pl);\\n\\\n+  extern long double logbl( long double ) __LIBMLDBL_COMPAT(logbl);\\n\\\n+  extern long double modfl( long double, long double * ) __LIBMLDBL_COMPAT(modfl);\\n\\\n+  extern long double ldexpl( long double, int ) __LIBMLDBL_COMPAT(ldexpl);\\n\\\n+  extern long double frexpl( long double, int * ) __LIBMLDBL_COMPAT(frexpl);\\n\\\n+  extern int ilogbl( long double ) __LIBMLDBL_COMPAT(ilogbl);\\n\\\n+  extern long double scalbnl( long double, int ) __LIBMLDBL_COMPAT(scalbnl);\\n\\\n+  extern long double scalblnl( long double, long int ) __LIBMLDBL_COMPAT(scalblnl);\\n\\\n+  extern long double fabsl( long double ) __LIBMLDBL_COMPAT(fabsl);\\n\\\n+  extern long double cbrtl( long double ) __LIBMLDBL_COMPAT(cbrtl);\\n\\\n+  extern long double hypotl( long double, long double ) __LIBMLDBL_COMPAT(hypotl);\\n\\\n+  extern long double powl( long double, long double ) __LIBMLDBL_COMPAT(powl);\\n\\\n+  extern long double sqrtl( long double ) __LIBMLDBL_COMPAT(sqrtl);\\n\\\n+  extern long double erfl( long double ) __LIBMLDBL_COMPAT(erfl);\\n\\\n+  extern long double erfcl( long double ) __LIBMLDBL_COMPAT(erfcl);\\n\\\n+  extern long double lgammal( long double ) __LIBMLDBL_COMPAT(lgammal);\\n\\\n+  extern long double tgammal( long double ) __LIBMLDBL_COMPAT(tgammal);\\n\\\n+  extern long double ceill( long double ) __LIBMLDBL_COMPAT(ceill);\\n\\\n+  extern long double floorl( long double ) __LIBMLDBL_COMPAT(floorl);\\n\\\n+  extern long double nearbyintl( long double ) __LIBMLDBL_COMPAT(nearbyintl);\\n\\\n+  extern long double rintl( long double ) __LIBMLDBL_COMPAT(rintl);\\n\\\n+  extern long int lrintl( long double ) __LIBMLDBL_COMPAT(lrintl);\\n\\\n+  extern long long int llrintl( long double ) __LIBMLDBL_COMPAT(llrintl);\\n\\\n+  extern long double roundl( long double ) __LIBMLDBL_COMPAT(roundl);\\n\\\n+  extern long int lroundl( long double ) __LIBMLDBL_COMPAT(lroundl);\\n\\\n+  extern long long int llroundl( long double ) __LIBMLDBL_COMPAT(llroundl);\\n\\\n+  extern long double truncl( long double ) __LIBMLDBL_COMPAT(truncl);\\n\\\n+  extern long double fmodl( long double, long double) __LIBMLDBL_COMPAT(fmodl);\\n\\\n+  extern long double remainderl( long double, long double ) __LIBMLDBL_COMPAT(remainderl);\\n\\\n+  extern long double remquol( long double, long double, int * ) __LIBMLDBL_COMPAT(remquol);\\n\\\n+  extern long double copysignl( long double, long double ) __LIBMLDBL_COMPAT(copysignl);\\n\\\n+  extern long double nanl( const char * ) __LIBMLDBL_COMPAT(nanl);\\n\\\n+  extern long double nextafterl( long double, long double ) __LIBMLDBL_COMPAT(nextafterl);\\n\\\n+  extern long double nexttowardl( long double, long double ) __LIBMLDBL_COMPAT(nexttowardl);\\n\\\n+  extern long double fdiml( long double, long double ) __LIBMLDBL_COMPAT(fdiml);\\n\\\n+  extern long double fmaxl( long double, long double ) __LIBMLDBL_COMPAT(fmaxl);\\n\\\n+  extern long double fminl( long double, long double ) __LIBMLDBL_COMPAT(fminl);\\n\\\n+  extern long double fmal( long double, long double, long double ) __LIBMLDBL_COMPAT(fmal);\\n\\\n+# ifdef __cplusplus\\n\\\n+   }\\n\\\n+# endif\\n\\\n+#endif /* __MATH__ */\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Darwin7_9_Long_Double_Funcs_2 fix\n+ */\n+tSCC zAab_Darwin7_9_Long_Double_Funcs_2Name[] =\n+     \"AAB_darwin7_9_long_double_funcs_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Darwin7_9_Long_Double_Funcs_2List[] =\n+  \"|math.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Darwin7_9_Long_Double_Funcs_2Machs[] = {\n+        \"*-*-darwin7.9*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zAab_Darwin7_9_Long_Double_Funcs_2Select0[] =\n+       \"#include[ \\\\t]+\\\\\\\"\";\n+\n+#define    AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_TEST_CT  1\n+static tTestDesc aAab_Darwin7_9_Long_Double_Funcs_2Tests[] = {\n+  { TT_EGREP,    zAab_Darwin7_9_Long_Double_Funcs_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aab_Darwin7_9_Long_Double_Funcs_2\n+ */\n+static const char* apzAab_Darwin7_9_Long_Double_Funcs_2Patch[] = {\n+    \"format\",\n+    \"%1<%2.h>\",\n+    \"([ \\\\t]*#[ \\\\t]*include[ \\\\t]+)\\\"([a-z0-9/]+)\\\\.h\\\"\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Aab_Fd_Zero_Asm_Posix_Types_H fix\n@@ -7574,14 +7722,16 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          227\n+#define REGEX_COUNT          229\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            188\n+#define FIX_COUNT            190\n \n /*\n  *  Enumerate the fixes\n  */\n typedef enum {\n+    AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_FIXIDX,\n+    AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_FIXIDX,\n     AAB_FD_ZERO_ASM_POSIX_TYPES_H_FIXIDX,\n     AAB_FD_ZERO_GNU_TYPES_H_FIXIDX,\n     AAB_FD_ZERO_SELECTBITS_H_FIXIDX,\n@@ -7773,6 +7923,16 @@ typedef enum {\n } t_fixinc_idx;\n \n tFixDesc fixDescList[ FIX_COUNT ] = {\n+  {  zAab_Darwin7_9_Long_Double_FuncsName,    zAab_Darwin7_9_Long_Double_FuncsList,\n+     apzAab_Darwin7_9_Long_Double_FuncsMachs,\n+     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,\n+     aAab_Darwin7_9_Long_Double_FuncsTests,   apzAab_Darwin7_9_Long_Double_FuncsPatch, 0 },\n+\n+  {  zAab_Darwin7_9_Long_Double_Funcs_2Name,    zAab_Darwin7_9_Long_Double_Funcs_2List,\n+     apzAab_Darwin7_9_Long_Double_Funcs_2Machs,\n+     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAab_Darwin7_9_Long_Double_Funcs_2Tests,   apzAab_Darwin7_9_Long_Double_Funcs_2Patch, 0 },\n+\n   {  zAab_Fd_Zero_Asm_Posix_Types_HName,    zAab_Fd_Zero_Asm_Posix_Types_HList,\n      apzAab_Fd_Zero_Asm_Posix_Types_HMachs,\n      AAB_FD_ZERO_ASM_POSIX_TYPES_H_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,"}, {"sha": "2ff588719b7007a1623a62ed39077d52c307d223", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246e0bd8798671c3952781a6c1f530c0294a8d65/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246e0bd8798671c3952781a6c1f530c0294a8d65/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=246e0bd8798671c3952781a6c1f530c0294a8d65", "patch": "@@ -20,6 +20,113 @@ autogen definitions fixincl;\n FIXINC_DEBUG = yes;\n #endif\n \n+/*\n+ *  On Mac OS 10.3.9, the 'long double' functions are available in\n+ *  libSystem, but are not prototyped in math.h.\n+ */\n+fix = {\n+  hackname  = AAB_darwin7_9_long_double_funcs;\n+  mach      = \"*-*-darwin7.9*\";\n+  files     = architecture/ppc/math.h;\n+  bypass    = \"powl\";\n+  replace = <<- _EndOfHeader_\n+/* This file prototypes the long double functions available on Mac OS\n+   10.3.9.  */\n+#ifndef __MATH__\n+# include_next <architecture/ppc/math.h>\n+# ifndef __LIBMLDBL_COMPAT\n+#  ifdef __LONG_DOUBLE_128__\n+#   define __LIBMLDBL_COMPAT(sym) __asm(\"_\" #sym \"$LDBL128\")\n+#  else\n+#   define __LIBMLDBL_COMPAT(sym)\n+#  endif /* __LONG_DOUBLE_128__ */\n+# endif /* __LIBMLDBL_COMPAT */\n+# ifdef __cplusplus\n+   extern \"C\" {\n+# endif\n+  extern long double acosl( long double ) __LIBMLDBL_COMPAT(acosl);\n+  extern long double asinl( long double ) __LIBMLDBL_COMPAT(asinl);\n+  extern long double atanl( long double ) __LIBMLDBL_COMPAT(atanl);\n+  extern long double atan2l( long double, long double ) __LIBMLDBL_COMPAT(atan2l);\n+  extern long double cosl( long double ) __LIBMLDBL_COMPAT(cosl);\n+  extern long double sinl( long double ) __LIBMLDBL_COMPAT(sinl);\n+  extern long double tanl( long double ) __LIBMLDBL_COMPAT(tanl);\n+  extern long double acoshl( long double ) __LIBMLDBL_COMPAT(acoshl);\n+  extern long double asinhl( long double ) __LIBMLDBL_COMPAT(asinhl);\n+  extern long double atanhl( long double ) __LIBMLDBL_COMPAT(atanhl);\n+  extern long double coshl( long double ) __LIBMLDBL_COMPAT(coshl);\n+  extern long double sinhl( long double ) __LIBMLDBL_COMPAT(sinhl);\n+  extern long double tanhl( long double ) __LIBMLDBL_COMPAT(tanhl);\n+  extern long double expl( long double ) __LIBMLDBL_COMPAT(expl);\n+  extern long double exp2l( long double ) __LIBMLDBL_COMPAT(exp2l);\n+  extern long double expm1l( long double ) __LIBMLDBL_COMPAT(expm1l);\n+  extern long double logl( long double ) __LIBMLDBL_COMPAT(logl);\n+  extern long double log10l( long double ) __LIBMLDBL_COMPAT(log10l);\n+  extern long double log2l( long double ) __LIBMLDBL_COMPAT(log2l);\n+  extern long double log1pl( long double ) __LIBMLDBL_COMPAT(log1pl);\n+  extern long double logbl( long double ) __LIBMLDBL_COMPAT(logbl);\n+  extern long double modfl( long double, long double * ) __LIBMLDBL_COMPAT(modfl);\n+  extern long double ldexpl( long double, int ) __LIBMLDBL_COMPAT(ldexpl);\n+  extern long double frexpl( long double, int * ) __LIBMLDBL_COMPAT(frexpl);\n+  extern int ilogbl( long double ) __LIBMLDBL_COMPAT(ilogbl);\n+  extern long double scalbnl( long double, int ) __LIBMLDBL_COMPAT(scalbnl);\n+  extern long double scalblnl( long double, long int ) __LIBMLDBL_COMPAT(scalblnl);\n+  extern long double fabsl( long double ) __LIBMLDBL_COMPAT(fabsl);\n+  extern long double cbrtl( long double ) __LIBMLDBL_COMPAT(cbrtl);\n+  extern long double hypotl( long double, long double ) __LIBMLDBL_COMPAT(hypotl);\n+  extern long double powl( long double, long double ) __LIBMLDBL_COMPAT(powl);\n+  extern long double sqrtl( long double ) __LIBMLDBL_COMPAT(sqrtl);\n+  extern long double erfl( long double ) __LIBMLDBL_COMPAT(erfl);\n+  extern long double erfcl( long double ) __LIBMLDBL_COMPAT(erfcl);\n+  extern long double lgammal( long double ) __LIBMLDBL_COMPAT(lgammal);\n+  extern long double tgammal( long double ) __LIBMLDBL_COMPAT(tgammal);\n+  extern long double ceill( long double ) __LIBMLDBL_COMPAT(ceill);\n+  extern long double floorl( long double ) __LIBMLDBL_COMPAT(floorl);\n+  extern long double nearbyintl( long double ) __LIBMLDBL_COMPAT(nearbyintl);\n+  extern long double rintl( long double ) __LIBMLDBL_COMPAT(rintl);\n+  extern long int lrintl( long double ) __LIBMLDBL_COMPAT(lrintl);\n+  extern long long int llrintl( long double ) __LIBMLDBL_COMPAT(llrintl);\n+  extern long double roundl( long double ) __LIBMLDBL_COMPAT(roundl);\n+  extern long int lroundl( long double ) __LIBMLDBL_COMPAT(lroundl);\n+  extern long long int llroundl( long double ) __LIBMLDBL_COMPAT(llroundl);\n+  extern long double truncl( long double ) __LIBMLDBL_COMPAT(truncl);\n+  extern long double fmodl( long double, long double) __LIBMLDBL_COMPAT(fmodl);\n+  extern long double remainderl( long double, long double ) __LIBMLDBL_COMPAT(remainderl);\n+  extern long double remquol( long double, long double, int * ) __LIBMLDBL_COMPAT(remquol);\n+  extern long double copysignl( long double, long double ) __LIBMLDBL_COMPAT(copysignl);\n+  extern long double nanl( const char * ) __LIBMLDBL_COMPAT(nanl);\n+  extern long double nextafterl( long double, long double ) __LIBMLDBL_COMPAT(nextafterl);\n+  extern long double nexttowardl( long double, long double ) __LIBMLDBL_COMPAT(nexttowardl);\n+  extern long double fdiml( long double, long double ) __LIBMLDBL_COMPAT(fdiml);\n+  extern long double fmaxl( long double, long double ) __LIBMLDBL_COMPAT(fmaxl);\n+  extern long double fminl( long double, long double ) __LIBMLDBL_COMPAT(fminl);\n+  extern long double fmal( long double, long double, long double ) __LIBMLDBL_COMPAT(fmal);\n+# ifdef __cplusplus\n+   }\n+# endif\n+#endif /* __MATH__ */\n+_EndOfHeader_;\n+};\n+\n+\n+/*\n+ *  ... and for the previous fix to be useful, you have to not use \"\"\n+ *  includes.\n+ */\n+fix = {\n+  hackname  = AAB_darwin7_9_long_double_funcs_2;\n+  mach      = \"*-*-darwin7.9*\";\n+  files     = math.h;\n+  select    = '#include[ \\t]+\\\"';\n+  c_fix     = format;\n+  c_fix_arg = \"%1<%2.h>\";\n+  \n+  c_fix_arg = '([ \\t]*#[ \\t]*include[ \\t]+)\"([a-z0-9/]+)\\.h\"';\n+  \n+  test_text = '#include \"architecture/ppc/math.h\"';\n+};\n+\n+\n /*\n  *  This fixes __FD_ZERO bug for linux 2.x.y (x <= 2 && y <= some n)\n  */"}]}