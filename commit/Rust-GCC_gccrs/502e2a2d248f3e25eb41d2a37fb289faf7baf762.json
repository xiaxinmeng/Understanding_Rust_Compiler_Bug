{"sha": "502e2a2d248f3e25eb41d2a37fb289faf7baf762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyZTJhMmQyNDhmM2UyNWViNDFkMmEzN2ZiMjg5ZmFmN2JhZjc2Mg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-11-03T03:11:50Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-11-03T03:11:50Z"}, "message": "inclhack.def (glibc_c99_inline_1): New.\n\n\t* inclhack.def (glibc_c99_inline_1): New.\n\t* inclhack.def (glibc_c99_inline_2): New.\n\t* inclhack.def (glibc_c99_inline_3): New.\n\t* inclhack.def (glibc_c99_inline_4): New.\n\t* fixincl.x: Regenerate.\n\t* tests/base/bits/string2.h: New.\n\t* tests/base/sys/sysmacros.h: New.\n\t* tests/base/sys/stat.h: Update.\n\nFrom-SVN: r118449", "tree": {"sha": "b17aba423784478af9bcabd9bda2a2c51b24007c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17aba423784478af9bcabd9bda2a2c51b24007c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/502e2a2d248f3e25eb41d2a37fb289faf7baf762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502e2a2d248f3e25eb41d2a37fb289faf7baf762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502e2a2d248f3e25eb41d2a37fb289faf7baf762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502e2a2d248f3e25eb41d2a37fb289faf7baf762/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8a51a978406039dd8cfedf598a1712f7347f1e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a51a978406039dd8cfedf598a1712f7347f1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a51a978406039dd8cfedf598a1712f7347f1e8"}], "stats": {"total": 337, "additions": 326, "deletions": 11}, "files": [{"sha": "b2445603a6dc0f9f0d61bb298448540edf4716d3", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=502e2a2d248f3e25eb41d2a37fb289faf7baf762", "patch": "@@ -1,3 +1,14 @@\n+2006-11-02  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* inclhack.def (glibc_c99_inline_1): New.\n+\t* inclhack.def (glibc_c99_inline_2): New.\n+\t* inclhack.def (glibc_c99_inline_3): New.\n+\t* inclhack.def (glibc_c99_inline_4): New.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/bits/string2.h: New.\n+\t* tests/base/sys/sysmacros.h: New.\n+\t* tests/base/sys/stat.h: Update.\n+\n 2006-11-01  Steve Ellcey  <sje@cup.hp.com>\n \n \t* tests/base/sys/socket.h: Update."}, {"sha": "4ace83f27a36cb49c2390e355135745714081fa5", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 190, "deletions": 11, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=502e2a2d248f3e25eb41d2a37fb289faf7baf762", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Tuesday October 31, 2006 at 08:47:53 AM PST\n+ * It has been AutoGen-ed  Friday November  3, 2006 at 03:53:48 AM CET\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Tue Oct 31 08:47:53 PST 2006\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Fri Nov  3 03:53:48 CET 2006\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 203 fixup descriptions.\n+ * This file contains 207 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -26,19 +26,18 @@\n  *  \n  *  You may redistribute it and/or modify it under the terms of the\n  *  GNU General Public License, as published by the Free Software\n- *  Foundation; either version 2 of the License, or (at your option)\n- *  any later version.\n+ *  Foundation; either version 2, or (at your option) any later version.\n  *  \n  *  inclhack is distributed in the hope that it will be useful,\n  *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  *  See the GNU General Public License for more details.\n  *  \n  *  You should have received a copy of the GNU General Public License\n- *  along with inclhack.  If not, write to:\n- *  \tThe Free Software Foundation, Inc.,\n- *  \t51 Franklin Street, Fifth Floor\n- *  \tBoston, MA  02110-1301, USA.\n+ *  along with inclhack.  See the file \"COPYING\".  If not,\n+ *  write to:  The Free Software Foundation, Inc.,\n+ *             59 Temple Place - Suite 330,\n+ *             Boston,  MA  02111-1307, USA.\n  */\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -2184,6 +2183,162 @@ static const char* apzFreebsd_Gcc4_BreakagePatch[] = {\n     \"#if __GNUC__ == 2 && __GNUC_MINOR__ >= 7 || __GNUC__ >= 3\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_C99_Inline_1 fix\n+ */\n+tSCC zGlibc_C99_Inline_1Name[] =\n+     \"glibc_c99_inline_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_C99_Inline_1List[] =\n+  \"|features.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_C99_Inline_1Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_1Select0[] =\n+       \"^ *&& !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__$\";\n+\n+#define    GLIBC_C99_INLINE_1_TEST_CT  1\n+static tTestDesc aGlibc_C99_Inline_1Tests[] = {\n+  { TT_EGREP,    zGlibc_C99_Inline_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_C99_Inline_1\n+ */\n+static const char* apzGlibc_C99_Inline_1Patch[] = {\n+    \"format\",\n+    \"%0 && __STDC_VERSION__ < 199901L\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_C99_Inline_2 fix\n+ */\n+tSCC zGlibc_C99_Inline_2Name[] =\n+     \"glibc_c99_inline_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_C99_Inline_2List[] =\n+  \"|sys/stat.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_C99_Inline_2Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_2Select0[] =\n+       \"extern __inline__ int\";\n+\n+#define    GLIBC_C99_INLINE_2_TEST_CT  1\n+static tTestDesc aGlibc_C99_Inline_2Tests[] = {\n+  { TT_EGREP,    zGlibc_C99_Inline_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_C99_Inline_2\n+ */\n+static const char* apzGlibc_C99_Inline_2Patch[] = { \"sed\",\n+    \"-e\", \"s/extern int \\\\(stat\\\\|lstat\\\\|fstat\\\\|mknod\\\\)/#if __STDC_VERSION__ < 199901L\\\\\\n\\\n+extern\\\\\\n\\\n+#endif\\\\\\n\\\n+__inline__ int \\\\1/\",\n+    \"-e\", \"s/extern int __REDIRECT_NTH (\\\\(stat\\\\|lstat\\\\|fstat\\\\)/#if __STDC_VERSION__ < 199901L\\\\\\n\\\n+extern\\\\\\n\\\n+#endif\\\\\\n\\\n+__inline__ int __REDIRECT_NTH (\\\\1/\",\n+    \"-e\", \"/^extern __inline__ int$/ c\\\\\\n\\\n+#if __STDC_VERSION__ < 199901L\\\\\\n\\\n+extern\\\\\\n\\\n+#endif\\\\\\n\\\n+__inline__ int\\n\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_C99_Inline_3 fix\n+ */\n+tSCC zGlibc_C99_Inline_3Name[] =\n+     \"glibc_c99_inline_3\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_C99_Inline_3List[] =\n+  \"|bits/string2.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_C99_Inline_3Machs (const char**)NULL\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_3Bypass0[] =\n+       \"__STDC_VERSION__\";\n+\n+#define    GLIBC_C99_INLINE_3_TEST_CT  1\n+static tTestDesc aGlibc_C99_Inline_3Tests[] = {\n+  { TT_NEGREP,   zGlibc_C99_Inline_3Bypass0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_C99_Inline_3\n+ */\n+static const char* apzGlibc_C99_Inline_3Patch[] = {\n+    \"format\",\n+    \"# if defined(__cplusplus) || __STDC_VERSION__ >= 19901L\",\n+    \"^# ifdef __cplusplus$\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_C99_Inline_4 fix\n+ */\n+tSCC zGlibc_C99_Inline_4Name[] =\n+     \"glibc_c99_inline_4\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_C99_Inline_4List[] =\n+  \"|sys/sysmacros.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_C99_Inline_4Machs (const char**)NULL\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zGlibc_C99_Inline_4Bypass0[] =\n+       \"__STDC_VERSION__\";\n+\n+#define    GLIBC_C99_INLINE_4_TEST_CT  1\n+static tTestDesc aGlibc_C99_Inline_4Tests[] = {\n+  { TT_NEGREP,   zGlibc_C99_Inline_4Bypass0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_C99_Inline_4\n+ */\n+static const char* apzGlibc_C99_Inline_4Patch[] = {\n+    \"format\",\n+    \"\\n\\\n+#if __STDC_VERSION__ < 19901L\\n\\\n+extern\\n\\\n+#endif\\n\",\n+    \"extern\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Glibc_Mutex_Init fix\n@@ -8265,9 +8420,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          246\n+#define REGEX_COUNT          250\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            203\n+#define FIX_COUNT            207\n \n /*\n  *  Enumerate the fixes\n@@ -8323,6 +8478,10 @@ typedef enum {\n     EXCEPTION_STRUCTURE_FIXIDX,\n     FREEBSD_GCC3_BREAKAGE_FIXIDX,\n     FREEBSD_GCC4_BREAKAGE_FIXIDX,\n+    GLIBC_C99_INLINE_1_FIXIDX,\n+    GLIBC_C99_INLINE_2_FIXIDX,\n+    GLIBC_C99_INLINE_3_FIXIDX,\n+    GLIBC_C99_INLINE_4_FIXIDX,\n     GLIBC_MUTEX_INIT_FIXIDX,\n     GNU_TYPES_FIXIDX,\n     HP_INLINE_FIXIDX,\n@@ -8729,6 +8888,26 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      FREEBSD_GCC4_BREAKAGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aFreebsd_Gcc4_BreakageTests,   apzFreebsd_Gcc4_BreakagePatch, 0 },\n \n+  {  zGlibc_C99_Inline_1Name,    zGlibc_C99_Inline_1List,\n+     apzGlibc_C99_Inline_1Machs,\n+     GLIBC_C99_INLINE_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_C99_Inline_1Tests,   apzGlibc_C99_Inline_1Patch, 0 },\n+\n+  {  zGlibc_C99_Inline_2Name,    zGlibc_C99_Inline_2List,\n+     apzGlibc_C99_Inline_2Machs,\n+     GLIBC_C99_INLINE_2_TEST_CT, FD_MACH_ONLY,\n+     aGlibc_C99_Inline_2Tests,   apzGlibc_C99_Inline_2Patch, 0 },\n+\n+  {  zGlibc_C99_Inline_3Name,    zGlibc_C99_Inline_3List,\n+     apzGlibc_C99_Inline_3Machs,\n+     GLIBC_C99_INLINE_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_C99_Inline_3Tests,   apzGlibc_C99_Inline_3Patch, 0 },\n+\n+  {  zGlibc_C99_Inline_4Name,    zGlibc_C99_Inline_4List,\n+     apzGlibc_C99_Inline_4Machs,\n+     GLIBC_C99_INLINE_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_C99_Inline_4Tests,   apzGlibc_C99_Inline_4Patch, 0 },\n+\n   {  zGlibc_Mutex_InitName,    zGlibc_Mutex_InitList,\n      apzGlibc_Mutex_InitMachs,\n      GLIBC_MUTEX_INIT_TEST_CT, FD_MACH_ONLY,"}, {"sha": "bf3517a827cb914bb9a3f51ae2746d79476cb638", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=502e2a2d248f3e25eb41d2a37fb289faf7baf762", "patch": "@@ -1289,6 +1289,81 @@ fix = {\n };\n \n \n+/*\n+ *  Some versions of glibc don't expect the C99 inline semantics.\n+ */\n+fix = {\n+    hackname  = glibc_c99_inline_1;\n+    files     = features.h;\n+    select    = \"^ *&& !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__$\";\n+    c_fix     = format;\n+    c_fix_arg = \"%0 && __STDC_VERSION__ < 199901L\";\n+    test_text = <<-EOT\n+#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \\\n+    && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__\n+# define __USE_EXTERN_INLINES\t1\n+#endif\n+EOT;\n+};\n+\n+\n+/*\n+ * The glibc_c99_inline_1 fix should have fixed everything.  Unfortunately\n+ * there are many glibc headers which do not respect __USE_EXTERN_INLINES.\n+ * The remaining glibc_c99_inline_* fixes deal with some of those headers.\n+ */\n+fix = {\n+    hackname  = glibc_c99_inline_2;\n+    files     = sys/stat.h;\n+    select    = \"extern __inline__ int\";\n+    sed\t      = \"s/extern int \\\\(stat\\\\|lstat\\\\|fstat\\\\|mknod\\\\)/\"\n+\t\t\"#if __STDC_VERSION__ < 199901L\\\\\\nextern\\\\\\n#endif\\\\\\n\"\n+    \t\t\"__inline__ int \\\\1/\";\n+    sed\t      = \"s/extern int __REDIRECT_NTH (\\\\(stat\\\\|lstat\\\\|fstat\\\\)/\"\n+\t\t\"#if __STDC_VERSION__ < 199901L\\\\\\nextern\\\\\\n#endif\\\\\\n\"\n+    \t\t\"__inline__ int __REDIRECT_NTH (\\\\1/\";\n+    sed\t      = \"/^extern __inline__ int$/ c\\\\\\n\"\n+\t\t\"#if __STDC_VERSION__ < 199901L\\\\\\nextern\\\\\\n#endif\\\\\\n\"\n+\t\t\"__inline__ int\\n\";\n+    test_text = <<-EOT\n+extern int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));\n+extern __inline__ int\n+__NTH (fstat64 (int __fd, struct stat64 *__statbuf))\n+{}\n+EOT;\n+};\n+\n+\n+fix = {\n+    hackname  = glibc_c99_inline_3;\n+    files     = bits/string2.h;\n+    bypass    = \"__STDC_VERSION__\";\n+    c_fix     = format;\n+    c_fix_arg = \"# if defined(__cplusplus) || __STDC_VERSION__ >= 19901L\";\n+    c_fix_arg = \"^# ifdef __cplusplus$\";\n+    test_text = <<-EOT\n+# ifdef __cplusplus\n+#  define __STRING_INLINE inline\n+# else\n+#  define __STRING_INLINE extern __inline\n+# endif\n+EOT;\n+};\n+\n+\n+fix = {\n+    hackname  = glibc_c99_inline_4;\n+    files     = sys/sysmacros.h;\n+    bypass    = \"__STDC_VERSION__\";\n+    c_fix     = format;\n+    c_fix_arg = \"\\n#if __STDC_VERSION__ < 19901L\\nextern\\n#endif\\n\";\n+    c_fix_arg = \"extern\";\n+    test_text = <<-EOT\n+__extension__ extern __inline unsigned int\n+EOT;\n+};\n+\n+\n /*  glibc-2.3.5 defines pthread mutex initializers incorrectly,\n  *  so we replace them with versions that correspond to the\n  *  definition."}, {"sha": "0d37faaad69bfd316e6685b2bfcf24ead776bb5e", "filename": "fixincludes/tests/base/bits/string2.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ftests%2Fbase%2Fbits%2Fstring2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ftests%2Fbase%2Fbits%2Fstring2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fbits%2Fstring2.h?ref=502e2a2d248f3e25eb41d2a37fb289faf7baf762", "patch": "@@ -0,0 +1,18 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/bits/string2.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( GLIBC_C99_INLINE_3_CHECK )\n+# if defined(__cplusplus) || __STDC_VERSION__ >= 19901L\n+#  define __STRING_INLINE inline\n+# else\n+#  define __STRING_INLINE extern __inline\n+# endif\n+#endif  /* GLIBC_C99_INLINE_3_CHECK */"}, {"sha": "51fe835d3a63bc0650b8bee255aca6432e39f8fa", "filename": "fixincludes/tests/base/sys/stat.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h?ref=502e2a2d248f3e25eb41d2a37fb289faf7baf762", "patch": "@@ -14,6 +14,20 @@\n #endif  /* ALPHA___EXTERN_PREFIX_SYS_STAT_CHECK */\n \n \n+#if defined( GLIBC_C99_INLINE_2_CHECK )\n+#if __STDC_VERSION__ < 199901L\n+extern\n+#endif\n+__inline__ int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));\n+#if __STDC_VERSION__ < 199901L\n+extern\n+#endif\n+__inline__ int\n+__NTH (fstat64 (int __fd, struct stat64 *__statbuf))\n+{}\n+#endif  /* GLIBC_C99_INLINE_2_CHECK */\n+\n+\n #if defined( RS6000_FCHMOD_CHECK )\n extern int fchmod(int, mode_t);\n #endif  /* RS6000_FCHMOD_CHECK */"}, {"sha": "6891a67500694bfad4da1111ec990ac77f111af2", "filename": "fixincludes/tests/base/sys/sysmacros.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ftests%2Fbase%2Fsys%2Fsysmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502e2a2d248f3e25eb41d2a37fb289faf7baf762/fixincludes%2Ftests%2Fbase%2Fsys%2Fsysmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fsysmacros.h?ref=502e2a2d248f3e25eb41d2a37fb289faf7baf762", "patch": "@@ -0,0 +1,18 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/sys/sysmacros.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( GLIBC_C99_INLINE_4_CHECK )\n+__extension__ \n+#if __STDC_VERSION__ < 19901L\n+extern\n+#endif\n+ __inline unsigned int\n+#endif  /* GLIBC_C99_INLINE_4_CHECK */"}]}