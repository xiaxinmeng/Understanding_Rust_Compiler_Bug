{"sha": "7899582a059a9d8c25bfff305cd236d219dc4f20", "node_id": "C_kwDOANBUbNoAKDc4OTk1ODJhMDU5YTlkOGMyNWJmZmYzMDVjZDIzNmQyMTlkYzRmMjA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-08T12:49:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-08T15:38:39Z"}, "message": "tree-optimization/107389 - honor __builtin_assume_alignment at -O0\n\nThe following makes sure to set alignment information on the LHS\nof __builtin_assume_alignment calls even when not optimizing so\nuses as arguments to builtin functions like memcpy or __atomic_load_n\ncan be reflected at RTL expansion time.\n\n\tPR tree-optimization/107389\n\t* gimple-low.cc (lower_builtin_assume_aligned): New.\n\t(lower_stmt): Call it.\n\n\t* gcc.dg/pr107389.c: New testcase.", "tree": {"sha": "f528ce0356c7f144bacf2cb8d6aebb5292cc8fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f528ce0356c7f144bacf2cb8d6aebb5292cc8fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7899582a059a9d8c25bfff305cd236d219dc4f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7899582a059a9d8c25bfff305cd236d219dc4f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7899582a059a9d8c25bfff305cd236d219dc4f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7899582a059a9d8c25bfff305cd236d219dc4f20/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215355d302d8602c7eeefb9c927a3dbb221714c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215355d302d8602c7eeefb9c927a3dbb221714c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215355d302d8602c7eeefb9c927a3dbb221714c8"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "53df2e7b2125203103f982b3216365873f995abc", "filename": "gcc/gimple-low.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7899582a059a9d8c25bfff305cd236d219dc4f20/gcc%2Fgimple-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7899582a059a9d8c25bfff305cd236d219dc4f20/gcc%2Fgimple-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.cc?ref=7899582a059a9d8c25bfff305cd236d219dc4f20", "patch": "@@ -84,6 +84,7 @@ static void lower_try_catch (gimple_stmt_iterator *, struct lower_data *);\n static void lower_gimple_return (gimple_stmt_iterator *, struct lower_data *);\n static void lower_builtin_setjmp (gimple_stmt_iterator *);\n static void lower_builtin_posix_memalign (gimple_stmt_iterator *);\n+static void lower_builtin_assume_aligned (gimple_stmt_iterator *);\n \n \n /* Lower the body of current_function_decl from High GIMPLE into Low\n@@ -768,6 +769,14 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t\tlower_builtin_posix_memalign (gsi);\n \t\treturn;\n \t      }\n+\t    else if (DECL_FUNCTION_CODE (decl) == BUILT_IN_ASSUME_ALIGNED\n+\t\t     && !optimize)\n+\t      {\n+\t\tlower_builtin_assume_aligned (gsi);\n+\t\tdata->cannot_fallthru = false;\n+\t\tgsi_next (gsi);\n+\t\treturn;\n+\t      }\n \t  }\n \n \tif (decl && (flags_from_decl_or_type (decl) & ECF_NORETURN))\n@@ -1310,6 +1319,38 @@ lower_builtin_posix_memalign (gimple_stmt_iterator *gsi)\n   gsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n   gsi_insert_after (gsi, gimple_build_label (noalign_label), GSI_NEW_STMT);\n }\n+\n+/* Lower calls to __builtin_assume_aligned when not optimizing.  */\n+\n+static void\n+lower_builtin_assume_aligned (gimple_stmt_iterator *gsi)\n+{\n+  gcall *call = as_a <gcall *> (gsi_stmt (*gsi));\n+\n+  tree lhs = gimple_call_lhs (call);\n+  if (!lhs || !POINTER_TYPE_P (TREE_TYPE (lhs)) || TREE_CODE (lhs) != SSA_NAME)\n+    return;\n+\n+  tree align = gimple_call_arg (call, 1);\n+  tree misalign = (gimple_call_num_args (call) > 2\n+\t\t   ? gimple_call_arg (call, 2) : NULL_TREE);\n+  if (!tree_fits_uhwi_p (align)\n+      || (misalign && !tree_fits_uhwi_p (misalign)))\n+    return;\n+\n+  unsigned aligni = TREE_INT_CST_LOW (align);\n+  unsigned misaligni = misalign ? TREE_INT_CST_LOW (misalign) : 0;\n+  if (aligni <= 1\n+      || (aligni & (aligni - 1)) != 0\n+      || (misaligni & ~(aligni - 1)) != 0)\n+    return;\n+\n+  /* For lowering we simply transfer alignment information to the\n+     result and leave the call otherwise unchanged, it will be elided\n+     at RTL expansion time.  */\n+  ptr_info_def *pi = get_ptr_info (lhs);\n+  set_ptr_info_alignment (pi, aligni, misaligni);\n+}\n \f\n \n /* Record the variables in VARS into function FN.  */"}, {"sha": "deb633807044828ff31710dfead76709c84b8b80", "filename": "gcc/testsuite/gcc.dg/pr107389.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7899582a059a9d8c25bfff305cd236d219dc4f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107389.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7899582a059a9d8c25bfff305cd236d219dc4f20/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107389.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107389.c?ref=7899582a059a9d8c25bfff305cd236d219dc4f20", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized-alias\" } */\n+\n+unsigned foo (void *p)\n+{\n+  unsigned i;\n+  __builtin_memcpy (&i, __builtin_assume_aligned (p, 4), sizeof (unsigned));\n+  return i;\n+}\n+\n+/* Even when not optimizing we should have alignment info on the temporary\n+   feeding the memcpy.  */\n+/* { dg-final { scan-tree-dump \"ALIGN = 4\" \"optimized\" } } */"}]}