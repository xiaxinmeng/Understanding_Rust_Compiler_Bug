{"sha": "fb2000b29394b9b65af1b2568a3384fdf3b09702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyMDAwYjI5Mzk0YjliNjVhZjFiMjU2OGEzMzg0ZmRmM2IwOTcwMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-08-04T09:09:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-08-04T09:09:21Z"}, "message": "* g++.old-deja/g++.eh/spec6.C: Add more tests. Remove XFAILS.\n\nFrom-SVN: r28495", "tree": {"sha": "63078b4e32c845478cfc85f5e6a80ef7871d7820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63078b4e32c845478cfc85f5e6a80ef7871d7820"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2000b29394b9b65af1b2568a3384fdf3b09702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2000b29394b9b65af1b2568a3384fdf3b09702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2000b29394b9b65af1b2568a3384fdf3b09702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2000b29394b9b65af1b2568a3384fdf3b09702/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cc1d462013c5fcaa82b0ad82b4232bc1249b31c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc1d462013c5fcaa82b0ad82b4232bc1249b31c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc1d462013c5fcaa82b0ad82b4232bc1249b31c"}], "stats": {"total": 132, "additions": 116, "deletions": 16}, "files": [{"sha": "a20f78e34fe86c84c3e5c7b9b09566fd6cf29509", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2000b29394b9b65af1b2568a3384fdf3b09702/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2000b29394b9b65af1b2568a3384fdf3b09702/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb2000b29394b9b65af1b2568a3384fdf3b09702", "patch": "@@ -1,3 +1,7 @@\n+1999-08-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.old-deja/g++.eh/spec6.C: Add more tests. Remove XFAILS.\n+\n Wed Aug  4 01:17:17 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/execute/990804-1.c: New test."}, {"sha": "2dfc5d676c3ab1f312466098aaebbb6162440985", "filename": "gcc/testsuite/g++.old-deja/g++.eh/spec6.C", "status": "modified", "additions": 112, "deletions": 16, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2000b29394b9b65af1b2568a3384fdf3b09702/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2000b29394b9b65af1b2568a3384fdf3b09702/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fspec6.C?ref=fb2000b29394b9b65af1b2568a3384fdf3b09702", "patch": "@@ -7,40 +7,136 @@\n \n // [except.spec] 1, a type in an exception specifier shall not be incomplete,\n // or pointer or ref to incomplete\n-struct X; // ERROR - forward declaration - XFAIL\n-void fn1() throw(X);  // ERROR - incomplete type - XFAIL\n-void fn2() throw(X *); // ERROR - incomplete type - XFAIL\n-void fn3() throw(X &); // ERROR - incomplete type - XFAIL\n-void fn4() throw(void); // ERROR - incomplete type - XFAIL\n+struct X;                         // ERROR - forward declaration.*\n+void fn1() throw(X);              // ERROR - invalid use of undefined type\n+void fn2() throw(X *);            // ERROR - invalid use of undefined type\n+void fn3() throw(X &);            // ERROR - invalid use of undefined tyoe\n+void fn4() throw(void);           // ERROR - invalid use of void expression\n+void fn5() throw(void &);         // ERROR - invalid type // ERROR - invalid use of void\n // except for cv pointer to void\n-void fn5() throw(void *);\n+void fn6() throw(void *);         // ok -- pointer to void\n+void fn7() throw(void const *);   // ok -- pointer to cv void\n+\n+template<class T> void fny() throw(T);  // ok (so far)\n+template<> void fny<int>() throw(int);  // ok\n+template<> void fny<void>() throw(void); // ERROR - invalid use of void\n+\n+template<class T> void fnx(T *) throw(T){}  // ERROR - invalid use of void expression\n+void fx()\n+{\n+  fnx((int *)0);\n+  fnx((void *)0);\n+}\n \n // [except.spec] 2, exception specifiers must be the same set of types (but\n // can be reordered)\n-void fn() throw(int, char);   // gets bogus error - XFAIL\n-void fn() throw(char, int){}  // gets bogus error - ordering is irrelevant - XFAIL\n+void baz1() throw(int, char);\n+void baz1() throw(char, int){}       // reordering is ok\n+\n+void baz2() throw(int, char);\n+void baz2() throw(int, char, int){}  // duplicates are ignored\n+\n+typedef int Int;\n+void baz3() throw(int, char);\n+void baz3() throw(Int, char){}       // typedefs are the same type ...\n+\n+void baz4() throw(int, Int, char);   // ... so this is a duplicate\n+void baz4() throw(Int, char){}\n+\n+void fna() throw(int, char);  // ERROR - to previous declaration\n+void fna() throw(int const, char);  // ERROR - declaration  different exceptions // ERROR - to previous declaration\n+void fna() throw(int){}       // ERROR - declaration  different exceptions\n+\n+void fnb() throw(int, char);  // ERROR - to previous declaration\n+void fnb() throw(char){}      // ERROR - declaration  different exceptions\n+\n+void fnc() throw(int, char);  // ERROR - to previous declaration\n+void fnc() throw(char, int, float){}  // ERROR - declaration  different exceptions\n+\n+void fnd() throw();           // ERROR - to previous declaration\n+void fnd() throw(char){}      // ERROR - declaration  different exceptions\n+\n+void fne() throw(char);       // ERROR - to previous declaration\n+void fne() throw(){}          // ERROR - declaration  different exceptions\n+\n+void fnf();                   // ERROR - to previous declaration\n+void fnf() throw(char){}      // ERROR - declaration  different exceptions\n+\n+void fng() throw(char);       // ERROR - to previous declaration\n+void fng(){}                  // ERROR - declaration  different exceptions\n+\n+void fnh() throw(int, char);  // ERROR - to previous declaration\n+void fnh() throw(int, float){}   // ERROR - declaration  different exceptions\n+\n+void fni() throw(int, char);  // ERROR - to previous declaration\n+void fni() throw(float, char){}  // ERROR - declaration  different exceptions\n \n // [except.spec] 3, virtual function overriders shall throw a subset of the\n // overridden function\n struct E {};\n struct F : public E {};\n+struct F1 : public E {};\n+struct G : public F, F1 {};\n+struct H : private E {};\n struct A\n {\n-  virtual void foo() throw();\n+  virtual void foo() throw();             // ERROR - overriding \n   virtual void baz() throw(double, int);\n   virtual void bar();\n   virtual void qux() throw(E);\n-  virtual void quux() throw(F);\n+  virtual void qux(int) throw(E const *); // ERROR - overriding (pedantically)\n+  virtual void quux() throw(F);           // ERROR - overriding \n+  virtual void quux(int) throw(F *);      // ERROR - overriding \n+  virtual void wibble() throw(E);         // ERROR - overriding \n+  virtual void wobble() throw(E *);       // ERROR - overriding \n+  virtual void wobble(int) throw(E *);    // ERROR - overriding \n+  virtual void wabble(int) throw(E *);\n+  virtual void wubble(int) throw(E *, H *);\n+  virtual ~A() throw();                   // ERROR - overriding XFAIL\n };\n \n struct B : A\n {\n-  virtual void foo() throw(int);  // ERROR - not in base function - XFAIL\n-  virtual void baz() throw(double);\n-  virtual void bar(int) throw(int);\n-  virtual void qux() throw(F);\n-  virtual void quux() throw(E);   // ERROR - not in base function - XFAIL\n+  virtual void foo() throw(int);          // ERROR - looser throw - A::foo\n+  virtual void baz() throw(double);       // ok subset\n+  virtual void bar(int) throw(int);       // ok not overriding\n+  virtual void qux() throw(F);            // ok subset\n+  virtual void qux(int) throw(F *);       // ERROR - looser (pedantically)\n+  virtual void quux() throw(E);           // ERROR - looser throw - A::quux()\n+  virtual void quux(int) throw(E *);      // ERROR - looser throw - A::quux(int)\n+  virtual void wibble() throw(E *);       // ERROR - looser throw - A::wibble\n+  virtual void wobble() throw(G *);       // ERROR - looser throw - A::wobble()\n+  virtual void wobble(int) throw(H *);    // ERROR - looser throw - A::wobble(int)\n+  virtual void wubble(int) throw(H *);    // ok\n+  virtual void wabble(int) throw(F1 *, F *);    // ok\n+};\n+\n+struct A1\n+{\n+  virtual void foo() throw(int);\n+  virtual void bar() throw();       // ERROR - overriding \n+  virtual ~A1() throw(int);\n+};\n+\n+struct B1 : A\n+{\n+};\n+\n+struct C : A, A1\n+{\n+  virtual void foo() throw(int);    // ERROR - looser throw - A::foo\n+  virtual void bar() throw(int);    // ERROR - looser throw - A1::bar\n+   // The xfail is because we don't build exception specifiers for implicit\n+   // members. So we don't check them either.\n+   // C::~C() throw(int), is the correct specification of the destructor.\n+}; // ERROR - looser throw - A::~A() - XFAIL\n+\n+struct D : A, A1\n+{\n+  // The xfail here is because we don't have the check in the right place to\n+  // catch dtor failings.\n+  virtual ~D() throw(int); // ERROR - looser throw - A::~A() - XFAIL\n };\n \n // [except.spec] 5, types shall not be defined in exception specifiers\n-void fn6() throw(struct Z {}); // ERROR - types shall not be defined - XFAIL\n+void fn8() throw(struct Z {}); // ERROR - ANSI C++ forbids "}]}