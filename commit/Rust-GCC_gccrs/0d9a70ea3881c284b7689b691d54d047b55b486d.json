{"sha": "0d9a70ea3881c284b7689b691d54d047b55b486d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5YTcwZWEzODgxYzI4NGI3Njg5YjY5MWQ1NGQwNDdiNTViNDg2ZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-08T15:05:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-08T15:05:21Z"}, "message": "aarch64: Fix PR99437 - tighten shift predicates for narrowing shift patterns\n\nIn this bug combine forms the (R)SHRN(2) instructions with an invalid shift amount.\nThe intrinsic expanders for these patterns validate the right shift amount but if the\nfinal patterns end up being matched by combine (or other RTL passes I suppose) they\nstill let the wrong const_vector through.\n\nThis patch tightens up the predicates for the instructions involved by using predicates\nfor the right shift amount const_vectors.\n\ngcc/ChangeLog:\n\n\tPR target/99437\n\t* config/aarch64/predicates.md (aarch64_simd_shift_imm_vec_qi): Define.\n\t(aarch64_simd_shift_imm_vec_hi): Likewise.\n\t(aarch64_simd_shift_imm_vec_si): Likewise.\n\t(aarch64_simd_shift_imm_vec_di): Likewise.\n\t* config/aarch64/aarch64-simd.md (aarch64_shrn<mode>_insn_le): Use\n\tpredicate from above.\n\t(aarch64_shrn<mode>_insn_be): Likewise.\n\t(aarch64_rshrn<mode>_insn_le): Likewise.\n\t(aarch64_rshrn<mode>_insn_be): Likewise.\n\t(aarch64_shrn2<mode>_insn_le): Likewise.\n\t(aarch64_shrn2<mode>_insn_be): Likewise.\n\t(aarch64_rshrn2<mode>_insn_le): Likewise.\n\t(aarch64_rshrn2<mode>_insn_be): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99437\n\t* gcc.target/aarch64/simd/pr99437.c: New test.", "tree": {"sha": "ddc84555a643c6880d9a59687a1f70b22655a147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc84555a643c6880d9a59687a1f70b22655a147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d9a70ea3881c284b7689b691d54d047b55b486d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9a70ea3881c284b7689b691d54d047b55b486d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9a70ea3881c284b7689b691d54d047b55b486d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9a70ea3881c284b7689b691d54d047b55b486d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81fee438512460f1be50d91ee5de452f8fe5cc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fee438512460f1be50d91ee5de452f8fe5cc18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fee438512460f1be50d91ee5de452f8fe5cc18"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "348a43d835d4e8d7b49fbf166bb584e868e4a8b7", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a70ea3881c284b7689b691d54d047b55b486d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a70ea3881c284b7689b691d54d047b55b486d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=0d9a70ea3881c284b7689b691d54d047b55b486d", "patch": "@@ -1738,7 +1738,7 @@\n \t(vec_concat:<VNARROWQ2>\n \t  (truncate:<VNARROWQ>\n \t    (lshiftrt:VQN (match_operand:VQN 1 \"register_operand\" \"w\")\n-\t\t  (match_operand:VQN 2 \"aarch64_simd_rshift_imm\")))\n+\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_<vn_mode>\")))\n \t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"shrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n@@ -1751,7 +1751,7 @@\n \t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")\n \t  (truncate:<VNARROWQ>\n \t    (lshiftrt:VQN (match_operand:VQN 1 \"register_operand\" \"w\")\n-\t\t  (match_operand:VQN 2 \"aarch64_simd_rshift_imm\")))))]\n+\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_<vn_mode>\")))))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"shrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n@@ -1786,8 +1786,8 @@\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n \t  (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n-\t\t\t       (match_operand:VQN 2 \"aarch64_simd_rshift_imm\")\n-\t\t\t      ] UNSPEC_RSHRN)\n+\t\t(match_operand:VQN 2\n+\t\t  \"aarch64_simd_shift_imm_vec_<vn_mode>\")] UNSPEC_RSHRN)\n \t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"rshrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n@@ -1799,8 +1799,8 @@\n \t(vec_concat:<VNARROWQ2>\n \t  (match_operand:<VNARROWQ> 3 \"aarch64_simd_or_scalar_imm_zero\")\n \t  (unspec:<VNARROWQ> [(match_operand:VQN 1 \"register_operand\" \"w\")\n-\t\t\t       (match_operand:VQN 2 \"aarch64_simd_rshift_imm\")\n-\t\t\t      ] UNSPEC_RSHRN)))]\n+\t\t(match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\t  UNSPEC_RSHRN)))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"rshrn\\\\t%0.<Vntype>, %1.<Vtype>, %2\"\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n@@ -1836,7 +1836,7 @@\n \t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n \t  (truncate:<VNARROWQ>\n \t    (lshiftrt:VQN (match_operand:VQN 2 \"register_operand\" \"w\")\n-\t\t(match_operand:VQN 3 \"aarch64_simd_rshift_imm\")))))]\n+\t      (match_operand:VQN 3 \"aarch64_simd_shift_imm_vec_<vn_mode>\")))))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"shrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n@@ -1847,7 +1847,8 @@\n \t(vec_concat:<VNARROWQ2>\n \t  (truncate:<VNARROWQ>\n \t    (lshiftrt:VQN (match_operand:VQN 2 \"register_operand\" \"w\")\n-\t\t(match_operand:VQN 3 \"aarch64_simd_rshift_imm\")))\n+\t      (match_operand:VQN 3\n+\t\t\"aarch64_simd_shift_imm_vec_<vn_mode>\")))\n \t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"shrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n@@ -1878,7 +1879,8 @@\n \t(vec_concat:<VNARROWQ2>\n \t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")\n \t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n-\t\t       (match_operand:VQN 3 \"aarch64_simd_rshift_imm\")] UNSPEC_RSHRN)))]\n+\t    (match_operand:VQN 3 \"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\tUNSPEC_RSHRN)))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"rshrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\"\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n@@ -1888,7 +1890,8 @@\n   [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n \t(vec_concat:<VNARROWQ2>\n \t  (unspec:<VNARROWQ> [(match_operand:VQN 2 \"register_operand\" \"w\")\n-\t\t       (match_operand:VQN 3 \"aarch64_simd_rshift_imm\")] UNSPEC_RSHRN)\n+\t\t(match_operand:VQN 3 \"aarch64_simd_shift_imm_vec_<vn_mode>\")]\n+\t\t  UNSPEC_RSHRN)\n \t  (match_operand:<VNARROWQ> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"rshrn2\\\\t%0.<V2ntype>, %2.<Vtype>, %3\""}, {"sha": "c55842b9c747b817ad8379d6f4e6dbd633ba8fe1", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a70ea3881c284b7689b691d54d047b55b486d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a70ea3881c284b7689b691d54d047b55b486d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=0d9a70ea3881c284b7689b691d54d047b55b486d", "patch": "@@ -545,6 +545,22 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 1, 64)\")))\n \n+(define_predicate \"aarch64_simd_shift_imm_vec_qi\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"aarch64_const_vec_all_same_in_range_p (op, 1, 8)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_vec_hi\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"aarch64_const_vec_all_same_in_range_p (op, 1, 16)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_vec_si\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"aarch64_const_vec_all_same_in_range_p (op, 1, 32)\")))\n+\n+(define_predicate \"aarch64_simd_shift_imm_vec_di\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"aarch64_const_vec_all_same_in_range_p (op, 1, 64)\")))\n+\n (define_predicate \"aarch64_simd_shift_imm_bitsize_qi\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 0, 8)\")))"}, {"sha": "976fac4567aa82e0a0ca70cc08d6dd205379f83d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/pr99437.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9a70ea3881c284b7689b691d54d047b55b486d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fpr99437.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9a70ea3881c284b7689b691d54d047b55b486d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fpr99437.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fpr99437.c?ref=0d9a70ea3881c284b7689b691d54d047b55b486d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O\" } */\n+\n+#include <arm_neon.h>\n+\n+uint8x16_t\n+foo (uint16x8_t a, uint8x8_t b)\n+{\n+  return vcombine_u8 (vmovn_u16 (vshrq_n_u16 (a, 9)), b);\n+}\n+\n+uint8x16_t\n+foo2 (uint16x8_t a, uint8x8_t b)\n+{\n+  return vcombine_u8 (b, vmovn_u16 (vshrq_n_u16 (a, 15)));\n+}\n+"}]}