{"sha": "f7430263c07b4a1bcf3deb708c8c691f233fcb40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0MzAyNjNjMDdiNGExYmNmM2RlYjcwOGM4YzY5MWYyMzNmY2I0MA==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2019-05-16T17:38:29Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gcc.gnu.org", "date": "2019-05-16T17:38:29Z"}, "message": "gcc: move assemble_start_function / assemble_end_function to output_mi_thunk\n\nLet backends call assemble_start_function after they have generated\nthunk function body so that a constant pool could be output if it is\nrequired. This may help backends to avoid implementing custom constant\nloading code specifically for the MI thunk and reuse existing\nfunctionality.\n\ngcc/\n2019-05-16  Max Filippov  <jcmvbkbc@gmail.com>\n\n\t* cgraphunit.c (cgraph_node::expand_thunk): Remove\n\tassemble_start_function and assemble_end_function calls.\n\t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Call\n\tassemble_start_function and assemble_end_function.\n\t* config/arc/arc.c (arc_output_mi_thunk): Likewise.\n\t* config/arm/arm.c (arm_output_mi_thunk): Likewise.\n\t* config/bfin/bfin.c (bfin_output_mi_thunk): Likewise.\n\t* config/c6x/c6x.c (c6x_output_mi_thunk): Likewise.\n\t* config/cris/cris.c (cris_asm_output_mi_thunk): Likewise.\n\t* config/csky/csky.c (csky_output_mi_thunk): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_output_mi_thunk): Likewise.\n\t* config/frv/frv.c (frv_asm_output_mi_thunk): Likewise.\n\t* config/i386/i386.c (x86_output_mi_thunk): Likewise.\n\t* config/ia64/ia64.c (ia64_output_mi_thunk): Likewise.\n\t* config/m68k/m68k.c (m68k_output_mi_thunk): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_asm_output_mi_thunk):\n\tLikewise.\n\t* config/mips/mips.c (mips_output_mi_thunk): Likewise.\n\t* config/mmix/mmix.c (mmix_asm_output_mi_thunk): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_asm_output_mi_thunk): Likewise.\n\t* config/nds32/nds32.c (nds32_asm_output_mi_thunk): Likewise.\n\t* config/nios2/nios2.c (nios2_asm_output_mi_thunk): Likewise.\n\t* config/or1k/or1k.c (or1k_output_mi_thunk): Likewise.\n\t* config/pa/pa.c (pa_asm_output_mi_thunk): Likewise.\n\t* config/riscv/riscv.c (riscv_output_mi_thunk): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_output_mi_thunk): Likewise.\n\t* config/s390/s390.c (s390_output_mi_thunk): Likewise.\n\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n\t* config/sparc/sparc.c (sparc_output_mi_thunk): Likewise.\n\t* config/spu/spu.c (spu_output_mi_thunk): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_asm_output_mi_thunk):\n\tLikewise.\n\t* config/tilegx/tilegx.c (tilegx_output_mi_thunk): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_asm_output_mi_thunk): Likewise.\n\t* config/vax/vax.c (vax_output_mi_thunk): Likewise.\n\nFrom-SVN: r271293", "tree": {"sha": "41d308d65398f5a9a8a6d8e2ad807d0fa3ba5112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41d308d65398f5a9a8a6d8e2ad807d0fa3ba5112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7430263c07b4a1bcf3deb708c8c691f233fcb40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7430263c07b4a1bcf3deb708c8c691f233fcb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7430263c07b4a1bcf3deb708c8c691f233fcb40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7430263c07b4a1bcf3deb708c8c691f233fcb40/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6727c729849dc2feca833ecc874b6a0aef520acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6727c729849dc2feca833ecc874b6a0aef520acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6727c729849dc2feca833ecc874b6a0aef520acd"}], "stats": {"total": 144, "additions": 137, "deletions": 7}, "files": [{"sha": "62f8d1ffaab6554295c2f5012eefd1192610dc21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -1,3 +1,41 @@\n+2019-05-16  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Remove\n+\tassemble_start_function and assemble_end_function calls.\n+\t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Call\n+\tassemble_start_function and assemble_end_function.\n+\t* config/arc/arc.c (arc_output_mi_thunk): Likewise.\n+\t* config/arm/arm.c (arm_output_mi_thunk): Likewise.\n+\t* config/bfin/bfin.c (bfin_output_mi_thunk): Likewise.\n+\t* config/c6x/c6x.c (c6x_output_mi_thunk): Likewise.\n+\t* config/cris/cris.c (cris_asm_output_mi_thunk): Likewise.\n+\t* config/csky/csky.c (csky_output_mi_thunk): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_output_mi_thunk): Likewise.\n+\t* config/frv/frv.c (frv_asm_output_mi_thunk): Likewise.\n+\t* config/i386/i386.c (x86_output_mi_thunk): Likewise.\n+\t* config/ia64/ia64.c (ia64_output_mi_thunk): Likewise.\n+\t* config/m68k/m68k.c (m68k_output_mi_thunk): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_asm_output_mi_thunk):\n+\tLikewise.\n+\t* config/mips/mips.c (mips_output_mi_thunk): Likewise.\n+\t* config/mmix/mmix.c (mmix_asm_output_mi_thunk): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_asm_output_mi_thunk): Likewise.\n+\t* config/nds32/nds32.c (nds32_asm_output_mi_thunk): Likewise.\n+\t* config/nios2/nios2.c (nios2_asm_output_mi_thunk): Likewise.\n+\t* config/or1k/or1k.c (or1k_output_mi_thunk): Likewise.\n+\t* config/pa/pa.c (pa_asm_output_mi_thunk): Likewise.\n+\t* config/riscv/riscv.c (riscv_output_mi_thunk): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_output_mi_thunk): Likewise.\n+\t* config/s390/s390.c (s390_output_mi_thunk): Likewise.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n+\t* config/sparc/sparc.c (sparc_output_mi_thunk): Likewise.\n+\t* config/spu/spu.c (spu_output_mi_thunk): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_asm_output_mi_thunk):\n+\tLikewise.\n+\t* config/tilegx/tilegx.c (tilegx_output_mi_thunk): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_asm_output_mi_thunk): Likewise.\n+\t* config/vax/vax.c (vax_output_mi_thunk): Likewise.\n+\n 2019-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-ssa-alias.c (alias_stats): Add"}, {"sha": "325cefad836690a336c38180ad377eaed9b72308", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -1790,7 +1790,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       && targetm.asm_out.can_output_mi_thunk (thunk_fndecl, fixed_offset,\n \t\t\t\t\t      virtual_value, alias))\n     {\n-      const char *fnname;\n       tree fn_block;\n       tree restype = TREE_TYPE (TREE_TYPE (thunk_fndecl));\n \n@@ -1814,7 +1813,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t= build_decl (DECL_SOURCE_LOCATION (thunk_fndecl),\n \t\t      RESULT_DECL, 0, restype);\n       DECL_CONTEXT (DECL_RESULT (thunk_fndecl)) = thunk_fndecl;\n-      fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n \n       /* The back end expects DECL_INITIAL to contain a BLOCK, so we\n \t create one.  */\n@@ -1828,12 +1826,10 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       insn_locations_init ();\n       set_curr_insn_location (DECL_SOURCE_LOCATION (thunk_fndecl));\n       prologue_location = curr_insn_location ();\n-      assemble_start_function (thunk_fndecl, fnname);\n \n       targetm.asm_out.output_mi_thunk (asm_out_file, thunk_fndecl,\n \t\t\t\t       fixed_offset, virtual_value, alias);\n \n-      assemble_end_function (thunk_fndecl, fnname);\n       insn_locations_finalize ();\n       init_insn_lengths ();\n       free_after_compilation (cfun);"}, {"sha": "5cf8d486435ba416176afd6fef4d07e1bab5d3bc", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -8437,6 +8437,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t   HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\t   tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   HOST_WIDE_INT hi, lo;\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n@@ -8517,9 +8518,11 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      assemble_start_function and assemble_end_function.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n #endif /* TARGET_ABI_OSF */\n \f"}, {"sha": "1633d01898db25606e3affa7d4b0002d9c5ac04f", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -7314,13 +7314,16 @@ arc_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t     HOST_WIDE_INT vcall_offset,\n \t\t     tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   int mi_delta = delta;\n   const char *const mi_op = mi_delta < 0 ? \"sub\" : \"add\";\n   int shift = 0;\n   int this_regno\n     = aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function) ? 1 : 0;\n   rtx fnaddr;\n \n+  assemble_start_function (thunk, fnname);\n+\n   if (mi_delta < 0)\n     mi_delta = - mi_delta;\n \n@@ -7384,6 +7387,7 @@ arc_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \tfputs (\"@plt\\n\", file);\n     }\n   fputc ('\\n', file);\n+  assemble_end_function (thunk, fnname);\n }\n \n /* Return true if a 32 bit \"long_call\" should be generated for"}, {"sha": "1d3be265b949f19e58b29f1bc60dce9ebe30142e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -26997,10 +26997,14 @@ static void\n arm_output_mi_thunk (FILE *file, tree thunk, HOST_WIDE_INT delta,\n \t\t     HOST_WIDE_INT vcall_offset, tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n+\n+  assemble_start_function (thunk, fnname);\n   if (TARGET_32BIT)\n     arm32_output_mi_thunk (file, thunk, delta, vcall_offset, function);\n   else\n     arm_thumb1_mi_thunk (file, thunk, delta, vcall_offset, function);\n+  assemble_end_function (thunk, fnname);\n }\n \n int"}, {"sha": "e520115f741f82c0452baab570ef809d4e13128d", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -4976,10 +4976,12 @@ bfin_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n \t\t      tree thunk ATTRIBUTE_UNUSED, HOST_WIDE_INT delta,\n \t\t      HOST_WIDE_INT vcall_offset, tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   rtx xops[3];\n   /* The this parameter is passed as the first argument.  */\n   rtx this_rtx = gen_rtx_REG (Pmode, REG_R0);\n \n+  assemble_start_function (thunk, fnname);\n   /* Adjust the this parameter by a fixed constant.  */\n   if (delta)\n     {\n@@ -5034,6 +5036,7 @@ bfin_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n   xops[0] = XEXP (DECL_RTL (function), 0);\n   if (1 || !flag_pic || (*targetm.binds_local_p) (function))\n     output_asm_insn (\"jump.l\\t%P0\", xops);\n+  assemble_end_function (thunk, fnname);\n }\n \f\n /* Codes for all the Blackfin builtins.  */"}, {"sha": "742c54be4bb4e66b5122704b88eebf84f34d9eb4", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -769,10 +769,12 @@ c6x_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n \t\t     tree thunk ATTRIBUTE_UNUSED, HOST_WIDE_INT delta,\n \t\t     HOST_WIDE_INT vcall_offset, tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   rtx xops[5];\n   /* The this parameter is passed as the first argument.  */\n   rtx this_rtx = gen_rtx_REG (Pmode, REG_A4);\n \n+  assemble_start_function (thunk, fnname);\n   c6x_current_insn = NULL;\n \n   xops[4] = XEXP (DECL_RTL (function), 0);\n@@ -851,6 +853,7 @@ c6x_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n       output_asm_insn (\"nop 4\", xops);\n       output_asm_insn (\"add .d1 %2, %1, %2\", xops);\n     }\n+  assemble_end_function (thunk, fnname);\n }\n \f\n /* Return true if EXP goes in small data/bss.  */"}, {"sha": "88de088fc9fec8d70968f79eb45395e78824864d", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -2764,6 +2764,9 @@ cris_asm_output_mi_thunk (FILE *stream,\n \t\t\t  HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\t  tree funcdecl)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunkdecl));\n+\n+  assemble_start_function (thunkdecl, fnname);\n   /* Make sure unwind info is emitted for the thunk if needed.  */\n   final_start_function (emit_barrier (), stream, 1);\n \n@@ -2806,6 +2809,7 @@ cris_asm_output_mi_thunk (FILE *stream,\n     }\n \n   final_end_function ();\n+  assemble_end_function (thunkdecl, fnname);\n }\n \n /* Boilerplate emitted at start of file."}, {"sha": "3cfa13e22cd0592677a23ba91aed6c8893ddbdf2", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -1967,11 +1967,13 @@ csky_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   const char *thiz = \"a0\";\n   const char *reg0 = \"t0\";\n   const char *reg1 = \"t1\";\n   int maxoff = 4096;\t\t/* Constant range for addi/subi.  */\n \n+  assemble_start_function (thunk, fnname);\n   final_start_function (emit_barrier (), file, 1);\n \n   rtx fnaddr = XEXP (DECL_RTL (function), 0);\n@@ -2047,6 +2049,7 @@ csky_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   fprintf (file, \"\\n\");\n \n   final_end_function ();\n+  assemble_end_function (thunk, fnname);\n }\n \n "}, {"sha": "657a8886ac76a6dc772bc5be2385f09f18aa03f4", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -2892,11 +2892,13 @@ epiphany_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t\t  HOST_WIDE_INT vcall_offset,\n \t\t\t  tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   int this_regno\n     = aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function) ? 1 : 0;\n   const char *this_name = reg_names[this_regno];\n   const char *fname;\n \n+  assemble_start_function (thunk, fnname);\n   /* We use IP and R16 as a scratch registers.  */\n   gcc_assert (call_used_regs [GPR_IP]);\n   gcc_assert (call_used_regs [GPR_16]);\n@@ -2954,6 +2956,7 @@ epiphany_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       assemble_name (file, fname);\n       fputc ('\\n', file);\n     }\n+  assemble_end_function (thunk, fnname);\n }\n \n void"}, {"sha": "f0c9351f0835f8bfd6a81c3fb57685f993ae2412", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -1938,11 +1938,14 @@ frv_asm_output_mi_thunk (FILE *file,\n                          HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n                          tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   const char *name_func = XSTR (XEXP (DECL_RTL (function), 0), 0);\n   const char *name_arg0 = reg_names[FIRST_ARG_REGNUM];\n   const char *name_jmp = reg_names[JUMP_REGNO];\n   const char *parallel = (frv_issue_rate () > 1 ? \".p\" : \"\");\n \n+  assemble_start_function (thunk_fndecl, fnname);\n+\n   /* Do the add using an addi if possible.  */\n   if (IN_RANGE (delta, -2048, 2047))\n     fprintf (file, \"\\taddi %s,#%d,%s\\n\", name_arg0, (int) delta, name_arg0);\n@@ -2018,6 +2021,7 @@ frv_asm_output_mi_thunk (FILE *file,\n \n   /* Jump to the function address.  */\n   fprintf (file, \"\\tjmpl @(%s,%s)\\n\", name_jmp, reg_names[GPR_FIRST+0]);\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n \n \f"}, {"sha": "7e24dd39cf18cd13492847cabc8308d68a9299a8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -19759,9 +19759,10 @@ x86_can_output_mi_thunk (const_tree, HOST_WIDE_INT, HOST_WIDE_INT vcall_offset,\n    *(*this + vcall_offset) should be added to THIS.  */\n \n static void\n-x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n+x86_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \t\t     HOST_WIDE_INT vcall_offset, tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_param = x86_this_parameter (function);\n   rtx this_reg, tmp, fnaddr;\n   unsigned int tmp_regno;\n@@ -19941,9 +19942,11 @@ x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n      Note that use_thunk calls assemble_start_function et al.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n \n static void"}, {"sha": "e4dcd34767dba98bf151a07675903360e9b34959", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -10913,6 +10913,7 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n   unsigned int this_parmno;\n@@ -11038,9 +11039,11 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   emit_all_insn_group_barriers (NULL);\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk, fnname);\n \n   reload_completed = 0;\n   epilogue_completed = 0;"}, {"sha": "ca89f37935ed928750938dd0d8d5fcd6a2cf2262", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -5071,6 +5071,7 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   rtx this_slot, offset, addr, mem, tmp;\n   rtx_insn *insn;\n \n@@ -5147,9 +5148,11 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   /* Run just enough of rest_of_compilation.  */\n   insn = get_insns ();\n   split_all_insns_noflow ();\n+  assemble_start_function (thunk, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk, fnname);\n \n   /* Clean up the vars set above.  */\n   reload_completed = 0;"}, {"sha": "947eef8673073f4a308692a558982bf51ecce7d8", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -3312,6 +3312,7 @@ microblaze_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n         HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n         tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n \n@@ -3367,9 +3368,11 @@ microblaze_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      \"borrowed\" from rs6000.c.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   reload_completed = 0;\n   epilogue_completed = 0;"}, {"sha": "4c4c9cb733ba1a09be3246d28fe83979051208e7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -19431,6 +19431,7 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, temp1, temp2, fnaddr;\n   rtx_insn *insn;\n   bool use_sibcall_p;\n@@ -19543,9 +19544,11 @@ mips_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   split_all_insns_noflow ();\n   mips16_lay_out_constants (true);\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   /* Clean up the vars set above.  Note that final_end_function resets\n      the global pointer for us.  */"}, {"sha": "380ecde448082a8d0d873e2682644a4274697c6c", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -916,7 +916,7 @@ mmix_target_asm_function_epilogue (FILE *stream)\n \n static void\n mmix_asm_output_mi_thunk (FILE *stream,\n-\t\t\t  tree fndecl ATTRIBUTE_UNUSED,\n+\t\t\t  tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t  HOST_WIDE_INT delta,\n \t\t\t  HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\t  tree func)\n@@ -925,6 +925,9 @@ mmix_asm_output_mi_thunk (FILE *stream,\n      location of structure to return as invisible first argument), you\n      need to tweak this code too.  */\n   const char *regname = reg_names[MMIX_FIRST_INCOMING_ARG_REGNUM];\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n+\n+  assemble_start_function (thunk_fndecl, fnname);\n \n   if (delta >= 0 && delta < 65536)\n     fprintf (stream, \"\\tINCL %s,%d\\n\", regname, (int)delta);\n@@ -939,6 +942,7 @@ mmix_asm_output_mi_thunk (FILE *stream,\n   fprintf (stream, \"\\tJMP \");\n   assemble_name (stream, XSTR (XEXP (DECL_RTL (func), 0), 0));\n   fprintf (stream, \"\\n\");\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n \n /* FUNCTION_PROFILER.  */"}, {"sha": "8fdd1c5adf61c557118079302e86dd0571869ba5", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -2585,8 +2585,10 @@ mn10300_asm_output_mi_thunk (FILE *        file,\n \t\t\t     HOST_WIDE_INT vcall_offset,\n \t\t\t     tree          function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   const char * _this;\n \n+  assemble_start_function (thunk_fndecl, fnname);\n   /* Get the register holding the THIS parameter.  Handle the case\n      where there is a hidden first argument for a returned structure.  */\n   if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function))\n@@ -2613,6 +2615,7 @@ mn10300_asm_output_mi_thunk (FILE *        file,\n   fputs (\"\\tjmp \", file);\n   assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n   putc ('\\n', file);\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n \n /* Return true if mn10300_output_mi_thunk would be able to output the"}, {"sha": "eba9812670534f1210c020b00ab12d5af4582e7b", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -2227,8 +2227,10 @@ nds32_asm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t\t   HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\t   tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   int this_regno;\n \n+  assemble_start_function (thunk, fnname);\n   /* Make sure unwind info is emitted for the thunk if needed.  */\n   final_start_function (emit_barrier (), file, 1);\n \n@@ -2299,6 +2301,7 @@ nds32_asm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     }\n \n   final_end_function ();\n+  assemble_end_function (thunk, fnname);\n }\n \n /* -- Permitting tail calls.  */"}, {"sha": "541e51450d8a26651ca095173c8e0805fd22f41b", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -4469,6 +4469,7 @@ nios2_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t   HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\t   tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n \n@@ -4522,9 +4523,11 @@ nios2_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      assemble_start_function and assemble_end_function.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   /* Stop pretending to be a post-reload pass.  */\n   reload_completed = 0;"}, {"sha": "5e79b306a62a262f6aa1f951b5b5c07801b409ba", "filename": "gcc/config/or1k/or1k.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2For1k%2For1k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2For1k%2For1k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -2028,10 +2028,11 @@ or1k_expand_atomic_op_qihi (rtx_code code, rtx mem, rtx val,\n    (*THIS + VCALL_OFFSET) should be additionally added to THIS.  */\n \n static void\n-or1k_output_mi_thunk (FILE *file, tree /* thunk_fndecl */,\n+or1k_output_mi_thunk (FILE *file, tree thunk_fndecl,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n \n@@ -2115,9 +2116,11 @@ or1k_output_mi_thunk (FILE *file, tree /* thunk_fndecl */,\n      assemble_start_function and assemble_end_function.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   reload_completed = 0;\n   epilogue_completed = 0;"}, {"sha": "6509dc42b1f07e299427cd7871050e0d5619f220", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -8369,6 +8369,7 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n \t\t\tHOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\ttree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   static unsigned int current_thunk_number;\n   int val_14 = VAL_14_BITS_P (delta);\n   unsigned int old_last_address = last_address, nbytes = 0;\n@@ -8379,6 +8380,7 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n   xoperands[1] = XEXP (DECL_RTL (thunk_fndecl), 0);\n   xoperands[2] = GEN_INT (delta);\n \n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (emit_barrier (), file, 1);\n \n   /* Output the thunk.  We know that the function is in the same\n@@ -8596,6 +8598,7 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n   if (old_last_address > last_address)\n     last_address = UINT_MAX;\n   update_total_code_bytes (nbytes);\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n \n /* Only direct calls to static functions are allowed to be sibling (tail)"}, {"sha": "d61455f695793210ee89d01a9d312ab3e39f3c4d", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -4401,6 +4401,7 @@ riscv_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, temp1, temp2, fnaddr;\n   rtx_insn *insn;\n \n@@ -4460,9 +4461,11 @@ riscv_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   insn = get_insns ();\n   split_all_insns_noflow ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   /* Clean up the vars set above.  Note that final_end_function resets\n      the global pointer for us.  */"}, {"sha": "ee44a20931b7d19d0acb235561ed48ab804a9871", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -29241,6 +29241,7 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\tHOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\ttree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n \n@@ -29314,9 +29315,11 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      assemble_start_function and assemble_end_function.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   reload_completed = 0;\n   epilogue_completed = 0;"}, {"sha": "3ae12190265a70502c00e4d4c5372688caabbc3b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -12864,9 +12864,11 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t      HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t      tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   rtx op[10];\n   int nonlocal = 0;\n \n+  assemble_start_function (thunk, fnname);\n   /* Make sure unwind info is emitted for the thunk if needed.  */\n   final_start_function (emit_barrier (), file, 1);\n \n@@ -13120,6 +13122,7 @@ s390_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t}\n     }\n   final_end_function ();\n+  assemble_end_function (thunk, fnname);\n }\n \n /* Output either an indirect jump or a an indirect call"}, {"sha": "b7153075fa29f81ffa3db31e4e46fb92b0b8b8cb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -10796,6 +10796,7 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t    HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t    tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   CUMULATIVE_ARGS cum;\n   int structure_value_byref = 0;\n   rtx this_rtx, this_value, sibcall, funexp;\n@@ -10953,9 +10954,11 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   sh_reorg ();\n   shorten_branches (insns);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insns, file, 1);\n   final (insns, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   reload_completed = 0;\n   epilogue_completed = 0;"}, {"sha": "cba3a568091b0557980620df610920fe16282d6d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -12277,6 +12277,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t       HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t       tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n   unsigned int int_arg_first;\n@@ -12465,9 +12466,11 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      assemble_start_function and assemble_end_function.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   reload_completed = 0;\n   epilogue_completed = 0;"}, {"sha": "613d30149c15cb506b05ea8b8aba1a3676b3f4bb", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -7043,8 +7043,10 @@ spu_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t\t     HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t     tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n   rtx op[8];\n \n+  assemble_start_function (thunk, fnname);\n   /* Make sure unwind info is emitted for the thunk if needed.  */\n   final_start_function (emit_barrier (), file, 1);\n \n@@ -7116,6 +7118,7 @@ spu_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   output_asm_insn (\"br\\t%0\", op);\n \n   final_end_function ();\n+  assemble_end_function (thunk, fnname);\n }\n \n /* Canonicalize a comparison from one we don't have to one we do have.  */"}, {"sha": "bd551100183f0cd4c760d3909c2aabafed6e31af", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -1512,8 +1512,10 @@ xstormy16_asm_output_mi_thunk (FILE *file,\n \t\t\t       HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t\t       tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   int regnum = FIRST_ARGUMENT_REGISTER;\n \n+  assemble_start_function (thunk_fndecl, fnname);\n   /* There might be a hidden first argument for a returned structure.  */\n   if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function))\n     regnum += 1;\n@@ -1522,6 +1524,7 @@ xstormy16_asm_output_mi_thunk (FILE *file,\n   fputs (\"\\tjmpf \", file);\n   assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n   putc ('\\n', file);\n+  assemble_end_function (thunk_fndecl, fnname);\n }\n \n /* The purpose of this function is to override the default behavior of"}, {"sha": "513c81cb8baa47cabace6e44169f8ee11cba826a", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -4920,6 +4920,7 @@ tilegx_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\tHOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\ttree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp, addend;\n   rtx_insn *insn;\n \n@@ -5000,9 +5001,11 @@ tilegx_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n    */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   /* Stop pretending to be a post-reload pass.  */\n   reload_completed = 0;"}, {"sha": "7e249022c30ce9941da34a05d680f7f28c961d1c", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -4368,6 +4368,7 @@ tilepro_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t     HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t\t     tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk_fndecl));\n   rtx this_rtx, funexp;\n   rtx_insn *insn;\n \n@@ -4423,9 +4424,11 @@ tilepro_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n    */\n   insn = get_insns ();\n   shorten_branches (insn);\n+  assemble_start_function (thunk_fndecl, fnname);\n   final_start_function (insn, file, 1);\n   final (insn, file, 1);\n   final_end_function ();\n+  assemble_end_function (thunk_fndecl, fnname);\n \n   /* Stop pretending to be a post-reload pass.  */\n   reload_completed = 0;"}, {"sha": "547a7e068e49655993670e9a465fbc23f447b959", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7430263c07b4a1bcf3deb708c8c691f233fcb40/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=f7430263c07b4a1bcf3deb708c8c691f233fcb40", "patch": "@@ -1049,11 +1049,15 @@ vax_output_mi_thunk (FILE * file,\n \t\t     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n \t\t     tree function)\n {\n+  const char *fnname = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (thunk));\n+\n+  assemble_start_function (thunk, fnname);\n   fprintf (file, \"\\t.word 0x0ffc\\n\\taddl2 $\" HOST_WIDE_INT_PRINT_DEC, delta);\n   asm_fprintf (file, \",4(%Rap)\\n\");\n   fprintf (file, \"\\tjmp \");\n   assemble_name (file,  XSTR (XEXP (DECL_RTL (function), 0), 0));\n   fprintf (file, \"+2\\n\");\n+  assemble_end_function (thunk, fnname);\n }\n \f\n static rtx"}]}