{"sha": "3e038221c4c77097382defc24a6922246b3c315f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwMzgyMjFjNGM3NzA5NzM4MmRlZmMyNGE2OTIyMjQ2YjNjMzE1Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-06-06T10:26:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:26:18Z"}, "message": "exp_ch9.ads, [...] (Build_Protected_Entry): Set sloc of generated exception handler appropriately when debugging generated code.\n\n2007-04-20  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\t    Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.ads, exp_ch9.adb (Build_Protected_Entry): Set sloc of\n\tgenerated exception handler appropriately when debugging generated code.\n\tDeal properly with No_Exception_Propagation restriction mode.\n\t(Expand_N_Abort_Statement): Add an unchecked type conversion from\n\tSystem.Address to System.Tasking.Task_Id when processing the result of\n\tthe predefined primitive _disp_get_task_id.\n\t(Expand_N_Asynchronous_Select): Clarify comment.\n\t(Expand_N_Protected_Type_Declaration): Minor code cleanup.\n\t(Find_Parameter_Type): New routine inside Type_Conformant_Parameters.\n\t(Type_Conformant_Parameters): New parameter Prim_Op_Typ. Code cleanup.\n\t(Add_Private_Declarations, Build_Protected_Body): Use proper slocs for\n\tprivals and for generated call to Complete_Entry_Body, for better gdb\n\tbehavior.\n\t(Copy_Result_Type): Utility to construct a parameter and result profile\n\tfor protected functions whose return type is an anonymous access to\n\tsubprogram.\n\t(Build_Protected_Sub_Spec and Expand_Access_Protected_Subprogram_Type):\n\tcall the above.\n\t(Build_Task_Activation_Call): Insert Activate_Tasks call at proper\n\tpoint when the local-raise-to-goto transformation has taken place.\n\nFrom-SVN: r125401", "tree": {"sha": "75dd62a1bd0f623e5318996bf4306979fd29df46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75dd62a1bd0f623e5318996bf4306979fd29df46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e038221c4c77097382defc24a6922246b3c315f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e038221c4c77097382defc24a6922246b3c315f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e038221c4c77097382defc24a6922246b3c315f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e038221c4c77097382defc24a6922246b3c315f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbe13a374e58cda45a1a06df8e2a689bcc24e1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe13a374e58cda45a1a06df8e2a689bcc24e1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe13a374e58cda45a1a06df8e2a689bcc24e1da"}], "stats": {"total": 349, "additions": 264, "deletions": 85}, "files": [{"sha": "79286d55bf6e227191c05014da43616c3ca39923", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 246, "deletions": 74, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e038221c4c77097382defc24a6922246b3c315f/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e038221c4c77097382defc24a6922246b3c315f/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=3e038221c4c77097382defc24a6922246b3c315f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,6 @@ with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n with Hostparm;\n-with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -125,14 +124,6 @@ package body Exp_Ch9 is\n    --  Build a specification for a function implementing\n    --  the protected entry barrier of the specified entry body.\n \n-   function Build_Corresponding_Record\n-     (N    : Node_Id;\n-      Ctyp : Node_Id;\n-      Loc  : Source_Ptr) return Node_Id;\n-   --  Common to tasks and protected types. Copy discriminant specifications,\n-   --  build record declaration. N is the type declaration, Ctyp is the\n-   --  concurrent entity (task type or protected type).\n-\n    function Build_Entry_Count_Expression\n      (Concurrent_Type : Node_Id;\n       Component_List  : List_Id;\n@@ -281,6 +272,14 @@ package body Exp_Ch9 is\n    --  For each entry family in a concurrent type, create an anonymous array\n    --  type of the right size, and add a component to the corresponding_record.\n \n+   function Copy_Result_Type (Res : Node_Id) return Node_Id;\n+   --  Copy the result type of a function specification, when building the\n+   --  internal operation corresponding to a protected function, or when\n+   --  expanding an access to protected function. If the result is an anonymous\n+   --  access to subprogram itself, we need to create a new signature with the\n+   --  same parameter names and the same resolved types, but with new entities\n+   --  for the formals.\n+\n    function Family_Offset\n      (Loc  : Source_Ptr;\n       Hi   : Node_Id;\n@@ -699,6 +698,16 @@ package body Exp_Ch9 is\n          while Present (P) loop\n             if Nkind (P) = N_Component_Declaration then\n                Pdef := Defining_Identifier (P);\n+\n+               --  The privals are declared before the current body is\n+               --  analyzed. for visibility reasons. Set their Sloc so\n+               --  that it is consistent with their renaming declaration,\n+               --  to prevent anomalies in gdb.\n+\n+               --  This kludgy model for privals should be redesigned ???\n+\n+               Set_Sloc (Prival (Pdef), Loc);\n+\n                Decl :=\n                  Make_Object_Renaming_Declaration (Loc,\n                    Defining_Identifier => Prival (Pdef),\n@@ -755,6 +764,10 @@ package body Exp_Ch9 is\n             Protection_Type := RE_Protection;\n          end if;\n \n+         --  Adjust Sloc, as for the other privals\n+\n+         Set_Sloc (Object_Ref (Body_Ent), Loc);\n+\n          Decl :=\n            Make_Object_Renaming_Declaration (Loc,\n              Defining_Identifier => Object_Ref (Body_Ent),\n@@ -899,14 +912,13 @@ package body Exp_Ch9 is\n       then\n          Chain := Make_Defining_Identifier (Sloc (N), Name_uChain);\n \n-         --  An extended return statement is not really a task activator, but\n-         --  it does have an activation chain on which to store the tasks\n+         --  Note: An extended return statement is not really a task activator,\n+         --  but it does have an activation chain on which to store the tasks\n          --  temporarily. On successful return, the tasks on this chain are\n-         --  moved to the chain passed in by the\n-         --  caller. N_Extended_Return_Statement does not have an\n-         --  Activation_Chain_Entity, because we do not want to build a call\n-         --  to Activate_Tasks; task activation is the responsibility of the\n-         --  caller.\n+         --  moved to the chain passed in by the caller. We do not build an\n+         --  Activatation_Chain_Entity for an N_Extended_Return_Statement,\n+         --  because we do not want to build a call to Activate_Tasks. Task\n+         --  activation is the responsibility of the caller.\n \n          if Nkind (P) /= N_Extended_Return_Statement then\n             Set_Activation_Chain_Entity (P, Chain);\n@@ -1459,7 +1471,31 @@ package body Exp_Ch9 is\n             Proc_Param_Specs    : List_Id) return Boolean\n          is\n             Prim_Op_Param : Node_Id;\n+            Prim_Op_Typ   : Entity_Id;\n             Proc_Param    : Node_Id;\n+            Proc_Typ      : Entity_Id;\n+\n+            function Find_Parameter_Type (Param : Node_Id) return Entity_Id;\n+            --  Return the controlling type denoted by a formal parameter\n+\n+            -------------------------\n+            -- Find_Parameter_Type --\n+            -------------------------\n+\n+            function Find_Parameter_Type (Param : Node_Id) return Entity_Id is\n+            begin\n+               if Nkind (Param) /= N_Parameter_Specification then\n+                  return Empty;\n+\n+               elsif Nkind (Parameter_Type (Param)) = N_Access_Definition then\n+                  return Etype (Subtype_Mark (Parameter_Type (Param)));\n+\n+               else\n+                  return Etype (Parameter_Type (Param));\n+               end if;\n+            end Find_Parameter_Type;\n+\n+         --  Start of processing for Type_Conformant_Parameters\n \n          begin\n             --  Skip the first parameter of the primitive operation\n@@ -1469,12 +1505,13 @@ package body Exp_Ch9 is\n             while Present (Prim_Op_Param)\n               and then Present (Proc_Param)\n             loop\n+               Prim_Op_Typ := Find_Parameter_Type (Prim_Op_Param);\n+               Proc_Typ    := Find_Parameter_Type (Proc_Param);\n+\n                --  The two parameters must be mode conformant\n \n-               if not Conforming_Types (\n-                 Etype (Parameter_Type (Prim_Op_Param)),\n-                 Etype (Parameter_Type (Proc_Param)),\n-                 Mode_Conformant)\n+               if not Conforming_Types\n+                        (Prim_Op_Typ, Proc_Typ, Mode_Conformant)\n                then\n                   return False;\n                end if;\n@@ -2022,7 +2059,17 @@ package body Exp_Ch9 is\n       Ent : Entity_Id;\n       Pid : Node_Id) return Node_Id\n    is\n-      Loc      : constant Source_Ptr := Sloc (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n+      End_Lab : constant Node_Id :=\n+                  End_Label (Handled_Statement_Sequence (N));\n+      End_Loc : constant Source_Ptr :=\n+                  Sloc (Last (Statements (Handled_Statement_Sequence (N))));\n+      --  Used for the generated call to Complete_Entry_Body\n+\n+      Han_Loc : Source_Ptr;\n+      --  Used for the exception handler, inserted at end of the body\n+\n       Op_Decls : constant List_Id    := New_List;\n       Edef     : Entity_Id;\n       Espec    : Node_Id;\n@@ -2031,6 +2078,15 @@ package body Exp_Ch9 is\n       Complete : Node_Id;\n \n    begin\n+      --  Set the source location on the exception handler only when debugging\n+      --  the expanded code (see Make_Implicit_Exception_Handler).\n+\n+      if Debug_Generated_Code then\n+         Han_Loc := End_Loc;\n+      else\n+         Han_Loc := No_Location;\n+      end if;\n+\n       Edef :=\n         Make_Defining_Identifier (Loc,\n           Chars => Chars (Protected_Body_Subprogram (Ent)));\n@@ -2065,26 +2121,31 @@ package body Exp_Ch9 is\n            Handled_Statement_Sequence =>\n              Handled_Statement_Sequence (N)),\n \n-         Make_Procedure_Call_Statement (Loc,\n+         Make_Procedure_Call_Statement (End_Loc,\n            Name => Complete,\n            Parameter_Associations => New_List (\n-             Make_Attribute_Reference (Loc,\n+             Make_Attribute_Reference (End_Loc,\n                Prefix =>\n-                 Make_Selected_Component (Loc,\n+                 Make_Selected_Component (End_Loc,\n                    Prefix =>\n-                     Make_Identifier (Loc, Name_uObject),\n+                     Make_Identifier (End_Loc, Name_uObject),\n \n                    Selector_Name =>\n-                     Make_Identifier (Loc, Name_uObject)),\n-                 Attribute_Name => Name_Unchecked_Access))));\n+                     Make_Identifier (End_Loc, Name_uObject)),\n+              Attribute_Name => Name_Unchecked_Access))));\n+\n+      --  When exceptions can not be propagated, we never need to call\n+      --  Exception_Complete_Entry_Body\n \n-      if Restriction_Active (No_Exception_Handlers) then\n+      if No_Exception_Handlers_Set then\n          return\n            Make_Subprogram_Body (Loc,\n              Specification => Espec,\n              Declarations => Op_Decls,\n              Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc, Op_Stats));\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+               Op_Stats,\n+               End_Label => End_Lab));\n \n       else\n          Ohandle := Make_Others_Choice (Loc);\n@@ -2113,24 +2174,25 @@ package body Exp_Ch9 is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => Op_Stats,\n+                 End_Label  => End_Lab,\n                  Exception_Handlers => New_List (\n-                   Make_Implicit_Exception_Handler (Loc,\n+                   Make_Implicit_Exception_Handler (Han_Loc,\n                      Exception_Choices => New_List (Ohandle),\n \n                      Statements =>  New_List (\n-                       Make_Procedure_Call_Statement (Loc,\n+                       Make_Procedure_Call_Statement (Han_Loc,\n                          Name => Complete,\n                          Parameter_Associations => New_List (\n-                           Make_Attribute_Reference (Loc,\n+                           Make_Attribute_Reference (Han_Loc,\n                              Prefix =>\n-                               Make_Selected_Component (Loc,\n+                               Make_Selected_Component (Han_Loc,\n                                  Prefix =>\n-                                   Make_Identifier (Loc, Name_uObject),\n+                                   Make_Identifier (Han_Loc, Name_uObject),\n                                  Selector_Name =>\n-                                   Make_Identifier (Loc, Name_uObject)),\n+                                   Make_Identifier (Han_Loc, Name_uObject)),\n                                Attribute_Name => Name_Unchecked_Access),\n \n-                           Make_Function_Call (Loc,\n+                           Make_Function_Call (Han_Loc,\n                              Name => New_Reference_To (\n                                RTE (RE_Get_GNAT_Exception), Loc)))))))));\n       end if;\n@@ -2286,12 +2348,16 @@ package body Exp_Ch9 is\n              Parameter_Specifications => New_Plist);\n \n       else\n+         --  We need to create a new specification for the anonymous\n+         --  subprogram type.\n+\n          New_Spec :=\n            Make_Function_Specification (Loc,\n              Defining_Unit_Name => New_Id,\n              Parameter_Specifications => New_Plist,\n              Result_Definition =>\n-               New_Copy (Result_Definition (Specification (Decl))));\n+               Copy_Result_Type (Result_Definition (Specification (Decl))));\n+\n          Set_Return_Present (Defining_Unit_Name (New_Spec));\n          return New_Spec;\n       end if;\n@@ -3144,11 +3210,11 @@ package body Exp_Ch9 is\n    --------------------------------\n \n    procedure Build_Task_Activation_Call (N : Node_Id) is\n-      Loc        : constant Source_Ptr := Sloc (N);\n-      Chain      : Entity_Id;\n-      Call       : Node_Id;\n-      Name       : Node_Id;\n-      P          : Node_Id;\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Chain : Entity_Id;\n+      Call  : Node_Id;\n+      Name  : Node_Id;\n+      P     : Node_Id;\n \n    begin\n       --  Get the activation chain entity. Except in the case of a package\n@@ -3157,7 +3223,6 @@ package body Exp_Ch9 is\n \n       if Nkind (N) = N_Package_Body then\n          P := Corresponding_Spec (N);\n-\n          loop\n             P := Parent (P);\n             exit when Nkind (P) = N_Package_Declaration;\n@@ -3198,7 +3263,7 @@ package body Exp_Ch9 is\n          else\n             if Present (Handled_Statement_Sequence (N)) then\n \n-               --  The call goes at the start of the statement sequence, but\n+               --  The call goes at the start of the statement sequence\n                --  after the start of exception range label if one is present.\n \n                declare\n@@ -3207,10 +3272,33 @@ package body Exp_Ch9 is\n                begin\n                   Stm := First (Statements (Handled_Statement_Sequence (N)));\n \n+                  --  A special case, skip exception range label if one is\n+                  --  present (from front end zcx processing).\n+\n                   if Nkind (Stm) = N_Label and then Exception_Junk (Stm) then\n                      Next (Stm);\n                   end if;\n \n+                  --  Another special case, if the first statement is a block\n+                  --  from optimization of a local raise to a goto, then the\n+                  --  call goes inside this block.\n+\n+                  if Nkind (Stm) = N_Block_Statement\n+                    and then Exception_Junk (Stm)\n+                  then\n+                     Stm :=\n+                       First (Statements (Handled_Statement_Sequence (Stm)));\n+                  end if;\n+\n+                  --  Insertion point is after any exception label pushes,\n+                  --  since we want it covered by any local handlers.\n+\n+                  while Nkind (Stm) in N_Push_xxx_Label loop\n+                     Next (Stm);\n+                  end loop;\n+\n+                  --  Now we have the proper insertion point\n+\n                   Insert_Before (Stm, Call);\n                end;\n \n@@ -3517,6 +3605,33 @@ package body Exp_Ch9 is\n       end loop;\n    end Collect_Entry_Families;\n \n+   ----------------------\n+   -- Copy_Result_Type --\n+   ----------------------\n+\n+   function Copy_Result_Type (Res : Node_Id) return Node_Id is\n+      New_Res  : constant Node_Id := New_Copy_Tree (Res);\n+      Par_Spec : Node_Id;\n+      Formal   : Entity_Id;\n+\n+   begin\n+      if Nkind (New_Res) = N_Access_Definition then\n+\n+         --  Provide new entities for the formals\n+\n+         Par_Spec := First (Parameter_Specifications\n+                              (Access_To_Subprogram_Definition (New_Res)));\n+         while Present (Par_Spec) loop\n+            Formal := Defining_Identifier (Par_Spec);\n+            Set_Defining_Identifier (Par_Spec,\n+              Make_Defining_Identifier (Sloc (Formal), Chars (Formal)));\n+            Next (Par_Spec);\n+         end loop;\n+      end if;\n+\n+      return New_Res;\n+   end Copy_Result_Type;\n+\n    --------------------\n    -- Concurrent_Ref --\n    --------------------\n@@ -4043,7 +4158,7 @@ package body Exp_Ch9 is\n                New_F  : Entity_Id;\n \n             begin\n-               New_Scope (Ent);\n+               Push_Scope (Ent);\n                Formal := First_Formal (Ent);\n \n                while Present (Formal) loop\n@@ -4121,8 +4236,8 @@ package body Exp_Ch9 is\n          Def1 :=\n            Make_Access_Function_Definition (Loc,\n              Parameter_Specifications => P_List,\n-             Result_Definition =>\n-               New_Copy (Result_Definition (Type_Definition (N))));\n+             Result_Definition        =>\n+               Copy_Result_Type (Result_Definition (Type_Definition (N))));\n \n       else\n          Def1 :=\n@@ -4322,7 +4437,7 @@ package body Exp_Ch9 is\n \n          if Ada_Version >= Ada_05\n            and then Ekind (Etype (Tasknm)) = E_Class_Wide_Type\n-           and then Is_Interface      (Etype (Tasknm))\n+           and then Is_Interface (Etype (Tasknm))\n            and then Is_Task_Interface (Etype (Tasknm))\n          then\n             Append_To (Component_Associations (Aggr),\n@@ -4331,13 +4446,17 @@ package body Exp_Ch9 is\n                   Make_Integer_Literal (Loc, Count)),\n                 Expression =>\n \n-                  --  Tasknm._disp_get_task_id\n+                  --  Task_Id (Tasknm._disp_get_task_id)\n \n-                    Make_Selected_Component (Loc,\n-                      Prefix =>\n-                        New_Copy_Tree (Tasknm),\n-                      Selector_Name =>\n-                        Make_Identifier (Loc, Name_uDisp_Get_Task_Id))));\n+                  Make_Unchecked_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Reference_To (RTE (RO_ST_Task_Id), Loc),\n+                    Expression =>\n+                      Make_Selected_Component (Loc,\n+                        Prefix =>\n+                          New_Copy_Tree (Tasknm),\n+                        Selector_Name =>\n+                          Make_Identifier (Loc, Name_uDisp_Get_Task_Id)))));\n \n          else\n             Append_To (Component_Associations (Aggr),\n@@ -4566,7 +4685,7 @@ package body Exp_Ch9 is\n \n          Analyze (Call);\n \n-         New_Scope (Blkent);\n+         Push_Scope (Blkent);\n \n          declare\n             D      : Node_Id;\n@@ -4755,6 +4874,7 @@ package body Exp_Ch9 is\n    --       B   : Boolean := False;\n    --       Bnn : Communication_Block;\n    --       C   : Ada.Tags.Prim_Op_Kind;\n+   --       D   : Dummy_Communication_Block;\n    --       K   : Ada.Tags.Tagged_Kind :=\n    --               Ada.Tags.Get_Tagged_Kind (Ada.Tags.Tag (<object>));\n    --       P   : Parameters := (Param1 .. ParamN);\n@@ -4784,7 +4904,8 @@ package body Exp_Ch9 is\n    --             begin\n    --                begin\n    --                   _Disp_Asynchronous_Select\n-   --                     (<object>, S, P'address, Bnn, B);\n+   --                     (<object>, S, P'address, D, B);\n+   --                   Bnn := Communication_Block (D);\n \n    --                   Param1 := P.Param1;\n    --                   ...\n@@ -4815,7 +4936,8 @@ package body Exp_Ch9 is\n    --                Abort_Defer;\n \n    --                _Disp_Asynchronous_Select\n-   --                  (<object>, S, P'address, Bnn, B);\n+   --                  (<object>, S, P'address, D, B);\n+   --                Bnn := Communication_Bloc (D);\n \n    --                Param1 := P.Param1;\n    --                ...\n@@ -4970,6 +5092,17 @@ package body Exp_Ch9 is\n             --    K : Ada.Tags.Tagged_Kind :=\n             --          Ada.Tags.Get_Tagged_Kind (Ada.Tags.Tag (<object>));\n \n+            --  Dummy communication block, generate:\n+            --    D : Dummy_Communication_Block;\n+\n+            Append_To (Decls,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier =>\n+                  Make_Defining_Identifier (Loc, Name_uD),\n+                Object_Definition =>\n+                  New_Reference_To (\n+                    RTE (RE_Dummy_Communication_Block), Loc)));\n+\n             K := Build_K (Loc, Decls, Obj);\n \n             --  Parameter block processing\n@@ -5006,7 +5139,21 @@ package body Exp_Ch9 is\n             Cleanup_Stmts := Parameter_Block_Unpack (Loc, P, Actuals, Formals);\n \n             --  Generate:\n-            --    _Disp_Asynchronous_Select (<object>, S, P'address, Bnn, B);\n+            --    Bnn := Communication_Block (D);\n+\n+            Prepend_To (Cleanup_Stmts,\n+              Make_Assignment_Statement (Loc,\n+                Name =>\n+                  New_Reference_To (Bnn, Loc),\n+                Expression =>\n+                  Make_Unchecked_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Reference_To (RTE (RE_Communication_Block), Loc),\n+                    Expression =>\n+                      Make_Identifier (Loc, Name_uD))));\n+\n+            --  Generate:\n+            --    _Disp_Asynchronous_Select (<object>, S, P'address, D, B);\n \n             Prepend_To (Cleanup_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n@@ -5022,7 +5169,7 @@ package body Exp_Ch9 is\n                     Make_Attribute_Reference (Loc,\n                       Prefix => New_Reference_To (P, Loc),\n                       Attribute_Name => Name_Address),\n-                    New_Reference_To (Bnn, Loc),\n+                    Make_Identifier (Loc, Name_uD),\n                     New_Reference_To (B, Loc))));\n \n             --  Generate:\n@@ -5117,7 +5264,21 @@ package body Exp_Ch9 is\n             TaskE_Stmts := Parameter_Block_Unpack (Loc, P, Actuals, Formals);\n \n             --  Generate:\n-            --    _Disp_Asynchronous_Select (<object>, S, P'address, Bnn, B);\n+            --    Bnn := Communication_Block (D);\n+\n+            Append_To (TaskE_Stmts,\n+              Make_Assignment_Statement (Loc,\n+                Name =>\n+                  New_Reference_To (Bnn, Loc),\n+                Expression =>\n+                  Make_Unchecked_Type_Conversion (Loc,\n+                    Subtype_Mark =>\n+                      New_Reference_To (RTE (RE_Communication_Block), Loc),\n+                    Expression =>\n+                      Make_Identifier (Loc, Name_uD))));\n+\n+            --  Generate:\n+            --    _Disp_Asynchronous_Select (<object>, S, P'address, D, B);\n \n             Prepend_To (TaskE_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n@@ -5133,7 +5294,7 @@ package body Exp_Ch9 is\n                     Make_Attribute_Reference (Loc,\n                       Prefix => New_Reference_To (P, Loc),\n                       Attribute_Name => Name_Address),\n-                    New_Reference_To (Bnn, Loc),\n+                    Make_Identifier (Loc, Name_uD),\n                     New_Reference_To (B, Loc))));\n \n             --  Generate:\n@@ -5511,17 +5672,17 @@ package body Exp_Ch9 is\n              Has_Created_Identifier => True,\n              Is_Asynchronous_Call_Block => True);\n \n-         --  For the JVM call Update_Exception instead of Abort_Undefer.\n+         --  For the VM call Update_Exception instead of Abort_Undefer.\n          --  See 4jexcept.ads for an explanation.\n \n-         if Hostparm.Java_VM then\n+         if VM_Target = No_VM then\n+            Target_Undefer := RE_Abort_Undefer;\n+         else\n             Target_Undefer := RE_Update_Exception;\n             Undefer_Args :=\n               New_List (Make_Function_Call (Loc,\n                           Name => New_Occurrence_Of\n                                     (RTE (RE_Current_Target_Exception), Loc)));\n-         else\n-            Target_Undefer := RE_Abort_Undefer;\n          end if;\n \n          Stmts := New_List (\n@@ -6965,10 +7126,10 @@ package body Exp_Ch9 is\n          return;\n       else\n          Rec_Decl := Build_Corresponding_Record (N, Prottyp, Loc);\n-         Cdecls   := Component_Items\n-                      (Component_List (Type_Definition (Rec_Decl)));\n       end if;\n \n+      Cdecls := Component_Items (Component_List (Type_Definition (Rec_Decl)));\n+\n       --  Ada 2005 (AI-345): Propagate the attribute that contains the list\n       --  of implemented interfaces.\n \n@@ -10163,13 +10324,24 @@ package body Exp_Ch9 is\n       Subp : constant Entity_Id := Protected_Body_Subprogram (E);\n \n    begin\n-      --  The internal and external subprograms follow each other on the\n-      --  entity chain. Note that previously private operations had no\n-      --  separate external subprogram. We now create one in all cases,\n-      --  because a private operation may actually appear in an external\n-      --  call, through a 'Access reference used for a callback.\n+      --  The internal and external subprograms follow each other on the entity\n+      --  chain. Note that previously private operations had no separate\n+      --  external subprogram. We now create one in all cases, because a\n+      --  private operation may actually appear in an external call, through\n+      --  a 'Access reference used for a callback.\n+\n+      --  If the operation is a function that returns an anonymous access type,\n+      --  the corresponding itype appears before the operation, and must be\n+      --  skipped.\n \n-      return Next_Entity (Subp);\n+      --  This mechanism is fragile, there should be a real link between the\n+      --  two versions of the operation, but there is no place to put it ???\n+\n+      if Is_Access_Type (Next_Entity (Subp)) then\n+         return Next_Entity (Next_Entity (Subp));\n+      else\n+         return Next_Entity (Subp);\n+      end if;\n    end External_Subprogram;\n \n    ------------------------------"}, {"sha": "88d0e05b55c8ed0bf8f467d35ead3f88ac36a6de", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e038221c4c77097382defc24a6922246b3c315f/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e038221c4c77097382defc24a6922246b3c315f/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=3e038221c4c77097382defc24a6922246b3c315f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,6 +26,7 @@\n \n --  Expand routines for chapter 9 constructs\n \n+with Namet; use Namet;\n with Types; use Types;\n \n package Exp_Ch9 is\n@@ -86,6 +87,14 @@ package Exp_Ch9 is\n    --  Task_Id of the associated task as the parameter. The caller is\n    --  responsible for analyzing and resolving the resulting tree.\n \n+   function Build_Corresponding_Record\n+     (N    : Node_Id;\n+      Ctyp : Node_Id;\n+      Loc  : Source_Ptr) return Node_Id;\n+   --  Common to tasks and protected types. Copy discriminant specifications,\n+   --  build record declaration. N is the type declaration, Ctyp is the\n+   --  concurrent entity (task type or protected type).\n+\n    procedure Build_Master_Entity (E : Entity_Id);\n    --  Given an entity E for the declaration of an object containing tasks\n    --  or of a type declaration for an allocator whose designated type is a\n@@ -250,16 +259,14 @@ package Exp_Ch9 is\n    procedure Expand_N_Protected_Body             (N : Node_Id);\n \n    procedure Expand_N_Protected_Type_Declaration (N : Node_Id);\n-   --  Expands protected type declarations. This results, among\n-   --  other things, in the declaration of a record type for the\n-   --  representation of protected objects and (if there are entries)\n-   --  in an entry service procedure. The Protection value used by\n-   --  the GNARL to control the object will always be the first\n-   --  field of the record, and the entry service procedure spec\n-   --  (if it exists) will always immediately follow the record\n-   --  declaration. This allows these two nodes to be found from\n-   --  the type using Corresponding_Record, without benefit of\n-   --  of further attributes.\n+   --  Expands protected type declarations. This results, among other things,\n+   --  in the declaration of a record type for the representation of protected\n+   --  objects and (if there are entries) in an entry service procedure. The\n+   --  Protection value used by the GNARL to control the object will always be\n+   --  the first field of the record, and the entry service procedure spec (if\n+   --  it exists) will always immediately follow the record declaration. This\n+   --  allows these two nodes to be found from the type, without benefit of\n+   --  further attributes, using Corresponding_Record.\n \n    procedure Expand_N_Requeue_Statement          (N : Node_Id);\n    procedure Expand_N_Selective_Accept           (N : Node_Id);"}]}