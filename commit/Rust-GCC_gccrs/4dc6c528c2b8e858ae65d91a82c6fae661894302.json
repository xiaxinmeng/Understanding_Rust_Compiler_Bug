{"sha": "4dc6c528c2b8e858ae65d91a82c6fae661894302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjNmM1MjhjMmI4ZTg1OGFlNjVkOTFhODJjNmZhZTY2MTg5NDMwMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-06-29T04:39:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-06-29T04:39:16Z"}, "message": "alloc-pool.c (create_alloc_pool): Fix -Wc++-compat warnings.\n\n\t* alloc-pool.c (create_alloc_pool): Fix -Wc++-compat warnings.\n\t* df-scan.c (df_notes_rescan): Likewise.\n\t* ggc-page.c (set_page_table_entry): Likewise.\n\t* intl.c (gcc_gettext_width): Likewise.\n\t* varasm.c (get_unnamed_section, get_noswitch_section,\n\tget_section): Likewise.\n\nFrom-SVN: r137245", "tree": {"sha": "2b48e3a63388183c42752ae73ac281a65cd85dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b48e3a63388183c42752ae73ac281a65cd85dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dc6c528c2b8e858ae65d91a82c6fae661894302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc6c528c2b8e858ae65d91a82c6fae661894302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc6c528c2b8e858ae65d91a82c6fae661894302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc6c528c2b8e858ae65d91a82c6fae661894302/comments", "author": null, "committer": null, "parents": [{"sha": "4152a484b4ddc476c40c2bfe9c30a743bdd018ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4152a484b4ddc476c40c2bfe9c30a743bdd018ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4152a484b4ddc476c40c2bfe9c30a743bdd018ac"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "1b0727bea14d9a9a1349222e44c8cf04a724daf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dc6c528c2b8e858ae65d91a82c6fae661894302", "patch": "@@ -1,3 +1,12 @@\n+2008-06-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alloc-pool.c (create_alloc_pool): Fix -Wc++-compat warnings.\n+\t* df-scan.c (df_notes_rescan): Likewise.\n+\t* ggc-page.c (set_page_table_entry): Likewise.\n+\t* intl.c (gcc_gettext_width): Likewise.\n+\t* varasm.c (get_unnamed_section, get_noswitch_section,\n+\tget_section): Likewise.\n+\n 2008-06-28  Andrew Jenner  <andrew@codesourcery.com>\n \n \t* regrename.c (build_def_use): Don't copy RTX."}, {"sha": "b22869fe787e8a5bd205fd1920659da83572bd84", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=4dc6c528c2b8e858ae65d91a82c6fae661894302", "patch": "@@ -119,7 +119,7 @@ alloc_pool\n create_alloc_pool (const char *name, size_t size, size_t num)\n {\n   alloc_pool pool;\n-  size_t pool_size, header_size;\n+  size_t header_size;\n #ifdef GATHER_STATISTICS\n   struct alloc_pool_descriptor *desc;\n #endif\n@@ -141,11 +141,8 @@ create_alloc_pool (const char *name, size_t size, size_t num)\n   /* Um, we can't really allocate 0 elements per block.  */\n   gcc_assert (num);\n \n-  /* Find the size of the pool structure, and the name.  */\n-  pool_size = sizeof (struct alloc_pool_def);\n-\n-  /* and allocate that much memory.  */\n-  pool = xmalloc (pool_size);\n+  /* Allocate memory for the pool structure.  */\n+  pool = XNEW (struct alloc_pool_def);\n \n   /* Now init the various pieces of our pool structure.  */\n   pool->name = /*xstrdup (name)*/name;"}, {"sha": "092273faa3bfefea510b24ef35171868a32f7813", "filename": "gcc/df-scan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=4dc6c528c2b8e858ae65d91a82c6fae661894302", "patch": "@@ -2082,9 +2082,9 @@ df_notes_rescan (rtx insn)\n \t      if (collection_rec.next_mw > num_deleted)\n \t\t{\n \t\t  insn_info->mw_hardregs = \n-\t\t    xrealloc (insn_info->mw_hardregs, \n-\t\t\t      (count + 1 + collection_rec.next_mw) \n-\t\t\t      * sizeof (struct df_ref*));\n+\t\t    XRESIZEVEC (struct df_mw_hardreg *,\n+\t\t\t\tinsn_info->mw_hardregs, \n+\t\t\t\tcount + 1 + collection_rec.next_mw);\n \t\t}\n \t      memcpy (&insn_info->mw_hardregs[count], collection_rec.mw_vec, \n \t\t      (collection_rec.next_mw + 1) * sizeof (struct df_mw_hardreg *));"}, {"sha": "4ac73d4af4f314a46e80c75dfe743c695ac60fb4", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=4dc6c528c2b8e858ae65d91a82c6fae661894302", "patch": "@@ -610,7 +610,7 @@ set_page_table_entry (void *p, page_entry *entry)\n       goto found;\n \n   /* Not found -- allocate a new table.  */\n-  table = xcalloc (1, sizeof(*table));\n+  table = XCNEW (struct page_table_chain);\n   table->next = G.lookup;\n   table->high_bits = high_bits;\n   G.lookup = table;"}, {"sha": "dfc015d2123e9e9b5a5d94345f4b6b926a7bcfe8", "filename": "gcc/intl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fintl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fintl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl.c?ref=4dc6c528c2b8e858ae65d91a82c6fae661894302", "patch": "@@ -91,7 +91,7 @@ size_t\n gcc_gettext_width (const char *msgstr)\n {\n   size_t nwcs = mbstowcs (0, msgstr, 0);\n-  wchar_t *wmsgstr = alloca ((nwcs + 1) * sizeof (wchar_t));\n+  wchar_t *wmsgstr = XALLOCAVEC (wchar_t, nwcs + 1);\n \n   mbstowcs (wmsgstr, msgstr, nwcs + 1);\n   return wcswidth (wmsgstr, nwcs);"}, {"sha": "d8c611444d350c1a5f74a9c8650ebf91277d938a", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dc6c528c2b8e858ae65d91a82c6fae661894302/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4dc6c528c2b8e858ae65d91a82c6fae661894302", "patch": "@@ -518,7 +518,7 @@ get_unnamed_section (unsigned int flags, void (*callback) (const void *),\n {\n   section *sect;\n \n-  sect = ggc_alloc (sizeof (struct unnamed_section));\n+  sect = GGC_NEW (section);\n   sect->unnamed.common.flags = flags | SECTION_UNNAMED;\n   sect->unnamed.callback = callback;\n   sect->unnamed.data = data;\n@@ -535,7 +535,7 @@ get_noswitch_section (unsigned int flags, noswitch_section_callback callback)\n {\n   section *sect;\n \n-  sect = ggc_alloc (sizeof (struct unnamed_section));\n+  sect = GGC_NEW (section);\n   sect->noswitch.common.flags = flags | SECTION_NOSWITCH;\n   sect->noswitch.callback = callback;\n \n@@ -556,7 +556,7 @@ get_section (const char *name, unsigned int flags, tree decl)\n   flags |= SECTION_NAMED;\n   if (*slot == NULL)\n     {\n-      sect = ggc_alloc (sizeof (struct named_section));\n+      sect = GGC_NEW (section);\n       sect->named.common.flags = flags;\n       sect->named.name = ggc_strdup (name);\n       sect->named.decl = decl;"}]}