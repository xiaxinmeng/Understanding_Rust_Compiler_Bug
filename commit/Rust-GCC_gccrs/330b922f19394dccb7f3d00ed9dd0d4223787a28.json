{"sha": "330b922f19394dccb7f3d00ed9dd0d4223787a28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMwYjkyMmYxOTM5NGRjY2I3ZjNkMDBlZDlkZDBkNDIyMzc4N2EyOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-07-25T06:28:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-07-25T06:28:16Z"}, "message": "re PR bootstrap/40854 (Conflicting crc32 functions in libiberty and zlib)\n\ninclude/:\n\tPR bootstrap/40854\n\t* libiberty.h (xcrc32): Rename from crc32.\nlibiberty/:\n\tPR bootstrap/40854\n\t* crc32.c (xcrc32): Rename from crc32.\n\nFrom-SVN: r150075", "tree": {"sha": "d8fbeeedab192d77af35ac46c8c0b458e3da1838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8fbeeedab192d77af35ac46c8c0b458e3da1838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/330b922f19394dccb7f3d00ed9dd0d4223787a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b922f19394dccb7f3d00ed9dd0d4223787a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330b922f19394dccb7f3d00ed9dd0d4223787a28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330b922f19394dccb7f3d00ed9dd0d4223787a28/comments", "author": null, "committer": null, "parents": [{"sha": "67a6e8167985001be8a50485a8cd8a0d0355a363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a6e8167985001be8a50485a8cd8a0d0355a363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a6e8167985001be8a50485a8cd8a0d0355a363"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "4bd5e81f66e9532e289e43cc540d6190a33f27a8", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b922f19394dccb7f3d00ed9dd0d4223787a28/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b922f19394dccb7f3d00ed9dd0d4223787a28/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=330b922f19394dccb7f3d00ed9dd0d4223787a28", "patch": "@@ -1,3 +1,8 @@\n+2009-07-24  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR bootstrap/40854\n+\t* libiberty.h (xcrc32): Rename from crc32.\n+\n 2009-07-24  Ian Lance Taylor  <iant@google.com>\n \n \t* libiberty.h (crc32): Declare."}, {"sha": "a7716e4a414fb3856e76627ce7048ded7457a660", "filename": "include/libiberty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b922f19394dccb7f3d00ed9dd0d4223787a28/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b922f19394dccb7f3d00ed9dd0d4223787a28/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=330b922f19394dccb7f3d00ed9dd0d4223787a28", "patch": "@@ -313,7 +313,7 @@ extern double physmem_total (void);\n extern double physmem_available (void);\n \n /* Compute the 32-bit CRC of a block of memory.  */\n-extern unsigned int crc32 (const unsigned char *, int, unsigned int);\n+extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);\n \n /* These macros provide a K&R/C89/C++-friendly way of allocating structures\n    with nice encapsulation.  The XDELETE*() macros are technically"}, {"sha": "6033935edc3065d41e031fab3a7036344e173b0e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b922f19394dccb7f3d00ed9dd0d4223787a28/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b922f19394dccb7f3d00ed9dd0d4223787a28/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=330b922f19394dccb7f3d00ed9dd0d4223787a28", "patch": "@@ -1,3 +1,8 @@\n+2009-07-24  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR bootstrap/40854\n+\t* crc32.c (xcrc32): Rename from crc32.\n+\n 2009-07-24  Ian Lance Taylor  <iant@google.com>\n \n \t* crc32.c: New file."}, {"sha": "c12916b5216a469d1b6a14e997aa72974783826f", "filename": "libiberty/crc32.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/330b922f19394dccb7f3d00ed9dd0d4223787a28/libiberty%2Fcrc32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/330b922f19394dccb7f3d00ed9dd0d4223787a28/libiberty%2Fcrc32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcrc32.c?ref=330b922f19394dccb7f3d00ed9dd0d4223787a28", "patch": "@@ -150,12 +150,25 @@ protocol for the @samp{qCRC} command.  In order to get the same\n results as gdb for a block of data, you must pass the first CRC\n parameter as @code{0xffffffff}.\n \n+This CRC can be specified as:\n+\n+  Width  : 32\n+  Poly   : 0x04c11db7\n+  Init   : parameter, typically 0xffffffff\n+  RefIn  : false\n+  RefOut : false\n+  XorOut : 0\n+\n+This differs from the \"standard\" CRC-32 algorithm in that the values\n+are not reflected, and there is no final XOR value.  These differences\n+make it easy to compose the values of multiple blocks.\n+\n @end deftypefn\n \n */\n \n unsigned int\n-crc32 (const unsigned char *buf, int len, unsigned int init)\n+xcrc32 (const unsigned char *buf, int len, unsigned int init)\n {\n   unsigned int crc = init;\n   while (len--)"}]}