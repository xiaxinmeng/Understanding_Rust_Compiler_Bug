{"sha": "cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4NTQ3YTc3NmQ1M2MzMjRlOGVkYzE5YTE0M2ExYWM3NWU3Y2EwYQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2011-09-27T14:36:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-09-27T14:36:48Z"}, "message": "invoke.texi (ffat-lto-objects): Document.\n\n\t* doc/invoke.texi (ffat-lto-objects): Document.\n\t* toplev.c (compile_file): Do not output assembly when doing slim lto;\n\tOutput __gnu_slim_lto when doing slim lto.\n\t* cgraphunit.c (ipa_passes): Do only analysis when producing slim lto.\n\t(cgraph_optimize): Return early when doing slim lto.\n\t* opts.c (finish_options): Complain about lack of linker plugin\n\twhen doing slim lto.\n\t* common.opt (ffat-lto-objects): New.\n\nCo-Authored-By: Jan Hubicka <jh@suse.cz>\n\nFrom-SVN: r179271", "tree": {"sha": "6a51259b773d6ffc2a40c93fe609a3331fd17b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a51259b773d6ffc2a40c93fe609a3331fd17b5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/comments", "author": null, "committer": null, "parents": [{"sha": "3019bbaeb3c0156d6e9ca646850a99054963301a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3019bbaeb3c0156d6e9ca646850a99054963301a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3019bbaeb3c0156d6e9ca646850a99054963301a"}], "stats": {"total": 117, "additions": 87, "deletions": 30}, "files": [{"sha": "eda5b975669b586492e302c8c1e2e10a89cffb82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "patch": "@@ -1,3 +1,15 @@\n+2011-09-27  Andi Kleen  <ak@linux.intel.com>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\n+\t* doc/invoke.texi (ffat-lto-objects): Document.\n+\t* toplev.c (compile_file): Do not output assembly when doing slim lto;\n+\tOutput __gnu_slim_lto when doing slim lto.\n+\t* cgraphunit.c (ipa_passes): Do only analysis when producing slim lto.\n+\t(cgraph_optimize): Return early when doing slim lto.\n+\t* opts.c (finish_options): Complain about lack of linker plugin\n+\twhen doing slim lto.\n+\t* common.opt (ffat-lto-objects): New.\n+\n 2011-09-27  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* ipa-inline-analysis.c (predicate_probability): Avoid comparison"}, {"sha": "999b238233377c5308904050dc716e951c08fa09", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "patch": "@@ -2042,7 +2042,7 @@ ipa_passes (void)\n   if (flag_generate_lto)\n     targetm.asm_out.lto_end ();\n \n-  if (!flag_ltrans)\n+  if (!flag_ltrans && (in_lto_p || !flag_lto || flag_fat_lto_objects))\n     execute_ipa_pass_list (all_regular_ipa_passes);\n   invoke_plugin_callbacks (PLUGIN_ALL_IPA_PASSES_END, NULL);\n \n@@ -2080,8 +2080,9 @@ cgraph_optimize (void)\n   if (!seen_error ())\n     ipa_passes ();\n \n-  /* Do nothing else if any IPA pass found errors.  */\n-  if (seen_error ())\n+  /* Do nothing else if any IPA pass found errors or if we are just streaming LTO.  */\n+  if (seen_error ()\n+      || (!in_lto_p && flag_lto && !flag_fat_lto_objects))\n     {\n       timevar_pop (TV_CGRAPHOPT);\n       return;"}, {"sha": "f237f76956ec4d8de125dbafb19162cca5b1b210", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "patch": "@@ -1087,6 +1087,10 @@ Enum(excess_precision) String(standard) Value(EXCESS_PRECISION_STANDARD)\n ffast-math\n Common\n \n+ffat-lto-objects\n+Common Var(flag_fat_lto_objects) Init(1)\n+Output lto objects containing both the intermediate language and binary output.\n+\n ffinite-math-only\n Common Report Var(flag_finite_math_only) Optimization SetByCombined\n Assume no NaNs or infinities are generated"}, {"sha": "9df741439f40412094d9f33086b0db3351efef85", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "patch": "@@ -355,8 +355,8 @@ Objective-C and Objective-C++ Dialects}.\n -fcx-limited-range @gol\n -fdata-sections -fdce -fdce -fdelayed-branch @gol\n -fdelete-null-pointer-checks -fdse -fdevirtualize -fdse @gol\n--fearly-inlining -fipa-sra -fexpensive-optimizations -ffast-math @gol\n--ffinite-math-only -ffloat-store -fexcess-precision=@var{style} @gol\n+-fearly-inlining -fipa-sra -fexpensive-optimizations -ffat-lto-objects @gol\n+-ffast-math -ffinite-math-only -ffloat-store -fexcess-precision=@var{style} @gol\n -fforward-propagate -ffp-contract=@var{style} -ffunction-sections @gol\n -fgcse -fgcse-after-reload -fgcse-las -fgcse-lm -fgraphite-identity @gol\n -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining @gol\n@@ -7891,6 +7891,22 @@ use it.\n Enabled by default when LTO support in GCC is enabled and GCC was compiled\n with a linker supporting plugins (GNU ld 2.21 or newer or gold).\n \n+@item -ffat-lto-objects\n+@opindex ffat-lto-objects\n+Fat LTO objects are object files that contain both the intermediate language\n+and the object code. This makes them useable for both LTO linking and normal\n+linking. This option makes effect only with @option{-flto} and is ignored \n+at linktime.\n+\n+@option{-fno-fat-lto-objects} improves compilation time over plain LTO, but\n+requires the complete toolchain to be aware of LTO. It requires a linker with\n+linker plugin support for basic functionality.  Additionally, nm, ar and ranlib\n+need to support linker plugins to allow a full-featured build environment\n+(capable of building static libraries etc).\n+\n+The default is @option{-ffat-lto-objects} but this default is intended to\n+change in future releases when linker plugin enabled environments become more\n+common.\n @item -fcompare-elim\n @opindex fcompare-elim\n After register allocation and post-register allocation instruction splitting,"}, {"sha": "acf77895c8a1656a21e4c3f9ac13bcc43b866fbb", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "patch": "@@ -779,7 +779,9 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n #else\n       error_at (loc, \"LTO support has not been enabled in this configuration\");\n #endif\n-    }\n+      if (!opts->x_flag_fat_lto_objects && !HAVE_LTO_PLUGIN)\n+        error_at (loc, \"-fno-fat-lto-objects are supported only with linker plugin.\");\n+}\n   if ((opts->x_flag_lto_partition_balanced != 0) + (opts->x_flag_lto_partition_1to1 != 0)\n        + (opts->x_flag_lto_partition_none != 0) >= 1)\n     {"}, {"sha": "3688c093a3f273871e9e277d395d103b5e51589f", "filename": "gcc/toplev.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8547a776d53c324e8edc19a143a1ac75e7ca0a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=cc8547a776d53c324e8edc19a143a1ac75e7ca0a", "patch": "@@ -569,40 +569,45 @@ compile_file (void)\n       return;\n     }\n \n-  varpool_assemble_pending_decls ();\n-  finish_aliases_2 ();\n+  /* Compilation unit is finalized.  When producing non-fat LTO object, we are\n+     basically finished.  */\n+  if (in_lto_p || !flag_lto || flag_fat_lto_objects)\n+    {\n+      varpool_assemble_pending_decls ();\n+      finish_aliases_2 ();\n \n-  /* Likewise for mudflap static object registrations.  */\n-  if (flag_mudflap)\n-    mudflap_finish_file ();\n+      /* Likewise for mudflap static object registrations.  */\n+      if (flag_mudflap)\n+\tmudflap_finish_file ();\n \n-  output_shared_constant_pool ();\n-  output_object_blocks ();\n+      output_shared_constant_pool ();\n+      output_object_blocks ();\n \n-  /* Write out any pending weak symbol declarations.  */\n-  weak_finish ();\n+      /* Write out any pending weak symbol declarations.  */\n+      weak_finish ();\n \n-  /* This must be at the end before unwind and debug info.\n-     Some target ports emit PIC setup thunks here.  */\n-  targetm.asm_out.code_end ();\n+      /* This must be at the end before unwind and debug info.\n+\t Some target ports emit PIC setup thunks here.  */\n+      targetm.asm_out.code_end ();\n \n-  /* Do dbx symbols.  */\n-  timevar_push (TV_SYMOUT);\n+      /* Do dbx symbols.  */\n+      timevar_push (TV_SYMOUT);\n \n-#if defined DWARF2_DEBUGGING_INFO || defined DWARF2_UNWIND_INFO\n-  if (dwarf2out_do_frame ())\n-    dwarf2out_frame_finish ();\n-#endif\n+    #if defined DWARF2_DEBUGGING_INFO || defined DWARF2_UNWIND_INFO\n+      if (dwarf2out_do_frame ())\n+\tdwarf2out_frame_finish ();\n+    #endif\n \n-  (*debug_hooks->finish) (main_input_filename);\n-  timevar_pop (TV_SYMOUT);\n+      (*debug_hooks->finish) (main_input_filename);\n+      timevar_pop (TV_SYMOUT);\n \n-  /* Output some stuff at end of file if nec.  */\n+      /* Output some stuff at end of file if nec.  */\n \n-  dw2_output_indirect_constants ();\n+      dw2_output_indirect_constants ();\n \n-  /* Flush any pending external directives.  */\n-  process_pending_assemble_externals ();\n+      /* Flush any pending external directives.  */\n+      process_pending_assemble_externals ();\n+   }\n \n   /* Emit LTO marker if LTO info has been previously emitted.  This is\n      used by collect2 to determine whether an object file contains IL.\n@@ -623,6 +628,23 @@ compile_file (void)\n \t\t\t (unsigned HOST_WIDE_INT) 1,\n \t\t\t (unsigned HOST_WIDE_INT) 1);\n #endif\n+      /* Let linker plugin know that this is a slim object and must be LTOed\n+         even when user did not ask for it.  */\n+      if (!flag_fat_lto_objects)\n+        {\n+#if defined ASM_OUTPUT_ALIGNED_DECL_COMMON\n+\t  ASM_OUTPUT_ALIGNED_DECL_COMMON (asm_out_file, NULL_TREE,\n+\t\t\t\t\t  \"__gnu_slim_lto\",\n+\t\t\t\t\t  (unsigned HOST_WIDE_INT) 1, 8);\n+#elif defined ASM_OUTPUT_ALIGNED_COMMON\n+\t  ASM_OUTPUT_ALIGNED_COMMON (asm_out_file, \"__gnu_slim_lto\",\n+\t\t\t\t     (unsigned HOST_WIDE_INT) 1, 8);\n+#else\n+\t  ASM_OUTPUT_COMMON (asm_out_file, \"__gnu_slim_lto\",\n+\t\t\t     (unsigned HOST_WIDE_INT) 1,\n+\t\t\t     (unsigned HOST_WIDE_INT) 1);\n+#endif\n+        }\n     }\n \n   /* Attach a special .ident directive to the end of the file to identify"}]}