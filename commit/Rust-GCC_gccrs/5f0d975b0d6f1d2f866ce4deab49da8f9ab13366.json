{"sha": "5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwZDk3NWIwZDZmMWQyZjg2NmNlNGRlYWI0OWRhOGY5YWIxMzM2Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-07-02T08:07:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-07-02T08:07:41Z"}, "message": "bitmap.h (bitmap_set_bit): Return bool.\n\n2008-07-02  Richard Guenther  <rguenther@suse.de>\n\n\t* bitmap.h (bitmap_set_bit): Return bool.\n\t(bitmap_clear_bit): Likewise.\n\t* bitmap.c (bitmap_set_bit): Return if the bit changed.  Only\n\twrite to the bitmap if it would.\n\t(bitmap_clear_bit): Likewise.\n\t* tree-ssa-structalias.c (add_implicit_graph_edge): Use\n\tbitmap_set_bit return value.\n\t(add_pred_graph_edge): Likewise.\n\t(add_graph_edge): Likewise.\n\t(do_sd_constraint): Likewise.\n\t(do_ds_constraint): Likewise.\n\nFrom-SVN: r137345", "tree": {"sha": "59c464d2d8075f1ef24924d7e3cc40d4c5282472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c464d2d8075f1ef24924d7e3cc40d4c5282472"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78209f30ad17a26e21acecbb5ed518c747f28c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78209f30ad17a26e21acecbb5ed518c747f28c74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78209f30ad17a26e21acecbb5ed518c747f28c74"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "3f1a21e40eb92d13820c816a6cc621699a11bb2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "patch": "@@ -1,3 +1,17 @@\n+2008-07-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* bitmap.h (bitmap_set_bit): Return bool.\n+\t(bitmap_clear_bit): Likewise.\n+\t* bitmap.c (bitmap_set_bit): Return if the bit changed.  Only\n+\twrite to the bitmap if it would.\n+\t(bitmap_clear_bit): Likewise.\n+\t* tree-ssa-structalias.c (add_implicit_graph_edge): Use\n+\tbitmap_set_bit return value.\n+\t(add_pred_graph_edge): Likewise.\n+\t(add_graph_edge): Likewise.\n+\t(do_sd_constraint): Likewise.\n+\t(do_ds_constraint): Likewise.\n+\n 2008-07-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config/alpha/alpha.c (alpha_need_linkage, alpha_use_linkage):"}, {"sha": "4fabdc915d23610cc41a4e53d9276cea27866b30", "filename": "gcc/bitmap.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "patch": "@@ -595,9 +595,9 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n   return element;\n }\n \f\n-/* Clear a single bit in a bitmap.  */\n+/* Clear a single bit in a bitmap.  Return true if the bit changed.  */\n \n-void\n+bool\n bitmap_clear_bit (bitmap head, int bit)\n {\n   bitmap_element *const ptr = bitmap_find_bit (head, bit);\n@@ -606,17 +606,24 @@ bitmap_clear_bit (bitmap head, int bit)\n     {\n       unsigned bit_num  = bit % BITMAP_WORD_BITS;\n       unsigned word_num = bit / BITMAP_WORD_BITS % BITMAP_ELEMENT_WORDS;\n-      ptr->bits[word_num] &= ~ (((BITMAP_WORD) 1) << bit_num);\n+      BITMAP_WORD bit_val = ((BITMAP_WORD) 1) << bit_num;\n+      bool res = (ptr->bits[word_num] & bit_val) != 0;\n+      if (res)\n+\tptr->bits[word_num] &= ~bit_val;\n \n       /* If we cleared the entire word, free up the element.  */\n       if (bitmap_element_zerop (ptr))\n \tbitmap_element_free (head, ptr);\n+\n+      return res;\n     }\n+\n+  return false;\n }\n \n-/* Set a single bit in a bitmap.  */\n+/* Set a single bit in a bitmap.  Return true if the bit changed.  */\n \n-void\n+bool\n bitmap_set_bit (bitmap head, int bit)\n {\n   bitmap_element *ptr = bitmap_find_bit (head, bit);\n@@ -630,9 +637,15 @@ bitmap_set_bit (bitmap head, int bit)\n       ptr->indx = bit / BITMAP_ELEMENT_ALL_BITS;\n       ptr->bits[word_num] = bit_val;\n       bitmap_element_link (head, ptr);\n+      return true;\n     }\n   else\n-    ptr->bits[word_num] |= bit_val;\n+    {\n+      bool res = (ptr->bits[word_num] & bit_val) == 0;\n+      if (res)\n+\tptr->bits[word_num] |= bit_val;\n+      return res;\n+    }\n }\n \n /* Return whether a bit is set within a bitmap.  */"}, {"sha": "7f17dc1d361a5ccdaa5de60554b85fef561156b9", "filename": "gcc/bitmap.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "patch": "@@ -136,11 +136,11 @@ extern bool bitmap_ior_and_compl (bitmap DST, const_bitmap A, const_bitmap B, co\n /* A |= (B & ~C).  Return true if A changes.  */\n extern bool bitmap_ior_and_compl_into (bitmap DST, const_bitmap B, const_bitmap C);\n \n-/* Clear a single register in a register set.  */\n-extern void bitmap_clear_bit (bitmap, int);\n+/* Clear a single bit in a bitmap.  Return true if the bit changed.  */\n+extern bool bitmap_clear_bit (bitmap, int);\n \n-/* Set a single register in a register set.  */\n-extern void bitmap_set_bit (bitmap, int);\n+/* Set a single bit in a bitmap.  Return true if the bit changed.  */\n+extern bool bitmap_set_bit (bitmap, int);\n \n /* Return true if a register is set in a register set.  */\n extern int bitmap_bit_p (bitmap, int);"}, {"sha": "e2b90c86b2e8bfe89220004ca4b0975914a3662d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0d975b0d6f1d2f866ce4deab49da8f9ab13366/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=5f0d975b0d6f1d2f866ce4deab49da8f9ab13366", "patch": "@@ -904,11 +904,8 @@ add_implicit_graph_edge (constraint_graph_t graph, unsigned int to,\n   if (!graph->implicit_preds[to])\n     graph->implicit_preds[to] = BITMAP_ALLOC (&predbitmap_obstack);\n \n-  if (!bitmap_bit_p (graph->implicit_preds[to], from))\n-    {\n-      stats.num_implicit_edges++;\n-      bitmap_set_bit (graph->implicit_preds[to], from);\n-    }\n+  if (bitmap_set_bit (graph->implicit_preds[to], from))\n+    stats.num_implicit_edges++;\n }\n \n /* Add a predecessor graph edge to GRAPH, going from TO to FROM if\n@@ -921,8 +918,7 @@ add_pred_graph_edge (constraint_graph_t graph, unsigned int to,\n {\n   if (!graph->preds[to])\n     graph->preds[to] = BITMAP_ALLOC (&predbitmap_obstack);\n-  if (!bitmap_bit_p (graph->preds[to], from))\n-    bitmap_set_bit (graph->preds[to], from);\n+  bitmap_set_bit (graph->preds[to], from);\n }\n \n /* Add a graph edge to GRAPH, going from FROM to TO if\n@@ -943,12 +939,11 @@ add_graph_edge (constraint_graph_t graph, unsigned int to,\n \n       if (!graph->succs[from])\n \tgraph->succs[from] = BITMAP_ALLOC (&pta_obstack);\n-      if (!bitmap_bit_p (graph->succs[from], to))\n+      if (bitmap_set_bit (graph->succs[from], to))\n \t{\n \t  r = true;\n \t  if (to < FIRST_REF_NODE && from < FIRST_REF_NODE)\n \t    stats.num_edges++;\n-\t  bitmap_set_bit (graph->succs[from], to);\n \t}\n       return r;\n     }\n@@ -1405,13 +1400,11 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n   unsigned int j;\n   bitmap_iterator bi;\n \n- if (bitmap_bit_p (delta, anything_id))\n-   {\n-     flag = !bitmap_bit_p (sol, anything_id);\n-     if (flag)\n-       bitmap_set_bit (sol, anything_id);\n-     goto done;\n-   }\n+  if (bitmap_bit_p (delta, anything_id))\n+    {\n+      flag |= bitmap_set_bit (sol, anything_id);\n+      goto done;\n+    }\n \n   /* For each variable j in delta (Sol(y)), add\n      an edge in the graph from j to x, and union Sol(j) into Sol(x).  */\n@@ -1436,13 +1429,9 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n \t  /* Merging the solution from ESCAPED needlessly increases\n \t     the set.  Use ESCAPED as representative instead.\n \t     Same for CALLUSED.  */\n-\t  else if ((get_varinfo (t)->id == escaped_id\n-\t\t    || get_varinfo (t)->id == callused_id)\n-\t\t   && !bitmap_bit_p (sol, get_varinfo (t)->id))\n-\t    {\n-\t      bitmap_set_bit (sol, get_varinfo (t)->id);\n-\t      flag = true;\n-\t    }\n+\t  else if (get_varinfo (t)->id == escaped_id\n+\t\t   || get_varinfo (t)->id == callused_id)\n+\t    flag |= bitmap_set_bit (sol, get_varinfo (t)->id);\n \t  else if (add_graph_edge (graph, lhs, t))\n \t    flag |= bitmap_ior_into (sol, get_varinfo (t)->solution);\n \t}\n@@ -1486,14 +1475,11 @@ do_ds_constraint (constraint_t c, bitmap delta)\n \t   continue;\n \t t = find (v->id);\n \n-\t if (!bitmap_bit_p (get_varinfo (t)->solution, anything_id))\n+\t if (bitmap_set_bit (get_varinfo (t)->solution, anything_id)\n+\t     && !TEST_BIT (changed, t))\n \t   {\n-\t     bitmap_set_bit (get_varinfo (t)->solution, anything_id);\n-\t     if (!TEST_BIT (changed, t))\n-\t       {\n-\t\t SET_BIT (changed, t);\n-\t\t changed_count++;\n-\t       }\n+\t     SET_BIT (changed, t);\n+\t     changed_count++;\n \t   }\n        }\n      return;"}]}