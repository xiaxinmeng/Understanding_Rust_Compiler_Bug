{"sha": "bf732686c0b9c42a2fe119db774c5a65e5a97174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3MzI2ODZjMGI5YzQyYTJmZTExOWRiNzc0YzVhNjVlNWE5NzE3NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-06T23:24:58Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-18T22:53:38Z"}, "message": "c++: ICE with -Wall and constexpr if [PR94937]\n\nAn ICE arises here because we call cp_get_callee_fndecl_nofold in a\ntemplate, and we've got a CALL_EXPR whose CALL_EXPR_FN is a BASELINK.\nThis tickles the INDIRECT_TYPE_P assert in cp_get_fndecl_from_callee.\n\nFixed by turning the assert into a condition and returning NULL_TREE\nin that case.\n\n\tPR c++/94937\n\t* cvt.c (cp_get_fndecl_from_callee): Return NULL_TREE if the function\n\ttype is not INDIRECT_TYPE_P.\n\t* decl.c (omp_declare_variant_finalize_one): Call\n\tcp_get_callee_fndecl_nofold instead of looking for the function decl\n\tmanually.\n\n\t* g++.dg/cpp1z/constexpr-if34.C: New test.\n\t* g++.dg/cpp2a/is-constant-evaluated10.C: New test.", "tree": {"sha": "df923e1c6f96adfba733524631c290db6c89620f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df923e1c6f96adfba733524631c290db6c89620f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf732686c0b9c42a2fe119db774c5a65e5a97174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf732686c0b9c42a2fe119db774c5a65e5a97174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf732686c0b9c42a2fe119db774c5a65e5a97174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf732686c0b9c42a2fe119db774c5a65e5a97174/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8edf0adb6616bd717312d9b305c7d7c9a6b7a171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8edf0adb6616bd717312d9b305c7d7c9a6b7a171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8edf0adb6616bd717312d9b305c7d7c9a6b7a171"}], "stats": {"total": 75, "additions": 62, "deletions": 13}, "files": [{"sha": "605cdf33ae4e2545bba6ffce09e965649b677b78", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf732686c0b9c42a2fe119db774c5a65e5a97174", "patch": "@@ -1,3 +1,12 @@\n+2020-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94937\n+\t* cvt.c (cp_get_fndecl_from_callee): Return NULL_TREE if the function\n+\ttype is not INDIRECT_TYPE_P.\n+\t* decl.c (omp_declare_variant_finalize_one): Call\n+\tcp_get_callee_fndecl_nofold instead of looking for the function decl\n+\tmanually.\n+\n 2020-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90915"}, {"sha": "371002833d0de321a0a90f20f6e5d8247d57b3c7", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=bf732686c0b9c42a2fe119db774c5a65e5a97174", "patch": "@@ -995,9 +995,8 @@ cp_get_fndecl_from_callee (tree fn, bool fold /* = true */)\n   if (TREE_CODE (fn) == FUNCTION_DECL)\n     return fn;\n   tree type = TREE_TYPE (fn);\n-  if (type == unknown_type_node)\n+  if (type == NULL_TREE || !INDIRECT_TYPE_P (type))\n     return NULL_TREE;\n-  gcc_assert (INDIRECT_TYPE_P (type));\n   if (fold)\n     fn = maybe_constant_init (fn);\n   STRIP_NOPS (fn);"}, {"sha": "6469850e2dc137f810711dc363951a3e52a62fe0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bf732686c0b9c42a2fe119db774c5a65e5a97174", "patch": "@@ -7295,17 +7295,7 @@ omp_declare_variant_finalize_one (tree decl, tree attr)\n   if (variant == error_mark_node && !processing_template_decl)\n     return true;\n \n-  variant = cp_get_callee (variant);\n-  if (variant)\n-    {\n-      if (TREE_CODE (variant) == FUNCTION_DECL)\n-\t;\n-      else if (TREE_TYPE (variant) && INDIRECT_TYPE_P (TREE_TYPE (variant)))\n-\tvariant = cp_get_fndecl_from_callee (variant, false);\n-      else\n-\tvariant = NULL_TREE;\n-    }\n-\n+  variant = cp_get_callee_fndecl_nofold (variant);\n   input_location = save_loc;\n \n   if (variant)"}, {"sha": "67f2c550ff0ce029e1847f6f66847ad7b9e0701f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf732686c0b9c42a2fe119db774c5a65e5a97174", "patch": "@@ -1,3 +1,9 @@\n+2020-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94937\n+\t* g++.dg/cpp1z/constexpr-if34.C: New test.\n+\t* g++.dg/cpp2a/is-constant-evaluated10.C: New test.\n+\n 2020-05-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/92815"}, {"sha": "6e0b2597a53ab69d4033157af9c8587ba0f880b4", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if34.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if34.C?ref=bf732686c0b9c42a2fe119db774c5a65e5a97174", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/94937 - ICE with -Wall and constexpr if.\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wall\" }\n+\n+struct B {\n+  static constexpr bool foo() { return false; }\n+};\n+\n+template<typename T>\n+struct C {\n+  static void bar ()\n+  {\n+    if constexpr (B::foo()) ;\n+  }\n+};"}, {"sha": "7b2e345f4489188f6cd861c385cf0a3edc32c41c", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated10.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf732686c0b9c42a2fe119db774c5a65e5a97174/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated10.C?ref=bf732686c0b9c42a2fe119db774c5a65e5a97174", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-Wtautological-compare\" }\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    return __builtin_is_constant_evaluated ();\n+  }\n+}\n+\n+template<typename>\n+constexpr int\n+foo(int i)\n+{\n+  if constexpr (std::is_constant_evaluated ()) // { dg-warning \".std::is_constant_evaluated. always evaluates to true in .if constexpr.\" }\n+    return 42;\n+  else\n+    return i;\n+}\n+\n+template<typename>\n+constexpr int\n+foo2(int i)\n+{\n+  if constexpr (__builtin_is_constant_evaluated ()) // { dg-warning \".std::is_constant_evaluated. always evaluates to true in .if constexpr.\" }\n+    return 42;\n+  else\n+    return i;\n+}"}]}