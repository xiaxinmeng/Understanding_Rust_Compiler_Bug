{"sha": "3e352c00e15e9742aa076287839f40813957ce21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzNTJjMDBlMTVlOTc0MmFhMDc2Mjg3ODM5ZjQwODEzOTU3Y2UyMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-10-07T16:05:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-10-07T16:05:37Z"}, "message": "tree-ssa-dom.c (dom_opt_finalize_block): Fix conditions to determine whether or not to try and thread outgoing edges.\n\n\n\t* tree-ssa-dom.c (dom_opt_finalize_block): Fix conditions to\n\tdetermine whether or not to try and thread outgoing edges.\n\nFrom-SVN: r105091", "tree": {"sha": "94b2f20aa3de80597a2ecd85c1c321ef129bfa44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b2f20aa3de80597a2ecd85c1c321ef129bfa44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e352c00e15e9742aa076287839f40813957ce21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e352c00e15e9742aa076287839f40813957ce21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e352c00e15e9742aa076287839f40813957ce21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e352c00e15e9742aa076287839f40813957ce21/comments", "author": null, "committer": null, "parents": [{"sha": "a5cee4808e6598c60068f798542e3c9f690321f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cee4808e6598c60068f798542e3c9f690321f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cee4808e6598c60068f798542e3c9f690321f2"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "e3d619f7f04833a3ae61371e7a9f1bfa0cce6d19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e352c00e15e9742aa076287839f40813957ce21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e352c00e15e9742aa076287839f40813957ce21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e352c00e15e9742aa076287839f40813957ce21", "patch": "@@ -1,3 +1,8 @@\n+2005-10-07  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (dom_opt_finalize_block): Fix conditions to\n+\tdetermine whether or not to try and thread outgoing edges.\n+\n 2005-10-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md (eqsi_power): New."}, {"sha": "b37df7797f888fcf6a526518ef4e8302ed8ae738", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e352c00e15e9742aa076287839f40813957ce21/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e352c00e15e9742aa076287839f40813957ce21/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=3e352c00e15e9742aa076287839f40813957ce21", "patch": "@@ -1020,14 +1020,14 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n {\n   tree last;\n \n-  /* If we are at a leaf node in the dominator tree, see if we can thread\n-     the edge from BB through its successor.\n-\n-     Do this before we remove entries from our equivalence tables.  */\n+  /* If we have an outgoing edge to a block with multiple incoming and\n+     outgoing edges, then we may be able to thread the edge.  ie, we\n+     may be able to statically determine which of the outgoing edges\n+     will be traversed when the incoming edge from BB is traversed.  */\n   if (single_succ_p (bb)\n       && (single_succ_edge (bb)->flags & EDGE_ABNORMAL) == 0\n-      && (get_immediate_dominator (CDI_DOMINATORS, single_succ (bb)) != bb\n-\t  || phi_nodes (single_succ (bb))))\n+      && !single_pred_p (single_succ (bb))\n+      && !single_succ_p (single_succ (bb)))\n \t\n     {\n       thread_across_edge (walk_data, single_succ_edge (bb));\n@@ -1044,10 +1044,9 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \n       extract_true_false_edges_from_block (bb, &true_edge, &false_edge);\n \n-      /* If the THEN arm is the end of a dominator tree or has PHI nodes,\n-\t then try to thread through its edge.  */\n-      if (get_immediate_dominator (CDI_DOMINATORS, true_edge->dest) != bb\n-\t  || phi_nodes (true_edge->dest))\n+      /* Only try to thread the edge if it reaches a target block with\n+\t more than one predecessor and more than one successor.  */\n+      if (!single_pred_p (true_edge->dest) && !single_succ_p (true_edge->dest))\n \t{\n \t  struct edge_info *edge_info;\n \t  unsigned int i;\n@@ -1094,8 +1093,7 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \t}\n \n       /* Similarly for the ELSE arm.  */\n-      if (get_immediate_dominator (CDI_DOMINATORS, false_edge->dest) != bb\n-\t  || phi_nodes (false_edge->dest))\n+      if (!single_pred_p (false_edge->dest) && !single_succ_p (false_edge->dest))\n \t{\n \t  struct edge_info *edge_info;\n \t  unsigned int i;"}]}