{"sha": "dd292d0ad8022964b57aba763b9abce9564ac14f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyOTJkMGFkODAyMjk2NGI1N2FiYTc2M2I5YWJjZTk1NjRhYzE0Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-02-04T12:22:42Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-02-04T12:22:42Z"}, "message": "calls.c (initialize_argument_information): Add CALL_FROM_THUNK_P parameter.\n\n\t* calls.c (initialize_argument_information): Add CALL_FROM_THUNK_P\n\tparameter.  Use it instead of current_function_is_thunk.\n\t* function.h (struct function): Update documentation for is_thunk.\n\t* tree.h (CALL_FROM_THUNK_P): New macro.\n\t* config/alpha/alpha.c (alpha_sa_mask): Do not check\n\tno_new_pseudos when testing current_function_is_thunk.\n\t* config/rs6000/rs6000.c (rs6000_ra_ever_killed): Likeiwse.\n\n\t* decl.c (cxx_push_function_context): Do not set\n\tcurrent_function_is_thunk.\n\t* method.c (use_thunk): Set CALL_FROM_THUNK on the call to the\n\tactual function.\n\nFrom-SVN: r77244", "tree": {"sha": "8c306782503db9a3eda1fbfd9d593004b11e369d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c306782503db9a3eda1fbfd9d593004b11e369d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd292d0ad8022964b57aba763b9abce9564ac14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd292d0ad8022964b57aba763b9abce9564ac14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd292d0ad8022964b57aba763b9abce9564ac14f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd292d0ad8022964b57aba763b9abce9564ac14f/comments", "author": null, "committer": null, "parents": [{"sha": "18d0ecb6ec0d462b185a4fa340952a040b5c6f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d0ecb6ec0d462b185a4fa340952a040b5c6f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d0ecb6ec0d462b185a4fa340952a040b5c6f9e"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "a75edd99c2a7c84537103ac9976a4f3be1ccac65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -1,3 +1,13 @@\n+2004-02-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* calls.c (initialize_argument_information): Add CALL_FROM_THUNK_P\n+\tparameter.  Use it instead of current_function_is_thunk.\n+\t* function.h (struct function): Update documentation for is_thunk.\n+\t* tree.h (CALL_FROM_THUNK_P): New macro.\n+\t* config/alpha/alpha.c (alpha_sa_mask): Do not check\n+\tno_new_pseudos when testing current_function_is_thunk.\n+\t* config/rs6000/rs6000.c (rs6000_ra_ever_killed): Likeiwse.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/tm.texi: Replace SETUP_INCOMING_VARARGS with"}, {"sha": "607911c4e2c61bbee343338715e74d13ad62201f", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -133,7 +133,8 @@ static int compute_argument_block_size (int, struct args_size *, int);\n static void initialize_argument_information (int, struct arg_data *,\n \t\t\t\t\t     struct args_size *, int, tree,\n \t\t\t\t\t     tree, CUMULATIVE_ARGS *, int,\n-\t\t\t\t\t     rtx *, int *, int *, int *);\n+\t\t\t\t\t     rtx *, int *, int *, int *,\n+\t\t\t\t\t     bool);\n static void compute_argument_addresses (struct arg_data *, rtx, int);\n static rtx rtx_for_function_call (tree, tree);\n static void load_register_parameters (struct arg_data *, int, rtx *, int,\n@@ -1023,7 +1024,10 @@ store_unaligned_arguments_into_pseudos (struct arg_data *args, int num_actuals)\n    and may be modified by this routine.\n \n    OLD_PENDING_ADJ, MUST_PREALLOCATE and FLAGS are pointers to integer\n-   flags which may may be modified by this routine.  */\n+   flags which may may be modified by this routine. \n+\n+   CALL_FROM_THUNK_P is true if this call is the jump from a thunk to\n+   the thunked-to function.  */\n \n static void\n initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n@@ -1034,7 +1038,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t\t\t\t CUMULATIVE_ARGS *args_so_far,\n \t\t\t\t int reg_parm_stack_space,\n \t\t\t\t rtx *old_stack_level, int *old_pending_adj,\n-\t\t\t\t int *must_preallocate, int *ecf_flags)\n+\t\t\t\t int *must_preallocate, int *ecf_flags,\n+\t\t\t\t bool call_from_thunk_p)\n {\n   /* 1 if scanning parms front to back, -1 if scanning back to front.  */\n   int inc;\n@@ -1107,7 +1112,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t{\n \t  /* If we're compiling a thunk, pass through invisible\n              references instead of making a copy.  */\n-\t  if (current_function_is_thunk\n+\t  if (call_from_thunk_p\n #ifdef FUNCTION_ARG_CALLEE_COPIES\n \t      || (FUNCTION_ARG_CALLEE_COPIES (*args_so_far, TYPE_MODE (type),\n \t\t\t\t\t     type, argpos < n_named_args)\n@@ -2444,7 +2449,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t\t\t   n_named_args, actparms, fndecl,\n \t\t\t\t   &args_so_far, reg_parm_stack_space,\n \t\t\t\t   &old_stack_level, &old_pending_adj,\n-\t\t\t\t   &must_preallocate, &flags);\n+\t\t\t\t   &must_preallocate, &flags,\n+\t\t\t\t   CALL_FROM_THUNK_P (exp));\n \n   if (args_size.var)\n     {"}, {"sha": "b1eb7f69b4f764bf055a6f36e8ceb3fcb475973d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -6735,13 +6735,10 @@ alpha_sa_mask (unsigned long *imaskP, unsigned long *fmaskP)\n   unsigned long fmask = 0;\n   unsigned int i;\n \n-  /* Irritatingly, there are two kinds of thunks -- those created with\n-     TARGET_ASM_OUTPUT_MI_THUNK and those with DECL_THUNK_P that go\n-     through the regular part of the compiler.  In the\n-     TARGET_ASM_OUTPUT_MI_THUNK case we don't have valid register life\n-     info, but assemble_start_function wants to output .frame and\n-     .mask directives.  */\n-  if (current_function_is_thunk && !no_new_pseudos)\n+  /* When outputting a thunk, we don't have valid register life info,\n+     but assemble_start_function wants to output .frame and .mask\n+     directives.  */\n+  if (current_function_is_thunk)\n     {\n       *imaskP = 0;\n       *fmaskP = 0;"}, {"sha": "27aef803b72a77921268053c36be6a9409c39a2c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -11000,11 +11000,7 @@ rs6000_ra_ever_killed (void)\n   rtx reg;\n   rtx insn;\n \n-  /* Irritatingly, there are two kinds of thunks -- those created with\n-     TARGET_ASM_OUTPUT_MI_THUNK and those with DECL_THUNK_P that go\n-     through the regular part of the compiler.  This is a very hacky\n-     way to tell them apart.  */\n-  if (current_function_is_thunk && !no_new_pseudos)\n+  if (current_function_is_thunk)\n     return 0;\n \n   /* regs_ever_live has LR marked as used if any sibcalls are present,"}, {"sha": "4ef866ff765219a60098b1372570bfc3e6f8426f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -1,3 +1,10 @@\n+2004-02-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (cxx_push_function_context): Do not set\n+\tcurrent_function_is_thunk.\n+\t* method.c (use_thunk): Set CALL_FROM_THUNK on the call to the\n+\tactual function.\n+\n 2003-02-04  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/13997"}, {"sha": "cc309579736166edf9c874863a74e2955e681298", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -11197,8 +11197,6 @@ cxx_push_function_context (struct function * f)\n     {\n       tree fn = f->decl;\n \n-      current_function_is_thunk = DECL_THUNK_P (fn);\n-\n       if (DECL_SAVED_FUNCTION_DATA (fn))\n \t{\n \t  /* If we already parsed this function, and we're just expanding it"}, {"sha": "802bf1d6f3ca5714a770194176c36246c98e39f2", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -487,6 +487,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n \tt = tree_cons (NULL_TREE, a, t);\n       t = nreverse (t);\n       t = build_call (alias, t);\n+      CALL_FROM_THUNK_P (t) = 1;\n       \n       if (VOID_TYPE_P (TREE_TYPE (t)))\n \tfinish_expr_stmt (t);"}, {"sha": "1e5c56fb84521ffe831c2ed82664db12057f5c01", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -457,9 +457,10 @@ struct function GTY(())\n   /* Nonzero if the function being compiled issues a computed jump.  */\n   unsigned int has_computed_jump : 1;\n \n-  /* Nonzero if the current function is a thunk (a lightweight function that\n-     just adjusts one of its arguments and forwards to another function), so\n-     we should try to cut corners where we can.  */\n+  /* Nonzero if the current function is a thunk, i.e., a lightweight\n+     function implemented by the output_mi_thunk hook) that just\n+     adjusts one of its arguments and forwards to another\n+     function.  */\n   unsigned int is_thunk : 1;\n \n   /* This bit is used by the exception handling logic.  It is set if all"}, {"sha": "6c3bc7135be948df6bf0bdd3be9a14af4164d1d9", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd292d0ad8022964b57aba763b9abce9564ac14f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dd292d0ad8022964b57aba763b9abce9564ac14f", "patch": "@@ -210,6 +210,8 @@ struct tree_common GTY(())\n        TREE_PROTECTED in\n            BLOCK\n \t   ..._DECL\n+       CALL_FROM_THUNK_P in\n+           CALL_EXPR \n \n    side_effects_flag:\n \n@@ -265,6 +267,7 @@ struct tree_common GTY(())\n \n \tTREE_DEPRECATED in\n \t   ..._DECL\n+\n */\n \n /* Define accessors for the fields that all tree nodes have\n@@ -623,6 +626,10 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    argument list.  */\n #define CALL_EXPR_HAS_RETURN_SLOT_ADDR(NODE) ((NODE)->common.private_flag)\n \n+/* In a CALL_EXPR, means that the call is the jump from a thunk to the\n+   thunked-to function.  */\n+#define CALL_FROM_THUNK_P(NODE) ((NODE)->common.protected_flag)\n+\n /* In a type, nonzero means that all objects of the type are guaranteed by the\n    language or front-end to be properly aligned, so we can indicate that a MEM\n    of this type is aligned at least to the alignment of the type, even if it"}]}