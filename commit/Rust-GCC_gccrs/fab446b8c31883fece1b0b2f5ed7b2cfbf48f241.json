{"sha": "fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiNDQ2YjhjMzE4ODNmZWNlMWIwYjJmNWVkN2IyY2ZiZjQ4ZjI0MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T13:48:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T13:48:58Z"}, "message": "(fold): Simplify more FP ops if -ffast-math.\n\nFrom-SVN: r6335", "tree": {"sha": "ba74c9815654aa4b106129ec87fcd1361515ce98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba74c9815654aa4b106129ec87fcd1361515ce98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241/comments", "author": null, "committer": null, "parents": [{"sha": "a83afb65d0230c597dc69793f4a266fe7df3240d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83afb65d0230c597dc69793f4a266fe7df3240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83afb65d0230c597dc69793f4a266fe7df3240d"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "82e63a70f0c37ea84ecff2d6aa1d6e11a8036546", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fab446b8c31883fece1b0b2f5ed7b2cfbf48f241/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fab446b8c31883fece1b0b2f5ed7b2cfbf48f241", "patch": "@@ -3766,24 +3766,28 @@ fold (expr)\n       /* Convert A - (-B) to A + B.  */\n       else if (TREE_CODE (arg1) == NEGATE_EXPR)\n \treturn fold (build (PLUS_EXPR, type, arg0, TREE_OPERAND (arg1, 0)));\n-      else if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n+\n+      else if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n+\t       || flag_fast_math)\n \t{\n \t  /* Except with IEEE floating point, 0-x equals -x.  */\n \t  if (! wins && real_zerop (arg0))\n \t    return build1 (NEGATE_EXPR, type, arg1);\n \t  /* Except with IEEE floating point, x-0 equals x.  */\n \t  if (real_zerop (arg1))\n \t    return non_lvalue (convert (type, arg0));\n+\t}\n \n-\t  /* Fold &x - &x.  This can happen from &x.foo - &x. \n-\t     This is unsafe for certain floats even in non-IEEE formats.\n-\t     In IEEE, it is unsafe because it does wrong for NaNs.\n-\t     Also note that operand_equal_p is always false if an operand\n-\t     is volatile.  */\n+      /* Fold &x - &x.  This can happen from &x.foo - &x. \n+\t This is unsafe for certain floats even in non-IEEE formats.\n+\t In IEEE, it is unsafe because it does wrong for NaNs.\n+\t Also note that operand_equal_p is always false if an operand\n+\t is volatile.  */\n+\n+      if (operand_equal_p (arg0, arg1,\n+\t\t\t   FLOAT_TYPE_P (type) && ! flag_fast_math))\n+\treturn convert (type, integer_zero_node);\n \n-\t  if (operand_equal_p (arg0, arg1, FLOAT_TYPE_P (type)))\n-\t    return convert (type, integer_zero_node);\n-\t}\n       goto associate;\n \n     case MULT_EXPR:\n@@ -3807,7 +3811,8 @@ fold (expr)\n       else\n \t{\n \t  /* x*0 is 0, except for IEEE floating point.  */\n-\t  if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n+\t  if ((TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n+\t       || flag_fast_math)\n \t      && real_zerop (arg1))\n \t    return omit_one_operand (type, arg1, arg0);\n \t  /* In IEEE floating point, x*1 is not equivalent to x for snans.\n@@ -4630,7 +4635,8 @@ fold (expr)\n \n       if (TREE_CODE_CLASS (TREE_CODE (arg0)) == '<'\n \t  && (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT\n-\t      || ! FLOAT_TYPE_P (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n+\t      || ! FLOAT_TYPE_P (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n+\t      || flag_fast_math)\n \t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0),\n \t\t\t\t\t     arg1, TREE_OPERAND (arg0, 1)))\n \t{"}]}