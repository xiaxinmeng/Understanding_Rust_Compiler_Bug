{"sha": "49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDljYjc5MGE0YzdiZTA5ZmJiM2YyZTU3NTk1Mzc5ZDBjYmJkOWU1NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-11T23:21:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-11T23:21:11Z"}, "message": "PR libstdc++/77691 increase allocation size to at least alignment\n\nIt's not safe to assume that malloc(n) returns memory aligned to more\nthan n, so when relying on the guaranteed alignment of malloc ensure\nthat the number of bytes allocated is at least as large as the\nalignment.\n\n\tPR libstdc++/77691\n\t* include/experimental/memory_resource (__resource_adaptor_imp): Do\n\tnot allocate sizes smaller than alignment when relying on guaranteed\n\talignment.\n\t* testsuite/experimental/memory_resource/new_delete_resource.cc:\n\tAdjust expected number of bytes allocated for alignof(max_align_t).\n\nFrom-SVN: r265068", "tree": {"sha": "3edecd41269f5ea8a5db5ab7adca024655100032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3edecd41269f5ea8a5db5ab7adca024655100032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d31f1aa489dd5efca99747e377acc27a0cced2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d31f1aa489dd5efca99747e377acc27a0cced2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d31f1aa489dd5efca99747e377acc27a0cced2"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "35be45e4e461d747370836e48f33ce9fefa89cf4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "patch": "@@ -1,3 +1,12 @@\n+2018-10-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/77691\n+\t* include/experimental/memory_resource (__resource_adaptor_imp): Do\n+\tnot allocate sizes smaller than alignment when relying on guaranteed\n+\talignment.\n+\t* testsuite/experimental/memory_resource/new_delete_resource.cc:\n+\tAdjust expected number of bytes allocated for alignof(max_align_t).\n+\n 2018-10-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/forward_list"}, {"sha": "fd40d2cf45b7e8eeafe7dc7e5e4d68761b21a328", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "patch": "@@ -421,7 +421,12 @@ namespace pmr {\n       do_allocate(size_t __bytes, size_t __alignment) override\n       {\n \tif (__alignment <= __guaranteed_alignment<_Alloc>::value)\n-\t  return _M_alloc.allocate(__bytes);\n+\t  {\n+\t    if (__bytes < __alignment)\n+\t      __bytes = __alignment;\n+\t    return _M_alloc.allocate(__bytes);\n+\t  }\n+\n \n \tconst _AlignMgr __mgr(__bytes, __alignment);\n \t// Assume _M_alloc returns 1-byte aligned memory, so allocate enough\n@@ -437,6 +442,8 @@ namespace pmr {\n \tauto __ptr = static_cast<char*>(__p);\n \tif (__alignment <= __guaranteed_alignment<_Alloc>::value)\n \t  {\n+\t    if (__bytes < __alignment)\n+\t      __bytes = __alignment;\n \t    _M_alloc.deallocate(__ptr, __bytes);\n \t    return;\n \t  }"}, {"sha": "3af3861d1a0c1b406580f0a7ed57e64b2dfa4099", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/new_delete_resource.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49cb790a4c7be09fbb3f2e57595379d0cbbd9e54/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fnew_delete_resource.cc?ref=49cb790a4c7be09fbb3f2e57595379d0cbbd9e54", "patch": "@@ -109,11 +109,13 @@ test03()\n   using std::size_t;\n   void* p = nullptr;\n \n+  auto max = [](int n, int a) { return n > a ? n : a; };\n+\n   bytes_allocated = 0;\n \n   memory_resource* r1 = new_delete_resource();\n-  p = r1->allocate(1);\n-  VERIFY( bytes_allocated == 1 );\n+  p = r1->allocate(1); // uses alignment = alignof(max_align_t)\n+  VERIFY( bytes_allocated <= alignof(max_align_t) );\n   VERIFY( aligned<max_align_t>(p) );\n   r1->deallocate(p, 1);\n   VERIFY( bytes_allocated == 0 );\n@@ -125,13 +127,13 @@ test03()\n   VERIFY( bytes_allocated == 0 );\n \n   p = r1->allocate(3, alignof(short));\n-  VERIFY( bytes_allocated == 3 );\n+  VERIFY( bytes_allocated == max(3, alignof(short)) );\n   VERIFY( aligned<short>(p) );\n   r1->deallocate(p, 3, alignof(short));\n   VERIFY( bytes_allocated == 0 );\n \n   p = r1->allocate(4, alignof(long));\n-  VERIFY( bytes_allocated == 4 );\n+  VERIFY( bytes_allocated == max(4, alignof(long)) );\n   VERIFY( aligned<long>(p) );\n   r1->deallocate(p, 4, alignof(long));\n   VERIFY( bytes_allocated == 0 );"}]}