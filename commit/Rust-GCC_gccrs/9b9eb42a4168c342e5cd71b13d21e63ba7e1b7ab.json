{"sha": "9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5ZWI0MmE0MTY4YzM0MmU1Y2Q3MWIxM2QyMWU2M2JhN2UxYjdhYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-10T19:32:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-10T19:32:30Z"}, "message": "Reduce unsharing in constexpr call evaluation.\n\n\t* constexpr.c (unshare_constructor): Only unshare if T is itself a\n\tCONSTRUCTOR.\n\t(cxx_eval_call_expression): Don't call it on the result here.\n\nFrom-SVN: r272126", "tree": {"sha": "980566ca120b28a695e8c245a3a71a7d96303406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/980566ca120b28a695e8c245a3a71a7d96303406"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c961dc7556fd00afac4a5275f1ea9444d43cd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c961dc7556fd00afac4a5275f1ea9444d43cd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c961dc7556fd00afac4a5275f1ea9444d43cd64"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "93d5f497400c5a29bd142151dc40fb3c8d0a3758", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "patch": "@@ -1,5 +1,9 @@\n 2019-06-10  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (unshare_constructor): Only unshare if T is itself a\n+\tCONSTRUCTOR.\n+\t(cxx_eval_call_expression): Don't call it on the result here.\n+\n \tReduce constexpr_call memory consumption.\n \t* constexpr.c (cxx_bind_parameters_in_call): Use TREE_VEC rather\n \tthan TREE_LIST."}, {"sha": "d7adb469b45cdfb341ae54d1dd652e698f91c227", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "patch": "@@ -1321,27 +1321,32 @@ adjust_temp_type (tree type, tree temp)\n   return cp_fold_convert (type, temp);\n }\n \n-/* Callback for walk_tree used by unshare_constructor.  */\n+/* If T is a CONSTRUCTOR, return an unshared copy of T and any\n+   sub-CONSTRUCTORs.  Otherwise return T.\n \n-static tree\n-find_constructor (tree *tp, int *walk_subtrees, void *)\n-{\n-  if (TYPE_P (*tp))\n-    *walk_subtrees = 0;\n-  if (TREE_CODE (*tp) == CONSTRUCTOR)\n-    return *tp;\n-  return NULL_TREE;\n-}\n-\n-/* If T is a CONSTRUCTOR or an expression that has a CONSTRUCTOR node as a\n-   subexpression, return an unshared copy of T.  Otherwise return T.  */\n+   We use this whenever we initialize an object as a whole, whether it's a\n+   parameter, a local variable, or a subobject, so that subsequent\n+   modifications don't affect other places where it was used.  */\n \n tree\n unshare_constructor (tree t)\n {\n-  tree ctor = walk_tree (&t, find_constructor, NULL, NULL);\n-  if (ctor != NULL_TREE)\n-    return unshare_expr (t);\n+  if (!t || TREE_CODE (t) != CONSTRUCTOR)\n+    return t;\n+  auto_vec <tree*, 4> ptrs;\n+  ptrs.safe_push (&t);\n+  while (!ptrs.is_empty ())\n+    {\n+      tree *p = ptrs.pop ();\n+      tree n = copy_node (*p);\n+      CONSTRUCTOR_ELTS (n) = vec_safe_copy (CONSTRUCTOR_ELTS (*p));\n+      *p = n;\n+      vec<constructor_elt, va_gc> *v = CONSTRUCTOR_ELTS (n);\n+      constructor_elt *ce;\n+      for (HOST_WIDE_INT i = 0; vec_safe_iterate (v, i, &ce); ++i)\n+\tif (TREE_CODE (ce->value) == CONSTRUCTOR)\n+\t  ptrs.safe_push (&ce->value);\n+    }\n   return t;\n }\n \n@@ -1898,7 +1903,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     clear_no_implicit_zero (result);\n \n   pop_cx_call_context ();\n-  return unshare_constructor (result);\n+  return result;\n }\n \n /* FIXME speed this up, it's taking 16% of compile time on sieve testcase.  */"}]}