{"sha": "edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiYmFmM2IxYmQwNGM0ZWE5ZDU4OTEzMDhlYmEyZmJiMzM0OWJmNQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2014-12-05T16:53:22Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2014-12-05T16:53:22Z"}, "message": "dwarf2cfi.c (init_one_dwarf_reg_size): New helper, processing one particular reg for expand_builtin_init_dwarf_reg_sizes.\n\n2014-12-05  Olivier Hainque  <hainque@adacore.com>\n\n        * dwarf2cfi.c (init_one_dwarf_reg_size): New helper, processing\n        one particular reg for expand_builtin_init_dwarf_reg_sizes.\n        (expand_builtin_init_dwarf_reg_sizes): Rework to use helper and\n        account for dwarf register spans.\n\nFrom-SVN: r218428", "tree": {"sha": "c7f54c9e9609b6cc206f348dcbe35ecfc0989b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f54c9e9609b6cc206f348dcbe35ecfc0989b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e425f8742870b50b55bdb873de09494d3ddda824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e425f8742870b50b55bdb873de09494d3ddda824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e425f8742870b50b55bdb873de09494d3ddda824"}], "stats": {"total": 105, "additions": 85, "deletions": 20}, "files": [{"sha": "8a91551b283177f747fa63a8de8416bd255f5ff8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5", "patch": "@@ -1,3 +1,10 @@\n+2014-12-05  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* dwarf2cfi.c (init_one_dwarf_reg_size): New helper, processing\n+\tone particular reg for expand_builtin_init_dwarf_reg_sizes.\n+\t(expand_builtin_init_dwarf_reg_sizes): Rework to use helper and\n+\taccount for dwarf register spans.\n+\n 2014-12-05  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR target/64003"}, {"sha": "0cd7220584d00324fc22c8972bca2068491a9d9d", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 78, "deletions": 20, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=edbbaf3b1bd04c4ea9d5891308eba2fbb3349bf5", "patch": "@@ -258,7 +258,59 @@ init_return_column_size (machine_mode mode, rtx mem, unsigned int c)\n \t\t  gen_int_mode (size, mode));\n }\n \n-/* Generate code to initialize the register size table.  */\n+/* Datastructure used by expand_builtin_init_dwarf_reg_sizes and\n+   init_one_dwarf_reg_size to communicate on what has been done by the\n+   latter.  */\n+\n+typedef struct\n+{\n+  /* Whether the dwarf return column was initialized.  */\n+  bool wrote_return_column;\n+\n+  /* For each hard register REGNO, whether init_one_dwarf_reg_size\n+     was given REGNO to process already.  */\n+  bool processed_regno [FIRST_PSEUDO_REGISTER];\n+\n+} init_one_dwarf_reg_state;\n+\n+/* Helper for expand_builtin_init_dwarf_reg_sizes.  Generate code to\n+   initialize the dwarf register size table entry corresponding to register\n+   REGNO in REGMODE.  TABLE is the table base address, SLOTMODE is the mode to\n+   use for the size entry to initialize, and INIT_STATE is the communication\n+   datastructure conveying what we're doing to our caller.  */\n+\n+static\n+void init_one_dwarf_reg_size (int regno, machine_mode regmode,\n+\t\t\t      rtx table, machine_mode slotmode,\n+\t\t\t      init_one_dwarf_reg_state *init_state)\n+{\n+  const unsigned int dnum = DWARF_FRAME_REGNUM (regno);\n+  const unsigned int rnum = DWARF2_FRAME_REG_OUT (dnum, 1);\n+  \n+  const HOST_WIDE_INT slotoffset = rnum * GET_MODE_SIZE (slotmode);\n+  const HOST_WIDE_INT regsize = GET_MODE_SIZE (regmode);\n+\n+  init_state->processed_regno[regno] = true;\n+\n+  if (rnum >= DWARF_FRAME_REGISTERS)\n+    return;\n+\n+  if (dnum == DWARF_FRAME_RETURN_COLUMN)\n+    {\n+      if (regmode == VOIDmode)\n+\treturn;\n+      init_state->wrote_return_column = true;\n+    }\n+\n+  if (slotoffset < 0)\n+    return;\n+\n+  emit_move_insn (adjust_address (table, slotmode, slotoffset),\n+\t\t  gen_int_mode (regsize, slotmode));\n+}\n+\n+/* Generate code to initialize the dwarf register size table located\n+   at the provided ADDRESS.  */\n \n void\n expand_builtin_init_dwarf_reg_sizes (tree address)\n@@ -267,35 +319,41 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n   machine_mode mode = TYPE_MODE (char_type_node);\n   rtx addr = expand_normal (address);\n   rtx mem = gen_rtx_MEM (BLKmode, addr);\n-  bool wrote_return_column = false;\n+\n+  init_one_dwarf_reg_state init_state;\n+\n+  memset ((char *)&init_state, 0, sizeof (init_state));\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      unsigned int dnum = DWARF_FRAME_REGNUM (i);\n-      unsigned int rnum = DWARF2_FRAME_REG_OUT (dnum, 1);\n+      machine_mode save_mode;\n+      rtx span;\n \n-      if (rnum < DWARF_FRAME_REGISTERS)\n-\t{\n-\t  HOST_WIDE_INT offset = rnum * GET_MODE_SIZE (mode);\n-\t  HOST_WIDE_INT size;\n-\t  machine_mode save_mode = targetm.dwarf_frame_reg_mode (i);\n+      /* No point in processing a register multiple times.  This could happen\n+\t with register spans, e.g. when a reg is first processed as a piece of\n+\t a span, then as a register on its own later on.  */\n+\n+      if (init_state.processed_regno[i])\n+\tcontinue;\n+\n+      save_mode = targetm.dwarf_frame_reg_mode (i);\n+      span = targetm.dwarf_register_span (gen_rtx_REG (save_mode, i));\n \n-\t  if (dnum == DWARF_FRAME_RETURN_COLUMN)\n+      if (!span)\n+\tinit_one_dwarf_reg_size (i, save_mode, mem, mode, &init_state);\n+      else\n+\t{\n+\t  for (int si = 0; si < XVECLEN (span, 0); si++)\n \t    {\n-\t      if (save_mode == VOIDmode)\n-\t\tcontinue;\n-\t      wrote_return_column = true;\n-\t    }\n-\t  size = GET_MODE_SIZE (save_mode);\n-\t  if (offset < 0)\n-\t    continue;\n+\t      rtx reg = XVECEXP (span, 0, si);\n \n-\t  emit_move_insn (adjust_address (mem, mode, offset),\n-\t\t\t  gen_int_mode (size, mode));\n+\t      init_one_dwarf_reg_size\n+\t\t(REGNO (reg), GET_MODE (reg), mem, mode, &init_state);\n+\t    }\n \t}\n     }\n \n-  if (!wrote_return_column)\n+  if (!init_state.wrote_return_column)\n     init_return_column_size (mode, mem, DWARF_FRAME_RETURN_COLUMN);\n \n #ifdef DWARF_ALT_FRAME_RETURN_COLUMN"}]}