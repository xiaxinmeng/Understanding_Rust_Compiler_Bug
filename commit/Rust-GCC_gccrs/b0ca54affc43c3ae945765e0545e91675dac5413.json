{"sha": "b0ca54affc43c3ae945765e0545e91675dac5413", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjYTU0YWZmYzQzYzNhZTk0NTc2NWUwNTQ1ZTkxNjc1ZGFjNTQxMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-12-04T15:10:16Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-12-04T15:10:16Z"}, "message": "Revert previous patch\n\nFrom-SVN: r47612", "tree": {"sha": "2f7f9ab738ee326953f015588c4b564eca6e1b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7f9ab738ee326953f015588c4b564eca6e1b43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0ca54affc43c3ae945765e0545e91675dac5413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ca54affc43c3ae945765e0545e91675dac5413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ca54affc43c3ae945765e0545e91675dac5413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ca54affc43c3ae945765e0545e91675dac5413/comments", "author": null, "committer": null, "parents": [{"sha": "667e5c5da36701af29aec9d1c0664bdc717e5088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667e5c5da36701af29aec9d1c0664bdc717e5088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667e5c5da36701af29aec9d1c0664bdc717e5088"}], "stats": {"total": 58, "additions": 10, "deletions": 48}, "files": [{"sha": "2ee82900395061aa43ced4b5b435a4bc1e5b0990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -8,16 +8,6 @@\n \t* tree.c (get_callee_fndecl): Follow DECL_ABSTRACT_ORIGIN if\n \tDECL_INITIAL is NULL.\n \n-\t* stmt.c (expand_expr_stmt): Keep last_expr_value non-NULL iff\n-\twe're interested in the result.  Use it to tell whether to\n-\tignore results of enclosed expressions.\n-\t(expand_start_stmt_expr): Added new argument, and initialize\n-\tlast_expr_value accordingly.\n-\t* tree.h (expand_start_stmt_expr): Adjusted declaration.\n-\t* c-common.c (c_expand_expr): Adjust call.\n-\t* expr.c (expand_expr) [EXPR_WFL]: Pass const0_rtx down if\n-\tignoring the result.\n-\n 2001-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* flow.c (ior_reg_cond): Return NULL if ! add and rtx wasn't optimized."}, {"sha": "cf3b44bb4a9097aa589c8267cfb0bb25d957352f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -1,7 +1,3 @@\n-2001-12-04  Andreas Jaeger  <aj@suse.de>\n-\n-\t* trans.c (tree_transform): Adjust call of expand_start_stmt_expr.\n-\n 2001-12-03  Robert Dewar <dewar@gnat.com>\n \n \t* sinfo.ads: Minor reformatting. N_Freeze_Entity node does not"}, {"sha": "deec9e79a7ba8a224f742b3ce32507ebf90c44f5", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.5 $\n+ *                            $Revision: 1.6 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -1797,7 +1797,7 @@ tree_transform (gnat_node)\n \t   we need to make sure it gets executed after the LHS.  */\n \tgnu_lhs = gnat_to_gnu (Left_Opnd (gnat_node));\n \tclear_last_expr ();\n-\tgnu_rhs_side = expand_start_stmt_expr (1);\n+\tgnu_rhs_side = expand_start_stmt_expr ();\n \tgnu_rhs = gnat_to_gnu (Right_Opnd (gnat_node));\n \texpand_end_stmt_expr (gnu_rhs_side);\n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));"}, {"sha": "a7d005b04ed4203656eafdbafd242addbb4709ca", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -3409,7 +3409,7 @@ c_expand_expr (exp, target, tmode, modifier)\n \t   out-of-scope after the first EXPR_STMT from within the\n \t   STMT_EXPR.  */\n \tpush_temp_slots ();\n-\trtl_expr = expand_start_stmt_expr (target != const0_rtx);\n+\trtl_expr = expand_start_stmt_expr ();\n \texpand_stmt (STMT_EXPR_STMT (exp));\n \texpand_end_stmt_expr (rtl_expr);\n \tresult = expand_expr (rtl_expr, target, tmode, modifier);"}, {"sha": "a8118ef9b593cea4fc84e3859d52433c37315aeb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -1,8 +1,3 @@\n-2001-12-04  Alexandre Oliva  <aoliva@redhat.com>\n-\n-\t* semantics.c (begin_global_stmt_expr): Adjust\n-\texpand_start_stmt_expr invocation.\n-\n 2001-12-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (end_template_parm_list): Clear TREE_CHAIN of each parm."}, {"sha": "2a31da0ef2e62938f5afa16f5609374dec5018ab", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -1292,7 +1292,7 @@ begin_global_stmt_expr ()\n \n   keep_next_level (1);\n   \n-  return (last_tree != NULL_TREE) ? last_tree : expand_start_stmt_expr(1); \n+  return (last_tree != NULL_TREE) ? last_tree : expand_start_stmt_expr(); \n }\n \n /* Finish the STMT_EXPR last begun with begin_global_stmt_expr.  */"}, {"sha": "659ff032db4f2f48ed3b8194fd22f32ca7a9fdc5", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -6528,9 +6528,7 @@ expand_expr (exp, target, tmode, modifier)\n \tif (EXPR_WFL_EMIT_LINE_NOTE (exp))\n \t  emit_line_note (input_filename, lineno);\n \t/* Possibly avoid switching back and forth here.  */\n-\tto_return = expand_expr (EXPR_WFL_NODE (exp),\n-\t\t\t\t target || ! ignore ? target : const0_rtx,\n-\t\t\t\t tmode, modifier);\n+\tto_return = expand_expr (EXPR_WFL_NODE (exp), target, tmode, modifier);\n \tinput_filename = saved_input_filename;\n \tlineno = saved_lineno;\n \treturn to_return;"}, {"sha": "e9728d336fcf1ea3c6d897beef889dda9c02e128", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -1,8 +1,3 @@\n-Tue Dec  4 08:28:42 2001  Alexandre Oliva  <aoliva@redhat.com>\n-\n-\t* com.c (ffecom_expr_power_integer_): Adjust\n-\texpand_start_stmt_expr() invocation.\n-\n Mon Dec  3 18:56:04 2001  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c: Remove leading capital from diagnostic messages, as"}, {"sha": "64aa8ffb389cfdd41de4ca6634bb2d783014687a", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -5584,7 +5584,7 @@ ffecom_expr_power_integer_ (ffebld expr)\n     basetypeof_l_is_int\n       = build_int_2 ((TREE_CODE (ltype) == INTEGER_TYPE), 0);\n \n-    se = expand_start_stmt_expr (1);\n+    se = expand_start_stmt_expr ();\n \n     ffecom_start_compstmt ();\n "}, {"sha": "2b176bb9e9a58b90d2d59b85a774481a51186fc5", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -2149,8 +2149,6 @@ void\n expand_expr_stmt (exp)\n      tree exp;\n {\n-  bool want_value = last_expr_value != NULL_RTX;\n-\n   /* If -W, warn about statements with no side effects,\n      except for an explicit cast to void (e.g. for assert()), and\n      except inside a ({...}) where they may be useful.  */\n@@ -2177,7 +2175,7 @@ expand_expr_stmt (exp)\n      last_expr_value to get reset.  Therefore, we set last_expr_value\n      and last_expr_type *after* calling expand_expr.  */\n   last_expr_value = expand_expr (exp,\n-\t\t\t\t (want_value && expr_stmts_for_value\n+\t\t\t\t (expr_stmts_for_value\n \t\t\t\t  ? NULL_RTX : const0_rtx),\n \t\t\t\t VOIDmode, 0);\n   last_expr_type = TREE_TYPE (exp);\n@@ -2190,7 +2188,7 @@ expand_expr_stmt (exp)\n       if (TYPE_MODE (TREE_TYPE (exp)) == VOIDmode)\n \t;\n       else if (TYPE_MODE (TREE_TYPE (exp)) != BLKmode)\n-\tlast_expr_value = copy_to_reg (last_expr_value);\n+\tcopy_to_reg (last_expr_value);\n       else\n \t{\n \t  rtx lab = gen_label_rtx ();\n@@ -2213,14 +2211,6 @@ expand_expr_stmt (exp)\n      above.  */\n   free_temp_slots ();\n \n-  if (! want_value && last_expr_value)\n-    {\n-      protect_from_queue (last_expr_value, 0);\n-      last_expr_value = NULL_RTX;\n-    }\n-  else if (want_value && ! last_expr_value)\n-    last_expr_value = const0_rtx;\n-\n   emit_queue ();\n }\n \n@@ -2346,8 +2336,7 @@ clear_last_expr ()\n    The caller must save that value and pass it to expand_end_stmt_expr.  */\n \n tree\n-expand_start_stmt_expr (want_value)\n-     int want_value;\n+expand_start_stmt_expr ()\n {\n   tree t;\n \n@@ -2358,7 +2347,6 @@ expand_start_stmt_expr (want_value)\n   start_sequence_for_rtl_expr (t);\n   NO_DEFER_POP;\n   expr_stmts_for_value++;\n-  last_expr_value = want_value ? const0_rtx : NULL_RTX;\n   return t;\n }\n "}, {"sha": "859a564b360e4fefe3cc20afc94455a42d7be1a0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ca54affc43c3ae945765e0545e91675dac5413/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b0ca54affc43c3ae945765e0545e91675dac5413", "patch": "@@ -2706,7 +2706,7 @@ extern int type_num_arguments                   PARAMS ((tree));\n \n extern int in_control_zone_p\t\t\tPARAMS ((void));\n extern void expand_fixups\t\t\tPARAMS ((rtx));\n-extern tree expand_start_stmt_expr\t\tPARAMS ((int));\n+extern tree expand_start_stmt_expr\t\tPARAMS ((void));\n extern tree expand_end_stmt_expr\t\tPARAMS ((tree));\n extern void expand_expr_stmt\t\t\tPARAMS ((tree));\n extern int warn_if_unused_value\t\t\tPARAMS ((tree));"}]}