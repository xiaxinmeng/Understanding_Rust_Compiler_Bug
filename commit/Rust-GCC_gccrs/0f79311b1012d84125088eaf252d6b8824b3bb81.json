{"sha": "0f79311b1012d84125088eaf252d6b8824b3bb81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3OTMxMWIxMDEyZDg0MTI1MDg4ZWFmMjUyZDZiODgyNGIzYmI4MQ==", "commit": {"author": {"name": "Olga Golovanevsky", "email": "olga@il.ibm.com", "date": "2009-11-30T14:42:54Z"}, "committer": {"name": "Olga Golovanevsky", "email": "olga@gcc.gnu.org", "date": "2009-11-30T14:42:54Z"}, "message": "re PR tree-optimization/39806 (incorrect pointer hashing in ipa-struct-reorg.c)\n\n2009-11-30  Olga Golovanevsky  <olga@il.ibm.com>\n\n\tPR middle-end/39806\n\t* ipa-struct-reorg.c (new_var_eq): Use DECL_UID to hash new variables.\n\t(new_var_hash): Likewise.\n\t(is_in_new_vars_htab): Likewise.\n\t(add_to_new_vars_htab): Likewise.\n\nFrom-SVN: r154811", "tree": {"sha": "2e6f3db6220868ec9928d6f32e8df7770eee63de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6f3db6220868ec9928d6f32e8df7770eee63de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f79311b1012d84125088eaf252d6b8824b3bb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f79311b1012d84125088eaf252d6b8824b3bb81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f79311b1012d84125088eaf252d6b8824b3bb81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f79311b1012d84125088eaf252d6b8824b3bb81/comments", "author": null, "committer": null, "parents": [{"sha": "0727601add7a6b06c1b114389707878a33b731a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0727601add7a6b06c1b114389707878a33b731a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0727601add7a6b06c1b114389707878a33b731a6"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "cd784d0475eca6c342a82772870afa5d9e355568", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f79311b1012d84125088eaf252d6b8824b3bb81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f79311b1012d84125088eaf252d6b8824b3bb81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f79311b1012d84125088eaf252d6b8824b3bb81", "patch": "@@ -1,3 +1,11 @@\n+2009-11-30  Olga Golovanevsky  <olga@il.ibm.com>\n+\n+\tPR middle-end/39806\n+\t* ipa-struct-reorg.c (new_var_eq): Use DECL_UID to hash new variables.\n+\t(new_var_hash): Likewise.\n+\t(is_in_new_vars_htab): Likewise.\n+\t(add_to_new_vars_htab): Likewise.\n+\n 2009-11-30  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-stmts.c (vectorizable_assignment): Support"}, {"sha": "e1dddae999ec413147033b6c4af7e64492056136", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f79311b1012d84125088eaf252d6b8824b3bb81/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f79311b1012d84125088eaf252d6b8824b3bb81/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=0f79311b1012d84125088eaf252d6b8824b3bb81", "patch": "@@ -569,7 +569,7 @@ static new_var\n is_in_new_vars_htab (tree decl, htab_t new_vars_htab)\n {\n   return (new_var) htab_find_with_hash (new_vars_htab, decl,\n-\t\t\t\t\thtab_hash_pointer (decl));\n+\t\t\t\t\tDECL_UID (decl));\n }\n \n /* Given original variable ORIG_VAR, this function returns\n@@ -1962,7 +1962,7 @@ add_to_new_vars_htab (new_var new_node, htab_t new_vars_htab)\n   void **slot;\n \n   slot = htab_find_slot_with_hash (new_vars_htab, new_node->orig_var,\n-\t\t\t\t   htab_hash_pointer (new_node->orig_var),\n+\t\t\t\t   DECL_UID (new_node->orig_var),\n \t\t\t\t   INSERT);\n   *slot = new_node;\n }\n@@ -2254,15 +2254,19 @@ create_new_var (tree var_decl, htab_t new_vars_htab)\n static hashval_t\n new_var_hash (const void *x)\n {\n-  return htab_hash_pointer (((const_new_var)x)->orig_var);\n+  return DECL_UID (((const_new_var)x)->orig_var);\n }\n \n-/* This function returns nonzero if orig_var of new_var X is equal to Y.  */\n+/* This function returns nonzero if orig_var of new_var X \n+   and tree Y have equal UIDs.  */\n \n static int\n new_var_eq (const void *x, const void *y)\n {\n-  return ((const_new_var)x)->orig_var == (const_tree)y;\n+  if (DECL_P ((const_tree)y))\n+    return DECL_UID (((const_new_var)x)->orig_var) == DECL_UID ((const_tree)y);\n+  else\n+    return 0;\n }\n \n /* This function check whether a structure type represented by STR"}]}