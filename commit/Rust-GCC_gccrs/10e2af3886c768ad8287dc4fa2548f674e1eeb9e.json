{"sha": "10e2af3886c768ad8287dc4fa2548f674e1eeb9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlMmFmMzg4NmM3NjhhZDgyODdkYzRmYTI1NDhmNjc0ZTFlZWI5ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-04-07T19:54:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-04-07T19:54:52Z"}, "message": "Fix for PR gcj/1404 and PR gcj/2332:\n\n2001-04-06  Tom Tromey  <tromey@redhat.com>\n\t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\tFix for PR gcj/1404 and PR gcj/2332:\n\t* parse.y (build_array_from_name): If we use the type_wfl then\n\taccumulate dimensions from the original type as well.\n\t(build_unresolved_array_type): Don't modify TYPE_OR_WFL in place.\n\nCo-Authored-By: Alexandre Petit-Bianco <apbianco@redhat.com>\n\nFrom-SVN: r41178", "tree": {"sha": "d57cd7f984505d1ae8545ffaec1be8b2c0b910ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d57cd7f984505d1ae8545ffaec1be8b2c0b910ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e2af3886c768ad8287dc4fa2548f674e1eeb9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e2af3886c768ad8287dc4fa2548f674e1eeb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e2af3886c768ad8287dc4fa2548f674e1eeb9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e2af3886c768ad8287dc4fa2548f674e1eeb9e/comments", "author": null, "committer": null, "parents": [{"sha": "11e1e8b60b3d52b47ebbf081493b78a1de1d9113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e1e8b60b3d52b47ebbf081493b78a1de1d9113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e1e8b60b3d52b47ebbf081493b78a1de1d9113"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "6fa18d7d7da0b9eabf00227b732096aeb82c0857", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e2af3886c768ad8287dc4fa2548f674e1eeb9e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e2af3886c768ad8287dc4fa2548f674e1eeb9e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=10e2af3886c768ad8287dc4fa2548f674e1eeb9e", "patch": "@@ -1,3 +1,11 @@\n+2001-04-06  Tom Tromey  <tromey@redhat.com>\n+\t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\tFix for PR gcj/1404 and PR gcj/2332:\n+\t* parse.y (build_array_from_name): If we use the type_wfl then\n+\taccumulate dimensions from the original type as well.\n+\t(build_unresolved_array_type): Don't modify TYPE_OR_WFL in place.\n+\n 2001-04-06  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (analyze_clinit_body): Return true if the second operand"}, {"sha": "5bddc104a215ecacac2b49e36a28f39001009258", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e2af3886c768ad8287dc4fa2548f674e1eeb9e/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e2af3886c768ad8287dc4fa2548f674e1eeb9e/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=10e2af3886c768ad8287dc4fa2548f674e1eeb9e", "patch": "@@ -3255,6 +3255,8 @@ build_array_from_name (type, type_wfl, name, ret_name)\n   /* If we have, then craft a new type for this variable */\n   if (more_dims)\n     {\n+      tree save = type;\n+\n       name = get_identifier (&string [more_dims]);\n \n       /* If we have a pointer, use its type */\n@@ -3273,7 +3275,14 @@ build_array_from_name (type, type_wfl, name, ret_name)\n          is already an array on an unresolved type, and we just keep\n          on adding dimensions) */\n       else if (type_wfl)\n-\ttype = type_wfl;\n+\t{\n+\t  int i = 0;\n+\t  type = type_wfl;\n+\t  string = IDENTIFIER_POINTER (TYPE_NAME (save));\n+\t  while (string[i]  == '[')\n+\t    ++i;\n+\t  more_dims += i;\n+\t}\n \n       /* Add all the dimensions */\n       while (more_dims--)\n@@ -3313,8 +3322,10 @@ build_unresolved_array_type (type_or_wfl)\n \t\t IDENTIFIER_POINTER (EXPR_WFL_NODE (type_or_wfl)),\n \t\t IDENTIFIER_LENGTH (EXPR_WFL_NODE (type_or_wfl)));\n   ptr = obstack_finish (&temporary_obstack);\n-  EXPR_WFL_NODE (type_or_wfl) = get_identifier (ptr);\n-  return type_or_wfl;\n+  return build_expr_wfl (get_identifier (ptr),\n+\t\t\t EXPR_WFL_FILENAME (type_or_wfl),\n+\t\t\t EXPR_WFL_LINENO (type_or_wfl),\n+\t\t\t EXPR_WFL_COLNO (type_or_wfl));\n }\n \n static void"}]}