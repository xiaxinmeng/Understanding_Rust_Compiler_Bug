{"sha": "55db8fa9e7315abf05cf55fc73cabd0868a1994c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVkYjhmYTllNzMxNWFiZjA1Y2Y1NWZjNzNjYWJkMDg2OGExOTk0Yw==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-01-12T19:11:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-01-12T19:11:00Z"}, "message": "JLayeredPane.java: Rewrite to accomodate djee@redhat.com's recent inverse ordering of Container...\n\n2004-01-08  Graydon Hoare  <graydon@redhat.com>\n\n\t* javax/swing/JLayeredPane.java: Rewrite to accomodate\n\tdjee@redhat.com's recent inverse ordering of Container elements.\n\nFrom-SVN: r75745", "tree": {"sha": "1170d716c4d9e7e8b1209d3d0ba58a480c5551b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1170d716c4d9e7e8b1209d3d0ba58a480c5551b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55db8fa9e7315abf05cf55fc73cabd0868a1994c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55db8fa9e7315abf05cf55fc73cabd0868a1994c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55db8fa9e7315abf05cf55fc73cabd0868a1994c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55db8fa9e7315abf05cf55fc73cabd0868a1994c/comments", "author": null, "committer": null, "parents": [{"sha": "1c48f4be22f79068d847eaab94cc4f6657c1e669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c48f4be22f79068d847eaab94cc4f6657c1e669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c48f4be22f79068d847eaab94cc4f6657c1e669"}], "stats": {"total": 391, "additions": 316, "deletions": 75}, "files": [{"sha": "1952bfe6037a330f96ffc8ad93605275719a15f7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55db8fa9e7315abf05cf55fc73cabd0868a1994c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55db8fa9e7315abf05cf55fc73cabd0868a1994c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=55db8fa9e7315abf05cf55fc73cabd0868a1994c", "patch": "@@ -1,3 +1,16 @@\n+2004-01-12  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* gnu/java/awt/gtk/GdkGraphics2D.java\n+\t(static): Check GtkToolkit before initializing static state.\n+\t(Graphics2D): Don't construct transform with 0.5 unit offset.\n+\n+2003-11-06  Sascha Brawer  <brawer@dandelis.ch>\n+\n+\t* gnu/java/awt/BitwiseXORComposite.java: Add.\n+\t* gnu/java/awt/peer/gtk/GdkGraphics2D.java\n+\t(setXORMode): Switch to gnu.java.awt.BitwiseXORComposite.\n+\t(BitwiseXORComposite): Remove inner class.\n+\n 2004-01-11  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/lang/reflect/TypeSignature.java"}, {"sha": "675c225bbfa167afadca0aaf4cba45562edcd38d", "filename": "libjava/gnu/java/awt/BitwiseXORComposite.java", "status": "added", "additions": 296, "deletions": 0, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55db8fa9e7315abf05cf55fc73cabd0868a1994c/libjava%2Fgnu%2Fjava%2Fawt%2FBitwiseXORComposite.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55db8fa9e7315abf05cf55fc73cabd0868a1994c/libjava%2Fgnu%2Fjava%2Fawt%2FBitwiseXORComposite.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FBitwiseXORComposite.java?ref=55db8fa9e7315abf05cf55fc73cabd0868a1994c", "patch": "@@ -0,0 +1,296 @@\n+/* BitwiseXORComposite.java -- Composite for emulating old-style XOR.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt;\n+\n+import java.awt.Color;\n+import java.awt.Composite;\n+import java.awt.CompositeContext;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.image.ColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.Raster;\n+import java.awt.image.WritableRaster;\n+\n+\n+/**\n+ * A composite for emulating traditional bitwise XOR of pixel values.\n+ * Please note that this composite does <i>not</i> implement the Porter-Duff\n+ * XOR operator, but an exclusive or of overlapping subpixel regions.\n+ *\n+ * <p><img src=\"doc-files/BitwiseXORComposite-1.png\" width=\"545\"\n+ * height=\"138\" alt=\"A screen shot of BitwiseXORComposite in action\"\n+ * />\n+ *\n+ * <p>The above screen shot shows the result of applying six different\n+ * BitwiseXORComposites. They were constructed with the colors colors\n+ * white, blue, black, orange, green, and brown, respectively. Each\n+ * composite was used to paint a fully white rectangle on top of the\n+ * blue bar in the background.\n+ * \n+ * <p>The purpose of this composite is to support the {@link\n+ * Graphics#setXORMode(Color)} method in composite-aware graphics\n+ * implementations. Applications typically would use\n+ * <code>setXORMode</code> for drawing &#x201c;highlights&#x201d; such\n+ * as text selections or cursors by inverting colors temporarily and\n+ * then inverting them back.\n+ *\n+ * <p>A concrete <code>Graphics</code> implementation may contain\n+ * the following code:\n+ *\n+ * <p><pre> public void setXORMode(Color xorColor)\n+ * {\n+ *   setComposite(new gnu.java.awt.BitwiseXORComposite(xorColor));\n+ * }\n+ *\n+ * public void setPaintMode()\n+ * {\n+ *   setComposite(java.awt.AlphaComposite.SrcOver);\n+ * }</pre>\n+ *\n+ * @author Graydon Hoare (graydon@redhat.com)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public class BitwiseXORComposite\n+  implements Composite\n+{\n+  /**\n+   * The color whose RGB value is xor-ed with the values of each\n+   * pixel.\n+   */\n+  protected Color xorColor;\n+\n+  \n+  /**\n+   * Constructs a new composite for xor-ing the pixel value.\n+   *\n+   * @param xorColor the color whose pixel value will be bitwise\n+   * xor-ed with the source and destination pixels.\n+   */\n+  public BitwiseXORComposite(Color xorColor)\n+  {\n+    this.xorColor = xorColor;\n+  }\n+\n+\n+  /**\n+   * Creates a context object for performing the compositing\n+   * operation. Several contexts may co-exist for one composite; each\n+   * context may simultaneously be called from concurrent threads.\n+   *\n+   * @param srcColorModel the color model of the source.\n+   * @param dstColorModel the color model of the destination.\n+   * @param hints hints for choosing between rendering alternatives.\n+   */\n+  public CompositeContext createContext(ColorModel srcColorModel,\n+                                        ColorModel dstColorModel,\n+                                        RenderingHints hints)\n+  {\n+    if (IntContext.isSupported(srcColorModel, dstColorModel, hints))\n+      return new IntContext(srcColorModel, xorColor);\n+\n+    return new GeneralContext(srcColorModel, dstColorModel, xorColor);\n+  }\n+\n+  \n+  /**\n+   * A fallback CompositeContext that performs bitwise XOR of pixel\n+   * values with the pixel value of the specified <code>xorColor</code>.\n+   *\n+   * <p>Applying this CompositeContext on a 1024x1024 BufferedImage of\n+   * <code>TYPE_INT_RGB</code> took 611 ms on a lightly loaded 2.4 GHz\n+   * Intel Pentium 4 CPU running Sun J2SE 1.4.1_01 on GNU/Linux\n+   * 2.4.20. The timing is the average of ten runs on the same\n+   * BufferedImage. Since the measurements were taken with {@link\n+   * System#currentTimeMillis()}, they are rather inaccurate.\n+   *\n+   * @author Graydon Hoare (graydon@redhat.com)\n+   */\n+  private static class GeneralContext\n+    implements CompositeContext\n+  {\n+    ColorModel srcColorModel;\n+    ColorModel dstColorModel;\n+    Color xorColor;\n+\n+    public GeneralContext(ColorModel srcColorModel,\n+                          ColorModel dstColorModel,\n+                          Color xorColor)\n+    {\n+      this.srcColorModel = srcColorModel;\n+      this.dstColorModel = dstColorModel;\n+      this.xorColor = xorColor;\n+    }\n+\n+\n+    public void compose(Raster src, Raster dstIn, WritableRaster dstOut)\n+    {\n+      Rectangle srcRect = src.getBounds();\n+      Rectangle dstInRect = dstIn.getBounds();\n+      Rectangle dstOutRect = dstOut.getBounds();\n+      \n+      int xp = xorColor.getRGB();\n+      int w = Math.min(Math.min(srcRect.width, dstOutRect.width),\n+                       dstInRect.width);\n+      int h = Math.min(Math.min(srcRect.height, dstOutRect.height),\n+                       dstInRect.height);\n+\n+      Object srcPix = null, dstPix = null, rpPix = null;\n+\n+      // Re-using the rpPix object saved 1-2% of execution time in\n+      // the 1024x1024 pixel benchmark.\n+\n+      for (int y = 0; y < h; y++)\n+      {\n+        for (int x = 0; x < w; x++)\n+        {\n+          srcPix = src.getDataElements(x + srcRect.x, y + srcRect.y, srcPix);\n+          dstPix = dstIn.getDataElements(x + dstInRect.x, y + dstInRect.y,\n+                                         dstPix);\n+          int sp = srcColorModel.getRGB(srcPix);\n+          int dp = dstColorModel.getRGB(dstPix);\n+          int rp = sp ^ xp ^ dp;\n+          dstOut.setDataElements(x + dstOutRect.x, y + dstOutRect.y, \n+                                 dstColorModel.getDataElements(rp, rpPix));\n+        }\n+      }\n+    }\n+\n+\n+    /**\n+     * Disposes any cached resources. The default implementation does\n+     * nothing because no resources are cached.\n+     */\n+    public void dispose()\n+    {\n+    }\n+  }\n+\n+\n+  /**\n+   * An optimized CompositeContext that performs bitwise XOR of\n+   * <code>int</code> pixel values with the pixel value of a specified\n+   * <code>xorColor</code>.  This CompositeContext working only for\n+   * rasters whose transfer format is {@link DataBuffer#TYPE_INT}.\n+   *\n+   * <p>Applying this CompositeContext on a 1024x1024 BufferedImage of\n+   * <code>TYPE_INT_RGB</code> took 69 ms on a lightly loaded 2.4 GHz\n+   * Intel Pentium 4 CPU running Sun J2SE 1.4.1_01 on GNU/Linux\n+   * 2.4.20. The timing is the average of ten runs on the same\n+   * BufferedImage. Since the measurements were taken with {@link\n+   * System#currentTimeMillis()}, they are rather inaccurate.\n+   *\n+   * @author Sascha Brawer (brawer@dandelis.ch)\n+   */\n+  private static class IntContext\n+    extends GeneralContext\n+  {\n+    public IntContext(ColorModel colorModel, Color xorColor)\n+    {\n+      super(colorModel, colorModel, xorColor);\n+    }\n+\n+\n+    public void compose(Raster src, Raster dstIn,\n+                        WritableRaster dstOut)\n+    {\n+      int aX, bX, dstX, aY, bY, dstY, width, height;\n+      int xorPixel, transferType;\n+      int[] srcLine, dstLine;\n+\n+      aX = src.getMinX();\n+      aY = src.getMinY();\n+      bX = dstIn.getMinX();\n+      bY = dstIn.getMinY();\n+      dstX = dstOut.getMinX();\n+      dstY = dstOut.getMinY();\n+      width = Math.min(Math.min(src.getWidth(), dstIn.getWidth()),\n+                       dstOut.getWidth());\n+      height = Math.min(Math.min(src.getHeight(), dstIn.getHeight()),\n+                        dstOut.getHeight());\n+      if ((width < 1) || (height < 1))\n+        return;\n+\n+      srcLine = new int[width];\n+      dstLine = new int[width];\n+      \n+      /* We need an int[] array with at least one element here;\n+       * srcLine is as good as any other.\n+       */\n+      srcColorModel.getDataElements(this.xorColor.getRGB(), srcLine);\n+      xorPixel = srcLine[0];\n+\n+      for (int y = 0; y < height; y++)\n+      {\n+        src.getDataElements(aX, y + aY, width, 1, srcLine);\n+        dstIn.getDataElements(bX, y + bY, width, 1, dstLine);\n+\n+        for (int x = 0; x < width; x++)\n+          dstLine[x] ^= srcLine[x] ^ xorPixel;\n+\n+        dstOut.setDataElements(dstX, y + dstY, width, 1, dstLine);\n+      }\n+    }\n+\n+    \n+    /**\n+     * Determines whether an instance of this CompositeContext would\n+     * be able to process the specified color models.\n+     */\n+    public static boolean isSupported(ColorModel srcColorModel,\n+                                      ColorModel dstColorModel,\n+                                      RenderingHints hints)\n+    {\n+      // FIXME: It would be good if someone could review these checks.\n+      // They probably need to be more restrictive.\n+\n+      int transferType;\n+\n+      transferType = srcColorModel.getTransferType();\n+      if (transferType != dstColorModel.getTransferType())\n+        return false;\n+\n+      if (transferType != DataBuffer.TYPE_INT)\n+        return false;\n+\n+      return true;\n+    }\n+  }\n+}"}, {"sha": "cb6ccba61b45c31f34051576e9711976b19e0912", "filename": "libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java", "status": "modified", "additions": 7, "deletions": 75, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55db8fa9e7315abf05cf55fc73cabd0868a1994c/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55db8fa9e7315abf05cf55fc73cabd0868a1994c/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java?ref=55db8fa9e7315abf05cf55fc73cabd0868a1994c", "patch": "@@ -66,7 +66,9 @@ public class GdkGraphics2D extends Graphics2D\n       {\n         System.loadLibrary(\"gtkpeer\");\n       }\n-    initStaticState ();\n+\n+    if (GtkToolkit.useGraphics2D ())\n+      initStaticState ();\n   }\n   native static void initStaticState ();\n   private final int native_state = GtkGenericPeer.getUniqueInteger();  \n@@ -125,7 +127,7 @@ public Graphics create (int x, int y, int width, int height)\n       clip = new Rectangle (g.getClipBounds ());\n \n     if (g.transform == null)\n-      transform = AffineTransform.getTranslateInstance (0.5, 0.5);\n+      transform = new AffineTransform ();\n     else\n       transform = new AffineTransform (g.transform);\n \n@@ -150,7 +152,7 @@ public Graphics create (int x, int y, int width, int height)\n     setBackground (Color.black);\n     setPaint (getColor());\n     setFont (new Font(\"SansSerif\", Font.PLAIN, 12));\n-    setTransform (AffineTransform.getTranslateInstance (0.5, 0.5));\n+    setTransform (new AffineTransform ());\n     setStroke (new BasicStroke ());\n \n     stateStack = new Stack();\n@@ -165,7 +167,7 @@ public Graphics create (int x, int y, int width, int height)\n     setBackground (new Color (rgb[3], rgb[4], rgb[5]));\n     setPaint (getColor());\n     setFont (new Font(\"SansSerif\", Font.PLAIN, 12));\n-    setTransform (AffineTransform.getTranslateInstance (0.5, 0.5));\n+    setTransform (new AffineTransform ());\n     setStroke (new BasicStroke ());\n \n     stateStack = new Stack ();\n@@ -546,7 +548,7 @@ public void setPaintMode ()\n \n   public void setXORMode (Color c) \n   { \n-    setComposite (new BitwiseXorComposite (c)); \n+    setComposite (new gnu.java.awt.BitwiseXORComposite(c)); \n   }\n \n   public void setColor (Color c)\n@@ -978,76 +980,6 @@ public void run ()\n   }\n \n \n-  private class BitwiseXorComposite implements Composite\n-  {\n-    // this is a special class which does a bitwise XOR composite, for\n-    // backwards compatibility sake. it does *not* implement the\n-    // porter-duff XOR operator.  the porter-duff XOR is unrelated to\n-    // bitwise XOR; it just happens to have a similar name but it\n-    // represents a desire to composite the exclusive or of overlapping\n-    // subpixel regions. bitwise XOR is for drawing \"highlights\" such as\n-    // cursors (in a cheap oldskool bitblit fashion) by inverting colors\n-    // temporarily and then inverting them back.\n-\n-    Color xorColor;\n-    \n-    class BitwiseXorCompositeContext implements CompositeContext\n-    {\n-      ColorModel srcColorModel;\n-      ColorModel dstColorModel;\n-      \n-      public BitwiseXorCompositeContext (ColorModel s,\n-                                         ColorModel d)\n-      {\n-        srcColorModel = s;\n-        dstColorModel = d;\n-      }\n-\n-      public void dispose () \n-      {\n-      }\n-\n-      public void compose (Raster src,\n-                           Raster dstIn,\n-                           WritableRaster dstOut)\n-      {\n-        Rectangle srcRect = src.getBounds ();\n-        Rectangle dstInRect = dstIn.getBounds ();\n-        Rectangle dstOutRect = dstOut.getBounds ();\n-        \n-        int xp = xorColor.getRGB ();\n-        int x = 0, y = 0;\n-        int w = Math.min (Math.min (srcRect.width, dstOutRect.width), dstInRect.width);\n-        int h = Math.min (Math.min (srcRect.height, dstOutRect.height), dstInRect.height);\n-        Object srcPix = null, dstPix = null;\n-\n-        for (y = 0; y < h; y++)\n-          for (x = 0; x < w; x++)\n-            {\n-              srcPix = src.getDataElements (x + srcRect.x, y + srcRect.y, srcPix);\n-              dstPix = dstIn.getDataElements (x + dstInRect.x, y + dstInRect.y, dstPix);\n-              int sp = srcColorModel.getRGB (srcPix);\n-              int dp = dstColorModel.getRGB (dstPix);\n-              int rp = sp ^ xp ^ dp;\n-              dstOut.setDataElements (x + dstOutRect.x, y + dstOutRect.y, \n-                                      dstColorModel.getDataElements (rp, null));\n-            }\n-      }\n-    }\n-    \n-    public BitwiseXorComposite (Color c)\n-    {\n-      xorColor = c;\n-    }\n-    \n-    public CompositeContext createContext (ColorModel srcColorModel, \n-                                           ColorModel dstColorModel, \n-                                           RenderingHints hints) \n-    {\n-      return new BitwiseXorCompositeContext (srcColorModel, dstColorModel);\n-    }\n-  }  \n-\n \n   ///////////////////////////////////////////////\n   ////// Unimplemented Stubs and Overloads //////"}]}