{"sha": "bc8e8e97b4ff381c66c3346682ad19f81d613685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4ZThlOTdiNGZmMzgxYzY2YzMzNDY2ODJhZDE5ZjgxZDYxMzY4NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-10T05:22:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-10T05:22:33Z"}, "message": "alpha.md (movdi_er_maybe_g): New.\n\n        * config/alpha/alpha.md (movdi_er_maybe_g): New.\n        * config/alpha/alpha.c (alpha_expand_mov): Use it.\n\nFrom-SVN: r52113", "tree": {"sha": "1e0bd2b6c5fea1393d20d974e23331f0eb265779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e0bd2b6c5fea1393d20d974e23331f0eb265779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc8e8e97b4ff381c66c3346682ad19f81d613685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8e8e97b4ff381c66c3346682ad19f81d613685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8e8e97b4ff381c66c3346682ad19f81d613685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8e8e97b4ff381c66c3346682ad19f81d613685/comments", "author": null, "committer": null, "parents": [{"sha": "aec3e1894ee750f59a387d006a68377e26f45d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec3e1894ee750f59a387d006a68377e26f45d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec3e1894ee750f59a387d006a68377e26f45d16"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "e5047f286d6760f812a3809587533060c3eaca95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8e8e97b4ff381c66c3346682ad19f81d613685/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8e8e97b4ff381c66c3346682ad19f81d613685/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc8e8e97b4ff381c66c3346682ad19f81d613685", "patch": "@@ -1,3 +1,8 @@\n+2002-04-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (movdi_er_maybe_g): New.\n+\t* config/alpha/alpha.c (alpha_expand_mov): Use it.\n+\n 2002-04-10  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR optimization/6233"}, {"sha": "915d6e48996563fc89b25d23be4e0cdb8d21a3ec", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8e8e97b4ff381c66c3346682ad19f81d613685/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8e8e97b4ff381c66c3346682ad19f81d613685/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bc8e8e97b4ff381c66c3346682ad19f81d613685", "patch": "@@ -2537,7 +2537,26 @@ alpha_expand_mov (mode, operands)\n   /* Allow legitimize_address to perform some simplifications.  */\n   if (mode == Pmode && symbolic_operand (operands[1], mode))\n     {\n-      rtx tmp = alpha_legitimize_address (operands[1], operands[0], mode);\n+      rtx tmp;\n+\n+      /* With RTL inlining, at -O3, rtl is generated, stored, then actually\n+\t compiled at the end of compilation.  In the meantime, someone can\n+\t re-encode-section-info on some symbol changing it e.g. from global\n+\t to local-not-small.  If this happens, we'd have emitted a plain\n+\t load rather than a high+losum load and not recognize the insn.\n+\n+\t So if rtl inlining is in effect, we delay the global/not-global\n+\t decision until rest_of_compilation by wrapping it in an\n+\t UNSPEC_SYMBOL.  */\n+      if (TARGET_EXPLICIT_RELOCS && flag_inline_functions\n+\t  && rtx_equal_function_value_matters\n+\t  && global_symbolic_operand (operands[1], mode))\n+\t{\n+\t  emit_insn (gen_movdi_er_maybe_g (operands[0], operands[1]));\n+\t  return true;\n+\t}\n+\n+      tmp = alpha_legitimize_address (operands[1], operands[0], mode);\n       if (tmp)\n \t{\n \t  operands[1] = tmp;"}, {"sha": "785a61df01efca0806862f31a154c69b1679a3fa", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8e8e97b4ff381c66c3346682ad19f81d613685/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8e8e97b4ff381c66c3346682ad19f81d613685/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=bc8e8e97b4ff381c66c3346682ad19f81d613685", "patch": "@@ -39,6 +39,7 @@\n    (UNSPEC_LITERAL\t11)\n    (UNSPEC_LITUSE\t12)\n    (UNSPEC_SIBCALL\t13)\n+   (UNSPEC_SYMBOL\t14)\n   ])\n \n ;; UNSPEC_VOLATILE:\n@@ -5547,6 +5548,41 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t    (const_int 0)] UNSPEC_LITERAL))]\n   \"operands[2] = pic_offset_table_rtx;\")\n \n+;; With RTL inlining, at -O3, rtl is generated, stored, then actually\n+;; compiled at the end of compilation.  In the meantime, someone can\n+;; re-encode-section-info on some symbol changing it e.g. from global\n+;; to local-not-small.  If this happens, we'd have emitted a plain\n+;; load rather than a high+losum load and not recognize the insn.\n+;;\n+;; So if rtl inlining is in effect, we delay the global/not-global\n+;; decision until rest_of_compilation by wrapping it in an UNSPEC_SYMBOL.\n+\n+(define_insn_and_split \"movdi_er_maybe_g\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n+\t\t   UNSPEC_SYMBOL))]\n+  \"TARGET_EXPLICIT_RELOCS && flag_inline_functions\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  if (local_symbolic_operand (operands[1], Pmode)\n+      && !small_symbolic_operand (operands[1], Pmode))\n+    {\n+      rtx subtarget = no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode);\n+      rtx tmp;\n+\n+      tmp = gen_rtx_HIGH (Pmode, operands[1]);\n+      if (reload_completed)\n+\ttmp = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmp);\n+      emit_insn (gen_rtx_SET (VOIDmode, subtarget, tmp));\n+\n+      tmp = gen_rtx_LO_SUM (Pmode, subtarget, operands[1]);\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0], tmp));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"*movdi_er_nofix\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,r,m,*f,*f,Q\")\n \t(match_operand:DI 1 \"input_operand\" \"rJ,K,L,T,s,m,rJ,*fJ,Q,*f\"))]"}]}