{"sha": "974e336bb1184fee5add4af7a3f88c9a963cfffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0ZTMzNmJiMTE4NGZlZTVhZGQ0YWY3YTNmODhjOWE5NjNjZmZmYg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-11-21T07:34:30Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-11-21T07:34:30Z"}, "message": "acinclude.m4: Uniform formatting.\n\n2002-11-21  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* acinclude.m4:  Uniform formatting.\n\t* configure.in:  x\n\t* configure.target:  x\n\t* aclocal.m4, configure:  Regenerate.\n\nFrom-SVN: r59328", "tree": {"sha": "180e96c8715c16501220a00ea2964ce955472146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180e96c8715c16501220a00ea2964ce955472146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974e336bb1184fee5add4af7a3f88c9a963cfffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974e336bb1184fee5add4af7a3f88c9a963cfffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974e336bb1184fee5add4af7a3f88c9a963cfffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974e336bb1184fee5add4af7a3f88c9a963cfffb/comments", "author": null, "committer": null, "parents": [{"sha": "a8a4259d5c6580606ac8267bfc400d8e32aa6a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a4259d5c6580606ac8267bfc400d8e32aa6a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a4259d5c6580606ac8267bfc400d8e32aa6a35"}], "stats": {"total": 2636, "additions": 1359, "deletions": 1277}, "files": [{"sha": "3b2370b6b77789ef6327e96191d58b282ae98a47", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=974e336bb1184fee5add4af7a3f88c9a963cfffb", "patch": "@@ -1,3 +1,10 @@\n+2002-11-21  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* acinclude.m4:  Uniform formatting.\n+\t* configure.in:  x\n+\t* configure.target:  x\n+\t* aclocal.m4, configure:  Regenerate.\n+\n 2002-11-21  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/bits/streambuf.tcc (basic_streambuf::sputbackc):  Prefix"}, {"sha": "567c59b16fb44c7328f1ad0aefe6ab7ac2645c11", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=974e336bb1184fee5add4af7a3f88c9a963cfffb", "patch": "@@ -921,9 +921,9 @@ dnl compilation, pick them up here.\n dnl \n dnl GLIBCPP_CHECK_TARGET\n AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n-    . [$]{glibcpp_basedir}/configure.target\n-    AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n-    AC_MSG_RESULT(OS config directory is $os_include_dir)\n+  . [$]{glibcpp_basedir}/configure.target\n+  AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n+  AC_MSG_RESULT(OS config directory is $os_include_dir)\n ])\n \n \n@@ -1120,14 +1120,14 @@ fi\n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n if test -n \"$enable_cxx_flags\"; then\n-    for f in $enable_cxx_flags; do\n-        case \"$f\" in\n-            -fhonor-std)  ;;\n-            -*)  ;;\n-            *)   # and we're trying to pass /what/ exactly?\n-                 AC_MSG_ERROR([compiler flags start with a -]) ;;\n-        esac\n-    done\n+  for f in $enable_cxx_flags; do\n+    case \"$f\" in\n+      -fhonor-std)  ;;\n+      -*)  ;;\n+      *)   # and we're trying to pass /what/ exactly?\n+           AC_MSG_ERROR([compiler flags start with a -]) ;;\n+    esac\n+  done\n fi\n EXTRA_CXX_FLAGS=\"$enable_cxx_flags\"\n AC_SUBST(EXTRA_CXX_FLAGS)"}, {"sha": "f4c1f562455ae09883f98fd2615120aadda8741b", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=974e336bb1184fee5add4af7a3f88c9a963cfffb", "patch": "@@ -933,9 +933,9 @@ dnl compilation, pick them up here.\n dnl \n dnl GLIBCPP_CHECK_TARGET\n AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n-    . [$]{glibcpp_basedir}/configure.target\n-    AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n-    AC_MSG_RESULT(OS config directory is $os_include_dir)\n+  . [$]{glibcpp_basedir}/configure.target\n+  AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n+  AC_MSG_RESULT(OS config directory is $os_include_dir)\n ])\n \n \n@@ -1132,14 +1132,14 @@ fi\n dnl Run through flags (either default or command-line) and set anything\n dnl extra (e.g., #defines) that must accompany particular g++ options.\n if test -n \"$enable_cxx_flags\"; then\n-    for f in $enable_cxx_flags; do\n-        case \"$f\" in\n-            -fhonor-std)  ;;\n-            -*)  ;;\n-            *)   # and we're trying to pass /what/ exactly?\n-                 AC_MSG_ERROR([compiler flags start with a -]) ;;\n-        esac\n-    done\n+  for f in $enable_cxx_flags; do\n+    case \"$f\" in\n+      -fhonor-std)  ;;\n+      -*)  ;;\n+      *)   # and we're trying to pass /what/ exactly?\n+           AC_MSG_ERROR([compiler flags start with a -]) ;;\n+    esac\n+  done\n fi\n EXTRA_CXX_FLAGS=\"$enable_cxx_flags\"\n AC_SUBST(EXTRA_CXX_FLAGS)\n@@ -2262,6 +2262,33 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n+# isc-posix.m4 serial 2 (gettext-0.11.2)\n+dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n+dnl This file is free software, distributed under the terms of the GNU\n+dnl General Public License.  As a special exception to the GNU General\n+dnl Public License, this file may be distributed as part of a program\n+dnl that contains a configuration script generated by Autoconf, under\n+dnl the same distribution terms as the rest of that program.\n+\n+# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n+\n+# This test replaces the one in autoconf.\n+# Currently this macro should have the same name as the autoconf macro\n+# because gettext's gettext.m4 (distributed in the automake package)\n+# still uses it.  Otherwise, the use in gettext.m4 makes autoheader\n+# give these diagnostics:\n+#   configure.in:556: AC_TRY_COMPILE was called before AC_ISC_POSIX\n+#   configure.in:556: AC_TRY_RUN was called before AC_ISC_POSIX\n+\n+undefine([AC_ISC_POSIX])\n+\n+AC_DEFUN([AC_ISC_POSIX],\n+  [\n+    dnl This test replaces the obsolescent AC_ISC_POSIX kludge.\n+    AC_CHECK_LIB(cposix, strerror, [LIBS=\"$LIBS -lcposix\"])\n+  ]\n+)\n+\n # Add --enable-maintainer-mode option to configure.\n # From Jim Meyering\n "}, {"sha": "8e16af9b471ab928bbeb7340877bf78c93fdb3a8", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1288, "deletions": 1253, "changes": 2541, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=974e336bb1184fee5add4af7a3f88c9a963cfffb"}, {"sha": "c3ff82b8f16bd270a314708ccecb6c113eb0f6b0", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=974e336bb1184fee5add4af7a3f88c9a963cfffb", "patch": "@@ -70,6 +70,19 @@ GLIBCPP_ENABLE_CONCEPT_CHECKS\n # Check for headers necessary for libsupc++ using dyn-string.c/cxa_demangle.c\n AC_CHECK_HEADERS(string.h stdlib.h)\n \n+# No surprises, no surprises...\n+if test $ATOMICITYH = cpu/generic ; then\n+  AC_MSG_WARN([No native atomic operations are provided yet for this platform.])\n+  if test $target_thread_file = single; then\n+    AC_MSG_WARN([They cannot be faked when thread support is disabled.])\n+    AC_MSG_WARN([Thread-safety of certain classes is not guaranteed.])\n+  else\n+    AC_MSG_WARN([They will be faked using a mutex.])\n+    AC_MSG_WARN([Performance of certain classes will degrade as a result.])\n+  fi\n+fi\n+\n+\n if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \n   # We are being configured with some form of cross compiler.\n@@ -417,7 +430,7 @@ GLIBCPP_ENABLE_SYMVERS([yes])\n \n # Propagate the target-specific source directories through the build chain.\n # (Nothing currently uses cpu_include_dir directly; only ATOMICITYH \n-# uses it, and they only get used here.)\n+# uses it, and it only gets used in this file.)\n OS_INC_SRCDIR=config/${os_include_dir}\n ATOMICITY_INC_SRCDIR=config/${ATOMICITYH}\n AC_SUBST(OS_INC_SRCDIR)"}, {"sha": "a186659daf323c636ef3b28a5f5409e23d72baf8", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e336bb1184fee5add4af7a3f88c9a963cfffb/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=974e336bb1184fee5add4af7a3f88c9a963cfffb", "patch": "@@ -18,7 +18,7 @@\n #\n #   cpu_include_dir        CPU-specific directory, defaults to cpu/generic\n #                              if cpu/target_cpu doesn't exist.  This is\n-#                              used to set the next two:\n+#                              used to set ATOMICITYH.\n #\n #   os_include_dir         OS-specific directory, defaults to os/generic.\n #"}]}