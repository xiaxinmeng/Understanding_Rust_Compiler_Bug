{"sha": "ba45cfc48b59e577302d5d08f98a866344fbe850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0NWNmYzQ4YjU5ZTU3NzMwMmQ1ZDA4Zjk4YTg2NjM0NGZiZTg1MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-15T09:56:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-15T09:56:33Z"}, "message": "re PR debug/49382 (-O2 -g: DW_AT_location at the very first PC is already modified)\n\n\tPR debug/49382\n\t* dwarf2out.c (dw_loc_list_node): Add force field.\n\t(add_var_loc_to_decl): For PARM_DECL, attempt to keep\n\tthe incoming location in the list, even if it is modified\n\tbefore first real insn.\n\t(output_loc_list): Emit empty ranges with force flag set.\n\t(dw_loc_list): If first range of a PARM_DECL is empty,\n\tset force flag.\n\nFrom-SVN: r175076", "tree": {"sha": "8ef405eabe93d961cd8fbfbd078c16a00c8fe86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ef405eabe93d961cd8fbfbd078c16a00c8fe86b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba45cfc48b59e577302d5d08f98a866344fbe850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba45cfc48b59e577302d5d08f98a866344fbe850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba45cfc48b59e577302d5d08f98a866344fbe850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba45cfc48b59e577302d5d08f98a866344fbe850/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fc5966fe8f81fb8b89f4268d52f488e81c257aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc5966fe8f81fb8b89f4268d52f488e81c257aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc5966fe8f81fb8b89f4268d52f488e81c257aa"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "a4c589fa31092cf1f84e4ec335bb3e075a13f327", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba45cfc48b59e577302d5d08f98a866344fbe850/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba45cfc48b59e577302d5d08f98a866344fbe850/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba45cfc48b59e577302d5d08f98a866344fbe850", "patch": "@@ -1,3 +1,14 @@\n+2011-06-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/49382\n+\t* dwarf2out.c (dw_loc_list_node): Add force field.\n+\t(add_var_loc_to_decl): For PARM_DECL, attempt to keep\n+\tthe incoming location in the list, even if it is modified\n+\tbefore first real insn.\n+\t(output_loc_list): Emit empty ranges with force flag set.\n+\t(dw_loc_list): If first range of a PARM_DECL is empty,\n+\tset force flag.\n+\n 2011-06-15  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR target/49349"}, {"sha": "71ba002cb85370f74099a53943b98e3a1975f848", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba45cfc48b59e577302d5d08f98a866344fbe850/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba45cfc48b59e577302d5d08f98a866344fbe850/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ba45cfc48b59e577302d5d08f98a866344fbe850", "patch": "@@ -4467,6 +4467,9 @@ typedef struct GTY(()) dw_loc_list_struct {\n   /* True if this list has been replaced by dw_loc_next.  */\n   bool replaced;\n   bool emitted;\n+  /* True if the range should be emitted even if begin and end\n+     are the same.  */\n+  bool force;\n } dw_loc_list_node;\n \n static dw_loc_descr_ref int_loc_descriptor (HOST_WIDE_INT);\n@@ -8621,7 +8624,30 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n   else\n     temp = (var_loc_list *) *slot;\n \n-  if (temp->last)\n+  /* For PARM_DECLs try to keep around the original incoming value,\n+     even if that means we'll emit a zero-range .debug_loc entry.  */\n+  if (temp->last\n+      && temp->first == temp->last\n+      && TREE_CODE (decl) == PARM_DECL\n+      && GET_CODE (temp->first->loc) == NOTE\n+      && NOTE_VAR_LOCATION_DECL (temp->first->loc) == decl\n+      && DECL_INCOMING_RTL (decl)\n+      && NOTE_VAR_LOCATION_LOC (temp->first->loc)\n+      && GET_CODE (NOTE_VAR_LOCATION_LOC (temp->first->loc))\n+\t == GET_CODE (DECL_INCOMING_RTL (decl))\n+      && prev_real_insn (temp->first->loc) == NULL_RTX\n+      && (bitsize != -1\n+\t  || !rtx_equal_p (NOTE_VAR_LOCATION_LOC (temp->first->loc),\n+\t\t\t   NOTE_VAR_LOCATION_LOC (loc_note))\n+\t  || (NOTE_VAR_LOCATION_STATUS (temp->first->loc)\n+\t      != NOTE_VAR_LOCATION_STATUS (loc_note))))\n+    {\n+      loc = ggc_alloc_cleared_var_loc_node ();\n+      temp->first->next = loc;\n+      temp->last = loc;\n+      loc->loc = construct_piece_list (loc_note, bitpos, bitsize);\n+    }\n+  else if (temp->last)\n     {\n       struct var_loc_node *last = temp->last, *unused = NULL;\n       rtx *piece_loc = NULL, last_loc_note;\n@@ -8667,7 +8693,9 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n \t    }\n \t  else\n \t    {\n-\t      gcc_assert (temp->first == temp->last);\n+\t      gcc_assert (temp->first == temp->last\n+\t\t\t  || (temp->first->next == temp->last\n+\t\t\t      && TREE_CODE (decl) == PARM_DECL));\n \t      memset (temp->last, '\\0', sizeof (*temp->last));\n \t      temp->last->loc = construct_piece_list (loc_note, bitpos, bitsize);\n \t      return temp->last;\n@@ -11394,7 +11422,7 @@ output_loc_list (dw_loc_list_ref list_head)\n     {\n       unsigned long size;\n       /* Don't output an entry that starts and ends at the same address.  */\n-      if (strcmp (curr->begin, curr->end) == 0)\n+      if (strcmp (curr->begin, curr->end) == 0 && !curr->force)\n \tcontinue;\n       if (!have_multiple_function_sections)\n \t{\n@@ -16090,6 +16118,11 @@ dw_loc_list (var_loc_list *loc_list, tree decl, int want_address)\n \t      }\n \n \t    *listp = new_loc_list (descr, node->label, endname, secname);\n+\t    if (TREE_CODE (decl) == PARM_DECL\n+\t\t&& node == loc_list->first\n+\t\t&& GET_CODE (node->loc) == NOTE\n+\t\t&& strcmp (node->label, endname) == 0)\n+\t      (*listp)->force = true;\n \t    listp = &(*listp)->dw_loc_next;\n \n \t    if (range_across_switch)"}]}