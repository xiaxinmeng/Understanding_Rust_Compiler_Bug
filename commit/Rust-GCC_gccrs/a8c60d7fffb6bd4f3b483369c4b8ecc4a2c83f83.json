{"sha": "a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjNjBkN2ZmZmI2YmQ0ZjNiNDgzMzY5YzRiOGVjYzRhMmM4M2Y4Mw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2004-09-15T14:09:17Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-09-15T14:09:17Z"}, "message": "check.c (gfc_check_getcwd_sub): New function.\n\n2004-09-15  Steven G. Kargl  <kargls@comcast.net>\n\n\t* check.c (gfc_check_getcwd_sub): New function.\n\t* gfortran.h (GFC_ISYM_GETCWD): New symbol.\n\t* intrinsic.c (add_functions): Add function definition;\n\tUse symbol.\n\t* intrinsic.c (add_subroutines): Add subroutine definitions.\n\t* intrinsic.h: Add prototypes.\n\t* iresolve.c (gfc_resolve_getcwd, gfc_resolve_getcwd_sub):\n\tNew functions.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Use symbol.\nlibgfortran/\n\t* intrinsics/getcwd.c: New file.\n\t* Makefile.am: Add getcwd.c.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r87552", "tree": {"sha": "e0fa8b6b091f226f84ee9b1209119792fd8b000c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0fa8b6b091f226f84ee9b1209119792fd8b000c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/comments", "author": null, "committer": null, "parents": [{"sha": "4672f86ad056e95dbdc570901efd8270056560a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4672f86ad056e95dbdc570901efd8270056560a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4672f86ad056e95dbdc570901efd8270056560a9"}], "stats": {"total": 234, "additions": 227, "deletions": 7}, "files": [{"sha": "fc5390c667908d682fdf5967b41404fc234e9ce3", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -2093,3 +2093,20 @@ gfc_check_etime_sub (gfc_expr * values, gfc_expr * time)\n \n   return SUCCESS;\n }\n+\n+\n+try\n+gfc_check_getcwd_sub (gfc_expr * cwd, gfc_expr * status)\n+{\n+\n+  if (type_check (cwd, 0, BT_CHARACTER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (status, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (status, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}"}, {"sha": "8ec9215775538f207653f0b9f57e115401073ca5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -315,6 +315,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_EXPONENT,\n   GFC_ISYM_FLOOR,\n   GFC_ISYM_FRACTION,\n+  GFC_ISYM_GETCWD,\n   GFC_ISYM_GETGID,\n   GFC_ISYM_GETPID,\n   GFC_ISYM_GETUID,"}, {"sha": "c20f8b2f08c0b2c98a78987f7f3b3622eb1de171", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -1241,6 +1241,10 @@ add_functions (void)\n   make_generic (\"fraction\", GFC_ISYM_FRACTION);\n \n   /* Unix IDs (g77 compatibility)  */\n+  add_sym_1 (\"getcwd\", 0, 1, BT_INTEGER, di, NULL, NULL, gfc_resolve_getcwd,\n+\t     c, BT_CHARACTER, dc, 0);\n+  make_generic (\"getcwd\", GFC_ISYM_GETCWD);\n+\n   add_sym_0 (\"getgid\", 1, 0, BT_INTEGER, di, NULL, NULL, gfc_resolve_getgid);\n   make_generic (\"getgid\", GFC_ISYM_GETGID);\n \n@@ -1914,6 +1918,11 @@ add_subroutines (void)\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n \n+  add_sym_2s (\"getcwd\", 0, 1, BT_UNKNOWN, 0,\n+          gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n+\t      c, BT_CHARACTER, dc, 0,\n+\t      st, BT_INTEGER, di, 1);\n+\n   add_sym_2s (\"getenv\", 0, 1, BT_UNKNOWN, 0,\n \t      NULL, NULL, NULL,\n \t      name, BT_CHARACTER, dc, 0,\n@@ -1923,6 +1932,7 @@ add_subroutines (void)\n \t      NULL, NULL, gfc_resolve_getarg,\n \t      c, BT_INTEGER, di, 0, vl, BT_CHARACTER, dc, 0);\n \n+\n   /* F2003 commandline routines.  */\n \n   add_sym_3s (\"get_command\", 0, 1, BT_UNKNOWN, 0,"}, {"sha": "f1b11b042641219fe8da318b11a566d179d223fc", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -48,6 +48,7 @@ try gfc_check_dot_product (gfc_expr *, gfc_expr *);\n try gfc_check_eoshift (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_etime (gfc_expr *);\n try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n try gfc_check_g77_math1 (gfc_expr *);\n try gfc_check_huge (gfc_expr *);\n try gfc_check_i (gfc_expr *);\n@@ -256,6 +257,7 @@ void gfc_resolve_exponent (gfc_expr *, gfc_expr *);\n void gfc_resolve_floor (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_fraction (gfc_expr *, gfc_expr *);\n void gfc_resolve_g77_math1 (gfc_expr *, gfc_expr *);\n+void gfc_resolve_getcwd (gfc_expr *);\n void gfc_resolve_getgid (gfc_expr *);\n void gfc_resolve_getpid (gfc_expr *);\n void gfc_resolve_getuid (gfc_expr *);\n@@ -324,6 +326,7 @@ void gfc_resolve_cpu_time (gfc_code *);\n void gfc_resolve_system_clock(gfc_code *);\n void gfc_resolve_random_number (gfc_code *);\n void gfc_resolve_getarg (gfc_code *);\n+void gfc_resolve_getcwd_sub (gfc_code *);\n void gfc_resolve_get_command (gfc_code *);\n void gfc_resolve_get_command_argument (gfc_code *);\n void gfc_resolve_get_environment_variable (gfc_code *);"}, {"sha": "ed8bc569bcfa454b766fbce5733b09e26977cdea", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -571,6 +571,15 @@ gfc_resolve_g77_math1 (gfc_expr * f, gfc_expr * x)\n }\n \n \n+void\n+gfc_resolve_getcwd (gfc_expr * f)\n+{\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = 4;\n+  f->value.function.name = gfc_get_string (PREFIX(\"getcwd\"));\n+}\n+\n+\n void\n gfc_resolve_getgid (gfc_expr * f)\n {\n@@ -1499,6 +1508,23 @@ gfc_resolve_getarg (gfc_code * c)\n   c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n }\n \n+/* Resolve the getcwd intrinsic subroutine.  */\n+\n+void\n+gfc_resolve_getcwd_sub (gfc_code * c)\n+{\n+  const char *name;\n+  int kind;\n+\n+  if (c->ext.actual->next->expr != NULL)\n+    kind = c->ext.actual->next->expr->ts.kind;\n+  else\n+    kind = gfc_default_integer_kind;\n+\n+  name = gfc_get_string (PREFIX(\"getcwd_i%d_sub\"), kind);\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n+}\n+\n \n /* Resolve the get_command intrinsic subroutine.  */\n "}, {"sha": "a5ce489b847302dfd3ee942b2e63cb4216b2f53d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -2952,6 +2952,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_RAND:\n     case GFC_ISYM_ETIME:\n     case GFC_ISYM_SECOND:\n+    case GFC_ISYM_GETCWD:\n     case GFC_ISYM_GETGID:\n     case GFC_ISYM_GETPID:\n     case GFC_ISYM_GETUID:"}, {"sha": "2d16ac5d3502f1bc7f7b5a7ee2ab86affc829c77", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 85, "deletions": 5, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -1140,6 +1140,79 @@ gfc_trans_dt_end (gfc_code * code)\n   return gfc_finish_block (&block);\n }\n \n+static void\n+transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr);\n+\n+static tree\n+transfer_array_component (tree expr, gfc_component * cm)\n+{\n+  tree tmp;\n+  stmtblock_t body;\n+  stmtblock_t block;\n+  gfc_loopinfo loop;\n+  int n,i;\n+  gfc_ss *ss;\n+  gfc_se se;\n+  gfc_array_ref ar;\n+\n+  gfc_start_block (&block);\n+  gfc_init_se (&se, NULL);\n+\n+  ss = gfc_get_ss ();\n+  ss->type = GFC_SS_COMPONENT;\n+  ss->expr = NULL;\n+  ss->shape = gfc_get_shape (cm->as->rank);\n+  ss->next = gfc_ss_terminator;\n+  ss->data.info.dimen = cm->as->rank;\n+  ss->data.info.descriptor = expr;\n+  ss->data.info.data = gfc_conv_array_data (expr);\n+  ss->data.info.offset = gfc_conv_array_offset (expr);\n+  for (n = 0; n < cm->as->rank; n++)\n+    {\n+      ss->data.info.dim[n] = n;\n+      ss->data.info.start[n] = gfc_conv_array_lbound (expr, n);\n+      ss->data.info.stride[n] = gfc_index_one_node;\n+\n+      mpz_init (ss->shape[n]);\n+      mpz_sub (ss->shape[n], cm->as->upper[n]->value.integer,\n+               cm->as->lower[n]->value.integer);\n+      mpz_add_ui (ss->shape[n], ss->shape[n], 1);\n+    }\n+\n+  gfc_init_loopinfo (&loop);\n+  gfc_add_ss_to_loop (&loop, ss);\n+  gfc_conv_ss_startstride (&loop);\n+  gfc_conv_loop_setup (&loop);\n+  gfc_mark_ss_chain_used (ss, 1);\n+  gfc_start_scalarized_body (&loop, &body);\n+\n+  gfc_copy_loopinfo_to_se (&se, &loop);\n+  se.ss = ss;\n+  se.expr = expr;\n+\n+  ar.type = AR_FULL;\n+  ar.as = cm->as;\n+  ar.dimen = cm->as->rank;\n+  for (i = 0; i < cm->as->rank; i++)\n+    {\n+      ar.dimen_type[i] = DIMEN_RANGE;\n+      ar.start[i] = ar.end[i] = ar.stride[i] = NULL;\n+    }\n+  gfc_conv_array_ref (&se, &ar);\n+  tmp = gfc_build_addr_expr (NULL, se.expr);\n+  transfer_expr (&se, &cm->ts, tmp);\n+\n+  gfc_add_block_to_block (&body, &se.pre);\n+  gfc_add_block_to_block (&body, &se.post);\n+  gfc_trans_scalarizing_loops (&loop, &body);\n+  gfc_add_block_to_block (&loop.pre, &loop.post);\n+  tmp = gfc_finish_block (&loop.pre);\n+  gfc_cleanup_loop (&loop);\n+  for (n = 0; n < cm->as->rank; n++)\n+    mpz_clear (ss->shape[n]);\n+  gfc_free (ss->shape);\n+  return tmp;\n+}\n \n /* Generate the call for a scalar transfer node.  */\n \n@@ -1199,11 +1272,18 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n \t      se->string_length =\n \t\tTYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tmp)));\n \t    }\n-\t  if (c->dimension)\n-\t    gfc_todo_error (\"IO of arrays in derived types\");\n-\t  if (!c->pointer)\n-\t    tmp = gfc_build_addr_expr (NULL, tmp);\n-\t  transfer_expr (se, &c->ts, tmp);\n+\n+          if (c->dimension)\n+            {\n+              tmp = transfer_array_component (tmp, c);\n+              gfc_add_expr_to_block (&se->pre, tmp);\n+            }\n+          else\n+            {\n+              if (!c->pointer)\n+                tmp = gfc_build_addr_expr (NULL, tmp);\n+              transfer_expr (se, &c->ts, tmp);\n+            }\n \t}\n       return;\n "}, {"sha": "060166ade6a70953b7622e570c41e99b96a4bff9", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -49,6 +49,7 @@ intrinsics/erf.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/etime.c \\\n+intrinsics/getcwd.c \\\n intrinsics/getXid.c \\\n intrinsics/ishftc.c \\\n intrinsics/pack_generic.c \\"}, {"sha": "fb06ca5d4a5734774c3e07297cf99aa520cf6cba", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -120,8 +120,8 @@ am__objects_32 = backspace.lo close.lo endfile.lo format.lo inquire.lo \\\n \tunit.lo unix.lo write.lo\n am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n \tc99_functions.lo cpu_time.lo cshift0.lo date_and_time.lo \\\n-\tenv.lo erf.lo eoshift0.lo eoshift2.lo etime.lo getXid.lo \\\n-\tishftc.lo pack_generic.lo size.lo spread_generic.lo \\\n+\tenv.lo erf.lo eoshift0.lo eoshift2.lo etime.lo getcwd.lo \\\n+\tgetXid.lo ishftc.lo pack_generic.lo size.lo spread_generic.lo \\\n \tstring_intrinsics.lo rand.lo random.lo reshape_generic.lo \\\n \treshape_packed.lo selected_int_kind.lo selected_real_kind.lo \\\n \tsystem_clock.lo transpose_generic.lo unpack_generic.lo \\\n@@ -321,6 +321,7 @@ intrinsics/erf.c \\\n intrinsics/eoshift0.c \\\n intrinsics/eoshift2.c \\\n intrinsics/etime.c \\\n+intrinsics/getcwd.c \\\n intrinsics/getXid.c \\\n intrinsics/ishftc.c \\\n intrinsics/pack_generic.c \\\n@@ -2086,6 +2087,15 @@ etime.obj: intrinsics/etime.c\n etime.lo: intrinsics/etime.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o etime.lo `test -f 'intrinsics/etime.c' || echo '$(srcdir)/'`intrinsics/etime.c\n \n+getcwd.o: intrinsics/getcwd.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getcwd.o `test -f 'intrinsics/getcwd.c' || echo '$(srcdir)/'`intrinsics/getcwd.c\n+\n+getcwd.obj: intrinsics/getcwd.c\n+\t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getcwd.obj `if test -f 'intrinsics/getcwd.c'; then $(CYGPATH_W) 'intrinsics/getcwd.c'; else $(CYGPATH_W) '$(srcdir)/intrinsics/getcwd.c'; fi`\n+\n+getcwd.lo: intrinsics/getcwd.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getcwd.lo `test -f 'intrinsics/getcwd.c' || echo '$(srcdir)/'`intrinsics/getcwd.c\n+\n getXid.o: intrinsics/getXid.c\n \t$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getXid.o `test -f 'intrinsics/getXid.c' || echo '$(srcdir)/'`intrinsics/getXid.c\n "}, {"sha": "86afa6ca5c4adb49840cd3b5a422f4eb9f0a2b26", "filename": "libgfortran/intrinsics/getcwd.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/libgfortran%2Fintrinsics%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83/libgfortran%2Fintrinsics%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgetcwd.c?ref=a8c60d7fffb6bd4f3b483369c4b8ecc4a2c83f83", "patch": "@@ -0,0 +1,71 @@\n+/* Implementation of the GETCWD intrinsic.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargls@comcast.net>.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfor; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n+#include <errno.h>\n+\n+void\n+prefix(getcwd_i4_sub) (char * cwd, GFC_INTEGER_4 * status,\n+\t\t       gfc_charlen_type cwd_len)\n+{\n+  char str[cwd_len + 1], *s;\n+  GFC_INTEGER_4 stat;\n+\n+  memset(cwd, ' ', (size_t) cwd_len);\n+\n+  if (!getcwd (str, (size_t) cwd_len + 1))\n+    stat = errno;\n+  else\n+    {\n+      stat = 0;\n+      memcpy (cwd, str, strlen (str));\n+    }\n+  if (status != NULL) \n+    *status = stat;\n+}\n+\n+void\n+prefix(getcwd_i8_sub) (char * cwd, GFC_INTEGER_8 * status,\n+\t\t               gfc_charlen_type cwd_len)\n+{\n+  GFC_INTEGER_4 status4;\n+\n+  prefix (getcwd_i4_sub) (cwd, &status4, cwd_len);\n+  if (status)\n+    *status = status4;\n+}\n+\n+GFC_INTEGER_4\n+prefix(getcwd) (char * cwd, gfc_charlen_type cwd_len)\n+{\n+  GFC_INTEGER_4 status;\n+  prefix(getcwd_i4_sub) (cwd, &status, cwd_len);\n+  return status;\n+}"}]}