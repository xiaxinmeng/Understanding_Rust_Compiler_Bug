{"sha": "e399136a6ae3137747eecb5d433c63c1540d86d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5OTEzNmE2YWUzMTM3NzQ3ZWVjYjVkNDMzYzYzYzE1NDBkODZkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-09T17:53:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-09T17:53:53Z"}, "message": "Run most tests in both C++98 and C++11 modes.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_c++11): New.\n\t(check_effective_target_c++98): New.\n\t* lib/g++-dg.exp (g++-dg-runtest): New.\n\t* [various.exp]: Use g++-dg-runtest.\n\t* [various.C]: Fix for C++11 mode.\ngcc/cp/\n\t* Make-lang.in (check_g++_parallelize): Add dg-torture.exp.\n\t(check-c++0x): Obsolete.\n/\n\t* Makefile.def (language=c++): Remove check-c++0x.\n\t* Makefile.in (check-gcc-c++): Regenerate.\n\nFrom-SVN: r181222", "tree": {"sha": "ef66da2f881f42b9e287ef9512b9c7730f71d5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef66da2f881f42b9e287ef9512b9c7730f71d5b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e399136a6ae3137747eecb5d433c63c1540d86d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e399136a6ae3137747eecb5d433c63c1540d86d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e399136a6ae3137747eecb5d433c63c1540d86d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e399136a6ae3137747eecb5d433c63c1540d86d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "754ca64333dc22cb5225f9d0e6b618ddea8ff378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754ca64333dc22cb5225f9d0e6b618ddea8ff378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754ca64333dc22cb5225f9d0e6b618ddea8ff378"}], "stats": {"total": 297, "additions": 197, "deletions": 100}, "files": [{"sha": "bb781a889cf4860f01205d3553a0c0b1b816033e", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,3 +1,8 @@\n+2011-11-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* Makefile.def (language=c++): Remove check-c++0x.\n+\t* Makefile.in (check-gcc-c++): Regenerate.\n+\n 2011-11-08  Richard Henderson  <rth@redhat.com>\n \n \t* configure.ac: Test for libitm directory present first."}, {"sha": "b4236bac0866f9aa4ce824117d5bdcee7a08e12d", "filename": "Makefile.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -513,7 +513,7 @@ dependencies = { module=configure-target-newlib; on=all-ld; };\n dependencies = { module=configure-target-libgfortran; on=all-target-libquadmath; };\n \n languages = { language=c;\tgcc-check-target=check-gcc; };\n-languages = { language=c++;\tgcc-check-target=\"check-c++ check-c++0x\";\n+languages = { language=c++;\tgcc-check-target=check-c++;\n \t\t\t\tlib-check-target=check-target-libstdc++-v3;\n \t\t\t\tlib-check-target=check-target-libmudflap-c++; };\n languages = { language=fortran;\tgcc-check-target=check-fortran;"}, {"sha": "c377f5773321b7ef015b9a165744e9a34444702c", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -40661,7 +40661,7 @@ check-gcc-c++:\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(HOST_EXPORTS) \\\n-\t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++ check-c++0x);\n+\t(cd gcc && $(MAKE) $(GCC_FLAGS_TO_PASS) check-c++);\n check-c++: check-gcc-c++ check-target-libstdc++-v3 check-target-libmudflap-c++\n \n .PHONY: check-gcc-fortran check-fortran"}, {"sha": "cba11e1374c5948ad92a71c00febb5e2440ca373", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,5 +1,8 @@\n 2011-11-09  Jason Merrill  <jason@redhat.com>\n \n+\t* Make-lang.in (check_g++_parallelize): Add dg-torture.exp.\n+\t(check-c++0x): Obsolete.\n+\n \t* pt.c (invalid_nontype_parm_type_p): Avoid printing \"<type error>\".\n \n \t* pt.c (convert_nontype_argument): Only integral arguments"}, {"sha": "0ce01ac49e2736c7e1bf97fe2f95769332d1afd6", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -152,8 +152,7 @@ c++.srcman: doc/g++.1\n check-c++ : check-g++\n # Run the testsute in C++0x mode.\n check-c++0x:\n-\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --extra_opts,-std=gnu++0x\" \\\n-\t  TESTSUITEDIR=\"$(TESTSUITEDIR).c++0x\" check-g++\n+\t@echo Normal 'make check' now runs the testsuite in C++11 mode as well as C++98.\n # Run the testsuite with garbage collection at every opportunity.\n check-g++-strict-gc:\n \t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --extra_opts,--param,ggc-min-heapsize=0,--param,ggc-min-expand=0\" \\\n@@ -163,7 +162,7 @@ check-c++-subtargets : check-g++-subtargets\n lang_checks += check-g++\n lang_checks_parallelized += check-g++\n # For description see comment above check_gcc_parallelize in gcc/Makefile.in.\n-check_g++_parallelize = old-deja.exp dg.exp\n+check_g++_parallelize = old-deja.exp dg.exp dg-torture.exp\n \n #\f\n # Install hooks:"}, {"sha": "cff301e427dc8d442bca50ecea9ac9728b821734", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,53 @@\n-2011-11-09  Jason Merrill  <jason@redhat.com>\n+2011-11-08  Jason Merrill  <jason@redhat.com>\n+\n+\tRun most C++ tests in both C++98 and C++11 modes.\n+\t* lib/target-supports.exp (check_effective_target_c++11): New.\n+\t(check_effective_target_c++98): New.\n+\t* lib/g++-dg.exp (g++-dg-runtest): New.\n+\t* g++.dg/dg.exp: Use g++-dg-runtest.\n+\t* g++.dg/charset/charset.exp: Likewise.\n+\t* g++.dg/debug/dwarf2/dwarf2.exp: Likewise.\n+\t* g++.dg/dfp/dfp.exp: Likewise.\n+\t* g++.dg/gcov/gcov.exp: Likewise.\n+\t* g++.dg/gomp/gomp.exp: Likewise.\n+\t* g++.dg/graphite/graphite.exp: Likewise.\n+\t* g++.dg/tls/tls.exp: Likewise.\n+\t* g++.dg/tm/tm.exp: Likewise.\n+\t* g++.dg/vect/vect.exp: Likewise.\n+\t* g++.old-deja/old-deja.exp: Likewise.\n+\t* g++.dg/simulate-thread/simulate-thread.exp: Pass -std flags\n+\twith some of the torture options.\n+\t* g++.dg/abi/mangle4.C: Move to template/nontype25.C.\n+\t* g++.dg/template/sfinae6_neg.C: Add C++11 error.\n+\t* g++.dg/init/null1.C: Only run in C++98.\n+\t* g++.dg/warn/Wconversion-null-3.C: Likewise.\n+\t* g++.old-deja/g++.benjamin/p12475.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash64.C: Likewise.\n+\t* g++.old-deja/g++.other/anon9.C: Likewise.\n+\t* g++.old-deja/g++.other/linkage1.C: Likewise.\n+\t* g++.old-deja/g++.other/linkage2.C: Likewise.\n+\t* g++.old-deja/g++.pt/t29.C: Likewise.\n+\t* g++.old-deja/g++.pt/t30.C: Likewise.\n+\t* g++.dg/cpp0x/variadic60.C: Only error in C++98.\n+\t* g++.dg/ext/anon-struct4.C: Likewise.\n+\t* g++.dg/init/brace2.C: Likewise.\n+\t* g++.dg/init/brace6.C: Likewise.\n+\t* g++.dg/other/anon3.C: Likewise.\n+\t* g++.dg/template/arg2.C: Likewise.\n+\t* g++.old-deja/g++.brendan/cvt1.C: Likewise.\n+\t* g++.old-deja/g++.brendan/enum11.C: Likewise.\n+\t* g++.old-deja/g++.brendan/enum8.C: Likewise.\n+\t* g++.old-deja/g++.brendan/enum9.C: Likewise.\n+\t* g++.old-deja/g++.brendan/friend3.C: Likewise.\n+\t* g++.old-deja/g++.brendan/init2.C: Likewise.\n+\t* g++.old-deja/g++.brendan/init4.C: Likewise.\n+\t* g++.old-deja/g++.brendan/misc14.C: Likewise.\n+\t* g++.old-deja/g++.jason/cond.C: Likewise.\n+\t* g++.old-deja/g++.law/init1.C: Likewise.\n+\t* g++.old-deja/g++.law/operators32.C: Likewise.\n+\t* g++.old-deja/g++.pt/enum6.C: Likewise.\n+\t* g++.old-deja/g++.pt/explicit70.C: Likewise.\n+\t* g++.old-deja/g++.pt/ptrmem6.C: Likewise.\n \n \t* g++.dg/eh/new1.C: Adjust for C++11 mode.\n \t* g++.dg/init/new11.C: Likewise."}, {"sha": "fe35f6a44033b7a4b39562af80c7910444c14837", "filename": "gcc/testsuite/g++.dg/charset/charset.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fcharset.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fcharset.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcharset%2Fcharset.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -37,8 +37,8 @@ if ![info exists DEFAULT_CHARSETCFLAGS] then {\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,cc,S} ]] \\\n-        \"\" $DEFAULT_CHARSETCFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,cc,S} ]] \\\n+        $DEFAULT_CHARSETCFLAGS\n \n # All done.\n dg-finish"}, {"sha": "8e1681eecc010cb2dadb3cf6280ed950ef8f0e3a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic60.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic60.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1 +1 @@\n-template<typename... Args> class tuple; // { dg-error \"variadic templates\" }\n+template<typename... Args> class tuple; // { dg-error \"variadic templates\" \"\" { target c++98 } }"}, {"sha": "7b112ac6001ab9ac264b8feeefffde052fdf80a1", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/dwarf2.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fdwarf2.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -35,8 +35,8 @@ set comp_output [g++_target_compile \\\n if { ! [string match \"*: target system does not support the * debug format*\" \\\n     $comp_output] } {\n     remove-build-file \"trivial.S\"\n-    dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/dwarf2/*.c]] \\\n-\t    \"\" $DEFAULT_CFLAGS\n+    g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/dwarf2/*.c]] \\\n+\t    $DEFAULT_CFLAGS\n }\n \n # All done."}, {"sha": "4d235e5c084040a3bf6ea250d31010953f81c77c", "filename": "gcc/testsuite/g++.dg/dfp/dfp.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fdfp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fdfp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fdfp.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -49,11 +49,11 @@ set DEFAULT_CXXFLAGS \"\"\n dg-init\n \n # Main loop.  Run the tests that are specific to C++.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[C]] \\\n-        \"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[C]] \\\n+        $DEFAULT_CXXFLAGS\n # Run tests that are shared with C testing.\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/dfp/*.c]] \\\n-        \"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/dfp/*.c]] \\\n+        $DEFAULT_CXXFLAGS\n \n # All done.\n dg-finish"}, {"sha": "0730c76e820562ff39838cc6bb2d435dd9e00ed5", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -22,7 +22,7 @@ load_lib g++-dg.exp\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors -Wno-long-long\"\n }\n \n # Initialize `dg'.\n@@ -52,14 +52,14 @@ set tests [prune $tests $srcdir/$subdir/guality/*]\n set tests [prune $tests $srcdir/$subdir/simulate-thread/*]\n \n # Main loop.\n-dg-runtest $tests \"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest $tests $DEFAULT_CXXFLAGS\n \n # C/C++ common tests.\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/*.\\[cSi\\]]] \\\n-\t\"\" \"\"\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/*.\\[cSi\\]]] \\\n+\t\"\"\n \n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cpp/*.\\[cS\\]]] \\\n-\t\"\" \"\"\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/cpp/*.\\[cS\\]]] \\\n+\t\"\"\n \n \n # All done."}, {"sha": "5d0bf71ae636bba3ba37a58ba77d6e999de3b084", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,5 +1,5 @@\n // PR c++/14401\n \n struct { struct { int& i ; } bar ; } foo ; // { dg-error \"uninitialized\" \"uninit\" }\n-// { dg-warning \"anonymous\" \"anon\" { target *-*-* } 3 }\n+// { dg-warning \"anonymous\" \"anon\" { target c++98 } 3 }\n // { dg-message \"should be initialized\" \"ref-uninit\" { target *-*-* } 3 }"}, {"sha": "73703dcaf91e7693ba53377ebb124b92d4073c15", "filename": "gcc/testsuite/g++.dg/gcov/gcov.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -39,6 +39,6 @@ if { $files != \"\" } {\n }\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" \"\"\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\"\n \n dg-finish"}, {"sha": "445cea8998354c1b2de02fbe191dcd0ce42966c9", "filename": "gcc/testsuite/g++.dg/gomp/gomp.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fgomp.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -27,7 +27,7 @@ if ![check_effective_target_fopenmp] {\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/gomp/*.c]] \"\" \"-fopenmp\"\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/gomp/*.c]] \"-fopenmp\"\n \n # All done.\n dg-finish"}, {"sha": "7c96f58c70dfb1e444992193ad7b77dbf27a16be", "filename": "gcc/testsuite/g++.dg/graphite/graphite.exp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fgraphite.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -46,14 +46,14 @@ set block_files       [lsort [glob -nocomplain $srcdir/$subdir/block-*.C ] ]\n \n # Tests to be compiled.\n set dg-do-what-default compile\n-dg-runtest $scop_files        \"\" \"-O2 -fgraphite -fdump-tree-graphite-all\"\n-dg-runtest $id_files          \"\" \"-O2 -fgraphite-identity -ffast-math\"\n+g++-dg-runtest $scop_files        \"-O2 -fgraphite -fdump-tree-graphite-all\"\n+g++-dg-runtest $id_files          \"-O2 -fgraphite-identity -ffast-math\"\n \n # Tests to be run.\n set dg-do-what-default run\n-dg-runtest $run_id_files      \"\" \"-O2 -fgraphite-identity\"\n-dg-runtest $interchange_files \"\" \"-O2 -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math -fdump-tree-graphite-all\"\n-dg-runtest $block_files       \"\" \"-O2 -floop-block -fno-loop-strip-mine -fno-loop-interchange -ffast-math -fdump-tree-graphite-all\"\n+g++-dg-runtest $run_id_files      \"-O2 -fgraphite-identity\"\n+g++-dg-runtest $interchange_files \"-O2 -floop-interchange -fno-loop-block -fno-loop-strip-mine -ffast-math -fdump-tree-graphite-all\"\n+g++-dg-runtest $block_files       \"-O2 -floop-block -fno-loop-strip-mine -fno-loop-interchange -ffast-math -fdump-tree-graphite-all\"\n \n # The default action for the rest of the files is 'compile'.\n set dg-do-what-default compile\n@@ -62,7 +62,7 @@ foreach f $id_files          {lremove wait_to_run_files $f}\n foreach f $run_id_files      {lremove wait_to_run_files $f}\n foreach f $interchange_files {lremove wait_to_run_files $f}\n foreach f $block_files       {lremove wait_to_run_files $f}\n-dg-runtest $wait_to_run_files \"\" \"-ansi -pedantic-errors\"\n+g++-dg-runtest $wait_to_run_files \" -pedantic-errors\"\n \n # Clean up.\n set dg-do-what-default ${save-dg-do-what-default}"}, {"sha": "fec9c6ce4d7ae0e87c7870caa08d1a382f94b442", "filename": "gcc/testsuite/g++.dg/init/brace2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace2.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -5,4 +5,4 @@ const char * y = { \"hello\" };\n int a = 2;\n int b = { 2,3 }; // { dg-error \"requires one element in initializer\" }\n int c = { { 2 } } ; // { dg-error \"braces around scalar initializer\" }\n-int d = {}; // { dg-error \"initializer\" }\n+int d = {}; // { dg-error \"initializer\" \"\" { target c++98 } }"}, {"sha": "ca39b0180d029da41854364ee35a89e7f1acd0ee", "filename": "gcc/testsuite/g++.dg/init/brace6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbrace6.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -18,7 +18,7 @@ int main()\n {\n    int i = { 1 };\n    int j = { 1, 2 }; /* { dg-error \"requires one element\" } */\n-   A a = { 6 }; /* { dg-error \"initialize\" } */\n+   A a = { 6 }; /* { dg-error \"initialize\" \"\" { target c++98 } } */\n    B b = { 6 }; /* { dg-error \"\" } */\n    C c = { 6 }; /* { dg-error \"too many initializers\" } */\n    D d = { 6 };"}, {"sha": "a76ae2a25742089f427dfbcd3954c7fe363c23a9", "filename": "gcc/testsuite/g++.dg/init/null1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnull1.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,6 +1,7 @@\n // PR c++/16489\n+// { dg-do compile { target c++98 } }\n \n const int NULL = 0;\n int main() { \n-  double* p = NULL; \n+  double* p = NULL;\n }"}, {"sha": "707c2d58f9dc3cbfd8960cefbc70b5c67e531e00", "filename": "gcc/testsuite/g++.dg/other/anon3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -4,4 +4,4 @@\n \n // { dg-do compile }\n \n-enum { a = 3 } x; // { dg-warning \"anonymous type\" }\n+enum { a = 3 } x; // { dg-warning \"anonymous type\" \"\" { target c++98 } }"}, {"sha": "01e4aaf63cfa90bc5b23d29ef087b53b5b7ce0e5", "filename": "gcc/testsuite/g++.dg/simulate-thread/simulate-thread.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fsimulate-thread.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fsimulate-thread.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fsimulate-thread.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -26,8 +26,8 @@ torture-init\n set-torture-options [list \\\n \t{ -O0 -g } \\\n \t{ -O1 -g } \\\n-\t{ -O2 -g } \\\n-\t{ -O3 -g } \\\n+\t{ -O2 -g -std=c++98 } \\\n+\t{ -O3 -g -std=c++11 } \\\n \t{ -Os -g } ]\n \n if [gdb-exists] {"}, {"sha": "dabefc8778f26385c116d1cf6542ecde1484095e", "filename": "gcc/testsuite/g++.dg/template/arg2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -10,5 +10,5 @@ template <typename T> class X {};\n void fn ()\n {\n   class L {};\n-  X<L> f; // { dg-error \"uses local type|trying to instantiate|no type|invalid type\" \"\" }\n+  X<L> f; // { dg-error \"uses local type|trying to instantiate|no type|invalid type\" \"\" { target c++98 } }\n }"}, {"sha": "bcdcce5ea9bc7eaa2f988a15f2b83882e95596a6", "filename": "gcc/testsuite/g++.dg/template/nontype25.C", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,3 @@\n-// Test mangling of type casts\n // { dg-do compile }\n \n class A {};\n@@ -8,17 +7,16 @@ template<const A* a> class C {};\n template<const B* b> class D {};\n template<B* b> class E {};\n \n-template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {} // { dg-error \"\" }\n-template<const B* b> void g(D<b> &, E<const_cast<B*>(b)> &) {} // { dg-error \"\" }\n+template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {} // { dg-error \"\" \"\" { target c++98 } }\n+template<const B* b> void g(D<b> &, E<const_cast<B*>(b)> &) {} // { dg-error \"\" \"\" { target c++98 } }\n \n B b;\n \n int main()\n {\n   C<static_cast<const A*>(&b)> c; // { dg-error \"\" }\n   D<&b> d;\n-  E<const_cast<B*>(&b)> e; // { dg-error \"\" }\n-  f(d, c);\n+  E<const_cast<B*>(&b)> e; // { dg-error \"\" \"\" { target c++98 } }\n+  f(d, c);\t\t   // { dg-error \"\" \"\" { target c++11 } }\n   g(d, e);\n }\n-", "previous_filename": "gcc/testsuite/g++.dg/abi/mangle4.C"}, {"sha": "d4be5dd03f07f0c0f55c485414b27ab1ce910552", "filename": "gcc/testsuite/g++.dg/template/sfinae6_neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae6_neg.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -14,7 +14,7 @@ template<typename T> struct enable_if<false, T> { };\n template<typename F, typename T1, typename T2>\n   typename enable_if<sizeof(create_a<F>()(create_a<T1>(), create_a<T2>()), 1),\n \t\t     yes_type>::type\n-  check_is_callable2(type<F>, type<T1>, type<T2>);\n+  check_is_callable2(type<F>, type<T1>, type<T2>); // { dg-error \"within this context\" \"\" { target c++11 } }\n \n no_type check_is_callable2(...);\n "}, {"sha": "7745cd52da4c3632910b223a78d2fb1ea43648f6", "filename": "gcc/testsuite/g++.dg/tls/tls.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftls.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftls.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftls.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -22,14 +22,14 @@ load_lib g++-dg.exp\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors -Wno-long-long\"\n }\n \n # Initialize `dg'.\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] $DEFAULT_CXXFLAGS\n \n # All done.\n dg-finish"}, {"sha": "df40cdc1349c1ad984747315dabc35e30bf24ede", "filename": "gcc/testsuite/g++.dg/tm/tm.exp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Ftm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Ftm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Ftm.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -22,18 +22,18 @@ load_lib g++-dg.exp\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors -Wno-long-long\"\n }\n \n # Initialize `dg'.\n dg-init\n \n # Run the tests that are shared with C.\n-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/tm/*.c]] \\\n-\t\"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/c-c++-common/tm/*.c]] \\\n+\t$DEFAULT_CXXFLAGS\n # Run the C++ only tests.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n-\t\"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+\t$DEFAULT_CXXFLAGS\n \n # All done.\n dg-finish"}, {"sha": "7cb02d026fe5aaba8ed44272e82951927a6a8e3c", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -58,10 +58,10 @@ lappend VECT_SLP_CFLAGS \"-fdump-tree-slp-details\"\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.{c,cc,S} ]] \\\n-        \"\" $DEFAULT_VECTCFLAGS\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/slp-pr*.{c,cc,S} ]] \\\n-        \"\" $VECT_SLP_CFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/pr*.{c,cc,S} ]] \\\n+        $DEFAULT_VECTCFLAGS\n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/slp-pr*.{c,cc,S} ]] \\\n+        $VECT_SLP_CFLAGS\n \n #### Tests with special options\n global SAVED_DEFAULT_VECTCFLAGS\n@@ -70,8 +70,8 @@ set SAVED_DEFAULT_VECTCFLAGS $DEFAULT_VECTCFLAGS\n # --param max-aliased-vops=0\n set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n lappend DEFAULT_VECTCFLAGS \"--param max-aliased-vops=0\"\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/param-max-aliased*.\\[cS\\]]]  \\\n-        \"\" $DEFAULT_VECTCFLAGS \n+g++-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/param-max-aliased*.\\[cS\\]]]  \\\n+        $DEFAULT_VECTCFLAGS\n \n # Clean up.\n set dg-do-what-default ${save-dg-do-what-default} "}, {"sha": "644ae1c40da852409f34e767bf23dfa77962846b", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null-3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-3.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,5 @@\n // PR c++/48420\n+// { dg-do compile { target c++98 } }\n \n void foo(int* p);\n "}, {"sha": "d41c26b49847ea21d52532bdaac76e90e983422c", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/p12475.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp12475.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp12475.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Fp12475.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n // prms-id: 12475\n \n #include <limits.h>"}, {"sha": "5fd31a6a2e8034a9d8ed88e6f4771595760320c5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash64.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n // GROUPS passed old-abort\n typedef __SIZE_TYPE__ size_t;\n typedef void (*RF_Ptr)(void *);"}, {"sha": "544d59bf496c5957addb56d993518bb6dddb55f5", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/cvt1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcvt1.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -5,7 +5,7 @@\n class Thing\n {\n public:\n-      typedef enum { GOOD_THING, BAD_THING, } ThingType ; // { dg-error \"\" } comma\n+      typedef enum { GOOD_THING, BAD_THING, } ThingType ; // { dg-error \"\" \"comma\" { target c++98 } }\n \tThing (ThingType type) : thingType (type) { }\n \t~Thing () { }\n private:\n@@ -15,7 +15,7 @@ private:\n class Group\n {\n public:\n-      typedef enum { THIS_GROUP, THAT_GROUP, } GroupType ; // { dg-error \"\" } comma\n+      typedef enum { THIS_GROUP, THAT_GROUP, } GroupType ; // { dg-error \"\" \"comma\" { target c++98 } }\n \tGroup (GroupType type) : groupType (type), groupCount (0) { }\n \t~Group () { }\n \tvoid append (Thing* const &entry) { groupCount ++ ; }"}, {"sha": "9c105609ec368370deda73d94a95e5977f65af64", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum11.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -6,7 +6,7 @@ class X\n     {\n        oneMask = 0x0000FFFF,\n        twoMask  = 0x000F0000,\n-       thiMask = 0xFFF00000, // { dg-error \"comma at end\" }\n+       thiMask = 0xFFF00000, // { dg-error \"comma at end\" \"\" { target c++98 } }\n     };\n     unsigned int foo;\n "}, {"sha": "bbdda4bfe2beddc3faa18d44b10520823627c780", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum8.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -6,7 +6,7 @@ class foo1\n    enum foo1_enum\n    {\n       ENUM1,\n-      ENUM2, // { dg-error \"comma at end\" }\n+      ENUM2, // { dg-error \"comma at end\" \"\" { target c++98 } }\n    };\n };\n "}, {"sha": "d8a7d1bd47a8fb7fbd8bff19be73938f5f06386a", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/enum9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fenum9.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -2,7 +2,7 @@\n // GROUPS passed enums\n enum fig {\n     figgy,\n-    pudding,  // { dg-error \"comma at end\" }\n+    pudding,  // { dg-error \"comma at end\" \"\" { target c++98 } }\n };\n \n class X {"}, {"sha": "209ea8c0e06d4bc1af8fac21c30f32277d8de76e", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/friend3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ffriend3.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -5,7 +5,7 @@ class B {\n    friend class A;\n \n    enum {\n-      bEnum = 1, // { dg-error \"comma at end\" }\n+      bEnum = 1, // { dg-error \"comma at end\" \"\" { target c++98 } }\n    };\n \n    int bArray[ bEnum ];"}, {"sha": "1b376dc780216ca4f27af20c3bcf9098f842a3cf", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit2.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -2,4 +2,4 @@\n // GROUPS passed initialization\n // this should give an error in require_required_type about not\n // being allowed to have an initializer list in an argument list.\n-int f(int a = {1});// { dg-error \"\" } .*\n+int f(int a = {1});// { dg-error \"\" \"\" { target c++98 } }"}, {"sha": "d3d1ffd2247d41654da3c04e9da7ea3f734ff712", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/init4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Finit4.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -2,4 +2,4 @@\n // GROUPS passed initialization\n struct CharList { int i; };\n \n-const CharList& terminals = { 1 }; // { dg-error \"initializer lists\" } c++0x\n+const CharList& terminals = { 1 }; // { dg-error \"initializer lists\" \"\" { target c++98 } }"}, {"sha": "d2e49095a3b64f3837e6c836ba14b48582bca4e7", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/misc14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fmisc14.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -4,7 +4,7 @@ class X {\n public:\n     enum e {\n \tNew // { dg-error \"conflicts with previous\" }\n-\t,   // { dg-error \"comma at end\" }\n+\t,   // { dg-error \"comma at end\" \"\" { target c++98 } }\n     };\n \n     static int New(int); // { dg-error \"declaration of\" }"}, {"sha": "b1e692e8a6946e4996d1238fe84dab8912e6c46f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/cond.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -52,7 +52,7 @@ int main()\n   // { dg-error \"is initialized like a variable\" \"var\" { target *-*-* } 51 }\n     ;\n   \n-  if (int a[2] = {1, 2})\t// { dg-error \"extended init\" } \n+  if (int a[2] = {1, 2})\t// { dg-error \"extended init\" \"\" { target c++98 } }\n     ;\n \n }"}, {"sha": "3cce388f292728dd8e11d2fdd99bd5bcada39dc1", "filename": "gcc/testsuite/g++.old-deja/g++.law/init1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit1.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -9,12 +9,12 @@ public:\n \n class bar {\n public:\n-  foo f[3] = { 1, 2, 3 };   // works: f[0] = 1, f[1] = 2, f[2] = 3 // { dg-error \"\" } ANSI C++ forbids initialization of member f;\n+  foo f[3] = { 1, 2, 3 };   // works: f[0] = 1, f[1] = 2, f[2] = 3 // { dg-error \"\" \"\" { target c++98 } } ANSI C++ forbids initialization of member f;\n };\n \n class bar2 {\n public:\n-      foo f[3] = { foo(1), foo(2), foo(3) }; // { dg-error \"\" } ANSI C++ forbids initialization of member f;\n+      foo f[3] = { foo(1), foo(2), foo(3) }; // { dg-error \"\" \"\" { target c++98 } } ANSI C++ forbids initialization of member f;\n   // does not compile -- error: field initializer is not constant\n };\n "}, {"sha": "9e1a35664f21482214884041f7cef9ea576373c8", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators32.C", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -7,7 +7,7 @@\n //\n \n template <class T>\n-void ffree(long rows, T** array) // { dg-message \"note\" }\n+void ffree(long rows, T** array)\n {\n for( long i = 0; i < rows; i++ )\n   delete [] array[i];                   // delete row\n@@ -21,7 +21,7 @@ return array = new T[size];\n }\n \n template <class T>\n-T** allocate2d(long d1, long d2, T**& array) // { dg-message \"note\" }\n+T** allocate2d(long d1, long d2, T**& array)\n {\n if( allocate1d(d1, array) != 0 )\n   {\n@@ -49,9 +49,7 @@ foo() {std::cout << \"foo created\" << std::endl; }\n };\n \n foo **f2;\n-allocate2d(d1, d2, f2);// { dg-error \"\" }  type.*// ERROR -    trying to.*\n-// { dg-message \"candidate\" \"candidate note\" { target *-*-* } 52 }\n-ffree(d1, f2);// { dg-error \"\" }  type.*// ERROR -    trying to.*\n-// { dg-message \"candidate\" \"candidate note\" { target *-*-* } 54 }\n+allocate2d(d1, d2, f2);// { dg-error \"\" \"\" { target c++98 } }\n+ffree(d1, f2);// { dg-error \"\" \"\" { target c++98 } }\n \n }"}, {"sha": "d458b6b43093d0d6b35cc552b93e0a60bc5b2a87", "filename": "gcc/testsuite/g++.old-deja/g++.other/anon9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n // Test that we properly diagnose an attempt to use an anonymous class\n // in declaring an external function.\n "}, {"sha": "2fa2dec04b7416b72ba3e780a96d14e1496f9220", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n typedef struct {\n   int i;\n } *p;"}, {"sha": "974cd6396684f3743d219780ac97f4fab8c04cb1", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n // From: Klaus-Georg Adams <Klaus-Georg.Adams@chemie.uni-karlsruhe.de>    \n extern \"C\" \n {"}, {"sha": "48bdbb0ca5205a4552dbf36c013dd61e940dee67", "filename": "gcc/testsuite/g++.old-deja/g++.pt/enum6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -8,7 +8,7 @@ void fn(T)\n {\n   enum tern { H, L, X, U };\n \n-  vector<tern> ternvec; // { dg-error \"\" } composed from a local type\n+  vector<tern> ternvec; // { dg-error \"\" \"\" { target c++98 } } composed from a local type\n }\n \n template void fn(int);"}, {"sha": "1f53a757cb87ab4fc2a58f39c27e31036f48b660", "filename": "gcc/testsuite/g++.old-deja/g++.pt/explicit70.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fexplicit70.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -18,7 +18,7 @@ template int S<int>::t; // { dg-error \"duplicate explicit instantiation\" }\n template class S<double>;\n template class S<double>; // { dg-error \"duplicate explicit instantiation\" } \n \n-extern template void f(double); // { dg-error \"extern\" } extern not allowed\n+extern template void f(double); // { dg-error \"extern\" \"\" { target c++98 } }\n inline template class S<float>; // { dg-error \"inline\" } inline not allowed\n \n template <class T>"}, {"sha": "19f1591cf623c50b1edb72a8a38892097f25bc58", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ptrmem6.C", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem6.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -13,30 +13,22 @@ public:\n };\n \n template <void (A::*)() >\n-void g() {}\t\t\t// { dg-message \"void g\" }\n+void g() {}\n template <int A::*>\n-void h() {}\t\t\t// { dg-message \"void h\" }\n+void h() {}\n \n \n int main() {\n   g<&A::f>();\n   h<&A::i>();\n   g<&B::f>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 24 }\n   h<&B::j>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 26 }\n-  g<(void (A::*)()) &A::f>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 28 }\n-  h<(int A::*) &A::i>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 30 }\n+  g<(void (A::*)()) &A::f>(); // { dg-error \"\" \"\" { xfail c++11 } }\n+  h<(int A::*) &A::i>(); // { dg-error \"\" \"\" { xfail c++11 } }\n   g<(void (A::*)()) &B::f>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 32 }\n   h<(int A::*) &B::j>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 34 }\n-  g<(void (A::*)()) 0>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 36 }\n-  h<(int A::*) 0>(); // { dg-error \"\" } \n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 38 }\n+  g<(void (A::*)()) 0>(); // { dg-error \"\" \"\" { target c++98 } }\n+  h<(int A::*) 0>(); // { dg-error \"\" \"\" { target c++98 } }\n \n   return 0;\n }"}, {"sha": "f664f5402bae01b7cc0db2f1fba4d68b12a16e9a", "filename": "gcc/testsuite/g++.old-deja/g++.pt/t29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft29.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n \n template <class X, int n> X f (auto X (*x)[n]) { return (*x)[n/2]; }\n extern int i[30];"}, {"sha": "b0c4f2fbde45fb11c473c8cdc533addd8f3bebc0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/t30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ft30.C?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-do assemble { target c++98 } }\n \n template <class X, int n> X f (auto X (*x)[n]) { return (*x)[n/2]; }\n extern int i[30], i2[33];"}, {"sha": "c941f40f73aad42113305ab7e0ecdbb6a571963f", "filename": "gcc/testsuite/g++.old-deja/old-deja.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fold-deja.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -21,7 +21,7 @@ load_lib g++-dg.exp\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors -Wno-long-long\"\n }\n \n # Initialize `dg'.\n@@ -32,7 +32,7 @@ dg-init\n set tests [lsort [find $srcdir/$subdir *.C]]\n \n # Main loop.\n-dg-runtest $tests \"\" $DEFAULT_CXXFLAGS\n+g++-dg-runtest $tests $DEFAULT_CXXFLAGS\n \n # All done.\n dg-finish"}, {"sha": "e6ef74b5ef4109338aa6532a5575a51dc86c72c7", "filename": "gcc/testsuite/lib/g++-dg.exp", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -26,3 +26,36 @@ proc g++-dg-test { prog do_what extra_tool_flags } {\n proc g++-dg-prune { system text } {\n     return [gcc-dg-prune $system $text]\n }\n+\n+# Modified dg-runtest that runs tests in both C++98 and C++11 modes\n+# unless they specifically specify one or the other.\n+proc g++-dg-runtest { testcases default-extra-flags } {\n+    global runtests\n+\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+\t}\n+\n+\t# If the testcase specifies a standard, use that one.\n+\t# If not, run it under both standards, allowing GNU extensions\n+\t# if there's a dg-options line.\n+\tif ![search_for $test \"-std=*++\"] {\n+\t    if [search_for $test \"dg-options\"] {\n+\t\tset option_list { -std=gnu++98 -std=gnu++11 }\n+\t    } else {\n+\t\tset option_list { -std=c++98 -std=c++11 }\n+\t    }\n+\t} else {\n+\t    set option_list { \"\" }\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $option_list {\n+\t    verbose \"Testing $nshort, $flags\" 1\n+\t    dg-test $test $flags ${default-extra-flags}\n+\t}\n+    }\n+}"}, {"sha": "944a66853a21be77beff3b562d93f0f293238ad5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e399136a6ae3137747eecb5d433c63c1540d86d5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e399136a6ae3137747eecb5d433c63c1540d86d5", "patch": "@@ -4266,6 +4266,24 @@ proc check_effective_target_c++ { } {\n  return 0\n }\n \n+# Check which language standard is active by checking for the presence of\n+# one of the C++11 -std flags.  This assumes that the default for the\n+# compiler is C++98, and that there will never be multiple -std= arguments\n+# on the command line.\n+proc check_effective_target_c++11 { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return [check-flags { { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 } }]\n+}\n+\n+proc check_effective_target_c++98 { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return [check-flags { { } { } { } { -std=c++0x -std=gnu++0x -std=c++11 -std=gnu++11 } }]\n+}\n+\n # Return 1 if expensive testcases should be run.\n \n proc check_effective_target_run_expensive_tests { } {"}]}