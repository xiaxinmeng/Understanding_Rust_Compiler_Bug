{"sha": "9765e35715de2d3850b2883ab3c2116774df69be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2NWUzNTcxNWRlMmQzODUwYjI4ODNhYjNjMjExNjc3NGRmNjliZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "1999-12-14T23:05:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-12-14T23:05:11Z"}, "message": "dwarf2out.c (class_scope_p): New fn.\n\n        * dwarf2out.c (class_scope_p): New fn.\n        (gen_subprogram_die): Use it.\n        (gen_variable_die): Use it.  Tweak logic.\n        (gen_struct_or_union_type_die): Check context_die to determine\n        if we're function-local.\n        (dwarf2out_decl): Check DECL_BUILT_IN, not DECL_FUNCTION_CODE.\n\nFrom-SVN: r30931", "tree": {"sha": "4d16f0ac6775f0cc194bc5e9630ad658a196d349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d16f0ac6775f0cc194bc5e9630ad658a196d349"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9765e35715de2d3850b2883ab3c2116774df69be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9765e35715de2d3850b2883ab3c2116774df69be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9765e35715de2d3850b2883ab3c2116774df69be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9765e35715de2d3850b2883ab3c2116774df69be/comments", "author": null, "committer": null, "parents": [{"sha": "cf69bfbf38d5b9742d171ae250ed59c1f7399e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf69bfbf38d5b9742d171ae250ed59c1f7399e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf69bfbf38d5b9742d171ae250ed59c1f7399e16"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "711cafda02edf39117963fbc35da17de5dbb8308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9765e35715de2d3850b2883ab3c2116774df69be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9765e35715de2d3850b2883ab3c2116774df69be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9765e35715de2d3850b2883ab3c2116774df69be", "patch": "@@ -1,3 +1,12 @@\n+1999-12-14  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* dwarf2out.c (class_scope_p): New fn.\n+\t(gen_subprogram_die): Use it.\n+\t(gen_variable_die): Use it.  Tweak logic.\n+\t(gen_struct_or_union_type_die): Check context_die to determine\n+\tif we're function-local.\n+\t(dwarf2out_decl): Check DECL_BUILT_IN, not DECL_FUNCTION_CODE.\n+\n 1999-12-14  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* loop.c (check_dbra_loop): Can't reverse a biv that has"}, {"sha": "e38152b9cdf5b19c6a936f4c6ce1e91659c76cab", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9765e35715de2d3850b2883ab3c2116774df69be/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9765e35715de2d3850b2883ab3c2116774df69be/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9765e35715de2d3850b2883ab3c2116774df69be", "patch": "@@ -7677,6 +7677,17 @@ local_scope_p (context_die)\n   return 0;\n }\n \n+/* Returns nonzero iff CONTEXT_DIE is a class.  */\n+\n+static inline int\n+class_scope_p (context_die)\n+     dw_die_ref context_die;\n+{\n+  return (context_die\n+\t  && (context_die->die_tag == DW_TAG_structure_type\n+\t      || context_die->die_tag == DW_TAG_union_type));\n+}\n+\n /* Many forms of DIEs require a \"type description\" attribute.  This\n    routine locates the proper \"type descriptor\" die for the type given\n    by 'type', and adds an DW_AT_type attribute below the given die.  */\n@@ -8221,11 +8232,8 @@ gen_subprogram_die (decl, context_die)\n   register tree fn_arg_types;\n   register tree outer_scope;\n   register dw_die_ref old_die = lookup_decl_die (decl);\n-  register int declaration\n-    = (current_function_decl != decl\n-       || (context_die\n-\t   && (context_die->die_tag == DW_TAG_structure_type\n-\t       || context_die->die_tag == DW_TAG_union_type)));\n+  register int declaration = (current_function_decl != decl\n+\t\t\t      || class_scope_p (context_die));\n \n   /* Note that it is possible to have both DECL_ABSTRACT and `declaration'\n      be true, if we started to generate the abstract instance of an inline,\n@@ -8495,11 +8503,8 @@ gen_variable_die (decl, context_die)\n   register dw_die_ref var_die = new_die (DW_TAG_variable, context_die);\n \n   dw_die_ref old_die = lookup_decl_die (decl);\n-  int declaration\n-    = (DECL_EXTERNAL (decl)\n-       || current_function_decl != decl_function_context (decl)\n-       || context_die->die_tag == DW_TAG_structure_type\n-       || context_die->die_tag == DW_TAG_union_type);\n+  int declaration = (DECL_EXTERNAL (decl)\n+\t\t     || class_scope_p (context_die));\n \n   if (origin != NULL)\n     add_abstract_origin_attribute (var_die, origin);\n@@ -8551,12 +8556,11 @@ gen_variable_die (decl, context_die)\n   if (declaration)\n     add_AT_flag (var_die, DW_AT_declaration, 1);\n   \n-  if ((declaration && decl_class_context (decl)) || DECL_ABSTRACT (decl))\n+  if (class_scope_p (context_die) || DECL_ABSTRACT (decl))\n     equate_decl_number_to_die (decl, var_die);\n \n   if (! declaration && ! DECL_ABSTRACT (decl))\n     {\n-      equate_decl_number_to_die (decl, var_die);\n       add_location_or_const_value_attribute (var_die, decl);\n       add_pubname (decl, var_die);\n     }\n@@ -8970,8 +8974,8 @@ gen_struct_or_union_type_die (type, context_die)\n     {\n       add_AT_flag (type_die, DW_AT_declaration, 1);\n \n-      /* We can't do this for function-local types, and we don't need to.  */\n-      if (! decl_function_context (TYPE_STUB_DECL (type)))\n+      /* We don't need to do this for function-local types.  */\n+      if (context_die)\n \tadd_incomplete_type (type);\n     }\n }\n@@ -9576,7 +9580,7 @@ dwarf2out_decl (decl)\n       /* Ignore this FUNCTION_DECL if it refers to a builtin declaration of a \n          builtin function.  Explicit programmer-supplied declarations of\n          these same functions should NOT be ignored however.  */\n-      if (DECL_EXTERNAL (decl) && DECL_FUNCTION_CODE (decl))\n+      if (DECL_EXTERNAL (decl) && DECL_BUILT_IN (decl))\n \treturn;\n \n       /* What we would really like to do here is to filter out all mere"}]}