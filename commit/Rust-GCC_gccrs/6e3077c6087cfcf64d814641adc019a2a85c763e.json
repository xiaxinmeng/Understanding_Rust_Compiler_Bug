{"sha": "6e3077c6087cfcf64d814641adc019a2a85c763e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUzMDc3YzYwODdjZmNmNjRkODE0NjQxYWRjMDE5YTJhODVjNzYzZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-12-05T06:46:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-12-05T06:46:35Z"}, "message": "re PR middle-end/11151 (__builtin_return(__builtin_apply(...)) gives wrong result)\n\n\tPR middle-end/11151\n\t* function.h (struct function): New field 'x_naked_return_label'.\n\t* function.c (free_after_compilation): Set it to NULL.\n\t(expand_function_end): Emit 'naked_return_label' if it exists.\n\t* rtl.h (expand_naked_return): Declare.\n\t* stmt.c (expand_naked_return): New function to generate a\n\tjump to 'naked_return_label'.\n\t* builtins.c (expand_builtin_return): Call expand_naked_return\n\tinstead of expand_null_return.\n\t* config/sparc/sparc.md (untyped_return): Likewise.\n\nFrom-SVN: r74312", "tree": {"sha": "ad0e21ca2e7c1cb2a9d00489abf7bf7d0bc9fb0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0e21ca2e7c1cb2a9d00489abf7bf7d0bc9fb0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e3077c6087cfcf64d814641adc019a2a85c763e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3077c6087cfcf64d814641adc019a2a85c763e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3077c6087cfcf64d814641adc019a2a85c763e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3077c6087cfcf64d814641adc019a2a85c763e/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed31a8173b85434c124d5627ae9265f6ea0c6c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed31a8173b85434c124d5627ae9265f6ea0c6c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed31a8173b85434c124d5627ae9265f6ea0c6c6a"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "efe009217e60e6ebd9f98a1b227bbcb25d75d847", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -1,3 +1,16 @@\n+2003-12-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR middle-end/11151\n+\t* function.h (struct function): New field 'x_naked_return_label'.\n+\t* function.c (free_after_compilation): Set it to NULL.\n+\t(expand_function_end): Emit 'naked_return_label' if it exists.\n+\t* rtl.h (expand_naked_return): Declare.\n+\t* stmt.c (expand_naked_return): New function to generate a\n+\tjump to 'naked_return_label'.\n+\t* builtins.c (expand_builtin_return): Call expand_naked_return\n+\tinstead of expand_null_return.\n+\t* config/sparc/sparc.md (untyped_return): Likewise.\n+\n 2003-12-04  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR target/11322"}, {"sha": "ba6244636600728ea178f283cccfb0ed2bef84a4", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -1389,7 +1389,7 @@ expand_builtin_return (rtx result)\n \n   /* Return whatever values was restored by jumping directly to the end\n      of the function.  */\n-  expand_null_return ();\n+  expand_naked_return ();\n }\n \n /* Used by expand_builtin_classify_type and fold_builtin_classify_type.  */"}, {"sha": "147ea2558b3734eb41c91d6ce06f1f17e4223127", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -7686,7 +7686,7 @@\n   emit_insn (gen_rtx_USE (VOIDmode, valreg2));\n \n   /* Construct the return.  */\n-  expand_null_return ();\n+  expand_naked_return ();\n \n   DONE;\n })"}, {"sha": "2a8f30b2fb4737177f582934001651c0cd3cfad3", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -452,6 +452,7 @@ free_after_compilation (struct function *f)\n   f->x_nonlocal_goto_stack_level = NULL;\n   f->x_cleanup_label = NULL;\n   f->x_return_label = NULL;\n+  f->x_naked_return_label = NULL;\n   f->computed_goto_common_label = NULL;\n   f->computed_goto_common_reg = NULL;\n   f->x_save_expr_regs = NULL;\n@@ -7132,6 +7133,11 @@ expand_function_end (void)\n       cfun->x_clobber_return_insn = after;\n   }\n \n+  /* Output the label for the naked return from the function, if one is\n+     expected.  This is currently used only by __builtin_return.  */\n+  if (naked_return_label)\n+    emit_label (naked_return_label);\n+\n   /* ??? This should no longer be necessary since stupid is no longer with\n      us, but there are some parts of the compiler (eg reload_combine, and\n      sh mach_dep_reorg) that still try and compute their own lifetime info"}, {"sha": "89a1465ad0a8abaffa374a7d17f7ae55316b67fa", "filename": "gcc/function.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -270,6 +270,11 @@ struct function GTY(())\n      on machines which require execution of the epilogue on all returns.  */\n   rtx x_return_label;\n \n+  /* Label that will go on the end of function epilogue.\n+     Jumping to this label serves as a \"naked return\" instruction\n+     on machines which require execution of the epilogue on all returns.  */\n+  rtx x_naked_return_label;\n+\n   /* Label and register for unswitching computed gotos.  */\n   rtx computed_goto_common_label;\n   rtx computed_goto_common_reg;\n@@ -566,6 +571,7 @@ extern int trampolines_created;\n #define parm_reg_stack_loc (cfun->x_parm_reg_stack_loc)\n #define cleanup_label (cfun->x_cleanup_label)\n #define return_label (cfun->x_return_label)\n+#define naked_return_label (cfun->x_naked_return_label)\n #define save_expr_regs (cfun->x_save_expr_regs)\n #define stack_slot_list (cfun->x_stack_slot_list)\n #define parm_birth_insn (cfun->x_parm_birth_insn)"}, {"sha": "d6e9b9c81e14bfd6851f1c2d9142c68a914ca702", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -2133,6 +2133,7 @@ extern void purge_hard_subreg_sets (rtx);\n /* In stmt.c */\n extern void set_file_and_line_for_stmt (location_t);\n extern void expand_null_return (void);\n+extern void expand_naked_return (void);\n extern void emit_jump (rtx);\n extern int preserve_subexpressions_p (void);\n "}, {"sha": "324789da312c6515653fa68ba0dd2e9e655aa8ba", "filename": "gcc/stmt.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -2885,6 +2885,26 @@ expand_null_return (void)\n   expand_null_return_1 (last_insn);\n }\n \n+/* Generate RTL to return directly from the current function.\n+   (That is, we bypass any return value.)  */\n+\n+void\n+expand_naked_return (void)\n+{\n+  rtx last_insn, end_label;\n+\n+  last_insn = get_last_insn ();\n+  end_label = naked_return_label;\n+\n+  clear_pending_stack_adjust ();\n+  do_pending_stack_adjust ();\n+  clear_last_expr ();\n+\n+  if (end_label == 0)\n+    end_label = naked_return_label = gen_label_rtx ();\n+  expand_goto_internal (NULL_TREE, end_label, last_insn);\n+}\n+\n /* Try to guess whether the value of return means error code.  */\n static enum br_predictor\n return_prediction (rtx val)"}, {"sha": "49abc91de9b40d21b2574f0f977f47696f902e39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -1,3 +1,7 @@\n+2003-12-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/builtin-return-1.c: New test.\n+\n 2003-12-04  Stuart Menefy <stuart.menefy@st.com>\n \t    J\"orn Rennecke <joern.rennecke@superh.com>\n "}, {"sha": "d22891589dd34f649ff975a257900492fd8d1991", "filename": "gcc/testsuite/gcc.dg/builtin-return-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e3077c6087cfcf64d814641adc019a2a85c763e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-return-1.c?ref=6e3077c6087cfcf64d814641adc019a2a85c763e", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/11151 */\n+/* Originator: Andrew Church <gcczilla@achurch.org> */\n+/* { dg-do run } */\n+\n+/* This used to fail on SPARC because the (undefined) return\n+   value of 'bar' was overwriting that of 'foo'.  */\n+\n+extern void abort(void);\n+\n+int foo(int n)\n+{\n+  return n+1;\n+}\n+\n+int bar(int n)\n+{\n+  __builtin_return(__builtin_apply((void (*)(void))foo, __builtin_apply_args(), 64));\n+}\n+\n+int main(void)\n+{\n+  if (bar(1) != 2)\n+    abort();\n+\n+  return 0;\n+}"}]}