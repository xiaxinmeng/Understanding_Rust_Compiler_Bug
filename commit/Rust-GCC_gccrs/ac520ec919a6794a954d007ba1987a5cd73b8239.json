{"sha": "ac520ec919a6794a954d007ba1987a5cd73b8239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1MjBlYzkxOWE2Nzk0YTk1NGQwMDdiYTE5ODdhNWNkNzNiODIzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-16T16:58:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-16T16:58:42Z"}, "message": "c-common.c (builtin_define_float_constants): Emit __FOO_DENORM_MIN__.\n\ngcc/\n        * c-common.c (builtin_define_float_constants): Emit __FOO_DENORM_MIN__.\n\nlibstdc++/\n        * include/std/std_limits.h (__glibcpp_f32_denorm_min_bytes,\n        __glibcpp_f32_has_denorm, __glibcpp_f64_denorm_min_bytes,\n        __glibcpp_f64_has_denorm, __glibcpp_f80_denorm_min_bytes,\n        __glibcpp_f80_has_denorm, __glibcpp_f96_denorm_min_bytes,\n        __glibcpp_f96_has_denorm, __glibcpp_f128_denorm_min_bytes,\n        __glibcpp_f128_has_denorm, __glibcpp_float_denorm_min_bytes,\n        __glibcpp_float_has_denorm, __glibcpp_double_denorm_min_bytes,\n        __glibcpp_double_has_denorm, __glibcpp_long_double_denorm_min_bytes,\n        __glibcpp_long_double_has_denorm): Remove.\n        (__glibcpp_float_denorm_min, __glibcpp_double_denorm_min,\n        __glibcpp_long_double_denorm_min): Remove.\n        (std::numeric_limits<float>::has_denorm): Use __FLT_DENORM_MIN__.\n        (std::numeric_limits<float>::denorm_min): Likewise.\n        (std::numeric_limits<double>): Similarly.\n        (std::numeric_limits<long double>): Similarly.\n        * src/limits.cc (__glibcpp_float_denorm_min,\n        __glibcpp_double_denorm_min, __glibcpp_long_double_denorm_min): Remove.\n\nFrom-SVN: r57200", "tree": {"sha": "2ef5954b69cdeed2027a4e23fc91a6f7da31c80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ef5954b69cdeed2027a4e23fc91a6f7da31c80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac520ec919a6794a954d007ba1987a5cd73b8239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac520ec919a6794a954d007ba1987a5cd73b8239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac520ec919a6794a954d007ba1987a5cd73b8239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac520ec919a6794a954d007ba1987a5cd73b8239/comments", "author": null, "committer": null, "parents": [{"sha": "233dad07b2bd9a161e21bd16459f397aff90d7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233dad07b2bd9a161e21bd16459f397aff90d7b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233dad07b2bd9a161e21bd16459f397aff90d7b5"}], "stats": {"total": 140, "additions": 42, "deletions": 98}, "files": [{"sha": "c9c74bcae57d54c4c88abf67e3a80f6da104d33c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac520ec919a6794a954d007ba1987a5cd73b8239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac520ec919a6794a954d007ba1987a5cd73b8239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac520ec919a6794a954d007ba1987a5cd73b8239", "patch": "@@ -1,3 +1,7 @@\n+2002-09-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (builtin_define_float_constants): Emit __FOO_DENORM_MIN__.\n+\n 2002-09-16  Richard Henderson  <rth@redhat.com>\n \n \t* real.c, real.h: Rewrite from scratch."}, {"sha": "bdb8a5819d4009c3bc2e089034ac2c5b0638c734", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac520ec919a6794a954d007ba1987a5cd73b8239/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac520ec919a6794a954d007ba1987a5cd73b8239/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ac520ec919a6794a954d007ba1987a5cd73b8239", "patch": "@@ -5048,6 +5048,13 @@ builtin_define_float_constants (name_prefix, fp_suffix, type)\n   sprintf (name, \"__%s_EPSILON__\", name_prefix);\n   sprintf (buf, \"0x1p%d\", (1 - mant_dig) * log2_b);\n   builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix);\n+\n+  /* For C++ std::numeric_limits<T>::denorm_min.  The minimum denormalized\n+     positive floating-point number, b**(min_exp-p).  Winds up being zero\n+     for targets that don't support denormals.  */\n+  sprintf (name, \"__%s_DENORM_MIN__\", name_prefix);\n+  sprintf (buf, \"0x1p%d\", (min_exp - mant_dig) * log2_b);\n+  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix);\n }\n \n /* Hook that registers front end and target-specific built-ins.  */"}, {"sha": "113a0df6bd087df2802fd2f41fb6919d537a3bd8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac520ec919a6794a954d007ba1987a5cd73b8239/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac520ec919a6794a954d007ba1987a5cd73b8239/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ac520ec919a6794a954d007ba1987a5cd73b8239", "patch": "@@ -1,3 +1,23 @@\n+2002-09-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/std/std_limits.h (__glibcpp_f32_denorm_min_bytes,\n+\t__glibcpp_f32_has_denorm, __glibcpp_f64_denorm_min_bytes,\n+\t__glibcpp_f64_has_denorm, __glibcpp_f80_denorm_min_bytes,\n+\t__glibcpp_f80_has_denorm, __glibcpp_f96_denorm_min_bytes,\n+\t__glibcpp_f96_has_denorm, __glibcpp_f128_denorm_min_bytes,\n+\t__glibcpp_f128_has_denorm, __glibcpp_float_denorm_min_bytes,\n+\t__glibcpp_float_has_denorm, __glibcpp_double_denorm_min_bytes,\n+\t__glibcpp_double_has_denorm, __glibcpp_long_double_denorm_min_bytes,\n+\t__glibcpp_long_double_has_denorm): Remove.\n+\t(__glibcpp_float_denorm_min, __glibcpp_double_denorm_min,\n+\t__glibcpp_long_double_denorm_min): Remove.\n+\t(std::numeric_limits<float>::has_denorm): Use __FLT_DENORM_MIN__.\n+\t(std::numeric_limits<float>::denorm_min): Likewise.\n+\t(std::numeric_limits<double>): Similarly.\n+\t(std::numeric_limits<long double>): Similarly.\n+\t* src/limits.cc (__glibcpp_float_denorm_min,\n+\t__glibcpp_double_denorm_min, __glibcpp_long_double_denorm_min): Remove.\n+\n 2002-09-13  Andy Felt  <afelt@uwsp.edu>\n \n \t* docs/html/17_intro/howto.html:  Update link."}, {"sha": "34a3f7613879c9678b58eb6b93bf3942c33feb45", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 11, "deletions": 92, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac520ec919a6794a954d007ba1987a5cd73b8239/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac520ec919a6794a954d007ba1987a5cd73b8239/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=ac520ec919a6794a954d007ba1987a5cd73b8239", "patch": "@@ -156,8 +156,6 @@\n #  define __glibcpp_f32_has_QNaN true\n #  define __glibcpp_f32_SNaN_bytes { 0x7f800001 }\n #  define __glibcpp_f32_has_SNaN true\n-#  define __glibcpp_f32_denorm_min_bytes { 0x00000001 }\n-#  define __glibcpp_f32_has_denorm denorm_present\n #  define __glibcpp_f32_is_iec559  true\n #endif\n #ifndef __glibcpp_f32_QNaN_bytes\n@@ -168,10 +166,6 @@\n #  define __glibcpp_f32_SNaN_bytes { }\n #  define __glibcpp_f32_has_SNaN false\n #endif\n-#ifndef __glibcpp_f32_denorm_min_bytes\n-#  define __glibcpp_f32_denorm_min_bytes { }\n-#  define __glibcpp_f32_has_denorm denorm_indeterminate\n-#endif\n #ifndef __glibcpp_f32_is_iec559\n #  define __glibcpp_f32_is_iec559 false\n #endif \n@@ -180,15 +174,12 @@\n #  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f64_QNaN_bytes { 0x7ff80000, 0x0 }\n #    define __glibcpp_f64_SNaN_bytes { 0x7ff00000, 0x1 }\n-#    define __glibcpp_f64_denorm_min_bytes { 0x0, 0x1 }\n #  else\n #    define __glibcpp_f64_QNaN_bytes { 0x0, 0x7ff80000 }\n #    define __glibcpp_f64_SNaN_bytes { 0x1, 0x7ff00000 }\n-#    define __glibcpp_f64_denorm_min_bytes { 0x1, 0x0 }\n #  endif\n #  define __glibcpp_f64_has_QNaN true\n #  define __glibcpp_f64_has_SNaN true\n-#  define __glibcpp_f64_has_denorm denorm_present\n #  define __glibcpp_f64_is_iec559 true\n #endif\n #ifndef __glibcpp_f64_QNaN_bytes\n@@ -199,10 +190,6 @@\n #  define __glibcpp_f64_SNaN_bytes { }\n #  define __glibcpp_f64_has_SNaN false\n #endif\n-#ifndef __glibcpp_f64_denorm_min_bytes\n-#  define __glibcpp_f64_denorm_min_bytes { }\n-#  define __glibcpp_f64_has_denorm denorm_indeterminate\n-#endif\n #ifndef __glibcpp_f64_is_iec559\n #  define __glibcpp_f64_is_iec559 false\n #endif \n@@ -213,19 +200,14 @@\n        { 0x7f, 0xff, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n #    define __glibcpp_f80_SNaN_bytes       \\\n        { 0x7f, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }\n-#    define __glibcpp_f80_denorm_min_bytes \\\n-       { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }\n #  else\n #    define __glibcpp_f80_QNaN_bytes       \\\n        { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xff, 0x7f }\n #    define __glibcpp_f80_SNaN_bytes       \\\n        { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xff, 0x7f }\n-#    define __glibcpp_f80_denorm_min_bytes \\\n-       { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n #  endif\n #  define __glibcpp_f80_has_QNaN true\n #  define __glibcpp_f80_has_SNaN true\n-#  define __glibcpp_f80_has_denorm denorm_present\n #  define __glibcpp_f80_is_iec559 true\n #endif\n #ifndef __glibcpp_f80_QNaN_bytes\n@@ -236,10 +218,6 @@\n #  define __glibcpp_f80_SNaN_bytes { }\n #  define __glibcpp_f80_has_SNaN false\n #endif\n-#ifndef __glibcpp_f80_denorm_min_bytes\n-#  define __glibcpp_f80_denorm_min_bytes { }\n-#  define __glibcpp_f80_has_denorm denorm_indeterminate\n-#endif\n #ifndef __glibcpp_f80_is_iec559\n #  define __glibcpp_f80_is_iec559 false\n #endif \n@@ -248,15 +226,12 @@\n #  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f96_QNaN_bytes { 0x7ff80000, 0x0, 0x0 }\n #    define __glibcpp_f96_SNaN_bytes { 0x7ff00000, 0x0, 0x1 }\n-#    define __glibcpp_f96_denorm_min_bytes { 0x0, 0x0, 0x1 }\n #  else\n #    define __glibcpp_f96_QNaN_bytes { 0x0, 0x0, 0x7ff80000 }\n #    define __glibcpp_f96_SNaN_bytes { 0x1, 0x0, 0x7ff00000 }\n-#    define __glibcpp_f96_denorm_min_bytes { 0x1, 0x0, 0x0 }\n #  endif\n #  define __glibcpp_f96_has_QNaN true\n #  define __glibcpp_f96_has_SNaN true\n-#  define __glibcpp_f96_has_denorm denorm_present\n #  define __glibcpp_f96_is_iec559 true\n #endif\n #ifndef __glibcpp_f96_QNaN_bytes\n@@ -267,24 +242,17 @@\n #  define __glibcpp_f96_SNaN_bytes { }\n #  define __glibcpp_f96_has_SNaN false\n #endif\n-#ifndef __glibcpp_f96_denorm_min_bytes\n-#  define __glibcpp_f96_denorm_min_bytes { }\n-#  define __glibcpp_f96_has denorm_indeterminate\n-#endif\n #define __glibcpp_f128_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f128_QNaN_bytes { 0x7fff0800, 0x0, 0x0, 0x0 }\n #    define __glibcpp_f128_SNaN_bytes { 0x7fff0000, 0x0, 0x0, 0x1 }\n-#    define __glibcpp_f128_denorm_min_bytes { 0x0, 0x0, 0x0, 0x1 }\n #  else\n #    define __glibcpp_f128_QNaN_bytes { 0x0, 0x0, 0x0, 0x7fff0800 }\n #    define __glibcpp_f128_SNaN_bytes { 0x1, 0x0, 0x0, 0x7fff0000 }\n-#    define __glibcpp_f128_denorm_min_bytes { 0x1, 0x0, 0x0, 0x0 }\n #  endif\n #  define __glibcpp_f128_has_QNaN true\n #  define __glibcpp_f128_has_SNaN true\n-#  define __glibcpp_f128_has_denorm denorm_present\n #endif\n #ifndef __glibcpp_f128_QNaN_bytes\n #  define __glibcpp_f128_QNaN_bytes { }\n@@ -294,10 +262,6 @@\n #  define __glibcpp_f128_SNaN_bytes { }\n #  define __glibcpp_f128_has_SNaN false\n #endif\n-#ifndef __glibcpp_f128_denorm_min_bytes\n-#  define __glibcpp_f128_denorm_min_bytes { }\n-#  define __glibcpp_f128_has_denorm denorm_indeterminate\n-#endif\n #ifndef __glibcpp_f128_is_iec559\n #  define __glibcpp_f128_is_iec559 false\n #endif\n@@ -625,28 +589,22 @@\n #  define __glibcpp_float_round_error __glibcpp_f32_round_error\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f32_SNaN_bytes\n-#  define __glibcpp_float_denorm_min_bytes  __glibcpp_f32_denorm_min_bytes\n #  define __glibcpp_float_has_QNaN __glibcpp_f32_has_QNaN\n #  define __glibcpp_float_has_SNaN __glibcpp_f32_has_SNaN\n-#  define __glibcpp_float_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n #elif __FLOAT_BIT__ == 64\n #  define __glibcpp_float_round_error __glibcpp_f64_round_error\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f64_SNaN_bytes\n-#  define __glibcpp_float_denorm_min_bytes  __glibcpp_f64_denorm_min_bytes\n #  define __glibcpp_float_has_QNaN __glibcpp_f64_has_QNaN\n #  define __glibcpp_float_has_SNaN __glibcpp_f64_has_SNaN\n-#  define __glibcpp_float_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n #elif __FLOAT_BIT__ == 80\n #  define __glibcpp_float_round_error __glibcpp_f80_round_error\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f80_SNaN_bytes\n-#  define __glibcpp_float_denorm_min_bytes  __glibcpp_f80_denorm_min_bytes\n #  define __glibcpp_float_has_QNaN __glibcpp_f80_has_QNaN\n #  define __glibcpp_float_has_SNaN __glibcpp_f80_has_SNaN\n-#  define __glibcpp_float_has_denorm __glibcpp_f80_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f80_is_iec559\n #else\n // You must define these macros in the configuration file.\n@@ -664,11 +622,6 @@\n #  define __glibcpp_float_has_SNaN false\n #endif\n \n-#ifndef __glibcpp_float_denorm_min_bytes\n-#  define __glibcpp_float_denorm_min_bytes { }\n-#  define __glibcpp_float_has_denorm denorm_indeterminate\n-#endif\n-\n #ifndef __glibcpp_float_has_denorm_loss\n #  define __glibcpp_float_has_denorm_loss false\n #endif\n@@ -703,28 +656,22 @@\n #  define __glibcpp_double_round_error __glibcpp_f32_round_error\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n-#  define __glibcpp_double_denorm_min_bytes __glibcpp_f32_denorm_min_bytes\n #  define __glibcpp_double_has_QNaN __glibcpp_f32_has_QNaN\n #  define __glibcpp_double_has_SNaN __glibcpp_f32_has_SNaN\n-#  define __glibcpp_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __DOUBLE_BIT__ == 64\n #  define __glibcpp_double_round_error __glibcpp_f64_round_error\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n-#  define __glibcpp_double_denorm_min_bytes __glibcpp_f64_denorm_min_bytes\n #  define __glibcpp_double_has_QNaN __glibcpp_f64_has_QNaN\n #  define __glibcpp_double_has_SNaN __glibcpp_f64_has_SNaN\n-#  define __glibcpp_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __DOUBLE_BIT__ == 80\n #  define __glibcpp_double_round_error __glibcpp_f80_round_error\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n-#  define __glibcpp_double_denorm_min_bytes __glibcpp_f80_denorm_min_bytes\n #  define __glibcpp_double_has_QNaN __glibcpp_f80_has_QNaN\n #  define __glibcpp_double_has_SNaN __glibcpp_f80_has_SNaN\n-#  define __glibcpp_double_has_denorm __glibcpp_f80_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f80_is_iec559\n #else\n // You must define these macros in the configuration file.\n@@ -742,11 +689,6 @@\n #  define __glibcpp_double_has_SNaN false\n #endif\n \n-#ifndef __glibcpp_double_denorm_min_bytes\n-#  define __glibcpp_double_denorm_min_bytes { }\n-#  define __glibcpp_double_has_denorm denorm_indeterminate\n-#endif\n-\n #ifndef __glibcpp_double_has_denorm_loss\n #  define __glibcpp_double_has_denorm_loss false\n #endif\n@@ -781,46 +723,36 @@\n #  define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n-#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f32_denorm_min_bytes\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f32_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f32_has_SNaN\n-#  define __glibcpp_long_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 64\n #  define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n-#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f64_denorm_min_bytes\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f64_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f64_has_SNaN\n-#  define __glibcpp_long_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 80\n #  define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n-#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f80_denorm_min_bytes\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f80_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f80_has_SNaN\n-#  define __glibcpp_long_double_has_denorm __glibcpp_f80_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 96\n #  define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f96_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f96_SNaN_bytes\n-#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f96_denorm_min_bytes\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f96_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f96_has_SNaN\n-#  define __glibcpp_long_double_has_denorm __glibcpp_f96_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 128\n #  define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f128_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f128_SNaN_bytes\n-#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f128_denorm_min_bytes\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f128_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f128_has_SNaN\n-#  define __glibcpp_long_double_has_denorm __glibcpp_f128_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f128_is_iec559\n #else\n // You must define these macros in the configuration file.\n@@ -838,11 +770,6 @@\n #  define __glibcpp_long_double_has_SNaN false\n #endif\n \n-#ifndef __glibcpp_long_double_denorm_min_bytes\n-#  define __glibcpp_long_double_denorm_min_bytes { }\n-#  define __glibcpp_long_double_has_denorm denorm_indeterminate\n-#endif\n-\n #ifndef __glibcpp_long_double_has_denorm_loss\n #  define __glibcpp_long_double_has_denorm_loss false\n #endif\n@@ -918,15 +845,12 @@ namespace std\n \n   extern const __float_storage __glibcpp_float_QNaN;\n   extern const __float_storage __glibcpp_float_SNaN;\n-  extern const __float_storage __glibcpp_float_denorm_min;\n   \n   extern const __double_storage __glibcpp_double_QNaN;\n   extern const __double_storage __glibcpp_double_SNaN;\n-  extern const __double_storage __glibcpp_double_denorm_min;\n \n   extern const __long_double_storage __glibcpp_long_double_QNaN;\n   extern const __long_double_storage __glibcpp_long_double_SNaN;\n-  extern const __long_double_storage __glibcpp_long_double_denorm_min;\n   \n   enum float_round_style \n   {\n@@ -1758,7 +1682,8 @@ namespace std\n \t= __builtin_huge_valf () / 2 == __builtin_huge_valf ();\n       static const bool has_quiet_NaN = __glibcpp_float_has_QNaN;\n       static const bool has_signaling_NaN = __glibcpp_float_has_SNaN;\n-      static const float_denorm_style has_denorm = __glibcpp_float_has_denorm;\n+      static const float_denorm_style has_denorm\n+\t= __FLT_DENORM_MIN__ ? denorm_present : denorm_absent;\n       static const bool has_denorm_loss = __glibcpp_float_has_denorm_loss;\n \n       static float infinity() throw()\n@@ -1768,7 +1693,7 @@ namespace std\n       static float signaling_NaN() throw()\n       { return *reinterpret_cast<const float*>(__glibcpp_float_SNaN); }\n       static float denorm_min() throw()\n-      { return *reinterpret_cast<const float*>(__glibcpp_float_denorm_min); }\n+      { return __FLT_DENORM_MIN__; }\n \n       static const bool is_iec559 = __glibcpp_float_is_iec559;\n       static const bool is_bounded = __glibcpp_float_is_bounded;\n@@ -1782,7 +1707,6 @@ namespace std\n #undef __glibcpp_float_round_error\n #undef __glibcpp_float_has_QNaN\n #undef __glibcpp_float_has_SNaN\n-#undef __glibcpp_float_has_denorm\n #undef __glibcpp_float_has_denorm_loss\n #undef __glibcpp_float_is_iec559\n #undef __glibcpp_float_is_bounded\n@@ -1821,8 +1745,8 @@ namespace std\n \t= __builtin_huge_val () / 2 == __builtin_huge_val ();\n       static const bool has_quiet_NaN = __glibcpp_double_has_QNaN;\n       static const bool has_signaling_NaN = __glibcpp_double_has_SNaN;\n-      static const float_denorm_style has_denorm =\n-              __glibcpp_double_has_denorm;\n+      static const float_denorm_style has_denorm\n+\t= __DBL_DENORM_MIN__ ? denorm_present : denorm_absent;\n       static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n \n       static double infinity() throw()\n@@ -1832,7 +1756,7 @@ namespace std\n       static double signaling_NaN() throw()\n       { return *reinterpret_cast<const double*>(__glibcpp_double_SNaN); }\n       static double denorm_min() throw()\n-      { return *reinterpret_cast<const double*>(__glibcpp_double_denorm_min); }\n+      { return __DBL_DENORM_MIN__; }\n \n       static const bool is_iec559 = __glibcpp_double_is_iec559;\n       static const bool is_bounded = __glibcpp_double_is_bounded;\n@@ -1847,7 +1771,6 @@ namespace std\n #undef __glibcpp_double_round_error\n #undef __glibcpp_double_has_QNaN\n #undef __glibcpp_double_has_SNaN\n-#undef __glibcpp_double_has_denorm\n #undef __glibcpp_double_has_denorm_loss\n #undef __glibcpp_double_is_iec559\n #undef __glibcpp_double_is_bounded\n@@ -1887,10 +1810,10 @@ namespace std\n \t= __builtin_huge_vall () / 2 == __builtin_huge_vall ();\n       static const bool has_quiet_NaN = __glibcpp_long_double_has_SNaN;\n       static const bool has_signaling_NaN = __glibcpp_long_double_has_SNaN;\n-      static const float_denorm_style has_denorm =\n-                __glibcpp_long_double_has_denorm;\n-      static const bool has_denorm_loss =\n-                __glibcpp_long_double_has_denorm_loss;\n+      static const float_denorm_style has_denorm\n+\t= __LDBL_DENORM_MIN__ ? denorm_present : denorm_absent;\n+      static const bool has_denorm_loss\n+\t= __glibcpp_long_double_has_denorm_loss;\n \n       static long double infinity() throw()\n       { return __builtin_huge_vall (); } \n@@ -1908,10 +1831,7 @@ namespace std\n       }\n       \n       static long double denorm_min() throw()\n-      {\n-        return *reinterpret_cast<const long double*>\n-          (__glibcpp_long_double_denorm_min);\n-      }\n+      { return __LDBL_DENORM_MIN__; }\n \n       static const bool is_iec559 = __glibcpp_long_double_is_iec559;\n       static const bool is_bounded = __glibcpp_long_double_is_bounded;\n@@ -1926,7 +1846,6 @@ namespace std\n #undef __glibcpp_long_double_round_error\n #undef __glibcpp_long_double_has_QNaN\n #undef __glibcpp_long_double_has_SNaN\n-#undef __glibcpp_long_double_has_denorm\n #undef __glibcpp_long_double_has_denorm_loss\n #undef __glibcpp_long_double_is_iec559\n #undef __glibcpp_long_double_is_bounded"}, {"sha": "93cb3bce3df06a1886c4f46e178083ef77768c5f", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac520ec919a6794a954d007ba1987a5cd73b8239/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac520ec919a6794a954d007ba1987a5cd73b8239/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=ac520ec919a6794a954d007ba1987a5cd73b8239", "patch": "@@ -40,20 +40,14 @@ namespace std\n {\n   const __float_storage __glibcpp_float_QNaN = __glibcpp_float_QNaN_bytes;\n   const __float_storage __glibcpp_float_SNaN = __glibcpp_float_SNaN_bytes;\n-  const __float_storage __glibcpp_float_denorm_min =\n-    __glibcpp_float_denorm_min_bytes;\n \n   const __double_storage __glibcpp_double_QNaN = __glibcpp_double_QNaN_bytes;\n   const __double_storage __glibcpp_double_SNaN = __glibcpp_double_SNaN_bytes;\n-  const __double_storage __glibcpp_double_denorm_min =\n-    __glibcpp_double_denorm_min_bytes;\n \n   const __long_double_storage __glibcpp_long_double_QNaN =\n     __glibcpp_long_double_QNaN_bytes;\n   const __long_double_storage __glibcpp_long_double_SNaN =\n     __glibcpp_long_double_SNaN_bytes;\n-  const __long_double_storage __glibcpp_long_double_denorm_min =\n-    __glibcpp_long_double_denorm_min_bytes;\n \n   const bool __numeric_limits_base::is_specialized;\n   const int  __numeric_limits_base::digits;"}]}