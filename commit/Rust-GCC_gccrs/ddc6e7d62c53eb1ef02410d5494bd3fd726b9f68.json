{"sha": "ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjNmU3ZDYyYzUzZWIxZWYwMjQxMGQ1NDk0YmQzZmQ3MjZiOWY2OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-05T17:03:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-05T17:03:41Z"}, "message": "arm: Use REG_CFA_REGISTER instead of UNSPEC_STACK_ALIGN.\n\nThis requires a bit of extra preparation in arm_unwind_emit, in\norder to handle the change for ARM unwinding.\n\n        * config/arm/arm.c (arm_dwarf_handle_frame_unspec): Remove.\n        (TARGET_DWARF_HANDLE_FRAME_UNSPEC): Remove.\n        (arm_expand_prologue): Use REG_CFA_REGISTER to mark the\n        stack pointer save.\n        (arm_unwind_emit_set): Don't recognize UNSPEC_STACK_ALIGN.\n        (arm_unwind_emit): Walk REG_NOTES for unwinding notes.  Emit\n        proper unwind info for a REG_CFA_REGISTER save of stack pointer.\n        * config/arm/arm.md (UNSPEC_STACK_ALIGN): Remove.\n\nFrom-SVN: r175870", "tree": {"sha": "69416bb78da1ba0cfd2424e0fa6865c87fed54b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69416bb78da1ba0cfd2424e0fa6865c87fed54b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/comments", "author": null, "committer": null, "parents": [{"sha": "a35156057510d1933a0dab5d8bd2837bfd28fa8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35156057510d1933a0dab5d8bd2837bfd28fa8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35156057510d1933a0dab5d8bd2837bfd28fa8c"}], "stats": {"total": 127, "additions": 73, "deletions": 54}, "files": [{"sha": "31ca36d17843c98fd408b3e6b11541caa5b879f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "patch": "@@ -1,3 +1,14 @@\n+2011-07-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/arm/arm.c (arm_dwarf_handle_frame_unspec): Remove.\n+\t(TARGET_DWARF_HANDLE_FRAME_UNSPEC): Remove.\n+\t(arm_expand_prologue): Use REG_CFA_REGISTER to mark the\n+\tstack pointer save.\n+\t(arm_unwind_emit_set): Don't recognize UNSPEC_STACK_ALIGN.\n+\t(arm_unwind_emit): Walk REG_NOTES for unwinding notes.  Emit\n+\tproper unwind info for a REG_CFA_REGISTER save of stack pointer.\n+\t* config/arm/arm.md (UNSPEC_STACK_ALIGN): Remove.\n+\n 2011-07-05  Richard Henderson  <rth@redhat.com>\n \n \t* config/vax/vax.md (define_c_enum unspecv): New.  Define the"}, {"sha": "0e371f3016789a2083800dc9642c7284057c2e64", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 62, "deletions": 52, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "patch": "@@ -203,7 +203,6 @@ static bool arm_output_ttype (rtx);\n static void arm_asm_emit_except_personality (rtx);\n static void arm_asm_init_sections (void);\n #endif\n-static void arm_dwarf_handle_frame_unspec (const char *, rtx, int);\n static rtx arm_dwarf_register_span (rtx);\n \n static tree arm_cxx_guard_type (void);\n@@ -501,9 +500,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_ASM_INIT_SECTIONS arm_asm_init_sections\n #endif /* ARM_UNWIND_INFO */\n \n-#undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n-#define TARGET_DWARF_HANDLE_FRAME_UNSPEC arm_dwarf_handle_frame_unspec\n-\n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN arm_dwarf_register_span\n \n@@ -15830,9 +15826,8 @@ arm_expand_prologue (void)\n \n   if (IS_STACKALIGN (func_type))\n     {\n-      rtx dwarf;\n-      rtx r0;\n-      rtx r1;\n+      rtx r0, r1;\n+\n       /* Handle a word-aligned stack pointer.  We generate the following:\n \n \t  mov r0, sp\n@@ -15848,15 +15843,18 @@ arm_expand_prologue (void)\n \n       r0 = gen_rtx_REG (SImode, 0);\n       r1 = gen_rtx_REG (SImode, 1);\n-      /* Use a real rtvec rather than NULL_RTVEC so the rest of the\n-\t compiler won't choke.  */\n-      dwarf = gen_rtx_UNSPEC (SImode, rtvec_alloc (0), UNSPEC_STACK_ALIGN);\n-      dwarf = gen_rtx_SET (VOIDmode, r0, dwarf);\n-      insn = gen_movsi (r0, stack_pointer_rtx);\n+\n+      insn = emit_insn (gen_movsi (r0, stack_pointer_rtx));\n       RTX_FRAME_RELATED_P (insn) = 1;\n-      add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n-      emit_insn (insn);\n+      add_reg_note (insn, REG_CFA_REGISTER, NULL);\n+\n       emit_insn (gen_andsi3 (r1, r0, GEN_INT (~(HOST_WIDE_INT)7)));\n+\n+      /* ??? The CFA changes here, which may cause GDB to conclude that it\n+\t has entered a different function.  That said, the unwind info is\n+\t correct, individually, before and after this instruction because\n+\t we've described the save of SP, which will override the default\n+\t handling of SP as restoring from the CFA.  */\n       emit_insn (gen_movsi (stack_pointer_rtx, r1));\n     }\n \n@@ -22880,13 +22878,6 @@ arm_unwind_emit_set (FILE * asm_out_file, rtx p)\n \t  asm_fprintf (asm_out_file, \"\\t.movsp %r, #%d\\n\",\n \t\t       REGNO (e0), (int)INTVAL(XEXP (e1, 1)));\n \t}\n-      else if (GET_CODE (e1) == UNSPEC && XINT (e1, 1) == UNSPEC_STACK_ALIGN)\n-\t{\n-\t  /* Stack pointer save before alignment.  */\n-\t  reg = REGNO (e0);\n-\t  asm_fprintf (asm_out_file, \"\\t.unwind_raw 0, 0x%x @ vsp = r%d\\n\",\n-\t\t       reg + 0x90, reg);\n-\t}\n       else\n \tabort ();\n       break;\n@@ -22902,7 +22893,8 @@ arm_unwind_emit_set (FILE * asm_out_file, rtx p)\n static void\n arm_unwind_emit (FILE * asm_out_file, rtx insn)\n {\n-  rtx pat;\n+  rtx note, pat;\n+  bool handled_one = false;\n \n   if (arm_except_unwind_info (&global_options) != UI_TARGET)\n     return;\n@@ -22912,14 +22904,56 @@ arm_unwind_emit (FILE * asm_out_file, rtx insn)\n \t  || crtl->all_throwers_are_sibcalls))\n     return;\n \n-  if (GET_CODE (insn) == NOTE || !RTX_FRAME_RELATED_P (insn))\n+  if (NOTE_P (insn) || !RTX_FRAME_RELATED_P (insn))\n     return;\n \n-  pat = find_reg_note (insn, REG_FRAME_RELATED_EXPR, NULL_RTX);\n-  if (pat)\n-    pat = XEXP (pat, 0);\n-  else\n-    pat = PATTERN (insn);\n+  for (note = REG_NOTES (insn); note ; note = XEXP (note, 1))\n+    {\n+      pat = XEXP (note, 0);\n+      switch (REG_NOTE_KIND (note))\n+\t{\n+\tcase REG_FRAME_RELATED_EXPR:\n+\t  goto found;\n+\n+\tcase REG_CFA_REGISTER:\n+\t  if (pat == NULL)\n+\t    {\n+\t      pat = PATTERN (insn);\n+\t      if (GET_CODE (pat) == PARALLEL)\n+\t\tpat = XVECEXP (pat, 0, 0);\n+\t    }\n+\n+\t  /* Only emitted for IS_STACKALIGN re-alignment.  */\n+\t  {\n+\t    rtx dest, src;\n+\t    unsigned reg;\n+\n+\t    src = SET_SRC (pat);\n+\t    dest = SET_DEST (pat);\n+\n+\t    gcc_assert (src == stack_pointer_rtx);\n+\t    reg = REGNO (dest);\n+\t    asm_fprintf (asm_out_file, \"\\t.unwind_raw 0, 0x%x @ vsp = r%d\\n\",\n+\t\t\t reg + 0x90, reg);\n+\t  }\n+\t  handled_one = true;\n+\t  break;\n+\n+\tcase REG_CFA_DEF_CFA:\n+\tcase REG_CFA_EXPRESSION:\n+\tcase REG_CFA_ADJUST_CFA:\n+\tcase REG_CFA_OFFSET:\n+\t  /* ??? Only handling here what we actually emit.  */\n+\t  gcc_unreachable ();\n+\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  if (handled_one)\n+    return;\n+  pat = PATTERN (insn);\n+ found:\n \n   switch (GET_CODE (pat))\n     {\n@@ -22975,30 +23009,6 @@ arm_asm_init_sections (void)\n }\n #endif /* ARM_UNWIND_INFO */\n \n-/* Handle UNSPEC DWARF call frame instructions.  These are needed for dynamic\n-   stack alignment.  */\n-\n-static void\n-arm_dwarf_handle_frame_unspec (const char *label, rtx pattern, int index)\n-{\n-  rtx unspec = SET_SRC (pattern);\n-  gcc_assert (GET_CODE (unspec) == UNSPEC);\n-\n-  switch (index)\n-    {\n-    case UNSPEC_STACK_ALIGN:\n-      /* ??? We should set the CFA = (SP & ~7).  At this point we haven't\n-         put anything on the stack, so hopefully it won't matter.\n-         CFA = SP will be correct after alignment.  */\n-      dwarf2out_reg_save_reg (label, stack_pointer_rtx,\n-                              SET_DEST (pattern));\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-\n /* Output unwind directives for the start/end of a function.  */\n \n void"}, {"sha": "03ae72defa368e66422cf0c0cecaa1b9669d3309", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ddc6e7d62c53eb1ef02410d5494bd3fd726b9f68", "patch": "@@ -94,8 +94,6 @@\n   UNSPEC_TLS            ; A symbol that has been treated properly for TLS usage.\n   UNSPEC_PIC_LABEL      ; A label used for PIC access that does not appear in the\n                         ; instruction stream.\n-  UNSPEC_STACK_ALIGN    ; Doubleword aligned stack pointer.  Used to\n-                        ; generate correct unwind information.\n   UNSPEC_PIC_OFFSET     ; A symbolic 12-bit OFFSET that has been treated\n                         ; correctly for PIC usage.\n   UNSPEC_GOTSYM_OFF     ; The offset of the start of the GOT from a"}]}