{"sha": "164758b02c44cba66e00103c118c6a4b5f76a812", "node_id": "C_kwDOANBUbNoAKDE2NDc1OGIwMmM0NGNiYTY2ZTAwMTAzYzExOGM2YTRiNWY3NmE4MTI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-20T18:37:45Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-24T15:00:50Z"}, "message": "Tweaks to global ranges.\n\nThe global get_nonzero_bits was previously returning -1 for\nunsupported types.  I dropped this in the conversion to global ranges\nand it's causing a problem in the frange work, where CCP is asking for\nthe nonzero bits of non-integral types.  CCP may require further\ntweaks, but for now, restore the original behavior.\n\nAlso, I'm removing old checks for precision that no longer hold, now\nthat we handle various types for global ranges.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssanames.cc (get_nonzero_bits): Return -1 for unsupported\n\ttypes.\n\t* value-query.cc (get_ssa_name_range_info): Remove precision check.", "tree": {"sha": "bbd73175242f78fb80d19c194c5960050a93f8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbd73175242f78fb80d19c194c5960050a93f8ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/164758b02c44cba66e00103c118c6a4b5f76a812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164758b02c44cba66e00103c118c6a4b5f76a812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164758b02c44cba66e00103c118c6a4b5f76a812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164758b02c44cba66e00103c118c6a4b5f76a812/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a36b4e1fe405fe347d57c39f8e23ac8a6c57263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a36b4e1fe405fe347d57c39f8e23ac8a6c57263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a36b4e1fe405fe347d57c39f8e23ac8a6c57263"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "5c5d0e346c4133fee40431c0956f8c0ad0796f2b", "filename": "gcc/tree-ssanames.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164758b02c44cba66e00103c118c6a4b5f76a812/gcc%2Ftree-ssanames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164758b02c44cba66e00103c118c6a4b5f76a812/gcc%2Ftree-ssanames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.cc?ref=164758b02c44cba66e00103c118c6a4b5f76a812", "patch": "@@ -489,13 +489,12 @@ get_nonzero_bits (const_tree name)\n       return wi::shwi (-1, precision);\n     }\n \n-  if (!range_info_p (name))\n+  if (!range_info_p (name) || !irange::supports_p (TREE_TYPE (name)))\n     return wi::shwi (-1, precision);\n \n   /* Optimization to get at the nonzero bits because we know the\n      storage type.  This saves us measurable time compared to going\n      through vrange_storage.  */\n-  gcc_checking_assert (irange::supports_p (TREE_TYPE (name)));\n   irange_storage_slot *ri\n     = static_cast <irange_storage_slot *> (SSA_NAME_RANGE_INFO (name));\n   return ri->get_nonzero_bits ();"}, {"sha": "3560d19f1ae2a425e64a216ff23f382d0601839d", "filename": "gcc/value-query.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/164758b02c44cba66e00103c118c6a4b5f76a812/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/164758b02c44cba66e00103c118c6a4b5f76a812/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=164758b02c44cba66e00103c118c6a4b5f76a812", "patch": "@@ -280,16 +280,13 @@ get_ssa_name_range_info (vrange &r, const_tree name)\n \n   void *ri = SSA_NAME_RANGE_INFO (name);\n \n-  // Return VR_VARYING for SSA_NAMEs with NULL RANGE_INFO or SSA_NAMEs\n-  // with integral types width > 2 * HOST_BITS_PER_WIDE_INT precision.\n-  if (!ri || (GET_MODE_PRECISION (SCALAR_INT_TYPE_MODE (TREE_TYPE (name)))\n-\t      > 2 * HOST_BITS_PER_WIDE_INT))\n-    r.set_varying (type);\n-  else\n+  if (ri)\n     {\n       vrange_storage vstore (NULL);\n       vstore.get_vrange (ri, r, TREE_TYPE (name));\n     }\n+  else\n+    r.set_varying (type);\n }\n \n // Return nonnull attribute of pointer NAME from SSA_NAME_PTR_INFO."}]}