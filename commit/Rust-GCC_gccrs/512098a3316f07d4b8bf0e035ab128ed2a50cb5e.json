{"sha": "512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "node_id": "C_kwDOANBUbNoAKDUxMjA5OGEzMzE2ZjA3ZDRiOGJmMGUwMzVhYjEyOGVkMmE1MGNiNWU", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-06-25T01:05:29Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-12-14T04:55:12Z"}, "message": "libgccjit: Allow comparing vector types\n\ngcc/jit/ChangeLog:\n\tPR jit/108078\n\t* jit-recording.h: Add vector_type::is_same_type_as method\n\ngcc/testsuite/ChangeLog:\n\tPR jit/108078\n\t* jit.dg/test-vector-types.cc: Add tests for vector type comparison\n\nCo-authored-by: Guillaume Gomez <guillaume1.gomez@gmail.com>\nSigned-off-by: Guillaume Gomez <guillaume1.gomez@gmail.com>", "tree": {"sha": "21a109cbe27104ea70338f5e4b604ebe726e7e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a109cbe27104ea70338f5e4b604ebe726e7e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512098a3316f07d4b8bf0e035ab128ed2a50cb5e/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17ddf2c484427e6ddfd994b62fefcdac27ac02f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17ddf2c484427e6ddfd994b62fefcdac27ac02f"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "e1236dec575457b03f0b5ad055105afb20d8fa8a", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512098a3316f07d4b8bf0e035ab128ed2a50cb5e/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512098a3316f07d4b8bf0e035ab128ed2a50cb5e/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "patch": "@@ -806,6 +806,15 @@ class vector_type : public decorated_type\n \n   void replay_into (replayer *) final override;\n \n+  bool is_same_type_as (type *other) final override\n+  {\n+    vector_type *other_vec_type = other->dyn_cast_vector_type ();\n+    if (other_vec_type == NULL)\n+      return false;\n+    return get_num_units () == other_vec_type->get_num_units ()\n+      && get_element_type () == other_vec_type->get_element_type ();\n+  }\n+\n   vector_type *is_vector () final override { return this; }\n \n private:"}, {"sha": "5661d1b9eb4fb2a0671380731a1fccc8740e0b57", "filename": "gcc/testsuite/jit.dg/test-vector-types.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512098a3316f07d4b8bf0e035ab128ed2a50cb5e/gcc%2Ftestsuite%2Fjit.dg%2Ftest-vector-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512098a3316f07d4b8bf0e035ab128ed2a50cb5e/gcc%2Ftestsuite%2Fjit.dg%2Ftest-vector-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-vector-types.cc?ref=512098a3316f07d4b8bf0e035ab128ed2a50cb5e", "patch": "@@ -105,6 +105,19 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n \t\t v4f_type, GCC_JIT_BINARY_OP_MULT);\n   create_vec_fn (ctxt, \"jit_v4f_div\",\n \t\t v4f_type, GCC_JIT_BINARY_OP_DIVIDE);\n+\n+  // Checking compatibility between types.\n+  CHECK_VALUE(gcc_jit_compatible_types(v4si_type, v4ui_type), 0);\n+  CHECK_VALUE(gcc_jit_compatible_types(v4si_type, v4f_type), 0);\n+  CHECK_VALUE(gcc_jit_compatible_types(v4ui_type, v4f_type), 0);\n+\n+  gcc_jit_type *v4si_type2 = gcc_jit_type_get_vector (int_type, 4);\n+  gcc_jit_type *v4ui_type2 = gcc_jit_type_get_vector (unsigned_type, 4);\n+  gcc_jit_type *v4f_type2 = gcc_jit_type_get_vector (float_type, 4);\n+\n+  CHECK_VALUE(gcc_jit_compatible_types(v4si_type, v4si_type2), 1);\n+  CHECK_VALUE(gcc_jit_compatible_types(v4ui_type, v4ui_type2), 1);\n+  CHECK_VALUE(gcc_jit_compatible_types(v4f_type, v4f_type2), 1);\n }\n \n template <typename T>"}]}