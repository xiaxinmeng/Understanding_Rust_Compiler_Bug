{"sha": "fd0214cd48c0d9d4e61df6f882633b510a31e122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwMjE0Y2Q0OGMwZDlkNGU2MWRmNmY4ODI2MzNiNTEwYTMxZTEyMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-04T02:22:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-04T02:22:25Z"}, "message": "pa.md (scc insn): Name this pattern \"scc\".\n\n\t* pa.md (scc insn): Name this pattern \"scc\".\n\t(negscc, incscc, cmov): New patterns.\n\nFrom-SVN: r3081", "tree": {"sha": "b88b575cffeadec5e1fbf997fd9982e32d090881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b88b575cffeadec5e1fbf997fd9982e32d090881"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd0214cd48c0d9d4e61df6f882633b510a31e122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0214cd48c0d9d4e61df6f882633b510a31e122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0214cd48c0d9d4e61df6f882633b510a31e122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0214cd48c0d9d4e61df6f882633b510a31e122/comments", "author": null, "committer": null, "parents": [{"sha": "9c103251ff776a83768ad8790977c73585aae268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c103251ff776a83768ad8790977c73585aae268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c103251ff776a83768ad8790977c73585aae268"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "b0be1a80772e018e89371f0bc8ce580808006385", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd0214cd48c0d9d4e61df6f882633b510a31e122/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd0214cd48c0d9d4e61df6f882633b510a31e122/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=fd0214cd48c0d9d4e61df6f882633b510a31e122", "patch": "@@ -366,7 +366,7 @@\n ;; Instruction canonicalization puts immediate operands second, which\n ;; is the reverse of what we want.\n \n-(define_insn \"\"\n+(define_insn \"scc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(match_operator:SI 3 \"comparison_operator\"\n \t\t\t   [(match_operand:SI 1 \"register_operand\" \"r,r\")\n@@ -386,6 +386,67 @@\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"2,2\")])\n \n+;; Combiner patterns for common operations performed with the output\n+;; from an scc insn (negscc and incscc).  \n+(define_insn \"negscc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(neg (match_operator:SI 3 \"comparison_operator\"\n+\t       [(match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t(match_operand:SI 2  \"arith11_operand\" \"r,I\")])))]\n+  \"\"\n+  \"*\n+{\n+  if (which_alternative == 0)\n+    return \\\"comclr,%N3 %1,%2,%0\\;ldi -1,%0\\\";\n+  else\n+    {\n+      if (!(GET_CODE (operands[3]) == EQ || GET_CODE (operands[3]) == NE))\n+\tPUT_CODE (operands[3], reverse_relop (GET_CODE (operands[3])));\n+      return \\\"comiclr,%N3 %2,%1,%0\\;ldi -1,%0\\\";\n+    }\n+}\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+;; add/sub the output from an scc with another operand.  This simply\n+;; adds or subtracts 1 from the other operand.\n+(define_insn \"incscc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+ \t(match_operator 5 \"incscc_operator\"\n+ \t  [(match_operand:SI 1 \"register_operand\" \"0,r\")\n+ \t   (match_operator:SI 4 \"comparison_operator\"\n+ \t     [(match_operand:SI 2 \"register_operand\" \"r,r\")\n+ \t      (match_operand:SI 3 \"arith11_operand\" \"rI,rI\")])]))]\n+ \t     \n+   \"\"\n+   \"*\n+ {\n+   if (GET_CODE (operands[3]) != CONST_INT)\n+     output_asm_insn (\\\"comclr,%N4 %2,%3,0\\\", operands);\n+   else\n+     {\n+       if (! (GET_CODE (operands[4]) == EQ || GET_CODE (operands[4]) == NE))\n+ \tPUT_CODE (operands[4], reverse_relop (GET_CODE (operands[4])));\n+       output_asm_insn (\\\"comiclr,%N4 %3,%2,0\\\", operands);\n+     }\n+   if (which_alternative == 0)\n+     {\n+      if (GET_CODE (operands[5]) == MINUS)\n+\treturn \\\"addi -1,%0,%0\\\";\n+      else\n+\treturn \\\"addi 1,%0,%0\\\";\n+     }\n+   else\n+     {\n+      if (GET_CODE (operands[5]) == MINUS)\n+\treturn \\\"addi,tr -1,%1,%0\\;copy %1,%0\\\";\n+      else\n+\treturn \\\"addi,tr 1,%1,%0\\;copy %1,%0\\\";\n+     }\n+ }\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"2,3\")])\n+ \n ;; Conditionals\n \n (define_expand \"beq\"\n@@ -715,6 +776,44 @@\n \n ;;; Experimental\n \n+(define_insn \"cmov\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+        (if_then_else:SI\n+\t (match_operator 5 \"comparison_operator\"\n+                         [(match_operand:SI 3 \"register_operand\" \"r,r\")\n+\t\t\t  (match_operand:SI 4 \"arith5_operand\" \"rL,rL\")])\n+         (match_operand:SI 1 \"arith11_operand\" \"0,rI\")\n+         (match_operand:SI 2 \"arith11_operand\" \"rI,0\")))]\n+  \"\"\n+  \"*\n+{\n+  if (GET_CODE (operands[4]) == CONST_INT)\n+    {\n+      if (! (GET_CODE (operands[5]) == EQ || GET_CODE (operands[5]) == NE))\n+\tPUT_CODE (operands[5], reverse_relop (GET_CODE (operands[5])));\n+      output_asm_insn (\\\"comiclr,%C5 %4,%3,0\\\", operands);\n+    }\n+  else\n+    output_asm_insn (\\\"comclr,%C5 %3,%4,0\\\", operands);\n+  if (which_alternative == 0)\n+    {\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\toutput_asm_insn (\\\"ldo %2(0),%0\\\", operands);\n+      else \n+\toutput_asm_insn (\\\"copy %2,%0\\\", operands);\n+    }\n+  else\n+    {\n+      if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (\\\"ldo %1(0),%0\\\", operands);\n+      else \n+\toutput_asm_insn (\\\"copy %1,%0\\\", operands);\n+    }\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"multi,multi\")\n+   (set_attr \"length\" \"2,2\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"fp_reg_operand\" \"=fx\")\n \t(match_operand:SI 1 \"short_memory_operand\" \"T\"))]"}]}