{"sha": "15c0c5c9125691e33a0763e45bf48406ffc2edc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjMGM1YzkxMjU2OTFlMzNhMDc2M2U0NWJmNDg0MDZmZmMyZWRjOA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-08-01T15:17:03Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-08-01T15:17:03Z"}, "message": "[AArch64] Improve TARGET_LEGITIMIZE_ADDRESS_P hook\n\ncurrently, aarch64 LEGITIMIZE_ADDRESS_P hook will reject all \"reg + offset\"\naddress given \"offset\" is beyond supported range.\n\nwhile this may be too strict. we should honor the \"strict_p\" parameter in the\nhook. before reload, we accept all offset if it's a frame access, because the\noffset may change during later register elimination.\n\nthe early reject of \"reg + offset\" may cause extra registers created, and if\nthat register live range is across function invoking then callee saved reg\nneeded, thus introduce extra reg save/restore also.\n\ngive a simple example as:\n\nint\ntest15 (void)\n{\n   unsigned char a[480];\n   initialize_array (a, 480);\n\n   if (a[0] == 0x10)\n     return 1;\n\n   return 0;\n}\n\n.S before the patch\n(-O2 -fPIC)\n===\ntest15:\n         sub     sp, sp, #480\n         mov     w1, 480\n         stp     x29, x30, [sp, -32]!\n         add     x29, sp, 0\n         str     x19, [sp, 16]\n         add     x19, x29, 32\n         mov     x0, x19\n         bl      initialize_array\n         ldrb    w0, [x19]\n         ldr     x19, [sp, 16]\n         ldp     x29, x30, [sp], 32\n         cmp     w0, 16\n         cset    w0, eq\n         add     sp, sp, 480\n         ret\n\n.S after the patch\n===\ntest15:\n         stp     x29, x30, [sp, -496]!\n         mov     w1, 480\n         add     x29, sp, 0\n         add     x0, x29, 16\n         bl      initialize_array\n         ldrb    w0, [x29, 16]\n         ldp     x29, x30, [sp], 496\n         cmp     w0, 16\n         cset    w0, eq\n         ret\n\ngcc/\n  * config/aarch64/aarch64.c (aarch64_classify_address): Accept all offset for\n  frame access when strict_p is false.\n\ngcc/testsuite\n   * gcc.target/aarch64/legitimize_stack_var_before_reload_1.c: New testcase.\n\nFrom-SVN: r213488", "tree": {"sha": "623d83c0d76db500b4903d27890d31412a9f0b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/623d83c0d76db500b4903d27890d31412a9f0b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c0c5c9125691e33a0763e45bf48406ffc2edc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c0c5c9125691e33a0763e45bf48406ffc2edc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c0c5c9125691e33a0763e45bf48406ffc2edc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c0c5c9125691e33a0763e45bf48406ffc2edc8/comments", "author": null, "committer": null, "parents": [{"sha": "4470747882d347fc2da36479aec26fc3d7c938f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4470747882d347fc2da36479aec26fc3d7c938f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4470747882d347fc2da36479aec26fc3d7c938f7"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "f9671110d089a464052a7ae18bd4f9a6bc624c2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c0c5c9125691e33a0763e45bf48406ffc2edc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c0c5c9125691e33a0763e45bf48406ffc2edc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15c0c5c9125691e33a0763e45bf48406ffc2edc8", "patch": "@@ -1,3 +1,8 @@\n+2014-08-01  Jiong Wang <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_classify_address): Accept all offset\n+\tfor frame access when strict_p is false.\n+\n 2014-08-01  Renlin Li <renlin.li@arm.com>\n 2014-08-01  Jiong Wang <jiong.wang@arm.com>\n "}, {"sha": "7e135a19ada5d3590f814c4e92074555c3727852", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c0c5c9125691e33a0763e45bf48406ffc2edc8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c0c5c9125691e33a0763e45bf48406ffc2edc8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=15c0c5c9125691e33a0763e45bf48406ffc2edc8", "patch": "@@ -3248,6 +3248,21 @@ aarch64_classify_address (struct aarch64_address_info *info,\n     case PLUS:\n       op0 = XEXP (x, 0);\n       op1 = XEXP (x, 1);\n+\n+      if (! strict_p\n+\t  && GET_CODE (op0) == REG\n+\t  && (op0 == virtual_stack_vars_rtx\n+\t      || op0 == frame_pointer_rtx\n+\t      || op0 == arg_pointer_rtx)\n+\t  && GET_CODE (op1) == CONST_INT)\n+\t{\n+\t  info->type = ADDRESS_REG_IMM;\n+\t  info->base = op0;\n+\t  info->offset = op1;\n+\n+\t  return true;\n+\t}\n+\n       if (GET_MODE_SIZE (mode) != 0\n \t  && CONST_INT_P (op1)\n \t  && aarch64_base_register_rtx_p (op0, strict_p))"}, {"sha": "cc4e3d1e367cfc059d46faba567486776d5e8454", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c0c5c9125691e33a0763e45bf48406ffc2edc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c0c5c9125691e33a0763e45bf48406ffc2edc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15c0c5c9125691e33a0763e45bf48406ffc2edc8", "patch": "@@ -1,3 +1,8 @@\n+2014-08-01  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/legitimize_stack_var_before_reload_1.c: New\n+\ttestcase.\n+\n 2014-08-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/61762"}]}