{"sha": "e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNjMGMwOTg5YjYxNGI1Y2UzZTk2OGZmNDlhMTJlYWRkZWJjMGQ3Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-12T19:44:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-12T19:44:17Z"}, "message": "re PR libstdc++/13341 (ctype<wchar_t>::do_narrow(wchar_t, char) is slow)\n\n2003-12-12  Paolo Carlini  <pcarlini@suse.de>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/13341\n\t* include/bits/locale_facets.h (ctype<wchar_t>): Declare\n\t_M_initialize_ctype() and _M_narrow_ok, _M_narrow and _M_widen.\n\t* src/ctype.cc (ctype<wchar_t>::ctype(size_t),\n\tctype<wchar_t>::ctype(__c_locale, size_t)): Use\n\t_M_initialize_ctype to fill _M_narrow and _M_widen.\n\t(ctype_byname<wchar_t>::ctype_byname(const char*, size_t)):\n\tLikewise.\n\t* config/locale/generic/ctype_members.cc (do_narrow, do_widen)\n\tUse _M_narrow and _M_widen when possible, instead of calling\n\twctob and btowc, respectively.\n\t(_M_initialize_ctype): Define, it fills at construction time\n\t_M_narrow and _M_widen.\n\t* config/locale/gnu/ctype_members.cc: Likewise.\n\t* testsuite/performance/narrow_widen_wchar_t.cc: New.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r74580", "tree": {"sha": "a54b8363ab8d9576e500c8c1d21398142cdd9d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54b8363ab8d9576e500c8c1d21398142cdd9d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/comments", "author": null, "committer": null, "parents": [{"sha": "e00853fd9010af463931114e469875303b7bf876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00853fd9010af463931114e469875303b7bf876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00853fd9010af463931114e469875303b7bf876"}], "stats": {"total": 232, "additions": 210, "deletions": 22}, "files": [{"sha": "27e23bf54820693cec7140c1a053b5d58bb2fa55", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "patch": "@@ -1,3 +1,22 @@\n+2003-12-12  Paolo Carlini  <pcarlini@suse.de>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/13341\n+\t* include/bits/locale_facets.h (ctype<wchar_t>): Declare\n+\t_M_initialize_ctype() and _M_narrow_ok, _M_narrow and _M_widen.\n+\t* src/ctype.cc (ctype<wchar_t>::ctype(size_t),\n+\tctype<wchar_t>::ctype(__c_locale, size_t)): Use\n+\t_M_initialize_ctype to fill _M_narrow and _M_widen.\n+\t(ctype_byname<wchar_t>::ctype_byname(const char*, size_t)):\n+\tLikewise.\n+\t* config/locale/generic/ctype_members.cc (do_narrow, do_widen)\n+\tUse _M_narrow and _M_widen when possible, instead of calling\n+\twctob and btowc, respectively.\n+\t(_M_initialize_ctype): Define, it fills at construction time\n+\t_M_narrow and _M_widen.\n+\t* config/locale/gnu/ctype_members.cc: Likewise.\n+\t* testsuite/performance/narrow_widen_wchar_t.cc: New.\n+\n 2003-12-12  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/faq/index.txt: Regenerate after adding <link> tags."}, {"sha": "517df4c21875253fde9be717a2715814ca02328a", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "patch": "@@ -185,15 +185,24 @@ namespace std\n   wchar_t\n   ctype<wchar_t>::\n   do_widen(char __c) const\n-  { return btowc(static_cast<unsigned char>(__c)); }\n+  { \n+    const unsigned char __uc = static_cast<unsigned char>(__c);\n+    if (__uc < 128)\n+      return _M_widen[__uc];\n+    return btowc(__uc);\n+  }\n   \n   const char* \n   ctype<wchar_t>::\n   do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n     while (__lo < __hi)\n       {\n-\t*__dest = btowc(static_cast<unsigned char>(*__lo));\n+\tconst unsigned char __uc = static_cast<unsigned char>(*__lo);\t\n+\tif (__uc < 128)\n+\t  *__dest = _M_widen[__uc];\n+\telse\n+\t  *__dest = btowc(__uc);\t\n \t++__lo;\n \t++__dest;\n       }\n@@ -204,7 +213,9 @@ namespace std\n   ctype<wchar_t>::\n   do_narrow(wchar_t __wc, char __dfault) const\n   { \n-    int __c = wctob(__wc);\n+    if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n+      return _M_narrow[__wc];\n+    const int __c = wctob(__wc);\n     return (__c == EOF ? __dfault : static_cast<char>(__c)); \n   }\n \n@@ -213,14 +224,48 @@ namespace std\n   do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n \t    char* __dest) const\n   {\n-    while (__lo < __hi)\n+    if (_M_narrow_ok)\n+      while (__lo < __hi)\n+\t{\n+\t  if (*__lo >= 0 && *__lo < 128)\n+\t    *__dest = _M_narrow[*__lo];\n+\t  else\n+\t    {\n+\t      const int __c = wctob(*__lo);\n+\t      *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t    }\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    else\n+      while (__lo < __hi)\n+\t{\n+\t  const int __c = wctob(*__lo);\n+\t  *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    return __hi;\n+  }\n+\n+  void\n+  ctype<wchar_t>::_M_initialize_ctype()\n+  {\n+    wint_t __i;\n+    for (__i = 0; __i < 128; ++__i)\n       {\n-\tint __c = wctob(*__lo);\n-\t*__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n-\t++__lo;\n-\t++__dest;\n+\tconst int __c = wctob(__i);\n+\tif (__c == EOF)\n+\t  break;\n+\telse\n+\t  _M_narrow[__i] = static_cast<char>(__c);\n       }\n-    return __hi;\n+    if (__i == 128)\n+      _M_narrow_ok = true;\n+    else\n+      _M_narrow_ok = false;\n+    for (int __i = 0; __i < 128; ++__i)\n+      _M_widen[__i] = btowc(__i);\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n }"}, {"sha": "673b511e5cd171c9cda412c24abf4ced4aa0e823", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "patch": "@@ -192,14 +192,17 @@ namespace std\n   ctype<wchar_t>::\n   do_widen(char __c) const\n   {\n+    const unsigned char __uc = static_cast<unsigned char>(__c);\n+    if (__uc < 128)\n+      return _M_widen[__uc];\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);\n #endif\n-    wchar_t __ret = btowc(static_cast<unsigned char>(__c));\n+    const wchar_t __wc = btowc(__uc);\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif\n-    return __ret;\n+    return __wc;\n   }\n \n   const char* \n@@ -211,7 +214,11 @@ namespace std\n #endif\n     while (__lo < __hi)\n       {\n-\t*__dest = btowc(static_cast<unsigned char>(*__lo));\n+\tconst unsigned char __uc = static_cast<unsigned char>(*__lo);\t\n+\tif (__uc < 128)\n+\t  *__dest = _M_widen[__uc];\n+\telse\n+\t  *__dest = btowc(__uc);\t\n \t++__lo;\n \t++__dest;\n       }\n@@ -225,10 +232,12 @@ namespace std\n   ctype<wchar_t>::\n   do_narrow(wchar_t __wc, char __dfault) const\n   { \n+    if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n+      return _M_narrow[__wc];\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);\n #endif\n-    int __c = wctob(__wc);\n+    const int __c = wctob(__wc);\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif\n@@ -243,17 +252,57 @@ namespace std\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_ctype);\n #endif\n-    while (__lo < __hi)\n+    if (_M_narrow_ok)\n+      while (__lo < __hi)\n+\t{\n+\t  if (*__lo >= 0 && *__lo < 128)\n+\t    *__dest = _M_narrow[*__lo];\n+\t  else\n+\t    {\n+\t      const int __c = wctob(*__lo);\n+\t      *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t    }\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    else\n+      while (__lo < __hi)\n+\t{\n+\t  const int __c = wctob(*__lo);\n+\t  *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __uselocale(__old);\n+#endif\n+    return __hi;\n+  }\n+\n+  void\n+  ctype<wchar_t>::_M_initialize_ctype()\n+  {\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+    __c_locale __old = __uselocale(_M_c_locale_ctype);\n+#endif\n+    wint_t __i;\n+    for (__i = 0; __i < 128; ++__i)\n       {\n-\tint __c = wctob(*__lo);\n-\t*__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n-\t++__lo;\n-\t++__dest;\n+\tconst int __c = wctob(__i);\n+\tif (__c == EOF)\n+\t  break;\n+\telse\n+\t  _M_narrow[__i] = static_cast<char>(__c);\n       }\n+    if (__i == 128)\n+      _M_narrow_ok = true;\n+    else\n+      _M_narrow_ok = false;\n+    for (int __i = 0; __i < 128; ++__i)\n+      _M_widen[__i] = btowc(__i);\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif\n-    return __hi;\n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n }"}, {"sha": "7a24b9b30fe92ffc50766e8efbdd225de69d6813", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "patch": "@@ -446,6 +446,11 @@ namespace std\n     protected:\n       __c_locale\t\t_M_c_locale_ctype;\n \n+      // Pre-computed narrowed and widened chars in the range 0-127.\n+      bool                      _M_narrow_ok;      \n+      char                      _M_narrow[128];\n+      wint_t                    _M_widen[128];\n+\n     public:\n       // Data Members:\n       static locale::id        \tid;\n@@ -500,6 +505,10 @@ namespace std\n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n \t\tchar __dfault, char* __dest) const;\n+\n+      // For use at construction time only.\n+      void \n+      _M_initialize_ctype();\n     };\n \n   template<>"}, {"sha": "b0888c57c81fd814078bcb7daeda5f574a347e34", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "patch": "@@ -87,11 +87,17 @@ namespace std\n #ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs)\n-  { _M_c_locale_ctype = _S_get_c_locale(); }\n+  { \n+    _M_c_locale_ctype = _S_get_c_locale();\n+    _M_initialize_ctype();\n+  }\n \n   ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs) \n-  { _M_c_locale_ctype = _S_clone_c_locale(__cloc); }\n+  {\n+    _M_c_locale_ctype = _S_clone_c_locale(__cloc);\n+    _M_initialize_ctype();\n+  }\n \n   ctype<wchar_t>::~ctype() \n   { _S_destroy_c_locale(_M_c_locale_ctype); }\n@@ -103,7 +109,8 @@ namespace std\n       if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n \t{\n \t  _S_destroy_c_locale(_M_c_locale_ctype);\n-\t  _S_create_c_locale(_M_c_locale_ctype, __s); \n+\t  _S_create_c_locale(_M_c_locale_ctype, __s);\n+\t  _M_initialize_ctype();\n \t}\n     }\n #endif"}, {"sha": "1081bf564526f967728925c8f4fc14bf7d6ba62d", "filename": "libstdc++-v3/testsuite/performance/narrow_widen_wchar_t.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c0c0989b614b5ce3e968ff49a12eaddebc0d76/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc?ref=e3c0c0989b614b5ce3e968ff49a12eaddebc0d76", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <locale>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const long iters = 200000000;\n+\n+  locale loc;\n+  const ctype<wchar_t>& ct = use_facet<ctype<wchar_t> >(loc);\n+\n+  // narrow\n+  start_counters(time, resource);\n+  for (long i = 0; i < iters; ++i)\n+    ct.narrow(i % 128, '*');\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"narrow\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // widen\n+  start_counters(time, resource);\n+  for (long i = 0; i < iters; ++i)\n+    ct.widen(i % 128);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"widen\", time, resource);\n+\n+  return 0;\n+}"}]}