{"sha": "e4dd5b691d56f11c225e1e1847be3800854634b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkZDViNjkxZDU2ZjExYzIyNWUxZTE4NDdiZTM4MDA4NTQ2MzRiNg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2015-01-02T21:12:54Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2015-01-02T21:12:54Z"}, "message": "re PR c++/64422 (basic_string::erase is unresloved)\n\n2015-01-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR libstdc++/64422\n        * src/c++98/misc-inst.cc (string::erase): Add missing overloads.\n        (string::insert): Likewise.\n        (string::replace): Likewise.\n        (wstring::erase): Likewise.\n        (wstring::insert): Likewise.\n        (wstring::replace): Likewise.\n        * testsuite/21_strings/basic_string/modifiers/64422.cc: New testcase.\n\nFrom-SVN: r219149", "tree": {"sha": "15aa7e10212e38b0a9ab0f9367b26bda33ceec98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15aa7e10212e38b0a9ab0f9367b26bda33ceec98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4dd5b691d56f11c225e1e1847be3800854634b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dd5b691d56f11c225e1e1847be3800854634b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4dd5b691d56f11c225e1e1847be3800854634b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dd5b691d56f11c225e1e1847be3800854634b6/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09de7c25785ff59931aee011b79a67e209db27bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09de7c25785ff59931aee011b79a67e209db27bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09de7c25785ff59931aee011b79a67e209db27bb"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "121ac771e64d8c9aed5ca8ff85bf2170deabb9f4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dd5b691d56f11c225e1e1847be3800854634b6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dd5b691d56f11c225e1e1847be3800854634b6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4dd5b691d56f11c225e1e1847be3800854634b6", "patch": "@@ -1,3 +1,14 @@\n+2015-01-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR libstdc++/64422\n+\t* src/c++98/misc-inst.cc (string::erase): Add missing overloads.\n+\t(string::insert): Likewise.\n+\t(string::replace): Likewise.\n+\t(wstring::erase): Likewise.\n+\t(wstring::insert): Likewise.\n+\t(wstring::replace): Likewise.\n+\t* testsuite/21_strings/basic_string/modifiers/64422.cc: New testcase.\n+\n 2015-01-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64468"}, {"sha": "060dac2835282c0771ce391ce6ab96cae8ccfc68", "filename": "libstdc++-v3/src/c++98/misc-inst.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dd5b691d56f11c225e1e1847be3800854634b6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dd5b691d56f11c225e1e1847be3800854634b6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc?ref=e4dd5b691d56f11c225e1e1847be3800854634b6", "patch": "@@ -68,20 +68,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // C++98 members that are not instantiated by src/c++11/string-inst.cc\n   // because they changed in C++11 to take const_iterator parameters.\n   template string::iterator string::erase(iterator);\n+  template string::iterator string::erase(iterator, iterator);\n+  template void string::insert(iterator, size_type, char);\n   template void string::insert(iterator, iterator, iterator);\n   template string::iterator string::insert(iterator, char);\n+  template string& string::replace(iterator, iterator, const string&);\n+  template string&\n+  string::replace(iterator, iterator, const char*, size_type);\n+  template string& string::replace(iterator, iterator, const char*);\n   template string& string::replace(iterator, iterator, size_type, char);\n   template string& string::replace(iterator, iterator, char*, char*);\n+  template string&\n+  string::replace(iterator, iterator, const char*, const char*);\n   template string& string::replace(iterator, iterator, iterator, iterator);\n   template string&\n   string::replace(iterator, iterator, const_iterator, const_iterator);\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template wstring::iterator wstring::erase(iterator);\n+  template wstring::iterator wstring::erase(iterator, iterator);\n+  template void wstring::insert(iterator, size_type, wchar_t);\n   template void wstring::insert(iterator, iterator, iterator);\n   template wstring::iterator wstring::insert(iterator, wchar_t);\n+  template wstring& wstring::replace(iterator, iterator, const wstring&);\n+  template wstring&\n+  wstring::replace(iterator, iterator, const wchar_t*, size_type);\n+  template wstring& wstring::replace(iterator, iterator, const wchar_t*);\n   template wstring& wstring::replace(iterator, iterator, size_type, wchar_t);\n   template wstring& wstring::replace(iterator, iterator, wchar_t*, wchar_t*);\n+  template wstring&\n+  wstring::replace(iterator, iterator, const wchar_t*, const wchar_t*);\n   template wstring& wstring::replace(iterator, iterator, iterator, iterator);\n   template wstring&\n   wstring::replace(iterator, iterator, const_iterator, const_iterator);"}, {"sha": "4b37ba97f1709423e2bdd140554e9600efb66a2e", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/64422.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dd5b691d56f11c225e1e1847be3800854634b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2F64422.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dd5b691d56f11c225e1e1847be3800854634b6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2F64422.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2F64422.cc?ref=e4dd5b691d56f11c225e1e1847be3800854634b6", "patch": "@@ -0,0 +1,49 @@\n+// 2015-01-02  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+// Copyright (C) 2005-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <string>\n+\n+int\n+main ()\n+{\n+  std::string x;\n+  x.insert (x.begin (), 10, 'x');\n+  const char test[] = \"test\";\n+  x.replace (x.begin (), x.end (), test, 4);\n+  x.replace (x.begin (), x.end (), test);\n+  char best[] = \"best\";\n+  x.replace (x.begin (), x.end (), best, best + 4);\n+  x.replace (x.begin (), x.end (), x);\n+  x.erase (x.begin (), x.end ());\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring w;\n+  w.insert (w.begin (), 10, L'x');\n+  const wchar_t west[] = L\"west\";\n+  w.replace (w.begin (), w.end (), west, 4);\n+  w.replace (w.begin (), w.end (), west);\n+  wchar_t rest[] = L\"rest\";\n+  w.replace (w.begin (), w.end (), rest, rest + 4);\n+  w.replace (w.begin (), w.end (), w);\n+  w.erase (w.begin (), w.end ());\n+#endif\n+  return 0;\n+}"}]}