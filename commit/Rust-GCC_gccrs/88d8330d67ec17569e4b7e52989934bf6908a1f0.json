{"sha": "88d8330d67ec17569e4b7e52989934bf6908a1f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkODMzMGQ2N2VjMTc1NjllNGI3ZTUyOTg5OTM0YmY2OTA4YTFmMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-16T22:49:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-16T22:49:07Z"}, "message": "re PR rtl-optimization/54870 (gfortran.dg/array_constructor_4.f90 FAILs)\n\n\tPR rtl-optimization/54870\n\t* tree.h (TREE_ADDRESSABLE): Document special usage on SSA_NAME.\n\t* cfgexpand.c (update_alias_info_with_stack_vars ): Set it on the\n\tSSA_NAME pointer that points to a partition if there is at least\n\tone variable with it set in the partition.\n\t* dse.c (local_variable_can_escape): New predicate.\n\t(can_escape): Call it.\n\t* gimplify.c (mark_addressable): If this is a partitioned decl, also\n\tmark the SSA_NAME pointer that points to a partition.\n\nFrom-SVN: r192517", "tree": {"sha": "01d1822515deb56bf92d32e9ff0cc1bcea39dc1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d1822515deb56bf92d32e9ff0cc1bcea39dc1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d8330d67ec17569e4b7e52989934bf6908a1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d8330d67ec17569e4b7e52989934bf6908a1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d8330d67ec17569e4b7e52989934bf6908a1f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d8330d67ec17569e4b7e52989934bf6908a1f0/comments", "author": null, "committer": null, "parents": [{"sha": "da4fdf2d3ff45366d9378882ad1646306ceee305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4fdf2d3ff45366d9378882ad1646306ceee305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4fdf2d3ff45366d9378882ad1646306ceee305"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "4ae1600d71cc18fd381123a43edd1d1be908ca09", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=88d8330d67ec17569e4b7e52989934bf6908a1f0", "patch": "@@ -635,6 +635,8 @@ update_alias_info_with_stack_vars (void)\n \t\t\t\t\t   (void *)(size_t) uid)) = part;\n \t  *((tree *) pointer_map_insert (cfun->gimple_df->decls_to_pointers,\n \t\t\t\t\t decl)) = name;\n+\t  if (TREE_ADDRESSABLE (decl))\n+\t    TREE_ADDRESSABLE (name) = 1;\n \t}\n \n       /* Make the SSA name point to all partition members.  */"}, {"sha": "631a1f20ac76a58399aad74d690b2b393db24312", "filename": "gcc/dse.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=88d8330d67ec17569e4b7e52989934bf6908a1f0", "patch": "@@ -989,7 +989,32 @@ delete_dead_store_insn (insn_info_t insn_info)\n   insn_info->wild_read = false;\n }\n \n-/* Check if EXPR can possibly escape the current function scope.  */\n+/* Return whether DECL, a local variable, can possibly escape the current\n+   function scope.  */\n+\n+static bool\n+local_variable_can_escape (tree decl)\n+{\n+  if (TREE_ADDRESSABLE (decl))\n+    return true;\n+\n+  /* If this is a partitioned variable, we need to consider all the variables\n+     in the partition.  This is necessary because a store into one of them can\n+     be replaced with a store into another and this may not change the outcome\n+     of the escape analysis.  */\n+  if (cfun->gimple_df->decls_to_pointers != NULL)\n+    {\n+      void *namep\n+\t= pointer_map_contains (cfun->gimple_df->decls_to_pointers, decl);\n+      if (namep)\n+\treturn TREE_ADDRESSABLE (*(tree *)namep);\n+    }\n+\n+  return false;\n+}\n+\n+/* Return whether EXPR can possibly escape the current function scope.  */\n+\n static bool\n can_escape (tree expr)\n {\n@@ -998,7 +1023,11 @@ can_escape (tree expr)\n     return true;\n   base = get_base_address (expr);\n   if (DECL_P (base)\n-      && !may_be_aliased (base))\n+      && !may_be_aliased (base)\n+      && !(TREE_CODE (base) == VAR_DECL\n+\t   && !DECL_EXTERNAL (base)\n+\t   && !TREE_STATIC (base)\n+\t   && local_variable_can_escape (base)))\n     return false;\n   return true;\n }"}, {"sha": "14e7007e56c380b75564cddc95fc37de7e2bb8b8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=88d8330d67ec17569e4b7e52989934bf6908a1f0", "patch": "@@ -116,6 +116,19 @@ mark_addressable (tree x)\n       && TREE_CODE (x) != RESULT_DECL)\n     return;\n   TREE_ADDRESSABLE (x) = 1;\n+\n+  /* Also mark the artificial SSA_NAME that points to the partition of X.  */\n+  if (TREE_CODE (x) == VAR_DECL\n+      && !DECL_EXTERNAL (x)\n+      && !TREE_STATIC (x)\n+      && cfun->gimple_df != NULL\n+      && cfun->gimple_df->decls_to_pointers != NULL)\n+    {\n+      void *namep\n+\t= pointer_map_contains (cfun->gimple_df->decls_to_pointers, x); \n+      if (namep)\n+\tTREE_ADDRESSABLE (*(tree *)namep) = 1;\n+    }\n }\n \n /* Return a hash value for a formal temporary table entry.  */"}, {"sha": "c6a5eab502437ced701559d1d0219d7b82f1a769", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d8330d67ec17569e4b7e52989934bf6908a1f0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=88d8330d67ec17569e4b7e52989934bf6908a1f0", "patch": "@@ -484,9 +484,10 @@ struct GTY(()) tree_base {\n \n        TREE_ADDRESSABLE in\n            VAR_DECL, PARM_DECL, RESULT_DECL, FUNCTION_DECL, LABEL_DECL\n+           SSA_NAME\n            all types\n            CONSTRUCTOR, IDENTIFIER_NODE\n-           STMT_EXPR, it means we want the result of the enclosed expression\n+           STMT_EXPR\n \n        CALL_EXPR_TAILCALL in\n            CALL_EXPR\n@@ -1085,15 +1086,18 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* In VAR_DECL, PARM_DECL and RESULT_DECL nodes, nonzero means address\n    of this is needed.  So it cannot be in a register.\n    In a FUNCTION_DECL it has no meaning.\n-   In CONSTRUCTOR nodes, it means object constructed must be in memory.\n    In LABEL_DECL nodes, it means a goto for this label has been seen\n    from a place outside all binding contours that restore stack levels.\n+   In an artificial SSA_NAME that points to a stack partition with at least\n+   two variables, it means that at least one variable has TREE_ADDRESSABLE.\n    In ..._TYPE nodes, it means that objects of this type must be fully\n    addressable.  This means that pieces of this object cannot go into\n    register parameters, for example.  If this a function type, this\n    means that the value must be returned in memory.\n+   In CONSTRUCTOR nodes, it means object constructed must be in memory.\n    In IDENTIFIER_NODEs, this means that some extern decl for this name\n-   had its address taken.  That matters for inline functions.  */\n+   had its address taken.  That matters for inline functions.\n+   In a STMT_EXPR, it means we want the result of the enclosed expression.  */\n #define TREE_ADDRESSABLE(NODE) ((NODE)->base.addressable_flag)\n \n /* Set on a CALL_EXPR if the call is in a tail position, ie. just before the"}]}