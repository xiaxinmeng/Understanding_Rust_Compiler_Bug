{"sha": "696d5fa14225f7a2665f674c5e8b4f2609823cad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2ZDVmYTE0MjI1ZjdhMjY2NWY2NzRjNWU4YjRmMjYwOTgyM2NhZA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim.kuvyrkov@linaro.org", "date": "2015-02-19T08:31:14Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2015-02-19T08:31:14Z"}, "message": "re PR debug/64935 (compare debug failure during building of Linux kernel)\n\nFix PR64935\n\n\t* haifa-sched.c (enum rfs_decision, rfs_str): Remove RFS_DEBUG.\n\t(rank_for_schedule_debug): Update.\n\t(ready_sort): Make static.  Move sorting logic to ...\n\t(ready_sort_debug, ready_sort_real): New static functions.\n\t(schedule_block): Sort both debug insns and real insns in preparation\n\tfor ready list trimming.  Improve debug output.\n\t* sched-int.h (ready_sort): Remove global declaration.\n\n\t* gcc.dg/pr64935-1.c, gcc.dg/pr64935-2.c: New tests.\n\nFrom-SVN: r220808", "tree": {"sha": "cebf2f546866419dc7a0e7c8e533ddfc1174fb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cebf2f546866419dc7a0e7c8e533ddfc1174fb44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/696d5fa14225f7a2665f674c5e8b4f2609823cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696d5fa14225f7a2665f674c5e8b4f2609823cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696d5fa14225f7a2665f674c5e8b4f2609823cad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696d5fa14225f7a2665f674c5e8b4f2609823cad/comments", "author": {"login": "maxim-kuvyrkov", "id": 12545699, "node_id": "MDQ6VXNlcjEyNTQ1Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/12545699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxim-kuvyrkov", "html_url": "https://github.com/maxim-kuvyrkov", "followers_url": "https://api.github.com/users/maxim-kuvyrkov/followers", "following_url": "https://api.github.com/users/maxim-kuvyrkov/following{/other_user}", "gists_url": "https://api.github.com/users/maxim-kuvyrkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxim-kuvyrkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxim-kuvyrkov/subscriptions", "organizations_url": "https://api.github.com/users/maxim-kuvyrkov/orgs", "repos_url": "https://api.github.com/users/maxim-kuvyrkov/repos", "events_url": "https://api.github.com/users/maxim-kuvyrkov/events{/privacy}", "received_events_url": "https://api.github.com/users/maxim-kuvyrkov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a627e40a8c2809d6e2a87e3b6cfabeb2f10c7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a627e40a8c2809d6e2a87e3b6cfabeb2f10c7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a627e40a8c2809d6e2a87e3b6cfabeb2f10c7a7"}], "stats": {"total": 167, "additions": 128, "deletions": 39}, "files": [{"sha": "8c57f97564d26048ed708dddf57125f319c5cc22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=696d5fa14225f7a2665f674c5e8b4f2609823cad", "patch": "@@ -1,3 +1,13 @@\n+2015-02-19  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+        * haifa-sched.c (enum rfs_decision, rfs_str): Remove RFS_DEBUG.\n+        (rank_for_schedule_debug): Update.\n+        (ready_sort): Make static.  Move sorting logic to ...\n+        (ready_sort_debug, ready_sort_real): New static functions.\n+        (schedule_block): Sort both debug insns and real insns in preparation\n+        for ready list trimming.  Improve debug output.\n+        * sched-int.h (ready_sort): Remove global declaration.\n+\n 2015-02-18  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* ipa-icf.c (sem_function::equals_private): Adjust."}, {"sha": "ad2450b7da1305eeb2a3206693d037871d8916cb", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=696d5fa14225f7a2665f674c5e8b4f2609823cad", "patch": "@@ -2573,15 +2573,15 @@ model_set_excess_costs (rtx_insn **insns, int count)\n \n /* Enum of rank_for_schedule heuristic decisions.  */\n enum rfs_decision {\n-  RFS_DEBUG, RFS_LIVE_RANGE_SHRINK1, RFS_LIVE_RANGE_SHRINK2,\n+  RFS_LIVE_RANGE_SHRINK1, RFS_LIVE_RANGE_SHRINK2,\n   RFS_SCHED_GROUP, RFS_PRESSURE_DELAY, RFS_PRESSURE_TICK,\n   RFS_FEEDS_BACKTRACK_INSN, RFS_PRIORITY, RFS_SPECULATION,\n   RFS_SCHED_RANK, RFS_LAST_INSN, RFS_PRESSURE_INDEX,\n   RFS_DEP_COUNT, RFS_TIE, RFS_FUSION, RFS_N };\n \n /* Corresponding strings for print outs.  */\n static const char *rfs_str[RFS_N] = {\n-  \"RFS_DEBUG\", \"RFS_LIVE_RANGE_SHRINK1\", \"RFS_LIVE_RANGE_SHRINK2\",\n+  \"RFS_LIVE_RANGE_SHRINK1\", \"RFS_LIVE_RANGE_SHRINK2\",\n   \"RFS_SCHED_GROUP\", \"RFS_PRESSURE_DELAY\", \"RFS_PRESSURE_TICK\",\n   \"RFS_FEEDS_BACKTRACK_INSN\", \"RFS_PRIORITY\", \"RFS_SPECULATION\",\n   \"RFS_SCHED_RANK\", \"RFS_LAST_INSN\", \"RFS_PRESSURE_INDEX\",\n@@ -2617,12 +2617,11 @@ rank_for_schedule_debug (const void *x, const void *y)\n \n   /* Schedule debug insns as early as possible.  */\n   if (DEBUG_INSN_P (tmp) && !DEBUG_INSN_P (tmp2))\n-    return rfs_result (RFS_DEBUG, -1, tmp, tmp2);\n+    return -1;\n   else if (!DEBUG_INSN_P (tmp) && DEBUG_INSN_P (tmp2))\n-    return rfs_result (RFS_DEBUG, 1, tmp, tmp2);\n+    return 1;\n   else if (DEBUG_INSN_P (tmp) && DEBUG_INSN_P (tmp2))\n-    return rfs_result (RFS_DEBUG, INSN_LUID (tmp) - INSN_LUID (tmp2),\n-\t\t       tmp, tmp2);\n+    return INSN_LUID (tmp) - INSN_LUID (tmp2);\n   else\n     return INSN_RFS_DEBUG_ORIG_ORDER (tmp2) - INSN_RFS_DEBUG_ORIG_ORDER (tmp);\n }\n@@ -3085,48 +3084,45 @@ print_rank_for_schedule_stats (const char *prefix,\n       }\n }\n \n-/* Sort the ready list READY by ascending priority, using the SCHED_SORT\n-   macro.  */\n-\n-void\n-ready_sort (struct ready_list *ready)\n+/* Separate DEBUG_INSNS from normal insns.  DEBUG_INSNs go to the end\n+   of array.  */\n+static void\n+ready_sort_debug (struct ready_list *ready)\n {\n   int i;\n   rtx_insn **first = ready_lastpos (ready);\n-  int n_ready_non_debug = ready->n_ready;\n \n   for (i = 0; i < ready->n_ready; ++i)\n-    {\n-      if (DEBUG_INSN_P (first[i]))\n-\t--n_ready_non_debug;\n-      else\n-\t{\n-\t  INSN_RFS_DEBUG_ORIG_ORDER (first[i]) = i;\n+    if (!DEBUG_INSN_P (first[i]))\n+      INSN_RFS_DEBUG_ORIG_ORDER (first[i]) = i;\n \n-\t  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n-\t    setup_insn_reg_pressure_info (first[i]);\n-\t}\n-    }\n+  qsort (first, ready->n_ready, sizeof (rtx), rank_for_schedule_debug);\n+}\n \n-  if (sched_pressure == SCHED_PRESSURE_MODEL\n-      && model_curr_point < model_num_insns)\n-    model_set_excess_costs (first, ready->n_ready);\n+/* Sort non-debug insns in the ready list READY by ascending priority.\n+   Assumes that all debug insns are separated from the real insns.  */\n+static void\n+ready_sort_real (struct ready_list *ready)\n+{\n+  int i;\n+  rtx_insn **first = ready_lastpos (ready);\n+  int n_ready_real = ready->n_ready - ready->n_debug;\n+\n+  if (sched_pressure == SCHED_PRESSURE_WEIGHTED)\n+    for (i = 0; i < n_ready_real; ++i)\n+      setup_insn_reg_pressure_info (first[i]);\n+  else if (sched_pressure == SCHED_PRESSURE_MODEL\n+\t   && model_curr_point < model_num_insns)\n+    model_set_excess_costs (first, n_ready_real);\n \n   rank_for_schedule_stats_t stats1;\n   if (sched_verbose >= 4)\n     stats1 = rank_for_schedule_stats;\n \n-  if (n_ready_non_debug < ready->n_ready)\n-    /* Separate DEBUG_INSNS from normal insns.  DEBUG_INSNs go to the end\n-       of array.  */\n-    qsort (first, ready->n_ready, sizeof (rtx), rank_for_schedule_debug);\n-  else\n-    {\n-      if (n_ready_non_debug == 2)\n-\tswap_sort (first, n_ready_non_debug);\n-      else if (n_ready_non_debug > 2)\n-\tqsort (first, n_ready_non_debug, sizeof (rtx), rank_for_schedule);\n-    }\n+  if (n_ready_real == 2)\n+    swap_sort (first, n_ready_real);\n+  else if (n_ready_real > 2)\n+    qsort (first, n_ready_real, sizeof (rtx), rank_for_schedule);\n \n   if (sched_verbose >= 4)\n     {\n@@ -3135,6 +3131,16 @@ ready_sort (struct ready_list *ready)\n     }\n }\n \n+/* Sort the ready list READY by ascending priority.  */\n+static void\n+ready_sort (struct ready_list *ready)\n+{\n+  if (ready->n_debug > 0)\n+    ready_sort_debug (ready);\n+  else\n+    ready_sort_real (ready);\n+}\n+\n /* PREV is an insn that is ready to execute.  Adjust its priority if that\n    will help shorten or lengthen register lifetimes as appropriate.  Also\n    provide a hook for the target to tweak itself.  */\n@@ -6495,7 +6501,8 @@ schedule_block (basic_block *target_bb, state_t init_state)\n   if (!reload_completed\n       && ready.n_ready - ready.n_debug > MAX_SCHED_READY_INSNS)\n     {\n-      ready_sort (&ready);\n+      ready_sort_debug (&ready);\n+      ready_sort_real (&ready);\n \n       /* Find first free-standing insn past MAX_SCHED_READY_INSNS.\n          If there are debug insns, we know they're first.  */\n@@ -6506,7 +6513,8 @@ schedule_block (basic_block *target_bb, state_t init_state)\n       if (sched_verbose >= 2)\n \t{\n \t  fprintf (sched_dump,\n-\t\t   \";;\\t\\tReady list on entry: %d insns\\n\", ready.n_ready);\n+\t\t   \";;\\t\\tReady list on entry: %d insns:  \", ready.n_ready);\n+\t  debug_ready_list (&ready);\n \t  fprintf (sched_dump,\n \t\t   \";;\\t\\t before reload => truncated to %d insns\\n\", i);\n \t}"}, {"sha": "1cb0e2d344de84e11ab64b292ae581f2112ebc4b", "filename": "gcc/sched-int.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=696d5fa14225f7a2665f674c5e8b4f2609823cad", "patch": "@@ -1400,7 +1400,6 @@ extern int dfa_lookahead;\n \n extern int autopref_multipass_dfa_lookahead_guard (rtx_insn *, int);\n \n-extern void ready_sort (struct ready_list *);\n extern rtx_insn *ready_element (struct ready_list *, int);\n extern rtx_insn **ready_lastpos (struct ready_list *);\n "}, {"sha": "9c3570c1cab5187d97efd2704137bf0062164cb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=696d5fa14225f7a2665f674c5e8b4f2609823cad", "patch": "@@ -1,3 +1,7 @@\n+2015-02-19  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+        * gcc.dg/pr64935-1.c, gcc.dg/pr64935-2.c: New tests.\n+\n 2015-02-19  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n \t* testsuite/lib/target-supports.exp (check_compile): Save/restore"}, {"sha": "0fc6b58caed4f8570d55749383012beab91248fd", "filename": "gcc/testsuite/gcc.dg/pr64935-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64935-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64935-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64935-1.c?ref=696d5fa14225f7a2665f674c5e8b4f2609823cad", "patch": "@@ -0,0 +1,54 @@\n+/* PR rtl-optimization/64935 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Wno-shift-count-overflow -O2 -fcompare-debug\" } */\n+\n+int a[] = {}, b[] = {}, c[] = {}, d[] = {}, e[] = {}, f[] = {}, h[] = {};\n+int g[] = { 0 };\n+int i, l, s, w, x, y, z, t2, t3, t5;\n+unsigned long j, m, o, t4;\n+long k, n, p, q, r, t, u, v, t1;\n+fn1 ()\n+{\n+  int t6;\n+  for (; i; i++)\n+    {\n+      t5 = a[q] ^ b[p >> 1] ^ c[o >> 1 & 1] ^ d[n >> 1 & 1] ^ e[m >> 1 & 1]\n+           ^ f[l >> 1 & 1] ^ g[0] ^ h[j & 1];\n+      t4 = a[j] ^ b[q >> 1] ^ c[p] ^ d[o] ^ e[n] ^ f[m] ^ g[l >> 8] ^ h[k];\n+      t3 = a[k >> 1] ^ b[j & 5] ^ d[p >> 32] ^ e[o >> 4] ^ f[n >> 6]\n+           ^ g[m >> 8] ^ h[l];\n+      t2 = a[l >> 6] ^ b[k & 1] ^ c[j >> 1] ^ d[q >> 32] ^ e[p >> 4]\n+           ^ f[o >> 6] ^ g[n >> 8] ^ h[m & 1];\n+      t1 = a[m >> 6] ^ b[l & 1] ^ c[k & 15] ^ d[j >> 2] ^ e[q >> 4] ^ f[p >> 6]\n+           ^ g[o >> 8] ^ h[n & 1];\n+      z = a[n >> 56] ^ b[m & 15] ^ c[l & 15] ^ d[k >> 2] ^ e[j >> 4]\n+          ^ f[q >> 6] ^ g[p >> 8] ^ h[o & 1];\n+      y = a[o >> 56] ^ b[n & 15] ^ c[m >> 40] ^ d[l >> 2] ^ e[k >> 4]\n+          ^ f[j >> 6] ^ g[q >> 8] ^ h[p & 1];\n+      x = a[p >> 56] ^ b[o & 15] ^ c[n >> 40] ^ d[m >> 2] ^ e[l >> 4]\n+          ^ f[k >> 6] ^ g[j >> 8] ^ h[q & 1];\n+      q = j = t4;\n+      k = t3;\n+      l = t2;\n+      m = t1;\n+      n = z;\n+      o = y;\n+      p = a[t6] ^ b[0] ^ c[w] ^ d[v] ^ e[u] ^ f[t] ^ g[s] ^ h[r];\n+      t4 = a[r >> 1] ^ b[t6 & 1] ^ d[w >> 1] ^ e[v >> 1] ^ f[u >> 1]\n+           ^ g[t >> 1] ^ h[s];\n+      t3 = a[s >> 6] ^ b[r & 1] ^ c[t6 & 5] ^ d[0] ^ e[w >> 4] ^ f[v >> 6]\n+           ^ g[u >> 8] ^ h[t & 1];\n+      t2 = a[t >> 6] ^ b[s] ^ c[r & 15] ^ d[t6 >> 1] ^ e[0] ^ f[w >> 6]\n+           ^ g[v >> 8] ^ h[u & 1];\n+      t1 = a[u >> 6] ^ b[t & 15] ^ c[s & 5] ^ d[r >> 32] ^ e[t6 >> 4]\n+           ^ g[w >> 8] ^ h[v & 1];\n+      z = a[v >> 56] ^ b[u >> 48 & 1] ^ c[t >> 40 & 1] ^ d[s] ^ e[r >> 1 & 1]\n+          ^ f[t6 >> 1 & 1] ^ g[0] ^ h[w & 1] ^ z;\n+      t6 = t5;\n+      r = t4;\n+      s = 0;\n+      t = u = t1;\n+      v = z;\n+      w = y;\n+    }\n+}"}, {"sha": "6921a21d76abdfb24f112894d4fcf9f90cd7feb3", "filename": "gcc/testsuite/gcc.dg/pr64935-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64935-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696d5fa14225f7a2665f674c5e8b4f2609823cad/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64935-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64935-2.c?ref=696d5fa14225f7a2665f674c5e8b4f2609823cad", "patch": "@@ -0,0 +1,14 @@\n+/* PR rtl-optimization/64935 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fschedule-insns --param=max-sched-ready-insns=0 -fcompare-debug\" } */\n+\n+void\n+foo (int *data, unsigned len, const int qlp_coeff[],\n+     unsigned order, int lp, int residual[], int i)\n+{\n+  int sum;\n+  sum = 0;\n+  sum += qlp_coeff[1] * data[i - 2];\n+  sum += qlp_coeff[0] * data[i - 1];\n+  residual[i] = data[i] - (sum >> lp);\n+}"}]}