{"sha": "80f0c69c2c698023f76d0e5db7e2b42e1fd7b637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmMGM2OWMyYzY5ODAyM2Y3NmQwZTVkYjdlMmI0MmUxZmQ3YjYzNw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-22T13:17:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:17:22Z"}, "message": "[Ada] Missing error on illegal categorization dependency\n\nThis patch modifies the analysis of subprogram declarations to ensure that an\naspect which is converted into a categorization pragma is properly taken into\naccount when verifying the dependencies of a subprogram unit.\n\n------------\n-- Source --\n------------\n\n--  pack.ads\n\npackage Pack is end Pack;\n\n--  proc1.ads\n\nwith Pack;\n\nprocedure Proc1 with Pure;\n\n--  proc2.ads\n\nwith Pack;\n\nprocedure Proc2;\npragma Pure (Proc2);\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c proc1.ads\n$ gcc -c proc2.ads\nproc1.ads:1:06: cannot depend on \"Pack\" (wrong categorization)\nproc1.ads:1:06: pure unit cannot depend on non-pure unit\nproc2.ads:1:06: cannot depend on \"Pack\" (wrong categorization)\nproc2.ads:1:06: pure unit cannot depend on non-pure unit\n\n2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Analyze_Subprogram_Declaration): Set the proper\n\tcategorization of the unit after processing the aspects in case one of\n\tits aspects is converted into a categorization pragma.\n\nFrom-SVN: r260506", "tree": {"sha": "bd5e35605e38e6b79c8cb9bf7ab8721a6bbc1cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd5e35605e38e6b79c8cb9bf7ab8721a6bbc1cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "440ed9f839a068948c72441eda2ef3da515f4656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440ed9f839a068948c72441eda2ef3da515f4656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/440ed9f839a068948c72441eda2ef3da515f4656"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "71e0aaf1f987095b72150c7012b646775a752a0e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=80f0c69c2c698023f76d0e5db7e2b42e1fd7b637", "patch": "@@ -1,3 +1,9 @@\n+2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Declaration): Set the proper\n+\tcategorization of the unit after processing the aspects in case one of\n+\tits aspects is converted into a categorization pragma.\n+\n 2018-05-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Warn_Overlay): Do not emit a wawrning on an object"}, {"sha": "55298e9602f76621a74b1556eb790112e10aefd9", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f0c69c2c698023f76d0e5db7e2b42e1fd7b637/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=80f0c69c2c698023f76d0e5db7e2b42e1fd7b637", "patch": "@@ -4844,18 +4844,6 @@ package body Sem_Ch6 is\n          Set_Kill_Elaboration_Checks (Designator);\n       end if;\n \n-      if Scop /= Standard_Standard and then not Is_Child_Unit (Designator) then\n-         Set_Categorization_From_Scope (Designator, Scop);\n-\n-      else\n-         --  For a compilation unit, check for library-unit pragmas\n-\n-         Push_Scope (Designator);\n-         Set_Categorization_From_Pragmas (N);\n-         Validate_Categorization_Dependency (N, Designator);\n-         Pop_Scope;\n-      end if;\n-\n       --  For a compilation unit, set body required. This flag will only be\n       --  reset if a valid Import or Interface pragma is processed later on.\n \n@@ -4883,19 +4871,35 @@ package body Sem_Ch6 is\n          Write_Eol;\n       end if;\n \n-      if Is_Protected_Type (Current_Scope) then\n-\n-         --  Indicate that this is a protected operation, because it may be\n-         --  used in subsequent declarations within the protected type.\n+      --  Indicate that this is a protected operation, because it may be used\n+      --  in subsequent declarations within the protected type.\n \n+      if Is_Protected_Type (Current_Scope) then\n          Set_Convention (Designator, Convention_Protected);\n       end if;\n \n       List_Inherited_Pre_Post_Aspects (Designator);\n \n+      --  Process the aspects before establishing the proper categorization in\n+      --  case the subprogram is a compilation unit and one of its aspects is\n+      --  converted into a categorization pragma.\n+\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Designator);\n       end if;\n+\n+      if Scop /= Standard_Standard and then not Is_Child_Unit (Designator) then\n+         Set_Categorization_From_Scope (Designator, Scop);\n+\n+      --  Otherwise the unit is a compilation unit and/or a child unit. Set the\n+      --  proper categorization of the unit based on its pragmas.\n+\n+      else\n+         Push_Scope (Designator);\n+         Set_Categorization_From_Pragmas (N);\n+         Validate_Categorization_Dependency (N, Designator);\n+         Pop_Scope;\n+      end if;\n    end Analyze_Subprogram_Declaration;\n \n    --------------------------------------"}]}