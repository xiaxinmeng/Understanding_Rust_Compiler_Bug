{"sha": "6c79057fae6bbb36c4a4fd61c5b7107a16b71b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3OTA1N2ZhZTZiYmIzNmM0YTRmZDYxYzViNzEwN2ExNmI3MWIxNw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-30T20:36:47Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-13T16:38:52Z"}, "message": "Don't maintain a warning spec for 'UNKNOWN_LOCATION'/'BUILTINS_LOCATION' [PR101574]\n\nThis resolves PR101574 \"gcc/sparseset.h:215:20: error: suggest parentheses\naround assignment used as truth value [-Werror=parentheses]\", as (bogusly)\nreported at commit a61f6afbee370785cf091fe46e2e022748528307:\n\n    In file included from [...]/source-gcc/gcc/lra-lives.c:43:\n    [...]/source-gcc/gcc/lra-lives.c: In function \u2018void make_hard_regno_dead(int)\u2019:\n    [...]/source-gcc/gcc/sparseset.h:215:20: error: suggest parentheses around assignment used as truth value [-Werror=parentheses]\n      215 |        && (((ITER) = sparseset_iter_elm (SPARSESET)) || 1);             \\\n          |            ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    [...]/source-gcc/gcc/lra-lives.c:304:3: note: in expansion of macro \u2018EXECUTE_IF_SET_IN_SPARSESET\u2019\n      304 |   EXECUTE_IF_SET_IN_SPARSESET (pseudos_live, i)\n          |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\tgcc/\n\tPR bootstrap/101574\n\t* diagnostic-spec.c (warning_suppressed_at, copy_warning): Handle\n\t'RESERVED_LOCATION_P' locations.\n\t* warning-control.cc (get_nowarn_spec, suppress_warning)\n\t(copy_warning): Likewise.", "tree": {"sha": "db148081651c13c52fd54fc81d33e58c00857d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db148081651c13c52fd54fc81d33e58c00857d61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1985392242d9a6bf8b091f78143d3c1fa9ccd284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1985392242d9a6bf8b091f78143d3c1fa9ccd284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1985392242d9a6bf8b091f78143d3c1fa9ccd284"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "85ffb725c02846862644e831ca1d7b3c54cffefb", "filename": "gcc/diagnostic-spec.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17/gcc%2Fdiagnostic-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17/gcc%2Fdiagnostic-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.c?ref=6c79057fae6bbb36c4a4fd61c5b7107a16b71b17", "patch": "@@ -115,6 +115,8 @@ GTY(()) xint_hash_map_t *nowarn_map;\n bool\n warning_suppressed_at (location_t loc, opt_code opt /* = all_warnings */)\n {\n+  gcc_checking_assert (!RESERVED_LOCATION_P (loc));\n+\n   if (!nowarn_map)\n     return false;\n \n@@ -137,6 +139,8 @@ bool\n suppress_warning_at (location_t loc, opt_code opt /* = all_warnings */,\n \t\t     bool supp /* = true */)\n {\n+  gcc_checking_assert (!RESERVED_LOCATION_P (loc));\n+\n   const nowarn_spec_t optspec (supp ? opt : opt_code ());\n \n   if (nowarn_spec_t *pspec = nowarn_map ? nowarn_map->get (loc) : NULL)\n@@ -173,8 +177,20 @@ copy_warning (location_t to, location_t from)\n   if (!nowarn_map)\n     return;\n \n-  if (nowarn_spec_t *pspec = nowarn_map->get (from))\n-    nowarn_map->put (to, *pspec);\n+  nowarn_spec_t *from_spec;\n+  if (RESERVED_LOCATION_P (from))\n+    from_spec = NULL;\n+  else\n+    from_spec = nowarn_map->get (from);\n+  if (RESERVED_LOCATION_P (to))\n+    /* We cannot set no-warning dispositions for 'to', so we have no chance but\n+       lose those potentially set for 'from'.  */\n+    ;\n   else\n-    nowarn_map->remove (to);\n+    {\n+      if (from_spec)\n+\tnowarn_map->put (to, *from_spec);\n+      else\n+\tnowarn_map->remove (to);\n+    }\n }"}, {"sha": "36a47ab6bae74d994e24f23d0598e1deaed1362e", "filename": "gcc/warning-control.cc", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17/gcc%2Fwarning-control.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c79057fae6bbb36c4a4fd61c5b7107a16b71b17/gcc%2Fwarning-control.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwarning-control.cc?ref=6c79057fae6bbb36c4a4fd61c5b7107a16b71b17", "patch": "@@ -89,7 +89,7 @@ get_nowarn_spec (const_tree expr)\n {\n   const location_t loc = get_location (expr);\n \n-  if (loc == UNKNOWN_LOCATION)\n+  if (RESERVED_LOCATION_P (loc))\n     return NULL;\n \n   if (!get_no_warning_bit (expr))\n@@ -105,6 +105,9 @@ get_nowarn_spec (const gimple *stmt)\n {\n   const location_t loc = get_location (stmt);\n \n+  if (RESERVED_LOCATION_P (loc))\n+    return NULL;\n+\n   if (!get_no_warning_bit (stmt))\n     return NULL;\n \n@@ -158,7 +161,8 @@ suppress_warning (tree expr, opt_code opt /* = all_warnings */,\n \n   const location_t loc = get_location (expr);\n \n-  supp = suppress_warning_at (loc, opt, supp) || supp;\n+  if (!RESERVED_LOCATION_P (loc))\n+    supp = suppress_warning_at (loc, opt, supp) || supp;\n   set_no_warning_bit (expr, supp);\n }\n \n@@ -174,7 +178,8 @@ suppress_warning (gimple *stmt, opt_code opt /* = all_warnings */,\n \n   const location_t loc = get_location (stmt);\n \n-  supp = suppress_warning_at (loc, opt, supp) || supp;\n+  if (!RESERVED_LOCATION_P (loc))\n+    supp = suppress_warning_at (loc, opt, supp) || supp;\n   set_no_warning_bit (stmt, supp);\n }\n \n@@ -186,24 +191,33 @@ void copy_warning (ToType to, FromType from)\n {\n   const location_t to_loc = get_location (to);\n \n-  if (nowarn_spec_t *from_map = get_nowarn_spec (from))\n-    {\n-      /* If there's an entry in the map the no-warning bit must be set.  */\n-      gcc_assert (get_no_warning_bit (from));\n+  bool supp = get_no_warning_bit (from);\n \n-      gcc_checking_assert (nowarn_map);\n-      nowarn_map->put (to_loc, *from_map);\n-      set_no_warning_bit (to, true);\n-    }\n+  nowarn_spec_t *from_spec = get_nowarn_spec (from);\n+  if (RESERVED_LOCATION_P (to_loc))\n+    /* We cannot set no-warning dispositions for 'to', so we have no chance but\n+       lose those potentially set for 'from'.  */\n+    ;\n   else\n     {\n-      if (nowarn_map)\n-\tnowarn_map->remove (to_loc);\n-\n-      /* The no-warning bit might be set even if there's no entry\n-\t in the map.  */\n-      set_no_warning_bit (to, get_no_warning_bit (from));\n+      if (from_spec)\n+\t{\n+\t  /* If there's an entry in the map the no-warning bit must be set.  */\n+\t  gcc_assert (supp);\n+\n+\t  gcc_checking_assert (nowarn_map);\n+\t  nowarn_map->put (to_loc, *from_spec);\n+\t}\n+      else\n+\t{\n+\t  if (nowarn_map)\n+\t    nowarn_map->remove (to_loc);\n+\t}\n     }\n+\n+  /* The no-warning bit might be set even if the map has not been consulted, or\n+     otherwise if there's no entry in the map.  */\n+  set_no_warning_bit (to, supp);\n }\n \n /* Copy the warning disposition mapping from one expression to another.  */"}]}