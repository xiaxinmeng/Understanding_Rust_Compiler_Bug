{"sha": "6d82c56288f1d7048a39427a827fe337c773f0f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4MmM1NjI4OGYxZDcwNDhhMzk0MjdhODI3ZmUzMzdjNzczZjBmNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-06-07T12:35:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-06-07T12:35:08Z"}, "message": "Add C++17 deduction guide for std::basic_string (P0433R2, partial)\n\n\t* include/bits/alloc_traits.h (__is_allocator, _RequireAllocator):\n\tNew trait and alias for detecting Allocator-like types.\n\t* include/bits/basic_string.h (basic_string): Add deduction guide\n\tfrom P0433.\n\t* include/ext/alloc_traits.h (__gnu_cxx::__alloc_traits): Add template\n\tparameter with default template argument that causes substitution\n\tfailures for types that cannot be allocators.\n\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: New.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc: New.\n\nFrom-SVN: r248967", "tree": {"sha": "0f22f2af42472dd70d75cabfe787c5fde2239805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f22f2af42472dd70d75cabfe787c5fde2239805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d82c56288f1d7048a39427a827fe337c773f0f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d82c56288f1d7048a39427a827fe337c773f0f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d82c56288f1d7048a39427a827fe337c773f0f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d82c56288f1d7048a39427a827fe337c773f0f5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83059741a0a58b6cccb105522bf7f07813a55c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83059741a0a58b6cccb105522bf7f07813a55c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83059741a0a58b6cccb105522bf7f07813a55c23"}], "stats": {"total": 237, "additions": 236, "deletions": 1}, "files": [{"sha": "19bab89c8e7ea84db438c55c8cb217804ea0af0e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6d82c56288f1d7048a39427a827fe337c773f0f5", "patch": "@@ -1,3 +1,15 @@\n+2017-06-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/alloc_traits.h (__is_allocator, _RequireAllocator):\n+\tNew trait and alias for detecting Allocator-like types.\n+\t* include/bits/basic_string.h (basic_string): Add deduction guide\n+\tfrom P0433.\n+\t* include/ext/alloc_traits.h (__gnu_cxx::__alloc_traits): Add template\n+\tparameter with default template argument that causes substitution\n+\tfailures for types that cannot be allocators.\n+\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: New.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc: New.\n+\n 2017-06-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/80939"}, {"sha": "86a48594ea12eda47f8ed6b3547f42d28bf32eea", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=6d82c56288f1d7048a39427a827fe337c773f0f5", "patch": "@@ -598,6 +598,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : is_copy_constructible<_Tp>\n     { };\n \n+#if __cplusplus >= 201103L\n+  // Trait to detect Allocator-like types.\n+  template<typename _Alloc, typename = void>\n+    struct __is_allocator : false_type { };\n+\n+  template<typename _Alloc>\n+    struct __is_allocator<_Alloc,\n+      __void_t<typename _Alloc::value_type,\n+\t       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>\n+    : true_type { };\n+\n+  template<typename _Alloc>\n+    using _RequireAllocator\n+      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "519d686063e1892bd9787537db3dfc1454a9be3d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6d82c56288f1d7048a39427a827fe337c773f0f5", "patch": "@@ -5674,6 +5674,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   };\n #endif  // !_GLIBCXX_USE_CXX11_ABI\n \n+#if __cpp_deduction_guides >= 201606\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  template<typename _InputIterator, typename _CharT\n+\t     = typename iterator_traits<_InputIterator>::value_type,\n+\t   typename _Allocator = allocator<_CharT>,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())\n+      -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;\n+_GLIBCXX_END_NAMESPACE_CXX11\n+#endif\n+\n   // operator+\n   /**\n    *  @brief  Concatenate two strings."}, {"sha": "fe5655100a41ecb68e7569870efe0d654f5fb242", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=6d82c56288f1d7048a39427a827fe337c773f0f5", "patch": "@@ -46,7 +46,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  * @brief  Uniform interface to C++98 and C++11 allocators.\n  * @ingroup allocators\n */\n-template<typename _Alloc>\n+template<typename _Alloc, typename = typename _Alloc::value_type>\n   struct __alloc_traits\n #if __cplusplus >= 201103L\n   : std::allocator_traits<_Alloc>"}, {"sha": "c9af333f28e9b08212188dbd72ff32435ded9356", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/deduction.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc?ref=6d82c56288f1d7048a39427a827fe337c773f0f5", "patch": "@@ -0,0 +1,118 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <string>\n+#include <testsuite_iterators.h>\n+\n+template<typename C>\n+  using input_iterator_seq\n+    = __gnu_test::test_container<C, __gnu_test::input_iterator_wrapper>;\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::string s0;\n+  std::allocator<char> a;\n+\n+  std::basic_string s1 = s0;\n+  check_type<std::string>(s1);\n+\n+  std::basic_string s2 = std::move(s0);\n+  check_type<std::string>(s2);\n+\n+  const std::basic_string s3 = s0;\n+  check_type<const std::string>(s3);\n+\n+  const std::basic_string s4 = s3;\n+  check_type<const std::string>(s4);\n+\n+  std::basic_string s5(s0, a);\n+  check_type<std::string>(s5);\n+\n+  std::basic_string s6(std::move(s0), a);\n+  check_type<std::string>(s6);\n+\n+  std::basic_string s7(s0, 0, 0);\n+  check_type<std::string>(s7);\n+}\n+\n+void\n+test02()\n+{\n+  char a[1] = {};\n+  input_iterator_seq<char> seq(a);\n+\n+  std::basic_string s1(seq.begin(), seq.end());\n+  check_type<std::string>(s1);\n+\n+  std::basic_string s2(seq.begin(), seq.end(), std::allocator<char>());\n+  check_type<std::string>(s2);\n+\n+  std::basic_string s3((char)1, 'a');\n+  check_type<std::string>(s3);\n+\n+  std::basic_string s4((char)1, 'a', std::allocator<char>());\n+  check_type<std::string>(s4);\n+}\n+\n+void\n+test03()\n+{\n+  char16_t a[1] = {};\n+  input_iterator_seq<char16_t> seq(a);\n+\n+  std::basic_string s1(seq.begin(), seq.end());\n+  check_type<std::u16string>(s1);\n+\n+  std::basic_string s2(seq.begin(), seq.end(), std::allocator<char16_t>());\n+  check_type<std::u16string>(s2);\n+\n+  std::basic_string s3((char16_t)1, u'a');\n+  check_type<std::u16string>(s3);\n+\n+  std::basic_string s4((char16_t)1, u'a', std::allocator<char16_t>());\n+  check_type<std::u16string>(s4);\n+}\n+\n+void\n+test04()\n+{\n+  char32_t a[1] = {};\n+  input_iterator_seq<char32_t> seq(a);\n+\n+  std::basic_string s1(seq.begin(), seq.end());\n+  check_type<std::u32string>(s1);\n+\n+  std::basic_string s2(seq.begin(), seq.end(), std::allocator<char32_t>());\n+  check_type<std::u32string>(s2);\n+\n+  std::basic_string s3((char32_t)1, U'a');\n+  check_type<std::u32string>(s3);\n+\n+  std::basic_string s4((char32_t)1, U'a', std::allocator<char32_t>());\n+  check_type<std::u32string>(s4);\n+}"}, {"sha": "1f8eadb355ad1d21ee4fb7404489b5ae7412bdab", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d82c56288f1d7048a39427a827fe337c773f0f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc?ref=6d82c56288f1d7048a39427a827fe337c773f0f5", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <string>\n+#include <testsuite_iterators.h>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test01()\n+{\n+  std::wstring s0;\n+  std::allocator<wchar_t> a;\n+\n+  std::basic_string s1 = s0;\n+  check_type<std::wstring>(s1);\n+\n+  std::basic_string s2 = std::move(s0);\n+  check_type<std::wstring>(s2);\n+\n+  const std::basic_string s3 = s0;\n+  check_type<const std::wstring>(s3);\n+\n+  const std::basic_string s4 = s2;\n+  check_type<const std::wstring>(s4);\n+\n+  std::basic_string s5(s0, a);\n+  check_type<std::wstring>(s5);\n+\n+  std::basic_string s6(std::move(s0), a);\n+  check_type<std::wstring>(s6);\n+\n+  std::basic_string s7(s0, 0, 0);\n+  check_type<std::wstring>(s7);\n+}\n+\n+void\n+test02()\n+{\n+  using namespace __gnu_test;\n+  wchar_t a[1] = {};\n+  test_container<wchar_t, input_iterator_wrapper> seq(a);\n+\n+  std::basic_string s1(seq.begin(), seq.end());\n+  check_type<std::wstring>(s1);\n+\n+  std::basic_string s2(seq.begin(), seq.end(), std::allocator<wchar_t>());\n+  check_type<std::wstring>(s2);\n+\n+  std::basic_string s3((wchar_t)1, L'a');\n+  check_type<std::wstring>(s3);\n+\n+  std::basic_string s4((wchar_t)1, L'a', std::allocator<wchar_t>());\n+  check_type<std::wstring>(s4);\n+}"}]}