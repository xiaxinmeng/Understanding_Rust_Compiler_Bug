{"sha": "c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdjYThlZjg3NTIwMWQ0ZWFhNjg1ZWRiYjMxZmM5N2VhYWE5MDNkOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-06T22:35:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-06T22:35:18Z"}, "message": "i386.h (enum ix86_enitity): Add X86_DIRFLAG.\n\n\t* config/i386/i386.h (enum ix86_enitity): Add X86_DIRFLAG.\n\t(enum x86_dirflag_state): New enum.\n\t(NUM_MODES_FOR_MODE_SWITCHING): Add X86_DIRFLAG_ANY.\n\t(machine_function): Remove needs_cld.\n\t(ix86_current_function_needs_cld): Remove.\n\t* config/i386/i386.c (ix86_set_func_type): Set\n\tix86_optimize_mode_switching[X86_DIRFLAG] to 1.\n\t(ix86_expand_prologue): Do not emit CLD here.\n\t(ix86_dirflag_mode_needed): New function.\n\t(ix86_dirflag_mode_entry): Ditto.\n\t(ix86_mode_needed): Handle X86_DIRFLAG entity.\n\t(ix86_mode_after): Ditto.\n\t(ix86_mode_entry): Ditto.\n\t(ix86_mode_exit): Ditto.\n\t(ix86_emit_mode_set): Ditto.\n\t* config/i386/i386.md (strmov_singleop): Set\n\tix86_optimize_mode_switching[X86_DIRFLAG] to 1 for TARGET_CLD.\n\tDo not set ix86_current_function_needs_cld.\n\t(rep_mov): Ditto.\n\t(strset_singleop): Ditto.\n\t(rep_stos): Ditto.\n\t(cmpstrnqi_nz_1): Ditto.\n\t(cmpstrnqi_1): Ditto.\n\t(strlenqi_1): Ditto.\n\nFrom-SVN: r237156", "tree": {"sha": "9f439388509de6078944a34a327284a7a0125c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f439388509de6078944a34a327284a7a0125c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/comments", "author": null, "committer": null, "parents": [{"sha": "1f40cff37998535a8f6f3eb6989327d8be3c8efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f40cff37998535a8f6f3eb6989327d8be3c8efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f40cff37998535a8f6f3eb6989327d8be3c8efb"}], "stats": {"total": 163, "additions": 130, "deletions": 33}, "files": [{"sha": "18f491a6dcbecadb436fd45860ba0ac73ad92413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "patch": "@@ -1,3 +1,30 @@\n+2016-06-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (enum ix86_enitity): Add X86_DIRFLAG.\n+\t(enum x86_dirflag_state): New enum.\n+\t(NUM_MODES_FOR_MODE_SWITCHING): Add X86_DIRFLAG_ANY.\n+\t(machine_function): Remove needs_cld.\n+\t(ix86_current_function_needs_cld): Remove.\n+\t* config/i386/i386.c (ix86_set_func_type): Set\n+\tix86_optimize_mode_switching[X86_DIRFLAG] to 1.\n+\t(ix86_expand_prologue): Do not emit CLD here.\n+\t(ix86_dirflag_mode_needed): New function.\n+\t(ix86_dirflag_mode_entry): Ditto.\n+\t(ix86_mode_needed): Handle X86_DIRFLAG entity.\n+\t(ix86_mode_after): Ditto.\n+\t(ix86_mode_entry): Ditto.\n+\t(ix86_mode_exit): Ditto.\n+\t(ix86_emit_mode_set): Ditto.\n+\t* config/i386/i386.md (strmov_singleop): Set\n+\tix86_optimize_mode_switching[X86_DIRFLAG] to 1 for TARGET_CLD.\n+\tDo not set ix86_current_function_needs_cld.\n+\t(rep_mov): Ditto.\n+\t(strset_singleop): Ditto.\n+\t(rep_stos): Ditto.\n+\t(cmpstrnqi_nz_1): Ditto.\n+\t(cmpstrnqi_1): Ditto.\n+\t(strlenqi_1): Ditto.\n+\n 2016-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71259\n@@ -229,7 +256,7 @@\n \n \t* config/ft32/ft32.c (ft32_setup_incoming_varargs,\n \tft32_expand_prolog, ft32_expand_epilogue):\n-        Handle pretend_args.\n+\tHandle pretend_args.\n \t* config/ft32/ft32.h: Remove OUTGOING_REG_PARM_STACK_SPACE.\n \t* config/ft32/ft32.md: Add pretend_returner.\n "}, {"sha": "b807a9a00041eb6009261819fcd253bb147f2b52", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "patch": "@@ -6823,6 +6823,8 @@ ix86_set_func_type (tree fndecl)\n \t  cfun->machine->func_type\n \t    = nargs == 2 ? TYPE_EXCEPTION : TYPE_INTERRUPT;\n \n+\t  ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+\n \t  /* Only dwarf2out.c can handle -WORD(AP) as a pointer argument.  */\n \t  if (write_symbols != NO_DEBUG && write_symbols != DWARF2_DEBUG)\n \t    sorry (\"Only DWARF debug format is supported for interrupt \"\n@@ -13817,16 +13819,6 @@ ix86_expand_prologue (void)\n   if (frame_pointer_needed && frame.red_zone_size)\n     emit_insn (gen_memory_blockage ());\n \n-  /* Emit cld instruction if stringops are used in the function.  Since\n-     we can't assume the direction flag in interrupt handler, we must\n-     emit cld instruction if stringops are used in interrupt handler or\n-     interrupt handler isn't a leaf function.  */\n-  if ((TARGET_CLD && ix86_current_function_needs_cld)\n-      || (!TARGET_CLD\n-\t  && cfun->machine->func_type != TYPE_NORMAL\n-\t  && (ix86_current_function_needs_cld || !crtl->is_leaf)))\n-    emit_insn (gen_cld ());\n-\n   /* SEH requires that the prologue end within 256 bytes of the start of\n      the function.  Prevent instruction schedules that would extend that.\n      Further, prevent alloca modifications to the stack pointer from being\n@@ -18600,6 +18592,35 @@ output_387_binary_op (rtx insn, rtx *operands)\n   return buf;\n }\n \n+/* Return needed mode for entity in optimize_mode_switching pass.  */\n+\n+static int\n+ix86_dirflag_mode_needed (rtx_insn *insn)\n+{\n+  if (CALL_P (insn))\n+    {\n+      if (cfun->machine->func_type == TYPE_NORMAL)\n+\treturn X86_DIRFLAG_ANY;\n+      else\n+\t/* No need to emit CLD in interrupt handler for TARGET_CLD.  */\n+\treturn TARGET_CLD ? X86_DIRFLAG_ANY : X86_DIRFLAG_RESET;\n+    }\n+\n+  if (recog_memoized (insn) < 0)\n+    return X86_DIRFLAG_ANY;\n+\n+  if (get_attr_type (insn) == TYPE_STR)\n+    {\n+      /* Emit cld instruction if stringops are used in the function.  */\n+      if (cfun->machine->func_type == TYPE_NORMAL)\n+\treturn TARGET_CLD ? X86_DIRFLAG_RESET : X86_DIRFLAG_ANY;\n+      else\n+\treturn X86_DIRFLAG_RESET;\n+    }\n+\n+  return X86_DIRFLAG_ANY;\n+}\n+\n /* Check if a 256bit AVX register is referenced inside of EXP.   */\n \n static bool\n@@ -18712,6 +18733,8 @@ ix86_mode_needed (int entity, rtx_insn *insn)\n {\n   switch (entity)\n     {\n+    case X86_DIRFLAG:\n+      return ix86_dirflag_mode_needed (insn);\n     case AVX_U128:\n       return ix86_avx_u128_mode_needed (insn);\n     case I387_TRUNC:\n@@ -18771,6 +18794,8 @@ ix86_mode_after (int entity, int mode, rtx_insn *insn)\n {\n   switch (entity)\n     {\n+    case X86_DIRFLAG:\n+      return mode;\n     case AVX_U128:\n       return ix86_avx_u128_mode_after (mode, insn);\n     case I387_TRUNC:\n@@ -18783,6 +18808,18 @@ ix86_mode_after (int entity, int mode, rtx_insn *insn)\n     }\n }\n \n+static int\n+ix86_dirflag_mode_entry (void)\n+{\n+  /* For TARGET_CLD or in the interrupt handler we can't assume\n+     direction flag state at function entry.  */\n+  if (TARGET_CLD\n+      || cfun->machine->func_type != TYPE_NORMAL)\n+    return X86_DIRFLAG_ANY;\n+\n+  return X86_DIRFLAG_RESET;\n+}\n+\n static int\n ix86_avx_u128_mode_entry (void)\n {\n@@ -18810,6 +18847,8 @@ ix86_mode_entry (int entity)\n {\n   switch (entity)\n     {\n+    case X86_DIRFLAG:\n+      return ix86_dirflag_mode_entry ();\n     case AVX_U128:\n       return ix86_avx_u128_mode_entry ();\n     case I387_TRUNC:\n@@ -18843,6 +18882,8 @@ ix86_mode_exit (int entity)\n {\n   switch (entity)\n     {\n+    case X86_DIRFLAG:\n+      return X86_DIRFLAG_ANY;\n     case AVX_U128:\n       return ix86_avx_u128_mode_exit ();\n     case I387_TRUNC:\n@@ -18986,6 +19027,10 @@ ix86_emit_mode_set (int entity, int mode, int prev_mode ATTRIBUTE_UNUSED,\n {\n   switch (entity)\n     {\n+    case X86_DIRFLAG:\n+      if (mode == X86_DIRFLAG_RESET)\n+\temit_insn (gen_cld ());\n+      break;\n     case AVX_U128:\n       if (mode == AVX_U128_CLEAN)\n \tix86_avx_emit_vzeroupper (regs_live);"}, {"sha": "cab0a5d013bad4520fa017a220a2b5764eb5f3a2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "patch": "@@ -2376,25 +2376,32 @@ enum ix86_fpcmp_strategy {\n    Post-reload pass may be later used to eliminate the redundant fildcw if\n    needed.  */\n \n+enum ix86_stack_slot\n+{\n+  SLOT_TEMP = 0,\n+  SLOT_CW_STORED,\n+  SLOT_CW_TRUNC,\n+  SLOT_CW_FLOOR,\n+  SLOT_CW_CEIL,\n+  SLOT_CW_MASK_PM,\n+  MAX_386_STACK_LOCALS\n+};\n+\n enum ix86_entity\n {\n-  AVX_U128 = 0,\n+  X86_DIRFLAG = 0,\n+  AVX_U128,\n   I387_TRUNC,\n   I387_FLOOR,\n   I387_CEIL,\n   I387_MASK_PM,\n   MAX_386_ENTITIES\n };\n \n-enum ix86_stack_slot\n+enum x86_dirflag_state\n {\n-  SLOT_TEMP = 0,\n-  SLOT_CW_STORED,\n-  SLOT_CW_TRUNC,\n-  SLOT_CW_FLOOR,\n-  SLOT_CW_CEIL,\n-  SLOT_CW_MASK_PM,\n-  MAX_386_STACK_LOCALS\n+  X86_DIRFLAG_RESET,\n+  X86_DIRFLAG_ANY\n };\n \n enum avx_u128_state\n@@ -2418,8 +2425,9 @@ enum avx_u128_state\n    starting counting at zero - determines the integer that is used to\n    refer to the mode-switched entity in question.  */\n \n-#define NUM_MODES_FOR_MODE_SWITCHING \\\n-  { AVX_U128_ANY, I387_CW_ANY, I387_CW_ANY, I387_CW_ANY, I387_CW_ANY }\n+#define NUM_MODES_FOR_MODE_SWITCHING\t\t\t\\\n+  { X86_DIRFLAG_ANY, AVX_U128_ANY,\t\t\t\\\n+    I387_CW_ANY, I387_CW_ANY, I387_CW_ANY, I387_CW_ANY }\n \n \f\n /* Avoid renaming of stack registers, as doing so in combination with\n@@ -2516,9 +2524,6 @@ struct GTY(()) machine_function {\n   /* Nonzero if the function accesses a previous frame.  */\n   BOOL_BITFIELD accesses_prev_frame : 1;\n \n-  /* Nonzero if the function requires a CLD in the prologue.  */\n-  BOOL_BITFIELD needs_cld : 1;\n-\n   /* Set by ix86_compute_frame_layout and used by prologue/epilogue\n      expander to determine the style used.  */\n   BOOL_BITFIELD use_fast_prologue_epilogue : 1;\n@@ -2572,7 +2577,6 @@ struct GTY(()) machine_function {\n #define ix86_varargs_gpr_size (cfun->machine->varargs_gpr_size)\n #define ix86_varargs_fpr_size (cfun->machine->varargs_fpr_size)\n #define ix86_optimize_mode_switching (cfun->machine->optimize_mode_switching)\n-#define ix86_current_function_needs_cld (cfun->machine->needs_cld)\n #define ix86_pc_thunk_call_expanded (cfun->machine->pc_thunk_call_expanded)\n #define ix86_tls_descriptor_calls_expanded_in_cfun \\\n   (cfun->machine->tls_descriptor_call_expanded_p)"}, {"sha": "416cdcd91296147c6e91eeed8bc82f61a2889bc3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ca8ef875201d4eaa685edbb31fc97eaaa903d8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c7ca8ef875201d4eaa685edbb31fc97eaaa903d8", "patch": "@@ -16350,7 +16350,10 @@\n \t      (set (match_operand 2 \"register_operand\")\n \t\t   (match_operand 5))])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*strmovdi_rex_1\"\n   [(set (mem:DI (match_operand:P 2 \"register_operand\" \"0\"))\n@@ -16432,7 +16435,10 @@\n \t\t   (match_operand 3 \"memory_operand\"))\n \t      (use (match_dup 4))])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*rep_movdi_rex64\"\n   [(set (match_operand:P 2 \"register_operand\" \"=c\") (const_int 0))\n@@ -16555,7 +16561,10 @@\n \t\t   (match_operand 3))\n \t      (unspec [(const_int 0)] UNSPEC_STOS)])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*strsetdi_rex_1\"\n   [(set (mem:DI (match_operand:P 1 \"register_operand\" \"0\"))\n@@ -16627,7 +16636,10 @@\n \t      (use (match_operand 3 \"register_operand\"))\n \t      (use (match_dup 1))])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*rep_stosdi_rex64\"\n   [(set (match_operand:P 1 \"register_operand\" \"=c\") (const_int 0))\n@@ -16786,7 +16798,10 @@\n \t      (clobber (match_operand 1 \"register_operand\"))\n \t      (clobber (match_dup 2))])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*cmpstrnqi_nz_1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -16824,7 +16839,10 @@\n \t      (clobber (match_operand 1 \"register_operand\"))\n \t      (clobber (match_dup 2))])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*cmpstrnqi_1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -16870,7 +16888,10 @@\n \t      (clobber (match_operand 1 \"register_operand\"))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n-  \"ix86_current_function_needs_cld = 1;\")\n+{\n+  if (TARGET_CLD)\n+    ix86_optimize_mode_switching[X86_DIRFLAG] = 1;\n+})\n \n (define_insn \"*strlenqi_1\"\n   [(set (match_operand:P 0 \"register_operand\" \"=&c\")"}]}