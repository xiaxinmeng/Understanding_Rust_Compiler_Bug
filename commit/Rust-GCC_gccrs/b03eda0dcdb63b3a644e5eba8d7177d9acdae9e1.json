{"sha": "b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzZWRhMGRjZGI2M2IzYTY0NGU1ZWJhOGQ3MTc3ZDlhY2RhZTllMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-21T15:56:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-21T15:56:11Z"}, "message": "lto.c (GIMPLE_REGISTER_TYPE): New define.\n\n2011-12-21  Richard Guenther  <rguenther@suse.de>\n\n\tlto/\n\t* lto.c (GIMPLE_REGISTER_TYPE): New define.\n\t(LTO_FIXUP_TREE): Use it.\n\t(uniquify_nodes): Mark new non-prevailing types and avoid\n\tcalling gimple_register_type on others.\n\t(lto_read_decls): Add comment.\n\nFrom-SVN: r182591", "tree": {"sha": "a09b0dd59969e9b6aabe8c921abd1c1e0386a79a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a09b0dd59969e9b6aabe8c921abd1c1e0386a79a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6e1acf654f4b21e1f8fd4be43f01e2dcec2dbd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e1acf654f4b21e1f8fd4be43f01e2dcec2dbd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e1acf654f4b21e1f8fd4be43f01e2dcec2dbd0"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "8882abe9d449d16a78512957bb7cc08882e9f520", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1", "patch": "@@ -1,3 +1,11 @@\n+2011-12-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto.c (GIMPLE_REGISTER_TYPE): New define.\n+\t(LTO_FIXUP_TREE): Use it.\n+\t(uniquify_nodes): Mark new non-prevailing types and avoid\n+\tcalling gimple_register_type on others.\n+\t(lto_read_decls): Add comment.\n+\n 2011-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lto.h (lto_parse_hex): Delete."}, {"sha": "9efd9c333b2fd6af7ee83ea2d3eaacd3868cf515", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=b03eda0dcdb63b3a644e5eba8d7177d9acdae9e1", "patch": "@@ -306,13 +306,16 @@ remember_with_vars (tree t)\n   *(tree *) htab_find_slot (tree_with_vars, t, INSERT) = t;\n }\n \n+#define GIMPLE_REGISTER_TYPE(tt) \\\n+   (TREE_VISITED (tt) ? gimple_register_type (tt) : tt)\n+\n #define LTO_FIXUP_TREE(tt) \\\n   do \\\n     { \\\n       if (tt) \\\n \t{ \\\n \t  if (TYPE_P (tt)) \\\n-\t    (tt) = gimple_register_type (tt); \\\n+\t    (tt) = GIMPLE_REGISTER_TYPE (tt); \\\n \t  if (VAR_OR_FUNCTION_DECL_P (tt) && TREE_PUBLIC (tt)) \\\n \t    remember_with_vars (t); \\\n \t} \\\n@@ -731,7 +734,14 @@ uniquify_nodes (struct data_in *data_in, unsigned from)\n     {\n       tree t = VEC_index (tree, cache->nodes, i);\n       if (t && TYPE_P (t))\n-\tgimple_register_type (t);\n+\t{\n+\t  tree newt = gimple_register_type (t);\n+\t  /* Mark non-prevailing types so we fix them up.  No need\n+\t     to reset that flag afterwards - nothing that refers\n+\t     to those types is left and they are collected.  */\n+\t  if (newt != t)\n+\t    TREE_VISITED (t) = 1;\n+\t}\n     }\n \n   /* Second fixup all trees in the new cache entries.  */\n@@ -749,7 +759,7 @@ uniquify_nodes (struct data_in *data_in, unsigned from)\n \tcontinue;\n \n       /* Now try to find a canonical variant of T itself.  */\n-      t = gimple_register_type (t);\n+      t = GIMPLE_REGISTER_TYPE (t);\n \n       if (t == oldt)\n \t{\n@@ -771,7 +781,7 @@ uniquify_nodes (struct data_in *data_in, unsigned from)\n \t    }\n \n \t  /* Query our new main variant.  */\n-\t  mv = gimple_register_type (TYPE_MAIN_VARIANT (t));\n+\t  mv = GIMPLE_REGISTER_TYPE (TYPE_MAIN_VARIANT (t));\n \n \t  /* If we were the variant leader and we get replaced ourselves drop\n \t     all variants from our list.  */\n@@ -901,6 +911,9 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n   data_in = lto_data_in_create (decl_data, (const char *) data + string_offset,\n \t\t\t\theader->string_size, resolutions);\n \n+  /* We do not uniquify the pre-loaded cache entries, those are middle-end\n+     internal types that should not be merged.  */\n+\n   /* Read the global declarations and types.  */\n   while (ib_main.p < ib_main.len)\n     {"}]}