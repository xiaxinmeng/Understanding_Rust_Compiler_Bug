{"sha": "2fd215b03e88baae4e047dcb8dac5daa145dc3b4", "node_id": "C_kwDOANBUbNoAKDJmZDIxNWIwM2U4OGJhYWU0ZTA0N2RjYjhkYWM1ZGFhMTQ1ZGMzYjQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-15T13:39:28Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-15T13:39:28Z"}, "message": "PR target/106278: Keep REG_EQUAL notes consistent during TImode STV on x86_64.\n\nThis patch resolves PR target/106278 a regression on x86_64 caused by my\nrecent TImode STV improvements.  Now that TImode STV can handle comparisons\nsuch as \"(set (regs:CC) (compare:CC (reg:TI) ...))\" the convert_insn method\nsensibly checks that the mode of the SET_DEST is TImode before setting\nit to V1TImode [to avoid V1TImode appearing on the hard reg CC_FLAGS.\n\nHence the current code looks like:\n\n      if (GET_MODE (dst) == TImode)\n \t{\n \t  tmp = find_reg_equal_equiv_note (insn);\n \t  if (tmp && GET_MODE (XEXP (tmp, 0)) == TImode)\n \t    PUT_MODE (XEXP (tmp, 0), V1TImode);\n\t  PUT_MODE (dst, V1TImode);\n\t  fix_debug_reg_uses (dst);\n \t}\n      break;\n\nwhich checks GET_MODE (dst) before calling PUT_MODE, and when a\nchange is made updating the REG_EQUAL_NOTE tmp if it exists.\n\nThe logical flaw (oversight) is that due to RTL sharing, the destination\nof this set may already have been updated to V1TImode, as this chain is\nbeing converted, but we still need to update any REG_EQUAL_NOTE that\nstill has TImode.  Hence the correct code is actually:\n\n      if (GET_MODE (dst) == TImode)\n \t{\n\t  PUT_MODE (dst, V1TImode);\n\t  fix_debug_reg_uses (dst);\n\t}\n      if (GET_MODE (dst) == V1TImode)\n\t{\n \t  tmp = find_reg_equal_equiv_note (insn);\n \t  if (tmp && GET_MODE (XEXP (tmp, 0)) == TImode)\n \t    PUT_MODE (XEXP (tmp, 0), V1TImode);\n \t}\n      break;\n\nWhile fixing this behavior, I noticed I had some indentation whitespace\nissues and some vestigial dead code in this function/method that I've\ntaken the liberty of cleaning up (as obvious) in this patch.\n\n2022-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/106278\n\t* config/i386/i386-features.cc (general_scalar_chain::convert_insn):\n\tFix indentation whitespace.\n\t(timode_scalar_chain::fix_debug_reg_uses): Likewise.\n\t(timode_scalar_chain::convert_insn): Delete dead code.\n\tUpdate TImode REG_EQUAL_NOTE even if the SET_DEST is already V1TI.\n\tFix indentation whitespace.\n\t(convertible_comparison_p): Likewise.\n\t(timode_scalar_to_vector_candidate_p): Likewise.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/pr106278.c: New test case.", "tree": {"sha": "6bb7a6e0c7b766e25cd1e9a598e0f21edac2f93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bb7a6e0c7b766e25cd1e9a598e0f21edac2f93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fd215b03e88baae4e047dcb8dac5daa145dc3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd215b03e88baae4e047dcb8dac5daa145dc3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fd215b03e88baae4e047dcb8dac5daa145dc3b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd215b03e88baae4e047dcb8dac5daa145dc3b4/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aab916f4ff9b41222273e712e1d435013ac8150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aab916f4ff9b41222273e712e1d435013ac8150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aab916f4ff9b41222273e712e1d435013ac8150"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "813b203292501b345723281787e8c349f7973495", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd215b03e88baae4e047dcb8dac5daa145dc3b4/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd215b03e88baae4e047dcb8dac5daa145dc3b4/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=2fd215b03e88baae4e047dcb8dac5daa145dc3b4", "patch": "@@ -1054,13 +1054,13 @@ general_scalar_chain::convert_insn (rtx_insn *insn)\n   else if (REG_P (dst) && GET_MODE (dst) == smode)\n     {\n       /* Replace the definition with a SUBREG to the definition we\n-         use inside the chain.  */\n+\t use inside the chain.  */\n       rtx *vdef = defs_map.get (dst);\n       if (vdef)\n \tdst = *vdef;\n       dst = gen_rtx_SUBREG (vmode, dst, 0);\n       /* IRA doesn't like to have REG_EQUAL/EQUIV notes when the SET_DEST\n-         is a non-REG_P.  So kill those off.  */\n+\t is a non-REG_P.  So kill those off.  */\n       rtx note = find_reg_equal_equiv_note (insn);\n       if (note)\n \tremove_note (insn, note);\n@@ -1246,7 +1246,7 @@ timode_scalar_chain::fix_debug_reg_uses (rtx reg)\n     {\n       rtx_insn *insn = DF_REF_INSN (ref);\n       /* Make sure the next ref is for a different instruction,\n-         so that we're not affected by the rescan.  */\n+\t so that we're not affected by the rescan.  */\n       next = DF_REF_NEXT_REG (ref);\n       while (next && DF_REF_INSN (next) == insn)\n \tnext = DF_REF_NEXT_REG (next);\n@@ -1336,21 +1336,19 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n   rtx dst = SET_DEST (def_set);\n   rtx tmp;\n \n-  if (MEM_P (dst) && !REG_P (src))\n-    {\n-      /* There are no scalar integer instructions and therefore\n-\t temporary register usage is required.  */\n-    }\n   switch (GET_CODE (dst))\n     {\n     case REG:\n       if (GET_MODE (dst) == TImode)\n+\t{\n+\t  PUT_MODE (dst, V1TImode);\n+\t  fix_debug_reg_uses (dst);\n+\t}\n+      if (GET_MODE (dst) == V1TImode)\n \t{\n \t  tmp = find_reg_equal_equiv_note (insn);\n \t  if (tmp && GET_MODE (XEXP (tmp, 0)) == TImode)\n \t    PUT_MODE (XEXP (tmp, 0), V1TImode);\n-\t  PUT_MODE (dst, V1TImode);\n-\t  fix_debug_reg_uses (dst);\n \t}\n       break;\n     case MEM:\n@@ -1410,8 +1408,8 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n       if (MEM_P (dst))\n \t{\n \t  tmp = gen_reg_rtx (V1TImode);\n-          emit_insn_before (gen_rtx_SET (tmp, src), insn);\n-          src = tmp;\n+\t  emit_insn_before (gen_rtx_SET (tmp, src), insn);\n+\t  src = tmp;\n \t}\n       break;\n \n@@ -1434,8 +1432,8 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n       if (MEM_P (dst))\n \t{\n \t  tmp = gen_reg_rtx (V1TImode);\n-          emit_insn_before (gen_rtx_SET (tmp, src), insn);\n-          src = tmp;\n+\t  emit_insn_before (gen_rtx_SET (tmp, src), insn);\n+\t  src = tmp;\n \t}\n       break;\n \n@@ -1448,8 +1446,8 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n       if (MEM_P (dst))\n \t{\n \t  tmp = gen_reg_rtx (V1TImode);\n-          emit_insn_before (gen_rtx_SET (tmp, src), insn);\n-          src = tmp;\n+\t  emit_insn_before (gen_rtx_SET (tmp, src), insn);\n+\t  src = tmp;\n \t}\n       break;\n \n@@ -1585,7 +1583,7 @@ convertible_comparison_p (rtx_insn *insn, enum machine_mode mode)\n   /* *cmp<dwi>_doubleword.  */\n   if ((CONST_INT_P (op1)\n        || ((REG_P (op1) || MEM_P (op1))\n-           && GET_MODE (op1) == mode))\n+\t   && GET_MODE (op1) == mode))\n       && (CONST_INT_P (op2)\n \t  || ((REG_P (op2) || MEM_P (op2))\n \t      && GET_MODE (op2) == mode)))\n@@ -1745,7 +1743,7 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \n   if (GET_MODE (dst) != TImode\n       || (GET_MODE (src) != TImode\n-          && !CONST_SCALAR_INT_P (src)))\n+\t  && !CONST_SCALAR_INT_P (src)))\n     return false;\n \n   if (!REG_P (dst) && !MEM_P (dst))"}, {"sha": "ab312b3ecfbe3ba0213b7a33695fe1dca2ec760f", "filename": "gcc/testsuite/gcc.dg/pr106278.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fd215b03e88baae4e047dcb8dac5daa145dc3b4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106278.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fd215b03e88baae4e047dcb8dac5daa145dc3b4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106278.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106278.c?ref=2fd215b03e88baae4e047dcb8dac5daa145dc3b4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+void __assert_fail();\n+struct a {\n+  int b;\n+  int c;\n+  int d;\n+  int : 2;\n+};\n+int e, f;\n+struct a g, i;\n+const struct a h;\n+int main() {\n+  struct a j;\n+  g = h;\n+  if (e)\n+    __assert_fail();\n+  if (f)\n+    j = h;\n+  i = j;\n+  return 0;\n+}"}]}