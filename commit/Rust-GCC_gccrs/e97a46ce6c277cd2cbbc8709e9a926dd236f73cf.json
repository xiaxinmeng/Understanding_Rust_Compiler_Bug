{"sha": "e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3YTQ2Y2U2YzI3N2NkMmNiYmM4NzA5ZTlhOTI2ZGQyMzZmNzNjZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-10T18:04:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-10T18:04:25Z"}, "message": "arm.c (arm_init_iwmmxt_builtins, [...]): Use ARRAY_SIZE.\n\n\t* config/arm/arm.c (arm_init_iwmmxt_builtins, arm_expand_builtin):\n\tUse ARRAY_SIZE.\n\t* config/frv/frv.c (frv_expand_builtin): Likewise.\n\t* config/sh/sh.c (sh_media_init_builtins): Likewise.\n\nFrom-SVN: r69194", "tree": {"sha": "cb7c9fe92661e3f6423fb6581d09b682c35ab9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7c9fe92661e3f6423fb6581d09b682c35ab9ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/comments", "author": null, "committer": null, "parents": [{"sha": "4a3864984cd9d020a65cd2956ed032e3cc254a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3864984cd9d020a65cd2956ed032e3cc254a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3864984cd9d020a65cd2956ed032e3cc254a98"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "3eefd6441b3796fca2e85c86c1913c436a22a24e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "patch": "@@ -1,3 +1,10 @@\n+2003-07-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config/arm/arm.c (arm_init_iwmmxt_builtins, arm_expand_builtin):\n+\tUse ARRAY_SIZE.\n+\t* config/frv/frv.c (frv_expand_builtin): Likewise.\n+\t* config/sh/sh.c (sh_media_init_builtins): Likewise.\n+\n 2003-07-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10032"}, {"sha": "737a0270c44da554c8915e71d86ac95b9b09f42f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "patch": "@@ -10715,7 +10715,7 @@ arm_init_iwmmxt_builtins (void)\n \n   /* Add all builtins that are more or less simple operations on two\n      operands.  */\n-  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     {\n       /* Use one of the operands; the target can have a different mode for\n \t mask-generating compares.  */\n@@ -11155,11 +11155,11 @@ arm_expand_builtin (tree exp,\n       break;\n     }\n \n-  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == (const enum arm_builtins) fcode)\n       return arm_expand_binop_builtin (d->icode, arglist, target);\n \n-  for (i = 0, d = bdesc_1arg; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     if (d->code == (const enum arm_builtins) fcode)\n       return arm_expand_unop_builtin (d->icode, arglist, target, 0);\n "}, {"sha": "84d6d357a57f7edfda7ca7cd6c732ca1ad04b9c7", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "patch": "@@ -9649,53 +9649,38 @@ frv_expand_builtin (exp, target, subtarget, mode, ignore)\n \n   /* Expand groups of builtins. */\n \n-  for (i = 0, d = bdesc_set; i < sizeof (bdesc_set) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_set; i < ARRAY_SIZE (bdesc_set); i++, d++)\n     if (d->code == fcode)\n       return frv_expand_set_builtin (d->icode, arglist, target);\n \n-  for (i = 0, d = bdesc_1arg; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     if (d->code == fcode)\n       return frv_expand_unop_builtin (d->icode, arglist, target);\n \n-  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == fcode)\n       return frv_expand_binop_builtin (d->icode, arglist, target);\n \n-  for (i = 0, d = bdesc_cut; i < sizeof (bdesc_cut) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_cut; i < ARRAY_SIZE (bdesc_cut); i++, d++)\n     if (d->code == fcode)\n       return frv_expand_cut_builtin (d->icode, arglist, target);\n \n-  for (i = 0, d = bdesc_2argimm;\n-       i < sizeof (bdesc_2argimm) / sizeof *d;\n-       i++, d++)\n-    {\n-      if (d->code == fcode)\n-\treturn frv_expand_binopimm_builtin (d->icode, arglist, target);\n-    }\n+  for (i = 0, d = bdesc_2argimm; i < ARRAY_SIZE (bdesc_2argimm); i++, d++)\n+    if (d->code == fcode)\n+      return frv_expand_binopimm_builtin (d->icode, arglist, target);\n \n-  for (i = 0, d = bdesc_void2arg;\n-       i < sizeof (bdesc_void2arg) / sizeof *d;\n-       i++, d++)\n-    {\n-      if (d->code == fcode)\n-\treturn frv_expand_voidbinop_builtin (d->icode, arglist);\n-    }\n+  for (i = 0, d = bdesc_void2arg; i < ARRAY_SIZE (bdesc_void2arg); i++, d++)\n+    if (d->code == fcode)\n+      return frv_expand_voidbinop_builtin (d->icode, arglist);\n \n-  for (i = 0, d = bdesc_void3arg;\n-       i < sizeof (bdesc_void3arg) / sizeof *d;\n-       i++, d++)\n-    {\n-      if (d->code == fcode)\n-\treturn frv_expand_voidtriop_builtin (d->icode, arglist);\n-    }\n+  for (i = 0, d = bdesc_void3arg; i < ARRAY_SIZE (bdesc_void3arg); i++, d++)\n+    if (d->code == fcode)\n+      return frv_expand_voidtriop_builtin (d->icode, arglist);\n+\n+  for (i = 0, d = bdesc_voidacc; i < ARRAY_SIZE (bdesc_voidacc); i++, d++)\n+    if (d->code == fcode)\n+      return frv_expand_voidaccop_builtin (d->icode, arglist);\n \n-  for (i = 0, d = bdesc_voidacc;\n-       i < sizeof (bdesc_voidacc) / sizeof *d;\n-       i++, d++)\n-    {\n-      if (d->code == fcode)\n-\treturn frv_expand_voidaccop_builtin (d->icode, arglist);\n-    }\n   return 0;\n }\n "}, {"sha": "ee8193c61b3d30a45b4e62b8ba4e33b4af51da23", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97a46ce6c277cd2cbbc8709e9a926dd236f73cf/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e97a46ce6c277cd2cbbc8709e9a926dd236f73cf", "patch": "@@ -8226,7 +8226,7 @@ sh_media_init_builtins ()\n   const struct builtin_description *d;\n \n   memset (shared, 0, sizeof shared);\n-  for (d = bdesc; d - bdesc < (int) (sizeof bdesc / sizeof bdesc[0]); d++)\n+  for (d = bdesc; d - bdesc < (int) ARRAY_SIZE (bdesc); d++)\n     {\n       tree type, arg_type;\n       int signature = d->signature;"}]}