{"sha": "78bd50313ea03c26bff96ec9d0304f8970beb88a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiZDUwMzEzZWEwM2MyNmJmZjk2ZWM5ZDAzMDRmODk3MGJlYjg4YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-10T13:42:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-10T13:42:01Z"}, "message": "basic_string.tcc (_M_replace_safe): New function.\n\n2001-12-10  Paolo Carlini  <pcarlini@unitus.it>\n            Nathan Myers  <ncm@cantrip.org>\n\n\t* include/bits/basic_string.tcc (_M_replace_safe):  New function.\n\t(_M_replace(input_iterator_tag), append members):  Use it.\n\t(_M_replace(forward_iterator_tag)):  Remove.\n\t* include/bits/basic_string.h:  Adjust declarations.\n\t* src/string-inst.cc:  Adjust declarations.\n\nFrom-SVN: r47844", "tree": {"sha": "b218cd0b04b3da48f0c5a6e43128bcda76ccbe76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b218cd0b04b3da48f0c5a6e43128bcda76ccbe76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78bd50313ea03c26bff96ec9d0304f8970beb88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bd50313ea03c26bff96ec9d0304f8970beb88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78bd50313ea03c26bff96ec9d0304f8970beb88a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78bd50313ea03c26bff96ec9d0304f8970beb88a/comments", "author": null, "committer": null, "parents": [{"sha": "96a9c44f09cf8eec4ebf9469b32ab187d113f9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a9c44f09cf8eec4ebf9469b32ab187d113f9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a9c44f09cf8eec4ebf9469b32ab187d113f9af"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "406d71c3b6a49c2d678653f0ee27fade07145797", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd50313ea03c26bff96ec9d0304f8970beb88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd50313ea03c26bff96ec9d0304f8970beb88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=78bd50313ea03c26bff96ec9d0304f8970beb88a", "patch": "@@ -639,10 +639,10 @@ namespace std\n         _M_replace(iterator __i1, iterator __i2, _InputIterator __k1, \n \t\t   _InputIterator __k2, input_iterator_tag);\n \n-      template<class _FwdIterator>\n+      template<class _InputIterator>\n         basic_string& \n-        _M_replace(iterator __i1, iterator __i2, _FwdIterator __k1, \n-\t\t   _FwdIterator __k2, forward_iterator_tag);\n+        _M_replace_safe(iterator __i1, iterator __i2, _InputIterator __k1, \n+\t\t   _InputIterator __k2);\n \n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type"}, {"sha": "57a5191770ff4711c9ae7dae39357629806b1e3e", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd50313ea03c26bff96ec9d0304f8970beb88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd50313ea03c26bff96ec9d0304f8970beb88a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=78bd50313ea03c26bff96ec9d0304f8970beb88a", "patch": "@@ -490,23 +490,35 @@ namespace std\n       // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)\n     }\n   \n+  // This is the general replace helper, which gets instantiated both\n+  // for input-iterators and forward-iterators. It buffers internally and\n+  // then calls _M_replace_safe. For input-iterators this is almost the\n+  // best we can do, but for forward-iterators many optimizations could be\n+  // conceived: f.i., when source and destination ranges do not overlap\n+  // buffering is not really needed. In order to easily implement them, it\n+  // could become useful to add an _M_replace(forward_iterator_tag)\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIter>\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n       _M_replace(iterator __i1, iterator __i2, _InputIter __k1, \n \t\t _InputIter __k2, input_iterator_tag)\n       {\n+\t// Save concerned source string data in a temporary.\n \tbasic_string __s(__k1, __k2);\n-\treturn this->replace(__i1, __i2, __s._M_ibegin(), __s._M_iend());\n+\treturn _M_replace_safe(__i1, __i2, __s._M_ibegin(), __s._M_iend());\n       }\n \n+  // This is a special replace helper, which does not buffer internally\n+  // and can be used in the \"safe\" situations involving forward-iterators,\n+  // i.e., when source and destination ranges are known to not overlap.\n+  // Presently, is called by _M_replace and by the various append.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template<typename _ForwardIter>\n+    template<typename _InputIter>\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _M_replace(iterator __i1, iterator __i2, _ForwardIter __k1, \n-\t\t _ForwardIter __k2, forward_iterator_tag)\n+      _M_replace_safe(iterator __i1, iterator __i2, _InputIter __k1, \n+\t\t      _InputIter __k2)\n       {\n \tsize_type __dnew = static_cast<size_type>(distance(__k1, __k2));\n \tsize_type __dold = __i2 - __i1;\n@@ -515,16 +527,11 @@ namespace std\n \tif (__dmax <= __dnew)\n \t  __throw_length_error(\"basic_string::_M_replace\");\n \tsize_type __off = __i1 - _M_ibegin();\n-\n-\t// Save concerned source string data in a temporary.\n-\tbasic_string __temp(__k1, __k2);\n \t_M_mutate(__off, __dold, __dnew);\n-\t\n-\t// Invalidated __i1, __i2 (and clobbered original source string\n-\t// data when destination string == source string and the string\n-\t// is unshared).\n+\n+\t// Invalidated __i1, __i2\n         if (__dnew)\n-\t  _S_copy_chars(_M_data() + __off, __temp.begin(), __temp.end());\n+\t  _S_copy_chars(_M_data() + __off, __k1, __k2);\n \n \treturn *this;\n       }\n@@ -537,7 +544,7 @@ namespace std\n     {\n       return this->replace(_M_check(__pos1), _M_fold(__pos1, __n1),\n \t\t\t   __str._M_check(__pos2), \n-\t\t\t   __str._M_fold(__pos2, __n2));\n+\t\t\t   __str._M_fold(__pos2, __n2));      \n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -552,8 +559,8 @@ namespace std\n       size_type __len = __size + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n-      return this->replace(_M_iend(), _M_iend(), __str._M_ibegin(),\n-\t\t\t   __str._M_iend());\n+      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin(),\n+\t\t\t     __str._M_iend());\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -567,8 +574,8 @@ namespace std\n       size_type __len = min(__str.size() - __pos, __n) + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n-      return this->replace(_M_iend(), _M_iend(), __str._M_check(__pos),\n-\t\t\t   __str._M_fold(__pos, __n));\n+      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_check(__pos),\n+\t\t\t     __str._M_fold(__pos, __n));\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -579,7 +586,7 @@ namespace std\n       size_type __len = __n + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n-      return this->replace(_M_iend(), _M_iend(), __s, __s + __n);\n+      return _M_replace_safe(_M_iend(), _M_iend(), __s, __s + __n);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "324ca86967a3a968fb939ac518731b4a1290e862", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78bd50313ea03c26bff96ec9d0304f8970beb88a/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78bd50313ea03c26bff96ec9d0304f8970beb88a/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=78bd50313ea03c26bff96ec9d0304f8970beb88a", "patch": "@@ -71,21 +71,38 @@ namespace std\n   template \n     S& \n     S::_M_replace(S::iterator, S::iterator, S::iterator, S::iterator, \n-\t\t  forward_iterator_tag);\n+\t\t  input_iterator_tag);\n \n   template \n     S& \n     S::_M_replace(S::iterator, S::iterator, S::const_iterator, \n-\t\t  S::const_iterator, forward_iterator_tag);\n+\t\t  S::const_iterator, input_iterator_tag);\n \n   template\n     S&\n-    S::_M_replace(S::iterator, S::iterator, C*, C*, forward_iterator_tag); \n+    S::_M_replace(S::iterator, S::iterator, C*, C*, input_iterator_tag); \n \n   template\n     S&\n     S::_M_replace(S::iterator, S::iterator, const C*, const C*, \n-\t\t  forward_iterator_tag);  \n+\t\t  input_iterator_tag);  \n+\n+  template \n+    S& \n+    S::_M_replace_safe(S::iterator, S::iterator, S::iterator, S::iterator);\n+\n+  template \n+    S& \n+    S::_M_replace_safe(S::iterator, S::iterator, S::const_iterator, \n+\t\t  S::const_iterator);\n+\n+  template\n+    S&\n+    S::_M_replace_safe(S::iterator, S::iterator, C*, C*); \n+\n+  template\n+    S&\n+    S::_M_replace_safe(S::iterator, S::iterator, const C*, const C*);  \n \n   template \n     C* "}]}