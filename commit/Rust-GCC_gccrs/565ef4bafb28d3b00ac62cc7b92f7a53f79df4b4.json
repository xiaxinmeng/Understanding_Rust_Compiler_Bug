{"sha": "565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY1ZWY0YmFmYjI4ZDNiMDBhYzYyY2M3YjkyZjdhNTNmNzlkZjRiNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-06T17:29:44Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-06T17:29:44Z"}, "message": "rs6000.md (popcount<mode>2): Rewrite.\n\n\n\t* config/rs6000/rs6000.md (popcount<mode>2): Rewrite.\n\t(parity<mode>2): New define_expand using rs6000_emit_parity.\n\t* config/rs6000/rs6000.c (rs6000_emit_popcount,\n\trs6000_emit_parity): New functions.\n\t* config/rs6000/rs6000-protos.h (rs6000_emit_popcount,\n\trs6000_emit_parity): Prototype here.\n\n\t* gcc.target/powerpc/popcount-1.c: New test case.\n\t* gcc.target/powerpc/parity-1.c: Likewise.\n\nFrom-SVN: r121653", "tree": {"sha": "3b0a683627d420dedb289b8f502bb2e97bd39aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b0a683627d420dedb289b8f502bb2e97bd39aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/comments", "author": null, "committer": null, "parents": [{"sha": "7e0c3f57e0bd40144eb662c221e284f3bbf1873c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0c3f57e0bd40144eb662c221e284f3bbf1873c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0c3f57e0bd40144eb662c221e284f3bbf1873c"}], "stats": {"total": 165, "additions": 144, "deletions": 21}, "files": [{"sha": "dd9e6f3cccfb932391644726e57e78e12486dfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "patch": "@@ -1,3 +1,12 @@\n+2007-02-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/rs6000/rs6000.md (popcount<mode>2): Rewrite.\n+\t(parity<mode>2): New define_expand using rs6000_emit_parity.\n+\t* config/rs6000/rs6000.c (rs6000_emit_popcount,\n+\trs6000_emit_parity): New functions.\n+\t* config/rs6000/rs6000-protos.h (rs6000_emit_popcount,\n+\trs6000_emit_parity): Prototype here.\n+\n 2007-02-06  Ian Lance Taylor  <iant@google.com>\n \n \t* lower-subreg.c (simple_move_operand): Reject CONST."}, {"sha": "9ef454c449973e9f667bad74dc40c44bd45c97fb", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n@@ -106,6 +106,8 @@ extern bool rs6000_offsettable_memref_p (rtx);\n extern rtx rs6000_return_addr (int, rtx);\n extern void rs6000_output_symbol_ref (FILE*, rtx);\n extern HOST_WIDE_INT rs6000_initial_elimination_offset (int, int);\n+extern void rs6000_emit_popcount (rtx, rtx);\n+extern void rs6000_emit_parity (rtx, rtx);\n \n extern rtx rs6000_machopic_legitimize_pic_address (rtx, enum machine_mode,\n \t\t\t\t\t\t   rtx);"}, {"sha": "6fa2b661e4905787628a2f88a12941e720fdbadb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "patch": "@@ -20239,6 +20239,102 @@ rs6000_emit_swdivdf (rtx res, rtx n, rtx d)\n \t\t\t\t\tgen_rtx_MULT (DFmode, v0, y3), u0)));\n }\n \n+\n+/* Emit popcount intrinsic on TARGET_POPCNTB targets.  DST is the\n+   target, and SRC is the argument operand.  */\n+\n+void\n+rs6000_emit_popcount (rtx dst, rtx src)\n+{\n+  enum machine_mode mode = GET_MODE (dst);\n+  rtx tmp1, tmp2;\n+\n+  tmp1 = gen_reg_rtx (mode);\n+\n+  if (mode == SImode)\n+    {\n+      emit_insn (gen_popcntbsi2 (tmp1, src));\n+      tmp2 = expand_mult (SImode, tmp1, GEN_INT (0x01010101),\n+\t\t\t   NULL_RTX, 0);\n+      tmp2 = force_reg (SImode, tmp2);\n+      emit_insn (gen_lshrsi3 (dst, tmp2, GEN_INT (24)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_popcntbdi2 (tmp1, src));\n+      tmp2 = expand_mult (DImode, tmp1,\n+\t\t\t  GEN_INT ((HOST_WIDE_INT)\n+\t\t\t\t   0x01010101 << 32 | 0x01010101),\n+\t\t\t  NULL_RTX, 0);\n+      tmp2 = force_reg (DImode, tmp2);\n+      emit_insn (gen_lshrdi3 (dst, tmp2, GEN_INT (56)));\n+    }\n+}\n+\n+\n+/* Emit parity intrinsic on TARGET_POPCNTB targets.  DST is the\n+   target, and SRC is the argument operand.  */\n+\n+void\n+rs6000_emit_parity (rtx dst, rtx src)\n+{\n+  enum machine_mode mode = GET_MODE (dst);\n+  rtx tmp;\n+\n+  tmp = gen_reg_rtx (mode);\n+  if (mode == SImode)\n+    {\n+      /* Is mult+shift >= shift+xor+shift+xor?  */\n+      if (rs6000_cost->mulsi_const >= COSTS_N_INSNS (3))\n+\t{\n+\t  rtx tmp1, tmp2, tmp3, tmp4;\n+\n+\t  tmp1 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_popcntbsi2 (tmp1, src));\n+\n+\t  tmp2 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_lshrsi3 (tmp2, tmp1, GEN_INT (16)));\n+\t  tmp3 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_xorsi3 (tmp3, tmp1, tmp2));\n+\n+\t  tmp4 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_lshrsi3 (tmp4, tmp3, GEN_INT (8)));\n+\t  emit_insn (gen_xorsi3 (tmp, tmp3, tmp4));\n+\t}\n+      else\n+\trs6000_emit_popcount (tmp, src);\n+      emit_insn (gen_andsi3 (dst, tmp, const1_rtx));\n+    }\n+  else\n+    {\n+      /* Is mult+shift >= shift+xor+shift+xor+shift+xor?  */\n+      if (rs6000_cost->muldi >= COSTS_N_INSNS (5))\n+\t{\n+\t  rtx tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;\n+\n+\t  tmp1 = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_popcntbdi2 (tmp1, src));\n+\n+\t  tmp2 = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_lshrdi3 (tmp2, tmp1, GEN_INT (32)));\n+\t  tmp3 = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_xordi3 (tmp3, tmp1, tmp2));\n+\n+\t  tmp4 = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_lshrdi3 (tmp4, tmp3, GEN_INT (16)));\n+\t  tmp5 = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_xordi3 (tmp5, tmp3, tmp4));\n+\n+\t  tmp6 = gen_reg_rtx (DImode);\n+\t  emit_insn (gen_lshrdi3 (tmp6, tmp5, GEN_INT (8)));\n+\t  emit_insn (gen_xordi3 (tmp, tmp5, tmp6));\n+\t}\n+      else\n+        rs6000_emit_popcount (tmp, src);\n+      emit_insn (gen_anddi3 (dst, tmp, const1_rtx));\n+    }\n+}\n+\n /* Return an RTX representing where to find the function value of a\n    function returning MODE.  */\n static rtx"}, {"sha": "75aef7ca5f6203897c87ead3027745dcc960df9c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "patch": "@@ -2161,33 +2161,31 @@\n      operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n   })\n \n-(define_expand \"popcount<mode>2\"\n-  [(set (match_dup 2)\n-\t(unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]\n-\t\t     UNSPEC_POPCNTB))\n-   (set (match_dup 3)\n-\t(mult:GPR (match_dup 2) (match_dup 4)))\n-   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n-\t(lshiftrt:GPR (match_dup 3) (match_dup 5)))]\n-  \"TARGET_POPCNTB\"\n-  {\n-    operands[2] = gen_reg_rtx (<MODE>mode);\n-    operands[3] = gen_reg_rtx (<MODE>mode);\n-    operands[4] = force_reg (<MODE>mode,\n-\t\t\t     <MODE>mode == SImode\n-\t\t\t     ? GEN_INT (0x01010101)\n-\t\t\t     : GEN_INT ((HOST_WIDE_INT)\n-\t\t\t\t\t0x01010101 << 32 | 0x01010101));\n-    operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 8);\n-  })\n-\n (define_insn \"popcntb<mode>2\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]\n                      UNSPEC_POPCNTB))]\n   \"TARGET_POPCNTB\"\n   \"popcntb %0,%1\")\n \n+(define_expand \"popcount<mode>2\"\n+  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\"))\n+   (use (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_POPCNTB\"\n+  {\n+    rs6000_emit_popcount (operands[0], operands[1]);\n+    DONE;\n+  })\n+\n+(define_expand \"parity<mode>2\"\n+  [(use (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\"))\n+   (use (match_operand:GPR 1 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_POPCNTB\"\n+  {\n+    rs6000_emit_parity (operands[0], operands[1]);\n+    DONE;\n+  })\n+\n (define_expand \"mulsi3\"\n   [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))"}, {"sha": "d767a816fad30b754b32e1dd9836c3c7fb6fdd1d", "filename": "gcc/testsuite/gcc.target/powerpc/parity-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fparity-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fparity-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fparity-1.c?ref=565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ilp32 } } } */\n+/* { dg-options \"-O2 -mcpu=power6\" } */\n+/* { dg-final { scan-assembler \"popcntb\" } } */\n+/* { dg-final { scan-assembler-not \"mullw\" } } */\n+\n+int foo(int x)\n+{\n+  return __builtin_parity(x);\n+}"}, {"sha": "320f92285b1525b4482ac28286ef379fb3b1ddcd", "filename": "gcc/testsuite/gcc.target/powerpc/popcount-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpopcount-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpopcount-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpopcount-1.c?ref=565ef4bafb28d3b00ac62cc7b92f7a53f79df4b4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ilp32 } } } */\n+/* { dg-options \"-O2 -mcpu=power6\" } */\n+/* { dg-final { scan-assembler \"popcntb\" } } */\n+/* { dg-final { scan-assembler-not \"mullw\" } } */\n+\n+int foo(int x)\n+{\n+  return __builtin_popcount(x);\n+}"}]}