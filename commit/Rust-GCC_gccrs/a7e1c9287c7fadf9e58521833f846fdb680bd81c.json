{"sha": "a7e1c9287c7fadf9e58521833f846fdb680bd81c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlMWM5Mjg3YzdmYWRmOWU1ODUyMTgzM2Y4NDZmZGI2ODBiZDgxYw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-05-04T01:52:06Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-05-04T01:52:06Z"}, "message": "[multiple changes]\n\n2004-05-03  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/15618\n        * fold-const.c (fold_widened_comparison): Treat BOOLEAN_TYPE\n        the same as INTEGER_TYPE.\n        (fold_binary): Fold \"bool_var != 0\" to bool_var.\n        Fold \"bool_var == 1\" to bool_var.\n2005-05-03  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/15618\n        * gcc.dg/tree-ssa/bool-[1-9].c: New tests.\n\nFrom-SVN: r99207", "tree": {"sha": "cd5155fa594c0f9c4ee084e45679b9adb9a542a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd5155fa594c0f9c4ee084e45679b9adb9a542a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7e1c9287c7fadf9e58521833f846fdb680bd81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e1c9287c7fadf9e58521833f846fdb680bd81c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e1c9287c7fadf9e58521833f846fdb680bd81c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e1c9287c7fadf9e58521833f846fdb680bd81c/comments", "author": null, "committer": null, "parents": [{"sha": "d8be0aabf797319f3395103cb0bed48420c604c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8be0aabf797319f3395103cb0bed48420c604c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8be0aabf797319f3395103cb0bed48420c604c2"}], "stats": {"total": 197, "additions": 195, "deletions": 2}, "files": [{"sha": "d2177e0f64be72cc2cf45e66bb105a40477c142f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -1,3 +1,11 @@\n+2004-05-03  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/15618\n+\t* fold-const.c (fold_widened_comparison): Treat BOOLEAN_TYPE\n+\tthe same as INTEGER_TYPE.\n+\t(fold_binary): Fold \"bool_var != 0\" to bool_var.\n+\tFold \"bool_var == 1\" to bool_var.\n+\n 2004-05-03  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/21318"}, {"sha": "140f940af27a5428c556f00439f1eb84956466ec", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -6149,7 +6149,8 @@ fold_widened_comparison (enum tree_code code, tree type, tree arg0, tree arg1)\n        || TYPE_UNSIGNED (TREE_TYPE (arg0)) == TYPE_UNSIGNED (shorter_type))\n       && (TREE_TYPE (arg1_unw) == shorter_type\n \t  || (TREE_CODE (arg1_unw) == INTEGER_CST\n-\t      && TREE_CODE (shorter_type) == INTEGER_TYPE\n+\t      && (TREE_CODE (shorter_type) == INTEGER_TYPE\n+\t\t  || TREE_CODE (shorter_type) == BOOLEAN_TYPE)\n \t      && int_fits_type_p (arg1_unw, shorter_type))))\n     return fold_build2 (code, type, arg0_unw,\n \t\t       fold_convert (shorter_type, arg1_unw));\n@@ -8856,10 +8857,20 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n     case LT_EXPR:\n     case GT_EXPR:\n     case LE_EXPR:\n-    case GE_EXPR:\n+    case GE_EXPR:\t\n       /* If one arg is a real or integer constant, put it last.  */\n       if (tree_swap_operands_p (arg0, arg1, true))\n \treturn fold_build2 (swap_tree_comparison (code), type, op1, op0);\n+\t\n+      /* bool_var != 0 becomes bool_var. */\n+      if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_zerop (arg1)\n+          && code == NE_EXPR)\n+        return non_lvalue (fold_convert (type, arg0));\n+\t\n+      /* bool_var == 1 becomes bool_var. */\n+      if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_onep (arg1)\n+          && code == EQ_EXPR)\n+        return non_lvalue (fold_convert (type, arg0));\n \n       /* If this is an equality comparison of the address of a non-weak\n \t object against zero, then we know the result.  */"}, {"sha": "dca689649035e825fe72b52f29ac3ad30416dafa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -1,3 +1,8 @@\n+2005-05-03  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/15618\n+\t* gcc.dg/tree-ssa/bool-[1-9].c: New tests.\n+\n 2005-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/21265"}, {"sha": "90cdef90c4efb573349e3260e37671db088f6673", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-1.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  if (x != 0)\n+   return 1;\n+  return 0;\n+}\n+\n+/* There should be no != 0 which is produced by the front-end as\n+   bool_var != 0 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"!= 0\" 0 \"optimized\"} } */\n+\n+/* There should be no adde for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"adde\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "e46189ad9f2fc57b7d4089b8b01d723cc1f9e423", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-2.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  int y;\n+  if (x)\n+    y = 1;\n+  else\n+    y = 0;\n+  return y;\n+}\n+\n+/* There should be no != 0 which is produced by the front-end as\n+   bool_var != 0 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"!= 0\" 0 \"optimized\"} } */\n+\n+/* There should be no adde for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"adde\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f2ee9b864dd84c685e71411e1d5f1ee3d12e344c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-3.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  int y;\n+  if (!x)\n+    y = 0;\n+  else\n+    y = 1;\n+  return y;\n+}\n+\n+/* There should be no == 0. Though PHI-OPT or invert_truth does not\n+   fold its tree.  */\n+/* { dg-final { scan-tree-dump-times \"== 0\" 0 \"optimized\" { xfail *-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "389124f0ede99a12e9aac7290c92d8ddc4d424dc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-4.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  return (x != 0);\n+}\n+\n+/* There should be no != 0 which is produced by the front-end as\n+   bool_var != 0 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"!= 0\" 0 \"optimized\"} } */\n+\n+/* There should be no adde for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"adde\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "1cb9de2cedab053462f678bec4cb935b9c1f8bf3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-5.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  if (x == 1)\n+   return 1;\n+  return 0;\n+}\n+\n+/* There should be no == 1 which is produced by the front-end as\n+   bool_var == 1 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"== 1\" 0 \"optimized\"} } */\n+\n+/* There should be no adde for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"adde\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "85f0333b8262637b3f4e35ee27e81fd84e9b7896", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-6.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  int y;\n+  if (x)\n+    y = 1;\n+  else\n+    y = 0;\n+  return y;\n+}\n+\n+/* There should be no == 1 which is produced by the front-end as\n+   bool_var == 1 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"== 1\" 0 \"optimized\"} } */\n+\n+/* There should be no adde for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"adde\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b09b97202c5d3530cf8b0a279e30cffc9e02a861", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-7.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  int y;\n+  if (x != 1)\n+    y = 0;\n+  else\n+    y = 1;\n+  return y;\n+}\n+\n+/* There should be no != 1. Though PHI-OPT or invert_truth does not\n+   fold its tree.  */\n+/* { dg-final { scan-tree-dump-times \"!= 1\" 0 \"optimized\" { xfail *-*-* } }  }*/\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5a133097c388ecb2b78f6305c971cf9570614a08", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-8.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(_Bool x)\n+{\n+  return (x == 1);\n+}\n+\n+/* There should be no == 1 which is produced by the front-end as\n+   bool_var == 1 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"== 1\" 0 \"optimized\"} } */\n+\n+/* There should be no adde for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"adde\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "09df2e489830d8c0d404c3dd7892ce11f2f4b27f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7e1c9287c7fadf9e58521833f846fdb680bd81c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-9.c?ref=a7e1c9287c7fadf9e58521833f846fdb680bd81c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+_Bool f1(_Bool x)\n+{\n+  return !!x;\n+}\n+\n+/* There should be no != 0 which is produced by the front-end as\n+   bool_var != 0 is the same as bool_var. */\n+/* { dg-final { scan-tree-dump-times \"!= 0\" 0 \"optimized\"} } */\n+\n+/* There should be no subfe for powerpc. Checking if we actually optimizated\n+   away the comparision.  */\n+/* { dg-final { scan-assembler-times \"subfe\" 0 { target powerpc-*-* } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}