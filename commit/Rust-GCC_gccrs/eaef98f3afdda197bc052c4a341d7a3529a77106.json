{"sha": "eaef98f3afdda197bc052c4a341d7a3529a77106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlZjk4ZjNhZmRkYTE5N2JjMDUyYzRhMzQxZDdhMzUyOWE3NzEwNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-08-31T13:48:29Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-08-31T13:48:29Z"}, "message": "Reimplement rewrite_virtuals_into_loop_closed_ssa\n\n2015-08-31  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-ssa-loop-manip.c (find_uses_to_rename_stmt)\n\t(find_uses_to_rename_bb, find_uses_to_rename): Add and handle use_flags\n\tparameter.\n\t(find_uses_to_rename_def, find_uses_to_rename_in_loop): New function.\n\t(rewrite_into_loop_closed_ssa_1): New function, factored out of ...\n\t(rewrite_into_loop_closed_ssa): ... here.\n\t(replace_uses_in_dominated_bbs): Remove function.\n\t(rewrite_virtuals_into_loop_closed_ssa): Reimplement using\n\trewrite_into_loop_closed_ssa_1.\n\nFrom-SVN: r227342", "tree": {"sha": "c6b841b51ee39b7bb765d047527de1ab5644dcbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6b841b51ee39b7bb765d047527de1ab5644dcbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaef98f3afdda197bc052c4a341d7a3529a77106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaef98f3afdda197bc052c4a341d7a3529a77106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaef98f3afdda197bc052c4a341d7a3529a77106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaef98f3afdda197bc052c4a341d7a3529a77106/comments", "author": null, "committer": null, "parents": [{"sha": "e5f95b665b90a697cc97a5378f761557f728d9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f95b665b90a697cc97a5378f761557f728d9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f95b665b90a697cc97a5378f761557f728d9a0"}], "stats": {"total": 238, "additions": 172, "deletions": 66}, "files": [{"sha": "2d343599c7e239cf98f08f65a1dd7178aeee9b8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaef98f3afdda197bc052c4a341d7a3529a77106/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaef98f3afdda197bc052c4a341d7a3529a77106/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaef98f3afdda197bc052c4a341d7a3529a77106", "patch": "@@ -1,3 +1,15 @@\n+2015-08-31  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-ssa-loop-manip.c (find_uses_to_rename_stmt)\n+\t(find_uses_to_rename_bb, find_uses_to_rename): Add and handle use_flags\n+\tparameter.\n+\t(find_uses_to_rename_def, find_uses_to_rename_in_loop): New function.\n+\t(rewrite_into_loop_closed_ssa_1): New function, factored out of ...\n+\t(rewrite_into_loop_closed_ssa): ... here.\n+\t(replace_uses_in_dominated_bbs): Remove function.\n+\t(rewrite_virtuals_into_loop_closed_ssa): Reimplement using\n+\trewrite_into_loop_closed_ssa_1.\n+\n 2015-08-31  Michael Matz  <matz@suse.de>\n \n \t* cfganal.c (pre_and_rev_post_order_compute_fn): Correctly"}, {"sha": "fb7ba4810c8d9bdebb9cdd0efd9142bb8fbec152", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 160, "deletions": 66, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaef98f3afdda197bc052c4a341d7a3529a77106/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaef98f3afdda197bc052c4a341d7a3529a77106/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=eaef98f3afdda197bc052c4a341d7a3529a77106", "patch": "@@ -403,12 +403,13 @@ find_uses_to_rename_use (basic_block bb, tree use, bitmap *use_blocks,\n   bitmap_set_bit (use_blocks[ver], bb->index);\n }\n \n-/* For uses in STMT, mark names that are used outside of the loop they are\n-   defined to rewrite.  Record the set of blocks in which the ssa names are used\n-   to USE_BLOCKS and the ssa names themselves to NEED_PHIS.  */\n+/* For uses matching USE_FLAGS in STMT, mark names that are used outside of the\n+   loop they are defined to rewrite.  Record the set of blocks in which the ssa\n+   names are used to USE_BLOCKS, and the ssa names themselves to NEED_PHIS.  */\n \n static void\n-find_uses_to_rename_stmt (gimple stmt, bitmap *use_blocks, bitmap need_phis)\n+find_uses_to_rename_stmt (gimple stmt, bitmap *use_blocks, bitmap need_phis,\n+\t\t\t  int use_flags)\n {\n   ssa_op_iter iter;\n   tree var;\n@@ -417,53 +418,156 @@ find_uses_to_rename_stmt (gimple stmt, bitmap *use_blocks, bitmap need_phis)\n   if (is_gimple_debug (stmt))\n     return;\n \n-  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n-    find_uses_to_rename_use (bb, var, use_blocks, need_phis);\n+  /* FOR_EACH_SSA_TREE_OPERAND iterator does not allows SSA_OP_VIRTUAL_USES\n+     only.  */\n+  if (use_flags == SSA_OP_VIRTUAL_USES)\n+    {\n+      tree vuse = gimple_vuse (stmt);\n+      if (vuse != NULL_TREE)\n+\tfind_uses_to_rename_use (bb, gimple_vuse (stmt), use_blocks, need_phis);\n+    }\n+  else\n+    FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, use_flags)\n+      find_uses_to_rename_use (bb, var, use_blocks, need_phis);\n }\n \n-/* Marks names that are used in BB and outside of the loop they are defined in\n-   for rewrite.  Records the set of blocks in which the ssa names are used to\n-   USE_BLOCKS.  Record the SSA names that will need exit PHIs in NEED_PHIS.  */\n+/* Marks names matching USE_FLAGS that are used in BB and outside of the loop\n+   they are defined in for rewrite.  Records the set of blocks in which the ssa\n+   names are used to USE_BLOCKS.  Record the SSA names that will\n+   need exit PHIs in NEED_PHIS.  */\n \n static void\n-find_uses_to_rename_bb (basic_block bb, bitmap *use_blocks, bitmap need_phis)\n+find_uses_to_rename_bb (basic_block bb, bitmap *use_blocks, bitmap need_phis,\n+\t\t\tint use_flags)\n {\n   edge e;\n   edge_iterator ei;\n+  bool do_virtuals = (use_flags & SSA_OP_VIRTUAL_USES) != 0;\n+  bool do_nonvirtuals = (use_flags & SSA_OP_USE) != 0;\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n     for (gphi_iterator bsi = gsi_start_phis (e->dest); !gsi_end_p (bsi);\n \t gsi_next (&bsi))\n       {\n         gphi *phi = bsi.phi ();\n-\tif (! virtual_operand_p (gimple_phi_result (phi)))\n+\tbool virtual_p = virtual_operand_p (gimple_phi_result (phi));\n+\tif ((virtual_p && do_virtuals)\n+\t    || (!virtual_p && do_nonvirtuals))\n \t  find_uses_to_rename_use (bb, PHI_ARG_DEF_FROM_EDGE (phi, e),\n \t\t\t\t   use_blocks, need_phis);\n       }\n \n   for (gimple_stmt_iterator bsi = gsi_start_bb (bb); !gsi_end_p (bsi);\n        gsi_next (&bsi))\n-    find_uses_to_rename_stmt (gsi_stmt (bsi), use_blocks, need_phis);\n+    find_uses_to_rename_stmt (gsi_stmt (bsi), use_blocks, need_phis,\n+\t\t\t      use_flags);\n }\n \n-/* Marks names that are used outside of the loop they are defined in for\n-   rewrite.  Records the set of blocks in which the ssa names are used to\n-   USE_BLOCKS.  Record the SSA names that will need exit PHIs in NEED_PHIS.  If\n-   CHANGED_BBS is not NULL, scan only blocks in this set.  */\n+/* Marks names matching USE_FLAGS that are used outside of the loop they are\n+   defined in for rewrite.  Records the set of blocks in which the ssa names are\n+   used to USE_BLOCKS.  Record the SSA names that will need exit PHIs in\n+   NEED_PHIS.  If CHANGED_BBS is not NULL, scan only blocks in this set.  */\n \n static void\n-find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks, bitmap need_phis)\n+find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks, bitmap need_phis,\n+\t\t     int use_flags)\n {\n   basic_block bb;\n   unsigned index;\n   bitmap_iterator bi;\n \n   if (changed_bbs)\n     EXECUTE_IF_SET_IN_BITMAP (changed_bbs, 0, index, bi)\n-      find_uses_to_rename_bb (BASIC_BLOCK_FOR_FN (cfun, index), use_blocks, need_phis);\n+      find_uses_to_rename_bb (BASIC_BLOCK_FOR_FN (cfun, index), use_blocks,\n+\t\t\t      need_phis, use_flags);\n   else\n     FOR_EACH_BB_FN (bb, cfun)\n-      find_uses_to_rename_bb (bb, use_blocks, need_phis);\n+      find_uses_to_rename_bb (bb, use_blocks, need_phis, use_flags);\n+}\n+\n+/* Mark uses of DEF that are used outside of the loop they are defined in for\n+   rewrite.  Record the set of blocks in which the ssa names are used to\n+   USE_BLOCKS.  Record the SSA names that will need exit PHIs in NEED_PHIS.  */\n+\n+static void\n+find_uses_to_rename_def (tree def, bitmap *use_blocks, bitmap need_phis)\n+{\n+  gimple use_stmt;\n+  imm_use_iterator imm_iter;\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n+    {\n+      basic_block use_bb = gimple_bb (use_stmt);\n+\n+      use_operand_p use_p;\n+      FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\t{\n+\t  if (gimple_code (use_stmt) == GIMPLE_PHI)\n+\t    {\n+\t      edge e = gimple_phi_arg_edge (as_a <gphi *> (use_stmt),\n+\t\t\t\t\t    PHI_ARG_INDEX_FROM_USE (use_p));\n+\t      use_bb = e->src;\n+\t    }\n+\t  find_uses_to_rename_use (use_bb, USE_FROM_PTR (use_p), use_blocks,\n+\t\t\t\t   need_phis);\n+\t}\n+    }\n+}\n+\n+/* Marks names matching USE_FLAGS that are defined in LOOP and used outside of\n+   it for rewrite.  Records the set of blocks in which the ssa names are used to\n+   USE_BLOCKS.  Record the SSA names that will need exit PHIs in NEED_PHIS.  */\n+\n+static void\n+find_uses_to_rename_in_loop (struct loop *loop, bitmap *use_blocks,\n+\t\t\t     bitmap need_phis, int use_flags)\n+{\n+  bool do_virtuals = (use_flags & SSA_OP_VIRTUAL_USES) != 0;\n+  bool do_nonvirtuals = (use_flags & SSA_OP_USE) != 0;\n+  int def_flags = ((do_virtuals ? SSA_OP_VIRTUAL_DEFS : 0)\n+\t\t   | (do_nonvirtuals ? SSA_OP_DEF : 0));\n+\n+\n+  basic_block *bbs = get_loop_body (loop);\n+\n+  for (unsigned int i = 0; i < loop->num_nodes; i++)\n+    {\n+      basic_block bb = bbs[i];\n+\n+      for (gphi_iterator bsi = gsi_start_phis (bb); !gsi_end_p (bsi);\n+\t   gsi_next (&bsi))\n+\t{\n+\t  gphi *phi = bsi.phi ();\n+\t  tree res = gimple_phi_result (phi);\n+\t  bool virtual_p = virtual_operand_p (res);\n+\t  if ((virtual_p && do_virtuals)\n+\t      || (!virtual_p && do_nonvirtuals))\n+\t    find_uses_to_rename_def (res, use_blocks, need_phis);\n+      }\n+\n+      for (gimple_stmt_iterator bsi = gsi_start_bb (bb); !gsi_end_p (bsi);\n+\t   gsi_next (&bsi))\n+\t{\n+\t  gimple stmt = gsi_stmt (bsi);\n+\t  /* FOR_EACH_SSA_TREE_OPERAND iterator does not allows\n+\t     SSA_OP_VIRTUAL_DEFS only.  */\n+\t  if (def_flags == SSA_OP_VIRTUAL_DEFS)\n+\t    {\n+\t      tree vdef = gimple_vdef (stmt);\n+\t      if (vdef != NULL)\n+\t\tfind_uses_to_rename_def (vdef, use_blocks, need_phis);\n+\t    }\n+\t  else\n+\t    {\n+\t      tree var;\n+\t      ssa_op_iter iter;\n+\t      FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, def_flags)\n+\t\tfind_uses_to_rename_def (var, use_blocks, need_phis);\n+\t    }\n+\t}\n+    }\n+\n+  XDELETEVEC (bbs);\n }\n \n /* Rewrites the program into a loop closed ssa form -- i.e. inserts extra\n@@ -495,14 +599,19 @@ find_uses_to_rename (bitmap changed_bbs, bitmap *use_blocks, bitmap need_phis)\n       is not well-behaved, while the second one is an induction variable with\n       base 99 and step 1.\n \n-      If CHANGED_BBS is not NULL, we look for uses outside loops only in\n-      the basic blocks in this set.\n+      If LOOP is non-null, only rewrite uses that have defs in LOOP.  Otherwise,\n+      if CHANGED_BBS is not NULL, we look for uses outside loops only in the\n+      basic blocks in this set.\n+\n+      USE_FLAGS allows us to specify whether we want virtual, non-virtual or\n+      both variables rewritten.\n \n       UPDATE_FLAG is used in the call to update_ssa.  See\n       TODO_update_ssa* for documentation.  */\n \n void\n-rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n+rewrite_into_loop_closed_ssa_1 (bitmap changed_bbs, unsigned update_flag,\n+\t\t\t\tint use_flags, struct loop *loop)\n {\n   bitmap *use_blocks;\n   bitmap names_to_rename;\n@@ -513,7 +622,14 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n \n   /* If the pass has caused the SSA form to be out-of-date, update it\n      now.  */\n-  update_ssa (update_flag);\n+  if (update_flag == 0)\n+    {\n+#ifdef ENABLE_CHECKING\n+      verify_ssa (true, true);\n+#endif\n+    }\n+  else\n+    update_ssa (update_flag);\n \n   bitmap_obstack_initialize (&loop_renamer_obstack);\n \n@@ -524,8 +640,17 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n      in NAMES_TO_RENAME.  */\n   use_blocks = XNEWVEC (bitmap, num_ssa_names);\n \n-  /* Find the uses outside loops.  */\n-  find_uses_to_rename (changed_bbs, use_blocks, names_to_rename);\n+  if (loop != NULL)\n+    {\n+      gcc_assert (changed_bbs == NULL);\n+      find_uses_to_rename_in_loop (loop, use_blocks, names_to_rename,\n+\t\t\t\t   use_flags);\n+    }\n+  else\n+    {\n+      gcc_assert (loop == NULL);\n+      find_uses_to_rename (changed_bbs, use_blocks, names_to_rename, use_flags);\n+    }\n \n   if (!bitmap_empty_p (names_to_rename))\n     {\n@@ -549,55 +674,24 @@ rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n   free (use_blocks);\n }\n \n-/* Replace uses of OLD_VAL with NEW_VAL in bbs dominated by BB.  */\n+/* Rewrites the non-virtual defs and uses into a loop closed ssa form.  If\n+   CHANGED_BBS is not NULL, we look for uses outside loops only in the basic\n+   blocks in this set.  UPDATE_FLAG is used in the call to update_ssa.  See\n+   TODO_update_ssa* for documentation.  */\n \n-static void\n-replace_uses_in_dominated_bbs (tree old_val, tree new_val, basic_block bb)\n+void\n+rewrite_into_loop_closed_ssa (bitmap changed_bbs, unsigned update_flag)\n {\n-  gimple use_stmt;\n-  imm_use_iterator imm_iter;\n-\n-  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, old_val)\n-    {\n-      if (!dominated_by_p (CDI_DOMINATORS, gimple_bb (use_stmt), bb))\n-\t  continue;\n-\n-      use_operand_p use_p;\n-      FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n-\tSET_USE (use_p, new_val);\n-    }\n+  rewrite_into_loop_closed_ssa_1 (changed_bbs, update_flag, SSA_OP_USE, NULL);\n }\n \n-/* Ensure a virtual phi is present in the exit block, if LOOP contains a vdef.\n-   In other words, ensure loop-closed ssa normal form for virtuals.  Handles\n-   only loops with a single exit that dominates the latch.  */\n+/* Rewrites virtual defs and uses with def in LOOP into loop closed ssa\n+   form.  */\n \n void\n rewrite_virtuals_into_loop_closed_ssa (struct loop *loop)\n {\n-  gphi *phi;\n-  /* TODO: Handle !single_dom_exit loops.  */\n-  edge exit = single_dom_exit (loop);\n-  gcc_assert (exit != NULL);\n-\n-  phi = get_virtual_phi (loop->header);\n-  if (phi == NULL)\n-    return;\n-\n-  tree final_loop = PHI_ARG_DEF_FROM_EDGE (phi, single_succ_edge (loop->latch));\n-\n-  phi = get_virtual_phi (exit->dest);\n-  if (phi != NULL)\n-    {\n-      tree final_exit = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n-      gcc_assert (operand_equal_p (final_loop, final_exit, 0));\n-      return;\n-    }\n-\n-  tree res_new = copy_ssa_name (final_loop, NULL);\n-  gphi *nphi = create_phi_node (res_new, exit->dest);\n-  replace_uses_in_dominated_bbs (final_loop, res_new, exit->dest);\n-  add_phi_arg (nphi, final_loop, exit, UNKNOWN_LOCATION);\n+  rewrite_into_loop_closed_ssa_1 (NULL, 0, SSA_OP_VIRTUAL_USES, loop);\n }\n \n /* Check invariants of the loop closed ssa form for the USE in BB.  */"}]}