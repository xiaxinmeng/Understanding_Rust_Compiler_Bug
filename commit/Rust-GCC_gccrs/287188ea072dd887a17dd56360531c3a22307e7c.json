{"sha": "287188ea072dd887a17dd56360531c3a22307e7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3MTg4ZWEwNzJkZDg4N2ExN2RkNTYzNjA1MzFjM2EyMjMwN2U3Yw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-11-08T10:31:04Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2011-11-08T10:31:04Z"}, "message": "re PR libfortran/47970 (c99_functions.c:611:5: warning: implicit declaration of function 'round')\n\n\tPR libfortran/47970\n\t* intrinsics/c99_functions.c (round): Move higher in the file.\n\nFrom-SVN: r181153", "tree": {"sha": "fe52eb52fcdb9b2998fc1a82fc43d1a99450426d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe52eb52fcdb9b2998fc1a82fc43d1a99450426d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/287188ea072dd887a17dd56360531c3a22307e7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287188ea072dd887a17dd56360531c3a22307e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287188ea072dd887a17dd56360531c3a22307e7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287188ea072dd887a17dd56360531c3a22307e7c/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d29c953afdd7232bf34cb40eaf28511692b3e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d29c953afdd7232bf34cb40eaf28511692b3e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d29c953afdd7232bf34cb40eaf28511692b3e77"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "becb60128388bdc46a4cef2d964bb4c0d5a6de47", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287188ea072dd887a17dd56360531c3a22307e7c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287188ea072dd887a17dd56360531c3a22307e7c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=287188ea072dd887a17dd56360531c3a22307e7c", "patch": "@@ -1,3 +1,8 @@\n+2011-11-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/47970\n+\t* intrinsics/c99_functions.c (round): Move higher in the file.\n+\n 2011-11-07  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR libfortran/45723"}, {"sha": "a95f09ac01d79e7417a7064bce99d2b7e213ac62", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287188ea072dd887a17dd56360531c3a22307e7c/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287188ea072dd887a17dd56360531c3a22307e7c/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=287188ea072dd887a17dd56360531c3a22307e7c", "patch": "@@ -559,6 +559,37 @@ powf (float x, float y)\n #endif\n \n \n+#ifndef HAVE_ROUND\n+#define HAVE_ROUND 1\n+/* Round to nearest integral value.  If the argument is halfway between two\n+   integral values then round away from zero.  */\n+double round (double x);\n+\n+double\n+round (double x)\n+{\n+   double t;\n+   if (!isfinite (x))\n+     return (x);\n+\n+   if (x >= 0.0) \n+    {\n+      t = floor (x);\n+      if (t - x <= -0.5)\n+\tt += 1.0;\n+      return (t);\n+    } \n+   else \n+    {\n+      t = floor (-x);\n+      if (t + x <= -0.5)\n+\tt += 1.0;\n+      return (-t);\n+    }\n+}\n+#endif\n+\n+\n /* Algorithm by Steven G. Kargl.  */\n \n #if !defined(HAVE_ROUNDL)\n@@ -614,36 +645,6 @@ roundl (long double x)\n #endif\n #endif\n \n-#ifndef HAVE_ROUND\n-#define HAVE_ROUND 1\n-/* Round to nearest integral value.  If the argument is halfway between two\n-   integral values then round away from zero.  */\n-double round (double x);\n-\n-double\n-round (double x)\n-{\n-   double t;\n-   if (!isfinite (x))\n-     return (x);\n-\n-   if (x >= 0.0) \n-    {\n-      t = floor (x);\n-      if (t - x <= -0.5)\n-\tt += 1.0;\n-      return (t);\n-    } \n-   else \n-    {\n-      t = floor (-x);\n-      if (t + x <= -0.5)\n-\tt += 1.0;\n-      return (-t);\n-    }\n-}\n-#endif\n-\n #ifndef HAVE_ROUNDF\n #define HAVE_ROUNDF 1\n /* Round to nearest integral value.  If the argument is halfway between two"}]}