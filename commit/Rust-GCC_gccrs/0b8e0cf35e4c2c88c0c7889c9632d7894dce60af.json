{"sha": "0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4ZTBjZjM1ZTRjMmM4OGMwYzc4ODljOTYzMmQ3ODk0ZGNlNjBhZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-09T08:55:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-09T08:55:06Z"}, "message": "configopts.html: Edit.\n\n\n2000-10-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* docs/configopts.html: Edit.\n\n\t* libio/Makefile.am (INCLUDES): Remove duplicates, simplify.\n\t* libio/Makefile.in: Regenerate.\n\t* libmath/Makefile.am (INCLUDES): Remove duplicates, simplify.\n\t* libmath/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am (INCLUDES): Remove duplicate.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* Makefile.am (AM_MAKEFLAGS): Add GLIBCPP_INCLUDES,\n\tTOPLEVEL_INCLUDES, LIBMATH_INCLUDES, LIBIO_INCLUDES,\n\tCSHADOW_INCLUDES up here.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.am (CSHADOW_INCLUDES): Add include/c_std, include/c\n\tfor shadow headers.\n\t(myinstallheaders): Change glibcpp_includedir to GLIBCPP_INCLUDES.\n\tMove GLIBCPP_INCLUDES, TOPLEVEL_INCLUDES, LIBMATH_INCLUDES,\n\tLIBIO_INCLUDES, CSHADOW_INCLUDES up Makefile hierarchy.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/c: New directory.\n\t* include/c/bits/(std_cassert.h, std_cctype.h, std_cerrno.h,\n\tstd_cfloat.h, std_climits.h, std_clocale.h, std_cmath.h,\n\tstd_csetjmp.h, std_csignal.h, std_cstdarg.h, std_cstddef.h,\n\tstd_cstdio.h, std_cstdlib.h, std_cstring.h, std_ctime.h,\n\tstd_cwchar.h, std_cwctype.h): Add, moving from...\n\t* include/bits: ...here.\n\t* include/c_std: New directory.\n\t* include/c_std/bits/*: Populate from...\n\t* shadow: ...here. Remove directory.\n\nFrom-SVN: r36805", "tree": {"sha": "e4bb97dafe0d7ffcf8453f17aa28cd9458c7c4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4bb97dafe0d7ffcf8453f17aa28cd9458c7c4df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/comments", "author": null, "committer": null, "parents": [{"sha": "b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d"}], "stats": {"total": 1984, "additions": 168, "deletions": 1816}, "files": [{"sha": "0a77130d853eff06f263f453749496b201edabe6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -1,3 +1,36 @@\n+2000-10-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* docs/configopts.html: Edit.\n+\n+\t* libio/Makefile.am (INCLUDES): Remove duplicates, simplify.\n+\t* libio/Makefile.in: Regenerate.\n+\t* libmath/Makefile.am (INCLUDES): Remove duplicates, simplify.\n+\t* libmath/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am (INCLUDES): Remove duplicate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\n+\t* Makefile.am (AM_MAKEFLAGS): Add GLIBCPP_INCLUDES,\n+\tTOPLEVEL_INCLUDES, LIBMATH_INCLUDES, LIBIO_INCLUDES,\n+\tCSHADOW_INCLUDES up here.\n+\t* Makefile.in: Regenerate.\n+\t* src/Makefile.am (CSHADOW_INCLUDES): Add include/c_std, include/c\n+\tfor shadow headers.\n+\t(myinstallheaders): Change glibcpp_includedir to GLIBCPP_INCLUDES.\n+\tMove GLIBCPP_INCLUDES, TOPLEVEL_INCLUDES, LIBMATH_INCLUDES,\n+\tLIBIO_INCLUDES, CSHADOW_INCLUDES up Makefile hierarchy.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\t* include/c: New directory.\n+\t* include/c/bits/(std_cassert.h, std_cctype.h, std_cerrno.h,\n+\tstd_cfloat.h, std_climits.h, std_clocale.h, std_cmath.h,\n+\tstd_csetjmp.h, std_csignal.h, std_cstdarg.h, std_cstddef.h,\n+\tstd_cstdio.h, std_cstdlib.h, std_cstring.h, std_ctime.h,\n+\tstd_cwchar.h, std_cwctype.h): Add, moving from...\n+\t* include/bits: ...here.\n+\t* include/c_std: New directory.\n+\t* include/c_std/bits/*: Populate from...\n+\t* shadow: ...here. Remove directory.\n+\t\n 2000-10-08   Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* libsupc++/Makefile.am (INCLUDES): Add toplevel include directory."}, {"sha": "7803b79f4c25eaaa937e8aa721a7d1a8a27bc8bc", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -52,6 +52,32 @@ CONFIG_CXXFLAGS = \\\n \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n \n+# Root level of the include sources.\n+GLIBCPP_INCLUDES = $(top_srcdir)/include\n+\n+# Passed down for cross compilers, canadian crosses.\n+TOPLEVEL_INCLUDES = -I$(includedir)\n+\n+LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n+\n+if GLIBCPP_NEED_LIBIO\n+LIBIO_INCLUDES = \\\n+\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n+else\n+LIBIO_INCLUDES = -I$(top_srcdir)/libio\n+endif\n+\n+# XXX may need to add this in later to enabled shadow header includes\n+#\t-I$(top_builddir)/cshadow\n+if GLIBCPP_USE_CSHADOW\n+CSHADOW_INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c_std\n+else\n+CSHADOW_INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c\n+endif\n+\n+\n # Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n # because then the paths will be full pathnames, not relative\n # pathnames. (-Wl,--rpath seems to like this better.)\n@@ -149,10 +175,10 @@ AM_MAKEFLAGS = \\\n \t\"WERROR=$(WERROR)\" \\\n \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \\\n \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \\\n-\t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \n-\n-\n-\n-\n-\n+\t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \\\n+\t\"GLIBCPP_INCLUDES=$(GLIBCPP_INCLUDES)\" \\\n+\t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \\\n+\t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \\\n+\t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \\\n+\t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\"\n "}, {"sha": "93e69f5ddda999b2ff41ab999651daebe7c3db7c", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -128,6 +128,18 @@ WARN_CXXFLAGS =  \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(WERROR) @WFMT\n CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n \n \n+# Root level of the include sources.\n+GLIBCPP_INCLUDES = $(top_srcdir)/include\n+\n+# Passed down for cross compilers, canadian crosses.\n+TOPLEVEL_INCLUDES = -I$(includedir)\n+\n+LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n+@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = -I$(top_srcdir)/libio\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c_std\n+@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_INCLUDES = \t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c\n+\n # Multilib support.\n MAKEOVERRIDES = \n \n@@ -142,7 +154,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \t\"GLIBCPP_INCLUDES=$(GLIBCPP_INCLUDES)\" \t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\"\n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "ccceac0e04d51c3efdea67ed2243c04d7ec53874", "filename": "libstdc++-v3/docs/configopts.html", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fconfigopts.html?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -9,7 +9,7 @@\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=\"home\" HREF=\"http://sources.redhat.com/libstdc++/\">\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.7 2000/08/09 07:33:39 bkoz Exp $ -->\n+<!-- $Id: configopts.html,v 1.8 2000/08/28 18:41:24 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -91,8 +91,9 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n      </P>\n \n  <DT><TT>--enable-cshadow-headers  </TT>\n- <DD><P>This turns on the code to construct shadowed C headers.  Very\n-        experimental as of this writing.\n+ <DD><P>This turns on the code to construct shadowed C headers, and to\n+        use c headers in the std:: namespace.  Very experimental as of\n+        this writing.\n      </P>\n \n  <DT><TT>--enable-threads  </TT>\n@@ -171,7 +172,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.7 2000/08/09 07:33:39 bkoz Exp $\n+$Id: configopts.html,v 1.8 2000/08/28 18:41:24 pme Exp $\n </EM></P>\n \n "}, {"sha": "9b98a21bcee1a08b28fbb0be7242ae14dd6da35c", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -1,3 +1,9 @@\n+2000-10-08  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* Makefile.am (INCLUDES): Simplify.\n+\t* libioP.h (JUMP1): If compiling c++, use std headers.\n+\t* _G_config.h: Same.\n+\t\n 2000-10-07  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* Makefile.am (CONFIG_INCLUDES): Remove."}, {"sha": "977b721facb4dbf8c79139138c6b71c82f0ae0d8", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -25,22 +25,10 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libio.la\n \n-# Root level of the include sources.\n-glibcpp_includedir = $(top_srcdir)/include\n-\n-# Passed down for cross compilers, canadian crosses.\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-if GLIBCPP_NEED_LIBIO\n-LIBIO_INCLUDES = \\\n-\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n-else\n-LIBIO_INCLUDES = \n-endif\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t-I$(top_builddir) -I$(glibcpp_includedir) \\\n+\t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \\\n \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n libio_headers = \\"}, {"sha": "6e3ad72bfe2a720f2c51e5959366c28d87c4357d", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -105,15 +105,7 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libio.la\n \n-# Root level of the include sources.\n-glibcpp_includedir = $(top_srcdir)/include\n-\n-# Passed down for cross compilers, canadian crosses.\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n-@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = \n-\n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(glibcpp_includedir) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n libio_headers =          libio.h libioP.h iolibio.h"}, {"sha": "6e5ab157c9847eae12d13e90200e259e878f1b1c", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -16,7 +16,11 @@\n #define __need_wchar_t\n #define __need_wint_t\n #define __need_NULL\n-#include <bits/std_cstddef.h>\n+#ifdef __cplusplus\n+# include <cstddef>\n+#else\n+# include <stddef.h>\n+#endif\n \n \n #ifndef _WINT_T\n@@ -72,19 +76,6 @@ typedef __off64_t _G_fpos64_t;\n #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n # include <iconv.h>\n typedef iconv_t _G_iconv_t;\n-# if 0\n-/* XXX Commented out because outside glibc we have to use iconv()\n-   and not gconv().  */\n-typedef union\n-{\n-  struct __gconv_info __cd;\n-  struct\n-  {\n-    struct __gconv_info __cd;\n-    struct __gconv_step_data __data;\n-  } __combined;\n-} _G_iconv_t;\n-# endif\n #endif\n \n typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));\n@@ -137,3 +128,4 @@ typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));\n #endif\n \n #endif\t/* _G_config.h */\n+"}, {"sha": "46933d4e9f959d1b47102af5f96d5a7e35626aea", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -50,8 +50,7 @@ libmath_la_SOURCES = \\\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n-TOPLEVEL_INCLUDES = -I$(includedir)\n-INCLUDES = -I../include  $(TOPLEVEL_INCLUDES)\n+INCLUDES = -I$(GLIBCPP_INCLUDES) $(TOPLEVEL_INCLUDES)\n \n \n "}, {"sha": "eaa56c8ed5f76c1e7a09b224548eb0bc61223443", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -121,8 +121,7 @@ libmath_la_SOURCES =  \tsignbit.c signbitf.c cabs.c cabsf.c\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n-TOPLEVEL_INCLUDES = -I$(includedir)\n-INCLUDES = -I../include  $(TOPLEVEL_INCLUDES)\n+INCLUDES = -I$(GLIBCPP_INCLUDES) $(TOPLEVEL_INCLUDES)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "8769356713786ac296ab88b3b2e4bbba47d9244e", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -41,12 +41,12 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n-# Root level of the include sources.\n-glibcpp_includedir = $(top_srcdir)/include\n+\n+LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++/include\n \n INCLUDES = \\\n \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n-\t-I$(top_srcdir)/libsupc++/include -I$(glibcpp_includedir) \\\n+\t$(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDES) \\\n \t$(CONFIG_INCLUDES)\n \n headers = \\"}, {"sha": "526843b1bec0e97604ec4a1f155e2db4ed57e5ee", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -113,10 +113,9 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n-# Root level of the include sources.\n-glibcpp_includedir = $(top_srcdir)/include\n+LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++/include\n \n-INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t-I$(top_srcdir)/libsupc++/include -I$(glibcpp_includedir) \t$(CONFIG_INCLUDES)\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDES) \t$(CONFIG_INCLUDES)\n \n \n headers =  \tinclude/cxxabi.h \tinclude/exception \tinclude/new \tinclude/new.h \tinclude/typeinfo"}, {"sha": "3507bdf449a5663a590fbc79f4fc1b488effa0a5", "filename": "libstdc++-v3/shadow/assert.h", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fassert.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,51 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-// no include guard here.\n-#ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-# undef _IN_C_LEGACY_\n-# define _ASSERT_NEED_C_LEGACY_\n-#endif\n-\n-#include <cassert>\n- \n-  // expose global C names, including non-standard ones, but shadow\n-  //   some names and types with the std:: C++ version.\n-\n-#ifdef _ASSERT_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-# define _IN_C_LEGACY_\n-# undef _ASSERT_NEED_C_LEGACY_\n-#endif /* _ASSERT_NEED_C_LEGACY_ */"}, {"sha": "7dcea803ab527ef4d0e9f75e6a1c8a8f1b749fc4", "filename": "libstdc++-v3/shadow/ctype.h", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fctype.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,68 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_CTYPE_H_\n-# define _INCLUDED_CPP_CTYPE_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-#error ctype.h\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _CTYPE_NEED_C_LEGACY_\n-# endif\n-\n-# include <cctype>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::isalnum;\n-  using std::isalpha;\n-  using std::iscntrl;\n-  using std::isdigit;\n-  using std::isgraph;\n-  using std::islower;\n-  using std::isprint;\n-  using std::ispunct;\n-  using std::isspace;\n-  using std::isupper;\n-  using std::isxdigit;\n-  using std::tolower;\n-  using std::toupper;\n-\n-# ifdef _CTYPE_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _CTYPE_NEED_C_LEGACY_\n-# endif /* _CTYPE_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_CTYPE_H_ */"}, {"sha": "f2e6aee6701524157b71bbf8eba3063c2266711c", "filename": "libstdc++-v3/shadow/errno.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ferrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ferrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ferrno.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,55 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_ERRNO_H_\n-# define _INCLUDED_CPP_ERRNO_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _ERRNO_NEED_C_LEGACY_\n-# endif\n-\n-# include <cerrno>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::errno;\n-\n-# ifdef _ERRNO_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _ERRNO_NEED_C_LEGACY_\n-# endif /* _ERRNO_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_ERRNO_H_ */"}, {"sha": "f19a15492741348eaf7596f73619eb05f350caee", "filename": "libstdc++-v3/shadow/fcntl.h", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ffcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ffcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ffcntl.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,63 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_FCNTL_H_\n-# define _INCLUDED_CPP_FCNTL_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _FCNTL_NEED_C_LEGACY_\n-# endif\n-\n-# include <bits/wrap_fcntl.h>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using _C_legacy::flock;\n-\n-  using _C_legacy::creat;\n-  using _C_legacy::open;\n-  using _C_legacy::fcntl;\n-\n-# ifdef _FCNTL_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _FCNTL_NEED_C_LEGACY_\n-# endif /* _FCNTL_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_FCNTL_H_ */\n-\n-\n-\n-"}, {"sha": "f52c5f5c9eb578316b18e6bacf1ac2e4b5a18d31", "filename": "libstdc++-v3/shadow/float.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ffloat.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,54 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_FLOAT_H_\n-# define _INCLUDED_CPP_FLOAT_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _FLOAT_NEED_C_LEGACY_\n-# endif\n-\n-# include <cfloat>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-\n-# ifdef _FLOAT_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _FLOAT_NEED_C_LEGACY_\n-# endif /* _FLOAT_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_FLOAT_H_ */"}, {"sha": "1ea5038c24a2a222aab81477cf9f7837ad31dac5", "filename": "libstdc++-v3/shadow/iconv.h", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ficonv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ficonv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ficonv.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,66 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_ICONV_H_\n-# define _INCLUDED_CPP_ICONV_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _ICONV_NEED_C_LEGACY_\n-# endif\n-\n-# include <bits/wrap_iconv.h>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-\n-  // NB: Cannot use typedefs here to inject the names as the \"C\" headers\n-  // often include typedefs that include the keyword 'struct'\n-  using _C_legacy::iconv_t;\n-\n-  using _C_legacy::iconv_open;\n-  using _C_legacy::iconv;\n-  using _C_legacy::iconv_close;\n-\n-# ifdef _ICONV_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _ICONV_NEED_C_LEGACY_\n-# endif /* _ICONV_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_ICONV_H_ */\n-\n-\n-\n-"}, {"sha": "845f6403594e3068f23d69da5ee3e0385a49bceb", "filename": "libstdc++-v3/shadow/iolibio.h", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fiolibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fiolibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fiolibio.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,58 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_IOLIBIO_H_\n-# define _INCLUDED_CPP_IOLIBIO_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _IOLIBIO_NEED_C_LEGACY_\n-# endif\n-\n-# include <bits/wrap_iolibio.h>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-\n-# ifdef _IOLIBIO_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _IOLIBIO_NEED_C_LEGACY_\n-# endif /* _IOLIBIO_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_IOLIBIO_H_ */\n-\n-\n-\n-"}, {"sha": "2cafc7d88ebffa154757c6c9ede9e4cf1c9063da", "filename": "libstdc++-v3/shadow/libio.h", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flibio.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,81 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_LIBIO_H_\n-# define _INCLUDED_CPP_LIBIO_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _LIBIO_NEED_C_LEGACY_\n-# endif\n-\n-# include <bits/wrap_libio.h>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-\n-  // NB: Cannot use typedefs here to inject the names as the \"C\" headers\n-  // often include typedefs that include the keyword 'struct'\n-  using _C_legacy::_IO_pos_t;\n-  using _C_legacy::_IO_fpos_t;\n-  using _C_legacy::_IO_fpos64_t;\n-  using _C_legacy::_IO_size_t;\n-  using _C_legacy::_IO_ssize_t;\n-  using _C_legacy::_IO_off_t;\n-  using _C_legacy::_IO_off64_t;\n-  using _C_legacy::_IO_pid_t;\n-  using _C_legacy::_IO_uid_t;\n-  using _C_legacy::_IO_iconv_t;\n-  using _C_legacy::_IO_va_list;\n-  using _C_legacy::_IO_wint_t;\n-  using _C_legacy::_IO_lock_t;\n-\n-  using _C_legacy::_IO_marker;\n-  using _C_legacy::_IO_codecvt;\n-  using _C_legacy::_IO_wide_data;\n-  using _C_legacy::_IO_FILE;\n-  using _C_legacy::_IO_cookie_io_functions_t;\n-  using _C_legacy::_IO_cookie_file;\n-\n-# ifdef _LIBIO_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _LIBIO_NEED_C_LEGACY_\n-# endif /* _LIBIO_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_LIBIO_H_ */\n-\n-\n-\n-"}, {"sha": "da3e716768fb92dedc657b098ed1a34433f644ed", "filename": "libstdc++-v3/shadow/libioP.h", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2FlibioP.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,64 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_LIBIOP_H_\n-# define _INCLUDED_CPP_LIBIOP_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _LIBIOP_NEED_C_LEGACY_\n-# endif\n-\n-# include <bits/wrap_libioP.h>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using _C_legacy::_IO_jump_t;\n-  using _C_legacy::_IO_FILE_plus;\n-  using _C_legacy::_IO_cookie_file;\n-\n-  using _C_legacy::_IO_file_jumps;\n-  using _C_legacy::_IO_wfile_jumps;\n-\n-# ifdef _LIBIOP_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _LIBIOP_NEED_C_LEGACY_\n-# endif /* _LIBIOP_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_LIBIOP_H_ */\n-\n-\n-\n-"}, {"sha": "26aa771f2d58860e0aa5866d6102f5aad7e5da75", "filename": "libstdc++-v3/shadow/limits.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flimits.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,54 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_LIMITS_H_\n-# define _INCLUDED_CPP_LIMITS_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _LIMITS_NEED_C_LEGACY_\n-# endif\n-\n-# include <climits>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-\n-# ifdef _LIMITS_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _LIMITS_NEED_C_LEGACY_\n-# endif /* _LIMITS_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_LIMITS_H_ */"}, {"sha": "1d5f529ed896d1d9be2aaca82bf58a41cee6f28f", "filename": "libstdc++-v3/shadow/locale.h", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Flocale.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,57 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_LOCALE_H_\n-# define _INCLUDED_CPP_LOCALE_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _LOCALE_NEED_C_LEGACY_\n-#endif\n-\n-# include <clocale>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::lconv;\n-  using std::setlocale;\n-  using std::localeconv;\n-\n-# ifdef _LOCALE_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _LOCALE_NEED_C_LEGACY_\n-# endif /* _LOCALE_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_LOCALE_H_ */"}, {"sha": "f2ec04af671b228edf7769e4fc7a64eaca8f0720", "filename": "libstdc++-v3/shadow/math.h", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fmath.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,131 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_MATH_H_\n-# define _INCLUDED_CPP_MATH_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _MATH_NEED_C_LEGACY_\n-# endif\n-\n-# include <cmath>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::abs;\n-  using std::acos;\n-  using std::asin;\n-  using std::atan;\n-  using std::atan2;\n-  using std::cos;\n-  using std::sin;\n-  using std::tan;\n-  using std::cosh;\n-  using std::sinh;\n-  using std::tanh;\n-  using std::exp;\n-  using std::frexp;\n-  using std::ldexp;\n-  using std::log;\n-  using std::log10;\n-  using std::modf;\n-  using std::pow;\n-  using std::sqrt;\n-  using std::ceil;\n-  using std::fabs;\n-  using std::floor;\n-  using std::fmod;\n-\n-  // From ISO/IEC 9899:1999\n-  using std::absf;\n-  using std::acosf;\n-  using std::asinf;\n-  using std::atanf;\n-  using std::atan2f;\n-  using std::cosf;\n-  using std::sinf;\n-  using std::tanf;\n-  using std::coshf;\n-  using std::sinhf;\n-  using std::tanhf;\n-  using std::expf;\n-  using std::frexpf;\n-  using std::ldexpf;\n-  using std::logf;\n-  using std::log10f;\n-  using std::modff;\n-  using std::powf;\n-  using std::sqrtf;\n-  using std::ceilf;\n-  using std::fabsf;\n-  using std::floorf;\n-  using std::fmodf;\n-\n-  // From ISO/IEC 9899:1999\n-  using std::absl;\n-  using std::acosl;\n-  using std::asinl;\n-  using std::atanl;\n-  using std::atan2l;\n-  using std::cosl;\n-  using std::sinl;\n-  using std::tanl;\n-  using std::coshl;\n-  using std::sinhl;\n-  using std::tanhl;\n-  using std::expl;\n-  using std::frexpl;\n-  using std::ldexpl;\n-  using std::logl;\n-  using std::log10l;\n-  using std::modfl;\n-  using std::powl;\n-  using std::sqrtl;\n-  using std::ceill;\n-  using std::fabsl;\n-  using std::floorl;\n-  using std::fmodl;\n-\n-# ifdef _MATH_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _MATH_NEED_C_LEGACY_\n-# endif /* _MATH_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_MATH_H_ */\n-\n-\n-\n-"}, {"sha": "8692d3e52d43b6b88822ad4249c2b4f974b569cb", "filename": "libstdc++-v3/shadow/pthread.h", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fpthread.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,86 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_PTHREAD_H_\n-# define _INCLUDED_CPP_PTHREAD_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _PTHREAD_NEED_C_LEGACY_\n-# endif\n-\n-# include <bits/wrap_pthread.h>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using _C_legacy::__sched_param;\n-\n-  using _C_legacy::pthread_attr_t;\n-  using _C_legacy::pthread_cond_t;\n-  using _C_legacy::pthread_condattr_t;\n-  using _C_legacy::pthread_key_t;\n-  using _C_legacy::pthread_mutex_t;\n-  using _C_legacy::pthread_mutexattr_t;\n-  using _C_legacy::pthread_once_t;\n-  using _C_legacy::pthread_rwlock_t;\n-  using _C_legacy::pthread_rwlockattr_t;\n-  using _C_legacy::pthread_t;\n-\n-  using _C_legacy::pthread_mutex_init;\n-  using _C_legacy::pthread_mutex_destroy;\n-  using _C_legacy::pthread_mutex_lock;\n-  using _C_legacy::pthread_mutex_trylock;\n-  using _C_legacy::pthread_mutex_unlock;\n-  using _C_legacy::pthread_mutexattr_init;\n-  using _C_legacy::pthread_mutexattr_destroy;\n-  using _C_legacy::pthread_mutexattr_settype;\n-  using _C_legacy::pthread_mutexattr_gettype;\n-  using _C_legacy::pthread_key_create;\n-  using _C_legacy::pthread_key_delete;\n-  using _C_legacy::pthread_setspecific;\n-  using _C_legacy::pthread_getspecific;\n-  using _C_legacy::pthread_once;\n-  using _C_legacy::pthread_atfork;\n-\n-# ifdef _PTHREAD_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _PTHREAD_NEED_C_LEGACY_\n-# endif /* _PTHREAD_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_PTHREAD_H_ */\n-\n-\n-\n-"}, {"sha": "c4061e871dbaa3dd2137066dfaad982bd0c6f489", "filename": "libstdc++-v3/shadow/setjmp.h", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsetjmp.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,56 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_SETJMP_H_\n-# define _INCLUDED_CPP_SETJMP_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _SETJMP_NEED_C_LEGACY_\n-# endif\n-\n-# include <csetjmp>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::jmp_buf;\n-  using std::longjmp;\n-\n-# ifdef _SETJMP_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _SETJMP_NEED_C_LEGACY_\n-# endif /* _SETJMP_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_SETJMP_H_ */"}, {"sha": "819ddf22f325f0277f8f08fbd49d929a4d19c125", "filename": "libstdc++-v3/shadow/signal.h", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsignal.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,58 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_SIGNAL_H_\n-# define _INCLUDED_CPP_SIGNAL_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _SIGNAL_NEED_C_LEGACY_\n-# endif\n-\n-# include <csignal>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::sig_atomic_t;\n-\n-  using std::raise;\n-  using std::signal;\n-\n-# ifdef _SIGNAL_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _SIGNAL_NEED_C_LEGACY_\n-#  endif /* _SIGNAL_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_SIGNAL_H_ */"}, {"sha": "cb32feca7d60956f2a2961373f64f17c7b7de81b", "filename": "libstdc++-v3/shadow/stdarg.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdarg.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,55 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_STDARG_H_\n-# define _INCLUDED_CPP_STDARG_H_ 1\n-\n-#ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _STDARG_NEED_C_LEGACY_\n-# endif\n-\n-# include <cstdarg>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::va_list;\n-\n-# ifdef _STDARG_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _STDARG_NEED_C_LEGACY_\n-# endif /* _STDARG_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_STDARG_H_ */"}, {"sha": "03d5896779ea32e7e4d9709223d1fbe8d789d070", "filename": "libstdc++-v3/shadow/stddef.h", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstddef.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,60 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_STDDEF_H_\n-# define _INCLUDED_CPP_STDDEF_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _STDDEF_NEED_C_LEGACY_\n-# endif\n-\n-# include <cstddef>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::ptrdiff_t;\n-  using std::size_t;\n-\n-# ifdef _STDDEF_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _STDDEF_NEED_C_LEGACY_\n-# endif /* _STDDEF_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_STDDEF_H_ */\n-\n-\n-\n-"}, {"sha": "c3a43b736c2dc14aa61b42b1c361373716f3aa1a", "filename": "libstdc++-v3/shadow/stdio.h", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdio.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,97 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef  _INCLUDED_CPP_STDIO_H_\n-# define _INCLUDED_CPP_STDIO_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _STDIO_NEED_C_LEGACY_\n-# endif\n-\n-# include <cstdio>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::FILE;\n-  using std::fpos_t; \n-\n-  using std::remove;\n-  using std::rename;\n-  using std::tmpfile;\n-  using std::tmpnam;\n-  using std::fclose;\n-  using std::fflush;\n-  using std::fopen;\n-  using std::freopen;\n-  using std::setbuf;\n-  using std::setvbuf;\n-  using std::fprintf;\n-  using std::fscanf;\n-  using std::printf;\n-  using std::scanf;\n-  using std::sprintf;\n-  using std::sscanf;\n-  using std::vfprintf;\n-  using std::vprintf;\n-  using std::vsprintf;\n-  using std::fgetc;\n-  using std::fgets;\n-  using std::fputc;\n-  using std::fputs;\n-  using std::getc;\n-  using std::getchar;\n-  using std::gets;\n-  using std::putc;\n-  using std::putchar;\n-  using std::puts;\n-  using std::ungetc;\n-  using std::fread;\n-  using std::fwrite;\n-  using std::fgetpos;\n-  using std::fseek;\n-  using std::fsetpos;\n-  using std::ftell;\n-  using std::rewind;\n-  using std::clearerr;\n-  using std::feof;\n-  using std::ferror;\n-  using std::perror;\n-\n-# ifdef _STDIO_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _STDIO_NEED_C_LEGACY_\n-# endif /* _STDIO_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_STDIO_H_ */"}, {"sha": "bc5dcc96743f8980d45340fd2904074b484f7ea7", "filename": "libstdc++-v3/shadow/stdlib.h", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstdlib.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,95 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_STDLIB_H_\n-# define _INCLUDED_CPP_STDLIB_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _STDLIB_NEED_C_LEGACY_\n-# endif\n-\n-# include <cstdlib>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::div_t;\n-  using std::ldiv_t;\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  using std::lldiv_t;\n-#endif\n-\n-  using std::abort;\n-  using std::abs;\n-  using std::atexit;\n-  using std::atof;\n-  using std::atoi;\n-  using std::atol;\n-  using std::bsearch;\n-  using std::calloc;\n-  using std::div;\n-  using std::exit;\n-  using std::free;\n-  using std::getenv;\n-  using std::labs;\n-  using std::ldiv;\n-  using std::malloc;\n-  using std::mblen;\n-  using std::mbstowcs;\n-  using std::mbtowc;\n-  using std::qsort;\n-  using std::rand;\n-  using std::realloc;\n-  using std::srand;\n-  using std::strtod;\n-  using std::strtol;\n-  using std::strtoul;\n-  using std::system;\n-  using std::wcstombs;\n-  using std::wctomb;\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  using std::strtoll;\n-  using std::strtoull;\n-  using std::strtof;\n-  using std::strtold;\n-#endif\n-\n-# ifdef _STDLIB_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _STDLIB_NEED_C_LEGACY_\n-# endif /* _STDLIB_NEED_C__LEGACY_ */\n-#endif /* _INCLUDED_CPP_STDLIB_H_ */"}, {"sha": "6f9e6cc6372e8b53172ed1fc12f432e79213abe3", "filename": "libstdc++-v3/shadow/string.h", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fstring.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,76 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_STRING_H_\n-# define _INCLUDED_CPP_STRING_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _STRING_NEED_C_LEGACY_\n-# endif\n-\n-# include <cstring>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::memcpy;\n-  using std::memmove;\n-  using std::strcpy;\n-  using std::strncpy;\n-  using std::strcat;\n-  using std::strncat;\n-  using std::memcmp;\n-  using std::strcmp;\n-  using std::strcoll;\n-  using std::strncmp;\n-  using std::strxfrm;\n-  using std::memchr;\n-  using std::strchr;\n-  using std::strcspn;\n-  using std::strpbrk;\n-  using std::strrchr;\n-  using std::strspn;\n-  using std::strstr;\n-  using std::strtok;\n-  using std::memset;\n-  using std::strerror;\n-  using std::strlen;\n-\n-# ifdef _STRING_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _STRING_NEED_C_LEGACY_\n-# endif /* _STRING_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_STRING_H_ */"}, {"sha": "31064aaa135187a98d64b1cbdb8d63d8368c0405", "filename": "libstdc++-v3/shadow/time.h", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Ftime.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,67 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_TIME_H_\n-# define _INCLUDED_CPP_TIME_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _TIME_NEED_C_LEGACY_\n-# endif\n-\n-# include <ctime>\n- \n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::clock_t;\n-  using std::time_t;\n-  using std::tm;\n-\n-  using std::clock;\n-  using std::difftime;\n-  using std::mktime;\n-  using std::time;\n-  using std::asctime;\n-  using std::ctime;\n-  using std::gmtime;\n-  using std::localtime;\n-  using std::strftime;\n-\n-# ifdef _TIME_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _TIME_NEED_C_LEGACY_\n-# endif /* _TIME_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_TIME_H_ */"}, {"sha": "efabb1519a5b85011ec829ba81b03c9eca80d2d7", "filename": "libstdc++-v3/shadow/wchar.h", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwchar.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,131 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_WCHAR_H_\n-# define _INCLUDED_CPP_WCHAR_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_  /* sub-included by a C header */\n-#  define _WCHAR_NEED_C_LEGACY_\n-# endif\n-\n-# include <cwchar>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::wchar_t;\n-  using std::wint_t;\n-  using std::mbstate_t;\n-\n-#if 0\n-  using std::fwprintf;\n-  using std::fwscanf;\n-  using std::swprintf;\n-  using std::swscanf;\n-  using std::vfwprintf;\n-  using std::vfwscanf;\n-  using std::vswprintf;\n-  using std::vswscanf;\n-  using std::vwprintf;\n-  using std::vwscanf;\n-  using std::wprintf;\n-  using std::wscanf;\n-  using std::fgetwc;\n-  using std::fgetws;\n-  using std::fputwc;\n-  using std::fputws;\n-  using std::fwide;\n-  using std::getwc;\n-  using std::getwchar;\n-  using std::putwc;\n-  using std::putwchar;\n-  using std::ungetwc;\n-#endif\n-\n-  using std::wcstod;\n-  using std::wcstof;\n-  using std::wcstold;\n-  using std::wcstol;\n-  using std::wcstoll;\n-  using std::wcstoul;\n-  using std::wcstoull;\n-  using std::wcscpy;\n-  using std::wcsncpy;\n-  using std::wcscat;\n-  using std::wcsncat;\n-\n-#if 0\n-  using std::wcsmp;\n-#endif\n-\n-  using std::wcscoll;\n-  using std::wcsncmp;\n-  using std::wcsxfrm;\n-  using std::wcschr;\n-  using std::wcscspn;\n-  using std::wcslen;\n-  using std::wcspbrk;\n-  using std::wcsrchr;\n-  using std::wcsspn;\n-  using std::wcsstr;\n-  using std::wcstok;\n-  using std::wmemchr;\n-  using std::wmemcmp;\n-  using std::wmemcpy;\n-  using std::wmemmove;\n-  using std::wmemset;\n-\n-#if 0\n-  using std::wcsftime;\n-#endif\n-\n-  using std::btowc;\n-  using std::wctob;\n-  using std::mbsinit;\n-  using std::mbrlen;\n-  using std::mbrtowc;\n-  using std::wcrtomb;\n-  using std::mbsrtowcs;\n-  using std::wcsrtombs;\n-\n-# ifdef _WCHAR_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _WCHAR_NEED_C_LEGACY_\n-# endif /* _WCHAR_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_WCHAR_H_ */\n-\n-\n-"}, {"sha": "cae1aff43e14caecac6184781dc9e73e306a0265", "filename": "libstdc++-v3/shadow/wctype.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fwctype.h?ref=b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "patch": "@@ -1,74 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef  _INCLUDED_CPP_CWCTYPE_H_\n-# define _INCLUDED_CPP_CWCTYPE_H_ 1\n-\n-# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n-      // get out of the \"legacy\"\n-    } // close extern \"C\"\n-  }   // close namespace _C_legacy::\n-#  undef _IN_C_LEGACY_\n-#  define _CWCHAR_NEED_C_LEGACY_\n-# endif\n-\n-# include <cwctype>\n-\n-  // Expose global C names, including non-standard ones, but shadow\n-  // some names and types with the std:: C++ version.\n-  using std::wint_t;\n-  using std::wctype_t;\n-  using std::wctrans_t;\n-  using std::iswalpha;\n-  using std::iswupper;\n-  using std::iswlower;\n-  using std::iswdigit;\n-  using std::iswxdigit;\n-  using std::iswalnum;\n-  using std::iswspace;\n-  using std::iswpunct;\n-  using std::iswprint;\n-  using std::iswgraph;\n-  using std::iswcntrl;\n-  using std::iswctype;\n-  using std::towctrans;\n-  using std::towlower;\n-  using std::towupper;\n-  using std::wctrans;\n-  using std::wctype;\n-\n-# ifdef _CWCHAR_NEED_C_LEGACY_\n-  // dive back into the \"swamp\"\n-  namespace _C_legacy {\n-    extern \"C\" {\n-#  define _IN_C_LEGACY_\n-#  undef _CWCHAR_NEED_C_LEGACY_\n-# endif /* _CWCHAR_NEED_C_LEGACY_ */\n-#endif /* _INCLUDED_CPP_CWCTYPE_H_ */"}, {"sha": "f7873945d04dacf96dc6b1491c551f36af99c9f2", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 35, "deletions": 61, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.35 2000/10/07 01:05:37 bkoz Exp $\n+## $Id: Makefile.am,v 1.36 2000/10/07 18:54:08 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -35,69 +35,16 @@ toolexecdir = $(exec_prefix)/$(target_alias)\n toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n endif\n \n+\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n \n-# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n-# modified in a per-library or per-sub-library way.\n-# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n-\n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t     $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n-\n-# Root level of the include sources.\n-glibcpp_includedir = $(top_srcdir)/include\n-\n-# Passed down for cross compilers, canadian crosses.\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n-\n-if GLIBCPP_NEED_LIBIO\n-LIBIO_INCLUDES = \\\n-\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n-else\n-LIBIO_INCLUDES = -I$(top_srcdir)/libio\n-endif\n-\n-if GLIBCPP_USE_CSHADOW\n-#CSHADOW_INCLUDES = \\\n-#\t-I$(glibcpp_includedir)/std -I$(top_srcdir)/shadow -I$(top_builddir)/cshadow\n-CSHADOW_INCLUDES = \\\n-\t-I$(glibcpp_includedir)/std -I$(top_srcdir)/shadow \n-else\n-CSHADOW_INCLUDES =\n-endif\n-\n INCLUDES = \\\n \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \\\n-\t-I$(top_builddir) -I$(glibcpp_includedir) \\\n-\t $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t $(TOPLEVEL_INCLUDES)\t\n-\n+\t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \\\n+\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\t\n \n headers = \\\n \tbits/std_cctype.h \\\n@@ -211,7 +158,7 @@ wstring_sources = \\\n \twstring-inst.cc\n \n VPATH += $(top_srcdir) $(top_srcdir)/src\n-VPATH += $(glibcpp_includedir) $(top_srcdir)/std\n+VPATH += $(GLIBCPP_INCLUDES) $(top_srcdir)/std\n \n \n # Actual sources for the distro, but don't build these.\n@@ -261,8 +208,8 @@ install: myinstallheaders\n myinstallheaders: $(headers:%=$(myincludep)%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep)\"; \\\n-\t        $(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep); \\\n+\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep)\"; \\\n+\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n \t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n@@ -325,6 +272,33 @@ tmp-libstdc++.INC: Makefile\n \techo -I$(top_builddir) $(INCLUDES) > $@\n \n \n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.\n+# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n+\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n+# things like -O2 passed down from the toplevel can be overridden by\n+# --enable-debug.)\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t     $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+# We have a problem when building the shared libstdc++ object if the\n+# rules automake generates would be used.  We cannot allow CXX to be used\n+# in libtool since this would add -lstdc++ to the link line which of\n+# course is impossible.\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n "}, {"sha": "a354b387c75447caba7d89d6b5f37dedf70dddbb", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8e0cf35e4c2c88c0c7889c9632d7894dce60af/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=0b8e0cf35e4c2c88c0c7889c9632d7894dce60af", "patch": "@@ -109,44 +109,7 @@ MAINT_CHARSET = latin1\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n-# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n-# modified in a per-library or per-sub-library way.\n-# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n-# the end of the compile line so that -O2 can be overridden as the\n-# occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n-\n-\n-# Need to explicitly set this so that AM_CXXFLAGS is last. In\n-# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n-# an include diretory, which screws up shadow headers. (That way,\n-# things like -O2 passed down from the toplevel can be overridden by\n-# --enable-debug.)\n-CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-\n-LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n-\n-\n-# We have a problem when building the shared libstdc++ object if the\n-# rules automake generates would be used.  We cannot allow CXX to be used\n-# in libtool since this would add -lstdc++ to the link line which of\n-# course is impossible.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n-\n-# Root level of the include sources.\n-glibcpp_includedir = $(top_srcdir)/include\n-\n-# Passed down for cross compilers, canadian crosses.\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n-@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = -I$(top_srcdir)/libio\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \t-I$(glibcpp_includedir)/std -I$(top_srcdir)/shadow \n-@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_INCLUDES = \n-\n-INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(glibcpp_includedir) \t $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n \n \n headers =  \tbits/std_cctype.h \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/fcntl.h shadow/libio.h shadow/iolibio.h shadow/libioP.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/pthread.h shadow/iconv.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_iolibio.h \tshadow/bits/wrap_libioP.h shadow/bits/wrap_iconv.h \tshadow/bits/wrap_fcntl.h shadow/bits/wrap_pthread.h \tshadow/sys/cdefs.h \n@@ -165,7 +128,7 @@ sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc compl\n \n wstring_sources =  \twstring-inst.cc\n \n-VPATH =  $(top_srcdir) $(top_srcdir)/src $(glibcpp_includedir) $(top_srcdir)/std\n+VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDES) $(top_srcdir)/std\n \n # Actual sources for the distro, but don't build these.\n #EXTRA_sources = string-inst.cc \n@@ -187,6 +150,31 @@ libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n # statically decide which headers to install.  So we have our own special\n # installation routine here.\n myincludep = $(DESTDIR)$(includedir)/g++-v3/\n+\n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.\n+# Need to manually set this option because CONFIG_CXXFLAGS has to be at\n+# the end of the compile line so that -O2 can be overridden as the\n+# occasion call for it. (ie, --enable-debug)\n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+\n+\n+# Need to explicitly set this so that AM_CXXFLAGS is last. In\n+# addition, we don't use $(DEFS), which tries to set $(top_srcdir) as\n+# an include diretory, which screws up shadow headers. (That way,\n+# things like -O2 passed down from the toplevel can be overridden by\n+# --enable-debug.)\n+CXXCOMPILE = $(CXX) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \t     $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\n+\n+# We have a problem when building the shared libstdc++ object if the\n+# rules automake generates would be used.  We cannot allow CXX to be used\n+# in libtool since this would add -lstdc++ to the link line which of\n+# course is impossible.\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -451,8 +439,8 @@ install: myinstallheaders\n myinstallheaders: $(headers:%=$(myincludep)%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep)\"; \\\n-\t        $(INSTALL_DATA) $(glibcpp_includedir)/std/$$i $(myincludep); \\\n+\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep)\"; \\\n+\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n \t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\"}]}