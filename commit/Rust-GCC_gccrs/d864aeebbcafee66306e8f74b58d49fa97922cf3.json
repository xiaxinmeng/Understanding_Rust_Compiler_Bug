{"sha": "d864aeebbcafee66306e8f74b58d49fa97922cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2NGFlZWJiY2FmZWU2NjMwNmU4Zjc0YjU4ZDQ5ZmE5NzkyMmNmMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-24T08:34:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-24T08:34:01Z"}, "message": "trans.c (build_return_expr): Use INIT_EXPR instead of MODIFY_EXPR to assign to the return object.\n\n\t* gcc-interface/trans.c (build_return_expr): Use INIT_EXPR instead of\n\tMODIFY_EXPR to assign to the return object.\n\t(finalize_nrv_r): Adjust to above change.\n\t(finalize_nrv_unc_r): Likewise.\n\nFrom-SVN: r218000", "tree": {"sha": "e411db2b5a9281094cd43026698b6de25fe3c9cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e411db2b5a9281094cd43026698b6de25fe3c9cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d864aeebbcafee66306e8f74b58d49fa97922cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d864aeebbcafee66306e8f74b58d49fa97922cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d864aeebbcafee66306e8f74b58d49fa97922cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d864aeebbcafee66306e8f74b58d49fa97922cf3/comments", "author": null, "committer": null, "parents": [{"sha": "90b4c164f4c725bfd77c1a1c6ad574604b423401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b4c164f4c725bfd77c1a1c6ad574604b423401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b4c164f4c725bfd77c1a1c6ad574604b423401"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "bd38c1180d785ee36ef7a002b96c07f09628dccf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d864aeebbcafee66306e8f74b58d49fa97922cf3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d864aeebbcafee66306e8f74b58d49fa97922cf3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d864aeebbcafee66306e8f74b58d49fa97922cf3", "patch": "@@ -1,3 +1,10 @@\n+2014-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (build_return_expr): Use INIT_EXPR instead of\n+\tMODIFY_EXPR to assign to the return object.\n+\t(finalize_nrv_r): Adjust to above change.\n+\t(finalize_nrv_unc_r): Likewise.\n+\n 2014-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (push_range_check_info): Replace early test"}, {"sha": "d4c9c85a9894797317cbbd54f534c19e6c2af181", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d864aeebbcafee66306e8f74b58d49fa97922cf3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d864aeebbcafee66306e8f74b58d49fa97922cf3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d864aeebbcafee66306e8f74b58d49fa97922cf3", "patch": "@@ -3135,7 +3135,7 @@ finalize_nrv_r (tree *tp, int *walk_subtrees, void *data)\n      nop, but differs from using NULL_TREE in that it indicates that we care\n      about the value of the RESULT_DECL.  */\n   else if (TREE_CODE (t) == RETURN_EXPR\n-\t   && TREE_CODE (TREE_OPERAND (t, 0)) == MODIFY_EXPR)\n+\t   && TREE_CODE (TREE_OPERAND (t, 0)) == INIT_EXPR)\n     {\n       tree ret_val = TREE_OPERAND (TREE_OPERAND (t, 0), 1), init_expr;\n \n@@ -3224,7 +3224,7 @@ finalize_nrv_unc_r (tree *tp, int *walk_subtrees, void *data)\n   /* Change RETURN_EXPRs of NRVs to assign to the RESULT_DECL only the final\n      return value built by the allocator instead of the whole construct.  */\n   else if (TREE_CODE (t) == RETURN_EXPR\n-\t   && TREE_CODE (TREE_OPERAND (t, 0)) == MODIFY_EXPR)\n+\t   && TREE_CODE (TREE_OPERAND (t, 0)) == INIT_EXPR)\n     {\n       tree ret_val = TREE_OPERAND (TREE_OPERAND (t, 0), 1);\n \n@@ -3437,7 +3437,7 @@ build_return_expr (tree ret_obj, tree ret_val)\n \n \t      RETURN_EXPR\n \t\t  |\n-\t      MODIFY_EXPR\n+\t       INIT_EXPR\n \t      /        \\\n \t     /          \\\n \t RET_OBJ        ...\n@@ -3446,13 +3446,14 @@ build_return_expr (tree ret_obj, tree ret_val)\n \t of the RET_OBJ as the operation type.  */\n       tree operation_type = TREE_TYPE (ret_obj);\n \n-      /* Convert the right operand to the operation type.  Note that it's the\n-\t same transformation as in the MODIFY_EXPR case of build_binary_op,\n+      /* Convert the right operand to the operation type.  Note that this is\n+\t the transformation applied in the INIT_EXPR case of build_binary_op,\n \t with the assumption that the type cannot involve a placeholder.  */\n       if (operation_type != TREE_TYPE (ret_val))\n \tret_val = convert (operation_type, ret_val);\n \n-      result_expr = build2 (MODIFY_EXPR, void_type_node, ret_obj, ret_val);\n+      /* We always can use an INIT_EXPR for the return object.  */\n+      result_expr = build2 (INIT_EXPR, void_type_node, ret_obj, ret_val);\n \n       /* If the function returns an aggregate type, find out whether this is\n \t a candidate for Named Return Value.  If so, record it.  Otherwise,"}]}