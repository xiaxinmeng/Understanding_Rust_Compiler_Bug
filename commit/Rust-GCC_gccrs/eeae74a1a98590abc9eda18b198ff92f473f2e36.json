{"sha": "eeae74a1a98590abc9eda18b198ff92f473f2e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhZTc0YTFhOTg1OTBhYmM5ZWRhMThiMTk4ZmY5MmY0NzNmMmUzNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-03-29T15:45:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-29T15:45:10Z"}, "message": "re PR target/39545 (Structures with flexible array member passed/returned incorrectly)\n\ngcc/\n\n2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39545\n\t* config/i386/i386.c (classify_argument): Ignore flexible array\n\tmember in struct and warn ABI change.\n\ngcc/testsuite/\n\n2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39545\n\t* gcc.c-torture/compile/pr16566-2.c: Add -Wno-psabi for x86-64.\n\n\t* gcc.target/i386/pr39545-1.c: New.\n\t* gcc.target/i386/pr39545-2.c: Likewise.\n\n\t* gcc.target/x86_64/abi/test_passing_structs.c (flex1_struct): New.\n\t(flex2_struct): Likewise.\n\t(check_struct_passing7): Likewise.\n\t(check_struct_passing8): Likewise.\n\t(f1s): Likewise.\n\t(f2s): Likewise.\n\t(main): Call check_struct_passing7 and check_struct_passing8.\n\nFrom-SVN: r145237", "tree": {"sha": "cba7f35352c729ab5821e99609fcba6153c1ad4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba7f35352c729ab5821e99609fcba6153c1ad4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeae74a1a98590abc9eda18b198ff92f473f2e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeae74a1a98590abc9eda18b198ff92f473f2e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeae74a1a98590abc9eda18b198ff92f473f2e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeae74a1a98590abc9eda18b198ff92f473f2e36/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a24078b219f1a96a04883987510b72b88e8d59c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24078b219f1a96a04883987510b72b88e8d59c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24078b219f1a96a04883987510b72b88e8d59c0"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "dca869b74a12798d350c1e3985526d2704cd0748", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -1,3 +1,9 @@\n+2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39545\n+\t* config/i386/i386.c (classify_argument): Ignore flexible array\n+\tmember in struct and warn ABI change.\n+\n 2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386-protos.h (ix86_agi_dependent): New."}, {"sha": "3dec02f3acd7e4c45f1f3121a638ed8165b0bc51", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -4942,8 +4942,30 @@ classify_argument (enum machine_mode mode, const_tree type,\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      num = classify_argument (TYPE_MODE (TREE_TYPE (field)),\n-\t\t\t\t\t       TREE_TYPE (field), subclasses,\n+\t\t      type = TREE_TYPE (field);\n+\n+\t\t      /* Flexible array member is ignored.  */\n+\t\t      if (TYPE_MODE (type) == BLKmode\n+\t\t\t  && TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t  && TYPE_SIZE (type) == NULL_TREE\n+\t\t\t  && TYPE_DOMAIN (type) != NULL_TREE\n+\t\t\t  && (TYPE_MAX_VALUE (TYPE_DOMAIN (type))\n+\t\t\t      == NULL_TREE))\n+\t\t\t{\n+\t\t\t  static bool warned;\n+\t\t\t  \n+\t\t\t  if (!warned && warn_psabi)\n+\t\t\t    {\n+\t\t\t      warned = true;\n+\t\t\t      inform (input_location,\n+\t\t\t\t      \"The ABI of passing struct with\"\n+\t\t\t\t      \" a flexible array member has\"\n+\t\t\t\t      \" changed in GCC 4.4\");\n+\t\t\t    }\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t      num = classify_argument (TYPE_MODE (type), type,\n+\t\t\t\t\t       subclasses,\n \t\t\t\t\t       (int_bit_position (field)\n \t\t\t\t\t\t+ bit_offset) % 256);\n \t\t      if (!num)"}, {"sha": "7546a2d33a0baa5fec5522c8087e124f85926e88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -1,3 +1,19 @@\n+2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39545\n+\t* gcc.c-torture/compile/pr16566-2.c: Add -Wno-psabi for x86-64.\n+\n+\t* gcc.target/i386/pr39545-1.c: New.\n+\t* gcc.target/i386/pr39545-2.c: Likewise.\n+\n+\t* gcc.target/x86_64/abi/test_passing_structs.c (flex1_struct): New.\n+\t(flex2_struct): Likewise.\n+\t(check_struct_passing7): Likewise.\n+\t(check_struct_passing8): Likewise.\n+\t(f1s): Likewise.\n+\t(f2s): Likewise.\n+\t(main): Call check_struct_passing7 and check_struct_passing8.\n+\n 2009-03-29  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/execute/20090113-1.c: New testcase."}, {"sha": "2f7a10668a73da213518f8aab13b0334fd439cfe", "filename": "gcc/testsuite/gcc.c-torture/compile/pr16566-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr16566-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr16566-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr16566-2.c?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -1,5 +1,6 @@\n /* ICE with flexible arrays in non-lvalue structures.  Bug 16566\n    (comment #5).  */\n+/* { dg-options \"-Wno-psabi\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n \n struct A\n {"}, {"sha": "62bc33fa21d59dc2c82576508e97ecc90b183481", "filename": "gcc/testsuite/gcc.target/i386/pr39545-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-1.c?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/39545 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+struct flex\n+{\n+  int i;\n+  int flex [];\n+};\n+\n+int\n+foo (struct flex s) /* { dg-message \"note: The ABI of passing struct with a flexible array member has changed in GCC 4.4\" } */\n+{\n+  return s.i;\n+}\n+\n+struct flex\n+bar (int x)\n+{\n+  struct flex s;\n+  s.i = x;\n+  return s;\n+}"}, {"sha": "143c3827fd6c762b174fb9a284ba8c38e0288b11", "filename": "gcc/testsuite/gcc.target/i386/pr39545-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-2.c?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/39545 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+struct flex\n+{\n+  int i;\n+  int flex [];\n+};\n+\n+struct flex\n+foo (int x)\n+{ /* { dg-message \"note: The ABI of passing struct with a flexible array member has changed in GCC 4.4\" } */\n+  struct flex s;\n+  s.i = x;\n+  return s;\n+}"}, {"sha": "68eca53a2e431952ee443c8eaaef2c6130764bf7", "filename": "gcc/testsuite/gcc.target/x86_64/abi/test_passing_structs.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_passing_structs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeae74a1a98590abc9eda18b198ff92f473f2e36/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_passing_structs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_passing_structs.c?ref=eeae74a1a98590abc9eda18b198ff92f473f2e36", "patch": "@@ -92,6 +92,33 @@ check_struct_passing6 (struct m128_2_struct ms ATTRIBUTE_UNUSED)\n }\n #endif\n \n+struct flex1_struct\n+{\n+  long i;\n+  long flex[];\n+};\n+\n+struct flex2_struct\n+{\n+  long i;\n+  long flex[0];\n+};\n+\n+void\n+check_struct_passing7 (struct flex1_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+void\n+check_struct_passing8 (struct flex2_struct is ATTRIBUTE_UNUSED)\n+{\n+  check_int_arguments;\n+}\n+\n+static struct flex1_struct f1s = { 60, { } };\n+static struct flex2_struct f2s = { 61, { } };\n+\n int\n main (void)\n {\n@@ -146,5 +173,17 @@ main (void)\n   WRAP_CALL (check_struct_passing6)(m128_2s);\n #endif\n \n+  clear_struct_registers;\n+  iregs.I0 = f1s.i;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing7)(f1s);\n+\n+  clear_struct_registers;\n+  iregs.I0 = f2s.i;\n+  num_iregs = 1;\n+  clear_int_hardware_registers;\n+  WRAP_CALL (check_struct_passing8)(f2s);\n+\n   return 0;\n }"}]}