{"sha": "547bbe4977c9b9a963f8019b522db185c7e9bcdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ3YmJlNDk3N2M5YjlhOTYzZjgwMTliNTIyZGIxODVjN2U5YmNkYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-10-02T08:10:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-10-02T08:10:46Z"}, "message": "trans.c (find_loop_for): Use FOR_EACH_VEC_ELT_REVERSE.\n\n\t* gcc-interface/trans.c (find_loop_for): Use FOR_EACH_VEC_ELT_REVERSE.\n\t(Loop_Statement_to_gnu): Use FOR_EACH_VEC_ELT.\n\t(finalize_nrv): Use FOR_EACH_VEC_SAFE_ELT and initialize field.\n\t(build_stmt_group): Add blank lines.\n\nFrom-SVN: r228373", "tree": {"sha": "cb77b81c8c77e4ae8667e3a17b61728c28e1681c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb77b81c8c77e4ae8667e3a17b61728c28e1681c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/547bbe4977c9b9a963f8019b522db185c7e9bcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547bbe4977c9b9a963f8019b522db185c7e9bcdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/547bbe4977c9b9a963f8019b522db185c7e9bcdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/547bbe4977c9b9a963f8019b522db185c7e9bcdb/comments", "author": null, "committer": null, "parents": [{"sha": "a87926c15d9498ca9ebb029102ca010e5b052329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87926c15d9498ca9ebb029102ca010e5b052329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87926c15d9498ca9ebb029102ca010e5b052329"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "fb8c6cc91a42d7707569a56b6c928b57b0f84898", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547bbe4977c9b9a963f8019b522db185c7e9bcdb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547bbe4977c9b9a963f8019b522db185c7e9bcdb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=547bbe4977c9b9a963f8019b522db185c7e9bcdb", "patch": "@@ -1,10 +1,17 @@\n+2015-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (find_loop_for): Use FOR_EACH_VEC_ELT_REVERSE.\n+\t(Loop_Statement_to_gnu): Use FOR_EACH_VEC_ELT.\n+\t(finalize_nrv): Use FOR_EACH_VEC_SAFE_ELT and initialize field.\n+\t(build_stmt_group): Add blank lines.\n+\n 2015-09-30  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gcc-interface/utils.c (DEF_FUNCTION_TYPE_VAR_11): Don't define.\n \n 2015-09-28  Tom de Vries  <tom@codesourcery.com>\n \n-\t* gcc-interface/utils.c (DEF_FUNCTION_TYPE_VAR_6): Define\n+\t* gcc-interface/utils.c (DEF_FUNCTION_TYPE_VAR_6): Define.\n \n 2015-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "58e3d322258480450d8fc7d4ed9bf63d61dcb824", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/547bbe4977c9b9a963f8019b522db185c7e9bcdb/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/547bbe4977c9b9a963f8019b522db185c7e9bcdb/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=547bbe4977c9b9a963f8019b522db185c7e9bcdb", "patch": "@@ -2644,9 +2644,7 @@ find_loop_for (tree var)\n \n   gcc_assert (vec_safe_length (gnu_loop_stack) > 0);\n \n-  for (i = vec_safe_length (gnu_loop_stack) - 1;\n-       vec_safe_iterate (gnu_loop_stack, i, &iter);\n-       i--)\n+  FOR_EACH_VEC_ELT_REVERSE (*gnu_loop_stack, i, iter)\n     if (var == iter->loop_var)\n       break;\n \n@@ -3014,9 +3012,7 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n \t       - the front-end quickly generates useless or redundant checks\n \t\t that can be entirely optimized away in the end.  */\n       if (1 <= n_checks && n_checks <= 4)\n-\tfor (i = 0;\n-\t     vec_safe_iterate (gnu_loop_info->checks, i, &rci);\n-\t     i++)\n+\tFOR_EACH_VEC_ELT (*gnu_loop_info->checks, i, rci)\n \t  {\n \t    tree low_ok\n \t      = rci->low_bound\n@@ -3426,8 +3422,9 @@ finalize_nrv (tree fndecl, bitmap nrv, vec<tree, va_gc> *other, Node_Id gnat_ret\n   /* Prune the candidates that are referenced by other return values.  */\n   data.nrv = nrv;\n   data.result = NULL_TREE;\n+  data.gnat_ret = Empty;\n   data.visited = NULL;\n-  for (i = 0; vec_safe_iterate (other, i, &iter); i++)\n+  FOR_EACH_VEC_SAFE_ELT (other, i, iter)\n     walk_tree_without_duplicates (&iter, prune_nrv_r, &data);\n   if (bitmap_empty_p (nrv))\n     return;\n@@ -7905,10 +7902,12 @@ static tree\n build_stmt_group (List_Id gnat_list, bool binding_p)\n {\n   start_stmt_group ();\n+\n   if (binding_p)\n     gnat_pushlevel ();\n \n   add_stmt_list (gnat_list);\n+\n   if (binding_p)\n     gnat_poplevel ();\n "}]}