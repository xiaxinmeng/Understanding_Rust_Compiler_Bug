{"sha": "f25bf34f06bd8a1ada0928e402acbe984a199dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1YmYzNGYwNmJkOGExYWRhMDkyOGU0MDJhY2JlOTg0YTE5OWRiYg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-09-20T18:07:04Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2007-09-20T18:07:04Z"}, "message": "io.c (resolve_tag_format): New function using code split out and simplified from ...\n\nfortran/\n* io.c (resolve_tag_format): New function using code split out\nand simplified from ...\n(resolve_tag): ... this function.  Simplify logic.  Unify\nIOSTAT, IOLENGTH and SIZE handling.\ntestsuite/\n* gfortran.dg/g77/19981216-0.f: Remove dg-warning annotation.\n* gfortran.dg/io_constraints_1.f90: Make a -std=f95 test.  Add\nwarning annotation.\n* gfortran.dg/iostat_3.f90: Make a -std=f95 test.\n\nFrom-SVN: r128623", "tree": {"sha": "5d70d11e1f3e84c744d4e6efcf146c193d58e28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d70d11e1f3e84c744d4e6efcf146c193d58e28d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f25bf34f06bd8a1ada0928e402acbe984a199dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25bf34f06bd8a1ada0928e402acbe984a199dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25bf34f06bd8a1ada0928e402acbe984a199dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25bf34f06bd8a1ada0928e402acbe984a199dbb/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770a995067e9c215a845f18e74ce29f2f24e240f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770a995067e9c215a845f18e74ce29f2f24e240f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770a995067e9c215a845f18e74ce29f2f24e240f"}], "stats": {"total": 220, "additions": 110, "deletions": 110}, "files": [{"sha": "9e7ca3a389ef3ff76de9709c81dd6b9cbd60b8e9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f25bf34f06bd8a1ada0928e402acbe984a199dbb", "patch": "@@ -1,3 +1,10 @@\n+2007-09-20  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\t* io.c (resolve_tag_format): New function using code split out\n+\tand simplified from ...\n+\t(resolve_tag): ... this function.  Simplify logic.  Unify\n+\tIOSTAT, IOLENGTH and SIZE handling.\n+\n 2007-09-20  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/33497"}, {"sha": "901af922b953dcdb9e99450bc031a5189445a16c", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 92, "deletions": 108, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=f25bf34f06bd8a1ada0928e402acbe984a199dbb", "patch": "@@ -1091,141 +1091,125 @@ match_ltag (const io_tag *tag, gfc_st_label ** label)\n }\n \n \n-/* Do expression resolution and type-checking on an expression tag.  */\n+/* Resolution of the FORMAT tag, to be called from resolve_tag.  */\n \n static try\n-resolve_tag (const io_tag *tag, gfc_expr *e)\n+resolve_tag_format (const gfc_expr *e)\n {\n-  if (e == NULL)\n-    return SUCCESS;\n-\n-  if (gfc_resolve_expr (e) == FAILURE)\n-    return FAILURE;\n-\n-  if (e->ts.type != tag->type && tag != &tag_format)\n+  if (e->expr_type == EXPR_CONSTANT\n+      && (e->ts.type != BT_CHARACTER\n+\t  || e->ts.kind != gfc_default_character_kind))\n     {\n-      gfc_error (\"%s tag at %L must be of type %s\", tag->name,\n-\t\t &e->where, gfc_basic_typename (tag->type));\n+      gfc_error (\"Constant expression in FORMAT tag at %L must be \"\n+\t\t \"of type default CHARACTER\", &e->where);\n       return FAILURE;\n     }\n \n-  if (tag == &tag_format)\n+  /* If e's rank is zero and e is not an element of an array, it should be\n+     of integer or character type.  The integer variable should be\n+     ASSIGNED.  */\n+  if (e->symtree == NULL || e->symtree->n.sym->as == NULL\n+      || e->symtree->n.sym->as->rank == 0)\n     {\n-      if (e->expr_type == EXPR_CONSTANT\n-\t  && (e->ts.type != BT_CHARACTER\n-\t      || e->ts.kind != gfc_default_character_kind))\n+      if (e->ts.type != BT_CHARACTER && e->ts.type != BT_INTEGER)\n \t{\n-\t  gfc_error (\"Constant expression in FORMAT tag at %L must be \"\n-\t\t     \"of type default CHARACTER\", &e->where);\n+\t  gfc_error (\"FORMAT tag at %L must be of type CHARACTER or INTEGER\",\n+\t\t     &e->where);\n \t  return FAILURE;\n \t}\n-\n-      /* If e's rank is zero and e is not an element of an array, it should be\n-\t of integer or character type.  The integer variable should be\n-\t ASSIGNED.  */\n-      if (e->symtree == NULL || e->symtree->n.sym->as == NULL\n-\t  || e->symtree->n.sym->as->rank == 0)\n+      else if (e->ts.type == BT_INTEGER && e->expr_type == EXPR_VARIABLE)\n \t{\n-\t  if (e->ts.type != BT_CHARACTER && e->ts.type != BT_INTEGER)\n-\t    {\n-\t      gfc_error (\"%s tag at %L must be of type %s or %s\", tag->name,\n-\t\t\t &e->where, gfc_basic_typename (BT_CHARACTER),\n-\t\t\t gfc_basic_typename (BT_INTEGER));\n-\t      return FAILURE;\n-\t    }\n-\t  else if (e->ts.type == BT_INTEGER && e->expr_type == EXPR_VARIABLE)\n-\t    {\n-\t      if (gfc_notify_std (GFC_STD_F95_DEL, \"Deleted feature: ASSIGNED \"\n-\t\t\t\t  \"variable in FORMAT tag at %L\", &e->where)\n-\t\t  == FAILURE)\n-\t\treturn FAILURE;\n-\t      if (e->symtree->n.sym->attr.assign != 1)\n-\t\t{\n-\t\t  gfc_error (\"Variable '%s' at %L has not been assigned a \"\n-\t\t\t     \"format label\", e->symtree->n.sym->name,\n-\t\t\t     &e->where);\n-\t\t  return FAILURE;\n-\t\t}\n-\t    }\n-\t  else if (e->ts.type == BT_INTEGER)\n+\t  if (gfc_notify_std (GFC_STD_F95_DEL, \"Deleted feature: ASSIGNED \"\n+\t\t\t      \"variable in FORMAT tag at %L\", &e->where)\n+\t      == FAILURE)\n+\t    return FAILURE;\n+\t  if (e->symtree->n.sym->attr.assign != 1)\n \t    {\n-\t      gfc_error (\"scalar '%s' FORMAT tag at %L is not an ASSIGNED \"\n-\t\t\t \"variable\", gfc_basic_typename (e->ts.type),\n-\t\t\t &e->where);\n+\t      gfc_error (\"Variable '%s' at %L has not been assigned a \"\n+\t\t\t \"format label\", e->symtree->n.sym->name, &e->where);\n \t      return FAILURE;\n \t    }\n-\n-\t  return SUCCESS;\n \t}\n-      else\n+      else if (e->ts.type == BT_INTEGER)\n \t{\n-\t  /* if rank is nonzero, we allow the type to be character under\n-\t     GFC_STD_GNU and other type under GFC_STD_LEGACY. It may be\n-\t     assigned an Hollerith constant.  */\n-\t  if (e->ts.type == BT_CHARACTER)\n-\t    {\n-\t      if (gfc_notify_std (GFC_STD_GNU, \"Extension: Character array \"\n-\t\t\t\t  \"in FORMAT tag at %L\", &e->where)\n-\t\t  == FAILURE)\n-\t\treturn FAILURE;\n-\t    }\n-\t  else\n-\t    {\n-\t      if (gfc_notify_std (GFC_STD_LEGACY, \"Extension: Non-character \"\n-\t\t\t\t  \"in FORMAT tag at %L\", &e->where)\n-\t\t  == FAILURE)\n-\t\treturn FAILURE;\n-\t    }\n-\t  return SUCCESS;\n+\t  gfc_error (\"Scalar '%s' in FORMAT tag at %L is not an ASSIGNED \"\n+\t\t     \"variable\", gfc_basic_typename (e->ts.type), &e->where);\n+\t  return FAILURE;\n \t}\n+\n+      return SUCCESS;\n+    }\n+\n+  /* If rank is nonzero, we allow the type to be character under GFC_STD_GNU\n+     and other type under GFC_STD_LEGACY. It may be assigned an Hollerith\n+     constant.  */\n+  if (e->ts.type == BT_CHARACTER)\n+    {\n+      if (gfc_notify_std (GFC_STD_GNU, \"Extension: Character array \"\n+\t\t\t  \"in FORMAT tag at %L\", &e->where) == FAILURE)\n+\treturn FAILURE;\n     }\n   else\n     {\n-      if (e->rank != 0)\n-\t{\n-\t  gfc_error (\"%s tag at %L must be scalar\", tag->name, &e->where);\n-\t  return FAILURE;\n-\t}\n+      if (gfc_notify_std (GFC_STD_LEGACY, \"Extension: Non-character \"\n+\t\t\t  \"in FORMAT tag at %L\", &e->where) == FAILURE)\n+\treturn FAILURE;\n+    }\n \n-      if (tag == &tag_iomsg)\n-\t{\n-\t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: IOMSG tag at %L\",\n-\t\t\t      &e->where) == FAILURE)\n-\t    return FAILURE;\n-\t}\n+  return SUCCESS;\n+}\n \n-      if (tag == &tag_iostat && e->ts.kind != gfc_default_integer_kind)\n-\t{\n-\t  if (gfc_notify_std (GFC_STD_GNU, \"Fortran 95 requires default \"\n-\t\t\t      \"INTEGER in IOSTAT tag at %L\", &e->where)\n-\t      == FAILURE)\n-\t    return FAILURE;\n-\t}\n \n-      if (tag == &tag_size && e->ts.kind != gfc_default_integer_kind)\n-\t{\n-\t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 95 requires default \"\n-\t\t\t      \"INTEGER in SIZE tag at %L\", &e->where)\n-\t      == FAILURE)\n-\t    return FAILURE;\n-\t}\n+/* Do expression resolution and type-checking on an expression tag.  */\n \n-      if (tag == &tag_convert)\n-\t{\n-\t  if (gfc_notify_std (GFC_STD_GNU, \"Extension: CONVERT tag at %L\",\n-\t\t\t      &e->where) == FAILURE)\n-\t    return FAILURE;\n-\t}\n-    \n-      if (tag == &tag_iolength && e->ts.kind != gfc_default_integer_kind)\n-\t{\n-\t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 95 requires default \"\n-\t\t\t      \"INTEGER in IOLENGTH tag at %L\", &e->where)\n-\t      == FAILURE)\n-\t    return FAILURE;\n-\t}\n+static try\n+resolve_tag (const io_tag *tag, gfc_expr *e)\n+{\n+  if (e == NULL)\n+    return SUCCESS;\n+\n+  if (gfc_resolve_expr (e) == FAILURE)\n+    return FAILURE;\n+\n+  if (tag == &tag_format)\n+    return resolve_tag_format (e);\n+\n+  if (e->ts.type != tag->type)\n+    {\n+      gfc_error (\"%s tag at %L must be of type %s\", tag->name,\n+\t\t &e->where, gfc_basic_typename (tag->type));\n+      return FAILURE;\n     }\n \n+  if (e->rank != 0)\n+    {\n+      gfc_error (\"%s tag at %L must be scalar\", tag->name, &e->where);\n+      return FAILURE;\n+    }\n+\n+  if (tag == &tag_iomsg)\n+    {\n+      if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: IOMSG tag at %L\",\n+\t\t\t  &e->where) == FAILURE)\n+\treturn FAILURE;\n+    }\n+\n+  if ((tag == &tag_iostat || tag == &tag_size || tag == &tag_iolength)\n+      && e->ts.kind != gfc_default_integer_kind)\n+    {\n+      if (gfc_notify_std (GFC_STD_F2003, \"Fortran 95 requires default \"\n+\t\t\t  \"INTEGER in %s tag at %L\", tag->name, &e->where)\n+\t  == FAILURE)\n+\treturn FAILURE;\n+    }\n+\n+  if (tag == &tag_convert)\n+    {\n+      if (gfc_notify_std (GFC_STD_GNU, \"Extension: CONVERT tag at %L\",\n+\t\t\t  &e->where) == FAILURE)\n+\treturn FAILURE;\n+    }\n+  \n   return SUCCESS;\n }\n "}, {"sha": "4521fe5adaad8764e8eb5c4f2c2ea97c6d2a6d34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f25bf34f06bd8a1ada0928e402acbe984a199dbb", "patch": "@@ -1,3 +1,10 @@\n+2007-09-20  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\t* gfortran.dg/g77/19981216-0.f: Remove dg-warning annotation.\n+\t* gfortran.dg/io_constraints_1.f90: Make a -std=f95 test.  Add\n+\twarning annotation.\n+\t* gfortran.dg/iostat_3.f90: Make a -std=f95 test.\n+\n 2007-09-20  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/33497"}, {"sha": "1e5db3c3b5c6172913fffa6b44ce929ad90c9ff7", "filename": "gcc/testsuite/gfortran.dg/g77/19981216-0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981216-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981216-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fg77%2F19981216-0.f?ref=f25bf34f06bd8a1ada0928e402acbe984a199dbb", "patch": "@@ -29,7 +29,7 @@ PROGRAM WAP\n \n         name = 'blah'\n         open(unit=8,status='unknown',file=name,form='formatted',\n-     F       iostat=ios) ! { dg-warning \"INTEGER in IOSTAT\" }\n+     F       iostat=ios)\n \n       END\n * -------------------------------------------"}, {"sha": "05f52faae7651cf70d3cdf170565e6d7561b3aa8", "filename": "gcc/testsuite/gfortran.dg/io_constraints_1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_1.f90?ref=f25bf34f06bd8a1ada0928e402acbe984a199dbb", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n ! Part I of the test  of the IO constraints patch, which fixes PRs:\n ! PRs 25053, 25063, 25064, 25066, 25067, 25068, 25069, 25307 and 20862.\n !\n@@ -20,7 +21,7 @@ module global\n   subroutine foo (i)\n     integer :: i\n     write (*, 100) i\n- 100 format (1h , \"i=\", i6)                     ! This is OK.\n+ 100 format (1h , \"i=\", i6)                     ! { dg-warning \"The H format specifier at ... is a Fortran 95 deleted feature\" }\n   end subroutine foo\n \n end module global"}, {"sha": "0f6aacaf004864296ef59c44f78d1dc84fc9ed54", "filename": "gcc/testsuite/gfortran.dg/iostat_3.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25bf34f06bd8a1ada0928e402acbe984a199dbb/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiostat_3.f90?ref=f25bf34f06bd8a1ada0928e402acbe984a199dbb", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n ! Testcase for PR libfortran/25068\n   real :: u\n   integer(kind=8) :: i"}]}