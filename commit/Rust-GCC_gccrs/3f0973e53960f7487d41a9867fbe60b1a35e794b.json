{"sha": "3f0973e53960f7487d41a9867fbe60b1a35e794b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwOTczZTUzOTYwZjc0ODdkNDFhOTg2N2ZiZTYwYjFhMzVlNzk0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-30T22:19:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-30T22:19:33Z"}, "message": "PR c++/82030 - ICE inheriting from multiple lambdas\n\n\tPR c++/80767\n\t* call.c (compare_ics): Handle null candidate.\n\nFrom-SVN: r251549", "tree": {"sha": "0f3e7503cb40ffaa44778cb848d8ad746c71e0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f3e7503cb40ffaa44778cb848d8ad746c71e0f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f0973e53960f7487d41a9867fbe60b1a35e794b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0973e53960f7487d41a9867fbe60b1a35e794b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f0973e53960f7487d41a9867fbe60b1a35e794b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0973e53960f7487d41a9867fbe60b1a35e794b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18cb045d873daf1b803b8b3973bafa260d459f41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18cb045d873daf1b803b8b3973bafa260d459f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18cb045d873daf1b803b8b3973bafa260d459f41"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "a8c13672b5f3b0557188f454f67af9afafe200b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0973e53960f7487d41a9867fbe60b1a35e794b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0973e53960f7487d41a9867fbe60b1a35e794b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f0973e53960f7487d41a9867fbe60b1a35e794b", "patch": "@@ -1,3 +1,9 @@\n+2017-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82030 - ICE inheriting from multiple lambdas\n+\tPR c++/80767\n+\t* call.c (compare_ics): Handle null candidate.\n+\n 2017-08-30  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tMake taking the address of an overloaded function a non-deduced context"}, {"sha": "9e4a5c1b9aee55ed2033639112b758b6530a0d05", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0973e53960f7487d41a9867fbe60b1a35e794b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0973e53960f7487d41a9867fbe60b1a35e794b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3f0973e53960f7487d41a9867fbe60b1a35e794b", "patch": "@@ -9561,7 +9561,9 @@ compare_ics (conversion *ics1, conversion *ics2)\n \treturn 0;\n       else if (t1->kind == ck_user)\n \t{\n-\t  if (t1->cand->fn != t2->cand->fn)\n+\t  tree f1 = t1->cand ? t1->cand->fn : t1->type;\n+\t  tree f2 = t2->cand ? t2->cand->fn : t2->type;\n+\t  if (f1 != f2)\n \t    return 0;\n \t}\n       else"}, {"sha": "16adee6b9c3a5e71b158ba78755ad0ab73ea8d47", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv12.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f0973e53960f7487d41a9867fbe60b1a35e794b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f0973e53960f7487d41a9867fbe60b1a35e794b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv12.C?ref=3f0973e53960f7487d41a9867fbe60b1a35e794b", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/80767\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T, typename U = T> struct A { using type = U; };\n+template <typename F, typename... G> struct B : B<F>::type, B<G...>::type {\n+  using type = B;\n+  using B<F>::type::operator();\n+};\n+template <typename F> struct B<F> { using type = F; };\n+struct {\n+  template <typename... F,\n+            typename Overload = typename B<typename A<F>::type...>::type>\n+  Overload operator()(F...){}\n+} a;\n+int main() {\n+  auto f = a([](int) {}, [](float) {});\n+  f({});\n+}"}]}