{"sha": "df1bddedd4af1edd151461e544d34dfdb8e53b7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxYmRkZWRkNGFmMWVkZDE1MTQ2MWU1NDRkMzRkZmRiOGU1M2I3ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-11-25T17:33:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-25T17:33:30Z"}, "message": "nvptx.md (load_arg_reg<mode>): Arg number constraint is 'n'.\n\n\t* config/nvptx/nvptx.md (load_arg_reg<mode>): Arg number\n\tconstraint is 'n'.\n\t* config/nvptx/nvptx.c (write_one_arg): Use 'i' directly as arg\n\tnumber.\n\t(nvptx_write_function_decl): Number args from 0.\n\t(nvptx_declare_function_name): Likewise.\n\t(nvptx_function_incoming_arg): Likewise.\n\t(nvptx_output_call_insn): Correct formatting.\n\nFrom-SVN: r230889", "tree": {"sha": "7a309c439a8163d86a13591c252a064d24284af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a309c439a8163d86a13591c252a064d24284af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df1bddedd4af1edd151461e544d34dfdb8e53b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1bddedd4af1edd151461e544d34dfdb8e53b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1bddedd4af1edd151461e544d34dfdb8e53b7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1bddedd4af1edd151461e544d34dfdb8e53b7e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccb57bb09074b123d908f00820d865491fa656dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb57bb09074b123d908f00820d865491fa656dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccb57bb09074b123d908f00820d865491fa656dd"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "7b856bb06337bebf61ef4d810e67f0cbd04ecd86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1bddedd4af1edd151461e544d34dfdb8e53b7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1bddedd4af1edd151461e544d34dfdb8e53b7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df1bddedd4af1edd151461e544d34dfdb8e53b7e", "patch": "@@ -1,3 +1,14 @@\n+2015-11-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.md (load_arg_reg<mode>): Arg number\n+\tconstraint is 'n'.\n+\t* config/nvptx/nvptx.c (write_one_arg): Use 'i' directly as arg\n+\tnumber.\n+\t(nvptx_write_function_decl): Number args from 0.\n+\t(nvptx_declare_function_name): Likewise.\n+\t(nvptx_function_incoming_arg): Likewise.\n+\t(nvptx_output_call_insn): Correct formatting.\n+\n 2015-11-25  David Sherwood  <david.sherwood@arm.com>\n \n \t* optabs.def: Add new optabs fmax_optab/fmin_optab."}, {"sha": "a0499ac83748715b365dfc5241f78da2daa6b1a5", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1bddedd4af1edd151461e544d34dfdb8e53b7e/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1bddedd4af1edd151461e544d34dfdb8e53b7e/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=df1bddedd4af1edd151461e544d34dfdb8e53b7e", "patch": "@@ -300,9 +300,9 @@ write_one_arg (std::stringstream &s, tree type, int i, machine_mode mode,\n   machine_mode split = maybe_split_mode (mode);\n   if (split != VOIDmode)\n     {\n-      write_one_arg (s, NULL_TREE, i, split, false);\n-      write_one_arg (s, NULL_TREE, i + 1, split, false);\n-      return i + 1;\n+      i = write_one_arg (s, NULL_TREE, i, split, false);\n+      i = write_one_arg (s, NULL_TREE, i, split, false);\n+      return i;\n     }\n \n   if (no_arg_types && !AGGREGATE_TYPE_P (type))\n@@ -312,13 +312,13 @@ write_one_arg (std::stringstream &s, tree type, int i, machine_mode mode,\n       mode = arg_promotion (mode);\n     }\n \n-  if (i > 0)\n+  if (i)\n     s << \", \";\n   s << \".param\" << nvptx_ptx_type_from_mode (mode, false) << \" %in_ar\"\n-    << (i + 1) << (mode == QImode || mode == HImode ? \"[1]\" : \"\");\n+    << i << (mode == QImode || mode == HImode ? \"[1]\" : \"\");\n   if (mode == BLKmode)\n     s << \"[\" << int_size_in_bytes (type) << \"]\";\n-  return i;\n+  return i + 1;\n }\n \n /* Look for attributes in ATTRS that would indicate we must write a function\n@@ -397,10 +397,10 @@ nvptx_write_function_decl (std::stringstream &s, const char *name, const_tree de\n     {\n       s << \"(\";\n       int i = 0;\n-      bool any_args = false;\n+\n       if (return_in_mem)\n \t{\n-\t  s << \".param.u\" << GET_MODE_BITSIZE (Pmode) << \" %in_ar1\";\n+\t  s << \".param.u\" << GET_MODE_BITSIZE (Pmode) << \" %in_ar0\";\n \t  i++;\n \t}\n       while (args != NULL_TREE)\n@@ -409,12 +409,8 @@ nvptx_write_function_decl (std::stringstream &s, const char *name, const_tree de\n \t  machine_mode mode = TYPE_MODE (type);\n \n \t  if (mode != VOIDmode)\n-\t    {\n-\t      i = write_one_arg (s, type, i, mode,\n-\t\t\t\t TYPE_ARG_TYPES (fntype) == 0);\n-\t      any_args = true;\n-\t      i++;\n-\t    }\n+\t    i = write_one_arg (s, type, i, mode,\n+\t\t\t       TYPE_ARG_TYPES (fntype) == 0);\n \t  args = TREE_CHAIN (args);\n \t}\n       if (stdarg_p (fntype))\n@@ -424,12 +420,12 @@ nvptx_write_function_decl (std::stringstream &s, const char *name, const_tree de\n \t}\n       if (DECL_STATIC_CHAIN (decl))\n \t{\n-\t  if (i > 0)\n+\t  if (i)\n \t    s << \", \";\n \t  s << \".reg.u\" << GET_MODE_BITSIZE (Pmode)\n \t    << reg_names [STATIC_CHAIN_REGNUM];\n \t}\n-      if (!any_args && is_main)\n+      if (!i && is_main)\n \ts << \".param.u32 %argc, .param.u\" << GET_MODE_BITSIZE (Pmode)\n \t  << \" %argv\";\n       s << \")\";\n@@ -563,10 +559,10 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n \n   if (return_in_mem)\n     {\n-      ++argno;\n       fprintf (file, \"\\t.reg.u%d %%ar%d;\\n\", GET_MODE_BITSIZE (Pmode), argno);\n       fprintf (file, \"\\tld.param.u%d %%ar%d, [%%in_ar%d];\\n\",\n \t       GET_MODE_BITSIZE (Pmode), argno, argno);\n+      argno++;\n     }\n \n   /* Declare and initialize incoming arguments.  */\n@@ -602,11 +598,11 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n       mode = arg_promotion (mode);\n       while (count--)\n \t{\n-\t  ++argno;\n \t  fprintf (file, \"\\t.reg%s %%ar%d;\\n\",\n \t\t   nvptx_ptx_type_from_mode (mode, false), argno);\n \t  fprintf (file, \"\\tld.param%s %%ar%d, [%%in_ar%d];\\n\",\n \t\t   nvptx_ptx_type_from_mode (mode, false), argno, argno);\n+\t  argno++;\n \t}\n     }\n \n@@ -998,7 +994,7 @@ nvptx_function_incoming_arg (cumulative_args_t cum_v, machine_mode mode,\n      happen is complex modes and those are dealt with by\n      TARGET_SPLIT_COMPLEX_ARG.  */\n   return gen_rtx_UNSPEC (mode,\n-\t\t\t gen_rtvec (1, GEN_INT (1 + cum->count)),\n+\t\t\t gen_rtvec (1, GEN_INT (cum->count)),\n \t\t\t UNSPEC_ARG_REG);\n }\n \n@@ -1843,7 +1839,7 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n       if (split != VOIDmode)\n \t{\n \t  mode = split;\n-\t  count  = 2;\n+\t  count = 2;\n \t}\n \n       for (int n = 0; n != count; n++)\n@@ -1859,7 +1855,6 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n \t  fprintf (asm_out_file, \";\\n\");\n \t  argno++;\n \t}\n-      \n     }\n \n   fprintf (asm_out_file, \"\\t\\tcall \");"}, {"sha": "0227b8e3c80df463ba2bb325b9f4e25fc1b2dd18", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df1bddedd4af1edd151461e544d34dfdb8e53b7e/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df1bddedd4af1edd151461e544d34dfdb8e53b7e/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=df1bddedd4af1edd151461e544d34dfdb8e53b7e", "patch": "@@ -351,14 +351,14 @@\n \n (define_insn \"load_arg_reg<mode>\"\n   [(set (match_operand:QHIM 0 \"nvptx_register_operand\" \"=R\")\n-\t(unspec:QHIM [(match_operand 1 \"const_int_operand\" \"i\")]\n+\t(unspec:QHIM [(match_operand 1 \"const_int_operand\" \"n\")]\n \t\t     UNSPEC_ARG_REG))]\n   \"\"\n   \"%.\\\\tcvt%t0.u32\\\\t%0, %%ar%1;\")\n \n (define_insn \"load_arg_reg<mode>\"\n   [(set (match_operand:SDISDFM 0 \"nvptx_register_operand\" \"=R\")\n-\t(unspec:SDISDFM [(match_operand 1 \"const_int_operand\" \"i\")]\n+\t(unspec:SDISDFM [(match_operand 1 \"const_int_operand\" \"n\")]\n \t\t\tUNSPEC_ARG_REG))]\n   \"\"\n   \"%.\\\\tmov%t0\\\\t%0, %%ar%1;\")"}]}