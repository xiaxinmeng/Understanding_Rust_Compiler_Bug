{"sha": "72b1de442d8ab221371ebaca87fbb0a9f13deb48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJiMWRlNDQyZDhhYjIyMTM3MWViYWNhODdmYmIwYTlmMTNkZWI0OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-17T17:12:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-17T17:12:15Z"}, "message": "h8300.c (h8300_emit_stack_adjustment): Don't generate insns by hand.\n\n\t* config/h8300/h8300.c (h8300_emit_stack_adjustment):\n\tDon't generate insns by hand.\n\nFrom-SVN: r77954", "tree": {"sha": "3885069e6c57f74ff5238a7da922668907b5a753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3885069e6c57f74ff5238a7da922668907b5a753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72b1de442d8ab221371ebaca87fbb0a9f13deb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b1de442d8ab221371ebaca87fbb0a9f13deb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b1de442d8ab221371ebaca87fbb0a9f13deb48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b1de442d8ab221371ebaca87fbb0a9f13deb48/comments", "author": null, "committer": null, "parents": [{"sha": "d150ccef5103a6460ba9e9f425450d7f40f60e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d150ccef5103a6460ba9e9f425450d7f40f60e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d150ccef5103a6460ba9e9f425450d7f40f60e9c"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "04f0f7562094579db81795ce6d31ac50aebbddf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b1de442d8ab221371ebaca87fbb0a9f13deb48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b1de442d8ab221371ebaca87fbb0a9f13deb48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72b1de442d8ab221371ebaca87fbb0a9f13deb48", "patch": "@@ -1,3 +1,8 @@\n+2004-02-17  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (h8300_emit_stack_adjustment):\n+\tDon't generate insns by hand.\n+\n 2004-02-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/14178"}, {"sha": "eedc1fbe9545b0e65f1da581de90d0fab2b71b73", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b1de442d8ab221371ebaca87fbb0a9f13deb48/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b1de442d8ab221371ebaca87fbb0a9f13deb48/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=72b1de442d8ab221371ebaca87fbb0a9f13deb48", "patch": "@@ -370,6 +370,10 @@ byte_reg (rtx x, int b)\n static void\n h8300_emit_stack_adjustment (int sign, unsigned int size)\n {\n+  /* If the frame size is 0, we don't have anything to do.  */\n+  if (size == 0)\n+    return 0;\n+\n   /* H8/300 cannot add/subtract a large constant with a single\n      instruction.  If a temporary register is available, load the\n      constant to it and then do the addition.  */\n@@ -378,20 +382,23 @@ h8300_emit_stack_adjustment (int sign, unsigned int size)\n       && !h8300_current_function_interrupt_function_p ()\n       && !(current_function_needs_context && sign < 0))\n     {\n-      rtx new_sp;\n       rtx r3 = gen_rtx_REG (Pmode, 3);\n-      emit_insn (gen_rtx_SET (Pmode, r3, GEN_INT (sign * size)));\n-      new_sp = gen_rtx_PLUS (Pmode, stack_pointer_rtx, r3);\n-      emit_insn (gen_rtx_SET (Pmode, stack_pointer_rtx, new_sp));\n+      emit_insn (gen_movhi (r3, GEN_INT (sign * size)));\n+      emit_insn (gen_addhi3 (stack_pointer_rtx,\n+\t\t\t     stack_pointer_rtx, r3));\n     }\n   else\n     {\n       /* The stack adjustment made here is further optimized by the\n \t splitter.  In case of H8/300, the splitter always splits the\n \t addition emitted here to make the adjustment\n \t interrupt-safe.  */\n-      rtx new_sp = plus_constant (stack_pointer_rtx, sign * size);\n-      emit_insn (gen_rtx_SET (Pmode, stack_pointer_rtx, new_sp));\n+      if (Pmode == HImode)\n+\temit_insn (gen_addhi3 (stack_pointer_rtx,\n+\t\t\t       stack_pointer_rtx, GEN_INT (sign * size)));\n+      else\n+\temit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t       stack_pointer_rtx, GEN_INT (sign * size)));\n     }\n }\n "}]}