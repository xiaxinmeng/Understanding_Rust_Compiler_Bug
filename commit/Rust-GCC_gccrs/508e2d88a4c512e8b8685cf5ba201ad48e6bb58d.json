{"sha": "508e2d88a4c512e8b8685cf5ba201ad48e6bb58d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4ZTJkODhhNGM1MTJlOGI4Njg1Y2Y1YmEyMDFhZDQ4ZTZiYjU4ZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-13T14:44:47Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-15T07:56:55Z"}, "message": "IPA: fix profile handling in IRA\n\ngcc/ChangeLog:\n\n\tPR ipa/97295\n\t* profile-count.c (profile_count::to_frequency): Move part of\n\tgcc_assert to STATIC_ASSERT.\n\t* regs.h (REG_FREQ_FROM_BB): Do not use count.to_frequency for\n\ta function that does not have count_max initialized.", "tree": {"sha": "418eecfd7b1df7cb9ccd6d12f794a03733c7971a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/418eecfd7b1df7cb9ccd6d12f794a03733c7971a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0504b3d7c39d78cd9f50a52c49edb0113eadea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0504b3d7c39d78cd9f50a52c49edb0113eadea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0504b3d7c39d78cd9f50a52c49edb0113eadea5"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "aaefc11ff3df00df74876c7fb7176b9b3b200269", "filename": "gcc/profile-count.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=508e2d88a4c512e8b8685cf5ba201ad48e6bb58d", "patch": "@@ -270,8 +270,8 @@ profile_count::to_frequency (struct function *fun) const\n     return BB_FREQ_MAX;\n   if (*this == zero ())\n     return 0;\n-  gcc_assert (REG_BR_PROB_BASE == BB_FREQ_MAX\n-\t      && fun->cfg->count_max.initialized_p ());\n+  STATIC_ASSERT (REG_BR_PROB_BASE == BB_FREQ_MAX);\n+  gcc_assert (fun->cfg->count_max.initialized_p ());\n   profile_probability prob = probability_in (fun->cfg->count_max);\n   if (!prob.initialized_p ())\n     return REG_BR_PROB_BASE;"}, {"sha": "11416c47f6f81c8c8f197bde3752422de6f2d9ae", "filename": "gcc/regs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508e2d88a4c512e8b8685cf5ba201ad48e6bb58d/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=508e2d88a4c512e8b8685cf5ba201ad48e6bb58d", "patch": "@@ -128,7 +128,8 @@ extern size_t reg_info_p_size;\n    or profile driven feedback is available and the function is never executed,\n    frequency is always equivalent.  Otherwise rescale the basic block\n    frequency.  */\n-#define REG_FREQ_FROM_BB(bb) (optimize_function_for_size_p (cfun)\t      \\\n+#define REG_FREQ_FROM_BB(bb) ((optimize_function_for_size_p (cfun)\t      \\\n+\t\t\t       || !cfun->cfg->count_max.initialized_p ())     \\\n \t\t\t      ? REG_FREQ_MAX\t\t\t\t      \\\n \t\t\t      : ((bb)->count.to_frequency (cfun)\t      \\\n \t\t\t\t* REG_FREQ_MAX / BB_FREQ_MAX)\t\t      \\"}]}