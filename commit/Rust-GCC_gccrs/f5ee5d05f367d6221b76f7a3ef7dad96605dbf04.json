{"sha": "f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlZTVkMDVmMzY3ZDYyMjFiNzZmN2EzZWY3ZGFkOTY2MDVkYmYwNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-23T11:43:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-23T11:46:39Z"}, "message": "tree-optimization/93354 FRE redundant store removal validity fix\n\nThis fixes tracking of the alias-set of partial defs for use by\nredundant store removal.\n\n2020-01-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93381\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Take\n\talias-set of the def as argument and record the first one.\n\t(vn_walk_cb_data::first_set): New member.\n\t(vn_reference_lookup_3): Pass the alias-set of the current def\n\tto push_partial_def.  Fix alias-set used in the aggregate copy\n\tcase.\n\t(vn_reference_lookup): Consistently set *last_vuse_ptr.\n\t* real.c (clear_significand_below): Fix out-of-bound access.\n\n\t* gcc.dg/torture/pr93354.c: New testcase.", "tree": {"sha": "f925dbaaeff662eeffb4dbf2e9223d46315269d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f925dbaaeff662eeffb4dbf2e9223d46315269d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9592f639ff4655203f1cffb7c6752696e2721fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9592f639ff4655203f1cffb7c6752696e2721fb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9592f639ff4655203f1cffb7c6752696e2721fb0"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "cf8e21201cb3a725f35e089ee18e9fbfe19880ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "patch": "@@ -1,3 +1,15 @@\n+2020-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93381\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Take\n+\talias-set of the def as argument and record the first one.\n+\t(vn_walk_cb_data::first_set): New member.\n+\t(vn_reference_lookup_3): Pass the alias-set of the current def\n+\tto push_partial_def.  Fix alias-set used in the aggregate copy\n+\tcase.\n+\t(vn_reference_lookup): Consistently set *last_vuse_ptr.\n+\t* real.c (clear_significand_below): Fix out-of-bound access.\n+\n 2020-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93346"}, {"sha": "46d8126efe40f869fe80b7461cc4f14140ca1d8f", "filename": "gcc/real.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "patch": "@@ -420,7 +420,10 @@ clear_significand_below (REAL_VALUE_TYPE *r, unsigned int n)\n   for (i = 0; i < w; ++i)\n     r->sig[i] = 0;\n \n-  r->sig[w] &= ~(((unsigned long)1 << (n % HOST_BITS_PER_LONG)) - 1);\n+  /* We are actually passing N == SIGNIFICAND_BITS which would result\n+     in an out-of-bound access below.  */\n+  if (n % HOST_BITS_PER_LONG != 0)\n+    r->sig[w] &= ~(((unsigned long)1 << (n % HOST_BITS_PER_LONG)) - 1);\n }\n \n /* Divide the significands of A and B, placing the result in R.  Return"}, {"sha": "68b0ea6ca5caa5cf4374433b133434b7ad1cb283", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "patch": "@@ -1,3 +1,8 @@\n+2020-01-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93381\n+\t* gcc.dg/torture/pr93354.c: New testcase.\n+\n 2020-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93346"}, {"sha": "8ccf1e6d2c0941c453d02befb454dbfb47819264", "filename": "gcc/testsuite/gcc.dg/torture/pr93354.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93354.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93354.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93354.c?ref=f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+typedef __INT32_TYPE__ int32_t;\n+typedef __INT64_TYPE__ int64_t;\n+struct X { int32_t i; int32_t j; };\n+void foo (int64_t *z)\n+{\n+  ((struct X *)z)->i = 0x05060708;\n+  ((struct X *)z)->j = 0x01020304;\n+  *z = 0x0102030405060708;\n+}\n+\n+int main()\n+{\n+  int64_t l = 0;\n+  int64_t *p;\n+  asm (\"\" : \"=r\" (p) : \"0\" (&l));\n+  foo (p);\n+  if (l != 0x0102030405060708)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "6e0b2202157bec2d6823366bb1dcb53ba0c3f364", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ee5d05f367d6221b76f7a3ef7dad96605dbf04/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=f5ee5d05f367d6221b76f7a3ef7dad96605dbf04", "patch": "@@ -1693,7 +1693,8 @@ struct vn_walk_cb_data\n      ao_ref_init (&orig_ref, orig_ref_);\n    }\n   ~vn_walk_cb_data ();\n-  void *push_partial_def (const pd_data& pd, tree, HOST_WIDE_INT);\n+  void *push_partial_def (const pd_data& pd, tree,\n+\t\t\t  alias_set_type, HOST_WIDE_INT);\n \n   vn_reference_t vr;\n   ao_ref orig_ref;\n@@ -1706,6 +1707,7 @@ struct vn_walk_cb_data\n   /* The first defs range to avoid splay tree setup in most cases.  */\n   pd_range first_range;\n   tree first_vuse;\n+  alias_set_type first_set;\n   splay_tree known_ranges;\n   obstack ranges_obstack;\n };\n@@ -1746,13 +1748,13 @@ pd_tree_dealloc (void *, void *)\n }\n \n /* Push PD to the vector of partial definitions returning a\n-   value when we are ready to combine things with VUSE and MAXSIZEI,\n+   value when we are ready to combine things with VUSE, SET and MAXSIZEI,\n    NULL when we want to continue looking for partial defs or -1\n    on failure.  */\n \n void *\n vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n-\t\t\t\t   HOST_WIDE_INT maxsizei)\n+\t\t\t\t   alias_set_type set, HOST_WIDE_INT maxsizei)\n {\n   const HOST_WIDE_INT bufsize = 64;\n   /* We're using a fixed buffer for encoding so fail early if the object\n@@ -1773,6 +1775,7 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n       first_range.offset = pd.offset;\n       first_range.size = pd.size;\n       first_vuse = vuse;\n+      first_set = set;\n       last_vuse_ptr = NULL;\n       /* Continue looking for partial defs.  */\n       return NULL;\n@@ -1903,10 +1906,10 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n \t\t \"Successfully combined %u partial definitions\\n\", ndefs);\n-      /* ???  If we track partial defs alias-set we could use that if it\n-         is the same for all.  Use zero for now.  */\n+      /* We are using the alias-set of the first store we encounter which\n+\t should be appropriate here.  */\n       return vn_reference_lookup_or_insert_for_pieces\n-\t\t(first_vuse, 0, vr->type, vr->operands, val);\n+\t\t(first_vuse, first_set, vr->type, vr->operands, val);\n     }\n   else\n     {\n@@ -2492,7 +2495,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  pd.rhs = build_constructor (NULL_TREE, NULL);\n \t  pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t  pd.size = leni;\n-\t  return data->push_partial_def (pd, vuse, maxsizei);\n+\t  return data->push_partial_def (pd, vuse, 0, maxsizei);\n \t}\n     }\n \n@@ -2553,7 +2556,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = gimple_assign_rhs1 (def_stmt);\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t      pd.size = size2i / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, maxsizei);\n+\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n+\t\t\t\t\t     maxsizei);\n \t    }\n \t}\n     }\n@@ -2665,7 +2669,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = rhs;\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t      pd.size = size2i / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, maxsizei);\n+\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n+\t\t\t\t\t     maxsizei);\n \t    }\n \t}\n     }\n@@ -2751,7 +2756,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = SSA_VAL (def_rhs);\n \t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n \t      pd.size = size2i / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, maxsizei);\n+\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n+\t\t\t\t\t     maxsizei);\n \t    }\n \t}\n     }\n@@ -2764,6 +2770,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t       || TREE_CODE (gimple_assign_rhs1 (def_stmt)) == MEM_REF\n \t       || handled_component_p (gimple_assign_rhs1 (def_stmt))))\n     {\n+      tree lhs = gimple_assign_lhs (def_stmt);\n       tree base2;\n       int i, j, k;\n       auto_vec<vn_reference_op_s> rhs;\n@@ -2870,7 +2877,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t{\n \t  if (data->partial_defs.is_empty ())\n \t    return vn_reference_lookup_or_insert_for_pieces\n-\t      (vuse, get_alias_set (rhs1), vr->type, vr->operands, val);\n+\t      (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n \t  /* This is the only interesting case for partial-def handling\n \t     coming from targets that like to gimplify init-ctors as\n \t     aggregate copies from constant data like aarch64 for\n@@ -2882,7 +2889,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      pd.rhs = val;\n \t      pd.offset = 0;\n \t      pd.size = maxsizei / BITS_PER_UNIT;\n-\t      return data->push_partial_def (pd, vuse, maxsizei);\n+\t      return data->push_partial_def (pd, vuse, get_alias_set (lhs),\n+\t\t\t\t\t     maxsizei);\n \t    }\n \t}\n \n@@ -3205,6 +3213,8 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n       return NULL_TREE;\n     }\n \n+  if (last_vuse_ptr)\n+    *last_vuse_ptr = vr1.vuse;\n   return vn_reference_lookup_1 (&vr1, vnresult);\n }\n "}]}