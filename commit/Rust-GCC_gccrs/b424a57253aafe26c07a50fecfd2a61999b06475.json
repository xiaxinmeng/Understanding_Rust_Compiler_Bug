{"sha": "b424a57253aafe26c07a50fecfd2a61999b06475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyNGE1NzI1M2FhZmUyNmMwN2E1MGZlY2ZkMmE2MTk5OWIwNjQ3NQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-11-17T12:51:41Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-11-17T12:51:41Z"}, "message": "re PR fortran/20811 (gfortran include problem (regression from g77))\n\n\tPR fortran/20811\n\t* scanner.c (gfc_open_included_file): Add an extra include_cwd\n\targument. Only include files in the current working directory if\n\tits value is true.\n\t* gfortran.h: Change prototype for gfc_open_included_file.\n\t(load_file): Don't search for include files in the current working\n\tdirectory.\n\t* options.c (gfc_post_options): Add the directory of the source file\n\tto the list of paths for included files.\n\t* module.c (gfc_use_module): Look for module files in the current\n\tdirectory.\n\nFrom-SVN: r107120", "tree": {"sha": "35d678ee317290325bc9327dcad95c6ae1820654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d678ee317290325bc9327dcad95c6ae1820654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b424a57253aafe26c07a50fecfd2a61999b06475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b424a57253aafe26c07a50fecfd2a61999b06475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b424a57253aafe26c07a50fecfd2a61999b06475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b424a57253aafe26c07a50fecfd2a61999b06475/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2e7a3ab332ecb47b606ce2400672eb6065e45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2e7a3ab332ecb47b606ce2400672eb6065e45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2e7a3ab332ecb47b606ce2400672eb6065e45f"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "6ed025bddd86758a5420c7141ce23d99ed071549", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b424a57253aafe26c07a50fecfd2a61999b06475", "patch": "@@ -1,3 +1,17 @@\n+2005-11-17  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/20811\n+\t* scanner.c (gfc_open_included_file): Add an extra include_cwd\n+\targument. Only include files in the current working directory if\n+\tits value is true.\n+\t* gfortran.h: Change prototype for gfc_open_included_file.\n+\t(load_file): Don't search for include files in the current working\n+\tdirectory.\n+\t* options.c (gfc_post_options): Add the directory of the source file\n+\tto the list of paths for included files.\n+\t* module.c (gfc_use_module): Look for module files in the current\n+\tdirectory.\n+\n 2005-11-16  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR fortran/24096"}, {"sha": "95794a5ca7bbe64eee485a6d5e6f8dbcaec86697", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b424a57253aafe26c07a50fecfd2a61999b06475", "patch": "@@ -1548,7 +1548,7 @@ void gfc_scanner_init_1 (void);\n \n void gfc_add_include_path (const char *);\n void gfc_release_include_path (void);\n-FILE *gfc_open_included_file (const char *);\n+FILE *gfc_open_included_file (const char *, bool);\n \n int gfc_at_end (void);\n int gfc_at_eof (void);"}, {"sha": "8f1ab7301f447f01b144adf282640f62bb5ec98d", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=b424a57253aafe26c07a50fecfd2a61999b06475", "patch": "@@ -3741,7 +3741,7 @@ gfc_use_module (void)\n   strcpy (filename, module_name);\n   strcat (filename, MODULE_EXTENSION);\n \n-  module_fp = gfc_open_included_file (filename);\n+  module_fp = gfc_open_included_file (filename, true);\n   if (module_fp == NULL)\n     gfc_fatal_error (\"Can't open module file '%s' for reading at %C: %s\",\n \t\t     filename, strerror (errno));"}, {"sha": "a39876b80b5f48553d63d25d6ba96c85d95eee64", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=b424a57253aafe26c07a50fecfd2a61999b06475", "patch": "@@ -172,6 +172,8 @@ bool\n gfc_post_options (const char **pfilename)\n {\n   const char *filename = *pfilename;\n+  char *source_path;\n+  int i;\n \n   /* Verify the input file name.  */\n   if (!filename || strcmp (filename, \"-\") == 0)\n@@ -181,6 +183,21 @@ gfc_post_options (const char **pfilename)\n \n   gfc_source_file = filename;\n \n+  /* Adds the path where the source file is to the list of include files.  */\n+\n+  i = strlen(gfc_source_file);\n+  while (i > 0 && !IS_DIR_SEPARATOR(gfc_source_file[i]))\n+    i--;\n+  if (i != 0)\n+    {\n+      source_path = alloca (i + 1);\n+      memcpy (source_path, gfc_source_file, i);\n+      source_path[i] = 0;\n+      gfc_add_include_path (source_path);\n+    }\n+  else\n+    gfc_add_include_path (\".\");\n+\n   /* Decide which form the file will be read in as.  */\n \n   if (gfc_option.source_form != FORM_UNKNOWN)"}, {"sha": "883576166ffa6ad9bc953d7bdf590a45c2594c2b", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b424a57253aafe26c07a50fecfd2a61999b06475/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=b424a57253aafe26c07a50fecfd2a61999b06475", "patch": "@@ -159,18 +159,22 @@ gfc_release_include_path (void)\n }\n \n /* Opens file for reading, searching through the include directories\n-   given if necessary.  */\n+   given if necessary.  If the include_cwd argument is true, we try\n+   to open the file in the current directory first.  */\n \n FILE *\n-gfc_open_included_file (const char *name)\n+gfc_open_included_file (const char *name, const bool include_cwd)\n {\n   char *fullname;\n   gfc_directorylist *p;\n   FILE *f;\n \n-  f = gfc_open_file (name);\n-  if (f != NULL)\n-    return f;\n+  if (include_cwd)\n+    {\n+      f = gfc_open_file (name);\n+      if (f != NULL)\n+\treturn f;\n+    }\n \n   for (p = include_dirs; p; p = p->next)\n     {\n@@ -1034,7 +1038,7 @@ load_file (const char *filename, bool initial)\n     }\n   else\n     {\n-      input = gfc_open_included_file (filename);\n+      input = gfc_open_included_file (filename, false);\n       if (input == NULL)\n \t{\n \t  gfc_error_now (\"Can't open included file '%s'\", filename);"}]}