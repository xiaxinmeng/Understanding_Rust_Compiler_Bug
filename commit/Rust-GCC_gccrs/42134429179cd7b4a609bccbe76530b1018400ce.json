{"sha": "42134429179cd7b4a609bccbe76530b1018400ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxMzQ0MjkxNzljZDdiNGE2MDliY2NiZTc2NTMwYjEwMTg0MDBjZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-12-05T06:54:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-12-05T06:54:24Z"}, "message": "re PR libstdc++/13189 (<ext/enc_filebuf.h> fails to compile)\n\n\n2003-12-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/13189\n\t* include/ext/enc_filebuf.h: Fix.\n\t* include/bits/fstream.tcc: Tweak formatting.\n\t* include/bits/postypes.h: Same.\n\t* include/bits/sstream.tcc: Same.\n\t* include/bits/streambuf.tcc: Same.\n\t* testsuite/ext/stdio_filebuf.cc: Split.\n\t* testsuite/ext/stdio_filebuf_2.cc: Split.\n\t* testsuite/ext/stdio_sync_filebuf_char.cc: Split.\n\t* testsuite/ext/stdio_sync_filebuf_wchar_t.cc: Split.\n\t* testsuite/ext/enc_filebuf/char/13189.cc: New.\n\t* testsuite/ext/enc_filebuf/wchar_t/13189.cc: New.\n\t* testsuite/ext/stdio_filebuf/char/1.cc: New.\n\t* testsuite/ext/stdio_filebuf/char/2.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/char/1.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/char/12048-1.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/char/12048-2.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/char/12048-3.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/char/12048-4.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/wchar_t/1.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-1.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-2.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-3.cc: New.\n\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-4.cc: New.\n\nFrom-SVN: r74313", "tree": {"sha": "a9e0fb2dd81f521745d461331ec81d4ad282c408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e0fb2dd81f521745d461331ec81d4ad282c408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42134429179cd7b4a609bccbe76530b1018400ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42134429179cd7b4a609bccbe76530b1018400ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42134429179cd7b4a609bccbe76530b1018400ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42134429179cd7b4a609bccbe76530b1018400ce/comments", "author": null, "committer": null, "parents": [{"sha": "6e3077c6087cfcf64d814641adc019a2a85c763e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3077c6087cfcf64d814641adc019a2a85c763e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3077c6087cfcf64d814641adc019a2a85c763e"}], "stats": {"total": 728, "additions": 524, "deletions": 204}, "files": [{"sha": "8a7812520148e79601a3abcb0387e4529a9e1192", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -1,3 +1,30 @@\n+2003-12-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/13189\n+\t* include/ext/enc_filebuf.h: Fix.\n+\t* include/bits/fstream.tcc: Tweak formatting.\n+\t* include/bits/postypes.h: Same.\n+\t* include/bits/sstream.tcc: Same.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* testsuite/ext/stdio_filebuf.cc: Split.\n+\t* testsuite/ext/stdio_filebuf_2.cc: Split.\n+\t* testsuite/ext/stdio_sync_filebuf_char.cc: Split.\n+\t* testsuite/ext/stdio_sync_filebuf_wchar_t.cc: Split.\n+\t* testsuite/ext/enc_filebuf/char/13189.cc: New.\n+\t* testsuite/ext/enc_filebuf/wchar_t/13189.cc: New.\n+\t* testsuite/ext/stdio_filebuf/char/1.cc: New.\n+\t* testsuite/ext/stdio_filebuf/char/2.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/char/1.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/char/12048-1.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/char/12048-2.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/char/12048-3.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/char/12048-4.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/wchar_t/1.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-1.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-2.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-3.cc: New.\n+\t* testsuite/ext/stdio_sync_filebuf/wchar_t/12948-4.cc: New.\n+\n 2003-12-05  Carlo Wood  <carlo@alinoe.com>\n \n \tPR libstdc++/13045"}, {"sha": "595d8bde118868b34df47788df107b17fe2e9373", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -161,7 +161,6 @@ namespace std\n     {\n       streamsize __ret = -1;\n       const bool __testin = this->_M_mode & ios_base::in;\n-\n       if (__testin && this->is_open())\n \t{\n \t  // For a stateful encoding (-1) the pending sequence might be just\n@@ -170,7 +169,6 @@ namespace std\n \t  if (__check_facet(_M_codecvt).encoding() >= 0)\n \t    __ret += _M_file.showmanyc() / _M_codecvt->max_length();\n \t}\n-\n       return __ret;\n     }\n   \n@@ -182,7 +180,6 @@ namespace std\n       int_type __ret = traits_type::eof();\n       const bool __testin = this->_M_mode & ios_base::in;\n       const bool __testout = this->_M_mode & ios_base::out;\n-\n       if (__testin && !_M_writing)\n \t{\n \t  // Check for pback madness, and if so swich back to the\n@@ -323,14 +320,12 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testin = this->_M_mode & ios_base::in;\n-\n       if (__testin && !_M_writing)\n \t{\n \t  // Remember whether the pback buffer is active, otherwise below\n \t  // we may try to store in it a second char (libstdc++/9761).\n \t  const bool __testpb = this->_M_pback_init;\t   \n \t  const bool __testeof = traits_type::eq_int_type(__i, __ret);\n-\t  \n \t  int_type __tmp;\n \t  if (this->eback() < this->gptr())\n \t    {\n@@ -378,7 +373,6 @@ namespace std\n       int_type __ret = traits_type::eof();\n       const bool __testeof = traits_type::eq_int_type(__c, __ret);\n       const bool __testout = this->_M_mode & ios_base::out;\n-      \n       if (__testout && !_M_reading)\n \t{\n \t  if (this->pbase() < this->pptr())\n@@ -391,7 +385,7 @@ namespace std\n \t\t}\n \t      \n \t      // Convert pending sequence to external representation,\n-\t      // output.\n+\t      // and output.\n \t      if (_M_convert_to_external(this->pbase(),\n \t\t\t\t\t this->pptr() - this->pbase())\n \t\t  && (!__testeof || (__testeof && !_M_file.sync())))\n@@ -436,7 +430,6 @@ namespace std\n       // Sizes of external and pending output.\n       streamsize __elen = 0;\n       streamsize __plen = 0;\n-\n       if (__check_facet(_M_codecvt).always_noconv())\n \t{\n \t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n@@ -499,11 +492,10 @@ namespace std\n      basic_filebuf<_CharT, _Traits>::\n      xsputn(const _CharT* __s, streamsize __n)\n      { \n-       streamsize __ret = 0;\n-      \n        // Optimization in the always_noconv() case, to be generalized in the\n        // future: when __n is sufficiently large we write directly instead of\n        // using the buffer.\n+       streamsize __ret = 0;\n        const bool __testout = this->_M_mode & ios_base::out;\n        if (__testout && !_M_reading\n \t   && __check_facet(_M_codecvt).always_noconv())\n@@ -538,8 +530,7 @@ namespace std\n \t    __ret = __streambuf_type::xsputn(__s, __n);\n \t}\n        else\n-\t __ret = __streambuf_type::xsputn(__s, __n);\n-      \n+\t __ret = __streambuf_type::xsputn(__s, __n);      \n        return __ret;\n     }\n \n@@ -575,14 +566,13 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)\n     {\n-      pos_type __ret =  pos_type(off_type(-1)); \n-\n       int __width = 0;\n       if (_M_codecvt)\n \t__width = _M_codecvt->encoding();\n       if (__width < 0)\n \t__width = 0;\n \n+      pos_type __ret =  pos_type(off_type(-1)); \n       const bool __testfail = __off != 0 && __width <= 0;\n       if (this->is_open() && !__testfail) \n \t{\n@@ -630,12 +620,10 @@ namespace std\n     seekpos(pos_type __pos, ios_base::openmode)\n     {\n       pos_type __ret =  pos_type(off_type(-1)); \n-\n       if (this->is_open()) \n \t{\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_destroy_pback();\n-\n \t  __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());\n \t}\n       return __ret;\n@@ -650,8 +638,7 @@ namespace std\n       if (_M_terminate_output())\n \t{\t  \n \t  // Returns pos_type(off_type(-1)) in case of failure.\n-\t  __ret = pos_type(_M_file.seekoff(__off, __way));\n-\t  \n+\t  __ret = pos_type(_M_file.seekoff(__off, __way));\t  \n \t  _M_reading = false;\n \t  _M_writing = false;\n \t  _M_ext_next = _M_ext_end = _M_ext_buf;\n@@ -667,9 +654,8 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     _M_terminate_output()\n     {\n-      bool __testvalid = true;\n-\n       // Part one: update the output sequence.\n+      bool __testvalid = true;\n       if (this->pbase() < this->pptr())\n \t{\n \t  const int_type __tmp = this->overflow();\n@@ -685,7 +671,6 @@ namespace std\n \t  // get the length of the unshift sequence from codecvt,\n \t  // without calling unshift.\n \t  const size_t __blen = 128;\n-\n \t  char __buf[__blen];\n \t  codecvt_base::result __r;\n \t  streamsize __ilen = 0;\n@@ -700,8 +685,7 @@ namespace std\n \t      else if (__r == codecvt_base::ok ||\n \t\t       __r == codecvt_base::partial)\n \t\t{\n-\t\t  __ilen = __next - __buf;\n-\t\t  \n+\t\t  __ilen = __next - __buf;\t\t  \n \t\t  if (__ilen > 0)\n \t\t    {\n \t\t      const streamsize __elen = _M_file.xsputn(__buf, __ilen);\n@@ -731,18 +715,16 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     sync()\n     {\n-      int __ret = 0;\n-\n       // Make sure that the internal buffer resyncs its idea of\n       // the file position with the external file.\n       // NB: _M_file.sync() will be called within.\n+      int __ret = 0;\n       if (this->pbase() < this->pptr())\n \t{\n \t  const int_type __tmp = this->overflow();\n \t  if (traits_type::eq_int_type(__tmp, traits_type::eof()))\n \t    __ret = -1;\n-\t}\n-      \n+\t}      \n       return __ret;\n     }\n \n@@ -752,7 +734,6 @@ namespace std\n     imbue(const locale& __loc)\n     {\n       bool __testfail = false;\n-\n       if (this->is_open())\n \t{\n \t  const pos_type __ret = this->seekoff(0, ios_base::cur,"}, {"sha": "c9b46b1d171abf3fde8890b7edf7904f5108cd60", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -146,8 +146,8 @@ namespace std\n     private:\n       friend class streamoff;\n \n-      __streamoff_base_type _M_off;\n-      _StateT _M_state;\n+      __streamoff_base_type \t_M_off;\n+      _StateT \t\t\t_M_state;\n \n     public:\n       // The standard doesn't require that fpos objects can be default"}, {"sha": "07e13926ba94e7b917c08bb14db67f052d481c22", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -79,8 +79,7 @@ namespace std\n       if (__builtin_expect(!__testout, false))\n \treturn traits_type::eof();\n \n-      const bool __testeof = traits_type::eq_int_type(__c,\n-\t\t\t\t\t\t      traits_type::eof());\n+      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n       if (__builtin_expect(__testeof, false))\n \treturn traits_type::not_eof(__c);\n \n@@ -106,8 +105,7 @@ namespace std\n \t  __tmp.assign(_M_string.data(), this->epptr() - this->pbase());\n \t  _M_string.swap(__tmp);\n \t  _M_sync(const_cast<char_type*>(_M_string.data()),\n-\t\t  this->gptr() - this->eback(), \n-\t\t  this->pptr() - this->pbase());\n+\t\t  this->gptr() - this->eback(), this->pptr() - this->pbase());\n \t}\n       return this->sputc(traits_type::to_char_type(__c));\n     }\n@@ -123,7 +121,6 @@ namespace std\n \t{\n \t  // Update egptr() to match the actual string end.\n \t  _M_update_egptr();\n-\n \t  if (this->gptr() < this->egptr())\n \t    __ret = traits_type::to_int_type(*this->gptr());\n \t}\n@@ -181,8 +178,7 @@ namespace std\n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n     seekpos(pos_type __sp, ios_base::openmode __mode)\n     {\n-      pos_type __ret =  pos_type(off_type(-1)); \n-      \n+      pos_type __ret =  pos_type(off_type(-1));       \n       if (_M_string.capacity())\n \t{\n \t  off_type __pos (__sp);"}, {"sha": "4cc9bf1590ac4b0a55645ada5877b58a1bb28831", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -149,15 +149,13 @@ namespace std\n   extern template class basic_streambuf<char>;\n   extern template\n     streamsize\n-    __copy_streambufs(basic_streambuf<char>*,\n-\t\t      basic_streambuf<char>*); \n+    __copy_streambufs(basic_streambuf<char>*, basic_streambuf<char>*); \n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   extern template class basic_streambuf<wchar_t>;\n   extern template\n     streamsize\n-    __copy_streambufs(basic_streambuf<wchar_t>*,\n-\t\t      basic_streambuf<wchar_t>*); \n+    __copy_streambufs(basic_streambuf<wchar_t>*, basic_streambuf<wchar_t>*); \n #endif\n #endif\n } // namespace std"}, {"sha": "81dad12f2f9415d2e984ec56399703311b52d21a", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -1,6 +1,6 @@\n-// __enc_traits layer for filebuf -*- C++ -*-\n+// filebuf with __enc_traits state type -*- C++ -*-\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,30 +32,34 @@\n \n namespace __gnu_cxx\n {\n-  // Custom traits type with __enc_traits for state type, all other bits\n-  // equivalent to the required char_traits instantiations.\n+  // Custom traits type with __enc_traits for the state type, and the\n+  // associated fpos<__enc_traits> for the position type, all other\n+  // bits equivalent to the required char_traits instantiations.\n   template<typename _CharT>\n     struct enc_char_traits: public std::char_traits<_CharT>\n     {\n-      typedef std::__enc_traits\tstate_type;\n+      typedef std::__enc_traits\t\t\tstate_type;\n+      typedef typename std::fpos<state_type> \tpos_type;\n     };\n \n   template<typename _CharT>\n     class enc_filebuf\n     : public std::basic_filebuf<_CharT, enc_char_traits<_CharT> >\n     {\n     public:\n-      typedef typename enc_char_traits<_CharT>::state_type state_type;\n+      typedef enc_char_traits<_CharT> \t\ttraits_type;\n+      typedef typename traits_type::state_type \tstate_type;\n+      typedef typename traits_type::pos_type \tpos_type;\n       \n       enc_filebuf(state_type& __state)\n       : std::basic_filebuf<_CharT, enc_char_traits<_CharT> >()\n       { \n \t// Set state type to something useful.\n \t// Something more than copyconstructible is needed here, so\n-\t// require copyconstructible + assignment operator.\n+\t// require default and copy constructible + assignment operator.\n \t__glibcxx_class_requires(state_type, _SGIAssignableConcept);\n-\t_M_state_cur = __state;\n-\t_M_state_cur._M_init();\n+\tthis->_M_state_beg = __state;\n+\tthis->_M_state_beg._M_init();\n       };\n     };\n } // namespace __gnu_cxx"}, {"sha": "57c0871ed1289b27b551bd7e1c27c6be51849130", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/char/13189.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13189.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/enc_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  using namespace std;\n+\n+  typedef __enc_traits state_type;\n+  typedef char char_type;\n+  typedef __gnu_cxx::enc_filebuf<char_type> filebuf_type;\n+  typedef codecvt<char_type, char, state_type> enc_codecvt;\n+\n+  bool test __attribute__((unused)) = true;\n+  ios_base::openmode mode = ios_base::in | ios_base::out | ios_base::trunc;\n+  try\n+    {\n+      state_type st;\n+      filebuf_type fbuf(st);\n+      locale loc(locale::classic(), new enc_codecvt);\n+      fbuf.pubimbue(loc);\n+      fbuf.open(\"tmp_13189c\", mode);\n+      fbuf.sputc('a');\n+      fbuf.pubseekoff(0, ios_base::beg);\n+      fbuf.sgetc();\n+      fbuf.close();\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  return 0;\n+}"}, {"sha": "7089b67da33b59ed7a1bf0d9f162f745ecdf120e", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/wchar_t/13189.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fwchar_t%2F13189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fwchar_t%2F13189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fwchar_t%2F13189.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/enc_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  using namespace std;\n+\n+  typedef __enc_traits state_type;\n+  typedef wchar_t char_type;\n+  typedef __gnu_cxx::enc_filebuf<char_type> filebuf_type;\n+  typedef codecvt<char_type, char, state_type> enc_codecvt;\n+\n+  bool test __attribute__((unused)) = true;\n+  ios_base::openmode mode = ios_base::in | ios_base::out | ios_base::trunc;\n+  try\n+    {\n+      state_type st;\n+      filebuf_type fbuf(st);\n+      locale loc(locale::classic(), new enc_codecvt);\n+      fbuf.pubimbue(loc);\n+      fbuf.open(\"tmp_13189w\", mode);\n+      fbuf.sputc(L'a');\n+      fbuf.pubseekoff(0, ios_base::beg);\n+      fbuf.sgetc();\n+      fbuf.close();\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+  return 0;\n+}"}, {"sha": "8b313b3f31f380e042256bf9c82b7fde11b40e2c", "filename": "libstdc++-v3/testsuite/ext/stdio_filebuf/char/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F1.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "previous_filename": "libstdc++-v3/testsuite/ext/stdio_filebuf.cc"}, {"sha": "1ef57eecb21aadd9f6f6fb0644652047e3afe0ba", "filename": "libstdc++-v3/testsuite/ext/stdio_filebuf/char/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_filebuf%2Fchar%2F2.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "previous_filename": "libstdc++-v3/testsuite/ext/stdio_filebuf_2.cc"}, {"sha": "c57186d52b3cc2f70e08b35ac07a5ed61bae2aa0", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/char/1.cc", "status": "renamed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F1.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -56,85 +56,8 @@ void test01()\n   fclose(fin);\n }\n \n-// libstdc++/12048\n-void test02()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n-  int c1 = sbuf.sbumpc();\n-  VERIFY( c1 != EOF );\n-  int c2 = sbuf.sungetc();\n-  VERIFY( c2 != EOF );\n-  int c3 = sbuf.sbumpc();\n-  VERIFY( c3 == c1 );\n-\n-  std::fclose(file);\n-}\n-\n-// libstdc++/12048\n-void test03()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n-  int c1 = sbuf.sbumpc();\n-  VERIFY( c1 != EOF );\n-  int c2 = sbuf.sungetc();\n-  VERIFY( c2 != EOF );\n-  int c3 = std::fgetc(file);\n-  VERIFY( c3 == c1 );\n-\n-  std::fclose(file);\n-}\n-\n-// libstdc++/12048\n-void test04()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n-  char buf[2];\n-  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n-  int c2 = sbuf.sungetc();\n-  VERIFY( c2 != EOF );\n-  int c3 = sbuf.sbumpc();\n-  VERIFY( c3 == std::char_traits<char>::to_int_type(buf[1]) );\n-\n-  std::fclose(file);\n-}\n-\n-// libstdc++/12048\n-void test05()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n-  char buf[2];\n-  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n-  int c2 = sbuf.sungetc();\n-  VERIFY( c2 != EOF );\n-  int c3 = std::fgetc(file);\n-  VERIFY( c3 == std::char_traits<char>::to_int_type(buf[1]) );\n-\n-  std::fclose(file);\n-}\n-\n int main ()\n {\n   test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf_char.cc"}, {"sha": "e35897e20f14ba8f7d261bc33711e3a841c97034", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/char/12048-1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-1.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  int c1 = sbuf.sbumpc();\n+  VERIFY( c1 != EOF );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = sbuf.sbumpc();\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "66192548b036f982943a5c8cad079873179b1478", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/char/12048-2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-2.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  int c1 = sbuf.sbumpc();\n+  VERIFY( c1 != EOF );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = std::fgetc(file);\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "6039e15cfe8f1ed2f3d2356ebf200658d859f3f8", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/char/12048-3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-3.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  char buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = sbuf.sbumpc();\n+  VERIFY( c3 == std::char_traits<char>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "5372b68e9faad975d56e28d32608ca1f98438441", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/char/12048-4.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fchar%2F12048-4.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<char> sbuf(file);\n+  char buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  int c2 = sbuf.sungetc();\n+  VERIFY( c2 != EOF );\n+  int c3 = std::fgetc(file);\n+  VERIFY( c3 == std::char_traits<char>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "728602155c352cee036d9f44f21facd82d4f613d", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/wchar_t/1.cc", "status": "renamed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F1.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -58,85 +58,8 @@ void test01()\n   fclose(fin);\n }\n \n-// libstdc++/12048\n-void test02()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n-  std::wint_t c1 = sbuf.sbumpc();\n-  VERIFY( c1 != WEOF );\n-  std::wint_t c2 = sbuf.sungetc();\n-  VERIFY( c2 != WEOF );\n-  std::wint_t c3 = sbuf.sbumpc();\n-  VERIFY( c3 == c1 );\n-\n-  std::fclose(file);\n-}\n-\n-// libstdc++/12048\n-void test03()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n-  std::wint_t c1 = sbuf.sbumpc();\n-  VERIFY( c1 != WEOF );\n-  std::wint_t c2 = sbuf.sungetc();\n-  VERIFY( c2 != WEOF );\n-  std::wint_t c3 = std::fgetwc(file);\n-  VERIFY( c3 == c1 );\n-\n-  std::fclose(file);\n-}\n-\n-// libstdc++/12048\n-void test04()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n-  wchar_t buf[2];\n-  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n-  std::wint_t c2 = sbuf.sungetc();\n-  VERIFY( c2 != WEOF );\n-  std::wint_t c3 = sbuf.sbumpc();\n-  VERIFY( c3 == std::char_traits<wchar_t>::to_int_type(buf[1]) );\n-\n-  std::fclose(file);\n-}\n-\n-// libstdc++/12048\n-void test05()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"cin_unget-1.txt\";\n-\n-  std::FILE* file = std::fopen(name, \"r\");\n-  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n-  wchar_t buf[2];\n-  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n-  std::wint_t c2 = sbuf.sungetc();\n-  VERIFY( c2 != WEOF );\n-  std::wint_t c3 = std::fgetwc(file);\n-  VERIFY( c3 == std::char_traits<wchar_t>::to_int_type(buf[1]) );\n-\n-  std::fclose(file);\n-}\n-\n int main ()\n {\n   test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf_wchar_t.cc"}, {"sha": "5329ba8b1cec5eec5fd0d81930d5f60578aac940", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/wchar_t/12948-1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-1.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  std::wint_t c1 = sbuf.sbumpc();\n+  VERIFY( c1 != WEOF );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = sbuf.sbumpc();\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "285969bde4cd66498ab713d1c1eb41fa2fef460a", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/wchar_t/12948-2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-2.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  std::wint_t c1 = sbuf.sbumpc();\n+  VERIFY( c1 != WEOF );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = std::fgetwc(file);\n+  VERIFY( c3 == c1 );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "b006898b33b236bbedddbf8e4585bd2118e179b8", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/wchar_t/12948-3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-3.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  wchar_t buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = sbuf.sbumpc();\n+  VERIFY( c3 == std::char_traits<wchar_t>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "704a75305b4384dc633b470c1aa7b2303e0f9fae", "filename": "libstdc++-v3/testsuite/ext/stdio_sync_filebuf/wchar_t/12948-4.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42134429179cd7b4a609bccbe76530b1018400ce/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fstdio_sync_filebuf%2Fwchar_t%2F12948-4.cc?ref=42134429179cd7b4a609bccbe76530b1018400ce", "patch": "@@ -0,0 +1,46 @@\n+// 2003-05-01 Petur Runolfsson <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <ext/stdio_sync_filebuf.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12048\n+void test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"cin_unget-1.txt\";\n+\n+  std::FILE* file = std::fopen(name, \"r\");\n+  __gnu_cxx::stdio_sync_filebuf<wchar_t> sbuf(file);\n+  wchar_t buf[2];\n+  VERIFY( sbuf.sgetn(buf, 2) == 2 );\n+  std::wint_t c2 = sbuf.sungetc();\n+  VERIFY( c2 != WEOF );\n+  std::wint_t c3 = std::fgetwc(file);\n+  VERIFY( c3 == std::char_traits<wchar_t>::to_int_type(buf[1]) );\n+\n+  std::fclose(file);\n+}\n+\n+int main ()\n+{\n+  test05();\n+  return 0;\n+}"}]}