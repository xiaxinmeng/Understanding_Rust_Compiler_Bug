{"sha": "bd28a34f33a84524d8c61fbf23d88d1158c579a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyOGEzNGYzM2E4NDUyNGQ4YzYxZmJmMjNkODhkMTE1OGM1NzlhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-25T15:23:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-25T15:23:47Z"}, "message": "re PR c++/69842 (Parameter deduction in polymorphic lambdas)\n\n\tPR c++/69842\n\t* method.c (forward_parm): Handle parameter packs.\n\t* lambda.c (maybe_add_lambda_conv_op): Use it for them.\n\nFrom-SVN: r233719", "tree": {"sha": "ff5719ec9900a39ee822f08421cd7494cf377051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff5719ec9900a39ee822f08421cd7494cf377051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd28a34f33a84524d8c61fbf23d88d1158c579a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd28a34f33a84524d8c61fbf23d88d1158c579a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd28a34f33a84524d8c61fbf23d88d1158c579a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd28a34f33a84524d8c61fbf23d88d1158c579a7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a0cc1cd6c5f5fbc4675ac7c3e7a899a3d8d4475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0cc1cd6c5f5fbc4675ac7c3e7a899a3d8d4475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0cc1cd6c5f5fbc4675ac7c3e7a899a3d8d4475"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "ea4389d475a7bdf383f335913225b60b159f3801", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd28a34f33a84524d8c61fbf23d88d1158c579a7", "patch": "@@ -1,5 +1,9 @@\n 2016-02-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/69842\n+\t* method.c (forward_parm): Handle parameter packs.\n+\t* lambda.c (maybe_add_lambda_conv_op): Use it for them.\n+\n \tPR c++/67364\n \t* constexpr.c (cxx_eval_component_reference): Don't complain about\n \tunevaluated empty classes."}, {"sha": "cdc11febcffa4038ddaccd37b53c2880cd8a2c58", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=bd28a34f33a84524d8c61fbf23d88d1158c579a7", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-iterator.h\"\n #include \"toplev.h\"\n+#include \"gimplify.h\"\n \n /* Constructor for a lambda expression.  */\n \n@@ -952,23 +953,18 @@ maybe_add_lambda_conv_op (tree type)\n \n \tif (generic_lambda_p)\n \t  {\n-\t    if (DECL_PACK_P (tgt))\n-\t      {\n-\t\ttree a = make_pack_expansion (tgt);\n-\t\tif (decltype_call)\n-\t\t  CALL_EXPR_ARG (decltype_call, ix) = copy_node (a);\n-\t\tPACK_EXPANSION_LOCAL_P (a) = true;\n-\t\tCALL_EXPR_ARG (call, ix) = a;\n-\t      }\n-\t    else\n-\t      {\n-\t\t++processing_template_decl;\n-\t\ttree a = forward_parm (tgt);\n-\t\t--processing_template_decl;\n-\t\tCALL_EXPR_ARG (call, ix) = a;\n-\t\tif (decltype_call)\n-\t\t  CALL_EXPR_ARG (decltype_call, ix) = copy_node (a);\n-\t      }\n+\t    ++processing_template_decl;\n+\t    tree a = forward_parm (tgt);\n+\t    --processing_template_decl;\n+\n+\t    CALL_EXPR_ARG (call, ix) = a;\n+\t    if (decltype_call)\n+\t      CALL_EXPR_ARG (decltype_call, ix) = unshare_expr (a);\n+\n+\t    if (PACK_EXPANSION_P (a))\n+\t      /* Set this after unsharing so it's not in decltype_call.  */\n+\t      PACK_EXPANSION_LOCAL_P (a) = true;\n+\n \t    ++ix;\n \t  }\n \telse"}, {"sha": "0235e6a9c22ea3ee6feed57ac882222a4e1f4fb3", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=bd28a34f33a84524d8c61fbf23d88d1158c579a7", "patch": "@@ -481,9 +481,12 @@ tree\n forward_parm (tree parm)\n {\n   tree exp = convert_from_reference (parm);\n-  if (TREE_CODE (TREE_TYPE (parm)) != REFERENCE_TYPE\n-      || TYPE_REF_IS_RVALUE (TREE_TYPE (parm)))\n-    exp = move (exp);\n+  tree type = TREE_TYPE (parm);\n+  if (DECL_PACK_P (parm))\n+    type = PACK_EXPANSION_PATTERN (type);\n+  exp = build_static_cast (type, exp, tf_warning_or_error);\n+  if (DECL_PACK_P (parm))\n+    exp = make_pack_expansion (exp);\n   return exp;\n }\n "}, {"sha": "0b65f56fa87343fa7368d9a436b3e6bd11309634", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd28a34f33a84524d8c61fbf23d88d1158c579a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic4.C?ref=bd28a34f33a84524d8c61fbf23d88d1158c579a7", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/69842\n+// { dg-do compile { target c++14 } }\n+\n+template <class T, class U> struct assert_same;\n+template <class T> struct assert_same<T,T> {};\n+\n+template<typename T>\n+void sink(T &&)\n+{\n+  assert_same<int,T> a;\n+}\n+\n+int main()\n+{\n+  auto const g([](auto &&...  _var) {\n+      sink(static_cast<decltype(_var)>(_var)...);\n+    });\n+\n+  g(0);\n+}"}]}