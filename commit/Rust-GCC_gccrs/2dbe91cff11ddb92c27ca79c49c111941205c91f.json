{"sha": "2dbe91cff11ddb92c27ca79c49c111941205c91f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiZTkxY2ZmMTFkZGI5MmMyN2NhNzljNDljMTExOTQxMjA1YzkxZg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-25T09:25:31Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-25T09:25:31Z"}, "message": "[Patch i386] PR78509 - TARGET_C_EXCESS_PRECISION should not return\n \"unpredictable\" for EXCESS_PRECISION_TYPE_STANDARD\n\ngcc/\n\n\tPR target/78509\n\t* config/i386/i386.c (i386_excess_precision): Do not return\n\tFLT_EVAL_METHOD_UNPREDICTABLE when \"type\" is\n\tEXCESS_PRECISION_TYPE_STANDARD.\n\t* target.def (excess_precision): Document that targets should\n\tnot return FLT_EVAL_METHOD_UNPREDICTABLE when \"type\" is\n\tEXCESS_PRECISION_TYPE_STANDARD or EXCESS_PRECISION_TYPE_FAST.\n\tFix typo in first sentence.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r242866", "tree": {"sha": "08ab74096a44e91d69aa702943f8f9a31f23fc6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ab74096a44e91d69aa702943f8f9a31f23fc6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dbe91cff11ddb92c27ca79c49c111941205c91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbe91cff11ddb92c27ca79c49c111941205c91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbe91cff11ddb92c27ca79c49c111941205c91f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbe91cff11ddb92c27ca79c49c111941205c91f/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bcfb22cf6bea2ad30b4d31a14c94bce374c817b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bcfb22cf6bea2ad30b4d31a14c94bce374c817b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bcfb22cf6bea2ad30b4d31a14c94bce374c817b"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "0878c30be5f2e8600be6f5247826806bc6b7dbaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dbe91cff11ddb92c27ca79c49c111941205c91f", "patch": "@@ -1,3 +1,15 @@\n+2016-11-24  James Greenahlgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/78509\n+\t* config/i386/i386.c (i386_excess_precision): Do not return\n+\tFLT_EVAL_METHOD_UNPREDICTABLE when \"type\" is\n+\tEXCESS_PRECISION_TYPE_STANDARD.\n+\t* target.def (excess_precision): Document that targets should\n+\tnot return FLT_EVAL_METHOD_UNPREDICTABLE when \"type\" is\n+\tEXCESS_PRECISION_TYPE_STANDARD or EXCESS_PRECISION_TYPE_FAST.\n+\tFix typo in first sentence.\n+\t* doc/tm.texi: Regenerate.\n+\n 2016-11-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78396"}, {"sha": "a96d597d0ed00280c6240b3ea8afe5c9d03ee574", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2dbe91cff11ddb92c27ca79c49c111941205c91f", "patch": "@@ -51039,17 +51039,26 @@ ix86_excess_precision (enum excess_precision_type type)\n       case EXCESS_PRECISION_TYPE_IMPLICIT:\n \t/* Otherwise, the excess precision we want when we are\n \t   in a standards compliant mode, and the implicit precision we\n-\t   provide can be identical.  */\n+\t   provide would be identical were it not for the unpredictable\n+\t   cases.  */\n \tif (!TARGET_80387)\n \t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n-\telse if (TARGET_MIX_SSE_I387)\n-\t  return FLT_EVAL_METHOD_UNPREDICTABLE;\n-\telse if (!TARGET_SSE_MATH)\n-\t  return FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE;\n-\telse if (TARGET_SSE2)\n-\t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n-\telse\n-\t  return FLT_EVAL_METHOD_UNPREDICTABLE;\n+\telse if (!TARGET_MIX_SSE_I387)\n+\t  {\n+\t    if (!TARGET_SSE_MATH)\n+\t      return FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE;\n+\t    else if (TARGET_SSE2)\n+\t      return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+\t  }\n+\n+\t/* If we are in standards compliant mode, but we know we will\n+\t   calculate in unpredictable precision, return\n+\t   FLT_EVAL_METHOD_FLOAT.  There is no reason to introduce explicit\n+\t   excess precision if the target can't guarantee it will honor\n+\t   it.  */\n+\treturn (type == EXCESS_PRECISION_TYPE_STANDARD\n+\t\t? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT\n+\t\t: FLT_EVAL_METHOD_UNPREDICTABLE);\n       default:\n \tgcc_unreachable ();\n     }"}, {"sha": "ebcadacbe9aa2596181b732b2a5f1df46849e6f8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2dbe91cff11ddb92c27ca79c49c111941205c91f", "patch": "@@ -948,7 +948,7 @@ Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n @deftypefn {Target Hook} {enum flt_eval_method} TARGET_C_EXCESS_PRECISION (enum excess_precision_type @var{type})\n-Return a value, with the same meaning as @code{FLT_EVAL_METHOD} C that describes which excess precision should be applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT}, @code{EXCESS_PRECISION_TYPE_FAST}, or @code{EXCESS_PRECISION_TYPE_STANDARD}.  For @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which precision and range operations will be implictly evaluated in regardless of the excess precision explicitly added.  For @code{EXCESS_PRECISION_TYPE_STANDARD} and @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the explicit excess precision that should be added depending on the value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\n+Return a value, with the same meaning as the C99 macro @code{FLT_EVAL_METHOD} that describes which excess precision should be applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT}, @code{EXCESS_PRECISION_TYPE_FAST}, or @code{EXCESS_PRECISION_TYPE_STANDARD}.  For @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which precision and range operations will be implictly evaluated in regardless of the excess precision explicitly added.  For @code{EXCESS_PRECISION_TYPE_STANDARD} and @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the explicit excess precision that should be added depending on the value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}. Note that unpredictable explicit excess precision does not make sense, so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE} when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or @code{EXCESS_PRECISION_TYPE_FAST}.\n @end deftypefn\n \n @deftypefn {Target Hook} machine_mode TARGET_PROMOTE_FUNCTION_MODE (const_tree @var{type}, machine_mode @var{mode}, int *@var{punsignedp}, const_tree @var{funtype}, int @var{for_return})"}, {"sha": "85a0ac03092e152c642b4104d791f8b68ffadc15", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe91cff11ddb92c27ca79c49c111941205c91f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=2dbe91cff11ddb92c27ca79c49c111941205c91f", "patch": "@@ -5466,9 +5466,9 @@ DEFHOOK_UNDOC\n \n DEFHOOK\n (excess_precision,\n- \"Return a value, with the same meaning as @code{FLT_EVAL_METHOD} C that\\\n- describes which excess precision should be applied.  @var{type} is\\\n- either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\\\n+ \"Return a value, with the same meaning as the C99 macro\\\n+ @code{FLT_EVAL_METHOD} that describes which excess precision should be\\\n+ applied.  @var{type} is either @code{EXCESS_PRECISION_TYPE_IMPLICIT},\\\n  @code{EXCESS_PRECISION_TYPE_FAST}, or\\\n  @code{EXCESS_PRECISION_TYPE_STANDARD}.  For\\\n  @code{EXCESS_PRECISION_TYPE_IMPLICIT}, the target should return which\\\n@@ -5477,7 +5477,11 @@ DEFHOOK\n  @code{EXCESS_PRECISION_TYPE_STANDARD} and\\\n  @code{EXCESS_PRECISION_TYPE_FAST}, the target should return the\\\n  explicit excess precision that should be added depending on the\\\n- value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\",\n+ value set for @option{-fexcess-precision=@r{[}standard@r{|}fast@r{]}}.\\\n+ Note that unpredictable explicit excess precision does not make sense,\\\n+ so a target should never return @code{FLT_EVAL_METHOD_UNPREDICTABLE}\\\n+ when @var{type} is @code{EXCESS_PRECISION_TYPE_STANDARD} or\\\n+ @code{EXCESS_PRECISION_TYPE_FAST}.\",\n  enum flt_eval_method, (enum excess_precision_type type),\n  default_excess_precision)\n "}]}