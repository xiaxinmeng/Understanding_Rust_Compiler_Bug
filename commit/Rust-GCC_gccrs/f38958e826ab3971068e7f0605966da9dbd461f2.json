{"sha": "f38958e826ab3971068e7f0605966da9dbd461f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4OTU4ZTgyNmFiMzk3MTA2OGU3ZjA2MDU5NjZkYTlkYmQ0NjFmMg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-09T14:07:58Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-09T14:07:58Z"}, "message": "builtins.c (fold_builtin_next_arg): Use stdarg_p.\n\ngcc/\n\t* builtins.c (fold_builtin_next_arg): Use stdarg_p.\n\t* config/arm/arm.c (arm_get_pcs_model): Likewise.\n\t* config/avr/avr.c (init_cumulative_args): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_expand_prologue): Likewise.\n\t* config/lm32/lm32.c (lm32_setup_incoming_varargs): Likewise.\n\t* config/m68k/m68k.c (m68k_return_pops_args): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_builtin_saveregs): Likewise.\n\t* config/pa/pa.c (hppa_builtin_saveregs): Likewise.\n\t* config/pa/som.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n\t* dwarf2out.c (gen_subprogram_die): Likewise.\n\t* function.c (allocate_struct_function): Likewise.\n\t* c-aux-info.c (gen_formal_list_for_func_dec): Likewise.\n\t(deserves_ellipsis): Delete.\n\ngcc/cp/\n\t* tree.c (varargs_function_p): Use stdarg_p.\n\nFrom-SVN: r163033", "tree": {"sha": "c8260d9815d8d4bc233f5955b7299662d6909600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8260d9815d8d4bc233f5955b7299662d6909600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38958e826ab3971068e7f0605966da9dbd461f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38958e826ab3971068e7f0605966da9dbd461f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38958e826ab3971068e7f0605966da9dbd461f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38958e826ab3971068e7f0605966da9dbd461f2/comments", "author": null, "committer": null, "parents": [{"sha": "ec64af64d6829135a7d8b5254f3b7881a18b5aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec64af64d6829135a7d8b5254f3b7881a18b5aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec64af64d6829135a7d8b5254f3b7881a18b5aba"}], "stats": {"total": 109, "additions": 36, "deletions": 73}, "files": [{"sha": "013683ff5a327acb0c241af59060db7fb848a4a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -1,3 +1,20 @@\n+2010-08-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* builtins.c (fold_builtin_next_arg): Use stdarg_p.\n+\t* config/arm/arm.c (arm_get_pcs_model): Likewise.\n+\t* config/avr/avr.c (init_cumulative_args): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_expand_prologue): Likewise.\n+\t* config/lm32/lm32.c (lm32_setup_incoming_varargs): Likewise.\n+\t* config/m68k/m68k.c (m68k_return_pops_args): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_builtin_saveregs): Likewise.\n+\t* config/pa/pa.c (hppa_builtin_saveregs): Likewise.\n+\t* config/pa/som.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n+\t* dwarf2out.c (gen_subprogram_die): Likewise.\n+\t* function.c (allocate_struct_function): Likewise.\n+\t* c-aux-info.c (gen_formal_list_for_func_dec): Likewise.\n+\t(deserves_ellipsis): Delete.\n+\n 2010-08-09  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-copy.c (cached_last_copy_of): Remove."}, {"sha": "3b9ca5a195ca28f1499416d4e06d75de63521bed", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -11526,9 +11526,7 @@ fold_builtin_next_arg (tree exp, bool va_start_p)\n   int nargs = call_expr_nargs (exp);\n   tree arg;\n \n-  if (TYPE_ARG_TYPES (fntype) == 0\n-      || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t  == void_type_node))\n+  if (!stdarg_p (fntype))\n     {\n       error (\"%<va_start%> used in function with fixed args\");\n       return true;"}, {"sha": "8ec6a13da10e6d1bb2dc56a52016cf7d19ed684a", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -42,7 +42,6 @@ static const char *data_type;\n \n static char *affix_data_type (const char *) ATTRIBUTE_MALLOC;\n static const char *gen_formal_list_for_type (tree, formals_style);\n-static int   deserves_ellipsis (tree);\n static const char *gen_formal_list_for_func_def (tree, formals_style);\n static const char *gen_type (const char *, tree, formals_style);\n static const char *gen_decl (tree, int, formals_style);\n@@ -183,28 +182,6 @@ gen_formal_list_for_type (tree fntype, formals_style style)\n   return concat (\" (\", formal_list, \")\", NULL);\n }\n \n-/* For the generation of an ANSI prototype for a function definition, we have\n-   to look at the formal parameter list of the function's own \"type\" to\n-   determine if the function's formal parameter list should end with an\n-   ellipsis.  Given a tree node, the following function will return nonzero\n-   if the \"function type\" parameter list should end with an ellipsis.  */\n-\n-static int\n-deserves_ellipsis (tree fntype)\n-{\n-  tree formal_type;\n-\n-  formal_type = TYPE_ARG_TYPES (fntype);\n-  while (formal_type && TREE_VALUE (formal_type) != void_type_node)\n-    formal_type = TREE_CHAIN (formal_type);\n-\n-  /* If there were at least some parameters, and if the formals-types-list\n-     petered out to a NULL (i.e. without being terminated by a void_type_node)\n-     then we need to tack on an ellipsis.  */\n-\n-  return (!formal_type && TYPE_ARG_TYPES (fntype));\n-}\n-\n /* Generate a parameter list for a function definition (in some given style).\n \n    Note that this routine has to be separate (and different) from the code that\n@@ -248,7 +225,7 @@ gen_formal_list_for_func_def (tree fndecl, formals_style style)\n     {\n       if (!DECL_ARGUMENTS (fndecl))\n \tformal_list = concat (formal_list, \"void\", NULL);\n-      if (deserves_ellipsis (TREE_TYPE (fndecl)))\n+      if (stdarg_p (TREE_TYPE (fndecl)))\n \tformal_list = concat (formal_list, \", ...\", NULL);\n     }\n   if ((style == ansi) || (style == k_and_r_names))"}, {"sha": "d0ea6e1c043bf74790c541444785aa0bf950e32a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -3717,9 +3717,7 @@ arm_get_pcs_model (const_tree type, const_tree decl)\n       /* Detect varargs functions.  These always use the base rules\n \t (no argument is ever a candidate for a co-processor\n \t register).  */\n-      bool base_rules = (TYPE_ARG_TYPES (type) != 0\n-\t\t\t && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (type)))\n-\t\t\t     != void_type_node));\n+      bool base_rules = stdarg_p (type);\n       \n       if (user_convention)\n \t{"}, {"sha": "e8d6fa3bc373f6137bc650c44d7560851c155580", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -1530,14 +1530,8 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype, rtx libname,\n {\n   cum->nregs = 18;\n   cum->regno = FIRST_CUM_REG;\n-  if (!libname && fntype)\n-    {\n-      int stdarg = (TYPE_ARG_TYPES (fntype) != 0\n-                    && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-                        != void_type_node));\n-      if (stdarg)\n-        cum->nregs = 0;\n-    }\n+  if (!libname && stdarg_p (fntype))\n+    cum->nregs = 0;\n }\n \n /* Returns the number of registers to allocate for a function argument.  */"}, {"sha": "b152d1a25291f7c35720b8f77cd90dbee1bd9276", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -1996,9 +1996,7 @@ iq2000_expand_prologue (void)\n   /* If this function is a varargs function, store any registers that\n      would normally hold arguments ($4 - $7) on the stack.  */\n   if (store_args_on_stack\n-      && ((TYPE_ARG_TYPES (fntype) != 0\n-\t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t       != void_type_node))\n+      && (stdarg_p (fntype)\n \t  || last_arg_is_vararg_marker))\n     {\n       int offset = (regno - GP_ARG_FIRST) * UNITS_PER_WORD;"}, {"sha": "e601693a520e3a0e7d086b9d3a9986289c3e222b", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -656,14 +656,10 @@ lm32_setup_incoming_varargs (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n {\n   int first_anon_arg;\n   tree fntype;\n-  int stdarg_p;\n \n   fntype = TREE_TYPE (current_function_decl);\n-  stdarg_p = (TYPE_ARG_TYPES (fntype) != 0\n-\t      && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t\t  != void_type_node));\n \n-  if (stdarg_p)\n+  if (stdarg_p (fntype))\n     first_anon_arg = *cum + LM32_FIRST_ARG_REG;\n   else\n     {"}, {"sha": "d9032468ada72d1c866b093c6e3c207e13741fbd", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -6540,9 +6540,7 @@ m68k_return_pops_args (tree fundecl, tree funtype, int size)\n   return ((TARGET_RTD\n \t   && (!fundecl\n \t       || TREE_CODE (fundecl) != IDENTIFIER_NODE)\n-\t   && (TYPE_ARG_TYPES (funtype) == 0\n-\t       || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (funtype)))\n-\t\t   == void_type_node)))\n+\t   && (!stdarg_p (funtype)))\n \t  ? size : 0);\n }\n "}, {"sha": "b55ca37c00c92e89ef546b20404811a7f19ea244", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -1493,9 +1493,7 @@ mn10300_builtin_saveregs (void)\n {\n   rtx offset, mem;\n   tree fntype = TREE_TYPE (current_function_decl);\n-  int argadj = ((!(TYPE_ARG_TYPES (fntype) != 0\n-                   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-                       != void_type_node)))\n+  int argadj = ((!stdarg_p (fntype))\n                 ? UNITS_PER_WORD : 0);\n   alias_set_type set = get_varargs_alias_set ();\n "}, {"sha": "6593e531dfad2c6d04117a364b0d08d3d76cf1a1", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -5944,9 +5944,7 @@ hppa_builtin_saveregs (void)\n {\n   rtx offset, dest;\n   tree fntype = TREE_TYPE (current_function_decl);\n-  int argadj = ((!(TYPE_ARG_TYPES (fntype) != 0\n-\t\t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t\t       != void_type_node)))\n+  int argadj = ((!stdarg_p (fntype))\n \t\t? UNITS_PER_WORD : 0);\n \n   if (argadj)"}, {"sha": "53dddb797b23e35369d8c2bd40c94ea9cd03889d", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -157,9 +157,7 @@ do {\t\t\t\t\t\t\t\t\\\n \t\t   }\t\t\t\t\t\t\t\\\n \t       }\t\t\t\t\t\t\t\\\n \t     /* anonymous args */\t\t\t\t\t\\\n-\t     if (TYPE_ARG_TYPES (tree_type) != 0\t\t\t\\\n-\t\t && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (tree_type)))\\\n-\t\t     != void_type_node))\t\t\t\t\\\n+\t     if (stdarg_p (tree_type))\t\t\t\t\t\\\n \t       {\t\t\t\t\t\t\t\\\n \t\t for (; i < 4; i++)\t\t\t\t\t\\\n \t\t   fprintf (FILE, \",ARGW%d=GR\", i);\t\t\t\\"}, {"sha": "2621af9107f578b0295febc17fc6ae234ede7b26", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -7369,10 +7369,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n   cum->call_cookie = ((DEFAULT_ABI == ABI_V4 && libcall)\n \t\t      ? CALL_LIBCALL : CALL_NORMAL);\n   cum->sysv_gregno = GP_ARG_MIN_REG;\n-  cum->stdarg = fntype\n-    && (TYPE_ARG_TYPES (fntype) != 0\n-\t&& (TREE_VALUE (tree_last  (TYPE_ARG_TYPES (fntype)))\n-\t    != void_type_node));\n+  cum->stdarg = stdarg_p (fntype);\n \n   cum->nargs_prototype = 0;\n   if (incoming || cum->prototype)"}, {"sha": "3f508852e61093e8acc815cbf2dc7355812e5393", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -1,3 +1,7 @@\n+2010-08-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.c (varargs_function_p): Use stdarg_p.\n+\n 2010-08-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* parser.c (cp_default_arg_entry): Declare.  Declare a VEC of it."}, {"sha": "af5a82f80ccfee4abb7029377693559d67151f39", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -2284,11 +2284,7 @@ error_type (tree arg)\n int\n varargs_function_p (const_tree function)\n {\n-  const_tree parm = TYPE_ARG_TYPES (TREE_TYPE (function));\n-  for (; parm; parm = TREE_CHAIN (parm))\n-    if (TREE_VALUE (parm) == void_type_node)\n-      return 0;\n-  return 1;\n+  return stdarg_p (TREE_TYPE (function));\n }\n \n /* Returns 1 if decl is a member of a class.  */"}, {"sha": "0f3bea860be6885c86a273e15e3878322e297020", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -18927,7 +18927,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       if (fn_arg_types != NULL)\n \t{\n \t  /* This is the prototyped case, check for....  */\n-\t  if (TREE_VALUE (tree_last (fn_arg_types)) != void_type_node)\n+\t  if (stdarg_p (TREE_TYPE (decl)))\n \t    gen_unspecified_parameters_die (decl, subr_die);\n \t}\n       else if (DECL_INITIAL (decl) == NULL_TREE)"}, {"sha": "5a4dc10bab13a204287e481221fa8230029a79c3", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38958e826ab3971068e7f0605966da9dbd461f2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f38958e826ab3971068e7f0605966da9dbd461f2", "patch": "@@ -4293,11 +4293,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n \t  cfun->returns_struct = 1;\n \t}\n \n-      cfun->stdarg\n-\t= (fntype\n-\t   && TYPE_ARG_TYPES (fntype) != 0\n-\t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n-\t       != void_type_node));\n+      cfun->stdarg = stdarg_p (fntype);\n \n       /* Assume all registers in stdarg functions need to be saved.  */\n       cfun->va_list_gpr_size = VA_LIST_MAX_GPR_SIZE;"}]}