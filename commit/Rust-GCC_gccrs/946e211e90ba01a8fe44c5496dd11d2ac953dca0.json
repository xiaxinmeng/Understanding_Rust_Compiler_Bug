{"sha": "946e211e90ba01a8fe44c5496dd11d2ac953dca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ2ZTIxMWU5MGJhMDFhOGZlNDRjNTQ5NmRkMTFkMmFjOTUzZGNhMA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T19:36:41Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T19:36:41Z"}, "message": "[ARM/AArch64 Testsuite]Add test of vcvt{,_high}_i{f32_f16,f16_f32}\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvt_f16.c: New.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_neon_fp16_hw): New.\n\nFrom-SVN: r227555", "tree": {"sha": "5d5385cdfd190494ed59c9290ea636b702ea05ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d5385cdfd190494ed59c9290ea636b702ea05ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/946e211e90ba01a8fe44c5496dd11d2ac953dca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946e211e90ba01a8fe44c5496dd11d2ac953dca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946e211e90ba01a8fe44c5496dd11d2ac953dca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946e211e90ba01a8fe44c5496dd11d2ac953dca0/comments", "author": null, "committer": null, "parents": [{"sha": "1fa754dc7b2672b011c955e51fd9986d95a56742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa754dc7b2672b011c955e51fd9986d95a56742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa754dc7b2672b011c955e51fd9986d95a56742"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "ceeeb5d5f9a74c1535c3861fa70b550c8b279b49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946e211e90ba01a8fe44c5496dd11d2ac953dca0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946e211e90ba01a8fe44c5496dd11d2ac953dca0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=946e211e90ba01a8fe44c5496dd11d2ac953dca0", "patch": "@@ -1,3 +1,9 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvt_f16.c: New.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_neon_fp16_hw): New.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp:"}, {"sha": "48e50e182634b8964fcd9ecf4cdca89d71f19496", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvt_f16.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946e211e90ba01a8fe44c5496dd11d2ac953dca0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946e211e90ba01a8fe44c5496dd11d2ac953dca0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_f16.c?ref=946e211e90ba01a8fe44c5496dd11d2ac953dca0", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-require-effective-target arm_neon_fp16_hw { target { arm*-*-* } } } */\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results for vcvt.  */\n+VECT_VAR_DECL (expected,hfloat,32,4) [] = { 0x41800000, 0x41700000,\n+\t\t\t\t\t    0x41600000, 0x41500000 };\n+VECT_VAR_DECL (expected,hfloat,16,4) [] = { 0x3e00, 0x4100, 0x4300, 0x4480 };\n+\n+/* Expected results for vcvt_high_f32_f16.  */\n+VECT_VAR_DECL (expected_high,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n+\t\t\t\t\t\t 0xc1200000, 0xc1100000 };\n+/* Expected results for vcvt_high_f16_f32.  */\n+VECT_VAR_DECL (expected_high,hfloat,16,8) [] = { 0x4000, 0x4000, 0x4000, 0x4000,\n+\t\t\t\t\t\t 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n+\n+void\n+exec_vcvt (void)\n+{\n+  clean_results ();\n+\n+#define TEST_MSG vcvt_f32_f16\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 16, 4) [] = { 16.0, 15.0, 14.0, 13.0 };\n+\n+    DECL_VARIABLE (vector_src, float, 16, 4);\n+\n+    VLOAD (vector_src, buffer_src, , float, f, 16, 4);\n+    DECL_VARIABLE (vector_res, float, 32, 4) =\n+\tvcvt_f32_f16 (VECT_VAR (vector_src, float, 16, 4));\n+    vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t       VECT_VAR (vector_res, float, 32, 4));\n+\n+    CHECK_FP (TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n+  }\n+#undef TEST_MSG\n+\n+  clean_results ();\n+\n+#define TEST_MSG vcvt_f16_f32\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 32, 4) [] = { 1.5, 2.5, 3.5, 4.5 };\n+    DECL_VARIABLE (vector_src, float, 32, 4);\n+\n+    VLOAD (vector_src, buffer_src, q, float, f, 32, 4);\n+    DECL_VARIABLE (vector_res, float, 16, 4) =\n+      vcvt_f16_f32 (VECT_VAR (vector_src, float, 32, 4));\n+    vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t      VECT_VAR (vector_res, float, 16 ,4));\n+\n+    CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  }\n+#undef TEST_MSG\n+\n+#if defined (__aarch64__)\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvt_high_f32_f16\"\n+  {\n+    DECL_VARIABLE (vector_src, float, 16, 8);\n+    VLOAD (vector_src, buffer, q, float, f, 16, 8);\n+    DECL_VARIABLE (vector_res, float, 32, 4);\n+    VECT_VAR (vector_res, float, 32, 4) =\n+      vcvt_high_f32_f16 (VECT_VAR (vector_src, float, 16, 8));\n+    vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t       VECT_VAR (vector_res, float, 32, 4));\n+    CHECK_FP (TEST_MSG, float, 32, 4, PRIx32, expected_high, \"\");\n+  }\n+#undef TEST_MSG\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvt_high_f16_f32\"\n+  {\n+    DECL_VARIABLE (vector_low, float, 16, 4);\n+    VDUP (vector_low, , float, f, 16, 4, 2.0);\n+\n+    DECL_VARIABLE (vector_src, float, 32, 4);\n+    VLOAD (vector_src, buffer, q, float, f, 32, 4);\n+\n+    DECL_VARIABLE (vector_res, float, 16, 8) =\n+      vcvt_high_f16_f32 (VECT_VAR (vector_low, float, 16, 4),\n+\t\t\t VECT_VAR (vector_src, float, 32, 4));\n+    vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t       VECT_VAR (vector_res, float, 16, 8));\n+\n+    CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_high, \"\");\n+  }\n+#endif\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vcvt ();\n+  return 0;\n+}"}, {"sha": "a465eb153c2fa1bc348beb14cf4ab08a22494103", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/946e211e90ba01a8fe44c5496dd11d2ac953dca0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/946e211e90ba01a8fe44c5496dd11d2ac953dca0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=946e211e90ba01a8fe44c5496dd11d2ac953dca0", "patch": "@@ -2807,6 +2807,21 @@ proc check_effective_target_arm_neon_fp16_ok { } {\n \t\tcheck_effective_target_arm_neon_fp16_ok_nocache]\n }\n \n+proc check_effective_target_arm_neon_fp16_hw { } {\n+    if {! [check_effective_target_arm_neon_fp16_ok] } {\n+\treturn 0\n+    }\n+    global et_arm_neon_fp16_flags\n+    check_runtime_nocache arm_neon_fp16_hw {\n+\tint\n+\tmain (int argc, char **argv)\n+\t{\n+\t  asm (\"vcvt.f32.f16 q1, d0\");\n+\t  return 0;\n+\t}\n+    } $et_arm_neon_fp16_flags\n+}\n+\n proc add_options_for_arm_neon_fp16 { flags } {\n     if { ! [check_effective_target_arm_neon_fp16_ok] } {\n \treturn \"$flags\""}]}