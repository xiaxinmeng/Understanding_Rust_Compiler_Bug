{"sha": "a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkMjljOGNmZWIxNGIzZTlkZmYxY2RlMDQ0M2JiOGI4MDczOTI0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:14:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:14:15Z"}, "message": "mips.c (TARGET_ASM_TRAMPOLINE_TEMPLATE, [...]): New.\n\n        * config/mips/mips.c (TARGET_ASM_TRAMPOLINE_TEMPLATE,\n        mips_asm_trampoline_template, TARGET_TRAMPOLINE_INIT,\n        mips_trampoline_init): New.\n        * config/mips/mips.h (TRAMPOLINE_TEMPLATE): Move code to\n        mips_asm_trampoline_template.\n        (INITIALIZE_TRAMPOLINE): Move code to mips_trampoline_init;\n        update for hook parameters.\n\nFrom-SVN: r152001", "tree": {"sha": "21cf7193de5eb45d79168a7e89df86d5972788cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21cf7193de5eb45d79168a7e89df86d5972788cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/comments", "author": null, "committer": null, "parents": [{"sha": "87138d8d59f45e4d537f081fedbe5ad19948b9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87138d8d59f45e4d537f081fedbe5ad19948b9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87138d8d59f45e4d537f081fedbe5ad19948b9b4"}], "stats": {"total": 133, "additions": 74, "deletions": 59}, "files": [{"sha": "f0a2c75d1779b214081c70c2b21861894ea91b8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "patch": "@@ -155,6 +155,14 @@\n \tupdate for hook parameters.\n \t* config/mep/mep-protos.h (mep_init_trampoline): Remove.\n \n+\t* config/mips/mips.c (TARGET_ASM_TRAMPOLINE_TEMPLATE,\n+\tmips_asm_trampoline_template, TARGET_TRAMPOLINE_INIT,\n+\tmips_trampoline_init): New.\n+\t* config/mips/mips.h (TRAMPOLINE_TEMPLATE): Move code to\n+\tmips_asm_trampoline_template.\n+\t(INITIALIZE_TRAMPOLINE): Move code to mips_trampoline_init;\n+\tupdate for hook parameters.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "4c83ea505a0ee78dce33732aa8408139e2f0e622", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "patch": "@@ -15873,6 +15873,66 @@ mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n   if (mips_need_noat_wrapper_p (insn, opvec, noperands))\n     mips_pop_asm_switch (&mips_noat);\n }\n+\f\n+/* Implement TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n+\n+static void\n+mips_asm_trampoline_template (FILE *f)\n+{\n+  if (ptr_mode == DImode)\n+    fprintf (f, \"\\t.word\\t0x03e0082d\\t\\t# dmove   $1,$31\\n\");\n+  else\n+    fprintf (f, \"\\t.word\\t0x03e00821\\t\\t# move   $1,$31\\n\");\n+  fprintf (f, \"\\t.word\\t0x04110001\\t\\t# bgezal $0,.+8\\n\");\n+  fprintf (f, \"\\t.word\\t0x00000000\\t\\t# nop\\n\");\n+  if (ptr_mode == DImode)\n+    {\n+      fprintf (f, \"\\t.word\\t0xdff90014\\t\\t# ld     $25,20($31)\\n\");\n+      fprintf (f, \"\\t.word\\t0xdfef001c\\t\\t# ld     $15,28($31)\\n\");\n+    }\n+  else\n+    {\n+      fprintf (f, \"\\t.word\\t0x8ff90010\\t\\t# lw     $25,16($31)\\n\");\n+      fprintf (f, \"\\t.word\\t0x8fef0014\\t\\t# lw     $15,20($31)\\n\");\n+    }\n+  fprintf (f, \"\\t.word\\t0x03200008\\t\\t# jr     $25\\n\");\n+  if (ptr_mode == DImode)\n+    {\n+      fprintf (f, \"\\t.word\\t0x0020f82d\\t\\t# dmove   $31,$1\\n\");\n+      fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <padding>\\n\");\n+      fprintf (f, \"\\t.dword\\t0x00000000\\t\\t# <function address>\\n\");\n+      fprintf (f, \"\\t.dword\\t0x00000000\\t\\t# <static chain value>\\n\");\n+    }\n+  else\n+    {\n+      fprintf (f, \"\\t.word\\t0x0020f821\\t\\t# move   $31,$1\\n\");\n+      fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <function address>\\n\");\n+      fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <static chain value>\\n\");\n+    }\n+}\n+\n+/* Implement TARGET_TRAMPOLINE_INIT.  */\n+\n+static void\n+mips_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem, addr, end_addr;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+\n+  mem = adjust_address (m_tramp, ptr_mode, ptr_mode == DImode ? 32 : 28);\n+  mips_emit_move (mem, force_reg (ptr_mode, fnaddr));\n+  mem = adjust_address (mem, ptr_mode, GET_MODE_SIZE (ptr_mode));\n+  mips_emit_move (mem, force_reg (ptr_mode, chain_value));\n+\n+  addr = force_reg (ptr_mode, XEXP (m_tramp, 0));\n+  end_addr = gen_reg_rtx (ptr_mode);\n+  emit_insn (gen_add3_insn (end_addr, addr, GEN_INT (TRAMPOLINE_SIZE)));\n+  emit_insn (gen_clear_cache (addr, end_addr));\n+}\n+\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -16054,6 +16114,11 @@ mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx insn,\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE mips_can_eliminate\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE mips_asm_trampoline_template\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT mips_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-mips.h\""}, {"sha": "934e0fafa906c2e6b4082970ab2dede06039f8bf", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d29c8cfeb14b3e9dff1cde0443bb8b80739245/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a1d29c8cfeb14b3e9dff1cde0443bb8b80739245", "patch": "@@ -2433,45 +2433,6 @@ typedef struct mips_args {\n #define EXIT_IGNORE_STACK 1\n \n \f\n-/* A C statement to output, on the stream FILE, assembler code for a\n-   block of data that contains the constant parts of a trampoline.\n-   This code should not include a label--the label is taken care of\n-   automatically.  */\n-\n-#define TRAMPOLINE_TEMPLATE(STREAM)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (ptr_mode == DImode)\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.word\\t0x03e0082d\\t\\t# dmove   $1,$31\\n\");\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.word\\t0x03e00821\\t\\t# move   $1,$31\\n\");\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x04110001\\t\\t# bgezal $0,.+8\\n\");\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# nop\\n\");\t\t\t\\\n-  if (ptr_mode == DImode)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.word\\t0xdff90014\\t\\t# ld     $25,20($31)\\n\"); \\\n-      fprintf (STREAM, \"\\t.word\\t0xdfef001c\\t\\t# ld     $15,28($31)\\n\"); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x8ff90010\\t\\t# lw     $25,16($31)\\n\"); \\\n-      fprintf (STREAM, \"\\t.word\\t0x8fef0014\\t\\t# lw     $15,20($31)\\n\"); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x03200008\\t\\t# jr     $25\\n\");\t\t\\\n-  if (ptr_mode == DImode)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x0020f82d\\t\\t# dmove   $31,$1\\n\");\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# <padding>\\n\");\t\t\\\n-      fprintf (STREAM, \"\\t.dword\\t0x00000000\\t\\t# <function address>\\n\"); \\\n-      fprintf (STREAM, \"\\t.dword\\t0x00000000\\t\\t# <static chain value>\\n\"); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x0020f821\\t\\t# move   $31,$1\\n\");\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# <function address>\\n\"); \\\n-      fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# <static chain value>\\n\"); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* A C expression for the size in bytes of the trampoline, as an\n    integer.  */\n \n@@ -2481,7 +2442,7 @@ typedef struct mips_args {\n \n #define TRAMPOLINE_ALIGNMENT GET_MODE_BITSIZE (ptr_mode)\n \n-/* INITIALIZE_TRAMPOLINE calls this library function to flush\n+/* mips_trampoline_init calls this library function to flush\n    program and data caches.  */\n \n #ifndef CACHE_FLUSH_FUNC\n@@ -2495,25 +2456,6 @@ typedef struct mips_args {\n \t\t     LCT_NORMAL, VOIDmode, 3, ADDR, Pmode, SIZE, Pmode,\t\\\n \t\t     GEN_INT (3), TYPE_MODE (integer_type_node))\n \n-/* A C statement to initialize the variable parts of a trampoline.\n-   ADDR is an RTX for the address of the trampoline; FNADDR is an\n-   RTX for the address of the nested function; STATIC_CHAIN is an\n-   RTX for the static chain value that should be passed to the\n-   function when it is called.  */\n-\n-#define INITIALIZE_TRAMPOLINE(ADDR, FUNC, CHAIN)\t\t\t    \\\n-{\t\t\t\t\t\t\t\t\t    \\\n-  rtx func_addr, chain_addr, end_addr;                                      \\\n-\t\t\t\t\t\t\t\t\t    \\\n-  func_addr = plus_constant (ADDR, ptr_mode == DImode ? 32 : 28);\t    \\\n-  chain_addr = plus_constant (func_addr, GET_MODE_SIZE (ptr_mode));\t    \\\n-  mips_emit_move (gen_rtx_MEM (ptr_mode, func_addr), FUNC);\t\t    \\\n-  mips_emit_move (gen_rtx_MEM (ptr_mode, chain_addr), CHAIN);\t\t    \\\n-  end_addr = gen_reg_rtx (Pmode);\t\t\t\t\t    \\\n-  emit_insn (gen_add3_insn (end_addr, copy_rtx (ADDR),\t\t\t    \\\n-                            GEN_INT (TRAMPOLINE_SIZE)));\t\t    \\\n-  emit_insn (gen_clear_cache (copy_rtx (ADDR), end_addr));\t\t    \\\n-}\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}]}