{"sha": "b491c59fb554a78b2590b1ffec31c40b5432fa86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5MWM1OWZiNTU0YTc4YjI1OTBiMWZmZWMzMWM0MGI1NDMyZmE4Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-01T20:43:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-01T20:43:13Z"}, "message": "PR c++/86946 - ICE with function call in template argument.\n\nDR 1321 clarified that two dependent names are equivalent if the names are\nthe same, even if the result of name lookup is different.  We need to\nimplement that in hashing like we already do in comparison and mangling.\n\n\t* pt.c (iterative_hash_template_arg) [CALL_EXPR]: Use\n\tdependent_name.\n\nFrom-SVN: r270068", "tree": {"sha": "fbf10307f4956d69917d55440d98f67aa43b33c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbf10307f4956d69917d55440d98f67aa43b33c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b491c59fb554a78b2590b1ffec31c40b5432fa86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b491c59fb554a78b2590b1ffec31c40b5432fa86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b491c59fb554a78b2590b1ffec31c40b5432fa86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b491c59fb554a78b2590b1ffec31c40b5432fa86/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b33ef29fffa01c710fcd09d594efa204d457d59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33ef29fffa01c710fcd09d594efa204d457d59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33ef29fffa01c710fcd09d594efa204d457d59f"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "38f3e92a0ef4e2732e634738c6b130e1f86c4d22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b491c59fb554a78b2590b1ffec31c40b5432fa86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b491c59fb554a78b2590b1ffec31c40b5432fa86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b491c59fb554a78b2590b1ffec31c40b5432fa86", "patch": "@@ -1,3 +1,10 @@\n+2019-04-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86946 - ICE with function call in template argument.\n+\tDR 1321\n+\t* pt.c (iterative_hash_template_arg) [CALL_EXPR]: Use\n+\tdependent_name.\n+\n 2019-04-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/62207"}, {"sha": "c72004a74e346add044646a04800e55e96a24b73", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b491c59fb554a78b2590b1ffec31c40b5432fa86/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b491c59fb554a78b2590b1ffec31c40b5432fa86/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b491c59fb554a78b2590b1ffec31c40b5432fa86", "patch": "@@ -1862,6 +1862,23 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n       /* Now hash operands as usual.  */\n       break;\n \n+    case CALL_EXPR:\n+      {\n+\ttree fn = CALL_EXPR_FN (arg);\n+\tif (tree name = dependent_name (fn))\n+\t  {\n+\t    if (TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n+\t      val = iterative_hash_template_arg (TREE_OPERAND (fn, 1), val);\n+\t    fn = name;\n+\t  }\n+\tval = iterative_hash_template_arg (fn, val);\n+\tcall_expr_arg_iterator ai;\n+\tfor (tree x = first_call_expr_arg (arg, &ai); x;\n+\t     x = next_call_expr_arg (&ai))\n+\t  val = iterative_hash_template_arg (x, val);\n+\treturn val;\n+      }\n+\n     default:\n       break;\n     }"}, {"sha": "833ae6fc85c515853deaf2730c7ac7780c089673", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmp-equiv1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b491c59fb554a78b2590b1ffec31c40b5432fa86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmp-equiv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b491c59fb554a78b2590b1ffec31c40b5432fa86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmp-equiv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmp-equiv1.C?ref=b491c59fb554a78b2590b1ffec31c40b5432fa86", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/86946, DR 1321\n+// { dg-do compile { target c++11 } }\n+\n+int d(int, int);\n+template <long> class e {};\n+template <unsigned long f, unsigned b, typename> e<sizeof(d(f, b))> d();\n+template <unsigned long f, unsigned b, typename> e<d(f, b)> d();\n+\n+template <class T, class U> constexpr T d2(T, U) { return 42; }\n+template <unsigned long f, unsigned b, typename> e<d2(f, b)> d2();\n+template <unsigned long f, unsigned b, typename> e<d2(f, b)> d2();\n+\n+template <typename a, typename c> a d3(a, c);\n+template <unsigned long f, unsigned b, typename> e<sizeof(d3(f, b))> d3();\n+template <unsigned long f, unsigned b, typename> e<sizeof(d3(f, b))> d3();\n+\n+\n+int main()\n+{\n+  d<1,2,int>();\n+  d2<1,2,int>();\n+  d3<1,2,int>();\n+}"}]}