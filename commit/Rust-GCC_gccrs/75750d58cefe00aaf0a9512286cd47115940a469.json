{"sha": "75750d58cefe00aaf0a9512286cd47115940a469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3NTBkNThjZWZlMDBhYWYwYTk1MTIyODZjZDQ3MTE1OTQwYTQ2OQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-23T14:12:02Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-26T13:13:35Z"}, "message": "Lowering Cast Expressions from AST to HIR.\n\nThis allows for type resolution for TypeCasts.", "tree": {"sha": "27d871952012610216a098bb28a4075ae289cbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d871952012610216a098bb28a4075ae289cbbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75750d58cefe00aaf0a9512286cd47115940a469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75750d58cefe00aaf0a9512286cd47115940a469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75750d58cefe00aaf0a9512286cd47115940a469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75750d58cefe00aaf0a9512286cd47115940a469/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf96284dd5049614474be5ab5a144ab387d2f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf96284dd5049614474be5ab5a144ab387d2f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf96284dd5049614474be5ab5a144ab387d2f6c"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "742cb1d317086c0b50a1f00fa8107e5103d0c75f", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=75750d58cefe00aaf0a9512286cd47115940a469", "patch": "@@ -295,6 +295,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::GenericArgsBinding lower_binding (AST::GenericArgsBinding &binding);\n \n   HIR::SelfParam lower_self (AST::SelfParam &self);\n+\n+  HIR::Type *lower_type_no_bounds (AST::TypeNoBounds *type);\n };\n \n } // namespace HIR"}, {"sha": "1c486513a5803cf2897b50daa17ff3a1cdb28daa", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=75750d58cefe00aaf0a9512286cd47115940a469", "patch": "@@ -410,6 +410,25 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t       expr.get_locus ());\n   }\n \n+  void visit (AST::TypeCastExpr &expr) override\n+  {\n+    HIR::Expr *expr_to_cast_to\n+      = ASTLoweringExpr::translate (expr.get_casted_expr ().get ());\n+    HIR::Type *type_to_cast_to\n+      = lower_type_no_bounds (expr.get_type_to_cast_to ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TypeCastExpr (mapping,\n+\t\t\t       std::unique_ptr<HIR::Expr> (expr_to_cast_to),\n+\t\t\t       std::unique_ptr<HIR::Type> (type_to_cast_to),\n+\t\t\t       expr.get_locus ());\n+  }\n+\n   /* Compound assignment expression is compiled away. */\n   void visit (AST::CompoundAssignmentExpr &expr) override\n   {"}, {"sha": "04587ed66863bf023d277ecf52147c53771a843b", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=75750d58cefe00aaf0a9512286cd47115940a469", "patch": "@@ -21,6 +21,7 @@\n #include \"rust-ast-lower-implitem.h\"\n #include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-block.h\"\n+#include \"rust-ast-lower-type.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -394,5 +395,13 @@ ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n     segment.get_locus ());\n }\n \n+// rust-ast-lower-base\n+\n+HIR::Type *\n+ASTLoweringBase::lower_type_no_bounds (AST::TypeNoBounds *type)\n+{\n+  return ASTLoweringType::translate (type);\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "65c40d60bdfe52bda2605ed54d7051cc94a79250", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75750d58cefe00aaf0a9512286cd47115940a469/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=75750d58cefe00aaf0a9512286cd47115940a469", "patch": "@@ -538,7 +538,7 @@ class LazyBooleanExpr : public OperatorExpr\n // Binary infix \"as\" chir expression.\n class TypeCastExpr : public OperatorExpr\n {\n-  std::unique_ptr<TypeNoBounds> type_to_convert_to;\n+  std::unique_ptr<Type> type_to_convert_to;\n \n   // Note: only certain type casts allowed, outlined in reference\n public:\n@@ -547,7 +547,7 @@ class TypeCastExpr : public OperatorExpr\n   // Constructor requires calling protected constructor of OperatorExpr\n   TypeCastExpr (Analysis::NodeMapping mappings,\n \t\tstd::unique_ptr<Expr> expr_to_cast,\n-\t\tstd::unique_ptr<TypeNoBounds> type_to_cast_to, Location locus)\n+\t\tstd::unique_ptr<Type> type_to_cast_to, Location locus)\n     : OperatorExpr (std::move (mappings), std::move (expr_to_cast),\n \t\t    AST::AttrVec (), locus),\n       type_to_convert_to (std::move (type_to_cast_to))\n@@ -557,15 +557,15 @@ class TypeCastExpr : public OperatorExpr\n   // Copy constructor also requires calling protected constructor\n   TypeCastExpr (TypeCastExpr const &other)\n     : OperatorExpr (other),\n-      type_to_convert_to (other.type_to_convert_to->clone_type_no_bounds ())\n+      type_to_convert_to (other.type_to_convert_to->clone_type ())\n   {}\n \n   // Overload assignment operator to deep copy\n   TypeCastExpr &operator= (TypeCastExpr const &other)\n   {\n     OperatorExpr::operator= (other);\n     // main_or_left_expr = other.main_or_left_expr->clone_expr();\n-    type_to_convert_to = other.type_to_convert_to->clone_type_no_bounds ();\n+    type_to_convert_to = other.type_to_convert_to->clone_type ();\n \n     return *this;\n   }\n@@ -576,6 +576,18 @@ class TypeCastExpr : public OperatorExpr\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_casted_expr ()\n+  {\n+    rust_assert (main_or_left_expr != nullptr);\n+    return main_or_left_expr;\n+  }\n+\n+  std::unique_ptr<Type> &get_type_to_convert_to ()\n+  {\n+    rust_assert (type_to_convert_to != nullptr);\n+    return type_to_convert_to;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}