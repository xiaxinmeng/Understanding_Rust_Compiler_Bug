{"sha": "6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "node_id": "C_kwDOANBUbNoAKDY4MzJjOTVjMGUxYTU4YmE0ZDM0MmVjMDAyMDAwZjlkOWQ3ZGI1Y2E", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-05T17:52:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-05T17:52:59Z"}, "message": "analyzer: fix ICEs seen with call summaries on PR 107060\n\nThis doesn't fix the various false positives seen with\n-fanalyzer-call-summaries on PR 107060, but stops it crashing at -O2.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107060\n\t* call-summary.cc\n\t(call_summary_replay::convert_svalue_from_summary_1): Handle NULL\n\tresults from convert_svalue_from_summary in SK_UNARY_OP and\n\tSK_BIN_OP.\n\t* engine.cc (impl_region_model_context::on_unknown_change): Bail\n\tout on svalues that can't have associated state.\n\t* region-model-impl-calls.cc\n\t(region_model::impl_call_analyzer_get_unknown_ptr): New.\n\t* region-model.cc (region_model::on_stmt_pre): Handle\n\t\"__analyzer_get_unknown_ptr\".\n\t* region-model.h\n\t(region_model::impl_call_analyzer_get_unknown_ptr): New decl.\n\t* store.cc (store::replay_call_summary_cluster): Avoid trying to\n\tcreate binding clusters for base regions that shouldn't have them.\n\ngcc/ChangeLog:\n\tPR analyzer/107060\n\t* doc/analyzer.texi (__analyzer_get_unknown_ptr): Document.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107060\n\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_get_unknown_ptr):\n\tNew decl.\n\t* gcc.dg/analyzer/call-summaries-2.c\n\t(test_summarized_writes_param_to_ptr_unknown): New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "951995c50245f1af2f47c9685bcc870a4673d533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/951995c50245f1af2f47c9685bcc870a4673d533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a228438919d846995bf2c839c9b657442224b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a228438919d846995bf2c839c9b657442224b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a228438919d846995bf2c839c9b657442224b2"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "33916547e1efe5ff55fa05bd95ba1c8087e234d6", "filename": "gcc/analyzer/call-summary.cc", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fcall-summary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fcall-summary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-summary.cc?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -298,23 +298,33 @@ call_summary_replay::convert_svalue_from_summary_1 (const svalue *summary_sval)\n       {\n \tconst unaryop_svalue *unaryop_summary_sval\n \t  = as_a <const unaryop_svalue *> (summary_sval);\n+\tconst svalue *summary_arg = unaryop_summary_sval->get_arg ();\n+\tconst svalue *caller_arg = convert_svalue_from_summary (summary_arg);\n+\tif (!caller_arg)\n+\t  return NULL;\n \tregion_model_manager *mgr = get_manager ();\n-\treturn mgr->get_or_create_unaryop\n-\t  (summary_sval->get_type (),\n-\t   unaryop_summary_sval->get_op (),\n-\t   convert_svalue_from_summary (unaryop_summary_sval->get_arg ()));\n+\treturn mgr->get_or_create_unaryop (summary_sval->get_type (),\n+\t\t\t\t\t   unaryop_summary_sval->get_op (),\n+\t\t\t\t\t   caller_arg);\n       }\n       break;\n     case SK_BINOP:\n       {\n \tconst binop_svalue *binop_summary_sval\n \t  = as_a <const binop_svalue *> (summary_sval);\n+\tconst svalue *summary_arg0 = binop_summary_sval->get_arg0 ();\n+\tconst svalue *caller_arg0 = convert_svalue_from_summary (summary_arg0);\n+\tif (!caller_arg0)\n+\t  return NULL;\n+\tconst svalue *summary_arg1 = binop_summary_sval->get_arg1 ();\n+\tconst svalue *caller_arg1 = convert_svalue_from_summary (summary_arg1);\n+\tif (!caller_arg1)\n+\t  return NULL;\n \tregion_model_manager *mgr = get_manager ();\n-\treturn mgr->get_or_create_binop\n-\t  (summary_sval->get_type (),\n-\t   binop_summary_sval->get_op (),\n-\t   convert_svalue_from_summary (binop_summary_sval->get_arg0 ()),\n-\t   convert_svalue_from_summary (binop_summary_sval->get_arg1 ()));\n+\treturn mgr->get_or_create_binop (summary_sval->get_type (),\n+\t\t\t\t\t binop_summary_sval->get_op (),\n+\t\t\t\t\t caller_arg0,\n+\t\t\t\t\t caller_arg1);\n       }\n       break;\n     case SK_SUB:"}, {"sha": "faef0bd15b01f1b059bdd36efe876617dcf3265e", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -172,6 +172,8 @@ void\n impl_region_model_context::on_unknown_change (const svalue *sval,\n \t\t\t\t\t      bool is_mutable)\n {\n+  if (!sval->can_have_associated_state_p ())\n+    return;\n   for (sm_state_map *smap : m_new_state->m_checker_states)\n     smap->on_unknown_change (sval, is_mutable, m_ext_state);\n }"}, {"sha": "5cc590716b4fcdf01e2e6f96ac208ebf6b814be8", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -374,6 +374,16 @@ region_model::impl_call_analyzer_eval (const gcall *call,\n   warning_at (call->location, 0, \"%s\", t.as_string ());\n }\n \n+/* Handle the on_call_pre part of \"__analyzer_get_unknown_ptr\".  */\n+\n+void\n+region_model::impl_call_analyzer_get_unknown_ptr (const call_details &cd)\n+{\n+  const svalue *ptr_sval\n+    = m_mgr->get_or_create_unknown_svalue (cd.get_lhs_type ());\n+  cd.maybe_set_lhs (ptr_sval);\n+}\n+\n /* Handle the on_call_pre part of \"__builtin_expect\" etc.  */\n \n void"}, {"sha": "aa3d2054131f709c1eef4d0bac6fe5c0539cc2b9", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -1256,6 +1256,12 @@ region_model::on_stmt_pre (const gimple *stmt,\n \t  {\n \t    /* This is handled elsewhere.  */\n \t  }\n+\telse if (is_special_named_call_p (call, \"__analyzer_get_unknown_ptr\",\n+\t\t\t\t\t  0))\n+\t  {\n+\t    call_details cd (call, this, ctxt);\n+\t    impl_call_analyzer_get_unknown_ptr (cd);\n+\t  }\n \telse\n \t  *out_unknown_side_effects = on_call_pre (call, ctxt,\n \t\t\t\t\t\t   out_terminate_path);"}, {"sha": "e81595e8bc4f84e343f988afd60a60716b8cac94", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -344,6 +344,7 @@ class region_model\n   void impl_call_analyzer_dump_escaped (const gcall *call);\n   void impl_call_analyzer_eval (const gcall *call,\n \t\t\t\tregion_model_context *ctxt);\n+  void impl_call_analyzer_get_unknown_ptr (const call_details &cd);\n   void impl_call_builtin_expect (const call_details &cd);\n   void impl_call_calloc (const call_details &cd);\n   bool impl_call_error (const call_details &cd, unsigned min_args,"}, {"sha": "1ca12142e47169396b3813a491a0c83ae9a0f3fb", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -3176,12 +3176,16 @@ store::replay_call_summary_cluster (call_summary_replay &r,\n \t= r.convert_region_from_summary (summary_base_reg))\n       {\n \tconst region *caller_base_reg = caller_reg->get_base_region ();\n-\tbinding_cluster *caller_cluster\n-\t  = get_or_create_cluster (caller_base_reg);\n-\tif (summary_cluster->escaped_p ())\n-\t  caller_cluster->mark_as_escaped ();\n-\tif (summary_cluster->touched_p ())\n-\t  caller_cluster->m_touched = true;\n+\tif (caller_base_reg->tracked_p ()\n+\t    && !caller_base_reg->symbolic_for_unknown_ptr_p ())\n+\t  {\n+\t    binding_cluster *caller_cluster\n+\t      = get_or_create_cluster (caller_base_reg);\n+\t    if (summary_cluster->escaped_p ())\n+\t      caller_cluster->mark_as_escaped ();\n+\t    if (summary_cluster->touched_p ())\n+\t      caller_cluster->m_touched = true;\n+\t  }\n       }\n \n   switch (summary_base_reg->get_kind ())"}, {"sha": "ec49f951435d4a3b6fc3cf37e58b6042748d43ca", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -544,6 +544,10 @@ __analyzer_eval (expr);\n will emit a warning with text \"TRUE\", FALSE\" or \"UNKNOWN\" based on the\n truthfulness of the argument.  This is useful for writing DejaGnu tests.\n \n+@smallexample\n+__analyzer_get_unknown_ptr ();\n+@end smallexample\n+will obtain an unknown @code{void *}.\n \n @subsection Other Debugging Techniques\n "}, {"sha": "4478d740b58cc48795c014b5473e996b74eea8ab", "filename": "gcc/testsuite/gcc.dg/analyzer/analyzer-decls.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fanalyzer-decls.h?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -47,4 +47,7 @@ extern void __analyzer_dump_state (const char *name, ...);\n    truthfulness of the argument.  */\n extern void __analyzer_eval (int);\n \n+/* Obtain an \"unknown\" void *.  */\n+extern void *__analyzer_get_unknown_ptr (void);\n+\n #endif /* #ifndef ANALYZER_DECLS_H.  */"}, {"sha": "85cece72b3440c30db0ad952fce401ce4ca53e04", "filename": "gcc/testsuite/gcc.dg/analyzer/call-summaries-2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6832c95c0e1a58ba4d342ec002000f9d9d7db5ca/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c?ref=6832c95c0e1a58ba4d342ec002000f9d9d7db5ca", "patch": "@@ -72,6 +72,13 @@ void test_summarized_writes_param_to_ptr (int j)\n   __analyzer_eval (y == j); /* { dg-warning \"TRUE\" } */\n }\n \n+void test_summarized_writes_param_to_ptr_unknown (int j)\n+{\n+  int *p = (int *)__analyzer_get_unknown_ptr ();\n+  writes_param_to_ptr (j, p);\n+  __analyzer_eval (*p == j); /* { dg-warning \"UNKNOWN\" } */\n+}\n+\n int g;\n \n void writes_to_global (int i)"}]}