{"sha": "7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3NGZlNjNhNWI2YWJmZDlhOTY3OTNhMWUyYzQ4ZGUyMjA2MWJmMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-09-05T14:46:39Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-09-05T14:46:39Z"}, "message": "s390.c (s390_expand_plus_operand): Do not require double-word scratch register.\n\n\t* config/s390/s390.c (s390_expand_plus_operand): Do not require\n\tdouble-word scratch register.\n\tconfig/s390/s390.md (\"reload_indi\", \"reload_insi\"): Adapt.\n\n\t(\"*tmqi_ext\", \"*tmdi_mem\", \"*tmsi_mem\", \"*tmhi_mem\", \"*tmqi_mem\",\n\t\"*cli\"): Replace s_operand by memory_operand.\n\t(\"cmpstrdi\", \"cmpstrsi\"): Replace s_operand by general_operand.\n\nFrom-SVN: r56843", "tree": {"sha": "9c62f5de4d4461315e2a099682f7176430a0d5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c62f5de4d4461315e2a099682f7176430a0d5f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/comments", "author": null, "committer": null, "parents": [{"sha": "b139fcfd92b72e68b12bead6d3486fb737b47193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b139fcfd92b72e68b12bead6d3486fb737b47193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b139fcfd92b72e68b12bead6d3486fb737b47193"}], "stats": {"total": 120, "additions": 51, "deletions": 69}, "files": [{"sha": "55109dbc815c04942668f7552d2655f639752ebf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "patch": "@@ -1,3 +1,13 @@\n+2002-09-05  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_plus_operand): Do not require\n+\tdouble-word scratch register.\n+\tconfig/s390/s390.md (\"reload_indi\", \"reload_insi\"): Adapt.\n+\n+\t(\"*tmqi_ext\", \"*tmdi_mem\", \"*tmsi_mem\", \"*tmhi_mem\", \"*tmqi_mem\", \n+\t\"*cli\"): Replace s_operand by memory_operand.\n+\t(\"cmpstrdi\", \"cmpstrsi\"): Replace s_operand by general_operand.\n+\n 2002-09-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c (asm_file_start): Add a missing"}, {"sha": "d390d0a502569662c0f62d9f514d43a349712394", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 29, "deletions": 57, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "patch": "@@ -1365,23 +1365,14 @@ s390_plus_operand (op, mode)\n    SCRATCH may be used as scratch register.  */\n \n void\n-s390_expand_plus_operand (target, src, scratch_in)\n+s390_expand_plus_operand (target, src, scratch)\n      register rtx target;\n      register rtx src;\n-     register rtx scratch_in;\n+     register rtx scratch;\n {\n-  rtx sum1, sum2, scratch;\n+  rtx sum1, sum2;\n   struct s390_address ad;\n \n-  /* ??? reload apparently does not ensure that the scratch register\n-     and the target do not overlap.  We absolutely require this to be\n-     the case, however.  Therefore the reload_in[sd]i patterns ask for\n-     a double-sized scratch register, and if one part happens to be\n-     equal to the target, we use the other one.  */\n-  scratch = gen_rtx_REG (Pmode, REGNO (scratch_in));\n-  if (rtx_equal_p (scratch, target))\n-    scratch = gen_rtx_REG (Pmode, REGNO (scratch_in) + 1);\n-\n   /* src must be a PLUS; get its two operands.  */\n   if (GET_CODE (src) != PLUS || GET_MODE (src) != Pmode)\n     abort ();\n@@ -1391,61 +1382,42 @@ s390_expand_plus_operand (target, src, scratch_in)\n      float registers occur in an address.  */\n   sum1 = find_replacement (&XEXP (src, 0));\n   sum2 = find_replacement (&XEXP (src, 1));\n-\n-  /* Accept already strictly valid addresses.  */\n   src = gen_rtx_PLUS (Pmode, sum1, sum2);\n-  if (s390_decompose_address (src, &ad)\n-      && (!ad.base || REG_OK_FOR_BASE_STRICT_P (ad.base))\n-      && (!ad.indx || REG_OK_FOR_INDEX_STRICT_P (ad.indx)))\n-    {\n-      src = legitimize_la_operand (src);\n-      emit_insn (gen_rtx_SET (VOIDmode, target, src));\n-      return;\n-    }\n \n-  /* If one of the two operands is equal to the target,\n-     make it the first one.  If one is a constant, make\n-     it the second one.  */\n-  if (rtx_equal_p (target, sum2)\n-      || GET_CODE (sum1) == CONST_INT)\n+  /* If the address is already strictly valid, there's nothing to do.  */\n+  if (!s390_decompose_address (src, &ad)\n+      || (ad.base && !REG_OK_FOR_BASE_STRICT_P (ad.base))\n+      || (ad.indx && !REG_OK_FOR_INDEX_STRICT_P (ad.indx)))\n     {\n-      rtx tem = sum2;\n-      sum2 = sum1;\n-      sum1 = tem;\n-    }\n+      /* Otherwise, one of the operands cannot be an address register;\n+         we reload its value into the scratch register.  */\n+      if (true_regnum (sum1) < 1 || true_regnum (sum1) > 15)\n+\t{\n+\t  emit_move_insn (scratch, sum1);\n+\t  sum1 = scratch;\n+\t}\n+      if (true_regnum (sum2) < 1 || true_regnum (sum2) > 15)\n+\t{\n+\t  emit_move_insn (scratch, sum2);\n+\t  sum2 = scratch;\n+\t}\n \n-  /* If the first operand is not an address register,\n-     we reload it into the target.  */\n-  if (true_regnum (sum1) < 1 || true_regnum (sum1) > 15)\n-    {\n-      emit_move_insn (target, sum1);\n-      sum1 = target;\n-    }\n+      /* According to the way these invalid addresses are generated\n+         in reload.c, it should never happen (at least on s390) that\n+         *neither* of the PLUS components, after find_replacements\n+         was applied, is an address register.  */\n+      if (sum1 == scratch && sum2 == scratch)\n+\t{\n+\t  debug_rtx (src);\n+\t  abort ();\n+\t}\n \n-  /* Likewise for the second operand.  However, take\n-     care not to clobber the target if we already used\n-     it for the first operand.  Use the scratch instead.\n-     Also, allow an immediate offset if it is in range.  */\n-  if ((true_regnum (sum2) < 1 || true_regnum (sum2) > 15)\n-      && !(GET_CODE (sum2) == CONST_INT\n-           && INTVAL (sum2) >= 0 && INTVAL (sum2) < 4096))\n-    {\n-      if (!rtx_equal_p (target, sum1))\n-        {\n-          emit_move_insn (target, sum2);\n-          sum2 = target;\n-        }\n-      else\n-        {\n-          emit_move_insn (scratch, sum2);\n-          sum2 = scratch;\n-        }\n+      src = gen_rtx_PLUS (Pmode, sum1, sum2);\n     }\n \n   /* Emit the LOAD ADDRESS pattern.  Note that reload of PLUS\n      is only ever performed on addresses, so we can mark the\n      sum as legitimate for LA in any case.  */\n-  src = gen_rtx_PLUS (Pmode, sum1, sum2);\n   src = legitimize_la_operand (src);\n   emit_insn (gen_rtx_SET (VOIDmode, target, src));\n }"}, {"sha": "3e106d7912bac8f6fdf94b477568bef2d10183e3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7974fe63a5b6abfd9a96793a1e2c48de22061bf3/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=7974fe63a5b6abfd9a96793a1e2c48de22061bf3", "patch": "@@ -278,7 +278,7 @@\n \n (define_insn \"*tmqi_ext\"\n   [(set (reg 33)\n-        (compare (zero_extract:SI (match_operand:QI 0 \"s_operand\" \"Q\")\n+        (compare (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"Q\")\n \t                          (match_operand:SI 1 \"const_int_operand\" \"n\")\n                                   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n                  (const_int 0)))]\n@@ -345,7 +345,7 @@\n \n (define_insn \"*tmdi_mem\"\n   [(set (reg 33)\n-        (compare (and:DI (match_operand:DI 0 \"s_operand\" \"%Q\")\n+        (compare (and:DI (match_operand:DI 0 \"memory_operand\" \"%Q\")\n                          (match_operand:DI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:DI 2 \"immediate_operand\" \"n\")))]\n   \"TARGET_64BIT\n@@ -365,7 +365,7 @@\n \n (define_insn \"*tmsi_mem\"\n   [(set (reg 33)\n-        (compare (and:SI (match_operand:SI 0 \"s_operand\" \"%Q\")\n+        (compare (and:SI (match_operand:SI 0 \"memory_operand\" \"%Q\")\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n@@ -384,7 +384,7 @@\n \n (define_insn \"*tmhi_mem\"\n   [(set (reg 33)\n-        (compare (and:SI (subreg:SI (match_operand:HI 0 \"s_operand\" \"%Q\") 0)\n+        (compare (and:SI (subreg:SI (match_operand:HI 0 \"memory_operand\" \"%Q\") 0)\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\n@@ -403,7 +403,7 @@\n \n (define_insn \"*tmqi_mem\"\n   [(set (reg 33)\n-        (compare (and:SI (subreg:SI (match_operand:QI 0 \"s_operand\" \"%Q\") 0)\n+        (compare (and:SI (subreg:SI (match_operand:QI 0 \"memory_operand\" \"%Q\") 0)\n                          (match_operand:SI 1 \"immediate_operand\" \"n\"))\n                  (match_operand:SI 2 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, s390_tm_ccmode (operands[1], operands[2], 0))\"\n@@ -645,7 +645,7 @@\n \n (define_insn \"*cli\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"s_operand\" \"Q\")\n+        (compare (match_operand:QI 0 \"memory_operand\" \"Q\")\n                  (match_operand:QI 1 \"immediate_operand\" \"n\")))]\n   \"s390_match_ccmode (insn, CCUmode)\"\n   \"cli\\\\t%0,%b1\"\n@@ -1947,8 +1947,8 @@\n \n (define_expand \"cmpstrdi\"\n    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-         (compare:DI (match_operand:BLK 1 \"s_operand\" \"\")\n-                  (match_operand:BLK 2 \"s_operand\" \"\") ) )\n+         (compare:DI (match_operand:BLK 1 \"general_operand\" \"\")\n+                  (match_operand:BLK 2 \"general_operand\" \"\") ) )\n              (use (match_operand:DI 3  \"general_operand\" \"\"))\n              (use (match_operand:DI 4  \"\" \"\"))]\n    \"TARGET_64BIT\"\n@@ -2008,8 +2008,8 @@\n \n (define_expand \"cmpstrsi\"\n    [(set (match_operand:SI 0 \"register_operand\" \"\")\n-         (compare:SI (match_operand:BLK 1 \"s_operand\" \"\")\n-                  (match_operand:BLK 2 \"s_operand\" \"\") ) )\n+         (compare:SI (match_operand:BLK 1 \"general_operand\" \"\")\n+                  (match_operand:BLK 2 \"general_operand\" \"\") ) )\n              (use (match_operand:SI 3  \"general_operand\" \"\"))\n              (use (match_operand:SI 4  \"\" \"\"))]\n    \"\"\n@@ -3187,7 +3187,7 @@\n (define_expand \"reload_indi\"\n   [(parallel [(match_operand:DI 0 \"register_operand\" \"=a\")\n               (match_operand:DI 1 \"s390_plus_operand\" \"\")\n-              (match_operand:TI 2 \"register_operand\" \"=&a\")])]\n+              (match_operand:DI 2 \"register_operand\" \"=&a\")])]\n   \"TARGET_64BIT\"\n   \"\n {\n@@ -3348,7 +3348,7 @@\n (define_expand \"reload_insi\"\n   [(parallel [(match_operand:SI 0 \"register_operand\" \"=a\")\n               (match_operand:SI 1 \"s390_plus_operand\" \"\")\n-              (match_operand:DI 2 \"register_operand\" \"=&a\")])]\n+              (match_operand:SI 2 \"register_operand\" \"=&a\")])]\n   \"!TARGET_64BIT\"\n   \"\n {"}]}