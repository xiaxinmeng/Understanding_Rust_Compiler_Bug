{"sha": "bd11644e628be788a82889f3bbdb6864be52433a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxMTY0NGU2MjhiZTc4OGE4Mjg4OWYzYmJkYjY4NjRiZTUyNDMzYQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-01T10:49:31Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-01T10:49:31Z"}, "message": "[AArch64] Rewrite vca<ge, gt, le, lt> Neon patterns in C.\n\ngcc/\n\t* config/aarch64/arm_neon.h\n\t(vac<ge, gt><sd>_f<32, 64>): Rename to...\n\t(vca<ge, gt><sd>_f<32, 64>): ...this, reimpliment in C.\n\t(vca<ge, gt, lt, le><q>_f<32, 64>): Reimpliment in C.\n\nFrom-SVN: r198495", "tree": {"sha": "060eec7da7eb743ff667bfdc3972235a74eab7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/060eec7da7eb743ff667bfdc3972235a74eab7e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd11644e628be788a82889f3bbdb6864be52433a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd11644e628be788a82889f3bbdb6864be52433a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd11644e628be788a82889f3bbdb6864be52433a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd11644e628be788a82889f3bbdb6864be52433a/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75dd5aceb27fb1f07bfacff3aa5968b273cc13eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75dd5aceb27fb1f07bfacff3aa5968b273cc13eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75dd5aceb27fb1f07bfacff3aa5968b273cc13eb"}], "stats": {"total": 287, "additions": 111, "deletions": 176}, "files": [{"sha": "190194482f981eff52ffe34235d154ae1104fd4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd11644e628be788a82889f3bbdb6864be52433a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd11644e628be788a82889f3bbdb6864be52433a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd11644e628be788a82889f3bbdb6864be52433a", "patch": "@@ -1,3 +1,10 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h\n+\t(vac<ge, gt><sd>_f<32, 64>): Rename to...\n+\t(vca<ge, gt><sd>_f<32, 64>): ...this, reimpliment in C.\n+\t(vca<ge, gt, lt, le><q>_f<32, 64>): Reimpliment in C.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_fac<optab><mode>): New."}, {"sha": "5f1ab115c523ca1729cb52e27f4b508365540523", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 104, "deletions": 176, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd11644e628be788a82889f3bbdb6864be52433a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd11644e628be788a82889f3bbdb6864be52433a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bd11644e628be788a82889f3bbdb6864be52433a", "patch": "@@ -4545,50 +4545,6 @@ vabsq_s64 (int64x2_t a)\n   return result;\n }\n \n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vacged_f64 (float64_t a, float64_t b)\n-{\n-  float64_t result;\n-  __asm__ (\"facge %d0,%d1,%d2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vacges_f32 (float32_t a, float32_t b)\n-{\n-  float32_t result;\n-  __asm__ (\"facge %s0,%s1,%s2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vacgtd_f64 (float64_t a, float64_t b)\n-{\n-  float64_t result;\n-  __asm__ (\"facgt %d0,%d1,%d2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vacgts_f32 (float32_t a, float32_t b)\n-{\n-  float32_t result;\n-  __asm__ (\"facgt %s0,%s1,%s2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vaddlv_s8 (int8x8_t a)\n {\n@@ -5062,138 +5018,6 @@ vbslq_u64 (uint64x2_t a, uint64x2_t b, uint64x2_t c)\n   return result;\n }\n \n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vcage_f32 (float32x2_t a, float32x2_t b)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"facge %0.2s, %1.2s, %2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vcageq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  uint32x4_t result;\n-  __asm__ (\"facge %0.4s, %1.4s, %2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vcageq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  uint64x2_t result;\n-  __asm__ (\"facge %0.2d, %1.2d, %2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vcagt_f32 (float32x2_t a, float32x2_t b)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"facgt %0.2s, %1.2s, %2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vcagtq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  uint32x4_t result;\n-  __asm__ (\"facgt %0.4s, %1.4s, %2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vcagtq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  uint64x2_t result;\n-  __asm__ (\"facgt %0.2d, %1.2d, %2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vcale_f32 (float32x2_t a, float32x2_t b)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"facge %0.2s, %2.2s, %1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vcaleq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  uint32x4_t result;\n-  __asm__ (\"facge %0.4s, %2.4s, %1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vcaleq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  uint64x2_t result;\n-  __asm__ (\"facge %0.2d, %2.2d, %1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vcalt_f32 (float32x2_t a, float32x2_t b)\n-{\n-  uint32x2_t result;\n-  __asm__ (\"facgt %0.2s, %2.2s, %1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vcaltq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  uint32x4_t result;\n-  __asm__ (\"facgt %0.4s, %2.4s, %1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n-vcaltq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  uint64x2_t result;\n-  __asm__ (\"facgt %0.2d, %2.2d, %1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vcls_s8 (int8x8_t a)\n {\n@@ -18584,6 +18408,110 @@ vaddvq_f64 (float64x2_t __a)\n   return vgetq_lane_f64 (t, 0);\n }\n \n+/* vcage  */\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcages_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_fabsf (__a) >= __builtin_fabsf (__b) ? -1 : 0;\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vcage_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return vabs_f32 (__a) >= vabs_f32 (__b);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vcageq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return vabsq_f32 (__a) >= vabsq_f32 (__b);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcaged_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_fabs (__a) >= __builtin_fabs (__b) ? -1 : 0;\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vcageq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return vabsq_f64 (__a) >= vabsq_f64 (__b);\n+}\n+\n+/* vcagt  */\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcagts_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_fabsf (__a) > __builtin_fabsf (__b) ? -1 : 0;\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vcagt_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return vabs_f32 (__a) > vabs_f32 (__b);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vcagtq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return vabsq_f32 (__a) > vabsq_f32 (__b);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcagtd_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_fabs (__a) > __builtin_fabs (__b) ? -1 : 0;\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vcagtq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return vabsq_f64 (__a) > vabsq_f64 (__b);\n+}\n+\n+/* vcale  */\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vcale_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return vabs_f32 (__a) <= vabs_f32 (__b);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vcaleq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return vabsq_f32 (__a) <= vabsq_f32 (__b);\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vcaleq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return vabsq_f64 (__a) <= vabsq_f64 (__b);\n+}\n+\n+/* vcalt  */\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vcalt_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return vabs_f32 (__a) < vabs_f32 (__b);\n+}\n+\n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vcaltq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return vabsq_f32 (__a) < vabsq_f32 (__b);\n+}\n+\n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vcaltq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return vabsq_f64 (__a) < vabsq_f64 (__b);\n+}\n+\n /* vceq - vector.  */\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))"}]}