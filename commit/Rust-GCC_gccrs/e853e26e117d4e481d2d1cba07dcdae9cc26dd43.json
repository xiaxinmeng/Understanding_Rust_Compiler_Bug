{"sha": "e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg1M2UyNmUxMTdkNGU0ODFkMmQxY2JhMDdkY2RhZTljYzI2ZGQ0Mw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-09-21T00:09:48Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-09-21T00:09:48Z"}, "message": "jvmti.cc (_Jv_JVMTI_CreateRawMonitor): Use _Jv_MallocUnchked and return JVMTI_ERROR_OUT_OF_MEMORY if necessary.\n\n        * jvmti.cc (_Jv_JVMTI_CreateRawMonitor): Use _Jv_MallocUnchked\n        and return JVMTI_ERROR_OUT_OF_MEMORY if necessary.\n        (_Jv_JVMTI_GetClassMethods): Likewise.\n        (_Jv_JVMTI_GetClassLoaderClasses): Likewise.\n        (_Jv_JVMTI_GetJNIFunctionTable): Likewise.\n\nFrom-SVN: r117098", "tree": {"sha": "0f64812291b74ddd863e241f1bdd52bd58537e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f64812291b74ddd863e241f1bdd52bd58537e3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e853e26e117d4e481d2d1cba07dcdae9cc26dd43/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "209532d1af2158abc35060f61e2dd81db8a7fab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209532d1af2158abc35060f61e2dd81db8a7fab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209532d1af2158abc35060f61e2dd81db8a7fab1"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "dce88d57aa014ef5e895597e5d7d874ac67082e2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e853e26e117d4e481d2d1cba07dcdae9cc26dd43/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e853e26e117d4e481d2d1cba07dcdae9cc26dd43/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "patch": "@@ -1,3 +1,12 @@\n+2006-09-20  Keith Seitz  <keiths@redhat.com>\n+\n+\t* jvmti.cc (_Jv_JVMTI_CreateRawMonitor): Use _Jv_MallocUnchked\n+\tand return JVMTI_ERROR_OUT_OF_MEMORY if necessary.\n+\t(_Jv_JVMTI_GetClassMethods): Likewise.\n+\t(_Jv_JVMTI_GetClassLoaderClasses): Likewise.\n+\t(_Jv_JVMTI_GetJNIFunctionTable): Likewise.\n+\t(_Jv_JVMTI_GetSystemProperty): Likewise.\n+\n 2006-09-20  Keith Seitz  <keiths@redhat.com>\n \n \t* jvmti.cc (_Jv_JVMTI_GetErrorName): New function."}, {"sha": "22b76fb25ffb9aa7074cc623d60a181575d6764f", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e853e26e117d4e481d2d1cba07dcdae9cc26dd43/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e853e26e117d4e481d2d1cba07dcdae9cc26dd43/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=e853e26e117d4e481d2d1cba07dcdae9cc26dd43", "patch": "@@ -156,7 +156,9 @@ _Jv_JVMTI_CreateRawMonitor (MAYBE_UNUSED jvmtiEnv *env, const char *name,\n   REQUIRE_PHASE (env, JVMTI_PHASE_ONLOAD | JVMTI_PHASE_LIVE);\n   NULL_CHECK (name);\n   NULL_CHECK (result);\n-  *result = (jrawMonitorID) _Jv_Malloc (sizeof (_Jv_rawMonitorID));\n+  *result = (jrawMonitorID) _Jv_MallocUnchecked (sizeof (_Jv_rawMonitorID));\n+  if (*result == NULL)\n+    return JVMTI_ERROR_OUT_OF_MEMORY;\n   _Jv_MutexInit (&(*result)->mutex);\n   _Jv_CondInit (&(*result)->condition);\n   return JVMTI_ERROR_NONE;\n@@ -285,7 +287,11 @@ _Jv_JVMTI_GetClassMethods (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n   NULL_CHECK (methods_ptr);\n   *count_ptr = JvNumMethods(klass);\n \n-  *methods_ptr = (jmethodID *) _Jv_Malloc (*count_ptr * sizeof (jmethodID));\n+  *methods_ptr\n+    = (jmethodID *) _Jv_MallocUnchecked (*count_ptr * sizeof (jmethodID));\n+  if (*methods_ptr == NULL)\n+    return JVMTI_ERROR_OUT_OF_MEMORY;\n+\n   jmethodID start = JvGetFirstMethod (klass);\n   for (jint i = 0; i < *count_ptr; ++i)\n     // FIXME: correct?\n@@ -437,7 +443,11 @@ _Jv_JVMTI_GetClassLoaderClasses (MAYBE_UNUSED jvmtiEnv *env,\n   jobjectArray array = values->toArray();\n   *count_ptr = array->length;\n   jobject *elts = elements (array);\n-  jclass *result = (jclass *) _Jv_Malloc (*count_ptr * sizeof (jclass));\n+  jclass *result\n+    = (jclass *) _Jv_MallocUnchecked (*count_ptr * sizeof (jclass));\n+  if (result == NULL)\n+    return JVMTI_ERROR_OUT_OF_MEMORY;\n+\n   // FIXME: JNI references...\n   memcpy (result, elts, *count_ptr * sizeof (jclass));\n \n@@ -471,7 +481,9 @@ _Jv_JVMTI_GetJNIFunctionTable (MAYBE_UNUSED jvmtiEnv *env,\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   NULL_CHECK (function_table);\n   *function_table\n-    = (jniNativeInterface *) _Jv_Malloc (sizeof (jniNativeInterface));\n+    = (jniNativeInterface *) _Jv_MallocUnchecked (sizeof (jniNativeInterface));\n+  if (*function_table == NULL)\n+    return JVMTI_ERROR_OUT_OF_MEMORY;\n   memcpy (*function_table, &_Jv_JNIFunctions, sizeof (jniNativeInterface));\n   return JVMTI_ERROR_NONE;\n }\n@@ -525,7 +537,9 @@ _Jv_JVMTI_GetSystemProperty (MAYBE_UNUSED jvmtiEnv *env, const char *property,\n     return JVMTI_ERROR_NOT_AVAILABLE;\n \n   int len = JvGetStringUTFLength (result_str);\n-  *result = (char *) _Jv_Malloc (len + 1);\n+  *result = (char *) _Jv_MallocUnchecked (len + 1);\n+  if (*result == NULL)\n+    return JVMTI_ERROR_OUT_OF_MEMORY;\n   JvGetStringUTFRegion (result_str, 0, result_str->length(), *result);\n   (*result)[len] = '\\0';\n "}]}