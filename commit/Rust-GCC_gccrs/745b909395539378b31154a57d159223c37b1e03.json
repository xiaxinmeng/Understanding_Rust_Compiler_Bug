{"sha": "745b909395539378b31154a57d159223c37b1e03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1YjkwOTM5NTUzOTM3OGIzMTE1NGE1N2QxNTkyMjNjMzdiMWUwMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-15T15:10:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-12-15T15:10:30Z"}, "message": "jump.c (jump_optimize_1): Don't delete the line note after the prologue even if it seems redundant.\n\n        * jump.c (jump_optimize_1): Don't delete the line note after the\n        prologue even if it seems redundant.\n\n        * config/arm/arm.c (arm_expand_prologue): Set RTX_FRAME_RELATED_P\n        on all insns used to adjust the stack.\n\nFrom-SVN: r38286", "tree": {"sha": "3860b72608b161a601c21048bd63f5856dcbebb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3860b72608b161a601c21048bd63f5856dcbebb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/745b909395539378b31154a57d159223c37b1e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745b909395539378b31154a57d159223c37b1e03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745b909395539378b31154a57d159223c37b1e03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745b909395539378b31154a57d159223c37b1e03/comments", "author": null, "committer": null, "parents": [{"sha": "ad334b51696beb8fe749cca68aa082622743cebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad334b51696beb8fe749cca68aa082622743cebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad334b51696beb8fe749cca68aa082622743cebb"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "598529a4b76a2947564972db28aec4122116549c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745b909395539378b31154a57d159223c37b1e03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745b909395539378b31154a57d159223c37b1e03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=745b909395539378b31154a57d159223c37b1e03", "patch": "@@ -1,3 +1,11 @@\n+2000-12-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* jump.c (jump_optimize_1): Don't delete the line note after the\n+\tprologue even if it seems redundant.\n+\n+\t* config/arm/arm.c (arm_expand_prologue): Set RTX_FRAME_RELATED_P\n+\ton all insns used to adjust the stack.\n+\n Fri Dec 15 15:32:16 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* combine.c (cant_combine_insn_p): Get around SUBREGs when determining\n@@ -207,24 +215,24 @@ Mon Dec 11 13:51:09 2000  Jeffrey A Law  (law@cygnus.com)\n \n 2000-12-11  Neil Booth  <neilb@earthling.net>\n \n-        * cpperror.c (print_location): New function.\n-        (print_containing_files): Simplify.\n-        (_cpp_begin_message): Simplify and use print_location.\n-        * cppfiles.c (stack_include_file): Update.\n-        (_cpp_pop_file_buffer): Update.\n-        * cpphash.h (struct cpp_buffer): New members\n-        include_stack_listed and type.   \n-        * cpplib.c (_cpp_handle_directive): Buffer->inc is not null.\n-        (run_directive): Take buffer type.  cpp_push_buffer cannot fail.\n-        (_cpp_do__Pragma, cpp_define, _cpp_define_builtin, cpp_undef,\n-        handle_assertion): Update.\n-        (cpp_push_buffer): Take a buffer type and file name.\n-        (cpp_pop_buffer): Update.  Clear include_stack_listed.\n-        * cpplib.h (input_stack_listing_current): Remove.\n-        (enum cpp_buffer_type): New.\n-        (cpp_push_buffer): New prototype.\n-        * cppmacro.c (builtin_macro): Simplify; buffer cannot be null.\n-        * fix-header.c (read_scan_file): Update.\n+\t* cpperror.c (print_location): New function.\n+\t(print_containing_files): Simplify.\n+\t(_cpp_begin_message): Simplify and use print_location.\n+\t* cppfiles.c (stack_include_file): Update.\n+\t(_cpp_pop_file_buffer): Update.\n+\t* cpphash.h (struct cpp_buffer): New members\n+\tinclude_stack_listed and type.\t \n+\t* cpplib.c (_cpp_handle_directive): Buffer->inc is not null.\n+\t(run_directive): Take buffer type.  cpp_push_buffer cannot fail.\n+\t(_cpp_do__Pragma, cpp_define, _cpp_define_builtin, cpp_undef,\n+\thandle_assertion): Update.\n+\t(cpp_push_buffer): Take a buffer type and file name.\n+\t(cpp_pop_buffer): Update.  Clear include_stack_listed.\n+\t* cpplib.h (input_stack_listing_current): Remove.\n+\t(enum cpp_buffer_type): New.\n+\t(cpp_push_buffer): New prototype.\n+\t* cppmacro.c (builtin_macro): Simplify; buffer cannot be null.\n+\t* fix-header.c (read_scan_file): Update.\n \n 2000-12-10  Robert Lipe <robertlipe@usa.net>\n "}, {"sha": "ee2757c31b4e56cd0e633af991762724b6f8e41e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745b909395539378b31154a57d159223c37b1e03/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745b909395539378b31154a57d159223c37b1e03/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=745b909395539378b31154a57d159223c37b1e03", "patch": "@@ -7848,9 +7848,17 @@ arm_expand_prologue ()\n \n   if (amount != const0_rtx)\n     {\n+      /* This add can produce multiple insns for a large constant, so we\n+\t need to get tricky.  */\n+      rtx last = get_last_insn ();\n       insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t    amount));\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+      do\n+\t{\n+\t  last = last ? NEXT_INSN (last) : get_insns ();\n+\t  RTX_FRAME_RELATED_P (last) = 1;\n+\t}\n+      while (last != insn);\n \n       /* If the frame pointer is needed, emit a special barrier that\n \t will prevent the scheduler from moving stores to the frame"}, {"sha": "f4845b8e484140e218bd5b3c65118c9bd5da7561", "filename": "gcc/jump.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745b909395539378b31154a57d159223c37b1e03/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745b909395539378b31154a57d159223c37b1e03/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=745b909395539378b31154a57d159223c37b1e03", "patch": "@@ -723,18 +723,25 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n     rtx last_note = 0;\n \n     for (insn = f; insn; insn = NEXT_INSN (insn))\n-      if (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) >= 0)\n+      if (GET_CODE (insn) == NOTE)\n \t{\n-\t  /* Delete this note if it is identical to previous note.  */\n-\t  if (last_note\n-\t      && NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last_note)\n-\t      && NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last_note))\n+\t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG)\n+\t    /* Any previous line note was for the prologue; gdb wants a new\n+\t       note after the prologue even if it is for the same line.  */\n+\t    last_note = NULL_RTX;\n+\t  else if (NOTE_LINE_NUMBER (insn) >= 0)\n \t    {\n-\t      delete_insn (insn);\n-\t      continue;\n-\t    }\n+\t      /* Delete this note if it is identical to previous note.  */\n+\t      if (last_note\n+\t\t  && NOTE_SOURCE_FILE (insn) == NOTE_SOURCE_FILE (last_note)\n+\t\t  && NOTE_LINE_NUMBER (insn) == NOTE_LINE_NUMBER (last_note))\n+\t\t{\n+\t\t  delete_insn (insn);\n+\t\t  continue;\n+\t\t}\n \n-\t  last_note = insn;\n+\t      last_note = insn;\n+\t    }\n \t}\n   }\n "}]}