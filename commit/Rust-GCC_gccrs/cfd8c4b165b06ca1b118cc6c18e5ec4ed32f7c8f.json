{"sha": "cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZkOGM0YjE2NWIwNmNhMWIxMThjYzZjMThlNWVjNGVkMzJmN2M4Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-11-01T07:58:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-11-01T07:58:46Z"}, "message": "re PR target/45250 (FAIL: tr1/5_numerical_facilities/special_functions/01_assoc_laguerre/check_nan.cc)\n\n\tPR target/45250\n\t* var-tracking.c (cfa_base_rtx): Move definition earlier in the file.\n\t(cfa_base_offset): New variable.\n\t(compute_cfa_pointer): Use cfa_base_rtx and cfa_base_offset.\n\t(adjust_mems): Don't do any sp or hfp replacements if cfa_base_rtx\n\tis NULL.\n\t(vt_init_cfa_base): Initialize cfa_base_offset.\n\nFrom-SVN: r166126", "tree": {"sha": "1fee1723aa1cd9c97d6a269d4dadbd8acaf8eaa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fee1723aa1cd9c97d6a269d4dadbd8acaf8eaa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "942c9c076a9770797b164f0dd955bd98be44ff41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942c9c076a9770797b164f0dd955bd98be44ff41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942c9c076a9770797b164f0dd955bd98be44ff41"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "328ee75d25a379722d0e26cd9580410d7e545b6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f", "patch": "@@ -1,3 +1,13 @@\n+2010-11-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/45250\n+\t* var-tracking.c (cfa_base_rtx): Move definition earlier in the file.\n+\t(cfa_base_offset): New variable.\n+\t(compute_cfa_pointer): Use cfa_base_rtx and cfa_base_offset.\n+\t(adjust_mems): Don't do any sp or hfp replacements if cfa_base_rtx\n+\tis NULL.\n+\t(vt_init_cfa_base): Initialize cfa_base_offset.\n+\n 2010-11-01  Alan Modra  <amodra@gmail.com>\n \n \tPR target/46030"}, {"sha": "0dc8b15ea10a22b7bc2ebac4b43ae15cfab97b55", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=cfd8c4b165b06ca1b118cc6c18e5ec4ed32f7c8f", "patch": "@@ -408,7 +408,6 @@ static void stack_adjust_offset_pre_post (rtx, HOST_WIDE_INT *,\n static void insn_stack_adjust_offset_pre_post (rtx, HOST_WIDE_INT *,\n \t\t\t\t\t       HOST_WIDE_INT *);\n static bool vt_stack_adjustments (void);\n-static rtx compute_cfa_pointer (HOST_WIDE_INT);\n static hashval_t variable_htab_hash (const void *);\n static int variable_htab_eq (const void *, const void *);\n static void variable_htab_free (void *);\n@@ -695,22 +694,17 @@ vt_stack_adjustments (void)\n   return true;\n }\n \n+/* arg_pointer_rtx resp. frame_pointer_rtx if stack_pointer_rtx or\n+   hard_frame_pointer_rtx is being mapped to it and offset for it.  */\n+static rtx cfa_base_rtx;\n+static HOST_WIDE_INT cfa_base_offset;\n+\n /* Compute a CFA-based value for the stack pointer.  */\n \n-static rtx\n+static inline rtx\n compute_cfa_pointer (HOST_WIDE_INT adjustment)\n {\n-  rtx cfa;\n-\n-#ifdef FRAME_POINTER_CFA_OFFSET\n-  adjustment -= FRAME_POINTER_CFA_OFFSET (current_function_decl);\n-  cfa = plus_constant (frame_pointer_rtx, adjustment);\n-#else\n-  adjustment -= ARG_POINTER_CFA_OFFSET (current_function_decl);\n-  cfa = plus_constant (arg_pointer_rtx, adjustment);\n-#endif\n-\n-  return cfa;\n+  return plus_constant (cfa_base_rtx, adjustment + cfa_base_offset);\n }\n \n /* Adjustment for hard_frame_pointer_rtx to cfa base reg,\n@@ -803,11 +797,13 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       if (amd->mem_mode == VOIDmode && amd->store)\n \treturn loc;\n       if (loc == stack_pointer_rtx\n-\t  && !frame_pointer_needed)\n+\t  && !frame_pointer_needed\n+\t  && cfa_base_rtx)\n \treturn compute_cfa_pointer (amd->stack_adjust);\n       else if (loc == hard_frame_pointer_rtx\n \t       && frame_pointer_needed\n-\t       && hard_frame_pointer_adjustment != -1)\n+\t       && hard_frame_pointer_adjustment != -1\n+\t       && cfa_base_rtx)\n \treturn compute_cfa_pointer (hard_frame_pointer_adjustment);\n       return loc;\n     case MEM:\n@@ -4757,10 +4753,6 @@ var_lowpart (enum machine_mode mode, rtx loc)\n   return gen_rtx_REG_offset (loc, mode, regno, offset);\n }\n \n-/* arg_pointer_rtx resp. frame_pointer_rtx if stack_pointer_rtx or\n-   hard_frame_pointer_rtx is being mapped to it.  */\n-static rtx cfa_base_rtx;\n-\n /* Carry information about uses and stores while walking rtx.  */\n \n struct count_use_info\n@@ -8213,8 +8205,10 @@ vt_init_cfa_base (void)\n \n #ifdef FRAME_POINTER_CFA_OFFSET\n   cfa_base_rtx = frame_pointer_rtx;\n+  cfa_base_offset = -FRAME_POINTER_CFA_OFFSET (current_function_decl);\n #else\n   cfa_base_rtx = arg_pointer_rtx;\n+  cfa_base_offset = -ARG_POINTER_CFA_OFFSET (current_function_decl);\n #endif\n   if (cfa_base_rtx == hard_frame_pointer_rtx\n       || !fixed_regs[REGNO (cfa_base_rtx)])"}]}