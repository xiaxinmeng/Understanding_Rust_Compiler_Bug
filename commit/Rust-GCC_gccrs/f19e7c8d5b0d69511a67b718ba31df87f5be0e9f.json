{"sha": "f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE5ZTdjOGQ1YjBkNjk1MTFhNjdiNzE4YmEzMWRmODdmNWJlMGU5Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-27T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-27T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "fdf3ec125a7083dd5e9c8c435c07a5a17b37bd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdf3ec125a7083dd5e9c8c435c07a5a17b37bd91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/comments", "author": null, "committer": null, "parents": [{"sha": "18e7f36bf2fa3aa3aeb768345c5fe39bc6ce0f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e7f36bf2fa3aa3aeb768345c5fe39bc6ce0f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e7f36bf2fa3aa3aeb768345c5fe39bc6ce0f27"}], "stats": {"total": 587, "additions": 586, "deletions": 1}, "files": [{"sha": "3676167ad56fd38a3eefa8f0b97a3f3230717095", "filename": "gcc/ChangeLog", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1,3 +1,180 @@\n+2020-10-26  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97567\n+\t* gimple-range-gori.cc (gori_compute::logical_combine): Union the\n+\tranges of operand1 and operand2, not intersect.\n+\n+2020-10-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* attr-fnspec.h: Update toplevel comment.\n+\t(attr_fnspec::attr_fnspec): New constructor.\n+\t(attr_fnspec::arg_read_p,\n+\tattr_fnspec::arg_written_p,\n+\tattr_fnspec::arg_access_size_given_by_arg_p,\n+\tattr_fnspec::arg_single_access_p\n+\tattr_fnspec::loads_known_p\n+\tattr_fnspec::stores_known_p,\n+\tattr_fnspec::clobbers_errno_p): New member functions.\n+\t(gimple_call_fnspec): Declare.\n+\t(builtin_fnspec): Declare.\n+\t* builtins.c: Include attr-fnspec.h\n+\t(builtin_fnspec): New function.\n+\t* builtins.def (BUILT_IN_MEMCPY): Do not specify RET1 fnspec.\n+\t(BUILT_IN_MEMMOVE): Do not specify RET1 fnspec.\n+\t(BUILT_IN_MEMSET): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRCAT): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRCPY): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRNCAT): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRNCPY): Do not specify RET1 fnspec.\n+\t(BUILT_IN_MEMCPY_CHK): Do not specify RET1 fnspec.\n+\t(BUILT_IN_MEMMOVE_CHK): Do not specify RET1 fnspec.\n+\t(BUILT_IN_MEMSET_CHK): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRCAT_CHK): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRCPY_CHK): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRNCAT_CHK): Do not specify RET1 fnspec.\n+\t(BUILT_IN_STRNCPY_CHK): Do not specify RET1 fnspec.\n+\t* gimple.c (gimple_call_fnspec): Return attr_fnspec.\n+\t(gimple_call_arg_flags): Update.\n+\t(gimple_call_return_flags): Update.\n+\t* tree-ssa-alias.c (check_fnspec): New function.\n+\t(ref_maybe_used_by_call_p_1): Use fnspec for builtin handling.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\t(attr_fnspec::verify): Update verifier.\n+\t* calls.c (decl_fnspec): New function.\n+\t(decl_return_flags): Use it.\n+\n+2020-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97555\n+\t* range-op.cc (range_tests): Test 1-bit signed invert.\n+\t* value-range.cc (subtract_one): Adjust comment.\n+\t(add_one): New.\n+\t(irange::invert): Call add_one.\n+\n+2020-10-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.h (cgraph_node::optimize_for_size_p): Return\n+\toptimize_size_level.\n+\t(cgraph_node::optimize_for_size_p): Update.\n+\t* coretypes.h (enum optimize_size_level): New enum.\n+\t* predict.c (unlikely_executed_edge_p): Microoptimize.\n+\t(optimize_function_for_size_p): Return optimize_size_level.\n+\t(optimize_bb_for_size_p): Likewise.\n+\t(optimize_edge_for_size_p): Likewise.\n+\t(optimize_insn_for_size_p): Likewise.\n+\t(optimize_loop_nest_for_size_p): Likewise.\n+\t* predict.h (optimize_function_for_size_p): Update declaration.\n+\t(optimize_bb_for_size_p): Update declaration.\n+\t(optimize_edge_for_size_p): Update declaration.\n+\t(optimize_insn_for_size_p): Update declaration.\n+\t(optimize_loop_for_size_p): Update declaration.\n+\t(optimize_loop_nest_for_size_p): Update declaration.\n+\n+2020-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (enum slp_instance_kind): New.\n+\t(vect_build_slp_instance): Split out from...\n+\t(vect_analyze_slp_instance): ... this.\n+\n+2020-10-26  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (range_of_builtin_call): Initialize zerov to 0.\n+\n+2020-10-26  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97576\n+\t* cgraphclones.c (cgraph_node::materialize_clone): Clear stmt\n+\treferences.\n+\t* cgraphunit.c (mark_functions_to_output): Do not clear them here.\n+\t* ipa-inline-transform.c (inline_transform): Clear stmt references.\n+\t* symtab.c (symtab_node::clear_stmts_in_references): Make recursive\n+\tfor clones.\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Do not clear references.\n+\n+2020-10-26  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-builtins.c: Add FLAG STORE.\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor store intrinsics.\n+\n+2020-10-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/97546\n+\t* gimple-ssa-store-merging.c (find_bswap_or_nop): Return NULL if\n+\ttype is not INTEGER_CST.\n+\n+2020-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97521\n+\t* expr.c (const_scalar_mask_from_tree): Remove.\n+\t(expand_expr_real_1): Always VIEW_CONVERT integer mode\n+\tvector constants to an integer type.\n+\t* tree.c (build_truth_vector_type_for_mode): Use a single-bit\n+\tboolean component type for non-vector-mode mask_mode.\n+\n+2020-10-26  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95458\n+\t* config/i386/i386-expand.c (ix86_expand_cmpstrn_or_cmpmem):\n+\tReturn false for -mno-inline-all-stringops.\n+\n+2020-10-26  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95151\n+\t* config/i386/i386-expand.c (ix86_expand_cmpstrn_or_cmpmem): New\n+\tfunction.\n+\t* config/i386/i386-protos.h (ix86_expand_cmpstrn_or_cmpmem): New\n+\tprototype.\n+\t* config/i386/i386.md (cmpmemsi): New pattern.\n+\n+2020-10-26  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/vector.md (\"vcond_mask_<mode><mode>\"): New expander.\n+\n+2020-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* sbitmap.c (sbitmap_vector_alloc): Use size_t for byte\n+\tquantities to avoid overflow.\n+\n+2020-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97539\n+\t* tree-vect-loop-manip.c (vect_do_peeling): Reset out-of-loop\n+\tdebug uses before peeling.\n+\n+2020-10-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.h (struct cgraph_node): Make ipa_transforms_to_apply vl_ptr.\n+\t* ipa-inline-analysis.c (initialize_growth_caches): Disable insertion\n+\tand duplication hooks.\n+\t* ipa-inline-transform.c (clone_inlined_nodes): Clear\n+\tipa_transforms_to_apply.\n+\t(save_inline_function_body): Disable insertion hoook for\n+\tipa_saved_clone_sources.\n+\t* ipa-prop.c (ipcp_transformation_initialize): Disable insertion hook.\n+\t* ipa-prop.h (ipa_node_params_t): Disable insertion hook.\n+\t* ipa-reference.c (propagate): Disable insertion hoook.\n+\t* ipa-sra.c (ipa_sra_summarize_function): Move out of anonymous\n+\tnamespace.\n+\t(ipa_sra_function_summaries::insert): New virtual function.\n+\t* passes.c (execute_one_pass): Do not add transforms to inline clones.\n+\t* symbol-summary.h (function_summary_base): Make insert and duplicate\n+\thooks fail instead of silently producing empty summaries; add way to\n+\tdisable duplication hooks\n+\t(call_summary_base): Likewise.\n+\t* tree-nested.c (nested_function_info::get_create): Disable insertion\n+\thooks\n+\t(maybe_record_nested_function): Likewise.\n+\n+2020-10-26  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* cfg.c (debug_bb): New overloaded function.\n+\t(debug_bb_n): New overloaded function.\n+\t* cfg.h (debug_bb): New declaration.\n+\t(debug_bb_n): New declaration.\n+\t* print-rtl.c (debug_bb_slim): Call debug_bb with flags.\n+\n 2020-10-24  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/97451"}, {"sha": "86b2464d6bb80ddadf6b440a1b9c6f0e01247410", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1 +1 @@\n-20201026\n+20201027"}, {"sha": "0e21847345885429e8aa16bf961c494984aa764f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1,3 +1,184 @@\n+2020-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Array_Aggr_Code): If the aggregate\n+\tincludes an Others_Choice in an association that is an\n+\tIterated_Component_Association, generate a proper loop for it.\n+\n+2020-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Add missing sign in documentation.\n+\t* libgnat/s-imgrea.ads: Minor fixes in commentary.\n+\n+2020-10-26  Pat Rogers  <rogers@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Include\n+\t\"Jorvik\" in pragma Profile description.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Check_Image_Type): Remove \"|\", so the compiler\n+\twill not crash.\n+\t* errout.ads: Improve comment. This has nothing to do with\n+\t-gnatQ.\n+\n+2020-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Minor editions to documentation.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb (Causes_Contract_Freezing): Extend condition to\n+\tmatch the one in Analyze_Subprogram_Body_Helper. This routine is\n+\tused both as an assertion at the very start of\n+\tFreeze_Previous_Contracts and to detect previous declaration for\n+\twhich Freeze_Previous_Contracts has been executed.\n+\n+2020-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Move around documentaton paragraph.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Establish_Actual_Mapping_For_Inlined_Call): Add\n+\tguard for a call to Set_Last_Assignment with the same condition\n+\tas the assertion in that routine and explain why this guard\n+\tfails in GNATprove mode.\n+\n+2020-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Adjust\n+\tthe entries of 3.5.9(8) and 3.5.9(10).\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Change the range of supported Small\n+\tvalues.\n+\t(E0, E1, E2): Adjust factors.\n+\t(Exact): Return false if the Small does not fit in 64 bits.\n+\n+2020-10-26  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-socket.adb (Wait_On_Socket): Boolean parameter\n+\tFor_Read changed to Event parameter of type\n+\tGNAT.Sockets.Poll.Wait_Event_Set.  Implementation is simplified\n+\tand based on call to GNAT.Sockets.Poll.Wait now.\n+\n+2020-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-tifiio.adb: Minor editions to documentation.\n+\n+2020-10-26  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch12.adb (Restore_Private_Views): Do not lose the\n+\tinformation provided by Is_Generic_Actual_Type in GNATprove\n+\tmode.\n+\n+2020-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Unreferenced_Entity): Suppress warning\n+\ton formal parameters of all dispatching operations.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Array_Aggregate): Fix typos in\n+\terror message.\n+\n+2020-10-26  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb (Symbolic_Traceback): Always emit the hex\n+\taddress at the beginning of an entry if suppression is not\n+\trequested. Consistently output a \"???\" for the subprogram name\n+\twhen it is unknown.\n+\n+2020-10-26  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-oscons-tmplt.c (_nfds_t): Use sizeof (unsigned long int).\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): Move code for\n+\titerated_element_association to\n+\tBuild_Iterated_Element_Association.\n+\n+2020-10-26  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch12.adb (Needs_Body_Instantiated): In GNATprove mode, do\n+\tnot instantiate bodies outside of the main unit.\n+\n+2020-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Array_Aggregate): For an\n+\tassociation that is an iterated component association, attach\n+\tthe copy of the expression to the tree prior to analysis, in\n+\torder to preserve its context. This is needed when verifying\n+\tstatic semantic rules that depend on context, for example that a\n+\tuse of 'Old appears only within a postcondition.\n+\n+2020-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Document that\n+\t--no-comments-fill is now the default.\n+\n+2020-10-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Extension_Aggregate): When testing for\n+\tan aggregate that is illegal due to having an ancestor type that\n+\thas unknown discriminants, add an \"or else\" condition testing\n+\twhether the aggregate type has unknown discriminants and that\n+\tPartial_View_Has_Unknown_Discr is also set on the ancestor type.\n+\tExtend the comment, including adding ??? about a possible\n+\tsimpler test.\n+\n+2020-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-cihama.adb, libgnat/a-cohama.adb,\n+\tlibgnat/a-cohase.adb (Delete): Set Position.Position, and\n+\tassert.\n+\n+2020-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Direct_Name.Undefined): Handle known unit\n+\tnames with 3 selectors.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Delta_Or_Update): Add missing call\n+\tto Enter_Name, just like it is called for\n+\titerated_component_association in Expand_SPARK_N_Aggregate.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Delta_Or_Update): Reuse local\n+\tconstant Expr and the Choice_List routine.\n+\t(Expand_SPARK_N_Aggregate): Reuse local constant Expr.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): Fix typos in\n+\tcomments.\n+\n+2020-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch6.adb (P_Formal_Part): Ada 2020 supports scanning\n+\taspects on formal parameters.\n+\t* doc/gnat_rm/implementation_defined_aspects.rst (Aspect\n+\tUnreferenced): Update documentation.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Type_Refs): When an entity in an expression\n+\tfunction is a type, freeze the entity and not just its type,\n+\twhich would be incomplete when the type is derived and/or\n+\ttagged.\n+\n+2020-10-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Update_Attribute): Handle\n+\tsubtype_indication just like in Expand_Delta_Array_Aggregate.\n+\n 2020-10-25  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* Makefile.rtl: Add GNATRTL_128BIT_PAIRS/OBJS for 64bit"}, {"sha": "1664a70c285ebac46c1c0f854cd9dbac5b860ec3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1,3 +1,10 @@\n+2020-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* c-common.c (__is_nothrow_assignable): New.\n+\t(__is_nothrow_constructible): Likewise.\n+\t* c-common.h (RID_IS_NOTHROW_ASSIGNABLE): New.\n+\t(RID_IS_NOTHROW_CONSTRUCTIBLE): Likewise.\n+\n 2020-10-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* c-common.c (c_common_finalize_early_debug): Update for new thunk api."}, {"sha": "270325233b89604235fd072a44205d1902f502c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1,3 +1,15 @@\n+2020-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* cp-tree.h (CPTK_IS_NOTHROW_ASSIGNABLE): New.\n+\t(CPTK_IS_NOTHROW_CONSTRUCTIBLE): Likewise.\n+\t(is_nothrow_xible): Likewise.\n+\t* method.c (is_nothrow_xible): New.\n+\t(is_trivially_xible): Tweak.\n+\t* parser.c (cp_parser_primary_expression): Handle the new RID_*.\n+\t(cp_parser_trait_expr): Likewise.\n+\t* semantics.c (trait_expr_value): Handle the new RID_*.\n+\t(finish_trait_expr): Likewise.\n+\n 2020-10-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/96241"}, {"sha": "93bd09717cf077b5fea18dd5aa538eddf43529b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1,3 +1,185 @@\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/localentry-1.c: Remove -mpcrel from options.\n+\t* gcc.target/powerpc/notoc-direct-1.c: Likewise.\n+\t* gcc.target/powerpc/pr94740.c: Likewise.\n+\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/bswap64-4.c: Comment.\n+\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/pr93122.c: Replace -mcpu with -mdejagnu-cpu.\n+\t* gcc.target/powerpc/vsx_mask-count-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-expand-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-extract-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-move-runnable.c: Likewise.\n+\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/vsx-load-element-extend-char.c: Require int128.\n+\t* gcc.target/powerpc/vsx-load-element-extend-int.c: Likewise.\n+\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: Likewise.\n+\t* gcc.target/powerpc/vsx-load-element-extend-short.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: Likewise.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-count-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-expand-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-extract-runnable.c: Likewise.\n+\t* gcc.target/powerpc/vsx_mask-move-runnable.c: Likewise.\n+\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/cfuged-1.c,\n+\tgcc.target/powerpc/cntlzdm-1.c,\n+\tgcc.target/powerpc/cnttzdm-1.c,\n+\tgcc.target/powerpc/dg-future-1.c,\n+\tgcc.target/powerpc/lsbb-runnable.c,\n+\tgcc.target/powerpc/mma-double-test.c,\n+\tgcc.target/powerpc/mma-single-test.c,\n+\tgcc.target/powerpc/p10-arch31.c,\n+\tgcc.target/powerpc/p10-identify.c,\n+\tgcc.target/powerpc/pdep-1.c,\n+\tgcc.target/powerpc/pextd-1.c,\n+\tgcc.target/powerpc/pr96787-2.c,\n+\tgcc.target/powerpc/vec-blend-runnable.c,\n+\tgcc.target/powerpc/vec-cfuged-1.c,\n+\tgcc.target/powerpc/vec-clrl-1.c,\n+\tgcc.target/powerpc/vec-clrl-3.c,\n+\tgcc.target/powerpc/vec-clrr-1.c,\n+\tgcc.target/powerpc/vec-clrr-3.c,\n+\tgcc.target/powerpc/vec-cntlzm-1.c,\n+\tgcc.target/powerpc/vec-cnttzm-1.c,\n+\tgcc.target/powerpc/vec-extracth-1.c,\n+\tgcc.target/powerpc/vec-extracth-3.c,\n+\tgcc.target/powerpc/vec-extracth-5.c,\n+\tgcc.target/powerpc/vec-extracth-7.c,\n+\tgcc.target/powerpc/vec-extractl-1.c,\n+\tgcc.target/powerpc/vec-extractl-3.c,\n+\tgcc.target/powerpc/vec-extractl-5.c,\n+\tgcc.target/powerpc/vec-extractl-7.c,\n+\tgcc.target/powerpc/vec-gnb-1.c,\n+\tgcc.target/powerpc/vec-insert-word-runnable.c,\n+\tgcc.target/powerpc/vec-pdep-1.c,\n+\tgcc.target/powerpc/vec-permute-ext-runnable.c,\n+\tgcc.target/powerpc/vec-pext-1.c,\n+\tgcc.target/powerpc/vec-replace-word-runnable.c,\n+\tgcc.target/powerpc/vec-shift-double-runnable.c,\n+\tgcc.target/powerpc/vec-splati-runnable.c,\n+\tgcc.target/powerpc/vec-stril-1.c,\n+\tgcc.target/powerpc/vec-stril-16.c,\n+\tgcc.target/powerpc/vec-stril-17.c,\n+\tgcc.target/powerpc/vec-stril-18.c,\n+\tgcc.target/powerpc/vec-stril-19.c,\n+\tgcc.target/powerpc/vec-stril-20.c,\n+\tgcc.target/powerpc/vec-stril-21.c,\n+\tgcc.target/powerpc/vec-stril-22.c,\n+\tgcc.target/powerpc/vec-stril-23.c,\n+\tgcc.target/powerpc/vec-stril-3.c,\n+\tgcc.target/powerpc/vec-stril-5.c,\n+\tgcc.target/powerpc/vec-stril-7.c,\n+\tgcc.target/powerpc/vec-stril_p-1.c,\n+\tgcc.target/powerpc/vec-stril_p-3.c,\n+\tgcc.target/powerpc/vec-stril_p-5.c,\n+\tgcc.target/powerpc/vec-stril_p-7.c,\n+\tgcc.target/powerpc/vec-strir-1.c,\n+\tgcc.target/powerpc/vec-strir-16.c,\n+\tgcc.target/powerpc/vec-strir-17.c,\n+\tgcc.target/powerpc/vec-strir-18.c,\n+\tgcc.target/powerpc/vec-strir-19.c,\n+\tgcc.target/powerpc/vec-strir-20.c,\n+\tgcc.target/powerpc/vec-strir-21.c,\n+\tgcc.target/powerpc/vec-strir-22.c,\n+\tgcc.target/powerpc/vec-strir-23.c,\n+\tgcc.target/powerpc/vec-strir-3.c,\n+\tgcc.target/powerpc/vec-strir-5.c,\n+\tgcc.target/powerpc/vec-strir-7.c,\n+\tgcc.target/powerpc/vec-strir_p-1.c,\n+\tgcc.target/powerpc/vec-strir_p-3.c,\n+\tgcc.target/powerpc/vec-strir_p-5.c,\n+\tgcc.target/powerpc/vec-strir_p-7.c,\n+\tgcc.target/powerpc/vec-ternarylogic-1.c,\n+\tgcc.target/powerpc/vec-ternarylogic-3.c,\n+\tgcc.target/powerpc/vec-ternarylogic-5.c,\n+\tgcc.target/powerpc/vec-ternarylogic-7.c,\n+\tgcc.target/powerpc/vec-ternarylogic-9.c,\n+\tgcc.target/powerpc/vsx_mask-count-runnable.c,\n+\tgcc.target/powerpc/vsx_mask-expand-runnable.c,\n+\tgcc.target/powerpc/vsx_mask-extract-runnable.c,\n+\tgcc.target/powerpc/vsx_mask-move-runnable.c,\n+\tgcc.target/powerpc/xxgenpc-runnable.c: Link testcase when it\n+\tcan't be run.\n+\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/dimode_off.c: Add -mno-prefixed to options.\n+\n+2020-10-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/cprophard.c: Add -mno-pcrel to options.\n+\t* gcc.target/powerpc/float128-hw3.c: Likewise.\n+\t* gcc.target/powerpc/pr79439-1.c: Likewise.\n+\t* gcc.target/powerpc/pr79439-2.c: Likewise.\n+\t* gcc.target/powerpc/r2_shrink-wrap.c: Likewise.\n+\n+2020-10-26  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97567.c: New.\n+\n+2020-10-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97555.c: New test.\n+\n+2020-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* g++.dg/ext/is_nothrow_constructible1.C: New file.\n+\t* g++.dg/ext/is_nothrow_constructible2.C: New file.\n+\t* g++.dg/ext/is_nothrow_constructible3.C: New file.\n+\t* g++.dg/ext/is_nothrow_constructible4.C: New file.\n+\t* g++.dg/ext/is_nothrow_constructible5.C: New file.\n+\t* g++.dg/ext/is_nothrow_constructible6.C: New file.\n+\n+2020-10-26  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97576\n+\t* gcc.c-torture/compile/pr97576.c: New test.\n+\n+2020-10-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/97546\n+\t* gcc.target/aarch64/sve/acle/general/pr97546.c: New test.\n+\n+2020-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97521\n+\t* gcc.target/i386/pr97521.c: New testcase.\n+\n+2020-10-26  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95458\n+\t* gcc.target/i386/pr95458-1.c: New test.\n+\t* gcc.target/i386/pr95458-2.c: Likewise.\n+\n+2020-10-26  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95151\n+\t* gcc.target/i386/pr95151-1.c: New test.\n+\t* gcc.target/i386/pr95151-2.c: Likewise.\n+\t* gcc.target/i386/pr95151-3.c: Likewise.\n+\t* gcc.target/i386/pr95151-4.c: Likewise.\n+\n+2020-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97539\n+\t* gcc.dg/pr97539.c: New testcase.\n+\n+2020-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat.dg/warn14.adb: Update expectations.\n+\n 2020-10-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/96241"}, {"sha": "39febe67c4af6726f2b8e6c7f4a909914ea467df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f19e7c8d5b0d69511a67b718ba31df87f5be0e9f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f19e7c8d5b0d69511a67b718ba31df87f5be0e9f", "patch": "@@ -1,3 +1,29 @@\n+2020-10-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/executor (strand::_State): Fix thinko.\n+\n+2020-10-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\t* include/std/type_traits (__is_nt_constructible_impl): Remove.\n+\t(__is_nothrow_constructible_impl): Adjust.\n+\t(is_nothrow_default_constructible): Likewise.\n+\t(__is_nt_assignable_impl): Remove.\n+\t(__is_nothrow_assignable_impl): Adjust.\n+\n+2020-10-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97570\n+\t* libsupc++/new_opa.cc: Declare size_t in global namespace.\n+\tRemove unused header.\n+\n+2020-10-26  Stephan Bergmann  <sbergman@redhat.com>\n+\n+\t* include/bits/shared_ptr_base.h\n+\t(_Sp_counted_base::_M_add_ref_lock_nothrow(): Add noexcept to\n+\tdefinitions to match declaration.\n+\t(__shared_count(const __weak_count&, nothrow_t)): Add noexcept\n+\tto declaration to match definition.\n+\n 2020-10-23  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (single_view::single_view): Mark the"}]}