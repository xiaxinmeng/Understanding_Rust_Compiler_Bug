{"sha": "53cfcb2e281f62ed8ea272846cf4971f2b0df229", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjZmNiMmUyODFmNjJlZDhlYTI3Mjg0NmNmNDk3MWYyYjBkZjIyOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-14T19:40:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-14T19:40:05Z"}, "message": "re PR debug/77844 (Compilation of simple C++ example exhaust memory)\n\n\tPR debug/77844\n\t* valtrack.c: Include rtl-iter.h.\n\t(struct rtx_subst_pair): Add insn field.\n\t(propagate_for_debug_subst): If pair->to contains at least 2\n\tregs, create a DEBUG_INSN with a debug temp before pair->insn\n\tand replace from with the debug temp instead of pair->to.\n\t(propagate_for_debug): Initialize p.insn.\n\t* combine.c (insn_uid_check): New inline function.\n\t(INSN_COST, LOG_LINKS): Use it instead of INSN_UID.\n\t(find_single_use, combine_instructions,\n\tcant_combine_insn_p, try_combine): Use NONDEBUG_INSN_P instead of\n\tINSN_P.\n\n\t* g++.dg/opt/pr77844.C: New test.\n\nFrom-SVN: r243662", "tree": {"sha": "3a8f07bc391a8e8a2435cdfbce0090522f1158cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a8f07bc391a8e8a2435cdfbce0090522f1158cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cfcb2e281f62ed8ea272846cf4971f2b0df229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cfcb2e281f62ed8ea272846cf4971f2b0df229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cfcb2e281f62ed8ea272846cf4971f2b0df229", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cfcb2e281f62ed8ea272846cf4971f2b0df229/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "474da67ef9ec3658e4da9deb5373353532b2a840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474da67ef9ec3658e4da9deb5373353532b2a840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474da67ef9ec3658e4da9deb5373353532b2a840"}], "stats": {"total": 97, "additions": 89, "deletions": 8}, "files": [{"sha": "259389ee69ea48bc3db33073bf0cd73415dff741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53cfcb2e281f62ed8ea272846cf4971f2b0df229", "patch": "@@ -1,3 +1,18 @@\n+2016-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/77844\n+\t* valtrack.c: Include rtl-iter.h.\n+\t(struct rtx_subst_pair): Add insn field.\n+\t(propagate_for_debug_subst): If pair->to contains at least 2\n+\tregs, create a DEBUG_INSN with a debug temp before pair->insn\n+\tand replace from with the debug temp instead of pair->to.\n+\t(propagate_for_debug): Initialize p.insn.\n+\t* combine.c (insn_uid_check): New inline function.\n+\t(INSN_COST, LOG_LINKS): Use it instead of INSN_UID.\n+\t(find_single_use, combine_instructions,\n+\tcant_combine_insn_p, try_combine): Use NONDEBUG_INSN_P instead of\n+\tINSN_P.\n+\n 2016-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/17308"}, {"sha": "473ffc4a1321a610c8de7e77858d6badd9894b65", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=53cfcb2e281f62ed8ea272846cf4971f2b0df229", "patch": "@@ -327,8 +327,16 @@ struct insn_link {\n \n static struct insn_link **uid_log_links;\n \n-#define INSN_COST(INSN)\t\t(uid_insn_cost[INSN_UID (INSN)])\n-#define LOG_LINKS(INSN)\t\t(uid_log_links[INSN_UID (INSN)])\n+static inline int\n+insn_uid_check (const_rtx insn)\n+{\n+  int uid = INSN_UID (insn);\n+  gcc_checking_assert (uid <= max_uid_known);\n+  return uid;\n+}\n+\n+#define INSN_COST(INSN)\t\t(uid_insn_cost[insn_uid_check (INSN)])\n+#define LOG_LINKS(INSN)\t\t(uid_log_links[insn_uid_check (INSN)])\n \n #define FOR_EACH_LOG_LINK(L, INSN)\t\t\t\t\\\n   for ((L) = LOG_LINKS (INSN); (L); (L) = (L)->next)\n@@ -676,7 +684,7 @@ find_single_use (rtx dest, rtx_insn *insn, rtx_insn **ploc)\n   for (next = NEXT_INSN (insn);\n        next && BLOCK_FOR_INSN (next) == bb;\n        next = NEXT_INSN (next))\n-    if (INSN_P (next) && dead_or_set_p (next, dest))\n+    if (NONDEBUG_INSN_P (next) && dead_or_set_p (next, dest))\n       {\n \tFOR_EACH_LOG_LINK (link, next)\n \t  if (link->insn == insn && link->regno == REGNO (dest))\n@@ -1127,7 +1135,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n \n   int new_direct_jump_p = 0;\n \n-  for (first = f; first && !INSN_P (first); )\n+  for (first = f; first && !NONDEBUG_INSN_P (first); )\n     first = NEXT_INSN (first);\n   if (!first)\n     return 0;\n@@ -2275,7 +2283,7 @@ cant_combine_insn_p (rtx_insn *insn)\n   /* If this isn't really an insn, we can't do anything.\n      This can occur when flow deletes an insn that it has merged into an\n      auto-increment address.  */\n-  if (! INSN_P (insn))\n+  if (!NONDEBUG_INSN_P (insn))\n     return 1;\n \n   /* Never combine loads and stores involving hard regs that are likely\n@@ -4178,7 +4186,8 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\t    || insn != BB_HEAD (this_basic_block->next_bb));\n \t   insn = NEXT_INSN (insn))\n \t{\n-\t  if (INSN_P (insn) && reg_referenced_p (ni2dest, PATTERN (insn)))\n+\t  if (NONDEBUG_INSN_P (insn)\n+\t      && reg_referenced_p (ni2dest, PATTERN (insn)))\n \t    {\n \t      FOR_EACH_LOG_LINK (link, insn)\n \t\tif (link->insn == i3)\n@@ -4319,9 +4328,9 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t    for (temp_insn = NEXT_INSN (i2);\n \t\t temp_insn\n \t\t && (this_basic_block->next_bb == EXIT_BLOCK_PTR_FOR_FN (cfun)\n-\t\t\t  || BB_HEAD (this_basic_block) != temp_insn);\n+\t\t     || BB_HEAD (this_basic_block) != temp_insn);\n \t\t temp_insn = NEXT_INSN (temp_insn))\n-\t      if (temp_insn != i3 && INSN_P (temp_insn))\n+\t      if (temp_insn != i3 && NONDEBUG_INSN_P (temp_insn))\n \t\tFOR_EACH_LOG_LINK (link, temp_insn)\n \t\t  if (link->insn == i2)\n \t\t    link->insn = i3;"}, {"sha": "25779c50a7aa9563ae314e11e5202318079fc6d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53cfcb2e281f62ed8ea272846cf4971f2b0df229", "patch": "@@ -1,3 +1,8 @@\n+2016-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/77844\n+\t* g++.dg/opt/pr77844.C: New test.\n+\n 2016-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/17308"}, {"sha": "66eb978ddb75a7276a2f05c8b3e695b061a3e2a5", "filename": "gcc/testsuite/g++.dg/opt/pr77844.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr77844.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr77844.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr77844.C?ref=53cfcb2e281f62ed8ea272846cf4971f2b0df229", "patch": "@@ -0,0 +1,32 @@\n+// PR debug/77844\n+// { dg-do compile }\n+// { dg-options \"-O3 -g\" }\n+\n+#include <vector>\n+\n+void\n+foo (std::vector<bool>& v, int i, int j)\n+{\n+  for (int k = 0; k < 5; ++k)\n+    v[5 * i + k] = v[5 * i + k] | v[5 * j + k];\n+}\n+\n+void\n+bar (std::vector<bool>& v, int i, int j)\n+{\n+  for (int k = 0; k < 5; ++k)\n+    v[5 * i + k] = v[5 * i + k] ^ v[5 * j + k];\n+}\n+\n+void\n+baz (std::vector<bool>& v)\n+{\n+  foo (v, 4, 1);\n+  foo (v, 4, 2);\n+  foo (v, 4, 3);\n+  foo (v, 4, 4);\n+  bar (v, 4, 1);\n+  bar (v, 4, 2);\n+  bar (v, 4, 3);\n+  bar (v, 4, 4);\n+}"}, {"sha": "ae53faa81084e4892c77eb581130ef031cb88787", "filename": "gcc/valtrack.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cfcb2e281f62ed8ea272846cf4971f2b0df229/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=53cfcb2e281f62ed8ea272846cf4971f2b0df229", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"memmodel.h\"\n #include \"emit-rtl.h\"\n+#include \"rtl-iter.h\"\n \n /* gen_lowpart_no_emit hook implementation for DEBUG_INSNs.  In DEBUG_INSNs,\n    all lowpart SUBREGs are valid, despite what the machine requires for\n@@ -145,6 +146,7 @@ struct rtx_subst_pair\n {\n   rtx to;\n   bool adjusted;\n+  rtx_insn *insn;\n };\n \n /* DATA points to an rtx_subst_pair.  Return the value that should be\n@@ -162,6 +164,23 @@ propagate_for_debug_subst (rtx from, const_rtx old_rtx, void *data)\n       pair->adjusted = true;\n       pair->to = cleanup_auto_inc_dec (pair->to, VOIDmode);\n       pair->to = make_compound_operation (pair->to, SET);\n+      /* Avoid propagation from growing DEBUG_INSN expressions too much.  */\n+      int cnt = 0;\n+      subrtx_iterator::array_type array;\n+      FOR_EACH_SUBRTX (iter, array, pair->to, ALL)\n+\tif (REG_P (*iter) && ++cnt > 1)\n+\t  {\n+\t    rtx dval = make_debug_expr_from_rtl (old_rtx);\n+\t    /* Emit a debug bind insn.  */\n+\t    rtx bind\n+\t      = gen_rtx_VAR_LOCATION (GET_MODE (old_rtx),\n+\t\t\t\t      DEBUG_EXPR_TREE_DECL (dval), pair->to,\n+\t\t\t\t      VAR_INIT_STATUS_INITIALIZED);\n+\t    rtx_insn *bind_insn = emit_debug_insn_before (bind, pair->insn);\n+\t    df_insn_rescan (bind_insn);\n+\t    pair->to = dval;\n+\t    break;\n+\t  }\n       return pair->to;\n     }\n   return copy_rtx (pair->to);\n@@ -182,6 +201,7 @@ propagate_for_debug (rtx_insn *insn, rtx_insn *last, rtx dest, rtx src,\n   struct rtx_subst_pair p;\n   p.to = src;\n   p.adjusted = false;\n+  p.insn = NEXT_INSN (insn);\n \n   next = NEXT_INSN (insn);\n   last = NEXT_INSN (last);"}]}