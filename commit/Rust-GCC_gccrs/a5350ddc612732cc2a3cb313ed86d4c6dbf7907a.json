{"sha": "a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzNTBkZGM2MTI3MzJjYzJhM2NiMzEzZWQ4NmQ0YzZkYmY3OTA3YQ==", "commit": {"author": {"name": "Chris Schlumberger-Socha", "email": "chris.schlumberger-socha@arm.com", "date": "2013-05-29T13:08:16Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-05-29T13:08:16Z"}, "message": "[AArch64] Implement support for --mcmodel=tiny\n\nThis patch adds support for the tiny absolute memory model.\n\n\nCo-Authored-By: Marcus Shawcroft <marcus.shawcroft@arm.com>\n\nFrom-SVN: r199408", "tree": {"sha": "2c8527119696e5d3d8f9f9be1e6d696afa1d93c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c8527119696e5d3d8f9f9be1e6d696afa1d93c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/comments", "author": null, "committer": null, "parents": [{"sha": "17f4d4bfc102925666ffdf8b0b1567535e2daf64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f4d4bfc102925666ffdf8b0b1567535e2daf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f4d4bfc102925666ffdf8b0b1567535e2daf64"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "a57c56dd78e230931de4d46da18e5a4d20ade992", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "patch": "@@ -1,3 +1,16 @@\n+2012-05-29  Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n+\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Define\n+\tSYMBOL_TINY_ABSOLUTE.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Handle\n+\tSYMBOL_TINY_ABSOLUTE.\n+\t(aarch64_expand_mov_immediate): Likewise.\n+\t(aarch64_classify_symbol): Likewise.\n+\t(aarch64_mov_operand_p): Remove ATTRIBUTE_UNUSED.\n+\tPermit SYMBOL_TINY_ABSOLUTE.\n+\t* config/aarch64/predicates.md (aarch64_mov_operand): Permit CONST.\n+\n 2013-05-29  Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n \t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n "}, {"sha": "bdb6b0405785612777333717fb42eb63232b78c6", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "patch": "@@ -81,6 +81,7 @@ enum aarch64_symbol_type\n   SYMBOL_SMALL_TLSDESC,\n   SYMBOL_SMALL_GOTTPREL,\n   SYMBOL_SMALL_TPREL,\n+  SYMBOL_TINY_ABSOLUTE,\n   SYMBOL_FORCE_TO_MEM\n };\n "}, {"sha": "9c77888157d41e9895cada8c17e83035c2ea308a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "patch": "@@ -524,6 +524,10 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \treturn;\n       }\n \n+    case SYMBOL_TINY_ABSOLUTE:\n+      emit_insn (gen_rtx_SET (Pmode, dest, imm));\n+      return;\n+\n     case SYMBOL_SMALL_GOT:\n       {\n \trtx tmp_reg = dest;\n@@ -826,6 +830,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \n         case SYMBOL_SMALL_TPREL:\n \tcase SYMBOL_SMALL_ABSOLUTE:\n+\tcase SYMBOL_TINY_ABSOLUTE:\n \t  aarch64_load_symref_appropriately (dest, imm, sty);\n \t  return;\n \n@@ -5030,6 +5035,8 @@ aarch64_classify_symbol (rtx x,\n \n \tcase AARCH64_CMODEL_TINY_PIC:\n \tcase AARCH64_CMODEL_TINY:\n+\t  return SYMBOL_TINY_ABSOLUTE;\n+\n \tcase AARCH64_CMODEL_SMALL_PIC:\n \tcase AARCH64_CMODEL_SMALL:\n \t  return SYMBOL_SMALL_ABSOLUTE;\n@@ -5051,6 +5058,10 @@ aarch64_classify_symbol (rtx x,\n       switch (aarch64_cmodel)\n \t{\n \tcase AARCH64_CMODEL_TINY:\n+\t  if (SYMBOL_REF_WEAK (x))\n+\t    return SYMBOL_FORCE_TO_MEM;\n+\t  return SYMBOL_TINY_ABSOLUTE;\n+\n \tcase AARCH64_CMODEL_SMALL:\n \t  if (SYMBOL_REF_WEAK (x))\n \t    return SYMBOL_FORCE_TO_MEM;\n@@ -6444,10 +6455,9 @@ aarch64_simd_imm_scalar_p (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n bool\n aarch64_mov_operand_p (rtx x,\n-\t\t       enum aarch64_symbol_context context ATTRIBUTE_UNUSED,\n+\t\t       enum aarch64_symbol_context context,\n \t\t       enum machine_mode mode)\n {\n-\n   if (GET_CODE (x) == HIGH\n       && aarch64_valid_symref (XEXP (x, 0), GET_MODE (XEXP (x, 0))))\n     return true;\n@@ -6458,7 +6468,8 @@ aarch64_mov_operand_p (rtx x,\n   if (GET_CODE (x) == SYMBOL_REF && mode == DImode && CONSTANT_ADDRESS_P (x))\n     return true;\n \n-  return false;\n+  return aarch64_classify_symbolic_expression (x, context)\n+    == SYMBOL_TINY_ABSOLUTE;\n }\n \n /* Return a const_int vector of VAL.  */"}, {"sha": "3248f610da0cb6e693c1b01b31a5e17116a4e577", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "patch": "@@ -166,7 +166,7 @@\n })\n \n (define_predicate \"aarch64_mov_operand\"\n-  (and (match_code \"reg,subreg,mem,const_int,symbol_ref,high\")\n+  (and (match_code \"reg,subreg,mem,const,const_int,symbol_ref,label_ref,high\")\n        (ior (match_operand 0 \"register_operand\")\n \t    (ior (match_operand 0 \"memory_operand\")\n \t\t (match_test \"aarch64_mov_operand_p (op, SYMBOL_CONTEXT_ADR, mode)\")))))"}]}