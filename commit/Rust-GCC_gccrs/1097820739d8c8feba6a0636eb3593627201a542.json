{"sha": "1097820739d8c8feba6a0636eb3593627201a542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5NzgyMDczOWQ4YzhmZWJhNmEwNjM2ZWIzNTkzNjI3MjAxYTU0Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-11T21:49:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-11T21:49:36Z"}, "message": "i386.md (setcc splitters): Add four splitters to simplify compound compares that simplify_comparison can't...\n\n        * config/i386/i386.md (setcc splitters): Add four splitters to\n        simplify compound compares that simplify_comparison can't handle.\n\nFrom-SVN: r46203", "tree": {"sha": "1d3dc2ff07469bd5d24c50c3d301256e3f9de795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d3dc2ff07469bd5d24c50c3d301256e3f9de795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1097820739d8c8feba6a0636eb3593627201a542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1097820739d8c8feba6a0636eb3593627201a542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1097820739d8c8feba6a0636eb3593627201a542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1097820739d8c8feba6a0636eb3593627201a542/comments", "author": null, "committer": null, "parents": [{"sha": "6f32162af66395b5ae357d714d8d18fb6f666feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f32162af66395b5ae357d714d8d18fb6f666feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f32162af66395b5ae357d714d8d18fb6f666feb"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "8992aa830010f0cb166fe62e1c9bf01b60d95552", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1097820739d8c8feba6a0636eb3593627201a542/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1097820739d8c8feba6a0636eb3593627201a542/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1097820739d8c8feba6a0636eb3593627201a542", "patch": "@@ -1,3 +1,8 @@\n+2001-10-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.md (setcc splitters): Add four splitters to\n+\tsimplify compound compares that simplify_comparison can't handle.\n+\n 2001-10-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* cpplex.c (digraph_spellings, token_spellings): Make static."}, {"sha": "01a9be026e70ed6289e5ad0963810f3cb8528dd4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1097820739d8c8feba6a0636eb3593627201a542/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1097820739d8c8feba6a0636eb3593627201a542/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1097820739d8c8feba6a0636eb3593627201a542", "patch": "@@ -12542,6 +12542,76 @@\n   [(set_attr \"type\" \"setcc\")\n    (set_attr \"mode\" \"QI\")])\n \n+;; In general it is not safe to assume too much about CCmode registers,\n+;; so simplify-rtx stops when it sees a second one.  Under certain \n+;; conditions this is safe on x86, so help combine not create\n+;;\n+;;\tseta\t%al\n+;;\ttestb\t%al, %al\n+;;\tsete\t%al\n+\n+(define_split \n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+\t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n+\t         [(reg 17) (const_int 0)])\n+\t    (const_int 0)))]\n+  \"\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  PUT_MODE (operands[1], QImode);\n+})\n+\n+(define_split \n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n+\t(ne:QI (match_operator 1 \"ix86_comparison_operator\"\n+\t         [(reg 17) (const_int 0)])\n+\t    (const_int 0)))]\n+  \"\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  PUT_MODE (operands[1], QImode);\n+})\n+\n+(define_split \n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+\t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n+\t         [(reg 17) (const_int 0)])\n+\t    (const_int 0)))]\n+  \"\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  rtx new_op1 = copy_rtx (operands[1]);\n+  operands[1] = new_op1;\n+  PUT_MODE (new_op1, QImode);\n+  PUT_CODE (new_op1, REVERSE_CONDITION (GET_CODE (new_op1),\n+\t\t\t\t\tGET_MODE (XEXP (new_op1, 0))));\n+\n+  /* Make sure that (a) the CCmode we have for the flags is strong\n+     enough for the reversed compare or (b) we have a valid FP compare.  */\n+  if (! ix86_comparison_operator (new_op1, VOIDmode))\n+    FAIL;\n+})\n+\n+(define_split \n+  [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n+\t(eq:QI (match_operator 1 \"ix86_comparison_operator\"\n+\t         [(reg 17) (const_int 0)])\n+\t    (const_int 0)))]\n+  \"\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  rtx new_op1 = copy_rtx (operands[1]);\n+  operands[1] = new_op1;\n+  PUT_MODE (new_op1, QImode);\n+  PUT_CODE (new_op1, REVERSE_CONDITION (GET_CODE (new_op1),\n+\t\t\t\t\tGET_MODE (XEXP (new_op1, 0))));\n+\n+  /* Make sure that (a) the CCmode we have for the flags is strong\n+     enough for the reversed compare or (b) we have a valid FP compare.  */\n+  if (! ix86_comparison_operator (new_op1, VOIDmode))\n+    FAIL;\n+})\n+\n ;; The SSE store flag instructions saves 0 or 0xffffffff to the result.\n ;; subsequent logical operations are used to imitate conditional moves.\n ;; 0xffffffff is NaN, but not in normalized form, so we can't represent"}]}