{"sha": "fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "node_id": "C_kwDOANBUbNoAKGZjNmNkNzk4YzA3YTk0ZDZiMGJjYzE2YjE3NWU2ZTVkNmU1OTRjN2U", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-01-19T02:31:46Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-01-19T06:04:02Z"}, "message": "testsuite: Adjust possibly fragile slp-perm-9.c [PR104015]\n\nAs Richard pointed out in PR104015, the test case slp-perm-9.c\ncan be fragile when vectorizer tries to use different\nvectorisation strategies.\n\nAs suggested, this patch tries to make the check not sensitive\non the re-trying times by removing the times checking.  To still\nretain the test coverage on unnecessary re-trying, for example\nit exposes this PR104015 on Power9, I added two test cases to\npowerpc testsuite.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/104015\n\t* gcc.dg/vect/slp-perm-9.c: Adjust.\n\t* gcc.target/powerpc/pr104015-1.c: New test.\n\t* gcc.target/powerpc/pr104015-2.c: New test.", "tree": {"sha": "7e39d8494545bdb8e94f34f65b243bc32fbe1772", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e39d8494545bdb8e94f34f65b243bc32fbe1772"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0ef3534816a1b8ffad544d9ed720690a97d7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0ef3534816a1b8ffad544d9ed720690a97d7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0ef3534816a1b8ffad544d9ed720690a97d7cc"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "154c00af598d05bac9ebdad3bfb4eeb28594a1fc", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "patch": "@@ -61,9 +61,7 @@ int main (int argc, const char* argv[])\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { { vect_perm_short || vect32 } || vect_load_lanes } } } } */\n /* We don't try permutes with a group size of 3 for variable-length\n    vectors.  */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target { vect_perm_short && { { ! vect_perm3_short } && { ! vect_partial_vectors_usage_1 } } } xfail vect_variable_length } } } */\n-/* Try to vectorize the epilogue using partial vectors.  */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 2 \"vect\" { target { vect_perm_short && { { ! vect_perm3_short } && vect_partial_vectors_usage_1 } } xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump \"permutation requires at least three vectors\" \"vect\" { target { vect_perm_short && { ! vect_perm3_short } } xfail vect_variable_length } } } */\n /* { dg-final { scan-tree-dump-not \"permutation requires at least three vectors\" \"vect\" { target vect_perm3_short } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { { ! { vect_perm3_short || vect32 } } || vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { { vect_perm3_short || vect32 } && { ! vect_load_lanes } } } } } */"}, {"sha": "895c243aaf86de925ce93bd86ed54ec60c19bae9", "filename": "gcc/testsuite/gcc.target/powerpc/pr104015-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104015-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104015-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104015-1.c?ref=fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* As PR104015, we don't expect vectorizer will re-try some vector modes\n+   for epilogues on Power9, since Power9 doesn't support partial vector\n+   by defaut.  */\n+\n+#include <stdarg.h>\n+#define N 200\n+\n+void __attribute__((noinline))\n+foo (unsigned short *__restrict__ pInput, unsigned short *__restrict__ pOutput)\n+{\n+  unsigned short i, a, b, c;\n+\n+  for (i = 0; i < N / 3; i++)\n+    {\n+       a = *pInput++;\n+       b = *pInput++;\n+       c = *pInput++;\n+\n+       *pOutput++ = a + b + c + 3;\n+       *pOutput++ = a + b + c + 12;\n+       *pOutput++ = a + b + c + 1;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Re-trying epilogue analysis with vector mode\" \"vect\" } } */"}, {"sha": "ab482b116299bdace6e5414c54bf28ac682c9a3f", "filename": "gcc/testsuite/gcc.target/powerpc/pr104015-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104015-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104015-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104015-2.c?ref=fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* Vector with length instructions lxvl/stxvl are only enabled for 64 bit.  */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Power10 support partial vector for epilogue by default, it's expected\n+   vectorizer would re-try for it once.  */\n+\n+#include <stdarg.h>\n+#define N 200\n+\n+void __attribute__((noinline))\n+foo (unsigned short *__restrict__ pInput, unsigned short *__restrict__ pOutput)\n+{\n+  unsigned short i, a, b, c;\n+\n+  for (i = 0; i < N / 3; i++)\n+    {\n+       a = *pInput++;\n+       b = *pInput++;\n+       c = *pInput++;\n+\n+       *pOutput++ = a + b + c + 3;\n+       *pOutput++ = a + b + c + 12;\n+       *pOutput++ = a + b + c + 1;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Re-trying epilogue analysis with vector mode\" 1 \"vect\" } } */"}]}