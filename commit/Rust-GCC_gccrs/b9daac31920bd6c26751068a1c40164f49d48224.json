{"sha": "b9daac31920bd6c26751068a1c40164f49d48224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlkYWFjMzE5MjBiZDZjMjY3NTEwNjhhMWM0MDE2NGY0OWQ0ODIyNA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-03T05:18:25Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-03T05:18:25Z"}, "message": "tree.h: Update copyright date.\n\n\n        * tree.h: Update copyright date.\n        (IS_EXPR_CODE_CLASS): Add parenthesis.\n        (TREE_SET_CODE): Add whitespace.\n        (TREE_CHECK): Add parenthesis.\n        (TREE_CLASS_CODE): Add parenthesis and wrap long line.\n        (CST_OR_CONSTRUCTOR_CHECK):\n        (EXPR_CHECK): Add parenthis, whitespace and wrap line.\n        (TREE_SYMBOL_REFERENCED): Whitespace.\n        (INT_CST_LT): Likewise.\n        (INT_CST_LT_UNSIGNED): Likewise.\n        (tree_real_cst): Unwrap comment.\n        (tree_string): Likewise.\n        (tree_complex): Likewise.\n        (IDENTIFIER_POINTER): correct cast.\n        (SAVE_EXPR_CONTEXT): Whitespace.\n        (EXPR_WFL_FILENAME_NODE): Likewise.\n        (EXPR_WFL_FILENAME): Remove parenthesis.\n        (DECL_ORIGIN): Add parenthesis.\n        (DECL_FROM_INLINE): Use NULL_TREE.\n        (build_int_2): Whitespace.\n        (build_type_variant): Add parenthesis.\n\n        * gcc/jcf-parse.c: Update copyright date.\n        (yyparse): Constify resource_filename.\n\nFrom-SVN: r48498", "tree": {"sha": "9cf38a8e7fa051b8d3fc358dfbca5d8fb2ccd508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf38a8e7fa051b8d3fc358dfbca5d8fb2ccd508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9daac31920bd6c26751068a1c40164f49d48224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9daac31920bd6c26751068a1c40164f49d48224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9daac31920bd6c26751068a1c40164f49d48224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9daac31920bd6c26751068a1c40164f49d48224/comments", "author": null, "committer": null, "parents": [{"sha": "f52eda294f6b2df47022306d7c23f48299179d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52eda294f6b2df47022306d7c23f48299179d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52eda294f6b2df47022306d7c23f48299179d83"}], "stats": {"total": 100, "additions": 64, "deletions": 36}, "files": [{"sha": "5d0eafbe4267a542c8de8c5728d6409e65968164", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daac31920bd6c26751068a1c40164f49d48224/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daac31920bd6c26751068a1c40164f49d48224/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9daac31920bd6c26751068a1c40164f49d48224", "patch": "@@ -1,3 +1,30 @@\n+2000-01-03  Graham Stott  <grahams@redhat.com>\n+\n+\t* tree.h: Update copyright date.\n+\t(IS_EXPR_CODE_CLASS): Add parenthesis.\n+\t(TREE_SET_CODE): Add whitespace.\n+\t(TREE_CHECK): Add parenthesis.\n+\t(TREE_CLASS_CODE): Add parenthesis and wrap long line.\n+\t(CST_OR_CONSTRUCTOR_CHECK):\n+\t(EXPR_CHECK): Add parenthis, whitespace and wrap line.\n+\t(TREE_SYMBOL_REFERENCED): Whitespace.\n+\t(INT_CST_LT): Likewise.\n+\t(INT_CST_LT_UNSIGNED): Likewise.\n+\t(tree_real_cst): Unwrap comment.\n+\t(tree_string): Likewise.\n+\t(tree_complex): Likewise.\n+\t(IDENTIFIER_POINTER): correct cast.\n+\t(SAVE_EXPR_CONTEXT): Whitespace.\n+\t(EXPR_WFL_FILENAME_NODE): Likewise.\n+\t(EXPR_WFL_FILENAME): Remove parenthesis.\n+\t(DECL_ORIGIN): Add parenthesis.\n+\t(DECL_FROM_INLINE): Use NULL_TREE.\n+\t(build_int_2): Whitespace.\n+\t(build_type_variant): Add parenthesis.\n+\n+\t* gcc/jcf-parse.c: Update copyright date.\n+\t(yyparse): Constify resource_filename.\n+\n 2002-01-03  Graham Stott  <grahams@redhat.com>\n \n \t* rtl.h: Update copyright date."}, {"sha": "2841d5f5f8464a92112ab0ac191d6c9c904e34ef", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daac31920bd6c26751068a1c40164f49d48224/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daac31920bd6c26751068a1c40164f49d48224/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=b9daac31920bd6c26751068a1c40164f49d48224", "patch": "@@ -1,5 +1,6 @@\n /* Parser for Java(TM) .class files.\n-   Copyright (C) 1996, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1080,7 +1081,7 @@ yyparse ()\n \n   if (resource_name)\n     {\n-      char *resource_filename;\n+      const char *resource_filename;\n       \n       /* Only one resource file may be compiled at a time.  */\n       assert (TREE_CHAIN (current_file_list) == NULL);"}, {"sha": "208e6d0a78b68dc0393d6062d88fe92642e66d8f", "filename": "gcc/tree.h", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daac31920bd6c26751068a1c40164f49d48224/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daac31920bd6c26751068a1c40164f49d48224/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b9daac31920bd6c26751068a1c40164f49d48224", "patch": "@@ -53,7 +53,7 @@ extern char tree_code_type[MAX_TREE_CODES];\n    expression.  */\n \n #define IS_EXPR_CODE_CLASS(CLASS) \\\n-  (CLASS == '<' || CLASS == '1' || CLASS == '2' || CLASS == 'e')\n+  ((CLASS) == '<' || (CLASS) == '1' || (CLASS) == '2' || (CLASS) == 'e')\n \n /* Number of argument-words in each kind of tree-node.  */\n \n@@ -269,36 +269,39 @@ struct tree_common\n    Codes are defined in tree.def.  */\n #define TREE_CODE(NODE) ((enum tree_code) (NODE)->common.code)\n #define TREE_SET_CODE(NODE, VALUE) \\\n-((NODE)->common.code = (ENUM_BITFIELD(tree_code)) (VALUE))\n+((NODE)->common.code = (ENUM_BITFIELD (tree_code)) (VALUE))\n \n /* When checking is enabled, errors will be generated if a tree node\n    is accessed incorrectly. The macros abort with a fatal error.  */\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n #define TREE_CHECK(t, code) __extension__\t\t\t\t\\\n-({  const tree __t = t;\t\t\t\t\t\t\t\\\n+({  const tree __t = (t);\t\t\t\t\t\t\\\n     if (TREE_CODE(__t) != (code))\t\t\t\t\t\\\n       tree_check_failed (__t, code, __FILE__, __LINE__, __FUNCTION__);\t\\\n     __t; })\n #define TREE_CLASS_CHECK(t, class) __extension__\t\t\t\\\n-({  const tree __t = t;\t\t\t\t\t\t\t\\\n+({  const tree __t = (t);\t\t\t\t\t\t\\\n     if (TREE_CODE_CLASS(TREE_CODE(__t)) != (class))\t\t\t\\\n-      tree_class_check_failed (__t, class, __FILE__, __LINE__, __FUNCTION__); \\\n+      tree_class_check_failed (__t, class, __FILE__, __LINE__,\t\t\\\n+\t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n /* These checks have to be special cased.  */\n #define CST_OR_CONSTRUCTOR_CHECK(t) __extension__\t\t\t\\\n-({  const tree __t = t;\t\t\t\t\t\t\t\\\n-    enum tree_code __c = TREE_CODE(__t);\t\t\t\t\\\n+({  const tree __t = (t);\t\t\t\t\t\t\\\n+    enum tree_code const __c = TREE_CODE(__t);\t\t\t\t\\\n     if (__c != CONSTRUCTOR && TREE_CODE_CLASS(__c) != 'c')\t\t\\\n-      tree_check_failed (__t, CONSTRUCTOR, __FILE__, __LINE__, __FUNCTION__); \\\n+      tree_check_failed (__t, CONSTRUCTOR, __FILE__, __LINE__,\t\t\\\n+\t\t\t __FUNCTION__);\t\t\t\t\t\\\n     __t; })\n #define EXPR_CHECK(t) __extension__\t\t\t\t\t\\\n-({  const tree __t = t;\t\t\t\t\t\t\t\\\n-    char __c = TREE_CODE_CLASS(TREE_CODE(__t));\t\t\t\t\\\n+({  const tree __t = (t);\t\t\t\t\t\t\\\n+    char const __c = TREE_CODE_CLASS(TREE_CODE(__t));\t\t\t\\\n     if (__c != 'r' && __c != 's' && __c != '<'\t\t\t\t\\\n \t&& __c != '1' && __c != '2' && __c != 'e')\t\t\t\\\n-      tree_class_check_failed(__t, 'e', __FILE__, __LINE__, __FUNCTION__); \\\n+      tree_class_check_failed (__t, 'e', __FILE__, __LINE__,\t\t\\\n+\t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n extern void tree_check_failed PARAMS ((const tree, enum tree_code,\n@@ -510,7 +513,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n /* In an IDENTIFIER_NODE, this means that assemble_name was called with\n    this string as an argument.  */\n #define TREE_SYMBOL_REFERENCED(NODE) \\\n-\t(IDENTIFIER_NODE_CHECK (NODE)->common.static_flag)\n+  (IDENTIFIER_NODE_CHECK (NODE)->common.static_flag)\n \n /* In an INTEGER_CST, REAL_CST, of COMPLEX_CST, this means there was an\n    overflow in folding, and no warning has been issued for this subexpression.\n@@ -667,16 +670,16 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n #define TREE_INT_CST_LOW(NODE) (TREE_INT_CST (NODE).low)\n #define TREE_INT_CST_HIGH(NODE) (TREE_INT_CST (NODE).high)\n \n-#define INT_CST_LT(A, B)  \\\n-  (TREE_INT_CST_HIGH (A) < TREE_INT_CST_HIGH (B)\t\t\t\\\n-   || (TREE_INT_CST_HIGH (A) == TREE_INT_CST_HIGH (B)\t\t\\\n+#define INT_CST_LT(A, B)\t\t\t\t\\\n+  (TREE_INT_CST_HIGH (A) < TREE_INT_CST_HIGH (B)\t\\\n+   || (TREE_INT_CST_HIGH (A) == TREE_INT_CST_HIGH (B)\t\\\n        && TREE_INT_CST_LOW (A) < TREE_INT_CST_LOW (B)))\n \n-#define INT_CST_LT_UNSIGNED(A, B)  \\\n-  (((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (A)\t\\\n-    < (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (B))\t\\\n-   || (((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (A)\t\\\n-        == (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (B)) \\\n+#define INT_CST_LT_UNSIGNED(A, B)\t\t\t\t\\\n+  (((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (A)\t\t\\\n+    < (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (B))\t\t\\\n+   || (((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (A)\t\t\\\n+        == (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (B))\t\\\n        && TREE_INT_CST_LOW (A) < TREE_INT_CST_LOW (B)))\n  \n struct tree_int_cst\n@@ -711,8 +714,7 @@ struct tree_int_cst\n struct tree_real_cst\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language\n-\t\t\t\t   (rtl) info */\n+  rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n   REAL_VALUE_TYPE real_cst;\n };\n \n@@ -723,8 +725,7 @@ struct tree_real_cst\n struct tree_string\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language\n-\t\t\t\t   (rtl) info */\n+  rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n   int length;\n   const char *pointer;\n };\n@@ -736,8 +737,7 @@ struct tree_string\n struct tree_complex\n {\n   struct tree_common common;\n-  rtx rtl;\t/* acts as link to register transfer language\n-\t\t\t\t   (rtl) info */\n+  rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n   tree real;\n   tree imag;\n };\n@@ -749,7 +749,7 @@ struct tree_complex\n #define IDENTIFIER_LENGTH(NODE) \\\n   (IDENTIFIER_NODE_CHECK (NODE)->identifier.id.len)\n #define IDENTIFIER_POINTER(NODE) \\\n-  ((char *) IDENTIFIER_NODE_CHECK (NODE)->identifier.id.str)\n+  ((const char *) IDENTIFIER_NODE_CHECK (NODE)->identifier.id.str)\n \n /* Translate a hash table identifier pointer to a tree_identifier\n    pointer, and vice versa.  */\n@@ -791,7 +791,7 @@ struct tree_vec\n /* Define fields and accessors for some nodes that represent expressions.  */\n \n /* In a SAVE_EXPR node.  */\n-#define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND(SAVE_EXPR_CHECK (NODE), 1)\n+#define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND (SAVE_EXPR_CHECK (NODE), 1)\n #define SAVE_EXPR_RTL(NODE) (*(rtx *) &SAVE_EXPR_CHECK (NODE)->exp.operands[2])\n #define SAVE_EXPR_NOPLACEHOLDER(NODE) TREE_UNSIGNED (SAVE_EXPR_CHECK (NODE))\n /* Nonzero if the SAVE_EXPRs value should be kept, even if it occurs\n@@ -836,9 +836,9 @@ struct tree_vec\n #define EXPR_WFL_NODE(NODE) \\\n   TREE_OPERAND (EXPR_WITH_FILE_LOCATION_CHECK (NODE), 0)\n #define EXPR_WFL_FILENAME_NODE(NODE) \\\n-  TREE_OPERAND(EXPR_WITH_FILE_LOCATION_CHECK (NODE), 1)\n+  TREE_OPERAND (EXPR_WITH_FILE_LOCATION_CHECK (NODE), 1)\n #define EXPR_WFL_FILENAME(NODE) \\\n-  IDENTIFIER_POINTER (EXPR_WFL_FILENAME_NODE ((NODE)))\n+  IDENTIFIER_POINTER (EXPR_WFL_FILENAME_NODE (NODE))\n /* ??? Java uses this in all expressions.  */\n #define EXPR_WFL_LINECOL(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n #define EXPR_WFL_LINENO(NODE) (EXPR_WFL_LINECOL (NODE) >> 12)\n@@ -1501,13 +1501,13 @@ struct tree_type\n /* Like DECL_ABSTRACT_ORIGIN, but returns NODE if there's no abstract\n    origin.  This is useful when setting the DECL_ABSTRACT_ORIGIN.  */\n #define DECL_ORIGIN(NODE) \\\n-  (DECL_ABSTRACT_ORIGIN (NODE) ? DECL_ABSTRACT_ORIGIN (NODE) : NODE)\n+  (DECL_ABSTRACT_ORIGIN (NODE) ? DECL_ABSTRACT_ORIGIN (NODE) : (NODE))\n \n /* Nonzero for any sort of ..._DECL node means this decl node represents an\n    inline instance of some original (abstract) decl from an inline function;\n    suppress any warnings about shadowing some other variable.  FUNCTION_DECL\n    nodes can also have their abstract origin set to themselves.  */\n-#define DECL_FROM_INLINE(NODE) (DECL_ABSTRACT_ORIGIN (NODE) != (tree) 0 \\\n+#define DECL_FROM_INLINE(NODE) (DECL_ABSTRACT_ORIGIN (NODE) != NULL_TREE \\\n \t\t\t\t&& DECL_ABSTRACT_ORIGIN (NODE) != (NODE))\n \n /* Nonzero if a _DECL means that the name of this decl should be ignored\n@@ -2073,7 +2073,7 @@ extern tree maybe_get_identifier\tPARAMS ((const char *));\n \n /* Construct various types of nodes.  */\n \n-#define build_int_2(LO,HI)  \\\n+#define build_int_2(LO, HI)  \\\n   build_int_2_wide ((unsigned HOST_WIDE_INT) (LO), (HOST_WIDE_INT) (HI))\n \n extern tree build\t\t\tPARAMS ((enum tree_code, tree, ...));\n@@ -2273,7 +2273,7 @@ extern tree build_qualified_type        PARAMS ((tree, int));\n    build_qualified_type instead.  */\n \n #define build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t\t\\\n-  build_qualified_type (TYPE,\t\t\t\t\t\t\\\n+  build_qualified_type ((TYPE),\t\t\t\t\t\t\\\n \t\t\t((CONST_P) ? TYPE_QUAL_CONST : 0)\t\t\\\n \t\t\t| ((VOLATILE_P) ? TYPE_QUAL_VOLATILE : 0))\n "}]}