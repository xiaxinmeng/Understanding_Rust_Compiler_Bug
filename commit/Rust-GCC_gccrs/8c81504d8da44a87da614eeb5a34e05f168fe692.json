{"sha": "8c81504d8da44a87da614eeb5a34e05f168fe692", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4MTUwNGQ4ZGE0NGE4N2RhNjE0ZWViNWEzNGUwNWYxNjhmZTY5Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-08-30T21:01:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-30T21:01:33Z"}, "message": "locale_facets.h (ctype<char>): Remove __table_type.\n\n\n\n2000-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* bits/locale_facets.h (ctype<char>): Remove __table_type.\n\tAdd include for bits/std_cwctype.h, for wctype_t.\n\t* src/locale.cc (ctype<wchar_t>): Implement.\n\t* config/gnu-linux/bits/ctype_base.h (ctype_base): Remove mask\n\ttypedef, instead name enum.\n\t* config/gnu-linux/bits/ctype_specializations.h: Tweak.\n\t* config/gnu-linux/ctype.cc: Tweak.\n\t* testsuite/22_locale/ctype.cc:\tTweak.\n\n\t* bits/codecvt.h (__enc_traits): Mangle names.\n\nFrom-SVN: r36071", "tree": {"sha": "35431cc4fb61e18a171ecc0c2ee075267dca4be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35431cc4fb61e18a171ecc0c2ee075267dca4be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c81504d8da44a87da614eeb5a34e05f168fe692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c81504d8da44a87da614eeb5a34e05f168fe692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c81504d8da44a87da614eeb5a34e05f168fe692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c81504d8da44a87da614eeb5a34e05f168fe692/comments", "author": null, "committer": null, "parents": [{"sha": "cdd3612a55ea208a716946699f3bfd2f70936adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd3612a55ea208a716946699f3bfd2f70936adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd3612a55ea208a716946699f3bfd2f70936adb"}], "stats": {"total": 239, "additions": 153, "deletions": 86}, "files": [{"sha": "6eec7b59057b2638ce337cdbbfe7733679b3a2ed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -1,3 +1,16 @@\n+2000-08-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* bits/locale_facets.h (ctype<char>): Remove __table_type.\n+\tAdd include for bits/std_cwctype.h, for wctype_t.\n+\t* src/locale.cc (ctype<wchar_t>): Implement.\n+\t* config/gnu-linux/bits/ctype_base.h (ctype_base): Remove mask\n+\ttypedef, instead name enum.\n+\t* config/gnu-linux/bits/ctype_specializations.h: Tweak.\n+\t* config/gnu-linux/ctype.cc: Tweak.\t\n+\t* testsuite/22_locale/ctype.cc: Tweak.\n+\t\n+\t* bits/codecvt.h (__enc_traits): Mangle names.\n+\t\n 2000-08-30  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/22_locale/codecvt.html:  Behind-the-scenes ASCII->HTML"}, {"sha": "bc427add940d6913a4ed68b97bf6f4647af8250a", "filename": "libstdc++-v3/bits/codecvt.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fcodecvt.h?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -63,35 +63,35 @@ namespace std\n   protected:\n     // Data Members:\n     // Max size of charset encoding name\n-    static const int \t__max_size = 32;\n+    static const int \t_S_max_size = 32;\n     // Name of internal character set encoding.\n-    char\t       \t__intc_enc[__max_size];\n+    char\t       \t_M_intc_enc[_S_max_size];\n     // Name of external character set encoding.\n-    char  \t       \t__extc_enc[__max_size];\n+    char  \t       \t_M_extc_enc[_S_max_size];\n \n     // Conversion descriptor between external encoding to internal encoding.\n-    __desc_type\t\t__in_desc;\n+    __desc_type\t\t_M_in_desc;\n     // Conversion descriptor between internal encoding to external encoding.\n-    __desc_type\t\t__out_desc;\n+    __desc_type\t\t_M_out_desc;\n \n   public:\n-    __enc_traits() : __in_desc(0), __out_desc(0)\n+    __enc_traits() : _M_in_desc(0), _M_out_desc(0)\n     {\n       // __intc_end = whatever we are using internally, which is\n       // UCS4 (linux) \n       // UCS2 == UNICODE  (microsoft, java, aix, whatever...)\n       // XXX Currently don't know how to get this data from target system...\n-      strcpy(__intc_enc, \"UCS4\");\n+      strcpy(_M_intc_enc, \"UCS4\");\n \n       // __extc_end = external codeset in current locale\n-      strcpy(__extc_enc, nl_langinfo(CODESET));\n+      strcpy(_M_extc_enc, nl_langinfo(CODESET));\n     }\n \n     __enc_traits(const char* __int, const char* __ext)\n-    : __in_desc(0), __out_desc(0)\n+    : _M_in_desc(0), _M_out_desc(0)\n     {\n-      strncpy(__intc_enc, __int, __max_size);\n-      strncpy(__extc_enc, __ext, __max_size);\n+      strncpy(_M_intc_enc, __int, _S_max_size);\n+      strncpy(_M_extc_enc, __ext, _S_max_size);\n     }\n \n     // 21.1.2 traits typedefs\n@@ -101,23 +101,23 @@ namespace std\n     // CopyConstructible types (20.1.3)\n     __enc_traits(const __enc_traits& __obj)\n     {\n-      strncpy(__intc_enc, __obj.__intc_enc, __max_size);\n-      strncpy(__extc_enc, __obj.__extc_enc, __max_size);\n+      strncpy(_M_intc_enc, __obj._M_intc_enc, _S_max_size);\n+      strncpy(_M_extc_enc, __obj._M_extc_enc, _S_max_size);\n     }\n \n     ~__enc_traits()\n     {\n-      iconv_close(__in_desc);\n-      iconv_close(__out_desc);\n+      iconv_close(_M_in_desc);\n+      iconv_close(_M_out_desc);\n     } \n \n     // Initializes\n     void\n     _M_init()\n     {\n-      __in_desc = iconv_open(__intc_enc, __extc_enc);\n-      __out_desc = iconv_open(__extc_enc, __intc_enc);\n-      if (__out_desc == iconv_t(-1) || __in_desc == iconv_t(-1))\n+      _M_in_desc = iconv_open(_M_intc_enc, _M_extc_enc);\n+      _M_out_desc = iconv_open(_M_extc_enc, _M_intc_enc);\n+      if (_M_out_desc == iconv_t(-1) || _M_in_desc == iconv_t(-1))\n \t{\n \t  // XXX Extended error checking.\n \t}\n@@ -126,25 +126,25 @@ namespace std\n     bool\n     _M_good()\n     { \n-      return __out_desc && __in_desc \n-\t     && __out_desc != iconv_t(-1) && __in_desc != iconv_t(-1);\n+      return _M_out_desc && _M_in_desc \n+\t     && _M_out_desc != iconv_t(-1) && _M_in_desc != iconv_t(-1);\n     }\n \n     const __desc_type* \n     _M_get_in_descriptor()\n-    { return &__in_desc; }\n+    { return &_M_in_desc; }\n \n     const __desc_type* \n     _M_get_out_descriptor()\n-    { return &__out_desc; }\n+    { return &_M_out_desc; }\n \n    const char* \n     _M_get_internal_enc()\n-    { return __intc_enc; }\n+    { return _M_intc_enc; }\n \n     const char* \n     _M_get_external_enc()\n-    { return __extc_enc; }\n+    { return _M_extc_enc; }\n   };\n #endif //_GLIBCPP_USE_WCHAR_T\n "}, {"sha": "db8912400e14d66b05df4c6a72afa3b7f1c13a9f", "filename": "libstdc++-v3/bits/locale_facets.h", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -39,6 +39,7 @@\n #include <bits/std_ctime.h>\t// For struct tm\n #include <bits/std_typeinfo.h> \t// For bad_cast, which shouldn't be here.\n #include <bits/std_ios.h>\t// For ios_base\n+#include <bits/std_cwctype.h>\t// For wctype_t\n \n namespace std\n {\n@@ -308,33 +309,31 @@ namespace std\n \n \n   // 22.2.1.3  ctype specializations\n-  // NB: Can use _Ctype_nois to actually implement the is\n+  // NB: Can use _Ctype_nois to actually implement the \"is\"\n   // functionality in the non-virtual (thus inline-able) member\n   // fuctions.\n   template<>\n     class ctype<char> : public _Ctype_nois<char>\n     {\n     public:\n       // Types:\n-      typedef char \t\t\t\t\tchar_type;\n-      typedef ctype::mask \t\t\t\tmask;\n-      typedef size_t\t\t\t\t\t__table_type;\n+      typedef char \t       char_type;\n+      typedef ctype::mask      mask;\n \n     private:\n       // Data Members:\n-      bool \t\t\t_M_del;\n-      __to_type const& \t\t_M_toupper;\n-      __to_type const& \t\t_M_tolower;\n-      const mask* const& \t_M_ctable;\n-      const mask* \t\t_M_table;\n+      bool \t\t       _M_del;\n+      __to_type const& \t       _M_toupper;\n+      __to_type const& \t       _M_tolower;\n+      const mask* const&       _M_ctable;\n+      const mask*       _M_table;\n       \n     public:\n-      static locale::id \tid;\n-      static const __table_type table_size = 1 +static_cast<unsigned char>(-1);\n+      static locale::id        id;\n+      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);\n \n       explicit \n-      ctype(const mask* __table = 0, bool __del = false, \n-\t    size_t __refs = 0) throw();\n+      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);\n \n       inline bool \n       is(mask __m, char __c) const throw();\n@@ -352,11 +351,13 @@ namespace std\n       virtual \n       ~ctype();\n \n-      inline const mask* \n+      // XXX\n+      const mask* \n       table() const throw()\n       { return _M_table; }\n \n-      inline const mask* \n+      // XXX\n+      const mask* \n       classic_table() throw()\n       { return _M_ctable; }\n \n@@ -397,16 +398,63 @@ namespace std\n     class ctype<wchar_t> : public _Ctype<wchar_t>\n     {\n     public:\n-     // Types:\n-      typedef wchar_t \t\t\t\t\tchar_type;\n-      typedef ctype::mask \t\t\t\tmask;\n-      \n-      static locale::id id;\n+      // Types:\n+      typedef wchar_t \t       char_type;\n+      typedef ctype::mask      mask;\n+      typedef wctype_t\t       __wmask_type;\n+\n+      // Data Members:\n+      static locale::id        id;\n \n       explicit \n-      ctype(size_t /*__refs*/ = 0) throw();\n+      ctype(size_t __refs = 0);\n \n     protected:\n+      __wmask_type\n+      _M_convert_to_wmask(const mask __m) const\n+      {\n+\t__wmask_type __ret;\n+\tswitch (__m)\n+\t  {\n+\t  case space:\n+\t    __ret = wctype(\"space\");\n+\t    break;\n+\t  case print:\n+\t    __ret = wctype(\"print\");\n+\t    break;\n+\t  case cntrl:\n+\t    __ret = wctype(\"cntrl\");\n+\t    break;\n+\t  case upper:\n+\t    __ret = wctype(\"upper\");\n+\t    break;\n+\t  case lower:\n+\t    __ret = wctype(\"lower\");\n+\t    break;\n+\t  case alpha:\n+\t    __ret = wctype(\"alpha\");\n+\t    break;\n+\t  case digit:\n+\t    __ret = wctype(\"digit\");\n+\t    break;\n+\t  case punct:\n+\t    __ret = wctype(\"punct\");\n+\t    break;\n+\t  case xdigit:\n+\t    __ret = wctype(\"xdigit\");\n+\t    break;\n+\t  case alnum:\n+\t    __ret = wctype(\"alnum\");\n+\t    break;\n+\t  case graph:\n+\t    __ret = wctype(\"graph\");\n+\t    break;\n+\t  default:\n+\t    __ret = 0;\n+\t  }\n+\treturn __ret;\n+      };\n+\n       virtual \n       ~ctype();\n "}, {"sha": "fbbf376608ff0e8a71fd593ede7fc8d661467021", "filename": "libstdc++-v3/config/gnu-linux/bits/ctype_base.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_base.h?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -35,11 +35,15 @@\n   \n   struct ctype_base\n   {\n-    typedef unsigned short \tmask;\n     // Non-standard typedefs.\n+    // XXX\n+    typedef unsigned short \tmask;   \n+    typedef unsigned short \t__table_type;   \n     typedef const int* \t\t__to_type;\n \n-    enum\n+    // XXX\n+    //    enum mask\n+    enum \n     {\n       space = _ISspace,\n       print = _ISprint,"}, {"sha": "fdba4e7535eea2c63f1cf43102648e81628e3f04", "filename": "libstdc++-v3/config/gnu-linux/bits/ctype_specializations.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fbits%2Fctype_specializations.h?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -70,4 +70,3 @@\n \n \n \n-"}, {"sha": "d6a819d68bc6127b4e3ce58fe683d97236793644", "filename": "libstdc++-v3/config/gnu-linux/ctype.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -32,41 +32,42 @@\n //\n   \n // Information as gleaned from /usr/include/ctype.h\n-  \n-  ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n-\tsize_t __refs = 0) throw()\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n     : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n       _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n       _M_ctable(__ctype_b), _M_table(__table == 0 ? _M_ctable: __table) \n     { }\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[(int) __c]; }\n+  { return _M_toupper[static_cast<int>(__c)]; }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_toupper[(int) *__low];\n+\t*__low = _M_toupper[static_cast<int>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[(int) __c]; }\n+  { return _M_tolower[static_cast<int>(__c)]; }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = _M_tolower[(int) *__low];\n+\t*__low = _M_tolower[static_cast<int>(*__low)];\n \t++__low;\n       }\n     return __high;\n   }\n \n+\n+"}, {"sha": "8235dd052f87878ccbc12e21429bfc904d5b9f50", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c81504d8da44a87da614eeb5a34e05f168fe692/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=8c81504d8da44a87da614eeb5a34e05f168fe692", "patch": "@@ -467,7 +467,7 @@ namespace std {\n \n   ctype<char>::\n   ~ctype()\n-  { if (_M_del) delete[] table(); }\n+  { if (_M_del) delete[] this->table(); }\n \n   char\n   ctype<char>::\n@@ -569,102 +569,104 @@ namespace std {\n \n   // NB: These ctype<wchar_t> methods are not configuration-specific,\n   // unlike the ctype<char> bits.\n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw() { }\n+  ctype<wchar_t>::ctype(size_t __refs) : _Ctype<wchar_t>(__refs) { }\n \n   wchar_t\n   ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { return ::towupper(__c); }\n+  { return towupper(__c); }\n \n   const wchar_t*\n   ctype<wchar_t>::do_toupper(wchar_t* __low, const wchar_t* __high) const\n   {\n     while (__low < __high)\n       {\n-        *__low = ::towupper(*__low);\n+        *__low = towupper(*__low);\n         ++__low;\n       }\n     return __high;\n   }\n   \n   wchar_t\n   ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { return ::towlower(__c); }\n+  { return towlower(__c); }\n   \n   const wchar_t*\n   ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n   {\n     while (__low < __high)\n       {\n-        *__low = ::towlower(*__low);\n+        *__low = towlower(*__low);\n         ++__low;\n       }\n     return __high;\n   }\n \n   bool\n   ctype<wchar_t>::\n-  do_is(mask /*__m*/, char_type /*__c*/) const\n-  { \n-    // XXX\n-    return false;\n-  }\n+  do_is(mask __m, char_type __c) const\n+  { return static_cast<bool>(iswctype(_M_convert_to_wmask(__m), __c)); }\n   \n   const wchar_t* \n   ctype<wchar_t>::\n-  do_is(const wchar_t* __low, const wchar_t* /*__high*/, mask* /*__vec*/) const\n+  do_is(const wchar_t* __low, const wchar_t* __high, mask* __m) const\n   {\n-    // XXX\n+    while (__low < __high && !this->is(*__m, *__low))\n+      ++__low;\n     return __low;\n   }\n   \n   const wchar_t* \n   ctype<wchar_t>::\n-  do_scan_is(mask /*__m*/, const wchar_t* __low, const wchar_t* /*__high*/) const\n+  do_scan_is(mask __m, const wchar_t* __low, const wchar_t* __high) const\n   {\n-    // XXX\n+    while (__low < __high && !this->is(__m, *__low))\n+      ++__low;\n     return __low;\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_scan_not(mask /*__m*/, const char_type* __low, \n-\t      const char_type* /*__high*/) const\n+  do_scan_not(mask __m, const char_type* __low, const char_type* __high) const\n   {\n-    // XXX\n+    while (__low < __high && this->is(__m, *__low) != 0)\n+      ++__low;\n     return __low;\n   }\n \n   wchar_t\n   ctype<wchar_t>::\n   do_widen(char __c) const\n-  { \n-    // XXX\n-    return static_cast<wchar_t>((unsigned char)__c); \n-  }\n+  { return btowc(__c); }\n   \n   const char* \n   ctype<wchar_t>::\n-  do_widen(const char* /*__low*/, const char* __high, \n-\t   wchar_t* /*__dest*/) const\n+  do_widen(const char* __low, const char* __high, wchar_t* __dest) const\n   {\n-    // XXX\n+    mbstate_t __state;\n+    memset(&__state, 0, sizeof(mbstate_t));\n+    mbsrtowcs(__dest, &__low, __high - __low, &__state);\n     return __high;\n   }\n \n   char\n   ctype<wchar_t>::\n-  do_narrow(wchar_t /*__c*/, char __dfault) const\n+  do_narrow(wchar_t __wc, char __dfault) const\n   { \n-    // XXX\n-    return __dfault; \n+    int __c = wctob(__wc);\n+    return (__c == EOF ? __dfault : static_cast<char>(__c)); \n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* /*__low*/, const wchar_t* __high, \n-\t    char /*__dfault*/, char* /*__dest*/) const\n+  do_narrow(const wchar_t* __low, const wchar_t* __high, char __dfault, \n+\t    char* __dest) const\n   {\n-    // XXX\n+    mbstate_t __state;\n+    memset(&__state, 0, sizeof(mbstate_t));\n+    size_t __len = __high - __low;\n+    size_t __conv = wcsrtombs(__dest, &__low, __len, &__state);\n+    if (__conv == __len)\n+      *__dest = __dfault;\n     return __high;\n   }\n "}]}