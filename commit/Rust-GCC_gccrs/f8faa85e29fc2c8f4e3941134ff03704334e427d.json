{"sha": "f8faa85e29fc2c8f4e3941134ff03704334e427d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmYWE4NWUyOWZjMmM4ZjRlMzk0MTEzNGZmMDM3MDQzMzRlNDI3ZA==", "commit": {"author": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-12T22:15:11Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-12T22:15:11Z"}, "message": "re PR fortran/31639 ([4.1/4.2/4.3] ICE in gfc_conv_constant, at fortran/trans-const.c:348 with len)\n\ngcc/fortran:\n2007-07-12  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31639\n\t* decl.c (gfc_match_suffix): Removed surplus general error that hides\n\ta more specific message.\n\t* resolve.c (resolve_fl_variable): Reject illegal initializiers only\n\tif not already done.\n\t(resolve_fl_procedure): Added check for initializers of functions.\n\ngcc/testsuite:\n2007-07-12  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31639\n\t* gfortran.dg/func_decl_4.f90: New test.\n\nFrom-SVN: r126605", "tree": {"sha": "1a94701b6763f367123b5ae42e45e6d07fe681b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a94701b6763f367123b5ae42e45e6d07fe681b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8faa85e29fc2c8f4e3941134ff03704334e427d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8faa85e29fc2c8f4e3941134ff03704334e427d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8faa85e29fc2c8f4e3941134ff03704334e427d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8faa85e29fc2c8f4e3941134ff03704334e427d/comments", "author": null, "committer": null, "parents": [{"sha": "19e723f40b83dd72416f4a4f1f9640c826bef8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e723f40b83dd72416f4a4f1f9640c826bef8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e723f40b83dd72416f4a4f1f9640c826bef8eb"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "a1301b34db4bc77a7101fefde884311a7de197a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f8faa85e29fc2c8f4e3941134ff03704334e427d", "patch": "@@ -1,3 +1,12 @@\n+2007-07-12  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31639\n+\t* decl.c (gfc_match_suffix): Removed surplus general error that hides\n+\ta more specific message.\n+\t* resolve.c (resolve_fl_variable): Reject illegal initializiers only\n+\tif not already done.\n+\t(resolve_fl_procedure): Added check for initializers of functions.\n+\n 2007-07-12  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/32704"}, {"sha": "2467c505d62bf56751d9d81a1ae95d48ddcee4de", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=f8faa85e29fc2c8f4e3941134ff03704334e427d", "patch": "@@ -3578,12 +3578,6 @@ gfc_match_suffix (gfc_symbol *sym, gfc_symbol **result)\n       break;\n     }\n \n-  if (is_result == MATCH_ERROR || is_bind_c == MATCH_ERROR)\n-    {\n-      gfc_error (\"Error in function suffix at %C\");\n-      return MATCH_ERROR;\n-    }\n-\n   if (is_bind_c == MATCH_YES)\n     if (gfc_add_is_bind_c (&(sym->attr), sym->name, &gfc_current_locus, 1)\n         == FAILURE)"}, {"sha": "aa3c80986fde7d003144f37e78eef089a612cd33", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f8faa85e29fc2c8f4e3941134ff03704334e427d", "patch": "@@ -6547,7 +6547,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n   }\n \n   /* Reject illegal initializers.  */\n-  if (sym->value && flag)\n+  if (!sym->mark && sym->value && flag)\n     {\n       if (sym->attr.allocatable)\n \tgfc_error (\"Allocatable '%s' at %L cannot have an initializer\",\n@@ -6745,6 +6745,13 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t}\n     }\n \n+  if (sym->attr.function && sym->value && sym->attr.proc != PROC_ST_FUNCTION)\n+    {\n+      gfc_error (\"Function '%s' at %L cannot have an initializer\",\n+\t\t sym->name, &sym->declared_at);\n+      return FAILURE;\n+    }\n+\n   /* An external symbol may not have an initializer because it is taken to be\n      a procedure.  */\n   if (sym->attr.external && sym->value)"}, {"sha": "01831ebeb18bc5ba1d75233ecb1954d53f67ab0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8faa85e29fc2c8f4e3941134ff03704334e427d", "patch": "@@ -1,3 +1,8 @@\n+2007-07-12 \ufffdDaniel Franke \ufffd<franke.daniel@gmail.com>\n+\n+\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdPR fortran/31639\n+\ufffd \ufffd \ufffd \ufffd * gfortran.dg/func_decl_4.f90: New test.\n+\n 2007-07-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32727"}, {"sha": "7c08f316827c52d6d031d594fd373b2ac2adb884", "filename": "gcc/testsuite/gfortran.dg/func_decl_4.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8faa85e29fc2c8f4e3941134ff03704334e427d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_4.f90?ref=f8faa85e29fc2c8f4e3941134ff03704334e427d", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-c\" }\n+!\n+! Functions shall not have an initializer.\n+!\n+\n+function f1()                      ! { dg-error \"cannot have an initializer\" }\n+  integer :: f1 = 42\n+end function\n+\n+function f2() RESULT (r)           ! { dg-error \"cannot have an initializer\" }\n+  integer :: r = 42\n+end function\n+\n+function f3() RESULT (f3)          ! { dg-error \"must be different than function name\" }\n+  integer :: f3 = 42\n+end function                       ! { dg-excess-errors \"\" }"}]}