{"sha": "47f59fd4d5e519288bb76e02f4a2a0f7d2d62572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNTlmZDRkNWU1MTkyODhiYjc2ZTAyZjRhMmEwZjdkMmQ2MjU3Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-02-02T19:06:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-02T19:06:58Z"}, "message": "i386.md (ashlsi3): Turn into a define_expand an anonymous pattern.\n\n        * i386.md (ashlsi3): Turn into a define_expand an anonymous pattern.\n        Make the anonymous pattern match when ! optimize_size.\n        (ashlsi3 size optimizer): New pattern.\n\nFrom-SVN: r24980", "tree": {"sha": "f397789491b6840579ea7d9f61d3484bfb906e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f397789491b6840579ea7d9f61d3484bfb906e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572/comments", "author": null, "committer": null, "parents": [{"sha": "cbca921c15ad8dca7df9ee697ecb70b89cdb1da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbca921c15ad8dca7df9ee697ecb70b89cdb1da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbca921c15ad8dca7df9ee697ecb70b89cdb1da0"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "4382b7cde96100df958692bfd7a9ffd41854ee0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47f59fd4d5e519288bb76e02f4a2a0f7d2d62572", "patch": "@@ -6,6 +6,10 @@ Tue Feb  2 20:29:34 1999  Catherine Moore  <clm@cygnus.com>\n  \n Tue Feb  2 19:43:59 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* i386.md (ashlsi3): Turn into a define_expand an anonymous pattern.\n+\tMake the anonymous pattern match when ! optimize_size.\n+\t(ashlsi3 size optimizer): New pattern.\n+\n \t* intl/Makefile.in (uninstall): Add missing \"; \\\".\n \n Tue Feb  2 18:21:23 1999  Stan Cox  <scox@cygnus.com>"}, {"sha": "48833170834c9dbd6c33587f08851217b7993874", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f59fd4d5e519288bb76e02f4a2a0f7d2d62572/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=47f59fd4d5e519288bb76e02f4a2a0f7d2d62572", "patch": "@@ -4713,11 +4713,46 @@ byte_xor_operation:\n ;; On i486, movl/sall appears slightly faster than leal, but the leal\n ;; is smaller - use leal for now unless the shift count is 1.\n \n-(define_insn \"ashlsi3\"\n+(define_expand \"ashlsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+;; For regsiter destinations:\n+;;   add == 2 bytes, move == 2 bytes, shift == 3 bytes, lea == 7 bytes\n+;;\n+;;   lea loses when optimizing for size\n+;;\n+;; Do the math.  If the count is 1, using add, else using sal will\n+;; produce the smallest possible code, even when the source and\n+;; dest do not match.  For a memory destination, sal is the only\n+;; choice.\n+;;\n+;; Do not try to handle case where src and dest do not match.  Let regmove\n+;; and reload handle them.  A mov followed by this insn will generate the\n+;; desired size optimized results.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"cI\")))]\n+  \"optimize_size\"\n+  \"*\n+{\n+  if (REG_P (operands[0]) && operands[2] == const1_rtx)\n+    return AS2 (add%L0,%0,%0);\n+\n+  if (REG_P (operands[2]))\n+    return AS2 (sal%L0,%b2,%0);\n+  return AS2 (sal%L0,%2,%0);\n+}\")\n+\n+(define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"r,0\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"M,cI\")))]\n-  \"\"\n+  \"! optimize_size\"\n   \"*\n {\n   if (REG_P (operands[0]) && REGNO (operands[0]) != REGNO (operands[1]))"}]}