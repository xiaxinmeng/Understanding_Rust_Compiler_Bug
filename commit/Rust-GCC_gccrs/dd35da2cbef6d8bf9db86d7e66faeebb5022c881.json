{"sha": "dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzNWRhMmNiZWY2ZDhiZjlkYjg2ZDdlNjZmYWVlYmI1MDIyYzg4MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-28T15:33:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-28T15:33:53Z"}, "message": "PR libstdc++/87116 fix path::lexically_normal() handling of dot-dot\n\nPreviously the logic that turned \"a/b/c/../..\" into \"a/\" failed to\npreserve an empty path at the end of the iteration sequence, as required\nby the trailing slash. That meant the result didn't meet the class\ninvariants, and that \"a/b/c/d/../../..\" would remove four components\ninstead of the three that \"../../..\" should remove.\n\n\tPR libstdc++/87116\n\t* src/filesystem/std-path.cc (path::lexically_normal): When handling\n\ta dot-dot filename, preserve an empty final component in the iteration\n\tsequence.\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use preferred-separator for\n\troot-directory.\n\t* testsuite/27_io/filesystem/path/generation/normal.cc: Add new tests\n\tfor more than two adjacent dot-dot filenames.\n\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Replace slashes with\n\tpreferred-separator in expected normalized strings.\n\nFrom-SVN: r263922", "tree": {"sha": "4a236cb188b846308f29b7524e0686eb729df251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a236cb188b846308f29b7524e0686eb729df251"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30bafb7fcf78e1472cb6cadc6e953d1586a0db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30bafb7fcf78e1472cb6cadc6e953d1586a0db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30bafb7fcf78e1472cb6cadc6e953d1586a0db3"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "b6ae0e5ffab6773a60b9c98d9ab106745fa065af", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "patch": "@@ -1,3 +1,16 @@\n+2018-08-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87116\n+\t* src/filesystem/std-path.cc (path::lexically_normal): When handling\n+\ta dot-dot filename, preserve an empty final component in the iteration\n+\tsequence.\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Use preferred-separator for\n+\troot-directory.\n+\t* testsuite/27_io/filesystem/path/generation/normal.cc: Add new tests\n+\tfor more than two adjacent dot-dot filenames.\n+\t[_GLIBCXX_FILESYSTEM_IS_WINDOWS]: Replace slashes with\n+\tpreferred-separator in expected normalized strings.\n+\n 2018-08-25  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR libstdc++/70694"}, {"sha": "f382eb3759ade6aab67ef2d6bd36d0a0de1d171f", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "patch": "@@ -438,7 +438,7 @@ path::lexically_normal() const\n     {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n       // Replace each slash character in the root-name\n-      if (p._M_type == _Type::_Root_name)\n+      if (p._M_type == _Type::_Root_name || p._M_type == _Type::_Root_dir)\n \t{\n \t  string_type s = p.native();\n \t  std::replace(s.begin(), s.end(), L'/', L'\\\\');\n@@ -458,7 +458,8 @@ path::lexically_normal() const\n \t    }\n \t  else if (!ret.has_relative_path())\n \t    {\n-\t      if (!ret.is_absolute())\n+\t      // remove a dot-dot filename immediately after root-directory\n+\t      if (!ret.has_root_directory())\n \t\tret /= p;\n \t    }\n \t  else\n@@ -471,8 +472,18 @@ path::lexically_normal() const\n \t\t{\n \t\t  // Remove the filename before the trailing slash\n \t\t  // (equiv. to ret = ret.parent_path().remove_filename())\n-\t\t  ret._M_pathname.erase(elem._M_cur->_M_pos);\n-\t\t  ret._M_cmpts.erase(elem._M_cur, ret._M_cmpts.end());\n+\n+\t\t  if (elem == ret.begin())\n+\t\t    ret.clear();\n+\t\t  else\n+\t\t    {\n+\t\t      ret._M_pathname.erase(elem._M_cur->_M_pos);\n+\t\t      // Do we still have a trailing slash?\n+\t\t      if (std::prev(elem)->_M_type == _Type::_Filename)\n+\t\t\tret._M_cmpts.erase(elem._M_cur);\n+\t\t      else\n+\t\t\tret._M_cmpts.erase(elem._M_cur, ret._M_cmpts.end());\n+\t\t    }\n \t\t}\n \t      else // ???\n \t\tret /= p;"}, {"sha": "3b8311f81adbe492e147121038a21c010a1406fc", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generation/normal.cc", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fnormal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd35da2cbef6d8bf9db86d7e66faeebb5022c881/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fnormal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneration%2Fnormal.cc?ref=dd35da2cbef6d8bf9db86d7e66faeebb5022c881", "patch": "@@ -24,7 +24,17 @@\n #include <testsuite_hooks.h>\n \n using std::filesystem::path;\n-using __gnu_test::compare_paths;\n+\n+void\n+compare_paths(path p, std::string expected)\n+{\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+  for (auto& c : expected)\n+    if (c == '/')\n+      c = '\\\\';\n+#endif\n+  __gnu_test::compare_paths(p, expected);\n+}\n \n void\n test01()\n@@ -69,8 +79,11 @@ test03()\n     {\"/foo\"        , \"/foo\" },\n     {\"/foo/\"       , \"/foo/\" },\n     {\"/foo/.\"      , \"/foo/\" },\n-    {\"/foo/bar/..\" , \"/foo/\" },\n     {\"/foo/..\"     , \"/\" },\n+    {\"/foo/../..\"  , \"/\" },\n+    {\"/foo/bar/..\" , \"/foo/\" },\n+    {\"/foo/bar/../..\" , \"/\" },\n+    {\"/foo/bar/baz/../../..\" , \"/\" }, // PR libstdc++/87116\n \n     {\"/.\"          , \"/\" },\n     {\"/./\"         , \"/\" },\n@@ -88,10 +101,11 @@ test03()\n     {\"foo/..\"      , \".\" },\n     {\"foo/../\"     , \".\" },\n     {\"foo/../..\"   , \"..\" },\n+    {\"foo/../../..\", \"../..\" },\n \n     // with root name (OS-dependent):\n #if defined(_WIN32) && !defined(__CYGWIN__)\n-    {\"C:bar/..\"    , \"C:.\" },\n+    {\"C:bar/..\"    , \"C:\" },\n #else\n     {\"C:bar/..\"    , \".\" },\n #endif\n@@ -119,10 +133,53 @@ test03()\n     compare_paths( path(test.input).lexically_normal(), test.normalized );\n }\n \n+void\n+test04()\n+{\n+  // PR libstdc++/87116\n+  path p = \"a/b/c\";\n+  compare_paths( (p/\"../..\").lexically_normal(), \"a/\" );\n+\n+  p = \"a/b/c/d/e\";\n+  compare_paths( (p/\"..\").lexically_normal(),  \"a/b/c/d/\" );\n+  compare_paths( (p/\"../..\").lexically_normal(),  \"a/b/c/\" );\n+  compare_paths( (p/\"../../..\").lexically_normal(),  \"a/b/\" );\n+  compare_paths( (p/\"../../../..\").lexically_normal(),  \"a/\" );\n+  compare_paths( (p/\"../../../../..\").lexically_normal(),  \".\" );\n+  compare_paths( (p/\"../../../../../..\").lexically_normal(),  \"..\" );\n+\n+  p = \"/a/b/c/d/e\";\n+  compare_paths( (p/\"..\").lexically_normal(),  \"/a/b/c/d/\" );\n+  compare_paths( (p/\"../..\").lexically_normal(),  \"/a/b/c/\" );\n+  compare_paths( (p/\"../../..\").lexically_normal(),  \"/a/b/\" );\n+  compare_paths( (p/\"../../../..\").lexically_normal(),  \"/a/\" );\n+  compare_paths( (p/\"../../../../..\").lexically_normal(),  \"/\" );\n+  compare_paths( (p/\"../../../../../..\").lexically_normal(),  \"/\" );\n+\n+#if defined(_WIN32) && !defined(__CYGWIN__)\n+  p = \"A:b/c/d/e\";\n+  compare_paths( (p/\"..\").lexically_normal(),  \"A:b/c/d/\" );\n+  compare_paths( (p/\"../..\").lexically_normal(),  \"A:b/c/\" );\n+  compare_paths( (p/\"../../..\").lexically_normal(),  \"A:b/\" );\n+  compare_paths( (p/\"../../../..\").lexically_normal(),  \"A:\" );\n+  compare_paths( (p/\"../../../../..\").lexically_normal(),  \"A:..\" );\n+  compare_paths( (p/\"../../../../../..\").lexically_normal(),  \"A:../..\" );\n+\n+  p = \"A:/b/c/d/e\";\n+  compare_paths( (p/\"..\").lexically_normal(),  \"A:/b/c/d/\" );\n+  compare_paths( (p/\"../..\").lexically_normal(),  \"A:/b/c/\" );\n+  compare_paths( (p/\"../../..\").lexically_normal(),  \"A:/b/\" );\n+  compare_paths( (p/\"../../../..\").lexically_normal(),  \"A:/\" );\n+  compare_paths( (p/\"../../../../..\").lexically_normal(),  \"A:/\" );\n+  compare_paths( (p/\"../../../../../..\").lexically_normal(),  \"A:/\" );\n+#endif\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}