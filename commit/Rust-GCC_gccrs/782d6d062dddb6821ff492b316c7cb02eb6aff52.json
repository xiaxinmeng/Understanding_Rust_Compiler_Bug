{"sha": "782d6d062dddb6821ff492b316c7cb02eb6aff52", "node_id": "C_kwDOANBUbNoAKDc4MmQ2ZDA2MmRkZGI2ODIxZmY0OTJiMzE2YzdjYjAyZWI2YWZmNTI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-23T15:50:39Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-24T14:43:01Z"}, "message": "ast: Add ExternalTypeItem node\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-item.h (class ExternalTypeItem): New class.\n\t* ast/rust-ast.cc (ExternalTypeItem::as_string): New function.\n\t(ExternalTypeItem::accept_vis): Likewise.\n\t* ast/rust-ast-full-decls.h (class ExternalTypeItem): Declare class.\n\t* ast/rust-ast-dump.cc (Dump::visit): Add base visitor for ExternalTypeItem.\n\t* ast/rust-ast-dump.h: Likewise.\n\t* ast/rust-ast-visitor.h: Likewise.\n\t* checks/errors/rust-feature-gate.h: Likewise.\n\t* expand/rust-attribute-visitor.cc (AttrVisitor::visit): Likewise.\n\t* expand/rust-attribute-visitor.h: Likewise.\n\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::visit): Likewise.\n\t* hir/rust-ast-lower-base.h: Likewise.\n\t* resolve/rust-ast-resolve-base.cc (ResolverBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.h: Likewise.\n\t* resolve/rust-early-name-resolver.cc (EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-early-name-resolver.h: Likewise.\n\t* util/rust-attributes.cc (AttributeChecker::visit): Likewise.\n\t* util/rust-attributes.h: Likewise.", "tree": {"sha": "76e056a49d29a2f7da42d5dce3aaabde2ac01fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e056a49d29a2f7da42d5dce3aaabde2ac01fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/782d6d062dddb6821ff492b316c7cb02eb6aff52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782d6d062dddb6821ff492b316c7cb02eb6aff52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/782d6d062dddb6821ff492b316c7cb02eb6aff52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/782d6d062dddb6821ff492b316c7cb02eb6aff52/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda1d7852d6a82df6eea53deb73aab3d459b4443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda1d7852d6a82df6eea53deb73aab3d459b4443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda1d7852d6a82df6eea53deb73aab3d459b4443"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "1fd312a5b9435d85fc0ee3398f198a08d8ac6752", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -1432,6 +1432,10 @@ Dump::visit (TraitImpl &impl)\n   stream << \"\\n}\\n\";\n }\n \n+void\n+Dump::visit (ExternalTypeItem &type)\n+{}\n+\n void\n Dump::visit (ExternalStaticItem &)\n {}"}, {"sha": "c0082aa8314b652c5fb73f7727322b6bd607b48e", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -251,6 +251,7 @@ class Dump : public ASTVisitor\n   void visit (Trait &trait);\n   void visit (InherentImpl &impl);\n   void visit (TraitImpl &impl);\n+  void visit (ExternalTypeItem &item);\n   void visit (ExternalStaticItem &item);\n   void visit (ExternalFunctionItem &item);\n   void visit (ExternBlock &block);"}, {"sha": "0514eecec06498a9d81f89cacf198c50edc88499", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -203,6 +203,7 @@ class Impl;\n class InherentImpl;\n class TraitImpl;\n class ExternalItem;\n+class ExternalTypeItem;\n class ExternalStaticItem;\n struct NamedFunctionParam;\n class ExternalFunctionItem;"}, {"sha": "d60a68691acfc7daa15c22749f13d72d7a4d1963", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -161,6 +161,7 @@ class ASTVisitor\n   virtual void visit (InherentImpl &impl) = 0;\n   virtual void visit (TraitImpl &impl) = 0;\n   // virtual void visit(ExternalItem& item) = 0;\n+  virtual void visit (ExternalTypeItem &type) = 0;\n   virtual void visit (ExternalStaticItem &item) = 0;\n   virtual void visit (ExternalFunctionItem &item) = 0;\n   virtual void visit (ExternBlock &block) = 0;"}, {"sha": "b67a5390f2f5a7ab3c05edde0a08c20847211968", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -3406,6 +3406,16 @@ EnumItemDiscriminant::as_string () const\n   return str;\n }\n \n+std::string\n+ExternalTypeItem::as_string () const\n+{\n+  auto str = append_attributes (outer_attrs, OUTER);\n+\n+  str += \"type \" + item_name + \";\";\n+\n+  return str;\n+}\n+\n std::string\n ExternalStaticItem::as_string () const\n {\n@@ -5492,6 +5502,12 @@ TraitImpl::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+ExternalTypeItem::accept_vis (ASTVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n ExternalStaticItem::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "4be4ca1666f6dce775f9d99c244409d8da7c1c98", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -3907,6 +3907,81 @@ class ExternalItem\n };\n #endif\n \n+// A foreign type defined outside the current crate.\n+// https://rust-lang.github.io/rfcs/1861-extern-types.html\n+class ExternalTypeItem : public ExternalItem\n+{\n+  std::vector<Attribute> outer_attrs;\n+\n+  Visibility visibility;\n+  Identifier item_name;\n+  Location locus;\n+\n+  bool marked_for_strip;\n+\n+public:\n+  ExternalTypeItem (Identifier item_name, Visibility vis,\n+\t\t    std::vector<Attribute> outer_attrs, Location locus)\n+    : ExternalItem (), outer_attrs (std::move (outer_attrs)), visibility (vis),\n+      item_name (std::move (item_name)), locus (locus), marked_for_strip (false)\n+  {}\n+\n+  ExternalTypeItem (ExternalTypeItem const &other)\n+    : outer_attrs (other.outer_attrs), visibility (other.visibility),\n+      item_name (other.item_name), locus (other.locus),\n+      marked_for_strip (other.marked_for_strip)\n+  {\n+    node_id = other.node_id;\n+  }\n+\n+  ExternalTypeItem &operator= (ExternalTypeItem const &other)\n+  {\n+    node_id = other.node_id;\n+    outer_attrs = other.outer_attrs;\n+    visibility = other.visibility;\n+    item_name = other.item_name;\n+    locus = other.locus;\n+    marked_for_strip = other.marked_for_strip;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  ExternalTypeItem (ExternalTypeItem &&other) = default;\n+  ExternalTypeItem &operator= (ExternalTypeItem &&other) = default;\n+\n+  std::string as_string () const override;\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  // Returns whether item has outer attributes.\n+  bool has_outer_attrs () const { return !outer_attrs.empty (); }\n+\n+  // Returns whether item has non-default visibility.\n+  bool has_visibility () const { return !visibility.is_error (); }\n+\n+  Location get_locus () const { return locus; }\n+\n+  void mark_for_strip () override { marked_for_strip = true; };\n+  bool is_marked_for_strip () const override { return marked_for_strip; };\n+\n+  // TODO: this mutable getter seems really dodgy. Think up better way.\n+  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n+  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n+\n+  Identifier get_identifier () const { return item_name; }\n+\n+  const Visibility &get_visibility () const { return visibility; }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object\n+   * rather than base */\n+  ExternalTypeItem *clone_external_item_impl () const override\n+  {\n+    return new ExternalTypeItem (*this);\n+  }\n+};\n+\n // A static item used in an extern block\n class ExternalStaticItem : public ExternalItem\n {"}, {"sha": "22c1501cef69e4725b0b5d4fda20512036874fa4", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -133,6 +133,7 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::Trait &trait) override {}\n   void visit (AST::InherentImpl &impl) override;\n   void visit (AST::TraitImpl &impl) override;\n+  void visit (AST::ExternalTypeItem &item) override {}\n   void visit (AST::ExternalStaticItem &item) override {}\n   void visit (AST::ExternalFunctionItem &item) override {}\n   void visit (AST::ExternBlock &block) override;"}, {"sha": "a5aa8f0e6e96c613213e1178de051280bbec5a6a", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -2734,6 +2734,13 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n   expand_macro_children (MacroExpander::TRAIT_IMPL, impl.get_impl_items (),\n \t\t\t extractor);\n }\n+\n+void\n+AttrVisitor::visit (AST::ExternalTypeItem &item)\n+{\n+  // TODO: ARTHUR\n+}\n+\n void\n AttrVisitor::visit (AST::ExternalStaticItem &item)\n {\n@@ -2757,6 +2764,7 @@ AttrVisitor::visit (AST::ExternalStaticItem &item)\n \n   expander.pop_context ();\n }\n+\n void\n AttrVisitor::visit (AST::ExternalFunctionItem &item)\n {"}, {"sha": "a7ab42e47ec3e179857f55e339e02a1dc79643d3", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -223,6 +223,7 @@ class AttrVisitor : public AST::ASTVisitor\n   void visit (AST::Trait &trait) override;\n   void visit (AST::InherentImpl &impl) override;\n   void visit (AST::TraitImpl &impl) override;\n+  void visit (AST::ExternalTypeItem &item) override;\n   void visit (AST::ExternalStaticItem &item) override;\n   void visit (AST::ExternalFunctionItem &item) override;\n   void visit (AST::ExternBlock &block) override;"}, {"sha": "1651b00b05f255b69c00a0c98198ed7620420e71", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -352,6 +352,9 @@ ASTLoweringBase::visit (AST::TraitImpl &)\n {}\n //  void ASTLoweringBase::visit(ExternalItemitem) {}\n void\n+ASTLoweringBase::visit (AST::ExternalTypeItem &)\n+{}\n+void\n ASTLoweringBase::visit (AST::ExternalStaticItem &)\n {}\n void"}, {"sha": "60ed3a964d9e0c2472e6d5f833ddcba3a18534ef", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -189,6 +189,7 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::InherentImpl &impl);\n   virtual void visit (AST::TraitImpl &impl);\n   //  virtual void visit(ExternalItem& item);\n+  virtual void visit (AST::ExternalTypeItem &item);\n   virtual void visit (AST::ExternalStaticItem &item);\n   virtual void visit (AST::ExternalFunctionItem &item);\n   virtual void visit (AST::ExternBlock &block);"}, {"sha": "2f82f911922a4105ff957fca22a0c2b8c473ffe0", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -446,6 +446,10 @@ void\n ResolverBase::visit (AST::TraitImpl &)\n {}\n \n+void\n+ResolverBase::visit (AST::ExternalTypeItem &)\n+{}\n+\n void\n ResolverBase::visit (AST::ExternalStaticItem &)\n {}"}, {"sha": "994f61e92b8a3e301d7b112223f7747023b3904f", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -138,6 +138,7 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::InherentImpl &);\n   void visit (AST::TraitImpl &);\n \n+  void visit (AST::ExternalTypeItem &);\n   void visit (AST::ExternalStaticItem &);\n   void visit (AST::ExternalFunctionItem &);\n   void visit (AST::ExternBlock &);"}, {"sha": "584d430a0146689a37f2e6a1022e1418e14519ae", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -770,6 +770,12 @@ EarlyNameResolver::visit (AST::TraitImpl &impl)\n   });\n }\n \n+void\n+EarlyNameResolver::visit (AST::ExternalTypeItem &item)\n+{\n+  // nothing to do?\n+}\n+\n void\n EarlyNameResolver::visit (AST::ExternalStaticItem &item)\n {"}, {"sha": "4f51533131a065eed69073f5f23d69a0d0a17f0c", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -215,6 +215,7 @@ class EarlyNameResolver : public AST::ASTVisitor\n   virtual void visit (AST::Trait &trait);\n   virtual void visit (AST::InherentImpl &impl);\n   virtual void visit (AST::TraitImpl &impl);\n+  virtual void visit (AST::ExternalTypeItem &item);\n   virtual void visit (AST::ExternalStaticItem &item);\n   virtual void visit (AST::ExternalFunctionItem &item);\n   virtual void visit (AST::ExternBlock &block);"}, {"sha": "ccabeb8f345bd651e47348235850393a08d88bf3", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -621,6 +621,10 @@ void\n AttributeChecker::visit (AST::TraitImpl &)\n {}\n \n+void\n+AttributeChecker::visit (AST::ExternalTypeItem &)\n+{}\n+\n void\n AttributeChecker::visit (AST::ExternalStaticItem &)\n {}"}, {"sha": "39961bd153501d354fa0f5d5c8fd5c401f5bc9ce", "filename": "gcc/rust/util/rust-attributes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/782d6d062dddb6821ff492b316c7cb02eb6aff52/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=782d6d062dddb6821ff492b316c7cb02eb6aff52", "patch": "@@ -200,6 +200,7 @@ class AttributeChecker : public AST::ASTVisitor\n   void visit (AST::Trait &trait);\n   void visit (AST::InherentImpl &impl);\n   void visit (AST::TraitImpl &impl);\n+  void visit (AST::ExternalTypeItem &item);\n   void visit (AST::ExternalStaticItem &item);\n   void visit (AST::ExternalFunctionItem &item);\n   void visit (AST::ExternBlock &block);"}]}