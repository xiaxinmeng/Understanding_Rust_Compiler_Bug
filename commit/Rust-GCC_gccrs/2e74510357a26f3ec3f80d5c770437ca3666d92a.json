{"sha": "2e74510357a26f3ec3f80d5c770437ca3666d92a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3NDUxMDM1N2EyNmYzZWMzZjgwZDVjNzcwNDM3Y2EzNjY2ZDkyYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-05-23T19:07:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-05-23T19:07:59Z"}, "message": "gimple.c (gimple_types_compatible_p_1): Remove bogus size handling.\n\n\t* gimple.c (gimple_types_compatible_p_1) <ARRAY_TYPE>: Remove bogus\n\tsize handling.\n\t(gimple_canonical_types_compatible_p) <ARRAY_TYPE>: Likewise.\n\t(iterative_hash_gimple_type): Adjust comment.\n\t(iterative_hash_canonical_type): Likewise.  Hash the bounds of the\n\tdomain for an array type instead of the domain type itself.\n\nFrom-SVN: r187807", "tree": {"sha": "f96d565b211cac8848544b6f23f76d9226dcd5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f96d565b211cac8848544b6f23f76d9226dcd5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e74510357a26f3ec3f80d5c770437ca3666d92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e74510357a26f3ec3f80d5c770437ca3666d92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e74510357a26f3ec3f80d5c770437ca3666d92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e74510357a26f3ec3f80d5c770437ca3666d92a/comments", "author": null, "committer": null, "parents": [{"sha": "c5a6cbd4bacd65046a1ee50e858737e1f5784fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a6cbd4bacd65046a1ee50e858737e1f5784fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a6cbd4bacd65046a1ee50e858737e1f5784fe8"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "465cff1c3cdb7a68d8ad36c8221d0b449b06f711", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e74510357a26f3ec3f80d5c770437ca3666d92a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e74510357a26f3ec3f80d5c770437ca3666d92a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e74510357a26f3ec3f80d5c770437ca3666d92a", "patch": "@@ -1,3 +1,12 @@\n+2012-05-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple.c (gimple_types_compatible_p_1) <ARRAY_TYPE>: Remove bogus\n+\tsize handling.\n+\t(gimple_canonical_types_compatible_p) <ARRAY_TYPE>: Likewise.\n+\t(iterative_hash_gimple_type): Adjust comment.\n+\t(iterative_hash_canonical_type): Likewise.  Hash the bounds of the\n+\tdomain for an array type instead of the domain type itself.\n+\n 2012-05-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53438"}, {"sha": "4b2315d6a577ccb170929c93f502e38ac90d9d03", "filename": "gcc/gimple.c", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e74510357a26f3ec3f80d5c770437ca3666d92a/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e74510357a26f3ec3f80d5c770437ca3666d92a/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=2e74510357a26f3ec3f80d5c770437ca3666d92a", "patch": "@@ -3455,13 +3455,6 @@ gimple_types_compatible_p_1 (tree t1, tree t2, type_pair_t p,\n \t    goto same_types;\n \t  else if (i1 == NULL_TREE || i2 == NULL_TREE)\n \t    goto different_types;\n-\t  /* If for a complete array type the possibly gimplified sizes\n-\t     are different the types are different.  */\n-\t  else if (((TYPE_SIZE (i1) != NULL) ^ (TYPE_SIZE (i2) != NULL))\n-\t\t   || (TYPE_SIZE (i1)\n-\t\t       && TYPE_SIZE (i2)\n-\t\t       && !operand_equal_p (TYPE_SIZE (i1), TYPE_SIZE (i2), 0)))\n-\t    goto different_types;\n \t  else\n \t    {\n \t      tree min1 = TYPE_MIN_VALUE (i1);\n@@ -3972,9 +3965,8 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n       v = iterative_hash_hashval_t (TYPE_STRING_FLAG (type), v);\n     }\n \n-  /* For array types hash their domain and the string flag.  */\n-  if (TREE_CODE (type) == ARRAY_TYPE\n-      && TYPE_DOMAIN (type))\n+  /* For array types hash the domain and the string flag.  */\n+  if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))\n     {\n       v = iterative_hash_hashval_t (TYPE_STRING_FLAG (type), v);\n       v = visit (TYPE_DOMAIN (type), state, v,\n@@ -4201,16 +4193,20 @@ iterative_hash_canonical_type (tree type, hashval_t val)\n       v = iterative_hash_hashval_t (TREE_CODE (TREE_TYPE (type)), v);\n     }\n \n-  /* For integer types hash the types min/max values and the string flag.  */\n+  /* For integer types hash only the string flag.  */\n   if (TREE_CODE (type) == INTEGER_TYPE)\n     v = iterative_hash_hashval_t (TYPE_STRING_FLAG (type), v);\n \n-  /* For array types hash their domain and the string flag.  */\n-  if (TREE_CODE (type) == ARRAY_TYPE\n-      && TYPE_DOMAIN (type))\n+  /* For array types hash the domain bounds and the string flag.  */\n+  if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))\n     {\n       v = iterative_hash_hashval_t (TYPE_STRING_FLAG (type), v);\n-      v = iterative_hash_canonical_type (TYPE_DOMAIN (type), v);\n+      /* OMP lowering can introduce error_mark_node in place of\n+\t random local decls in types.  */\n+      if (TYPE_MIN_VALUE (TYPE_DOMAIN (type)) != error_mark_node)\n+\tv = iterative_hash_expr (TYPE_MIN_VALUE (TYPE_DOMAIN (type)), v);\n+      if (TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != error_mark_node)\n+\tv = iterative_hash_expr (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), v);\n     }\n \n   /* Recurse for aggregates with a single element type.  */\n@@ -4478,13 +4474,6 @@ gimple_canonical_types_compatible_p (tree t1, tree t2)\n \t    return true;\n \t  else if (i1 == NULL_TREE || i2 == NULL_TREE)\n \t    return false;\n-\t  /* If for a complete array type the possibly gimplified sizes\n-\t     are different the types are different.  */\n-\t  else if (((TYPE_SIZE (i1) != NULL) ^ (TYPE_SIZE (i2) != NULL))\n-\t\t   || (TYPE_SIZE (i1)\n-\t\t       && TYPE_SIZE (i2)\n-\t\t       && !operand_equal_p (TYPE_SIZE (i1), TYPE_SIZE (i2), 0)))\n-\t    return false;\n \t  else\n \t    {\n \t      tree min1 = TYPE_MIN_VALUE (i1);"}]}