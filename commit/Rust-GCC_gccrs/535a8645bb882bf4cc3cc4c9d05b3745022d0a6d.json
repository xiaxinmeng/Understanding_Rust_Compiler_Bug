{"sha": "535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM1YTg2NDViYjg4MmJmNGNjM2NjNGM5ZDA1YjM3NDUwMjJkMGE2ZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T18:13:53Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T18:13:53Z"}, "message": "[ARM][GCC][2/5x]: MVE load intrinsics.\n\nThis patch supports the following MVE ACLE load intrinsics.\n\nvldrbq_gather_offset_u8, vldrbq_gather_offset_s8, vldrbq_s8, vldrbq_u8, vldrbq_gather_offset_u16, vldrbq_gather_offset_s16, vldrbq_s16, vldrbq_u16, vldrbq_gather_offset_u32, vldrbq_gather_offset_s32, vldrbq_s32, vldrbq_u32, vldrwq_gather_base_s32, vldrwq_gather_base_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (LDRGU_QUALIFIERS): Define builtin\n\tqualifier.\n\t(LDRGS_QUALIFIERS): Likewise.\n\t(LDRS_QUALIFIERS): Likewise.\n\t(LDRU_QUALIFIERS): Likewise.\n\t(LDRGBS_QUALIFIERS): Likewise.\n\t(LDRGBU_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vldrbq_gather_offset_u8): Define macro.\n\t(vldrbq_gather_offset_s8): Likewise.\n\t(vldrbq_s8): Likewise.\n\t(vldrbq_u8): Likewise.\n\t(vldrbq_gather_offset_u16): Likewise.\n\t(vldrbq_gather_offset_s16): Likewise.\n\t(vldrbq_s16): Likewise.\n\t(vldrbq_u16): Likewise.\n\t(vldrbq_gather_offset_u32): Likewise.\n\t(vldrbq_gather_offset_s32): Likewise.\n\t(vldrbq_s32): Likewise.\n\t(vldrbq_u32): Likewise.\n\t(vldrwq_gather_base_s32): Likewise.\n\t(vldrwq_gather_base_u32): Likewise.\n\t(__arm_vldrbq_gather_offset_u8): Define intrinsic.\n\t(__arm_vldrbq_gather_offset_s8): Likewise.\n\t(__arm_vldrbq_s8): Likewise.\n\t(__arm_vldrbq_u8): Likewise.\n\t(__arm_vldrbq_gather_offset_u16): Likewise.\n\t(__arm_vldrbq_gather_offset_s16): Likewise.\n\t(__arm_vldrbq_s16): Likewise.\n\t(__arm_vldrbq_u16): Likewise.\n\t(__arm_vldrbq_gather_offset_u32): Likewise.\n\t(__arm_vldrbq_gather_offset_s32): Likewise.\n\t(__arm_vldrbq_s32): Likewise.\n\t(__arm_vldrbq_u32): Likewise.\n\t(__arm_vldrwq_gather_base_s32): Likewise.\n\t(__arm_vldrwq_gather_base_u32): Likewise.\n\t(vldrbq_gather_offset): Define polymorphic variant.\n\t* config/arm/arm_mve_builtins.def (LDRGU_QUALIFIERS): Use builtin\n\tqualifier.\n\t(LDRGS_QUALIFIERS): Likewise.\n\t(LDRS_QUALIFIERS): Likewise.\n\t(LDRU_QUALIFIERS): Likewise.\n\t(LDRGBS_QUALIFIERS): Likewise.\n\t(LDRGBU_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (VLDRBGOQ): Define iterator.\n\t(VLDRBQ): Likewise.\n\t(VLDRWGBQ): Likewise.\n\t(mve_vldrbq_gather_offset_<supf><mode>): Define RTL pattern.\n\t(mve_vldrbq_<supf><mode>): Likewise.\n\t(mve_vldrwq_gather_base_<supf>v4si): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_u32.c: Likewise.", "tree": {"sha": "fb114ecb2bb1f279db7fb7e15d2cc6f73f8ba346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb114ecb2bb1f279db7fb7e15d2cc6f73f8ba346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff685759913e6b86d027c6007c592460e17974f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff685759913e6b86d027c6007c592460e17974f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff685759913e6b86d027c6007c592460e17974f"}], "stats": {"total": 600, "additions": 598, "deletions": 2}, "files": [{"sha": "729a1c8ae5dd0408c14e1f4d71973a0b0dc9d9a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -1,3 +1,57 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (LDRGU_QUALIFIERS): Define builtin\n+\tqualifier.\n+\t(LDRGS_QUALIFIERS): Likewise.\n+\t(LDRS_QUALIFIERS): Likewise.\n+\t(LDRU_QUALIFIERS): Likewise.\n+\t(LDRGBS_QUALIFIERS): Likewise.\n+\t(LDRGBU_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vldrbq_gather_offset_u8): Define macro.\n+\t(vldrbq_gather_offset_s8): Likewise.\n+\t(vldrbq_s8): Likewise.\n+\t(vldrbq_u8): Likewise.\n+\t(vldrbq_gather_offset_u16): Likewise.\n+\t(vldrbq_gather_offset_s16): Likewise.\n+\t(vldrbq_s16): Likewise.\n+\t(vldrbq_u16): Likewise.\n+\t(vldrbq_gather_offset_u32): Likewise.\n+\t(vldrbq_gather_offset_s32): Likewise.\n+\t(vldrbq_s32): Likewise.\n+\t(vldrbq_u32): Likewise.\n+\t(vldrwq_gather_base_s32): Likewise.\n+\t(vldrwq_gather_base_u32): Likewise.\n+\t(__arm_vldrbq_gather_offset_u8): Define intrinsic.\n+\t(__arm_vldrbq_gather_offset_s8): Likewise.\n+\t(__arm_vldrbq_s8): Likewise.\n+\t(__arm_vldrbq_u8): Likewise.\n+\t(__arm_vldrbq_gather_offset_u16): Likewise.\n+\t(__arm_vldrbq_gather_offset_s16): Likewise.\n+\t(__arm_vldrbq_s16): Likewise.\n+\t(__arm_vldrbq_u16): Likewise.\n+\t(__arm_vldrbq_gather_offset_u32): Likewise.\n+\t(__arm_vldrbq_gather_offset_s32): Likewise.\n+\t(__arm_vldrbq_s32): Likewise.\n+\t(__arm_vldrbq_u32): Likewise.\n+\t(__arm_vldrwq_gather_base_s32): Likewise.\n+\t(__arm_vldrwq_gather_base_u32): Likewise.\n+\t(vldrbq_gather_offset): Define polymorphic variant.\n+\t* config/arm/arm_mve_builtins.def (LDRGU_QUALIFIERS): Use builtin\n+\tqualifier.\n+\t(LDRGS_QUALIFIERS): Likewise.\n+\t(LDRS_QUALIFIERS): Likewise.\n+\t(LDRU_QUALIFIERS): Likewise.\n+\t(LDRGBS_QUALIFIERS): Likewise.\n+\t(LDRGBU_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (VLDRBGOQ): Define iterator.\n+\t(VLDRBQ): Likewise. \n+\t(VLDRWGBQ): Likewise.\n+\t(mve_vldrbq_gather_offset_<supf><mode>): Define RTL pattern.\n+\t(mve_vldrbq_<supf><mode>): Likewise.\n+\t(mve_vldrwq_gather_base_<supf>v4si): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "aced55f52d317e8deafdc6a6804db3b80c00fd80", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -612,6 +612,36 @@ arm_strsbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned};\n #define STRSBU_QUALIFIERS (arm_strsbu_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ldrgu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_pointer, qualifier_unsigned};\n+#define LDRGU_QUALIFIERS (arm_ldrgu_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_pointer, qualifier_unsigned};\n+#define LDRGS_QUALIFIERS (arm_ldrgs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_pointer};\n+#define LDRS_QUALIFIERS (arm_ldrs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldru_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_pointer};\n+#define LDRU_QUALIFIERS (arm_ldru_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_immediate};\n+#define LDRGBS_QUALIFIERS (arm_ldrgbs_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate};\n+#define LDRGBU_QUALIFIERS (arm_ldrgbu_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "c2c195a9270e976c21d8d0a5941f85dd2bdd9e9d", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -1716,6 +1716,20 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vstrbq_scatter_offset_s32( __base, __offset, __value) __arm_vstrbq_scatter_offset_s32( __base, __offset, __value)\n #define vstrwq_scatter_base_s32(__addr,  __offset, __value) __arm_vstrwq_scatter_base_s32(__addr,  __offset, __value)\n #define vstrwq_scatter_base_u32(__addr,  __offset, __value) __arm_vstrwq_scatter_base_u32(__addr,  __offset, __value)\n+#define vldrbq_gather_offset_u8(__base, __offset) __arm_vldrbq_gather_offset_u8(__base, __offset)\n+#define vldrbq_gather_offset_s8(__base, __offset) __arm_vldrbq_gather_offset_s8(__base, __offset)\n+#define vldrbq_s8(__base) __arm_vldrbq_s8(__base)\n+#define vldrbq_u8(__base) __arm_vldrbq_u8(__base)\n+#define vldrbq_gather_offset_u16(__base, __offset) __arm_vldrbq_gather_offset_u16(__base, __offset)\n+#define vldrbq_gather_offset_s16(__base, __offset) __arm_vldrbq_gather_offset_s16(__base, __offset)\n+#define vldrbq_s16(__base) __arm_vldrbq_s16(__base)\n+#define vldrbq_u16(__base) __arm_vldrbq_u16(__base)\n+#define vldrbq_gather_offset_u32(__base, __offset) __arm_vldrbq_gather_offset_u32(__base, __offset)\n+#define vldrbq_gather_offset_s32(__base, __offset) __arm_vldrbq_gather_offset_s32(__base, __offset)\n+#define vldrbq_s32(__base) __arm_vldrbq_s32(__base)\n+#define vldrbq_u32(__base) __arm_vldrbq_u32(__base)\n+#define vldrwq_gather_base_s32(__addr,  __offset) __arm_vldrwq_gather_base_s32(__addr,  __offset)\n+#define vldrwq_gather_base_u32(__addr,  __offset) __arm_vldrwq_gather_base_u32(__addr,  __offset)\n #endif\n \n __extension__ extern __inline void\n@@ -11106,6 +11120,105 @@ __arm_vstrwq_scatter_base_u32 (uint32x4_t __addr, const int __offset, uint32x4_t\n {\n   __builtin_mve_vstrwq_scatter_base_uv4si (__addr, __offset, __value);\n }\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_u8 (uint8_t const * __base, uint8x16_t __offset)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_uv16qi ((__builtin_neon_qi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_s8 (int8_t const * __base, uint8x16_t __offset)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_sv16qi ((__builtin_neon_qi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_s8 (int8_t const * __base)\n+{\n+  return __builtin_mve_vldrbq_sv16qi ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_u8 (uint8_t const * __base)\n+{\n+  return __builtin_mve_vldrbq_uv16qi ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_u16 (uint8_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_uv8hi ((__builtin_neon_qi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_s16 (int8_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_sv8hi ((__builtin_neon_qi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_s16 (int8_t const * __base)\n+{\n+  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_u16 (uint8_t const * __base)\n+{\n+  return __builtin_mve_vldrbq_uv8hi ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_u32 (uint8_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_uv4si ((__builtin_neon_qi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_gather_offset_s32 (int8_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrbq_gather_offset_sv4si ((__builtin_neon_qi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_s32 (int8_t const * __base)\n+{\n+  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrbq_u32 (uint8_t const * __base)\n+{\n+  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_s32 (uint32x4_t __addr, const int __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_base_sv4si (__addr, __offset);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_gather_base_u32 (uint32x4_t __addr, const int __offset)\n+{\n+  return __builtin_mve_vldrwq_gather_base_uv4si (__addr, __offset);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -17770,6 +17883,57 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_s32(p0, p1, __ARM_mve_coerce(__p2, int32x4_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_u32(p0, p1, __ARM_mve_coerce(__p2, uint32x4_t)));})\n \n+#define vldrbq_gather_offset(p0,p1) __arm_vldrbq_gather_offset(p0,p1)\n+#define __arm_vldrbq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint8x16_t]: __arm_vldrbq_gather_offset_s8 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_s16 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_s32 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint8x16_t]: __arm_vldrbq_gather_offset_u8 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_u16 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vstrbq_p(p0,p1,p2) __arm_vstrbq_p(p0,p1,p2)\n+#define __arm_vstrbq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16_t]: __arm_vstrbq_p_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int16x8_t]: __arm_vstrbq_p_s16 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrbq_p_s32 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t]: __arm_vstrbq_p_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint16x8_t]: __arm_vstrbq_p_u16 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrbq_p_u32 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vstrbq_scatter_offset_p(p0,p1,p2,p3) __arm_vstrbq_scatter_offset_p(p0,p1,p2,p3)\n+#define __arm_vstrbq_scatter_offset_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int8x16_t]: __arm_vstrbq_scatter_offset_p_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, int8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vstrbq_scatter_offset_p_s16 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vstrbq_scatter_offset_p_s32 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vstrbq_scatter_offset_p_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vstrbq_scatter_offset_p_u16 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vstrbq_scatter_offset_p_u32 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vstrwq_scatter_base_p(p0,p1,p2,p3) __arm_vstrwq_scatter_base_p(p0,p1,p2,p3)\n+#define __arm_vstrwq_scatter_base_p(p0,p1,p2,p3) ({ __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_p_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_p_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vldrbq_gather_offset_z(p0,p1,p2) __arm_vldrbq_gather_offset_z(p0,p1,p2)\n+#define __arm_vldrbq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint8x16_t]: __arm_vldrbq_gather_offset_z_s8 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_z_s16 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_z_s32 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint8x16_t]: __arm_vldrbq_gather_offset_z_u8 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_z_u16 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n #endif /* MVE Integer.  */\n \n #define vqrdmlahq_m(p0,p1,p2,p3) __arm_vqrdmlahq_m(p0,p1,p2,p3)\n@@ -18497,6 +18661,17 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vmullbq_poly_m_p8 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmullbq_poly_m_p16 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3));})\n \n+#define vldrbq_gather_offset(p0,p1) __arm_vldrbq_gather_offset(p0,p1)\n+#define __arm_vldrbq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint8x16_t]: __arm_vldrbq_gather_offset_s8 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_s16 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_s32 (__ARM_mve_coerce(__p0, int8_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint8x16_t]: __arm_vldrbq_gather_offset_u8 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrbq_gather_offset_u16 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrbq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint8_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "f6d0fec2fb4795d452ecd5478577d564a384220b", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -691,3 +691,9 @@ VAR3 (STRSS, vstrbq_scatter_offset_s, v16qi, v8hi, v4si)\n VAR3 (STRSU, vstrbq_scatter_offset_u, v16qi, v8hi, v4si)\n VAR1 (STRSBS, vstrwq_scatter_base_s, v4si)\n VAR1 (STRSBU, vstrwq_scatter_base_u, v4si)\n+VAR3 (LDRGU, vldrbq_gather_offset_u, v16qi, v8hi, v4si)\n+VAR3 (LDRGS, vldrbq_gather_offset_s, v16qi, v8hi, v4si)\n+VAR3 (LDRS, vldrbq_s, v16qi, v8hi, v4si)\n+VAR3 (LDRU, vldrbq_u, v16qi, v8hi, v4si)\n+VAR1 (LDRGBS, vldrwq_gather_base_s, v4si)\n+VAR1 (LDRGBU, vldrwq_gather_base_u, v4si)"}, {"sha": "be1b9faee7f94124ecd6f37cfff55003d162aee5", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -192,7 +192,8 @@\n \t\t\t VCMULQ_ROT270_M_F VCMULQ_ROT90_M_F VFMAQ_M_F\n \t\t\t VFMAQ_M_N_F VFMASQ_M_N_F VFMSQ_M_F VMAXNMQ_M_F\n \t\t\t VMINNMQ_M_F VSUBQ_M_F VSTRWQSB_S VSTRWQSB_U\n-\t\t\t VSTRBQSO_S VSTRBQSO_U VSTRBQ_S VSTRBQ_U])\n+\t\t\t VSTRBQSO_S VSTRBQSO_U VSTRBQ_S VSTRBQ_U VLDRBQGO_S\n+\t\t\t VLDRBQGO_U VLDRBQ_S VLDRBQ_U VLDRWQGB_S VLDRWQGB_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -345,7 +346,9 @@\n \t\t       (VMLALDAVAXQ_P_S \"s\") (VMLALDAVAXQ_P_U \"u\")\n \t\t       (VMLALDAVAQ_P_S \"s\") (VMLALDAVAQ_P_U \"u\")\n \t\t       (VSTRWQSB_S \"s\") (VSTRWQSB_U \"u\") (VSTRBQSO_S \"s\")\n-\t\t       (VSTRBQSO_U \"u\") (VSTRBQ_S \"s\") (VSTRBQ_U \"u\")])\n+\t\t       (VSTRBQSO_U \"u\") (VSTRBQ_S \"s\") (VSTRBQ_U \"u\")\n+\t\t       (VLDRBQGO_S \"s\") (VLDRBQGO_U \"u\") (VLDRBQ_S \"s\")\n+\t\t       (VLDRBQ_U \"u\") (VLDRWQGB_S \"s\") (VLDRWQGB_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -569,6 +572,9 @@\n (define_int_iterator VSTRWSBQ [VSTRWQSB_S VSTRWQSB_U])\n (define_int_iterator VSTRBSOQ [VSTRBQSO_S VSTRBQSO_U])\n (define_int_iterator VSTRBQ [VSTRBQ_S VSTRBQ_U])\n+(define_int_iterator VLDRBGOQ [VLDRBQGO_S VLDRBQGO_U])\n+(define_int_iterator VLDRBQ [VLDRBQ_S VLDRBQ_U])\n+(define_int_iterator VLDRWGBQ [VLDRWQGB_S VLDRWQGB_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -8009,3 +8015,65 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrbq_gather_offset_s vldrbq_gather_offset_u]\n+;;\n+(define_insn \"mve_vldrbq_gather_offset_<supf><mode>\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VLDRBGOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   if (!strcmp (\"<supf>\",\"s\") && <V_sz_elem> == 8)\n+     output_asm_insn (\"vldrb.u8\\t%q0, [%m1, %q2]\",ops);\n+   else\n+     output_asm_insn (\"vldrb.<supf><V_sz_elem>\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrbq_s vldrbq_u]\n+;;\n+(define_insn \"mve_vldrbq_<supf><mode>\"\n+  [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"memory_operand\" \"Us\")]\n+\t VLDRBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vldrb.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_gather_base_s vldrwq_gather_base_u]\n+;;\n+(define_insn \"mve_vldrwq_gather_base_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t VLDRWGBQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   output_asm_insn (\"vldrw.u32\\t%q0, [%q1, %2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])"}, {"sha": "4f5f1a1c8b7faa407c570d8416f4f6275bfc5f9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -1,3 +1,22 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrbq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "d945c6576a01029cff3a94b6df851a9c6124bd77", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s16.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8_t const * base, uint16x8_t offset)\n+{\n+  return vldrbq_gather_offset_s16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int8_t const * base, uint16x8_t offset)\n+{\n+  return vldrbq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s16\"  }  } */"}, {"sha": "de7c681b6749ffbdd6728553ef165da54c007783", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s32.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int8_t const * base, uint32x4_t offset)\n+{\n+  return vldrbq_gather_offset_s32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int8_t const * base, uint32x4_t offset)\n+{\n+  return vldrbq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s32\"  }  } */"}, {"sha": "6e85ec2eb6bfc0d89b0b4308565eed3122421d22", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_s8.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t const * base, uint8x16_t offset)\n+{\n+  return vldrbq_gather_offset_s8 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8_t const * base, uint8x16_t offset)\n+{\n+  return vldrbq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */"}, {"sha": "d093cd32a723bd95033f669c4cf4b6bcdf6c1fa3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u16.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8_t const * base, uint16x8_t offset)\n+{\n+  return vldrbq_gather_offset_u16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint8_t const * base, uint16x8_t offset)\n+{\n+  return vldrbq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u16\"  }  } */"}, {"sha": "671b3a1e92659df2ee58fe288efbffdcda57e10f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u32.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint8_t const * base, uint32x4_t offset)\n+{\n+  return vldrbq_gather_offset_u32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint8_t const * base, uint32x4_t offset)\n+{\n+  return vldrbq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u32\"  }  } */"}, {"sha": "57c086e6ef5edd5cbd3cc5f879557a037deac2ab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_gather_offset_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_gather_offset_u8.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t const * base, uint8x16_t offset)\n+{\n+  return vldrbq_gather_offset_u8 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8_t const * base, uint8x16_t offset)\n+{\n+  return vldrbq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */"}, {"sha": "695fc17535f4e3a1acfd6a104e560023712fd5b4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s16.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int8_t const * base)\n+{\n+  return vldrbq_s16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s16\"  }  } */"}, {"sha": "22ac325d15cccca9cff4e619bf6c04472a34d1aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s32.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int8_t const * base)\n+{\n+  return vldrbq_s32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s32\"  }  } */"}, {"sha": "437639cc966341a3eb4ff2cb0282bffffcb10ca8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_s8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s8.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t const * base)\n+{\n+  return vldrbq_s8 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s8\"  }  } */"}, {"sha": "2a48af17a90798201921c83af123c829717142a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u16.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint8_t const * base)\n+{\n+  return vldrbq_u16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u16\"  }  } */"}, {"sha": "ef37295633015b071fddf89d2a5e335c1a26fa2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u32.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint8_t const * base)\n+{\n+  return vldrbq_u32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u32\"  }  } */"}, {"sha": "7366faa98a2ecd337c2ec3bf13a7a3a1b104b503", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_u8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u8.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t const * base)\n+{\n+  return vldrbq_u8 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */"}, {"sha": "a9a695dc593a9381959a7776dcc9704d826c9978", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_s32.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (uint32x4_t addr)\n+{\n+  return vldrwq_gather_base_s32 (addr, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "8c2b541bda2ddb7b00b4aa11acf0876085235617", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535a8645bb882bf4cc3cc4c9d05b3745022d0a6d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_u32.c?ref=535a8645bb882bf4cc3cc4c9d05b3745022d0a6d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t addr)\n+{\n+  return vldrwq_gather_base_u32 (addr, 4);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}]}