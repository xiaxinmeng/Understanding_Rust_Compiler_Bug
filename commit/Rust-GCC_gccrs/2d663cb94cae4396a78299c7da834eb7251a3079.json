{"sha": "2d663cb94cae4396a78299c7da834eb7251a3079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2NjNjYjk0Y2FlNDM5NmE3ODI5OWM3ZGE4MzRlYjcyNTFhMzA3OQ==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2012-01-20T18:57:44Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2012-01-20T18:57:44Z"}, "message": "re PR debug/45682 (missing namespace parent die when using -gdwarf-4)\n\n2012-01-19   Cary Coutant  <ccoutant@google.com>\n\t     Dodji Seketeli  <dodji@redhat.com>\n\ngcc/\n\n\tPR debug/45682\n\t* dwarf2out.c (copy_declaration_context): Return ref to parent\n\tof declaration DIE, if necessary.\n\t(remove_child_or_replace_with_skeleton): Add new parameter; update\n\tcaller.  Place skeleton DIE under parent DIE of original declaration.\n\tMove call to copy_declaration_context to here ...\n\t(break_out_comdat_types): ... from here.\n\ngcc/testsuite/\n\n\tPR debug/45682\n\t* g++.dg/debug/dwarf2/nested-3.C: New test.\n\nCo-Authored-By: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r183348", "tree": {"sha": "a728935b214ebc80d08066255befec2feae7a476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a728935b214ebc80d08066255befec2feae7a476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d663cb94cae4396a78299c7da834eb7251a3079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d663cb94cae4396a78299c7da834eb7251a3079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d663cb94cae4396a78299c7da834eb7251a3079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d663cb94cae4396a78299c7da834eb7251a3079/comments", "author": null, "committer": null, "parents": [{"sha": "b968b19221d537229241171266b682e5827c51d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b968b19221d537229241171266b682e5827c51d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b968b19221d537229241171266b682e5827c51d7"}], "stats": {"total": 132, "additions": 114, "deletions": 18}, "files": [{"sha": "9b05b3bf91e4b94381268a0dbee96720eee788f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d663cb94cae4396a78299c7da834eb7251a3079", "patch": "@@ -1,3 +1,14 @@\n+2012-01-20   Cary Coutant  <ccoutant@google.com>\n+\t     Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/45682\n+\t* dwarf2out.c (copy_declaration_context): Return ref to parent\n+\tof declaration DIE, if necessary.\n+\t(remove_child_or_replace_with_skeleton): Add new parameter; update\n+\tcaller.  Place skeleton DIE under parent DIE of original declaration.\n+\tMove call to copy_declaration_context to here ...\n+\t(break_out_comdat_types): ... from here.\n+\n 2012-01-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR rtl-optimization/51856"}, {"sha": "ed279ba65fe9b2083ee21eebdaf3555bc016f6f9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2d663cb94cae4396a78299c7da834eb7251a3079", "patch": "@@ -3302,11 +3302,12 @@ static int should_move_die_to_comdat (dw_die_ref);\n static dw_die_ref clone_as_declaration (dw_die_ref);\n static dw_die_ref clone_die (dw_die_ref);\n static dw_die_ref clone_tree (dw_die_ref);\n-static void copy_declaration_context (dw_die_ref, dw_die_ref);\n+static dw_die_ref copy_declaration_context (dw_die_ref, dw_die_ref);\n static void generate_skeleton_ancestor_tree (skeleton_chain_node *);\n static void generate_skeleton_bottom_up (skeleton_chain_node *);\n static dw_die_ref generate_skeleton (dw_die_ref);\n static dw_die_ref remove_child_or_replace_with_skeleton (dw_die_ref,\n+                                                         dw_die_ref,\n                                                          dw_die_ref);\n static void break_out_comdat_types (dw_die_ref);\n static dw_die_ref copy_ancestor_tree (dw_die_ref, dw_die_ref, htab_t);\n@@ -7070,16 +7071,18 @@ clone_as_declaration (dw_die_ref die)\n   return clone;\n }\n \n-/* Copy the declaration context to the new compile unit DIE.  This includes\n+/* Copy the declaration context to the new type unit DIE.  This includes\n    any surrounding namespace or type declarations.  If the DIE has an\n    AT_specification attribute, it also includes attributes and children\n-   attached to the specification.  */\n+   attached to the specification, and returns a pointer to the original\n+   parent of the declaration DIE.  Returns NULL otherwise.  */\n \n-static void\n+static dw_die_ref\n copy_declaration_context (dw_die_ref unit, dw_die_ref die)\n {\n   dw_die_ref decl;\n   dw_die_ref new_decl;\n+  dw_die_ref orig_parent = NULL;\n \n   decl = get_AT_ref (die, DW_AT_specification);\n   if (decl == NULL)\n@@ -7090,6 +7093,10 @@ copy_declaration_context (dw_die_ref unit, dw_die_ref die)\n       dw_die_ref c;\n       dw_attr_ref a;\n \n+      /* The original DIE will be changed to a declaration, and must\n+         be moved to be a child of the original declaration DIE.  */\n+      orig_parent = decl->die_parent;\n+\n       /* Copy the type node pointer from the new DIE to the original\n          declaration DIE so we can forward references later.  */\n       decl->die_id.die_type_node = die->die_id.die_type_node;\n@@ -7118,6 +7125,8 @@ copy_declaration_context (dw_die_ref unit, dw_die_ref die)\n           add_AT_specification (die, new_decl);\n         }\n     }\n+\n+  return orig_parent;\n }\n \n /* Generate the skeleton ancestor tree for the given NODE, then clone\n@@ -7201,25 +7210,43 @@ generate_skeleton (dw_die_ref die)\n   return node.new_die;\n }\n \n-/* Remove the DIE from its parent, possibly replacing it with a cloned\n-   declaration.  The original DIE will be moved to a new compile unit\n-   so that existing references to it follow it to the new location.  If\n-   any of the original DIE's descendants is a declaration, we need to\n-   replace the original DIE with a skeleton tree and move the\n-   declarations back into the skeleton tree.  */\n+/* Remove the CHILD DIE from its parent, possibly replacing it with a cloned\n+   declaration.  The original DIE is moved to a new compile unit so that\n+   existing references to it follow it to the new location.  If any of the\n+   original DIE's descendants is a declaration, we need to replace the\n+   original DIE with a skeleton tree and move the declarations back into the\n+   skeleton tree.  */\n \n static dw_die_ref\n-remove_child_or_replace_with_skeleton (dw_die_ref child, dw_die_ref prev)\n+remove_child_or_replace_with_skeleton (dw_die_ref unit, dw_die_ref child,\n+\t\t\t\t       dw_die_ref prev)\n {\n-  dw_die_ref skeleton;\n+  dw_die_ref skeleton, orig_parent;\n+\n+  /* Copy the declaration context to the type unit DIE.  If the returned\n+     ORIG_PARENT is not NULL, the skeleton needs to be added as a child of\n+     that DIE.  */\n+  orig_parent = copy_declaration_context (unit, child);\n \n   skeleton = generate_skeleton (child);\n   if (skeleton == NULL)\n     remove_child_with_prev (child, prev);\n   else\n     {\n       skeleton->die_id.die_type_node = child->die_id.die_type_node;\n-      replace_child (child, skeleton, prev);\n+\n+      /* If the original DIE was a specification, we need to put\n+         the skeleton under the parent DIE of the declaration.\n+\t This leaves the original declaration in the tree, but\n+\t it will be pruned later since there are no longer any\n+\t references to it.  */\n+      if (orig_parent != NULL)\n+\t{\n+\t  remove_child_with_prev (child, prev);\n+\t  add_child_die (orig_parent, skeleton);\n+\t}\n+      else\n+\treplace_child (child, skeleton, prev);\n     }\n \n   return skeleton;\n@@ -7264,11 +7291,9 @@ break_out_comdat_types (dw_die_ref die)\n         generate_type_signature (c, type_node);\n \n         /* Copy the declaration context, attributes, and children of the\n-           declaration into the new compile unit DIE.  */\n-\tcopy_declaration_context (unit, c);\n-\n-        /* Remove this DIE from the main CU.  */\n-\treplacement = remove_child_or_replace_with_skeleton (c, prev);\n+           declaration into the new type unit DIE, then remove this DIE\n+\t   from the main CU (or replace it with a skeleton if necessary).  */\n+\treplacement = remove_child_or_replace_with_skeleton (unit, c, prev);\n \n         /* Break out nested types into their own type units.  */\n         break_out_comdat_types (c);"}, {"sha": "860f7a89b81fb1207401e04e167b4f2c43211ad8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d663cb94cae4396a78299c7da834eb7251a3079", "patch": "@@ -1,3 +1,9 @@\n+2012-01-20   Cary Coutant  <ccoutant@google.com>\n+\t     Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR debug/45682\n+\t* g++.dg/debug/dwarf2/nested-3.C: New test.\n+\n 2012-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51402"}, {"sha": "707f02d89b74cb6424768f3bbe4728b383a7f645", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/nested-3.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnested-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d663cb94cae4396a78299c7da834eb7251a3079/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnested-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fnested-3.C?ref=2d663cb94cae4396a78299c7da834eb7251a3079", "patch": "@@ -0,0 +1,54 @@\n+// Origin: PR debug/45682\n+// { dg-options \"-g -fno-merge-debug-strings -gdwarf-4 -dA -fdebug-types-section\" }\n+\n+namespace thread {\n+\n+class Executor {\n+ public:\n+  static Executor* CurrentExecutor();\n+};\n+\n+}\n+\n+namespace thread {\n+\n+Executor* Executor::CurrentExecutor() {\n+  return 0;\n+}\n+\n+}\n+\n+thread::Executor *te;\n+\n+int\n+main ()\n+{\n+    return 0;\n+}\n+\n+// We want to express the fact that the DIE for the definition of\n+// 'Executor::CurrentExecutor' is a grand-child of the DIE for the\n+// namespace 'thread'.  We must have something like this output:\n+//\t.uleb128 0x8\t# (DIE (0x29) DW_TAG_namespace)\n+//\t.ascii \"thread\\0\"\t# DW_AT_name\n+//\t.byte   0x1\t# DW_AT_decl_file (.../testsuite/g++.dg/debug/dwarf2/nested-3.C)\n+//\t.byte   0x4\t# DW_AT_decl_line\n+//\t.long   0x4b\t# DW_AT_sibling\n+//\t.uleb128 0x9\t# (DIE (0x34) DW_TAG_class_type)\n+//\t.long   .LASF0\t# DW_AT_name: \"Executor\"\n+//\t\t\t# DW_AT_declaration\n+//\t.uleb128 0x5\t# (DIE (0x39) DW_TAG_subprogram)\n+//\t\t\t# DW_AT_external\n+//\t.long   .LASF1\t# DW_AT_name: \"CurrentExecutor\"\n+//\t.byte   0x1\t# DW_AT_decl_file (.../testsuite/g++.dg/debug/dwarf2/nested-3.C)\n+//\t.byte   0x8\t# DW_AT_decl_line\n+//\t.long   .LASF2\t# DW_AT_linkage_name: \"_ZN6thread8Executor15CurrentExecutorEv\"\n+//\t.long   0x4b\t# DW_AT_type\n+//\t.byte   0x1\t# DW_AT_accessibility\n+//\t\t\t# DW_AT_declaration\n+//\t.byte   0\t# end of children of DIE 0x34\n+//\t.byte   0\t# end of children of DIE 0x29\n+//\n+//     Hence the scary regexp:\n+//\n+//     { dg-final { scan-assembler \"\\[^\\n\\r\\]*\\\\(DIE \\\\(0x(\\[0-9a-f\\]+)\\\\) DW_TAG_namespace\\\\)\\[\\n\\r\\]+\\[^\\n\\r\\]*\\\"thread\\[\\^\\n\\r]+\\[\\n\\r\\]+(\\[^\\n\\r\\]*\\[\\n\\r\\]+)+\\[^\\n\\r\\]*\\\\(DIE \\\\(0x(\\[0-9a-f\\]+)\\\\) DW_TAG_class_type\\\\)\\[\\n\\r\\]+\\[^\\n\\r\\]*\\\"Executor\\[^\\n\\r\\]+\\[\\n\\r\\]+\\[^\\n\\r\\]*DW_AT_declaration\\[\\n\\r\\]+\\[^\\n\\r\\]*\\\\(DIE\\[^\\n\\r\\]*DW_TAG_subprogram\\\\)\\[\\n\\r\\]+(\\[^\\n\\r\\]*\\[\\n\\r\\]+)+\\[^\\n\\r\\]*\\\"CurrentExecutor\\[^\\n\\r\\]+\\[\\n\\r\\]+(\\[^\\n\\r\\]*\\[\\n\\r\\]+)+(\\[^\\n\\r\\]*\\[\\n\\r\\]+)+\\[^\\n\\r\\]*end of children of DIE 0x\\\\3\\[\\n\\r]+\\[^\\n\\r\\]*end of children of DIE 0x\\\\1\\[\\n\\r]+\" } }"}]}