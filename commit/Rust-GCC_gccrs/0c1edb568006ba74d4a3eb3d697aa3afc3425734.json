{"sha": "0c1edb568006ba74d4a3eb3d697aa3afc3425734", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxZWRiNTY4MDA2YmE3NGQ0YTNlYjNkNjk3YWEzYWZjMzQyNTczNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-06-06T10:47:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:47:54Z"}, "message": "sprint.ads, sprint.adb (Sprint_Node_Actual): Output aggregate for exceptions.\n\n2007-04-20  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* sprint.ads, sprint.adb (Sprint_Node_Actual): Output aggregate for\n\texceptions.\n\t(Write_Itype): Handle case of string literal subtype, which\n\tcomes up in this context.\n\t(Update_Itype): when debugging expanded code, update sloc of itypes\n\tassociated with defining_identifiers and ranges, for gdb use.\n\t(Sprint_Node_Actual): Add static keyword to object or exception\n\tdeclaration output if Is_Statically_Allocated is True.\n\t(Sprint_End_Label): Set entity of end marker for a subprogram, package,\n\tor task body, so that the tree carries the proper Sloc information for\n\tdebugging use.\n\t(Write_Indent): In Dump_Source_Text mode, ignore implicit label nodes\n\nFrom-SVN: r125463", "tree": {"sha": "4bbd9660ec041e83c175e60d52a965c342281767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bbd9660ec041e83c175e60d52a965c342281767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c1edb568006ba74d4a3eb3d697aa3afc3425734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1edb568006ba74d4a3eb3d697aa3afc3425734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1edb568006ba74d4a3eb3d697aa3afc3425734", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1edb568006ba74d4a3eb3d697aa3afc3425734/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0600d9bc835c519013e43a91d434284b7dc868e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0600d9bc835c519013e43a91d434284b7dc868e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0600d9bc835c519013e43a91d434284b7dc868e5"}], "stats": {"total": 205, "additions": 164, "deletions": 41}, "files": [{"sha": "23b284b1934d18de1ba7547f0cce7293a2509308", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 150, "deletions": 31, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1edb568006ba74d4a3eb3d697aa3afc3425734/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1edb568006ba74d4a3eb3d697aa3afc3425734/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=0c1edb568006ba74d4a3eb3d697aa3afc3425734", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -192,6 +192,15 @@ package body Sprint is\n    procedure Sprint_Bar_List (List : List_Id);\n    --  Print the given list with items separated by vertical bars\n \n+   procedure Sprint_End_Label\n+     (Node    : Node_Id;\n+      Default : Node_Id);\n+   --  Print the end label for a Handled_Sequence_Of_Statements in a body.\n+   --  If there is not end label, use the defining identifier of the enclosing\n+   --  construct. If the end label is present, treat it as a reference to the\n+   --  defining entity of the construct: this guarantees that it carries the\n+   --  proper sloc information for debugging purposes.\n+\n    procedure Sprint_Node_Actual (Node : Node_Id);\n    --  This routine prints its node argument. It is a lower level routine than\n    --  Sprint_Node, in that it does not bother about rewritten trees.\n@@ -202,6 +211,12 @@ package body Sprint is\n    --  of the sprinted node Node. Note that this is done after printing\n    --  Node, so that the Sloc is the proper updated value for the debug file.\n \n+   procedure Update_Itype (Node : Node_Id);\n+   --  Update the Sloc of an itype that is not attached to the tree, when\n+   --  debugging expanded code. This routine is called from nodes whose\n+   --  type can be an Itype, such as defining_identifiers that may be of\n+   --  an anonymous access type, or ranges in slices.\n+\n    procedure Write_Char_Sloc (C : Character);\n    --  Like Write_Char, except that if C is non-blank, Set_Debug_Sloc is\n    --  called to ensure that the current node has a proper Sloc set.\n@@ -411,25 +426,45 @@ package body Sprint is\n    -- pg --\n    --------\n \n-   procedure pg (Node : Node_Id) is\n+   procedure pg (Arg : Union_Id) is\n    begin\n       Dump_Generated_Only := True;\n       Dump_Original_Only := False;\n       Current_Source_File := No_Source_File;\n-      Sprint_Node (Node);\n+\n+      if Arg in List_Range then\n+         Sprint_Node_List (List_Id (Arg));\n+\n+      elsif Arg in Node_Range then\n+         Sprint_Node (Node_Id (Arg));\n+\n+      else\n+         null;\n+      end if;\n+\n       Write_Eol;\n    end pg;\n \n    --------\n    -- po --\n    --------\n \n-   procedure po (Node : Node_Id) is\n+   procedure po (Arg : Union_Id) is\n    begin\n       Dump_Generated_Only := False;\n       Dump_Original_Only := True;\n       Current_Source_File := No_Source_File;\n-      Sprint_Node (Node);\n+\n+      if Arg in List_Range then\n+         Sprint_Node_List (List_Id (Arg));\n+\n+      elsif Arg in Node_Range then\n+         Sprint_Node (Node_Id (Arg));\n+\n+      else\n+         null;\n+      end if;\n+\n       Write_Eol;\n    end po;\n \n@@ -461,12 +496,22 @@ package body Sprint is\n    -- ps --\n    --------\n \n-   procedure ps (Node : Node_Id) is\n+   procedure ps (Arg : Union_Id) is\n    begin\n       Dump_Generated_Only := False;\n       Dump_Original_Only := False;\n       Current_Source_File := No_Source_File;\n-      Sprint_Node (Node);\n+\n+      if Arg in List_Range then\n+         Sprint_Node_List (List_Id (Arg));\n+\n+      elsif Arg in Node_Range then\n+         Sprint_Node (Node_Id (Arg));\n+\n+      else\n+         null;\n+      end if;\n+\n       Write_Eol;\n    end ps;\n \n@@ -617,6 +662,34 @@ package body Sprint is\n       end if;\n    end Sprint_Bar_List;\n \n+   ----------------------\n+   -- Sprint_End_Label --\n+   ----------------------\n+\n+   procedure Sprint_End_Label\n+     (Node    : Node_Id;\n+      Default : Node_Id)\n+   is\n+   begin\n+      if Present (Node)\n+        and then Present (End_Label (Node))\n+        and then Is_Entity_Name (End_Label (Node))\n+      then\n+         Set_Entity (End_Label (Node), Default);\n+\n+         --  For a function whose name is an operator, use the qualified name\n+         --  created for the defining entity.\n+\n+         if Nkind (End_Label (Node)) = N_Operator_Symbol then\n+            Set_Chars (End_Label (Node), Chars (Default));\n+         end if;\n+\n+         Sprint_Node (End_Label (Node));\n+      else\n+         Sprint_Node (Default);\n+      end if;\n+   end Sprint_End_Label;\n+\n    -----------------------\n    -- Sprint_Comma_List --\n    -----------------------\n@@ -1400,7 +1473,19 @@ package body Sprint is\n          when N_Exception_Declaration =>\n             if Write_Indent_Identifiers (Node) then\n                Write_Str_With_Col_Check (\" : \");\n-               Write_Str_Sloc (\"exception;\");\n+\n+               if Is_Statically_Allocated (Defining_Identifier (Node)) then\n+                  Write_Str_With_Col_Check (\"static \");\n+               end if;\n+\n+               Write_Str_Sloc (\"exception\");\n+\n+               if Present (Expression (Node)) then\n+                  Write_Str (\" := \");\n+                  Sprint_Node (Expression (Node));\n+               end if;\n+\n+               Write_Char (';');\n             end if;\n \n          when N_Exception_Handler =>\n@@ -1649,7 +1734,7 @@ package body Sprint is\n \n          when N_Full_Type_Declaration =>\n             Write_Indent_Str_Sloc (\"type \");\n-            Write_Id (Defining_Identifier (Node));\n+            Sprint_Node (Defining_Identifier (Node));\n             Write_Discr_Specs (Node);\n             Write_Str_With_Col_Check (\" is \");\n             Sprint_Node (Type_Definition (Node));\n@@ -1920,7 +2005,11 @@ package body Sprint is\n             Set_Debug_Sloc;\n \n             if Write_Indent_Identifiers (Node) then\n-               Write_Str (\" : \");\n+               Write_Str_With_Col_Check (\" : \");\n+\n+               if Is_Statically_Allocated (Defining_Identifier (Node)) then\n+                  Write_Str_With_Col_Check (\"static \");\n+               end if;\n \n                if Aliased_Present (Node) then\n                   Write_Str_With_Col_Check (\"aliased \");\n@@ -2133,7 +2222,8 @@ package body Sprint is\n             end if;\n \n             Write_Indent_Str (\"end \");\n-            Sprint_Node (Defining_Unit_Name (Node));\n+            Sprint_End_Label\n+              (Handled_Statement_Sequence (Node), Defining_Unit_Name (Node));\n             Write_Char (';');\n \n          when N_Package_Body_Stub =>\n@@ -2359,7 +2449,7 @@ package body Sprint is\n \n          when N_Protected_Type_Declaration =>\n             Write_Indent_Str_Sloc (\"protected type \");\n-            Write_Id (Defining_Identifier (Node));\n+            Sprint_Node (Defining_Identifier (Node));\n             Write_Discr_Specs (Node);\n \n             if Present (Interface_List (Node)) then\n@@ -2446,6 +2536,7 @@ package body Sprint is\n             Sprint_Node (Low_Bound (Node));\n             Write_Str_Sloc (\" .. \");\n             Sprint_Node (High_Bound (Node));\n+            Update_Itype (Node);\n \n          when N_Range_Constraint =>\n             Write_Str_With_Col_Check_Sloc (\"range \");\n@@ -2557,12 +2648,11 @@ package body Sprint is\n \n          when N_Single_Task_Declaration =>\n             Write_Indent_Str_Sloc (\"task \");\n-            Write_Id (Defining_Identifier (Node));\n+            Sprint_Node (Defining_Identifier (Node));\n \n             if Present (Task_Definition (Node)) then\n                Write_Str (\" is\");\n                Sprint_Node (Task_Definition (Node));\n-               Write_Id (Defining_Identifier (Node));\n             end if;\n \n             Write_Char (';');\n@@ -2604,7 +2694,10 @@ package body Sprint is\n             Sprint_Node (Handled_Statement_Sequence (Node));\n \n             Write_Indent_Str (\"end \");\n-            Sprint_Node (Defining_Unit_Name (Specification (Node)));\n+\n+            Sprint_End_Label\n+              (Handled_Statement_Sequence (Node),\n+                 Defining_Unit_Name (Specification (Node)));\n             Write_Char (';');\n \n             if Is_List_Member (Node)\n@@ -2644,7 +2737,7 @@ package body Sprint is\n \n          when N_Subtype_Declaration =>\n             Write_Indent_Str_Sloc (\"subtype \");\n-            Write_Id (Defining_Identifier (Node));\n+            Sprint_Node (Defining_Identifier (Node));\n             Write_Str (\" is \");\n \n             --  Ada 2005 (AI-231)\n@@ -2676,7 +2769,8 @@ package body Sprint is\n             Write_Indent_Str (\"begin\");\n             Sprint_Node (Handled_Statement_Sequence (Node));\n             Write_Indent_Str (\"end \");\n-            Write_Id (Defining_Identifier (Node));\n+            Sprint_End_Label\n+              (Handled_Statement_Sequence (Node), Defining_Identifier (Node));\n             Write_Char (';');\n \n          when N_Task_Body_Stub =>\n@@ -2694,10 +2788,11 @@ package body Sprint is\n             end if;\n \n             Write_Indent_Str (\"end \");\n+            Sprint_End_Label (Node, Defining_Identifier (Parent (Node)));\n \n          when N_Task_Type_Declaration =>\n             Write_Indent_Str_Sloc (\"task type \");\n-            Write_Id (Defining_Identifier (Node));\n+            Sprint_Node (Defining_Identifier (Node));\n             Write_Discr_Specs (Node);\n \n             if Present (Interface_List (Node)) then\n@@ -2713,7 +2808,6 @@ package body Sprint is\n                end if;\n \n                Sprint_Node (Task_Definition (Node));\n-               Write_Id (Defining_Identifier (Node));\n             end if;\n \n             Write_Char (';');\n@@ -2879,16 +2973,6 @@ package body Sprint is\n                end if;\n             end if;\n \n-         when N_With_Type_Clause =>\n-            Write_Indent_Str (\"with type \");\n-            Sprint_Node_Sloc (Name (Node));\n-\n-            if Tagged_Present (Node) then\n-               Write_Str (\" is tagged;\");\n-            else\n-               Write_Str (\" is access;\");\n-            end if;\n-\n       end case;\n \n       if Nkind (Node) in N_Subexpr\n@@ -3026,6 +3110,20 @@ package body Sprint is\n       end if;\n    end Sprint_Right_Opnd;\n \n+   ------------------\n+   -- Update_Itype --\n+   ------------------\n+\n+   procedure Update_Itype (Node : Node_Id) is\n+   begin\n+      if Present (Etype (Node))\n+        and then Is_Itype (Etype (Node))\n+        and then Debug_Generated_Code\n+      then\n+         Set_Sloc (Etype (Node), Sloc (Node));\n+      end if;\n+   end Update_Itype;\n+\n    ---------------------\n    -- Write_Char_Sloc --\n    ---------------------\n@@ -3300,6 +3398,7 @@ package body Sprint is\n    function Write_Identifiers (Node : Node_Id) return Boolean is\n    begin\n       Sprint_Node (Defining_Identifier (Node));\n+      Update_Itype (Defining_Identifier (Node));\n \n       --  The remainder of the declaration must be printed unless we are\n       --  printing the original tree and this is not the last identifier\n@@ -3367,7 +3466,14 @@ package body Sprint is\n       if Indent_Annull_Flag then\n          Indent_Annull_Flag := False;\n       else\n-         if Dump_Source_Text and then Loc > No_Location then\n+         --  Deal with Dump_Source_Text output. Note that we ignore implicit\n+         --  label declarations, since they typically have the sloc of the\n+         --  corresponding label, which really messes up the -gnatL output.\n+\n+         if Dump_Source_Text\n+           and then Loc > No_Location\n+           and then Nkind (Dump_Node) /= N_Implicit_Label_Declaration\n+         then\n             if Get_Source_File_Index (Loc) = Current_Source_File then\n                Write_Source_Lines\n                  (Get_Physical_Line_Number (Sloc (Dump_Node)));\n@@ -3410,7 +3516,6 @@ package body Sprint is\n \n       return\n          not Dump_Original_Only or else not More_Ids (Node);\n-\n    end Write_Indent_Identifiers;\n \n    -----------------------------------\n@@ -3784,6 +3889,20 @@ package body Sprint is\n                         Write_Id (Etype (Typ));\n                      end if;\n \n+                  when E_String_Literal_Subtype =>\n+                     declare\n+                        LB  : constant Uint :=\n+                                Intval (String_Literal_Low_Bound (Typ));\n+                        Len : constant Uint :=\n+                                String_Literal_Length (Typ);\n+                     begin\n+                        Write_Str (\"String (\");\n+                        Write_Int (UI_To_Int (LB));\n+                        Write_Str (\" .. \");\n+                        Write_Int (UI_To_Int (LB + Len) - 1);\n+                        Write_Str (\");\");\n+                     end;\n+\n                   --  For all other Itypes, print ??? (fill in later)\n \n                   when others =>"}, {"sha": "2fc17e24d85db812c564c672b6e8920111b6d77c", "filename": "gcc/ada/sprint.ads", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1edb568006ba74d4a3eb3d697aa3afc3425734/gcc%2Fada%2Fsprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1edb568006ba74d4a3eb3d697aa3afc3425734/gcc%2Fada%2Fsprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.ads?ref=0c1edb568006ba74d4a3eb3d697aa3afc3425734", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,6 +44,8 @@ package Sprint is\n    --  purely for the purposes of this printout (they are not recognized by the\n    --  parser)\n \n+   --  Could use more documentation for all of these ???\n+\n    --    Allocator                           new xxx [storage_pool = xxx]\n    --    Cleanup action                      at end procedure name;\n    --    Conditional expression              (if expr then expr else expr)\n@@ -75,6 +77,7 @@ package Sprint is\n    --    Rem wi Treat_Fixed_As_Integer       x #rem y\n    --    Reference                           expression'reference\n    --    Shift nodes                         shift_name!(expr, count)\n+   --    Static declaration                  name : static xxx\n    --    Subprogram_Info                     subprog'Subprogram_Info\n    --    Unchecked conversion                target_type!(source_expression)\n    --    Unchecked expression                `(expression)\n@@ -136,19 +139,20 @@ package Sprint is\n    --  Same as normal Sprint_Node procedure, except that one leading\n    --  blank is output before the node if it is non-empty.\n \n-   procedure pg (Node : Node_Id);\n+   procedure pg (Arg : Union_Id);\n    pragma Export (Ada, pg);\n-   --  Print generated source for node N (like -gnatdg output). This is\n-   --  intended only for use from gdb for debugging purposes.\n+   --  Print generated source for argument N (like -gnatdg output). Intended\n+   --  only for use from gdb for debugging purposes. Currently, Arg may be a\n+   --  List_Id or a Node_Id (anything else outputs a blank line).\n \n-   procedure po (Node : Node_Id);\n+   procedure po (Arg : Union_Id);\n    pragma Export (Ada, po);\n-   --  Print original source for node N (like -gnatdo output). This is\n-   --  intended only for use from gdb for debugging purposes.\n+   --  Like pg, but prints original source for the argument (like -gnatdo\n+   --  output). Intended only for use from gdb for debugging purposes.\n \n-   procedure ps (Node : Node_Id);\n+   procedure ps (Arg : Union_Id);\n    pragma Export (Ada, ps);\n-   --  Print generated and original source for node N (like -gnatds output).\n-   --  This is intended only for use from gdb for debugging purposes.\n+   --  Like pg, but prints generated and original source for the argument (like\n+   --  -gnatds output). Intended only for use from gdb for debugging purposes.\n \n end Sprint;"}]}