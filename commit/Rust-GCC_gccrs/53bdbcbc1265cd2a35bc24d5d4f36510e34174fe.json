{"sha": "53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiZGJjYmMxMjY1Y2QyYTM1YmMyNGQ1ZDRmMzY1MTBlMzQxNzRmZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-04-13T22:55:16Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-04-13T22:55:16Z"}, "message": "re PR rtl-optimization/79916 (ICE in Max. number of generated reload insns per insn is achieved (90))\n\n2018-04-13  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/79916\n\t* config/rs6000/rs6000.c (rs6000_emit_move): Use assigned hard\n\tregs (if any) to define how to gnerate SD moves when LRA is in\n\tprogress.\n\n2018-04-13  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/79916\n\t* gcc.target/powerpc/pr79916.c: New.\n\nFrom-SVN: r259379", "tree": {"sha": "9d63ceaacac5acb2d68403ccf0a3a5ec1191bd4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d63ceaacac5acb2d68403ccf0a3a5ec1191bd4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "465d00877e3d96ff827f02a699e7398ef62bef67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465d00877e3d96ff827f02a699e7398ef62bef67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465d00877e3d96ff827f02a699e7398ef62bef67"}], "stats": {"total": 584, "additions": 580, "deletions": 4}, "files": [{"sha": "e04efca20d42612023170135cc5d22b796aec68f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "patch": "@@ -1,3 +1,10 @@\n+2018-04-13  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/79916\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Use assigned hard\n+\tregs (if any) to define how to gnerate SD moves when LRA is in\n+\tprogress.\n+\n 2018-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/85393"}, {"sha": "c74e2a39d80dcb9649876f683f434cbb5c4c3070", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "patch": "@@ -10610,7 +10610,9 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n       if (regno >= FIRST_PSEUDO_REGISTER)\n \t{\n \t  cl = reg_preferred_class (regno);\n-\t  regno = cl == NO_REGS ? -1 : ira_class_hard_regs[cl][1];\n+\t  regno = reg_renumber[regno];\n+\t  if (regno < 0)\n+\t    regno = cl == NO_REGS ? -1 : ira_class_hard_regs[cl][1];\n \t}\n       if (regno >= 0 && ! FP_REGNO_P (regno))\n \t{\n@@ -10635,7 +10637,9 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n \t{\n \t  cl = reg_preferred_class (regno);\n \t  gcc_assert (cl != NO_REGS);\n-\t  regno = ira_class_hard_regs[cl][0];\n+\t  regno = reg_renumber[regno];\n+\t  if (regno < 0)\n+\t    regno = ira_class_hard_regs[cl][0];\n \t}\n       if (FP_REGNO_P (regno))\n \t{\n@@ -10664,7 +10668,9 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n       if (regno >= FIRST_PSEUDO_REGISTER)\n \t{\n \t  cl = reg_preferred_class (regno);\n-\t  regno = cl == NO_REGS ? -1 : ira_class_hard_regs[cl][0];\n+\t  regno = reg_renumber[regno];\n+\t  if (regno < 0)\n+\t    regno = cl == NO_REGS ? -1 : ira_class_hard_regs[cl][0];\n \t}\n       if (regno >= 0 && ! FP_REGNO_P (regno))\n \t{\n@@ -10689,7 +10695,9 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n \t{\n \t  cl = reg_preferred_class (regno);\n \t  gcc_assert (cl != NO_REGS);\n-\t  regno = ira_class_hard_regs[cl][0];\n+\t  regno = reg_renumber[regno];\n+\t  if (regno < 0)\n+\t    regno = ira_class_hard_regs[cl][0];\n \t}\n       if (FP_REGNO_P (regno))\n \t{"}, {"sha": "25225ec033ead263adcff6beb7a2a4f8e817b0a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "patch": "@@ -1,3 +1,8 @@\n+2018-04-13  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/79916\n+\t* gcc.target/powerpc/pr79916.c: New.\n+\n 2018-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/85393"}, {"sha": "00f772e82af11028438059ec86e2f7fba65bda1b", "filename": "gcc/testsuite/gcc.target/powerpc/pr79916.c", "status": "added", "additions": 556, "deletions": 0, "changes": 556, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79916.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79916.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr79916.c?ref=53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "patch": "@@ -0,0 +1,556 @@\n+/* { dg-do compile  { target { powerpc*-*-* } } } */\n+/* { dg-options \"-fno-expensive-optimizations --param ira-max-conflict-table-size=0 -mno-popcntd -O3\" } */\n+\n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n+#define TESTVAL_NEG(VAL,SUF,SIZE)\t\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  si = VAL;\t\t\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  a = si;\t\t\t\t\t\t\t\t\\\n+  b = sll;\t\t\t\t\t\t\t\t\\\n+  c = VAL;\t\t\t\t\t\t\t\t\\\n+  d = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&c,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&d,SIZE) != 0))\t\t\\\n+    __builtin_abort ();\n+\n+#define TESTVAL_NEG_BIG(VAL,SUF,SIZE)\t\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  a = sll;\t\t\t\t\t\t\t\t\\\n+  b = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) != 0))\t\t\\\n+    __builtin_abort ();\n+\n+#define TESTVAL_NONNEG(VAL,SUF,SIZE)\t\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  si = VAL;\t\t\t\t\t\t\t\t\\\n+  ui = VAL;\t\t\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  ull = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  a = si;\t\t\t\t\t\t\t\t\\\n+  b = sll;\t\t\t\t\t\t\t\t\\\n+  c = ui;\t\t\t\t\t\t\t\t\\\n+  d = ull;\t\t\t\t\t\t\t\t\\\n+  e = VAL;\t\t\t\t\t\t\t\t\\\n+  f = VAL;\t\t\t\t\t\t\t\t\\\n+  g = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  h = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&a, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&b,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&c,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&d,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&e,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&f,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&g,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&x, (void *)&h,SIZE) != 0))\t\t\\\n+    __builtin_abort ();\n+\n+#define TESTVAL_NONNEG_BIG(VAL,SUF,SIZE)\t\t\t\t\\\n+  x = PASTE(PASTE(VAL,.),SUF);\t\t\t\t\t\t\\\n+  sll = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  ull = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  b = sll;\t\t\t\t\t\t\t\t\\\n+  d = ull;\t\t\t\t\t\t\t\t\\\n+  f = PASTE(VAL,LL);\t\t\t\t\t\t\t\\\n+  g = PASTE(VAL,ULL);\t\t\t\t\t\t\t\\\n+  if ((__builtin_memcmp ((void *)&x, (void *)&b, SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&d, (void *)&d,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&f, (void *)&d,SIZE) != 0)\t\t\\\n+      || (__builtin_memcmp ((void *)&g, (void *)&d,SIZE) != 0))\t\t\\\n+    __builtin_abort ();\n+\n+#undef SUFFIX\n+#define SUFFIX DF\n+#undef TYPE\n+#define TYPE _Decimal32\n+  \n+void\n+zeroes_32 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000000, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000000, SUFFIX, sizeof (TYPE));\n+}\n+  \n+void\n+round_32 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (10000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000050, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000010, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (-10000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000050, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000010, SUFFIX, sizeof (TYPE));\n+}\n+\n+#undef SUFFIX\n+#define SUFFIX DD\n+#undef TYPE\n+#define TYPE _Decimal64\n+  \n+void\n+zeroes_64 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000000, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000000, SUFFIX, sizeof (TYPE));\n+}\n+  \n+void\n+round_64 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000010, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000001, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000002, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000003, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000004, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000049, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000051, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000006, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000007, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000008, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000009, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000010, SUFFIX, sizeof (TYPE));\n+}\n+\n+#undef SUFFIX\n+#define SUFFIX DL\n+#undef TYPE\n+#define TYPE _Decimal128\n+  \n+void\n+zeroes_128 (void)\n+{\n+  volatile TYPE x, a, b, c, d, e, f, g, h;\n+  volatile int si;\n+  volatile unsigned int ui;\n+  volatile long long sll;\n+  volatile unsigned long long ull;\n+\n+  TESTVAL_NONNEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG (1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NONNEG_BIG (9000000000000000000, SUFFIX, sizeof (TYPE));\n+\n+  TESTVAL_NEG (0, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-5000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-9000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-10000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-50000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-90000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-100000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-500000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-900000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG (-1000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-10000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-50000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-90000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-100000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-500000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-900000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-1000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-5000000000000000000, SUFFIX, sizeof (TYPE));\n+  TESTVAL_NEG_BIG (-9000000000000000000, SUFFIX, sizeof (TYPE));\n+}\n+\n+\n+int\n+main ()\n+{\n+  zeroes_32 ();\n+  zeroes_64 ();\n+  zeroes_128 ();\n+  round_32 ();\n+  round_64 ();\n+\n+  return 0;\n+}"}]}