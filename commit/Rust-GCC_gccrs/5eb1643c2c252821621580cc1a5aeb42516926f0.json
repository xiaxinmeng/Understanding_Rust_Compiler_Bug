{"sha": "5eb1643c2c252821621580cc1a5aeb42516926f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViMTY0M2MyYzI1MjgyMTYyMTU4MGNjMWE1YWViNDI1MTY5MjZmMA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-01-25T16:54:33Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-01-25T16:54:33Z"}, "message": "re PR libstdc++/29366 (atomics config for sh is weird)\n\nlibstdc++-v3/\n\tPR target/29366\n\t* config/cpu/sh/atomicity.h (__exchange_and_add, __atomic_add): \n\tRemove SH4A inline asm and lock based implementations and use the\n\tdefaults from ext/atomicity.h.\n\nFrom-SVN: r220094", "tree": {"sha": "e70b5313ee7c1ea4a323c41b5d6a2b4476edbc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e70b5313ee7c1ea4a323c41b5d6a2b4476edbc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb1643c2c252821621580cc1a5aeb42516926f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb1643c2c252821621580cc1a5aeb42516926f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb1643c2c252821621580cc1a5aeb42516926f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb1643c2c252821621580cc1a5aeb42516926f0/comments", "author": null, "committer": null, "parents": [{"sha": "1f22bef50060f73bf68e8854d77566f1d0172560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f22bef50060f73bf68e8854d77566f1d0172560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f22bef50060f73bf68e8854d77566f1d0172560"}], "stats": {"total": 98, "additions": 16, "deletions": 82}, "files": [{"sha": "1620f4e941254617755600ae1f76e70c3a6eb9ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb1643c2c252821621580cc1a5aeb42516926f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb1643c2c252821621580cc1a5aeb42516926f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5eb1643c2c252821621580cc1a5aeb42516926f0", "patch": "@@ -1,3 +1,10 @@\n+2015-01-25  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/29366\n+\t* config/cpu/sh/atomicity.h (__exchange_and_add, __atomic_add): \n+\tRemove SH4A inline asm and lock based implementations and use the\n+\tdefaults from ext/atomicity.h.\n+\n 2015-01-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Tighten GLIBCXX_3.4 patterns to not match"}, {"sha": "4ae4fc4b039fcb04c9f0270efaf47de84d0febbf", "filename": "libstdc++-v3/config/cpu/sh/atomicity.h", "status": "modified", "additions": 9, "deletions": 82, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb1643c2c252821621580cc1a5aeb42516926f0/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb1643c2c252821621580cc1a5aeb42516926f0/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsh%2Fatomicity.h?ref=5eb1643c2c252821621580cc1a5aeb42516926f0", "patch": "@@ -22,87 +22,14 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-#ifdef __SH4A__\n+// Use the default atomicity stuff, which will use __atomic* builtins\n+// if threads are available, or the *_single functions on single-thread\n+// configurations.\n+// Actually we wouldn't need this header at all, but because of PR 53579\n+// libstdc++'s configury will not pickup the -matomic-model= option when\n+// set in the environment.  This makes it impossible to enable the proper\n+// atomic model on SH without modifying GCC itself, because libstdc++ always\n+// thinks the target doesn't do any atomics and uses the default mutex based\n+// implementation from cpu/generic/atomicity/mutex.\n \n #include <ext/atomicity.h>\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  typedef int _Atomic_word;\n-\n-  _Atomic_word\n-  __attribute__ ((__unused__))\n-  __exchange_and_add (volatile _Atomic_word* __mem, int __val) throw ()\n-  {\n-    _Atomic_word __result;\n-\n-    __asm__ __volatile__\n-      (\"0:\\n\"\n-       \"\\tmovli.l\\t@%2,r0\\n\"\n-       \"\\tmov\\tr0,%1\\n\"\n-       \"\\tadd\\t%3,r0\\n\"\n-       \"\\tmovco.l\\tr0,@%2\\n\"\n-       \"\\tbf\\t0b\"\n-       : \"+m\" (*__mem), \"=&r\" (__result)\n-       : \"r\" (__mem), \"rI08\" (__val)\n-       : \"r0\");\n-\n-    return __result;\n-  }\n-\n-\n-  void\n-  __attribute__ ((__unused__))\n-  __atomic_add (volatile _Atomic_word* __mem, int __val) throw ()\n-  {\n-    asm(\"0:\\n\"\n-\t\"\\tmovli.l\\t@%1,r0\\n\"\n-\t\"\\tadd\\t%2,r0\\n\"\n-\t\"\\tmovco.l\\tr0,@%1\\n\"\n-\t\"\\tbf\\t0b\"\n-\t: \"+m\" (*__mem)\n-\t: \"r\" (__mem), \"rI08\" (__val)\n-\t: \"r0\");\n-  }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n-#else /* !__SH4A__ */\n-\n-/* This is generic/atomicity.h */\n-\n-#include <ext/atomicity.h>\n-#include <ext/concurrence.h>\n-\n-namespace \n-{\n-  __gnu_cxx::__mutex atomic_mutex;\n-} // anonymous namespace\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  _Atomic_word\n-  __attribute__ ((__unused__))\n-  __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()\n-  {\n-    __gnu_cxx::__scoped_lock sentry(atomic_mutex);\n-    _Atomic_word __result;\n-    __result = *__mem;\n-    *__mem += __val;\n-    return __result;\n-  }\n-\n-  void\n-  __attribute__ ((__unused__))\n-  __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()\n-  { __exchange_and_add(__mem, __val); }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n-#endif /* !__SH4A__ */"}]}