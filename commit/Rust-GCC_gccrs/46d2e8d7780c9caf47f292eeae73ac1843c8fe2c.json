{"sha": "46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkMmU4ZDc3ODBjOWNhZjQ3ZjI5MmVlYWU3M2FjMTg0M2M4ZmUyYw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2001-07-24T12:27:03Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2001-07-24T12:27:03Z"}, "message": "irix6-libc-compat.c: New file.\n\n\t* config/mips/irix6-libc-compat.c: New file.\n\t* config/mips/t-iris6 (LIB2FUNCS_STATIC_EXTRA): Use it.\n\t* doc/install.texi (Specific, mips*-sgi-irix6): Mention structure\n\tpassing workaround.\n\nFrom-SVN: r44294", "tree": {"sha": "7b95158e28ff7e2de1e28ae702a2c73439c575de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b95158e28ff7e2de1e28ae702a2c73439c575de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/comments", "author": null, "committer": null, "parents": [{"sha": "cd6e5291125aababb4af2bc5ee29c41778b340eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6e5291125aababb4af2bc5ee29c41778b340eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6e5291125aababb4af2bc5ee29c41778b340eb"}], "stats": {"total": 154, "additions": 153, "deletions": 1}, "files": [{"sha": "4e70b9512073e46a6e3a639710ca707393fef112", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "patch": "@@ -1,3 +1,10 @@\n+2001-07-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config/mips/irix6-libc-compat.c: New file.\n+\t* config/mips/t-iris6 (LIB2FUNCS_STATIC_EXTRA): Use it.\n+\t* doc/install.texi (Specific, mips*-sgi-irix6): Mention structure\n+\tpassing workaround.\n+\n 2001-07-24  lars brinkhoff  <lars@nocrew.org>\n \n \t* rtl.texi (REG_POINTER): Document."}, {"sha": "cc81ab5a109aba56bf1e15b62321aebeca151153", "filename": "gcc/config/mips/irix6-libc-compat.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2Fconfig%2Fmips%2Firix6-libc-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2Fconfig%2Fmips%2Firix6-libc-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firix6-libc-compat.c?ref=46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "patch": "@@ -0,0 +1,140 @@\n+/* Compensate for inconsistent structure passing conventions on IRIX 6.  */\n+/* Compile this one with gcc.  */\n+/* Copyright (C) 2001  Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* GCC doesn't correctly implement the structure and union passing and return\n+   conventions of the N32 and N64 ABIs on IRIX 6, as described in the\n+   MIPSpro N32 ABI Handbook, ch. 2, Calling Convention Implementations, p.7.\n+   The ABI requires that structures (or trailing parts of structures) smaller\n+   than 8 bytes (a 64-bit register) are left-justified, whereas GCC\n+   right-justifies them.\n+\n+   While GCC is internally consistent, calling routines compiled with a\n+   compiler that does implement the documented ABI (like SGIs MIPSpro C\n+   compiler) doesn't work.  This is primarily an issue for system libraries\n+   like libc.  Fortunately, there exist only very few routines that take\n+   structure value arguments or return structures by value, so until the\n+   underlying bug is fixed, it is possible to work around it by providing\n+   wrapper functions for the few affected routines that compensate for the\n+   inconsistent alignment.\n+\n+   These wrappers rely on the fact that e.g. libc contains weak versions of\n+   those routines, and the real implementation is provided by _-prefixed\n+   variants.  So we can provide our own versions, which will only be linked\n+   if the application uses any of the affected functions, calling the private\n+   variants after shifting the arguments or results as required.\n+\n+   This is a rewrite of code created by Andy Polyakov.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+\n+/* This must only be used for the N32 and N64 ABIs.  O32 is correct.  */\n+\n+#if _MIPS_SIM == _ABIN32 || _MIPS_SIM == _ABI64\n+\n+/* The affected arguments need to be shifted by\n+\n+\tBITS_PER_WORD - (sizeof (arg) * BITS_PER_UNIT).\n+\n+   Since only 32-bit args and results are involved, the shift count is\n+   always 32.  */\n+#define SHIFT_BITS\t32\n+\n+extern machreg_t _inet_ntoa\tPARAMS ((machreg_t));\n+extern machreg_t _inet_lnaof\tPARAMS ((machreg_t));\n+extern machreg_t _inet_netof\tPARAMS ((machreg_t));\n+extern machreg_t _inet_makeaddr\tPARAMS ((machreg_t, machreg_t));\n+\n+/* <arpa/inet.h> has\n+\n+\tchar *inet_ntoa (struct in_addr);\n+\n+   on both IRIX 6.2 and 6.5, with struct in_addr containing a 32-bit int.  */\n+\n+machreg_t\n+inet_ntoa (machreg_t in)\n+{\n+  return _inet_ntoa (in << SHIFT_BITS);\n+}\n+\n+/* <arpa/inet.h> has\n+\n+\tunsigned long inet_lnaof (struct in_addr);\t\t(IRIX 6.2)\n+\tin_addr_t inet_lnaof (struct in_addr);\t\t\t(IRIX 6.5)\n+\n+   in_addr_t is a 32-bit int.  */\n+\n+machreg_t\n+inet_lnaof (machreg_t in)\n+{\n+  return _inet_lnaof (in << SHIFT_BITS);\n+}\n+\n+/* <arpa/inet.h> has\n+\n+\tunsigned long inet_netof (struct in_addr);\t\t(IRIX 6.2)\n+\tin_addr_t inet_netof (struct in_addr);\t\t\t(IRIX 6.5)  */\n+\n+machreg_t\n+inet_netof (machreg_t in)\n+{\n+  return _inet_netof (in << SHIFT_BITS);\n+}\n+\n+/* <arpa/inet.h> has\n+\n+\tstruct in_addr inet_makeaddr (int, int);\t\t(IRIX 6.2)\n+\tstruct in_addr inet_makeaddr (in_addr_t, in_addr_t);\t(IRIX 6.5)  */\n+\n+machreg_t\n+inet_makeaddr (machreg_t net, machreg_t lna)\n+{\n+  return _inet_makeaddr (net, lna) >> SHIFT_BITS;\n+}\n+\n+#if _MIPS_SIM == _ABIN32\n+extern machreg_t _semctl\tPARAMS ((machreg_t, machreg_t, machreg_t, machreg_t));\n+\n+/* <sys/sem.h> has\n+\n+\tint semctl (int, int, int, ...);\n+\n+   where the variadic argument is union semun if used.  union semun contains\n+   an int and two pointers, so the union is already 64 bits wide under the\n+   N64 ABI and alignment is not an issue.  */\n+\n+machreg_t\n+semctl (machreg_t semid, machreg_t semnum, machreg_t cmd, machreg_t arg)\n+{\n+  return _semctl(semid, semnum, cmd, arg << SHIFT_BITS);\n+}\n+#endif /* _ABIN32 */\n+\n+#endif /* _ABIN32 || _ABI64 */"}, {"sha": "c1a710fa8ca1a1f7e81fd869f97473b6991e4334", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "patch": "@@ -53,3 +53,7 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#define FLOAT' > fp-bit.c\n \techo '#undef US_SOFTWARE_GOFAST' >> fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# This is only needed in the static libgcc as a band-aid until gcc correctly\n+# implements the N32/N64 ABI structure passing conventions\n+LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/mips/irix6-libc-compat.c"}, {"sha": "65e576d67b8308b3120af070580908df726011e1", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d2e8d7780c9caf47f292eeae73ac1843c8fe2c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=46d2e8d7780c9caf47f292eeae73ac1843c8fe2c", "patch": "@@ -2779,7 +2779,8 @@ GCC is consistent with itself, but not consistent with the SGI C compiler\n happen are when there are library functions that take/return such\n structures. There are very few such library functions.  Currently this\n is known to affect @code{inet_ntoa}, @code{inet_lnaof},\n-@code{inet_netof}, @code{inet_makeaddr}, and @code{semctl}.\n+@code{inet_netof}, @code{inet_makeaddr}, and @code{semctl}.  Until the\n+bug is fixed, GCC contains workarounds for the known affected functions.\n \n See @uref{http://freeware.sgi.com/,,http://freeware.sgi.com/} for more\n information about using GCC on IRIX platforms."}]}