{"sha": "69498c64a33688edbb9b8dcadb6c5025cebf61f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0OThjNjRhMzM2ODhlZGJiOWI4ZGNhZGI2YzUwMjVjZWJmNjFmNQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2005-11-15T00:45:55Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2005-11-15T00:45:55Z"}, "message": "expmed.c (store_bit_field): Add offset unconditionally for memory targets.\n\n2005-11-14  Dale Johannesen  <dalej@apple.com>\n\n        * expmed.c (store_bit_field):  Add offset unconditionally for\n        memory targets.\n        (extract_bit_field):  Don't force extzv or extv operand into\n        a register if field is too big.\n\nFrom-SVN: r106919", "tree": {"sha": "43b1c5181891aeb6fa652c06e16dcee87285bf34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43b1c5181891aeb6fa652c06e16dcee87285bf34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69498c64a33688edbb9b8dcadb6c5025cebf61f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69498c64a33688edbb9b8dcadb6c5025cebf61f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69498c64a33688edbb9b8dcadb6c5025cebf61f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69498c64a33688edbb9b8dcadb6c5025cebf61f5/comments", "author": null, "committer": null, "parents": [{"sha": "53acd3845fdae40c43ff3a0b813aa6cf5428205b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53acd3845fdae40c43ff3a0b813aa6cf5428205b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53acd3845fdae40c43ff3a0b813aa6cf5428205b"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "433f6d0b5817f764ad7023a396fc9484e0d8dfbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69498c64a33688edbb9b8dcadb6c5025cebf61f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69498c64a33688edbb9b8dcadb6c5025cebf61f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69498c64a33688edbb9b8dcadb6c5025cebf61f5", "patch": "@@ -1,3 +1,10 @@\n+2005-11-14  Dale Johannesen  <dalej@apple.com>\n+\n+\t* expmed.c (store_bit_field):  Add offset unconditionally for\n+\tmemory targets.\n+\t(extract_bit_field):  Don't force extzv or extv operand into\n+\ta register if field is too big.\n+\n 2005-11-14  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/arm.c (pic_labelno): New."}, {"sha": "632f24ff53b2a6214cc389c61c2aa957ccd11079", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69498c64a33688edbb9b8dcadb6c5025cebf61f5/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69498c64a33688edbb9b8dcadb6c5025cebf61f5/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=69498c64a33688edbb9b8dcadb6c5025cebf61f5", "patch": "@@ -430,14 +430,11 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t     || (offset * BITS_PER_UNIT % bitsize == 0\n \t\t && MEM_ALIGN (op0) % GET_MODE_BITSIZE (fieldmode) == 0))))\n     {\n-      if (GET_MODE (op0) != fieldmode)\n-\t{\n-\t  if (MEM_P (op0))\n-\t    op0 = adjust_address (op0, fieldmode, offset);\n-\t  else\n-\t    op0 = simplify_gen_subreg (fieldmode, op0, GET_MODE (op0),\n-\t\t\t\t       byte_offset);\n-\t}\n+      if (MEM_P (op0))\n+\top0 = adjust_address (op0, fieldmode, offset);\n+      else if (GET_MODE (op0) != fieldmode)\n+\top0 = simplify_gen_subreg (fieldmode, op0, GET_MODE (op0),\n+\t\t\t\t   byte_offset);\n       emit_move_insn (op0, value);\n       return value;\n     }\n@@ -1410,6 +1407,11 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t\t  xbitpos = bitnum % unit;\n \t\t  xop0 = adjust_address (xop0, bestmode, xoffset);\n \n+\t\t  /* Make sure register is big enough for the whole field. */\n+\t\t  if (xoffset * BITS_PER_UNIT + unit \n+\t\t      < offset * BITS_PER_UNIT + bitsize)\n+\t\t    goto extzv_loses;\n+\n \t\t  /* Fetch it to a register in that size.  */\n \t\t  xop0 = force_reg (bestmode, xop0);\n \n@@ -1539,6 +1541,11 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t\t  xbitpos = bitnum % unit;\n \t\t  xop0 = adjust_address (xop0, bestmode, xoffset);\n \n+\t\t  /* Make sure register is big enough for the whole field. */\n+\t\t  if (xoffset * BITS_PER_UNIT + unit \n+\t\t      < offset * BITS_PER_UNIT + bitsize)\n+\t\t    goto extv_loses;\n+\n \t\t  /* Fetch it to a register in that size.  */\n \t\t  xop0 = force_reg (bestmode, xop0);\n "}]}