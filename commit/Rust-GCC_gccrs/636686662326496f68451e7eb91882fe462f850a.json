{"sha": "636686662326496f68451e7eb91882fe462f850a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2Njg2NjYyMzI2NDk2ZjY4NDUxZTdlYjkxODgyZmU0NjJmODUwYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-24T02:20:37Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-08-10T21:01:47Z"}, "message": "testsuite: Introduce dg-ice.\n\nThis patch adds a new DejaGNU directive, dg-ice, as outlined in the\nproposal here:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-July/550913.html\n\nIt means that it's expected that the compiler crashes with an internal\ncompiler error when compiling test with such a directive.\n\nA minor optimization could be to use -pass-exit-codes and then check for\nICE_EXIT_CODE return code instead of using string match.\n\ngcc/ChangeLog:\n\n\t* doc/sourcebuild.texi: Document dg-ice.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/gcc-dg.exp (gcc-dg-test-1): Handle dg-ice.\n\t(cleanup-after-saved-dg-test): Reset expect_ice.\n\t* lib/prune.exp (prune_ices): New.\n\t* lib/target-supports-dg.exp (dg-ice): New.", "tree": {"sha": "c6eaaabf15321e280ce903db7266798bcef821ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6eaaabf15321e280ce903db7266798bcef821ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/636686662326496f68451e7eb91882fe462f850a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636686662326496f68451e7eb91882fe462f850a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636686662326496f68451e7eb91882fe462f850a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636686662326496f68451e7eb91882fe462f850a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ced0b60ccb4c944970304cf74f1ee9086e5553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ced0b60ccb4c944970304cf74f1ee9086e5553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ced0b60ccb4c944970304cf74f1ee9086e5553"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "967cb135cb46b899306389d83bdd89d2e5c49e13", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636686662326496f68451e7eb91882fe462f850a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636686662326496f68451e7eb91882fe462f850a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=636686662326496f68451e7eb91882fe462f850a", "patch": "@@ -1172,6 +1172,16 @@ Expect the execute step of a test to fail if the conditions (which are\n the same as for @code{dg-skip-if}) are met.\n @end table\n \n+@subsubsection Expect the compiler to crash\n+\n+@table @code\n+@item  @{ dg-ice @var{comment} [@{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]]] @}\n+Expect the compiler to crash with an internal compiler error and return\n+a nonzero exit status if the conditions (which are the same as for\n+@code{dg-skip-if}) are met.  Used for tests that test bugs that have not been\n+fixed yet.\n+@end table\n+\n @subsubsection Expect the test executable to fail\n \n @table @code"}, {"sha": "e8ad3052657e20bd2e96d799a96d3526e46df0fa", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636686662326496f68451e7eb91882fe462f850a/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636686662326496f68451e7eb91882fe462f850a/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=636686662326496f68451e7eb91882fe462f850a", "patch": "@@ -308,13 +308,27 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n     verbose \"$target_compile $prog $output_file $compile_type $options\" 4\n     set comp_output [$target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options]\n \n+    global expect_ice\n     # Look for an internal compiler error, which sometimes masks the fact\n     # that we didn't get an expected error message.  XFAIL an ICE via\n     # dg-xfail-if and use { dg-prune-output \".*internal compiler error.*\" }\n     # to avoid a second failure for excess errors.\n-    if [string match \"*internal compiler error*\" $comp_output] {\n+    # \"Error reporting routines re-entered\" ICE says \"Internal\" rather than\n+    # \"internal\", so match that too.\n+    if [string match {*[Ii]nternal compiler error*} $comp_output] {\n \tupvar 2 name name\n-\tfail \"$name (internal compiler error)\"\n+\tif { $expect_ice == 0 } {\n+\t  fail \"$name (internal compiler error)\"\n+\t} else {\n+\t  # We expected an ICE and we got it.\n+\t  xfail \"$name (internal compiler error)\"\n+\t  # Prune the ICE from the output.\n+\t  set comp_output [prune_ices $comp_output]\n+\t}\n+    } elseif { $expect_ice == 1 } {\n+\tupvar 2 name name\n+\t# We expected an ICE but we didn't get it.\n+\txpass \"$name (internal compiler error)\"\n     }\n \n     if { $do_what == \"repo\" } {\n@@ -939,6 +953,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal additional_prunes\n \tglobal compiler_conditional_xfail_data\n \tglobal shouldfail\n+\tglobal expect_ice\n \tglobal testname_with_flags\n \tglobal set_target_env_var\n \tglobal set_compiler_env_var\n@@ -954,6 +969,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tset additional_sources_used \"\"\n \tset additional_prunes \"\"\n \tset shouldfail 0\n+\tset expect_ice 0\n \tif [info exists set_target_env_var] {\n \t    unset set_target_env_var\n \t}"}, {"sha": "58a739684a5d86796538a70337433a563cdea46c", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636686662326496f68451e7eb91882fe462f850a/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636686662326496f68451e7eb91882fe462f850a/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=636686662326496f68451e7eb91882fe462f850a", "patch": "@@ -118,6 +118,15 @@ proc prune_file_path { text } {\n     return $text\n }\n \n+# Prune internal compiler error messages, including the \"Please submit...\"\n+# footnote.\n+\n+proc prune_ices { text } {\n+  regsub -all \"(^|\\n)\\[^\\n\\]*: internal compiler error:.*for instructions\\[^\\n\\]*\" $text \"\" text\n+  regsub -all \"(^|\\n|')*Internal compiler error:.*for instructions\\[^\\n\\]*\" $text \"\" text\n+  return $text\n+}\n+\n # Provide a definition of this if missing (delete after next dejagnu release).\n \n if { [info procs prune_warnings] == \"\" } then {"}, {"sha": "5bb99f4e8f9f480b043f28eba42f0315d5421ee6", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636686662326496f68451e7eb91882fe462f850a/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636686662326496f68451e7eb91882fe462f850a/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=636686662326496f68451e7eb91882fe462f850a", "patch": "@@ -495,6 +495,34 @@ proc dg-shouldfail { args } {\n     }\n }\n \n+# Record whether the compiler is expected (at the moment) to ICE.\n+# Used for tests that test bugs that have not been fixed yet.\n+\n+set expect_ice 0\n+\n+proc dg-ice { args } {\n+    # Don't bother if we're already skipping the test.\n+    upvar dg-do-what dg-do-what\n+    if { [lindex ${dg-do-what} 1] == \"N\" } {\n+      return\n+    }\n+\n+    global expect_ice\n+\n+    set args [lreplace $args 0 0]\n+    if { [llength $args] > 1 } {\n+\tset selector [list target [lindex $args 1]]\n+\tif { [dg-process-target-1 $selector] == \"S\" } {\n+\t    # The target matches, now check the flags.\n+\t    if [check-flags $args] {\n+\t\tset expect_ice 1\n+\t    }\n+\t}\n+    } else {\n+\tset expect_ice 1\n+    }\n+}\n+\n # Intercept the call to the DejaGnu version of dg-process-target to\n # support use of an effective-target keyword in place of a list of\n # target triplets to xfail or skip a test."}]}