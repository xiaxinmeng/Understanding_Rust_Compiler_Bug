{"sha": "fdac2bea53bf5e7214352e2afd5542254c3156cb", "node_id": "C_kwDOANBUbNoAKGZkYWMyYmVhNTNiZjVlNzIxNDM1MmUyYWZkNTU0MjI1NGMzMTU2Y2I", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-03-03T18:59:30Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-03-03T18:59:30Z"}, "message": "-Wdangling-pointer: don't mark SSA lhs sets as stores\n\ncheck_dangling_stores has some weirdnesses that causes its behavior to\nchange when the target ABI requires C++ ctors to return this: while\nscanning stmts backwards in e.g. the AS ctor on a target that returns\nthis in ctors, the scan first encounters a copy of this to the SSA\nname used to hold the return value.  m_ptr_query.get_ref resolves lhs\n(the return SSA name) to the rhs (the default SSA name for this), does\nnot skip it because auto_var_p is false for SSA_NAMEs, and proceeds to\nadd it to stores, which seems to prevent later attempts to add stores\ninto *this from succeeding, which disables warnings that should have\ntriggered.\n\nThis is also the case when the backwards search finds unrelated stores\nto other fields of *this before it reaches stores that IMHO should be\nwarned about.  The store found first disables checking of other\nstores, as if the store appearing later in the code would necessarily\noverwrite the store that should be warned about.  I've added an\nxfailed variant of the existing test (struct An) that triggers this\nproblem, but I'm not sure how to go about fixing it.\n\nMeanwhile, this patch prevents assignments with SSA_NAMEs in the lhs\nfrom being regarded as stores, which is enough to remove the\nundesirable side effect on -Wdangling-pointer of ABI-mandated ctors'\nreturning this.  Another variant of the existing test (struct Al) that\ndemonstrates the problem regardless of this aspect of the ABI, and\nthat gets the desired warning with the proposed patch, but not\nwithout.\n\nCuriously, this fix exposes yet another problem in\nWdangling-pointer-5.c: it is the return stmt of the unrelated pointer\np, not the store into possibly-overlapping *vpp2, that caused the\nwarning to not be issued for the store in *vpp1.  I'm not sure whether\nwe should or should not warn in that case, but this patch adjusts the\ntest to reflect the behavior change.\n\n\nfor  gcc/ChangeLog\n\n\t* gimple-ssa-warn-access.cc\n\t(pass_waccess::check_dangling_stores): Skip non-stores.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* g++.dg/warn/Wdangling-pointer.C (warn_init_ref_member): Add\n\ttwo new variants, one fixed, one xfailed.\n\t* c-c++-common/Wdangling-pointer-5.c\n\t(nowarn_store_arg_store_arg): Add now-expected warnings.", "tree": {"sha": "dd10e2566993f448d0cdac814183ba9ed65a2351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd10e2566993f448d0cdac814183ba9ed65a2351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdac2bea53bf5e7214352e2afd5542254c3156cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdac2bea53bf5e7214352e2afd5542254c3156cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdac2bea53bf5e7214352e2afd5542254c3156cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdac2bea53bf5e7214352e2afd5542254c3156cb/comments", "author": null, "committer": null, "parents": [{"sha": "aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee43d26e8f9bb6e4d18a4075cbec9f6e5171dff"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "8b1c1cc019e3a52ea09fb5d3c15628f05c38589b", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdac2bea53bf5e7214352e2afd5542254c3156cb/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdac2bea53bf5e7214352e2afd5542254c3156cb/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=fdac2bea53bf5e7214352e2afd5542254c3156cb", "patch": "@@ -4515,7 +4515,8 @@ pass_waccess::check_dangling_stores (basic_block bb,\n \t   use the escaped locals.  */\n \treturn;\n \n-      if (!is_gimple_assign (stmt) || gimple_clobber_p (stmt))\n+      if (!is_gimple_assign (stmt) || gimple_clobber_p (stmt)\n+\t  || !gimple_store_p (stmt))\n \tcontinue;\n \n       access_ref lhs_ref;"}, {"sha": "cb6da9e86394d575bb21299daa42ac649e6833c3", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdac2bea53bf5e7214352e2afd5542254c3156cb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdac2bea53bf5e7214352e2afd5542254c3156cb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-5.c?ref=fdac2bea53bf5e7214352e2afd5542254c3156cb", "patch": "@@ -75,9 +75,9 @@ void nowarn_store_arg_store (void **vpp)\n \n void* nowarn_store_arg_store_arg (void **vpp1, void **vpp2)\n {\n-  int x;\n+  int x;              // { dg-message \"'x' declared here\" }\n   void **p = (void**)sink (0);\n-  *vpp1 = &x;         // warn here?\n+  *vpp1 = &x;         // { dg-warning \"storing the address of local variable 'x' in '\\\\*vpp1'\" }\n   *vpp2 = 0;          // might overwrite *vpp1\n   return p;\n }"}, {"sha": "a94477a6476660db80920650c78fc90c1ffcf233", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-pointer.C", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdac2bea53bf5e7214352e2afd5542254c3156cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdac2bea53bf5e7214352e2afd5542254c3156cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer.C?ref=fdac2bea53bf5e7214352e2afd5542254c3156cb", "patch": "@@ -35,7 +35,34 @@ void warn_init_ref_member ()\n     { }\n   } ai;\n \n-  sink (&as, &ai);\n+  struct Al\n+  {\n+    const S &sref;\n+    Al ():\n+      // The temporary S object is destroyed when Al::Al() returns.\n+      sref (S ())  // { dg-warning \"storing the address\" }\n+    {\n+      // Copying this to an SSA_NAME used to disable the warning:\n+      Al *ptr = this;\n+      asm (\"\" : \"+r\" (ptr));\n+    }\n+  } al;\n+\n+  struct An\n+  {\n+    An *next;\n+    const S &sref;\n+    An ():\n+      next (0),\n+      // The temporary S object is destroyed when An::An() returns.\n+      sref (S ())  // { dg-warning \"storing the address\" \"\" { xfail *-*-* } }\n+    {\n+      // ??? Writing to another part of *this disables the warning:\n+      next = 0;\n+    }\n+  } an;\n+\n+  sink (&as, &ai, &al, &an);\n }\n \n "}]}