{"sha": "50bb46e4d2543f2a78f97feddcde27e42639dae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiYjQ2ZTRkMjU0M2YyYTc4Zjk3ZmVkZGNkZTI3ZTQyNjM5ZGFlMQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-03-05T17:50:22Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-03-25T20:56:14Z"}, "message": "libstdc++: Fix and complete __gnu_debug::basic_string implementation\n\nFix and complete __gnu_debug::basic_string so that it can be used as a transparent\nreplacement of std::basic_string.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/string\n\t(basic_string(const basic_string&, const _Alloc&)): Define even if !_GLIBCXX_USE_CXX11_ABI.\n\t(basic_string(basic_string&&, const _Alloc&)): Likewise and add noexcept qualification.\n\t(basic_string<>::erase): Adapt to take __const_iterator.\n\t(basic_string(const _CharT*, const _Allocator&)): Remove assign call.\n\t(basic_string<>::insert(const_iterator, _InputIte, _InputIte)): Try to\n\tremove iterator debug layer even if !_GLIBCXX_USE_CXX11_ABI.\n\t[_GLIBCXX_USE_CHAR8_T] (__gnu_debug::u8string): New.\n\t(__gnu_debug::u16string, __gnu_debug::u32string): New.\n\t(std::hash<__gnu_debug::basic_string<>>): New partial specialization.\n\t(std::__is_fast_hash<__gnu_debug::basic_string<>>): Likewise.\n\t* testsuite/util/exception/safety.h\n\t(erase_base<__gnu_debug::basic_string<>>): New partial specialization.\n\t(insert_base<__gnu_debug::basic_string<>>): Likewise.\n\t* testsuite/util/testsuite_container_traits.h (traits<__gnu_debug::basic_string<>>):\n\tNew partial specialization.\n\t* testsuite/21_strings/basic_string/hash/debug.cc: New test.\n\t* testsuite/21_strings/basic_string/requirements/citerators.cc:\n\tAdd test on __gnu_debug::string.\n\t* testsuite/21_strings/basic_string/requirements/dr438/constructor.cc: Likewise.\n\t* testsuite/21_strings/basic_string/requirements/exception/basic.cc: Likewise.\n\t* testsuite/21_strings/basic_string/requirements/exception/generation_prohibited.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/exception/propagation_consistent.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/explicit_instantiation/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/explicit_instantiation/char16_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/explicit_instantiation/char32_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/explicit_instantiation/char8_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/explicit_instantiation/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/requirements/typedefs.cc: Likewise.", "tree": {"sha": "6ff200e8c45431a9e887511773db535daa16426d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff200e8c45431a9e887511773db535daa16426d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50bb46e4d2543f2a78f97feddcde27e42639dae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bb46e4d2543f2a78f97feddcde27e42639dae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bb46e4d2543f2a78f97feddcde27e42639dae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bb46e4d2543f2a78f97feddcde27e42639dae1/comments", "author": null, "committer": null, "parents": [{"sha": "990a123ef7ca42fe7bb019b68eafdff80f6241aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a123ef7ca42fe7bb019b68eafdff80f6241aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990a123ef7ca42fe7bb019b68eafdff80f6241aa"}], "stats": {"total": 270, "additions": 245, "deletions": 25}, "files": [{"sha": "8744a55be64236e80c19ad3f28ab1c1199574d80", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 70, "deletions": 17, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -41,6 +41,14 @@\n     __gnu_debug::_Error_formatter::_S_at(_File, _Line, _Func)\t\t\\\n       ._M_message(#_Cond)._M_error()\n \n+#if _GLIBCXX_USE_CXX11_ABI && __cplusplus >= 201103\n+# define _GLIBCXX_INSERT_RETURNS_ITERATOR 1\n+# define _GLIBCXX_INSERT_RETURNS_ITERATOR_ONLY(expr) expr\n+#else\n+# define _GLIBCXX_INSERT_RETURNS_ITERATOR 0\n+# define _GLIBCXX_INSERT_RETURNS_ITERATOR_ONLY(expr)\n+#endif\n+\n namespace __gnu_debug\n {\n   /** Checks that __s is non-NULL or __n == 0, and then returns __s. */\n@@ -123,21 +131,21 @@ namespace __gnu_debug\n \n       using _Base::npos;\n \n-      basic_string()\n-\t_GLIBCXX_NOEXCEPT_IF(std::is_nothrow_default_constructible<_Base>::value)\n-\t: _Base() { }\n-\n       // 21.3.1 construct/copy/destroy:\n+\n       explicit\n       basic_string(const _Allocator& __a) _GLIBCXX_NOEXCEPT\n       : _Base(__a) { }\n \n #if __cplusplus < 201103L\n+      basic_string() : _Base() { }\n+\n       basic_string(const basic_string& __str)\n       : _Base(__str) { }\n \n       ~basic_string() { }\n #else\n+      basic_string() = default;\n       basic_string(const basic_string&) = default;\n       basic_string(basic_string&&) = default;\n \n@@ -146,13 +154,15 @@ namespace __gnu_debug\n       : _Base(__l, __a)\n       { }\n \n-#if _GLIBCXX_USE_CXX11_ABI\n       basic_string(const basic_string& __s, const _Allocator& __a)\n       : _Base(__s, __a) { }\n \n       basic_string(basic_string&& __s, const _Allocator& __a)\n-      : _Base(std::move(__s), __a) { }\n-#endif\n+      noexcept(\n+\tstd::is_nothrow_constructible<_Base, _Base, const _Allocator&>::value )\n+      : _Safe(std::move(__s._M_safe()), __a),\n+\t_Base(std::move(__s._M_base()), __a)\n+      { }\n \n       ~basic_string() = default;\n \n@@ -178,7 +188,7 @@ namespace __gnu_debug\n \n       basic_string(const _CharT* __s, const _Allocator& __a = _Allocator())\n       : _Base(__glibcxx_check_string_constructor(__s), __a)\n-      { this->assign(__s); }\n+      { }\n \n       basic_string(size_type __n, _CharT __c,\n \t\t   const _Allocator& __a = _Allocator())\n@@ -635,15 +645,22 @@ namespace __gnu_debug\n \t  __glibcxx_check_insert_range(__p, __first, __last, __dist);\n \n \t  typename _Base::iterator __res;\n-#if _GLIBCXX_USE_CXX11_ABI && __cplusplus >= 201103\n+#if ! _GLIBCXX_INSERT_RETURNS_ITERATOR\n+\t  const size_type __offset = __p.base() - _Base::begin();\n+#endif\n \t  if (__dist.second >= __dp_sign)\n-\t    __res = _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n-\t\t\t\t  __gnu_debug::__unsafe(__last));\n+\t    {\n+\t      _GLIBCXX_INSERT_RETURNS_ITERATOR_ONLY(__res =)\n+\t\t_Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n+\t\t\t      __gnu_debug::__unsafe(__last));\n+\t    }\n \t  else\n-\t    __res = _Base::insert(__p.base(), __first, __last);\n-#else\n-\t  const size_type __offset = __p.base() - _Base::begin();\n-\t  _Base::insert(__p.base(), __first, __last);\n+\t    {\n+\t      _GLIBCXX_INSERT_RETURNS_ITERATOR_ONLY(__res =)\n+\t\t_Base::insert(__p.base(), __first, __last);\n+\t    }\n+\n+#if ! _GLIBCXX_INSERT_RETURNS_ITERATOR\n \t  __res = _Base::begin() + __offset;\n #endif\n \t  this->_M_invalidate_all();\n@@ -676,7 +693,7 @@ namespace __gnu_debug\n       }\n \n       iterator\n-      erase(iterator __position)\n+      erase(__const_iterator __position)\n       {\n \t__glibcxx_check_erase(__position);\n \ttypename _Base::iterator __res = _Base::erase(__position.base());\n@@ -685,7 +702,7 @@ namespace __gnu_debug\n       }\n \n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(__const_iterator __first, __const_iterator __last)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n@@ -1285,11 +1302,47 @@ namespace __gnu_debug\n   typedef basic_string<wchar_t> wstring;\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  /// A string of @c char8_t\n+  typedef basic_string<char8_t> u8string;\n+#endif\n+\n+#if __cplusplus >= 201103L\n+  /// A string of @c char16_t\n+  typedef basic_string<char16_t> u16string;\n+\n+  /// A string of @c char32_t\n+  typedef basic_string<char32_t> u32string;\n+#endif\n+\n   template<typename _CharT, typename _Traits, typename _Allocator>\n     struct _Insert_range_from_self_is_safe<\n       __gnu_debug::basic_string<_CharT, _Traits, _Allocator> >\n       { enum { __value = 1 }; };\n \n } // namespace __gnu_debug\n \n+#if __cplusplus >= 201103L\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// std::hash specialization for __gnu_debug::basic_string.\n+  template<typename _CharT>\n+    struct hash<__gnu_debug::basic_string<_CharT>>\n+    : public hash<std::basic_string<_CharT>>\n+    { };\n+\n+  template<typename _CharT>\n+    struct __is_fast_hash<hash<__gnu_debug::basic_string<_CharT>>>\n+    : __is_fast_hash<hash<std::basic_string<_CharT>>>\n+    { };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+#endif /* C++11 */\n+\n+#undef _GLIBCXX_INSERT_RETURNS_ITERATOR\n+#undef _GLIBCXX_INSERT_RETURNS_ITERATOR_ONLY\n+\n #endif"}, {"sha": "596bff9f8c63099f7a2f2b282d737be3403096a8", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/hash/debug.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fhash%2Fdebug.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++17 } }\n+\n+#include <debug/string>\n+#include <memory_resource>\n+#include <testsuite_hooks.h>\n+\n+// C++17 24.3.5 [basic.string.hash]\n+// If S is one of these string types, SV is the corresponding string view type,\n+// and s is an object of type S, then hash<S>()(s) == hash<SV>()(SV(s)).\n+\n+template<typename S>\n+  bool\n+  test(const S& s)\n+  {\n+    using std::hash;\n+    using SV = std::basic_string_view<typename S::value_type>;\n+    return hash<S>()(s) == hash<SV>()(SV(s));\n+  }\n+\n+void\n+test01()\n+{\n+  VERIFY( test(__gnu_debug::string(\"a narrow string\")) );\n+#if _GLIBCXX_USE_CHAR8_T\n+  VERIFY( test(__gnu_debug::u8string(u8\"a narrow string\")) );\n+#endif\n+  VERIFY( test(__gnu_debug::u16string(u\"a utf-16 string\")) );\n+  VERIFY( test(__gnu_debug::u32string(U\"a utf-32 string\")) );\n+#if _GLIBCXX_USE_WCHAR_T\n+  VERIFY( test(__gnu_debug::wstring(L\"a wide string\")) );\n+#endif\n+}\n+\n+#if _GLIBCXX_USE_CHAR8_T\n+void\n+test02()\n+{\n+  using std::hash;\n+  __gnu_debug::string native(\"a string, a string, my stringdom for a string\");\n+  __gnu_debug::u8string utf8(u8\"a string, a string, my stringdom for a string\");\n+  VERIFY( hash<__gnu_debug::string>()(native) == hash<__gnu_debug::u8string>()(utf8) );\n+}\n+#endif\n+\n+int\n+main()\n+{\n+  test01();\n+#if _GLIBCXX_USE_CHAR8_T\n+  test02();\n+#endif\n+}"}, {"sha": "fca2a8940e9af28974bda851c0831b55a49f4a87", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/citerators.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -19,13 +19,17 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n+\n #include <testsuite_containers.h>\n \n int main()\n {\n   __gnu_test::citerator<std::string> test1;\n+  __gnu_test::citerator<__gnu_debug::string> dtest1;\n #ifdef _GLIBCXX_USE_WCHAR_T\n   __gnu_test::citerator<std::wstring> test2;\n+  __gnu_test::citerator<__gnu_debug::wstring> dtest2;\n #endif\n   return 0;\n }"}, {"sha": "059e32aa970ac76cfaff567d99883fc6f8620803", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/dr438/constructor.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fdr438%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fdr438%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fdr438%2Fconstructor.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -20,8 +20,10 @@\n // { dg-do compile }\n \n #include <string>\n+#include <debug/string>\n \n void f()\n {\n   std::string s(10, 1);\n+  __gnu_debug::string ds(10, 1);\n }"}, {"sha": "2ff020d81d47eaf119712d33b2df857dd77bc163", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/exception/basic.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fbasic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fbasic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fbasic.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -21,6 +21,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n #include <exception/safety.h>\n \n void\n@@ -31,8 +32,16 @@ value()\n   typedef char value_type;\n   typedef __gnu_cxx::throw_allocator_limit<value_type> allocator_type;\n   typedef std::char_traits<value_type> traits_type;\n-  typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n-  __gnu_test::basic_safety<test_type> test;\n+\n+  {\n+    typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::basic_safety<test_type> test;\n+  }\n+\n+  {\n+    typedef __gnu_debug::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::basic_safety<test_type> test;\n+  }\n }\n \n // Container requirement testing, exceptional behavior"}, {"sha": "02d3242db59341cd4d5d37f32b4b106875d818d1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/exception/generation_prohibited.cc", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fgeneration_prohibited.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -21,6 +21,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n #include <exception/safety.h>\n \n void\n@@ -29,8 +30,16 @@ char_allocator()\n   typedef char value_type;\n   typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n   typedef std::char_traits<value_type> traits_type;\n-  typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n-  __gnu_test::generation_prohibited<test_type> test;\n+\n+  {\n+    typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::generation_prohibited<test_type> test;\n+  }\n+\n+  {\n+    typedef __gnu_debug::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::generation_prohibited<test_type> test;\n+  }\n }\n \n void\n@@ -39,8 +48,16 @@ wchar_allocator()\n   typedef wchar_t value_type;\n   typedef __gnu_cxx::throw_allocator_random<value_type> allocator_type;\n   typedef std::char_traits<value_type> traits_type;\n-  typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n-  __gnu_test::generation_prohibited<test_type> test;\n+\n+  {\n+    typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::generation_prohibited<test_type> test;\n+  }\n+\n+  {\n+    typedef __gnu_debug::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::generation_prohibited<test_type> test;\n+  }\n }\n \n // Container requirement testing, exceptional behavior"}, {"sha": "0526745cb912eed80be75b59e4aecf846af2991a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/exception/propagation_consistent.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fpropagation_consistent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fpropagation_consistent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexception%2Fpropagation_consistent.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -21,6 +21,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n #include <exception/safety.h>\n \n void\n@@ -31,8 +32,16 @@ value()\n   typedef char value_type;\n   typedef __gnu_cxx::throw_allocator_limit<value_type> allocator_type;\n   typedef std::char_traits<value_type> traits_type;\n-  typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n-  __gnu_test::propagation_consistent<test_type> test;\n+\n+  {\n+    typedef std::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::propagation_consistent<test_type> test;\n+  }\n+\n+  {\n+    typedef __gnu_debug::basic_string<value_type, traits_type, allocator_type> test_type;\n+    __gnu_test::propagation_consistent<test_type> test;\n+  }\n }\n \n // Container requirement testing, exceptional behavior"}, {"sha": "9d2ca54c5df8a514ec0139a11f1c268cfd255f6a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/char/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar%2F1.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -18,5 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n \n template class std::basic_string<char>;\n+template class __gnu_debug::basic_string<char>;"}, {"sha": "64030165d2b21521c0a6c03517c10ff690cee086", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/char16_t/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar16_t%2F1.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -18,5 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n \n template class std::basic_string<char16_t>;\n+template class __gnu_debug::basic_string<char16_t>;"}, {"sha": "6e12fadf8cd372e4d71a77a4ad8531a423684ee7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/char32_t/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar32_t%2F1.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -18,5 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n \n template class std::basic_string<char32_t>;\n+template class __gnu_debug::basic_string<char32_t>;"}, {"sha": "abab7972b8d87a707a3777854c27e133ae50e128", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/char8_t/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -19,5 +19,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n \n template class std::basic_string<char8_t>;\n+template class __gnu_debug::basic_string<char8_t>;"}, {"sha": "1a25fa839d4639835a1528bc6f152b36047d8216", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fwchar_t%2F1.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -18,5 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <string>\n+#include <debug/string>\n \n template class std::basic_string<wchar_t>;\n+template class __gnu_debug::basic_string<wchar_t>;"}, {"sha": "ff5f98e78058d283b3792725da6f5391b21e3cb3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/typedefs.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -19,9 +19,12 @@\n \n #include <testsuite_containers.h>\n #include <string>\n+#include <debug/string>\n \n // Check container for required typedefs.\n __gnu_test::types<std::string> t1;\n+__gnu_test::types<__gnu_debug::string> dt1;\n #ifdef _GLIBCXX_USE_WCHAR_T\n __gnu_test::types<std::wstring> t2;\n+__gnu_test::types<__gnu_debug::wstring> dt2;\n #endif"}, {"sha": "54449d2f7bb9fafe27b3f39f95b2f6c47e21675c", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -275,6 +275,20 @@ namespace __gnu_test\n \titerator (container_type::* _F_erase_point)(iterator);\n \titerator (container_type::* _F_erase_range)(iterator, iterator);\n \n+\terase_base()\n+\t: _F_erase_point(&container_type::erase),\n+\t  _F_erase_range(&container_type::erase) { }\n+      };\n+\n+    template<typename _Tp1, typename _Tp2, typename _Tp3>\n+      struct erase_base<__gnu_debug::basic_string<_Tp1, _Tp2, _Tp3>>\n+      {\n+\ttypedef __gnu_debug::basic_string<_Tp1, _Tp2, _Tp3>     container_type;\n+\ttypedef typename container_type::iterator \titerator;\n+\n+\titerator (container_type::* _F_erase_point)(iterator);\n+\titerator (container_type::* _F_erase_range)(iterator, iterator);\n+\n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n \t  _F_erase_range(&container_type::erase) { }\n@@ -701,6 +715,24 @@ namespace __gnu_test\n \ttypedef typename container_type::const_iterator\tconst_iterator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n+#if _GLIBCXX_USE_CXX11_ABI == 0 || __cplusplus < 201103L\n+\titerator (container_type::* _F_insert_point)(iterator, value_type);\n+#else\n+\titerator (container_type::* _F_insert_point)(const_iterator,\n+\t\t\t\t\t\t     value_type);\n+#endif\n+\n+\tinsert_base() : _F_insert_point(&container_type::insert) { }\n+      };\n+\n+    template<typename _Tp1, typename _Tp2, typename _Tp3>\n+      struct insert_base<__gnu_debug::basic_string<_Tp1, _Tp2, _Tp3>>\n+      {\n+\ttypedef __gnu_debug::basic_string<_Tp1, _Tp2, _Tp3> \tcontainer_type;\n+\ttypedef typename container_type::iterator \titerator;\n+\ttypedef typename container_type::const_iterator\tconst_iterator;\n+\ttypedef typename container_type::value_type \tvalue_type;\n+\n #if _GLIBCXX_USE_CXX11_ABI == 0 || __cplusplus < 201103L\n \titerator (container_type::* _F_insert_point)(iterator, value_type);\n #else"}, {"sha": "0bc7a2aa53ae76d6e0293a221d33da23ab19f62c", "filename": "libstdc++-v3/testsuite/util/testsuite_container_traits.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bb46e4d2543f2a78f97feddcde27e42639dae1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h?ref=50bb46e4d2543f2a78f97feddcde27e42639dae1", "patch": "@@ -22,6 +22,7 @@\n \n #include <bits/stdc++.h>\n #include <ext/vstring.h>\n+#include <debug/string>\n \n namespace __gnu_test\n {\n@@ -128,6 +129,17 @@ namespace __gnu_test\n       typedef std::true_type\thas_insert;\n     };\n \n+  template<typename _Tp1, typename _Tp2, typename _Tp3>\n+    struct traits<__gnu_debug::basic_string<_Tp1, _Tp2, _Tp3>> : public traits_base\n+    {\n+      typedef std::true_type    is_container;\n+      typedef std::true_type    is_reversible;\n+      typedef std::true_type    is_allocator_aware;\n+\n+      typedef std::true_type\thas_erase;\n+      typedef std::true_type\thas_insert;\n+    };\n+\n   template<typename _Tp1, typename _Tp2, typename _Tp3,\n \t   template <typename, typename, typename> class _Tp4>\n     struct traits<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>"}]}