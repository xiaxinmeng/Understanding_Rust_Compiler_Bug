{"sha": "0ba13880d1d6fd88391591b05ac33273ef182e79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhMTM4ODBkMWQ2ZmQ4ODM5MTU5MWIwNWFjMzMyNzNlZjE4MmU3OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-03-31T08:41:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-03-31T08:41:26Z"}, "message": "tree.h (optimize_function): Kill prototype.\n\n\n\t* tree.h (optimize_function): Kill prototype.\n\t* optimize.c (dump_function, optimize_function, dump_finction): Kill.\n\t* semantics.c (expand_body): Kill.\n\nFrom-SVN: r80246", "tree": {"sha": "ea138007ebd7dd3c31803d1353cd6e3b50098cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea138007ebd7dd3c31803d1353cd6e3b50098cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba13880d1d6fd88391591b05ac33273ef182e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba13880d1d6fd88391591b05ac33273ef182e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba13880d1d6fd88391591b05ac33273ef182e79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba13880d1d6fd88391591b05ac33273ef182e79/comments", "author": null, "committer": null, "parents": [{"sha": "b150f4f320ed62f4b5d42466948644a8e3ed9d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b150f4f320ed62f4b5d42466948644a8e3ed9d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b150f4f320ed62f4b5d42466948644a8e3ed9d0d"}], "stats": {"total": 56, "additions": 6, "deletions": 50}, "files": [{"sha": "dc05a91798d929b7b41e7bc80f197faa98f898ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ba13880d1d6fd88391591b05ac33273ef182e79", "patch": "@@ -1,3 +1,9 @@\n+2004-03-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.h (optimize_function): Kill prototype.\n+\t* optimize.c (dump_function, optimize_function, dump_finction): Kill.\n+\t* semantics.c (expand_body): Kill.\n+\n 2004-03-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14724"}, {"sha": "fcd1db39cad31ba1b638c634ec281621858bcf38", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0ba13880d1d6fd88391591b05ac33273ef182e79", "patch": "@@ -3842,7 +3842,6 @@ extern tree implicitly_declare_fn (special_function_kind, tree, bool);\n extern tree skip_artificial_parms_for (tree, tree);\n \n /* In optimize.c */\n-extern void optimize_function (tree);\n extern bool calls_setjmp_p (tree);\n extern bool maybe_clone_body (tree);\n "}, {"sha": "2fd105991517d8af83f13a91f5552178c764812c", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=0ba13880d1d6fd88391591b05ac33273ef182e79", "patch": "@@ -41,28 +41,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static tree calls_setjmp_r (tree *, int *, void *);\n static void update_cloned_parm (tree, tree);\n-static void dump_function (enum tree_dump_index, tree);\n-\n-/* Optimize the body of FN.  */\n-\n-void\n-optimize_function (tree fn)\n-{\n-  dump_function (TDI_original, fn);\n-\n-  if (flag_inline_trees\n-      /* We do not inline thunks, as (a) the backend tries to optimize\n-         the call to the thunkee, (b) tree based inlining breaks that\n-         optimization, (c) virtual functions are rarely inlineable,\n-         and (d) TARGET_ASM_OUTPUT_MI_THUNK is there to DTRT anyway.  */\n-      && !DECL_THUNK_P (fn))\n-    {\n-      optimize_inline_calls (fn);\n-      dump_function (TDI_inlined, fn);\n-    }\n-  \n-  dump_function (TDI_optimized, fn);\n-}\n \n /* Called from calls_setjmp_p via walk_tree.  */\n \n@@ -248,26 +226,3 @@ maybe_clone_body (tree fn)\n   /* We don't need to process the original function any further.  */\n   return 1;\n }\n-\n-/* Dump FUNCTION_DECL FN as tree dump PHASE.  */\n-\n-static void\n-dump_function (enum tree_dump_index phase, tree fn)\n-{\n-  FILE *stream;\n-  int flags;\n-\n-  stream = dump_begin (phase, &flags);\n-  if (stream)\n-    {\n-      fprintf (stream, \"\\n;; Function %s\",\n-\t       decl_as_string (fn, TFF_DECL_SPECIFIERS));\n-      fprintf (stream, \" (%s)\\n\",\n-\t       decl_as_string (DECL_ASSEMBLER_NAME (fn), 0));\n-      fprintf (stream, \";; enabled by -fdump-%s\\n\", dump_flag_name (phase));\n-      fprintf (stream, \"\\n\");\n-      \n-      dump_node (fn, TDF_SLIM | flags, stream);\n-      dump_end (phase, stream);\n-    }\n-}"}, {"sha": "3a1fcb48a961f1f9246a8aaa0b384cefdae82edf", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba13880d1d6fd88391591b05ac33273ef182e79/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0ba13880d1d6fd88391591b05ac33273ef182e79", "patch": "@@ -2925,10 +2925,6 @@ expand_body (tree fn)\n   /* Emit any thunks that should be emitted at the same time as FN.  */\n   emit_associated_thunks (fn);\n \n-  timevar_push (TV_INTEGRATION);\n-  optimize_function (fn);\n-  timevar_pop (TV_INTEGRATION);\n-\n   tree_rest_of_compilation (fn, function_depth > 1);\n \n   current_function_decl = saved_function;"}]}