{"sha": "1bac673faf4a0a0bd0a5606dad9d98b33d568510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhYzY3M2ZhZjRhMGEwYmQwYTU2MDZkYWQ5ZDk4YjMzZDU2ODUxMA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-11-03T18:08:19Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-11-03T18:08:19Z"}, "message": "[arm] Eliminate SUBTARGET_CPU_DEFAULT\n\n\t* config.gcc (arm-wrs-vxworks): Set target_cpu_cname.\n\t(arm*-freebsd*): Likewise.\n\t(arm*-*-netbsdelf*): Likewise.\n\t(arm*-*-linux*): Likewise.\n\t(arm*-*-uclinux*eabi*): Likewise.\n\t(arm*-*-phoenix*): Likewise.\n\t(arm*-*-eabi*, arm*-*-symbianelf*, arm*-*-rtems*): Likewise.\n\t(arm*-*-*): Don't clobber target_cpu_cname when --with-cpu is not\n\tspecified.  Default to arm6 if target_cpu_cname is not set.\n\t* arm/arm.c (arm_option_override): Simplify logic.  Assert that the\n\tdefault cpu has been correctly configured.\n\t* arm/arm.h (TARGET_CPU_DEFAULT): Delete.\n\t(target_cpus): Delete TARGET_CPU_generic, add TARGET_CPU_num_cores.\n\t* arm/freebsd.h (SUBTARGET_CPU_DEFAULT): Delete.\n\t* arm/linux-eabi.h (SUBTARGET_CPU_DEFAULT): Delete.\n\t* arm/linux-elf.h (SUBTARGET_CPU_DEFAULT): Delete.\n\t* arm/symbian.h (SUBTARGET_CPU_DEFAULT): Delete.\n\t* arm/unknown-elf.h (SUBTARGET_CPU_DEFAULT): Delete.\n\nFrom-SVN: r241827", "tree": {"sha": "16d5962ff38b8730e9c99bfd7c2a76f15c6ec776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d5962ff38b8730e9c99bfd7c2a76f15c6ec776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bac673faf4a0a0bd0a5606dad9d98b33d568510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac673faf4a0a0bd0a5606dad9d98b33d568510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bac673faf4a0a0bd0a5606dad9d98b33d568510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac673faf4a0a0bd0a5606dad9d98b33d568510/comments", "author": null, "committer": null, "parents": [{"sha": "ac5b3efff29c2b0bf056adbb1e075927692653da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5b3efff29c2b0bf056adbb1e075927692653da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5b3efff29c2b0bf056adbb1e075927692653da"}], "stats": {"total": 68, "additions": 24, "deletions": 44}, "files": [{"sha": "3888d217ed273f33118f90aa65aac3c41b2f0a9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -1,3 +1,24 @@\n+2016-11-03  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config.gcc (arm-wrs-vxworks): Set target_cpu_cname.\n+\t(arm*-freebsd*): Likewise.\n+\t(arm*-*-netbsdelf*): Likewise.\n+\t(arm*-*-linux*): Likewise.\n+\t(arm*-*-uclinux*eabi*): Likewise.\n+\t(arm*-*-phoenix*): Likewise.\n+\t(arm*-*-eabi*, arm*-*-symbianelf*, arm*-*-rtems*): Likewise.\n+\t(arm*-*-*): Don't clobber target_cpu_cname when --with-cpu is not\n+\tspecified.  Default to arm6 if target_cpu_cname is not set.\n+\t* arm/arm.c (arm_option_override): Simplify logic.  Assert that the\n+\tdefault cpu has been correctly configured.\n+\t* arm/arm.h (TARGET_CPU_DEFAULT): Delete.\n+\t(target_cpus): Delete TARGET_CPU_generic, add TARGET_CPU_num_cores.\n+\t* arm/freebsd.h (SUBTARGET_CPU_DEFAULT): Delete.\n+\t* arm/linux-eabi.h (SUBTARGET_CPU_DEFAULT): Delete.\n+\t* arm/linux-elf.h (SUBTARGET_CPU_DEFAULT): Delete.\n+\t* arm/symbian.h (SUBTARGET_CPU_DEFAULT): Delete.\n+\t* arm/unknown-elf.h (SUBTARGET_CPU_DEFAULT): Delete.\n+\n 2016-11-03  Jiong Wang  <jiong.wang@arm.com>\n \n \t* reg-notes.def (CFA_VAL_EXPRESSION): New entry."}, {"sha": "6dc2d2d6577a80c8523b0fe1900ad0bd280322e9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -3104,17 +3104,7 @@ arm_option_override (void)\n       arm_feature_set sought = ARM_FSET_EMPTY;;\n \n       arm_selected_cpu = &all_cores[TARGET_CPU_DEFAULT];\n-      if (!arm_selected_cpu->name)\n-\t{\n-#ifdef SUBTARGET_CPU_DEFAULT\n-\t  /* Use the subtarget default CPU if none was specified by\n-\t     configure.  */\n-\t  arm_selected_cpu = &all_cores[SUBTARGET_CPU_DEFAULT];\n-#endif\n-\t  /* Default to ARM6.  */\n-\t  if (!arm_selected_cpu->name)\n-\t    arm_selected_cpu = &all_cores[arm6];\n-\t}\n+      gcc_assert (arm_selected_cpu->name);\n \n       sel = arm_selected_cpu;\n       insn_flags = sel->flags;"}, {"sha": "3d11555d64750cbfc8eaf06e8a4aa2b153520cec", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -55,7 +55,8 @@ enum target_cpus\n   TARGET_CPU_##INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  TARGET_CPU_generic\n+  /* Total number of CPUs we handle.  */\n+  TARGET_CPU_num_cores\n };\n \n /* The processor for which instructions should be scheduled.  */\n@@ -83,12 +84,6 @@ extern GTY(()) rtx arm_target_insn;\n /* Callback to output language specific object attributes.  */\n extern void (*arm_lang_output_object_attributes_hook)(void);\n \f\n-/* Just in case configure has failed to define anything.  */\n-#ifndef TARGET_CPU_DEFAULT\n-#define TARGET_CPU_DEFAULT TARGET_CPU_generic\n-#endif\n-\n-\n #undef  CPP_SPEC\n #define CPP_SPEC \"%(subtarget_cpp_spec)\t\t\t\t\t\\\n %{mfloat-abi=soft:%{mfloat-abi=hard:\t\t\t\t\t\\"}, {"sha": "949c397521caa35894ef5552cd9de5055139b8b5", "filename": "gcc/config/arm/freebsd.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffreebsd.h?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -112,14 +112,6 @@\n #undef  WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE BITS_PER_WORD\n \n-#if defined (TARGET_FREEBSD_ARMv6)\n-#undef  SUBTARGET_CPU_DEFAULT\n-#define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm1176jzs\n-#else\n-#undef  SUBTARGET_CPU_DEFAULT\n-#define SUBTARGET_CPU_DEFAULT   TARGET_CPU_arm9\n-#endif\n-\n /* FreeBSD 10 does not support unaligned access for armv6 and up.\n    Unaligned access support was added in FreeBSD 11.  */\n #if FBSD_MAJOR < 11"}, {"sha": "9cfcf9fffd965271ec5b54366d581061b2ea49d7", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -41,12 +41,6 @@\n #undef  ARM_DEFAULT_ABI\n #define ARM_DEFAULT_ABI ARM_ABI_AAPCS_LINUX\n \n-/* Default to armv5t so that thumb shared libraries work.\n-   The ARM10TDMI core is the default for armv5t, so set\n-   SUBTARGET_CPU_DEFAULT to achieve this.  */\n-#undef  SUBTARGET_CPU_DEFAULT\n-#define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm10tdmi\n-\n /* TARGET_BIG_ENDIAN_DEFAULT is set in\n    config.gcc for big endian configurations.  */\n #undef  TARGET_LINKER_EMULATION"}, {"sha": "cc17b51eeab45fe91d74efacd03808d948a1c87f", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -45,8 +45,6 @@\n #undef  TARGET_DEFAULT\n #define TARGET_DEFAULT (TARGET_ENDIAN_DEFAULT)\n \n-#define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm6\n-\n #define SUBTARGET_EXTRA_LINK_SPEC \" -m \" TARGET_LINKER_EMULATION \" -p\"\n \n /* We do not have any MULTILIB_OPTIONS specified, so there are no"}, {"sha": "af078d57a2c07c797279ea64dc771ba09d0f70e5", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -59,12 +59,6 @@\n /* Support the \"dllimport\" attribute.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1\n \n-/* Symbian OS assumes ARM V5 or above.  Since -march=armv5 is\n-   equivalent to making the ARM 10TDMI core the default, we can set\n-   SUBTARGET_CPU_DEFAULT and get an equivalent effect.  */\n-#undef SUBTARGET_CPU_DEFAULT\n-#define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm10tdmi\n-\n /* The assembler should assume VFP FPU format, and armv5t.  */\n #undef SUBTARGET_ASM_FLOAT_SPEC\n #define SUBTARGET_ASM_FLOAT_SPEC \\"}, {"sha": "e5c050785a6174ef0fbe5615a8e7ee45bef385e7", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac673faf4a0a0bd0a5606dad9d98b33d568510/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=1bac673faf4a0a0bd0a5606dad9d98b33d568510", "patch": "@@ -88,10 +88,6 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#ifndef SUBTARGET_CPU_DEFAULT\n-#define SUBTARGET_CPU_DEFAULT \t\tTARGET_CPU_arm7tdmi\n-#endif\n-\n /* The libgcc udivmod functions may throw exceptions.  If newlib is\n    configured to support long longs in I/O, then printf will depend on\n    udivmoddi4, which will depend on the exception unwind routines,"}]}