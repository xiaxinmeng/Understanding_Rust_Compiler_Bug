{"sha": "786b5245966e3e9b710015ce7fd28992391d891b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2YjUyNDU5NjZlM2U5YjcxMDAxNWNlN2ZkMjg5OTIzOTFkODkxYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1997-09-08T09:28:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-08T09:28:51Z"}, "message": "pt.c (begin_member_template_processing): Take a function as argument, not a set of template arguments.\n\nMon Sep  8 01:21:43 1997  Mark Mitchell  <mmitchell@usa.net>\n\n\t* pt.c (begin_member_template_processing): Take a function as\n\targument, not a set of template arguments.  Use the template\n\tparameters, rather than the arguments.  Handle non-type parameters\n\tcorrectly.  Push a binding level for the parameters so that multiple\n\tmember templates using the same parameter names can be declared.\n\t(end_member_template_processing): Pop the binding level.\n\t(push_template_decl): Mark member templates as static when\n\tappropriate.\n\n\t* lex.c (do_pending_inlines): Pass the function, not its template\n\targuments, to begin_member_template_processing.\n\t(process_next_inline): Likewise.\n\t(do_pending_defargs): Likewise.\n\n\t* error.c (dump_expr): Obtain the correct declaration for a\n\tTEMPLATE_CONST_PARM.\n\n\t* call.c (add_template_conv_candidate): New function.\n\t(build_object_call): Handle member templates, as done in the other\n\tbuild_ functions.\n\nFrom-SVN: r15155", "tree": {"sha": "947c04ec83511b3bab40eb322bd28e8bcd75c265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/947c04ec83511b3bab40eb322bd28e8bcd75c265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786b5245966e3e9b710015ce7fd28992391d891b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786b5245966e3e9b710015ce7fd28992391d891b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786b5245966e3e9b710015ce7fd28992391d891b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786b5245966e3e9b710015ce7fd28992391d891b/comments", "author": null, "committer": null, "parents": [{"sha": "267c09ab53236587a4f5c4412182885daab79fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267c09ab53236587a4f5c4412182885daab79fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267c09ab53236587a4f5c4412182885daab79fce"}], "stats": {"total": 141, "additions": 117, "deletions": 24}, "files": [{"sha": "213ac3980d34fd8694348b6f76b39642b595cd58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=786b5245966e3e9b710015ce7fd28992391d891b", "patch": "@@ -1,3 +1,26 @@\n+Mon Sep  8 01:21:43 1997  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (begin_member_template_processing): Take a function as\n+\targument, not a set of template arguments.  Use the template\n+\tparameters, rather than the arguments.  Handle non-type parameters\n+\tcorrectly.  Push a binding level for the parameters so that multiple\n+\tmember templates using the same parameter names can be declared.\n+\t(end_member_template_processing): Pop the binding level.\n+\t(push_template_decl): Mark member templates as static when\n+\tappropriate. \n+\n+\t* lex.c (do_pending_inlines): Pass the function, not its template\n+\targuments, to begin_member_template_processing.\n+\t(process_next_inline): Likewise.\n+\t(do_pending_defargs): Likewise.\n+\n+\t* error.c (dump_expr): Obtain the correct declaration for a\n+\tTEMPLATE_CONST_PARM. \n+\n+\t* call.c (add_template_conv_candidate): New function.\n+\t(build_object_call): Handle member templates, as done in the other\n+\tbuild_ functions.\n+\t\n Sat Sep  6 10:20:27 1997  Mark Mitchell  <mmitchell@usa.net>\n \n \t* decl.c (replace_defag): Undo previous change."}, {"sha": "5bf18c9b69cd3131aafe9e94c919429d7120bc9a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=786b5245966e3e9b710015ce7fd28992391d891b", "patch": "@@ -78,6 +78,8 @@ static struct z_candidate * splice_viable PROTO((struct z_candidate *));\n static int any_viable PROTO((struct z_candidate *));\n static struct z_candidate * add_template_candidate\n \tPROTO((struct z_candidate *, tree, tree, tree, int));\n+static struct z_candidate * add_template_conv_candidate \n+        PROTO((struct z_candidate *, tree, tree, tree, tree));\n static struct z_candidate * add_builtin_candidates\n \tPROTO((struct z_candidate *, enum tree_code, enum tree_code,\n \t       tree, tree *, int));\n@@ -4170,6 +4172,33 @@ add_template_candidate (candidates, tmpl, arglist, return_type, flags)\n   return cand;\n }\n \n+\n+static struct z_candidate *\n+add_template_conv_candidate (candidates, tmpl, obj, arglist, return_type)\n+     struct z_candidate *candidates;\n+     tree tmpl, obj, arglist, return_type;\n+{\n+  int ntparms = DECL_NTPARMS (tmpl);\n+  tree targs = make_tree_vec (ntparms);\n+  struct z_candidate *cand;\n+  int i;\n+  tree fn;\n+\n+  i = fn_type_unification (tmpl, targs, arglist, return_type, 0);\n+\n+  if (i != 0)\n+    return candidates;\n+\n+  fn = instantiate_template (tmpl, targs);\n+  if (fn == error_mark_node)\n+    return candidates;\n+\n+  cand = add_conv_candidate (candidates, fn, obj, arglist);\n+  cand->template = DECL_TEMPLATE_INFO (fn);\n+  return cand;\n+}\n+\n+\n static int\n any_viable (cands)\n      struct z_candidate *cands;\n@@ -4508,6 +4537,7 @@ build_object_call (obj, args)\n   struct z_candidate *candidates = 0, *cand;\n   tree fns, convs, mem_args;\n   tree type = TREE_TYPE (obj);\n+  tree templates = NULL_TREE;\n \n   fns = lookup_fnfields (TYPE_BINFO (type), ansi_opname [CALL_EXPR], 0);\n \n@@ -4523,9 +4553,19 @@ build_object_call (obj, args)\n \n       for (; fn; fn = DECL_CHAIN (fn))\n \t{\n-\t  candidates = add_function_candidate\n-\t    (candidates, fn, mem_args, LOOKUP_NORMAL);\n-\t  candidates->basetype_path = TREE_PURPOSE (fns);\n+\t  if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t    {\n+\t      templates = decl_tree_cons (NULL_TREE, fn, templates);\n+\t      candidates = add_template_candidate (candidates, fn,\n+\t\t\t\t\t\t   mem_args, NULL_TREE, \n+\t\t\t\t\t\t   LOOKUP_NORMAL);\n+\t    }\n+\t  else\n+\t    candidates = add_function_candidate\n+\t      (candidates, fn, mem_args, LOOKUP_NORMAL);\n+\n+\t  if (candidates)\n+\t    candidates->basetype_path = TREE_PURPOSE (fns);\n \t}\n     }\n \n@@ -4540,8 +4580,20 @@ build_object_call (obj, args)\n \t  && TREE_CODE (TREE_TYPE (totype)) == FUNCTION_TYPE)\n \tfor (; fn; fn = DECL_CHAIN (fn))\n \t  {\n-\t    candidates = add_conv_candidate (candidates, fn, obj, args);\n-\t    candidates->basetype_path = TREE_PURPOSE (convs);\n+\t    if (TREE_CODE (fn) == TEMPLATE_DECL) \n+\t      {\n+\t\ttemplates = decl_tree_cons (NULL_TREE, fn, templates);\n+\t\tcandidates = add_template_conv_candidate (candidates,\n+\t\t\t\t\t\t\t  fn,\n+\t\t\t\t\t\t\t  obj,\n+\t\t\t\t\t\t\t  args,\n+\t\t\t\t\t\t\t  totype);\n+\t      }\n+\t    else\n+\t      candidates = add_conv_candidate (candidates, fn, obj, args);\n+\n+\t    if (candidates)\n+\t      candidates->basetype_path = TREE_PURPOSE (convs);\n \t  }\n     }\n "}, {"sha": "847bfa22495b6095c4c72cc7c3208cadadeaa1c9", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=786b5245966e3e9b710015ce7fd28992391d891b", "patch": "@@ -1366,13 +1366,15 @@ dump_expr (t, nop)\n       if (current_template_parms)\n \t{\n \t  int i;\n-\t  tree parms;\n+\t  int l = list_length (current_template_parms);\n+\t  tree parms = current_template_parms;\n \t  tree r;\n \n-\t  for (parms = current_template_parms;\n-\t       TREE_CHAIN (parms);\n-\t       parms = TREE_CHAIN (parms))\n-\t    ;\n+\t  for (i = 0; i < l - TEMPLATE_CONST_LEVEL (t); ++i)\n+\t    {\n+\t      parms = TREE_CHAIN (parms);\n+\t      my_friendly_assert (parms != NULL_TREE, 0);\n+\t    }\n \n \t  r = TREE_VEC_ELT (TREE_VALUE (parms),\n \t\t\t    TEMPLATE_CONST_IDX (t));"}, {"sha": "8bd9c57624aa3caa06dc0ec815ba355bdb6e6089", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=786b5245966e3e9b710015ce7fd28992391d891b", "patch": "@@ -1191,7 +1191,7 @@ do_pending_inlines ()\n   if (context)\n     push_cp_function_context (context);\n   if (is_member_template (t->fndecl))\n-    begin_member_template_processing (DECL_TI_ARGS (t->fndecl));\n+    begin_member_template_processing (t->fndecl);\n   if (t->len > 0)\n     {\n       feed_input (t->buf, t->len);\n@@ -1254,7 +1254,7 @@ process_next_inline (t)\n       if (context)\n \tpush_cp_function_context (context);\n       if (is_member_template (i->fndecl))\n-\tbegin_member_template_processing (DECL_TI_ARGS (i->fndecl));\n+\tbegin_member_template_processing (i->fndecl);\n       feed_input (i->buf, i->len);\n       lineno = i->lineno;\n       input_filename = i->filename;\n@@ -1874,7 +1874,7 @@ do_pending_defargs ()\n \t  push_nested_class (TREE_PURPOSE (defarg_fns), 1);\n \t  pushlevel (0);\n \t  if (is_member_template (defarg_fn))\n-\t    begin_member_template_processing (DECL_TI_ARGS (defarg_fn));\n+\t    begin_member_template_processing (defarg_fn);\n \n \t  if (TREE_CODE (defarg_fn) == FUNCTION_DECL)\n \t    {"}, {"sha": "0c24ec4eeb945a4955d5d1f0b98cde0e2d072dc5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786b5245966e3e9b710015ce7fd28992391d891b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=786b5245966e3e9b710015ce7fd28992391d891b", "patch": "@@ -82,29 +82,40 @@ static tree add_to_template_args PROTO((tree, tree));\n /* Restore the template parameter context. */\n \n void \n-begin_member_template_processing (parms)\n-     tree parms;\n+begin_member_template_processing (decl)\n+     tree decl;\n {\n+  tree parms;\n   int i;\n \n+  parms = DECL_INNERMOST_TEMPLATE_PARMS (DECL_TI_TEMPLATE (decl));\n+\n   ++processing_template_decl;\n   current_template_parms \n     = tree_cons (build_int_2 (0, processing_template_decl),\n \t\t parms, current_template_parms);\n+  pushlevel (0);\n   for (i = 0; i < TREE_VEC_LENGTH (parms); ++i) \n     {\n-      tree parm = TREE_VEC_ELT (parms, i);\n-\n+      tree parm = TREE_VALUE (TREE_VEC_ELT (parms, i));\n+      my_friendly_assert (TREE_CODE_CLASS (TREE_CODE (parm)) == 'd', 0);\n+      \n       switch (TREE_CODE (parm))\n \t{\n-\tcase TEMPLATE_TYPE_PARM:\n-\t  pushdecl (TYPE_NAME (parm));\n-\t  break;\n-\n-\tcase TEMPLATE_CONST_PARM:\n+\tcase TYPE_DECL:\n \t  pushdecl (parm);\n \t  break;\n-\t  \n+\n+\tcase PARM_DECL:\n+\t  {\n+\t    /* Make a CONST_DECL as is done in process_template_parm. */\n+\t    tree decl = build_decl (CONST_DECL, DECL_NAME (parm),\n+\t\t\t\t    TREE_TYPE (parm));\n+\t    DECL_INITIAL (decl) = DECL_INITIAL (parm);\n+\t    pushdecl (decl);\n+\t  }\n+\tbreak;\n+\n \tdefault:\n \t  my_friendly_abort (0);\n \t}\n@@ -121,6 +132,7 @@ end_member_template_processing ()\n \n   --processing_template_decl;\n   current_template_parms = TREE_CHAIN (current_template_parms);\n+  poplevel (0, 0, 0);\n }\n \n /* Returns non-zero iff T is a member template function.  Works if T\n@@ -449,7 +461,11 @@ push_template_decl (decl)\n       DECL_TEMPLATE_PARMS (tmpl) = current_template_parms;\n       DECL_CONTEXT (tmpl) = DECL_CONTEXT (decl);\n       if (DECL_LANG_SPECIFIC (decl))\n-\tDECL_CLASS_CONTEXT (tmpl) = DECL_CLASS_CONTEXT (decl);\n+\t{\n+\t  DECL_CLASS_CONTEXT (tmpl) = DECL_CLASS_CONTEXT (decl);\n+\t  DECL_STATIC_FUNCTION_P (tmpl) = \n+\t    DECL_STATIC_FUNCTION_P (decl);\n+\t}\n     }\n   else\n     {"}]}