{"sha": "ff98621c682005e2a224f62c1aa5028353a5357e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY5ODYyMWM2ODIwMDVlMmEyMjRmNjJjMWFhNTAyODM1M2E1MzU3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-19T05:39:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-19T05:39:14Z"}, "message": "re PR c++/16036 (Spurious \"may be used uninitialized in this function\" warning)\n\n        PR c++/16036\n        * gimple-low.c (lower_function_body): Generate return statement for\n        fall off the end of the function here ...\n        * tree-cfg.c (make_edges): ... instead of here.\n        * gimplify.c (gimplify_return_expr): Mark return temp TREE_NO_WARNING.\n\nFrom-SVN: r83382", "tree": {"sha": "5791e7f8af3ac3bb999dd5a105aafb41d29af09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5791e7f8af3ac3bb999dd5a105aafb41d29af09e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff98621c682005e2a224f62c1aa5028353a5357e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff98621c682005e2a224f62c1aa5028353a5357e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff98621c682005e2a224f62c1aa5028353a5357e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff98621c682005e2a224f62c1aa5028353a5357e/comments", "author": null, "committer": null, "parents": [{"sha": "048d99365055be4021508378e90a90987df38283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048d99365055be4021508378e90a90987df38283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048d99365055be4021508378e90a90987df38283"}], "stats": {"total": 86, "additions": 41, "deletions": 45}, "files": [{"sha": "6402c1eb565dba1e393152ad3791404da8e75580", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff98621c682005e2a224f62c1aa5028353a5357e", "patch": "@@ -1,3 +1,11 @@\n+2004-06-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/16036 \n+\t* gimple-low.c (lower_function_body): Generate return statement for\n+\tfall off the end of the function here ...\n+\t* tree-cfg.c (make_edges): ... instead of here.\n+\t* gimplify.c (gimplify_return_expr): Mark return temp TREE_NO_WARNING.\n+\n 2004-06-18  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* tree-ssa.c (raise_value): Removed."}, {"sha": "98346cc2bf23b7358ccbad733e5f04073e5260e4", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=ff98621c682005e2a224f62c1aa5028353a5357e", "patch": "@@ -67,6 +67,7 @@ lower_function_body (void)\n   tree *body_p = &DECL_SAVED_TREE (current_function_decl);\n   tree bind = *body_p;\n   tree_stmt_iterator i;\n+  tree t, x;\n \n   if (TREE_CODE (bind) != BIND_EXPR)\n     abort ();\n@@ -83,25 +84,33 @@ lower_function_body (void)\n   tsi_link_after (&i, bind, TSI_NEW_STMT);\n   lower_bind_expr (&i, &data);\n \n-  /* If we lowered any return statements, emit the representative at the\n-     end of the function.  */\n-  if (data.return_statements)\n+  i = tsi_last (*body_p);\n+\n+  /* If the function falls off the end, we need a null return statement.\n+     If we've already got one in the return_statements list, we don't\n+     need to do anything special.  Otherwise build one by hand.  */\n+  if (block_may_fallthru (*body_p)\n+      && (data.return_statements == NULL\n+          || TREE_OPERAND (TREE_VALUE (data.return_statements), 0) != NULL))\n     {\n-      tree t, x;\n-      i = tsi_last (*body_p);\n+      x = build (RETURN_EXPR, void_type_node, NULL);\n+      annotate_with_locus (x, cfun->function_end_locus);\n+      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n+    }\n \n-      for (t = data.return_statements; t ; t = TREE_CHAIN (t))\n-\t{\n-\t  x = build (LABEL_EXPR, void_type_node, TREE_PURPOSE (t));\n-          tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n-\n-\t  /* Remove the line number from the representative return statement.\n-\t     It now fills in for many such returns.  Failure to remove this\n-\t     will result in incorrect results for coverage analysis.  */\n-\t  x = TREE_VALUE (t);\n-\t  SET_EXPR_LOCUS (x, NULL);\n-          tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n-        }\n+  /* If we lowered any return statements, emit the representative\n+     at the end of the function.  */\n+  for (t = data.return_statements ; t ; t = TREE_CHAIN (t))\n+    {\n+      x = build (LABEL_EXPR, void_type_node, TREE_PURPOSE (t));\n+      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n+\n+      /* Remove the line number from the representative return statement.\n+\t It now fills in for many such returns.  Failure to remove this\n+\t will result in incorrect results for coverage analysis.  */\n+      x = TREE_VALUE (t);\n+      SET_EXPR_LOCUS (x, NULL);\n+      tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n     }\n \n   if (data.block != DECL_INITIAL (current_function_decl))"}, {"sha": "2e7d30e9dcecb5fdb5fc15a90c518e3ba40a7a67", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ff98621c682005e2a224f62c1aa5028353a5357e", "patch": "@@ -946,6 +946,13 @@ gimplify_return_expr (tree stmt, tree *pre_p)\n   else\n     {\n       result = create_tmp_var (TREE_TYPE (result_decl), NULL);\n+\n+      /* ??? With complex control flow (usually involving abnormal edges),\n+\t we can wind up warning about an uninitialized value for this.  Due\n+\t to how this variable is constructed and initialized, this is never\n+\t true.  Give up and never warn.  */\n+      TREE_NO_WARNING (result) = 1;\n+\n       gimplify_ctxp->return_temp = result;\n     }\n "}, {"sha": "1fad3dabde68831eb688349b707f35b71a8214c1", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff98621c682005e2a224f62c1aa5028353a5357e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ff98621c682005e2a224f62c1aa5028353a5357e", "patch": "@@ -418,7 +418,6 @@ static void\n make_edges (void)\n {\n   basic_block bb;\n-  edge e;\n \n   /* Create an edge from entry to the first block with executable\n      statements in it.  */\n@@ -447,33 +446,6 @@ make_edges (void)\n \tmake_edge (bb, bb->next_bb, EDGE_FALLTHRU);\n     }\n \n-  /* If there is a fallthru edge to exit out of the last block, transform it\n-     to a return statement.  */\n-  for (e = EXIT_BLOCK_PTR->prev_bb->succ; e; e = e->succ_next)\n-    if (e->flags & EDGE_FALLTHRU)\n-      break;\n-\n-  if (e && e->dest == EXIT_BLOCK_PTR)\n-    {\n-      block_stmt_iterator bsi;\n-      basic_block ret_bb = EXIT_BLOCK_PTR->prev_bb;\n-      tree x;\n-\n-      /* If E->SRC ends with a call that has an abnormal edge (for EH or\n-\t nonlocal goto), then we will need to split the edge to insert\n-\t an explicit return statement.  */\n-      if (e != ret_bb->succ || e->succ_next)\n-\t{\n-\t  ret_bb = split_edge (e);\n-\t  e = ret_bb->succ;\n-\t}\n-      e->flags &= ~EDGE_FALLTHRU;\n-\n-      x = build (RETURN_EXPR, void_type_node, NULL_TREE);\n-      bsi = bsi_last (ret_bb);\n-      bsi_insert_after (&bsi, x, BSI_NEW_STMT);\n-    }\n-\n   /* We do not care about fake edges, so remove any that the CFG\n      builder inserted for completeness.  */\n   remove_fake_edges ();"}]}