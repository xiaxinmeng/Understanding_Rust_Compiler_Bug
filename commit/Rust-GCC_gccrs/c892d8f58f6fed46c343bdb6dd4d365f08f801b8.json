{"sha": "c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg5MmQ4ZjU4ZjZmZWQ0NmMzNDNiZGI2ZGQ0ZDM2NWYwOGY4MDFiOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-22T09:22:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-22T09:22:16Z"}, "message": "i386: Fix up -fdollars-in-identifiers with identifiers starting with $ in -masm=att [PR91298]\n\nIn AT&T syntax leading $ is special, so if we have identifiers that start\nwith dollar, we usually fail to assemble it (or assemble incorrectly).\nAs mentioned in the PR, what works is wrapping the identifiers inside of\nparens, like:\n\tmovl\t$($a), %eax\n\tleaq\t($a)(,%rdi,4), %rax\n\tmovl\t($a)(%rip), %eax\n\tmovl\t($a)+16(%rip), %eax\n\t.globl\t$a\n\t.type\t$a, @object\n\t.size\t$a, 72\n$a:\n\t.string\t\"$a\"\n\t.quad\t($a)\n(this is x86_64 -fno-pic -O2).  In some places ($a) is not accepted,\nlike as .globl operand, in .type, .size, so the patch overrides\nASM_OUTPUT_SYMBOL_REF rather than e.g. ASM_OUTPUT_LABELREF.\nI didn't want to duplicate what assemble_name is doing (following\ntransparent aliases), so split assemble_name into two parts; just\nmere looking at the first character of a name before calling assemble_name\nwouldn't be good enough, a transparent alias could lead from a name\nnot starting with $ to one starting with it and vice versa.\n\n2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/91298\n\t* output.h (assemble_name_resolve): Declare.\n\t* varasm.c (assemble_name_resolve): New function.\n\t(assemble_name): Use it.\n\t* config/i386/i386.h (ASM_OUTPUT_SYMBOL_REF): Define.\n\n\t* gcc.target/i386/pr91298-1.c: New test.\n\t* gcc.target/i386/pr91298-2.c: New test.", "tree": {"sha": "7df87fd8d1fbe74174e8d7070de1811d9ac9945d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df87fd8d1fbe74174e8d7070de1811d9ac9945d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a9d801a7080d39658754ad603536da6cff2cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a9d801a7080d39658754ad603536da6cff2cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a9d801a7080d39658754ad603536da6cff2cd0"}], "stats": {"total": 95, "additions": 82, "deletions": 13}, "files": [{"sha": "d3a7bc25da898e8cde7bb8ef6bd66d921ce647b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -1,3 +1,11 @@\n+2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/91298\n+\t* output.h (assemble_name_resolve): Declare.\n+\t* varasm.c (assemble_name_resolve): New function.\n+\t(assemble_name): Use it.\n+\t* config/i386/i386.h (ASM_OUTPUT_SYMBOL_REF): Define.\n+\n 2020-01-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/sourcebuild.texi (Texinfo Manuals, Front End): Refer to"}, {"sha": "943e9a5c78301f64f8e65a4b74e82478423b96a8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -2258,6 +2258,31 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define ASM_OUTPUT_FUNCTION_LABEL(FILE, NAME, DECL) \\\n   ix86_asm_output_function_label ((FILE), (NAME), (DECL))\n \n+/* A C statement (sans semicolon) to output a reference to SYMBOL_REF SYM.\n+   If not defined, assemble_name will be used to output the name of the\n+   symbol.  This macro may be used to modify the way a symbol is referenced\n+   depending on information encoded by TARGET_ENCODE_SECTION_INFO.  */\n+\n+#ifndef ASM_OUTPUT_SYMBOL_REF\n+#define ASM_OUTPUT_SYMBOL_REF(FILE, SYM) \\\n+  do {\t\t\t\t\t\t\t\\\n+    const char *name\t\t\t\t\t\\\n+      = assemble_name_resolve (XSTR (x, 0));\t\t\\\n+    /* In -masm=att wrap identifiers that start with $\t\\\n+       into parens.  */\t\t\t\t\t\\\n+    if (ASSEMBLER_DIALECT == ASM_ATT\t\t\t\\\n+\t&& name[0] == '$'\t\t\t\t\\\n+\t&& user_label_prefix[0] == '\\0')\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tfputc ('(', (FILE));\t\t\t\t\\\n+\tassemble_name_raw ((FILE), name);\t\t\\\n+\tfputc (')', (FILE));\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      assemble_name_raw ((FILE), name);\t\t\t\\\n+  } while (0)\n+#endif\n+\n /* Under some conditions we need jump tables in the text section,\n    because the assembler cannot handle label differences between\n    sections.  This is the case for x86_64 on Mach-O for example.  */"}, {"sha": "eb253c503299bfba3cbe67afaa5ecb284c17698b", "filename": "gcc/output.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -237,6 +237,12 @@ extern void assemble_label (FILE *, const char *);\n    addition of an underscore).  */\n extern void assemble_name_raw (FILE *, const char *);\n \n+/* Return NAME that should actually be emitted, looking through\n+   transparent aliases.  If NAME refers to an entity that is also\n+   represented as a tree (like a function or variable), mark the entity\n+   as referenced.  */\n+extern const char *assemble_name_resolve (const char *);\n+\n /* Like assemble_name_raw, but should be used when NAME might refer to\n    an entity that is also represented as a tree (like a function or\n    variable).  If NAME does refer to such an entity, that entity will"}, {"sha": "a435fd1b12ee175c622d9db26e9534c631b7838c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -1,5 +1,9 @@\n 2020-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/91298\n+\t* gcc.target/i386/pr91298-1.c: New test.\n+\t* gcc.target/i386/pr91298-2.c: New test.\n+\n \t* gfortran.dg/gomp/target-parallel1.f90: New test.\n \t* gfortran.dg/goacc/pr93329.f90: Enable commented out target parallel\n \ttest."}, {"sha": "45ef553fcf1c5ecfa1fe30f8c98d38131509d0db", "filename": "gcc/testsuite/gcc.target/i386/pr91298-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91298-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91298-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91298-1.c?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/91298 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -g -fdollars-in-identifiers\" } */\n+\n+int $a[18];\n+int *foo (void) { return &$a[0]; }\n+int *bar (int x) { return &$a[x]; }\n+int baz (void) { return $a[0]; }\n+int qux (void) { return $a[4]; }\n+int $quux (void) { return 1; }\n+int corge (void) { return $quux (); }\n+int grault (void) { return $quux () + 1; }\n+typedef int (*fn) (void);\n+fn foobar (void) { return $quux; }"}, {"sha": "20e47ab6c83e03c118bc897c2512e4cb59d27240", "filename": "gcc/testsuite/gcc.target/i386/pr91298-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91298-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91298-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91298-2.c?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/91298 */\n+/* { dg-do assemble { target fpic } } */\n+/* { dg-options \"-O2 -g -fdollars-in-identifiers -fpic\" } */\n+\n+#include \"pr91298-1.c\""}, {"sha": "dc6da6c0b5b0da598edf06ceb62b7e4bbbd55e4d", "filename": "gcc/varasm.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c892d8f58f6fed46c343bdb6dd4d365f08f801b8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c892d8f58f6fed46c343bdb6dd4d365f08f801b8", "patch": "@@ -2589,20 +2589,16 @@ assemble_name_raw (FILE *file, const char *name)\n     ASM_OUTPUT_LABELREF (file, name);\n }\n \n-/* Like assemble_name_raw, but should be used when NAME might refer to\n-   an entity that is also represented as a tree (like a function or\n-   variable).  If NAME does refer to such an entity, that entity will\n-   be marked as referenced.  */\n-\n-void\n-assemble_name (FILE *file, const char *name)\n+/* Return NAME that should actually be emitted, looking through\n+   transparent aliases.  If NAME refers to an entity that is also\n+   represented as a tree (like a function or variable), mark the entity\n+   as referenced.  */\n+const char *\n+assemble_name_resolve (const char *name)\n {\n-  const char *real_name;\n-  tree id;\n+  const char *real_name = targetm.strip_name_encoding (name);\n+  tree id = maybe_get_identifier (real_name);\n \n-  real_name = targetm.strip_name_encoding (name);\n-\n-  id = maybe_get_identifier (real_name);\n   if (id)\n     {\n       tree id_orig = id;\n@@ -2614,7 +2610,18 @@ assemble_name (FILE *file, const char *name)\n       gcc_assert (! TREE_CHAIN (id));\n     }\n \n-  assemble_name_raw (file, name);\n+  return name;\n+}\n+\n+/* Like assemble_name_raw, but should be used when NAME might refer to\n+   an entity that is also represented as a tree (like a function or\n+   variable).  If NAME does refer to such an entity, that entity will\n+   be marked as referenced.  */\n+\n+void\n+assemble_name (FILE *file, const char *name)\n+{\n+  assemble_name_raw (file, assemble_name_resolve (name));\n }\n \n /* Allocate SIZE bytes writable static space with a gensym name"}]}