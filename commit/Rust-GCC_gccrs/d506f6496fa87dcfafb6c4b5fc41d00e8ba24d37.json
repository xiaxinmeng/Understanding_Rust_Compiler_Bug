{"sha": "d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwNmY2NDk2ZmE4N2RjZmFmYjZjNGI1ZmM0MWQwMGU4YmEyNGQzNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-28T14:01:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-28T14:01:20Z"}, "message": "Makefile.in (toplev.o, halfpic.o): Depend on halfpic.h\n\n\t* Makefile.in (toplev.o, halfpic.o): Depend on halfpic.h\n\t* i386/osfrose.h (SUBTARGET_SWITCHES): Add missing comma.\n\t(FUNCTION_PROFILER): Const-ify.\n\t* halfpic.c: Include \"expr.h\", \"output.h\" and \"halfpic.h\".\n\t(eliminate_constant_term, assemble_name, output_addr_const):\n\tRemove declarations.\n\t(ptr_half_pic_address_p, half_pic_hash): Prototype.\n\t(all_refs, half_pic_prefix, half_pic_hash, half_pic_declare,\n\thalf_pic_external, half_pic_address_p, half_pic_ptr): Const-ify.\n\t* halfpic.h (ptr_half_pic_address_p, half_pic_finish): Prototype.\n\t(half_pic_declare, half_pic_external): Const-ify.\n\t* toplev.c: Include \"halfpic.h\".\n\nFrom-SVN: r46583", "tree": {"sha": "8e6c763f01766485b8f1736442aa8b0649daf118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e6c763f01766485b8f1736442aa8b0649daf118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/comments", "author": null, "committer": null, "parents": [{"sha": "f710504c07e3c301cc21d88a60d3844ea99920e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f710504c07e3c301cc21d88a60d3844ea99920e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f710504c07e3c301cc21d88a60d3844ea99920e5"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "38932065f8f60a772c21bf00c289459b6c0db737", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "patch": "@@ -1,3 +1,18 @@\n+2001-10-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (toplev.o, halfpic.o): Depend on halfpic.h\n+\t* i386/osfrose.h (SUBTARGET_SWITCHES): Add missing comma.\n+\t(FUNCTION_PROFILER): Const-ify.\n+\t* halfpic.c: Include \"expr.h\", \"output.h\" and \"halfpic.h\".\n+\t(eliminate_constant_term, assemble_name, output_addr_const):\n+\tRemove declarations.\n+\t(ptr_half_pic_address_p, half_pic_hash): Prototype.\n+\t(all_refs, half_pic_prefix, half_pic_hash, half_pic_declare,\n+\thalf_pic_external, half_pic_address_p, half_pic_ptr): Const-ify.\n+\t* halfpic.h (ptr_half_pic_address_p, half_pic_finish): Prototype.\n+\t(half_pic_declare, half_pic_external): Const-ify.\n+\t* toplev.c: Include \"halfpic.h\".\n+\n 2001-10-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config/alpha/alpha.md, config/arm/arm.c, config/arm/arm.h,"}, {"sha": "aad6cee3303babeffdbfac9bd937f45ff14e111c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "patch": "@@ -1370,7 +1370,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n-   ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H)\n+   ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) halfpic.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c\n@@ -1616,7 +1616,7 @@ mips-tdump: mips-tdump.o version.o $(LIBDEPS)\n mips-tdump.o : mips-tdump.c $(CONFIG_H) $(RTL_H) $(SYSTEM_H)\n \n # Build file to support OSF/rose half-pic format.\n-halfpic.o: halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H) $(SYSTEM_H)\n+halfpic.o: halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H) $(SYSTEM_H) halfpic.h\n \n #\f\n # Generate header and source files from the machine description,"}, {"sha": "9996291e3e6b0d10ecde73e99b9ed927a3a9d380", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "patch": "@@ -58,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n      { \"half-pic\",\t\t MASK_HALF_PIC,\t\t\t\t\\\n        N_(\"Emit half-PIC code\") },\t\t\t\t\t\\\n-     { \"no-half-pic\",\t\t-MASK_HALF_PIC, \"\" }\t\t\t\\\n+     { \"no-half-pic\",\t\t-MASK_HALF_PIC, \"\" },\t\t\t\\\n      { \"debug-half-pic\",\t MASK_HALF_PIC_DEBUG,\t\t\t\\\n        0 /* intentionally undoc */ },\t\t\t\t\t\\\n      { \"debugb\",\t\t MASK_HALF_PIC_DEBUG,\t\t\t\\\n@@ -209,8 +209,8 @@ do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (!OSF_PROFILE_BEFORE_PROLOGUE)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tchar *prefix = (TARGET_UNDERSCORES) ? \"_\" : \"\";\t\t\t\\\n-\tchar *lprefix = LPREFIX;\t\t\t\t\t\\\n+\tconst char *const prefix = (TARGET_UNDERSCORES) ? \"_\" : \"\";\t\\\n+\tconst char *const lprefix = LPREFIX;\t\t\t\t\\\n \tint labelno = LABELNO;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t/* Note that OSF/rose blew it in terms of calling mcount,\t\\"}, {"sha": "4931212bdfe23cd2b1f541e1524ea7bb6f009f19", "filename": "gcc/halfpic.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Fhalfpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Fhalfpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.c?ref=d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "patch": "@@ -35,19 +35,18 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n+#include \"expr.h\"\n+#include \"output.h\"\n #include \"obstack.h\"\n+#include \"halfpic.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-extern rtx eliminate_constant_term ();\n-extern void assemble_name ();\n-extern void output_addr_const ();\n-\n int flag_half_pic\t\t= 0;\t/* Global half-pic flag.  */\n int half_pic_number_ptrs\t= 0;\t/* # distinct pointers found */\n int half_pic_number_refs\t= 0;\t/* # half-pic references */\n-int (*ptr_half_pic_address_p)() = half_pic_address_p;\n+int (*ptr_half_pic_address_p) PARAMS ((rtx)) = half_pic_address_p;\n \n /* Obstack to hold generated pic names.  */\n static struct obstack half_pic_obstack;\n@@ -59,15 +58,15 @@ struct all_refs {\n   struct all_refs *next;\t/* next name created */\n   int\t\t   external_p;\t/* name is an external reference */\n   int\t\t   pointer_p;\t/* pointer created.  */\n-  char\t\t  *ref_name;\t/* reference name to ptr to real_name */\n+  const char\t  *ref_name;\t/* reference name to ptr to real_name */\n   int\t\t   ref_len;\t/* reference name length */\n-  char\t\t  *real_name;\t/* real function/data name */\n+  const char\t  *real_name;\t/* real function/data name */\n   int\t\t   real_len;\t/* strlen (real_name) */\n };\n \n static struct all_refs *half_pic_names;\n \n-static char *half_pic_prefix;\n+static const char *half_pic_prefix;\n static int   half_pic_prefix_len;\n \n \f\n@@ -83,16 +82,18 @@ static int   half_pic_prefix_len;\n \n #define HASHBITS 30\n \n+static struct all_refs *half_pic_hash PARAMS ((const char *, int, int));\n+\n static struct all_refs *\n half_pic_hash (name, len, create_p)\n-     char *name;\t\t/* name to hash */\n+     const char *name;\t\t/* name to hash */\n      int len;\t\t\t/* length of the name (or 0 to call strlen) */\n      int create_p;\t\t/* != 0 to create new hash bucket if new */\n {\n   static struct all_refs *hash_table[MAX_HASH_TABLE];\n   static struct all_refs  zero_all_refs;\n \n-  unsigned char *uname;\n+  const unsigned char *uname;\n   int hash;\n   int i;\n   int ch;\n@@ -103,7 +104,7 @@ half_pic_hash (name, len, create_p)\n     len = strlen (name);\n \n   /* Compute hash code */\n-  uname = (unsigned char *)name;\n+  uname = (const unsigned char *)name;\n   ch = uname[0];\n   hash = len * 613 + ch;\n   for (i = 1; i < len; i += 2)\n@@ -246,7 +247,7 @@ half_pic_encode (decl)\n \n void\n half_pic_declare (name)\n-     char *name;\n+     const char *name;\n {\n   struct all_refs *ptr;\n \n@@ -270,7 +271,7 @@ half_pic_declare (name)\n \n void\n half_pic_external (name)\n-     char *name;\n+     const char *name;\n {\n   struct all_refs *ptr;\n \n@@ -296,7 +297,7 @@ int\n half_pic_address_p (addr)\n      rtx addr;\n {\n-  char *name;\n+  const char *name;\n   int len;\n   struct all_refs *ptr;\n \n@@ -363,7 +364,7 @@ struct rtx_def *\n half_pic_ptr (operand)\n      rtx operand;\n {\n-  char *name;\n+  const char *name;\n   struct all_refs *p;\n   int len;\n "}, {"sha": "ca318d85043f6f9c489a73355502534586daae55", "filename": "gcc/halfpic.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Fhalfpic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Fhalfpic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.h?ref=d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "patch": "@@ -35,18 +35,19 @@ struct rtx_def;\n    be true in the gen* programs).  */\n \n int flag_half_pic;\t\t\t/* Global half-pic flag.  */\n-int (*ptr_half_pic_address_p) ();\t/* ptr to half_pic_address_p () */\n+int (*ptr_half_pic_address_p) PARAMS ((struct rtx_def *)); /* ptr to half_pic_address_p () */\n \n extern int  half_pic_number_ptrs;\t\t\t\t/* # distinct pointers found */\n extern int  half_pic_number_refs;\t\t\t\t/* # half-pic references */\n-extern void half_pic_encode PARAMS ((union tree_node *));\t\t/* encode whether half-pic */\n-extern void half_pic_declare PARAMS ((char *));\t\t\t/* declare object local */\n-extern void half_pic_external PARAMS ((char *));\t\t\t/* declare object external */\n+extern void half_pic_encode PARAMS ((union tree_node *));\t/* encode whether half-pic */\n+extern void half_pic_declare PARAMS ((const char *));\t\t/* declare object local */\n+extern void half_pic_external PARAMS ((const char *));\t\t/* declare object external */\n extern void half_pic_init PARAMS ((void));\t\t\t/* half_pic initialization */\n extern int  half_pic_address_p PARAMS ((struct rtx_def *));\t/* true if an address is half-pic */\n extern struct rtx_def *half_pic_ptr PARAMS ((struct rtx_def *));\t/* return RTX for half-pic pointer */\n-/* Can't use prototype since FILE isn't defined yet.  */\n-extern void half_pic_finish (/* FILE * */);\t\t/* half_pic termination */\n+#ifdef BUFSIZ\n+extern void half_pic_finish PARAMS ((FILE *));\t/* half_pic termination */\n+#endif\n \n /* Macros to provide access to the half-pic stuff (so they can easily\n    be stubbed out.  */"}, {"sha": "62dabc74438976a88b99c674d4441b1869d615ad", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d506f6496fa87dcfafb6c4b5fc41d00e8ba24d37", "patch": "@@ -85,6 +85,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"xcoffout.h\"\t\t/* Needed for external data\n \t\t\t\t   declarations for e.g. AIX 4.x.  */\n #endif\n+\n+#ifdef HALF_PIC_DEBUG\n+#include \"halfpic.h\"\n+#endif\n \f\n #ifdef VMS\n /* The extra parameters substantially improve the I/O performance.  */"}]}