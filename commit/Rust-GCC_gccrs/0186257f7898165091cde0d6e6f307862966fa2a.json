{"sha": "0186257f7898165091cde0d6e6f307862966fa2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4NjI1N2Y3ODk4MTY1MDkxY2RlMGQ2ZTZmMzA3ODYyOTY2ZmEyYQ==", "commit": {"author": {"name": "James E. Wilson", "email": "wilson@cygnus.com", "date": "2000-06-08T17:15:32Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-06-08T17:15:32Z"}, "message": "Add unwind support for epilogues, because the kernel unwinder needs them.\n\n\t* config/ia64/ia64-protos.h (ia64_output_end_prologue): Add.\n\t(output_function_prologue): Fix mispelling.\n\t(output_function_prologue, output_function_epilogue): Reorder to\n\tmatch ia64.c definition order.\n\t* config/ia64/ia64.c (ia64_expand_prologue): Add comment.\n\t(ia64_expand_epilogue): Set RTX_FRAME_RELATED_P on stack restore insns.\n\tUse r3 instead of r2 for large stack restores.\n\t(ia64_output_end_prologue): New function.\n\t(process_set): Emit \".restore sp\" for epilogue stack restores.\n\t* config/ia64/ia64.h (FUNCTION_END_PROLOGUE): Define.\n\nFrom-SVN: r34456", "tree": {"sha": "9b846030fa205e5d39712e49ce20756c808b7861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b846030fa205e5d39712e49ce20756c808b7861"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0186257f7898165091cde0d6e6f307862966fa2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0186257f7898165091cde0d6e6f307862966fa2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0186257f7898165091cde0d6e6f307862966fa2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0186257f7898165091cde0d6e6f307862966fa2a/comments", "author": null, "committer": null, "parents": [{"sha": "6223e158fded51fafae924863a81262b86d9edef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6223e158fded51fafae924863a81262b86d9edef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6223e158fded51fafae924863a81262b86d9edef"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "18956ddb437e78409008618fb94d1a2b881a8499", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0186257f7898165091cde0d6e6f307862966fa2a", "patch": "@@ -1,3 +1,16 @@\n+2000-06-08  James E. Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64-protos.h (ia64_output_end_prologue): Add.\n+\t(output_function_prologue): Fix mispelling.\n+\t(output_function_prologue, output_function_epilogue): Reorder to\n+\tmatch ia64.c definition order.\n+\t* config/ia64/ia64.c (ia64_expand_prologue): Add comment.\n+\t(ia64_expand_epilogue): Set RTX_FRAME_RELATED_P on stack restore insns.\n+\tUse r3 instead of r2 for large stack restores.\n+\t(ia64_output_end_prologue): New function.\n+\t(process_set): Emit \".restore sp\" for epilogue stack restores.\n+\t* config/ia64/ia64.h (FUNCTION_END_PROLOGUE): Define.\n+\t\n 2000-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dbxout.c (dbxout_type_fields): Don't segfault on fields with"}, {"sha": "7c4c5faadda39b5d1bf24e5006ba160c55158195", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=0186257f7898165091cde0d6e6f307862966fa2a", "patch": "@@ -92,11 +92,12 @@ extern void ia64_encode_section_info PARAMS((tree));\n extern int ia64_epilogue_uses PARAMS((int));\n extern void ia64_expand_prologue PARAMS((void));\n extern void ia64_expand_epilogue PARAMS((void));\n+extern void ia64_function_prologue PARAMS((FILE *, int));\n+extern void ia64_output_end_prologue PARAMS((FILE *));\n+extern void ia64_function_epilogue PARAMS((FILE *, int));\n extern int ia64_direct_return PARAMS((void));\n extern int ia64_rap_fp_offset PARAMS((void));\n extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));\n extern unsigned int ia64_compute_frame_size PARAMS((int));\n extern void save_restore_insns PARAMS((int));\n-extern void ia64_function_prologue PARAMS((FILE *, int));\n-extern void ia64_funtion_epilogue PARAMS((FILE *, int));"}, {"sha": "43ffdcbed61248d4fb7a004abbfa10d702f9355c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 55, "deletions": 13, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=0186257f7898165091cde0d6e6f307862966fa2a", "patch": "@@ -1001,6 +1001,8 @@ ia64_expand_prologue ()\n \toffset = GEN_INT (-frame_size);\n       else\n \t{\n+\t  /* ??? We use r2 to tell process_set that this is a stack pointer\n+\t     decrement.  See also ia64_expand_epilogue.  */\n \t  offset = gen_rtx_REG (DImode, GR_REG (2));\n \t  insn = emit_insn (gen_movdi (offset, GEN_INT (-frame_size)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n@@ -1033,6 +1035,8 @@ ia64_expand_prologue ()\n void\n ia64_expand_epilogue ()\n {\n+  rtx insn;\n+\n   /* Restore registers from frame.  */\n   save_restore_insns (0);\n \n@@ -1053,8 +1057,10 @@ ia64_expand_epilogue ()\n \t/* If there is a frame pointer, then we need to make the stack pointer\n \t   restore depend on the frame pointer, so that the stack pointer\n \t   restore won't be moved up past fp-relative loads from the frame.  */\n-\temit_insn (gen_epilogue_deallocate_stack (stack_pointer_rtx,\n-\t\t\t\t\t\t  hard_frame_pointer_rtx));\n+\tinsn\n+\t  = emit_insn (gen_epilogue_deallocate_stack (stack_pointer_rtx,\n+\t\t\t\t\t\t      hard_frame_pointer_rtx));\n+\tRTX_FRAME_RELATED_P (insn) = 1;\n       }\n     else\n       {\n@@ -1067,11 +1073,14 @@ ia64_expand_epilogue ()\n \t      offset = GEN_INT (frame_size);\n \t    else\n \t      {\n-\t\toffset = gen_rtx_REG (DImode, GR_REG (2));\n+\t\t/* ??? We use r3 to tell process_set that this is a stack\n+\t\t   pointer increment.  See also ia64_expand_prologue.  */\n+\t\toffset = gen_rtx_REG (DImode, GR_REG (3));\n \t\temit_insn (gen_movdi (offset, GEN_INT (frame_size)));\n \t      }\n-\t    emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t   offset));\n+\t    insn = emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t\t  offset));\n+\t    RTX_FRAME_RELATED_P (insn) = 1;\n \t  }\n       }\n     }\n@@ -1136,6 +1145,18 @@ ia64_function_prologue (file, size)\n     fprintf (file, \"\\t.prologue\\n\");\n }\n \n+/* Emit the .body directive at the scheduled end of the prologue.  */\n+\n+void\n+ia64_output_end_prologue (file)\n+     FILE *file;\n+{\n+  if (!flag_unwind_tables && (!flag_exceptions || exceptions_via_longjmp))\n+    return;\n+\n+  fputs (\"\\t.body\\n\", file);\n+}\n+\n /* Emit the function epilogue.  */\n \n void\n@@ -3021,19 +3042,40 @@ process_set (asm_out_file, pat)\n \t  rtx op1 = XEXP (src, 1);\n \t  if (op0 == dest && GET_CODE (op1) == CONST_INT)\n \t    {\n-\t      fputs (\"\\t.fframe \", asm_out_file);\n-\t      fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, -INTVAL (op1));\n-\t      fputc ('\\n', asm_out_file);\n-\t      frame_size = INTVAL (op1);\n-\t      return 1;\n+\t      if (INTVAL (op1) < 0)\n+\t\t{\n+\t\t  fputs (\"\\t.fframe \", asm_out_file);\n+\t\t  fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC,\n+\t\t\t   -INTVAL (op1));\n+\t\t  fputc ('\\n', asm_out_file);\n+\t\t  frame_size = INTVAL (op1);\n+\t\t}\n+\t      else\n+\t\tfprintf (asm_out_file, \"\\t.restore sp\\n\");\n \t    }\n \t  else if (op0 == dest && GET_CODE (op1) == REG)\n \t    {\n-\t      fprintf (asm_out_file, \"\\t.vframe r%d\\n\", REGNO (op1));\n-\t      frame_size = 0;\n-\t      return 1;\n+\t      /* ia64_expand_prologue uses r2 for stack pointer decrements,\n+\t\t ia64_expand_epilogue uses r3 for stack pointer increments.  */\n+\t      if (REGNO (op1) == GR_REG (2))\n+\t\t{\n+\t\t  fprintf (asm_out_file, \"\\t.vframe r%d\\n\", REGNO (op1));\n+\t\t  frame_size = 0;\n+\t\t}\n+\t      else if (REGNO (op1) == GR_REG (3))\n+\t\tfprintf (asm_out_file, \"\\t.restore sp\\n\");\n+\t      else\n+\t\tabort ();\n \t    }\n+\t  else\n+\t    abort ();\n \t}\n+      else if (GET_CODE (src) == REG && REGNO (src) == FRAME_POINTER_REGNUM)\n+\tfprintf (asm_out_file, \"\\t.restore sp\\n\");\n+      else\n+\tabort ();\n+\n+      return 1;\n     }\n   /* Look for a frame offset.  */\n   if (GET_CODE (dest) == REG)"}, {"sha": "cc5ba5b214d208c88f367b144f510b0183df6315", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0186257f7898165091cde0d6e6f307862966fa2a/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=0186257f7898165091cde0d6e6f307862966fa2a", "patch": "@@ -1464,6 +1464,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define FUNCTION_PROLOGUE(FILE, SIZE) \\\n   ia64_function_prologue (FILE, SIZE)\n \n+/* This macro notes the end of the prologue.  */\n+\n+#define FUNCTION_END_PROLOGUE(FILE)  ia64_output_end_prologue (FILE)\n+\n /* Define this macro as a C expression that is nonzero if the return\n    instruction or the function epilogue ignores the value of the stack pointer;\n    in other words, if it is safe to delete an instruction to adjust the stack"}]}