{"sha": "0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE1NWFkNDAxMWM1OGUzNjA4ZDg4ZTc2ZDFmYTBmNjI4Y2NlZGNkYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-10-14T12:54:03Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-10-14T12:54:03Z"}, "message": "re PR tree-optimization/67815 (Optimize const1 * copysign (const2, y) into copysign (const1 * const2, y) if const1 > 0 or -copysign (const1 * const2, y) if const1 < 0)\n\n\tPR tree-optimization/67815\n\t* tree-ssa-reassoc.c (attempt_builtin_copysign): New function.\n\t(reassociate_bb): Call it.\n\n\t* gcc.dg/tree-ssa/reassoc-39.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-40.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-41.c: New test.\n\nFrom-SVN: r228809", "tree": {"sha": "5a52a546f2b43eb3303cdf7667c6a5678747951b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a52a546f2b43eb3303cdf7667c6a5678747951b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5efd4498ae04ae9e6cfc193e430febd29773d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5efd4498ae04ae9e6cfc193e430febd29773d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5efd4498ae04ae9e6cfc193e430febd29773d39"}], "stats": {"total": 195, "additions": 195, "deletions": 0}, "files": [{"sha": "d85a2704aadd28e8327f5266ece76bfcc07bd1c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "patch": "@@ -1,3 +1,9 @@\n+2015-10-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/67815\n+\t* tree-ssa-reassoc.c (attempt_builtin_copysign): New function.\n+\t(reassociate_bb): Call it.\n+\n 2015-10-14  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):"}, {"sha": "670b9e43ce5fb2a47c429ea47b9236ded5a6958c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "patch": "@@ -1,3 +1,10 @@\n+2015-10-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/67815\n+\t* gcc.dg/tree-ssa/reassoc-39.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-40.c: New test.\n+\t* gcc.dg/tree-ssa/reassoc-41.c: New test.\n+\n 2015-10-14  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.dg/pragma-pop_options-1.c: New test."}, {"sha": "589d06be3f6cc91e4582388cad916fb6f6feacd9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-39.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-39.c?ref=0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "patch": "@@ -0,0 +1,41 @@\n+/* PR tree-optimization/67815 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-reassoc1-details\" } */\n+\n+float\n+f0 (float x)\n+{\n+  return 7.5 * __builtin_copysignf (2.0, x);\n+}\n+\n+float\n+f1 (float x)\n+{\n+  return -7.5 * __builtin_copysignf (2.0, x);\n+}\n+\n+double\n+f2 (double x, double y)\n+{\n+  return x * ((1.0/12) * __builtin_copysign (1.0, y));\n+}\n+\n+double\n+f3 (double x, double y)\n+{\n+  return (x * (-1.0/12)) * __builtin_copysign (1.0, y);\n+}\n+\n+double\n+f4 (double x, double y, double z)\n+{\n+  return (x * z) * ((1.0/12) * __builtin_copysign (4.0, y));\n+}\n+\n+double\n+f5 (double x, double y, double z)\n+{\n+  return (x * (-1.0/12)) * z * __builtin_copysign (2.0, y);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing copysign\" 6 \"reassoc1\"} }*/"}, {"sha": "d65bcc1b80b3c28bed38dd3d077c519e424b1c39", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-40.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-40.c?ref=0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/67815 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -frounding-math -fdump-tree-reassoc1-details\" } */\n+\n+/* Test that the copysign reassoc optimization doesn't fire for\n+   -frounding-math (i.e. HONOR_SIGN_DEPENDENT_ROUNDING) if the multiplication\n+   is inexact.  */\n+\n+double\n+f1 (double y)\n+{\n+  return (1.2 * __builtin_copysign (1.1, y));\n+}\n+\n+double\n+f2 (double y)\n+{\n+  return (-1.2 * __builtin_copysign (1.1, y));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Optimizing copysign\" \"reassoc1\" } } */"}, {"sha": "8a18b8878439d99f96d6d1242820ff234fcc98dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-41.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-41.c?ref=0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/67815 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fno-rounding-math -fdump-tree-reassoc1-details\" } */\n+\n+/* Test that the copysign reassoc optimization does fire for\n+   -fno-rounding-math (i.e. HONOR_SIGN_DEPENDENT_ROUNDING) if the multiplication\n+   is inexact.  */\n+\n+double\n+f1 (double y)\n+{\n+  return (1.2 * __builtin_copysign (1.1, y));\n+}\n+\n+double\n+f2 (double y)\n+{\n+  return (-1.2 * __builtin_copysign (1.1, y));\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing copysign\" 2 \"reassoc1\"} }*/"}, {"sha": "62438dd702786aaf8d197dd4ea1e27897c13f22e", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ad4011c58e3608d88e76d1fa0f628ccedcdb/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=0155ad4011c58e3608d88e76d1fa0f628ccedcdb", "patch": "@@ -4622,6 +4622,102 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n   return result;\n }\n \n+/* Attempt to optimize\n+   CST1 * copysign (CST2, y) -> copysign (CST1 * CST2, y) if CST1 > 0, or\n+   CST1 * copysign (CST2, y) -> -copysign (CST1 * CST2, y) if CST1 < 0.  */\n+\n+static void\n+attempt_builtin_copysign (vec<operand_entry *> *ops)\n+{\n+  operand_entry *oe;\n+  unsigned int i;\n+  unsigned int length = ops->length ();\n+  tree cst = ops->last ()->op;\n+\n+  if (length == 1 || TREE_CODE (cst) != REAL_CST)\n+    return;\n+\n+  FOR_EACH_VEC_ELT (*ops, i, oe)\n+    {\n+      if (TREE_CODE (oe->op) == SSA_NAME\n+\t  && has_single_use (oe->op))\n+\t{\n+\t  gimple *def_stmt = SSA_NAME_DEF_STMT (oe->op);\n+\t  if (is_gimple_call (def_stmt))\n+\t    {\n+\t      tree fndecl = gimple_call_fndecl (def_stmt);\n+\t      tree arg0, arg1;\n+\t      switch (DECL_FUNCTION_CODE (fndecl))\n+\t\t{\n+\t\tCASE_FLT_FN (BUILT_IN_COPYSIGN):\n+\t\t  arg0 = gimple_call_arg (def_stmt, 0);\n+\t\t  arg1 = gimple_call_arg (def_stmt, 1);\n+\t\t  /* The first argument of copysign must be a constant,\n+\t\t     otherwise there's nothing to do.  */\n+\t\t  if (TREE_CODE (arg0) == REAL_CST)\n+\t\t    {\n+\t\t      tree mul = const_binop (MULT_EXPR, TREE_TYPE (cst),\n+\t\t\t\t\t      cst, arg0);\n+\t\t      /* If we couldn't fold to a single constant, skip it.\n+\t\t\t That happens e.g. for inexact multiplication when\n+\t\t\t -frounding-math.  */\n+\t\t      if (mul == NULL_TREE)\n+\t\t\tbreak;\n+\t\t      /* Instead of adjusting the old DEF_STMT, let's build\n+\t\t\t a new call to not leak the LHS and prevent keeping\n+\t\t\t bogus debug statements.  DCE will clean up the old\n+\t\t\t call.  */\n+\t\t      gcall *call = gimple_build_call (fndecl, 2, mul, arg1);\n+\t\t      tree lhs = make_ssa_name (TREE_TYPE (arg0));\n+\t\t      gimple_call_set_lhs (call, lhs);\n+\t\t      gimple_set_location (call, gimple_location (def_stmt));\n+\t\t      insert_stmt_after (call, def_stmt);\n+\t\t      /* We've used the constant, get rid of it.  */\n+\t\t      ops->pop ();\n+\t\t      bool cst1_neg = real_isneg (TREE_REAL_CST_PTR (cst));\n+\t\t      /* Handle the CST1 < 0 case by negating the result.  */\n+\t\t      if (cst1_neg)\n+\t\t\t{\n+\t\t\t  tree negrhs = make_ssa_name (TREE_TYPE (lhs));\n+\t\t\t  gimple *negate_stmt\n+\t\t\t    = gimple_build_assign (negrhs, NEGATE_EXPR, lhs);\n+\t\t\t  insert_stmt_after (negate_stmt, call);\n+\t\t\t  oe->op = negrhs;\n+\t\t\t}\n+\t\t      else\n+\t\t\toe->op = lhs;\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t{\n+\t\t\t  fprintf (dump_file, \"Optimizing copysign: \");\n+\t\t\t  print_generic_expr (dump_file, cst, 0);\n+\t\t\t  fprintf (dump_file, \" * \");\n+\t\t\t  print_generic_expr (dump_file,\n+\t\t\t\t\t      gimple_call_fn (def_stmt), 0);\n+\t\t\t  fprintf (dump_file, \" (\");\n+\t\t\t  print_generic_expr (dump_file, arg0, 0);\n+\t\t\t  fprintf (dump_file, \", \");\n+\t\t\t  print_generic_expr (dump_file, arg1, 0);\n+\t\t\t  fprintf (dump_file, \") into %s\",\n+\t\t\t\t   cst1_neg ? \"-\" : \"\");\n+\t\t\t  print_generic_expr (dump_file,\n+\t\t\t\t\t      gimple_call_fn (def_stmt), 0);\n+\t\t\t  fprintf (dump_file, \" (\");\n+\t\t\t  print_generic_expr (dump_file, mul, 0);\n+\t\t\t  fprintf (dump_file, \", \");\n+\t\t\t  print_generic_expr (dump_file, arg1, 0);\n+\t\t\t  fprintf (dump_file, \"\\n\");\n+\t\t\t}\n+\t\t      return;\n+\t\t    }\n+\t\t  break;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Transform STMT at *GSI into a copy by replacing its rhs with NEW_RHS.  */\n \n static void\n@@ -4764,6 +4860,9 @@ reassociate_bb (basic_block bb)\n \t      if (rhs_code == BIT_IOR_EXPR || rhs_code == BIT_AND_EXPR)\n \t\toptimize_range_tests (rhs_code, &ops);\n \n+\t      if (rhs_code == MULT_EXPR)\n+\t\tattempt_builtin_copysign (&ops);\n+\n \t      if (first_pass_instance\n \t\t  && rhs_code == MULT_EXPR\n \t\t  && flag_unsafe_math_optimizations)"}]}