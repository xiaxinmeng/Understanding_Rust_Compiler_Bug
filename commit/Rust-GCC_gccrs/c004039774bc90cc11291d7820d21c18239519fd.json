{"sha": "c004039774bc90cc11291d7820d21c18239519fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwNDAzOTc3NGJjOTBjYzExMjkxZDc4MjBkMjFjMTgyMzk1MTlmZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-11-14T13:56:34Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-11-14T13:56:34Z"}, "message": "Makefile.in (LIBGNAT_TARGET_PAIRS): Add rules for x86_64-linux.\n\n\t* Makefile.in (LIBGNAT_TARGET_PAIRS): Add rules for x86_64-linux.\n\n\t* 5nsystem.ads: New file for x86_64-linux-gnu.\n\nFrom-SVN: r73606", "tree": {"sha": "af533caa9ee99838462ca739423dc94349410901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af533caa9ee99838462ca739423dc94349410901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c004039774bc90cc11291d7820d21c18239519fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c004039774bc90cc11291d7820d21c18239519fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c004039774bc90cc11291d7820d21c18239519fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c004039774bc90cc11291d7820d21c18239519fd/comments", "author": null, "committer": null, "parents": [{"sha": "4a4fe537ec08392158e25943044eeae99461f0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4fe537ec08392158e25943044eeae99461f0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4fe537ec08392158e25943044eeae99461f0cc"}], "stats": {"total": 239, "additions": 208, "deletions": 31}, "files": [{"sha": "37a495d8870bddf6bffe77d54584cf74048af5b2", "filename": "gcc/ada/5nsystem.ads", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c004039774bc90cc11291d7820d21c18239519fd/gcc%2Fada%2F5nsystem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c004039774bc90cc11291d7820d21c18239519fd/gcc%2Fada%2F5nsystem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F5nsystem.ads?ref=c004039774bc90cc11291d7820d21c18239519fd", "patch": "@@ -0,0 +1,150 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (GNU-Linux/x86-64 Version)                      --\n+--                                                                          --\n+--          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+pragma Pure (System);\n+--  Note that we take advantage of the implementation permission to\n+--  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := Integer'Last;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.000_001;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 64;\n+   Memory_Size  : constant := 2 ** 64;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   Max_Priority           : constant Positive := 30;\n+   Max_Interrupt_Priority : constant Positive := 31;\n+\n+   subtype Any_Priority       is Integer      range  0 .. 31;\n+   subtype Priority           is Any_Priority range  0 .. 30;\n+   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+\n+   Default_Priority : constant Priority := 15;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   AAMP                      : constant Boolean := False;\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Functions_Return_By_DSP   : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   OpenVMS                   : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+   GCC_ZCX_Support           : constant Boolean := True;\n+   Front_End_ZCX_Support     : constant Boolean := False;\n+\n+   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n+\n+   High_Integrity_Mode       : constant Boolean := False;\n+   Long_Shifts_Inlined       : constant Boolean := True;\n+\n+end System;"}, {"sha": "0a8ba69b69bec9617e6bfe846bbdd935ebeb66cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c004039774bc90cc11291d7820d21c18239519fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c004039774bc90cc11291d7820d21c18239519fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c004039774bc90cc11291d7820d21c18239519fd", "patch": "@@ -1,3 +1,9 @@\n+2003-11-14  Andreas Jaeger  <aj@suse.de>\n+\n+\t* Makefile.in (LIBGNAT_TARGET_PAIRS): Add rules for x86_64-linux.\n+\n+\t* 5nsystem.ads: New file for x86_64-linux-gnu.\n+\n 2003-11-14  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* nmake.ads, nmake.adb, sinfo.h, treeprs.ads: Regenerated.\n@@ -15,28 +21,28 @@\n \tSdefault.Include_Dir_Default_Name and Osint.Object_Dir_Default_Prefix\n \tinstead of Sdefault.Object_Dir_Default_Name\n \n-\t* gnatlink.adb: \n+\t* gnatlink.adb:\n \t(Process_Binder_File): Never suppress the option following -Xlinker\n \n-\t* mdll-utl.adb: \n+\t* mdll-utl.adb:\n \t(Gcc): Use Osint.Object_Dir_Default_Prefix instead of\n \tSdefault.Object_Dir_Default_Name.\n \n-\t* osint.ads, osint.adb: \n+\t* osint.ads, osint.adb:\n \t(Include_Dir_Default_Prefix, Object_Dir_Default_Prefix): New functions\n \tMinor reformatting.\n \n \t* vms_conv.ads: Minor reformating\n \tRemove GNAT STANDARD and GNAT PSTA\n \n-\t* vms_conv.adb: \n+\t* vms_conv.adb:\n \tAllow GNAT MAKE to have several files on the command line.\n \t(Init_Object_Dirs): Use Osint.Object_Dir_Default_Prefix instead of\n \tSdefault.Object_Dir_Default_Name.\n \tMinor Reformating\n \tRemove data for GNAT STANDARD\n \n-\t* vms_data.ads: \n+\t* vms_data.ads:\n \tAdd new compiler qualifier /PRINT_STANDARD (-gnatS)\n \tRemove data for GNAT STANDARD\n \tRemove options and documentation for -gnatwb/-gnatwB: these warning\n@@ -46,21 +52,21 @@\n \n \t* 5zthrini.adb: (Init_RTS): Made visible\n \n-\t* 5zthrini.adb: \n+\t* 5zthrini.adb:\n \t(Register): Removed unnecessary call to taskVarGet that checked whether\n \t an ATSD was already set as a task var for the argument thread.\n \n-\t* s-thread.adb: \n+\t* s-thread.adb:\n \tUpdated comment to reflect that this is a VxWorks version\n \tAdded context clause for System.Threads.Initialization\n \tAdded call to System.Threads.Initialization.Init_RTS\n \n 2003-11-13  Jerome Guitton  <guitton@act-europe.fr>\n \n-\t* 5zthrini.adb: \n+\t* 5zthrini.adb:\n \t(Init_RTS): New procedure, for the initialization of the run-time lib.\n \n-\t* s-thread.adb: \n+\t* s-thread.adb:\n \tRemove dependancy on System.Init, so that this file can be used in the\n \tAE653 sequential run-time lib.\n \n@@ -70,25 +76,25 @@\n \n 2003-11-13  Ed Schonberg  <schonberg@gnat.com>\n \n-\t* checks.adb: \n+\t* checks.adb:\n \t(Apply_Discriminant_Check): Do no apply check if target type is derived\n \tfrom source type with no applicable constraint.\n \n-\t* lib-writ.adb: \n+\t* lib-writ.adb:\n \t(Ensure_System_Dependency): Do not apply the style checks that may have\n \tbeen specified for the main unit.\n \n-\t* sem_ch8.adb: \n+\t* sem_ch8.adb:\n \t(Find_Selected_Component): Further improvement in error message, with\n \tRM reference.\n \n-\t* sem_res.adb: \n+\t* sem_res.adb:\n \t(Resolve): Handle properly the case of an illegal overloaded protected\n \tprocedure.\n \n 2003-11-13  Javier Miranda  <miranda@gnat.com>\n \n-\t* exp_aggr.adb: \n+\t* exp_aggr.adb:\n \t(Has_Default_Init_Comps): New function to check the presence of\n \tdefault initialization in an aggregate.\n \t(Build_Record_Aggr_Code): Recursively expand the ancestor in case of\n@@ -106,7 +112,7 @@\n \t(P_Record_Or_Array_Component_Association): Give support to the new\n \tsyntax for default initialization of components.\n \n-\t* sem_aggr.adb: \n+\t* sem_aggr.adb:\n \t(Resolve_Aggregate): Relax the strictness of the frontend in case of\n \tlimited aggregates.\n \t(Resolve_Record_Aggregate): Give support to default initialized\n@@ -118,7 +124,7 @@\n \t(Resolve_Extension_Aggregate): Give support to limited extension\n \taggregates.\n \n-\t* sem_ch3.adb: \n+\t* sem_ch3.adb:\n \t(Check_Initialization): Relax the strictness of the front-end in case\n \tof aggregate and extension aggregates. This test is now done in\n \tGet_Value in a per-component manner.\n@@ -168,15 +174,15 @@\n \n \t* s-thread.adb: Implement bodies for thread body processing\n \n-\t* s-thread.ads: \n+\t* s-thread.ads:\n \tAdded comment identifying supported targets for pragma Thread_Body.\n \n 2003-11-10  Pascal Obry  <obry@gnat.com>\n \n \t* adaint.c (_gnat_stat) [WIN32]: Check if name is not bigger than\n \tGNAT_MAX_PATH_LEN.\n \n-\t* s-fileio.adb: \n+\t* s-fileio.adb:\n \t(Open): Properly check for string length before copying into the buffer.\n \tRaises Name_Error if buffer is too small. Note that this was a potential\n \tbuffer overflow.\n@@ -192,7 +198,7 @@\n \n 2003-11-10  Vincent Celier  <celier@gnat.com>\n \n-\t* gprcmd.adb: \n+\t* gprcmd.adb:\n \t(Gprcmd): Add new command \"prefix\" to get the prefix of the GNAT\n \tinstallation.\n \n@@ -206,13 +212,13 @@\n \t* prj-nmsc.adb (Language_Independent_Check): Adjust error message when\n \ta library project is extended by a virtual extending project.\n \n-\t* prj-part.adb: \n+\t* prj-part.adb:\n \tModifications throughout to implement extending-all project, including:\n \t(Virtual_Hash, Processed_Hash): New hash tables\n \t(Create_Virtual_Extending_Project): New procedure\n \t(Look_For_Virtual_Projects_For): New procedure\n \n-\t* prj-proc.adb: \n+\t* prj-proc.adb:\n \t(Process): After checking the projects, if main project is an\n \textending-all project, set the object directory of all virtual extending\n \tproject to the object directory of the main project.\n@@ -221,7 +227,7 @@\n \t(Recursive_Process): If name starts with the virtual prefix, set Virtual\n \tto True in the project data.\n \n-\t* prj-tree.adb: \n+\t* prj-tree.adb:\n \t(Default_Project_Node): Add new boolean component Extending_All\n \t(Is_Extending_All): New function\n \t(Set_Is_Extending_All): New procedure\n@@ -232,7 +238,7 @@\n \n \t* switch-c.adb: (Scan_Front_End_Switches): Process -nostdlib\n \n-\t* vms_data.ads: \n+\t* vms_data.ads:\n \tAdd qualifier /NOSTD_LIBRARIES (-nostdlib) for the compiler\n \n \t* bld.adb (Recursive_Process): If MAKE_ROOT is not defined, call\n@@ -242,13 +248,13 @@\n \n \t* einfo.ads: Fix a typo and remove an extraneous word in comments.\n \n-\t* lib-load.adb: \n+\t* lib-load.adb:\n \t(Create_Dummy_Package_Unit): Set the scope of the entity for the\n \tcreated dummy package to Standard_Standard, not to itself, to\n \tdefend other parts of the front-end against encoutering a cycle in\n \tthe scope chain.\n \n-\t* sem_ch10.adb: \n+\t* sem_ch10.adb:\n \t(Analyze_With_Clause): When setting the entities for the successive\n \tN_Expanded_Names that constitute the name of a child unit, do not\n \tattempt to go further than Standard_Standard in the chain of scopes.\n@@ -258,11 +264,11 @@\n \n 2003-11-10  Ed Schonberg  <schonberg@gnat.com>\n \n-\t* exp_ch6.adb: \n+\t* exp_ch6.adb:\n \t(Expand_Thread_Body): Place subprogram on scope stack, so that new\n \tdeclarations are given the proper scope.\n \n-\t* sem_ch13.adb: \n+\t* sem_ch13.adb:\n \t(Check_Expr_Constants): Reject an expression that contains a constant\n \tcreated during expansion, and that appears after the object to which\n \tthe address clause applies.\n@@ -272,7 +278,7 @@\n \tthat uses 'Range of a function call with controlled components, so\n \tthat the function result can be finalized before starting the loop.\n \n-\t* sem_ch8.adb: \n+\t* sem_ch8.adb:\n \t(Find_Selected_Component): Improve error message when prefix is\n \tan implicit dereference of an incomplete type.\n \n@@ -294,14 +300,14 @@\n \tUpdate documentation for Associated_Node and Entity fields to clarify\n \trelationship and usage.\n \n-\t* sprint.adb: \n+\t* sprint.adb:\n \t(Write_Id): Properly process Associated_Node field in generic template\n \n-\t* switch-c.adb: \n+\t* switch-c.adb:\n \tRecognize new -gnatS switch for printing package Standard\n \tThis replaces gnatpsta\n \n-\t* usage.adb: \n+\t* usage.adb:\n \tAdd line for  new -gnatS switch for printing package Standard\n \tThis replaces gnatpsta\n "}, {"sha": "8ccce71fc7479f22c9150bcd86d9d8b09af3b463", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c004039774bc90cc11291d7820d21c18239519fd/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c004039774bc90cc11291d7820d21c18239519fd/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=c004039774bc90cc11291d7820d21c18239519fd", "patch": "@@ -1348,6 +1348,27 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   LIBRARY_VERSION := $(strip $(shell grep Library_Version $(fsrcpfx)gnatvsn.ads | sed -e 's/.*GNAT Lib v\\(.*\\)[ \"].*/\\1/'))\n endif\n \n+ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<4lintnam.ads \\\n+  s-inmaop.adb<7sinmaop.adb \\\n+  s-intman.adb<5lintman.adb \\\n+  s-osinte.ads<5iosinte.ads \\\n+  s-osinte.adb<5iosinte.adb \\\n+  s-osprim.adb<7sosprim.adb \\\n+  s-taprop.adb<5itaprop.adb \\\n+  s-tpopsp.adb<5atpopsp.adb \\\n+  s-taspri.ads<5itaspri.ads \\\n+  system.ads<5nsystem.ads\n+\n+  TOOLS_TARGET_PAIRS=mlib-tgt.adb<5lml-tgt.adb\n+  MISCLIB=\n+  THREADSLIB=-lpthread\n+  GNATLIB_SHARED=gnatlib-shared-dual\n+  PREFIX_OBJS=$(PREFIX_REAL_OBJS)\n+  LIBRARY_VERSION := $(strip $(shell grep Library_Version $(fsrcpfx)gnatvsn.ads | sed -e 's/.*GNAT Lib v\\(.*\\)[ \"].*/\\1/'))\n+endif\n+\n # The runtime library for gnat comprises two directories.  One contains the\n # Ada source files that the compiler (gnat1) needs -- these files are listed\n # by ADA_INCLUDE_SRCS -- and the other contains the object files and their"}]}