{"sha": "5718d9d95fd9457c9f6cf49526ef52f974d9419c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxOGQ5ZDk1ZmQ5NDU3YzlmNmNmNDk1MjZlZjUyZjk3NGQ5NDE5Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-09-28T15:45:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-09-28T15:45:51Z"}, "message": "Fix gcc.dg/torture/fp-int-convert.h for excess precision after PR c/87390.\n\nAs reported in\n<https://gcc.gnu.org/ml/gcc-patches/2018-09/msg01684.html>, some\nfp-int-convert tests fail after my fix for PR c/87390, in Arm /\nAArch64 configurations where _Float16 uses excess precision by\ndefault.  The issue is comparisons of the results of a conversion by\nassignment (compile-time or run-time) from integer to floating-point\nwith the original integer value; previously this would compare against\nan implicit compile-time conversion to the target type, but now, for\nC11 and later, it compares against an implicit compile-time conversion\nto a possibly wider evaluation format.  This is fixed by adding casts\nto the test so that the comparison is with a value converted\nexplicitly to the target type at compile time, without any use of a\nwider evaluation format.\n\n\tPR c/87390\n\t* gcc.dg/torture/fp-int-convert.h (TEST_I_F_VAL): Convert integer\n\tvalues explicitly to target type for comparison.\n\nFrom-SVN: r264696", "tree": {"sha": "a880fc39f7bad1c3b55e0f5003ad2450d27341e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a880fc39f7bad1c3b55e0f5003ad2450d27341e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5718d9d95fd9457c9f6cf49526ef52f974d9419c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5718d9d95fd9457c9f6cf49526ef52f974d9419c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5718d9d95fd9457c9f6cf49526ef52f974d9419c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5718d9d95fd9457c9f6cf49526ef52f974d9419c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02469d3a1d3bdd234ec3832c4a26853586c75f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02469d3a1d3bdd234ec3832c4a26853586c75f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02469d3a1d3bdd234ec3832c4a26853586c75f2a"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "ff242d833ff2547ccc92b3e21a9c0f0f53f831db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5718d9d95fd9457c9f6cf49526ef52f974d9419c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5718d9d95fd9457c9f6cf49526ef52f974d9419c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5718d9d95fd9457c9f6cf49526ef52f974d9419c", "patch": "@@ -1,3 +1,9 @@\n+2018-09-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/87390\n+\t* gcc.dg/torture/fp-int-convert.h (TEST_I_F_VAL): Convert integer\n+\tvalues explicitly to target type for comparison.\n+\n 2018-09-28  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR testsuite/87433"}, {"sha": "f0b3f3968fc3de16524a05f5ed3f34f9856be8e4", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5718d9d95fd9457c9f6cf49526ef52f974d9419c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5718d9d95fd9457c9f6cf49526ef52f974d9419c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h?ref=5718d9d95fd9457c9f6cf49526ef52f974d9419c", "patch": "@@ -90,6 +90,7 @@ do {\t\t\t\t\t\t\t\\\n   if (ivin != (VAL)\t\t\t\t\t\\\n       || ((PREC_OK) && ivout != ivin)\t\t\t\\\n       || ((PREC_OK) && ivout != (VAL))\t\t\t\\\n-      || fv1 != (VAL) || fv2 != (VAL) || fv1 != fv2)\t\\\n+      || fv1 != (FT) (VAL) || fv2 != (FT) (VAL)\t\t\\\n+      || fv1 != fv2)\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n } while (0)"}]}