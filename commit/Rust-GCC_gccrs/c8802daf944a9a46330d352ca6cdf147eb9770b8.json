{"sha": "c8802daf944a9a46330d352ca6cdf147eb9770b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4MDJkYWY5NDRhOWE0NjMzMGQzNTJjYTZjZGYxNDdlYjk3NzBiOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-02T18:52:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-02T18:52:33Z"}, "message": "predicates.md (register_ssemem_operand): New predicate.\n\n\t* config/i386/predicates.md (register_ssemem_operand): New predicate.\n\t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>): Merge from\n\t*cmpi<FPCMP:unord><MODEF:mode>_mixed and\n\t*cmpi<FPCMP:unord><X87MODEF:mode>_i387.  Disable unsupported\n\talternatives using \"enabled\" attribute.  Use register_ssemem_operand\n\tas operand 1 predicate.\n\t(*cmpi<unord>xf_i387): Split XFmode pattern from\n\t*cmpi<FPCMP:unord><X87MODEF:mode>_i387.\n\t(*absneg<mode>2): Merge from *absneg<mode>2_mixed and\n\t*absneg<mode>2_i387.  Disable unsupported alternatives using\n\t\"enabled\" attribute.\n\nFrom-SVN: r235782", "tree": {"sha": "290db3fcac2eef4b6d7c087fe3e4840101f7f843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290db3fcac2eef4b6d7c087fe3e4840101f7f843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8802daf944a9a46330d352ca6cdf147eb9770b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8802daf944a9a46330d352ca6cdf147eb9770b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8802daf944a9a46330d352ca6cdf147eb9770b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8802daf944a9a46330d352ca6cdf147eb9770b8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "778864283e64809939a20aa70ee50c3d80fe10cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778864283e64809939a20aa70ee50c3d80fe10cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778864283e64809939a20aa70ee50c3d80fe10cf"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "ab057e97be0a05f1a1ac7641f250107e39bacf29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8802daf944a9a46330d352ca6cdf147eb9770b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8802daf944a9a46330d352ca6cdf147eb9770b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8802daf944a9a46330d352ca6cdf147eb9770b8", "patch": "@@ -1,3 +1,17 @@\n+2016-05-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (register_ssemem_operand): New predicate.\n+\t* config/i386/i386.md (*cmpi<FPCMP:unord><MODEF:mode>): Merge from\n+\t*cmpi<FPCMP:unord><MODEF:mode>_mixed and\n+\t*cmpi<FPCMP:unord><X87MODEF:mode>_i387.  Disable unsupported\n+\talternatives using \"enabled\" attribute.  Use register_ssemem_operand\n+\tas operand 1 predicate.\n+\t(*cmpi<unord>xf_i387): Split XFmode pattern from\n+\t*cmpi<FPCMP:unord><X87MODEF:mode>_i387.\n+\t(*absneg<mode>2): Merge from *absneg<mode>2_mixed and\n+\t*absneg<mode>2_i387.  Disable unsupported alternatives using\n+\t\"enabled\" attribute.\n+\n 2016-05-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c (lower_oacc_head_tail): Assert there is at least one\n@@ -97,8 +111,6 @@\n \tDisable unsupported alternatives using \"enabled\" attribute.  Use\n \tnonimm_ssenomem_operand as operand 1 predicate.  Also check\n \tX87_ENABLE_ARITH for TARGET_MIX_SSE_I387 alternatives.\n-\t* config/i386/predicates.md (nonimm_ssenomem_operand): New predicate.\n-\t(register_mixssei387nonimm_operand): Remove predicate.\n \n 2016-05-02  Richard Sandiford  <richard.sandiford@arm.com>\n "}, {"sha": "c409872a0bec036dc5ce8ad0571604e12a5fd137", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8802daf944a9a46330d352ca6cdf147eb9770b8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8802daf944a9a46330d352ca6cdf147eb9770b8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c8802daf944a9a46330d352ca6cdf147eb9770b8", "patch": "@@ -1665,12 +1665,13 @@\n (define_mode_iterator FPCMP [CCFP CCFPU])\n (define_mode_attr unord [(CCFP \"\") (CCFPU \"u\")])\n \n-(define_insn \"*cmpi<FPCMP:unord><MODEF:mode>_mixed\"\n+(define_insn \"*cmpi<FPCMP:unord><MODEF:mode>\"\n   [(set (reg:FPCMP FLAGS_REG)\n \t(compare:FPCMP\n \t  (match_operand:MODEF 0 \"register_operand\" \"f,v\")\n-\t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"f,vm\")))]\n-  \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"\n+\t  (match_operand:MODEF 1 \"register_ssemem_operand\" \"f,vm\")))]\n+  \"(SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\n+   || (TARGET_80387 && TARGET_CMOVE)\"\n   \"* return output_fp_compare (insn, operands, true,\n \t\t\t       <FPCMP:MODE>mode == CCFPUmode);\"\n   [(set_attr \"type\" \"fcmp,ssecomi\")\n@@ -1689,22 +1690,27 @@\n    (set_attr \"bdver1_decode\" \"double\")\n    (set_attr \"znver1_decode\" \"double\")\n    (set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"0\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\")\n-\t   ]\n-           (symbol_ref \"true\")))])\n+     (if_then_else\n+       (match_test (\"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0\")\n+\t (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t (symbol_ref \"true\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"0\")\n+\t (symbol_ref \"true\")\n+\t (symbol_ref \"false\"))))])\n \n-(define_insn \"*cmpi<FPCMP:unord><X87MODEF:mode>_i387\"\n+(define_insn \"*cmpi<unord>xf_i387\"\n   [(set (reg:FPCMP FLAGS_REG)\n \t(compare:FPCMP\n-\t  (match_operand:X87MODEF 0 \"register_operand\" \"f\")\n-\t  (match_operand:X87MODEF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387 && TARGET_CMOVE\n-   && !(SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH)\"\n+\t  (match_operand:XF 0 \"register_operand\" \"f\")\n+\t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n+  \"TARGET_80387 && TARGET_CMOVE\"\n   \"* return output_fp_compare (insn, operands, true,\n-\t\t\t       <FPCMP:MODE>mode == CCFPUmode);\"\n+\t\t\t       <MODE>mode == CCFPUmode);\"\n   [(set_attr \"type\" \"fcmp\")\n-   (set_attr \"mode\" \"<X87MODEF:MODE>\")\n+   (set_attr \"mode\" \"XF\")\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")\n    (set_attr \"bdver1_decode\" \"double\")\n@@ -9235,27 +9241,34 @@\n   \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"ix86_expand_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n-(define_insn \"*absneg<mode>2_mixed\"\n+(define_insn \"*absneg<mode>2\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,f,!r\")\n \t(match_operator:MODEF 3 \"absneg_operator\"\n \t  [(match_operand:MODEF 1 \"register_operand\" \"0,x,0,0\")]))\n    (use (match_operand:<ssevecmode> 2 \"nonimmediate_operand\" \"xm,0,X,X\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+   || TARGET_80387\"\n   \"#\"\n   [(set (attr \"enabled\")\n-     (cond [(eq_attr \"alternative\" \"2\")\n-              (symbol_ref \"TARGET_MIX_SSE_I387\")\n-\t   ]\n-           (symbol_ref \"true\")))])\n+     (if_then_else\n+       (match_test (\"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"2\")\n+\t (symbol_ref \"TARGET_MIX_SSE_I387\")\n+\t (symbol_ref \"true\"))\n+       (if_then_else\n+\t (eq_attr \"alternative\" \"2,3\")\n+\t (symbol_ref \"true\")\n+\t (symbol_ref \"false\"))))])\n \n-(define_insn \"*absneg<mode>2_i387\"\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,!r\")\n-\t(match_operator:X87MODEF 3 \"absneg_operator\"\n-\t  [(match_operand:X87MODEF 1 \"register_operand\" \"0,0\")]))\n+(define_insn \"*absnegxf2_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,!r\")\n+\t(match_operator:XF 3 \"absneg_operator\"\n+\t  [(match_operand:XF 1 \"register_operand\" \"0,0\")]))\n    (use (match_operand 2))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_80387 && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n+  \"TARGET_80387\"\n   \"#\")\n \n (define_expand \"<code>tf2\""}, {"sha": "c1541b56d133c8ca5f1e95b5d03e26b5c4738f8c", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8802daf944a9a46330d352ca6cdf147eb9770b8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8802daf944a9a46330d352ca6cdf147eb9770b8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=c8802daf944a9a46330d352ca6cdf147eb9770b8", "patch": "@@ -121,6 +121,13 @@\n     (match_operand 0 \"nonmemory_operand\")\n     (match_operand 0 \"general_operand\")))\n \n+;; Match register operands, but include memory operands for TARGET_SSE_MATH.\n+(define_predicate \"register_ssemem_operand\"\n+  (if_then_else\n+    (match_test \"SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH\")\n+    (match_operand 0 \"nonimmediate_operand\")\n+    (match_operand 0 \"register_operand\")))\n+\n ;; Match nonimmediate operands, but exclude memory operands\n ;; for TARGET_SSE_MATH if TARGET_MIX_SSE_I387 is not enabled.\n (define_predicate \"nonimm_ssenomem_operand\""}]}