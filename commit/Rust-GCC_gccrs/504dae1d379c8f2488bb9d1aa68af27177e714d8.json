{"sha": "504dae1d379c8f2488bb9d1aa68af27177e714d8", "node_id": "C_kwDOANBUbNoAKDUwNGRhZTFkMzc5YzhmMjQ4OGJiOWQxYWE2OGFmMjcxNzdlNzE0ZDg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-13T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-13T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "cc92def0b58ee75f830123b6a288a43edc2d60bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc92def0b58ee75f830123b6a288a43edc2d60bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/504dae1d379c8f2488bb9d1aa68af27177e714d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504dae1d379c8f2488bb9d1aa68af27177e714d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504dae1d379c8f2488bb9d1aa68af27177e714d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504dae1d379c8f2488bb9d1aa68af27177e714d8/comments", "author": null, "committer": null, "parents": [{"sha": "3c742621ed28540cf42d4cfbc2bf03433cd26738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c742621ed28540cf42d4cfbc2bf03433cd26738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c742621ed28540cf42d4cfbc2bf03433cd26738"}], "stats": {"total": 401, "additions": 400, "deletions": 1}, "files": [{"sha": "a8cb3803e81a50c7a11889bab540d83f05992975", "filename": "gcc/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=504dae1d379c8f2488bb9d1aa68af27177e714d8", "patch": "@@ -1,3 +1,137 @@\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104072\n+\t* reginfo.cc: New functions (clear_global_regs_cache,\n+\treginfo_cc_finalize) to avoid an issue where compiling the same\n+\tcode multiple times gives an error about assigning the same\n+\tregister to 2 global variables.\n+\t* rtl.h: New function (reginfo_cc_finalize).\n+\t* toplev.cc: Call it.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104071\n+\t* toplev.cc: Call the new function tree_cc_finalize in\n+\ttoplev::finalize.\n+\t* tree.cc: New functions (clear_nonstandard_integer_type_cache\n+\tand tree_cc_finalize) to clear the cache of non-standard integer\n+\ttypes to avoid having issues with some optimizations of\n+\tbitcast where the SSA_NAME will have a size of a cached\n+\tinteger type that should have been invalidated, causing a\n+\tcomparison of integer constant to fail.\n+\t* tree.h: New function (tree_cc_finalize).\n+\n+2022-04-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/97348\n+\t* config/nvptx/nvptx.h (ASM_SPEC): Don't set.\n+\t* config/nvptx/nvptx.opt (misa): Adjust comment.\n+\n+2022-04-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tRevert:\n+\t2022-03-03  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.h (ASM_SPEC): Add %{misa=sm_30:--no-verify}.\n+\n+2022-04-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tRevert:\n+\t2022-03-31  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.h (ASM_SPEC): Use \"-m sm_35\" for -misa=sm_30.\n+\n+2022-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/104303\n+\t* tree-ssa-dce.cc (mark_stmt_if_obviously_necessary): Do not\n+\tinclude local escaped memory as obviously necessary stores.\n+\n+2022-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105235\n+\t* tree-ssa-math-opts.cc (execute_cse_conv_1): Clean EH and\n+\treturn whether the CFG changed.\n+\t(execute_cse_sincos_1): Adjust.\n+\n+2022-04-12  Przemyslaw Wirkus  <Przemyslaw.Wirkus@arm.com>\n+\n+\tPR target/104144\n+\t* config/arm/t-aprofile (MULTI_ARCH_OPTS_A): Remove Armv9-a options.\n+\t(MULTI_ARCH_DIRS_A): Remove Armv9-a diretories.\n+\t(MULTILIB_REQUIRED): Don't require Armv9-a libraries.\n+\t(MULTILIB_MATCHES): Treat Armv9-a as equivalent to Armv8-a.\n+\t(MULTILIB_REUSE): Remove remap rules for Armv9-a.\n+\t* config/arm/t-multilib (v9_a_nosimd_variants): Delete.\n+\t(MULTILIB_MATCHES): Remove mappings for v9_a_nosimd_variants.\n+\n+2022-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105232\n+\t* tree.cc (component_ref_size): Bail out for too large\n+\tor non-constant sizes.\n+\n+2022-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105226\n+\t* tree-vect-loop-manip.cc (vect_loop_versioning): Verify\n+\twe can split the exit of an outer loop we choose to version.\n+\n+2022-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-expand.cc (ix86_emit_i387_sinh, ix86_emit_i387_cosh,\n+\tix86_emit_i387_tanh, ix86_emit_i387_asinh, ix86_emit_i387_acosh,\n+\tix86_emit_i387_atanh, ix86_emit_i387_log1p, ix86_emit_i387_round,\n+\tix86_emit_swdivsf, ix86_emit_swsqrtsf,\n+\tix86_expand_atomic_fetch_op_loop, ix86_expand_cmpxchg_loop):\n+\tFormatting fix.\n+\t* config/i386/i386.cc (warn_once_call_ms2sysv_xlogues): Likewise.\n+\n+2022-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105214\n+\t* config/i386/i386-expand.cc (ix86_emit_i387_log1p): Call\n+\tdo_pending_stack_adjust.\n+\n+2022-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/105211\n+\t* builtins.cc (expand_builtin_int_roundingfn_2): If mathfn_built_in_1\n+\tfails for TREE_TYPE (arg), retry it with\n+\tTREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl))) and if even that\n+\tfails, emit call normally.\n+\n+2022-04-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* common/config/s390/s390-common.cc: Rename PF_ARCH14 to PF_Z16.\n+\t* config.gcc: Add z16 as march/mtune switch.\n+\t* config/s390/driver-native.cc (s390_host_detect_local_cpu):\n+\tRecognize z16 with -march=native.\n+\t* config/s390/s390-opts.h (enum processor_type): Rename\n+\tPROCESSOR_ARCH14 to PROCESSOR_3931_Z16.\n+\t* config/s390/s390.cc (PROCESSOR_ARCH14): Rename to ...\n+\t(PROCESSOR_3931_Z16): ... throughout the file.\n+\t(s390_processor processor_table): Add z16 as cpu string.\n+\t* config/s390/s390.h (enum processor_flags): Rename PF_ARCH14 to\n+\tPF_Z16.\n+\t(TARGET_CPU_ARCH14): Rename to ...\n+\t(TARGET_CPU_Z16): ... this.\n+\t(TARGET_CPU_ARCH14_P): Rename to ...\n+\t(TARGET_CPU_Z16_P): ... this.\n+\t(TARGET_ARCH14): Rename to ...\n+\t(TARGET_Z16): ... this.\n+\t(TARGET_ARCH14_P): Rename to ...\n+\t(TARGET_Z16_P): ... this.\n+\t* config/s390/s390.md (cpu_facility): Rename arch14 to z16 and\n+\tcheck TARGET_Z16 instead of TARGET_ARCH14.\n+\t* config/s390/s390.opt: Add z16 to processor_type.\n+\t* doc/invoke.texi: Document z16 and arch14.\n+\n+2022-04-12  chenglulu  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/loongarch.cc: Fix bug for\n+\ttmpdir-g++.dg-struct-layout-1/t033.\n+\n 2022-04-11  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/104894"}, {"sha": "e49fcfa303068bcc1997f1b37e70b40e77d69661", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=504dae1d379c8f2488bb9d1aa68af27177e714d8", "patch": "@@ -1 +1 @@\n-20220412\n+20220413"}, {"sha": "10da74032d808b0ef98f365ad3ef5c93c8b2c693", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=504dae1d379c8f2488bb9d1aa68af27177e714d8", "patch": "@@ -1,3 +1,31 @@\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104669\n+\t* decl.cc (decls_match): Compare versions even if not recording.\n+\t(duplicate_decls): Propagate attributes to alias.\n+\t* decl2.cc (find_last_decl): Give up if versioned.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102071\n+\t* init.cc (build_new_1): Check array_p for alignment.\n+\n+2022-04-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103105\n+\t* pt.cc (build_extra_args): Call preserve_args.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104142\n+\t* decl.cc (check_initializer): Check TREE_SIDE_EFFECTS.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105223\n+\tPR c++/92918\n+\t* class.cc (finish_struct): Always using op=.\n+\n 2022-04-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/98249"}, {"sha": "8c895c288351e6da853db1675746b6e08328cd4c", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=504dae1d379c8f2488bb9d1aa68af27177e714d8", "patch": "@@ -1,3 +1,102 @@\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104293\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_24): New ABI tag.\n+\t* docs/topics/expressions.rst: Add documentation for the\n+\tfunctions gcc_jit_lvalue_set_alignment and\n+\tgcc_jit_lvalue_get_alignment.\n+\t* jit-playback.h: New function (set_alignment).\n+\t* jit-recording.cc: New function (set_alignment).\n+\t* jit-recording.h: New functions (set_alignment, get_alignment)\n+\tand new field (m_alignment).\n+\t* libgccjit.cc: New functions (gcc_jit_lvalue_get_alignment,\n+\tgcc_jit_lvalue_set_alignment)\n+\t* libgccjit.h: New functions (gcc_jit_lvalue_get_alignment,\n+\tgcc_jit_lvalue_set_alignment)\n+\t* libgccjit.map (LIBGCCJIT_ABI_24): New ABI tag.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104073\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_23): New ABI tag.\n+\t* docs/topics/contexts.rst: Add documentation for the new\n+\tfunction gcc_jit_context_set_bool_print_errors_to_stderr.\n+\t* jit-common.h: New enum value\n+\t(INNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR).\n+\t* jit-recording.cc: Handle the new option\n+\tINNER_BOOL_OPTION_PRINT_ERRORS_TO_STDERR.\n+\t* libgccjit.cc: New function\n+\t(gcc_jit_context_set_bool_print_errors_to_stderr).\n+\t* libgccjit.h: New function\n+\t(gcc_jit_context_set_bool_print_errors_to_stderr).\n+\t* libgccjit.map (LIBGCCJIT_ABI_23): New ABI tag.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104072\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_22): New ABI tag.\n+\t* docs/topics/expressions.rst: Add documentation for the\n+\tfunction gcc_jit_lvalue_set_register_name.\n+\t* jit-playback.h: New function (set_register_name).\n+\t* jit-recording.cc: New function (set_register_name) and add\n+\tsupport for register variables.\n+\t* jit-recording.h: New field (m_reg_name) and new function\n+\t(set_register_name).\n+\t* libgccjit.cc: New function (gcc_jit_lvalue_set_register_name).\n+\t* libgccjit.h: New function (gcc_jit_lvalue_set_register_name).\n+\t* libgccjit.map (LIBGCCJIT_ABI_22): New ABI tag.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104071\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_21): New ABI tag.\n+\t* docs/topics/expressions.rst: Add documentation for the\n+\tfunction gcc_jit_context_new_bitcast.\n+\t* jit-playback.cc: New function (new_bitcast).\n+\t* jit-playback.h: New function (new_bitcast).\n+\t* jit-recording.cc: New functions (new_bitcast,\n+\tbitcast::replay_into, bitcast::visit_children,\n+\tbitcast::make_debug_string, bitcast::write_reproducer).\n+\t* jit-recording.h: New class (bitcast) and new function\n+\t(new_bitcast, bitcast::replay_into, bitcast::visit_children,\n+\tbitcast::make_debug_string, bitcast::write_reproducer,\n+\tbitcast::get_precedence).\n+\t* libgccjit.cc: New function (gcc_jit_context_new_bitcast)\n+\t* libgccjit.h: New function (gcc_jit_context_new_bitcast)\n+\t* libgccjit.map (LIBGCCJIT_ABI_21): New ABI tag.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR target/95325\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_20): New ABI tag.\n+\t* docs/topics/types.rst: Add documentation for the new types\n+\tGCC_JIT_TYPE_UINT8_T, GCC_JIT_TYPE_UINT16_T,\n+\tGCC_JIT_TYPE_UINT32_T, GCC_JIT_TYPE_UINT64_T,\n+\tGCC_JIT_TYPE_UINT128_T, GCC_JIT_TYPE_INT8_T, GCC_JIT_TYPE_INT16_T,\n+\tGCC_JIT_TYPE_INT32_T, GCC_JIT_TYPE_INT64_T, GCC_JIT_TYPE_INT128_T and\n+\tnew functions (gcc_jit_compatible_types, gcc_jit_type_get_size).\n+\t* jit-builtins.cc: Add support for BT_UINT128.\n+\t* jit-common.h: Update the value of NUM_GCC_JIT_TYPES.\n+\t* jit-playback.cc: Add support for the sized integer types.\n+\t* jit-recording.cc: Add support for the sized integer types.\n+\t* jit-recording.h: Add support for comparing integer types\n+\tand new function (is_signed).\n+\t* libgccjit.cc (gcc_jit_compatible_types): New.\n+\t(gcc_jit_type_get_size) New.\n+\t* libgccjit.h: New enum variants for gcc_jit_types\n+\t(GCC_JIT_TYPE_UINT8_T, GCC_JIT_TYPE_UINT16_T,\n+\tGCC_JIT_TYPE_UINT32_T, GCC_JIT_TYPE_UINT64_T,\n+\tGCC_JIT_TYPE_UINT128_T, GCC_JIT_TYPE_INT8_T,\n+\tGCC_JIT_TYPE_INT16_T, GCC_JIT_TYPE_INT32_T,\n+\tGCC_JIT_TYPE_INT64_T, GCC_JIT_TYPE_INT128_T) and new functions\n+\t(gcc_jit_compatible_types, gcc_jit_type_get_size).\n+\t* libgccjit.map (LIBGCCJIT_ABI_20): New ABI tag.\n+\n 2022-04-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/102824"}, {"sha": "9ab7a178bf854637fa6ab8f6a7f5293bcf36e9dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504dae1d379c8f2488bb9d1aa68af27177e714d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=504dae1d379c8f2488bb9d1aa68af27177e714d8", "patch": "@@ -1,3 +1,92 @@\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104293\n+\t* jit.dg/all-non-failing-tests.h: Mention\n+\ttest-setting-alignment.\n+\t* jit.dg/test-setting-alignment.c: New test.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104072\n+\t* jit.dg/all-non-failing-tests.h: Add new\n+\ttest-register-variable.\n+\t* jit.dg/harness.h: Add -fdiagnostics-color=never to context's\n+\tcommand-line options.\n+\t* jit.dg/test-error-register-variable-bad-name.c: New test.\n+\t* jit.dg/test-error-register-variable-size-mismatch.c: New test.\n+\t* jit.dg/test-register-variable.c: New test.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/104071\n+\t* jit.dg/all-non-failing-tests.h: Add new test-bitcast.\n+\t* jit.dg/test-bitcast.c: New test.\n+\t* jit.dg/test-error-bad-bitcast.c: New test.\n+\t* jit.dg/test-error-bad-bitcast2.c: New test.\n+\n+2022-04-12  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR target/95325\n+\t* jit.dg/test-types.c: Add tests for sized integer types.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104669\n+\t* g++.target/i386/mv31.C: New test.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102071\n+\t* g++.dg/cpp1z/aligned-new9.C: Add single-object test.\n+\n+2022-04-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103105\n+\t* g++.dg/cpp2a/concepts-requires29.C: New test.\n+\t* g++.dg/cpp2a/concepts-requires29a.C: New test.\n+\n+2022-04-12  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/101755\n+\t* gcc.target/arm/reg_equal_test.c: Convert to gimple test.  Restrict\n+\tto architectures with MOVW/MOVT.\n+\n+2022-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105235\n+\t* g++.dg/opt/pr105235-1.C: New testcase.\n+\n+2022-04-12  Przemyslaw Wirkus  <Przemyslaw.Wirkus@arm.com>\n+\n+\tPR target/104144\n+\t* gcc.target/arm/multilib.exp: Updated tests.\n+\n+2022-04-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105226\n+\t* gcc.dg/pr105226.c: New testcase.\n+\n+2022-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/105214\n+\t* gcc.dg/asan/pr105214.c: New test.\n+\n+2022-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/105211\n+\t* gcc.dg/pr105211.c: New test.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104142\n+\t* g++.dg/opt/const7.C: New test.\n+\n+2022-04-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105223\n+\tPR c++/92918\n+\t* g++.dg/template/using31.C: New test.\n+\n 2022-04-11  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/104894"}, {"sha": "d5dcdedbde562a5fa7f8cd0a159aa33385d95370", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504dae1d379c8f2488bb9d1aa68af27177e714d8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504dae1d379c8f2488bb9d1aa68af27177e714d8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=504dae1d379c8f2488bb9d1aa68af27177e714d8", "patch": "@@ -1,3 +1,52 @@\n+2022-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_BACKTRACE): Check for mmap.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2022-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (basic_stacktrace::current): Reallocate\n+\ta smaller container if the unused capacity is larger than the\n+\tused size.\n+\n+2022-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (basic_stacktrace): Use _Impl::_M_clone\n+\tor _Impl::_M_assign to initialize elements in allocated storage.\n+\t(basic_stacktrace::_M_clear()): Use _Impl::_M_resize instead of\n+\t_Impl::_M_destroy.\n+\t(basic_stacktrace::_Impl::_M_destroy()): Replace with ...\n+\t(basic_stacktrace::_Impl::_M_resize(size_type, allocator&)): New\n+\tfunction.\n+\t(basic_stacktrace::_Impl::_M_push_back): Use _M_xclone. Construct\n+\tnew element using allocator.\n+\t(basic_stacktrace::_Impl::_M_clone): New function.\n+\t(basic_stacktrace::_Impl::_M_xclone): New function.\n+\t(basic_stacktrace::_Impl::_M_assign): New function.\n+\n+2022-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (basic_stacktrace::_Impl::_M_allocate):\n+\tUse nothrow new instead of try block for std::allocator.\n+\t(basic_stacktrace::_Impl::_M_deallocate): Use delete for\n+\tstd::allocator.\n+\n+2022-04-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (basic_stacktrace::current): Replace\n+\tcalls to _M_reserve and _S_curr_cb with call to _M_prepare.\n+\tCheck return value of backtrace_simple when max depth given.\n+\t(basic_stacktrace::_M_reserve): Remove.\n+\t(basic_stacktrace::_S_curr_cb): Remove.\n+\t(basic_stacktrace::_M_prepare(size_type)): New function to\n+\treserve initial capacity and return callback.\n+\t(basic_stacktrace::_Impl::_M_allocate): Remove check for 0 < n\n+\tand remove redundant zeroing of _M_frames and _M_capacity.\n+\t(basic_stacktrace::_Impl::_M_push_back): Add [[unlikely]]\n+\tattribute. Assign _Impl instead of swapping.\n+\t* testsuite/19_diagnostics/stacktrace/current.cc: New test.\n+\n 2022-04-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/stacktrace (basic_stacktrace::_Impl::_M_allocate):"}]}