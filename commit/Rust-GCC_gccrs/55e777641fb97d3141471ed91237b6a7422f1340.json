{"sha": "55e777641fb97d3141471ed91237b6a7422f1340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVlNzc3NjQxZmI5N2QzMTQxNDcxZWQ5MTIzN2I2YTc0MjJmMTM0MA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-04T03:09:59Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-04T03:09:59Z"}, "message": "90th Cygnus<->FSF quick merge\n\nFrom-SVN: r13605", "tree": {"sha": "a5e898710522ccb3215b019f5075d71eb7d6d704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5e898710522ccb3215b019f5075d71eb7d6d704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55e777641fb97d3141471ed91237b6a7422f1340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e777641fb97d3141471ed91237b6a7422f1340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e777641fb97d3141471ed91237b6a7422f1340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e777641fb97d3141471ed91237b6a7422f1340/comments", "author": null, "committer": null, "parents": [{"sha": "824b9a4c454aa73955f1f8c2e2650d9248bcd2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824b9a4c454aa73955f1f8c2e2650d9248bcd2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824b9a4c454aa73955f1f8c2e2650d9248bcd2b4"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "f4b0b975cdbbd4899caeda4e1212db1e267fae38", "filename": "gcc/cp/inc/new", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e777641fb97d3141471ed91237b6a7422f1340/gcc%2Fcp%2Finc%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e777641fb97d3141471ed91237b6a7422f1340/gcc%2Fcp%2Finc%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fnew?ref=55e777641fb97d3141471ed91237b6a7422f1340", "patch": "@@ -6,15 +6,23 @@\n \n #pragma interface \"new\"\n #include <stddef.h>\n+#include <exception>\n \n extern \"C++\" {\n \n #if 0\n namespace std {\n #endif\n \n-typedef void (*new_handler)();\n-extern \"C\" new_handler set_new_handler (new_handler);\n+  class bad_alloc : public exception {\n+  public:\n+    virtual const char* what() const throw() { return \"bad_alloc\"; }\n+  };\n+\n+  struct nothrow_t {};\n+  extern const nothrow_t nothrow;\n+  typedef void (*new_handler)();\n+  extern \"C\" new_handler set_new_handler (new_handler);\n \n #if 0\n } // namespace std\n@@ -26,13 +34,15 @@ extern \"C\" void __default_new_handler (void);\n \n // replaceable signatures\n void *operator new (size_t);\n+void *operator new (size_t, const nothrow_t&) throw();\n void *operator new[] (size_t);\n-void operator delete (void *);\n-void operator delete[] (void *);\n+void *operator new[] (size_t, const nothrow_t&) throw();\n+void operator delete (void *) throw();\n+void operator delete[] (void *) throw();\n \n // default placement versions of operator new\n-inline void *operator new(size_t, void *place) { return place; }\n-inline void *operator new[](size_t, void *place) { return place; }\n+inline void *operator new(size_t, void *place) throw() { return place; }\n+inline void *operator new[](size_t, void *place) throw() { return place; }\n } // extern \"C++\"\n \n #endif"}]}