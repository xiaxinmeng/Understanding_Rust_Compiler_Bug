{"sha": "02fcd8ac408be56d2a6e67e2e09b26532862f233", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmY2Q4YWM0MDhiZTU2ZDJhNmU2N2UyZTA5YjI2NTMyODYyZjIzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-29T16:06:58Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-31T17:40:39Z"}, "message": "aarch64: Add svbfloat16_t support to arm_sve.h\n\nThis patch adds support for the bfloat16-related vectors to\narm_sve.h.  It also adds support for functions that just treat\nbfloat16_t as a bag of 16 bits; these functions are available\nfor bf16 whenever they're available for other 16-bit types.\n\nPreviously \"all_data\" was used for both data movement and for arithmetic\nthat happened to be defined for all data types.  Adding bf16 means we\nneed to distinguish between the two cases.\n\nThe patch also reorders the mode definitions in aarch64-modes.def,\nwhich means we no longer need separate VECTOR_MODE entries for BF\nvectors.\n\n2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/arm_sve.h: Include arm_bf16.h.\n\t* config/aarch64/aarch64-modes.def (BF): Move definition before\n\tVECTOR_MODES.  Remove separate VECTOR_MODES for V4BF and V8BF.\n\t(SVE_MODES): Handle BF modes.\n\t* config/aarch64/aarch64.c (aarch64_classify_vector_mode): Handle\n\tBF modes.\n\t(aarch64_full_sve_mode): Likewise.\n\t* config/aarch64/iterators.md (SVE_STRUCT): Add VNx16BF, VNx24BF\n\tand VNx32BF.\n\t(SVE_FULL, SVE_FULL_HSD, SVE_ALL): Add VNx8BF.\n\t(Vetype, Vesize, Vctype, VEL, Vel, VEL_INT, V128, v128, vwcore)\n\t(V_INT_EQUIV, v_int_equiv, V_FP_EQUIV, v_fp_equiv, vector_count)\n\t(insn_length, VSINGLE, vsingle, VPRED, vpred, VDOUBLE): Handle the\n\tnew SVE BF modes.\n\t* config/aarch64/aarch64-sve-builtins.h (TYPE_bfloat): New\n\ttype_class_index.\n\t* config/aarch64/aarch64-sve-builtins.cc (TYPES_all_arith): New macro.\n\t(TYPES_all_data): Add bf16.\n\t(TYPES_reinterpret1, TYPES_reinterpret): Likewise.\n\t(register_tuple_type): Increase buffer size.\n\t* config/aarch64/aarch64-sve-builtins.def (svbfloat16_t): New type.\n\t(bf16): New type suffix.\n\t* config/aarch64/aarch64-sve-builtins-base.def (svabd, svadd, svaddv)\n\t(svcmpeq, svcmpge, svcmpgt, svcmple, svcmplt, svcmpne, svmad, svmax)\n\t(svmaxv, svmin, svminv, svmla, svmls, svmsb, svmul, svsub, svsubr):\n\tChange type from all_data to all_arith.\n\t* config/aarch64/aarch64-sve-builtins-sve2.def (svaddp, svmaxp)\n\t(svminp): Likewise.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/acle/general-c++/mangle_1.C: Test mangling\n\tof svbfloat16_t.\n\t* g++.target/aarch64/sve/acle/general-c++/mangle_2.C: Likewise for\n\t__SVBfloat16_t.\n\t* gcc.target/aarch64/sve/acle/asm/clasta_bf16.c: New test.\n\t* gcc.target/aarch64/sve/acle/asm/clastb_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/cnt_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/create2_1.c (create_bf16): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/create3_1.c (create_bf16): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/create4_1.c (create_bf16): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dup_lane_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/dupq_lane_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ext_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/get2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/get3_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/get4_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/insr_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/lasta_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/lastb_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1ro_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld3_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld4_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ldff1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ldnf1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ldnt1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/len_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_f16.c\n\t(reinterpret_f16_bf16_tied1, reinterpret_f16_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_f32.c\n\t(reinterpret_f32_bf16_tied1, reinterpret_f32_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_f64.c\n\t(reinterpret_f64_bf16_tied1, reinterpret_f64_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s16.c\n\t(reinterpret_s16_bf16_tied1, reinterpret_s16_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s32.c\n\t(reinterpret_s32_bf16_tied1, reinterpret_s32_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s64.c\n\t(reinterpret_s64_bf16_tied1, reinterpret_s64_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s8.c\n\t(reinterpret_s8_bf16_tied1, reinterpret_s8_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u16.c\n\t(reinterpret_u16_bf16_tied1, reinterpret_u16_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u32.c\n\t(reinterpret_u32_bf16_tied1, reinterpret_u32_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u64.c\n\t(reinterpret_u64_bf16_tied1, reinterpret_u64_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u8.c\n\t(reinterpret_u8_bf16_tied1, reinterpret_u8_bf16_untied): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/rev_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/sel_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/set2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/set3_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/set4_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/splice_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/st1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/st2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/st3_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/st4_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/stnt1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/tbl_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn1q_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/trn2q_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/undef2_1.c (bfloat16_t): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/undef3_1.c (bfloat16_t): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/undef4_1.c (bfloat16_t): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/undef_1.c (bfloat16_t): Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp1q_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/uzp2q_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip1q_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/zip2q_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_1.c (ret_bf16, ret_bf16x2)\n\t(ret_bf16x3, ret_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_2.c (fn_bf16, fn_bf16x2)\n\t(fn_bf16x3, fn_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_3.c (fn_bf16, fn_bf16x2)\n\t(fn_bf16x3, fn_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_4.c (fn_bf16, fn_bf16x2)\n\t(fn_bf16x3, fn_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_5.c (fn_bf16, fn_bf16x2)\n\t(fn_bf16x3, fn_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_6.c (fn_bf16, fn_bf16x2)\n\t(fn_bf16x3, fn_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/annotate_7.c (fn_bf16, fn_bf16x2)\n\t(fn_bf16x3, fn_bf16x4): Likewise.\n\t* gcc.target/aarch64/sve/pcs/args_5_be_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/args_5_le_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/args_6_be_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/args_6_le_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/gnu_vectors_1.c (bfloat16x16_t): New\n\ttypedef.\n\t(bfloat16_callee, bfloat16_caller): New tests.\n\t* gcc.target/aarch64/sve/pcs/gnu_vectors_2.c (bfloat16x16_t): New\n\ttypedef.\n\t(bfloat16_callee, bfloat16_caller): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_4.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_4_128.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_4_256.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_4_512.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_4_1024.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_4_2048.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_5.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_5_128.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_5_256.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_5_512.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_5_1024.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_5_2048.c (CALLER_BF16): New macro.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_6.c (bfloat16_t): New typedef.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_6_128.c (bfloat16_t): New typedef.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_6_256.c (bfloat16_t): New typedef.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_6_512.c (bfloat16_t): New typedef.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_6_1024.c (bfloat16_t): New typedef.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_6_2048.c (bfloat16_t): New typedef.\n\t(callee_bf16, caller_bf16): New tests.\n\t* gcc.target/aarch64/sve/pcs/return_7.c (callee_bf16): Likewise\n\t(caller_bf16): Likewise.\n\t* gcc.target/aarch64/sve/pcs/return_8.c (callee_bf16): Likewise\n\t(caller_bf16): Likewise.\n\t* gcc.target/aarch64/sve/pcs/return_9.c (callee_bf16): Likewise\n\t(caller_bf16): Likewise.\n\t* gcc.target/aarch64/sve2/acle/asm/tbl2_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve2/acle/asm/tbx_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve2/acle/asm/whilerw_bf16.c: Likewise.\n\t* gcc.target/aarch64/sve2/acle/asm/whilewr_bf16.c: Likewise.", "tree": {"sha": "1f18d52746975a2ca893a61b3884e42dddd965a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f18d52746975a2ca893a61b3884e42dddd965a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02fcd8ac408be56d2a6e67e2e09b26532862f233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fcd8ac408be56d2a6e67e2e09b26532862f233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02fcd8ac408be56d2a6e67e2e09b26532862f233", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fcd8ac408be56d2a6e67e2e09b26532862f233/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3669677425f249c163201c4760d05abb3cf4e6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3669677425f249c163201c4760d05abb3cf4e6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3669677425f249c163201c4760d05abb3cf4e6bc"}], "stats": {"total": 5950, "additions": 5899, "deletions": 51}, "files": [{"sha": "d10ae9294cc411178cce7c299b4dbef34b9d01a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -1,3 +1,34 @@\n+2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/arm_sve.h: Include arm_bf16.h.\n+\t* config/aarch64/aarch64-modes.def (BF): Move definition before\n+\tVECTOR_MODES.  Remove separate VECTOR_MODES for V4BF and V8BF.\n+\t(SVE_MODES): Handle BF modes.\n+\t* config/aarch64/aarch64.c (aarch64_classify_vector_mode): Handle\n+\tBF modes.\n+\t(aarch64_full_sve_mode): Likewise.\n+\t* config/aarch64/iterators.md (SVE_STRUCT): Add VNx16BF, VNx24BF\n+\tand VNx32BF.\n+\t(SVE_FULL, SVE_FULL_HSD, SVE_ALL): Add VNx8BF.\n+\t(Vetype, Vesize, Vctype, VEL, Vel, VEL_INT, V128, v128, vwcore)\n+\t(V_INT_EQUIV, v_int_equiv, V_FP_EQUIV, v_fp_equiv, vector_count)\n+\t(insn_length, VSINGLE, vsingle, VPRED, vpred, VDOUBLE): Handle the\n+\tnew SVE BF modes.\n+\t* config/aarch64/aarch64-sve-builtins.h (TYPE_bfloat): New\n+\ttype_class_index.\n+\t* config/aarch64/aarch64-sve-builtins.cc (TYPES_all_arith): New macro.\n+\t(TYPES_all_data): Add bf16.\n+\t(TYPES_reinterpret1, TYPES_reinterpret): Likewise.\n+\t(register_tuple_type): Increase buffer size.\n+\t* config/aarch64/aarch64-sve-builtins.def (svbfloat16_t): New type.\n+\t(bf16): New type suffix.\n+\t* config/aarch64/aarch64-sve-builtins-base.def (svabd, svadd, svaddv)\n+\t(svcmpeq, svcmpge, svcmpgt, svcmple, svcmplt, svcmpne, svmad, svmax)\n+\t(svmaxv, svmin, svminv, svmla, svmls, svmsb, svmul, svsub, svsubr):\n+\tChange type from all_data to all_arith.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.def (svaddp, svmaxp)\n+\t(svminp): Likewise.\n+\n 2020-01-31  Dennis Zhang  <dennis.zhang@arm.com>\n \t    Matthew Malcomson  <matthew.malcomson@arm.com>\n \t    Richard Sandiford  <richard.sandiford@arm.com>"}, {"sha": "af972e8f72b0d5568afdc26e9d18dc2f747f107e", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -62,20 +62,17 @@ ADJUST_ALIGNMENT (VNx8BI, 2);\n ADJUST_ALIGNMENT (VNx4BI, 2);\n ADJUST_ALIGNMENT (VNx2BI, 2);\n \n+/* Bfloat16 modes.  */\n+FLOAT_MODE (BF, 2, 0);\n+ADJUST_FLOAT_FORMAT (BF, &arm_bfloat_half_format);\n+\n VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI.  */\n VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI.  */\n VECTOR_MODES (FLOAT, 8);      /*                 V2SF.  */\n VECTOR_MODES (FLOAT, 16);     /*            V4SF V2DF.  */\n VECTOR_MODE (FLOAT, DF, 1);   /*                 V1DF.  */\n VECTOR_MODE (FLOAT, HF, 2);   /*                 V2HF.  */\n \n-/* Bfloat16 modes.  */\n-FLOAT_MODE (BF, 2, 0);\n-ADJUST_FLOAT_FORMAT (BF, &arm_bfloat_half_format);\n-\n-VECTOR_MODE (FLOAT, BF, 4);   /*\t\t V4BF.  */\n-VECTOR_MODE (FLOAT, BF, 8);   /*\t\t V8BF.  */\n-\n /* Oct Int: 256-bit integer mode needed for 32-byte vector arguments.  */\n INT_MODE (OI, 32);\n \n@@ -96,6 +93,7 @@ INT_MODE (XI, 64);\n   ADJUST_NUNITS (VH##HI, aarch64_sve_vg * NVECS * 4); \\\n   ADJUST_NUNITS (VS##SI, aarch64_sve_vg * NVECS * 2); \\\n   ADJUST_NUNITS (VD##DI, aarch64_sve_vg * NVECS); \\\n+  ADJUST_NUNITS (VH##BF, aarch64_sve_vg * NVECS * 4); \\\n   ADJUST_NUNITS (VH##HF, aarch64_sve_vg * NVECS * 4); \\\n   ADJUST_NUNITS (VS##SF, aarch64_sve_vg * NVECS * 2); \\\n   ADJUST_NUNITS (VD##DF, aarch64_sve_vg * NVECS); \\\n@@ -104,6 +102,7 @@ INT_MODE (XI, 64);\n   ADJUST_ALIGNMENT (VH##HI, 16); \\\n   ADJUST_ALIGNMENT (VS##SI, 16); \\\n   ADJUST_ALIGNMENT (VD##DI, 16); \\\n+  ADJUST_ALIGNMENT (VH##BF, 16); \\\n   ADJUST_ALIGNMENT (VH##HF, 16); \\\n   ADJUST_ALIGNMENT (VS##SF, 16); \\\n   ADJUST_ALIGNMENT (VD##DF, 16);"}, {"sha": "332555b34fbcd1502475cf5885509b24b09d245a", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.def", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.def?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -18,15 +18,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #define REQUIRED_EXTENSIONS 0\n-DEF_SVE_FUNCTION (svabd, binary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svabd, binary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svabs, unary, all_float_and_signed, mxz)\n DEF_SVE_FUNCTION (svacge, compare_opt_n, all_float, implicit)\n DEF_SVE_FUNCTION (svacgt, compare_opt_n, all_float, implicit)\n DEF_SVE_FUNCTION (svacle, compare_opt_n, all_float, implicit)\n DEF_SVE_FUNCTION (svaclt, compare_opt_n, all_float, implicit)\n-DEF_SVE_FUNCTION (svadd, binary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svadd, binary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svadda, fold_left, all_float, implicit)\n-DEF_SVE_FUNCTION (svaddv, reduction_wide, all_data, implicit)\n+DEF_SVE_FUNCTION (svaddv, reduction_wide, all_arith, implicit)\n DEF_SVE_FUNCTION (svadrb, adr_offset, none, none)\n DEF_SVE_FUNCTION (svadrd, adr_index, none, none)\n DEF_SVE_FUNCTION (svadrh, adr_index, none, none)\n@@ -51,17 +51,17 @@ DEF_SVE_FUNCTION (svcls, unary_to_uint, all_signed, mxz)\n DEF_SVE_FUNCTION (svclz, unary_to_uint, all_integer, mxz)\n DEF_SVE_FUNCTION (svcmla, ternary_rotate, all_float, mxz)\n DEF_SVE_FUNCTION (svcmla_lane, ternary_lane_rotate, hs_float, none)\n-DEF_SVE_FUNCTION (svcmpeq, compare_opt_n, all_data, implicit)\n+DEF_SVE_FUNCTION (svcmpeq, compare_opt_n, all_arith, implicit)\n DEF_SVE_FUNCTION (svcmpeq_wide, compare_wide_opt_n, bhs_signed, implicit)\n-DEF_SVE_FUNCTION (svcmpge, compare_opt_n, all_data, implicit)\n+DEF_SVE_FUNCTION (svcmpge, compare_opt_n, all_arith, implicit)\n DEF_SVE_FUNCTION (svcmpge_wide, compare_wide_opt_n, bhs_integer, implicit)\n-DEF_SVE_FUNCTION (svcmpgt, compare_opt_n, all_data, implicit)\n+DEF_SVE_FUNCTION (svcmpgt, compare_opt_n, all_arith, implicit)\n DEF_SVE_FUNCTION (svcmpgt_wide, compare_wide_opt_n, bhs_integer, implicit)\n-DEF_SVE_FUNCTION (svcmple, compare_opt_n, all_data, implicit)\n+DEF_SVE_FUNCTION (svcmple, compare_opt_n, all_arith, implicit)\n DEF_SVE_FUNCTION (svcmple_wide, compare_wide_opt_n, bhs_integer, implicit)\n-DEF_SVE_FUNCTION (svcmplt, compare_opt_n, all_data, implicit)\n+DEF_SVE_FUNCTION (svcmplt, compare_opt_n, all_arith, implicit)\n DEF_SVE_FUNCTION (svcmplt_wide, compare_wide_opt_n, bhs_integer, implicit)\n-DEF_SVE_FUNCTION (svcmpne, compare_opt_n, all_data, implicit)\n+DEF_SVE_FUNCTION (svcmpne, compare_opt_n, all_arith, implicit)\n DEF_SVE_FUNCTION (svcmpne_wide, compare_wide_opt_n, bhs_signed, implicit)\n DEF_SVE_FUNCTION (svcmpuo, compare_opt_n, all_float, implicit)\n DEF_SVE_FUNCTION (svcnot, unary, all_integer, mxz)\n@@ -160,23 +160,23 @@ DEF_SVE_FUNCTION (svlsl, binary_uint_opt_n, all_integer, mxz)\n DEF_SVE_FUNCTION (svlsl_wide, binary_uint64_opt_n, bhs_integer, mxz)\n DEF_SVE_FUNCTION (svlsr, binary_uint_opt_n, all_unsigned, mxz)\n DEF_SVE_FUNCTION (svlsr_wide, binary_uint64_opt_n, bhs_unsigned, mxz)\n-DEF_SVE_FUNCTION (svmad, ternary_opt_n, all_data, mxz)\n-DEF_SVE_FUNCTION (svmax, binary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svmad, ternary_opt_n, all_arith, mxz)\n+DEF_SVE_FUNCTION (svmax, binary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svmaxnm, binary_opt_n, all_float, mxz)\n DEF_SVE_FUNCTION (svmaxnmv, reduction, all_float, implicit)\n-DEF_SVE_FUNCTION (svmaxv, reduction, all_data, implicit)\n-DEF_SVE_FUNCTION (svmin, binary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svmaxv, reduction, all_arith, implicit)\n+DEF_SVE_FUNCTION (svmin, binary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svminnm, binary_opt_n, all_float, mxz)\n DEF_SVE_FUNCTION (svminnmv, reduction, all_float, implicit)\n-DEF_SVE_FUNCTION (svminv, reduction, all_data, implicit)\n-DEF_SVE_FUNCTION (svmla, ternary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svminv, reduction, all_arith, implicit)\n+DEF_SVE_FUNCTION (svmla, ternary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svmla_lane, ternary_lane, all_float, none)\n-DEF_SVE_FUNCTION (svmls, ternary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svmls, ternary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svmls_lane, ternary_lane, all_float, none)\n DEF_SVE_FUNCTION (svmmla, mmla, none, none)\n DEF_SVE_FUNCTION (svmov, unary, b, z)\n-DEF_SVE_FUNCTION (svmsb, ternary_opt_n, all_data, mxz)\n-DEF_SVE_FUNCTION (svmul, binary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svmsb, ternary_opt_n, all_arith, mxz)\n+DEF_SVE_FUNCTION (svmul, binary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svmul_lane, binary_lane, all_float, none)\n DEF_SVE_FUNCTION (svmulh, binary_opt_n, all_integer, mxz)\n DEF_SVE_FUNCTION (svmulx, binary_opt_n, all_float, mxz)\n@@ -287,8 +287,8 @@ DEF_SVE_FUNCTION (svst2, store, all_data, implicit)\n DEF_SVE_FUNCTION (svst3, store, all_data, implicit)\n DEF_SVE_FUNCTION (svst4, store, all_data, implicit)\n DEF_SVE_FUNCTION (svstnt1, store, all_data, implicit)\n-DEF_SVE_FUNCTION (svsub, binary_opt_n, all_data, mxz)\n-DEF_SVE_FUNCTION (svsubr, binary_opt_n, all_data, mxz)\n+DEF_SVE_FUNCTION (svsub, binary_opt_n, all_arith, mxz)\n+DEF_SVE_FUNCTION (svsubr, binary_opt_n, all_arith, mxz)\n DEF_SVE_FUNCTION (svtbl, binary_uint, all_data, none)\n DEF_SVE_FUNCTION (svtmad, tmad, all_float, none)\n DEF_SVE_FUNCTION (svtrn1, binary, all_data, none)"}, {"sha": "8daf8f727f05af2bf4ea82ee8a2a4b21819a5497", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.def?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -31,7 +31,7 @@ DEF_SVE_FUNCTION (svabdlt, binary_long_opt_n, hsd_integer, none)\n DEF_SVE_FUNCTION (svaddlb, binary_long_opt_n, hsd_integer, none)\n DEF_SVE_FUNCTION (svaddlbt, binary_long_opt_n, hsd_signed, none)\n DEF_SVE_FUNCTION (svaddlt, binary_long_opt_n, hsd_integer, none)\n-DEF_SVE_FUNCTION (svaddp, binary, all_data, mx)\n+DEF_SVE_FUNCTION (svaddp, binary, all_arith, mx)\n DEF_SVE_FUNCTION (svaddwb, binary_wide_opt_n, hsd_integer, none)\n DEF_SVE_FUNCTION (svaddwt, binary_wide_opt_n, hsd_integer, none)\n DEF_SVE_FUNCTION (svbcax, ternary_opt_n, all_integer, none)\n@@ -69,7 +69,7 @@ DEF_SVE_FUNCTION (svldnt1uw_gather, load_ext_gather_offset_restricted, d_integer\n DEF_SVE_FUNCTION (svldnt1uw_gather, load_ext_gather_index_restricted, d_integer, implicit)\n DEF_SVE_FUNCTION (svlogb, unary_to_int, all_float, mxz)\n DEF_SVE_FUNCTION (svmatch, compare, bh_integer, implicit)\n-DEF_SVE_FUNCTION (svmaxp, binary, all_data, mx)\n+DEF_SVE_FUNCTION (svmaxp, binary, all_arith, mx)\n DEF_SVE_FUNCTION (svmaxnmp, binary, all_float, mx)\n DEF_SVE_FUNCTION (svmla_lane, ternary_lane, hsd_integer, none)\n DEF_SVE_FUNCTION (svmlalb, ternary_long_opt_n, s_float_hsd_integer, none)\n@@ -81,7 +81,7 @@ DEF_SVE_FUNCTION (svmlslb, ternary_long_opt_n, s_float_hsd_integer, none)\n DEF_SVE_FUNCTION (svmlslb_lane, ternary_long_lane, s_float_sd_integer, none)\n DEF_SVE_FUNCTION (svmlslt, ternary_long_opt_n, s_float_hsd_integer, none)\n DEF_SVE_FUNCTION (svmlslt_lane, ternary_long_lane, s_float_sd_integer, none)\n-DEF_SVE_FUNCTION (svminp, binary, all_data, mx)\n+DEF_SVE_FUNCTION (svminp, binary, all_arith, mx)\n DEF_SVE_FUNCTION (svminnmp, binary, all_float, mx)\n DEF_SVE_FUNCTION (svmovlb, unary_long, hsd_integer, none)\n DEF_SVE_FUNCTION (svmovlt, unary_long, hsd_integer, none)"}, {"sha": "d4d201d4f5c519b1bd65e761f31d5354f96a4fa5", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -184,9 +184,16 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n /*     _f16 _f32 _f64\n    _s8 _s16 _s32 _s64\n    _u8 _u16 _u32 _u64.  */\n-#define TYPES_all_data(S, D) \\\n+#define TYPES_all_arith(S, D) \\\n   TYPES_all_float (S, D), TYPES_all_integer (S, D)\n \n+/*     _bf16\n+\t_f16 _f32 _f64\n+   _s8  _s16 _s32 _s64\n+   _u8  _u16 _u32 _u64.  */\n+#define TYPES_all_data(S, D) \\\n+  S (bf16), TYPES_all_arith (S, D)\n+\n /* _b only.  */\n #define TYPES_b(S, D) \\\n   S (b)\n@@ -371,14 +378,17 @@ CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n   TYPES_inc_dec_n1 (D, u32), \\\n   TYPES_inc_dec_n1 (D, u64)\n \n-/* {     _f16 _f32 _f64 }   {     _f16 _f32 _f64 }\n-   { _s8 _s16 _s32 _s64 } x { _s8 _s16 _s32 _s64 }\n-   { _u8 _u16 _u32 _u64 }   { _u8 _u16 _u32 _u64 }.  */\n+/* {     _bf16           }   {     _bf16           }\n+   {      _f16 _f32 _f64 }   {      _f16 _f32 _f64 }\n+   { _s8  _s16 _s32 _s64 } x { _s8  _s16 _s32 _s64 }\n+   { _u8  _u16 _u32 _u64 }   { _u8  _u16 _u32 _u64 }.  */\n #define TYPES_reinterpret1(D, A) \\\n+  D (A, bf16), \\\n   D (A, f16), D (A, f32), D (A, f64), \\\n   D (A, s8), D (A, s16), D (A, s32), D (A, s64), \\\n   D (A, u8), D (A, u16), D (A, u32), D (A, u64)\n #define TYPES_reinterpret(S, D) \\\n+  TYPES_reinterpret1 (D, bf16), \\\n   TYPES_reinterpret1 (D, f16), \\\n   TYPES_reinterpret1 (D, f32), \\\n   TYPES_reinterpret1 (D, f64), \\\n@@ -428,6 +438,7 @@ DEF_SVE_TYPES_ARRAY (all_signed);\n DEF_SVE_TYPES_ARRAY (all_float_and_signed);\n DEF_SVE_TYPES_ARRAY (all_unsigned);\n DEF_SVE_TYPES_ARRAY (all_integer);\n+DEF_SVE_TYPES_ARRAY (all_arith);\n DEF_SVE_TYPES_ARRAY (all_data);\n DEF_SVE_TYPES_ARRAY (b);\n DEF_SVE_TYPES_ARRAY (b_unsigned);\n@@ -3351,7 +3362,7 @@ register_tuple_type (unsigned int num_vectors, vector_type_index type)\n \t      && TYPE_ALIGN (tuple_type) == 128);\n \n   /* Work out the structure name.  */\n-  char buffer[sizeof (\"svfloat64x4_t\")];\n+  char buffer[sizeof (\"svbfloat16x4_t\")];\n   const char *vector_type_name = vector_types[type].acle_name;\n   snprintf (buffer, sizeof (buffer), \"%.*sx%d_t\",\n \t    (int) strlen (vector_type_name) - 2, vector_type_name,"}, {"sha": "3dbf4f52f074fd65ac7eab5d78ec1c8e72daef77", "filename": "gcc/config/aarch64/aarch64-sve-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.def?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -61,6 +61,7 @@ DEF_SVE_MODE (u64offset, none, svuint64_t, bytes)\n DEF_SVE_MODE (vnum, none, none, vectors)\n \n DEF_SVE_TYPE (svbool_t, 10, __SVBool_t, boolean_type_node)\n+DEF_SVE_TYPE (svbfloat16_t, 14, __SVBfloat16_t, aarch64_bf16_type_node)\n DEF_SVE_TYPE (svfloat16_t, 13, __SVFloat16_t, aarch64_fp16_type_node)\n DEF_SVE_TYPE (svfloat32_t, 13, __SVFloat32_t, float_type_node)\n DEF_SVE_TYPE (svfloat64_t, 13, __SVFloat64_t, double_type_node)\n@@ -81,6 +82,7 @@ DEF_SVE_TYPE_SUFFIX (b8, svbool_t, bool, 8, VNx16BImode)\n DEF_SVE_TYPE_SUFFIX (b16, svbool_t, bool, 16, VNx8BImode)\n DEF_SVE_TYPE_SUFFIX (b32, svbool_t, bool, 32, VNx4BImode)\n DEF_SVE_TYPE_SUFFIX (b64, svbool_t, bool, 64, VNx2BImode)\n+DEF_SVE_TYPE_SUFFIX (bf16, svbfloat16_t, bfloat, 16, VNx8BFmode)\n DEF_SVE_TYPE_SUFFIX (f16, svfloat16_t, float, 16, VNx8HFmode)\n DEF_SVE_TYPE_SUFFIX (f32, svfloat32_t, float, 32, VNx4SFmode)\n DEF_SVE_TYPE_SUFFIX (f64, svfloat64_t, float, 64, VNx2DFmode)"}, {"sha": "f7f06d26251c51c040795946090d7419ab3ea3e3", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -150,6 +150,7 @@ enum predication_index\n enum type_class_index\n {\n   TYPE_bool,\n+  TYPE_bfloat,\n   TYPE_float,\n   TYPE_signed,\n   TYPE_unsigned,"}, {"sha": "6581e4cb075d8a3c20b27f8240754a23698254d6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -1656,6 +1656,7 @@ aarch64_classify_vector_mode (machine_mode mode)\n     case E_VNx8HImode:\n     case E_VNx4SImode:\n     case E_VNx2DImode:\n+    case E_VNx8BFmode:\n     case E_VNx8HFmode:\n     case E_VNx4SFmode:\n     case E_VNx2DFmode:\n@@ -1666,6 +1667,7 @@ aarch64_classify_vector_mode (machine_mode mode)\n     case E_VNx16HImode:\n     case E_VNx8SImode:\n     case E_VNx4DImode:\n+    case E_VNx16BFmode:\n     case E_VNx16HFmode:\n     case E_VNx8SFmode:\n     case E_VNx4DFmode:\n@@ -1674,6 +1676,7 @@ aarch64_classify_vector_mode (machine_mode mode)\n     case E_VNx24HImode:\n     case E_VNx12SImode:\n     case E_VNx6DImode:\n+    case E_VNx24BFmode:\n     case E_VNx24HFmode:\n     case E_VNx12SFmode:\n     case E_VNx6DFmode:\n@@ -1682,6 +1685,7 @@ aarch64_classify_vector_mode (machine_mode mode)\n     case E_VNx32HImode:\n     case E_VNx16SImode:\n     case E_VNx8DImode:\n+    case E_VNx32BFmode:\n     case E_VNx32HFmode:\n     case E_VNx16SFmode:\n     case E_VNx8DFmode:\n@@ -16109,8 +16113,10 @@ aarch64_full_sve_mode (scalar_mode mode)\n       return VNx4SFmode;\n     case E_HFmode:\n       return VNx8HFmode;\n+    case E_BFmode:\n+      return VNx8BFmode;\n     case E_DImode:\n-\treturn VNx2DImode;\n+      return VNx2DImode;\n     case E_SImode:\n       return VNx4SImode;\n     case E_HImode:"}, {"sha": "f2d2d0ce9aad0c430f67b6ef18f31e1276548b2e", "filename": "gcc/config/aarch64/arm_sve.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Farm_sve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Farm_sve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_sve.h?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -26,6 +26,7 @@\n #define _ARM_SVE_H_\n \n #include <stdint.h>\n+#include <arm_bf16.h>\n \n typedef __fp16 float16_t;\n typedef float float32_t;"}, {"sha": "d5b60e08bafe80992a8c2a08280da41be4abfeff", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -321,19 +321,15 @@\n \n ;; All SVE vector structure modes.\n (define_mode_iterator SVE_STRUCT [VNx32QI VNx16HI VNx8SI VNx4DI\n-\t\t\t\t  VNx16HF VNx8SF VNx4DF\n+\t\t\t\t  VNx16BF VNx16HF VNx8SF VNx4DF\n \t\t\t\t  VNx48QI VNx24HI VNx12SI VNx6DI\n-\t\t\t\t  VNx24HF VNx12SF VNx6DF\n+\t\t\t\t  VNx24BF VNx24HF VNx12SF VNx6DF\n \t\t\t\t  VNx64QI VNx32HI VNx16SI VNx8DI\n-\t\t\t\t  VNx32HF VNx16SF VNx8DF])\n-\n-;; SVE_STRUCT restricted to 2-vector tuples.\n-(define_mode_iterator SVE_STRUCT2 [VNx32QI VNx16HI VNx8SI VNx4DI\n-\t\t\t\t   VNx16HF VNx8SF VNx4DF])\n+\t\t\t\t  VNx32BF VNx32HF VNx16SF VNx8DF])\n \n ;; All fully-packed SVE vector modes.\n (define_mode_iterator SVE_FULL [VNx16QI VNx8HI VNx4SI VNx2DI\n-\t\t\t        VNx8HF VNx4SF VNx2DF])\n+\t\t\t        VNx8BF VNx8HF VNx4SF VNx2DF])\n \n ;; All fully-packed SVE integer vector modes.\n (define_mode_iterator SVE_FULL_I [VNx16QI VNx8HI VNx4SI VNx2DI])\n@@ -349,7 +345,8 @@\n (define_mode_iterator SVE_FULL_BHSI [VNx16QI VNx8HI VNx4SI])\n \n ;; Fully-packed SVE vector modes that have 16-bit, 32-bit or 64-bit elements.\n-(define_mode_iterator SVE_FULL_HSD [VNx8HI VNx4SI VNx2DI VNx8HF VNx4SF VNx2DF])\n+(define_mode_iterator SVE_FULL_HSD [VNx8HI VNx4SI VNx2DI\n+\t\t\t\t    VNx8BF VNx8HF VNx4SF VNx2DF])\n \n ;; Fully-packed SVE integer vector modes that have 16-bit, 32-bit or 64-bit\n ;; elements.\n@@ -395,6 +392,7 @@\n (define_mode_iterator SVE_ALL [VNx16QI VNx8QI VNx4QI VNx2QI\n \t\t\t       VNx8HI VNx4HI VNx2HI\n \t\t\t       VNx8HF VNx4HF VNx2HF\n+\t\t\t       VNx8BF\n \t\t\t       VNx4SI VNx2SI\n \t\t\t       VNx4SF VNx2SF\n \t\t\t       VNx2DI\n@@ -1005,6 +1003,7 @@\n \t\t\t  (VNx16QI \"b\") (VNx8QI \"b\") (VNx4QI \"b\") (VNx2QI \"b\")\n \t\t\t  (VNx8HI \"h\") (VNx4HI \"h\") (VNx2HI \"h\")\n \t\t\t  (VNx8HF \"h\") (VNx4HF \"h\") (VNx2HF \"h\")\n+\t\t\t  (VNx8BF \"h\")\n \t\t\t  (VNx4SI \"s\") (VNx2SI \"s\")\n \t\t\t  (VNx4SF \"s\") (VNx2SF \"s\")\n \t\t\t  (VNx2DI \"d\")\n@@ -1021,13 +1020,15 @@\n (define_mode_attr Vesize [(VNx16QI \"b\") (VNx8QI \"b\") (VNx4QI \"b\") (VNx2QI \"b\")\n \t\t\t  (VNx8HI \"h\") (VNx4HI \"h\") (VNx2HI \"h\")\n \t\t\t  (VNx8HF \"h\") (VNx4HF \"h\") (VNx2HF \"h\")\n+\t\t\t  (VNx8BF \"h\")\n \t\t\t  (VNx4SI \"w\") (VNx2SI \"w\")\n \t\t\t  (VNx4SF \"w\") (VNx2SF \"w\")\n \t\t\t  (VNx2DI \"d\")\n \t\t\t  (VNx2DF \"d\")\n \t\t\t  (VNx32QI \"b\") (VNx48QI \"b\") (VNx64QI \"b\")\n \t\t\t  (VNx16HI \"h\") (VNx24HI \"h\") (VNx32HI \"h\")\n \t\t\t  (VNx16HF \"h\") (VNx24HF \"h\") (VNx32HF \"h\")\n+\t\t\t  (VNx16BF \"h\") (VNx24BF \"h\") (VNx32BF \"h\")\n \t\t\t  (VNx8SI  \"w\") (VNx12SI \"w\") (VNx16SI \"w\")\n \t\t\t  (VNx8SF  \"w\") (VNx12SF \"w\") (VNx16SF \"w\")\n \t\t\t  (VNx4DI  \"d\") (VNx6DI  \"d\") (VNx8DI  \"d\")\n@@ -1038,6 +1039,7 @@\n (define_mode_attr Vctype [(VNx16QI \"b\") (VNx8QI \"h\") (VNx4QI \"s\") (VNx2QI \"d\")\n \t\t\t  (VNx8HI \"h\") (VNx4HI \"s\") (VNx2HI \"d\")\n \t\t\t  (VNx8HF \"h\") (VNx4HF \"s\") (VNx2HF \"d\")\n+\t\t\t  (VNx8BF \"h\")\n \t\t\t  (VNx4SI \"s\") (VNx2SI \"d\")\n \t\t\t  (VNx4SF \"s\") (VNx2SF \"d\")\n \t\t\t  (VNx2DI \"d\")\n@@ -1077,6 +1079,7 @@\n \t\t       (VNx16QI \"QI\") (VNx8QI \"QI\") (VNx4QI \"QI\") (VNx2QI \"QI\")\n \t\t       (VNx8HI \"HI\") (VNx4HI \"HI\") (VNx2HI \"HI\")\n \t\t       (VNx8HF \"HF\") (VNx4HF \"HF\") (VNx2HF \"HF\")\n+\t\t       (VNx8BF \"BF\")\n \t\t       (VNx4SI \"SI\") (VNx2SI \"SI\")\n \t\t       (VNx4SF \"SF\") (VNx2SF \"SF\")\n \t\t       (VNx2DI \"DI\")\n@@ -1095,26 +1098,27 @@\n \t\t       (VNx16QI \"qi\") (VNx8QI \"qi\") (VNx4QI \"qi\") (VNx2QI \"qi\")\n \t\t       (VNx8HI \"hi\") (VNx4HI \"hi\") (VNx2HI \"hi\")\n \t\t       (VNx8HF \"hf\") (VNx4HF \"hf\") (VNx2HF \"hf\")\n+\t\t       (VNx8BF \"bf\")\n \t\t       (VNx4SI \"si\") (VNx2SI \"si\")\n \t\t       (VNx4SF \"sf\") (VNx2SF \"sf\")\n \t\t       (VNx2DI \"di\")\n \t\t       (VNx2DF \"df\")])\n \n ;; Element mode with floating-point values replaced by like-sized integers.\n (define_mode_attr VEL_INT [(VNx16QI \"QI\")\n-\t\t\t   (VNx8HI  \"HI\") (VNx8HF \"HI\")\n+\t\t\t   (VNx8HI  \"HI\") (VNx8HF \"HI\") (VNx8BF \"HI\")\n \t\t\t   (VNx4SI  \"SI\") (VNx4SF \"SI\")\n \t\t\t   (VNx2DI  \"DI\") (VNx2DF \"DI\")])\n \n ;; Gives the mode of the 128-bit lowpart of an SVE vector.\n (define_mode_attr V128 [(VNx16QI \"V16QI\")\n-\t\t\t(VNx8HI  \"V8HI\") (VNx8HF \"V8HF\")\n+\t\t\t(VNx8HI  \"V8HI\") (VNx8HF \"V8HF\") (VNx8BF \"V8BF\")\n \t\t\t(VNx4SI  \"V4SI\") (VNx4SF \"V4SF\")\n \t\t\t(VNx2DI  \"V2DI\") (VNx2DF \"V2DF\")])\n \n ;; ...and again in lower case.\n (define_mode_attr v128 [(VNx16QI \"v16qi\")\n-\t\t\t(VNx8HI  \"v8hi\") (VNx8HF \"v8hf\")\n+\t\t\t(VNx8HI  \"v8hi\") (VNx8HF \"v8hf\") (VNx8BF \"v8bf\")\n \t\t\t(VNx4SI  \"v4si\") (VNx4SF \"v4sf\")\n \t\t\t(VNx2DI  \"v2di\") (VNx2DF \"v2df\")])\n \n@@ -1277,6 +1281,7 @@\n \t\t\t  (VNx16QI \"w\") (VNx8QI \"w\") (VNx4QI \"w\") (VNx2QI \"w\")\n \t\t\t  (VNx8HI \"w\") (VNx4HI \"w\") (VNx2HI \"w\")\n \t\t\t  (VNx8HF \"w\") (VNx4HF \"w\") (VNx2HF \"w\")\n+\t\t\t  (VNx8BF \"w\")\n \t\t\t  (VNx4SI \"w\") (VNx2SI \"w\")\n \t\t\t  (VNx4SF \"w\") (VNx2SF \"w\")\n \t\t\t  (VNx2DI \"x\")\n@@ -1303,6 +1308,7 @@\n \t\t\t       (HF    \"HI\")\n \t\t\t       (VNx16QI \"VNx16QI\")\n \t\t\t       (VNx8HI  \"VNx8HI\") (VNx8HF \"VNx8HI\")\n+\t\t\t       (VNx8BF  \"VNx8HI\")\n \t\t\t       (VNx4SI  \"VNx4SI\") (VNx4SF \"VNx4SI\")\n \t\t\t       (VNx2DI  \"VNx2DI\") (VNx2DF \"VNx2DI\")\n ])\n@@ -1318,15 +1324,18 @@\n \t\t\t       (SF   \"si\")\n \t\t\t       (VNx16QI \"vnx16qi\")\n \t\t\t       (VNx8HI  \"vnx8hi\") (VNx8HF \"vnx8hi\")\n+\t\t\t       (VNx8BF  \"vnx8hi\")\n \t\t\t       (VNx4SI  \"vnx4si\") (VNx4SF \"vnx4si\")\n \t\t\t       (VNx2DI  \"vnx2di\") (VNx2DF \"vnx2di\")\n ])\n \n ;; Floating-point equivalent of selected modes.\n (define_mode_attr V_FP_EQUIV [(VNx8HI \"VNx8HF\") (VNx8HF \"VNx8HF\")\n+\t\t\t      (VNx8BF \"VNx8HF\")\n \t\t\t      (VNx4SI \"VNx4SF\") (VNx4SF \"VNx4SF\")\n \t\t\t      (VNx2DI \"VNx2DF\") (VNx2DF \"VNx2DF\")])\n (define_mode_attr v_fp_equiv [(VNx8HI \"vnx8hf\") (VNx8HF \"vnx8hf\")\n+\t\t\t      (VNx8BF \"vnx8hf\")\n \t\t\t      (VNx4SI \"vnx4sf\") (VNx4SF \"vnx4sf\")\n \t\t\t      (VNx2DI \"vnx2df\") (VNx2DF \"vnx2df\")])\n \n@@ -1508,51 +1517,63 @@\n ;; The number of subvectors in an SVE_STRUCT.\n (define_mode_attr vector_count [(VNx32QI \"2\") (VNx16HI \"2\")\n \t\t\t\t(VNx8SI  \"2\") (VNx4DI  \"2\")\n+\t\t\t\t(VNx16BF \"2\")\n \t\t\t\t(VNx16HF \"2\") (VNx8SF  \"2\") (VNx4DF \"2\")\n \t\t\t\t(VNx48QI \"3\") (VNx24HI \"3\")\n \t\t\t\t(VNx12SI \"3\") (VNx6DI  \"3\")\n+\t\t\t\t(VNx24BF \"3\")\n \t\t\t\t(VNx24HF \"3\") (VNx12SF \"3\") (VNx6DF \"3\")\n \t\t\t\t(VNx64QI \"4\") (VNx32HI \"4\")\n \t\t\t\t(VNx16SI \"4\") (VNx8DI  \"4\")\n+\t\t\t\t(VNx32BF \"4\")\n \t\t\t\t(VNx32HF \"4\") (VNx16SF \"4\") (VNx8DF \"4\")])\n \n ;; The number of instruction bytes needed for an SVE_STRUCT move.  This is\n ;; equal to vector_count * 4.\n (define_mode_attr insn_length [(VNx32QI \"8\")  (VNx16HI \"8\")\n \t\t\t       (VNx8SI  \"8\")  (VNx4DI  \"8\")\n+\t\t\t       (VNx16BF \"8\")\n \t\t\t       (VNx16HF \"8\")  (VNx8SF  \"8\")  (VNx4DF \"8\")\n \t\t\t       (VNx48QI \"12\") (VNx24HI \"12\")\n \t\t\t       (VNx12SI \"12\") (VNx6DI  \"12\")\n+\t\t\t       (VNx24BF \"12\")\n \t\t\t       (VNx24HF \"12\") (VNx12SF \"12\") (VNx6DF \"12\")\n \t\t\t       (VNx64QI \"16\") (VNx32HI \"16\")\n \t\t\t       (VNx16SI \"16\") (VNx8DI  \"16\")\n+\t\t\t       (VNx32BF \"16\")\n \t\t\t       (VNx32HF \"16\") (VNx16SF \"16\") (VNx8DF \"16\")])\n \n ;; The type of a subvector in an SVE_STRUCT.\n (define_mode_attr VSINGLE [(VNx32QI \"VNx16QI\")\n \t\t\t   (VNx16HI \"VNx8HI\") (VNx16HF \"VNx8HF\")\n+\t\t\t   (VNx16BF \"VNx8BF\")\n \t\t\t   (VNx8SI \"VNx4SI\") (VNx8SF \"VNx4SF\")\n \t\t\t   (VNx4DI \"VNx2DI\") (VNx4DF \"VNx2DF\")\n \t\t\t   (VNx48QI \"VNx16QI\")\n \t\t\t   (VNx24HI \"VNx8HI\") (VNx24HF \"VNx8HF\")\n+\t\t\t   (VNx24BF \"VNx8BF\")\n \t\t\t   (VNx12SI \"VNx4SI\") (VNx12SF \"VNx4SF\")\n \t\t\t   (VNx6DI \"VNx2DI\") (VNx6DF \"VNx2DF\")\n \t\t\t   (VNx64QI \"VNx16QI\")\n \t\t\t   (VNx32HI \"VNx8HI\") (VNx32HF \"VNx8HF\")\n+\t\t\t   (VNx32BF \"VNx8BF\")\n \t\t\t   (VNx16SI \"VNx4SI\") (VNx16SF \"VNx4SF\")\n \t\t\t   (VNx8DI \"VNx2DI\") (VNx8DF \"VNx2DF\")])\n \n ;; ...and again in lower case.\n (define_mode_attr vsingle [(VNx32QI \"vnx16qi\")\n \t\t\t   (VNx16HI \"vnx8hi\") (VNx16HF \"vnx8hf\")\n+\t\t\t   (VNx16BF \"vnx8bf\")\n \t\t\t   (VNx8SI \"vnx4si\") (VNx8SF \"vnx4sf\")\n \t\t\t   (VNx4DI \"vnx2di\") (VNx4DF \"vnx2df\")\n \t\t\t   (VNx48QI \"vnx16qi\")\n \t\t\t   (VNx24HI \"vnx8hi\") (VNx24HF \"vnx8hf\")\n+\t\t\t   (VNx24BF \"vnx8bf\")\n \t\t\t   (VNx12SI \"vnx4si\") (VNx12SF \"vnx4sf\")\n \t\t\t   (VNx6DI \"vnx2di\") (VNx6DF \"vnx2df\")\n \t\t\t   (VNx64QI \"vnx16qi\")\n \t\t\t   (VNx32HI \"vnx8hi\") (VNx32HF \"vnx8hf\")\n+\t\t\t   (VNx32BF \"vnx8bf\")\n \t\t\t   (VNx16SI \"vnx4si\") (VNx16SF \"vnx4sf\")\n \t\t\t   (VNx8DI \"vnx2di\") (VNx8DF \"vnx2df\")])\n \n@@ -1562,20 +1583,24 @@\n \t\t\t (VNx4QI \"VNx4BI\") (VNx2QI \"VNx2BI\")\n \t\t\t (VNx8HI \"VNx8BI\") (VNx4HI \"VNx4BI\") (VNx2HI \"VNx2BI\")\n \t\t\t (VNx8HF \"VNx8BI\") (VNx4HF \"VNx4BI\") (VNx2HF \"VNx2BI\")\n+\t\t\t (VNx8BF \"VNx8BI\")\n \t\t\t (VNx4SI \"VNx4BI\") (VNx2SI \"VNx2BI\")\n \t\t\t (VNx4SF \"VNx4BI\") (VNx2SF \"VNx2BI\")\n \t\t\t (VNx2DI \"VNx2BI\")\n \t\t\t (VNx2DF \"VNx2BI\")\n \t\t\t (VNx32QI \"VNx16BI\")\n \t\t\t (VNx16HI \"VNx8BI\") (VNx16HF \"VNx8BI\")\n+\t\t\t (VNx16BF \"VNx8BI\")\n \t\t\t (VNx8SI \"VNx4BI\") (VNx8SF \"VNx4BI\")\n \t\t\t (VNx4DI \"VNx2BI\") (VNx4DF \"VNx2BI\")\n \t\t\t (VNx48QI \"VNx16BI\")\n \t\t\t (VNx24HI \"VNx8BI\") (VNx24HF \"VNx8BI\")\n+\t\t\t (VNx24BF \"VNx8BI\")\n \t\t\t (VNx12SI \"VNx4BI\") (VNx12SF \"VNx4BI\")\n \t\t\t (VNx6DI \"VNx2BI\") (VNx6DF \"VNx2BI\")\n \t\t\t (VNx64QI \"VNx16BI\")\n \t\t\t (VNx32HI \"VNx8BI\") (VNx32HF \"VNx8BI\")\n+\t\t\t (VNx32BF \"VNx8BI\")\n \t\t\t (VNx16SI \"VNx4BI\") (VNx16SF \"VNx4BI\")\n \t\t\t (VNx8DI \"VNx2BI\") (VNx8DF \"VNx2BI\")])\n \n@@ -1584,25 +1609,30 @@\n \t\t\t (VNx4QI \"vnx4bi\") (VNx2QI \"vnx2bi\")\n \t\t\t (VNx8HI \"vnx8bi\") (VNx4HI \"vnx4bi\") (VNx2HI \"vnx2bi\")\n \t\t\t (VNx8HF \"vnx8bi\") (VNx4HF \"vnx4bi\") (VNx2HF \"vnx2bi\")\n+\t\t\t (VNx8BF \"vnx8bi\")\n \t\t\t (VNx4SI \"vnx4bi\") (VNx2SI \"vnx2bi\")\n \t\t\t (VNx4SF \"vnx4bi\") (VNx2SF \"vnx2bi\")\n \t\t\t (VNx2DI \"vnx2bi\")\n \t\t\t (VNx2DF \"vnx2bi\")\n \t\t\t (VNx32QI \"vnx16bi\")\n \t\t\t (VNx16HI \"vnx8bi\") (VNx16HF \"vnx8bi\")\n+\t\t\t (VNx16BF \"vnx8bi\")\n \t\t\t (VNx8SI \"vnx4bi\") (VNx8SF \"vnx4bi\")\n \t\t\t (VNx4DI \"vnx2bi\") (VNx4DF \"vnx2bi\")\n \t\t\t (VNx48QI \"vnx16bi\")\n \t\t\t (VNx24HI \"vnx8bi\") (VNx24HF \"vnx8bi\")\n+\t\t\t (VNx24BF \"vnx8bi\")\n \t\t\t (VNx12SI \"vnx4bi\") (VNx12SF \"vnx4bi\")\n \t\t\t (VNx6DI \"vnx2bi\") (VNx6DF \"vnx2bi\")\n \t\t\t (VNx64QI \"vnx16bi\")\n \t\t\t (VNx32HI \"vnx8bi\") (VNx32HF \"vnx4bi\")\n+\t\t\t (VNx32BF \"vnx8bi\")\n \t\t\t (VNx16SI \"vnx4bi\") (VNx16SF \"vnx4bi\")\n \t\t\t (VNx8DI \"vnx2bi\") (VNx8DF \"vnx2bi\")])\n \n (define_mode_attr VDOUBLE [(VNx16QI \"VNx32QI\")\n \t\t\t   (VNx8HI \"VNx16HI\") (VNx8HF \"VNx16HF\")\n+\t\t\t   (VNx8BF \"VNx16BF\")\n \t\t\t   (VNx4SI \"VNx8SI\") (VNx4SF \"VNx8SF\")\n \t\t\t   (VNx2DI \"VNx4DI\") (VNx2DF \"VNx4DF\")])\n "}, {"sha": "5d002d9b81505ed7674b228766b1275aaf1ddb61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -1,3 +1,157 @@\n+2020-01-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_1.C: Test mangling\n+\tof svbfloat16_t.\n+\t* g++.target/aarch64/sve/acle/general-c++/mangle_2.C: Likewise for\n+\t__SVBfloat16_t.\n+\t* gcc.target/aarch64/sve/acle/asm/clasta_bf16.c: New test.\n+\t* gcc.target/aarch64/sve/acle/asm/clastb_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/cnt_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/create2_1.c (create_bf16): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/create3_1.c (create_bf16): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/create4_1.c (create_bf16): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dup_lane_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/dupq_lane_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ext_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/get2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/get3_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/get4_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/insr_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/lasta_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/lastb_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1ro_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld3_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld4_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ldff1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ldnf1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ldnt1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/len_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_f16.c\n+\t(reinterpret_f16_bf16_tied1, reinterpret_f16_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_f32.c\n+\t(reinterpret_f32_bf16_tied1, reinterpret_f32_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_f64.c\n+\t(reinterpret_f64_bf16_tied1, reinterpret_f64_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s16.c\n+\t(reinterpret_s16_bf16_tied1, reinterpret_s16_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s32.c\n+\t(reinterpret_s32_bf16_tied1, reinterpret_s32_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s64.c\n+\t(reinterpret_s64_bf16_tied1, reinterpret_s64_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_s8.c\n+\t(reinterpret_s8_bf16_tied1, reinterpret_s8_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u16.c\n+\t(reinterpret_u16_bf16_tied1, reinterpret_u16_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u32.c\n+\t(reinterpret_u32_bf16_tied1, reinterpret_u32_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u64.c\n+\t(reinterpret_u64_bf16_tied1, reinterpret_u64_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/reinterpret_u8.c\n+\t(reinterpret_u8_bf16_tied1, reinterpret_u8_bf16_untied): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/rev_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/sel_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/set2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/set3_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/set4_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/splice_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/st1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/st2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/st3_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/st4_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/stnt1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/tbl_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn1q_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/trn2q_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/undef2_1.c (bfloat16_t): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/undef3_1.c (bfloat16_t): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/undef4_1.c (bfloat16_t): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/undef_1.c (bfloat16_t): Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp1q_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/uzp2q_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip1q_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/zip2q_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_1.c (ret_bf16, ret_bf16x2)\n+\t(ret_bf16x3, ret_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_2.c (fn_bf16, fn_bf16x2)\n+\t(fn_bf16x3, fn_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_3.c (fn_bf16, fn_bf16x2)\n+\t(fn_bf16x3, fn_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_4.c (fn_bf16, fn_bf16x2)\n+\t(fn_bf16x3, fn_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_5.c (fn_bf16, fn_bf16x2)\n+\t(fn_bf16x3, fn_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_6.c (fn_bf16, fn_bf16x2)\n+\t(fn_bf16x3, fn_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/annotate_7.c (fn_bf16, fn_bf16x2)\n+\t(fn_bf16x3, fn_bf16x4): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/args_5_be_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/args_5_le_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/args_6_be_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/args_6_le_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/gnu_vectors_1.c (bfloat16x16_t): New\n+\ttypedef.\n+\t(bfloat16_callee, bfloat16_caller): New tests.\n+\t* gcc.target/aarch64/sve/pcs/gnu_vectors_2.c (bfloat16x16_t): New\n+\ttypedef.\n+\t(bfloat16_callee, bfloat16_caller): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_4.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_4_128.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_4_256.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_4_512.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_4_1024.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_4_2048.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_5.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_5_128.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_5_256.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_5_512.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_5_1024.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_5_2048.c (CALLER_BF16): New macro.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_6.c (bfloat16_t): New typedef.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_6_128.c (bfloat16_t): New typedef.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_6_256.c (bfloat16_t): New typedef.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_6_512.c (bfloat16_t): New typedef.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_6_1024.c (bfloat16_t): New typedef.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_6_2048.c (bfloat16_t): New typedef.\n+\t(callee_bf16, caller_bf16): New tests.\n+\t* gcc.target/aarch64/sve/pcs/return_7.c (callee_bf16): Likewise\n+\t(caller_bf16): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/return_8.c (callee_bf16): Likewise\n+\t(caller_bf16): Likewise.\n+\t* gcc.target/aarch64/sve/pcs/return_9.c (callee_bf16): Likewise\n+\t(caller_bf16): Likewise.\n+\t* gcc.target/aarch64/sve2/acle/asm/tbl2_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve2/acle/asm/tbx_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve2/acle/asm/whilerw_bf16.c: Likewise.\n+\t* gcc.target/aarch64/sve2/acle/asm/whilewr_bf16.c: Likewise.\n+\n 2020-01-31  Dennis Zhang  <dennis.zhang@arm.com>\n \t    Matthew Malcomson  <matthew.malcomson@arm.com>\n \t    Richard Sandiford  <richard.sandiford@arm.com>"}, {"sha": "1a1712485859a9688c7023c2570ae21427e428f0", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/mangle_1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmangle_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmangle_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmangle_1.C?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -14,6 +14,7 @@ void f9(svuint64_t) {}\n void f10(svfloat16_t) {}\n void f11(svfloat32_t) {}\n void f12(svfloat64_t) {}\n+void f13(svbfloat16_t) {}\n \n /* { dg-final { scan-assembler \"_Z2f110__SVBool_t:\" } } */\n /* { dg-final { scan-assembler \"_Z2f210__SVInt8_t:\" } } */\n@@ -27,3 +28,4 @@ void f12(svfloat64_t) {}\n /* { dg-final { scan-assembler \"_Z3f1013__SVFloat16_t:\" } } */\n /* { dg-final { scan-assembler \"_Z3f1113__SVFloat32_t:\" } } */\n /* { dg-final { scan-assembler \"_Z3f1213__SVFloat64_t:\" } } */\n+/* { dg-final { scan-assembler \"_Z3f1314__SVBfloat16_t:\" } } */"}, {"sha": "6792b8a3133264ab2f3ee2b80967035aa3be1583", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/general-c++/mangle_2.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmangle_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmangle_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Fgeneral-c%2B%2B%2Fmangle_2.C?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -12,6 +12,7 @@ void f9(__SVUint64_t) {}\n void f10(__SVFloat16_t) {}\n void f11(__SVFloat32_t) {}\n void f12(__SVFloat64_t) {}\n+void f13(__SVBfloat16_t) {}\n \n /* { dg-final { scan-assembler \"_Z2f110__SVBool_t:\" } } */\n /* { dg-final { scan-assembler \"_Z2f210__SVInt8_t:\" } } */\n@@ -25,3 +26,4 @@ void f12(__SVFloat64_t) {}\n /* { dg-final { scan-assembler \"_Z3f1013__SVFloat16_t:\" } } */\n /* { dg-final { scan-assembler \"_Z3f1113__SVFloat32_t:\" } } */\n /* { dg-final { scan-assembler \"_Z3f1213__SVFloat64_t:\" } } */\n+/* { dg-final { scan-assembler \"_Z3f1314__SVBfloat16_t:\" } } */"}, {"sha": "a15e34400f6cba9500034825ac48ae024703b374", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_bf16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** clasta_bf16_tied1:\n+**\tclasta\tz0\\.h, p0, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (clasta_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svclasta_bf16 (p0, z0, z1),\n+\t\tz0 = svclasta (p0, z0, z1))\n+\n+/*\n+** clasta_bf16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tclasta\tz0\\.h, p0, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (clasta_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svclasta_bf16 (p0, z1, z0),\n+\t\tz0 = svclasta (p0, z1, z0))\n+\n+/*\n+** clasta_bf16_untied:\n+**\tmovprfx\tz0, z1\n+**\tclasta\tz0\\.h, p0, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (clasta_bf16_untied, svbfloat16_t,\n+\t\tz0 = svclasta_bf16 (p0, z1, z2),\n+\t\tz0 = svclasta (p0, z1, z2))\n+\n+/*\n+** clasta_d0_bf16:\n+**\tclasta\th0, p0, h0, z2\\.h\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (clasta_d0_bf16, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svclasta_n_bf16 (p0, d0, z2),\n+\t\t  d0 = svclasta (p0, d0, z2))\n+\n+/*\n+** clasta_d1_bf16:\n+**\tmov\tv0\\.h\\[0\\], v1\\.h\\[0\\]\n+**\tclasta\th0, p0, h0, z2\\.h\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (clasta_d1_bf16, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svclasta_n_bf16 (p0, d1, z2),\n+\t\t  d0 = svclasta (p0, d1, z2))"}, {"sha": "235fd1b4ed6ecf69c2be2cace8d30adf33849cef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_bf16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** clastb_bf16_tied1:\n+**\tclastb\tz0\\.h, p0, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (clastb_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svclastb_bf16 (p0, z0, z1),\n+\t\tz0 = svclastb (p0, z0, z1))\n+\n+/*\n+** clastb_bf16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tclastb\tz0\\.h, p0, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (clastb_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svclastb_bf16 (p0, z1, z0),\n+\t\tz0 = svclastb (p0, z1, z0))\n+\n+/*\n+** clastb_bf16_untied:\n+**\tmovprfx\tz0, z1\n+**\tclastb\tz0\\.h, p0, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (clastb_bf16_untied, svbfloat16_t,\n+\t\tz0 = svclastb_bf16 (p0, z1, z2),\n+\t\tz0 = svclastb (p0, z1, z2))\n+\n+/*\n+** clastb_d0_bf16:\n+**\tclastb\th0, p0, h0, z2\\.h\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (clastb_d0_bf16, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svclastb_n_bf16 (p0, d0, z2),\n+\t\t  d0 = svclastb (p0, d0, z2))\n+\n+/*\n+** clastb_d1_bf16:\n+**\tmov\tv0\\.h\\[0\\], v1\\.h\\[0\\]\n+**\tclastb\th0, p0, h0, z2\\.h\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (clastb_d1_bf16, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svclastb_n_bf16 (p0, d1, z2),\n+\t\t  d0 = svclastb (p0, d1, z2))"}, {"sha": "d92fbc1572d012d129cc05f4ddf748e24fc9fcb1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_bf16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** cnt_bf16_m_tied1:\n+**\tcnt\tz0\\.h, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (cnt_bf16_m_tied1, svuint16_t, svbfloat16_t,\n+\t     z0 = svcnt_bf16_m (z0, p0, z4),\n+\t     z0 = svcnt_m (z0, p0, z4))\n+\n+/*\n+** cnt_bf16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tcnt\tz0\\.h, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (cnt_bf16_m_untied, svuint16_t, svbfloat16_t,\n+\t     z0 = svcnt_bf16_m (z1, p0, z4),\n+\t     z0 = svcnt_m (z1, p0, z4))\n+\n+/*\n+** cnt_bf16_z:\n+**\tmovprfx\tz0\\.h, p0/z, z4\\.h\n+**\tcnt\tz0\\.h, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (cnt_bf16_z, svuint16_t, svbfloat16_t,\n+\t     z0 = svcnt_bf16_z (p0, z4),\n+\t     z0 = svcnt_z (p0, z4))\n+\n+/*\n+** cnt_bf16_x:\n+**\tcnt\tz0\\.h, p0/m, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (cnt_bf16_x, svuint16_t, svbfloat16_t,\n+\t     z0 = svcnt_bf16_x (p0, z4),\n+\t     z0 = svcnt_x (p0, z4))\n+\n+/*\n+** ptrue_cnt_bf16_x:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_DUAL_Z (ptrue_cnt_bf16_x, svuint16_t, svbfloat16_t,\n+\t     z0 = svcnt_bf16_x (svptrue_b16 (), z4),\n+\t     z0 = svcnt_x (svptrue_b16 (), z4))"}, {"sha": "e9158ed8adf02962f9a10756d9323d00c04da9f4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/create2_1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate2_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -42,6 +42,16 @@ TEST_CREATE (create2_u16, svuint16x2_t, svuint16_t,\n \t     z0 = svcreate2_u16 (z6, z5),\n \t     z0 = svcreate2 (z6, z5))\n \n+/*\n+** create2_bf16:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tmov\tz1\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_CREATE (create2_bf16, svbfloat16x2_t, svbfloat16_t,\n+\t     z0 = svcreate2_bf16 (z4, z5),\n+\t     z0 = svcreate2 (z4, z5))\n+\n /*\n ** create2_f16:\n **\tmov\tz0\\.d, z4\\.d"}, {"sha": "6f1afb7722a115529ff506d0896988f29955018e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/create3_1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate3_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -46,6 +46,17 @@ TEST_CREATE (create3_u16, svuint16x3_t, svuint16_t,\n \t     z0 = svcreate3_u16 (z6, z5, z4),\n \t     z0 = svcreate3 (z6, z5, z4))\n \n+/*\n+** create3_bf16:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tmov\tz1\\.d, z5\\.d\n+**\tmov\tz2\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_CREATE (create3_bf16, svbfloat16x3_t, svbfloat16_t,\n+\t     z0 = svcreate3_bf16 (z4, z5, z6),\n+\t     z0 = svcreate3 (z4, z5, z6))\n+\n /*\n ** create3_f16:\n **\tmov\tz0\\.d, z4\\.d"}, {"sha": "a3866286e4bb4c49aaa55ccbf0f78b1cb82e3a72", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/create4_1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate4_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate4_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate4_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -50,6 +50,18 @@ TEST_CREATE (create4_u16, svuint16x4_t, svuint16_t,\n \t     z0 = svcreate4_u16 (z6, z5, z4, z7),\n \t     z0 = svcreate4 (z6, z5, z4, z7))\n \n+/*\n+** create4_bf16:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tmov\tz1\\.d, z5\\.d\n+**\tmov\tz2\\.d, z6\\.d\n+**\tmov\tz3\\.d, z7\\.d\n+**\tret\n+*/\n+TEST_CREATE (create4_bf16, svbfloat16x4_t, svbfloat16_t,\n+\t     z0 = svcreate4_bf16 (z4, z5, z6, z7),\n+\t     z0 = svcreate4 (z4, z5, z6, z7))\n+\n /*\n ** create4_f16:\n **\tmov\tz0\\.d, z4\\.d"}, {"sha": "db47d849c5fffd7a8954bbca688b8962d57b3e30", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_bf16.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** dup_h4_bf16:\n+**\tmov\tz0\\.h, h4\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (dup_h4_bf16, svbfloat16_t, __bf16,\n+\t\tz0 = svdup_n_bf16 (d4),\n+\t\tz0 = svdup_bf16 (d4))\n+\n+/*\n+** dup_h4_bf16_m:\n+**\tmovprfx\tz0, z1\n+**\tmov\tz0\\.h, p0/m, h4\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (dup_h4_bf16_m, svbfloat16_t, __bf16,\n+\t\tz0 = svdup_n_bf16_m (z1, p0, d4),\n+\t\tz0 = svdup_bf16_m (z1, p0, d4))\n+\n+/*\n+** dup_h4_bf16_z:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tmov\tz0\\.h, p0/m, h4\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (dup_h4_bf16_z, svbfloat16_t, __bf16,\n+\t\tz0 = svdup_n_bf16_z (p0, d4),\n+\t\tz0 = svdup_bf16_z (p0, d4))\n+\n+/*\n+** dup_h4_bf16_x:\n+**\tmov\tz0\\.h, h4\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (dup_h4_bf16_x, svbfloat16_t, __bf16,\n+\t\tz0 = svdup_n_bf16_x (p0, d4),\n+\t\tz0 = svdup_bf16_x (p0, d4))"}, {"sha": "d05ad5adbb81f314f994ef50f65326f639ebd196", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dup_lane_bf16.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_lane_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_lane_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdup_lane_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** dup_lane_w0_bf16_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\ttbl\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (dup_lane_w0_bf16_tied1, svbfloat16_t, uint16_t,\n+\t\t z0 = svdup_lane_bf16 (z0, x0),\n+\t\t z0 = svdup_lane (z0, x0))\n+\n+/*\n+** dup_lane_w0_bf16_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\ttbl\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (dup_lane_w0_bf16_untied, svbfloat16_t, uint16_t,\n+\t\t z0 = svdup_lane_bf16 (z1, x0),\n+\t\t z0 = svdup_lane (z1, x0))\n+\n+/*\n+** dup_lane_0_bf16_tied1:\n+**\tdup\tz0\\.h, z0\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_0_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 0),\n+\t\tz0 = svdup_lane (z0, 0))\n+\n+/*\n+** dup_lane_0_bf16_untied:\n+**\tdup\tz0\\.h, z1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_0_bf16_untied, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z1, 0),\n+\t\tz0 = svdup_lane (z1, 0))\n+\n+/*\n+** dup_lane_15_bf16:\n+**\tdup\tz0\\.h, z0\\.h\\[15\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_15_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 15),\n+\t\tz0 = svdup_lane (z0, 15))\n+\n+/*\n+** dup_lane_16_bf16:\n+**\tdup\tz0\\.h, z0\\.h\\[16\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_16_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 16),\n+\t\tz0 = svdup_lane (z0, 16))\n+\n+/*\n+** dup_lane_31_bf16:\n+**\tdup\tz0\\.h, z0\\.h\\[31\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_31_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 31),\n+\t\tz0 = svdup_lane (z0, 31))\n+\n+/*\n+** dup_lane_32_bf16:\n+**\tmov\t(z[0-9]+\\.h), #32\n+**\ttbl\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_32_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 32),\n+\t\tz0 = svdup_lane (z0, 32))\n+\n+/*\n+** dup_lane_63_bf16:\n+**\tmov\t(z[0-9]+\\.h), #63\n+**\ttbl\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_63_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 63),\n+\t\tz0 = svdup_lane (z0, 63))\n+\n+/*\n+** dup_lane_64_bf16:\n+**\tmov\t(z[0-9]+\\.h), #64\n+**\ttbl\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_64_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 64),\n+\t\tz0 = svdup_lane (z0, 64))\n+\n+/*\n+** dup_lane_255_bf16:\n+**\tmov\t(z[0-9]+\\.h), #255\n+**\ttbl\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dup_lane_255_bf16, svbfloat16_t,\n+\t\tz0 = svdup_lane_bf16 (z0, 255),\n+\t\tz0 = svdup_lane (z0, 255))"}, {"sha": "89ae4a4c249d834ceb85a311703cc85aa53d0617", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/dupq_lane_bf16.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdupq_lane_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdupq_lane_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdupq_lane_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** dupq_lane_0_bf16_tied:\n+**\tdup\tz0\\.q, z0\\.q\\[0\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dupq_lane_0_bf16_tied, svbfloat16_t,\n+\t\tz0 = svdupq_lane_bf16 (z0, 0),\n+\t\tz0 = svdupq_lane (z0, 0))\n+\n+/*\n+** dupq_lane_0_bf16_untied:\n+**\tdup\tz0\\.q, z1\\.q\\[0\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dupq_lane_0_bf16_untied, svbfloat16_t,\n+\t\tz0 = svdupq_lane_bf16 (z1, 0),\n+\t\tz0 = svdupq_lane (z1, 0))\n+\n+/*\n+** dupq_lane_1_bf16:\n+**\tdup\tz0\\.q, z0\\.q\\[1\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dupq_lane_1_bf16, svbfloat16_t,\n+\t\tz0 = svdupq_lane_bf16 (z0, 1),\n+\t\tz0 = svdupq_lane (z0, 1))\n+\n+/*\n+** dupq_lane_2_bf16:\n+**\tdup\tz0\\.q, z0\\.q\\[2\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dupq_lane_2_bf16, svbfloat16_t,\n+\t\tz0 = svdupq_lane_bf16 (z0, 2),\n+\t\tz0 = svdupq_lane (z0, 2))\n+\n+/*\n+** dupq_lane_3_bf16:\n+**\tdup\tz0\\.q, z0\\.q\\[3\\]\n+**\tret\n+*/\n+TEST_UNIFORM_Z (dupq_lane_3_bf16, svbfloat16_t,\n+\t\tz0 = svdupq_lane_bf16 (z0, 3),\n+\t\tz0 = svdupq_lane (z0, 3))"}, {"sha": "f982873c43e1f8eff544a67657cbf9ed81db954f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ext_bf16.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fext_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fext_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fext_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ext_0_bf16_tied1:\n+**\text\tz0\\.b, z0\\.b, z1\\.b, #0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_0_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z0, z1, 0),\n+\t\tz0 = svext (z0, z1, 0))\n+\n+/*\n+** ext_0_bf16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\text\tz0\\.b, z0\\.b, \\1\\.b, #0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_0_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z1, z0, 0),\n+\t\tz0 = svext (z1, z0, 0))\n+\n+/*\n+** ext_0_bf16_untied:\n+**\tmovprfx\tz0, z1\n+**\text\tz0\\.b, z0\\.b, z2\\.b, #0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_0_bf16_untied, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z1, z2, 0),\n+\t\tz0 = svext (z1, z2, 0))\n+\n+/*\n+** ext_1_bf16:\n+**\tmovprfx\tz0, z1\n+**\text\tz0\\.b, z0\\.b, z2\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_1_bf16, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z1, z2, 1),\n+\t\tz0 = svext (z1, z2, 1))\n+\n+/*\n+** ext_2_bf16:\n+**\tmovprfx\tz0, z1\n+**\text\tz0\\.b, z0\\.b, z2\\.b, #4\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_2_bf16, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z1, z2, 2),\n+\t\tz0 = svext (z1, z2, 2))\n+\n+/*\n+** ext_3_bf16:\n+**\tmovprfx\tz0, z1\n+**\text\tz0\\.b, z0\\.b, z2\\.b, #6\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_3_bf16, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z1, z2, 3),\n+\t\tz0 = svext (z1, z2, 3))\n+\n+/*\n+** ext_127_bf16:\n+**\tmovprfx\tz0, z1\n+**\text\tz0\\.b, z0\\.b, z2\\.b, #254\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ext_127_bf16, svbfloat16_t,\n+\t\tz0 = svext_bf16 (z1, z2, 127),\n+\t\tz0 = svext (z1, z2, 127))"}, {"sha": "6e5c773b58b77b6e0e924b775ec33e64651af602", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/get2_bf16.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** get2_bf16_z0_0:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get2_bf16_z0_0, svbfloat16x2_t, svbfloat16_t,\n+\t  z0 = svget2_bf16 (z4, 0),\n+\t  z0 = svget2 (z4, 0))\n+\n+/*\n+** get2_bf16_z0_1:\n+**\tmov\tz0\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get2_bf16_z0_1, svbfloat16x2_t, svbfloat16_t,\n+\t  z0 = svget2_bf16 (z4, 1),\n+\t  z0 = svget2 (z4, 1))\n+\n+/*\n+** get2_bf16_z4_0:\n+**\tret\n+*/\n+TEST_GET (get2_bf16_z4_0, svbfloat16x2_t, svbfloat16_t,\n+\t  z4_res = svget2_bf16 (z4, 0),\n+\t  z4_res = svget2 (z4, 0))\n+\n+/*\n+** get2_bf16_z4_1:\n+**\tmov\tz4\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get2_bf16_z4_1, svbfloat16x2_t, svbfloat16_t,\n+\t  z4_res = svget2_bf16 (z4, 1),\n+\t  z4_res = svget2 (z4, 1))\n+\n+/*\n+** get2_bf16_z5_0:\n+**\tmov\tz5\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get2_bf16_z5_0, svbfloat16x2_t, svbfloat16_t,\n+\t  z5_res = svget2_bf16 (z4, 0),\n+\t  z5_res = svget2 (z4, 0))\n+\n+/*\n+** get2_bf16_z5_1:\n+**\tret\n+*/\n+TEST_GET (get2_bf16_z5_1, svbfloat16x2_t, svbfloat16_t,\n+\t  z5_res = svget2_bf16 (z4, 1),\n+\t  z5_res = svget2 (z4, 1))"}, {"sha": "292f02a1277278b9a2cc811e1212a405ccc540bf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/get3_bf16.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget3_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget3_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget3_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** get3_bf16_z0_0:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z0_0, svbfloat16x3_t, svbfloat16_t,\n+\t  z0 = svget3_bf16 (z4, 0),\n+\t  z0 = svget3 (z4, 0))\n+\n+/*\n+** get3_bf16_z0_1:\n+**\tmov\tz0\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z0_1, svbfloat16x3_t, svbfloat16_t,\n+\t  z0 = svget3_bf16 (z4, 1),\n+\t  z0 = svget3 (z4, 1))\n+\n+/*\n+** get3_bf16_z0_2:\n+**\tmov\tz0\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z0_2, svbfloat16x3_t, svbfloat16_t,\n+\t  z0 = svget3_bf16 (z4, 2),\n+\t  z0 = svget3 (z4, 2))\n+\n+/*\n+** get3_bf16_z4_0:\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z4_0, svbfloat16x3_t, svbfloat16_t,\n+\t  z4_res = svget3_bf16 (z4, 0),\n+\t  z4_res = svget3 (z4, 0))\n+\n+/*\n+** get3_bf16_z4_1:\n+**\tmov\tz4\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z4_1, svbfloat16x3_t, svbfloat16_t,\n+\t  z4_res = svget3_bf16 (z4, 1),\n+\t  z4_res = svget3 (z4, 1))\n+\n+/*\n+** get3_bf16_z4_2:\n+**\tmov\tz4\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z4_2, svbfloat16x3_t, svbfloat16_t,\n+\t  z4_res = svget3_bf16 (z4, 2),\n+\t  z4_res = svget3 (z4, 2))\n+\n+/*\n+** get3_bf16_z5_0:\n+**\tmov\tz5\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z5_0, svbfloat16x3_t, svbfloat16_t,\n+\t  z5_res = svget3_bf16 (z4, 0),\n+\t  z5_res = svget3 (z4, 0))\n+\n+/*\n+** get3_bf16_z5_1:\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z5_1, svbfloat16x3_t, svbfloat16_t,\n+\t  z5_res = svget3_bf16 (z4, 1),\n+\t  z5_res = svget3 (z4, 1))\n+\n+/*\n+** get3_bf16_z5_2:\n+**\tmov\tz5\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z5_2, svbfloat16x3_t, svbfloat16_t,\n+\t  z5_res = svget3_bf16 (z4, 2),\n+\t  z5_res = svget3 (z4, 2))\n+\n+/*\n+** get3_bf16_z6_0:\n+**\tmov\tz6\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z6_0, svbfloat16x3_t, svbfloat16_t,\n+\t  z6_res = svget3_bf16 (z4, 0),\n+\t  z6_res = svget3 (z4, 0))\n+\n+/*\n+** get3_bf16_z6_1:\n+**\tmov\tz6\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z6_1, svbfloat16x3_t, svbfloat16_t,\n+\t  z6_res = svget3_bf16 (z4, 1),\n+\t  z6_res = svget3 (z4, 1))\n+\n+/*\n+** get3_bf16_z6_2:\n+**\tret\n+*/\n+TEST_GET (get3_bf16_z6_2, svbfloat16x3_t, svbfloat16_t,\n+\t  z6_res = svget3_bf16 (z4, 2),\n+\t  z6_res = svget3 (z4, 2))"}, {"sha": "f751fc147a192a7c32b72e13202217281b5eb0e0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/get4_bf16.c", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget4_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget4_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fget4_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,179 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** get4_bf16_z0_0:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z0_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z0 = svget4_bf16 (z4, 0),\n+\t  z0 = svget4 (z4, 0))\n+\n+/*\n+** get4_bf16_z0_1:\n+**\tmov\tz0\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z0_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z0 = svget4_bf16 (z4, 1),\n+\t  z0 = svget4 (z4, 1))\n+\n+/*\n+** get4_bf16_z0_2:\n+**\tmov\tz0\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z0_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z0 = svget4_bf16 (z4, 2),\n+\t  z0 = svget4 (z4, 2))\n+\n+/*\n+** get4_bf16_z0_3:\n+**\tmov\tz0\\.d, z7\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z0_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z0 = svget4_bf16 (z4, 3),\n+\t  z0 = svget4 (z4, 3))\n+\n+/*\n+** get4_bf16_z4_0:\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z4_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z4_res = svget4_bf16 (z4, 0),\n+\t  z4_res = svget4 (z4, 0))\n+\n+/*\n+** get4_bf16_z4_1:\n+**\tmov\tz4\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z4_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z4_res = svget4_bf16 (z4, 1),\n+\t  z4_res = svget4 (z4, 1))\n+\n+/*\n+** get4_bf16_z4_2:\n+**\tmov\tz4\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z4_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z4_res = svget4_bf16 (z4, 2),\n+\t  z4_res = svget4 (z4, 2))\n+\n+/*\n+** get4_bf16_z4_3:\n+**\tmov\tz4\\.d, z7\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z4_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z4_res = svget4_bf16 (z4, 3),\n+\t  z4_res = svget4 (z4, 3))\n+\n+/*\n+** get4_bf16_z5_0:\n+**\tmov\tz5\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z5_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z5_res = svget4_bf16 (z4, 0),\n+\t  z5_res = svget4 (z4, 0))\n+\n+/*\n+** get4_bf16_z5_1:\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z5_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z5_res = svget4_bf16 (z4, 1),\n+\t  z5_res = svget4 (z4, 1))\n+\n+/*\n+** get4_bf16_z5_2:\n+**\tmov\tz5\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z5_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z5_res = svget4_bf16 (z4, 2),\n+\t  z5_res = svget4 (z4, 2))\n+\n+/*\n+** get4_bf16_z5_3:\n+**\tmov\tz5\\.d, z7\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z5_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z5_res = svget4_bf16 (z4, 3),\n+\t  z5_res = svget4 (z4, 3))\n+\n+/*\n+** get4_bf16_z6_0:\n+**\tmov\tz6\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z6_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z6_res = svget4_bf16 (z4, 0),\n+\t  z6_res = svget4 (z4, 0))\n+\n+/*\n+** get4_bf16_z6_1:\n+**\tmov\tz6\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z6_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z6_res = svget4_bf16 (z4, 1),\n+\t  z6_res = svget4 (z4, 1))\n+\n+/*\n+** get4_bf16_z6_2:\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z6_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z6_res = svget4_bf16 (z4, 2),\n+\t  z6_res = svget4 (z4, 2))\n+\n+/*\n+** get4_bf16_z6_3:\n+**\tmov\tz6\\.d, z7\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z6_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z6_res = svget4_bf16 (z4, 3),\n+\t  z6_res = svget4 (z4, 3))\n+\n+/*\n+** get4_bf16_z7_0:\n+**\tmov\tz7\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z7_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z7_res = svget4_bf16 (z4, 0),\n+\t  z7_res = svget4 (z4, 0))\n+\n+/*\n+** get4_bf16_z7_1:\n+**\tmov\tz7\\.d, z5\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z7_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z7_res = svget4_bf16 (z4, 1),\n+\t  z7_res = svget4 (z4, 1))\n+\n+/*\n+** get4_bf16_z7_2:\n+**\tmov\tz7\\.d, z6\\.d\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z7_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z7_res = svget4_bf16 (z4, 2),\n+\t  z7_res = svget4 (z4, 2))\n+\n+/*\n+** get4_bf16_z7_3:\n+**\tret\n+*/\n+TEST_GET (get4_bf16_z7_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z7_res = svget4_bf16 (z4, 3),\n+\t  z7_res = svget4 (z4, 3))"}, {"sha": "55afdba62f24df96f8ace55e23d0dcde0b25b7a0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/insr_bf16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Finsr_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Finsr_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Finsr_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** insr_h4_bf16_tied1:\n+**\tinsr\tz0\\.h, h4\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (insr_h4_bf16_tied1, svbfloat16_t, bfloat16_t,\n+\t\t z0 = svinsr_n_bf16 (z0, d4),\n+\t\t z0 = svinsr (z0, d4))\n+\n+/*\n+** insr_h4_bf16_untied:\n+**\tmovprfx\tz0, z1\n+**\tinsr\tz0\\.h, h4\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (insr_h4_bf16_untied, svbfloat16_t, bfloat16_t,\n+\t\t z0 = svinsr_n_bf16 (z1, d4),\n+\t\t z0 = svinsr (z1, d4))"}, {"sha": "da30e05e53c2a6063e08caa23f78e53556a600b7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/lasta_bf16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flasta_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flasta_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flasta_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** lasta_d0_bf16_tied:\n+**\tlasta\th0, p0, z0\\.h\n+**\tret\n+*/\n+TEST_REDUCTION_D (lasta_d0_bf16_tied, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svlasta_bf16 (p0, z0),\n+\t\t  d0 = svlasta (p0, z0))\n+\n+/*\n+** lasta_d0_bf16_untied:\n+**\tlasta\th0, p0, z1\\.h\n+**\tret\n+*/\n+TEST_REDUCTION_D (lasta_d0_bf16_untied, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svlasta_bf16 (p0, z1),\n+\t\t  d0 = svlasta (p0, z1))"}, {"sha": "01ba39a02f1ce7195c11c5baa5392738b9cb139b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/lastb_bf16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flastb_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flastb_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flastb_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** lastb_d0_bf16_tied:\n+**\tlastb\th0, p0, z0\\.h\n+**\tret\n+*/\n+TEST_REDUCTION_D (lastb_d0_bf16_tied, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svlastb_bf16 (p0, z0),\n+\t\t  d0 = svlastb (p0, z0))\n+\n+/*\n+** lastb_d0_bf16_untied:\n+**\tlastb\th0, p0, z1\\.h\n+**\tret\n+*/\n+TEST_REDUCTION_D (lastb_d0_bf16_untied, bfloat16_t, svbfloat16_t,\n+\t\t  d0 = svlastb_bf16 (p0, z1),\n+\t\t  d0 = svlastb (p0, z1))"}, {"sha": "07891de04878064d0333d93834bfe8ed68c76313", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1_bf16.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1_bf16_base:\n+**\tld1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_base, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0),\n+\t   z0 = svld1 (p0, x0))\n+\n+/*\n+** ld1_bf16_index:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_index, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 + x1),\n+\t   z0 = svld1 (p0, x0 + x1))\n+\n+/*\n+** ld1_bf16_1:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svld1 (p0, x0 + svcnth ()))\n+\n+/*\n+** ld1_bf16_7:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 + svcnth () * 7),\n+\t   z0 = svld1 (p0, x0 + svcnth () * 7))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld1_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tld1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 + svcnth () * 8),\n+\t   z0 = svld1 (p0, x0 + svcnth () * 8))\n+\n+/*\n+** ld1_bf16_m1:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svld1 (p0, x0 - svcnth ()))\n+\n+/*\n+** ld1_bf16_m8:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 - svcnth () * 8),\n+\t   z0 = svld1 (p0, x0 - svcnth () * 8))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld1_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tld1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_bf16 (p0, x0 - svcnth () * 9),\n+\t   z0 = svld1 (p0, x0 - svcnth () * 9))\n+\n+/*\n+** ld1_vnum_bf16_0:\n+**\tld1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_0, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svld1_vnum (p0, x0, 0))\n+\n+/*\n+** ld1_vnum_bf16_1:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svld1_vnum (p0, x0, 1))\n+\n+/*\n+** ld1_vnum_bf16_7:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, 7),\n+\t   z0 = svld1_vnum (p0, x0, 7))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld1_vnum_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tld1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, 8),\n+\t   z0 = svld1_vnum (p0, x0, 8))\n+\n+/*\n+** ld1_vnum_bf16_m1:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svld1_vnum (p0, x0, -1))\n+\n+/*\n+** ld1_vnum_bf16_m8:\n+**\tld1h\tz0\\.h, p0/z, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, -8),\n+\t   z0 = svld1_vnum (p0, x0, -8))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld1_vnum_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tld1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, -9),\n+\t   z0 = svld1_vnum (p0, x0, -9))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** ld1_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tld1h\tz0\\.h, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1_vnum_bf16_x1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svld1_vnum (p0, x0, x1))"}, {"sha": "cb1801778d4d68e9708f96a827c4e2582607564d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1ro_bf16.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1ro_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,120 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+/* { dg-additional-options \"-march=armv8.6-a+f64mm\" } */\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok }  */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1ro_bf16_base:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_base, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0),\n+\t   z0 = svld1ro (p0, x0))\n+\n+/*\n+** ld1ro_bf16_index:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_index, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 + x1),\n+\t   z0 = svld1ro (p0, x0 + x1))\n+\n+/*\n+** ld1ro_bf16_1:\n+**\tadd\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 + 1),\n+\t   z0 = svld1ro (p0, x0 + 1))\n+\n+/*\n+** ld1ro_bf16_8:\n+**\tadd\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 + 8),\n+\t   z0 = svld1ro (p0, x0 + 8))\n+\n+/*\n+** ld1ro_bf16_128:\n+**\tadd\t(x[0-9]+), x0, #?256\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_128, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 + 128),\n+\t   z0 = svld1ro (p0, x0 + 128))\n+\n+/*\n+** ld1ro_bf16_m1:\n+**\tsub\t(x[0-9]+), x0, #?2\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 - 1),\n+\t   z0 = svld1ro (p0, x0 - 1))\n+\n+/*\n+** ld1ro_bf16_m8:\n+**\tsub\t(x[0-9]+), x0, #?16\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 - 8),\n+\t   z0 = svld1ro (p0, x0 - 8))\n+\n+/*\n+** ld1ro_bf16_m144:\n+**\tsub\t(x[0-9]+), x0, #?288\n+**\tld1roh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_m144, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 - 144),\n+\t   z0 = svld1ro (p0, x0 - 144))\n+\n+/*\n+** ld1ro_bf16_16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_16, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 + 16),\n+\t   z0 = svld1ro (p0, x0 + 16))\n+\n+/*\n+** ld1ro_bf16_112:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?224\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_112, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 + 112),\n+\t   z0 = svld1ro (p0, x0 + 112))\n+\n+/*\n+** ld1ro_bf16_m16:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-32\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_m16, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 - 16),\n+\t   z0 = svld1ro (p0, x0 - 16))\n+\n+/*\n+** ld1ro_bf16_m128:\n+**\tld1roh\tz0\\.h, p0/z, \\[x0, #?-256\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1ro_bf16_m128, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1ro_bf16 (p0, x0 - 128),\n+\t   z0 = svld1ro (p0, x0 - 128))\n+"}, {"sha": "54c69a1db19cf28d6844769b41744d0f3609e319", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_bf16.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,137 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld1rq_bf16_base:\n+**\tld1rqh\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_base, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0),\n+\t   z0 = svld1rq (p0, x0))\n+\n+/*\n+** ld1rq_bf16_index:\n+**\tld1rqh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_index, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + x1),\n+\t   z0 = svld1rq (p0, x0 + x1))\n+\n+/*\n+** ld1rq_bf16_1:\n+**\tadd\t(x[0-9]+), x0, #?2\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + 1),\n+\t   z0 = svld1rq (p0, x0 + 1))\n+\n+/*\n+** ld1rq_bf16_4:\n+**\tadd\t(x[0-9]+), x0, #?8\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_4, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + 4),\n+\t   z0 = svld1rq (p0, x0 + 4))\n+\n+/*\n+** ld1rq_bf16_7:\n+**\tadd\t(x[0-9]+), x0, #?14\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + 7),\n+\t   z0 = svld1rq (p0, x0 + 7))\n+\n+/*\n+** ld1rq_bf16_8:\n+**\tld1rqh\tz0\\.h, p0/z, \\[x0, #?16\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + 8),\n+\t   z0 = svld1rq (p0, x0 + 8))\n+\n+/*\n+** ld1rq_bf16_56:\n+**\tld1rqh\tz0\\.h, p0/z, \\[x0, #?112\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_56, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + 56),\n+\t   z0 = svld1rq (p0, x0 + 56))\n+\n+/*\n+** ld1rq_bf16_64:\n+**\tadd\t(x[0-9]+), x0, #?128\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_64, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 + 64),\n+\t   z0 = svld1rq (p0, x0 + 64))\n+\n+/*\n+** ld1rq_bf16_m1:\n+**\tsub\t(x[0-9]+), x0, #?2\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 - 1),\n+\t   z0 = svld1rq (p0, x0 - 1))\n+\n+/*\n+** ld1rq_bf16_m4:\n+**\tsub\t(x[0-9]+), x0, #?8\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_m4, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 - 4),\n+\t   z0 = svld1rq (p0, x0 - 4))\n+\n+/*\n+** ld1rq_bf16_m7:\n+**\tsub\t(x[0-9]+), x0, #?14\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_m7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 - 7),\n+\t   z0 = svld1rq (p0, x0 - 7))\n+\n+/*\n+** ld1rq_bf16_m8:\n+**\tld1rqh\tz0\\.h, p0/z, \\[x0, #?-16\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 - 8),\n+\t   z0 = svld1rq (p0, x0 - 8))\n+\n+/*\n+** ld1rq_bf16_m64:\n+**\tld1rqh\tz0\\.h, p0/z, \\[x0, #?-128\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_m64, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 - 64),\n+\t   z0 = svld1rq (p0, x0 - 64))\n+\n+/*\n+** ld1rq_bf16_m72:\n+**\tsub\t(x[0-9]+), x0, #?144\n+**\tld1rqh\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld1rq_bf16_m72, svbfloat16_t, bfloat16_t,\n+\t   z0 = svld1rq_bf16 (p0, x0 - 72),\n+\t   z0 = svld1rq (p0, x0 - 72))"}, {"sha": "5d08c1e6ebda2ead6e80705db553f032e57a35b1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld2_bf16.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,200 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld2_bf16_base:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_base, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0),\n+\t   z0 = svld2 (p0, x0))\n+\n+/*\n+** ld2_bf16_index:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_index, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 + x1),\n+\t   z0 = svld2 (p0, x0 + x1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld2_bf16_1:\n+**\tincb\tx0\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_1, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svld2 (p0, x0 + svcnth ()))\n+\n+/*\n+** ld2_bf16_2:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #2, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_2, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 + svcnth () * 2),\n+\t   z0 = svld2 (p0, x0 + svcnth () * 2))\n+\n+/*\n+** ld2_bf16_14:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #14, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_14, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 + svcnth () * 14),\n+\t   z0 = svld2 (p0, x0 + svcnth () * 14))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld2_bf16_16:\n+**\tincb\tx0, all, mul #16\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_16, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 + svcnth () * 16),\n+\t   z0 = svld2 (p0, x0 + svcnth () * 16))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld2_bf16_m1:\n+**\tdecb\tx0\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_m1, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svld2 (p0, x0 - svcnth ()))\n+\n+/*\n+** ld2_bf16_m2:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #-2, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_m2, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 - svcnth () * 2),\n+\t   z0 = svld2 (p0, x0 - svcnth () * 2))\n+\n+/*\n+** ld2_bf16_m16:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #-16, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_m16, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 - svcnth () * 16),\n+\t   z0 = svld2 (p0, x0 - svcnth () * 16))\n+\n+/*\n+** ld2_bf16_m18:\n+**\taddvl\t(x[0-9]+), x0, #-18\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_bf16_m18, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_bf16 (p0, x0 - svcnth () * 18),\n+\t   z0 = svld2 (p0, x0 - svcnth () * 18))\n+\n+/*\n+** ld2_vnum_bf16_0:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_0, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svld2_vnum (p0, x0, 0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld2_vnum_bf16_1:\n+**\tincb\tx0\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_1, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svld2_vnum (p0, x0, 1))\n+\n+/*\n+** ld2_vnum_bf16_2:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #2, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_2, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, 2),\n+\t   z0 = svld2_vnum (p0, x0, 2))\n+\n+/*\n+** ld2_vnum_bf16_14:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #14, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_14, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, 14),\n+\t   z0 = svld2_vnum (p0, x0, 14))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld2_vnum_bf16_16:\n+**\tincb\tx0, all, mul #16\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_16, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, 16),\n+\t   z0 = svld2_vnum (p0, x0, 16))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld2_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_m1, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svld2_vnum (p0, x0, -1))\n+\n+/*\n+** ld2_vnum_bf16_m2:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #-2, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_m2, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, -2),\n+\t   z0 = svld2_vnum (p0, x0, -2))\n+\n+/*\n+** ld2_vnum_bf16_m16:\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[x0, #-16, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_m16, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, -16),\n+\t   z0 = svld2_vnum (p0, x0, -16))\n+\n+/*\n+** ld2_vnum_bf16_m18:\n+**\taddvl\t(x[0-9]+), x0, #-18\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_m18, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, -18),\n+\t   z0 = svld2_vnum (p0, x0, -18))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** ld2_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tld2h\t{z0\\.h(?: - |, )z1\\.h}, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld2_vnum_bf16_x1, svbfloat16x2_t, bfloat16_t,\n+\t   z0 = svld2_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svld2_vnum (p0, x0, x1))"}, {"sha": "e0b4fb1af4dad419b944137e3d1d1844c48563cf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld3_bf16.c", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld3_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld3_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld3_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,242 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld3_bf16_base:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_base, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0),\n+\t   z0 = svld3 (p0, x0))\n+\n+/*\n+** ld3_bf16_index:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_index, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 + x1),\n+\t   z0 = svld3 (p0, x0 + x1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_bf16_1:\n+**\tincb\tx0\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_1, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svld3 (p0, x0 + svcnth ()))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_2, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 + svcnth () * 2),\n+\t   z0 = svld3 (p0, x0 + svcnth () * 2))\n+\n+/*\n+** ld3_bf16_3:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #3, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_3, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 + svcnth () * 3),\n+\t   z0 = svld3 (p0, x0 + svcnth () * 3))\n+\n+/*\n+** ld3_bf16_21:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #21, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_21, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 + svcnth () * 21),\n+\t   z0 = svld3 (p0, x0 + svcnth () * 21))\n+\n+/*\n+** ld3_bf16_24:\n+**\taddvl\t(x[0-9]+), x0, #24\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_24, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 + svcnth () * 24),\n+\t   z0 = svld3 (p0, x0 + svcnth () * 24))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_bf16_m1:\n+**\tdecb\tx0\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_m1, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svld3 (p0, x0 - svcnth ()))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_m2, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 - svcnth () * 2),\n+\t   z0 = svld3 (p0, x0 - svcnth () * 2))\n+\n+/*\n+** ld3_bf16_m3:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #-3, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_m3, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 - svcnth () * 3),\n+\t   z0 = svld3 (p0, x0 - svcnth () * 3))\n+\n+/*\n+** ld3_bf16_m24:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #-24, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_m24, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 - svcnth () * 24),\n+\t   z0 = svld3 (p0, x0 - svcnth () * 24))\n+\n+/*\n+** ld3_bf16_m27:\n+**\taddvl\t(x[0-9]+), x0, #-27\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_bf16_m27, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_bf16 (p0, x0 - svcnth () * 27),\n+\t   z0 = svld3 (p0, x0 - svcnth () * 27))\n+\n+/*\n+** ld3_vnum_bf16_0:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_0, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svld3_vnum (p0, x0, 0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_vnum_bf16_1:\n+**\tincb\tx0\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_1, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svld3_vnum (p0, x0, 1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_vnum_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_2, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, 2),\n+\t   z0 = svld3_vnum (p0, x0, 2))\n+\n+/*\n+** ld3_vnum_bf16_3:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #3, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_3, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, 3),\n+\t   z0 = svld3_vnum (p0, x0, 3))\n+\n+/*\n+** ld3_vnum_bf16_21:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #21, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_21, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, 21),\n+\t   z0 = svld3_vnum (p0, x0, 21))\n+\n+/*\n+** ld3_vnum_bf16_24:\n+**\taddvl\t(x[0-9]+), x0, #24\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_24, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, 24),\n+\t   z0 = svld3_vnum (p0, x0, 24))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_m1, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svld3_vnum (p0, x0, -1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld3_vnum_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_m2, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, -2),\n+\t   z0 = svld3_vnum (p0, x0, -2))\n+\n+/*\n+** ld3_vnum_bf16_m3:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #-3, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_m3, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, -3),\n+\t   z0 = svld3_vnum (p0, x0, -3))\n+\n+/*\n+** ld3_vnum_bf16_m24:\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[x0, #-24, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_m24, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, -24),\n+\t   z0 = svld3_vnum (p0, x0, -24))\n+\n+/*\n+** ld3_vnum_bf16_m27:\n+**\taddvl\t(x[0-9]+), x0, #-27\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_m27, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, -27),\n+\t   z0 = svld3_vnum (p0, x0, -27))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** ld3_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tld3h\t{z0\\.h - z2\\.h}, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld3_vnum_bf16_x1, svbfloat16x3_t, bfloat16_t,\n+\t   z0 = svld3_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svld3_vnum (p0, x0, x1))"}, {"sha": "123ff6355d3a8f7a1fe939e0720744569b26b5b8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld4_bf16.c", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld4_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld4_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld4_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,286 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ld4_bf16_base:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_base, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0),\n+\t   z0 = svld4 (p0, x0))\n+\n+/*\n+** ld4_bf16_index:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_index, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + x1),\n+\t   z0 = svld4 (p0, x0 + x1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_bf16_1:\n+**\tincb\tx0\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_1, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svld4 (p0, x0 + svcnth ()))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_2, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + svcnth () * 2),\n+\t   z0 = svld4 (p0, x0 + svcnth () * 2))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_bf16_3:\n+**\tincb\tx0, all, mul #3\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_3, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + svcnth () * 3),\n+\t   z0 = svld4 (p0, x0 + svcnth () * 3))\n+\n+/*\n+** ld4_bf16_4:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #4, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_4, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + svcnth () * 4),\n+\t   z0 = svld4 (p0, x0 + svcnth () * 4))\n+\n+/*\n+** ld4_bf16_28:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #28, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_28, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + svcnth () * 28),\n+\t   z0 = svld4 (p0, x0 + svcnth () * 28))\n+\n+/*\n+** ld4_bf16_32:\n+**\t[^{]*\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_32, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 + svcnth () * 32),\n+\t   z0 = svld4 (p0, x0 + svcnth () * 32))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_bf16_m1:\n+**\tdecb\tx0\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_m1, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svld4 (p0, x0 - svcnth ()))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_m2, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 - svcnth () * 2),\n+\t   z0 = svld4 (p0, x0 - svcnth () * 2))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_bf16_m3:\n+**\tdecb\tx0, all, mul #3\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_m3, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 - svcnth () * 3),\n+\t   z0 = svld4 (p0, x0 - svcnth () * 3))\n+\n+/*\n+** ld4_bf16_m4:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #-4, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_m4, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 - svcnth () * 4),\n+\t   z0 = svld4 (p0, x0 - svcnth () * 4))\n+\n+/*\n+** ld4_bf16_m32:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_m32, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 - svcnth () * 32),\n+\t   z0 = svld4 (p0, x0 - svcnth () * 32))\n+\n+/*\n+** ld4_bf16_m36:\n+**\t[^{]*\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_bf16_m36, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_bf16 (p0, x0 - svcnth () * 36),\n+\t   z0 = svld4 (p0, x0 - svcnth () * 36))\n+\n+/*\n+** ld4_vnum_bf16_0:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_0, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svld4_vnum (p0, x0, 0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_vnum_bf16_1:\n+**\tincb\tx0\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_1, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svld4_vnum (p0, x0, 1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_vnum_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_2, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 2),\n+\t   z0 = svld4_vnum (p0, x0, 2))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_vnum_bf16_3:\n+**\tincb\tx0, all, mul #3\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_3, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 3),\n+\t   z0 = svld4_vnum (p0, x0, 3))\n+\n+/*\n+** ld4_vnum_bf16_4:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #4, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_4, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 4),\n+\t   z0 = svld4_vnum (p0, x0, 4))\n+\n+/*\n+** ld4_vnum_bf16_28:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #28, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_28, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 28),\n+\t   z0 = svld4_vnum (p0, x0, 28))\n+\n+/*\n+** ld4_vnum_bf16_32:\n+**\t[^{]*\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_32, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, 32),\n+\t   z0 = svld4_vnum (p0, x0, 32))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_m1, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svld4_vnum (p0, x0, -1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_vnum_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_m2, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, -2),\n+\t   z0 = svld4_vnum (p0, x0, -2))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ld4_vnum_bf16_m3:\n+**\tdecb\tx0, all, mul #3\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_m3, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, -3),\n+\t   z0 = svld4_vnum (p0, x0, -3))\n+\n+/*\n+** ld4_vnum_bf16_m4:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #-4, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_m4, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, -4),\n+\t   z0 = svld4_vnum (p0, x0, -4))\n+\n+/*\n+** ld4_vnum_bf16_m32:\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_m32, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, -32),\n+\t   z0 = svld4_vnum (p0, x0, -32))\n+\n+/*\n+** ld4_vnum_bf16_m36:\n+**\t[^{]*\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_m36, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, -36),\n+\t   z0 = svld4_vnum (p0, x0, -36))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** ld4_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tld4h\t{z0\\.h - z3\\.h}, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ld4_vnum_bf16_x1, svbfloat16x4_t, bfloat16_t,\n+\t   z0 = svld4_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svld4_vnum (p0, x0, x1))"}, {"sha": "80f6468700eeb3cce4e1240246732d2f507259ac", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ldff1_bf16.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldff1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldff1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldff1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ldff1_bf16_base:\n+**\tldff1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_bf16_base, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_bf16 (p0, x0),\n+\t   z0 = svldff1 (p0, x0))\n+\n+/*\n+** ldff1_bf16_index:\n+**\tldff1h\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_bf16_index, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_bf16 (p0, x0 + x1),\n+\t   z0 = svldff1 (p0, x0 + x1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldff1_bf16_1:\n+**\tincb\tx0\n+**\tldff1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svldff1 (p0, x0 + svcnth ()))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldff1_bf16_m1:\n+**\tdecb\tx0\n+**\tldff1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svldff1 (p0, x0 - svcnth ()))\n+\n+/*\n+** ldff1_vnum_bf16_0:\n+**\tldff1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_vnum_bf16_0, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svldff1_vnum (p0, x0, 0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldff1_vnum_bf16_1:\n+**\tincb\tx0\n+**\tldff1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_vnum_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svldff1_vnum (p0, x0, 1))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldff1_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tldff1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_vnum_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svldff1_vnum (p0, x0, -1))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** ldff1_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tldff1h\tz0\\.h, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ldff1_vnum_bf16_x1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldff1_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svldff1_vnum (p0, x0, x1))"}, {"sha": "947a896e7786b8efbc5469464e245466e1d9afb0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ldnf1_bf16.c", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldnf1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldnf1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldnf1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,154 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ldnf1_bf16_base:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_base, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0),\n+\t   z0 = svldnf1 (p0, x0))\n+\n+/*\n+** ldnf1_bf16_index:\n+**\tadd\t(x[0-9]+), x0, x1, lsl 1\n+**\tldnf1h\tz0\\.h, p0/z, \\[\\1\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_index, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 + x1),\n+\t   z0 = svldnf1 (p0, x0 + x1))\n+\n+/*\n+** ldnf1_bf16_1:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svldnf1 (p0, x0 + svcnth ()))\n+\n+/*\n+** ldnf1_bf16_7:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 + svcnth () * 7),\n+\t   z0 = svldnf1 (p0, x0 + svcnth () * 7))\n+\n+/*\n+** ldnf1_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 + svcnth () * 8),\n+\t   z0 = svldnf1 (p0, x0 + svcnth () * 8))\n+\n+/*\n+** ldnf1_bf16_m1:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svldnf1 (p0, x0 - svcnth ()))\n+\n+/*\n+** ldnf1_bf16_m8:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 - svcnth () * 8),\n+\t   z0 = svldnf1 (p0, x0 - svcnth () * 8))\n+\n+/*\n+** ldnf1_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_bf16 (p0, x0 - svcnth () * 9),\n+\t   z0 = svldnf1 (p0, x0 - svcnth () * 9))\n+\n+/*\n+** ldnf1_vnum_bf16_0:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_0, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svldnf1_vnum (p0, x0, 0))\n+\n+/*\n+** ldnf1_vnum_bf16_1:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svldnf1_vnum (p0, x0, 1))\n+\n+/*\n+** ldnf1_vnum_bf16_7:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, 7),\n+\t   z0 = svldnf1_vnum (p0, x0, 7))\n+\n+/*\n+** ldnf1_vnum_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, 8),\n+\t   z0 = svldnf1_vnum (p0, x0, 8))\n+\n+/*\n+** ldnf1_vnum_bf16_m1:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svldnf1_vnum (p0, x0, -1))\n+\n+/*\n+** ldnf1_vnum_bf16_m8:\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, -8),\n+\t   z0 = svldnf1_vnum (p0, x0, -8))\n+\n+/*\n+** ldnf1_vnum_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tldnf1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, -9),\n+\t   z0 = svldnf1_vnum (p0, x0, -9))\n+\n+/*\n+** ldnf1_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (?:x1, \\1|\\1, x1), x0\n+**\tldnf1h\tz0\\.h, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnf1_vnum_bf16_x1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnf1_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svldnf1_vnum (p0, x0, x1))"}, {"sha": "b083901fa2a2996bb18b42b9435e99308ee0e8a1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ldnt1_bf16.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldnt1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldnt1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fldnt1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** ldnt1_bf16_base:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_base, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0),\n+\t   z0 = svldnt1 (p0, x0))\n+\n+/*\n+** ldnt1_bf16_index:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_index, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 + x1),\n+\t   z0 = svldnt1 (p0, x0 + x1))\n+\n+/*\n+** ldnt1_bf16_1:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 + svcnth ()),\n+\t   z0 = svldnt1 (p0, x0 + svcnth ()))\n+\n+/*\n+** ldnt1_bf16_7:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 + svcnth () * 7),\n+\t   z0 = svldnt1 (p0, x0 + svcnth () * 7))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldnt1_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 + svcnth () * 8),\n+\t   z0 = svldnt1 (p0, x0 + svcnth () * 8))\n+\n+/*\n+** ldnt1_bf16_m1:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 - svcnth ()),\n+\t   z0 = svldnt1 (p0, x0 - svcnth ()))\n+\n+/*\n+** ldnt1_bf16_m8:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 - svcnth () * 8),\n+\t   z0 = svldnt1 (p0, x0 - svcnth () * 8))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldnt1_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_bf16 (p0, x0 - svcnth () * 9),\n+\t   z0 = svldnt1 (p0, x0 - svcnth () * 9))\n+\n+/*\n+** ldnt1_vnum_bf16_0:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_0, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, 0),\n+\t   z0 = svldnt1_vnum (p0, x0, 0))\n+\n+/*\n+** ldnt1_vnum_bf16_1:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, 1),\n+\t   z0 = svldnt1_vnum (p0, x0, 1))\n+\n+/*\n+** ldnt1_vnum_bf16_7:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_7, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, 7),\n+\t   z0 = svldnt1_vnum (p0, x0, 7))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldnt1_vnum_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, 8),\n+\t   z0 = svldnt1_vnum (p0, x0, 8))\n+\n+/*\n+** ldnt1_vnum_bf16_m1:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, -1),\n+\t   z0 = svldnt1_vnum (p0, x0, -1))\n+\n+/*\n+** ldnt1_vnum_bf16_m8:\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, -8),\n+\t   z0 = svldnt1_vnum (p0, x0, -8))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** ldnt1_vnum_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tldnt1h\tz0\\.h, p0/z, \\[x0\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, -9),\n+\t   z0 = svldnt1_vnum (p0, x0, -9))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** ldnt1_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tldnt1h\tz0\\.h, p0/z, \\[\\2\\]\n+**\tret\n+*/\n+TEST_LOAD (ldnt1_vnum_bf16_x1, svbfloat16_t, bfloat16_t,\n+\t   z0 = svldnt1_vnum_bf16 (p0, x0, x1),\n+\t   z0 = svldnt1_vnum (p0, x0, x1))"}, {"sha": "cd91ff48d5b00897fc2ea711b808a926ab199dc3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/len_bf16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flen_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flen_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Flen_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** len_x0_bf16:\n+**\tcnth\tx0\n+**\tret\n+*/\n+TEST_REDUCTION_X (len_x0_bf16, uint64_t, svbfloat16_t,\n+\t\t  x0 = svlen_bf16 (z0),\n+\t\t  x0 = svlen (z0))"}, {"sha": "2d2c2a714b9c1a13b0d8b590e66538f28ac5d194", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_bf16.c", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,207 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** reinterpret_bf16_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_bf16_tied1, svbfloat16_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_bf16_bf16 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_bf16_untied, svbfloat16_t, svbfloat16_t,\n+\t     z0 = svreinterpret_bf16_bf16 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_f16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_f16_tied1, svbfloat16_t, svfloat16_t,\n+\t\t z0_res = svreinterpret_bf16_f16 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_f16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_f16_untied, svbfloat16_t, svfloat16_t,\n+\t     z0 = svreinterpret_bf16_f16 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_f32_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_f32_tied1, svbfloat16_t, svfloat32_t,\n+\t\t z0_res = svreinterpret_bf16_f32 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_f32_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_f32_untied, svbfloat16_t, svfloat32_t,\n+\t     z0 = svreinterpret_bf16_f32 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_f64_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_f64_tied1, svbfloat16_t, svfloat64_t,\n+\t\t z0_res = svreinterpret_bf16_f64 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_f64_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_f64_untied, svbfloat16_t, svfloat64_t,\n+\t     z0 = svreinterpret_bf16_f64 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_s8_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_s8_tied1, svbfloat16_t, svint8_t,\n+\t\t z0_res = svreinterpret_bf16_s8 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_s8_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_s8_untied, svbfloat16_t, svint8_t,\n+\t     z0 = svreinterpret_bf16_s8 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_s16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_s16_tied1, svbfloat16_t, svint16_t,\n+\t\t z0_res = svreinterpret_bf16_s16 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_s16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_s16_untied, svbfloat16_t, svint16_t,\n+\t     z0 = svreinterpret_bf16_s16 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_s32_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_s32_tied1, svbfloat16_t, svint32_t,\n+\t\t z0_res = svreinterpret_bf16_s32 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_s32_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_s32_untied, svbfloat16_t, svint32_t,\n+\t     z0 = svreinterpret_bf16_s32 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_s64_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_s64_tied1, svbfloat16_t, svint64_t,\n+\t\t z0_res = svreinterpret_bf16_s64 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_s64_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_s64_untied, svbfloat16_t, svint64_t,\n+\t     z0 = svreinterpret_bf16_s64 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_u8_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_u8_tied1, svbfloat16_t, svuint8_t,\n+\t\t z0_res = svreinterpret_bf16_u8 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_u8_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_u8_untied, svbfloat16_t, svuint8_t,\n+\t     z0 = svreinterpret_bf16_u8 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_u16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_u16_tied1, svbfloat16_t, svuint16_t,\n+\t\t z0_res = svreinterpret_bf16_u16 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_u16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_u16_untied, svbfloat16_t, svuint16_t,\n+\t     z0 = svreinterpret_bf16_u16 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_u32_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_u32_tied1, svbfloat16_t, svuint32_t,\n+\t\t z0_res = svreinterpret_bf16_u32 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_u32_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_u32_untied, svbfloat16_t, svuint32_t,\n+\t     z0 = svreinterpret_bf16_u32 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))\n+\n+/*\n+** reinterpret_bf16_u64_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_bf16_u64_tied1, svbfloat16_t, svuint64_t,\n+\t\t z0_res = svreinterpret_bf16_u64 (z0),\n+\t\t z0_res = svreinterpret_bf16 (z0))\n+\n+/*\n+** reinterpret_bf16_u64_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_bf16_u64_untied, svbfloat16_t, svuint64_t,\n+\t     z0 = svreinterpret_bf16_u64 (z4),\n+\t     z0 = svreinterpret_bf16 (z4))"}, {"sha": "60705e6287987cd82b29e3c5f93a64a8e97f081f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_f16.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_f16_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_f16_bf16_tied1, svfloat16_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_f16_bf16 (z0),\n+\t\t z0_res = svreinterpret_f16 (z0))\n+\n+/*\n+** reinterpret_f16_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_f16_bf16_untied, svfloat16_t, svbfloat16_t,\n+\t     z0 = svreinterpret_f16_bf16 (z4),\n+\t     z0 = svreinterpret_f16 (z4))\n+\n /*\n ** reinterpret_f16_f16_tied1:\n **\tret"}, {"sha": "06fc46f25de620a31c3df69479b830d872c6b5b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_f32.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f32.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_f32_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_f32_bf16_tied1, svfloat32_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_f32_bf16 (z0),\n+\t\t z0_res = svreinterpret_f32 (z0))\n+\n+/*\n+** reinterpret_f32_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_f32_bf16_untied, svfloat32_t, svbfloat16_t,\n+\t     z0 = svreinterpret_f32_bf16 (z4),\n+\t     z0 = svreinterpret_f32 (z4))\n+\n /*\n ** reinterpret_f32_f16_tied1:\n **\tret"}, {"sha": "003ee3fe220c9c37ac189d3654dde59e17ce9b04", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_f64.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_f64.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_f64_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_f64_bf16_tied1, svfloat64_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_f64_bf16 (z0),\n+\t\t z0_res = svreinterpret_f64 (z0))\n+\n+/*\n+** reinterpret_f64_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_f64_bf16_untied, svfloat64_t, svbfloat16_t,\n+\t     z0 = svreinterpret_f64_bf16 (z4),\n+\t     z0 = svreinterpret_f64 (z4))\n+\n /*\n ** reinterpret_f64_f16_tied1:\n **\tret"}, {"sha": "d62817c2cac1b5d586a148c101f60454bf28ffce", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_s16.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_s16_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_s16_bf16_tied1, svint16_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_s16_bf16 (z0),\n+\t\t z0_res = svreinterpret_s16 (z0))\n+\n+/*\n+** reinterpret_s16_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_s16_bf16_untied, svint16_t, svbfloat16_t,\n+\t     z0 = svreinterpret_s16_bf16 (z4),\n+\t     z0 = svreinterpret_s16 (z4))\n+\n /*\n ** reinterpret_s16_f16_tied1:\n **\tret"}, {"sha": "e1068f244ede843adf066212a690d4465b3af6f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_s32.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s32.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_s32_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_s32_bf16_tied1, svint32_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_s32_bf16 (z0),\n+\t\t z0_res = svreinterpret_s32 (z0))\n+\n+/*\n+** reinterpret_s32_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_s32_bf16_untied, svint32_t, svbfloat16_t,\n+\t     z0 = svreinterpret_s32_bf16 (z4),\n+\t     z0 = svreinterpret_s32 (z4))\n+\n /*\n ** reinterpret_s32_f16_tied1:\n **\tret"}, {"sha": "cada7533c53dde358417819a3a181575a0752cef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_s64.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s64.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_s64_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_s64_bf16_tied1, svint64_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_s64_bf16 (z0),\n+\t\t z0_res = svreinterpret_s64 (z0))\n+\n+/*\n+** reinterpret_s64_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_s64_bf16_untied, svint64_t, svbfloat16_t,\n+\t     z0 = svreinterpret_s64_bf16 (z4),\n+\t     z0 = svreinterpret_s64 (z4))\n+\n /*\n ** reinterpret_s64_f16_tied1:\n **\tret"}, {"sha": "23a40d0bab703bc594abcf68d35e5ab5b06811f0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_s8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_s8.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_s8_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_s8_bf16_tied1, svint8_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_s8_bf16 (z0),\n+\t\t z0_res = svreinterpret_s8 (z0))\n+\n+/*\n+** reinterpret_s8_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_s8_bf16_untied, svint8_t, svbfloat16_t,\n+\t     z0 = svreinterpret_s8_bf16 (z4),\n+\t     z0 = svreinterpret_s8 (z4))\n+\n /*\n ** reinterpret_s8_f16_tied1:\n **\tret"}, {"sha": "48e8ecaff441abe4bae532c36c264279a9cce80a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_u16.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_u16_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_u16_bf16_tied1, svuint16_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_u16_bf16 (z0),\n+\t\t z0_res = svreinterpret_u16 (z0))\n+\n+/*\n+** reinterpret_u16_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_u16_bf16_untied, svuint16_t, svbfloat16_t,\n+\t     z0 = svreinterpret_u16_bf16 (z4),\n+\t     z0 = svreinterpret_u16 (z4))\n+\n /*\n ** reinterpret_u16_f16_tied1:\n **\tret"}, {"sha": "1d4e857120ec455fb9f36a8c90a07d368b0ad090", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_u32.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u32.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_u32_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_u32_bf16_tied1, svuint32_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_u32_bf16 (z0),\n+\t\t z0_res = svreinterpret_u32 (z0))\n+\n+/*\n+** reinterpret_u32_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_u32_bf16_untied, svuint32_t, svbfloat16_t,\n+\t     z0 = svreinterpret_u32_bf16 (z4),\n+\t     z0 = svreinterpret_u32 (z4))\n+\n /*\n ** reinterpret_u32_f16_tied1:\n **\tret"}, {"sha": "07af69dce8daa45be089ebb3b7f41c6b32768021", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_u64.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u64.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_u64_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_u64_bf16_tied1, svuint64_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_u64_bf16 (z0),\n+\t\t z0_res = svreinterpret_u64 (z0))\n+\n+/*\n+** reinterpret_u64_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_u64_bf16_untied, svuint64_t, svbfloat16_t,\n+\t     z0 = svreinterpret_u64_bf16 (z4),\n+\t     z0 = svreinterpret_u64 (z4))\n+\n /*\n ** reinterpret_u64_f16_tied1:\n **\tret"}, {"sha": "a4c7f4c8d2168ea87ffa5c7e4305d255b610b55a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/reinterpret_u8.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Freinterpret_u8.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,23 @@\n \n #include \"test_sve_acle.h\"\n \n+/*\n+** reinterpret_u8_bf16_tied1:\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (reinterpret_u8_bf16_tied1, svuint8_t, svbfloat16_t,\n+\t\t z0_res = svreinterpret_u8_bf16 (z0),\n+\t\t z0_res = svreinterpret_u8 (z0))\n+\n+/*\n+** reinterpret_u8_bf16_untied:\n+**\tmov\tz0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (reinterpret_u8_bf16_untied, svuint8_t, svbfloat16_t,\n+\t     z0 = svreinterpret_u8_bf16 (z4),\n+\t     z0 = svreinterpret_u8 (z4))\n+\n /*\n ** reinterpret_u8_f16_tied1:\n **\tret"}, {"sha": "fe587d42c495f22d6bda77f4903417b1e49bb793", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/rev_bf16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Frev_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Frev_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Frev_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** rev_bf16_tied1:\n+**\trev\tz0\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (rev_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svrev_bf16 (z0),\n+\t\tz0 = svrev (z0))\n+\n+/*\n+** rev_bf16_untied:\n+**\trev\tz0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (rev_bf16_untied, svbfloat16_t,\n+\t\tz0 = svrev_bf16 (z1),\n+\t\tz0 = svrev (z1))"}, {"sha": "44636d8f8722816d394e5cae5094eba695328dc2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/sel_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsel_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsel_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsel_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** sel_bf16_tied1:\n+**\tsel\tz0\\.h, p0, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (sel_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svsel_bf16 (p0, z0, z1),\n+\t\tz0 = svsel (p0, z0, z1))\n+\n+/*\n+** sel_bf16_tied2:\n+**\tsel\tz0\\.h, p0, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (sel_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svsel_bf16 (p0, z1, z0),\n+\t\tz0 = svsel (p0, z1, z0))\n+\n+/*\n+** sel_bf16_untied:\n+**\tsel\tz0\\.h, p0, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (sel_bf16_untied, svbfloat16_t,\n+\t\tz0 = svsel_bf16 (p0, z1, z2),\n+\t\tz0 = svsel (p0, z1, z2))"}, {"sha": "b160a2517600135445ac3235eb6fc2f5a3f70c2a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/set2_bf16.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** set2_bf16_z24_0:\n+**\tmov\tz25\\.d, z5\\.d\n+**\tmov\tz24\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set2_bf16_z24_0, svbfloat16x2_t, svbfloat16_t,\n+\t  z24 = svset2_bf16 (z4, 0, z0),\n+\t  z24 = svset2 (z4, 0, z0))\n+\n+/*\n+** set2_bf16_z24_1:\n+**\tmov\tz24\\.d, z4\\.d\n+**\tmov\tz25\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set2_bf16_z24_1, svbfloat16x2_t, svbfloat16_t,\n+\t  z24 = svset2_bf16 (z4, 1, z0),\n+\t  z24 = svset2 (z4, 1, z0))\n+\n+/*\n+** set2_bf16_z4_0:\n+**\tmov\tz4\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set2_bf16_z4_0, svbfloat16x2_t, svbfloat16_t,\n+\t  z4 = svset2_bf16 (z4, 0, z0),\n+\t  z4 = svset2 (z4, 0, z0))\n+\n+/*\n+** set2_bf16_z4_1:\n+**\tmov\tz5\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set2_bf16_z4_1, svbfloat16x2_t, svbfloat16_t,\n+\t  z4 = svset2_bf16 (z4, 1, z0),\n+\t  z4 = svset2 (z4, 1, z0))"}, {"sha": "4e0707d092249eab8059b23c9b47000c8fcf7383", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/set3_bf16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset3_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset3_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset3_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** set3_bf16_z24_0:\n+**\tmov\tz25\\.d, z5\\.d\n+**\tmov\tz26\\.d, z6\\.d\n+**\tmov\tz24\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set3_bf16_z24_0, svbfloat16x3_t, svbfloat16_t,\n+\t  z24 = svset3_bf16 (z4, 0, z0),\n+\t  z24 = svset3 (z4, 0, z0))\n+\n+/*\n+** set3_bf16_z24_1:\n+**\tmov\tz24\\.d, z4\\.d\n+**\tmov\tz26\\.d, z6\\.d\n+**\tmov\tz25\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set3_bf16_z24_1, svbfloat16x3_t, svbfloat16_t,\n+\t  z24 = svset3_bf16 (z4, 1, z0),\n+\t  z24 = svset3 (z4, 1, z0))\n+\n+/*\n+** set3_bf16_z24_2:\n+**\tmov\tz24\\.d, z4\\.d\n+**\tmov\tz25\\.d, z5\\.d\n+**\tmov\tz26\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set3_bf16_z24_2, svbfloat16x3_t, svbfloat16_t,\n+\t  z24 = svset3_bf16 (z4, 2, z0),\n+\t  z24 = svset3 (z4, 2, z0))\n+\n+/*\n+** set3_bf16_z4_0:\n+**\tmov\tz4\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set3_bf16_z4_0, svbfloat16x3_t, svbfloat16_t,\n+\t  z4 = svset3_bf16 (z4, 0, z0),\n+\t  z4 = svset3 (z4, 0, z0))\n+\n+/*\n+** set3_bf16_z4_1:\n+**\tmov\tz5\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set3_bf16_z4_1, svbfloat16x3_t, svbfloat16_t,\n+\t  z4 = svset3_bf16 (z4, 1, z0),\n+\t  z4 = svset3 (z4, 1, z0))\n+\n+/*\n+** set3_bf16_z4_2:\n+**\tmov\tz6\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set3_bf16_z4_2, svbfloat16x3_t, svbfloat16_t,\n+\t  z4 = svset3_bf16 (z4, 2, z0),\n+\t  z4 = svset3 (z4, 2, z0))"}, {"sha": "4e26c11173f7eaab6a5aa3c10f356475d3da37d8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/set4_bf16.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset4_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset4_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fset4_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,87 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** set4_bf16_z24_0:\n+**\tmov\tz25\\.d, z5\\.d\n+**\tmov\tz26\\.d, z6\\.d\n+**\tmov\tz27\\.d, z7\\.d\n+**\tmov\tz24\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z24_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z24 = svset4_bf16 (z4, 0, z0),\n+\t  z24 = svset4 (z4, 0, z0))\n+\n+/*\n+** set4_bf16_z24_1:\n+**\tmov\tz24\\.d, z4\\.d\n+**\tmov\tz26\\.d, z6\\.d\n+**\tmov\tz27\\.d, z7\\.d\n+**\tmov\tz25\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z24_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z24 = svset4_bf16 (z4, 1, z0),\n+\t  z24 = svset4 (z4, 1, z0))\n+\n+/*\n+** set4_bf16_z24_2:\n+**\tmov\tz24\\.d, z4\\.d\n+**\tmov\tz25\\.d, z5\\.d\n+**\tmov\tz27\\.d, z7\\.d\n+**\tmov\tz26\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z24_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z24 = svset4_bf16 (z4, 2, z0),\n+\t  z24 = svset4 (z4, 2, z0))\n+\n+/*\n+** set4_bf16_z24_3:\n+**\tmov\tz24\\.d, z4\\.d\n+**\tmov\tz25\\.d, z5\\.d\n+**\tmov\tz26\\.d, z6\\.d\n+**\tmov\tz27\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z24_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z24 = svset4_bf16 (z4, 3, z0),\n+\t  z24 = svset4 (z4, 3, z0))\n+\n+/*\n+** set4_bf16_z4_0:\n+**\tmov\tz4\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z4_0, svbfloat16x4_t, svbfloat16_t,\n+\t  z4 = svset4_bf16 (z4, 0, z0),\n+\t  z4 = svset4 (z4, 0, z0))\n+\n+/*\n+** set4_bf16_z4_1:\n+**\tmov\tz5\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z4_1, svbfloat16x4_t, svbfloat16_t,\n+\t  z4 = svset4_bf16 (z4, 1, z0),\n+\t  z4 = svset4 (z4, 1, z0))\n+\n+/*\n+** set4_bf16_z4_2:\n+**\tmov\tz6\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z4_2, svbfloat16x4_t, svbfloat16_t,\n+\t  z4 = svset4_bf16 (z4, 2, z0),\n+\t  z4 = svset4 (z4, 2, z0))\n+\n+/*\n+** set4_bf16_z4_3:\n+**\tmov\tz7\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_SET (set4_bf16_z4_3, svbfloat16x4_t, svbfloat16_t,\n+\t  z4 = svset4_bf16 (z4, 3, z0),\n+\t  z4 = svset4 (z4, 3, z0))"}, {"sha": "3d2dbf20d4e855fdfaf100bd110cc25db49a9c43", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/splice_bf16.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsplice_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsplice_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fsplice_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** splice_bf16_tied1:\n+**\tsplice\tz0\\.h, p0, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (splice_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svsplice_bf16 (p0, z0, z1),\n+\t\tz0 = svsplice (p0, z0, z1))\n+\n+/*\n+** splice_bf16_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsplice\tz0\\.h, p0, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (splice_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svsplice_bf16 (p0, z1, z0),\n+\t\tz0 = svsplice (p0, z1, z0))\n+\n+/*\n+** splice_bf16_untied:\n+**\tmovprfx\tz0, z1\n+**\tsplice\tz0\\.h, p0, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (splice_bf16_untied, svbfloat16_t,\n+\t\tz0 = svsplice_bf16 (p0, z1, z2),\n+\t\tz0 = svsplice (p0, z1, z2))"}, {"sha": "ec3dbe3180884cd0bc91c68e883c7f27ae217240", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/st1_bf16.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** st1_bf16_base:\n+**\tst1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_base, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0, z0),\n+\t    svst1 (p0, x0, z0))\n+\n+/*\n+** st1_bf16_index:\n+**\tst1h\tz0\\.h, p0, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_index, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 + x1, z0),\n+\t    svst1 (p0, x0 + x1, z0))\n+\n+/*\n+** st1_bf16_1:\n+**\tst1h\tz0\\.h, p0, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_1, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 + svcnth (), z0),\n+\t    svst1 (p0, x0 + svcnth (), z0))\n+\n+/*\n+** st1_bf16_7:\n+**\tst1h\tz0\\.h, p0, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_7, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 + svcnth () * 7, z0),\n+\t    svst1 (p0, x0 + svcnth () * 7, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st1_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tst1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_8, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 + svcnth () * 8, z0),\n+\t    svst1 (p0, x0 + svcnth () * 8, z0))\n+\n+/*\n+** st1_bf16_m1:\n+**\tst1h\tz0\\.h, p0, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 - svcnth (), z0),\n+\t    svst1 (p0, x0 - svcnth (), z0))\n+\n+/*\n+** st1_bf16_m8:\n+**\tst1h\tz0\\.h, p0, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 - svcnth () * 8, z0),\n+\t    svst1 (p0, x0 - svcnth () * 8, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st1_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tst1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st1_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t    svst1_bf16 (p0, x0 - svcnth () * 9, z0),\n+\t    svst1 (p0, x0 - svcnth () * 9, z0))\n+\n+/*\n+** st1_vnum_bf16_0:\n+**\tst1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_0, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, 0, z0),\n+\t    svst1_vnum (p0, x0, 0, z0))\n+\n+/*\n+** st1_vnum_bf16_1:\n+**\tst1h\tz0\\.h, p0, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_1, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, 1, z0),\n+\t    svst1_vnum (p0, x0, 1, z0))\n+\n+/*\n+** st1_vnum_bf16_7:\n+**\tst1h\tz0\\.h, p0, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_7, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, 7, z0),\n+\t    svst1_vnum (p0, x0, 7, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st1_vnum_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tst1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_8, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, 8, z0),\n+\t    svst1_vnum (p0, x0, 8, z0))\n+\n+/*\n+** st1_vnum_bf16_m1:\n+**\tst1h\tz0\\.h, p0, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, -1, z0),\n+\t    svst1_vnum (p0, x0, -1, z0))\n+\n+/*\n+** st1_vnum_bf16_m8:\n+**\tst1h\tz0\\.h, p0, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, -8, z0),\n+\t    svst1_vnum (p0, x0, -8, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st1_vnum_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tst1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, -9, z0),\n+\t    svst1_vnum (p0, x0, -9, z0))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** st1_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tst1h\tz0\\.h, p0, \\[\\2\\]\n+**\tret\n+*/\n+TEST_STORE (st1_vnum_bf16_x1, svbfloat16_t, bfloat16_t,\n+\t    svst1_vnum_bf16 (p0, x0, x1, z0),\n+\t    svst1_vnum (p0, x0, x1, z0))"}, {"sha": "a4a57af087e0747aea945fda83f7c246671d1d52", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/st2_bf16.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,200 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** st2_bf16_base:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_base, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0, z0),\n+\t    svst2 (p0, x0, z0))\n+\n+/*\n+** st2_bf16_index:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_index, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 + x1, z0),\n+\t    svst2 (p0, x0 + x1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st2_bf16_1:\n+**\tincb\tx0\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_1, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 + svcnth (), z0),\n+\t    svst2 (p0, x0 + svcnth (), z0))\n+\n+/*\n+** st2_bf16_2:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #2, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_2, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 + svcnth () * 2, z0),\n+\t    svst2 (p0, x0 + svcnth () * 2, z0))\n+\n+/*\n+** st2_bf16_14:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #14, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_14, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 + svcnth () * 14, z0),\n+\t    svst2 (p0, x0 + svcnth () * 14, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st2_bf16_16:\n+**\tincb\tx0, all, mul #16\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_16, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 + svcnth () * 16, z0),\n+\t    svst2 (p0, x0 + svcnth () * 16, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st2_bf16_m1:\n+**\tdecb\tx0\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_m1, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 - svcnth (), z0),\n+\t    svst2 (p0, x0 - svcnth (), z0))\n+\n+/*\n+** st2_bf16_m2:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #-2, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_m2, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 - svcnth () * 2, z0),\n+\t    svst2 (p0, x0 - svcnth () * 2, z0))\n+\n+/*\n+** st2_bf16_m16:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #-16, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_m16, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 - svcnth () * 16, z0),\n+\t    svst2 (p0, x0 - svcnth () * 16, z0))\n+\n+/*\n+** st2_bf16_m18:\n+**\taddvl\t(x[0-9]+), x0, #-18\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[\\1\\]\n+**\tret\n+*/\n+TEST_STORE (st2_bf16_m18, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_bf16 (p0, x0 - svcnth () * 18, z0),\n+\t    svst2 (p0, x0 - svcnth () * 18, z0))\n+\n+/*\n+** st2_vnum_bf16_0:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_0, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, 0, z0),\n+\t    svst2_vnum (p0, x0, 0, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st2_vnum_bf16_1:\n+**\tincb\tx0\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_1, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, 1, z0),\n+\t    svst2_vnum (p0, x0, 1, z0))\n+\n+/*\n+** st2_vnum_bf16_2:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #2, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_2, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, 2, z0),\n+\t    svst2_vnum (p0, x0, 2, z0))\n+\n+/*\n+** st2_vnum_bf16_14:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #14, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_14, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, 14, z0),\n+\t    svst2_vnum (p0, x0, 14, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st2_vnum_bf16_16:\n+**\tincb\tx0, all, mul #16\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_16, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, 16, z0),\n+\t    svst2_vnum (p0, x0, 16, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st2_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_m1, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, -1, z0),\n+\t    svst2_vnum (p0, x0, -1, z0))\n+\n+/*\n+** st2_vnum_bf16_m2:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #-2, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_m2, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, -2, z0),\n+\t    svst2_vnum (p0, x0, -2, z0))\n+\n+/*\n+** st2_vnum_bf16_m16:\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[x0, #-16, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_m16, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, -16, z0),\n+\t    svst2_vnum (p0, x0, -16, z0))\n+\n+/*\n+** st2_vnum_bf16_m18:\n+**\taddvl\t(x[0-9]+), x0, #-18\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[\\1\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_m18, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, -18, z0),\n+\t    svst2_vnum (p0, x0, -18, z0))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** st2_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tst2h\t{z0\\.h(?: - |, )z1\\.h}, p0, \\[\\2\\]\n+**\tret\n+*/\n+TEST_STORE (st2_vnum_bf16_x1, svbfloat16x2_t, bfloat16_t,\n+\t    svst2_vnum_bf16 (p0, x0, x1, z0),\n+\t    svst2_vnum (p0, x0, x1, z0))"}, {"sha": "2f921687c59475da5dd26978f686a573361231c3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/st3_bf16.c", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst3_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst3_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst3_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,242 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** st3_bf16_base:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_base, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0, z0),\n+\t    svst3 (p0, x0, z0))\n+\n+/*\n+** st3_bf16_index:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_index, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 + x1, z0),\n+\t    svst3 (p0, x0 + x1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_bf16_1:\n+**\tincb\tx0\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_1, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 + svcnth (), z0),\n+\t    svst3 (p0, x0 + svcnth (), z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_2, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 + svcnth () * 2, z0),\n+\t    svst3 (p0, x0 + svcnth () * 2, z0))\n+\n+/*\n+** st3_bf16_3:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #3, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_3, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 + svcnth () * 3, z0),\n+\t    svst3 (p0, x0 + svcnth () * 3, z0))\n+\n+/*\n+** st3_bf16_21:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #21, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_21, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 + svcnth () * 21, z0),\n+\t    svst3 (p0, x0 + svcnth () * 21, z0))\n+\n+/*\n+** st3_bf16_24:\n+**\taddvl\t(x[0-9]+), x0, #24\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[\\1\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_24, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 + svcnth () * 24, z0),\n+\t    svst3 (p0, x0 + svcnth () * 24, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_bf16_m1:\n+**\tdecb\tx0\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_m1, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 - svcnth (), z0),\n+\t    svst3 (p0, x0 - svcnth (), z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_m2, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 - svcnth () * 2, z0),\n+\t    svst3 (p0, x0 - svcnth () * 2, z0))\n+\n+/*\n+** st3_bf16_m3:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #-3, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_m3, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 - svcnth () * 3, z0),\n+\t    svst3 (p0, x0 - svcnth () * 3, z0))\n+\n+/*\n+** st3_bf16_m24:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #-24, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_m24, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 - svcnth () * 24, z0),\n+\t    svst3 (p0, x0 - svcnth () * 24, z0))\n+\n+/*\n+** st3_bf16_m27:\n+**\taddvl\t(x[0-9]+), x0, #-27\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[\\1\\]\n+**\tret\n+*/\n+TEST_STORE (st3_bf16_m27, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_bf16 (p0, x0 - svcnth () * 27, z0),\n+\t    svst3 (p0, x0 - svcnth () * 27, z0))\n+\n+/*\n+** st3_vnum_bf16_0:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_0, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, 0, z0),\n+\t    svst3_vnum (p0, x0, 0, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_vnum_bf16_1:\n+**\tincb\tx0\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_1, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, 1, z0),\n+\t    svst3_vnum (p0, x0, 1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_vnum_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_2, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, 2, z0),\n+\t    svst3_vnum (p0, x0, 2, z0))\n+\n+/*\n+** st3_vnum_bf16_3:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #3, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_3, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, 3, z0),\n+\t    svst3_vnum (p0, x0, 3, z0))\n+\n+/*\n+** st3_vnum_bf16_21:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #21, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_21, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, 21, z0),\n+\t    svst3_vnum (p0, x0, 21, z0))\n+\n+/*\n+** st3_vnum_bf16_24:\n+**\taddvl\t(x[0-9]+), x0, #24\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[\\1\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_24, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, 24, z0),\n+\t    svst3_vnum (p0, x0, 24, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_m1, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, -1, z0),\n+\t    svst3_vnum (p0, x0, -1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st3_vnum_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_m2, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, -2, z0),\n+\t    svst3_vnum (p0, x0, -2, z0))\n+\n+/*\n+** st3_vnum_bf16_m3:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #-3, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_m3, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, -3, z0),\n+\t    svst3_vnum (p0, x0, -3, z0))\n+\n+/*\n+** st3_vnum_bf16_m24:\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[x0, #-24, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_m24, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, -24, z0),\n+\t    svst3_vnum (p0, x0, -24, z0))\n+\n+/*\n+** st3_vnum_bf16_m27:\n+**\taddvl\t(x[0-9]+), x0, #-27\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[\\1\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_m27, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, -27, z0),\n+\t    svst3_vnum (p0, x0, -27, z0))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** st3_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tst3h\t{z0\\.h - z2\\.h}, p0, \\[\\2\\]\n+**\tret\n+*/\n+TEST_STORE (st3_vnum_bf16_x1, svbfloat16x3_t, bfloat16_t,\n+\t    svst3_vnum_bf16 (p0, x0, x1, z0),\n+\t    svst3_vnum (p0, x0, x1, z0))"}, {"sha": "b8d9f4afae49b3c44930e8962e83596acab8e6fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/st4_bf16.c", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst4_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst4_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fst4_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,286 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** st4_bf16_base:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_base, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0, z0),\n+\t    svst4 (p0, x0, z0))\n+\n+/*\n+** st4_bf16_index:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_index, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + x1, z0),\n+\t    svst4 (p0, x0 + x1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_bf16_1:\n+**\tincb\tx0\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_1, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + svcnth (), z0),\n+\t    svst4 (p0, x0 + svcnth (), z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_2, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + svcnth () * 2, z0),\n+\t    svst4 (p0, x0 + svcnth () * 2, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_bf16_3:\n+**\tincb\tx0, all, mul #3\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_3, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + svcnth () * 3, z0),\n+\t    svst4 (p0, x0 + svcnth () * 3, z0))\n+\n+/*\n+** st4_bf16_4:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #4, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_4, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + svcnth () * 4, z0),\n+\t    svst4 (p0, x0 + svcnth () * 4, z0))\n+\n+/*\n+** st4_bf16_28:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #28, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_28, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + svcnth () * 28, z0),\n+\t    svst4 (p0, x0 + svcnth () * 28, z0))\n+\n+/*\n+** st4_bf16_32:\n+**\t[^{]*\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_32, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 + svcnth () * 32, z0),\n+\t    svst4 (p0, x0 + svcnth () * 32, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_bf16_m1:\n+**\tdecb\tx0\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_m1, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 - svcnth (), z0),\n+\t    svst4 (p0, x0 - svcnth (), z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_m2, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 - svcnth () * 2, z0),\n+\t    svst4 (p0, x0 - svcnth () * 2, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_bf16_m3:\n+**\tdecb\tx0, all, mul #3\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_m3, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 - svcnth () * 3, z0),\n+\t    svst4 (p0, x0 - svcnth () * 3, z0))\n+\n+/*\n+** st4_bf16_m4:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #-4, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_m4, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 - svcnth () * 4, z0),\n+\t    svst4 (p0, x0 - svcnth () * 4, z0))\n+\n+/*\n+** st4_bf16_m32:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_m32, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 - svcnth () * 32, z0),\n+\t    svst4 (p0, x0 - svcnth () * 32, z0))\n+\n+/*\n+** st4_bf16_m36:\n+**\t[^{]*\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_STORE (st4_bf16_m36, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_bf16 (p0, x0 - svcnth () * 36, z0),\n+\t    svst4 (p0, x0 - svcnth () * 36, z0))\n+\n+/*\n+** st4_vnum_bf16_0:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_0, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 0, z0),\n+\t    svst4_vnum (p0, x0, 0, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_vnum_bf16_1:\n+**\tincb\tx0\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_1, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 1, z0),\n+\t    svst4_vnum (p0, x0, 1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_vnum_bf16_2:\n+**\tincb\tx0, all, mul #2\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_2, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 2, z0),\n+\t    svst4_vnum (p0, x0, 2, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_vnum_bf16_3:\n+**\tincb\tx0, all, mul #3\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_3, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 3, z0),\n+\t    svst4_vnum (p0, x0, 3, z0))\n+\n+/*\n+** st4_vnum_bf16_4:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #4, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_4, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 4, z0),\n+\t    svst4_vnum (p0, x0, 4, z0))\n+\n+/*\n+** st4_vnum_bf16_28:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #28, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_28, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 28, z0),\n+\t    svst4_vnum (p0, x0, 28, z0))\n+\n+/*\n+** st4_vnum_bf16_32:\n+**\t[^{]*\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_32, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, 32, z0),\n+\t    svst4_vnum (p0, x0, 32, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_vnum_bf16_m1:\n+**\tdecb\tx0\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_m1, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, -1, z0),\n+\t    svst4_vnum (p0, x0, -1, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_vnum_bf16_m2:\n+**\tdecb\tx0, all, mul #2\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_m2, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, -2, z0),\n+\t    svst4_vnum (p0, x0, -2, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** st4_vnum_bf16_m3:\n+**\tdecb\tx0, all, mul #3\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_m3, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, -3, z0),\n+\t    svst4_vnum (p0, x0, -3, z0))\n+\n+/*\n+** st4_vnum_bf16_m4:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #-4, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_m4, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, -4, z0),\n+\t    svst4_vnum (p0, x0, -4, z0))\n+\n+/*\n+** st4_vnum_bf16_m32:\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_m32, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, -32, z0),\n+\t    svst4_vnum (p0, x0, -32, z0))\n+\n+/*\n+** st4_vnum_bf16_m36:\n+**\t[^{]*\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_m36, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, -36, z0),\n+\t    svst4_vnum (p0, x0, -36, z0))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** st4_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tst4h\t{z0\\.h - z3\\.h}, p0, \\[\\2\\]\n+**\tret\n+*/\n+TEST_STORE (st4_vnum_bf16_x1, svbfloat16x4_t, bfloat16_t,\n+\t    svst4_vnum_bf16 (p0, x0, x1, z0),\n+\t    svst4_vnum (p0, x0, x1, z0))"}, {"sha": "3c4d21f270bb6ab21d6d6774f7e367ec46d9c7db", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/stnt1_bf16.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fstnt1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fstnt1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fstnt1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,158 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** stnt1_bf16_base:\n+**\tstnt1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_base, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0, z0),\n+\t    svstnt1 (p0, x0, z0))\n+\n+/*\n+** stnt1_bf16_index:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, x1, lsl 1\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_index, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 + x1, z0),\n+\t    svstnt1 (p0, x0 + x1, z0))\n+\n+/*\n+** stnt1_bf16_1:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_1, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 + svcnth (), z0),\n+\t    svstnt1 (p0, x0 + svcnth (), z0))\n+\n+/*\n+** stnt1_bf16_7:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_7, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 + svcnth () * 7, z0),\n+\t    svstnt1 (p0, x0 + svcnth () * 7, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** stnt1_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tstnt1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_8, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 + svcnth () * 8, z0),\n+\t    svstnt1 (p0, x0 + svcnth () * 8, z0))\n+\n+/*\n+** stnt1_bf16_m1:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 - svcnth (), z0),\n+\t    svstnt1 (p0, x0 - svcnth (), z0))\n+\n+/*\n+** stnt1_bf16_m8:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 - svcnth () * 8, z0),\n+\t    svstnt1 (p0, x0 - svcnth () * 8, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** stnt1_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tstnt1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_bf16 (p0, x0 - svcnth () * 9, z0),\n+\t    svstnt1 (p0, x0 - svcnth () * 9, z0))\n+\n+/*\n+** stnt1_vnum_bf16_0:\n+**\tstnt1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_0, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, 0, z0),\n+\t    svstnt1_vnum (p0, x0, 0, z0))\n+\n+/*\n+** stnt1_vnum_bf16_1:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_1, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, 1, z0),\n+\t    svstnt1_vnum (p0, x0, 1, z0))\n+\n+/*\n+** stnt1_vnum_bf16_7:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #7, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_7, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, 7, z0),\n+\t    svstnt1_vnum (p0, x0, 7, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** stnt1_vnum_bf16_8:\n+**\tincb\tx0, all, mul #8\n+**\tstnt1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_8, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, 8, z0),\n+\t    svstnt1_vnum (p0, x0, 8, z0))\n+\n+/*\n+** stnt1_vnum_bf16_m1:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #-1, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_m1, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, -1, z0),\n+\t    svstnt1_vnum (p0, x0, -1, z0))\n+\n+/*\n+** stnt1_vnum_bf16_m8:\n+**\tstnt1h\tz0\\.h, p0, \\[x0, #-8, mul vl\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_m8, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, -8, z0),\n+\t    svstnt1_vnum (p0, x0, -8, z0))\n+\n+/* Moving the constant into a register would also be OK.  */\n+/*\n+** stnt1_vnum_bf16_m9:\n+**\tdecb\tx0, all, mul #9\n+**\tstnt1h\tz0\\.h, p0, \\[x0\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_m9, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, -9, z0),\n+\t    svstnt1_vnum (p0, x0, -9, z0))\n+\n+/* Using MUL to calculate an index would also be OK.  */\n+/*\n+** stnt1_vnum_bf16_x1:\n+**\tcntb\t(x[0-9]+)\n+**\tmadd\t(x[0-9]+), (x1, \\1|\\1, x1), x0\n+**\tstnt1h\tz0\\.h, p0, \\[\\2\\]\n+**\tret\n+*/\n+TEST_STORE (stnt1_vnum_bf16_x1, svbfloat16_t, bfloat16_t,\n+\t    svstnt1_vnum_bf16 (p0, x0, x1, z0),\n+\t    svstnt1_vnum (p0, x0, x1, z0))"}, {"sha": "8c077d11897928dc072a0ed3e3b6811ee94879c0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/tbl_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftbl_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftbl_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftbl_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** tbl_bf16_tied1:\n+**\ttbl\tz0\\.h, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (tbl_bf16_tied1, svbfloat16_t, svuint16_t,\n+\t     z0 = svtbl_bf16 (z0, z4),\n+\t     z0 = svtbl (z0, z4))\n+\n+/*\n+** tbl_bf16_tied2:\n+**\ttbl\tz0\\.h, z4\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (tbl_bf16_tied2, svbfloat16_t, svuint16_t,\n+\t\t z0_res = svtbl_bf16 (z4, z0),\n+\t\t z0_res = svtbl (z4, z0))\n+\n+/*\n+** tbl_bf16_untied:\n+**\ttbl\tz0\\.h, z1\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (tbl_bf16_untied, svbfloat16_t, svuint16_t,\n+\t     z0 = svtbl_bf16 (z1, z4),\n+\t     z0 = svtbl (z1, z4))"}, {"sha": "b04c7da4fe8793dfa33a468365a323a034643610", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1_bf16_tied1:\n+**\ttrn1\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svtrn1_bf16 (z0, z1),\n+\t\tz0 = svtrn1 (z0, z1))\n+\n+/*\n+** trn1_bf16_tied2:\n+**\ttrn1\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svtrn1_bf16 (z1, z0),\n+\t\tz0 = svtrn1 (z1, z0))\n+\n+/*\n+** trn1_bf16_untied:\n+**\ttrn1\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1_bf16_untied, svbfloat16_t,\n+\t\tz0 = svtrn1_bf16 (z1, z2),\n+\t\tz0 = svtrn1 (z1, z2))"}, {"sha": "f1810da9ec491a5910eae50d9e2979909a6e335d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn1q_bf16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn1q_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn1q_bf16_tied1:\n+**\ttrn1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svtrn1q_bf16 (z0, z1),\n+\t\tz0 = svtrn1q (z0, z1))\n+\n+/*\n+** trn1q_bf16_tied2:\n+**\ttrn1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svtrn1q_bf16 (z1, z0),\n+\t\tz0 = svtrn1q (z1, z0))\n+\n+/*\n+** trn1q_bf16_untied:\n+**\ttrn1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn1q_bf16_untied, svbfloat16_t,\n+\t\tz0 = svtrn1q_bf16 (z1, z2),\n+\t\tz0 = svtrn1q (z1, z2))"}, {"sha": "12028b0f6fd204b86d7bcbb8482b694902e66cd8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2_bf16_tied1:\n+**\ttrn2\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svtrn2_bf16 (z0, z1),\n+\t\tz0 = svtrn2 (z0, z1))\n+\n+/*\n+** trn2_bf16_tied2:\n+**\ttrn2\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svtrn2_bf16 (z1, z0),\n+\t\tz0 = svtrn2 (z1, z0))\n+\n+/*\n+** trn2_bf16_untied:\n+**\ttrn2\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2_bf16_untied, svbfloat16_t,\n+\t\tz0 = svtrn2_bf16 (z1, z2),\n+\t\tz0 = svtrn2 (z1, z2))"}, {"sha": "5623b54f035dd07a3c20ff5d9c0efe686b3cf3dc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/trn2q_bf16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Ftrn2q_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** trn2q_bf16_tied1:\n+**\ttrn2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svtrn2q_bf16 (z0, z1),\n+\t\tz0 = svtrn2q (z0, z1))\n+\n+/*\n+** trn2q_bf16_tied2:\n+**\ttrn2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svtrn2q_bf16 (z1, z0),\n+\t\tz0 = svtrn2q (z1, z0))\n+\n+/*\n+** trn2q_bf16_untied:\n+**\ttrn2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (trn2q_bf16_untied, svbfloat16_t,\n+\t\tz0 = svtrn2q_bf16 (z1, z2),\n+\t\tz0 = svtrn2q (z1, z2))"}, {"sha": "fe6c4c7c7d5c1fd537896bcd58a2d612370a2f24", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/undef2_1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef2_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -37,6 +37,13 @@ TEST_UNDEF (uint16, svuint16x2_t,\n TEST_UNDEF (float16, svfloat16x2_t,\n \t    z0 = svundef2_f16 ())\n \n+/*\n+** bfloat16:\n+**\tret\n+*/\n+TEST_UNDEF (bfloat16, svbfloat16x2_t,\n+\t    z0 = svundef2_bf16 ())\n+\n /*\n ** int32:\n **\tret"}, {"sha": "5c18c6317d18066ff66deea92162c09695241c89", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/undef3_1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef3_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -37,6 +37,13 @@ TEST_UNDEF (uint16, svuint16x3_t,\n TEST_UNDEF (float16, svfloat16x3_t,\n \t    z0 = svundef3_f16 ())\n \n+/*\n+** bfloat16:\n+**\tret\n+*/\n+TEST_UNDEF (bfloat16, svbfloat16x3_t,\n+\t    z0 = svundef3_bf16 ())\n+\n /*\n ** int32:\n **\tret"}, {"sha": "4d6b86b04b59e2e859aae5db5303347680dd466e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/undef4_1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef4_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef4_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef4_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -37,6 +37,13 @@ TEST_UNDEF (uint16, svuint16x4_t,\n TEST_UNDEF (float16, svfloat16x4_t,\n \t    z0 = svundef4_f16 ())\n \n+/*\n+** bfloat16:\n+**\tret\n+*/\n+TEST_UNDEF (bfloat16, svbfloat16x4_t,\n+\t    z0 = svundef4_bf16 ())\n+\n /*\n ** int32:\n **\tret"}, {"sha": "62873b6e1b3786b6a2b19cb28ba652dd0f170023", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/undef_1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fundef_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -37,6 +37,13 @@ TEST_UNDEF (uint16, svuint16_t,\n TEST_UNDEF (float16, svfloat16_t,\n \t    z0 = svundef_f16 ())\n \n+/*\n+** bfloat16:\n+**\tret\n+*/\n+TEST_UNDEF (bfloat16, svbfloat16_t,\n+\t    z0 = svundef_bf16 ())\n+\n /*\n ** int32:\n **\tret"}, {"sha": "19d43ed11223666263058e26d40bb1f200b424b1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1_bf16_tied1:\n+**\tuzp1\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svuzp1_bf16 (z0, z1),\n+\t\tz0 = svuzp1 (z0, z1))\n+\n+/*\n+** uzp1_bf16_tied2:\n+**\tuzp1\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svuzp1_bf16 (z1, z0),\n+\t\tz0 = svuzp1 (z1, z0))\n+\n+/*\n+** uzp1_bf16_untied:\n+**\tuzp1\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1_bf16_untied, svbfloat16_t,\n+\t\tz0 = svuzp1_bf16 (z1, z2),\n+\t\tz0 = svuzp1 (z1, z2))"}, {"sha": "30a19924167822da2cb4eb3d6ddf458d3e0a4c26", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp1q_bf16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp1q_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp1q_bf16_tied1:\n+**\tuzp1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svuzp1q_bf16 (z0, z1),\n+\t\tz0 = svuzp1q (z0, z1))\n+\n+/*\n+** uzp1q_bf16_tied2:\n+**\tuzp1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svuzp1q_bf16 (z1, z0),\n+\t\tz0 = svuzp1q (z1, z0))\n+\n+/*\n+** uzp1q_bf16_untied:\n+**\tuzp1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp1q_bf16_untied, svbfloat16_t,\n+\t\tz0 = svuzp1q_bf16 (z1, z2),\n+\t\tz0 = svuzp1q (z1, z2))"}, {"sha": "b5566bfdfae34733e586127287eaebc4b319a0e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2_bf16_tied1:\n+**\tuzp2\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svuzp2_bf16 (z0, z1),\n+\t\tz0 = svuzp2 (z0, z1))\n+\n+/*\n+** uzp2_bf16_tied2:\n+**\tuzp2\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svuzp2_bf16 (z1, z0),\n+\t\tz0 = svuzp2 (z1, z0))\n+\n+/*\n+** uzp2_bf16_untied:\n+**\tuzp2\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2_bf16_untied, svbfloat16_t,\n+\t\tz0 = svuzp2_bf16 (z1, z2),\n+\t\tz0 = svuzp2 (z1, z2))"}, {"sha": "bbac53a7acb017b33b68297732fb95d968bc43af", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/uzp2q_bf16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fuzp2q_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** uzp2q_bf16_tied1:\n+**\tuzp2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svuzp2q_bf16 (z0, z1),\n+\t\tz0 = svuzp2q (z0, z1))\n+\n+/*\n+** uzp2q_bf16_tied2:\n+**\tuzp2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svuzp2q_bf16 (z1, z0),\n+\t\tz0 = svuzp2q (z1, z0))\n+\n+/*\n+** uzp2q_bf16_untied:\n+**\tuzp2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (uzp2q_bf16_untied, svbfloat16_t,\n+\t\tz0 = svuzp2q_bf16 (z1, z2),\n+\t\tz0 = svuzp2q (z1, z2))"}, {"sha": "6017cde41ea42cfce87a5f7bcec05609ace3ea07", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1_bf16_tied1:\n+**\tzip1\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svzip1_bf16 (z0, z1),\n+\t\tz0 = svzip1 (z0, z1))\n+\n+/*\n+** zip1_bf16_tied2:\n+**\tzip1\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svzip1_bf16 (z1, z0),\n+\t\tz0 = svzip1 (z1, z0))\n+\n+/*\n+** zip1_bf16_untied:\n+**\tzip1\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1_bf16_untied, svbfloat16_t,\n+\t\tz0 = svzip1_bf16 (z1, z2),\n+\t\tz0 = svzip1 (z1, z2))"}, {"sha": "aabf7c0e1b65aa15b4060e0893b3bec0c68c7af9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip1q_bf16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip1q_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip1q_bf16_tied1:\n+**\tzip1\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svzip1q_bf16 (z0, z1),\n+\t\tz0 = svzip1q (z0, z1))\n+\n+/*\n+** zip1q_bf16_tied2:\n+**\tzip1\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svzip1q_bf16 (z1, z0),\n+\t\tz0 = svzip1q (z1, z0))\n+\n+/*\n+** zip1q_bf16_untied:\n+**\tzip1\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip1q_bf16_untied, svbfloat16_t,\n+\t\tz0 = svzip1q_bf16 (z1, z2),\n+\t\tz0 = svzip1q (z1, z2))"}, {"sha": "a9e0cfc934800d445e6b1d9a9961e1ea89200bc9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2_bf16_tied1:\n+**\tzip2\tz0\\.h, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svzip2_bf16 (z0, z1),\n+\t\tz0 = svzip2 (z0, z1))\n+\n+/*\n+** zip2_bf16_tied2:\n+**\tzip2\tz0\\.h, z1\\.h, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svzip2_bf16 (z1, z0),\n+\t\tz0 = svzip2 (z1, z0))\n+\n+/*\n+** zip2_bf16_untied:\n+**\tzip2\tz0\\.h, z1\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2_bf16_untied, svbfloat16_t,\n+\t\tz0 = svzip2_bf16 (z1, z2),\n+\t\tz0 = svzip2 (z1, z2))"}, {"sha": "6d79136cf8709a6ac10755c862670081d534cddd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/zip2q_bf16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fzip2q_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-require-effective-target aarch64_asm_f64mm_ok } */\n+/* { dg-additional-options \"-march=armv8.2-a+f64mm\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** zip2q_bf16_tied1:\n+**\tzip2\tz0\\.q, z0\\.q, z1\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_bf16_tied1, svbfloat16_t,\n+\t\tz0 = svzip2q_bf16 (z0, z1),\n+\t\tz0 = svzip2q (z0, z1))\n+\n+/*\n+** zip2q_bf16_tied2:\n+**\tzip2\tz0\\.q, z1\\.q, z0\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_bf16_tied2, svbfloat16_t,\n+\t\tz0 = svzip2q_bf16 (z1, z0),\n+\t\tz0 = svzip2q (z1, z0))\n+\n+/*\n+** zip2q_bf16_untied:\n+**\tzip2\tz0\\.q, z1\\.q, z2\\.q\n+**\tret\n+*/\n+TEST_UNIFORM_Z (zip2q_bf16_untied, svbfloat16_t,\n+\t\tz0 = svzip2q_bf16 (z1, z2),\n+\t\tz0 = svzip2q (z1, z2))"}, {"sha": "12ae76789481bfe733758a5a42f27f5ad3bb6c82", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -12,6 +12,7 @@ svuint8_t ret_u8 (void) { return svdup_u8 (0); }\n svuint16_t ret_u16 (void) { return svdup_u16 (0); }\n svuint32_t ret_u32 (void) { return svdup_u32 (0); }\n svuint64_t ret_u64 (void) { return svdup_u64 (0); }\n+svbfloat16_t ret_bf16 (void) { return svundef_bf16 (); }\n svfloat16_t ret_f16 (void) { return svdup_f16 (0); }\n svfloat32_t ret_f32 (void) { return svdup_f32 (0); }\n svfloat64_t ret_f64 (void) { return svdup_f64 (0); }\n@@ -24,6 +25,7 @@ svuint8x2_t ret_u8x2 (void) { return svundef2_u8 (); }\n svuint16x2_t ret_u16x2 (void) { return svundef2_u16 (); }\n svuint32x2_t ret_u32x2 (void) { return svundef2_u32 (); }\n svuint64x2_t ret_u64x2 (void) { return svundef2_u64 (); }\n+svbfloat16x2_t ret_bf16x2 (void) { return svundef2_bf16 (); }\n svfloat16x2_t ret_f16x2 (void) { return svundef2_f16 (); }\n svfloat32x2_t ret_f32x2 (void) { return svundef2_f32 (); }\n svfloat64x2_t ret_f64x2 (void) { return svundef2_f64 (); }\n@@ -36,6 +38,7 @@ svuint8x3_t ret_u8x3 (void) { return svundef3_u8 (); }\n svuint16x3_t ret_u16x3 (void) { return svundef3_u16 (); }\n svuint32x3_t ret_u32x3 (void) { return svundef3_u32 (); }\n svuint64x3_t ret_u64x3 (void) { return svundef3_u64 (); }\n+svbfloat16x3_t ret_bf16x3 (void) { return svundef3_bf16 (); }\n svfloat16x3_t ret_f16x3 (void) { return svundef3_f16 (); }\n svfloat32x3_t ret_f32x3 (void) { return svundef3_f32 (); }\n svfloat64x3_t ret_f64x3 (void) { return svundef3_f64 (); }\n@@ -48,6 +51,7 @@ svuint8x4_t ret_u8x4 (void) { return svundef4_u8 (); }\n svuint16x4_t ret_u16x4 (void) { return svundef4_u16 (); }\n svuint32x4_t ret_u32x4 (void) { return svundef4_u32 (); }\n svuint64x4_t ret_u64x4 (void) { return svundef4_u64 (); }\n+svbfloat16x4_t ret_bf16x4 (void) { return svundef4_bf16 (); }\n svfloat16x4_t ret_f16x4 (void) { return svundef4_f16 (); }\n svfloat32x4_t ret_f32x4 (void) { return svundef4_f32 (); }\n svfloat64x4_t ret_f64x4 (void) { return svundef4_f64 (); }\n@@ -62,6 +66,7 @@ svfloat64x4_t ret_f64x4 (void) { return svundef4_f64 (); }\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u64\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_bf16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f64\\n} } } */\n@@ -74,6 +79,7 @@ svfloat64x4_t ret_f64x4 (void) { return svundef4_f64 (); }\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u64x2\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_bf16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f64x2\\n} } } */\n@@ -87,6 +93,7 @@ svfloat64x4_t ret_f64x4 (void) { return svundef4_f64 (); }\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u64x3\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_bf16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f64x3\\n} } } */\n@@ -99,6 +106,7 @@ svfloat64x4_t ret_f64x4 (void) { return svundef4_f64 (); }\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u32x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_u64x4\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_bf16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f32x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tret_f64x4\\n} } } */"}, {"sha": "9f0741e3c266866189d1327582956d052f876ff2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_2.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_2.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -12,6 +12,7 @@ void fn_u8 (svuint8_t x) {}\n void fn_u16 (svuint16_t x) {}\n void fn_u32 (svuint32_t x) {}\n void fn_u64 (svuint64_t x) {}\n+void fn_bf16 (svbfloat16_t x) {}\n void fn_f16 (svfloat16_t x) {}\n void fn_f32 (svfloat32_t x) {}\n void fn_f64 (svfloat64_t x) {}\n@@ -24,6 +25,7 @@ void fn_u8x2 (svuint8x2_t x) {}\n void fn_u16x2 (svuint16x2_t x) {}\n void fn_u32x2 (svuint32x2_t x) {}\n void fn_u64x2 (svuint64x2_t x) {}\n+void fn_bf16x2 (svbfloat16x2_t x) {}\n void fn_f16x2 (svfloat16x2_t x) {}\n void fn_f32x2 (svfloat32x2_t x) {}\n void fn_f64x2 (svfloat64x2_t x) {}\n@@ -36,6 +38,7 @@ void fn_u8x3 (svuint8x3_t x) {}\n void fn_u16x3 (svuint16x3_t x) {}\n void fn_u32x3 (svuint32x3_t x) {}\n void fn_u64x3 (svuint64x3_t x) {}\n+void fn_bf16x3 (svbfloat16x3_t x) {}\n void fn_f16x3 (svfloat16x3_t x) {}\n void fn_f32x3 (svfloat32x3_t x) {}\n void fn_f64x3 (svfloat64x3_t x) {}\n@@ -48,6 +51,7 @@ void fn_u8x4 (svuint8x4_t x) {}\n void fn_u16x4 (svuint16x4_t x) {}\n void fn_u32x4 (svuint32x4_t x) {}\n void fn_u64x4 (svuint64x4_t x) {}\n+void fn_bf16x4 (svbfloat16x4_t x) {}\n void fn_f16x4 (svfloat16x4_t x) {}\n void fn_f32x4 (svfloat32x4_t x) {}\n void fn_f64x4 (svfloat64x4_t x) {}\n@@ -62,6 +66,7 @@ void fn_f64x4 (svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64\\n} } } */\n@@ -74,6 +79,7 @@ void fn_f64x4 (svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x2\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x2\\n} } } */\n@@ -86,6 +92,7 @@ void fn_f64x4 (svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x3\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x3\\n} } } */\n@@ -98,6 +105,7 @@ void fn_f64x4 (svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x4\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x4\\n} } } */"}, {"sha": "42e7860ff7e0425d8b9486e72c97a30dfe04b7be", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_3.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_3.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ void fn_u8 (float d0, float d1, float d2, float d3, svuint8_t x) {}\n void fn_u16 (float d0, float d1, float d2, float d3, svuint16_t x) {}\n void fn_u32 (float d0, float d1, float d2, float d3, svuint32_t x) {}\n void fn_u64 (float d0, float d1, float d2, float d3, svuint64_t x) {}\n+void fn_bf16 (float d0, float d1, float d2, float d3, svbfloat16_t x) {}\n void fn_f16 (float d0, float d1, float d2, float d3, svfloat16_t x) {}\n void fn_f32 (float d0, float d1, float d2, float d3, svfloat32_t x) {}\n void fn_f64 (float d0, float d1, float d2, float d3, svfloat64_t x) {}\n@@ -22,6 +23,7 @@ void fn_u8x2 (float d0, float d1, float d2, float d3, svuint8x2_t x) {}\n void fn_u16x2 (float d0, float d1, float d2, float d3, svuint16x2_t x) {}\n void fn_u32x2 (float d0, float d1, float d2, float d3, svuint32x2_t x) {}\n void fn_u64x2 (float d0, float d1, float d2, float d3, svuint64x2_t x) {}\n+void fn_bf16x2 (float d0, float d1, float d2, float d3, svbfloat16x2_t x) {}\n void fn_f16x2 (float d0, float d1, float d2, float d3, svfloat16x2_t x) {}\n void fn_f32x2 (float d0, float d1, float d2, float d3, svfloat32x2_t x) {}\n void fn_f64x2 (float d0, float d1, float d2, float d3, svfloat64x2_t x) {}\n@@ -34,6 +36,7 @@ void fn_u8x3 (float d0, float d1, float d2, float d3, svuint8x3_t x) {}\n void fn_u16x3 (float d0, float d1, float d2, float d3, svuint16x3_t x) {}\n void fn_u32x3 (float d0, float d1, float d2, float d3, svuint32x3_t x) {}\n void fn_u64x3 (float d0, float d1, float d2, float d3, svuint64x3_t x) {}\n+void fn_bf16x3 (float d0, float d1, float d2, float d3, svbfloat16x3_t x) {}\n void fn_f16x3 (float d0, float d1, float d2, float d3, svfloat16x3_t x) {}\n void fn_f32x3 (float d0, float d1, float d2, float d3, svfloat32x3_t x) {}\n void fn_f64x3 (float d0, float d1, float d2, float d3, svfloat64x3_t x) {}\n@@ -46,6 +49,7 @@ void fn_u8x4 (float d0, float d1, float d2, float d3, svuint8x4_t x) {}\n void fn_u16x4 (float d0, float d1, float d2, float d3, svuint16x4_t x) {}\n void fn_u32x4 (float d0, float d1, float d2, float d3, svuint32x4_t x) {}\n void fn_u64x4 (float d0, float d1, float d2, float d3, svuint64x4_t x) {}\n+void fn_bf16x4 (float d0, float d1, float d2, float d3, svbfloat16x4_t x) {}\n void fn_f16x4 (float d0, float d1, float d2, float d3, svfloat16x4_t x) {}\n void fn_f32x4 (float d0, float d1, float d2, float d3, svfloat32x4_t x) {}\n void fn_f64x4 (float d0, float d1, float d2, float d3, svfloat64x4_t x) {}\n@@ -58,6 +62,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3, svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64\\n} } } */\n@@ -70,6 +75,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3, svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x2\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x2\\n} } } */\n@@ -82,6 +88,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3, svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x3\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x3\\n} } } */\n@@ -94,6 +101,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3, svfloat64x4_t x) {}\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x4\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x4\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x4\\n} } } */"}, {"sha": "7e4438ed49a5ecf3332712a8ee7b14e656e90ace", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_4.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_4.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -18,6 +18,8 @@ void fn_u32 (float d0, float d1, float d2, float d3,\n \t     float d4, svuint32_t x) {}\n void fn_u64 (float d0, float d1, float d2, float d3,\n \t     float d4, svuint64_t x) {}\n+void fn_bf16 (float d0, float d1, float d2, float d3,\n+\t      float d4, svbfloat16_t x) {}\n void fn_f16 (float d0, float d1, float d2, float d3,\n \t     float d4, svfloat16_t x) {}\n void fn_f32 (float d0, float d1, float d2, float d3,\n@@ -41,6 +43,8 @@ void fn_u32x2 (float d0, float d1, float d2, float d3,\n \t       float d4, svuint32x2_t x) {}\n void fn_u64x2 (float d0, float d1, float d2, float d3,\n \t       float d4, svuint64x2_t x) {}\n+void fn_bf16x2 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, svbfloat16x2_t x) {}\n void fn_f16x2 (float d0, float d1, float d2, float d3,\n \t       float d4, svfloat16x2_t x) {}\n void fn_f32x2 (float d0, float d1, float d2, float d3,\n@@ -64,6 +68,8 @@ void fn_u32x3 (float d0, float d1, float d2, float d3,\n \t       float d4, svuint32x3_t x) {}\n void fn_u64x3 (float d0, float d1, float d2, float d3,\n \t       float d4, svuint64x3_t x) {}\n+void fn_bf16x3 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, svbfloat16x3_t x) {}\n void fn_f16x3 (float d0, float d1, float d2, float d3,\n \t       float d4, svfloat16x3_t x) {}\n void fn_f32x3 (float d0, float d1, float d2, float d3,\n@@ -87,6 +93,8 @@ void fn_u32x4 (float d0, float d1, float d2, float d3,\n \t       float d4, svuint32x4_t x) {}\n void fn_u64x4 (float d0, float d1, float d2, float d3,\n \t       float d4, svuint64x4_t x) {}\n+void fn_bf16x4 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, svbfloat16x4_t x) {}\n void fn_f16x4 (float d0, float d1, float d2, float d3,\n \t       float d4, svfloat16x4_t x) {}\n void fn_f32x4 (float d0, float d1, float d2, float d3,\n@@ -102,6 +110,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64\\n} } } */\n@@ -114,6 +123,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x2\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x2\\n} } } */\n@@ -126,6 +136,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x3\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x3\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x3\\n} } } */\n@@ -138,6 +149,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u32x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u64x4\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_bf16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f32x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f64x4\\n} } } */"}, {"sha": "6dadc0492cd85b945c800b114b7f0875a10fbeb7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_5.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_5.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -18,6 +18,8 @@ void fn_u32 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, svuint32_t x) {}\n void fn_u64 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, svuint64_t x) {}\n+void fn_bf16 (float d0, float d1, float d2, float d3,\n+\t      float d4, float d5, svbfloat16_t x) {}\n void fn_f16 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, svfloat16_t x) {}\n void fn_f32 (float d0, float d1, float d2, float d3,\n@@ -41,6 +43,8 @@ void fn_u32x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svuint32x2_t x) {}\n void fn_u64x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svuint64x2_t x) {}\n+void fn_bf16x2 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, svbfloat16x2_t x) {}\n void fn_f16x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svfloat16x2_t x) {}\n void fn_f32x2 (float d0, float d1, float d2, float d3,\n@@ -64,6 +68,8 @@ void fn_u32x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svuint32x3_t x) {}\n void fn_u64x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svuint64x3_t x) {}\n+void fn_bf16x3 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, svbfloat16x3_t x) {}\n void fn_f16x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svfloat16x3_t x) {}\n void fn_f32x3 (float d0, float d1, float d2, float d3,\n@@ -87,6 +93,8 @@ void fn_u32x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svuint32x4_t x) {}\n void fn_u64x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svuint64x4_t x) {}\n+void fn_bf16x4 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, svbfloat16x4_t x) {}\n void fn_f16x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, svfloat16x4_t x) {}\n void fn_f32x4 (float d0, float d1, float d2, float d3,\n@@ -102,6 +110,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64\\n} } } */\n@@ -114,6 +123,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64x2\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32x2\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64x2\\n} } } */\n@@ -126,6 +136,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u16x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u32x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u64x3\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_bf16x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f16x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f32x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f64x3\\n} } } */\n@@ -138,6 +149,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u32x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u64x4\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_bf16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f32x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f64x4\\n} } } */"}, {"sha": "0ff73e2598e74249934e30ee4f41be1f97fb1064", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_6.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_6.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -18,6 +18,8 @@ void fn_u32 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, float d6, svuint32_t x) {}\n void fn_u64 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, float d6, svuint64_t x) {}\n+void fn_bf16 (float d0, float d1, float d2, float d3,\n+\t      float d4, float d5, float d6, svbfloat16_t x) {}\n void fn_f16 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, float d6, svfloat16_t x) {}\n void fn_f32 (float d0, float d1, float d2, float d3,\n@@ -41,6 +43,8 @@ void fn_u32x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svuint32x2_t x) {}\n void fn_u64x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svuint64x2_t x) {}\n+void fn_bf16x2 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, float d6, svbfloat16x2_t x) {}\n void fn_f16x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svfloat16x2_t x) {}\n void fn_f32x2 (float d0, float d1, float d2, float d3,\n@@ -64,6 +68,8 @@ void fn_u32x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svuint32x3_t x) {}\n void fn_u64x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svuint64x3_t x) {}\n+void fn_bf16x3 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, float d6, svbfloat16x3_t x) {}\n void fn_f16x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svfloat16x3_t x) {}\n void fn_f32x3 (float d0, float d1, float d2, float d3,\n@@ -87,6 +93,8 @@ void fn_u32x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svuint32x4_t x) {}\n void fn_u64x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svuint64x4_t x) {}\n+void fn_bf16x4 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, float d6, svbfloat16x4_t x) {}\n void fn_f16x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, svfloat16x4_t x) {}\n void fn_f32x4 (float d0, float d1, float d2, float d3,\n@@ -102,6 +110,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_u64\\n} } } */\n+/* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_bf16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f16\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f32\\n} } } */\n /* { dg-final { scan-assembler {\\t\\.variant_pcs\\tfn_f64\\n} } } */\n@@ -114,6 +123,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u16x2\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u32x2\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u64x2\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_bf16x2\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f16x2\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f32x2\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f64x2\\n} } } */\n@@ -126,6 +136,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u16x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u32x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u64x3\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_bf16x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f16x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f32x3\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f64x3\\n} } } */\n@@ -138,6 +149,7 @@ void fn_f64x4 (float d0, float d1, float d2, float d3,\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u32x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_u64x4\\n} } } */\n+/* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_bf16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f16x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f32x4\\n} } } */\n /* { dg-final { scan-assembler-not {\\t\\.variant_pcs\\tfn_f64x4\\n} } } */"}, {"sha": "4f3ff810778966f1807cea4b1b6aaf0d3f6682e8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/annotate_7.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fannotate_7.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -18,6 +18,8 @@ void fn_u32 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, float d6, float d7, svuint32_t x) {}\n void fn_u64 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, float d6, float d7, svuint64_t x) {}\n+void fn_bf16 (float d0, float d1, float d2, float d3,\n+\t      float d4, float d5, float d6, float d7, svbfloat16_t x) {}\n void fn_f16 (float d0, float d1, float d2, float d3,\n \t     float d4, float d5, float d6, float d7, svfloat16_t x) {}\n void fn_f32 (float d0, float d1, float d2, float d3,\n@@ -41,6 +43,8 @@ void fn_u32x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svuint32x2_t x) {}\n void fn_u64x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svuint64x2_t x) {}\n+void fn_bf16x2 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, float d6, float d7, svbfloat16x2_t x) {}\n void fn_f16x2 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svfloat16x2_t x) {}\n void fn_f32x2 (float d0, float d1, float d2, float d3,\n@@ -64,6 +68,8 @@ void fn_u32x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svuint32x3_t x) {}\n void fn_u64x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svuint64x3_t x) {}\n+void fn_bf16x3 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, float d6, float d7, svbfloat16x3_t x) {}\n void fn_f16x3 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svfloat16x3_t x) {}\n void fn_f32x3 (float d0, float d1, float d2, float d3,\n@@ -87,6 +93,8 @@ void fn_u32x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svuint32x4_t x) {}\n void fn_u64x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svuint64x4_t x) {}\n+void fn_bf16x4 (float d0, float d1, float d2, float d3,\n+\t\tfloat d4, float d5, float d6, float d7, svbfloat16x4_t x) {}\n void fn_f16x4 (float d0, float d1, float d2, float d3,\n \t       float d4, float d5, float d6, float d7, svfloat16x4_t x) {}\n void fn_f32x4 (float d0, float d1, float d2, float d3,"}, {"sha": "e9b63a45dc3246ffdb783c9c2bb5b8aa37511cb8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/args_5_be_bf16.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_5_be_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_5_be_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_5_be_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O -mbig-endian -fno-stack-clash-protection -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+/*\n+** callee:\n+**\taddvl\tsp, sp, #-1\n+**\tstr\tp4, \\[sp\\]\n+**\tptrue\tp4\\.b, all\n+** (\n+**\tld1h\t(z[0-9]+\\.h), p4/z, \\[x1, #1, mul vl\\]\n+**\tld1h\t(z[0-9]+\\.h), p4/z, \\[x1\\]\n+**\tst2h\t{\\2 - \\1}, p0, \\[x0\\]\n+** |\n+**\tld1h\t(z[0-9]+\\.h), p4/z, \\[x1\\]\n+**\tld1h\t(z[0-9]+\\.h), p4/z, \\[x1, #1, mul vl\\]\n+**\tst2h\t{\\3 - \\4}, p0, \\[x0\\]\n+** )\n+**\tst4h\t{z0\\.h - z3\\.h}, p1, \\[x0\\]\n+**\tst3h\t{z4\\.h - z6\\.h}, p2, \\[x0\\]\n+**\tst1h\tz7\\.h, p3, \\[x0\\]\n+**\tldr\tp4, \\[sp\\]\n+**\taddvl\tsp, sp, #1\n+**\tret\n+*/\n+void __attribute__((noipa))\n+callee (void *x0, svbfloat16x4_t z0, svbfloat16x3_t z4, svbfloat16x2_t stack,\n+\tsvbfloat16_t z7, svbool_t p0, svbool_t p1, svbool_t p2, svbool_t p3)\n+{\n+  svst2 (p0, x0, stack);\n+  svst4 (p1, x0, z0);\n+  svst3 (p2, x0, z4);\n+  svst1_bf16 (p3, x0, z7);\n+}\n+\n+void __attribute__((noipa))\n+caller (void *x0)\n+{\n+  svbool_t pg;\n+  pg = svptrue_b8 ();\n+  callee (x0,\n+\t  svld4_vnum_bf16 (pg, x0, -8),\n+\t  svld3_vnum_bf16 (pg, x0, -3),\n+\t  svld2_vnum_bf16 (pg, x0, 0),\n+\t  svld1_vnum_bf16 (pg, x0, 2),\n+\t  svptrue_pat_b8 (SV_VL1),\n+\t  svptrue_pat_b16 (SV_VL2),\n+\t  svptrue_pat_b32 (SV_VL3),\n+\t  svptrue_pat_b64 (SV_VL4));\n+}\n+\n+/* { dg-final { scan-assembler {\\tld4h\\t{z0\\.h - z3\\.h}, p[0-7]/z, \\[x0, #-8, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z4\\.h - z6\\.h}, p[0-7]/z, \\[x0, #-3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz7\\.h, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tx1, sp\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2h\\t{(z[0-9]+\\.h) - z[0-9]+\\.h}.*\\tst1h\\t\\1, p[0-7], \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+\\.h - (z[0-9]+\\.h)}.*\\tst1h\\t\\1, p[0-7], \\[x1, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp0\\.b, vl1\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp1\\.h, vl2\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp2\\.s, vl3\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp3\\.d, vl4\\n} } } */"}, {"sha": "94d84df4a559fd2d86c6cb427a155829ba33b736", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/args_5_le_bf16.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_5_le_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_5_le_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_5_le_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O -mlittle-endian -fno-stack-clash-protection -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+/*\n+** callee:\n+** (\n+**\tldr\t(z[0-9]+), \\[x1, #1, mul vl\\]\n+**\tldr\t(z[0-9]+), \\[x1\\]\n+**\tst2h\t{\\2\\.h - \\1\\.h}, p0, \\[x0\\]\n+** |\n+**\tldr\t(z[0-9]+), \\[x1\\]\n+**\tldr\t(z[0-9]+), \\[x1, #1, mul vl\\]\n+**\tst2h\t{\\3\\.h - \\4\\.h}, p0, \\[x0\\]\n+** )\n+**\tst4h\t{z0\\.h - z3\\.h}, p1, \\[x0\\]\n+**\tst3h\t{z4\\.h - z6\\.h}, p2, \\[x0\\]\n+**\tst1h\tz7\\.h, p3, \\[x0\\]\n+**\tret\n+*/\n+void __attribute__((noipa))\n+callee (void *x0, svbfloat16x4_t z0, svbfloat16x3_t z4, svbfloat16x2_t stack,\n+\tsvbfloat16_t z7, svbool_t p0, svbool_t p1, svbool_t p2, svbool_t p3)\n+{\n+  svst2 (p0, x0, stack);\n+  svst4 (p1, x0, z0);\n+  svst3 (p2, x0, z4);\n+  svst1_bf16 (p3, x0, z7);\n+}\n+\n+void __attribute__((noipa))\n+caller (void *x0)\n+{\n+  svbool_t pg;\n+  pg = svptrue_b8 ();\n+  callee (x0,\n+\t  svld4_vnum_bf16 (pg, x0, -8),\n+\t  svld3_vnum_bf16 (pg, x0, -3),\n+\t  svld2_vnum_bf16 (pg, x0, 0),\n+\t  svld1_vnum_bf16 (pg, x0, 2),\n+\t  svptrue_pat_b8 (SV_VL1),\n+\t  svptrue_pat_b16 (SV_VL2),\n+\t  svptrue_pat_b32 (SV_VL3),\n+\t  svptrue_pat_b64 (SV_VL4));\n+}\n+\n+/* { dg-final { scan-assembler {\\tld4h\\t{z0\\.h - z3\\.h}, p[0-7]/z, \\[x0, #-8, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z4\\.h - z6\\.h}, p[0-7]/z, \\[x0, #-3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\tz7\\.h, p[0-7]/z, \\[x0, #2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tx1, sp\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2h\\t{(z[0-9]+)\\.h - z[0-9]+\\.h}.*\\tstr\\t\\1, \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2h\\t{z[0-9]+\\.h - (z[0-9]+)\\.h}.*\\tstr\\t\\1, \\[x1, #1, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp0\\.b, vl1\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp1\\.h, vl2\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp2\\.s, vl3\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp3\\.d, vl4\\n} } } */"}, {"sha": "84d2c406cc5c6e13c6a5945b88e1c9501b099460", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/args_6_be_bf16.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_6_be_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_6_be_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_6_be_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O -mbig-endian -fno-stack-clash-protection -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+/*\n+** callee1:\n+**\tptrue\tp3\\.b, all\n+**\t...\n+**\tld1h\t(z[0-9]+\\.h), p3/z, \\[x1, #3, mul vl\\]\n+**\t...\n+**\tst4h\t{z[0-9]+\\.h - \\1}, p0, \\[x0\\]\n+**\tst2h\t{z3\\.h - z4\\.h}, p1, \\[x0\\]\n+**\tst3h\t{z5\\.h - z7\\.h}, p2, \\[x0\\]\n+**\tret\n+*/\n+void __attribute__((noipa))\n+callee1 (void *x0, svbfloat16x3_t z0, svbfloat16x2_t z3, svbfloat16x3_t z5,\n+\t svbfloat16x4_t stack1, svbfloat16_t stack2, svbool_t p0,\n+\t svbool_t p1, svbool_t p2)\n+{\n+  svst4_bf16 (p0, x0, stack1);\n+  svst2_bf16 (p1, x0, z3);\n+  svst3_bf16 (p2, x0, z5);\n+}\n+\n+/*\n+** callee2:\n+**\tptrue\tp3\\.b, all\n+**\tld1h\t(z[0-9]+\\.h), p3/z, \\[x2\\]\n+**\tst1h\t\\1, p0, \\[x0\\]\n+**\tst2h\t{z3\\.h - z4\\.h}, p1, \\[x0\\]\n+**\tst3h\t{z0\\.h - z2\\.h}, p2, \\[x0\\]\n+**\tret\n+*/\n+void __attribute__((noipa))\n+callee2 (void *x0, svbfloat16x3_t z0, svbfloat16x2_t z3, svbfloat16x3_t z5,\n+\t svbfloat16x4_t stack1, svbfloat16_t stack2, svbool_t p0,\n+\t svbool_t p1, svbool_t p2)\n+{\n+  svst1_bf16 (p0, x0, stack2);\n+  svst2_bf16 (p1, x0, z3);\n+  svst3_bf16 (p2, x0, z0);\n+}\n+\n+void __attribute__((noipa))\n+caller (void *x0)\n+{\n+  svbool_t pg;\n+  pg = svptrue_b8 ();\n+  callee1 (x0,\n+\t   svld3_vnum_bf16 (pg, x0, -9),\n+\t   svld2_vnum_bf16 (pg, x0, -2),\n+\t   svld3_vnum_bf16 (pg, x0, 0),\n+\t   svld4_vnum_bf16 (pg, x0, 8),\n+\t   svld1_vnum_bf16 (pg, x0, 5),\n+\t   svptrue_pat_b8 (SV_VL1),\n+\t   svptrue_pat_b16 (SV_VL2),\n+\t   svptrue_pat_b32 (SV_VL3));\n+}\n+\n+/* { dg-final { scan-assembler {\\tld3h\\t{z0\\.h - z2\\.h}, p[0-7]/z, \\[x0, #-9, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2h\\t{z3\\.h - z4\\.h}, p[0-7]/z, \\[x0, #-2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z5\\.h - z7\\.h}, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{(z[0-9]+\\.h) - z[0-9]+\\.h}.*\\tst1h\\t\\1, p[0-7], \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{z[0-9]+\\.h - (z[0-9]+\\.h)}.*\\tst1h\\t\\1, p[0-7], \\[x1, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+\\.h), p[0-7]/z, \\[x0, #5, mul vl\\]\\n.*\\tst1h\\t\\1, p[0-7], \\[x2\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp0\\.b, vl1\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp1\\.h, vl2\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp2\\.s, vl3\\n} } } */"}, {"sha": "3dc9e42ed18d3e9327c84c00ef8e1b1ab3cbcb51", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/args_6_le_bf16.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_6_le_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_6_le_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fargs_6_le_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O -mlittle-endian -fno-stack-clash-protection -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+/*\n+** callee1:\n+**\t...\n+**\tldr\t(z[0-9]+), \\[x1, #3, mul vl\\]\n+**\t...\n+**\tst4h\t{z[0-9]+\\.h - \\1\\.h}, p0, \\[x0\\]\n+**\tst2h\t{z3\\.h - z4\\.h}, p1, \\[x0\\]\n+**\tst3h\t{z5\\.h - z7\\.h}, p2, \\[x0\\]\n+**\tret\n+*/\n+void __attribute__((noipa))\n+callee1 (void *x0, svbfloat16x3_t z0, svbfloat16x2_t z3, svbfloat16x3_t z5,\n+\t svbfloat16x4_t stack1, svbfloat16_t stack2, svbool_t p0,\n+\t svbool_t p1, svbool_t p2)\n+{\n+  svst4_bf16 (p0, x0, stack1);\n+  svst2_bf16 (p1, x0, z3);\n+  svst3_bf16 (p2, x0, z5);\n+}\n+\n+/*\n+** callee2:\n+**\tptrue\tp3\\.b, all\n+**\tld1h\t(z[0-9]+\\.h), p3/z, \\[x2\\]\n+**\tst1h\t\\1, p0, \\[x0\\]\n+**\tst2h\t{z3\\.h - z4\\.h}, p1, \\[x0\\]\n+**\tst3h\t{z0\\.h - z2\\.h}, p2, \\[x0\\]\n+**\tret\n+*/\n+void __attribute__((noipa))\n+callee2 (void *x0, svbfloat16x3_t z0, svbfloat16x2_t z3, svbfloat16x3_t z5,\n+\t svbfloat16x4_t stack1, svbfloat16_t stack2, svbool_t p0,\n+\t svbool_t p1, svbool_t p2)\n+{\n+  svst1_bf16 (p0, x0, stack2);\n+  svst2_bf16 (p1, x0, z3);\n+  svst3_bf16 (p2, x0, z0);\n+}\n+\n+void __attribute__((noipa))\n+caller (void *x0)\n+{\n+  svbool_t pg;\n+  pg = svptrue_b8 ();\n+  callee1 (x0,\n+\t   svld3_vnum_bf16 (pg, x0, -9),\n+\t   svld2_vnum_bf16 (pg, x0, -2),\n+\t   svld3_vnum_bf16 (pg, x0, 0),\n+\t   svld4_vnum_bf16 (pg, x0, 8),\n+\t   svld1_vnum_bf16 (pg, x0, 5),\n+\t   svptrue_pat_b8 (SV_VL1),\n+\t   svptrue_pat_b16 (SV_VL2),\n+\t   svptrue_pat_b32 (SV_VL3));\n+}\n+\n+/* { dg-final { scan-assembler {\\tld3h\\t{z0\\.h - z2\\.h}, p[0-7]/z, \\[x0, #-9, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld2h\\t{z3\\.h - z4\\.h}, p[0-7]/z, \\[x0, #-2, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld3h\\t{z5\\.h - z7\\.h}, p[0-7]/z, \\[x0\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{(z[0-9]+)\\.h - z[0-9]+\\.h}.*\\tstr\\t\\1, \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld4h\\t{z[0-9]+\\.h - (z[0-9]+)\\.h}.*\\tstr\\t\\1, \\[x1, #3, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+\\.h), p[0-7]/z, \\[x0, #5, mul vl\\]\\n.*\\tst1h\\t\\1, p[0-7], \\[x2\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp0\\.b, vl1\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp1\\.h, vl2\\n} } } */\n+/* { dg-final { scan-assembler {\\tptrue\\tp2\\.s, vl3\\n} } } */"}, {"sha": "e5fceb14bbef272482b636300ea20e2c47982992", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/gnu_vectors_1.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fgnu_vectors_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fgnu_vectors_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fgnu_vectors_1.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,7 @@\n \n #include <arm_sve.h>\n \n+typedef bfloat16_t bfloat16x16_t __attribute__((vector_size (32)));\n typedef float16_t float16x16_t __attribute__((vector_size (32)));\n typedef float32_t float32x8_t __attribute__((vector_size (32)));\n typedef float64_t float64x4_t __attribute__((vector_size (32)));\n@@ -14,6 +15,7 @@ typedef uint16_t uint16x16_t __attribute__((vector_size (32)));\n typedef uint32_t uint32x8_t __attribute__((vector_size (32)));\n typedef uint64_t uint64x4_t __attribute__((vector_size (32)));\n \n+void bfloat16_callee (bfloat16x16_t);\n void float16_callee (float16x16_t);\n void float32_callee (float32x8_t);\n void float64_callee (float64x4_t);\n@@ -26,6 +28,12 @@ void uint16_callee (uint16x16_t);\n void uint32_callee (uint32x8_t);\n void uint64_callee (uint64x4_t);\n \n+void\n+bfloat16_caller (bfloat16_t val)\n+{\n+  bfloat16_callee (svdup_bf16 (val));\n+}\n+\n void\n float16_caller (void)\n {\n@@ -93,7 +101,7 @@ uint64_caller (void)\n }\n \n /* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b, p[0-7], \\[x0\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h, p[0-7], \\[x0\\]} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h, p[0-7], \\[x0\\]} 4 } } */\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x0\\]} 3 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x0\\]} 3 } } */\n-/* { dg-final { scan-assembler-times {\\tadd\\tx0, sp, #?16\\n} 11 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tx0, sp, #?16\\n} 12 } } */"}, {"sha": "875567f0197ffae3694e180c5a67905afdc1f95f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/gnu_vectors_2.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fgnu_vectors_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fgnu_vectors_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fgnu_vectors_2.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -2,6 +2,7 @@\n \n #include <arm_sve.h>\n \n+typedef bfloat16_t bfloat16x16_t __attribute__((vector_size (32)));\n typedef float16_t float16x16_t __attribute__((vector_size (32)));\n typedef float32_t float32x8_t __attribute__((vector_size (32)));\n typedef float64_t float64x4_t __attribute__((vector_size (32)));\n@@ -14,6 +15,7 @@ typedef uint16_t uint16x16_t __attribute__((vector_size (32)));\n typedef uint32_t uint32x8_t __attribute__((vector_size (32)));\n typedef uint64_t uint64x4_t __attribute__((vector_size (32)));\n \n+void bfloat16_callee (svbfloat16_t);\n void float16_callee (svfloat16_t);\n void float32_callee (svfloat32_t);\n void float64_callee (svfloat64_t);\n@@ -26,6 +28,12 @@ void uint16_callee (svuint16_t);\n void uint32_callee (svuint32_t);\n void uint64_callee (svuint64_t);\n \n+void\n+bfloat16_caller (bfloat16x16_t arg)\n+{\n+  bfloat16_callee (arg);\n+}\n+\n void\n float16_caller (float16x16_t arg)\n {\n@@ -93,7 +101,7 @@ uint64_caller (uint64x4_t arg)\n }\n \n /* { dg-final { scan-assembler-times {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0\\]} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0\\]} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0\\]} 4 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0\\]} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0\\]} 3 } } */\n /* { dg-final { scan-assembler-not {\\tst1[bhwd]\\t} } } */"}, {"sha": "00eb2cbda8d80cae086b1119a810031b70f449cb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -49,6 +49,14 @@ CALLEE (u16, __SVUint16_t)\n */\n CALLEE (f16, __SVFloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, all\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, __SVBfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, all\n@@ -107,6 +115,14 @@ CALLEE (f64, __SVFloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, __SVUint16_t)\n */\n CALLER (f16, __SVFloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, all\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, __SVBfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "43519634c45b61b87f68a9f2ab56b525327c3212", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4_1024.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_1024.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_1024.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_1024.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -49,6 +49,14 @@ CALLEE (u16, __SVUint16_t)\n */\n CALLEE (f16, __SVFloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl128\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, __SVBfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl128\n@@ -107,6 +115,14 @@ CALLEE (f64, __SVFloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, __SVUint16_t)\n */\n CALLER (f16, __SVFloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl128\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, __SVBfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "6b490226bff44b91324f8670406750120132cbf5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4_128.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_128.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -49,6 +49,14 @@ CALLEE (u16, __SVUint16_t)\n */\n CALLEE (f16, __SVFloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, __SVBfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl16\n@@ -107,6 +115,14 @@ CALLEE (f64, __SVFloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, __SVUint16_t)\n */\n CALLER (f16, __SVFloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, __SVBfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "8256645f56c4adc7ce681ed9984040bb209fd84d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4_2048.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_2048.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_2048.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_2048.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -49,6 +49,14 @@ CALLEE (u16, __SVUint16_t)\n */\n CALLEE (f16, __SVFloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl256\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, __SVBfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl256\n@@ -107,6 +115,14 @@ CALLEE (f64, __SVFloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, __SVUint16_t)\n */\n CALLER (f16, __SVFloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl256\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, __SVBfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "1e0f6bb96f8396b128894eaeb1e74da8ea581d3e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4_256.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_256.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -49,6 +49,14 @@ CALLEE (u16, __SVUint16_t)\n */\n CALLEE (f16, __SVFloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl32\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, __SVBfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl32\n@@ -107,6 +115,14 @@ CALLEE (f64, __SVFloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, __SVUint16_t)\n */\n CALLER (f16, __SVFloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl32\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, __SVBfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "5b58ed73454f1d0f28ca3753bb170ceb2b0cb377", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4_512.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_512.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -49,6 +49,14 @@ CALLEE (u16, __SVUint16_t)\n */\n CALLEE (f16, __SVFloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl64\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, __SVBfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl64\n@@ -107,6 +115,14 @@ CALLEE (f64, __SVFloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, __SVUint16_t)\n */\n CALLER (f16, __SVFloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl64\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, __SVBfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "55c78e16f65fff119aaec08cfe02e92aad73d489", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -51,6 +51,14 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, all\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, all\n@@ -107,6 +115,14 @@ CALLEE (f64, svfloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, all\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "52e9916d8bc27da4272c353fbd4f6187d65be70b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5_1024.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_1024.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_1024.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_1024.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -51,6 +51,14 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl128\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl128\n@@ -107,6 +115,14 @@ CALLEE (f64, svfloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl128\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "cfb2f381937fd4bc5ec0f6c07d9bee9447b24a3c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5_128.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_128.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -51,6 +51,14 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl16\n@@ -107,6 +115,14 @@ CALLEE (f64, svfloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "6f37d9d6c44f9f9517df0c2a6f58d547ef4400d6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5_2048.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_2048.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_2048.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_2048.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -51,6 +51,14 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl256\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl256\n@@ -107,6 +115,14 @@ CALLEE (f64, svfloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl256\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "7ba094e1667f0ac6ae77a51f7b1b69d2e2f8bd12", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5_256.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_256.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -51,6 +51,14 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl32\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl32\n@@ -107,6 +115,14 @@ CALLEE (f64, svfloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl32\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "36b14d4208962d9e930b4006cd2dcf3ca2f41e82", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5_512.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_512.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -51,6 +51,14 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl64\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl64\n@@ -107,6 +115,14 @@ CALLEE (f64, svfloat64_t)\n     return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n   }\n \n+#define CALLER_BF16(SUFFIX, TYPE)\t\t\t\t\\\n+  typeof (svlasta (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svlasta (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n /*\n ** caller_s8:\n **\t...\n@@ -166,6 +182,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tptrue\t(p[0-7])\\.b, vl64\n+**\tlasta\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER_BF16 (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "72468eab1fdcb35c93a5ff41822d0edad10b7549", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ typedef uint8_t svuint8_t __attribute__ ((vector_size (32)));\n typedef int16_t svint16_t __attribute__ ((vector_size (32)));\n typedef uint16_t svuint16_t __attribute__ ((vector_size (32)));\n typedef __fp16 svfloat16_t __attribute__ ((vector_size (32)));\n+typedef __bf16 svbfloat16_t __attribute__ ((vector_size (32)));\n \n typedef int32_t svint32_t __attribute__ ((vector_size (32)));\n typedef uint32_t svuint32_t __attribute__ ((vector_size (32)));\n@@ -81,6 +82,9 @@ CALLEE (u16, svuint16_t)\n /* Currently we scalarize this.  */\n CALLEE (f16, svfloat16_t)\n \n+/* Currently we scalarize this.  */\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n ** (\n@@ -197,6 +201,16 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tldr\th0, \\[sp, 16\\]\n+**\tldp\tx29, x30, \\[sp\\], 48\n+**\tret\n+*/\n+CALLER (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "b6f267e76950cc47a8d560a435025c3c91b4d4db", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6_1024.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_1024.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_1024.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_1024.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ typedef uint8_t svuint8_t __attribute__ ((vector_size (128)));\n typedef int16_t svint16_t __attribute__ ((vector_size (128)));\n typedef uint16_t svuint16_t __attribute__ ((vector_size (128)));\n typedef __fp16 svfloat16_t __attribute__ ((vector_size (128)));\n+typedef __bf16 svbfloat16_t __attribute__ ((vector_size (128)));\n \n typedef int32_t svint32_t __attribute__ ((vector_size (128)));\n typedef uint32_t svuint32_t __attribute__ ((vector_size (128)));\n@@ -71,6 +72,15 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl128\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tst1h\tz0\\.h, \\1, \\[x8\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl128\n@@ -192,6 +202,18 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\t...\n+**\tld1h\t(z[0-9]+\\.h), (p[0-7])/z, \\[[^]]*\\]\n+**\tst1h\t\\1, \\2, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "fd838453feb38182db971dca608fa4c5b9d0a885", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6_128.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_128.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ typedef uint8_t svuint8_t __attribute__ ((vector_size (16)));\n typedef int16_t svint16_t __attribute__ ((vector_size (16)));\n typedef uint16_t svuint16_t __attribute__ ((vector_size (16)));\n typedef __fp16 svfloat16_t __attribute__ ((vector_size (16)));\n+typedef __bf16 svbfloat16_t __attribute__ ((vector_size (16)));\n \n typedef int32_t svint32_t __attribute__ ((vector_size (16)));\n typedef uint32_t svuint32_t __attribute__ ((vector_size (16)));\n@@ -61,6 +62,13 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tldr\tq0, \\[x0\\]\n@@ -165,6 +173,17 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "46b7d683e02f260b0f51415d64dbb2028236a107", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6_2048.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_2048.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_2048.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_2048.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ typedef uint8_t svuint8_t __attribute__ ((vector_size (256)));\n typedef int16_t svint16_t __attribute__ ((vector_size (256)));\n typedef uint16_t svuint16_t __attribute__ ((vector_size (256)));\n typedef __fp16 svfloat16_t __attribute__ ((vector_size (256)));\n+typedef __bf16 svbfloat16_t __attribute__ ((vector_size (256)));\n \n typedef int32_t svint32_t __attribute__ ((vector_size (256)));\n typedef uint32_t svuint32_t __attribute__ ((vector_size (256)));\n@@ -71,6 +72,15 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl256\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tst1h\tz0\\.h, \\1, \\[x8\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl256\n@@ -192,6 +202,18 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\t...\n+**\tld1h\t(z[0-9]+\\.h), (p[0-7])/z, \\[[^]]*\\]\n+**\tst1h\t\\1, \\2, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "04872493c86fc1d5b4cee6ea29c044afe260f4b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6_256.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_256.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ typedef uint8_t svuint8_t __attribute__ ((vector_size (32)));\n typedef int16_t svint16_t __attribute__ ((vector_size (32)));\n typedef uint16_t svuint16_t __attribute__ ((vector_size (32)));\n typedef __fp16 svfloat16_t __attribute__ ((vector_size (32)));\n+typedef __bf16 svbfloat16_t __attribute__ ((vector_size (32)));\n \n typedef int32_t svint32_t __attribute__ ((vector_size (32)));\n typedef uint32_t svuint32_t __attribute__ ((vector_size (32)));\n@@ -71,6 +72,15 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl32\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tst1h\tz0\\.h, \\1, \\[x8\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl32\n@@ -192,6 +202,18 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\t...\n+**\tld1h\t(z[0-9]+\\.h), (p[0-7])/z, \\[[^]]*\\]\n+**\tst1h\t\\1, \\2, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "9817d856a13866aa20045e7a4b4109a03db1c519", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6_512.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_512.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_512.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_512.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -10,6 +10,7 @@ typedef uint8_t svuint8_t __attribute__ ((vector_size (64)));\n typedef int16_t svint16_t __attribute__ ((vector_size (64)));\n typedef uint16_t svuint16_t __attribute__ ((vector_size (64)));\n typedef __fp16 svfloat16_t __attribute__ ((vector_size (64)));\n+typedef __bf16 svbfloat16_t __attribute__ ((vector_size (64)));\n \n typedef int32_t svint32_t __attribute__ ((vector_size (64)));\n typedef uint32_t svuint32_t __attribute__ ((vector_size (64)));\n@@ -71,6 +72,15 @@ CALLEE (u16, svuint16_t)\n */\n CALLEE (f16, svfloat16_t)\n \n+/*\n+** callee_bf16:\n+**\tptrue\t(p[0-7])\\.b, vl64\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tst1h\tz0\\.h, \\1, \\[x8\\]\n+**\tret\n+*/\n+CALLEE (bf16, svbfloat16_t)\n+\n /*\n ** callee_s32:\n **\tptrue\t(p[0-7])\\.b, vl64\n@@ -192,6 +202,18 @@ CALLER (u16, svuint16_t)\n */\n CALLER (f16, svfloat16_t)\n \n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\t...\n+**\tld1h\t(z[0-9]+\\.h), (p[0-7])/z, \\[[^]]*\\]\n+**\tst1h\t\\1, \\2, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (bf16, svbfloat16_t)\n+\n /*\n ** caller_s32:\n **\t..."}, {"sha": "55456a3b4cb64fedb150895b053cd7ac71f6a815", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_7.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_7.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -144,6 +144,34 @@ caller_f16 (void)\n   return svzip1 (svget2 (res, 1), svget2 (res, 0));\n }\n \n+/*\n+** callee_bf16:\n+**\tmov\tz0\\.h, h2\n+**\tmov\tz1\\.h, h3\n+**\tret\n+*/\n+svbfloat16x2_t __attribute__((noipa))\n+callee_bf16 (bfloat16_t h0, bfloat16_t h1, bfloat16_t h2, bfloat16_t h3)\n+{\n+  return svcreate2 (svdup_bf16 (h2), svdup_bf16 (h3));\n+}\n+\n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\tzip2\tz0\\.h, z1\\.h, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+svbfloat16_t __attribute__((noipa))\n+caller_bf16 (bfloat16_t h0, bfloat16_t h1, bfloat16_t h2, bfloat16_t h3)\n+{\n+  svbfloat16x2_t res;\n+  res = callee_bf16 (h0, h1, h2, h3);\n+  return svzip2 (svget2 (res, 1), svget2 (res, 0));\n+}\n+\n /*\n ** callee_s32:\n **\tmov\tz0\\.s, #1"}, {"sha": "9581811e7f3b7b2ec3ecb457b957875bd705c902", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_8.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_8.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -159,6 +159,35 @@ caller_f16 (void)\n \t\t  svget3 (res, 0), svget3 (res, 1), svget3 (res, 2));\n }\n \n+/*\n+** callee_bf16:\n+**\tmov\tz0\\.h, h0\n+**\tmov\tz1\\.h, h1\n+**\tmov\tz2\\.h, h2\n+**\tret\n+*/\n+svbfloat16x3_t __attribute__((noipa))\n+callee_bf16 (bfloat16_t h0, bfloat16_t h1, bfloat16_t h2)\n+{\n+  return svcreate3 (svdup_bf16 (h0), svdup_bf16 (h1), svdup_bf16 (h2));\n+}\n+\n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\ttrn2\tz0\\.h, z0\\.h, z2\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+svbfloat16_t __attribute__((noipa))\n+caller_bf16 (bfloat16_t h0, bfloat16_t h1, bfloat16_t h2)\n+{\n+  svbfloat16x3_t res;\n+  res = callee_bf16 (h0, h1, h2);\n+  return svtrn2 (svget3 (res, 0), svget3 (res, 2));\n+}\n+\n /*\n ** callee_s32:\n **\tmov\tz0\\.s, #1"}, {"sha": "ad32e1fe56dde46c586e20cd7dc037944556156c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_9.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_9.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -184,6 +184,39 @@ caller_f16 (void)\n \t\t  svget4 (res, 3));\n }\n \n+/*\n+** callee_bf16:\n+**\tmov\tz0\\.h, h4\n+**\tmov\tz1\\.h, h5\n+**\tmov\tz2\\.h, h6\n+**\tmov\tz3\\.h, h7\n+**\tret\n+*/\n+svbfloat16x4_t __attribute__((noipa))\n+callee_bf16 (bfloat16_t h0, bfloat16_t h1, bfloat16_t h2, bfloat16_t h3,\n+\t     bfloat16_t h4, bfloat16_t h5, bfloat16_t h6, bfloat16_t h7)\n+{\n+  return svcreate4 (svdup_bf16 (h4), svdup_bf16 (h5),\n+\t\t    svdup_bf16 (h6), svdup_bf16 (h7));\n+}\n+\n+/*\n+** caller_bf16:\n+**\t...\n+**\tbl\tcallee_bf16\n+**\ttrn2\tz0\\.h, z0\\.h, z3\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+svbfloat16_t __attribute__((noipa))\n+caller_bf16 (bfloat16_t h0, bfloat16_t h1, bfloat16_t h2, bfloat16_t h3,\n+\t     bfloat16_t h4, bfloat16_t h5, bfloat16_t h6, bfloat16_t h7)\n+{\n+  svbfloat16x4_t res;\n+  res = callee_bf16 (h0, h1, h2, h3, h4, h5, h6, h7);\n+  return svtrn2 (svget4 (res, 0), svget4 (res, 3));\n+}\n+\n /*\n ** callee_s32:\n **\tmov\tz0\\.s, #1"}, {"sha": "4912c9e2a8640aba8af074435ac9b4774efbdfac", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/tbl2_bf16.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Ftbl2_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Ftbl2_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Ftbl2_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** tbl2_bf16_tied1:\n+**\ttbl\tz0\\.h, {z0\\.h(?:, | - )z1\\.h}, z4\\.h\n+**\tret\n+*/\n+TEST_TBL2 (tbl2_bf16_tied1, svbfloat16x2_t, svbfloat16_t, svuint16_t,\n+\t   z0_res = svtbl2_bf16 (z0, z4),\n+\t   z0_res = svtbl2 (z0, z4))\n+\n+/*\n+** tbl2_bf16_tied2:\n+**\ttbl\tz0\\.h, {z1\\.h(?:, | - )z2\\.h}, z0\\.h\n+**\tret\n+*/\n+TEST_TBL2_REV (tbl2_bf16_tied2, svbfloat16x2_t, svbfloat16_t, svuint16_t,\n+\t       z0_res = svtbl2_bf16 (z1, z0),\n+\t       z0_res = svtbl2 (z1, z0))\n+\n+/*\n+** tbl2_bf16_untied:\n+**\ttbl\tz0\\.h, {z2\\.h(?:, | - )z3\\.h}, z4\\.h\n+**\tret\n+*/\n+TEST_TBL2 (tbl2_bf16_untied, svbfloat16x2_t, svbfloat16_t, svuint16_t,\n+\t   z0_res = svtbl2_bf16 (z2, z4),\n+\t   z0_res = svtbl2 (z2, z4))"}, {"sha": "19085730aaf064e35fc96ae0ff06765d7ef3e0cd", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/tbx_bf16.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Ftbx_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Ftbx_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Ftbx_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** tbx_bf16_tied1:\n+**\ttbx\tz0\\.h, z1\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (tbx_bf16_tied1, svbfloat16_t, svuint16_t,\n+\t     z0 = svtbx_bf16 (z0, z1, z4),\n+\t     z0 = svtbx (z0, z1, z4))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z (tbx_bf16_tied2, svbfloat16_t, svuint16_t,\n+\t     z0 = svtbx_bf16 (z1, z0, z4),\n+\t     z0 = svtbx (z1, z0, z4))\n+\n+/* Bad RA choice: no preferred output sequence.  */\n+TEST_DUAL_Z_REV (tbx_bf16_tied3, svbfloat16_t, svuint16_t,\n+\t\t z0_res = svtbx_bf16 (z4, z5, z0),\n+\t\t z0_res = svtbx (z4, z5, z0))\n+\n+/*\n+** tbx_bf16_untied:\n+** (\n+**\tmov\tz0\\.d, z1\\.d\n+**\ttbx\tz0\\.h, z2\\.h, z4\\.h\n+** |\n+**\ttbx\tz1\\.h, z2\\.h, z4\\.h\n+**\tmov\tz0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (tbx_bf16_untied, svbfloat16_t, svuint16_t,\n+\t     z0 = svtbx_bf16 (z1, z2, z4),\n+\t     z0 = svtbx (z1, z2, z4))"}, {"sha": "a0e101d3cd2b2228b52e659426d57c986847426d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/whilerw_bf16.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fwhilerw_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fwhilerw_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fwhilerw_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** whilerw_rr_bf16:\n+**\twhilerw\tp0\\.h, x0, x1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilerw_rr_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilerw_bf16 (x0, x1),\n+\t\tp0 = svwhilerw (x0, x1))\n+\n+/*\n+** whilerw_0r_bf16:\n+**\twhilerw\tp0\\.h, xzr, x1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilerw_0r_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilerw_bf16 ((const bfloat16_t *) 0, x1),\n+\t\tp0 = svwhilerw ((const bfloat16_t *) 0, x1))\n+\n+/*\n+** whilerw_cr_bf16:\n+**\tmov\t(x[0-9]+), #?1073741824\n+**\twhilerw\tp0\\.h, \\1, x1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilerw_cr_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilerw_bf16 ((const bfloat16_t *) 1073741824, x1),\n+\t\tp0 = svwhilerw ((const bfloat16_t *) 1073741824, x1))\n+\n+/*\n+** whilerw_r0_bf16:\n+**\twhilerw\tp0\\.h, x0, xzr\n+**\tret\n+*/\n+TEST_COMPARE_S (whilerw_r0_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilerw_bf16 (x0, (const bfloat16_t *) 0),\n+\t\tp0 = svwhilerw (x0, (const bfloat16_t *) 0))\n+\n+/*\n+** whilerw_rc_bf16:\n+**\tmov\t(x[0-9]+), #?1073741824\n+**\twhilerw\tp0\\.h, x0, \\1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilerw_rc_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilerw_bf16 (x0, (const bfloat16_t *) 1073741824),\n+\t\tp0 = svwhilerw (x0, (const bfloat16_t *) 1073741824))"}, {"sha": "895e37691258a5207cb7af6dd02f47b4f872fe5d", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/acle/asm/whilewr_bf16.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fwhilewr_bf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fcd8ac408be56d2a6e67e2e09b26532862f233/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fwhilewr_bf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Facle%2Fasm%2Fwhilewr_bf16.c?ref=02fcd8ac408be56d2a6e67e2e09b26532862f233", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" { target { ! ilp32 } } } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** whilewr_rr_bf16:\n+**\twhilewr\tp0\\.h, x0, x1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilewr_rr_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilewr_bf16 (x0, x1),\n+\t\tp0 = svwhilewr (x0, x1))\n+\n+/*\n+** whilewr_0r_bf16:\n+**\twhilewr\tp0\\.h, xzr, x1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilewr_0r_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilewr_bf16 ((const bfloat16_t *) 0, x1),\n+\t\tp0 = svwhilewr ((const bfloat16_t *) 0, x1))\n+\n+/*\n+** whilewr_cr_bf16:\n+**\tmov\t(x[0-9]+), #?1073741824\n+**\twhilewr\tp0\\.h, \\1, x1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilewr_cr_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilewr_bf16 ((const bfloat16_t *) 1073741824, x1),\n+\t\tp0 = svwhilewr ((const bfloat16_t *) 1073741824, x1))\n+\n+/*\n+** whilewr_r0_bf16:\n+**\twhilewr\tp0\\.h, x0, xzr\n+**\tret\n+*/\n+TEST_COMPARE_S (whilewr_r0_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilewr_bf16 (x0, (const bfloat16_t *) 0),\n+\t\tp0 = svwhilewr (x0, (const bfloat16_t *) 0))\n+\n+/*\n+** whilewr_rc_bf16:\n+**\tmov\t(x[0-9]+), #?1073741824\n+**\twhilewr\tp0\\.h, x0, \\1\n+**\tret\n+*/\n+TEST_COMPARE_S (whilewr_rc_bf16, const bfloat16_t *,\n+\t\tp0 = svwhilewr_bf16 (x0, (const bfloat16_t *) 1073741824),\n+\t\tp0 = svwhilewr (x0, (const bfloat16_t *) 1073741824))"}]}