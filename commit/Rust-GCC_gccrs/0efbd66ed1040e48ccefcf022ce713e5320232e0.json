{"sha": "0efbd66ed1040e48ccefcf022ce713e5320232e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmYmQ2NmVkMTA0MGU0OGNjZWZjZjAyMmNlNzEzZTUzMjAyMzJlMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-06-15T13:54:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-06-15T13:54:36Z"}, "message": "[objective-c/c++, testsuite, 1/3] Workaround for PR90709.\n\nSince we cannot parse the current NeXT headers, because of PR90709 and its\ndependents, we have a large amount of testsuite noise for Darwin platforms.\nIn order to restore the usefulness of the testsuite, we are going add headers\nwithout the modern syntax elements that trigger the bug, and use these for\ntest runs on newer Darwin.\n\nThe headers are imported from GNUStep, with some local modifications to make\nsure that __BLOCKS__ is honoured as a gate for Apple-style blocks closures.\n\nCF-CFString.h, F-NS*.h are proxy headers that use the installed CoreFoundation\nor Foundation headers on systems <= Darwin12 and the GNUStep headers for newer.\n\n2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR objc/90709\n\t* objc-obj-c++-shared/CF-CFString.h: New.\n\t* objc-obj-c++-shared/F-NSArray.h: New.\n\t* objc-obj-c++-shared/F-NSAutoreleasePool.h: New.\n\t* objc-obj-c++-shared/F-NSObject.h: New.\n\t* objc-obj-c++-shared/F-NSString.h: New.\n\t* objc-obj-c++-shared/F-NSValue.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFArray.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFAvailability.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFBase.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFCharacterSet.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFData.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFDictionary.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFLocale.h: New.\n\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFString.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSArray.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSAutoreleasePool.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSDate.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSEnumerator.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSGeometry.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSObjCRuntime.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSObject.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSRange.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSString.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSValue.h: New.\n\t* objc-obj-c++-shared/GNUStep/Foundation/NSZone.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GNUstep.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSBlocks.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSObjCRuntime.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSVersionMacros.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSArray+GNUstepBase.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSMutableString+GNUstepBase.h:\n\tNew.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSNumber+GNUstepBase.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSObject+GNUstepBase.h: New.\n\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSString+GNUstepBase.h: New.\n\nFrom-SVN: r272325", "tree": {"sha": "099415df022de3ac4e5f39b353f34680bcf97d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099415df022de3ac4e5f39b353f34680bcf97d0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0efbd66ed1040e48ccefcf022ce713e5320232e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efbd66ed1040e48ccefcf022ce713e5320232e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0efbd66ed1040e48ccefcf022ce713e5320232e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efbd66ed1040e48ccefcf022ce713e5320232e0/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00908992f2a78f213d227aea8dbab014a1361df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00908992f2a78f213d227aea8dbab014a1361df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00908992f2a78f213d227aea8dbab014a1361df0"}], "stats": {"total": 9465, "additions": 9465, "deletions": 0}, "files": [{"sha": "f8a1084c4aab8e0f7c8dacb242fa6749e9ae4f5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -1,3 +1,43 @@\n+2019-06-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/90709\n+\t* objc-obj-c++-shared/CF-CFString.h: New.\n+\t* objc-obj-c++-shared/F-NSArray.h: New.\n+\t* objc-obj-c++-shared/F-NSAutoreleasePool.h: New.\n+\t* objc-obj-c++-shared/F-NSObject.h: New.\n+\t* objc-obj-c++-shared/F-NSString.h: New.\n+\t* objc-obj-c++-shared/F-NSValue.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFArray.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFAvailability.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFBase.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFCharacterSet.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFData.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFDictionary.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFLocale.h: New.\n+\t* objc-obj-c++-shared/GNUStep/CoreFoundation/CFString.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSArray.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSAutoreleasePool.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSDate.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSEnumerator.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSGeometry.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSObjCRuntime.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSObject.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSRange.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSString.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSValue.h: New.\n+\t* objc-obj-c++-shared/GNUStep/Foundation/NSZone.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GNUstep.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSBlocks.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSObjCRuntime.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/GSVersionMacros.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSArray+GNUstepBase.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSMutableString+GNUstepBase.h:\n+\tNew.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSNumber+GNUstepBase.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSObject+GNUstepBase.h: New.\n+\t* objc-obj-c++-shared/GNUStep/GNUstepBase/NSString+GNUstepBase.h: New.\n+\n 2019-06-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/90779"}, {"sha": "626001bb1fa1babec2ecf0336620d4b6824b036d", "filename": "gcc/testsuite/objc-obj-c++-shared/CF-CFString.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FCF-CFString.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FCF-CFString.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FCF-CFString.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_CF_CFSTRING_H_\n+#define _OBJC_CF_CFSTRING_H_\n+\n+/* This is a workaround to PR90709 for the NeXT runtime.\n+   If we're on a system version that has headers with items we can't\n+   consume, then use the GNUStep header instead.\n+*/\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090\n+#  import \"GNUStep/CoreFoundation/CFString.h\"\n+#else \n+#  import <CoreFoundation/CFString.h>\n+#endif\n+\n+#endif /* _OBJC_CF_CFSTRING_H_ */"}, {"sha": "99b6189c1033e9ab632845c8e4be10b33268b1da", "filename": "gcc/testsuite/objc-obj-c++-shared/F-NSArray.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSArray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSArray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSArray.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_F_NSARRAY_H_\n+#define _OBJC_F_NSARRAY_H_\n+\n+/* This is a workaround to PR90709 for the NeXT runtime.\n+   If we're on a system version that has headers with items we can't\n+   consume, then use the GNUStep header instead.\n+*/\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090\n+#  import \"GNUStep/Foundation/NSArray.h\"\n+#else \n+#  import <Foundation/NSArray.h>\n+#endif\n+\n+#endif /* _OBJC_F_NSARRAY_H_ */"}, {"sha": "17599e8dfa0d4154b746508268f9dc5c11afc116", "filename": "gcc/testsuite/objc-obj-c++-shared/F-NSAutoreleasePool.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSAutoreleasePool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSAutoreleasePool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSAutoreleasePool.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_F_NSAUTORELEASEPOOL_H_\n+#define _OBJC_F_NSAUTORELEASEPOOL_H_\n+\n+/* This is a workaround to PR90709 for the NeXT runtime.\n+   If we're on a system version that has headers with items we can't\n+   consume, then use the GNUStep header instead.\n+*/\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090\n+#  import \"GNUStep/Foundation/NSAutoreleasePool.h\"\n+#else \n+#  import <Foundation/NSAutoreleasePool.h>\n+#endif\n+\n+#endif /* _OBJC_F_NSAUTORELEASEPOOL_H_ */"}, {"sha": "a372d607b1d0364dcd3399ae83503a4cdd3070d7", "filename": "gcc/testsuite/objc-obj-c++-shared/F-NSObject.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSObject.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_F_NSOBJECT_H_\n+#define _OBJC_F_NSOBJECT_H_\n+\n+/* This is a workaround to PR90709 for the NeXT runtime.\n+   If we're on a system version that has headers with items we can't\n+   consume, then use the GNUStep header instead.\n+*/\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090\n+#  import \"GNUStep/Foundation/NSObject.h\"\n+#else \n+#  import <Foundation/NSObject.h>\n+#endif\n+\n+#endif /* _OBJC_F_NSOBJECT_H_ */"}, {"sha": "5c29398eab790377152885d069d2bf434d882dc5", "filename": "gcc/testsuite/objc-obj-c++-shared/F-NSString.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSString.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSString.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSString.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_F_NSSTRING_H_\n+#define _OBJC_F_NSSTRING_H_\n+\n+/* This is a workaround to PR90709 for the NeXT runtime.\n+   If we're on a system version that has headers with items we can't\n+   consume, then use the GNUStep header instead.\n+*/\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090\n+#  import \"GNUStep/Foundation/NSString.h\"\n+#else \n+#  import <Foundation/NSString.h>\n+#endif\n+\n+#endif /* _OBJC_F_NSSTRING_H_ */"}, {"sha": "fbe2ab34592b9a984d819e1319697e8db72691f8", "filename": "gcc/testsuite/objc-obj-c++-shared/F-NSValue.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FF-NSValue.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _OBJC_F_NSSTRING_H_\n+#define _OBJC_F_NSSTRING_H_\n+\n+/* This is a workaround to PR90709 for the NeXT runtime.\n+   If we're on a system version that has headers with items we can't\n+   consume, then use the GNUStep header instead.\n+*/\n+\n+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1090\n+#  import \"GNUStep/Foundation/NSValue.h\"\n+#else \n+#  import <Foundation/NSValue.h>\n+#endif\n+\n+#endif /* _OBJC_F_NSSTRING_H_ */"}, {"sha": "0145855dbb41166cefab2f72fbddb56ebdfd11fa", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFArray.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFArray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFArray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFArray.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,191 @@\n+/* CFArray.h\n+   \n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   \n+   Written by: Stefan Bidigaray\n+   Date: January, 2010\n+   \n+   This file is part of CoreBase.\n+   \n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+\n+#ifndef __COREFOUNDATION_CFARRAY_H__\n+#define __COREFOUNDATION_CFARRAY_H__\n+\n+#include \"CFBase.h\"\n+\n+CF_EXTERN_C_BEGIN\n+/** \\ingroup CFArrayRef\n+    \\brief Reference to an immutable array object.\n+ */\n+typedef const struct __CFArray *CFArrayRef;\n+/**\n+    \\ingroup CFMutableArrayRef\n+    \\brief Reference to a mutable array object.\n+ */\n+typedef struct __CFArray *CFMutableArrayRef;\n+\n+/** \\defgroup CFArrayRef CFArray Reference\n+    \\brief A CFArray and its mutable type, \\ref CFMutableArrayRef\n+      \"CFMutableArray\", are simple, low overhead, ordered containers for\n+      objects.\n+    \\details\n+      <code>\\#include <CoreFoundation/CFArray.h></code>\n+    \\{\n+ */\n+\n+/** \\name Callbacks\n+    \\{\n+ */\n+typedef void (*CFArrayApplierFunction) (const void *value, void *context);\n+typedef CFStringRef (*CFArrayCopyDescriptionCallBack) (const void *value);\n+typedef void (*CFArrayReleaseCallBack) (CFAllocatorRef allocator,\n+                                        const void *value);\n+typedef const void *(*CFArrayRetainCallBack) (CFAllocatorRef allocator,\n+                                              const void *value);\n+typedef Boolean (*CFArrayEqualCallBack) (const void *value1,\n+                                         const void *value2);\n+/** \\} */\n+\n+/** \\brief Structure with CFArray callbacks.\n+ */\n+typedef struct _CFArrayCallBacks CFArrayCallBacks;\n+struct _CFArrayCallBacks\n+{\n+  CFIndex version; /**< Structure's version number.  Current version is 0. */\n+  CFArrayRetainCallBack retain;\n+    /**< The callback used to retain values added to the array.  If NULL,\n+\t values are not retained. */\n+  CFArrayReleaseCallBack release;\n+  CFArrayCopyDescriptionCallBack copyDescription;\n+  CFArrayEqualCallBack equal;\n+};\n+\n+/** \\name Predefined Callback Structures\n+    \\{\n+ */\n+CF_EXPORT const CFArrayCallBacks kCFTypeArrayCallBacks;\n+/** \\} */\n+\n+\n+\n+/** \\name Creating an Array\n+    \\{\n+ */\n+CF_EXPORT CFArrayRef\n+CFArrayCreate (CFAllocatorRef allocator, const void **values,\n+               CFIndex numValues, const CFArrayCallBacks * callBacks);\n+\n+CF_EXPORT CFArrayRef\n+CFArrayCreateCopy (CFAllocatorRef allocator, CFArrayRef theArray);\n+/** \\} */\n+\n+/** \\name Examining an Array\n+    \\{\n+ */\n+CF_EXPORT CFIndex\n+CFArrayBSearchValues (CFArrayRef theArray, CFRange range, const void *value,\n+                      CFComparatorFunction comparator, void *context);\n+\n+CF_EXPORT Boolean\n+CFArrayContainsValue (CFArrayRef theArray, CFRange range, const void *value);\n+\n+CF_EXPORT CFIndex CFArrayGetCount (CFArrayRef theArray);\n+\n+CF_EXPORT CFIndex\n+CFArrayGetCountOfValue (CFArrayRef theArray, CFRange range, const void *value);\n+\n+CF_EXPORT CFIndex\n+CFArrayGetFirstIndexOfValue (CFArrayRef theArray, CFRange range,\n+                             const void *value);\n+\n+CF_EXPORT CFIndex\n+CFArrayGetLastIndexOfValue (CFArrayRef theArray, CFRange range,\n+                            const void *value);\n+\n+CF_EXPORT void\n+CFArrayGetValues (CFArrayRef theArray, CFRange range, const void **values);\n+\n+CF_EXPORT const void *CFArrayGetValueAtIndex (CFArrayRef theArray, CFIndex idx);\n+/** \\} */\n+\n+/** \\name Applying a Function to Elements\n+    \\{\n+ */\n+CF_EXPORT void\n+CFArrayApplyFunction (CFArrayRef theArray, CFRange range,\n+                      CFArrayApplierFunction applier, void *context);\n+/** \\} */\n+\n+/** \\name Getting the CFArray Type ID\n+    \\{\n+ */\n+CF_EXPORT CFTypeID CFArrayGetTypeID (void);\n+/** \\} */\n+\n+/** \\} */\n+\n+/** \\defgroup CFMutableArrayRef CFMutableArray Reference\n+    \\details <code>\\#include <CoreFoundation/CFArray.h></code>\n+    \\{\n+ */\n+CF_EXPORT void\n+CFArrayAppendArray (CFMutableArrayRef theArray, CFArrayRef otherArray,\n+                    CFRange otherRange);\n+\n+CF_EXPORT void\n+CFArrayAppendValue (CFMutableArrayRef theArray, const void *value);\n+\n+CF_EXPORT CFMutableArrayRef\n+CFArrayCreateMutable (CFAllocatorRef allocator, CFIndex capacity,\n+                      const CFArrayCallBacks * callBacks);\n+\n+CF_EXPORT CFMutableArrayRef\n+CFArrayCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity,\n+                          CFArrayRef theArray);\n+\n+CF_EXPORT void\n+CFArrayExchangeValuesAtIndices (CFMutableArrayRef theArray, CFIndex idx1,\n+                                CFIndex idx2);\n+\n+CF_EXPORT void\n+CFArrayInsertValueAtIndex (CFMutableArrayRef theArray, CFIndex idx,\n+                           const void *value);\n+\n+CF_EXPORT void CFArrayRemoveAllValues (CFMutableArrayRef theArray);\n+\n+CF_EXPORT void\n+CFArrayRemoveValueAtIndex (CFMutableArrayRef theArray, CFIndex idx);\n+\n+CF_EXPORT void\n+CFArrayReplaceValues (CFMutableArrayRef theArray, CFRange range,\n+                      const void **newValues, CFIndex newCount);\n+\n+CF_EXPORT void\n+CFArraySetValueAtIndex (CFMutableArrayRef theArray, CFIndex idx,\n+                        const void *value);\n+\n+CF_EXPORT void\n+CFArraySortValues (CFMutableArrayRef theArray, CFRange range,\n+                   CFComparatorFunction comparator, void *context);\n+\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+#endif /* __COREFOUNDATION_CFARRAY_H__ */"}, {"sha": "855ff5c48a98af2f8262d3bd37e9ab0e273d8dc6", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFAvailability.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFAvailability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFAvailability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFAvailability.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,52 @@\n+/* CFAvailability.h\n+   \n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+   \n+   Written by: Stefan Bidigaray\n+   Date: August, 2017\n+   \n+   This file is part of the GNUstep CoreBase Library.\n+   \n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+\n+#ifndef __COREFOUNDATION_CFAVAILABILITY_H__\n+#define __COREFOUNDATION_CFAVAILABILITY_H__\n+\n+/* Compiler features */\n+#ifndef __has_feature\n+#define __has_feature(x) 0\n+#endif\n+#ifndef __has_attribute\n+#define __has_attribute(x) 0\n+#endif\n+#ifndef __has_extension\n+#define __has_extension(x) __has_feature\n+#endif\n+\n+/* CFEnum macro for type definitions */\n+#if (__cplusplus && __cplusplus >= 201103L)\n+#define CF_ENUM(_type, _name) _type _name; enum : _type\n+#define CF_OPTIONS(_type, _name) _type _name; enum : _type\n+#else\n+#define CF_ENUM(_type, _name) _type _name; enum\n+#define CF_OPTIONS(_type, _name) _type _name; enum\n+#endif\n+\n+#endif /* __COREFOUNDATION_CFAVAILABILITY_H__ */\n+"}, {"sha": "2df7b2925b2fd7b72d68a0f41e0fd2780ea02196", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFBase.h", "status": "added", "additions": 464, "deletions": 0, "changes": 464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFBase.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,464 @@\n+/* CFBase.h\n+   \n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   \n+   Written by: Stefan Bidigaray\n+   Date: January, 2010\n+   \n+   This file is part of the GNUstep CoreBase Library.\n+   \n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+\n+#ifndef __COREFOUNDATION_CFBASE_H__\n+#define __COREFOUNDATION_CFBASE_H__\n+\n+/* CoreFoundation defines __LITTLE_ENDIAN__ or __BIG_ENDIAN__ so we'll\n+ * do the same here for compatibility.\n+ */\n+#if !defined(__LITTLE_ENDIAN__) && !defined(__BIG_ENDIAN__)\n+#define __LITTLE_ENDIAN__ 1\n+#endif\n+\n+#include \"CFAvailability.h\"\n+#include \"../GNUstepBase/GSVersionMacros.h\"\n+\n+/*\n+ * CoreFoundation types\n+ */\n+typedef unsigned char Boolean;\n+typedef unsigned char UInt8;\n+typedef signed char SInt8;\n+typedef unsigned short UInt16;\n+typedef signed short SInt16;\n+typedef unsigned int UInt32;\n+typedef signed int SInt32;\n+typedef unsigned long long UInt64;\n+typedef signed long long SInt64;\n+typedef SInt32 OSStatus;\n+\n+typedef float Float32;\n+typedef double Float64;\n+typedef UInt16 UniChar;\n+typedef UInt8 *StringPtr;\n+typedef const StringPtr *ConstStringPtr;\n+typedef UInt8 Str255[256];\n+typedef const Str255 *ConstStr255Param;\n+typedef SInt16 OSErr;\n+typedef SInt16 RegionCode;\n+typedef SInt16 LangCode;\n+typedef SInt16 ScriptCode;\n+typedef UInt32 FourCharCode;\n+#ifndef OSTYPE_DECLARED\n+typedef FourCharCode OSType;\n+#define OSTYPE_DECLARED\n+#endif\n+typedef UInt8 Byte;\n+typedef SInt8 SignedByte;\n+\n+#ifndef UTF32Char               /* UTF32Char is also defined in GSConfig.h */\n+typedef UInt32 UTF32Char;\n+#endif\n+typedef UInt16 UTF16Char;\n+typedef UInt8 UTF8Char;\n+\n+#if !defined(CF_EXTERN_C_BEGIN)\n+#if defined(__cplusplus)\n+#define CF_EXTERN_C_BEGIN extern \"C\" {\n+#define CF_EXTERN_C_END }\n+#else\n+#define CF_EXTERN_C_BEGIN\n+#define CF_EXTERN_C_END\n+#endif\n+#endif\n+\n+#if defined(_WIN32)\n+#if defined(BUILDING_SELF)\n+#if defined(__cplusplus)\n+#define CF_EXPORT extern \"C\" __declspec(dllexport)\n+#else\n+#define CF_EXPORT extern __declspec(dllexport)\n+#endif\n+#else\n+#if defined(__cplusplus)\n+#define CF_EXPORT extern \"C\" __declspec(dllimport)\n+#else\n+#define CF_EXPORT extern __declspec(dllimport)\n+#endif\n+#endif\n+#else\n+#if defined(__cplusplus)\n+#define CF_EXPORT extern \"C\"\n+#else\n+#define CF_EXPORT extern\n+#endif\n+#endif\n+\n+#if !defined(__bool_true_false_are_defined)\n+#define true 1\n+#define false 0\n+#endif\n+\n+#ifndef TRUE\n+#define TRUE  1\n+#endif\n+#ifndef FALSE\n+#define FALSE 0\n+#endif\n+\n+#if !defined(CF_INLINE)\n+#if defined(__GNUC__) && (__GNUC__ >= 4)\n+#define CF_INLINE static __inline__ __attribute__((always_inline))\n+#elif defined(__GNUC__)\n+#define CF_INLINE static __inline__\n+#elif defined(__MWERKS__) || defined(__cplusplus)\n+#define CF_INLINE static inline\n+#elif defined(_MSC_VER)\n+#define CF_INLINE static __inline\n+#elif _WIN32\n+#define CF_INLINE static __inline__\n+#else\n+#define CF_INLINE static inline\n+#endif\n+#endif\n+\n+#if defined(__GNUC__) || defined(__llvm__)\n+#define GS_PURE_FUNCTION __attribute__((pure))\n+#else\n+#define GS_PURE_FUNCTION\n+#endif\n+\n+CF_EXTERN_C_BEGIN\n+/** \\defgroup CFTypeRef CFType Reference\n+    \\{\n+ */\n+typedef unsigned long CFTypeID;\n+typedef const void *CFTypeRef;\n+/** @}\n+ */\n+\n+/** \\defgroup BaseUtils Base Utilities\n+    \\{\n+ */\n+/** An integer value to store a hash code. */\n+typedef unsigned long CFHashCode;\n+/** A bitfield for passing information to functions.  Can hold as many bits\n+    as a word.\n+ */\n+typedef unsigned long CFOptionFlags;\n+/** A signed integer representing an index, size, length or count. */\n+typedef signed long CFIndex;\n+\n+/** A structure that represents a range of items in a container, such as\n+    an array.\n+ */\n+typedef struct CFRange CFRange;\n+struct CFRange\n+{\n+  CFIndex location;\n+    /**< An integer representing the start location of the range, inclusive. */\n+  CFIndex length;\n+    /**< An integer representing the total number of items in the range */\n+};\n+\n+/** Creates a CFRange structure.\n+    \\param location The starting location.\n+    \\param length The length.\n+    \\return An initialized CFRange structure.\n+ */\n+CF_INLINE CFRange\n+CFRangeMake (CFIndex location, CFIndex length)\n+{\n+  CFRange range;\n+\n+  range.location = location;\n+  range.length = length;\n+  return range;\n+}\n+\n+/* Returned by comparison functions */\n+typedef enum\n+{\n+  kCFCompareLessThan = -1,\n+  kCFCompareEqualTo = 0,\n+  kCFCompareGreaterThan = 1\n+} CFComparisonResult;\n+\n+/* Return when a value is not found */\n+enum\n+{\n+  kCFNotFound = -1\n+};\n+\n+/* Definition for standard comparison function callback. */\n+typedef CFComparisonResult (*CFComparatorFunction) (const void *val1,\n+                                                    const void *val2,\n+                                                    void *context);\n+\n+/* CoreFoundation version numbers */\n+/** \\name Library Version Numbers\n+    \\{\n+ */\n+CF_EXPORT const double kCFCoreFoundationVersionNumber;\n+#define kCFCoreFoundationVersionNumber10_0    196.40\n+#define kCFCoreFoundationVersionNumber10_0_3  196.50\n+#define kCFCoreFoundationVersionNumber10_1    226.00\n+#define kCFCoreFoundationVersionNumber10_1_1  226.00\n+#define kCFCoreFoundationVersionNumber10_1_2  227.20\n+#define kCFCoreFoundationVersionNumber10_1_3  227.20\n+#define kCFCoreFoundationVersionNumber10_1_4  227.30\n+#define kCFCoreFoundationVersionNumber10_2    263.00\n+#define kCFCoreFoundationVersionNumber10_2_1  263.10\n+#define kCFCoreFoundationVersionNumber10_2_2  263.10\n+#define kCFCoreFoundationVersionNumber10_2_3  263.30\n+#define kCFCoreFoundationVersionNumber10_2_4  263.30\n+#define kCFCoreFoundationVersionNumber10_2_5  263.50\n+#define kCFCoreFoundationVersionNumber10_2_6  263.50\n+#define kCFCoreFoundationVersionNumber10_2_7  263.50\n+#define kCFCoreFoundationVersionNumber10_2_8  263.50\n+#define kCFCoreFoundationVersionNumber10_3    299.00\n+#define kCFCoreFoundationVersionNumber10_3_1  299.00\n+#define kCFCoreFoundationVersionNumber10_3_2  299.00\n+#define kCFCoreFoundationVersionNumber10_3_3  299.30\n+#define kCFCoreFoundationVersionNumber10_3_4  299.31\n+#define kCFCoreFoundationVersionNumber10_3_5  299.31\n+#define kCFCoreFoundationVersionNumber10_3_6  299.32\n+#define kCFCoreFoundationVersionNumber10_3_7  299.33\n+#define kCFCoreFoundationVersionNumber10_3_8  299.33\n+#define kCFCoreFoundationVersionNumber10_3_9  299.35\n+#define kCFCoreFoundationVersionNumber10_4    368.00\n+#define kCFCoreFoundationVersionNumber10_4_1  368.10\n+#define kCFCoreFoundationVersionNumber10_4_2  368.11\n+#define kCFCoreFoundationVersionNumber10_4_3  368.18\n+#define kCFCoreFoundationVersionNumber10_4_4_Intel   368.26\n+#define kCFCoreFoundationVersionNumber10_4_4_PowerPC 368.25\n+#define kCFCoreFoundationVersionNumber10_4_5_Intel   368.26\n+#define kCFCoreFoundationVersionNumber10_4_5_PowerPC 368.25\n+#define kCFCoreFoundationVersionNumber10_4_6_Intel   368.26\n+#define kCFCoreFoundationVersionNumber10_4_6_PowerPC 368.25\n+#define kCFCoreFoundationVersionNumber10_4_7  368.27\n+#define kCFCoreFoundationVersionNumber10_4_8  368.27\n+#define kCFCoreFoundationVersionNumber10_4_9  368.28\n+#define kCFCoreFoundationVersionNumber10_4_10 368.28\n+#define kCFCoreFoundationVersionNumber10_4_11 368.31\n+#define kCFCoreFoundationVersionNumber10_5    476.00\n+#define kCFCoreFoundationVersionNumber10_5_1  476.00\n+#define kCFCoreFoundationVersionNumber10_5_2  476.10\n+#define kCFCoreFoundationVersionNumber10_5_3  476.13\n+#define kCFCoreFoundationVersionNumber10_5_4  476.14\n+#define kCFCoreFoundationVersionNumber10_5_5  476.15\n+#define kCFCoreFoundationVersionNumber10_5_6  476.17\n+/** \\} */\n+/** \\} */\n+\n+#if __has_feature(attribute_cf_returns_retained)\n+#define CF_RETURNS_RETAINED __attribute__((cf_returns_retained))\n+#else\n+#define CF_RETURNS_RETAINED\n+#endif\n+\n+#if __has_feature(attribute_cf_returns_not_retained)\n+#define CF_RETURNS_NOT_RETAINED __attribute__((cf_returns_not_retained))\n+#else\n+#define CF_RETURNS_NOT_RETAINED\n+#endif\n+\n+/** \\ingroup CFPropertyListRef\n+ */\n+typedef CFTypeRef CFPropertyListRef;\n+\n+/** \\ingroup CFStringRef\n+ */\n+typedef const struct __CFString *CFStringRef;\n+/** \\ingroup CFMutableStringRef\n+ */\n+typedef struct __CFString *CFMutableStringRef;\n+\n+\n+\n+/** \\defgroup CFAllocatorRef CFAllocator Reference\n+    \\brief CFAllocator is an opaque type used to allocate and deallocate\n+    memory.\n+    \\{\n+ */\n+/** \\brief A reference to a CFAllocator object.\n+ */\n+typedef const struct __CFAllocator *CFAllocatorRef;\n+\n+typedef void *(*CFAllocatorAllocateCallBack) (CFIndex allocSize,\n+                                              CFOptionFlags hint, void *info);\n+typedef void (*CFAllocatorDeallocateCallBack) (void *ptr, void *info);\n+typedef void *(*CFAllocatorReallocateCallBack) (void *ptr,\n+                                                CFIndex newsize,\n+                                                CFOptionFlags hint, void *info);\n+typedef CFIndex (*CFAllocatorPreferredSizeCallBack) (CFIndex size,\n+                                                     CFOptionFlags hint,\n+                                                     void *info);\n+typedef const void *(*CFAllocatorRetainCallBack) (const void *info);\n+typedef void (*CFAllocatorReleaseCallBack) (const void *info);\n+typedef CFStringRef (*CFAllocatorCopyDescriptionCallBack) (const void *info);\n+\n+struct _CFAllocatorContext\n+{\n+  CFIndex version;\n+  void *info;\n+  CFAllocatorRetainCallBack retain;\n+  CFAllocatorReleaseCallBack release;\n+  CFAllocatorCopyDescriptionCallBack copyDescription;\n+  CFAllocatorAllocateCallBack allocate;\n+  CFAllocatorReallocateCallBack reallocate;\n+  CFAllocatorDeallocateCallBack deallocate;\n+  CFAllocatorPreferredSizeCallBack preferredSize;\n+};\n+typedef struct _CFAllocatorContext CFAllocatorContext;\n+\n+/** The default allocator and is equivalent to NULL.\n+    \\see CFAllocatorGetDefault()\n+    \\see CFAllocatorSetDefault()\n+ */\n+CF_EXPORT CFAllocatorRef kCFAllocatorDefault;\n+/** The default system allocator is used internally by GNUstep and is the\n+    default allocator if none is been defined.\n+    \\see CFAllocatorSetDefault()\n+ */\n+CF_EXPORT CFAllocatorRef kCFAllocatorSystemDefault;\n+/** An allocator that uses the system's malloc, realloc and free functions.\n+ */\n+CF_EXPORT CFAllocatorRef kCFAllocatorMalloc;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+/** Equivalent to kCFAllocatorSystemDefault\n+ */\n+CF_EXPORT CFAllocatorRef kCFAllocatorMallocZone;\n+#endif\n+/** The NULL allocator does perform any operations.  Can be passed as\n+    a deallocator if you do not want GNUstep to deallocate the data.\n+ */\n+CF_EXPORT CFAllocatorRef kCFAllocatorNull;\n+/** This is a special case allocator directing CFAllocatorCreate() to use\n+    the given CFAllocatorContext structure to allocate the new allocator.\n+ */\n+CF_EXPORT CFAllocatorRef kCFAllocatorUseContext;\n+\n+/** Create a new CFAllocator.\n+    \\param allocator The allocator used to create this allocator or\n+      kCFAllocatorUseContext to use the functions in \\b context.\n+    \\param context The new allocator's context functions.\n+    \\return A new CFAllocator or NULL in case of failure.\n+    \\see CFAllocatorContext\n+ */\n+CF_EXPORT CFAllocatorRef\n+CFAllocatorCreate (CFAllocatorRef allocator, CFAllocatorContext * context);\n+\n+/** Allocate new memory.\n+    \\param allocator The CFAllocator to use.\n+    \\param size The number of bytes to allocate.\n+    \\param hint Option flags.  Currently unused and should be 0.\n+    \\return Newly allocated memory of NULL in case of failure.\n+    \\see CFAllocatorDeallocate()\n+ */\n+CF_EXPORT void *CFAllocatorAllocate (CFAllocatorRef allocator, CFIndex size,\n+                                     CFOptionFlags hint);\n+\n+/** Deallocate the memory pointed to by \\b ptr.\n+    \\param allocator The CFAllocator to use.\n+    \\param ptr A pointer previously allocated by CFAllocatorAllocate().\n+    \\see CFAllocatorAllocate()\n+ */\n+CF_EXPORT void CFAllocatorDeallocate (CFAllocatorRef allocator, void *ptr);\n+\n+CF_EXPORT CFIndex\n+CFAllocatorGetPreferredSizeForSize (CFAllocatorRef allocator, CFIndex size,\n+                                    CFOptionFlags hint);\n+\n+CF_EXPORT void *CFAllocatorReallocate (CFAllocatorRef allocator, void *ptr,\n+                                       CFIndex newsize, CFOptionFlags hint);\n+\n+CF_EXPORT CFAllocatorRef CFAllocatorGetDefault (void);\n+\n+CF_EXPORT void CFAllocatorSetDefault (CFAllocatorRef allocator);\n+\n+CF_EXPORT void\n+CFAllocatorGetContext (CFAllocatorRef allocator, CFAllocatorContext * context);\n+\n+CF_EXPORT CFTypeID CFAllocatorGetTypeID (void);\n+/** \\} */\n+\n+\n+\n+/** \\ingroup CFTypeRef\n+    \\{\n+ */\n+/* These function will be implemented in CFRuntime.c since they \n+   require runtime support. */\n+CF_EXPORT CFStringRef CFCopyDescription (CFTypeRef cf);\n+\n+CF_EXPORT CFStringRef CFCopyTypeIDDescription (CFTypeID typeID);\n+\n+CF_EXPORT Boolean CFEqual (CFTypeRef cf1, CFTypeRef cf2);\n+\n+CF_EXPORT CFAllocatorRef CFGetAllocator (CFTypeRef cf);\n+\n+CF_EXPORT CFIndex CFGetRetainCount (CFTypeRef cf);\n+\n+CF_EXPORT CFTypeID CFGetTypeID (CFTypeRef cf);\n+\n+CF_EXPORT CFHashCode CFHash (CFTypeRef cf);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT CFTypeRef CFMakeCollectable (CFTypeRef cf);\n+#endif\n+\n+CF_EXPORT void CFRelease (CFTypeRef cf);\n+\n+CF_EXPORT CFTypeRef CFRetain (CFTypeRef cf);\n+\n+CF_EXPORT CFTypeRef CFAutorelease(CFTypeRef arg);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_7, GS_API_LATEST)\n+CF_EXPORT void *_CFBridgingRelease (CFTypeRef cf);\n+CF_EXPORT CFTypeRef _CFBridgingRetain (void *obj);\n+\n+#if __has_feature(objc_arc)\n+#define CFBridgingRetain(x) (__bridge_retained CFTypeRef)(x)\n+#define CFBridgingRelease(x) (__bridge_transfer id)(x)\n+#elif __OBJC__\n+#define CFBridgingRetain(x) _CFBridgingRetain((void *)(x))\n+#define CFBridgingRelease(x) (id)_CFBridgingRelease((x))\n+#else\n+#define CFBridgingRetain(x) _CFBridgingRetain((void *)(x))\n+#define CFBridgingRelease(x) _CFBridgingRelease((x))\n+#endif\n+#endif\n+/** \\} */\n+\n+\n+\n+/** \\defgroup CFNullRef CFNull Reference\n+    \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+typedef struct __CFNull *CFNullRef;\n+\n+CF_EXPORT CFNullRef kCFNull;\n+\n+CFTypeID CFNullGetTypeID (void);\n+#endif\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+#endif /* __COREFOUNDATION_CFBASE_H__ */"}, {"sha": "1cb6c66cac8f08511aeb0ecb50a5fe83d0b66390", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFCharacterSet.h", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFCharacterSet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFCharacterSet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFCharacterSet.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,173 @@\n+/* CFCharacterSet.h\n+   \n+   Copyright (C) 2012 Free Software Foundation, Inc.\n+   \n+   Written by: Stefan Bidigaray\n+   Date: January, 2012\n+   \n+   This file is part of the GNUstep CoreBase Library.\n+   \n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+#ifndef __COREFOUNDATION_CFCHARACTERSET_H__\n+#define __COREFOUNDATION_CFCHARACTERSET_H__\n+\n+#include \"CFBase.h\"\n+#include \"CFData.h\"\n+\n+CF_EXTERN_C_BEGIN\n+\n+/** \\ingroup CFCharacterSetRef */\n+typedef const struct __CFCharacterSet * CFCharacterSetRef;\n+/** \\ingroup CFMutableCharacterSetRef */\n+typedef struct __CFCharacterSet * CFMutableCharacterSetRef;\n+\n+/** \\defgroup CFCharacterSetRef CFCharacterSet Reference\n+    \\{\n+ */\n+typedef enum\n+{\n+  kCFCharacterSetControl = 1,\n+  kCFCharacterSetWhitespace,\n+  kCFCharacterSetWhitespaceAndNewline,\n+  kCFCharacterSetDecimalDigit,\n+  kCFCharacterSetLetter,\n+  kCFCharacterSetLowercaseLetter,\n+  kCFCharacterSetUppercaseLetter,\n+  kCFCharacterSetNonBase,\n+  kCFCharacterSetDecomposable,\n+  kCFCharacterSetAlphaNumeric,\n+  kCFCharacterSetPunctuation,\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+  kCFCharacterSetCapitalizedLetter = 13,\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_3, GS_API_LATEST)\n+  kCFCharacterSetSymbol = 14,\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+  kCFCharacterSetNewline = 15,\n+#endif\n+  kCFCharacterSetIllegal = 12\n+} CFCharacterSetPredefinedSet;\n+\n+\n+\n+/** \\name Creating Character Sets\n+    \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_3, GS_API_LATEST)\n+CF_EXPORT CFCharacterSetRef\n+CFCharacterSetCreateCopy (CFAllocatorRef alloc, CFCharacterSetRef set);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+CF_EXPORT CFCharacterSetRef\n+CFCharacterSetCreateInvertedSet (CFAllocatorRef alloc, CFCharacterSetRef set);\n+#endif\n+\n+CF_EXPORT CFCharacterSetRef\n+CFCharacterSetCreateWithCharactersInRange (CFAllocatorRef alloc,\n+  CFRange range);\n+\n+CF_EXPORT CFCharacterSetRef\n+CFCharacterSetCreateWithCharactersInString (CFAllocatorRef alloc,\n+  CFStringRef string);\n+\n+CF_EXPORT CFCharacterSetRef\n+CFCharacterSetCreateWithBitmapRepresentation (CFAllocatorRef alloc,\n+  CFDataRef data);\n+/** \\} */\n+\n+/** \\name Getting Predefined Character Sets\n+    \\{\n+ */\n+CF_EXPORT CFCharacterSetRef\n+CFCharacterSetGetPredefined (CFCharacterSetPredefinedSet setIdentifier);\n+/** \\} */\n+\n+/** \\name Querying Character Sets\n+    \\{\n+ */\n+CF_EXPORT CFDataRef\n+CFCharacterSetCreateBitmapRepresentation (CFAllocatorRef alloc,\n+  CFCharacterSetRef set);\n+\n+CF_EXPORT Boolean\n+CFCharacterSetIsCharacterMember (CFCharacterSetRef set, UniChar c);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+CF_EXPORT Boolean\n+CFCharacterSetHasMemberInPlane (CFCharacterSetRef set, CFIndex plane);\n+\n+CF_EXPORT Boolean\n+CFCharacterSetIsLongCharacterMember (CFCharacterSetRef set, UTF32Char c);\n+\n+CF_EXPORT Boolean\n+CFCharacterSetIsSupersetOfSet (CFCharacterSetRef set,\n+  CFCharacterSetRef otherSet);\n+#endif\n+/** \\} */\n+\n+/** \\name Getting the Character Set Type Identifier\n+    \\{\n+ */\n+CF_EXPORT CFTypeID\n+CFCharacterSetGetTypeID (void);\n+/** \\} */\n+/** \\} */\n+\n+/** \\defgroup CFMutableCharacterSetRef CFMutableCharacterSet Reference\n+    \\{\n+ */\n+CF_EXPORT CFMutableCharacterSetRef\n+CFCharacterSetCreateMutable (CFAllocatorRef alloc);\n+\n+CF_EXPORT CFMutableCharacterSetRef\n+CFCharacterSetCreateMutableCopy (CFAllocatorRef alloc, CFCharacterSetRef set);\n+\n+CF_EXPORT void\n+CFCharacterSetAddCharactersInRange (CFMutableCharacterSetRef set,\n+  CFRange range);\n+\n+CF_EXPORT void\n+CFCharacterSetAddCharactersInString (CFMutableCharacterSetRef set,\n+  CFStringRef string);\n+\n+CF_EXPORT void\n+CFCharacterSetRemoveCharactersInRange (CFMutableCharacterSetRef set,\n+  CFRange range);\n+\n+CF_EXPORT void\n+CFCharacterSetRemoveCharactersInString (CFMutableCharacterSetRef set,\n+  CFStringRef string);\n+\n+CF_EXPORT void\n+CFCharacterSetIntersect (CFMutableCharacterSetRef set,\n+  CFCharacterSetRef otherSet);\n+\n+CF_EXPORT void\n+CFCharacterSetInvert (CFMutableCharacterSetRef set);\n+\n+CF_EXPORT void\n+CFCharacterSetUnion (CFMutableCharacterSetRef set, CFCharacterSetRef otherSet);\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+\n+#endif /* __COREFOUNDATION_CFCHARACTERSET_H__ */\n+"}, {"sha": "9e98a6969cd2aea041765dc55bfe5a140ec5063a", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFData.h", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFData.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFData.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFData.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,114 @@\n+/* CFData.h\n+\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+   Written by: Stefan Bidigaray\n+   Date: January, 2010\n+\n+   This file is part of CoreBase.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+#ifndef __COREFOUNDATION_CFDATA_H__\n+#define __COREFOUNDATION_CFDATA_H__\n+\n+#include \"CFBase.h\"\n+\n+CF_EXTERN_C_BEGIN\n+/** \\ingroup CFDataRef */\n+typedef const struct __CFData *CFDataRef;\n+/** \\ingroup CFMutableDataRef */\n+typedef struct __CFData *CFMutableDataRef;\n+\n+/** \\defgroup CFDataRef CFData Reference\n+    \\{\n+ */\n+/** \\name Creating a CFData Object\n+    \\{\n+ */\n+CF_EXPORT CFDataRef\n+CFDataCreate (CFAllocatorRef allocator, const UInt8 * bytes, CFIndex length);\n+\n+CF_EXPORT CFDataRef\n+CFDataCreateCopy (CFAllocatorRef allocator, CFDataRef theData);\n+\n+CF_EXPORT CFDataRef\n+CFDataCreateWithBytesNoCopy (CFAllocatorRef allocator, const UInt8 * bytes,\n+                             CFIndex length, CFAllocatorRef bytesDeallocator);\n+/** \\} */\n+\n+/** \\name Examining a CFData Object\n+    \\{\n+ */\n+CF_EXPORT const UInt8 *CFDataGetBytePtr (CFDataRef theData);\n+\n+CF_EXPORT void\n+CFDataGetBytes (CFDataRef theData, CFRange range, UInt8 * buffer);\n+\n+CF_EXPORT CFIndex CFDataGetLength (CFDataRef theData);\n+/** \\} */\n+\n+/** \\name Getting the CFData Type ID\n+    \\{\n+ */\n+CF_EXPORT CFTypeID CFDataGetTypeID (void);\n+/** \\} */\n+/** \\} */\n+\n+/** \\defgroup CFMutableDataRef CFMutableData Reference\n+    \\{\n+ */\n+/** \\name Creating a Mutable Data Object\n+    \\{\n+ */\n+CF_EXPORT CFMutableDataRef\n+CFDataCreateMutable (CFAllocatorRef allocator, CFIndex capacity);\n+\n+CF_EXPORT CFMutableDataRef\n+CFDataCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity,\n+                         CFDataRef theData);\n+/** \\} */\n+\n+/** \\name Accessing Mutable Data\n+    \\{\n+ */\n+CF_EXPORT UInt8 *CFDataGetMutableBytePtr (CFMutableDataRef theData);\n+/** \\} */\n+\n+/** \\name Modifying a Mutable Data Object\n+    \\{\n+ */\n+CF_EXPORT void\n+CFDataAppendBytes (CFMutableDataRef theData, const UInt8 * bytes,\n+                   CFIndex length);\n+\n+CF_EXPORT void CFDataDeleteBytes (CFMutableDataRef theData, CFRange range);\n+\n+CF_EXPORT void\n+CFDataReplaceBytes (CFMutableDataRef theData, CFRange range,\n+                    const UInt8 * newBytes, CFIndex newLength);\n+\n+CF_EXPORT void\n+CFDataIncreaseLength (CFMutableDataRef theData, CFIndex extraLength);\n+\n+CF_EXPORT void CFDataSetLength (CFMutableDataRef theData, CFIndex length);\n+/** \\} */\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+#endif /* __COREFOUNDATION_CFDATA_H__ */"}, {"sha": "adc0dd8c4b0e09a13638bdb5a613fd3874a2ac87", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFDictionary.h", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFDictionary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFDictionary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFDictionary.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,174 @@\n+/* CFDictionary.h\n+\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+   Written by: Stefan Bidigaray\n+   Date: January, 2010\n+\n+   This file is part of the GNUstep CoreBase Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+#ifndef __COREFOUNDATION_CFDICTIONARY_H__\n+#define __COREFOUNDATION_CFDICTIONARY_H__ 1\n+\n+#include \"CFBase.h\"\n+\n+CF_EXTERN_C_BEGIN\n+/** \\ingroup CFDictionaryRef */\n+typedef const struct __CFDictionary *CFDictionaryRef;\n+/** \\ingroup CFMutableDictionaryRef */\n+typedef struct __CFDictionary *CFMutableDictionaryRef;\n+\n+/** \\defgroup CFDictionaryRef CFDictionary Reference\n+    \\{\n+ */\n+typedef void (*CFDictionaryApplierFunction) (const void *key,\n+                                             const void *value, void *context);\n+\n+typedef CFStringRef (*CFDictionaryCopyDescriptionCallBack) (const void *value);\n+typedef Boolean (*CFDictionaryEqualCallBack) (const void *value1,\n+                                              const void *value2);\n+typedef CFHashCode (*CFDictionaryHashCallBack) (const void *value);\n+typedef void (*CFDictionaryReleaseCallBack) (CFAllocatorRef allocator,\n+                                             const void *value);\n+typedef const void *(*CFDictionaryRetainCallBack) (CFAllocatorRef allocator,\n+                                                   const void *value);\n+\n+typedef struct _CFDictionaryKeyCallBacks CFDictionaryKeyCallBacks;\n+struct _CFDictionaryKeyCallBacks\n+{\n+  CFIndex version;\n+  CFDictionaryRetainCallBack retain;\n+  CFDictionaryReleaseCallBack release;\n+  CFDictionaryCopyDescriptionCallBack copyDescription;\n+  CFDictionaryEqualCallBack equal;\n+  CFDictionaryHashCallBack hash;\n+};\n+\n+typedef struct _CFDictionaryValueCallBacks CFDictionaryValueCallBacks;\n+struct _CFDictionaryValueCallBacks\n+{\n+  CFIndex version;\n+  CFDictionaryRetainCallBack retain;\n+  CFDictionaryReleaseCallBack release;\n+  CFDictionaryCopyDescriptionCallBack copyDescription;\n+  CFDictionaryEqualCallBack equal;\n+};\n+\n+CF_EXPORT const CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks;\n+CF_EXPORT const CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks;\n+CF_EXPORT const CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks;\n+\n+/** \\name Creating a dictionary\n+    \\{\n+ */\n+CF_EXPORT CFDictionaryRef\n+CFDictionaryCreate (CFAllocatorRef allocator, const void **keys,\n+                    const void **values, CFIndex numValues,\n+                    const CFDictionaryKeyCallBacks * keyCallBacks,\n+                    const CFDictionaryValueCallBacks * valueCallBacks);\n+\n+CF_EXPORT CFDictionaryRef\n+CFDictionaryCreateCopy (CFAllocatorRef allocator, CFDictionaryRef theDict);\n+/** \\} */\n+\n+/** \\name Examining a dictionary\n+    \\{\n+ */\n+CF_EXPORT Boolean\n+CFDictionaryContainsKey (CFDictionaryRef theDict, const void *key);\n+\n+CF_EXPORT Boolean\n+CFDictionaryContainsValue (CFDictionaryRef theDict, const void *value);\n+\n+CF_EXPORT CFIndex CFDictionaryGetCount (CFDictionaryRef theDict);\n+\n+CF_EXPORT CFIndex\n+CFDictionaryGetCountOfKey (CFDictionaryRef theDict, const void *key);\n+\n+CF_EXPORT CFIndex\n+CFDictionaryGetCountOfValue (CFDictionaryRef theDict, const void *value);\n+\n+CF_EXPORT void\n+CFDictionaryGetKeysAndValues (CFDictionaryRef theDict, const void **keys,\n+                              const void **values);\n+\n+CF_EXPORT const void *CFDictionaryGetValue (CFDictionaryRef theDict,\n+                                            const void *key);\n+\n+CF_EXPORT Boolean\n+CFDictionaryGetValueIfPresent (CFDictionaryRef theDict, const void *key,\n+                               const void **value);\n+/** \\} */\n+\n+/** \\name Applying a funcation to a dictionary\n+    \\{\n+ */\n+CF_EXPORT void\n+CFDictionaryApplyFunction (CFDictionaryRef theDict,\n+                           CFDictionaryApplierFunction applier, void *context);\n+/** \\} */\n+\n+/** \\name Getting the CFDictionary type ID\n+    \\{\n+ */\n+CF_EXPORT CFTypeID CFDictionaryGetTypeID (void);\n+/** \\} */\n+/** \\} */\n+\n+/** \\defgroup CFMutableDictionaryRef CFMutableDictionary Reference\n+    \\{\n+ */\n+/** \\name Creating a Mutable Dictionary\n+    \\{\n+ */\n+CF_EXPORT CFMutableDictionaryRef\n+CFDictionaryCreateMutable (CFAllocatorRef allocator, CFIndex capacity,\n+                           const CFDictionaryKeyCallBacks * keyCallBacks,\n+                           const CFDictionaryValueCallBacks * valueCallBacks);\n+\n+CF_EXPORT CFMutableDictionaryRef\n+CFDictionaryCreateMutableCopy (CFAllocatorRef allocator, CFIndex capacity,\n+                               CFDictionaryRef theDict);\n+/** \\} */\n+\n+/** \\name Modifying a Dictionary\n+    \\{\n+ */\n+CF_EXPORT void\n+CFDictionaryAddValue (CFMutableDictionaryRef theDict, const void *key,\n+                      const void *value);\n+\n+CF_EXPORT void CFDictionaryRemoveAllValues (CFMutableDictionaryRef theDict);\n+\n+CF_EXPORT void\n+CFDictionaryRemoveValue (CFMutableDictionaryRef theDict, const void *key);\n+\n+CF_EXPORT void\n+CFDictionaryReplaceValue (CFMutableDictionaryRef theDict, const void *key,\n+                          const void *value);\n+\n+CF_EXPORT void\n+CFDictionarySetValue (CFMutableDictionaryRef theDict, const void *key,\n+                      const void *value);\n+/** \\} */\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+#endif /* __COREFOUNDATION_CFDICTIONARY_H__ */"}, {"sha": "7ae082de88652d4b4c4c8267dd2c666de513a2d5", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFLocale.h", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFLocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFLocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFLocale.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,249 @@\n+/* CFLocale.h\n+   \n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   \n+   Written by: Stefan Bidigaray\n+   Date: March, 2011\n+   \n+   This file is part of the GNUstep CoreBase Library.\n+   \n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+#ifndef __COREFOUNDATION_CFLOCALE__\n+#define __COREFOUNDATION_CFLOCALE__ 1\n+\n+#include \"CFBase.h\"\n+\n+#include \"CFArray.h\"\n+#include \"CFDictionary.h\"\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_3, GS_API_LATEST)\n+\n+CF_EXTERN_C_BEGIN\n+\n+/** \\defgroup CFLocaleRef CFLocale Reference\n+    \\brief CFLocale provides basic functionality for language and/or region\n+    specific operations.\n+    \n+    Locale-sensitive operations, such as collation, calendars and\n+    capitalization, may use CFLocale objects to provide language and/or region\n+    specific functionality.\n+  \n+    CFLocale is \"toll-free bridged\" to NSLocale.\n+    \n+    \\{\n+ */\n+typedef const struct __CFLocale *CFLocaleRef;\n+\n+/** \n+ */\n+enum\n+{\n+  kCFLocaleLanguageDirectionUnknown     = 0,\n+  kCFLocaleLanguageDirectionLeftToRight = 1,\n+  kCFLocaleLanguageDirectionRightToLeft = 2,\n+  kCFLocaleLanguageDirectionTopToBottom = 3,\n+  kCFLocaleLanguageDirectionBottomToTop = 4\n+};\n+typedef CFIndex CFLocaleLanguageDirection;\n+\n+/** \\name CFLocale Property Keys\n+    \\{\n+ */\n+CF_EXPORT const CFStringRef kCFLocaleMeasurementSystem; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleDecimalSeparator; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleGroupingSeparator; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleCurrencySymbol; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleCurrencyCode; /* CFString */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT const CFStringRef kCFLocaleIdentifier; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleLanguageCode; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleCountryCode; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleScriptCode; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleVariantCode; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleExemplarCharacterSet; /* CFCharacterSet */\n+CF_EXPORT const CFStringRef kCFLocaleCalendarIdentifier; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleCalendar; /* CFCalendar */\n+CF_EXPORT const CFStringRef kCFLocaleCollationIdentifier; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleUsesMetricSystem; /* CFBoolean */\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+CF_EXPORT const CFStringRef kCFLocaleCollatorIdentifier; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleQuotationBeginDelimiterKey; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleQuotationEndDelimiterKey; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleAlternateQuotationBeginDelimiterKey; /* CFString */\n+CF_EXPORT const CFStringRef kCFLocaleAlternateQuotationEndDelimiterKey; /* CFString */\n+#endif\n+/** \\} */\n+\n+/** \\name CFCalendar Identifiers\n+    \\{\n+ */\n+CF_EXPORT const CFStringRef kCFGregorianCalendar;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT const CFStringRef kCFBuddhistCalendar;\n+CF_EXPORT const CFStringRef kCFChineseCalendar;\n+CF_EXPORT const CFStringRef kCFHebrewCalendar;\n+CF_EXPORT const CFStringRef kCFIslamicCalendar;\n+CF_EXPORT const CFStringRef kCFIslamicCivilCalendar;\n+CF_EXPORT const CFStringRef kCFJapaneseCalendar;\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+CF_EXPORT const CFStringRef kCFRepublicOfChinaCalendar;\n+CF_EXPORT const CFStringRef kCFPersianCalendar;\n+CF_EXPORT const CFStringRef kCFIndianCalendar;\n+CF_EXPORT const CFStringRef kCFISO8601Calendar;\n+#endif\n+/** \\} */\n+\n+/** CFLocale Change Notification\n+ */\n+CF_EXPORT const CFStringRef kCFLocaleCurrentLocaleDidChangeNotification;\n+\n+\n+\n+/** \\name Creating a Locale\n+    \\{\n+ */\n+CF_EXPORT CFLocaleRef\n+CFLocaleCopyCurrent (void);\n+\n+CF_EXPORT CFLocaleRef\n+CFLocaleCreate (CFAllocatorRef allocator,\n+                CFStringRef localeIdent);\n+\n+CF_EXPORT CFLocaleRef\n+CFLocaleCreateCopy (CFAllocatorRef allocator,\n+                    CFLocaleRef locale);\n+\n+CF_EXPORT CFLocaleRef\n+CFLocaleGetSystem (void);\n+/** \\} */\n+\n+/** \\name Getting System Locale Information\n+    \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT CFArrayRef\n+CFLocaleCopyAvailableLocaleIdentifiers (void);\n+#endif\n+/** \\} */\n+\n+/** \\name Getting ISO Information\n+    \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT CFArrayRef\n+CFLocaleCopyISOCountryCodes (void);\n+\n+CF_EXPORT CFArrayRef\n+CFLocaleCopyISOLanguageCodes (void);\n+\n+CF_EXPORT CFArrayRef\n+CFLocaleCopyISOCurrencyCodes (void);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT CFArrayRef\n+CFLocaleCopyCommonISOCurrencyCodes (void);\n+#endif\n+/** \\{ */\n+\n+/** \\name Accessing Language Information\n+    \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT CFArrayRef\n+CFLocaleCopyPreferredLanguages (void);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+CF_EXPORT CFLocaleLanguageDirection\n+CFLocaleGetLanguageCharacterDirection (CFStringRef isoLangCode);\n+\n+CF_EXPORT CFLocaleLanguageDirection\n+CFLocaleGetLanguageLineDirection (CFStringRef isoLangCode);\n+#endif\n+/** \\} */\n+\n+/** \\name Getting Information About a Locale\n+    \\{\n+ */\n+CF_EXPORT CFStringRef\n+CFLocaleCopyDisplayNameForPropertyValue (CFLocaleRef displayLocale,\n+                                         CFStringRef key,\n+                                         CFStringRef value);\n+\n+CF_EXPORT CFTypeRef\n+CFLocaleGetValue (CFLocaleRef locale,\n+                  CFStringRef key);\n+\n+CF_EXPORT CFStringRef\n+CFLocaleGetIdentifier (CFLocaleRef locale);\n+/** \\} */\n+\n+/** \\name Getting and Creating Locale Identifiers\n+    \\{\n+ */\n+CF_EXPORT CFStringRef\n+CFLocaleCreateCanonicalLocaleIdentifierFromString (CFAllocatorRef allocator,\n+                                                   CFStringRef localeIdent);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT CFStringRef\n+CFLocaleCreateCanonicalLanguageIdentifierFromString (CFAllocatorRef allocator,\n+                                                     CFStringRef localeIdent);\n+\n+CF_EXPORT CFDictionaryRef\n+CFLocaleCreateComponentsFromLocaleIdentifier (CFAllocatorRef allocator,\n+                                              CFStringRef localeIdent);\n+\n+CF_EXPORT CFStringRef\n+CFLocaleCreateLocaleIdentifierFromComponents (CFAllocatorRef allocator,\n+                                              CFDictionaryRef dictionary);\n+#endif\n+/** \\} */\n+\n+/** \\name Windows Locale Codes\n+    \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+CF_EXPORT CFStringRef\n+CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode (CFAllocatorRef allocator,\n+                                                     UInt32 lcid);\n+\n+CF_EXPORT UInt32\n+CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier (CFStringRef localeIdent);\n+#endif\n+/** \\} */\n+\n+/** \\name Getting the CFLocale Type ID\n+    \\{\n+ */\n+CF_EXPORT CFTypeID\n+CFLocaleGetTypeID (void);\n+/** \\} */\n+\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+\n+#endif /* OS_API_VERSION >= MAC_OS_X_VERSION_10_3 */\n+\n+#endif /* __COREFOUNDATION_CFLOCALE__ */\n+"}, {"sha": "42e4967ce9035b3844993378f6c2f3f3b2c9c9d5", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/CoreFoundation/CFString.h", "status": "added", "additions": 593, "deletions": 0, "changes": 593, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFString.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFString.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FCoreFoundation%2FCFString.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,593 @@\n+/* CFString.h\n+   \n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   \n+   Written by: Stefan Bidigaray\n+   Date: January, 2010\n+   \n+   This file is part of CoreBase.\n+   \n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.         See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; see the file COPYING.LIB.\n+   If not, see <http://www.gnu.org/licenses/> or write to the \n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, \n+   Boston, MA 02110-1301, USA.\n+*/ \n+\n+#ifndef __COREFOUNDATION_CFSTRING_H__\n+#define __COREFOUNDATION_CFSTRING_H__\n+\n+#include \"CFBase.h\"\n+#include \"CFArray.h\"\n+#include \"CFCharacterSet.h\"\n+#include \"CFData.h\"\n+#include \"CFDictionary.h\"\n+#include \"CFLocale.h\"\n+\n+#include <stdarg.h>\n+\n+CF_EXTERN_C_BEGIN\n+\n+/** \\defgroup CFStringRef CFString Reference\n+    \\brief The CFString type defines opaque objects representing strings.\n+\n+    CFString is \"toll-free bridged\" to NSString.\n+\n+    \\{\n+ */\n+\n+/*\n+ * Data Types\n+ */\n+typedef UInt32 CFStringEncoding;\n+\n+/*\n+ * Constants\n+ */\n+typedef enum\n+{\n+  kCFCompareCaseInsensitive = 1,\n+  kCFCompareBackwards = 4,\n+  kCFCompareAnchored = 8,\n+  kCFCompareNonliteral = 16,\n+  kCFCompareLocalized = 32,\n+  kCFCompareNumerically = 64,\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+  kCFCompareDiacriticInsensitive = 128,\n+  kCFCompareWidthInsensitive = 256,\n+  kCFCompareForcedOrdering = 512\n+#endif\n+} CFStringCompareFlags;\n+\n+enum CFStringBuiltInEncodings\n+{\n+  kCFStringEncodingMacRoman = 0,\n+  kCFStringEncodingWindowsLatin1 = 0x0500,\n+  kCFStringEncodingISOLatin1 = 0x0201,\n+  kCFStringEncodingNextStepLatin = 0x0B01,\n+  kCFStringEncodingASCII = 0x0600,\n+  kCFStringEncodingUnicode = 0x0100,\n+  kCFStringEncodingUTF8 = 0x08000100,\n+  kCFStringEncodingNonLossyASCII = 0x0BFF,\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+  kCFStringEncodingUTF16 = 0x0100,\n+  kCFStringEncodingUTF16BE = 0x10000100,\n+  kCFStringEncodingUTF16LE = 0x14000100,\n+  kCFStringEncodingUTF32 = 0x0c000100,\n+  kCFStringEncodingUTF32BE = 0x18000100,\n+  kCFStringEncodingUTF32LE = 0x1c000100\n+#endif\n+};\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+# define kCFStringEncodingInvalidId (0xffffffffU)\n+#endif\n+\n+/** \\def CFSTR(x)\n+    \\brief Creates a constant string object.\n+    \n+    \\note This macro will create the constant string at runtime.\n+ */\n+/* The 'pure' attribute tells the compiler that this function will always\n+   return the same result with the same input.  If it has any skill, then\n+   constant propagation passes will magically make sure that this function is\n+   called as few times as possible. */\n+CF_EXPORT CFStringRef\n+__CFStringMakeConstantString (const char *str) GS_PURE_FUNCTION;\n+//#define CFSTR(x) __CFStringMakeConstantString(\"\" x \"\")\n+\n+#ifdef __CONSTANT_CFSTRINGS__\n+#define CFSTR(x)  ((CFStringRef) __builtin___CFStringMakeConstantString (\"\" x \"\"))\n+#else\n+#define CFSTR(x)  __CFStringMakeConstantString(\"\" x \"\")\n+#endif\n+\n+/** \\name Creating a CFString\n+    \\{\n+ */\n+CF_EXPORT CFArrayRef\n+CFStringCreateArrayBySeparatingStrings (CFAllocatorRef alloc,\n+  CFStringRef theString, CFStringRef separatorString);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateByCombiningStrings (CFAllocatorRef alloc, CFArrayRef theArray,\n+  CFStringRef separatorString);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateCopy (CFAllocatorRef alloc, CFStringRef theString);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateFromExternalRepresentation (CFAllocatorRef alloc, CFDataRef data,\n+  CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithBytes (CFAllocatorRef alloc, const UInt8 *bytes,\n+  CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithCharacters (CFAllocatorRef alloc, const UniChar *chars,\n+  CFIndex numChars);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithCharactersNoCopy (CFAllocatorRef alloc, const UniChar *chars,\n+  CFIndex numChars, CFAllocatorRef contentsDeallocator);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithCString (CFAllocatorRef alloc, const char *cStr,\n+  CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithCStringNoCopy (CFAllocatorRef alloc, const char *cStr,\n+  CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithFormat (CFAllocatorRef alloc, CFDictionaryRef formatOptions,\n+  CFStringRef format, ...);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithFormatAndArguments (CFAllocatorRef alloc,\n+  CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithSubstring (CFAllocatorRef alloc, CFStringRef str,\n+  CFRange range);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT CFStringRef\n+CFStringCreateWithFileSystemRepresentation (CFAllocatorRef alloc,\n+  const char *buffer);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT CFStringRef\n+CFStringCreateWithBytesNoCopy (CFAllocatorRef alloc, const UInt8 *bytes,\n+  CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalReprentation,\n+  CFAllocatorRef contentsDeallocator);\n+#endif\n+/** \\} */\n+\n+/** \\name Searching CFStrings\n+    \\{\n+ */\n+CF_EXPORT CFArrayRef\n+CFStringCreateArrayWithFindResults (CFAllocatorRef alloc, CFStringRef theString,\n+  CFStringRef stringToFind, CFRange rangeToSearch,\n+  CFStringCompareFlags compareOptions);\n+\n+CF_EXPORT CFRange\n+CFStringFind (CFStringRef theString, CFStringRef stringToFind,\n+  CFStringCompareFlags compareOptions);\n+\n+CF_EXPORT Boolean\n+CFStringFindWithOptions (CFStringRef theString, CFStringRef stringToFind,\n+  CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result);\n+\n+CF_EXPORT Boolean\n+CFStringFindWithOptionsAndLocale (CFStringRef theString,CFStringRef stringToFind,\n+  CFRange rangeToSearch, CFStringCompareFlags searchOptions,\n+  CFLocaleRef locale, CFRange *result);\n+\n+CF_EXPORT void\n+CFStringGetLineBounds (CFStringRef theString, CFRange range,\n+  CFIndex *lineBeginIndex, CFIndex *lineEndIndex, CFIndex *contentsEndIndex);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+CF_EXPORT Boolean\n+CFStringFindCharacterFromSet (CFStringRef theString, CFCharacterSetRef theSet,\n+  CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT void\n+CFStringGetParagraphBounds (CFStringRef string, CFRange range,\n+  CFIndex *parBeginIndex, CFIndex *parEndIndex, CFIndex *contentsEndIndex);\n+#endif\n+/** \\} */\n+\n+/** \\name Comparing String\n+    \\{\n+ */\n+CF_EXPORT CFComparisonResult\n+CFStringCompare (CFStringRef theString1, CFStringRef theString2,\n+  CFStringCompareFlags compareOptions);\n+\n+CF_EXPORT CFComparisonResult\n+CFStringCompareWithOptions (CFStringRef theString1, CFStringRef theString2,\n+  CFRange rangeToCOmpare, CFStringCompareFlags compareOptions);\n+\n+CF_EXPORT Boolean\n+CFStringHasPrefix (CFStringRef theString, CFStringRef prefix);\n+\n+CF_EXPORT Boolean\n+CFStringHasSuffix (CFStringRef theString, CFStringRef suffix);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT CFComparisonResult\n+CFStringCompareWithOptionsAndLocale (CFStringRef theString1,\n+  CFStringRef theString2, CFRange rangeToCOmpare,\n+  CFStringCompareFlags compareOptions, CFLocaleRef locale);\n+#endif\n+/** \\} */\n+\n+/** \\name Accessing Characters\n+    \\{\n+ */\n+CF_EXPORT CFDataRef\n+CFStringCreateExternalRepresentation (CFAllocatorRef alloc,\n+  CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);\n+\n+CF_EXPORT CFIndex\n+CFStringGetBytes (CFStringRef theString, CFRange range,\n+  CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation,\n+  UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen);\n+\n+CF_EXPORT UniChar\n+CFStringGetCharacterAtIndex (CFStringRef theString, CFIndex idx);\n+\n+CF_EXPORT void\n+CFStringGetCharacters (CFStringRef theString, CFRange range, UniChar *buffer);\n+\n+CF_EXPORT const UniChar *\n+CFStringGetCharactersPtr (CFStringRef theString);\n+\n+CF_EXPORT Boolean\n+CFStringGetCString (CFStringRef theString, char *buffer, CFIndex bufferSize,\n+  CFStringEncoding encoding);\n+\n+CF_EXPORT const char *\n+CFStringGetCStringPtr (CFStringRef theString, CFStringEncoding encoding);\n+\n+CF_EXPORT CFIndex\n+CFStringGetLength (CFStringRef str);\n+\n+CF_EXPORT CFRange\n+CFStringGetRangeOfComposedCharactersAtIndex (CFStringRef theString,\n+  CFIndex theIndex);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+CF_EXPORT UTF32Char\n+CFStringGetLongCharacterForSurrogatePair (UniChar surrogateHigh,\n+  UniChar surrogateLow);\n+\n+CF_EXPORT Boolean\n+CFStringGetSurrogatePairForLongCharacter (UTF32Char character,\n+  UniChar *surrogates);\n+\n+CF_EXPORT Boolean\n+CFStringIsSurrogateHighCharacter (UniChar character);\n+\n+CF_EXPORT Boolean\n+CFStringIsSurrogateLowCharacter (UniChar character);\n+#endif\n+/** \\} */\n+\n+/** \\name Working with Encodings\n+    \\{\n+ */\n+CF_EXPORT CFStringRef\n+CFStringConvertEncodingToIANACharSetName (CFStringEncoding encoding);\n+\n+CF_EXPORT unsigned long\n+CFStringConvertEncodingToNSStringEncoding (CFStringEncoding encoding);\n+\n+UInt32\n+CFStringConvertEncodingToWindowsCodepage (CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringConvertIANACharSetNameToEncoding (CFStringRef theString);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringConvertNSStringEncodingToEncoding (unsigned long encoding);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringConvertWindowsCodepageToEncoding (UInt32 codepage);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringGetFastestEncoding (CFStringRef theString);\n+\n+CF_EXPORT const CFStringEncoding *\n+CFStringGetListOfAvailableEncodings (void);\n+\n+CF_EXPORT CFIndex\n+CFStringGetMaximumSizeForEncoding (CFIndex length, CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringGetMostCompatibleMacStringEncoding (CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringRef\n+CFStringGetNameOfEncoding (CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringGetSmallestEncoding (CFStringRef theString);\n+\n+CF_EXPORT CFStringEncoding\n+CFStringGetSystemEncoding (void);\n+\n+CF_EXPORT Boolean\n+CFStringIsEncodingAvailable (CFStringEncoding encoding);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT Boolean\n+CFStringGetFileSystemRepresentation (CFStringRef string, char *buffer,\n+  CFIndex maxBufLen);\n+\n+CF_EXPORT CFIndex\n+CFStringGetMaximumSizeOfFileSystemRepresentation (CFStringRef string);\n+#endif\n+/** \\} */\n+\n+/** \\name Getting Numeric Values\n+    \\{\n+ */\n+CF_EXPORT double\n+CFStringGetDoubleValue (CFStringRef str);\n+\n+CF_EXPORT SInt32\n+CFStringGetIntValue (CFStringRef str);\n+/** \\} */\n+\n+/** \\name Getting String Properties\n+    \\{\n+ */\n+CF_EXPORT void\n+CFShow (CFTypeRef obj);\n+\n+CF_EXPORT void\n+CFShowStr (CFStringRef str);\n+\n+CF_EXPORT CFTypeID\n+CFStringGetTypeID (void);\n+/** \\} */\n+\n+\n+\n+/** \\name Pascal Strings\n+    \\{\n+ */\n+CF_EXPORT CFStringRef\n+CFStringCreateWithPascalString (CFAllocatorRef alloc, ConstStr255Param pStr,\n+  CFStringEncoding encoding);\n+\n+CF_EXPORT CFStringRef\n+CFStringCreateWithPascalStringNoCopy (CFAllocatorRef alloc,\n+  ConstStr255Param pStr, CFStringEncoding encoding,\n+  CFAllocatorRef contentsDeallocate);\n+\n+CF_EXPORT Boolean\n+CFStringGetPascalString (CFStringRef theString, StringPtr buffer,\n+  CFIndex bufferSize, CFStringEncoding encoding);\n+\n+CF_EXPORT ConstStringPtr\n+CFStringGetPascalStringPtr (CFStringRef theString, CFStringEncoding encoding);\n+/** \\} */\n+/** \\} */\n+\n+\n+\n+/** \\defgroup CFMutableStringRef CFMutableString Reference\n+ *  \\{\n+ */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+typedef enum\n+{\n+  kCFStringNormalizationFormD = 0,\n+  kCFStringNormalizationFormKD = 1,\n+  kCFStringNormalizationFormC = 2,\n+  kCFStringNormalizationFormKC = 3\n+} CFStringNormalizationForm;\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT const CFStringRef kCFStringTransformStripCombiningMarks;\n+CF_EXPORT const CFStringRef kCFStringTransformToLatin;\n+CF_EXPORT const CFStringRef kCFStringTransformFullwidthHalfwidth;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinKatakana;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinHiragana;\n+CF_EXPORT const CFStringRef kCFStringTransformHiraganaKatakana;\n+CF_EXPORT const CFStringRef kCFStringTransformMandarinLatin;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinHangul;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinArabic;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinHebrew;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinThai;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinCyrillic;\n+CF_EXPORT const CFStringRef kCFStringTransformLatinGreek;\n+CF_EXPORT const CFStringRef kCFStringTransformToXMLHex;\n+CF_EXPORT const CFStringRef kCFStringTransformToUnicodeName;\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT const CFStringRef kCFStringTransformStripDiacritics;\n+#endif\n+\n+CF_EXPORT void\n+CFStringAppend (CFMutableStringRef theString, CFStringRef appendedString);\n+\n+CF_EXPORT void\n+CFStringAppendCharacters (CFMutableStringRef theString,\n+  const UniChar *chars, CFIndex numChars);\n+\n+CF_EXPORT void\n+CFStringAppendCString (CFMutableStringRef theString, const char *cStr,\n+  CFStringEncoding encoding);\n+\n+CF_EXPORT void\n+CFStringAppendFormat (CFMutableStringRef theString,\n+  CFDictionaryRef formatOptions, CFStringRef format, ...);\n+\n+CF_EXPORT void\n+CFStringAppendFormatAndArguments (CFMutableStringRef theString,\n+  CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);\n+\n+CF_EXPORT void\n+CFStringAppendPascalString (CFMutableStringRef theString,\n+  ConstStr255Param pStr, CFStringEncoding encoding);\n+\n+CF_EXPORT void\n+CFStringCapitalize (CFMutableStringRef theString, CFLocaleRef locale);\n+\n+CF_EXPORT CFMutableStringRef\n+CFStringCreateMutable (CFAllocatorRef alloc, CFIndex maxLength);\n+\n+CF_EXPORT CFMutableStringRef\n+CFStringCreateMutableCopy (CFAllocatorRef alloc, CFIndex maxLength,\n+  CFStringRef theString);\n+\n+CF_EXPORT CFMutableStringRef\n+CFStringCreateMutableWithExternalCharactersNoCopy (CFAllocatorRef alloc,\n+  UniChar *chars, CFIndex numChars, CFIndex capacity,\n+  CFAllocatorRef externalCharactersAllocator);\n+\n+CF_EXPORT void\n+CFStringDelete (CFMutableStringRef theString, CFRange range);\n+\n+CF_EXPORT void\n+CFStringInsert (CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);\n+\n+CF_EXPORT void\n+CFStringLowercase (CFMutableStringRef theString, CFLocaleRef locale);\n+\n+CF_EXPORT void\n+CFStringPad (CFMutableStringRef theString, CFStringRef padString,\n+  CFIndex length, CFIndex indexIntoPad);\n+\n+CF_EXPORT void\n+CFStringReplace (CFMutableStringRef theString, CFRange range,\n+  CFStringRef replacement);\n+\n+CF_EXPORT void\n+CFStringReplaceAll (CFMutableStringRef theString, CFStringRef replacement);\n+\n+CF_EXPORT void\n+CFStringSetExternalCharactersNoCopy (CFMutableStringRef theString,\n+  UniChar *chars, CFIndex length, CFIndex capacity);\n+\n+CF_EXPORT void\n+CFStringTrim (CFMutableStringRef theString, CFStringRef trimString);\n+\n+CF_EXPORT void\n+CFStringTrimWhitespace (CFMutableStringRef theString);\n+\n+CF_EXPORT void\n+CFStringUppercase (CFMutableStringRef theString, CFLocaleRef locale);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)\n+CF_EXPORT CFIndex\n+CFStringFindAndReplace (CFMutableStringRef theString,\n+  CFStringRef stringToFind, CFStringRef replacementString,\n+  CFRange rangeToSearch, CFOptionFlags compareOptions);\n+\n+CF_EXPORT void\n+CFStringNormalize (CFMutableStringRef theString,\n+  CFStringNormalizationForm theForm);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+CF_EXPORT Boolean\n+CFStringTransform (CFMutableStringRef string, CFRange *range,\n+  CFStringRef transform, Boolean reverse);\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+CF_EXPORT void\n+CFStringFold (CFMutableStringRef theString, CFOptionFlags theFlags,\n+  CFLocaleRef theLocale);\n+#endif\n+/** \\} */\n+\n+\n+\n+/** \\ingroup CFStringRef\n+    \\name CFStringInlineBuffer\n+    \\{\n+ */\n+#define __kCFStringInlineBufferLength 64\n+struct CFStringInlineBuffer\n+{\n+  UniChar buffer[__kCFStringInlineBufferLength];\n+  CFStringRef theString;\n+  const UniChar *directBuffer;\n+  CFRange rangeToBuffer;\n+  CFIndex bufferedRangeStart;\n+  CFIndex bufferedRangeEnd;\n+};\n+typedef struct CFStringInlineBuffer CFStringInlineBuffer;\n+\n+CF_INLINE void\n+CFStringInitInlineBuffer (CFStringRef str, CFStringInlineBuffer *buf,\n+  CFRange range)\n+{\n+  buf->theString = str;\n+  buf->rangeToBuffer = range;\n+  buf->directBuffer = CFStringGetCharactersPtr (str);\n+  buf->bufferedRangeStart = 0;\n+  buf->bufferedRangeEnd = 0;\n+}\n+\n+CF_INLINE UniChar\n+CFStringGetCharacterFromInlineBuffer (CFStringInlineBuffer *buf, CFIndex idx)\n+{\n+  if (buf->directBuffer)\n+    {\n+      if (idx < 0 || idx >= buf->rangeToBuffer.length)\n+        return 0;\n+      return buf->directBuffer[idx + buf->rangeToBuffer.location];\n+    }\n+  else if (idx >= buf->bufferedRangeEnd || idx < buf->bufferedRangeStart)\n+    {\n+      CFRange range;\n+      \n+      if (idx < 0 || idx >= buf->rangeToBuffer.length)\n+        return 0;\n+      \n+      /* Use 16 here so it's efficient to go backwards, too */\n+      buf->bufferedRangeStart = idx - 16;\n+      if (buf->bufferedRangeStart < 0)\n+        buf->bufferedRangeStart = 0;\n+      buf->bufferedRangeEnd =\n+        buf->bufferedRangeStart + __kCFStringInlineBufferLength;\n+      if (buf->bufferedRangeEnd > buf->rangeToBuffer.length)\n+        buf->bufferedRangeEnd = buf->rangeToBuffer.length;\n+      \n+      range = CFRangeMake (buf->rangeToBuffer.location + buf->bufferedRangeStart,\n+        buf->bufferedRangeEnd - buf->bufferedRangeStart);\n+      \n+      CFStringGetCharacters (buf->theString, range, buf->buffer);\n+    }\n+  \n+  return buf->buffer[(idx - buf->bufferedRangeStart)];\n+}\n+/** \\} */\n+\n+CF_EXTERN_C_END\n+\n+#endif /* __COREFOUNDATION_CFSTRING_H__ */\n+"}, {"sha": "661e90faf894291aa381221e1ab9809384335ec1", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSArray.h", "status": "added", "additions": 430, "deletions": 0, "changes": 430, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSArray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSArray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSArray.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,430 @@\n+/* Interface for NSArray for GNUStep\n+   Copyright (C) 1995-2015 Free Software Foundation, Inc.\n+\n+   Written by:  Andrew Kachites McCallum <mccallum@gnu.ai.mit.edu>\n+   Created: 1995\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+   */\n+\n+#ifndef __NSArray_h_GNUSTEP_BASE_INCLUDE\n+#define __NSArray_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import\t\"NSObject.h\"\n+#import\t\"NSRange.h\"\n+#import \"NSEnumerator.h\"\n+#if __BLOCKS__\n+#import \"../GNUstepBase/GSBlocks.h\"\n+#endif\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+@class NSString;\n+@class NSURL;\n+@class NSIndexSet;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+enum\n+{\n+  NSBinarySearchingFirstEqual = (1UL << 8), /** Specifies that the binary\n+   * search should find the first object equal in the array.\n+   */\n+  NSBinarySearchingLastEqual = (1UL << 9), /** Specifies that the binary\n+   * search should find the last object equal in the array.\n+   */\n+  NSBinarySearchingInsertionIndex = (1UL << 10), /** Specifies that the binary\n+   * search should find the index at which an equal object should be inserted\n+   * in order to keep the array sorted\n+   */\n+};\n+\n+typedef NSUInteger NSBinarySearchingOptions;\n+#endif\n+\n+@interface GS_GENERIC_CLASS(NSArray, __covariant ElementT) : NSObject\n+  <NSCoding, NSCopying, NSMutableCopying, NSFastEnumeration>\n+\n++ (instancetype) array;\n++ (instancetype) arrayWithArray: (GS_GENERIC_CLASS(NSArray, ElementT) *)array;\n++ (instancetype) arrayWithContentsOfFile: (NSString*)file;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n++ (instancetype) arrayWithContentsOfURL: (NSURL*)aURL;\n+#endif\n++ (instancetype) arrayWithObject: (id)anObject;\n++ (instancetype) arrayWithObjects: (id)firstObject, ...;\n++ (instancetype) arrayWithObjects: (const id[])objects count: (NSUInteger)count;\n+\n+- (GS_GENERIC_CLASS(NSArray, ElementT) *) arrayByAddingObject:\n+  (GS_GENERIC_TYPE(ElementT))anObject;\n+- (GS_GENERIC_CLASS(NSArray, ElementT) *) arrayByAddingObjectsFromArray:\n+  (GS_GENERIC_CLASS(NSArray, ElementT)*)anotherArray;\n+- (BOOL) containsObject: (GS_GENERIC_TYPE(ElementT))anObject;\n+\n+/** <override-subclass />\n+ * Returns the number of elements contained in the receiver.\n+ */\n+- (NSUInteger) count;\n+- (void) getObjects: (__unsafe_unretained GS_GENERIC_TYPE(ElementT)[])aBuffer;\n+- (void) getObjects: (__unsafe_unretained GS_GENERIC_TYPE(ElementT)[])aBuffer\n+              range: (NSRange)aRange;\n+- (NSUInteger) indexOfObject: (GS_GENERIC_TYPE(ElementT))anObject;\n+- (NSUInteger) indexOfObject: (GS_GENERIC_TYPE(ElementT))anObject\n+                     inRange: (NSRange)aRange;\n+- (NSUInteger) indexOfObjectIdenticalTo: (GS_GENERIC_TYPE(ElementT))anObject;\n+- (NSUInteger) indexOfObjectIdenticalTo: (GS_GENERIC_TYPE(ElementT))anObject\n+                                inRange: (NSRange)aRange;\n+- (instancetype) init;\n+- (instancetype) initWithArray: (GS_GENERIC_CLASS(NSArray, ElementT)*)array;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+- (instancetype) initWithArray: (GS_GENERIC_CLASS(NSArray, ElementT)*)array\n+                     copyItems: (BOOL)shouldCopy;\n+#endif\n+- (instancetype) initWithContentsOfFile: (NSString*)file;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+- (instancetype) initWithContentsOfURL: (NSURL*)aURL;\n+#endif\n+- (instancetype) initWithObjects: (GS_GENERIC_TYPE(ElementT)) firstObject, ...;\n+\n+/** <init /> <override-subclass />\n+ * This should initialize the array with count (may be zero) objects.<br />\n+ * Retains each object placed in the array.<br />\n+ * Calls -init (which does nothing but maintain MacOS-X compatibility),\n+ * and needs to be re-implemented in subclasses in order to have all\n+ * other initialisers work.\n+ */\n+- (instancetype) initWithObjects: (const GS_GENERIC_TYPE(ElementT)[])objects\n+                           count: (NSUInteger)count;\n+- (GS_GENERIC_TYPE(ElementT)) lastObject;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+- (GS_GENERIC_TYPE(ElementT)) firstObject;\n+#endif\n+\n+/** <override-subclass />\n+ * Returns the object at the specified index.\n+ * Raises an exception of the index is beyond the array.\n+ */\n+- (GS_GENERIC_TYPE(ElementT)) objectAtIndex: (NSUInteger)index;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+- (GS_GENERIC_CLASS(NSArray, ElementT) *) objectsAtIndexes:\n+  (NSIndexSet *)indexes;\n+#endif\n+\n+- (GS_GENERIC_TYPE(ElementT)) firstObjectCommonWithArray:\n+    (GS_GENERIC_CLASS(NSArray, ElementT) *)otherArray;\n+- (BOOL) isEqualToArray: (NSArray*)otherArray;\n+\n+#if OS_API_VERSION(GS_API_OPENSTEP, GS_API_MACOSX)\n+- (void) makeObjectsPerform: (SEL)aSelector;\n+- (void) makeObjectsPerform: (SEL)aSelector withObject: (id)argument;\n+#endif\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+- (void) makeObjectsPerformSelector: (SEL)aSelector;\n+- (void) makeObjectsPerformSelector: (SEL)aSelector withObject: (id)arg;\n+#endif\n+\n+- (NSData*) sortedArrayHint;\n+- (GS_GENERIC_CLASS(NSArray, ElementT)*) sortedArrayUsingFunction:\n+    (NSComparisonResult (*)(id, id, void*))comparator\n+\t\t\t        context: (void*)context;\n+- (GS_GENERIC_CLASS(NSArray, ElementT)*) sortedArrayUsingFunction:\n+    (NSComparisonResult (*)(id, id, void*))comparator\n+\t\t\t      context: (void*)context\n+\t\t\t\t     hint: (NSData*)hint;\n+- (GS_GENERIC_CLASS(NSArray, ElementT)*) sortedArrayUsingSelector:\n+  (SEL)comparator;\n+- (GS_GENERIC_CLASS(NSArray, ElementT)*) subarrayWithRange: (NSRange)aRange;\n+\n+- (NSString*) componentsJoinedByString: (NSString*)separator;\n+- (GS_GENERIC_CLASS(NSArray, NSString*)*) pathsMatchingExtensions:\n+    (GS_GENERIC_CLASS(NSArray, NSString*)*)extensions;\n+\n+- (GS_GENERIC_CLASS(NSEnumerator, ElementT)*) objectEnumerator;\n+- (GS_GENERIC_CLASS(NSEnumerator, ElementT)*) reverseObjectEnumerator;\n+\n+- (NSString*) description;\n+- (NSString*) descriptionWithLocale: (id)locale;\n+- (NSString*) descriptionWithLocale: (id)locale\n+\t\t\t     indent: (NSUInteger)level;\n+\n+- (BOOL) writeToFile: (NSString*)path atomically: (BOOL)useAuxiliaryFile;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+- (BOOL) writeToURL: (NSURL*)url atomically: (BOOL)useAuxiliaryFile;\n+- (GS_GENERIC_TYPE(ElementT)) valueForKey: (NSString*)key;\n+- (void) setValue: (GS_GENERIC_TYPE(ElementT))value forKey: (NSString*)key;\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+\n+#if __BLOCKS__\n+DEFINE_BLOCK_TYPE(GSEnumeratorBlock, void, GS_GENERIC_TYPE(ElementT),\n+  NSUInteger, BOOL*);\n+DEFINE_BLOCK_TYPE(GSPredicateBlock, BOOL, GS_GENERIC_TYPE(ElementT),\n+  NSUInteger, BOOL*);\n+/**\n+ * Enumerate over the collection using the given block.  The first argument is\n+ * the object and the second is the index in the array.  The final argument is\n+ * a pointer to a BOOL indicating whether the enumeration should stop.  Setting\n+ * this to YES will interrupt the enumeration.\n+ */\n+- (void) enumerateObjectsUsingBlock: (GSEnumeratorBlock)aBlock;\n+\n+/**\n+ * Enumerate over the collection using the given block.  The first argument is\n+ * the object and the second is the index in the array.  The final argument is\n+ * a pointer to a BOOL indicating whether the enumeration should stop.  Setting\n+ * this to YES will interrupt the enumeration.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSNSEnumerationConcurrent flag\n+ * specifies that it is thread-safe.  The NSEnumerationReverse bit specifies\n+ * that it should be enumerated in reverse order.\n+ */\n+- (void) enumerateObjectsWithOptions: (NSEnumerationOptions)opts\n+\t\t\t  usingBlock: (GSEnumeratorBlock)aBlock;\n+/**\n+ * Enumerate over the specified indexes in the collection using the given\n+ * block.  The first argument is the object and the second is the index in the\n+ * array.  The final argument is a pointer to a BOOL indicating whether the\n+ * enumeration should stop.  Setting this to YES will interrupt the\n+ * enumeration.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSNSEnumerationConcurrent flag\n+ * specifies that it is thread-safe.  The NSEnumerationReverse bit specifies\n+ * that it should be enumerated in reverse order.\n+ */\n+- (void) enumerateObjectsAtIndexes: (NSIndexSet*)indexSet\n+\t\t\t   options: (NSEnumerationOptions)opts\n+\t\t\tusingBlock: (GSEnumeratorBlock)block;\n+/**\n+ * Returns the indexes of the objects in a collection that match the condition\n+ * specified by the block.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSNSEnumerationConcurrent flag\n+ * specifies that it is thread-safe.  The NSEnumerationReverse bit specifies\n+ * that it should be enumerated in reverse order.\n+ */\n+- (NSIndexSet *) indexesOfObjectsWithOptions: (NSEnumerationOptions)opts\n+\t\t\t\t passingTest: (GSPredicateBlock)predicate;\n+\n+/**\n+ * Returns the indexes of the objects in a collection that match the condition\n+ * specified by the block.\n+ */\n+- (NSIndexSet*) indexesOfObjectsPassingTest: (GSPredicateBlock)predicate;\n+\n+/**\n+ * Returns the indexes of the objects in a collection that match the condition\n+ * specified by the block and are in the range specified by the index set.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSNSEnumerationConcurrent flag\n+ * specifies that it is thread-safe.  The NSEnumerationReverse bit specifies\n+ * that it should be enumerated in reverse order.\n+ */\n+- (NSIndexSet*) indexesOfObjectsAtIndexes: (NSIndexSet*)indexSet\n+\t\t\t\t  options: (NSEnumerationOptions)opts\n+\t\t\t      passingTest: (GSPredicateBlock)predicate;\n+\n+/**\n+ * Returns the index of the first object in the array that matches the\n+ * condition specified by the block.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSNSEnumerationConcurrent flag\n+ * specifies that it is thread-safe.  The NSEnumerationReverse bit specifies\n+ * that it should be enumerated in reverse order.\n+ */\n+- (NSUInteger) indexOfObjectWithOptions: (NSEnumerationOptions)opts\n+\t\t\t    passingTest: (GSPredicateBlock)predicate;\n+\n+/**\n+ * Returns the index of the first object in the array that matches the\n+ * condition specified by the block.\n+ */\n+- (NSUInteger) indexOfObjectPassingTest: (GSPredicateBlock)predicate;\n+\n+/**\n+ * Returns the index of the first object in the specified range in a collection\n+ * that matches the condition specified by the block.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSNSEnumerationConcurrent flag\n+ * specifies that it is thread-safe.  The NSEnumerationReverse bit specifies\n+ * that it should be enumerated in reverse order.\n+ */\n+- (NSUInteger) indexOfObjectAtIndexes: (NSIndexSet*)indexSet\n+\t\t\t      options: (NSEnumerationOptions)opts\n+\t\t\t  passingTest: (GSPredicateBlock)predicate;\n+\n+/** Returns a sorted array using the comparator to determine the\n+ * order of objects.\n+ */\n+- (GS_GENERIC_CLASS(NSArray, ElementT) *) sortedArrayUsingComparator:\n+    (NSComparator)comparator;\n+\n+/** Returns a sorted array using the block to determine the order of objects.\n+ *\n+ * The opts argument is a bitfield.  Setting the NSSortConcurrent flag\n+ * specifies that it is thread-safe.  The NSSortStable bit specifies that\n+ * it should keep equal objects in the same order.\n+ */\n+- (GS_GENERIC_CLASS(NSArray, ElementT) *)\n+    sortedArrayWithOptions: (NSSortOptions)options\n+           usingComparator: (NSComparator)comparator;\n+\n+/**\n+ * Performs a binary search of the array within the specified range for the\n+ * index of an object equal to obj according to cmp.\n+ * If NSBinarySearchingInsertionIndex is specified, searches for the index\n+ * at which such an object should be inserted.\n+ */\n+- (NSUInteger) indexOfObject: (id)key\n+               inSortedRange: (NSRange)range\n+                     options: (NSBinarySearchingOptions)options\n+             usingComparator: (NSComparator)comparator;\n+#endif\n+#endif\n+/**\n+ * Accessor for subscripting.  This is called by the compiler when you write\n+ * code like anArray[12].  It should not be called directly.\n+ */\n+- (GS_GENERIC_TYPE(ElementT)) objectAtIndexedSubscript: (NSUInteger)anIndex;\n+@end\n+\n+\f\n+@interface GS_GENERIC_CLASS(NSMutableArray, ElementT) : NSArray\n+\n++ (instancetype) arrayWithCapacity: (NSUInteger)numItems;\n+\n+/** <override-subclass />\n+ * Adds anObject at the end of the array, thus increasing the size of\n+ * the array.  The object is retained upon addition.\n+ */\n+- (void) addObject: (GS_GENERIC_TYPE(ElementT))anObject;\n+- (void) addObjectsFromArray: (GS_GENERIC_CLASS(NSArray, ElementT)*)otherArray;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+- (void) exchangeObjectAtIndex: (NSUInteger)i1\n+\t     withObjectAtIndex: (NSUInteger)i2;\n+#endif\n+\n+/** <init /> <override-subclass />\n+ * Initialise the array with the specified capacity ... this\n+ * should ensure that the array can have numItems added efficiently.<br />\n+ * Calls -init (which does nothing but maintain MacOS-X compatibility),\n+ * and needs to be re-implemented in subclasses in order to have all\n+ * other initialisers work.\n+ */\n+- (instancetype) initWithCapacity: (NSUInteger)numItems;\n+\n+/** <override-subclass />\n+ * Inserts an object into the receiver at the specified location.<br />\n+ * Raises an exception if given an array index which is too large.<br />\n+ * The size of the array increases by one.<br />\n+ * The object is retained by the array.\n+ */\n+- (void) insertObject: (GS_GENERIC_TYPE(ElementT))anObject\n+              atIndex: (NSUInteger)index;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+- (void) insertObjects: (GS_GENERIC_CLASS(NSArray, ElementT) *)objects\n+             atIndexes: (NSIndexSet *)indexes;\n+#endif\n+\n+/** <override-subclass />\n+ * Removes an object from the receiver at the specified location.<br />\n+ * The size of the array decreases by one.<br />\n+ * Raises an exception if given an array index which is too large.<br />\n+ */\n+- (void) removeObjectAtIndex: (NSUInteger)index;\n+\n+- (void) removeObjectsAtIndexes: (NSIndexSet *)indexes;\n+\n+/** <override-subclass />\n+ * Places an object into the receiver at the specified location.<br />\n+ * Raises an exception if given an array index which is too large.<br />\n+ * The object is retained by the array.\n+ */\n+- (void) replaceObjectAtIndex: (NSUInteger)index\n+\t\t   withObject: (GS_GENERIC_TYPE(ElementT))anObject;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+- (void) replaceObjectsAtIndexes: (NSIndexSet *)indexes\n+                     withObjects: (GS_GENERIC_CLASS(NSArray, ElementT)*)objects;\n+#endif\n+\n+- (void) replaceObjectsInRange: (NSRange)aRange\n+          withObjectsFromArray: (GS_GENERIC_CLASS(NSArray, ElementT)*)anArray;\n+\n+- (void) replaceObjectsInRange: (NSRange)aRange\n+          withObjectsFromArray: (GS_GENERIC_CLASS(NSArray, ElementT)*)anArray\n+                         range: (NSRange)anotherRange;\n+\n+- (void) setArray: (GS_GENERIC_CLASS(NSArray, ElementT) *)otherArray;\n+\n+- (void) removeAllObjects;\n+- (void) removeLastObject;\n+- (void) removeObject: (GS_GENERIC_TYPE(ElementT))anObject;\n+- (void) removeObject: (GS_GENERIC_TYPE(ElementT))anObject\n+              inRange: (NSRange)aRange;\n+- (void) removeObjectIdenticalTo: (GS_GENERIC_TYPE(ElementT))anObject;\n+- (void) removeObjectIdenticalTo: (GS_GENERIC_TYPE(ElementT))anObject\n+                         inRange: (NSRange)aRange;\n+- (void) removeObjectsInArray: (GS_GENERIC_CLASS(NSArray, ElementT)*)otherArray;\n+- (void) removeObjectsInRange: (NSRange)aRange;\n+- (void) removeObjectsFromIndices: (NSUInteger*)indices\n+\t\t       numIndices: (NSUInteger)count;\n+\n+- (void) sortUsingFunction:\n+    (NSComparisonResult (*)(GS_GENERIC_TYPE(ElementT),\n+       GS_GENERIC_TYPE(ElementT),void*))compare\n+\t\t           context: (void*)context;\n+- (void) sortUsingSelector: (SEL)comparator;\n+\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+#if __BLOCKS__\n+/**\n+ * Sorts the array using the specified comparator block.\n+ */\n+- (void) sortUsingComparator: (NSComparator)comparator;\n+\n+/**\n+ * Sorts the array using the specified comparator block and options.\n+ */\n+- (void) sortWithOptions: (NSSortOptions)options\n+         usingComparator: (NSComparator)comparator;\n+#endif\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_8, GS_API_LATEST)\n+/** Set method called by the compiler with array subscripting.<br />\n+ * Replaces the object at anIndex or, if anIndex is the length of the array,\n+ * this method appends abObject to the array.\n+ */\n+- (void) setObject: (GS_GENERIC_TYPE(ElementT))anObject\n+atIndexedSubscript: (NSUInteger)anIndex;\n+#endif\n+@end\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#if\t!NO_GNUSTEP && !defined(GNUSTEP_BASE_INTERNAL)\n+#import\t\"../GNUstepBase/NSArray+GNUstepBase.h\"\n+#endif\n+\n+#endif /* __NSArray_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "c7ec486dddecb20ae6b7d204454cf7205aa32611", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSAutoreleasePool.h", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSAutoreleasePool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSAutoreleasePool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSAutoreleasePool.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,333 @@\n+/* Interface for NSAutoreleasePool for GNUStep\n+   Copyright (C) 1995, 1996, 1997 Free Software Foundation, Inc.\n+\n+   Written by:  Andrew Kachites McCallum <mccallum@gnu.ai.mit.edu>\n+   Date: 1995\n+   \n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+   \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+   */ \n+\n+#ifndef __NSAutoreleasePool_h_GNUSTEP_BASE_INCLUDE\n+#define __NSAutoreleasePool_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import\t\"NSObject.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+@class NSAutoreleasePool;\n+@class NSThread;\n+\n+\f\n+/**\n+ * Each thread has its own copy of these variables.\n+ <example>\n+{\n+  NSAutoreleasePool *current_pool; // current pool for thread\n+  unsigned total_objects_count;    // total #/autoreleased objects over thread's lifetime\n+  id *pool_cache;                  // cache of previously-allocated pools,\n+  int pool_cache_size;             //  used internally for recycling\n+  int pool_cache_count;\n+}\n+ </example>\n+*/\n+typedef struct autorelease_thread_vars\n+{\n+  /* The current, default NSAutoreleasePool for the calling thread;\n+     the one that will hold objects that are arguments to\n+     [NSAutoreleasePool +addObject:]. */\n+  __unsafe_unretained NSAutoreleasePool *current_pool;\n+\n+  /* The total number of objects autoreleased since the thread was\n+     started, or since -resetTotalAutoreleasedObjects was called\n+     in this thread. (if compiled in) */\n+  unsigned total_objects_count;\n+\n+  /* A cache of NSAutoreleasePool's already alloc'ed.  Caching old pools\n+     instead of deallocating and re-allocating them will save time. */\n+  __unsafe_unretained id *pool_cache;\n+  int pool_cache_size;\n+  int pool_cache_count;\n+} thread_vars_struct;\n+\n+/* Initialize an autorelease_thread_vars structure for a new thread.\n+   This function is called in NSThread each time an NSThread is created.\n+   TV should be of type `struct autorelease_thread_vars *' */\n+#define init_autorelease_thread_vars(TV) \\\n+memset (TV, 0, sizeof (__typeof__ (*TV)))\n+\n+\n+\f\n+/**\n+ *  Each pool holds its objects-to-be-released in a linked-list of \n+    these structures.\n+    <example>\n+{\n+  struct autorelease_array_list *next;\n+  unsigned size;\n+  unsigned count;\n+  id objects[0];\n+}\n+    </example>\n+ */\n+typedef struct autorelease_array_list\n+{\n+  struct autorelease_array_list *next;\n+  unsigned size;\n+  unsigned count;\n+  __unsafe_unretained id objects[0];\n+} array_list_struct;\n+\n+\f\n+\n+/**\n+ * <p>\n+ *   The standard OpenStep system of memory management employs retain counts.\n+ *   When an object is created, it has a retain count of 1.  When an object\n+ *   is retained, the retain count is incremented.  When it is released the\n+ *   retain count is decremented, and when the retain count goes to zero the\n+ *   object gets deallocated.\n+ * </p>\n+ * <p>\n+ *   A simple retain/release mechanism has problems with passing objects\n+ *   from one scope to another,\n+ *   so it's augmented with autorelease pools.  You can use the\n+ *   AUTORELEASE() macro to call the [NSObject-autorelease]\n+ *   method, which adds an object to the current autorelease pool by\n+ *   calling [NSAutoreleasePool+addObject:].<br />\n+ *   An autorelease pool simply maintains a reference to each object\n+ *   added to it, and for each addition, the autorelease pool will\n+ *   call the [NSObject-release] method of the object when the pool\n+ *   is released.  So doing an AUTORELEASE() is just the same as\n+ *   doing a RELEASE(), but deferred until the current autorelease\n+ *   pool is deallocated.\n+ * </p>\n+ * <p>\n+ *   The NSAutoreleasePool class maintains a separate stack of\n+ *   autorelease pools objects in each thread.\n+ * </p>\n+ * <p>\n+ *   When an autorelease pool is created, it is automatically\n+ *   added to the stack of pools in the thread.\n+ * </p>\n+ * <p>\n+ *   When a pool is destroyed, it (and any pool later in\n+ *   the stack) is removed from the stack.\n+ * </p>\n+ * <p>\n+ *   This mechanism provides a simple but controllable and reasonably\n+ *   efficient way of managing temporary objects.  An object can be\n+ *   autoreleased and then passed around and used until the topmost \n+ *   pool in the stack is destroyed.\n+ * </p>   \n+ * <p>\n+ *   Most methods return objects which are either owned by autorelease\n+ *   pools or by the receiver of the method, so the lifetime of the\n+ *   returned object can be assumed to be the shorter of the lifetime\n+ *   of the current autorelease pool, or that of the receiver on which\n+ *   the method was called.<br />\n+ *   The exceptions to this are those object returned by -\n+ * </p>\n+ * <deflist>\n+ *   <term>[NSObject+alloc], [NSObject+allocWithZone:]</term>\n+ *   <desc>\n+ *     Methods whose names begin with alloc return an uninitialised\n+ *     object, owned by the caller.\n+ *   </desc>\n+ *   <term>[NSObject-init]</term>\n+ *   <desc>\n+ *     Methods whose names begin with init return an initialised\n+ *     version of the receiving object, owned by the caller.<br />\n+ *     NB. The returned object may not actually be the same as the\n+ *     receiver ... sometimes an init method releases the original\n+ *     receiver and returns an alternative.\n+ *   </desc>\n+ *   <term>[NSObject+new]</term>\n+ *   <desc>\n+ *     Methods whose names begin with new combine the effects of\n+ *     allocation and initialisation.\n+ *   </desc>\n+ *   <term>[NSObject-copy], [(NSCopying)-copyWithZone:]</term>\n+ *   <desc>\n+ *     Methods whose names begin with copy create a copy of the receiver\n+ *     which is owned by the caller.\n+ *   </desc>\n+ *   <term>\n+ *     [NSObject-mutableCopy], [(NSMutableCopying)-mutableCopyWithZone:]\n+ *   </term>\n+ *   <desc>\n+ *     Methods whose names begin with mutableCopy create a copy of the receiver\n+ *     which is owned by the caller.\n+ *   </desc>\n+ * </deflist>\n+ */\n+NS_AUTOMATED_REFCOUNT_UNAVAILABLE\n+@interface NSAutoreleasePool : NSObject \n+{\n+#if\tGS_EXPOSE(NSAutoreleasePool) && !__has_feature(objc_arc)\n+  /* For re-setting the current pool when we are dealloc'ed. */\n+  NSAutoreleasePool *_parent;\n+  /* This pointer to our child pool is  necessary for co-existing\n+     with exceptions. */\n+  NSAutoreleasePool *_child;\n+  /* A collection of the objects to be released. */\n+  struct autorelease_array_list *_released;\n+  struct autorelease_array_list *_released_head;\n+  /* The total number of objects autoreleased in this pool. */\n+  unsigned _released_count;\n+  /* The method to add an object to this pool */\n+  void \t(*_addImp)(id, SEL, id);\n+#endif\n+#if     GS_NONFRAGILE\n+#else\n+  /* Pointer to private additional data used to avoid breaking ABI\n+   * when we don't have the non-fragile ABI available.\n+   * Use this mechanism rather than changing the instance variable\n+   * layout (see Source/GSInternal.h for details).\n+   */\n+  @private id _internal GS_UNUSED_IVAR;\n+#endif\n+}\n+\n+/**\n+ * Adds anObj to the current autorelease pool.<br />\n+ * If there is no autorelease pool in the thread,\n+ * a warning is logged and the object is leaked (ie it will not be released).\n+ */\n++ (void) addObject: (id)anObj;\n+\n+/**\n+ * Allocate and return an autorelease pool instance.<br />\n+ * If there is an already-allocated NSAutoreleasePool available,\n+ * save time by just returning that, rather than allocating a new one.<br />\n+ * The pool instance becomes the current autorelease pool for this thread.\n+ */\n++ (id) allocWithZone: (NSZone*)zone;\n+\n+/**\n+ * Adds anObj to this autorelease pool.\n+ */\n+- (void) addObject: (id)anObj;\n+\n+/**\n+ * Raises an exception - pools should not be autoreleased.\n+ */\n+- (id) autorelease;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)\n+/**\n+ * Intended to trigger a garbage collection run (if needed) when called in\n+ * a garbage collected environment.<br />\n+ * In a non-garbage collected environment, this method implements the\n+ * undocumented MacOS-X behavior, and releases the receiver.\n+ */\n+- (void) drain;\n+#endif\n+\n+/**\n+ * Destroys the receiver (calls -dealloc).\n+ */\n+- (oneway void) release;\n+\n+/**\n+ * Raises an exception ... pools should not be retained.\n+ */\n+- (id) retain;\n+\n+#if OS_API_VERSION(GS_API_NONE, GS_API_NONE)\n+/**\n+ * <p>\n+ *   Counts the number of times that the specified object occurs\n+ *   in autorelease pools in the current thread.\n+ * </p>\n+ * <p>\n+ *   This method is <em>slow</em> and should probably only be\n+ *   used for debugging purposes.\n+ * </p>\n+ */\n++ (unsigned) autoreleaseCountForObject: (id)anObject;\n+\n+/** \n+ * Return the currently active autorelease pool.\n+ */\n++ (id) currentPool;\n+\n+/**\n+ * <p>\n+ *   Specifies whether objects contained in autorelease pools are to\n+ *   be released when the pools are deallocated (by default YES).\n+ * </p>\n+ * <p>\n+ *   You can set this to NO for debugging purposes.\n+ * </p>\n+ */\n++ (void) enableRelease: (BOOL)enable;\n+\n+/**\n+ * <p>\n+ *   When autorelease pools are deallocated, the memory they used\n+ *   is retained in a cache for re-use so that new polls can be\n+ *   created very quickly.\n+ * </p>\n+ * <p>\n+ *   This method may be used to empty that cache, ensuring that\n+ *   the minimum memory is used by the application.\n+ * </p>\n+ */\n++ (void) freeCache;\n+\n+/**\n+ * <p>\n+ *   Specifies a limit to the number of objects that may be added to\n+ *   an autorelease pool.  When this limit is reached an exception is\n+ *   raised.\n+ * </p>\n+ * <p>\n+ *   You can set this to a smallish value to catch problems with code\n+ *   that autoreleases too many objects to operate efficiently.\n+ * </p>\n+ * <p>\n+ *   Default value is maxint.\n+ * </p>\n+ */\n++ (void) setPoolCountThreshold: (unsigned)c;\n+\n+/**\n+ * Return the number of objects in this pool.\n+ */\n+- (unsigned) autoreleaseCount;\n+\n+/**\n+ * Empties the current pool by releasing all the autoreleased objects\n+ * in it.  Also destroys any child pools (ones created after\n+ * the receiver in the same thread) causing any objects in those pools\n+ * to be released.<br />\n+ * This is a low cost (efficient) method which may be used to get rid of\n+ * autoreleased objects in the pool, but carry on using the pool.\n+ */\n+- (void) emptyPool;\n+#endif\n+@end\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif /* __NSAutoreleasePool_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "dbec39e46e93f43413dc7da5f0dc8e33eddecf9d", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSDate.h", "status": "added", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSDate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSDate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSDate.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,300 @@\n+/* Interface for NSDate for GNUStep\n+   Copyright (C) 1994, 1996, 1999 Free Software Foundation, Inc.\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+  */\n+\n+#ifndef __NSDate_h_GNUSTEP_BASE_INCLUDE\n+#define __NSDate_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import\t\"NSObjCRuntime.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+GS_EXPORT NSString * const NSSystemClockDidChangeNotification;\n+\n+/**\n+ * Time interval difference between two dates, in seconds.\n+ */\n+typedef double NSTimeInterval;\n+\n+/**\n+ * Time interval between the unix standard reference date of 1 January 1970\n+ * and the OpenStep reference date of 1 January 2001<br />\n+ * This number comes from:<br />\n+ * (((31 years * 365 days) + 8 days for leap years) = total number of days<br />\n+ * 24 hours * 60 minutes * 60 seconds)<br />\n+ * This ignores leap-seconds.\n+ */\n+GS_EXPORT const NSTimeInterval NSTimeIntervalSince1970;\n+\n+#import\t\"NSObject.h\"\n+\n+@class NSArray;\n+@class NSCalendarDate;\n+@class NSData;\n+@class NSDictionary;\n+@class NSString;\n+@class NSTimeZone;\n+@class NSTimeZoneDetail;\n+\n+@interface NSDate : NSObject <NSCoding,NSCopying>\n+{\n+}\n+\n+/** Returns an autoreleased instance with the current date/time.\n+ */\n++ (id) date;\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/** Returns an autoreleased instance representing the date and time given\n+ * by string. The value of string may be a 'natural' specification as\n+ * specified by the preferences in the user defaults database, allowing\n+ * phrases like 'last tuesday'\n+ */\n++ (id) dateWithNaturalLanguageString: (NSString*)string;\n+\n+/**\n+ * <p>Returns an autoreleased instance representing the date and time given\n+ * by string. The value of string may be a 'natural' specification as\n+ * specified by the preferences in the user defaults database, allowing\n+ * phrases like 'last tuesday'\n+ * </p>\n+ * The locale contains keys such as -\n+ * <deflist>\n+ *   <term>NSDateTimeOrdering</term>\n+ *   <desc>Controls the use of ambiguous numbers. This is done as a\n+ *   sequence of the letters D(ay), M(onth), Y(ear), and H(our).\n+ *   YMDH means that the first number encountered is assumed to be a\n+ *   year, the second a month, the third a day, and the last an hour.\n+ *   </desc>\n+ *   <term>NSEarlierTimeDesignations</term>\n+ *   <desc>An array of strings for times in the past.<br />\n+ *   Defaults are <em>ago</em>, <em>last</em>, <em>past</em>, <em>prior</em>\n+ *   </desc>\n+ *   <term>NSHourNameDesignations</term>\n+ *   <desc>An array of arrays of strings identifying the time of day.\n+ *   Each array has an hour as its first value, and one or more words\n+ *   as subsequent values.<br />\n+ *   Defaults are: (0, midnight), (10, morning), (12, noon, lunch),\n+ *   (14, afternoon), (19, dinner).\n+ *   </desc>\n+ *   <term>NSLaterTimeDesignations</term>\n+ *   <desc>An array of strings for times in the future.<br />\n+ *   Default is <em>next</em>\n+ *   </desc>\n+ *   <term>NSNextDayDesignations</term>\n+ *   <desc>The day after today. Default is <em>tomorrow.</em>\n+ *   </desc>\n+ *   <term>NSNextNextDayDesignations</term>\n+ *   <desc>The day after tomorrow. Default is <em>nextday.</em>\n+ *   </desc>\n+ *   <term>NSPriorDayDesignations</term>\n+ *   <desc>The day before today. Default is <em>yesterday.</em>\n+ *   </desc>\n+ *   <term>NSThisDayDesignations</term>\n+ *   <desc>Identifies the current day. Default is <em>today.</em>\n+ *   </desc>\n+ *   <term>NSYearMonthWeekDesignations</term>\n+ *   <desc>An array giving the word for year, month, and week.<br />\n+ *   Defaults are <em>year</em>, <em>month</em> and <em>week</em>.\n+ *   </desc>\n+ * </deflist>\n+ */\n++ (id) dateWithNaturalLanguageString: (NSString*)string\n+                              locale: (NSDictionary*)locale;\n+#endif\n+\n+/** Returns an autoreleased instance with the date and time value given\n+ * by the string using the ISO standard format YYYY-MM-DD HH:MM:SS +/-HHHMM\n+ * (all the fields of which must be present).\n+ */\n++ (id) dateWithString: (NSString*)description;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6,GS_API_LATEST)\n+/** Returns an autoreleased NSDate instance whose value is offset from\n+ * that of the given date by the specified interval in seconds.\n+ */\n++ (id) dateWithTimeInterval: (NSTimeInterval)seconds sinceDate: (NSDate*)date;\n+#endif\n+\n+/** Returns an autoreleased instance with the offset from the unix system\n+ * reference date of 1 January 1970, GMT.\n+ */\n++ (id) dateWithTimeIntervalSince1970: (NSTimeInterval)seconds;\n+\n+/** Returns an autoreleased instance with the offset from the current\n+ * date/time given by seconds (which may be fractional).\n+ */\n++ (id) dateWithTimeIntervalSinceNow: (NSTimeInterval)seconds;\n+\n+/** Returns an autoreleased instance with the offset from the OpenStep\n+ * reference date of 1 January 2001, GMT.\n+ */\n++ (id) dateWithTimeIntervalSinceReferenceDate: (NSTimeInterval)seconds;\n+\n+/** Returns an autoreleased instance with the date/time set in the far\n+ * past.\n+ */\n++ (id) distantPast;\n+\n+/** Returns an autoreleased instance with the date/time set in the far\n+ * future.\n+ */\n++ (id) distantFuture;\n+\n+/** Returns the time interval between the reference date and the current\n+ * time.\n+ */\n++ (NSTimeInterval) timeIntervalSinceReferenceDate;\n+\n+/** Returns an autorelease date instance formed by adding the specified\n+ * time interval in seconds to the receiver's time interval.\n+ */\n+- (id) addTimeInterval: (NSTimeInterval)seconds;\n+\n+/** Returns the time interval between the receivers value and the\n+ * OpenStep reference date of 1 Jan 2001 GMT.\n+ */\n+- (NSComparisonResult) compare: (NSDate*)otherDate;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6,GS_API_LATEST)\n+/** Returns an autoreleased NSDate instance whose value is offset from\n+ * that of the receiver by the specified interval.\n+ */\n+- (id) dateByAddingTimeInterval: (NSTimeInterval)ti;\n+#endif\n+\n+/** Returns an autoreleased instance of the [NSCalendarDate] class whose\n+ * date/time value is the same as that of the receiver, and which uses\n+ * the formatString and timeZone specified.\n+ */\n+- (NSCalendarDate*) dateWithCalendarFormat: (NSString*)formatString\n+\t\t\t\t  timeZone: (NSTimeZone*)timeZone;\n+\n+/** Returns a string representation of the receiver formatted according\n+ * to the default format string, time zone, and locale.\n+ */\n+- (NSString*) description;\n+\n+/** Returns a string representation of the receiver formatted according\n+ * to the specified format string, time zone, and locale.\n+ */\n+- (NSString*) descriptionWithCalendarFormat: (NSString*)format\n+\t\t\t\t   timeZone: (NSTimeZone*)aTimeZone\n+\t\t\t\t     locale: (NSDictionary*)l;\n+\n+/** Returns a string representation of the receiver formatted according\n+ * to the default format string and time zone, but using the given locale.\n+ */\n+- (NSString*) descriptionWithLocale: (id)locale;\n+\n+/** Returns the earlier of the receiver and otherDate.<br />\n+ * If the two represent identical date/time values, returns the receiver.\n+ */\n+- (NSDate*) earlierDate: (NSDate*)otherDate;\n+\n+/** Returns an instance initialised with the current date/time.\n+ */\n+- (id) init;\n+\n+/** Returns an instance with the date and time value given\n+ * by the string using the ISO standard format YYYY-MM-DD HH:MM:SS +/-HHHMM\n+ * (all the fields of which must be present).\n+ */\n+- (id) initWithString: (NSString*)description;\n+\n+/** Returns an instance with the given offset from anotherDate.\n+ */\n+- (id) initWithTimeInterval: (NSTimeInterval)secsToBeAdded\n+\t\t  sinceDate: (NSDate*)anotherDate;\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/** Returns an instance with the offset from the unix system\n+ * reference date of 1 January 1970, GMT.\n+ */\n+- (id) initWithTimeIntervalSince1970: (NSTimeInterval)seconds;\n+#endif\n+\n+/** Returns an instance with the offset from the current date/time.\n+ */\n+- (id) initWithTimeIntervalSinceNow: (NSTimeInterval)secsToBeAdded;\n+\n+/** <init />\n+ * Returns an instance with the given offset from the OpenStep\n+ * reference date of 1 January 2001, GMT.\n+ */\n+- (id) initWithTimeIntervalSinceReferenceDate: (NSTimeInterval)secs;\n+\n+/** Returns NO if other is not a date, otherwise returns the result of\n+ * calling the -isEqualtoDate: method.\n+ */\n+- (BOOL) isEqual: (id)other;\n+\n+/**  Returns whether the receiver is exactly equal to other, to the limit\n+ *  of the NSTimeInterval precision.<br />\n+ *  This is the behavior of the current MacOS-X system, not that of the\n+ *  OpenStep specification (which counted two dates within a second of\n+ *  each other as being equal).<br />\n+ *  The old behavior meant that two dates equal to a third date were not\n+ *  necessarily equal to each other (confusing), and meant that there was\n+ *  no reasonable way to use a date as a dictionary key or store dates\n+ *  in a set.\n+ */\n+- (BOOL) isEqualToDate: (NSDate*)other;\n+\n+/** Returns the earlier of the receiver and otherDate.<br />\n+ * If the two represent identical date/time values, returns the receiver.\n+ */\n+- (NSDate*) laterDate: (NSDate*)otherDate;\n+\n+/** Returns the time interval between the receivers value and the\n+ * unix system reference date of 1 January 1970, GMT.\n+ */\n+- (NSTimeInterval) timeIntervalSince1970;\n+\n+/** Returns the time interval between the receivers value and that of the\n+ * otherDate argument.  If otherDate is earlier than the receiver, the\n+ * returned value will be positive, if it is later it will be negative.<br />\n+ * For current (2011) OSX compatibility, this method returns NaN if otherDate\n+ * is nil ... do not write code depending on that behavior.\n+ */\n+- (NSTimeInterval) timeIntervalSinceDate: (NSDate*)otherDate;\n+\n+/** Returns the time interval between the receivers value and the\n+ * current date/time.  If the receiver represents a date/time in\n+ * the past this will be negative, if it is in the future the\n+ * returned value will be positive.\n+ */\n+- (NSTimeInterval) timeIntervalSinceNow;\n+\n+/** Returns the time interval between the receivers value and the\n+ * OpenStep reference date of 1 Jan 2001 GMT.\n+ */\n+- (NSTimeInterval) timeIntervalSinceReferenceDate;\n+\n+@end\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif  /* __NSDate_h_GNUSTEP_BASE_INCLUDE*/"}, {"sha": "5f31abdf13da6eeb0bb19f05c7924bcce7481f7b", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSEnumerator.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSEnumerator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSEnumerator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSEnumerator.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,63 @@\n+/*\n+   NSEnumerator.h\n+\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+   Author:  Scott Christley <scottc@net-community.com>\n+   Date: January 1998\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+*/\n+\n+#ifndef __NSEnumerator_h_GNUSTEP_BASE_INCLUDE\n+#define __NSEnumerator_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import\t\"NSObject.h\"\n+\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+@class GS_GENERIC_CLASS(NSArray, ElementT);\n+\n+typedef struct\n+{\n+  unsigned long\tstate;\n+  __unsafe_unretained id\t\t*itemsPtr;\n+  unsigned long\t*mutationsPtr;\n+  unsigned long\textra[5];\n+} NSFastEnumerationState;\n+\n+@protocol NSFastEnumeration\n+- (NSUInteger) countByEnumeratingWithState: (NSFastEnumerationState *)state\n+\t\t\t\t   objects: (__unsafe_unretained id[])stackbuf\n+\t\t\t\t     count: (NSUInteger)len;\n+@end\n+\n+@interface GS_GENERIC_CLASS(NSEnumerator, IterT) : NSObject <NSFastEnumeration>\n+- (GS_GENERIC_CLASS(NSArray, IterT) *) allObjects;\n+- (GS_GENERIC_TYPE(IterT)) nextObject;\n+@end\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif /* __NSEnumerator_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "05888b7d206ca54fd969ada3761b9304d5af3ec3", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSGeometry.h", "status": "added", "additions": 609, "deletions": 0, "changes": 609, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSGeometry.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSGeometry.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSGeometry.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,609 @@\n+/* Interface for NSGeometry routines for GNUStep\n+ * Copyright (C) 1995 Free Software Foundation, Inc.\n+ * \n+ * Written by:  Adam Fedor <fedor@boulder.colorado.edu>\n+ * Date: 1995,199\n+ * \n+ * This file is part of the GNUstep Base Library.\n+ * \n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2 of the License, or (at your option) any later version.\n+ * \n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Library General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02111 USA.\n+ */ \n+\n+#ifndef __NSGeometry_h_GNUSTEP_BASE_INCLUDE\n+#define __NSGeometry_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import <objc/objc.h>\n+\n+#import \"NSString.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+/**** Type, Constant, and Macro Definitions **********************************/\n+\n+#ifndef MAX\n+#define MAX(a,b) \\\n+       ({__typeof__(a) _MAX_a = (a); __typeof__(b) _MAX_b = (b);  \\\n+         _MAX_a > _MAX_b ? _MAX_a : _MAX_b; })\n+#define\tGS_DEFINED_MAX\n+#endif\n+\n+#ifndef MIN\n+#define MIN(a,b) \\\n+       ({__typeof__(a) _MIN_a = (a); __typeof__(b) _MIN_b = (b);  \\\n+         _MIN_a < _MIN_b ? _MIN_a : _MIN_b; })\n+#define\tGS_DEFINED_MIN\n+#endif\n+\n+/**\n+<example>{\n+  CGFloat x;\n+  CGFloat y;\n+}</example>\n+ <p>Represents a 2-d cartesian position.</p> */\n+typedef struct _NSPoint NSPoint;\n+struct _NSPoint\n+{\n+  CGFloat x;\n+  CGFloat y;\n+};\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/** Array of NSPoint structs. */\n+typedef NSPoint *NSPointArray;\n+/** Pointer to NSPoint struct. */\n+typedef NSPoint *NSPointPointer;\n+#endif\n+\n+/**\n+<example>{\n+  CGFloat width;\n+  CGFloat height;\n+}</example>\n+ <p>Floating point rectangle size.</p> */\n+typedef struct _NSSize NSSize;\n+struct _NSSize\n+{\n+  CGFloat width;\n+  CGFloat height;\n+};\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/** Array of NSSize structs. */\n+typedef NSSize *NSSizeArray;\n+/** Pointer to NSSize struct. */\n+typedef NSSize *NSSizePointer;\n+#endif\n+\n+/**\n+<example>{\n+  NSPoint origin;\n+  NSSize size;\n+}</example>\n+\n+ <p>Rectangle.</p> */\n+typedef struct _NSRect NSRect;\n+struct _NSRect\n+{\n+  NSPoint origin;\n+  NSSize size;\n+};\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/** Array of NSRect structs. */\n+typedef NSRect *NSRectArray;\n+/** Pointer to NSRect struct. */\n+typedef NSRect *NSRectPointer;\n+#endif\n+\n+enum\n+{\n+  NSMinXEdge = 0,\n+  NSMinYEdge = 1,\n+  NSMaxXEdge = 2,\n+  NSMaxYEdge = 3\n+};\n+/** Sides of a rectangle.\n+<example>\n+{\n+  NSMinXEdge,\n+  NSMinYEdge,\n+  NSMaxXEdge,\n+  NSMaxYEdge\n+}\n+</example>\n+ */\n+typedef NSUInteger NSRectEdge;\n+\n+/**\n+<example>{\n+  CGFloat top;\n+  CGFloat left;\n+  CGFloat bottom;\n+  CGFloat right;\n+}</example>\n+\n+ <p>A description of the distance between the edges of two rectangles.</p> */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_7, GS_API_LATEST)\n+typedef struct NSEdgeInsets {\n+    CGFloat top;\n+    CGFloat left;\n+    CGFloat bottom;\n+    CGFloat right;\n+} NSEdgeInsets;\n+#endif\n+\n+/** Point at 0,0 */\n+static const NSPoint NSZeroPoint __attribute__((unused)) = {0.0,0.0};\n+/** Zero-size rectangle at 0,0 */\n+static const NSRect NSZeroRect __attribute__((unused)) = {{0.0,0.0},{0.0,0.0}};\n+/** Zero size */\n+static const NSSize NSZeroSize __attribute__((unused)) = {0.0,0.0};\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_7, GS_API_LATEST)\n+/** Zero edge insets **/\n+static const NSEdgeInsets NSEdgeInsetsZero __attribute__((unused))  = {0.0,0.0,0.0,0.0};\n+#endif\n+\n+/**** Function Prototypes ****************************************************/\n+\n+/*\n+ *\tAll but the most complex functions are declared static inline in this\n+ *\theader file so that they are maximally efficient.  In order to provide\n+ *\ttrue functions (for code modules that don't have this header) this\n+ *\theader is included in NSGeometry.m where the functions are no longer\n+ *\tdeclared inline.\n+ */\n+#ifdef\tIN_NSGEOMETRY_M\n+#define\tGS_GEOM_SCOPE\textern\n+#define GS_GEOM_ATTR\t\n+#else\n+#define\tGS_GEOM_SCOPE\tstatic inline\n+#define GS_GEOM_ATTR\t__attribute__((unused))\n+#endif\n+\n+/** Create Basic Structures... **/\n+\n+GS_GEOM_SCOPE NSPoint\n+NSMakePoint(CGFloat x, CGFloat y) GS_GEOM_ATTR;\n+\n+/** Returns an NSPoint having x-coordinate X and y-coordinate Y. */\n+GS_GEOM_SCOPE NSPoint\n+NSMakePoint(CGFloat x, CGFloat y)\n+{\n+  NSPoint point;\n+\n+  point.x = x;\n+  point.y = y;\n+  return point;\n+}\n+\n+GS_GEOM_SCOPE NSSize\n+NSMakeSize(CGFloat w, CGFloat h) GS_GEOM_ATTR;\n+\n+/** Returns an NSSize having width w and height h. */\n+GS_GEOM_SCOPE NSSize\n+NSMakeSize(CGFloat w, CGFloat h)\n+{\n+  NSSize size;\n+\n+  size.width = w;\n+  size.height = h;\n+  return size;\n+}\n+\n+GS_GEOM_SCOPE NSRect\n+NSMakeRect(CGFloat x, CGFloat y, CGFloat w, CGFloat h) GS_GEOM_ATTR;\n+\n+/** Returns an NSRect having point of origin (x, y) and size {w, h}. */\n+GS_GEOM_SCOPE NSRect\n+NSMakeRect(CGFloat x, CGFloat y, CGFloat w, CGFloat h)\n+{\n+  NSRect rect;\n+\n+  rect.origin.x = x;\n+  rect.origin.y = y;\n+  rect.size.width = w;\n+  rect.size.height = h;\n+  return rect;\n+}\n+\n+/** Constructs NSEdgeInsets. **/\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_7, GS_API_LATEST)\n+GS_GEOM_SCOPE NSEdgeInsets\n+NSEdgeInsetsMake(CGFloat top, CGFloat left,\n+                 CGFloat bottom, CGFloat right) GS_GEOM_ATTR;\n+\n+GS_GEOM_SCOPE NSEdgeInsets\n+NSEdgeInsetsMake(CGFloat top, CGFloat left, CGFloat bottom, CGFloat right)\n+{\n+  NSEdgeInsets edgeInsets;\n+\n+  edgeInsets.top = top;\n+  edgeInsets.left = left;\n+  edgeInsets.bottom = bottom;\n+  edgeInsets.right = right;\n+\n+  return edgeInsets;\n+}\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_10, GS_API_LATEST)\n+/** Compares two edge insets for equality. **/\n+GS_EXPORT BOOL\n+NSEdgeInsetsEqual(NSEdgeInsets e1, NSEdgeInsets e2);\n+#endif\n+\n+#endif\n+\n+/** Get a Rectangle's Coordinates... **/\n+\n+GS_GEOM_SCOPE CGFloat\n+NSMaxX(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns the greatest x-coordinate value still inside aRect. */\n+GS_GEOM_SCOPE CGFloat\n+NSMaxX(NSRect aRect)\n+{\n+  return aRect.origin.x + aRect.size.width;\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSMaxY(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns the greatest y-coordinate value still inside aRect. */\n+GS_GEOM_SCOPE CGFloat\n+NSMaxY(NSRect aRect)\n+{\n+  return aRect.origin.y + aRect.size.height;\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSMidX(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns the x-coordinate of aRect's middle point. */\n+GS_GEOM_SCOPE CGFloat\n+NSMidX(NSRect aRect)\n+{\n+  return aRect.origin.x + (aRect.size.width / 2.0);\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSMidY(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns the y-coordinate of aRect's middle point. */\n+GS_GEOM_SCOPE CGFloat\n+NSMidY(NSRect aRect)\n+{\n+  return aRect.origin.y + (aRect.size.height / 2.0);\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSMinX(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns the least x-coordinate value still inside aRect. */\n+GS_GEOM_SCOPE CGFloat\n+NSMinX(NSRect aRect)\n+{\n+  return aRect.origin.x;\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSMinY(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns the least y-coordinate value still inside aRect. */\n+GS_GEOM_SCOPE CGFloat\n+NSMinY(NSRect aRect)\n+{\n+  return aRect.origin.y;\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSWidth(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns aRect's width. */\n+GS_GEOM_SCOPE CGFloat\n+NSWidth(NSRect aRect)\n+{\n+  return aRect.size.width;\n+}\n+\n+GS_GEOM_SCOPE CGFloat\n+NSHeight(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns aRect's height. */\n+GS_GEOM_SCOPE CGFloat\n+NSHeight(NSRect aRect)\n+{\n+  return aRect.size.height;\n+}\n+\n+GS_GEOM_SCOPE BOOL\n+NSIsEmptyRect(NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Returns 'YES' iff the area of aRect is zero (i.e., iff either\n+ * of aRect's width or height is negative or zero). */\n+GS_GEOM_SCOPE BOOL\n+NSIsEmptyRect(NSRect aRect)\n+{\n+  return ((NSWidth(aRect) > 0) && (NSHeight(aRect) > 0)) ? NO : YES;\n+}\n+\n+/** Modify a Copy of a Rectangle... **/\n+\n+GS_GEOM_SCOPE NSRect\n+NSOffsetRect(NSRect aRect, CGFloat dx, CGFloat dy) GS_GEOM_ATTR;\n+\n+/** Returns the rectangle obtained by translating aRect\n+ * horizontally by dx and vertically by dy. */\n+GS_GEOM_SCOPE NSRect\n+NSOffsetRect(NSRect aRect, CGFloat dx, CGFloat dy)\n+{\n+  NSRect rect = aRect;\n+\n+  rect.origin.x += dx;\n+  rect.origin.y += dy;\n+  return rect;\n+}\n+\n+GS_GEOM_SCOPE NSRect\n+NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY) GS_GEOM_ATTR;\n+\n+/** Returns the rectangle obtained by moving each of aRect's\n+ * horizontal sides inward by dy and each of aRect's vertical\n+ * sides inward by dx.<br />\n+ * NB. For MacOS-X compatability, this is permitted to return\n+ * a rectanglew with nagative width or height, strange as that seems.\n+ */\n+GS_GEOM_SCOPE NSRect\n+NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY)\n+{\n+  NSRect rect;\n+\n+  rect = NSOffsetRect(aRect, dX, dY);\n+  rect.size.width -= (2 * dX);\n+  rect.size.height -= (2 * dY);\n+  return rect;\n+}\n+\n+/** Divides aRect into two rectangles (namely slice and remainder) by\n+ * \"cutting\" aRect---parallel to, and a distance amount from the given edge\n+ * of aRect.  You may pass 0 in as either of slice or\n+ * remainder to avoid obtaining either of the created rectangles. */\n+GS_EXPORT void\n+NSDivideRect(NSRect aRect,\n+             NSRect *slice,\n+             NSRect *remainder,\n+             CGFloat amount,\n+             NSRectEdge edge);\n+\n+/** Returns a rectangle obtained by expanding aRect minimally\n+ * so that all four of its defining components are integers. */\n+GS_EXPORT NSRect\n+NSIntegralRect(NSRect aRect);\n+\n+/** Compute a Third Rectangle from Two Rectangles... **/\n+\n+GS_GEOM_SCOPE NSRect\n+NSUnionRect(NSRect aRect, NSRect bRect) GS_GEOM_ATTR;\n+\n+/** Returns the smallest rectangle which contains both aRect\n+ * and bRect (modulo a set of measure zero).  If either of aRect\n+ * or bRect is an empty rectangle, then the other rectangle is\n+ * returned.  If both are empty, then the empty rectangle is returned. */\n+GS_GEOM_SCOPE NSRect\n+NSUnionRect(NSRect aRect, NSRect bRect)\n+{\n+  NSRect rect;\n+\n+  if (NSIsEmptyRect(aRect) && NSIsEmptyRect(bRect))\n+    return NSMakeRect(0.0,0.0,0.0,0.0);\n+  else if (NSIsEmptyRect(aRect))\n+    return bRect;\n+  else if (NSIsEmptyRect(bRect))\n+    return aRect;\n+\n+  rect = NSMakeRect(MIN(NSMinX(aRect), NSMinX(bRect)),\n+                    MIN(NSMinY(aRect), NSMinY(bRect)), 0.0, 0.0);\n+\n+  rect = NSMakeRect(NSMinX(rect),\n+                    NSMinY(rect),\n+                    MAX(NSMaxX(aRect), NSMaxX(bRect)) - NSMinX(rect),\n+                    MAX(NSMaxY(aRect), NSMaxY(bRect)) - NSMinY(rect));\n+\n+  return rect;\n+}\n+\n+GS_GEOM_SCOPE NSRect\n+NSIntersectionRect(NSRect aRect, NSRect bRect) GS_GEOM_ATTR;\n+\n+/** Returns the largest rectangle which lies in both aRect and\n+ * bRect.  If aRect and bRect have empty intersection (or, rather,\n+ * intersection of measure zero, since this includes having their\n+ * intersection be only a point or a line), then the empty\n+ * rectangle is returned. */\n+GS_GEOM_SCOPE NSRect\n+NSIntersectionRect (NSRect aRect, NSRect bRect)\n+{\n+  if (NSMaxX(aRect) <= NSMinX(bRect) || NSMaxX(bRect) <= NSMinX(aRect)\n+    || NSMaxY(aRect) <= NSMinY(bRect) || NSMaxY(bRect) <= NSMinY(aRect)) \n+    {\n+      return NSMakeRect(0.0, 0.0, 0.0, 0.0);\n+    }\n+  else\n+    {\n+      NSRect    rect;\n+\n+      if (NSMinX(aRect) <= NSMinX(bRect))\n+        rect.origin.x = bRect.origin.x;\n+      else\n+        rect.origin.x = aRect.origin.x;\n+\n+      if (NSMinY(aRect) <= NSMinY(bRect))\n+        rect.origin.y = bRect.origin.y;\n+      else\n+        rect.origin.y = aRect.origin.y;\n+\n+      if (NSMaxX(aRect) >= NSMaxX(bRect))\n+        rect.size.width = NSMaxX(bRect) - rect.origin.x;\n+      else\n+        rect.size.width = NSMaxX(aRect) - rect.origin.x;\n+\n+      if (NSMaxY(aRect) >= NSMaxY(bRect))\n+        rect.size.height = NSMaxY(bRect) - rect.origin.y;\n+      else\n+        rect.size.height = NSMaxY(aRect) - rect.origin.y;\n+\n+      return rect;\n+    }\n+}\n+\n+/** Test geometric relationships... **/\n+\n+/** Returns 'YES' iff aRect's and bRect's origin and size are the same. */\n+GS_EXPORT BOOL\n+NSEqualRects(NSRect aRect, NSRect bRect) GS_GEOM_ATTR;\n+\n+/** Returns 'YES' iff aSize's and bSize's width and height are the same. */\n+GS_EXPORT BOOL\n+NSEqualSizes(NSSize aSize, NSSize bSize) GS_GEOM_ATTR;\n+\n+/** Returns 'YES' iff aPoint's and bPoint's x- and y-coordinates\n+ * are the same. */\n+GS_EXPORT BOOL\n+NSEqualPoints(NSPoint aPoint, NSPoint bPoint) GS_GEOM_ATTR;\n+\n+GS_GEOM_SCOPE BOOL\n+NSMouseInRect(NSPoint aPoint, NSRect aRect, BOOL flipped) GS_GEOM_ATTR;\n+\n+/** Returns 'YES' iff aPoint is inside aRect. */ \n+GS_GEOM_SCOPE BOOL\n+NSMouseInRect(NSPoint aPoint, NSRect aRect, BOOL flipped)\n+{\n+  if (flipped)\n+    {\n+      return ((aPoint.x >= NSMinX(aRect))\n+        && (aPoint.y >= NSMinY(aRect))\n+        && (aPoint.x < NSMaxX(aRect))\n+        && (aPoint.y < NSMaxY(aRect))) ? YES : NO;\n+    }\n+  else\n+    {\n+      return ((aPoint.x >= NSMinX(aRect))\n+        && (aPoint.y > NSMinY(aRect))\n+        && (aPoint.x < NSMaxX(aRect))\n+        && (aPoint.y <= NSMaxY(aRect))) ? YES : NO;\n+    }\n+}\n+\n+GS_GEOM_SCOPE BOOL\n+NSPointInRect(NSPoint aPoint, NSRect aRect) GS_GEOM_ATTR;\n+\n+/** Just like 'NSMouseInRect(aPoint, aRect, YES)'. */\n+GS_GEOM_SCOPE BOOL\n+NSPointInRect(NSPoint aPoint, NSRect aRect)\n+{\n+  return NSMouseInRect(aPoint, aRect, YES);\n+}\n+\n+GS_GEOM_SCOPE BOOL\n+NSContainsRect(NSRect aRect, NSRect bRect) GS_GEOM_ATTR;\n+\n+/** Returns 'YES' iff aRect totally encloses bRect.  NOTE: For\n+ * this to be the case, aRect cannot be empty, nor can any side\n+ * of bRect go beyond any side of aRect. Note that this behavior\n+ * is different than the original OpenStep behavior, where the sides\n+ * of bRect could not touch aRect. */\n+GS_GEOM_SCOPE BOOL\n+NSContainsRect(NSRect aRect, NSRect bRect)\n+{\n+  return (!NSIsEmptyRect(bRect)\n+    && (NSMinX(aRect) <= NSMinX(bRect))\n+    && (NSMinY(aRect) <= NSMinY(bRect))\n+    && (NSMaxX(aRect) >= NSMaxX(bRect))\n+    && (NSMaxY(aRect) >= NSMaxY(bRect))) ? YES : NO;\n+}\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+GS_GEOM_SCOPE BOOL\n+NSIntersectsRect(NSRect aRect, NSRect bRect) GS_GEOM_ATTR;\n+\n+/** Returns YES if aRect and bRect have non-zero intersection area\n+    (intersecting at a line or a point doesn't count). */\n+GS_GEOM_SCOPE BOOL\n+NSIntersectsRect(NSRect aRect, NSRect bRect)\n+{\n+  /* Note that intersecting at a line or a point doesn't count */\n+  return (NSMaxX(aRect) <= NSMinX(bRect)\n+    || NSMaxX(bRect) <= NSMinX(aRect)\n+    || NSMaxY(aRect) <= NSMinY(bRect)\n+    || NSMaxY(bRect) <= NSMinY(aRect)\n+    || NSIsEmptyRect(aRect)\n+    || NSIsEmptyRect(bRect)) ? NO : YES;\n+}\n+#endif\n+\n+/** Get a String Representation... **/\n+\n+#ifdef __OBJC__\n+/** Returns an NSString of the form \"{x=X; y=Y}\", where\n+ * X and Y are the x- and y-coordinates of aPoint, respectively. */\n+GS_EXPORT NSString *\n+NSStringFromPoint(NSPoint aPoint);\n+\n+/** Returns an NSString of the form \"{x=X; y=Y; width=W; height=H}\",\n+ * where X, Y, W, and H are the x-coordinate, y-coordinate,\n+ * width, and height of aRect, respectively. */\n+GS_EXPORT NSString *\n+NSStringFromRect(NSRect aRect);\n+\n+/** Returns an NSString of the form \"{width=W; height=H}\", where\n+ * W and H are the width and height of aSize, respectively. */\n+GS_EXPORT NSString *\n+NSStringFromSize(NSSize aSize);\n+\n+/** Parses point from string of form \"<code>{x=a; y=b}</code>\". (0,0) returned\n+    if parsing fails. */\n+GS_EXPORT NSPoint\tNSPointFromString(NSString* string);\n+\n+/** Parses size from string of form \"<code>{width=a; height=b}</code>\". Size of\n+    0,0 returned if parsing fails. */\n+GS_EXPORT NSSize\tNSSizeFromString(NSString* string);\n+\n+/** Parses point from string of form \"<code>{x=a; y=b; width=c;\n+    height=d}</code>\".  Rectangle of 0 size at origin returned if parsing\n+    fails.\n+*/\n+GS_EXPORT NSRect\tNSRectFromString(NSString* string);\n+\n+#endif /* __OBJC__ */\n+\n+#ifdef\tGS_DEFINED_MAX\n+#undef\tGS_DEFINED_MAX\n+#undef\tMAX\n+#endif\n+\n+#ifdef\tGS_DEFINED_MIN\n+#undef\tGS_DEFINED_MIN\n+#undef\tMIN\n+#endif\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif /* __NSGeometry_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "189af80436ab4b02c950e79c82486269fb627e57", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSObjCRuntime.h", "status": "added", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSObjCRuntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSObjCRuntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSObjCRuntime.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,317 @@\n+/** Interface to ObjC runtime for GNUStep\n+   Copyright (C) 1995, 1997, 2000 Free Software Foundation, Inc.\n+\n+   Written by:  Andrew Kachites McCallum <mccallum@gnu.ai.mit.edu>\n+   Date: 1995\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+    AutogsdocSource: NSObjCRuntime.m\n+    AutogsdocSource: NSLog.m\n+\n+   */\n+\n+#ifndef __NSObjCRuntime_h_GNUSTEP_BASE_INCLUDE\n+#define __NSObjCRuntime_h_GNUSTEP_BASE_INCLUDE\n+\n+#ifdef __cplusplus\n+#ifndef __STDC_LIMIT_MACROS\n+#define __STDC_LIMIT_MACROS 1\n+#endif\n+#endif\n+\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+#import\t\"../GNUstepBase/GSConfig.h\"\n+#import\t\"../GNUstepBase/GNUstep.h\"\n+#if __BLOCKS__\n+#import\t\"../GNUstepBase/GSBlocks.h\"\n+#endif\n+\n+#include <stdarg.h>\n+#include <limits.h>\n+#include <float.h>\n+\n+/* PA HP-UX kludge.  */\n+#if defined(__hppa__) && defined(__hpux__) && !defined(PRIuPTR)\n+#define PRIuPTR \"lu\"\n+#endif\n+\n+/* IRIX kludge.  */\n+#if defined(__sgi)\n+/* IRIX 6.5 <inttypes.h> provides all definitions, but only for C99\n+   compilations.  */\n+#define PRId8 \"hhd\"\n+#define PRIu8 \"hhu\"\n+#if (_MIPS_SZLONG == 32)\n+#define PRId64 \"lld\"\n+#define PRIu64 \"llu\"\n+#endif\n+/* This doesn't match <inttypes.h>, which always has \"lld\" here, but the\n+   arguments are uint64_t, int64_t, which are unsigned long, long for\n+   64-bit in <sgidefs.h>.  */\n+#if (_MIPS_SZLONG == 64)\n+#define PRId64 \"ld\"\n+#define PRIu64 \"lu\"\n+#endif\n+/* This doesn't match <inttypes.h>, which has \"u\" here, but the arguments\n+   are uintptr_t, which is always unsigned long.  */\n+#define PRIuPTR \"lu\"\n+#endif\n+\n+/* Solaris < 10 kludge.  */\n+#if defined(__sun__) && defined(__svr4__) && !defined(PRIuPTR)\n+#if defined(__arch64__) || defined (__x86_64__)\n+#define PRIuPTR \"lu\"\n+#define PRIdPTR \"ld\"\n+#define PRIxPTR \"lx\"\n+#else\n+#define PRIuPTR \"u\"\n+#define PRIdPTR \"d\"\n+#define PRIxPTR \"x\"\n+#endif\n+#endif\n+\n+\n+/* These typedefs must be in place before GSObjCRuntime.h is imported.\n+ */\n+\n+#if     !defined(NSINTEGER_DEFINED)\n+typedef\tintptr_t\tNSInteger;\n+typedef\tuintptr_t\tNSUInteger;\n+#\tdefine NSIntegerMax  INTPTR_MAX\n+#\tdefine NSIntegerMin  INTPTR_MIN\n+#\tdefine NSUIntegerMax UINTPTR_MAX\n+#endif /* !defined(NSINTEGER_DEFINED) */\n+\n+#if     !defined(CGFLOAT_DEFINED)\n+#if     GS_SIZEOF_VOIDP == 8\n+#define CGFLOAT_IS_DBL  1\n+typedef double          CGFloat;\n+#define CGFLOAT_MIN\tDBL_MIN\n+#define CGFLOAT_MAX\tDBL_MAX\n+#else\n+typedef float           CGFloat;\n+#define CGFLOAT_MIN\tFLT_MIN\n+#define CGFLOAT_MAX\tFLT_MAX\n+#endif\n+#endif /* !defined(CGFLOAT_DEFINED) */\n+\n+#define NSINTEGER_DEFINED 1\n+#define CGFLOAT_DEFINED 1\n+#ifndef NS_AUTOMATED_REFCOUNT_UNAVAILABLE\n+#  if __has_feature(objc_arc)\n+#    define NS_AUTOMATED_REFCOUNT_UNAVAILABLE \\\n+      __attribute__((unavailable(\"Not available with automatic reference counting\")))\n+#  else\n+#    define NS_AUTOMATED_REFCOUNT_UNAVAILABLE\n+#  endif\n+#endif\n+\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+\n+/*\n+ * We can have strongly typed enums in C++11 mode or when the objc_fixed_enum\n+ * feature is availble.\n+ */\n+#if (__has_feature(objc_fixed_enum) || (__cplusplus && (__cplusplus > 199711L) && __has_extension(cxx_strong_enums)))\n+#  define _GS_NAMED_ENUM(ty, name) enum name : ty name; enum name : ty\n+#  define _GS_ANON_ENUM(ty) enum : ty\n+#  if __cplusplus\n+#    define NS_OPTIONS(ty,name) ty name; enum : ty\n+#  else\n+#    define NS_OPTIONS(ty,name) NS_ENUM(ty,name)\n+#  endif\n+#else // this provides less information, but works with older compilers\n+#  define _GS_NAMED_ENUM(ty, name) ty name; enum\n+#  define _GS_ANON_ENUM(ty) enum\n+#  define NS_OPTIONS(ty, name) NS_ENUM(ty, name)\n+#endif\n+// A bit of fairy dust to expand NS_ENUM to the correct variant\n+#define _GS_GET_ENUM_MACRO(_first,_second,NAME,...) NAME\n+/* The trick here is that placing the variadic args first will push the name\n+ * that the _GS_GET_ENUM_MACRO expands to into the correct position.\n+ */\n+#define NS_ENUM(...) _GS_GET_ENUM_MACRO(__VA_ARGS__,_GS_NAMED_ENUM,_GS_ANON_ENUM)(__VA_ARGS__)\n+\n+/*\n+ * If the compiler supports nullability qualifiers, we define the macros for\n+ * non-null sections.\n+ */\n+#if __has_feature(nullability)\n+#  define NS_ASSUME_NONNULL_BEGIN _Pragma(\"clang assume_nonnull begin\")\n+#  define NS_ASSUME_NONNULL_END   _Pragma(\"clang assume_nonnull end\")\n+#else\n+#  define NS_ASSUME_NONNULL_BEGIN\n+#  define NS_ASSUME_NONNULL_END\n+#endif\n+\n+/*\n+ * Backwards compatibility macro for instance type.\n+ */\n+#if !__has_feature(objc_instancetype)\n+# define instancetype id\n+#endif\n+\n+/*\n+ * Backwards compatibility macros for Objective-C lightweight generics.\n+ */\n+#if __has_feature(objc_generics)\n+# define GS_GENERIC_CLASS(clz, ...) clz<__VA_ARGS__>\n+# define GS_GENERIC_TYPE_F(typeRef, fallback) typeRef\n+#else\n+# define GS_GENERIC_CLASS(clz, ...) clz\n+# define GS_GENERIC_TYPE_F(typeRef, fallback) fallback\n+#endif\n+#define GS_GENERIC_TYPE(typeRef) GS_GENERIC_TYPE_F(typeRef, id)\n+\n+/**\n+ * Backwards compatibility macro for the objc_designated_initializer attribute\n+ */\n+#if __has_attribute(objc_designated_initializer)\n+#  define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))\n+#else\n+#  define NS_DESIGNATED_INITIALIZER\n+#endif\n+\n+/** Bitfield used to specify options to control enumeration over collections.\n+ */\n+typedef NS_OPTIONS(NSUInteger, NSEnumerationOptions)\n+{\n+  NSEnumerationConcurrent = (1UL << 0), /** Specifies that the enumeration\n+   * is concurrency-safe.  Note that this does not mean that it will be\n+   * carried out in a concurrent manner, only that it can be.\n+   */\n+\n+  NSEnumerationReverse = (1UL << 1) /** Specifies that the enumeration should\n+   * happen in the opposite of the natural order of the collection.\n+   */\n+};\n+\n+\n+/** Bitfield used to specify options to control the sorting of collections.\n+ */\n+typedef NS_OPTIONS(NSUInteger, NSSortOptions)\n+{\n+    NSSortConcurrent = (1UL << 0), /** Specifies that the sort\n+     * is concurrency-safe.  Note that this does not mean that it will be\n+     * carried out in a concurrent manner, only that it can be.\n+     */\n+    NSSortStable = (1UL << 4) /** Specifies that the sort should keep\n+     * equal objects in the same order in the collection.\n+     */\n+};\n+\n+\n+#import \"../GNUstepBase/GSObjCRuntime.h\"\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5,GS_API_LATEST)\n+GS_EXPORT NSString\t*NSStringFromProtocol(Protocol *aProtocol);\n+GS_EXPORT Protocol\t*NSProtocolFromString(NSString *aProtocolName);\n+#endif\n+GS_EXPORT SEL\t\tNSSelectorFromString(NSString *aSelectorName);\n+GS_EXPORT NSString\t*NSStringFromSelector(SEL aSelector);\n+GS_EXPORT SEL\t\tNSSelectorFromString(NSString *aSelectorName);\n+GS_EXPORT Class\t\tNSClassFromString(NSString *aClassName);\n+GS_EXPORT NSString\t*NSStringFromClass(Class aClass);\n+GS_EXPORT const char\t*NSGetSizeAndAlignment(const char *typePtr,\n+  NSUInteger *sizep, NSUInteger *alignp);\n+\n+#if OS_API_VERSION(GS_API_NONE, GS_API_NONE)\n+/* Logging */\n+/**\n+ *  OpenStep spec states that log messages go to stderr, but just in case\n+ *  someone wants them to go somewhere else, they can implement a function\n+ *  like this and assign a pointer to it to _NSLog_printf_handler.\n+ */\n+typedef void NSLog_printf_handler (NSString* message);\n+GS_EXPORT NSLog_printf_handler\t*_NSLog_printf_handler;\n+GS_EXPORT int\t_NSLogDescriptor;\n+@class NSRecursiveLock;\n+GS_EXPORT NSRecursiveLock\t*GSLogLock(void);\n+#endif\n+\n+GS_EXPORT void\tNSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2);\n+GS_EXPORT void\tNSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0);\n+\n+#ifndef YES\n+#define YES\t\t1\n+#endif\n+#ifndef NO\n+#define NO\t\t0\n+#endif\n+#ifndef nil\n+#define nil\t\t0\n+#endif\n+\n+/**\n+ * Contains values <code>NSOrderedSame</code>, <code>NSOrderedAscending</code>\n+ * <code>NSOrderedDescending</code>, for left hand side equals, less than, or\n+ * greater than right hand side.\n+ */\n+typedef NS_ENUM(NSInteger, NSComparisonResult)\n+{\n+  NSOrderedAscending = (NSInteger)-1, NSOrderedSame, NSOrderedDescending\n+};\n+\n+enum {NSNotFound = NSIntegerMax};\n+\n+#if __BLOCKS__\n+DEFINE_BLOCK_TYPE(NSComparator, NSComparisonResult, id, id);\n+#endif\n+\n+/**\n+ * Declare the foundation export macro as an alias to GS_EXPORT \n+ */\n+#define FOUNDATION_EXPORT GS_EXPORT\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+/**\n+ * Declare Apple availability macros for compatibility purposes as no-ops.\n+ */\n+#define NS_CLASS_AVAILABLE(...)\n+#define NS_AVAILABLE(...)\n+#define NS_AVAILABLE_MAC(...)\n+#define NS_DEPRECATED(...)\n+#define NS_DEPRECATED_MAC(...)\n+#define NS_ENUM_AVAILABLE(...)\n+#define NS_ENUM_AVAILABLE_MAC(...)\n+#define NS_ENUM_DEPRECATED(...)\n+#define NS_ENUM_DEPRECATED_MAC(...)\n+#define NS_CLASS_AVAILABLE(...)\n+#define NS_CLASS_DEPRECATED(...)\n+#define NS_CLASS_AVAILABLE_MAC(...)\n+#define NS_CLASS_DEPRECATED_MAC(...)\n+#define NS_UNAVAILABLE\n+\n+/* Define root class NS macro */\n+#ifndef NS_ROOT_CLASS\n+#if __has_attribute(objc_root_class)\n+#define NS_ROOT_CLASS __attribute__((objc_root_class))\n+#else\n+#define NS_ROOT_CLASS\n+#endif\n+#endif\n+\n+#endif /* __NSObjCRuntime_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "35647eadab62b91b44aefd8821771f5f937a4e1d", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSObject.h", "status": "added", "additions": 594, "deletions": 0, "changes": 594, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSObject.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,594 @@\n+/**Interface for NSObject for GNUStep\n+   Copyright (C) 1995, 1996, 1998 Free Software Foundation, Inc.\n+\n+   Written by:  Andrew Kachites McCallum <mccallum@gnu.ai.mit.edu>\n+   Date: 1995\n+   \n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+   \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+   AutogsdocSource: NSObject.m\n+   */ \n+\n+#ifndef __NSObject_h_GNUSTEP_BASE_INCLUDE\n+#define __NSObject_h_GNUSTEP_BASE_INCLUDE\n+\n+#import\t\"NSObjCRuntime.h\"\n+#import <objc/objc.h>\n+#import\t\"NSZone.h\"\n+\n+#ifdef\tGS_WITH_GC\n+#undef  GS_WITH_GC\n+#endif\n+#define\tGS_WITH_GC\t0\n+\n+#import\t\"../GNUstepBase/GNUstep.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+@class NSArchiver;\n+@class NSArray;\n+@class NSCoder;\n+@class NSDictionary;\n+@class NSPortCoder;\n+@class NSMethodSignature;\n+@class NSMutableString;\n+@class NSRecursiveLock;\n+@class NSString;\n+@class NSInvocation;\n+@class Protocol;\n+\n+/**\n+ * The NSObject protocol describes a minimal set of methods that all\n+ * objects are expected to support.  You should be able to send any\n+ * of the messages listed in this protocol to an object, and be safe\n+ * in assuming that the receiver can handle it.\n+ */\n+@protocol NSObject\n+/**\n+ * Returns the class of the receiver.  If the receiver is a proxy, then this\n+ * may return the class of the proxy target.  Use -isProxy to determine whether\n+ * the receiver is a proxy.  If you wish to find the real class of the\n+ * receiver, ignoring proxies, then use object_getClass().  \n+ */\n+- (Class) class;\n+/**\n+ * Returns the superclass of receiver's class.  If the receiver is a proxy,\n+ * then this may return the class of the proxy target.  Use -isProxy to\n+ * determine whether the receiver is a proxy.  If you wish to find the real\n+ * superclass of the receiver's class, ignoring proxies, then use\n+ * class_getSuperclass(object_getClass()).\n+ */\n+- (Class) superclass;\n+/**\n+ * Returns whether the receiver is equal to the argument.  Defining equality is\n+ * complex, so be careful when implementing this method.  Collections such as\n+ * NSSet depend on the behaviour of this method.  In particular, this method\n+ * must be commutative, so for any objects a and b:\n+ *\n+ * [a isEqual: b] == [b isEqual: a]\n+ *\n+ * This means that you must be very careful when returning YES if the argument\n+ * is of another class.  For example, if you define a number class that returns\n+ * YES if the argument is a string representation of the number, then this will\n+ * break because the string will not recognise your object as being equal to\n+ * itself.\n+ *\n+ * If two objects are equal, then they must have the same hash value, however\n+ * equal hash values do not imply equality.\n+ */\n+- (BOOL) isEqual: (id)anObject;\n+/**\n+ * Returns YES if the receiver is an instance of the class, an instance of the\n+ * subclass, or (in the case of proxies), an instance of something that can be\n+ * treated as an instance of the class.\n+ */\n+- (BOOL) isKindOfClass: (Class)aClass;\n+/**\n+ * Returns YES if the receiver is an instance of the class or (in the case of\n+ * proxies), an instance of something that can be treated as an instance of the\n+ * class.\n+ *\n+ * Calling this method is rarely the correct thing to do.  In most cases, a\n+ * subclass can be substituted for a superclass, so you should never need to\n+ * check that an object is really an instance of a specific class and not a\n+ * subclass.  \n+ */\n+- (BOOL) isMemberOfClass: (Class)aClass;\n+/**\n+ * Returns YES if the receiver is a proxy, NO otherwise.  The default\n+ * implementation of this method in NSObject returns NO, while the\n+ * implementation in NSProxy returns YES.\n+ */\n+- (BOOL) isProxy;\n+/**\n+ * Returns a hash value for the object.  All objects that are equal *MUST*\n+ * return the same hash value.  For efficient storage in sets, or as keys in\n+ * dictionaries, different objects should return hashes spread evenly over the\n+ * range of an integer.\n+ *\n+ * An object may not return different values from this method after being\n+ * stored in a collection.  This typically means that ether the hash value must\n+ * be constant after the object's creation, or that the object may not be\n+ * modified while stored in an unordered collection.\n+ */\n+- (NSUInteger) hash;\n+/**\n+ * Returns the receiver.  In a proxy, this may (but is not required to) return\n+ * the proxied object.\n+ */\n+- (id) self;\n+/**\n+ * Performs the specified selector.  The selector must correspond to a method\n+ * that takes no arguments.\n+ */\n+- (id) performSelector: (SEL)aSelector;\n+/**\n+ * Performs the specified selector, with the object as the argument.  This\n+ * method does not perform any automatic unboxing, so the selector must\n+ * correspond to a method that takes one object argument.\n+ */\n+- (id) performSelector: (SEL)aSelector\n+\t    withObject: (id)anObject;\n+/**\n+ * Performs the specified selector, with the objects as the arguments.  This\n+ * method does not perform any automatic unboxing, so the selector must\n+ * correspond to a method that takes two object arguments.\n+ */\n+- (id) performSelector: (SEL)aSelector\n+\t    withObject: (id)object1\n+\t    withObject: (id)object2;\n+/**\n+ * Returns YES if the object can respond to messages with the specified\n+ * selector.  The default implementation in NSObject returns YES if the\n+ * receiver has a method corresponding to the method, but other classes may\n+ * return YES if they can respond to a selector using one of the various\n+ * forwarding mechanisms.\n+ */\n+- (BOOL) respondsToSelector: (SEL)aSelector;\n+/**\n+ * Returns YES if the receiver conforms to the specified protocol.\n+ */\n+- (BOOL) conformsToProtocol: (Protocol*)aProtocol;\n+/**\n+ * Increments the reference count of the object and returns the receiver.  In\n+ * garbage collected mode, this method does nothing.  In automated reference\n+ * counting mode, you may neither implement this method nor call it directly.\n+ */\n+- (id) retain NS_AUTOMATED_REFCOUNT_UNAVAILABLE;\n+/**\n+ * Decrements the reference count of the object and destroys if it there are no\n+ * remaining references.  In garbage collected mode, this method does nothing.\n+ * In automated reference counting mode, you may neither implement this method\n+ * nor call it directly.\n+ */\n+- (oneway void) release NS_AUTOMATED_REFCOUNT_UNAVAILABLE;\n+/**\n+ * Performs a deferred -release operation.  The object's reference count is\n+ * decremented at the end of the scope of the current autorelease pool,\n+ * identified either by a -drain message sent to the current NSAutoreleasePool\n+ * instance, or in more recent versions of Objective-C by the end of an\n+ * @autorelease_pool scope.\n+ *\n+ * In garbage collected mode, this method does nothing.  In automated reference\n+ * counting mode, you may neither implement this method nor call it directly.\n+ */\n+- (id) autorelease NS_AUTOMATED_REFCOUNT_UNAVAILABLE;\n+/**\n+ * Returns the current retain count of an object.  This does not include the\n+ * result of any pending autorelease operations.\n+ *\n+ * Code that relies on this method returning a sane value is broken.  For\n+ * singletons, it may return NSUIntegerMax.  Even when it is tracking a retain\n+ * count, it will not include on-stack pointers in manual retain/release mode,\n+ * pointers marked as __unsafe_unretain or __weak in ARC mode, or pending\n+ * autorelease operations.  Its value is therefore largely meaningless.  It can\n+ * occasionally be useful for debugging.\n+ */\n+- (NSUInteger) retainCount NS_AUTOMATED_REFCOUNT_UNAVAILABLE;\n+/**\n+ * Returns the description of the object.  This is used by the %@ format\n+ * specifier in strings.\n+ */\n+- (NSString*) description;\n+/**\n+ * Returns the zone of the object.\n+ */\n+- (NSZone*) zone NS_AUTOMATED_REFCOUNT_UNAVAILABLE;\n+@end\n+\n+/**\n+ * This protocol must be adopted by any class wishing to support copying -\n+ * ie where instances of the class should be able to create new instances\n+ * which are copies of the original and, where a class has mutable and\n+ * immutable versions, where the copies are immutable.\n+ */\n+@protocol NSCopying\n+/**\n+ * Called by [NSObject-copy] passing NSDefaultMallocZone() as zone.<br />\n+ * This method returns a copy of the receiver and, where the receiver is a\n+ * mutable variant of a class which has an immutable partner class, the\n+ * object returned is an instance of that immutable class.<br />\n+ * The new object is <em>not</em> autoreleased, and is considered to be\n+ * 'owned' by the calling code ... which is therefore responsible for\n+ * releasing it.<br />\n+ * In the case where the receiver is an instance of a container class,\n+ * it is undefined whether contained objects are merely retained in the\n+ * new copy, or are themselves copied, or whether some other mechanism\n+ * entirely is used.\n+ */\n+- (id) copyWithZone: (NSZone*)zone;\n+@end\n+\n+/**\n+ * This protocol must be adopted by any class wishing to support\n+ * mutable copying - ie where instances of the class should be able\n+ * to create mutable copies of themselves.\n+ */\n+@protocol NSMutableCopying\n+/**\n+ * Called by [NSObject-mutableCopy] passing NSDefaultMallocZone() as zone.<br />\n+ * This method returns a copy of the receiver and, where the receiver is an\n+ * immutable variant of a class which has a mutable partner class, the\n+ * object returned is an instance of that mutable class.\n+ * The new object is <em>not</em> autoreleased, and is considered to be\n+ * 'owned' by the calling code ... which is therefore responsible for\n+ * releasing it.<br />\n+ * In the case where the receiver is an instance of a container class,\n+ * it is undefined whether contained objects are merely retained in the\n+ * new copy, or are themselves copied, or whether some other mechanism\n+ * entirely is used.\n+ */\n+- (id) mutableCopyWithZone: (NSZone*)zone;\n+@end\n+\n+/**\n+ * This protocol must be adopted by any class wishing to support\n+ * saving and restoring instances to an archive, or copying them\n+ * to remote processes via the Distributed Objects mechanism.\n+ */\n+@protocol NSCoding\n+\n+/**\n+ * Called when it is time for receiver to be serialized for writing to an\n+ * archive or network connection.  Receiver should record all of its instance\n+ * variables using methods on aCoder.  See documentation for [NSCoder],\n+ * [NSArchiver], [NSKeyedArchiver], and/or [NSPortCoder] for more information.\n+ */\n+- (void) encodeWithCoder: (NSCoder*)aCoder;\n+\n+/**\n+ * Called on a freshly allocated receiver when it is time to reconstitute from\n+ * serialized bytes in an archive or from a network connection.  Receiver\n+ * should load all of its instance variables using methods on aCoder.  See\n+ * documentation for [NSCoder], [NSUnarchiver], [NSKeyedUnarchiver], and/or\n+ * [NSPortCoder] for more information.\n+ */\n+- (id) initWithCoder: (NSCoder*)aDecoder;\n+@end\n+\n+@protocol NSSecureCoding <NSCoding>\n++ (BOOL)supportsSecureCoding;\n+@end\n+\n+\n+GS_ROOT_CLASS @interface NSObject <NSObject>\n+{\n+ /**\n+  * Points to instance's class.  Used by runtime to access method\n+  * implementations, etc..  Set in +alloc, Unlike other instance variables,\n+  * which are cleared there.\n+  */\n+  Class isa;\n+}\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+/** On a system which performs garbage collection, you should implement\n+ * this method to execute code when the receiver is collected.<br />\n+ * You must not call this method yourself (except when a subclass\n+ * calls the superclass method within its own implementation).\n+ */\n+- (void) finalize;\n+#endif\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+- (NSString*) className;\n+#endif\n+\n++ (id) allocWithZone: (NSZone*)z;\n++ (id) alloc;\n++ (Class) class;\n+\n+/**\n+ * This method is automatically invoked on any class which implements it\n+ * when the class is loaded into the runtime.<br />\n+ * It is also invoked on any category where the method is implemented\n+ * when that category is loaded into the runtime.<br />\n+ * The +load method is called directly by the runtime and you should never\n+ * send a +load message to a class yourself.<br />\n+ * This method is called <em>before</em> the +initialize message is sent\n+ * to the class, so you cannot depend on class initialisation having been\n+ * performed, or upon other classes existing (apart from superclasses of\n+ * the receiver, since +load is called on superclasses before it is called\n+ * on their subclasses).<br />\n+ * As a gross generalisation, it is safe to use C code, including\n+ * most ObjectiveC runtime functions within +load, but attempting to send\n+ * messages to ObjectiveC objects is likely to fail.<br />\n+ * In GNUstep, this method is implemented for NSObject to perform some\n+ * initialisation for the base library.<br />\n+ * If you implement +load for a class, don't call [super load] in your\n+ * implementation.\n+ */\n++ (void) load;\n+\n+/**\n+ * This message is automatically sent to a class by the runtime.  It is\n+ * sent once for each class, just before the class is used for the first\n+ * time (excluding any automatic call to +load by the runtime).<br />\n+ * The message is sent in a thread-safe manner ... other threads may not\n+ * call methods of the class until +initialize has finished executing.<br />\n+ * If the class has a superclass, its implementation of +initialize is\n+ * called first.<br />\n+ * If the class does not implement +initialize then the implementation\n+ * in the closest superclass may be called.  This means that +initialize may\n+ * be called more than once, and the recommended way to handle this by\n+ * using the\n+ * <code>\n+ * if (self == [classname class])\n+ * </code>\n+ * conditional to check whether the method is being called for a subclass.<br />\n+ * You should never call +initialize yourself ... let the runtime do it.<br />\n+ * You can implement +initialize in your own class if you need to.\n+ * NSObject's implementation handles essential root object and base\n+ * library initialization.<br />\n+ * It should be safe to call [super initialize] in your implementation\n+ * of +initialize.\n+ */\n++ (void) initialize;\n++ (IMP) instanceMethodForSelector: (SEL)aSelector;\n++ (NSMethodSignature*) instanceMethodSignatureForSelector: (SEL)aSelector;\n++ (BOOL) instancesRespondToSelector: (SEL)aSelector;\n++ (BOOL) isSubclassOfClass: (Class)aClass;\n++ (id) new;\n++ (void) poseAsClass: (Class)aClassObject;\n++ (id) setVersion: (NSInteger)aVersion;\n++ (NSInteger) version;\n+\n+- (id) awakeAfterUsingCoder: (NSCoder*)aDecoder;\n+- (Class) classForArchiver;\n+- (Class) classForCoder;\n+- (id) copy;\n+- (void) dealloc;\n+- (void) doesNotRecognizeSelector: (SEL)aSelector;\n+- (void) forwardInvocation: (NSInvocation*)anInvocation;\n+- (id) init;\n+- (IMP) methodForSelector: (SEL)aSelector;\n+- (NSMethodSignature*) methodSignatureForSelector: (SEL)aSelector;\n+- (id) mutableCopy;\n+- (id) replacementObjectForArchiver: (NSArchiver*)anArchiver;\n+- (id) replacementObjectForCoder: (NSCoder*)anEncoder;\n+- (Class) superclass;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+/**\n+ * This method will be called when attempting to send a message a class that\n+ * does not understand it.  The class may install a new method for the given\n+ * selector and return YES, otherwise it should return NO.\n+ *\n+ * Note: This method is only reliable when using the GNUstep runtime.  If you\n+ * require compatibility with the GCC runtime, you must also implement\n+ * -forwardInvocation: with equivalent semantics.  This will be considerably\n+ *  slower, but more portable.\n+ */\n++ (BOOL) resolveClassMethod: (SEL)name;\n+\n+/**\n+ * This method will be called when attempting to send a message an instance\n+ * that does not understand it.  The class may install a new method for the\n+ * given selector and return YES, otherwise it should return NO.\n+ *\n+ * Note: This method is only reliable when using the GNUstep runtime.  If you\n+ * require compatibility with the GCC runtime, you must also implement\n+ * -forwardInvocation: with equivalent semantics.  This will be considerably\n+ *  slower, but more portable.\n+ */\n++ (BOOL) resolveInstanceMethod: (SEL)name;\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+/**\n+ * Returns an auto-accessing proxy for the given object.  This proxy sends a\n+ * -beginContentAccess message to the receiver when it is created and an\n+ * -endContentAccess message when it is destroyed.  This prevents an object\n+ * that implements the NSDiscardableContent protocol from having its contents\n+ * discarded for as long as the proxy exists.  \n+ *\n+ * On systems using the GNUstep runtime, messages send to the proxy will be\n+ * slightly slower than direct messages.  With the GCC runtime, they will be\n+ * approximately two orders of magnitude slower.  The GNUstep runtime,\n+ * therefore, is strongly recommended for code calling this method.\n+ */\n+- (id) autoContentAccessingProxy;\n+\n+/**\n+ * If an object does not understand a message, it may delegate it to another\n+ * object.  Returning nil indicates that forwarding should not take place.  The\n+ * default implementation of this returns nil, but care should be taken when\n+ * subclassing NSObject subclasses and overriding this method that\n+ * the superclass implementation is called if returning nil.\n+ *\n+ * Note: This method is only reliable when using the GNUstep runtime and code\n+ * compiled with clang.  If you require compatibility with GCC and the GCC\n+ * runtime, you must also implement -forwardInvocation: with equivalent\n+ * semantics.  This will be considerably slower, but more portable.\n+ */\n+- (id) forwardingTargetForSelector: (SEL)aSelector;\n+\n+#endif\n+@end\n+\n+/**\n+ * Used to allocate memory to hold an object, and initialise the\n+ * class of the object to be aClass etc.  The allocated memory will\n+ * be extraBytes larger than the space actually needed to hold the\n+ * instance variables of the object.<br />\n+ * This function is used by the [NSObject+allocWithZone:] method.\n+ */\n+GS_EXPORT id\n+NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone);\n+\n+/**\n+ * Used to release the memory used by an object.<br />\n+ * This function is used by the [NSObject-dealloc] method.\n+ */\n+GS_EXPORT void\n+NSDeallocateObject(id anObject);\n+\n+/**\n+ * Used to copy anObject.  This makes a bitwise copy of anObject to\n+ * memory allocated from zone.  The allocated memory will be extraBytes\n+ * longer than that necessary to actually store the instance variables\n+ * of the copied object.<br />\n+ */\n+GS_EXPORT NSObject *\n+NSCopyObject(NSObject *anObject, NSUInteger extraBytes, NSZone *zone);\n+\n+/**\n+ * Returns a flag to indicate whether anObject should be retained or\n+ * copied in order to make a copy in the specified zone.<br />\n+ * Basically, this tests to see if anObject was allocated from\n+ * requestedZone and returns YES if it was.\n+ */\n+GS_EXPORT BOOL\n+NSShouldRetainWithZone(NSObject *anObject, NSZone *requestedZone);\n+\n+GS_EXPORT BOOL\n+NSDecrementExtraRefCountWasZero(id anObject);\n+\n+GS_EXPORT NSUInteger\n+NSExtraRefCount(id anObject);\n+\n+GS_EXPORT void\n+NSIncrementExtraRefCount(id anObject);\n+\n+#if OS_API_VERSION(GS_API_NONE, GS_API_NONE)\n+\n+/** Global lock to be used by classes when operating on any global\n+    data that invoke other methods which also access global; thus,\n+    creating the potential for deadlock. */\n+GS_EXPORT NSRecursiveLock *gnustep_global_lock;\n+\n+@interface NSObject (NEXTSTEP)\n+- (id) error:(const char *)aString, ...;\n+/* - (const char *) name;\n+   Removed because OpenStep has -(NSString*)name; */\n+@end\n+\n+#if GS_API_VERSION(GS_API_NONE, 011700)\n+@interface NSObject (GNUstep)\n++ (void) enableDoubleReleaseCheck: (BOOL)enable;\n+@end\n+#endif\n+\n+#endif\n+\n+#import\t\"NSDate.h\"\n+/**\n+ *  Declares some methods for sending messages to self after a fixed delay.\n+ *  (These methods <em>are</em> in OpenStep and OS X.)\n+ */\n+@interface NSObject (TimedPerformers)\n+\n+/**\n+ * Cancels any perform operations set up for the specified target\n+ * in the current run loop.\n+ */\n++ (void) cancelPreviousPerformRequestsWithTarget: (id)obj;\n+\n+/**\n+ * Cancels any perform operations set up for the specified target\n+ * in the current loop, but only if the value of aSelector and argument\n+ * with which the performs were set up match those supplied.<br />\n+ * Matching of the argument may be either by pointer equality or by\n+ * use of the [NSObject-isEqual:] method.\n+ */\n++ (void) cancelPreviousPerformRequestsWithTarget: (id)obj\n+\t\t\t\t\tselector: (SEL)s\n+\t\t\t\t\t  object: (id)arg;\n+/**\n+ * Sets given message to be sent to this instance after given delay,\n+ * in any run loop mode.  See [NSRunLoop].\n+ */\n+- (void) performSelector: (SEL)s\n+\t      withObject: (id)arg\n+\t      afterDelay: (NSTimeInterval)seconds;\n+\n+/**\n+ * Sets given message to be sent to this instance after given delay,\n+ * in given run loop modes.  See [NSRunLoop].\n+ */\n+- (void) performSelector: (SEL)s\n+\t      withObject: (id)arg\n+\t      afterDelay: (NSTimeInterval)seconds\n+\t\t inModes: (NSArray*)modes;\n+@end\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_6, GS_API_LATEST)\n+/**\n+ * The NSDiscardableContent protocol is used by objects which encapsulate data\n+ * which may be discarded if resource constraints are exceeded.  These\n+ * constraints are typically, but not always, related memory.  \n+ */\n+@protocol NSDiscardableContent\n+\n+/**\n+ * This method is called before any access to the object.  It returns YES if\n+ * the object's content is still valid.  The caller must call -endContentAccess\n+ * once for every call to -beginContentAccess;\n+ */\n+- (BOOL) beginContentAccess;\n+\n+/**\n+ * Discards the contents of the object if it is not currently being edited.\n+ */\n+- (void) discardContentIfPossible;\n+\n+/**\n+ * This method indicates that the caller has finished accessing the contents of\n+ * the object adopting this protocol.  Every call to -beginContentAccess must\n+ * be be paired with a call to this method after the caller has finished\n+ * accessing the contents.\n+ */\n+- (void) endContentAccess;\n+\n+/**\n+ * Returns YES if the contents of the object have been discarded, either via a\n+ * call to -discardContentIfPossible while the object is not in use, or by some\n+ * implementation dependent mechanism.  \n+ */\n+- (BOOL) isContentDiscarded;\n+@end\n+#endif\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#if     !NO_GNUSTEP && !defined(GNUSTEP_BASE_INTERNAL)\n+#import \"../GNUstepBase/NSObject+GNUstepBase.h\"\n+#endif\n+\n+#endif /* __NSObject_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "845d44ac2d56baa661e16197c41d0a45d9573537", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSRange.h", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSRange.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSRange.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSRange.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,235 @@\n+/* \n+ * Copyright (C) 1995,1999 Free Software Foundation, Inc.\n+ * \n+ * Written by:  Adam Fedor <fedor@boulder.colorado.edu>\n+ * Date: 1995\n+ * \n+ * This file is part of the GNUstep Base Library.\n+ * \n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2 of the License, or (at your option) any later version.\n+ * \n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Library General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+ * Boston, MA 02111 USA.\n+ */ \n+\n+#ifndef __NSRange_h_GNUSTEP_BASE_INCLUDE\n+#define __NSRange_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+/**** Included Headers *******************************************************/\n+\n+#import\t\"NSObject.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+@class NSException;\n+@class NXConstantString;\n+\n+/**** Type, Constant, and Macro Definitions **********************************/\n+\n+#ifndef MAX\n+#define MAX(a,b) \\\n+       ({__typeof__(a) _MAX_a = (a); __typeof__(b) _MAX_b = (b);  \\\n+         _MAX_a > _MAX_b ? _MAX_a : _MAX_b; })\n+#define\tGS_DEFINED_MAX\n+#endif\n+\n+#ifndef MIN\n+#define MIN(a,b) \\\n+       ({__typeof__(a) _MIN_a = (a); __typeof__(b) _MIN_b = (b);  \\\n+         _MIN_a < _MIN_b ? _MIN_a : _MIN_b; })\n+#define\tGS_DEFINED_MIN\n+#endif\n+\n+/**\n+ * <example>\n+{\n+  NSUInteger location;\n+  NSUInteger length;\n+}</example>\n+ * <p>\n+ *   The NSRange type is used to specify ranges of locations,\n+ *   typically items in an array, characters in a string, and bytes\n+ *   in a data object.\n+ * </p>\n+ * <p>\n+ *   As 'boundary' or 'fencepost' errors are a particularly common\n+ *   problem in programming, it is important that you understand\n+ *   how an NSRange works.\n+ * </p>\n+ * <p>\n+ *   An NSRange consists of a <em>location</em> and a <em>length</em>.  The\n+ *   points that are considered to lie in a range are the integers from\n+ *   the location to the location plus the length, so the number\n+ *   of points in a range is the length of the range plus one.<br />\n+ *   However, if you consider these points like the marks on a\n+ *   ruler, you can only store information <strong>between</strong>\n+ *   points.  So the number of items that can be stored in a range\n+ *   is the length of the range.\n+ * </p>\n+ */\n+typedef struct _NSRange NSRange;\n+struct _NSRange\n+{\n+  NSUInteger location;\n+  NSUInteger length;\n+};\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/** Pointer to an NSRange structure. */\n+typedef NSRange *NSRangePointer;\n+#endif\n+\n+/**** Function Prototypes ****************************************************/\n+\n+/*\n+ *      All but the most complex functions are declared static inline in this\n+ *      header file so that they are maximally efficient.  In order to provide\n+ *      true functions (for code modules that don't have this header) this\n+ *      header is included in NSRange.m where the functions are no longer\n+ *      declared inline.\n+ */\n+#ifdef  IN_NSRANGE_M\n+#define GS_RANGE_SCOPE   extern\n+#define GS_RANGE_ATTR\n+#else\n+#define GS_RANGE_SCOPE   static inline\n+#define GS_RANGE_ATTR    __attribute__((unused))\n+#endif\n+\n+GS_RANGE_SCOPE NSUInteger\n+NSMaxRange(NSRange range) GS_RANGE_ATTR;\n+\n+/** Returns top end of range (location + length). */\n+GS_RANGE_SCOPE NSUInteger\n+NSMaxRange(NSRange range) \n+{\n+  return range.location + range.length;\n+}\n+\n+GS_RANGE_SCOPE BOOL \n+NSLocationInRange(NSUInteger location, NSRange range) GS_RANGE_ATTR;\n+\n+/** Returns whether location is greater than or equal to range's location\n+ *  and less than its max.\n+ */\n+GS_RANGE_SCOPE BOOL \n+NSLocationInRange(NSUInteger location, NSRange range) \n+{\n+  return (location >= range.location) && (location < NSMaxRange(range));\n+}\n+\n+/** Convenience method for raising an NSRangeException. */\n+GS_EXPORT void _NSRangeExceptionRaise (void);\n+/* NB: The implementation of _NSRangeExceptionRaise is: \n+   [NSException raise: NSRangeException\n+\t       format: @\"Range location + length too great\"]; \n+\n+   _NSRangeExceptionRaise is defined in NSRange.m so that this\n+   file (NSRange.h) can be included without problems in the\n+   implementation of the base classes themselves. */\n+\n+GS_RANGE_SCOPE NSRange\n+NSMakeRange(NSUInteger location, NSUInteger length) GS_RANGE_ATTR;\n+\n+/** Creates new range starting at location and of given length. */\n+GS_RANGE_SCOPE NSRange\n+NSMakeRange(NSUInteger location, NSUInteger length)\n+{\n+  NSRange range;\n+  NSUInteger end = location + length;\n+\n+  if (end < location || end < length)\n+    {\n+      _NSRangeExceptionRaise ();\n+    }\n+  range.location = location;\n+  range.length   = length;\n+  return range;\n+}\n+\n+GS_RANGE_SCOPE BOOL\n+NSEqualRanges(NSRange range1, NSRange range2) GS_RANGE_ATTR;\n+\n+/** Returns whether range1 and range2 have same location and length. */\n+GS_RANGE_SCOPE BOOL\n+NSEqualRanges(NSRange range1, NSRange range2)\n+{\n+  return ((range1.location == range2.location)\n+                && (range1.length == range2.length));\n+}\n+\n+GS_RANGE_SCOPE NSRange\n+NSUnionRange(NSRange range1, NSRange range2) GS_RANGE_ATTR;\n+\n+/** Returns range going from minimum of aRange's and bRange's locations to\n+    maximum of their two max's. */\n+GS_RANGE_SCOPE NSRange\n+NSUnionRange(NSRange aRange, NSRange bRange)\n+{\n+  NSRange range;\n+\n+  range.location = MIN(aRange.location, bRange.location);\n+  range.length   = MAX(NSMaxRange(aRange), NSMaxRange(bRange))\n+                - range.location;\n+  return range;\n+}\n+\n+GS_RANGE_SCOPE NSRange\n+NSIntersectionRange(NSRange range1, NSRange range2) GS_RANGE_ATTR;\n+\n+/** Returns range containing indices existing in both aRange and bRange.  If\n+ *  the returned length is 0, the location is undefined and should be ignored.\n+ */\n+GS_RANGE_SCOPE NSRange\n+NSIntersectionRange (NSRange aRange, NSRange bRange)\n+{\n+  NSRange range;\n+\n+  if (NSMaxRange(aRange) < bRange.location\n+                || NSMaxRange(bRange) < aRange.location)\n+    return NSMakeRange(0, 0);\n+\n+  range.location = MAX(aRange.location, bRange.location);\n+  range.length   = MIN(NSMaxRange(aRange), NSMaxRange(bRange))\n+                - range.location;\n+  return range;\n+}\n+\n+\n+@class NSString;\n+\n+/** Returns string of form {location=a, length=b}. */\n+GS_EXPORT NSString *NSStringFromRange(NSRange range);\n+\n+/** Parses range from string of form {location=a, length=b}; returns range\n+    with 0 location and length if this fails. */\n+GS_EXPORT NSRange NSRangeFromString(NSString *aString);\n+\n+#ifdef\tGS_DEFINED_MAX\n+#undef\tGS_DEFINED_MAX\n+#undef\tMAX\n+#endif\n+\n+#ifdef\tGS_DEFINED_MIN\n+#undef\tGS_DEFINED_MIN\n+#undef\tMIN\n+#endif\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif /* __NSRange_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "7863d9404f9ab7e354335a8e8f02f1d0dc563860", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSString.h", "status": "added", "additions": 977, "deletions": 0, "changes": 977, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSString.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSString.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSString.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,977 @@\n+/* Interface for NSString for GNUstep\n+   Copyright (C) 1995, 1996, 1999 Free Software Foundation, Inc.\n+\n+   Written by:  Andrew Kachites McCallum <mccallum@gnu.ai.mit.edu>\n+   Date: 1995\n+   \n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+   \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+  */\n+\n+/**\n+<chapter>\n+ <heading>Portable path handling</heading>\n+ <p>Portable path handling (across both unix-like and mswindows operating\n+ systems) requires some care.  A modern operating system uses the concept\n+ of a single root to the filesystem, but mswindows has multiple filesystems\n+ with no common root, so code must be aware of this.  There is also the\n+ more minor issue that windows often uses a backslash as a separator between\n+ the components of a path and unix-like systems always use forward slash.<br />\n+ On windows there is also the issue that two styles of path are used,\n+ most commonly with a drive letter and a path on that drive\n+ (eg. 'C:\\directory\\file') but also UNC paths\n+ (eg. '//host/share/directory/file') so path handling functions must deal\n+ with both formats.\n+ </p>\n+ <p>GNUstep has three path handling modes, 'gnustep', 'unix', and 'windows'.\n+ The mode defaults to 'gnustep' but may be set using the GSPathHandling()\n+ function.<br />\n+ You should probably stick to using the default 'gnustep' mode in which the\n+ path handling methods cope with both 'unix' and 'windows' style paths in\n+ portable and tolerant manner:<br />\n+ Paths are read in literally so they can be in the native format provided\n+ by the operating system or in a non-native format. See\n+ [NSFileManager-stringWithFileSystemRepresentation:length:].<br />\n+ Paths are written out using the native format of the system the application\n+ is running on (eg on windows slashes are converted to backslashes).\n+ See [NSFileManager-fileSystemRepresentationWithPath:].<br />\n+ The path handling methods accept either a forward or backward slash as a\n+ path separator when parsing any path.<br />\n+ Unless operating in 'unix' mode, a leading letter followed by a colon is\n+ considered the start of a windows style path (the drive specifier), and a\n+ path beginning with something of the form '//host/share/' is considered\n+ the start of a UNC style path.<br />\n+ The path handling methods add forward slashes when building new paths\n+ internally or when standardising paths, so those path strings provide\n+ a portable representation (as long as they are relative paths, not including\n+ system specific roots).<br />\n+ An important case to note is that on windows a path which looks at first\n+ glance like an absolute path may actually be a relative one.<br />\n+ 'C:file' is a relative path because it specifies  a file on the C drive\n+ but does not say what directory it is in.<br />\n+Similarly, '/dir/file' is a relative path because it specifies the full\n+location fo a file on a drive, but does not specify which drive it is on.\n+ </p>\n+<p>As a consequence of this path handling, you are able to work completely\n+portably using relative paths (adding components, extensions and\n+relative paths to a pth, or removing components, extensions and relative\n+paths from a path etc), and when you save paths as strings in files\n+which may be transferred to another platform, you should save a relative\n+path.<br />\n+When you need to know absolute paths of various points in the filesystem,\n+you can use various path utility functions to obtain those absolute paths.\n+For instance, instead of saving an absolute path to a file, you might want\n+to save a path relative to a user's home directory.  You could do that by\n+calling NSHomeDirectory() to get the home directory, and only saving the\n+part of the full path after that prefix.\n+</p>\n+</chapter>\n+ */ \n+\n+#ifndef __NSString_h_GNUSTEP_BASE_INCLUDE\n+#define __NSString_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import\t\"NSObject.h\"\n+#import\t\"NSRange.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+/**\n+ * Type for representing unicode characters.  (16-bit)\n+ */\n+typedef uint16_t unichar;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5,GS_API_LATEST) \n+#define NSMaximumStringLength   (INT_MAX-1)\n+#endif\n+\n+@class NSArray;\n+@class NSCharacterSet;\n+@class NSData;\n+@class NSDictionary;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+@class NSError;\n+@class NSLocale;\n+@class NSURL;\n+#endif\n+\n+#define NSMaximumStringLength\t(INT_MAX-1)\n+\n+enum \n+{\n+  NSCaseInsensitiveSearch = 1,\n+  NSLiteralSearch = 2,\n+  NSBackwardsSearch = 4,\n+  NSAnchoredSearch = 8,\n+  NSNumericSearch = 64\t/* MacOS-X 10.2 */\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5,GS_API_LATEST) \n+ ,\n+ NSDiacriticInsensitiveSearch = 128,\n+ NSWidthInsensitiveSearch = 256,\n+ NSForcedOrderingSearch = 512\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_7,GS_API_LATEST) \n+ ,\n+ /**\n+  * Treats the search string as a regular expression.  This option may be\n+  * combined with NSCaseInsensitiveSearch and NSAnchoredSearch, but no other\n+  * search options.\n+  *\n+  * This option may only be used with the -rangeOfString: family of methods.\n+  */\n+ NSRegularExpressionSearch = 1024\n+#endif\n+};\n+typedef NSUInteger NSStringCompareOptions;\n+\n+/**\n+ *  <p>Enumeration of available encodings for converting between bytes and\n+ *  characters (in [NSString]s).  The ones that are shared with OpenStep and\n+ *  Cocoa are: <code>NSASCIIStringEncoding, NSNEXTSTEPStringEncoding,\n+ *  NSJapaneseEUCStringEncoding, NSUTF8StringEncoding,\n+ *  NSISOLatin1StringEncoding, NSSymbolStringEncoding,\n+ *  NSNonLossyASCIIStringEncoding, NSShiftJISStringEncoding,\n+ *  NSISOLatin2StringEncoding, NSUnicodeStringEncoding,\n+ *  NSWindowsCP1251StringEncoding, NSWindowsCP1252StringEncoding,\n+ *  NSWindowsCP1253StringEncoding, NSWindowsCP1254StringEncoding,\n+ *  NSWindowsCP1250StringEncoding, NSISO2022JPStringEncoding,\n+ *  NSMacOSRomanStringEncoding, NSProprietaryStringEncoding</code>.</p>\n+ *  \n+ *  <p>Additional encodings available under GNUstep are:\n+ *  <code>NSKOI8RStringEncoding, NSISOLatin3StringEncoding,\n+ *  NSISOLatin4StringEncoding, NSISOCyrillicStringEncoding,\n+ *  NSISOArabicStringEncoding, NSISOGreekStringEncoding,\n+ *  NSISOHebrewStringEncoding, NSISOLatin5StringEncoding,\n+ *  NSISOLatin6StringEncoding, NSISOThaiStringEncoding,\n+ *  NSISOLatin7StringEncoding, NSISOLatin8StringEncoding,\n+ *  NSISOLatin9StringEncoding, NSGB2312StringEncoding, NSUTF7StringEncoding,\n+ *  NSGSM0338StringEncoding, NSBIG5StringEncoding,\n+ *  NSKoreanEUCStringEncoding</code>.</p>\n+ */\n+typedef enum _NSStringEncoding\n+{\n+/* NB. Must not have an encoding with value zero - so we can use zero to\n+   tell that a variable that should contain an encoding has not yet been\n+   initialised */\n+  GSUndefinedEncoding = 0,\n+  NSASCIIStringEncoding = 1,\n+  NSNEXTSTEPStringEncoding = 2,\n+  NSJapaneseEUCStringEncoding = 3,\n+  NSUTF8StringEncoding = 4,\n+  NSISOLatin1StringEncoding = 5,\t// ISO-8859-1; West European\n+  NSSymbolStringEncoding = 6,\n+  NSNonLossyASCIIStringEncoding = 7,\n+  NSShiftJISStringEncoding = 8,\n+  NSISOLatin2StringEncoding = 9,\t// ISO-8859-2; East European\n+  NSUnicodeStringEncoding = 10,\n+  NSUTF16StringEncoding = NSUnicodeStringEncoding,      // An alias\n+  NSWindowsCP1251StringEncoding = 11,\n+  NSWindowsCP1252StringEncoding = 12,\t// WinLatin1\n+  NSWindowsCP1253StringEncoding = 13,\t// Greek\n+  NSWindowsCP1254StringEncoding = 14,\t// Turkish\n+  NSWindowsCP1250StringEncoding = 15,\t// WinLatin2\n+  NSISO2022JPStringEncoding = 21,\n+  NSMacOSRomanStringEncoding = 30,\n+  NSProprietaryStringEncoding = 31,\n+\n+  NSKOI8RStringEncoding = 50,\t\t// Russian/Cyrillic\n+  NSISOLatin3StringEncoding = 51,\t// ISO-8859-3; South European\n+  NSISOLatin4StringEncoding = 52,\t// ISO-8859-4; North European\n+  NSISOCyrillicStringEncoding = 22,\t// ISO-8859-5\n+  NSISOArabicStringEncoding = 53,\t// ISO-8859-6\n+  NSISOGreekStringEncoding = 54,\t// ISO-8859-7\n+  NSISOHebrewStringEncoding = 55,\t// ISO-8859-8\n+  NSISOLatin5StringEncoding = 57,\t// ISO-8859-9; Turkish\n+  NSISOLatin6StringEncoding = 58,\t// ISO-8859-10; Nordic\n+  NSISOThaiStringEncoding = 59,\t\t// ISO-8859-11\n+/* Possible future ISO-8859 additions\n+\t\t\t\t\t// ISO-8859-12\n+*/\n+  NSISOLatin7StringEncoding = 61,\t// ISO-8859-13\n+  NSISOLatin8StringEncoding = 62,\t// ISO-8859-14\n+  NSISOLatin9StringEncoding = 63,\t// ISO-8859-15; Replaces ISOLatin1\n+  NSGB2312StringEncoding = 56,\n+  NSUTF7StringEncoding = 64,\t\t// RFC 2152\n+  NSGSM0338StringEncoding,\t\t// GSM (mobile phone) default alphabet\n+  NSBIG5StringEncoding,\t\t\t// Traditional chinese\n+  NSKoreanEUCStringEncoding\t\t// Korean\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4,GS_API_LATEST) \n+  ,\n+  NSUTF16BigEndianStringEncoding = 0x90000100,\n+  NSUTF16LittleEndianStringEncoding = 0x94000100,\n+  NSUTF32StringEncoding = 0x8c000100,\n+  NSUTF32BigEndianStringEncoding = 0x98000100,\n+  NSUTF32LittleEndianStringEncoding = 0x9c000100\n+#endif\n+} NSStringEncoding;\n+\n+enum {\n+  NSOpenStepUnicodeReservedBase = 0xF400\n+};\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4,GS_API_LATEST) \n+enum {\n+  NSStringEncodingConversionAllowLossy = 1,\n+  NSStringEncodingConversionExternalRepresentation = 2\n+};\n+typedef NSUInteger NSStringEncodingConversionOptions;\n+#endif\n+\n+/**\n+ * <p>\n+ *   <code>NSString</code> objects represent an immutable string of Unicode 3.0\n+ *   characters.  These may be accessed individually as type\n+ *   <code>unichar</code>, an unsigned short.<br/>\n+ *   The [NSMutableString] subclass represents a modifiable string.  Both are\n+ *   implemented as part of a class cluster and the instances you receive may\n+ *   actually be of unspecified concrete subclasses.\n+ * </p>\n+ * <p>\n+ *   A constant <code>NSString</code> can be created using the following syntax:\n+ *   <code>@\"...\"</code>, where the contents of the quotes are the\n+ *   string, using only ASCII characters.\n+ * </p>\n+ * <p>\n+ *   A variable string can be created using a C printf-like <em>format</em>,\n+ *   as in <code>[NSString stringWithFormat: @\"Total is %f\", t]</code>.\n+ * </p>\n+ * <p>\n+ *   To create a concrete subclass of <code>NSString</code>, you must have your\n+ *   class inherit from <code>NSString</code> and override at least the two\n+ *   primitive methods - -length and -characterAtIndex:\n+ * </p>\n+ * <p>\n+ *   In general the rule is that your subclass must override any\n+ *   initialiser that you want to use with it.  The GNUstep\n+ *   implementation relaxes that to say that, you may override\n+ *   only the <em>designated initialiser</em> and the other\n+ *   initialisation methods should work.\n+ * </p>\n+ * <p>\n+ *   Where an NSString instance method returns an NSString object,\n+ *   the class of the actual object returned may be any subclass\n+ *   of NSString.  The actual value returned may be a new\n+ *   autoreleased object, an autoreleased copy of the receiver,\n+ *   or the receiver itsself.  While the abstract base class\n+ *   implementations of methods (other than initialisers) will\n+ *   avoid returning mutable strings by returning an autoreleased\n+ *   copy of a mutable receiver, concrete subclasses may behave\n+ *   differently, so code should not rely upon the mutability of\n+ *   returned strings nor upon their lifetime being greater than\n+ *   that of the receiver which returned them.\n+ * </p>\n+ */\n+@interface NSString :NSObject <NSCoding, NSCopying, NSMutableCopying>\n+\n++ (id) string;\n++ (id) stringWithCharacters: (const unichar*)chars\n+\t\t     length: (NSUInteger)length;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4,GS_API_LATEST) && GS_API_VERSION( 10200,GS_API_LATEST)\n++ (id) stringWithCString: (const char*)byteString\n+\t\tencoding: (NSStringEncoding)encoding;\n+#endif\n++ (id) stringWithCString: (const char*)byteString\n+\t\t  length: (NSUInteger)length;\n++ (id) stringWithCString: (const char*)byteString;\n++ (id) stringWithFormat: (NSString*)format, ... NS_FORMAT_FUNCTION(1,2);\n++ (id) stringWithContentsOfFile:(NSString *)path;\n+\n+// Initializing Newly Allocated Strings\n+- (id) init;\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4,GS_API_LATEST) && GS_API_VERSION( 10200,GS_API_LATEST)\n+- (id) initWithBytes: (const void*)bytes\n+\t      length: (NSUInteger)length\n+\t    encoding: (NSStringEncoding)encoding;\n+- (id) initWithBytesNoCopy: (void*)bytes\n+\t\t    length: (NSUInteger)length\n+\t\t  encoding: (NSStringEncoding)encoding \n+\t      freeWhenDone: (BOOL)flag;\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4,GS_API_LATEST)\n++ (id) stringWithContentsOfFile: (NSString*)path\n+                   usedEncoding: (NSStringEncoding*)enc\n+                          error: (NSError**)error;\n+- (id) initWithContentsOfFile: (NSString*)path\n+                 usedEncoding: (NSStringEncoding*)enc\n+                        error: (NSError**)error;\n++ (id) stringWithContentsOfFile: (NSString*)path\n+                       encoding: (NSStringEncoding)enc\n+                          error: (NSError**)error;\n+- (id) initWithContentsOfFile: (NSString*)path\n+                     encoding: (NSStringEncoding)enc\n+                        error: (NSError**)error;\n++ (id) stringWithContentsOfURL: (NSURL*)url\n+                  usedEncoding: (NSStringEncoding*)enc\n+                         error: (NSError**)error;\n+- (id) initWithContentsOfURL: (NSURL*)url\n+                usedEncoding: (NSStringEncoding*)enc\n+                       error: (NSError**)error;\n++ (id) stringWithContentsOfURL: (NSURL*)url\n+                      encoding: (NSStringEncoding)enc\n+                         error: (NSError**)error;\n+- (id) initWithContentsOfURL: (NSURL*)url\n+                    encoding: (NSStringEncoding)enc\n+                       error: (NSError**)error;\n+- (BOOL) writeToFile: (NSString*)path\n+\t  atomically: (BOOL)atomically\n+\t    encoding: (NSStringEncoding)enc\n+\t       error: (NSError**)error;\n+- (BOOL) writeToURL: (NSURL*)url\n+\t atomically: (BOOL)atomically\n+\t   encoding: (NSStringEncoding)enc\n+\t      error: (NSError**)error;\n+#endif\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5,GS_API_LATEST)\n+- (NSString*)stringByReplacingOccurrencesOfString: (NSString*)replace\n+                                       withString: (NSString*)by\n+                                          options: (NSStringCompareOptions)opts\n+                                            range: (NSRange)searchRange;\n+- (NSString*)stringByReplacingOccurrencesOfString: (NSString*)replace\n+                                       withString: (NSString*)by;\n+- (NSString*) stringByReplacingCharactersInRange: (NSRange)aRange \n+                                      withString: (NSString*)by;\n+#endif\n+- (id) initWithCharactersNoCopy: (unichar*)chars\n+\t\t\t length: (NSUInteger)length\n+\t\t   freeWhenDone: (BOOL)flag;\n+- (id) initWithCharacters: (const unichar*)chars\n+\t\t   length: (NSUInteger)length;\n+- (id) initWithCStringNoCopy: (char*)byteString\n+\t\t      length: (NSUInteger)length\n+\t        freeWhenDone: (BOOL)flag;\n+- (id) initWithCString: (const char*)byteString\n+\t        length: (NSUInteger)length;\n+- (id) initWithCString: (const char*)byteString;\n+- (id) initWithString: (NSString*)string;\n+- (id) initWithFormat: (NSString*)format, ... NS_FORMAT_FUNCTION(1,2);\n+- (id) initWithFormat: (NSString*)format\n+\t    arguments: (va_list)argList NS_FORMAT_FUNCTION(1,0);\n+- (id) initWithData: (NSData*)data\n+\t   encoding: (NSStringEncoding)encoding;\n+- (id) initWithContentsOfFile: (NSString*)path;\n+\n+// Getting a String's Length\n+- (NSUInteger) length;\n+\n+// Accessing Characters\n+- (unichar) characterAtIndex: (NSUInteger)index;\n+- (void) getCharacters: (unichar*)buffer;\n+- (void) getCharacters: (unichar*)buffer\n+\t\t range: (NSRange)aRange;\n+\n+// Combining Strings\n+- (NSString*) stringByAppendingFormat: (NSString*)format, ...\n+  NS_FORMAT_FUNCTION(1,2);\n+- (NSString*) stringByAppendingString: (NSString*)aString;\n+\n+// Dividing Strings into Substrings\n+- (NSArray*) componentsSeparatedByString: (NSString*)separator;\n+- (NSString*) substringFromIndex: (NSUInteger)index;\n+- (NSString*) substringToIndex: (NSUInteger)index;\n+\n+// Finding Ranges of Characters and Substrings\n+- (NSRange) rangeOfCharacterFromSet: (NSCharacterSet*)aSet;\n+- (NSRange) rangeOfCharacterFromSet: (NSCharacterSet*)aSet\n+\t\t\t    options: (NSUInteger)mask;\n+- (NSRange) rangeOfCharacterFromSet: (NSCharacterSet*)aSet\n+\t\t\t    options: (NSUInteger)mask\n+\t\t\t      range: (NSRange)aRange;\n+- (NSRange) rangeOfString: (NSString*)string;\n+- (NSRange) rangeOfString: (NSString*)string\n+\t\t  options: (NSUInteger)mask;\n+- (NSRange) rangeOfString: (NSString*)aString\n+\t\t  options: (NSUInteger)mask\n+\t\t    range: (NSRange)aRange;\n+\n+// Determining Composed Character Sequences\n+- (NSRange) rangeOfComposedCharacterSequenceAtIndex: (NSUInteger)anIndex;\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_2,GS_API_LATEST) \n+/** Returns a copy of the receiver normalised using the KD form.\n+ */\n+- (NSString *) decomposedStringWithCompatibilityMapping;\n+\n+/** Returns a copy of the receiver normalised using the D form.\n+ */\n+- (NSString *) decomposedStringWithCanonicalMapping;\n+\n+/** Returns a copy of the receiver normalised using the KC form.\n+ */\n+- (NSString *) precomposedStringWithCompatibilityMapping;\n+\n+/** Returns a copy of the receiver normalised using the C form.\n+ */\n+- (NSString *) precomposedStringWithCanonicalMapping;\n+#endif\n+\n+// Converting String Contents into a Property List\n+- (id) propertyList;\n+- (NSDictionary*) propertyListFromStringsFileFormat;\n+\n+// Identifying and Comparing Strings\n+- (NSComparisonResult) compare: (NSString*)aString;\n+- (NSComparisonResult) compare: (NSString*)aString\t\n+\t\t       options: (NSUInteger)mask;\n+- (NSComparisonResult) compare: (NSString*)aString\n+\t\t       options: (NSUInteger)mask\n+\t\t\t range: (NSRange)aRange;\n+- (BOOL) hasPrefix: (NSString*)aString;\n+- (BOOL) hasSuffix: (NSString*)aString;\n+- (BOOL) isEqual: (id)anObject;\n+- (BOOL) isEqualToString: (NSString*)aString;\n+- (NSUInteger) hash;\n+\n+// Getting a Shared Prefix\n+- (NSString*) commonPrefixWithString: (NSString*)aString\n+\t\t\t     options: (NSUInteger)mask;\n+\n+// Changing Case\n+- (NSString*) capitalizedString;\n+- (NSString*) lowercaseString;\n+- (NSString*) uppercaseString;\n+\n+// Getting C Strings\n+- (const char*) cString;\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4,GS_API_LATEST) && GS_API_VERSION( 10200,GS_API_LATEST)\n+- (const char*) cStringUsingEncoding: (NSStringEncoding)encoding;\n+- (BOOL) getCString: (char*)buffer\n+\t  maxLength: (NSUInteger)maxLength\n+\t   encoding: (NSStringEncoding)encoding;\n+- (id) initWithCString: (const char*)byteString\n+\t      encoding: (NSStringEncoding)encoding;\n+- (NSUInteger) lengthOfBytesUsingEncoding: (NSStringEncoding)encoding;\n+- (NSUInteger) maximumLengthOfBytesUsingEncoding: (NSStringEncoding)encoding;\n+#endif\n+\n+#endif\n+- (NSUInteger) cStringLength;\n+- (void) getCString: (char*)buffer;\n+- (void) getCString: (char*)buffer\n+\t  maxLength: (NSUInteger)maxLength;\n+- (void) getCString: (char*)buffer\n+\t  maxLength: (NSUInteger)maxLength\n+\t      range: (NSRange)aRange\n+     remainingRange: (NSRange*)leftoverRange;\n+\n+// Getting Numeric Values\n+- (float) floatValue;\n+- (int) intValue;\n+\n+// Working With Encodings\n+- (BOOL) canBeConvertedToEncoding: (NSStringEncoding)encoding;\n+- (NSData*) dataUsingEncoding: (NSStringEncoding)encoding;\n+- (NSData*) dataUsingEncoding: (NSStringEncoding)encoding\n+\t allowLossyConversion: (BOOL)flag;\n++ (NSStringEncoding) defaultCStringEncoding;\n+- (NSString*) description;\n+- (NSStringEncoding) fastestEncoding;\n+- (NSStringEncoding) smallestEncoding;\n+\n+/**\n+ * Attempts to complete this string as a path in the filesystem by finding\n+ * a unique completion if one exists and returning it by reference in\n+ * outputName (which must be a non-nil pointer), or if it finds a set of\n+ * completions they are returned by reference in outputArray, if it is non-nil.\n+ * filterTypes can be an array of strings specifying extensions to consider;\n+ * files without these extensions will be ignored and will not constitute\n+ * completions.  Returns 0 if no match found, else a positive number that is\n+ * only accurate if outputArray was non-nil.\n+ */\n+- (NSUInteger) completePathIntoString: (NSString**)outputName\n+\t\t\tcaseSensitive: (BOOL)flag\n+\t\t     matchesIntoArray: (NSArray**)outputArray\n+\t\t\t  filterTypes: (NSArray*)filterTypes;\n+\n+/**\n+ * Converts the receiver to a C string path expressed in the character\n+ * encoding appropriate for the local host file system.  This string will be\n+ * automatically freed soon after it is returned, so copy it if you need it\n+ * for long.<br />\n+ * NB. On mingw32 systems the filesystem representation of a path is a 16-bit\n+ * unicode character string, so you should only pass the value returned by\n+ * this method to functions expecting wide characters.<br />\n+ * This method uses [NSFileManager-fileSystemRepresentationWithPath:] to\n+ * perform the conversion.\n+ */\n+- (const GSNativeChar*) fileSystemRepresentation;\n+\n+/**\n+ * Converts the receiver to a C string path using the character encoding\n+ * appropriate to the local file system.  This string will be stored\n+ * into buffer if it is shorter (number of characters) than size,\n+ * otherwise NO is returned.<br />\n+ * NB. On mingw32 systems the filesystem representation of a path is a 16-bit\n+ * unicode character string, so the buffer you pass to this method must be\n+ * twice as many bytes as the size (number of characters) you expect to\n+ * receive.<br />\n+ * This method uses [NSFileManager-fileSystemRepresentationWithPath:] to\n+ * perform the conversion.\n+ */\n+- (BOOL) getFileSystemRepresentation: (GSNativeChar*)buffer\n+\t\t\t   maxLength: (NSUInteger)size;\n+\n+/**\n+ * Returns a string containing the last path component of the receiver.<br />\n+ * The path component is the last non-empty substring delimited by the ends\n+ * of the string, or by path separator characters.<br />\n+ * If the receiver only contains a root part, this method returns it.<br />\n+ * If there are no non-empty substrings, this returns an empty string.<br />\n+ * NB. In a windows UNC path, the host and share specification is treated as\n+ * a single path component, even though it contains separators.\n+ * So a string of the form '//host/share' may be returned.<br />\n+ * Other special cases are apply when the string is the root.\n+ * <example>\n+ *   @\"foo/bar\" produces @\"bar\"\n+ *   @\"foo/bar/\" produces @\"bar\"\n+ *   @\"/foo/bar\" produces @\"bar\"\n+ *   @\"/foo\" produces @\"foo\"\n+ *   @\"/\" produces @\"/\" (root is a special case)\n+ *   @\"\" produces @\"\"\n+ *   @\"C:/\" produces @\"C:/\" (root is a special case)\n+ *   @\"C:\" produces @\"C:\"\n+ *   @\"//host/share/\" produces @\"//host/share/\" (root is a special case)\n+ *   @\"//host/share\" produces @\"//host/share\"\n+ * </example>\n+ */\n+- (NSString*) lastPathComponent;\n+\n+/**\n+ * Returns a new string containing the path extension of the receiver.<br />\n+ * The path extension is a suffix on the last path component which starts\n+ * with the extension separator (a '.') (for example .tiff is the\n+ * pathExtension for /foo/bar.tiff).<br />\n+ * Returns an empty string if no such extension exists.\n+ * <example>\n+ *   @\"a.b\" produces @\"b\"\n+ *   @\"a.b/\" produces @\"b\"\n+ *   @\"/path/a.ext\" produces @\"ext\"\n+ *   @\"/path/a.\" produces @\"\"\n+ *   @\"/path/.a\" produces @\"\" (.a is not an extension to a file)\n+ *   @\".a\" produces @\"\" (.a is not an extension to a file)\n+ * </example>\n+ */\n+- (NSString*) pathExtension;\n+\n+/**\n+ * Returns a string where a prefix of the current user's home directory is\n+ * abbreviated by '~', or returns the receiver (or an immutable copy) if\n+ * it was not found to have the home directory as a prefix.\n+ */\n+- (NSString*) stringByAbbreviatingWithTildeInPath;\n+\n+/**\n+ * Returns a new string with the path component given in aString\n+ * appended to the receiver.<br />\n+ * This removes trailing path separators from the receiver and the root\n+ * part from aString and replaces them with a single slash as a path\n+ * separator.<br />\n+ * Also condenses any multiple separator sequences in the result into\n+ * single path separators.\n+ * <example>\n+ *   @\"\" with @\"file\" produces @\"file\"\n+ *   @\"path\" with @\"file\" produces @\"path/file\"\n+ *   @\"/\" with @\"file\" produces @\"/file\"\n+ *   @\"/\" with @\"file\" produces @\"/file\"\n+ *   @\"/\" with @\"/file\" produces @\"/file\"\n+ *   @\"path with @\"C:/file\" produces @\"path/file\"\n+ * </example>\n+ * NB. Do not use this method to modify strings other than filesystem\n+ * paths as the behavior in such cases is undefined ... for instance\n+ * the string may have repeated slashes or slash-dot-slash sequences\n+ * removed.\n+ */\n+- (NSString*) stringByAppendingPathComponent: (NSString*)aString;\n+\n+/**\n+ * Returns a new string with the path extension given in aString\n+ * appended to the receiver after an extensionSeparator ('.').<br />\n+ * If the receiver has trailing path separator characters, they are\n+ * stripped before the extension separator is added.<br />\n+ * If the receiver contains no components after the root, the extension\n+ * cannot be appended (an extension can only be appended to a file name),\n+ * so a copy of the unmodified receiver is returned.<br />\n+ * An empty string may be used as an extension ... in which case the extension\n+ * separator is appended.<br />\n+ * This behavior mirrors that of the -stringByDeletingPathExtension method.\n+ * <example>\n+ *   @\"Mail\" with @\"app\" produces @\"Mail.app\"\n+ *   @\"Mail.app\" with @\"old\" produces @\"Mail.app.old\"\n+ *   @\"file\" with @\"\" produces @\"file.\"\n+ *   @\"/\" with @\"app\" produces @\"/\" (no file name to append to)\n+ *   @\"\" with @\"app\" produces @\"\" (no file name to append to)\n+ * </example>\n+ * NB. Do not use this method to modify strings other than filesystem\n+ * paths as the behavior in such cases is undefined ... for instance\n+ * the string may have repeated slashes or slash-dot-slash sequences\n+ * removed.\n+ */\n+- (NSString*) stringByAppendingPathExtension: (NSString*)aString;\n+\n+/**\n+ * Returns a new string with the last path component (including any final\n+ * path separators) removed from the receiver.<br />\n+ * A string without a path component other than the root is returned\n+ * without alteration.<br />\n+ * See -lastPathComponent for a definition of a path component.\n+ * <example>\n+ *   @\"hello/there\" produces @\"hello\" (a relative path)\n+ *   @\"hello\" produces @\"\" (a relative path)\n+ *   @\"/hello\" produces @\"/\" (an absolute unix path)\n+ *   @\"/\" produces @\"/\" (an absolute unix path)\n+ *   @\"C:file\" produces @\"C:\" (a relative windows path)\n+ *   @\"C:\" produces @\"C:\" (a relative windows path)\n+ *   @\"C:/file\" produces @\"C:/\" (an absolute windows path)\n+ *   @\"C:/\" produces @\"C:/\" (an absolute windows path)\n+ *   @\"//host/share/file\" produces @\"//host/share/\" (a UNC path)\n+ *   @\"//host/share/\" produces @\"//host/share/\" (a UNC path)\n+ *   @\"//path/file\" produces @\"//path\" (an absolute Unix path)\n+ * </example>\n+ * NB. Do not use this method to modify strings other than filesystem\n+ * paths as the behavior in such cases is undefined ... for instance\n+ * the string may have repeated slashes or slash-dot-slash sequences\n+ * removed.\n+ */\n+- (NSString*) stringByDeletingLastPathComponent;\n+\n+/**\n+ * Returns a new string with the path extension removed from the receiver.<br />\n+ * Strips any trailing path separators before checking for the extension\n+ * separator.<br />\n+ * NB. This method does not consider a string which contains nothing\n+ * between the root part and the extension separator ('.') to be a path\n+ * extension. This mirrors the behavior of the -stringByAppendingPathExtension:\n+ * method.\n+ * <example>\n+ *   @\"file.ext\" produces @\"file\"\n+ *   @\"/file.ext\" produces @\"/file\"\n+ *   @\"/file.ext/\" produces @\"/file\" (trailing path separators are ignored)\n+ *   @\"/file..ext\" produces @\"/file.\"\n+ *   @\"/file.\" produces @\"/file\"\n+ *   @\"/.ext\" produces @\"/.ext\" (there is no file to strip from)\n+ *   @\".ext\" produces @\".ext\" (there is no file to strip from)\n+ * </example>\n+ * NB. Do not use this method to modify strings other than filesystem\n+ * paths as the behavior in such cases is undefined ... for instance\n+ * the string may have repeated slashes or slash-dot-slash sequences\n+ * removed.\n+ */\n+- (NSString*) stringByDeletingPathExtension;\n+\n+/**\n+ * Returns a string created by expanding the initial tilde ('~') and any\n+ * following username to be the home directory of the current user or the\n+ * named user.<br />\n+ * Returns the receiver or an immutable copy if it was not possible to\n+ * expand it.\n+ */\n+- (NSString*) stringByExpandingTildeInPath;\n+\n+/**\n+ * First calls -stringByExpandingTildeInPath if necessary.<br />\n+ * Replaces path string by one in which path components representing symbolic\n+ * links have been replaced by their referents.<br />\n+ * Removes a leading '/private' if the result is valid.<br />\n+ * If links cannot be resolved, returns an unmodified copy of the receiver.\n+ */\n+- (NSString*) stringByResolvingSymlinksInPath;\n+\n+/**\n+ * Returns a standardised form of the receiver, with unnecessary parts\n+ * removed, tilde characters expanded, and symbolic links resolved\n+ * where possible.<br />\n+ * NB. Refers to the local filesystem to resolve symbolic links in\n+ * absolute paths, and to expand tildes ... so this can't be used for\n+ * general path manipulation.<br />\n+ * If the string is an invalid path, the unmodified receiver is returned.<br />\n+ * <p>\n+ *   Uses -stringByExpandingTildeInPath to expand tilde expressions.<br />\n+ *   Simplifies '//' and '/./' sequences and removes trailing '/' or '.'.<br />\n+ * </p>\n+ * <p>\n+ *  For absolute paths, uses -stringByResolvingSymlinksInPath to resolve\n+ *  any links, then gets rid of '/../' sequences and removes any '/private'\n+ *  prefix.\n+ * </p>\n+ */\n+- (NSString*) stringByStandardizingPath;\n+\n+\n+// for methods working with decomposed strings\n+- (int) _baseLength;\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/**\n+ * Concatenates the path components in the array and returns the result.<br />\n+ * This method does not remove empty path components, but does recognize an\n+ * empty initial component as a special case meaning that the string\n+ * returned will begin with a slash.\n+ */\n++ (NSString*) pathWithComponents: (NSArray*)components;\n+\n+/**\n+ * Returns YES if the receiver represents an absolute path ...<br />\n+ * Returns NO otherwise.<br />\n+ * An absolute path in unix mode is one which begins\n+ * with a slash or tilde.<br />\n+ * In windows mode a drive specification (eg C:) followed by a slash or\n+ * backslash, is an absolute path, as is any path beginning with a tilde.<br />\n+ * In any mode a UNC path (//host/share...) is always absolute.<br />\n+ * In the default gnustep path handling mode,\n+ * the rules are the same as for windows,\n+ * except that a path whose root is a slash denotes an absolute path\n+ * when running on unix and a relative path when running under windows.\n+ */\n+- (BOOL) isAbsolutePath;\n+\n+/**\n+ * Returns the path components of the receiver separated into an array.<br />\n+ * If the receiver begins with a root sequence such as the path separator\n+ * character (or a drive specification in windows) then that is used as the\n+ * first element in the array.<br />\n+ * Empty components are removed.<br />\n+ * If a trailing path separator (which was not part of the root) was present,\n+ * it is added as the last element in the array.\n+ */\n+- (NSArray*) pathComponents;\n+\n+/**\n+ * Returns an array of strings made by appending the values in paths\n+ * to the receiver.\n+ */\n+- (NSArray*) stringsByAppendingPaths: (NSArray*)paths;\n+\n++ (NSString*) localizedStringWithFormat: (NSString*)format, ...\n+  NS_FORMAT_FUNCTION(1,2);\n+\n++ (id) stringWithString: (NSString*)aString;\n++ (id) stringWithContentsOfURL: (NSURL*)url;\n++ (id) stringWithUTF8String: (const char*)bytes;\n+- (id) initWithFormat: (NSString*)format\n+\t       locale: (NSDictionary*)locale, ... NS_FORMAT_FUNCTION(1,3);\n+- (id) initWithFormat: (NSString*)format\n+\t       locale: (NSDictionary*)locale\n+\t    arguments: (va_list)argList NS_FORMAT_FUNCTION(1,0);\n+- (id) initWithUTF8String: (const char *)bytes;\n+- (id) initWithContentsOfURL: (NSURL*)url;\n+- (NSString*) substringWithRange: (NSRange)aRange;\n+- (NSComparisonResult) caseInsensitiveCompare: (NSString*)aString;\n+- (NSComparisonResult) compare: (NSString*)string \n+\t\t       options: (NSUInteger)mask \n+\t\t\t range: (NSRange)compareRange \n+\t\t\tlocale: (id)locale;\n+- (NSComparisonResult) localizedCompare: (NSString *)string;\n+- (NSComparisonResult) localizedCaseInsensitiveCompare: (NSString *)string;\n+- (BOOL) writeToFile: (NSString*)filename\n+\t  atomically: (BOOL)useAuxiliaryFile;\n+- (BOOL) writeToURL: (NSURL*)url atomically: (BOOL)atomically;\n+- (double) doubleValue;\n++ (NSStringEncoding*) availableStringEncodings;\n++ (NSString*) localizedNameOfStringEncoding: (NSStringEncoding)encoding;\n+- (void) getLineStart: (NSUInteger *)startIndex\n+                  end: (NSUInteger *)lineEndIndex\n+          contentsEnd: (NSUInteger *)contentsEndIndex\n+             forRange: (NSRange)aRange;\n+- (NSRange) lineRangeForRange: (NSRange)aRange;\n+- (const char*) lossyCString;\n+- (NSString*) stringByAddingPercentEscapesUsingEncoding: (NSStringEncoding)e;\n+- (NSString*) stringByPaddingToLength: (NSUInteger)newLength\n+\t\t\t   withString: (NSString*)padString\n+\t\t      startingAtIndex: (NSUInteger)padIndex;\n+- (NSString*) stringByReplacingPercentEscapesUsingEncoding: (NSStringEncoding)e;\n+- (NSString*) stringByTrimmingCharactersInSet: (NSCharacterSet*)aSet;\n+- (const char *)UTF8String;\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_9,GS_API_LATEST)\n+- (NSString *) stringByAddingPercentEncodingWithAllowedCharacters: (NSCharacterSet *)aSet;\n+- (NSString *) stringByRemovingPercentEncoding;\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_3,GS_API_LATEST) \n+/** Not implemented */\n+- (void) getParagraphStart: (NSUInteger *)startIndex\n+                       end: (NSUInteger *)parEndIndex\n+               contentsEnd: (NSUInteger *)contentsEndIndex\n+                 forRange: (NSRange)range;\n+/** Not implemented */\n+ - (NSRange) paragraphRangeForRange: (NSRange)range;\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5,GS_API_LATEST) \n+/**\n+ * Returns YES when scanning the receiver's text from left to right\n+ * finds an initial digit in the range 1-9 or a letter in the set\n+ * ('Y', 'y', 'T', 't').<br />\n+ * Any trailing characters are ignored.<br />\n+ * Any leading whitespace or zeros or signs are also ignored.<br />\n+ * Returns NO if the above conditions are not met.\n+ */\n+- (BOOL) boolValue;\n+- (NSArray *) componentsSeparatedByCharactersInSet: (NSCharacterSet *)separator;\n+- (NSInteger) integerValue;\n+- (long long) longLongValue;\n+/** Not implemented */\n+- (NSRange) rangeOfComposedCharacterSequencesForRange: (NSRange)range;\n+/** Not implemented */\n+- (NSRange) rangeOfString: (NSString *)aString\n+                  options: (NSStringCompareOptions)mask\n+                    range: (NSRange)searchRange\n+                   locale: (NSLocale *)locale;\n+\n+#endif\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_10,GS_API_LATEST) \n+\n+/**\n+  * Returns YES if the receiver contains string, otherwise, NO.\n+  */\n+- (BOOL) containsString: (NSString *)string;\n+\n+#endif\n+\n+#if OS_API_VERSION(GS_API_NONE, GS_API_NONE)\n++ (Class) constantStringClass;\n+#endif\t/* GS_API_NONE */\n+\n+@end\n+\n+@interface NSMutableString : NSString\n+\n+// Creating Temporary Strings\n++ (id) string;\n++ (id) stringWithCharacters: (const unichar*)characters\n+\t\t     length: (NSUInteger)length;\n++ (id) stringWithCString: (const char*)byteString\n+\t\t  length: (NSUInteger)length;\n++ (id) stringWithCString: (const char*)byteString;\n++ (id) stringWithFormat: (NSString*)format, ... NS_FORMAT_FUNCTION(1,2);\n++ (id) stringWithContentsOfFile: (NSString*)path;\n++ (NSMutableString*) stringWithCapacity: (NSUInteger)capacity;\n+\n+// Initializing Newly Allocated Strings\n+- (id) initWithCapacity: (NSUInteger)capacity;\n+\n+// Modify A String\n+- (void) appendFormat: (NSString*)format, ... NS_FORMAT_FUNCTION(1,2);\n+- (void) appendString: (NSString*)aString;\n+- (void) deleteCharactersInRange: (NSRange)range;\n+- (void) insertString: (NSString*)aString atIndex: (NSUInteger)loc;\n+- (void) replaceCharactersInRange: (NSRange)range \n+\t\t       withString: (NSString*)aString;\n+- (NSUInteger) replaceOccurrencesOfString: (NSString*)replace\n+\t\t\t\t withString: (NSString*)by\n+\t\t\t\t    options: (NSUInteger)opts\n+\t\t\t\t      range: (NSRange)searchRange;\n+- (void) setString: (NSString*)aString;\n+\n+@end\n+\n+#ifdef __OBJC_GNUSTEP_RUNTIME_ABI__\n+#  if __OBJC_GNUSTEP_RUNTIME_ABI__ >= 20\n+#    define GNUSTEP_NEW_STRING_ABI\n+#  endif\n+#endif\n+\n+/**\n+ * <p>The NXConstantString class is used to hold constant 8-bit character\n+ * string objects produced by the compiler where it sees @\"...\" in the\n+ * source.  The compiler generates the instances of this class - which\n+ * has three instance variables -</p>\n+ * <list>\n+ * <item>a pointer to the class (this is the sole ivar of NSObject)</item>\n+ * <item>a pointer to the 8-bit data</item>\n+ * <item>the length of the string</item>\n+ * </list>\n+ * <p>In older versions of the compiler, the isa variable is always set to\n+ * the NXConstantString class.  In newer versions a compiler option was\n+ * added for GNUstep, to permit the isa variable to be set to another\n+ * class, and GNUstep uses this to avoid conflicts with the default\n+ * implementation of NXConstantString in the ObjC runtime library (the\n+ * preprocessor is used to change all occurrences of NXConstantString\n+ * in the source code to NSConstantString).</p>\n+ * <p>Since GNUstep will generally use the GNUstep extension to the\n+ * compiler, you should never refer to the constant string class by\n+ * name, but should use the [NSString+constantStringClass] method to\n+ * get the actual class being used for constant strings.</p>\n+ * What follows is a dummy declaration of the class to keep the compiler\n+ * happy.\n+ */\n+@interface NXConstantString : NSString\n+{\n+@public\n+#ifdef GNUSTEP_NEW_STRING_ABI\n+  /**\n+   * Flags.  The low 16 bits are reserved for the compiler, the top 16 for use\n+   * by the Foundation Framework.  Currently only the low 2 bits are used, to\n+   * indicate the encoding of the string, with the following values:\n+   *\n+   * 0. ASCII (UTF-8 using only 7-bit characters)\n+   * 1. UTF-8\n+   * 2. UTF-16\n+   * 3. UTF-32\n+   *\n+   */\n+  uint32_t flags;\n+  /**\n+   * The number of characters (UTF-16 code units) in the string.\n+   */\n+  uint32_t nxcslen;\n+  /**\n+   * The number of bytes in the string.  For fixed-length encodings, this is a\n+   * fixed multiple of nxcslen, but for UTF-8 it can be different.\n+   */\n+  uint32_t size;\n+  /**\n+   * Hash value.\n+   */\n+  uint32_t hash;\n+  /**\n+   * Pointer to the byte data of the string.  Note that `char*` is the correct\n+   * type only if the low two bits of the flags indicate that this is an ASCII\n+   * or UTF-8 string, otherwise it is a pointer to 16- or 32-bit characters in\n+   * native byte order.\n+   */\n+  const char * const nxcsptr;\n+#else\n+  const char * const nxcsptr;\n+  const unsigned int nxcslen;\n+#endif\n+}\n+@end\n+\n+#ifdef NeXT_RUNTIME\n+/** For internal use with NeXT runtime;\n+    needed, until Apple Radar 2870817 is fixed. */\n+extern struct objc_class _NSConstantStringClassReference;\n+#endif\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#if     !NO_GNUSTEP && !defined(GNUSTEP_BASE_INTERNAL)\n+#import \"../GNUstepBase/NSString+GNUstepBase.h\"\n+#import \"../GNUstepBase/NSMutableString+GNUstepBase.h\"\n+#endif\n+\n+#endif /* __NSString_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "f194f01a228e720934a87f801470d4888c8c24cd", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSValue.h", "status": "added", "additions": 370, "deletions": 0, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSValue.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,370 @@\n+/* Interface for NSValue for GNUStep\n+   Copyright (C) 1995, 1996 Free Software Foundation, Inc.\n+\n+   Written by:  Adam Fedor <fedor@boulder.colorado.edu>\n+   Created: 1995\n+   \n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+   \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+   */ \n+\n+#ifndef __NSValue_h_GNUSTEP_BASE_INCLUDE\n+#define __NSValue_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+#import\t\"NSObject.h\"\n+#import\t\"NSGeometry.h\"\n+#import\t\"NSRange.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+@class NSString;\n+\n+/**\n+ * The <code>NSValue</code> class can wrap a single primitive value as an\n+ * object so it can be used in the containers and other places where an object\n+ * reference is needed. Once initialized, an <code>NSValue</code> is\n+ * immutable, and there is no <code>NSMutableValue</code> class. You\n+ * initialize it by giving it a pointer to the primitive value, and you should\n+ * be careful this does not get freed until after the <code>NSValue</code> is\n+ * no longer used.\n+ */\n+@interface NSValue : NSObject <NSCopying, NSCoding>\n+\n+// Allocating and Initializing \n+\n+/**\n+ * Create new instance with specified value (a pointer) of given type, which\n+ * is a string code obtainable through the compile-time operator\n+ * <code>@encode(...)</code>.  For example:\n+<example>\n+    NSValue *theValue = [NSValue value: &amp;n withObjCType: @encode(int)];\n+</example>\n+ */\n++ (NSValue*) value: (const void*)value withObjCType: (const char*)type;\n+\n+/**\n+ * Create new instance holding anObject.  This is useful if you want to add\n+ * anObject to a collection such as [NSArray] but don't want it to be retained\n+ * (a weak reference).\n+ */\n++ (NSValue*) valueWithNonretainedObject: (id)anObject;\n+\n+/**\n+ * Convenience method to create instance holding an <code>NSPoint</code>\n+ * structure.\n+ */\n++ (NSValue*) valueWithPoint: (NSPoint)point;\n+\n+/**\n+ * Convenience method to create instance holding a pointer.  Same as\n+ * using <code>@encode(void *)</code> in +value:withObjCType: .\n+ */\n++ (NSValue*) valueWithPointer: (const void*)pointer;\n+\n+/**\n+ * Convenience method to create instance holding an <code>NSRange</code>\n+ * structure.\n+ */\n++ (NSValue*) valueWithRange: (NSRange)range;\n+\n+/**\n+ * Convenience method to create instance holding an <code>NSRect</code>\n+ * structure.\n+ */\n++ (NSValue*) valueWithRect: (NSRect)rect;\n+\n+/**\n+ * Convenience method to create instance holding an <code>NSSize</code>\n+ * structure.\n+ */\n++ (NSValue*) valueWithSize: (NSSize)size;\n+\n+#if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)\n+/**\n+ * Synonym for value:withObjCType: .\n+ */\n++ (NSValue*) valueWithBytes: (const void*)value objCType: (const char*)type;\n+\n+/** <init/>\n+ * Initialize with value of type, parallel to value:withObjCType: .\n+ */\n+- (id) initWithBytes: (const void*)data objCType: (const char*)type;\n+\n+/**\n+ * Compares this instance to another <code>NSValue</code>.  For equality,\n+ * both contents and declared type of the two values must match.\n+ */\n+- (BOOL) isEqualToValue: (NSValue*)other;\n+#endif\t/* GS_API_MACOSX */\n+\n+// Accessing Data \n+\n+/**\n+ * Copies bytes from the pointer receiver was initialized with into buffer\n+ * pointed to by value.  Number of bytes copied is determined by the type.  If\n+ * type was a void * pointer or object id, the memory address itself is\n+ * copied.\n+ */\n+- (void) getValue: (void*)value;\n+\n+/**\n+ * Returns the string <code>@encode(...)</code> compatible type the receiver\n+ * was initialized with.\n+ */\n+- (const char*) objCType;\n+\n+/**\n+ * If receiver was initialized with an object ID, return it, else raises\n+ * <code>NSInternalInconsistencyException</code>.\n+ */\n+- (id) nonretainedObjectValue;\n+\n+/**\n+ * If receiver was initialized with a void * pointer, return it, else raises\n+ * <code>NSInternalInconsistencyException</code>.\n+ */\n+- (void*) pointerValue;\n+\n+/**\n+ * If receiver was initialized with an <code>NSRange</code> value, return it,\n+ * else raises <code>NSInternalInconsistencyException</code>.\n+ */\n+- (NSRange) rangeValue;\n+\n+/**\n+ * If receiver was initialized with an <code>NSRect</code> value, return it,\n+ * else raises <code>NSInternalInconsistencyException</code>.\n+ */\n+- (NSRect) rectValue;\n+\n+/**\n+ * If receiver was initialized with an <code>NSSize</code> value, return it,\n+ * else raises <code>NSInternalInconsistencyException</code>.\n+ */\n+- (NSSize) sizeValue;\n+\n+/**\n+ * If receiver was initialized with an <code>NSPoint</code> value, return it,\n+ * else raises <code>NSInternalInconsistencyException</code>.\n+ */\n+- (NSPoint) pointValue;\n+\n+@end\n+\n+/**\n+ * Subclass of [NSValue] offering convenience methods for initializing from\n+ * and accessing as any C primitive numeric type.  On access, the value will\n+ * be type-converted if necessary, using standard C conversion rules.\n+ */\n+@interface NSNumber : NSValue <NSCopying,NSCoding>\n+\n+// Allocating and Initializing\n+\n+/** New instance from boolean value. */\n++ (NSNumber*) numberWithBool: (BOOL)value; \n+/** New instance from signed char value. */\n++ (NSNumber*) numberWithChar: (signed char)value;\n+/** New instance from double value. */\n++ (NSNumber*) numberWithDouble: (double)value;\n+/** New instance from float value. */\n++ (NSNumber*) numberWithFloat: (float)value;\n+/** New instance from (signed) int value. */\n++ (NSNumber*) numberWithInt: (signed int)value;\n+/** New instance from (signed) long value. */\n++ (NSNumber*) numberWithLong: (signed long)value;\n+/** New instance from (signed) long long value. */\n++ (NSNumber*) numberWithLongLong: (signed long long)value;\n+/** New instance from (signed) short value. */\n++ (NSNumber*) numberWithShort: (signed short)value;\n+/** New instance from unsigned char value. */\n++ (NSNumber*) numberWithUnsignedChar: (unsigned char)value;\n+/** New instance from unsigned int value. */\n++ (NSNumber*) numberWithUnsignedInt: (unsigned int)value;\n+/** New instance from unsigned long value. */\n++ (NSNumber*) numberWithUnsignedLong: (unsigned long)value;\n+/** New instance from unsigned long long value. */\n++ (NSNumber*) numberWithUnsignedLongLong: (unsigned long long)value;\n+/** New instance from unsigned short value. */\n++ (NSNumber*) numberWithUnsignedShort: (unsigned short)value;\n+\n+/** Initialize from boolean value. */\n+- (id) initWithBool: (BOOL)value;\n+/** Initialize from signed char value. */\n+- (id) initWithChar: (signed char)value;\n+/** Initialize from double value. */\n+- (id) initWithDouble: (double)value;\n+/** Initialize from float value. */\n+- (id) initWithFloat: (float)value;\n+/** Initialize from (signed) int value. */\n+- (id) initWithInt: (signed int)value;\n+/** Initialize from (signed) long value. */\n+- (id) initWithLong: (signed long)value;\n+/** Initialize from (signed) long long value. */\n+- (id) initWithLongLong: (signed long long)value;\n+/** Initialize from (signed) short value. */\n+- (id) initWithShort: (signed short)value;\n+/** Initialize from unsigned char value. */\n+- (id) initWithUnsignedChar: (unsigned char)value;\n+/** Initialize from unsigned int value. */\n+- (id) initWithUnsignedInt: (unsigned int)value;\n+/** Initialize from unsigned long value. */\n+- (id) initWithUnsignedLong: (unsigned long)value;\n+/** Initialize from unsigned long long value. */\n+- (id) initWithUnsignedLongLong: (unsigned long long)value;\n+/** Initialize from unsigned short value. */\n+- (id) initWithUnsignedShort: (unsigned short)value;\n+\n+// Accessing Data \n+\n+/**\n+ * Return value as a BOOL; this will in fact be a char value converted\n+ * if necessary from type initialized with; if you wish to consider anything\n+ * nonzero TRUE do not compare directly to YES, but use <code>'!= NO'</code>.\n+ */\n+- (BOOL) boolValue;\n+/** Returns value as a signed char, converting if necessary. */\n+- (signed char) charValue;\n+/** Returns value as a double, converting if necessary. */\n+- (double) doubleValue;\n+/** Returns value as a float, converting if necessary. */\n+- (float) floatValue;\n+/** Returns value as a (signed) int, converting if necessary. */\n+- (signed int) intValue;\n+/** Returns value as a (signed) long, converting if necessary. */\n+- (signed long) longValue;\n+/** Returns value as a (signed) long long, converting if necessary. */\n+- (signed long long) longLongValue;\n+/** Returns value as a (signed) short, converting if necessary. */\n+- (signed short) shortValue;\n+/** Returns value as an unsigned char, converting if necessary. */\n+- (unsigned char) unsignedCharValue;\n+/** Returns value as an unsigned int, converting if necessary. */\n+- (unsigned int) unsignedIntValue;\n+/** Returns value as an unsigned long, converting if necessary. */\n+- (unsigned long) unsignedLongValue;\n+/** Returns value as an unsigned long long, converting if necessary. */\n+- (unsigned long long) unsignedLongLongValue;\n+/** Returns value as an unsigned short, converting if necessary. */\n+- (unsigned short) unsignedShortValue;\n+\n+/** Returns -description . */\n+- (NSString*) stringValue;\n+\n+/**\n+ * Returns the string representation of this number using a non-localised\n+ * conversion (decimal point is '.' irrespective of the locale).\n+ */\n+- (NSString*) description;\n+\n+/**\n+ * <p>\n+ *   Produces a string representation of the number.  For a boolean\n+ *   this will be either 'true' or 'false'.  For other numbers the\n+ *   format is produced using the initWithFormat:locale:... method\n+ *   of NSString, and the format depends on the type of number as\n+ *   follows -\n+ * </p>\n+ * <deflist>\n+ *   <term>char</term>\n+ *   <desc>%i</desc>\n+ *   <term> short</term>\n+ *   <desc>%hi</desc>\n+ *   <term> int</term>\n+ *   <desc>%i</desc>\n+ *   <term> long</term>\n+ *   <desc>%li</desc>\n+ *   <term> long long</term>\n+ *   <desc>%lli</desc>\n+ *   <term> unsigned char</term>\n+ *   <desc>%u</desc>\n+ *   <term> unsigned short</term>\n+ *   <desc>%hu</desc>\n+ *   <term> unsigned int</term>\n+ *   <desc>%u</desc>\n+ *   <term> unsigned long</term>\n+ *   <desc>%lu</desc>\n+ *   <term> unsigned long long</term>\n+ *   <desc>%llu</desc>\n+ *   <term> float</term>\n+ *   <desc>%0.7g</desc>\n+ *   <term> double</term>\n+ *   <desc>%0.16g</desc>\n+ * </deflist>\n+ */\n+- (NSString*) descriptionWithLocale: (id)locale;\n+\n+/**\n+ * Compares receiver with otherNumber, using C type conversion if necessary,\n+ * and returns <code>NSOrderedAscending</code>,\n+ * <code>NSOrderedDescending</code>, or <code>NSOrderedSame</code> depending\n+ * on whether it is less than, greater than, or equal to otherNumber.\n+ */\n+- (NSComparisonResult) compare: (NSNumber*)otherNumber;\n+\n+/**\n+ * Returns whether receiver and otherNumber represent the same numerical value.\n+ */\n+- (BOOL) isEqualToNumber: (NSNumber*)otherNumber;\n+\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)\n+/** Return a number intialised with NSInteger.\n+ */\n++ (NSNumber*) numberWithInteger: (NSInteger)value;\n+/** Return a number intialised with NSUInteger.\n+ */\n++ (NSNumber*) numberWithUnsignedInteger: (NSUInteger)value;\n+/** Initialise the receiver with NSInteger content.\n+ */\n+- (id) initWithInteger: (NSInteger)value;\n+/** Initialise the receiver with NSUInteger content.\n+ */\n+- (id) initWithUnsignedInteger: (NSUInteger)value;\n+/** Return the contents of the receiver as NSInteger.\n+ */\n+- (NSInteger) integerValue;\n+/** Return the contents of the receiver as NSUInteger.\n+ */\n+- (NSUInteger) unsignedIntegerValue;\n+#endif\n+\n+@end\n+\n+#if OS_API_VERSION(GS_API_NONE, GS_API_NONE)\n+\n+/** Note: Defines a method that is not in the OpenStep spec, but makes\n+    subclassing easier. */\n+@interface NSValue (Subclassing)\n+\n+/** Used by value: withObjCType: to determine the concrete subclass to alloc. */\n++ (Class) valueClassWithObjCType: (const char*)type;\n+\n+@end\n+#endif\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#if     !NO_GNUSTEP && !defined(GNUSTEP_BASE_INTERNAL)\n+#import \"../GNUstepBase/NSNumber+GNUstepBase.h\"\n+#endif\n+\n+#endif /* __NSValue_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "21776f65c3b1d2ccb9a3ade71552206cae7da1fa", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/Foundation/NSZone.h", "status": "added", "additions": 335, "deletions": 0, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSZone.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSZone.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FFoundation%2FNSZone.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,335 @@\n+/** Zone memory management. -*- Mode: ObjC -*-\n+   Copyright (C) 1997,1998,1999 Free Software Foundation, Inc.\n+\n+   Written by: Yoo C. Chung <wacko@laplace.snu.ac.kr>\n+   Date: January 1997\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+    AutogsdocSource:\tNSZone.m\n+    AutogsdocSource:\tNSPage.m\n+\n+   */\n+\n+#ifndef __NSZone_h_GNUSTEP_BASE_INCLUDE\n+#define __NSZone_h_GNUSTEP_BASE_INCLUDE\n+#import\t\"../GNUstepBase/GSVersionMacros.h\"\n+\n+/**\n+ * Primary structure representing an <code>NSZone</code>.  Technically it\n+ * consists of a set of function pointers for zone upkeep functions plus some\n+ * other things-\n+<example>\n+{\n+  // Functions for zone.\n+  void *(*malloc)(struct _NSZone *zone, size_t size);\n+  void *(*realloc)(struct _NSZone *zone, void *ptr, size_t size);\n+  void (*free)(struct _NSZone *zone, void *ptr);\n+  void (*recycle)(struct _NSZone *zone);\n+  BOOL (*check)(struct _NSZone *zone);\n+  BOOL (*lookup)(struct _NSZone *zone, void *ptr);\n+\n+  // Zone statistics (not always maintained).\n+  struct NSZoneStats (*stats)(struct _NSZone *zone);\n+  \n+  size_t gran;    // Zone granularity (passed in on initialization)\n+  NSString *name; // Name of zone (default is 'nil')\n+  NSZone *next;   // Pointer used for internal management of multiple zones.\n+}</example>\n+ */\n+typedef struct _NSZone NSZone;\n+\n+#import\t\"NSObjCRuntime.h\"\n+\n+@class NSString;\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+struct _NSZone\n+{\n+  /* Functions for zone. */\n+  void *(*malloc)(struct _NSZone *zone, size_t size);\n+  void *(*realloc)(struct _NSZone *zone, void *ptr, size_t size);\n+  void (*free)(struct _NSZone *zone, void *ptr);\n+  void (*recycle)(struct _NSZone *zone);\n+  BOOL (*check)(struct _NSZone *zone);\n+  BOOL (*lookup)(struct _NSZone *zone, void *ptr);\n+  struct NSZoneStats (*stats)(struct _NSZone *zone);\n+  \n+  size_t gran; // Zone granularity\n+  __unsafe_unretained NSString *name; // Name of zone (default is 'nil')\n+  NSZone *next;\n+};\n+\n+/**\n+ * Creates a new zone of start bytes, which will grow and shrink by\n+ * granularity bytes.  If canFree is 0, memory in zone is allocated but\n+ * never freed, meaning allocation will be very fast.  The whole zone can\n+ * still be freed with NSRecycleZone(), and you should still call NSZoneFree\n+ * on memory in the zone that is no longer needed, since a count of allocated\n+ * pointers is kept and must reach zero before freeing the zone.<br />\n+ * If Garbage Collection is enabled, this function does nothing other than\n+ * log a warning and return the same value as the NSDefaultMallocZone()\n+ * function.\n+ */\n+GS_EXPORT NSZone*\n+NSCreateZone (NSUInteger start, NSUInteger gran, BOOL canFree);\n+\n+/** Returns the default zone for memory allocation.  Memory created in this\n+ * zone is the same as memory allocates using the system malloc() function.\n+ */\n+GS_EXPORT NSZone*\n+NSDefaultMallocZone (void);\n+\n+/**\n+ * Searches and finds the zone ptr was allocated from.  The speed depends\n+ * upon the number of zones and their size.<br />\n+ * If Garbage Collection is enabled, this function always returns the\n+ * same as the NSDefaultMallocZone() function.\n+ */\n+GS_EXPORT NSZone*\n+NSZoneFromPointer (void *ptr);\n+\n+/**\n+ * Allocates and returns memory for elems items of size bytes, in the\n+ * given zone.  Returns NULL if allocation of size 0 requested.  Raises\n+ * <code>NSMallocException</code> if not enough free memory in zone to\n+ * allocate and no more can be obtained from system, unless using the\n+ * default zone, in which case NULL is returned.<br />\n+ * If Garbage Collection is enabled, this function always allocates\n+ * non-scanned, non-collectable memory in the NSDefaultMallocZone() and\n+ * the zone argument is ignored.\n+ */\n+GS_EXPORT void*\n+NSZoneMalloc (NSZone *zone, NSUInteger size);\n+\n+/**\n+ * Allocates and returns cleared memory for elems items of size bytes, in the\n+ * given zone.  Returns NULL if allocation of size 0 requested.  Raises\n+ * <code>NSMallocException</code> if not enough free memory in zone to\n+ * allocate and no more can be obtained from system, unless using the\n+ * default zone, in which case NULL is returned.<br />\n+ * If Garbage Collection is enabled, this function always allocates\n+ * non-scanned, non-collectable memory in the NSDefaultMallocZone() and\n+ * the zone argument is ignored.\n+ */\n+GS_EXPORT void*\n+NSZoneCalloc (NSZone *zone, NSUInteger elems, NSUInteger bytes);\n+\n+/**\n+ * Reallocates the chunk of memory in zone pointed to by ptr to a new one of\n+ * size bytes.  Existing contents in ptr are copied over.  Raises an\n+ * <code>NSMallocException</code> if insufficient memory is available in the\n+ * zone and no more memory can be obtained from the system, unless using the\n+ * default zone, in which case NULL is returned.<br />\n+ * If Garbage Collection is enabled, the zone argument is ignored.\n+ */\n+GS_EXPORT void*\n+NSZoneRealloc (NSZone *zone, void *ptr, NSUInteger size);\n+\n+/**\n+ * Return memory for an entire zone to system.  In fact, this will not be done\n+ * unless all memory in the zone has been explicitly freed (by calls to\n+ * NSZoneFree()).  For \"non-freeable\" zones, the number of NSZoneFree() calls\n+ * must simply equal the number of allocation calls.  The default zone, on the\n+ * other hand, cannot be recycled.<br />\n+ * If Garbage Collection is enabled, this function has not effect.\n+ */\n+GS_EXPORT void\n+NSRecycleZone (NSZone *zone);\n+\n+/**\n+ * Frees memory pointed to by ptr (which should have been allocated by a\n+ * previous call to NSZoneMalloc(), NSZoneCalloc(), or NSZoneRealloc()) and\n+ * returns it to zone.  Note, if this is a nonfreeable zone, the memory is\n+ * not actually freed, but the count of number of free()s is updated.<br />\n+ * If Garbage Collection is enabled, the zone argument is ignored and this\n+ * function causes ptr to be deallocated immediately.\n+ */\n+GS_EXPORT void\n+NSZoneFree (NSZone *zone, void *ptr);\n+\n+/**\n+ * Sets name of the given zone (useful for debugging and logging).\n+ */\n+GS_EXPORT void\n+NSSetZoneName (NSZone *zone, NSString *name);\n+\n+/**\n+ * Returns the name of the given zone (useful for debugging and logging).\n+ */\n+GS_EXPORT NSString*\n+NSZoneName (NSZone *zone);\n+\n+#if OS_API_VERSION(GS_API_NONE, GS_API_NONE)\n+\n+/** Deprecated ...<br />\n+ * Checks integrity of a zone.  Not defined by OpenStep or OS X.\n+ */\n+BOOL\n+NSZoneCheck (NSZone *zone);\n+\n+/**\n+ *  <code>NSZoneStats</code> is the structure returned by the NSZoneStats()\n+ *  function that summarizes the current usage of a zone.  It is similar to\n+ *  the structure <em>mstats</em> in the GNU C library.  It has 5 fields of\n+ *  type <code>size_t</code>-\n+ *  <deflist>\n+ *    <term><code>bytes_total</code></term>\n+ *    <desc>\n+ *    This is the total size of memory managed by the zone, in bytes.</desc>\n+ *    <term><code>chunks_used</code></term>\n+ *    <desc>This is the number of memory chunks in use in the zone.</desc>\n+ *    <term><code>bytes_used</code></term>\n+ *    <desc>This is the number of bytes in use.</desc>\n+ *    <term><code>chunks_free</code></term>\n+ *    <desc>This is the number of memory chunks that are not in use.</desc>\n+ *    <term><code>bytes_free</code></term>\n+ *    <desc>\n+ *    This is the number of bytes managed by the zone that are not in use.\n+ *    </desc>\n+ *  </deflist>\n+ */\n+struct NSZoneStats\n+{\n+  size_t bytes_total;\n+  size_t chunks_used;\n+  size_t bytes_used;\n+  size_t chunks_free;\n+  size_t bytes_free;\n+};\n+\n+/** Deprecated ...<br />\n+ *  Obtain statistics about the zone.  Implementation emphasis is on\n+ *  correctness, not speed.  Not defined by OpenStep or OS X.\n+ */\n+struct NSZoneStats\n+NSZoneStats (NSZone *zone);\n+\n+/**\n+ * Try to get more memory - the normal process has failed.\n+ * If we can't do anything, just return a null pointer.\n+ * Try to do some logging if possible.\n+ */\n+void*\n+GSOutOfMemory(NSUInteger size, BOOL retry);\n+\n+/**\n+ * Called during +initialize to tell the class that instances created\n+ * in future should have the specified instance variable as a weak\n+ * pointer for garbage collection.<br />\n+ * NB. making a pointer weak does not mean that it is automatically\n+ * zeroed when the object it points to is garbage collected. To get that\n+ * behavior you must asign values to the pointer using the\n+ * GSAssignZeroingWeakPointer() function.<br />\n+ * This function has no effect if the system is\n+ * not built for garbage collection.\n+ */\n+GS_EXPORT void\n+GSMakeWeakPointer(Class theClass, const char *iVarName);\n+\n+/**\n+ * This function must be used to assign a value to a zeroing weak pointer.<br />\n+ * A zeroing weak pointer is one where, when the garbage collector collects\n+ * the object pointed to, it also clears the weak pointer.<br />\n+ * Assigning zero (nil) will always succeed and has the effect of telling the\n+ * garbage collector that it no longer needs to track the previously assigned\n+ * object.  Apart from that case, a source needs to be garbage collectable for\n+ * this function to work, and using a non-garbage collectable value will\n+ * cause the function to return NO.<br />\n+ * If the destination object (the weak pointer watching the source object)\n+ * belongs to a chunk of memory which may be collected before the source\n+ * object is collected, it is important that it is finalised and the\n+ * finalisation code assigns zero to the pointer.<br />\n+ * If garbage collection is not in use, this function performs a simple\n+ * assignment returning YES, unless destination is null in which case it\n+ * returns NO.\n+ */\n+GS_EXPORT BOOL\n+GSAssignZeroingWeakPointer(void **destination, void *source);\n+\n+#endif\n+\n+GS_EXPORT NSUInteger\n+NSPageSize (void) __attribute__ ((const));\n+\n+GS_EXPORT NSUInteger\n+NSLogPageSize (void) __attribute__ ((const));\n+\n+GS_EXPORT NSUInteger\n+NSRoundDownToMultipleOfPageSize (NSUInteger bytes) __attribute__ ((const));\n+\n+GS_EXPORT NSUInteger\n+NSRoundUpToMultipleOfPageSize (NSUInteger bytes) __attribute__ ((const));\n+\n+GS_EXPORT NSUInteger\n+NSRealMemoryAvailable (void);\n+\n+GS_EXPORT void*\n+NSAllocateMemoryPages (NSUInteger bytes);\n+\n+GS_EXPORT void\n+NSDeallocateMemoryPages (void *ptr, NSUInteger bytes);\n+\n+GS_EXPORT void\n+NSCopyMemoryPages (const void *src, void *dest, NSUInteger bytes);\n+\n+#if OS_API_VERSION(MAC_OS_X_VERSION_10_4, OS_API_LATEST)\n+\n+enum {\n+  NSScannedOption = (1<<0),\n+  NSCollectorDisabledOption = (1<<1)\n+};\n+\n+/** Allocate memory.  If garbage collection is not enabled this uses the\n+ * default malloc zone and the options are ignored.<br />\n+ * If garbage collection is enabled, the allocate memory is normally not\n+ * scanned for pointers but is itsself garbage collectable.  The options\n+ * argument is a bitmask in which NSScannedOption sets the memory to be\n+ * scanned for pointers by the garbage collector, and\n+ * NSCollectorDisabledOption causes the memory to be excempt from being\n+ * garbage collected itsself.<br />\n+ * In any case the memory returned is zero'ed.\n+ */\n+GS_EXPORT void *\n+NSAllocateCollectable(NSUInteger size, NSUInteger options);\n+\n+/** Reallocate memory to be of a different size and/or to have different\n+ * options settings.  The behavior of options is as for\n+ * the NSAllocateCollectable() function.\n+ */ \n+GS_EXPORT void *\n+NSReallocateCollectable(void *ptr, NSUInteger size, NSUInteger options);\n+\n+#endif\n+\n+static inline id NSMakeCollectable(const void *cf) {\n+#if __has_feature(objc_arc)\n+    return nil;\n+#else\n+    return (id)cf; // Unimplemented; garbage collection is deprecated.\n+#endif\n+}\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif /* not __NSZone_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "c3b7f2bd55e70f19bb641bee30cd89d90c5b7304", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GNUstep.h", "status": "added", "additions": 418, "deletions": 0, "changes": 418, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGNUstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGNUstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGNUstep.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,418 @@\n+/* GNUstep.h - macros to make easier to port gnustep apps to macos-x\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+   Written by: Nicola Pero <n.pero@mi.flashnet.it>\n+   Date: March, October 2001\n+   \n+   This file is part of GNUstep.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+   \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02110-1301, USA.\n+*/ \n+\n+#ifndef __GNUSTEP_GNUSTEP_H_INCLUDED_\n+#define __GNUSTEP_GNUSTEP_H_INCLUDED_\n+\n+/* The contents of this file are designed to be usable with either\n+ * GNUstep-base or MacOS-X Foundation.\n+ */\n+\n+#ifndef __has_feature\n+#  define __has_feature(x) 0\n+#endif\n+\n+/*\n+ * __has_extension has slightly different semantics from __has_feature.\n+ * It evaluates to true if the feature is supported by by clang for the\n+ * current compilation unit (language and -f switches), regardless of \n+ * whether it is part of the language standard or just a (non-standard)\n+ * extension.\n+ */\n+#ifndef __has_extension\n+#  define __has_extension(x) __has_feature(x)\n+#endif\n+\n+/*\n+ * __has_attribute is the equivalent to __has_feature and __has_extension\n+ * for GNU-style attributes.\n+ */\n+#ifndef __has_attribute\n+#  define __has_attribute(x) 0\n+#endif\n+\n+#if\t__has_feature(objc_arc)\n+\n+#ifndef\tRETAIN\n+#define\tRETAIN(object)\t\t        (object)\n+#endif\n+#ifndef\tRELEASE\n+#define\tRELEASE(object)\t\t\n+#endif\n+#ifndef\tAUTORELEASE\n+#define\tAUTORELEASE(object)\t        (object)\n+#endif\n+\n+#ifndef\tTEST_RETAIN\n+#define\tTEST_RETAIN(object)\t        (object)\n+#endif\n+#ifndef\tTEST_RELEASE\n+#define\tTEST_RELEASE(object)\n+#endif\n+#ifndef\tTEST_AUTORELEASE\n+#define\tTEST_AUTORELEASE(object)\t(object)\n+#endif\n+\n+#ifndef\tASSIGN\n+#define\tASSIGN(object,value)\t        object = (value)\n+#endif\n+#ifndef\tASSIGNCOPY\n+#define\tASSIGNCOPY(object,value)\tobject = [(value) copy]\n+#endif\n+#ifndef\tDESTROY\n+#define\tDESTROY(object) \t        object = nil\n+#endif\n+\n+#define\tIF_NO_GC(X)\t\n+\n+#ifndef ENTER_POOL\n+#define ENTER_POOL                      @autoreleasepool{do{\n+#endif\n+\n+#ifndef LEAVE_POOL\n+#define LEAVE_POOL                      }while(0);}\n+#endif\n+\n+#ifndef DEALLOC\n+#define DEALLOC\n+#endif\n+\n+#else\n+\n+#ifndef\tRETAIN\n+/**\n+ *\tBasic retain operation ... calls [NSObject-retain]<br />\n+ *\tDeprecated ... pointless on modern processors.\n+ *\tSimply call the -retain method.\n+ */\n+#define\tRETAIN(object)\t\t[(object) retain]\n+#endif\n+\n+#ifndef\tRELEASE\n+/**\n+ *\tBasic release operation ... calls [NSObject-release]<br />\n+ *\tDeprecated ... pointless on modern processors.\n+ *\tSimply call the -release method.\n+ */\n+#define\tRELEASE(object)\t\t[(object) release]\n+#endif\n+\n+#ifndef\tAUTORELEASE\n+/**\n+ *\tBasic autorelease operation ... calls [NSObject-autorelease]<br />\n+ *\tDeprecated ... pointless on modern processors.\n+ *\tSimply call the -autorelease method.\n+ */\n+#define\tAUTORELEASE(object)\t[(object) autorelease]\n+#endif\n+\n+#ifndef\tTEST_RETAIN\n+/**\n+ *\tTested retain - only invoke the\n+ *\tobjective-c method if the receiver is not nil.<br />\n+ *\tDeprecated ... pointless on modern processors.\n+ *\tSimply call the -retain method.\n+ */\n+#define\tTEST_RETAIN(object)\t({\\\n+id __object = (object); (__object != nil) ? [__object retain] : nil; })\n+#endif\n+\n+#ifndef\tTEST_RELEASE\n+/**\n+ *\tTested release - only invoke the\n+ *\tobjective-c method if the receiver is not nil.<br />\n+ *\tDeprecated ... pointless on modern processors.\n+ *\tSimply call the -release method.\n+ */\n+#define\tTEST_RELEASE(object)\t({\\\n+id __object = (object); if (__object != nil) [__object release]; })\n+#endif\n+\n+#ifndef\tTEST_AUTORELEASE\n+/**\n+ *\tTested autorelease - only invoke the\n+ *\tobjective-c method if the receiver is not nil.<br />\n+ *\tDeprecated ... pointless on modern processors.\n+ *\tSimply call the -autorelease method.\n+ */\n+#define\tTEST_AUTORELEASE(object)\t({\\\n+id __object = (object); (__object != nil) ? [__object autorelease] : nil; })\n+#endif\n+\n+#ifndef\tASSIGN\n+/**\n+ *\tASSIGN(object,value) assigns the value to the object with\n+ *\tappropriate retain and release operations.<br />\n+ *\tUse this to avoid retain/release errors.\n+ */\n+#define\tASSIGN(object,value)\t({\\\n+  id __object = object; \\\n+  object = [(value) retain]; \\\n+  [__object release]; \\\n+})\n+#endif\n+\n+#ifndef\tASSIGNCOPY\n+/**\n+ *\tASSIGNCOPY(object,value) assigns a copy of the value to the object\n+ *\twith release of the original.<br />\n+ *\tUse this to avoid retain/release errors.\n+ */\n+#define\tASSIGNCOPY(object,value)\t({\\\n+  id __object = object; \\\n+  object = [(value) copy];\\\n+  [__object release]; \\\n+})\n+#endif\n+\n+#ifndef\tDESTROY\n+/**\n+ *\tDESTROY() is a release operation which also sets the variable to be\n+ *\ta nil pointer for tidiness - we can't accidentally use a DESTROYED\n+ *\tobject later.  It also makes sure to set the variable to nil before\n+ *\treleasing the object - to avoid side-effects of the release trying\n+ *\tto reference the object being released through the variable.\n+ */\n+#define\tDESTROY(object) \t({ \\\n+  id __o = object; \\\n+  object = nil; \\\n+  [__o release]; \\\n+})\n+#endif\n+\n+#define\tIF_NO_GC(X)\tX\n+\n+#ifndef ENTER_POOL\n+/**\n+ *\tENTER_POOL creates an autorelease pool and places subsequent code\n+ *\tin a do/while loop (executed only once) which can be broken out of\n+ *\tto reach the point when the pool is drained.<br />\n+ *\tThe block must be terminated with a corresponding LEAVE_POOL.<br />\n+ *\tYou should not return from such a block of code (to do so could\n+ *\tleak an autorelease pool and give objects a longer lifetime than\n+ *\tthey ought to have.  If you wish to leave the block of code early,\n+ *\tyou may do so using a 'break' statement.\n+ */\n+#define ENTER_POOL      {NSAutoreleasePool *_lARP=[NSAutoreleasePool new];do{\n+#endif\n+\n+#ifndef LEAVE_POOL\n+/**\n+ *\tLEAVE_POOL terminates a block of code started with ENTER_POOL.\n+ */\n+#define LEAVE_POOL      }while(0);[_lARP drain];}\n+#endif\n+\n+#ifndef DEALLOC\n+/**\n+ *\tDEALLOC calls the superclass implementation of dealloc, unless\n+ *\tARC is in use (in which case it does nothing).\n+ */\n+#define DEALLOC         [super dealloc];\n+#endif\n+#endif\n+\n+#ifndef\tCREATE_AUTORELEASE_POOL\n+/** DEPRECATED ... use ENTER_POOL and LEAVE_POOL\n+ */\n+#define\tCREATE_AUTORELEASE_POOL(X)\t\\\n+  NSAutoreleasePool *X = [NSAutoreleasePool new]\n+#endif\n+\n+#ifndef RECREATE_AUTORELEASE_POOL\n+/** DEPRECATED ... use ENTER_POOL and LEAVE_POOL\n+ */\n+#define RECREATE_AUTORELEASE_POOL(X)  \\\n+  DESTROY(X);\\\n+  X = [NSAutoreleasePool new]\n+#endif\n+\n+\n+/**\n+ * <p>\n+ *   This function (macro) is a GNUstep extension.\n+ * </p>\n+ * <p>\n+ *   <code>_(@\"My string to translate\")</code>\n+ * </p>\n+ * <p>\n+ *   is basically equivalent to\n+ * </p>\n+ * <p>\n+ *   <code>NSLocalizedString(@\"My string to translate\", @\"\")</code>\n+ * </p>\n+ * <p>\n+ * It is useful when you need to translate an application\n+ * very quickly, as you just need to enclose all strings\n+ * inside <code>_()</code>.  But please note that when you\n+ * use this macro, you are not taking advantage of comments\n+ * for the translator, so consider using\n+ * <code>NSLocalizedString</code> instead when you need a\n+ * comment.\n+ * </p>\n+ * <p>You may define GS_LOCALISATION_BUNDLE_ID to the bundle identifier\n+ * of the bundle which is to provide the localisation information.<br />\n+ * This can be used when compiling a single file by specifying something like\n+ * '-D GS_LOCALISATION_BUNDLE_ID=$(FRAMEWORK_NAME)' in your make file.<br />\n+ * If this is not defined, the localisation is provided by your application's\n+ * main bundle exactly like the NSLocalizedString function.\n+ * </p>\n+ * <p>Alternatively you may define GS_LOCALISATION_BUNDLE to be the bundle\n+ * to be used to prvide the localisation information.\n+ * </p>\n+ */\n+# define _(X) \\\n+  [GS_LOCALISATION_BUNDLE localizedStringForKey: (X) value: @\"\" table: nil]\n+\n+#if\t!defined(GS_LOCALISATION_BUNDLE)\n+# if\tdefined(GS_LOCALISATION_BUNDLE_ID)\n+#   define\tGS_LOCALISATION_BUNDLE\t[NSBundle bundleWithIdentifier: \\\n+  GS_LOCALISATION_BUNDLE_ID]\n+# else\n+#   define\tGS_LOCALISATION_BUNDLE\t[NSBundle mainBundle]\n+# endif\n+#endif\n+\n+\n+ \n+/**\n+ * <p>\n+ *   This function (macro) is a GNUstep extension.\n+ * </p>\n+ * <p>\n+ *   <code>__(@\"My string to translate\")</code>\n+ * </p>\n+ * <p>\n+ *   is exactly the same as\n+ * </p>\n+ * <p>\n+ *   <code>GSLocalizedStaticString(@\"My string to translate\", @\"\")</code>\n+ * </p>\n+ * <p>\n+ *   It is useful when you need to translate an application very\n+ *   quickly.  You would use it as follows for static strings:\n+ * </p>\n+ * <p>\n+ *  <code>\n+ *    NSString *message = __(@\"Hello there\");\n+ *    ... more code ...\n+ *    NSLog (_(messages));\n+ *  </code>\n+ * </p>\n+ * <p>\n+ *   But please note that when you use this macro, you are not\n+ *   taking advantage of comments for the translator, so\n+ *   consider using <code>GSLocalizedStaticString</code>\n+ *   instead when you need a comment.\n+ * </p>\n+ */\n+#define __(X) X\n+\n+/* The better way for a static string, with a comment - use as follows -\n+ *\n+ * static NSString *string = GSLocalizedStaticString (@\"New Game\",\n+ *                                                    @\"Menu Option\");\n+ *\n+ * NSLog (_(string));\n+ *\n+ * If you need anything more complicated than this, please initialize\n+ * the static strings manually.\n+ */\n+\n+/**\n+ * <p>\n+ *   This function (macro) is a GNUstep extensions, and it is used\n+ *   to localize static strings.  Here is an example of a static\n+ *   string:\n+ * </p>\n+ * <p>\n+ *   <code>\n+ *     NSString *message = @\"Hi there\";\n+ *     ... some code ...\n+ *     NSLog (message);\n+ *  </code>\n+ * </p>\n+ * <p>\n+ *   This string can not be localized using the standard\n+ *   openstep functions/macros.  By using this gnustep extension,\n+ *   you can localize it as follows:\n+ * </p>\n+ * <p>\n+ *   <code>\n+ *     NSString *message = GSLocalizedStaticString (@\"Hi there\",\n+ *       @\"Greeting\");\n+ * \n+ *     ... some code ...\n+ * \n+ *     NSLog (NSLocalizedString (message, @\"\"));\n+ *  </code>\n+ * </p>\n+ * <p>\n+ *   When the tools generate the\n+ *   <code>Localizable.strings</code> file from the source\n+ *   code, they will ignore the <code>NSLocalizedString</code>\n+ *   call while they will extract the string (and the comment)\n+ *   to localize from the <code>GSLocalizedStaticString</code>\n+ *   call.\n+ * </p>\n+ * <p>\n+ *   When the code is compiled, instead, the\n+ *   <code>GSLocalizedStaticString</code> call is ignored (discarded,\n+ *   it is a macro which simply expands to <code>key</code>), while\n+ *   the <code>NSLocalizedString</code> will actually look up the\n+ *   string for translation in the <code>Localizable.strings</code>\n+ *   file.\n+ * </p>\n+ * <p>\n+ *   Please note that there is currently no macro/function to\n+ *   localize static strings using different tables.  If you\n+ *   need that functionality, you have either to prepare the\n+ *   localization tables by hand, or to rewrite your code in\n+ *   such a way as not to use static strings.\n+ * </p>\n+ */\n+#define GSLocalizedStaticString(key, comment) key\n+\n+/**\n+ * To be used inside a method for making sure that a range does not specify\n+ * anything outside the size of an array/string.  Raises exception if range\n+ * extends beyond [0,size]. Size must be an unsigned integer (NSUInteger).\n+ */\n+#define GS_RANGE_CHECK(RANGE, SIZE) \\\n+  if (RANGE.location > (NSUInteger)SIZE \\\n+    || RANGE.length > ((NSUInteger)SIZE - RANGE.location)) \\\n+    [NSException raise: NSRangeException format: @\"in %s, range { %\"\\\n+      PRIuPTR \", %\" PRIuPTR \" } extends beyond size (%\" PRIuPTR \")\", \\\n+      GSNameFromSelector(_cmd), RANGE.location, RANGE.length, (NSUInteger)SIZE]\n+\n+/** Checks whether INDEX is strictly less than OVER (within C array space).\n+ * INDEX and OVER must be unsigned integers (NSUInteger).\n+ */\n+#define CHECK_INDEX_RANGE_ERROR(INDEX, OVER) \\\n+if ((NSUInteger)INDEX >= (NSUInteger)OVER) \\\n+  [NSException raise: NSRangeException \\\n+    format: @\"in %s, index %\" PRIuPTR \" is out of range\", \\\n+    GSNameFromSelector(_cmd), (NSUInteger)INDEX]\n+\n+#endif /* __GNUSTEP_GNUSTEP_H_INCLUDED_ */"}, {"sha": "ac4e9c92ea6f9208568e14cf7d7872d278ad6427", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSBlocks.h", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSBlocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSBlocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSBlocks.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,145 @@\n+/** Definitions for block support for GNUStep\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+   */\n+\n+#ifndef __GSBlocks_h_GNUSTEP_BASE_INCLUDE\n+#define __GSBlocks_h_GNUSTEP_BASE_INCLUDE\n+\n+/* Define the has_feature pseudo-macro for GCC. */\n+#ifndef __has_feature\n+#define __has_feature(x) 0\n+#endif\n+\n+#ifndef GCC_VERSION\n+#define GCC_VERSION (__GNUC__ * 1000 + __GNUC_MINOR__)\n+#endif\n+\n+#if __has_feature(blocks)\n+\n+#define BLOCK_SCOPE __block\n+/**\n+ * Defines a block type.  Will work whether or not the compiler natively\n+ * supports blocks.\n+ */\n+#define DEFINE_BLOCK_TYPE(name, retTy, argTys, ...) \\\n+typedef retTy(^name)(argTys, ## __VA_ARGS__)\n+\n+#define DEFINE_BLOCK_TYPE_NO_ARGS(name, retTy) \\\n+typedef retTy(^name)()\n+\n+/**\n+ * Calls a block.  Works irrespective of whether the compiler supports blocks.\n+ */\n+#define CALL_BLOCK(block, args, ...) block(args, ## __VA_ARGS__)\n+\n+/**\n+ * Calls a block without arguments.\n+ */\n+#define CALL_BLOCK_NO_ARGS(block) block()\n+#else\n+\n+/* Fall-back versions for when the compiler doesn't have native blocks support.\n+ */\n+#if (GCC_VERSION >= 3000)\n+\n+#define DEFINE_BLOCK_TYPE(name, retTy, argTys, ...) \\\n+  typedef struct {\\\n+    void *isa;\\\n+    int flags;\\\n+    int reserved;\\\n+    retTy (*invoke)(void*, argTys, ## __VA_ARGS__);\\\n+  } *name\n+\n+#define DEFINE_BLOCK_TYPE_NO_ARGS(name, retTy) \\\n+  typedef struct {\\\n+    void *isa;\\\n+    int flags;\\\n+    int reserved;\\\n+    retTy (*invoke)(void*);\\\n+  } *name\n+\n+#define CALL_BLOCK(block, args, ...) block->invoke(block, args, ## __VA_ARGS__)\n+\n+#define CALL_BLOCK_NO_ARGS(block) block->invoke(block)\n+#define BLOCK_SCOPE\n+\n+#else /* GCC_VERSION >= 3000 */\n+\n+#define DEFINE_BLOCK_TYPE(name, retTy, argTys...) \\\n+  typedef struct {\\\n+    void *isa;\\\n+    int flags;\\\n+    int reserved;\\\n+    retTy (*invoke)(void*, argTys);\\\n+  } *name\n+\n+#define DEFINE_BLOCK_TYPE_NO_ARGS(name, retTy) \\\n+  typedef struct {\\\n+    void *isa;\\\n+    int flags;\\\n+    int reserved;\\\n+    retTy (*invoke)(void*);\\\n+  } *name\n+\n+\n+#define CALL_BLOCK(block, args...) block->invoke(block, args)\n+#define CALL_BLOCK_NO_ARGS(block) block->invoke(block)\n+#define BLOCK_SCOPE\n+#endif /* GCC_VERSION >= 3000 */\n+\n+#endif /* __has_feature(blocks) */\n+\n+#if __has_include(<objc/blocks_runtime.h>)\n+#  include <objc/blocks_runtime.h>\n+#else\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/**\n+ * _Block_copy and _Block_release are weakly imported, but can be assumed\n+ * to be available whenever a feature using blocks is accessed\n+ * by an application.\n+ */\n+\n+/* weak attributed supported only with ELF, MINGW is COFF */\n+#ifndef __MINGW32__\n+\n+void *_Block_copy(const void *) __attribute__((weak));\n+void _Block_release(const void *) __attribute__((weak));\n+\n+#endif /* __MINGW32__ */\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#ifndef Block_copy\n+#  define Block_copy(x) ((__typeof(x))_Block_copy((const void *)(x)))\n+#endif\n+#ifndef Block_release\n+#  define Block_release(x) _Block_release((const void *)(x))\n+#endif\n+\n+#endif /* __has_include(<objc/blocks_runtime.h>) */\n+#endif /* __GSBlocks_h_GNUSTEP_BASE_INCLUDE */\n+"}, {"sha": "a0e7cc7a4092d2bc7e8cd381b2a4689febc392b2", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSConfig.h", "status": "added", "additions": 462, "deletions": 0, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSConfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSConfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSConfig.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,462 @@\n+/* Machine/OS specific configuration information for GNUstep\n+\n+   Please NOTE - GSConfig.h is generated by the configure script from the\n+   file GSConfig.h.in - changes/fixes need to be made to the original file,\n+   not to the GSConfig.h generated from it.\n+\n+   Copyright (C) 1998-2010 Free Software Foundation, Inc.\n+\n+   Written by:  Richard frith-Macdonald <richard@brainstorm.co.uk>\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+   */\n+\n+#ifndef\tincluded_GSConfig_h\n+#define\tincluded_GSConfig_h\n+\n+/* Check the compiler to see if we are building on/for ms-windows.\n+ * Whatever the compiler uses, we want a standard setting of _WIN64\n+ * to indicate 64bit AND _WIN32 to indicate ms-windows.\n+ * These are defined by gcc, clang, and microsoft compilers anyway.\n+ */\n+#if     defined(__WIN32__) \\\n+\t|| defined(__MS_WIN32__) \\\n+\t|| defined(__MINGW32__)\n+#  if\t!defined(_WIN32)\n+#    define _WIN32\n+#  endif\n+#endif\n+#if     defined(__WIN64__) \\\n+\t|| defined(__MS_WIN64__) \\\n+\t|| defined(__MINGW64__)\n+#  if\t!defined(__WIN64__)\n+#    define __WIN64__\n+#  endif\n+#  if\t!defined(_WIN32)\n+#    define _WIN32\n+#  endif\n+#endif\n+\n+/* Check to see if this is a MINGW build (all we currently support)\n+ */\n+#if\tdefined(__MINGW32__) || defined(__MINGW64__)\n+#  if\t!defined(__MINGW__)\n+#    define __MINGW__\n+#  endif\n+#endif\n+\n+// Make sure we expose the constants that we use in ObjC++ mode\n+#ifndef __STDC_CONSTANT_MACROS\n+#define __STDC_CONSTANT_MACROS 1\n+#endif\n+#ifndef __STDC_LIMIT_MACROS \n+#define __STDC_LIMIT_MACROS 1\n+#endif\n+\n+#if !defined(NeXT_Foundation_LIBRARY)\n+\n+/* An alternate to GS_FAKE_MAIN which forces the user to call the\n+   NSProcessInfo initialization in 'main', GS_FAKE_MAIN must also\n+   be undefined. */\n+#if 0\n+#define GS_PASS_ARGUMENTS 0\n+#endif\n+\n+#define GS_FAKE_MAIN\t0\n+#if\tGS_FAKE_MAIN\n+\n+/*\n+ * NOTE - if GS_FAKE_MAIN (above) is set to 1, this hack applies - and you\n+ * must make sure that this file is included in any file that implements\n+ * the 'main()' function and links with the GNUstep base libarary.\n+ * You should NOT include this file in a program that does not link with\n+ * the base library.\n+ * This file is included automatically in NSObject.h and Foundation.h\n+ *\n+ * The Foundation classe NSProcessInfo need access to the argc, argv,\n+ * and env variables of the main() function. The purpose of this (ugly hack)\n+ * definition is to give the gstep-base library the opportunity to implement\n+ * its own main function with private access to the global vars. The private\n+ * main() implementation (in NSProcessInfo.m) will then call the user defined\n+ * gnustep_base_user_main() function.\n+ *\n+ * The original hack was -\n+ ** Written by:  Georg Tuparev, EMBL & Academia Naturalis,\n+ **              Heidelberg, Germany\n+ **              Tuparev@EMBL-Heidelberg.de\n+ **\n+ **  NOTE! This is very dirty and dangerous trick. I spend several hours\n+ ** on thinking and man pages browsing, but couldn't find better solution.\n+ ** I know that I will spend 666 years in the Computer Hell for writing\n+ ** this hack, and the master devil (Bully Boy) will send me to write\n+ ** Windowz software.\n+ ** BTW, for writing this hack I got personal congratulations from Dennis\n+ ** Ritchie and Bjarne Stroustrup sent me a bunch of flowers and asked me\n+ ** to participate in the standardization committee for C-- v.6.0 as\n+ ** responsible for the new Tab-Overriding-Operator and Scope-Sensitive-\n+ ** Comments ... but this makes my situation even worse ;-)\n+ ** - Georg\n+ *\n+ * On some systems, there are other relatively clean workarounds, if this\n+ * applies to the system you are running on, your configuration script\n+ * should have set GS_FAKE_MAIN to zero, so that this define hack will\n+ * not be used.\n+ */\n+\n+#define main gnustep_base_user_main\n+\n+#endif\t/* GS_FAKE_MAIN */\n+#endif\n+\n+/*\n+ * Definition to specify if your processor stores words with the most\n+ * significant byte first (like Motorola and SPARC, unlike Intel and VAX).\n+ */\n+#define GS_WORDS_BIGENDIAN\t0\n+\n+/*\n+ *\tSize definitions for standard types\n+ */\n+#define\tGS_SIZEOF_SHORT\t\t2\n+#define\tGS_SIZEOF_INT\t\t4\n+#define\tGS_SIZEOF_LONG\t\t8\n+#define\tGS_SIZEOF_LONG_LONG\t8\n+#define\tGS_SIZEOF_FLOAT\t\t4\n+#define\tGS_SIZEOF_DOUBLE\t8\n+#define\tGS_SIZEOF_VOIDP\t\t8\n+\n+/*\n+ *\tSize information to be places in bits 5 and 6 of type encoding bytes\n+ *\tin archives (bits 0 to 4 are used for basic type info and bit 7 is\n+ *\tused to mark cross-references to previously encoded objects).\n+ */\n+#define\t_GSC_S_SHT\t_GSC_I16\n+#define\t_GSC_S_INT\t_GSC_I32\n+#define\t_GSC_S_LNG\t_GSC_I64\n+#define\t_GSC_S_LNG_LNG\t_GSC_I64\n+\n+/*\n+ * Type definitions for types with known sizes.\n+ */\n+typedef signed char gss8;\n+typedef unsigned char gsu8;\n+typedef signed short gss16;\n+typedef unsigned short gsu16;\n+typedef signed int gss32;\n+typedef unsigned int gsu32;\n+typedef signed long gss64;\n+typedef unsigned long gsu64;\n+typedef struct { gsu8 a[16]; } gss128;\n+typedef struct { gsu8 a[16]; } gsu128;\n+typedef float gsf32;\n+typedef double gsf64;\n+\n+/*\n+ * Integer type with same size as a pointer\n+ */\n+typedef\tunsigned long gsuaddr;\n+typedef\tlong gssaddr;\n+typedef\tgsuaddr gsaddr;\n+\n+/*\n+ *\tDo we have real 64-bit and 128-bit integers or are we just pretending.\n+ */\n+#define GS_HAVE_I64\t1\n+#define GS_HAVE_I128\t0\n+\n+/*\n+ * Ensure some standard types are defined.\n+ */\n+#include <inttypes.h>\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+/*\n+ * PTR Limit information replacements for buggy headers\n+ */ \n+#if 0\n+#undef INTPTR_MAX\n+#define INTPTR_MAX \n+#undef INTPTR_MIN\n+#define INTPTR_MIN \n+#undef UINTPTR_MAX\n+#define UINTPTR_MAX \n+#endif\n+\n+\n+/*\n+ *\tDo we have zlib for file handle compression?\n+ */\n+#define USE_ZLIB\t1\n+\n+/*\n+ *\tDo we have the GNU Multiple-precision library for NSDecimal?\n+ */\n+//#define USE_GMP\t1\n+#define USE_GMP\t0\n+\n+#ifdef\tGS_WITH_GC\n+#undef  GS_WITH_GC\n+#endif\n+#define\tGS_WITH_GC\t0\n+\n+/*\n+ * Define to say if we use NXConstantString or NSConstantString\n+ */\n+#define NXConstantString\tNSConstantString\n+\n+\n+/*\n+ * Wide unicode character type.\n+ */\n+#ifndef\tUTF32Char\n+#define\tUTF32Char\tuint32_t\n+#endif\n+\n+/*\n+ * Native character type for use in systemcalls etc.\n+ */\n+\n+#if\tdefined(__MINGW__)\n+#  define\tGSNativeChar\tuint16_t\n+#else\n+#  define\tGSNativeChar\tchar\n+#endif\n+\n+/*\n+ * Types used to avoid exposing pthread header in NSLock.h\n+ * NB. These types should *never* be used except to provide enough space\n+ * in a class layout for the type of data actually used by the pthread\n+ * implementation of the current platform.\n+ */\n+typedef\tstruct {\n+  uint8_t\tdummy[48];\n+} gs_cond_t\t__attribute__((aligned (8)));\n+typedef\tstruct {\n+  uint8_t\tdummy[40];\n+} gs_mutex_t\t__attribute__((aligned (8)));\n+\n+#define\tOBJC2RUNTIME 1\n+#define BASE_NATIVE_OBJC_EXCEPTIONS     1\n+#define GS_NONFRAGILE     0\n+#define GS_MIXEDABI     0\n+#define GS_USE_LIBXML 0\n+#define GS_USE_GNUTLS 0\n+#define GS_USE_AVAHI 0\n+#define GS_USE_MDNS 0\n+#define GS_USE_ICU 0\n+#define GS_USE_LIBDISPATCH 0\n+#define GS_USE_LIBDISPATCH_RUNLOOP 0\n+#define GS_HAVE_OBJC_ROOT_CLASS_ATTR 0\n+\n+#ifndef __has_include\n+#  define __has_include(x) 0\n+#endif\n+#ifndef __has_feature\n+#  define __has_feature(x) 0\n+#endif\n+#ifndef __has_builtin\n+#  define __has_builtin(x) 0\n+#endif\n+\n+/*\n+ * __has_extension has slightly different semantics from __has_feature.\n+ * It evaluates to true if the feature is supported by by clang for the\n+ * current compilation unit (language and -f switches), regardless of\n+ * whether it is part of the language standard or just a (non-standard)\n+ * extension.\n+ */\n+#ifndef __has_extension\n+#  define __has_extension(x) __has_feature(x)\n+#endif\n+\n+#if defined(_WIN32)\n+#define BOOL WinBOOL\n+#define __OBJC_BOOL 1\n+#include <w32api.h>\n+#ifndef _WIN32_WINNT\n+#define _WIN32_WINNT Windows2000\n+#endif\n+#if\t!defined(WINVER)\n+#define WINVER Windows2000\n+#elif (WINVER < Windows2000)\n+#undef\tWINVER\n+#define WINVER Windows2000\n+#endif\n+\n+#if defined(__WIN64__)\n+#include <winsock2.h>\n+#include <windows.h>\n+#else\n+#include <windows.h>\n+#include <winsock2.h>\n+#endif\n+\n+#undef __OBJC_BOOL\n+#undef  BOOL\n+#endif\n+\n+/* Include the blocks runtime header if it's available (It shouldn't matter\n+ * that this doesn't work on compilers that don't support __has_include(),\n+ * because they also don't support blocks).\n+ */\n+#if __has_include(<objc/block_runtime.h>)\n+#  include <objc/block_runtime.h>\n+#endif\n+\n+#ifndef _WIN32\n+#include <sys/param.h> /* Hack to get rid of warning in GNU libc 2.0.3. */\n+#endif\n+\n+/* The following group of lines maintained by the gstep-base configure */\n+#define GNUSTEP_BASE_VERSION            1.26.0\n+#define GNUSTEP_BASE_MAJOR_VERSION      1\n+#define GNUSTEP_BASE_MINOR_VERSION      26\n+#define GNUSTEP_BASE_SUBMINOR_VERSION   0\n+#define GNUSTEP_BASE_GCC_VERSION        4.0.0\n+\n+/* Do not use the following macros!\n+ */\n+#define OBJC_DEP(M) \\\n+  ({ static BOOL beenHere = NO; if (beenHere == NO) {\\\n+    beenHere = YES; fprintf(stderr, \"%s:%d %s\", __FILE__, __LINE__, (M));}})\n+\n+#define OBJC_MALLOC(VAR, TYPE, NUM) \\\n+   (OBJC_DEP(\"OBJC_MALLOC is deprecated ... use malloc\\n\"),(VAR) = (TYPE *) malloc ((unsigned)(NUM)*sizeof(TYPE)))\n+#define OBJC_VALLOC(VAR, TYPE, NUM) \\\n+   (OBJC_DEP(\"OBJC_VALLOC is deprecated\\n\"),(VAR) = (TYPE *) valloc ((unsigned)(NUM)*sizeof(TYPE)))\n+#define OBJC_ATOMIC_MALLOC(VAR, TYPE, NUM) \\\n+   (OBJC_DEP(\"OBJC_ATOMIC_MALLOC is deprecated\\n\"),(VAR) = (TYPE *) malloc ((unsigned)(NUM)*sizeof(TYPE)))\n+#define OBJC_REALLOC(VAR, TYPE, NUM) \\\n+   (OBJC_DEP(\"OBJC_REALLOC is deprecated ... use realloc\\n\"),(VAR) = (TYPE *) realloc ((VAR), (unsigned)(NUM)*sizeof(TYPE)))\n+#define OBJC_CALLOC(VAR, TYPE, NUM) \\\n+   (OBJC_DEP(\"OBJC_CALLOC is deprecated ... use calloc\\n\"),(VAR) = (TYPE *) calloc ((unsigned)(NUM), sizeof(TYPE)))\n+#define OBJC_FREE(PTR) (OBJC_DEP(\"OBJC_FREE is deprecated ... use free\\n\"), free (PTR))\n+\n+#ifndef MAX\n+#define MAX(a,b) \\\n+       ({__typeof__(a) _MAX_a = (a); __typeof__(b) _MAX_b = (b);  \\\n+         _MAX_a > _MAX_b ? _MAX_a : _MAX_b; })\n+#endif\n+\n+#ifndef MIN\n+#define MIN(a,b) \\\n+       ({__typeof__(a) _MIN_a = (a); __typeof__(b) _MIN_b = (b);  \\\n+         _MIN_a < _MIN_b ? _MIN_a : _MIN_b; })\n+#endif\n+\n+#ifndef ABS\n+#define ABS(a) \\\n+       ({__typeof__(a) _ABS_a = (a); \\\n+         _ABS_a < 0 ? -_ABS_a : _ABS_a; })\n+#endif\n+\n+#ifndef STRINGIFY\n+#define STRINGIFY(s) XSTRINGIFY(s)\n+#define XSTRINGIFY(s) #s\n+#endif\n+\n+#ifndef OBJC_STRINGIFY\n+#define OBJC_STRINGIFY(s) OBJC_XSTRINGIFY(s)\n+#define OBJC_XSTRINGIFY(s) @#s\n+#endif\n+\n+#ifndef PTR2LONG\n+#define PTR2LONG(P) (((char*)(P))-(char*)0)\n+#endif\n+#ifndef LONG2PTR\n+#define LONG2PTR(L) (((char*)0)+(L))\n+#endif\n+\n+#if VSPRINTF_RETURNS_LENGTH\n+#define VSPRINTF_LENGTH(VSPF_CALL) (VSPF_CALL)\n+#else\n+#define VSPRINTF_LENGTH(VSPF_CALL) strlen((VSPF_CALL))\n+#endif /* VSPRINTF_RETURNS_LENGTH */\n+\n+#if VASPRINTF_RETURNS_LENGTH\n+#define VASPRINTF_LENGTH(VASPF_CALL) (VASPF_CALL)\n+#else\n+#define VASPRINTF_LENGTH(VASPF_CALL) strlen((VASPF_CALL))\n+#endif /* VSPRINTF_RETURNS_LENGTH */\n+\n+/* Evil hack to stop gcc-4.1 complaining about a dealloc method which\n+ * does not call the superclass implementation.\n+ */\n+#define\tGSNOSUPERDEALLOC\tif (0) [super dealloc]\n+\n+#ifndef CF_EXCLUDE_CSTD_HEADERS\n+#include <sys/types.h>\n+#include <stdarg.h>\n+#include <assert.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <float.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stddef.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <time.h>\n+#include <stdbool.h>\n+#endif\n+\n+#if !__has_feature(objc_arc)\n+// NetBSD > 6 defines __weak in cdefs_elf.h\n+#ifdef __NetBSD__\n+#undef __weak\n+#endif\n+#  if !defined(__weak)\n+#    define __weak\n+#  endif\n+#  if !defined(__strong)\n+#    define __strong\n+#  endif\n+#endif\n+\n+#ifndef __unsafe_unretained\n+#  if !__has_feature(objc_arc)\n+#    define __unsafe_unretained\n+#  endif\n+#endif\n+#ifndef __bridge\n+#  if !__has_feature(objc_arc)\n+#    define __bridge\n+#  endif\n+#endif\n+\n+#if __has_builtin(__builtin_unreachable)\n+#  define GS_UNREACHABLE() __builtin_unreachable()\n+#else\n+#  define GS_UNREACHABLE() abort()\n+#endif\n+\n+#endif\t/* included_GSConfig_h */\n+"}, {"sha": "2088ee2e88618b8b82599f0b578661ae69937373", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSObjCRuntime.h", "status": "added", "additions": 631, "deletions": 0, "changes": 631, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSObjCRuntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSObjCRuntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSObjCRuntime.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,631 @@\n+/** Interface to ObjC runtime for GNUStep\n+   Copyright (C) 1995, 1997, 2000, 2002, 2003 Free Software Foundation, Inc.\n+\n+   Written by:  Andrew Kachites McCallum <mccallum@gnu.ai.mit.edu>\n+   Date: 1995\n+   Written by:  Richard Frith-Macdonald <rfm@gnu.org>\n+   Date: 2002\n+   \n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+   \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+    AutogsdocSource: Additions/GSObjCRuntime.m\n+\n+   */ \n+\n+#ifndef __GSObjCRuntime_h_GNUSTEP_BASE_INCLUDE\n+#define __GSObjCRuntime_h_GNUSTEP_BASE_INCLUDE\n+\n+#import \"GSVersionMacros.h\"\n+#import \"GSConfig.h\"\n+\n+#include <stdio.h>\n+\n+#if 1 || NeXT_RUNTIME\n+ #include <objc/objc.h>\n+ #include <objc/objc-class.h>\n+ #include <objc/objc-runtime.h>\n+ #ifndef _C_ATOM\n+  #define _C_ATOM '%'\n+ #endif\n+ #define _F_CONST    0x01\n+ #define _F_IN       0x01\n+ #define _F_OUT      0x02\n+ #define _F_INOUT    0x03\n+ #define _F_BYCOPY   0x04\n+ #define _F_ONEWAY   0x08\n+ #define _C_CONST    'r'\n+ #define _C_IN       'n'\n+ #define _C_INOUT    'N'\n+ #define _C_OUT      'o'\n+ #define _C_BYCOPY   'O'\n+ #define _C_ONEWAY   'V'\n+#else\t\t\t\t/* GNU Objective C Runtime */\n+ #include <objc/objc.h>\n+ #if defined (__GNU_LIBOBJC__)\n+  #include <objc/runtime.h>\n+ #else\n+  #include <objc/objc-api.h>\n+  #include <objc/encoding.h>\n+ #endif\n+#endif\n+\n+/*\n+ * Hack for older compiler versions that don't have all defines\n+ * needed in  objc-api.h\n+ */\n+#ifndef\t_C_LNG_LNG\n+#define\t_C_LNG_LNG\t'q'\n+#endif\n+#ifndef\t_C_ULNG_LNG\n+#define\t_C_ULNG_LNG\t'Q'\n+#endif\n+\n+#if\tOBJC2RUNTIME\n+/* We have a real ObjC2 runtime.\n+ */\n+#include <objc/runtime.h>\n+#else\n+/* We emulate an ObjC2 runtime.\n+ */\n+#include <ObjectiveC2/objc/runtime.h>\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+@class\tNSArray;\n+@class\tNSDictionary;\n+@class\tNSObject;\n+@class\tNSString;\n+@class\tNSValue;\n+\n+#ifndef YES\n+#define YES\t\t1\n+#endif\n+#ifndef NO\n+#define NO\t\t0\n+#endif\n+#ifndef nil\n+#define nil\t\t0\n+#endif\n+\n+#if\t!defined(_C_CONST)\n+#define _C_CONST        'r'\n+#endif\n+#if\t!defined(_C_IN)\n+#define _C_IN           'n'\n+#endif\n+#if\t!defined(_C_INOUT)\n+#define _C_INOUT        'N'\n+#endif\n+#if\t!defined(_C_OUT)\n+#define _C_OUT          'o'\n+#endif\n+#if\t!defined(_C_BYCOPY)\n+#define _C_BYCOPY       'O'\n+#endif\n+#if\t!defined(_C_BYREF)\n+#define _C_BYREF        'R'\n+#endif\n+#if\t!defined(_C_ONEWAY)\n+#define _C_ONEWAY       'V'\n+#endif\n+#if\t!defined(_C_GCINVISIBLE)\n+#define _C_GCINVISIBLE  '!'\n+#endif\n+\n+/*\n+ * Functions for accessing instance variables directly -\n+ * We can copy an ivar into arbitrary data,\n+ * Get the type encoding for a named ivar,\n+ * and copy a value into an ivar.\n+ */\n+GS_EXPORT BOOL\n+GSObjCFindVariable(id obj, const char *name,\n+\t\t   const char **type, unsigned int *size, int *offset);\n+\n+GS_EXPORT void\n+GSObjCGetVariable(id obj, int offset, unsigned int size, void *data);\n+\n+GS_EXPORT void\n+GSObjCSetVariable(id obj, int offset, unsigned int size, const void *data);\n+\n+GS_EXPORT NSArray *\n+GSObjCMethodNames(id obj, BOOL recurse);\n+\n+GS_EXPORT NSArray *\n+GSObjCVariableNames(id obj, BOOL recurse);\n+\n+/**\n+ * <p>A Behavior can be seen as a \"Protocol with an implementation\" or a\n+ * \"Class without any instance variables\".  A key feature of behaviors\n+ * is that they give a degree of multiple inheritance.\n+ * </p>\n+ * <p>Behavior methods, when added to a class, override the class's\n+ * superclass methods, but not the class's methods.\n+ * </p>\n+ * <p>Whan a behavior class is added to a receiver class, not only are the\n+ * methods defined in the behavior class added, but the methods from the\n+ * behavior's class hierarchy are also added (unless already present).\n+ * </p>\n+ * <p>It's not the case that a class adding behaviors from another class\n+ * must have \"no instance vars\".  The receiver class just has to have the\n+ * same layout as the behavior class (optionally with some additional\n+ * ivars after those of the behavior class).\n+ * </p>\n+ * <p>This function provides Behaviors without adding any new syntax to\n+ * the Objective C language.  Simply define a class with the methods you\n+ * want to add, then call this function with that class as the behavior\n+ * argument.\n+ * </p>\n+ * <p>This function should be called in the +initialize method of the receiver.\n+ * </p>\n+ * <p>If you add several behaviors to a class, be aware that the order of\n+ * the additions is significant.\n+ * </p>\n+ */\n+GS_EXPORT void\n+GSObjCAddClassBehavior(Class receiver, Class behavior);\n+\n+/**\n+ * <p>An Override can be seen as a \"category implemented as a separate class\n+ * and manually added to the receiver class under program control, rather\n+ * than automatically added by the compiler/runtime.\n+ * </p>\n+ * <p>Override methods, when added to a receiver class, replace the class's\n+ * class's methods of the same name (or are added if the class did not define\n+ * methods with that name).\n+ * </p>\n+ * <p>It's not the case that a class adding overrides from another class\n+ * must have \"no instance vars\".  The receiver class just has to have the\n+ * same layout as the override class (optionally with some additional\n+ * ivars after those of the override class).\n+ * </p>\n+ * <p>This function provides overrides without adding any new syntax to\n+ * the Objective C language.  Simply define a class with the methods you\n+ * want to add, then call this function with that class as the override\n+ * argument.\n+ * </p>\n+ * <p>This function should usually be called in the +initialize method\n+ * of the receiver.\n+ * </p>\n+ * <p>If you add several overrides to a class, be aware that the order of\n+ * the additions is significant.\n+ * </p>\n+ */\n+GS_EXPORT void\n+GSObjCAddClassOverride(Class receiver, Class override);\n+\n+/** Turn on (YES), off (NO) or test (-1) behavior debugging.\n+ */\n+GS_EXPORT BOOL GSObjCBehaviorDebug(int setget);\n+\n+GS_EXPORT NSValue *\n+GSObjCMakeClass(NSString *name, NSString *superName, NSDictionary *iVars);\n+\n+GS_EXPORT void\n+GSObjCAddClasses(NSArray *classes);\n+\n+/**\n+ * Given a NULL terminated list of methods, add them to the class.<br />\n+ * If the method already exists in a superclass, the new version overrides\n+ * that one, but if the method already exists in the class itsself, the\n+ * new one is quietly ignored (replace==NO) or replaced with the new\n+ * version (if replace==YES).<br />\n+ * To add class methods, cls should be the metaclass of the class to\n+ * which the methods are being added.\n+ */\n+GS_EXPORT void\n+GSObjCAddMethods(Class cls, Method *list, BOOL replace);\n+\n+/*\n+ * Functions for key-value encoding ... they access values in an object\n+ * either by selector or directly, but do so using NSNumber for the\n+ * scalar types of data.\n+ */\n+GS_EXPORT id\n+GSObjCGetVal(NSObject *self, const char *key, SEL sel,\n+  const char *type, unsigned size, int offset);\n+\n+GS_EXPORT void\n+GSObjCSetVal(NSObject *self, const char *key, id val, SEL sel,\n+  const char *type, unsigned size, int offset);\n+\n+/*\n+ * This section includes runtime functions\n+ * to query and manipulate the ObjC runtime structures.\n+ * These functions take care to not use ObjC code so\n+ * that they can safely be used in +(void)load implementations\n+ * where applicable.\n+ */\n+\n+/**\n+ * Deprecated ... use objc_getClassList()\n+ */\n+GS_EXPORT unsigned int\n+GSClassList(Class *buffer, unsigned int max, BOOL clearCache);\n+\n+/**\n+ * GSObjCClass() is deprecated ... use object_getClass()\n+ */\n+GS_EXPORT Class GSObjCClass(id obj);\n+\n+/**\n+ * GSObjCSuper() is deprecated ... use class_getSuperclass()\n+ */\n+GS_EXPORT Class GSObjCSuper(Class cls);\n+\n+/**\n+ * GSObjCIsInstance() is deprecated ... use object_getClass()\n+ * in conjunction with class_isMetaClass()\n+ */\n+GS_EXPORT BOOL GSObjCIsInstance(id obj);\n+\n+/**\n+ * GSObjCIsClass() is deprecated ... use object_getClass()\n+ * in conjunction with class_isMetaClass()\n+ */\n+GS_EXPORT BOOL GSObjCIsClass(Class cls);\n+\n+/**\n+ * Test to see if class inherits from another class\n+ * The argument to this function must NOT be nil.\n+ */\n+GS_EXPORT BOOL GSObjCIsKindOf(Class cls, Class other);\n+\n+/**\n+ * GSClassFromName() is deprecated ... use objc_lookUpClass()\n+ */\n+GS_EXPORT Class GSClassFromName(const char *name);\n+\n+/**\n+ * GSNameFromClass() is deprecated ... use class_getName()\n+ */\n+GS_EXPORT const char *GSNameFromClass(Class cls);\n+\n+/**\n+ * GSClassNameFromObject() is deprecated ... use object_getClass()\n+ * in conjunction with class_getName()\n+ */\n+GS_EXPORT const char *GSClassNameFromObject(id obj);\n+\n+/**\n+ * GSNameFromSelector() is deprecated ... use sel_getName()\n+ */\n+GS_EXPORT const char *GSNameFromSelector(SEL sel);\n+\n+/**\n+ * GSSelectorFromName() is deprecated ... use sel_getUid()\n+ */\n+GS_EXPORT SEL\n+GSSelectorFromName(const char *name);\n+\n+/**\n+ * Return the selector for the specified name and types.<br />\n+ * Returns a nul pointer if the name is nul.<br />\n+ * Creates a new selector if necessary.<br />\n+ * Code must NOT rely on this providing a selector with type information.\n+ */\n+GS_EXPORT SEL\n+GSSelectorFromNameAndTypes(const char *name, const char *types);\n+\n+/**\n+ * Return the type information from the specified selector.<br />\n+ * May return a nul pointer if the selector was a nul pointer or if it\n+ * was not typed (or if the runtime does not support typed selectors).<br />\n+ * Code must NOT rely on this providing any type information.\n+ */\n+GS_EXPORT const char *\n+GSTypesFromSelector(SEL sel);\n+\n+/**\n+ * Compare only the type information ignoring qualifiers, the frame layout\n+ * and register markers.  Unlike sel_types_match, this function also\n+ * handles comparisons of types with and without any layout information.\n+ */\n+GS_EXPORT BOOL\n+GSSelectorTypesMatch(const char *types1, const char *types2);\n+\n+/** Takes full type information and skips forward to the actual type\n+ * as specified in the _C_... constants.\n+ */\n+GS_EXPORT const char *\n+GSSkipTypeQualifierAndLayoutInfo(const char *types);\n+\n+/**\n+ * Returns a protocol object with the corresponding name.\n+ * This function searches the registered classes for any protocol\n+ * with the supplied name.  If one is found, it is cached in\n+ * for future requests.  If efficiency is a factor then use\n+ * GSRegisterProtocol() to insert a protocol explicitly into the cache\n+ * used by this function.  If no protocol is found this function returns\n+ * nil.\n+ */\n+GS_EXPORT Protocol *\n+GSProtocolFromName(const char *name);\n+\n+/**\n+ * Registers proto in the cache used by GSProtocolFromName().\n+ */\n+GS_EXPORT void\n+GSRegisterProtocol(Protocol *proto);\n+\n+/**\n+ * A variant of protocol_getMethodDescription which recursively searches\n+ * parent protocols if the requested selector isn't found in the given\n+ * protocol.\n+ *\n+ * Returns a {NULL, NULL} structure if the requested selector couldn't be\n+ * found.\n+ */\n+GS_EXPORT struct objc_method_description\n+GSProtocolGetMethodDescriptionRecursive(Protocol *aProtocol, SEL aSel, BOOL isRequired, BOOL isInstance);\n+\n+/*\n+ * Unfortunately the definition of the symbols\n+ * 'Method(_t)', 'MethodList(_t)'  and 'IVar(_t)'\n+ * are incompatible between the GNU and NeXT/Apple runtimes.\n+ * We introduce GSMethod, GSMethodList and GSIVar to allow portability.\n+ */\n+typedef Method\tGSMethod;\n+typedef Ivar\tGSIVar;\n+\n+/**\n+ * Returns the pointer to the method structure\n+ * for the selector in the specified class.\n+ * Depending on searchInstanceMethods, this function searches\n+ * either instance or class methods.\n+ * Depending on searchSuperClassesm this function searches\n+ * either the specified class only or also its superclasses.<br/>\n+ * To obtain the implementation pointer IMP use returnValue->method_imp\n+ * which should be safe across all runtimes.<br/>\n+ * It should be safe to use this function in +load implementations.<br/>\n+ * This function should currently (June 2004) be considered WIP.\n+ * Please follow potential changes (Name, parameters, ...) closely until\n+ * it stabilizes.\n+ */\n+GS_EXPORT GSMethod\n+GSGetMethod(Class cls, SEL sel,\n+\t    BOOL searchInstanceMethods,\n+\t    BOOL searchSuperClasses);\n+\n+/**\n+ * Deprecated .. does nothing.\n+ */\n+GS_EXPORT void\n+GSFlushMethodCacheForClass (Class cls);\n+\n+/**\n+ * Deprecated .. use class_getInstanceVariable()\n+ */\n+GS_EXPORT GSIVar\n+GSCGetInstanceVariableDefinition(Class cls, const char *name);\n+\n+/**\n+ * Deprecated .. use class_getInstanceVariable()\n+ */\n+GS_EXPORT GSIVar\n+GSObjCGetInstanceVariableDefinition(Class cls, NSString *name);\n+\n+/**\n+ * GSObjCVersion() is deprecated ... use class_getVersion()\n+ */\n+GS_EXPORT int GSObjCVersion(Class cls);\n+\n+/**\n+ * Quickly return autoreleased data storage area.\n+ */\n+GS_EXPORT void *\n+GSAutoreleasedBuffer(unsigned size);\n+\n+/**\n+ * <p>Prints a message to fptr using the format string provided and any\n+ * additional arguments.  The format string is interpreted as by\n+ * the NSString formatted initialisers, and understands the '%@' syntax\n+ * for printing an object.\n+ * </p>\n+ * <p>The data is written to the file pointer in the default CString\n+ * encoding if possible, as a UTF8 string otherwise.\n+ * </p>\n+ * <p>This function is recommended for printing general log messages.\n+ * For debug messages use NSDebugLog() and friends.  For error logging\n+ * use NSLog(), and for warnings you might consider NSWarnLog().\n+ * </p>\n+ */\n+GS_EXPORT BOOL\n+GSPrintf (FILE *fptr, NSString *format, ...);\n+\n+\f\n+\n+GS_EXPORT NSArray *\n+GSObjCAllSubclassesOfClass(Class cls);\n+\n+GS_EXPORT NSArray *\n+GSObjCDirectSubclassesOfClass(Class cls);\n+\n+/** Function to change the class of the specified instance to newClass.\n+ * This handles memory debugging issues in GNUstep-base and also\n+ * deals with class finalisation issues in a garbage collecting\n+ * environment, so you should use this function rather than attempting\n+ * to swizzle class pointers directly.\n+ */\n+GS_EXPORT void\n+GSClassSwizzle(id instance, Class newClass);\n+\n+#if !defined(GS_GNUSTEP_V) || (GS_GNUSTEP_V >= GS_API_ANY && GS_GNUSTEP_V < 011500)\n+//GS_API_VERSION(GS_API_ANY,011500)\n+\n+GS_EXPORT const char *\n+GSLastErrorStr(long error_id) GS_DEPRECATED_FUNC;\n+\n+#endif\n+\n+\f\n+\n+#ifndef\tGS_MAX_OBJECTS_FROM_STACK\n+/**\n+ * The number of objects to try to get from varargs into an array on\n+ * the stack ... if there are more than this, use the heap.\n+ * NB. This MUST be a multiple of 2\n+ */\n+#define\tGS_MAX_OBJECTS_FROM_STACK\t128\n+#endif\n+\n+/**\n+ * <p>This is a macro designed to minimise the use of memory allocation and\n+ * deallocation when you need to work with a vararg list of objects.<br />\n+ * The objects are unpacked from the vararg list into two 'C' arrays and\n+ * then a code fragment you specify is able to make use of them before\n+ * that 'C' array is destroyed. \n+ * </p>\n+ * <p>The firstObject argument is the name of the formal parameter in your\n+ * method or function which precedes the ', ...' denoting variable args.\n+ * </p>\n+ * <p>The code argument is a piece of objective-c code to be executed to\n+ * make use of the objects stored in the 'C' arrays.<br />\n+ * When this code is called the unsigned integer '__count' will contain the\n+ * number of objects unpacked, the pointer '__objects' will point to\n+ * the first object in each pair, and the pointer '__pairs' will point\n+ * to an array containing the second halves of the pairs of objects\n+ * whose first halves are in '__objects'.<br />\n+ * This lets you pack a list of the form 'key, value, key, value, ...'\n+ * into an array of keys and an array of values.\n+ * </p>\n+ */\n+#define GS_USEIDPAIRLIST(firstObject, code...) ({\\\n+  va_list\t__ap; \\\n+  unsigned int\t__max = GS_MAX_OBJECTS_FROM_STACK; \\\n+  unsigned int\t__count = 0; \\\n+  id\t\t__buf[__max]; \\\n+  id\t\t*__objects = __buf; \\\n+  id\t\t*__pairs = &__objects[__max/2]; \\\n+  id\t\t__obj = firstObject; \\\n+  va_start(__ap, firstObject); \\\n+  while (__obj != nil && __count < __max) \\\n+    { \\\n+      if ((__count % 2) == 0) \\\n+\t{ \\\n+\t  __objects[__count/2] = __obj; \\\n+\t} \\\n+      else \\\n+\t{ \\\n+\t  __pairs[__count/2] = __obj; \\\n+\t} \\\n+      __obj = va_arg(__ap, id); \\\n+      if (++__count == __max) \\\n+\t{ \\\n+\t  while (__obj != nil) \\\n+\t    { \\\n+\t      __count++; \\\n+\t      __obj = va_arg(__ap, id); \\\n+\t    } \\\n+\t} \\\n+    } \\\n+  if ((__count % 2) == 1) \\\n+    { \\\n+      __pairs[__count/2] = nil; \\\n+      __count++; \\\n+    } \\\n+  va_end(__ap); \\\n+  if (__count > __max) \\\n+    { \\\n+      unsigned int\t__tmp; \\\n+      __objects = (id*)malloc(__count*sizeof(id)); \\\n+      __pairs = &__objects[__count/2]; \\\n+      __objects[0] = firstObject; \\\n+      va_start(__ap, firstObject); \\\n+      for (__tmp = 1; __tmp < __count; __tmp++) \\\n+\t{ \\\n+\t  if ((__tmp % 2) == 0) \\\n+\t    { \\\n+\t      __objects[__tmp/2] = va_arg(__ap, id); \\\n+\t    } \\\n+\t  else \\\n+\t    { \\\n+\t      __pairs[__tmp/2] = va_arg(__ap, id); \\\n+\t    } \\\n+\t} \\\n+      va_end(__ap); \\\n+    } \\\n+  code; \\\n+  if (__objects != __buf) free(__objects); \\\n+})\n+\n+/**\n+ * <p>This is a macro designed to minimise the use of memory allocation and\n+ * deallocation when you need to work with a vararg list of objects.<br />\n+ * The objects are unpacked from the vararg list into a 'C' array and\n+ * then a code fragment you specify is able to make use of them before\n+ * that 'C' array is destroyed. \n+ * </p>\n+ * <p>The firstObject argument is the name of the formal parameter in your\n+ * method or function which precedes the ', ...' denoting variable args.\n+ * </p>\n+ * <p>The code argument is a piece of objective-c code to be executed to\n+ * make use of the objects stored in the 'C' array.<br />\n+ * When this code is called the unsigned integer '__count' will contain the\n+ * number of objects unpacked, and the pointer '__objects' will point to\n+ * the unpacked objects, ie. firstObject followed by the vararg arguments\n+ * up to (but not including) the first nil.\n+ * </p>\n+ */\n+#define GS_USEIDLIST(firstObject, code...) ({\\\n+  va_list\t__ap; \\\n+  unsigned int\t__max = GS_MAX_OBJECTS_FROM_STACK; \\\n+  unsigned int\t__count = 0; \\\n+  id\t\t__buf[__max]; \\\n+  id\t\t*__objects = __buf; \\\n+  id\t\t__obj = firstObject; \\\n+  va_start(__ap, firstObject); \\\n+  while (__obj != nil && __count < __max) \\\n+    { \\\n+      __objects[__count] = __obj; \\\n+      __obj = va_arg(__ap, id); \\\n+      if (++__count == __max) \\\n+\t{ \\\n+\t  while (__obj != nil) \\\n+\t    { \\\n+\t      __count++; \\\n+\t      __obj = va_arg(__ap, id); \\\n+\t    } \\\n+\t} \\\n+    } \\\n+  va_end(__ap); \\\n+  if (__count > __max) \\\n+    { \\\n+      unsigned int\t__tmp; \\\n+      __objects = (id*)NSZoneMalloc(NSDefaultMallocZone(),__count*sizeof(id)); \\\n+      va_start(__ap, firstObject); \\\n+      __objects[0] = firstObject; \\\n+      for (__tmp = 1; __tmp < __count; __tmp++) \\\n+\t{ \\\n+\t  __objects[__tmp] = va_arg(__ap, id); \\\n+\t} \\\n+      va_end(__ap); \\\n+    } \\\n+  code; \\\n+  if (__objects != __buf) NSZoneFree (NSDefaultMallocZone(),__objects); \\\n+})\n+\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* __GSObjCRuntime_h_GNUSTEP_BASE_INCLUDE */"}, {"sha": "e7cfb5ea880931284ca94b566b0cfeed8e40f782", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/GSVersionMacros.h", "status": "added", "additions": 460, "deletions": 0, "changes": 460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSVersionMacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSVersionMacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FGSVersionMacros.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,460 @@\n+/* GSVersionMacros.h - macros for managing API versioning and visibility\n+   Copyright (C) 2006-2014 Free Software Foundation, Inc.\n+\n+   Written by: Richard Frith-Macdonald <rfm@gnu.org>\n+   Date: Oct, October 2006\n+\n+   This file is part of GNUstep.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02110-1301, USA.\n+*/\n+\n+#ifndef __GNUSTEP_GSVERSIONMACROS_H_INCLUDED_\n+#define __GNUSTEP_GSVERSIONMACROS_H_INCLUDED_\n+\n+/* By default we defined NO_GNUSTEP to 0 so that we will include extensions.\n+ */\n+#if\t!defined(NO_GNUSTEP)\n+#  define\tNO_GNUSTEP\t0\n+#endif\n+\n+/* Check consistency of definitions for system compatibility.\n+ */\n+#if\tdefined(STRICT_OPENSTEP)\n+#  define\tGS_OPENSTEP_V\t 10000\n+#  undef\tNO_GNUSTEP\n+#  define\tNO_GNUSTEP\t1\n+#elif\tdefined(STRICT_MACOS_X)\n+#  define\tGS_OPENSTEP_V\t100600\n+#  undef\tNO_GNUSTEP\n+#  define\tNO_GNUSTEP\t1\n+#endif\n+\n+/* Define the GS_OSX_ADJUST() macro to adjust OSX style version macros\n+ * to GNUstep style version macros.\n+ */\n+#define\tGS_OSX_ADJUST(V) ((V) >= 10000 ? (V) : ((V)/100*10000 + (V)%100*10))\n+\n+/* Define OSX compatibility version macros if necessary.\n+ */\n+#if     !defined(MAC_OS_X_VERSION_10_0)\n+#define\tMAC_OS_X_VERSION_10_0\t1000\n+#define\tMAC_OS_X_VERSION_10_1\t1010\n+#define\tMAC_OS_X_VERSION_10_2\t1020\n+#define\tMAC_OS_X_VERSION_10_3\t1030\n+#define\tMAC_OS_X_VERSION_10_4\t1040\n+#define\tMAC_OS_X_VERSION_10_5\t1050\n+#define\tMAC_OS_X_VERSION_10_6\t1060\n+#define\tMAC_OS_X_VERSION_10_7\t1070\n+#define\tMAC_OS_X_VERSION_10_8\t1080\n+#define\tMAC_OS_X_VERSION_10_9\t1090\n+#define MAC_OS_X_VERSION_10_10\t1100\n+#define MAC_OS_X_VERSION_10_11\t1110\n+#define MAC_OS_X_VERSION_10_12\t1120\n+#define MAC_OS_X_VERSION_10_13\t1130\n+#define MAC_OS_X_VERSION_10_14\t1140\n+#endif\t/* MAC_OS_X_VERSION_10_0 */\n+\n+/* Allow MAC_OS_X_VERSION_MAX_ALLOWED to be used in place of GS_OPENSTEP_V\n+ * if GS_OPENSTEP_V is not defined.\n+ */\n+#ifndef\tGS_OPENSTEP_V\n+#ifdef\tMAC_OS_X_VERSION_MAX_ALLOWED\n+#define\tGS_OPENSTEP_V\tGS_OSX_ADJUST(MAC_OS_X_VERSION_MAX_ALLOWED)\n+#endif\t/* MAC_OS_X_VERSION_MAX_ALLOWED */\n+#endif\t/* GS_OPENSTEP_V */\n+\n+/*\n+ * NB. The version values below must be integers ... by convention these are\n+ * made up of two digits each for major, minor and subminor version numbers\n+ * (ie each is in the range 00 to 99 though a leading zero in the major\n+ * number is not permitted).\n+ * So for a MacOS-X 10.3.9 release the version number would be 100309\n+ *\n+ * You may define GS_GNUSTEP_V or GS_OPENSTEP_V to ensure that your\n+ * program only 'sees' the specified varsion of the API.\n+ */\n+\n+/**\n+ * <p>Macro to check a defined GNUstep version number (GS_GNUSTEP_V) against\n+ * the supplied arguments.  Returns true if no GNUstep version is specified,\n+ * or if ADD &lt;= version &lt; REM, where ADD is the version\n+ * number at which a feature guarded by the macro was introduced and\n+ * REM is the version number at which it was removed.\n+ * </p>\n+ * <p>The version number arguments are six digit integers where the first\n+ * two digits are the major version number, the second two are the minor\n+ * version number and the last two are the subminor number (all left padded\n+ * with a zero where necessary).  However, for convenience you can also\n+ * use the predefined constants ...\n+ * <ref type=\"macro\" id=\"GS_API_NONE\">GS_API_NONE</ref>,\n+ * <ref type=\"macro\" id=\"GS_API_LATEST\">GS_API_LATEST</ref>,\n+ * </p>\n+ * <p>Also see <ref type=\"macro\" id=\"OS_API_VERSION\">OS_API_VERSION</ref>\n+ * </p>\n+ * <p>NB. If you are changing the API (eg adding a new feature) you need\n+ * to control the visibility io the new header file code using<br />\n+ * <code>#if GS_API_VERSION(ADD,GS_API_LATEST)</code><br />\n+ * where <code>ADD</code> is the version number of the next minor\n+ * release after the most recent one.<br />\n+ * As a general principle you should <em>not</em> change the API with\n+ * changing subminor version numbers ... as that tends to confuse\n+ * people (though Apple has sometimes done it).\n+ * </p>\n+ */\n+#define\tGS_API_VERSION(ADD,REM) \\\n+  (!defined(GS_GNUSTEP_V) || (GS_GNUSTEP_V >= ADD && GS_GNUSTEP_V < REM))\n+\n+/**\n+ * <p>Macro to check a defined OpenStep/OPENSTEP/MacOS-X version against the\n+ * supplied arguments.  Returns true if no version is specified, or if\n+ * ADD &lt;= version &lt; REM, where ADD is the version\n+ * number at which a feature guarded by the macro was introduced and\n+ * REM is the version number at which it was removed.\n+ * </p>\n+ * <p>The version number arguments are six digit integers where the first\n+ * two digits are the major version number, the second two are the minor\n+ * version number and the last two are the subminor number (all left padded\n+ * with a zero where necessary).  However, for convenience you can also\n+ * use any of several predefined constants ...\n+ * <ref type=\"macro\" id=\"GS_API_NONE\">GS_API_NONE</ref>,\n+ * <ref type=\"macro\" id=\"GS_API_LATEST\">GS_API_LATEST</ref>,\n+ * <ref type=\"macro\" id=\"GS_API_OSSPEC\">GS_API_OSSPEC</ref>,\n+ * <ref type=\"macro\" id=\"GS_API_OPENSTEP\">GS_API_OPENSTEP</ref>,\n+ * <ref type=\"macro\" id=\"GS_API_MACOSX\">GS_API_MACOSX</ref>\n+ * </p>\n+ * <p>Also see <ref type=\"macro\" id=\"GS_API_VERSION\">GS_API_VERSION</ref>\n+ * </p>\n+ * <p>For OSX compatibility, this macro also supports the use of Apple's\n+ * symbolic constants for version numbering.  Their contants are currently\n+ * four digit values (two digits for the major version, one for the minor,\n+ * and one for the subminor). \n+ * </p>\n+ * <p>The Apple compatibility version macros are currently:\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_0\">MAC_OS_X_VERSION_10_0</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_1\">MAC_OS_X_VERSION_10_1</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_2\">MAC_OS_X_VERSION_10_2</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_3\">MAC_OS_X_VERSION_10_3</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_4\">MAC_OS_X_VERSION_10_4</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_5\">MAC_OS_X_VERSION_10_5</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_6\">MAC_OS_X_VERSION_10_6</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_7\">MAC_OS_X_VERSION_10_7</ref>,\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_8\">MAC_OS_X_VERSION_10_8</ref>\n+ * <ref type=\"macro\" id=\"MAC_OS_X_VERSION_10_9\">MAC_OS_X_VERSION_10_9</ref>\n+ * </p>\n+ */\n+#define\tOS_API_VERSION(ADD,REM) \\\n+  (!defined(GS_OPENSTEP_V) \\\n+  || (GS_OPENSTEP_V>=GS_OSX_ADJUST(ADD) && GS_OPENSTEP_V<GS_OSX_ADJUST(REM)))\n+\n+/**\n+ * A constant which is the lowest possible version number (0) so that\n+ * when used as the removal version (second argument of the GS_API_VERSION\n+ * or OS_API_VERSION macro) represents a feature which is not present in\n+ * any version.<br />\n+ * eg.<br />\n+ * #if <ref type=\"macro\" id=\"OS_API_VERSION\">OS_API_VERSION</ref>\n+ * (GS_API_NONE, GS_API_NONE)<br />\n+ * denotes  code not present in OpenStep/OPENSTEP/MacOS-X\n+ */\n+#define\tGS_API_NONE\t     0\n+\n+/**\n+ * A constant to represent a feature which is still present in the latest\n+ * version.  This is the highest possible version number.<br />\n+ * eg.<br />\n+ * #if <ref type=\"macro\" id=\"OS_API_VERSION\">OS_API_VERSION</ref>\n+ * (GS_API_MACOSX, GS_API_LATEST)<br />\n+ * denotes code present from the initial MacOS-X version onwards.\n+ */\n+#define\tGS_API_LATEST\t999999\n+\n+/**\n+ * The version number of the initial OpenStep specification.<br />\n+ * eg.<br />\n+ * #if <ref type=\"macro\" id=\"OS_API_VERSION\">OS_API_VERSION</ref>\n+ * (GS_API_OSSPEC, GS_API_LATEST)<br />\n+ * denotes code present from the OpenStep specification onwards.\n+ */\n+#define\tGS_API_OSSPEC\t 10000\n+\n+/**\n+ * The version number of the first OPENSTEP implementation.<br />\n+ * eg.<br />\n+ * #if <ref type=\"macro\" id=\"OS_API_VERSION\">OS_API_VERSION</ref>\n+ * (GS_API_OPENSTEP, GS_API_LATEST)<br />\n+ * denotes code present from the initial OPENSTEP version onwards.\n+ */\n+#define\tGS_API_OPENSTEP\t 40000\n+\n+/**\n+ * The version number of the first MacOS-X implementation.<br />\n+ * eg.<br />\n+ * #if <ref type=\"macro\" id=\"OS_API_VERSION\">OS_API_VERSION</ref>\n+ * (GS_API_MACOSX, GS_API_LATEST)<br />\n+ * denotes code present from the initial MacOS-X version onwards.\n+ */\n+#define\tGS_API_MACOSX\t100000\n+\n+/* Allow OSX code comparing MAC_OS_X_VERSION_MAX_ALLOWED with a specific\n+ * version to see if that version is allowed, to always have it allowed\n+ * on GNUstep.\n+ */\n+#ifndef\tMAC_OS_X_VERSION_MAX_ALLOWED\n+#define\tMAC_OS_X_VERSION_MAX_ALLOWED    GS_API_LATEST\n+#endif  /* MAC_OS_X_VERSION_MAX_ALLOWED */\n+\n+\n+#if\tdefined(GNUSTEP_BASE_INTERNAL)\n+#include \"GNUstepBase/GSConfig.h\"\n+#else\n+#include \"GSConfig.h\"\n+#endif\n+\n+\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && !defined(__clang__)\n+#  define GS_GCC_MINREQ(maj, min) \\\n+  ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))\n+#else\n+#  define GS_GCC_MINREQ(maj, min) 0\n+#endif\n+\n+#if defined(__clang__)\n+#  define GS_CLANG_MINREQ(maj, min) \\\n+  ((__clang_major__ << 16) + __clang_minor__ >= ((maj) << 16) + (min))\n+#else\n+#  define GS_CLANG_MINREQ(maj, min) 0\n+#endif\n+\n+/* Attribute definitions for attributes which may or may not be supported\n+ * depending on the compiler being used.\n+ * NB we currently expect gcc to be version 4 or later.\n+ *\n+ * The definition should be of the form GS_XXX_CONTEXT where XXX is the\n+ * name of the attribute and CONTEXT is one of FUNC, METH, or IVAR\n+ * depending on where the attribute can be applied.\n+ */\n+\n+#if defined(__clang__) || GS_GCC_MINREQ(3,1)\n+#  define GS_DEPRECATED_FUNC __attribute__ ((deprecated))\n+#else\n+#  define GS_DEPRECATED_FUNC\n+#endif\n+\n+#define GS_UNUSED_ARG __attribute__((unused))\n+\n+#define GS_UNUSED_FUNC __attribute__((unused))\n+\n+// FIXME ... what version of gcc?\n+#if __clang__\n+#  define GS_UNUSED_IVAR __attribute__((unused))\n+#else\n+#  define GS_UNUSED_IVAR \n+#endif\n+\n+\n+\n+#ifndef __has_feature\n+#define __has_feature(x) 0\n+#endif\n+\n+/* The following is for deciding whether private instance variables\n+ * should be visible ... if we are building with a compiler which\n+ * does not define __has_feature then we know we don't have non-fragile\n+ * ivar support.\n+ * In the header we bracket instance variable declarations in a\n+ * '#if\tGS_EXPOSE(classname) ... #endif' sequence, so that the variables\n+ * will not be visible to code which uses the library.\n+ * In the source file we define EXPOSE_classname_IVARS to be 1\n+ * before including the header, so that the ivars are always available\n+ * in the class source itsself\n+ */\n+\n+#if\tGS_MIXEDABI\n+#  undef\tGS_NONFRAGILE\n+#  define\tGS_NONFRAGILE\t0\t/* Mixed is treated as fragile */\n+#else\n+#  if (__has_feature(objc_nonfragile_abi))\n+#    if\t!GS_NONFRAGILE\n+#      if\tdefined(GNUSTEP_BASE_INTERNAL)\n+#        error \"You are building gnustep-base using the objc-nonfragile-abi but your gnustep-base was not configured to use it.\"\n+#      endif\n+#    endif\n+#  else\n+#    if\tGS_NONFRAGILE\n+#      error \"Your gnustep-base was configured for the objc-nonfragile-abi but you are not using it now.\"\n+#    endif\n+#  endif\n+#endif\n+\n+#define\tGS_EXPOSE(X)\t(!GS_NONFRAGILE || defined(EXPOSE_##X##_IVARS))\n+\n+/* Static analyser macros: Provide annotations to help the analyser */\n+#ifdef __clang__\n+#  define GS_NORETURN_METHOD __attribute__((__noreturn__))\n+#else\n+#  define GS_NORETURN_METHOD\n+#endif\n+\n+#ifndef NS_RETURNS_RETAINED\n+#  if __has_feature(attribute_ns_returns_retained)\n+#    define NS_RETURNS_RETAINED __attribute__((ns_returns_retained))\n+#  else\n+#    define NS_RETURNS_RETAINED\n+#  endif\n+#endif\n+\n+#ifndef NS_RETURNS_NOT_RETAINED\n+#  if __has_feature(attribute_ns_returns_not_retained)\n+#    define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))\n+#  else\n+#    define NS_RETURNS_NOT_RETAINED\n+#  endif\n+#endif\n+\n+#ifndef NS_CONSUMED\n+#  if __has_feature(attribute_ns_consumed)\n+#    define NS_CONSUMED __attribute__((ns_consumed))\n+#  else\n+#    define NS_CONSUMED\n+#  endif\n+#endif\n+\n+\n+#ifndef NS_CONSUMES_SELF\n+#  if __has_feature(attribute_ns_consumes_self)\n+#    define NS_CONSUMES_SELF __attribute__((ns_consumes_self))\n+#  else\n+#    define NS_CONSUMES_SELF\n+#  endif\n+#endif\n+\n+#if defined(__clang__) && defined(__OBJC__)\n+static inline void gs_consumed(id NS_CONSUMED o) GS_UNUSED_FUNC;\n+static inline void gs_consumed(id NS_CONSUMED GS_UNUSED_ARG o) { return; }\n+#define\tGS_CONSUMED(O)\tgs_consumed(O);\n+#else\n+#define\tGS_CONSUMED(O)\n+#endif\n+\n+/* Include the appropriate header for ObjC2 blocks support if it is in use.\n+ *\n+ * FIXME: \"OBJC2RUNTIME\" is set to \"1\" if the runtime supports the ObjC2\n+ * runtime API, which is unrelated to whether the compiler has blocks\n+ * support or not.\n+ */\n+#if __has_feature(blocks)\n+#  if\tOBJC2RUNTIME\n+#    if defined(__APPLE__)\n+#      include <Block.h>\n+#    else\n+#      include <objc/blocks_runtime.h>\n+#    endif\n+#  else\n+#    include <ObjectiveC2/blocks_runtime.h>\n+#  endif\n+#endif\n+\n+/* Attribute definition for root classes, annotates the interface declaration\n+ * of the class.\n+ */\n+#ifndef GS_ROOT_CLASS\n+#  if GS_HAVE_OBJC_ROOT_CLASS_ATTR || __has_feature(attribute_objc_root_class)\n+#    define GS_ROOT_CLASS __attribute__((objc_root_class))\n+#  else\n+#    define GS_ROOT_CLASS\n+#  endif\n+#endif\n+\n+\n+\n+#if\tdefined(GNUSTEP_WITH_DLL)\n+\n+#if BUILD_libgnustep_base_DLL\n+#\n+# if defined(__MINGW__)\n+  /* On Mingw, the compiler will export all symbols automatically, so\n+   * __declspec(dllexport) is not needed.\n+   */\n+#  define GS_EXPORT  extern\n+#  define GS_DECLARE\n+# else\n+#  define GS_EXPORT  __declspec(dllexport)\n+#  define GS_DECLARE __declspec(dllexport)\n+# endif\n+#else\n+#  define GS_EXPORT  extern __declspec(dllimport)\n+#  define GS_DECLARE __declspec(dllimport)\n+#endif\n+\n+#else /* GNUSTEP_WITH[OUT]_DLL */\n+\n+#  define GS_EXPORT extern\n+#  define GS_DECLARE\n+\n+#endif\n+\n+\n+/* Attribute macros compatible with Apple.\n+ */\n+\n+#ifndef NS_FORMAT_ARGUMENT\n+#if defined(__clang__) || GS_GCC_MINREQ(4,2)\n+#  define NS_FORMAT_ARGUMENT(A) __attribute__((format_arg(A)))\n+#else\n+#  define NS_FORMAT_ARGUMENT(F,A) \n+#endif\n+#endif\n+\n+// FIXME ... what version of gcc?\n+#ifndef NS_FORMAT_FUNCTION\n+#if __clang__\n+#  define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))\n+#else\n+#  define NS_FORMAT_FUNCTION(F,A) \n+#endif\n+#endif\n+\n+#ifndef NS_REQUIRES_NIL_TERMINATION\n+#define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))\n+#endif\n+\n+// FIXME ... what exact version of clang and gcc?\n+#ifndef UNAVAILABLE_ATTRIBUTE\n+#if defined(__clang__) || GS_GCC_MINREQ(4,0)\n+#  define UNAVAILABLE_ATTRIBUTE __attribute__((unavailable))\n+#else\n+#  define UNAVAILABLE_ATTRIBUTE\n+#endif\n+#endif\n+\n+/* Check if compiler supports @optional in protocols\n+ */\n+#if defined(__clang__) || GS_GCC_MINREQ(4,6)\n+#  define GS_PROTOCOLS_HAVE_OPTIONAL 1\n+#else\n+#  define GS_PROTOCOLS_HAVE_OPTIONAL 0\n+#endif\n+\n+/* Check if compiler supports declared properties\n+ */\n+#if defined(__clang__) || GS_GCC_MINREQ(4,6)\n+#  define GS_HAS_DECLARED_PROPERTIES 1\n+#else\n+#  define GS_HAS_DECLARED_PROPERTIES 0\n+#endif\n+\n+#endif /* __GNUSTEP_GSVERSIONMACROS_H_INCLUDED_ */"}, {"sha": "c9b595aa2f6eef16d5b2d2d7c9432c4f28246de0", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/NSArray+GNUstepBase.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSArray%2BGNUstepBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSArray%2BGNUstepBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSArray%2BGNUstepBase.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,78 @@\n+/** Declaration of extension methods for base additions\n+\n+   Copyright (C) 2003-2010 Free Software Foundation, Inc.\n+\n+   Written by:  Richard Frith-Macdonald <rfm@gnu.org>\n+   and:         Adam Fedor <fedor@gnu.org>\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+*/\n+\n+#ifndef\tINCLUDED_NSArray_GNUstepBase_h\n+#define\tINCLUDED_NSArray_GNUstepBase_h\n+\n+#import \"../GNUstepBase/GSVersionMacros.h\"\n+#import \"../Foundation/NSArray.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+#if\tOS_API_VERSION(GS_API_NONE,GS_API_LATEST)\n+\n+@interface NSArray (GNUstepBase)\n+\n+/** <p>Method for working with sorted arrays - use a binary chop\n+ * to determine the insertion location for an object.  If equal objects\n+ * already exist in the array, they will be located immediately before\n+ * the insertion position.\n+ * </p>\n+ * <p>The comparator function takes two items as arguments, the first is the\n+ * item to be added, the second is the item already in the array.\n+ * The function should return NSOrderedAscending if the item to be\n+ * added is 'less than' the item in the array, NSOrderedDescending\n+ * if it is greater, and NSOrderedSame if it is equal.\n+ * </p>\n+ */\n+- (NSUInteger) insertionPosition: (id)item\n+\t\t   usingFunction: (NSComparisonResult (*)(id, id, void *))sorter\n+\t\t         context: (void *)context;\n+\n+/* <p>Method for working with sorted arrays - use a binary chop\n+ * to determine the insertion location for an object.  If equal objects\n+ * already exist in the array, they will be located immediately before\n+ * the insertion position.\n+ * </p> \n+ * <p>The selector identifies a method returning NSOrderedAscending if\n+ * the receiver is 'less than' the argument, and NSOrderedDescending if\n+ * it is greate.\n+ * </p>\n+ */\n+- (NSUInteger) insertionPosition: (id)item\n+\t\t   usingSelector: (SEL)comp;\n+@end\n+\n+#endif\t/* OS_API_VERSION */\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif\t/* INCLUDED_NSArray_GNUstepBase_h */\n+"}, {"sha": "b3f71909c0c3ec4b324cd71f7dac6e955fa220a8", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/NSMutableString+GNUstepBase.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSMutableString%2BGNUstepBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSMutableString%2BGNUstepBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSMutableString%2BGNUstepBase.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,57 @@\n+/** Declaration of extension methods for base additions\n+\n+   Copyright (C) 2003-2010 Free Software Foundation, Inc.\n+\n+   Written by:  Richard Frith-Macdonald <rfm@gnu.org>\n+   and:         Adam Fedor <fedor@gnu.org>\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+*/\n+\n+#ifndef\tINCLUDED_NSMutableString_GNUstepBase_h\n+#define\tINCLUDED_NSMutableString_GNUstepBase_h\n+\n+#import \"GSVersionMacros.h\"\n+#import \"../Foundation/NSString.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+#if\tOS_API_VERSION(GS_API_NONE,GS_API_LATEST)\n+\n+@interface NSMutableString (GNUstepBase)\n+- (void) deleteSuffix: (NSString*)suffix;\n+- (void) deletePrefix: (NSString*)prefix;\n+- (NSString*) immutableProxy;\n+- (void) replaceString: (NSString*)replace\n+            withString: (NSString*)by;\n+- (void) trimLeadSpaces;\n+- (void) trimTailSpaces;\n+- (void) trimSpaces;\n+@end\n+\n+#endif\t/* OS_API_VERSION */\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif\t/* INCLUDED_NSMutableString_GNUstepBase_h */\n+"}, {"sha": "1bed065303bb831bcb3f6426acd04a1fc396f617", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/NSNumber+GNUstepBase.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSNumber%2BGNUstepBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSNumber%2BGNUstepBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSNumber%2BGNUstepBase.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,56 @@\n+/** Declaration of extension methods for base additions\n+\n+   Copyright (C) 2003-2010 Free Software Foundation, Inc.\n+\n+   Written by:  Richard Frith-Macdonald <rfm@gnu.org>\n+   and:         Adam Fedor <fedor@gnu.org>\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+*/\n+\n+#ifndef\tINCLUDED_NSNumber_GNUstepBase_h\n+#define\tINCLUDED_NSNumber_GNUstepBase_h\n+\n+#import \"GSVersionMacros.h\"\n+#import \"../Foundation/NSValue.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+#if\tOS_API_VERSION(GS_API_NONE,GS_API_LATEST)\n+\n+@interface NSNumber(GNUstepBase)\n+/**\n+ * Parses string as a <code>double</code>, <code>int</code>, or <code>unsigned\n+ * int</code> depending on what characters are present.  Uses\n+ * <code>atof</code> and <code>atoi</code> which don't report errors, so be\n+ * careful if the string might contain an invalid value.\n+ */\n++ (NSValue*) valueFromString: (NSString *)string;\n+@end\n+\n+#endif\t/* OS_API_VERSION */\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif\t/* INCLUDED_NSNumber_GNUstepBase_h */\n+"}, {"sha": "d3b2574341b9ee5e8b233ae5306dcc4ca248c3ff", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/NSObject+GNUstepBase.h", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSObject%2BGNUstepBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSObject%2BGNUstepBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSObject%2BGNUstepBase.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,242 @@\n+/** Declaration of extension methods for base additions\n+\n+   Copyright (C) 2003-2010 Free Software Foundation, Inc.\n+\n+   Written by:  Richard Frith-Macdonald <rfm@gnu.org>\n+   and:         Adam Fedor <fedor@gnu.org>\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+*/\n+\n+#ifndef\tINCLUDED_NSObject_GNUstepBase_h\n+#define\tINCLUDED_NSObject_GNUstepBase_h\n+\n+#import \"GSVersionMacros.h\"\n+#import \"../Foundation/NSObject.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+#if\tOS_API_VERSION(GS_API_NONE,GS_API_LATEST)\n+\n+@class  NSHashTable;\n+\n+@interface NSObject (GNUstepBase)\n+\n+/**\n+  WARNING: The -compare: method for NSObject is deprecated\n+           due to subclasses declaring the same selector with \n+\t   conflicting signatures.\n+           Comparision of arbitrary objects is not just meaningless\n+           but also dangerous as most concrete implementations\n+           expect comparable objects as arguments often accessing\n+\t   instance variables directly.\n+\t   This method will be removed in a future release.\n+*/\n+- (NSComparisonResult) compare: (id)anObject;\n+\n+/** For backward compatibility only ... use class_isMetaClass() on the\n+ * class of the receiver instead.\n+ */\n+- (BOOL) isInstance;\n+\n+/** DEPRECATED ... do not use.\n+ * Transmutes the receiver into an immutable version of the same object\n+ * and returns the result.<br />\n+ * If the receiver is not a mutable object or cannot be simply transmuted,\n+ * then this method either returns the receiver unchanged or,\n+ * if the force flag is set to YES, returns an autoreleased copy of the\n+ * receiver.<br />\n+ * Mutable classes should override this default implementation.<br />\n+ * This method is used in methods which are declared to return immutable\n+ * objects (eg. an NSArray), but which create and build mutable ones\n+ * internally.\n+ */\n+- (id) makeImmutableCopyOnFail: (BOOL)force;\n+\n+/** Transmutes the receiver into an immutable version of the same object.\n+ * Returns YES if the receiver has become immutable, NO otherwise.<br />\n+ * The default implementation returns NO.<br />\n+ * Mutable classes which have an immutable counterpart they can efficiently\n+ * change into, should override to transmute themselves and return YES.<br />\n+ * Immutable classes should override this to simply return YES with no\n+ * further action.<br />\n+ * This method is used in methods which are declared to return immutable\n+ * objects (eg. an NSArray), but which create and build mutable ones\n+ * internally.\n+ */\n+- (BOOL) makeImmutable;\n+\n+/**\n+ * Message sent when an implementation wants to explicitly exclude a method\n+ * (but cannot due to compiler constraint), and wants to make sure it is not\n+ * called by mistake.  Default implementation raises an exception at runtime.\n+ */\n+- (id) notImplemented: (SEL)aSel GS_NORETURN_METHOD;\n+\n+/**\n+ * Message sent when an implementation wants to explicitly require a subclass\n+ * to implement a method (but cannot at compile time since there is no\n+ * <code>abstract</code> keyword in Objective-C).  Default implementation\n+ * raises an exception at runtime to alert developer that he/she forgot to\n+ * override a method.\n+ */\n+- (id) subclassResponsibility: (SEL)aSel GS_NORETURN_METHOD;\n+\n+/**\n+ * Message sent when an implementation wants to explicitly exclude a method\n+ * (but cannot due to compiler constraint) and forbid that subclasses\n+ * implement it.  Default implementation raises an exception at runtime.  If a\n+ * subclass <em>does</em> implement this method, however, the superclass's\n+ * implementation will not be called, so this is not a perfect mechanism.\n+ */\n+- (id) shouldNotImplement: (SEL)aSel GS_NORETURN_METHOD;\n+\n+@end\n+\n+/** This is an informal protocol ... classes may implement the method to\n+ * report how much memory is used by the instance and any objects it acts\n+ * as a container for.\n+ */\n+@interface      NSObject(MemoryFootprint)\n+/* This method returns the memory usage of the receiver, excluding any\n+ * objects already present in the exclude table.<br />\n+ * The argument is a hash table configured to hold non-retained pointer\n+ * objects and is used to inform the receiver that its size should not\n+ * be counted again if it's already in the table.<br />\n+ * The NSObject implementation returns zero if the receiver is in the\n+ * table, but otherwise adds itself to the table and returns its memory\n+ * footprint (the sum of all of its instance variables, but not any\n+ * memory pointed to by those variables).<br />\n+ * Subclasses should override this method by calling the superclass\n+ * implementation, and either return the result (if it was zero) or\n+ * return that value plus the sizes of any memory owned by the receiver\n+ * (eg found by calling the same method on objects pointed to by the\n+ * receiver's instance variables).\n+ */\n+- (NSUInteger) sizeInBytesExcluding: (NSHashTable*)exclude;\n+@end\n+\n+/** This is an informal protocol ... classes may implement the method and\n+ * register themselves to have it called on process exit.\n+ */\n+@interface NSObject(GSAtExit)\n+/** This method is called on exit for any class which implements it and which\n+ * has called +registerAtExit to register it to be called.<br />\n+ * The order in which methods for different classes is called is the reverse\n+ * of the order in which the classes were registered, but it's best to assume\n+ * the method can not depend on any other class being in a usable state\n+ * at the point when the method is called (rather like +load).<br />\n+ * Typical use would be to release memory occupied by class data structures\n+ * so that memory usage analysis software will not think the memory has\n+ * been leaked.\n+ */\n++ (void) atExit;\n+@end\n+\n+/** Category for methods handling leaked memory cleanup on exit of process\n+ * (for use when debugging memory leaks).<br />\n+ * You enable this by calling the +setShouldCleanUp: method (done implicitly\n+ * by gnustep-base if the GNUSTEP_SHOULD_CLEAN_UP environment variable is\n+ * set to YES).<br />\n+ * Your class then has two options for performing cleanup when the process\n+ * ends:\n+ * <p>1. Use the +leak: method to register objects which are simply to be \n+ * retained until the process ends, and then either ignored or released\n+ * depending on the cleanup setting in force.  This mechanism is simple\n+ * and should be sufficient for many classes.\n+ * </p>\n+ * <p>2. Implement a +atExit method to be run when the process ends and,\n+ * within your +initialize implementation, call +shouldCleanUp to determine\n+ * whether cleanup should be done, and if it returns YES then call\n+ * +registerAtExit to have your +atExit method called when the process\n+ * terminates.\n+ * </p>\n+ * <p>The order in which 'leaked' objects are released and +atExit methods\n+ * are called on process exist is the reverse of the order in which they\n+ * werse set up suing this API.\n+ * </p>\n+ */\n+@interface NSObject(GSCleanup)\n+\n+\n+/** This method simply retains its argument so that it will never be\n+ * deallocated during normal operation, but keeps track of it so that\n+ * it is released during process exit if cleanup is enabled.<br />\n+ * Returns its argument.\n+ */\n++ (id) NS_RETURNS_RETAINED leak: (id)anObject;\n+\n+/** This method retains the object at *anAddress so that it will never be\n+ * deallocated during normal operation, but keeps track of the address\n+ * so that the object is released and the address is zeroed during process\n+ * exit if cleanup is enabled.<br />\n+ * Returns the object at *anAddress.\n+ */\n++ (id) NS_RETURNS_RETAINED leakAt: (id*)anAddress;\n+\n+/** Sets the receiver to have its +atExit method called at the point when\n+ * the process terminates.<br />\n+ * Returns YES on success and NO on failure (if the class does not implement\n+ * the method or if it is already registered to call it).<br />\n+ * Implemented as a call to +registerAtExit: with the selector for the +atExit\n+ * method as its argument.\n+ */\n++ (BOOL) registerAtExit;\n+\n+/** Sets the receiver to have the specified  method called at the point when\n+ * the process terminates.<br />\n+ * Returns YES on success and NO on failure (if the class does not implement\n+ * the method ir if it is already registered to call it).\n+ */\n++ (BOOL) registerAtExit: (SEL)aSelector;\n+\n+/** Specifies the default cleanup behavior on process exit ... the value\n+ * returned by the NSObject implementation of the +shouldClanUp method.<br />\n+ * Calling this method with a YES argument implicitly calls the +enableAtExit\n+ * method as well.<br />\n+ * The GNUstep Base library calls this method with the value obtained from\n+ * the GNUSTEP_SHOULD_CLEAN_UP environment variable when NSObject is\n+ * initialised.\n+ */\n++ (void) setShouldCleanUp: (BOOL)aFlag;\n+\n+/** Returns a flag indicating whether the receiver should clean up\n+ * its data structures etc at process exit.<br />\n+ * The NSObject implementation returns the value set by the +setShouldCleanUp:\n+ * method but subclasses may override this.\n+ */\n++ (BOOL) shouldCleanUp;\n+\n+@end\n+\n+/* Macro to take an autoreleased object and either make it immutable or\n+ * create an autoreleased copy of the original.\n+ */\n+#define GS_IMMUTABLE(O) ([O makeImmutable] == YES ? O : AUTORELEASE([O copy]))\n+\n+#endif\t/* OS_API_VERSION */\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif\t/* INCLUDED_NSObject_GNUstepBase_h */\n+"}, {"sha": "48633cde5d75852887beb42a83b6fdc1b573927c", "filename": "gcc/testsuite/objc-obj-c++-shared/GNUStep/GNUstepBase/NSString+GNUstepBase.h", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSString%2BGNUstepBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0efbd66ed1040e48ccefcf022ce713e5320232e0/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSString%2BGNUstepBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FGNUStep%2FGNUstepBase%2FNSString%2BGNUstepBase.h?ref=0efbd66ed1040e48ccefcf022ce713e5320232e0", "patch": "@@ -0,0 +1,105 @@\n+/** Declaration of extension methods for base additions\n+\n+   Copyright (C) 2003-2010 Free Software Foundation, Inc.\n+\n+   Written by:  Richard Frith-Macdonald <rfm@gnu.org>\n+   and:         Adam Fedor <fedor@gnu.org>\n+\n+   This file is part of the GNUstep Base Library.\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+   \n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Library General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free\n+   Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02111 USA.\n+\n+*/\n+\n+#ifndef\tINCLUDED_NSString_GNUstepBase_h\n+#define\tINCLUDED_NSString_GNUstepBase_h\n+\n+#import \"GSVersionMacros.h\"\n+#import \"../Foundation/NSString.h\"\n+\n+#if\tdefined(__cplusplus)\n+extern \"C\" {\n+#endif\n+\n+#if\tOS_API_VERSION(GS_API_NONE,GS_API_LATEST)\n+\n+/**\n+ * Provides some additional (non-standard) utility methods.\n+ */\n+@interface NSString (GNUstepBase)\n+\n+/**\n+ * Alternate way to invoke <code>stringWithFormat</code> if you have or wish\n+ * to build an explicit <code>va_list</code> structure.\n+ */\n++ (id) stringWithFormat: (NSString*)format\n+\t      arguments: (va_list)argList NS_FORMAT_FUNCTION(1,0);\n+\n+/**\n+ * Returns a string formed by removing the prefix string from the\n+ * receiver.  Raises an exception if the prefix is not present.\n+ */\n+- (NSString*) stringByDeletingPrefix: (NSString*)prefix;\n+\n+/**\n+ * Returns a string formed by removing the suffix string from the\n+ * receiver.  Raises an exception if the suffix is not present.\n+ */\n+- (NSString*) stringByDeletingSuffix: (NSString*)suffix;\n+\n+/**\n+ * Returns a string formed by removing leading white space from the\n+ * receiver.\n+ */\n+- (NSString*) stringByTrimmingLeadSpaces;\n+\n+/**\n+ * Returns a string formed by removing trailing white space from the\n+ * receiver.\n+ */\n+- (NSString*) stringByTrimmingTailSpaces;\n+\n+/**\n+ * Returns a string formed by removing both leading and trailing\n+ * white space from the receiver.\n+ */\n+- (NSString*) stringByTrimmingSpaces;\n+\n+/**\n+ * Returns a string in which any (and all) occurrences of\n+ * replace in the receiver have been replaced with by.\n+ * Returns the receiver if replace\n+ * does not occur within the receiver.  NB. an empty string is\n+ * not considered to exist within the receiver.\n+ */\n+- (NSString*) stringByReplacingString: (NSString*)replace\n+\t\t\t   withString: (NSString*)by;\n+\n+/**\n+ * An obsolete name for -substringWithRange: ... deprecated.\n+ */\n+- (NSString*) substringFromRange: (NSRange)aRange;\n+\n+@end\n+\n+#endif\t/* OS_API_VERSION */\n+\n+#if\tdefined(__cplusplus)\n+}\n+#endif\n+\n+#endif\t/* INCLUDED_NSString_GNUstepBase_h */\n+"}]}