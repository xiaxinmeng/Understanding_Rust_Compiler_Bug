{"sha": "7193e30a4d1067cd466840228e24202dc3d0db03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5M2UzMGE0ZDEwNjdjZDQ2Njg0MDIyOGUyNDIwMmRjM2QwZGIwMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-02-28T18:17:34Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-02-28T18:17:34Z"}, "message": "re PR fortran/30888 (%VAL construct fails with argument procedures)\n\n2007-02-28  Tobias Burnus  <burnus@net-b.de>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30888\n\tPR fortran/30887\n\t* resolve.c (resolve_actual_arglist): Allow by-value\n\targuments and non-default-kind for %VAL().\n\t* trans-expr.c (conv_arglist_function): Allow\n\tnon-default-kind for %VAL().\n\ntestsuite/\n2007-02-28  Tobias Burnus  <burnus@net-b.de>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30888\n\tPR fortran/30887\n\t* c_by_val_1.f: Test %VAL() with non-default kind.\n\t* c_by_val.c: Ditto.\n\t* c_by_val_4.f: New test.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r122409", "tree": {"sha": "bacd7b57f83fefa913ed4269c27c8400bffef845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bacd7b57f83fefa913ed4269c27c8400bffef845"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7193e30a4d1067cd466840228e24202dc3d0db03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7193e30a4d1067cd466840228e24202dc3d0db03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7193e30a4d1067cd466840228e24202dc3d0db03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7193e30a4d1067cd466840228e24202dc3d0db03/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2615f30311dc9f0427a14c6de5295af2d862fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2615f30311dc9f0427a14c6de5295af2d862fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2615f30311dc9f0427a14c6de5295af2d862fc0"}], "stats": {"total": 142, "additions": 101, "deletions": 41}, "files": [{"sha": "33fa9ad749efffc636d847a4d502f5aff56b295a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -1,3 +1,13 @@\n+2007-02-28  Tobias Burnus  <burnus@net-b.de>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30888\n+\tPR fortran/30887\n+\t* resolve.c (resolve_actual_arglist): Allow by-value\n+\targuments and non-default-kind for %VAL().\n+\t* trans-expr.c (conv_arglist_function): Allow\n+\tnon-default-kind for %VAL().\n+\n 2007-02-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30968"}, {"sha": "987d73b2fb1468d16dcca33f65b2ca597d67909d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -1016,22 +1016,14 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype)\n \t\t since same file external procedures are not resolvable\n \t\t in gfortran, it is a good deal easier to leave them to\n \t\t intrinsic.c.  */\n-\t      if (ptype != PROC_UNKNOWN && ptype != PROC_EXTERNAL)\n+\t      if (ptype != PROC_UNKNOWN\n+\t\t  && ptype != PROC_DUMMY\n+\t\t  && ptype != PROC_EXTERNAL)\n \t\t{\n \t\t  gfc_error (\"By-value argument at %L is not allowed \"\n \t\t\t     \"in this context\", &e->where);\n \t\t  return FAILURE;\n \t\t}\n-\n-\t      if (((e->ts.type == BT_REAL || e->ts.type == BT_COMPLEX)\n-\t\t   && e->ts.kind > gfc_default_real_kind)\n-\t\t  || (e->ts.kind > gfc_default_integer_kind))\n-\t\t{\n-\t\t  gfc_error (\"Kind of by-value argument at %L is larger \"\n-\t\t\t     \"than default kind\", &e->where);\n-\t\t  return FAILURE;\n-\t\t}\n-\n \t    }\n \n \t  /* Statement functions have already been excluded above.  */"}, {"sha": "b6c132bc160cee79d5aebe222f2b8d6136564b2e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -1934,40 +1934,12 @@ is_aliased_array (gfc_expr * e)\n static void\n conv_arglist_function (gfc_se *se, gfc_expr *expr, const char *name)\n {\n-  tree type = NULL_TREE;\n   /* Pass by value for g77 %VAL(arg), pass the address\n      indirectly for %LOC, else by reference.  Thus %REF\n      is a \"do-nothing\" and %LOC is the same as an F95\n      pointer.  */\n   if (strncmp (name, \"%VAL\", 4) == 0)\n-    {\n-      gfc_conv_expr (se, expr);\n-      /* %VAL converts argument to default kind.  */\n-      switch (expr->ts.type)\n-\t{\n-\t  case BT_REAL:\n-\t    type = gfc_get_real_type (gfc_default_real_kind);\n-\t    se->expr = fold_convert (type, se->expr);\n-\t    break;\n-\t  case BT_COMPLEX:\n-\t    type = gfc_get_complex_type (gfc_default_complex_kind);\n-\t    se->expr = fold_convert (type, se->expr);\n-\t    break;\n-\t  case BT_INTEGER:\n-\t    type = gfc_get_int_type (gfc_default_integer_kind);\n-\t    se->expr = fold_convert (type, se->expr);\n-\t    break;\n-\t  case BT_LOGICAL:\n-\t    type = gfc_get_logical_type (gfc_default_logical_kind);\n-\t    se->expr = fold_convert (type, se->expr);\n-\t    break;\n-\t  /* This should have been resolved away.  */\n-\t  case BT_UNKNOWN: case BT_CHARACTER: case BT_DERIVED:\n-\t  case BT_PROCEDURE: case BT_HOLLERITH:\n-\t    gfc_internal_error (\"Bad type in conv_arglist_function\");\n-\t}\n-\t  \n-    }\n+    gfc_conv_expr (se, expr);\n   else if (strncmp (name, \"%LOC\", 4) == 0)\n     {\n       gfc_conv_expr_reference (se, expr);"}, {"sha": "d5d09bb95815f95bbcc29dba5582a3d369e3c821", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -1,3 +1,12 @@\n+2007-02-28  Tobias Burnus  <burnus@net-b.de>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30888\n+\tPR fortran/30887\n+\t* c_by_val_1.f: Test %VAL() with non-default kind.\n+\t* c_by_val.c: Ditto.\n+\t* c_by_val_4.f: New test.\n+\n 2007-02-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30968"}, {"sha": "75bec1d89eab3a75cdd83b9b85cf60d367cb77b7", "filename": "gcc/testsuite/gfortran.dg/c_by_val.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val.c?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -1,9 +1,13 @@\n /*  Passing from fortran to C by value, using %VAL.  */\n \n typedef struct { float r, i; } complex;\n+typedef struct { double r, i; } complex8;\n extern void f_to_f__ (float*, float, float*, float**);\n+extern void f_to_f8__ (double*, double, double*, double**);\n extern void i_to_i__ (int*, int, int*, int**);\n+extern void i_to_i8__ (long*, long, long*, long**);\n extern void c_to_c__ (complex*, complex, complex*, complex**);\n+extern void c_to_c8__ (complex8*, complex8, complex8*, complex8**);\n extern void abort (void);\n \n void\n@@ -16,6 +20,16 @@ f_to_f__(float *retval, float a1, float *a2, float **a3)\n   return;\n }\n \n+void\n+f_to_f8__(double *retval, double a1, double *a2, double **a3)\n+{\n+  if ( a1 != *a2 ) abort();\n+  if ( a1 != **a3 ) abort();\n+  a1 = 0.0;\n+  *retval = *a2 * 2.0;\n+  return;\n+}\n+\n void\n i_to_i__(int *retval, int i1, int *i2, int **i3)\n {\n@@ -26,6 +40,16 @@ i_to_i__(int *retval, int i1, int *i2, int **i3)\n   return;\n }\n \n+void\n+i_to_i8__(long *retval, long i1, long *i2, long **i3)\n+{\n+  if ( i1 != *i2 ) abort();\n+  if ( i1 != **i3 ) abort();\n+  i1 = 0;\n+  *retval = *i2 * 3;\n+  return;\n+}\n+\n void\n c_to_c__(complex *retval, complex c1, complex *c2, complex **c3)\n {\n@@ -39,3 +63,17 @@ c_to_c__(complex *retval, complex c1, complex *c2, complex **c3)\n   retval->i = c2->i * 4.0;\n   return;\n }\n+\n+void\n+c_to_c8__(complex8 *retval, complex8 c1, complex8 *c2, complex8 **c3)\n+{\n+  if ( c1.r != c2->r ) abort();\n+  if ( c1.i != c2->i ) abort();\n+  if ( c1.r != (*c3)->r ) abort();\n+  if ( c1.i != (*c3)->i ) abort();\n+  c1.r = 0.0;\n+  c1.i = 0.0;\n+  retval->r = c2->r * 4.0;\n+  retval->i = c2->i * 4.0;\n+  return;\n+}"}, {"sha": "af1e25a6b88a2255e039101ad05ac7d7866d0a76", "filename": "gcc/testsuite/gfortran.dg/c_by_val_1.f", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_1.f?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -4,28 +4,50 @@\n \n       program c_by_val_1\n       external   f_to_f, i_to_i, c_to_c\n+      external   f_to_f8, i_to_i8, c_to_c8\n       real       a, b, c\n-      integer*4  i, j, k\n+      real(8)    a8, b8, c8\n+      integer(4) i, j, k\n+      integer(8) i8, j8, k8\n       complex    u, v, w, c_to_c\n+      complex(8) u8, v8, w8, c_to_c8\n \n       a = 42.0\n       b = 0.0\n       c = a\n       call  f_to_f (b, %VAL (a), %REF (c), %LOC (c))\n       if ((2.0 * a).ne.b) call abort ()\n \n+      a8 = 43.0\n+      b8 = 1.0\n+      c8 = a8\n+      call  f_to_f8 (b8, %VAL (a8), %REF (c8), %LOC (c8))\n+      if ((2.0 * a8).ne.b8) call abort ()\n+\n       i = 99\n       j = 0\n       k = i\n       call i_to_i (j, %VAL (i), %REF (k), %LOC (k))\n       if ((3 * i).ne.j) call abort ()\n \n+      i8 = 199\n+      j8 = 10\n+      k8 = i8\n+      call i_to_i8 (j8, %VAL (i8), %REF (k8), %LOC (k8))\n+      if ((3 * i8).ne.j8) call abort ()\n+\n       u = (-1.0, 2.0)\n       v = (1.0, -2.0)\n       w = u\n       v = c_to_c (%VAL (u), %REF (w), %LOC (w))\n       if ((4.0 * u).ne.v) call abort ()\n \n+      u8 = (-1.0, 2.0)\n+      v8 = (1.0, -2.0)\n+      w8 = u8\n+      v8 = c_to_c8 (%VAL (u8), %REF (w8), %LOC (w8))\n+      if ((4.0 * u8).ne.v8) call abort ()\n+\n       stop\n       end\n "}, {"sha": "c8f4b0484dd7e1600611ed47a2054c0c52600f69", "filename": "gcc/testsuite/gfortran.dg/c_by_val_4.f", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7193e30a4d1067cd466840228e24202dc3d0db03/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_by_val_4.f?ref=7193e30a4d1067cd466840228e24202dc3d0db03", "patch": "@@ -0,0 +1,17 @@\n+C { dg-do compile }\n+C Tests the fix for PR30888, in which the dummy procedure would\n+C generate an error with the %VAL argument, even though it is\n+C declared EXTERNAL.\n+C\n+C Contributed by Peter W. Draper <p.w.draper@durham.ac.uk>\n+C\n+      SUBROUTINE VALTEST( DOIT )\n+      EXTERNAL DOIT\n+      INTEGER P\n+      INTEGER I\n+      I = 0\n+      P = 0\n+      CALL DOIT( %VAL( P ) ) ! { dg-warning \"Extension: argument list function\" }\n+      CALL DOIT( I )\n+      CALL DOIT( %VAL( P ) ) ! { dg-warning \"Extension: argument list function\" }\n+      END"}]}