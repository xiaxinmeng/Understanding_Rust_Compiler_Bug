{"sha": "e5c422b7d8af6f42f8ab230133210742b7ac5661", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjNDIyYjdkOGFmNmY0MmY4YWIyMzAxMzMyMTA3NDJiN2FjNTY2MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-25T20:33:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-28T12:34:49Z"}, "message": "libstdc++: Implement LWG 415 for std::ws\n\nFor C++11 std::ws changed to be an unformatted input function, meaning\nit constructs a sentry and sets badbit on exceptions.\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/xml/manual/intro.xml: Document LWG 415 change.\n\t* doc/html/manual/bugs.html: Regenerate.\n\t* include/bits/istream.tcc (ws): Create sentry and catch\n\texceptions.\n\t* testsuite/27_io/basic_istream/ws/char/lwg415.cc: New test.\n\t* testsuite/27_io/basic_istream/ws/wchar_t/lwg415.cc: New test.", "tree": {"sha": "f6a15d03dfdf5321b25267df14e1f92b575ec09a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a15d03dfdf5321b25267df14e1f92b575ec09a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5c422b7d8af6f42f8ab230133210742b7ac5661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c422b7d8af6f42f8ab230133210742b7ac5661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c422b7d8af6f42f8ab230133210742b7ac5661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c422b7d8af6f42f8ab230133210742b7ac5661/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b838641bb0d4de5b25128b54012155ab46f452d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b838641bb0d4de5b25128b54012155ab46f452d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b838641bb0d4de5b25128b54012155ab46f452d0"}], "stats": {"total": 211, "additions": 201, "deletions": 10}, "files": [{"sha": "38594a9b75ab68e310e40445caa8d3dc63a45394", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=e5c422b7d8af6f42f8ab230133210742b7ac5661", "patch": "@@ -245,6 +245,10 @@\n     </p></dd><dt><a id=\"manual.bugs.dr409\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n \t<span class=\"emphasis\"><em>Closing an fstream should clear the error state</em></span>\n     </span></dt><dd><p>Have <code class=\"code\">open</code> clear the error flags.\n+    </p></dd><dt><a id=\"manual.bugs.dr415\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#415\" target=\"_top\">415</a>:\n+\t<span class=\"emphasis\"><em>Behavior of std::ws</em></span>\n+    </span></dt><dd><p>Change it to be an unformatted input function\n+      (i.e. construct a sentry and catch exceptions).\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#431\" target=\"_top\">431</a>:\n \t<span class=\"emphasis\"><em>Swapping containers with unequal allocators</em></span>\n     </span></dt><dd><p>Implement Option 3, as per N1599."}, {"sha": "86ed6964b6a84167777bdf16165a341a25d300b4", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=e5c422b7d8af6f42f8ab230133210742b7ac5661", "patch": "@@ -634,6 +634,13 @@ requirements of the license of GCC.\n     <listitem><para>Have <code>open</code> clear the error flags.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr415\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#415\">415</link>:\n+\t<emphasis>Behavior of std::ws</emphasis>\n+    </term>\n+    <listitem><para>Change it to be an unformatted input function\n+      (i.e. construct a sentry and catch exceptions).\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-closed.html#431\">431</link>:\n \t<emphasis>Swapping containers with unequal allocators</emphasis>\n     </term>"}, {"sha": "2a153c2e140a5267b3e67d00cdea3450a2c9d7bb", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=e5c422b7d8af6f42f8ab230133210742b7ac5661", "patch": "@@ -1057,17 +1057,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __istream_type::int_type\t\t__int_type;\n       typedef ctype<_CharT>\t\t\t\t__ctype_type;\n \n-      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n-      const __int_type __eof = _Traits::eof();\n-      __streambuf_type* __sb = __in.rdbuf();\n-      __int_type __c = __sb->sgetc();\n-\n-      while (!_Traits::eq_int_type(__c, __eof)\n-\t     && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n-\t__c = __sb->snextc();\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 451. behavior of std::ws\n+      typename __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  ios_base::iostate __err = ios_base::goodbit;\n+\t  __try\n+\t    {\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\t      const __int_type __eof = _Traits::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n \n-       if (_Traits::eq_int_type(__c, __eof))\n-\t __in.setstate(ios_base::eofbit);\n+\t      while (true)\n+\t\t{\n+\t\t  if (_Traits::eq_int_type(__c, __eof))\n+\t\t    {\n+\t\t      __err = ios_base::eofbit;\n+\t\t      break;\n+\t\t    }\n+\t\t  if (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t\t    break;\n+\t\t  __c = __sb->snextc();\n+\t\t}\n+\t    }\n+\t  __catch (const __cxxabiv1::__forced_unwind&)\n+\t    {\n+\t      __in._M_setstate(ios_base::badbit);\n+\t      __throw_exception_again;\n+\t    }\n+\t  __catch (...)\n+\t    {\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t  if (__err)\n+\t    __in.setstate(__err);\n+\t}\n       return __in;\n     }\n "}, {"sha": "fe6980dff299b8542e128ee1e5719f5b487fc689", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ws/char/lwg415.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fchar%2Flwg415.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fchar%2Flwg415.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fchar%2Flwg415.cc?ref=e5c422b7d8af6f42f8ab230133210742b7ac5661", "patch": "@@ -0,0 +1,77 @@\n+#include <istream>\n+\n+// C++11 27.7.2.4 Standard basic_istream manipulators [istream.manip]\n+//\n+// LWG 415. behavior of std::ws\n+// std::ws is an unformatted input function.\n+\n+#include <istream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+void\n+test01()\n+{\n+  std::istream is(0);\n+  VERIFY( is.rdstate() == std::ios_base::badbit );\n+\n+  is >> std::ws; // sentry should set failbit\n+  VERIFY( is.rdstate() & std::ios_base::failbit );\n+}\n+\n+void\n+test02()\n+{\n+  __gnu_test::sync_streambuf buf;\n+  std::istream is(&buf);\n+\n+  __gnu_test::sync_streambuf buf_tie;\n+  std::ostream os_tie(&buf_tie);\n+\n+  // A sentry should be constructed so is.tie()->flush() should be called.\n+  // The standard allows the flush to be deferred because the put area of\n+  // is_tie is empty, but libstdc++ doesn't defer it.\n+  is.tie(&os_tie);\n+\n+  is >> std::ws;\n+\n+  VERIFY( is.eof() );\n+  VERIFY( !is.fail() );\n+  VERIFY( ! buf.sync_called() );\n+  VERIFY( buf_tie.sync_called() );\n+}\n+\n+void\n+test03()\n+{\n+  __gnu_test::fail_streambuf buf;\n+  std::istream is(&buf);\n+\n+  char c;\n+  is >> c >> std::ws;\n+  VERIFY( is.rdstate() == std::ios_base::badbit );\n+\n+  is.clear();\n+  is.exceptions(std::ios_base::badbit);\n+\n+  try\n+  {\n+    is >> std::ws;\n+    VERIFY( false );\n+  }\n+  catch (const __gnu_test::underflow_error&)\n+  {\n+    VERIFY( is.rdstate() == std::ios_base::badbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "fd040098b408ff504e71d2d2b31a024d0d2dee70", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/ws/wchar_t/lwg415.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fwchar_t%2Flwg415.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c422b7d8af6f42f8ab230133210742b7ac5661/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fwchar_t%2Flwg415.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fws%2Fwchar_t%2Flwg415.cc?ref=e5c422b7d8af6f42f8ab230133210742b7ac5661", "patch": "@@ -0,0 +1,77 @@\n+#include <istream>\n+\n+// C++11 27.7.2.4 Standard basic_istream manipulators [istream.manip]\n+//\n+// LWG 415. behavior of std::ws\n+// std::ws is an unformatted input function.\n+\n+#include <istream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+void\n+test01()\n+{\n+  std::wistream is(0);\n+  VERIFY( is.rdstate() == std::ios_base::badbit );\n+\n+  is >> std::ws; // sentry should set failbit\n+  VERIFY( is.rdstate() & std::ios_base::failbit );\n+}\n+\n+void\n+test02()\n+{\n+  __gnu_test::sync_wstreambuf buf;\n+  std::wistream is(&buf);\n+\n+  __gnu_test::sync_wstreambuf buf_tie;\n+  std::wostream os_tie(&buf_tie);\n+\n+  // A sentry should be constructed so is.tie()->flush() should be called.\n+  // The standard allows the flush to be deferred because the put area of\n+  // is_tie is empty, but libstdc++ doesn't defer it.\n+  is.tie(&os_tie);\n+\n+  is >> std::ws;\n+\n+  VERIFY( is.eof() );\n+  VERIFY( !is.fail() );\n+  VERIFY( ! buf.sync_called() );\n+  VERIFY( buf_tie.sync_called() );\n+}\n+\n+void\n+test03()\n+{\n+  __gnu_test::fail_wstreambuf buf;\n+  std::wistream is(&buf);\n+\n+  wchar_t c;\n+  is >> c >> std::ws;\n+  VERIFY( is.rdstate() == std::ios_base::badbit );\n+\n+  is.clear();\n+  is.exceptions(std::ios_base::badbit);\n+\n+  try\n+  {\n+    is >> std::ws;\n+    VERIFY( false );\n+  }\n+  catch (const __gnu_test::underflow_error&)\n+  {\n+    VERIFY( is.rdstate() == std::ios_base::badbit );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}