{"sha": "1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1OWNiNmQwMDM0ZjM2Y2NlMjZjYThmZDNkMjJkNDBiYWZjZTA0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-01T14:20:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-01T14:20:03Z"}, "message": "Implement P1002R1, Try-catch blocks in constexpr functions PR c++/89513\n\n\tImplement P1002R1, Try-catch blocks in constexpr functions\n\tPR c++/89513\n\t* parser.c (cp_parser_ctor_initializer_opt_and_function_body):\n\tDiagnose constexpr ctor or function with function-try-block with\n\tpedwarn for c++17 and earlier.  Formatting fix.\n\t(cp_parser_try_block): Use pedwarn instead of error and only for\n\tc++17 and earlier when try block appears in constexpr function.\n\t* constexpr.c (build_constexpr_constructor_member_initializers):\n\tHandle TRY_BLOCK here instead of erroring on it.\n\n\t* g++.dg/cpp2a/constexpr-try1.C: New test.\n\t* g++.dg/cpp2a/constexpr-try2.C: New test.\n\t* g++.dg/cpp2a/constexpr-try3.C: New test.\n\t* g++.dg/cpp2a/constexpr-try4.C: New test.\n\t* g++.dg/cpp2a/constexpr-try5.C: New test.\n\t* g++.dg/cpp0x/constexpr-ctor10.C: Don't expect error for C++2a.\n\nFrom-SVN: r269314", "tree": {"sha": "f0b32a4e2a747b9f23167114d3bd16b4a456e95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0b32a4e2a747b9f23167114d3bd16b4a456e95d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5effe9673bd266887b5c4cb968cce61ce137ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5effe9673bd266887b5c4cb968cce61ce137ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5effe9673bd266887b5c4cb968cce61ce137ca1"}], "stats": {"total": 298, "additions": 286, "deletions": 12}, "files": [{"sha": "11b9bb2dd9be086095c3df821a54b5647d6249b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -1,3 +1,15 @@\n+2019-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P1002R1, Try-catch blocks in constexpr functions\n+\tPR c++/89513\n+\t* parser.c (cp_parser_ctor_initializer_opt_and_function_body):\n+\tDiagnose constexpr ctor or function with function-try-block with\n+\tpedwarn for c++17 and earlier.  Formatting fix.\n+\t(cp_parser_try_block): Use pedwarn instead of error and only for\n+\tc++17 and earlier when try block appears in constexpr function.\n+\t* constexpr.c (build_constexpr_constructor_member_initializers):\n+\tHandle TRY_BLOCK here instead of erroring on it.\n+\n 2019-02-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/88183 - ICE with .* fold-expression."}, {"sha": "65888b60d6325cd7b55ff588f5d9dd61e22db8d1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -601,6 +601,12 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n \tgcc_unreachable ();\n     }\n  found:\n+  if (TREE_CODE (body) == TRY_BLOCK)\n+    {\n+      body = TREE_OPERAND (body, 0);\n+      if (TREE_CODE (body) == BIND_EXPR)\n+\tbody = BIND_EXPR_BODY (body);\n+    }\n   if (TREE_CODE (body) == CLEANUP_POINT_EXPR)\n     {\n       body = TREE_OPERAND (body, 0);\n@@ -626,12 +632,6 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n \t    break;\n \t}\n     }\n-  else if (TREE_CODE (body) == TRY_BLOCK)\n-    {\n-      error (\"body of %<constexpr%> constructor cannot be \"\n-\t     \"a function-try-block\");\n-      return error_mark_node;\n-    }\n   else if (EXPR_P (body))\n     ok = build_data_member_initialization (body, &vec);\n   else"}, {"sha": "2edd685fb3dd857ac55d7ac9487c4d1edde9a534", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -22590,11 +22590,25 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n \t\t\t\t\t\t  bool in_function_try_block)\n {\n   tree body, list;\n-  const bool check_body_p =\n-     DECL_CONSTRUCTOR_P (current_function_decl)\n-     && DECL_DECLARED_CONSTEXPR_P (current_function_decl);\n+  const bool check_body_p\n+     = (DECL_CONSTRUCTOR_P (current_function_decl)\n+\t&& DECL_DECLARED_CONSTEXPR_P (current_function_decl));\n   tree last = NULL;\n \n+  if (in_function_try_block\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n+      && cxx_dialect < cxx2a)\n+    {\n+      if (DECL_CONSTRUCTOR_P (current_function_decl))\n+\tpedwarn (input_location, 0,\n+\t\t \"function-try-block body of %<constexpr%> constructor only \"\n+\t\t \"available with -std=c++2a or -std=gnu++2a\");\n+      else\n+\tpedwarn (input_location, 0,\n+\t\t \"function-try-block body of %<constexpr%> function only \"\n+\t\t \"available with -std=c++2a or -std=gnu++2a\");\n+    }\n+\n   /* Begin the function body.  */\n   body = begin_function_body ();\n   /* Parse the optional ctor-initializer.  */\n@@ -25329,8 +25343,11 @@ cp_parser_try_block (cp_parser* parser)\n \n   cp_parser_require_keyword (parser, RID_TRY, RT_TRY);\n   if (parser->in_function_body\n-      && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n-    error (\"%<try%> in %<constexpr%> function\");\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n+      && cxx_dialect < cxx2a)\n+    pedwarn (input_location, 0,\n+\t     \"%<try%> in %<constexpr%> function only \"\n+\t     \"available with -std=c++2a or -std=gnu++2a\");\n \n   try_block = begin_try_block ();\n   cp_parser_compound_statement (parser, NULL, BCS_TRY_BLOCK, false);"}, {"sha": "7734ac679a5383ce2e24d2abb097186c1a5070d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -1,3 +1,14 @@\n+2019-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement P1002R1, Try-catch blocks in constexpr functions\n+\tPR c++/89513\n+\t* g++.dg/cpp2a/constexpr-try1.C: New test.\n+\t* g++.dg/cpp2a/constexpr-try2.C: New test.\n+\t* g++.dg/cpp2a/constexpr-try3.C: New test.\n+\t* g++.dg/cpp2a/constexpr-try4.C: New test.\n+\t* g++.dg/cpp2a/constexpr-try5.C: New test.\n+\t* g++.dg/cpp0x/constexpr-ctor10.C: Don't expect error for C++2a.\n+\n 2019-03-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/89535"}, {"sha": "194cc7cd5812bc16e1e3ea850529746b75474154", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ctor10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor10.C?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n struct foo {\n-  constexpr foo() try { } catch(...) { };  // { dg-error \"constexpr\" }\n+  constexpr foo() try { } catch(...) { };  // { dg-error \"constexpr\" \"\" { target c++17_down } }\n };"}, {"sha": "977eb86dd192bcbb69992786e6f69d810c10266e", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try1.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try1.C?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/89513\n+// { dg-do compile { target c++11 } }\n+\n+constexpr bool foo ()\n+try {\t\t\t// { dg-error \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  return true;\n+} catch (...) {\t\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+  return false;\n+}\t\t\t// { dg-error \"body of 'constexpr' function\" \"\" { target c++11_only } }\n+\n+constexpr bool bar ()\n+try {\t\t\t// { dg-error \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  try {\t\t\t// { dg-error \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    return true;\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } .-1 }\n+  } catch (int) {\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+    return false;\n+  }\n+} catch (...) {\t\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+  return false;\n+}\t\t\t// { dg-error \"not a return-statement\" \"\" { target c++11_only } }\n+\n+constexpr bool baz ()\n+{\n+  try { return true; } catch (...) { return false; }\t// { dg-error \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+}\t\t\t// { dg-error \"not a return-statement\" \"\" { target c++11_only } }\n+\t\t\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } .-2 }\n+\n+struct S {\n+  constexpr S () try : m (1)\t// { dg-error \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  {\n+    try {\t\t// { dg-error \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    } catch (int) {\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+    }\t\t\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } .-2 }\n+  } catch (...) {\t// { dg-error \"'constexpr' constructor does not have empty body\" \"\" { target c++11_only } }\n+  }\n+  int m;\n+};\n+\n+struct T {\n+  constexpr T ()\n+  try {\t\t\t// { dg-error \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  } catch (...) {\t// { dg-error \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+  }\n+};"}, {"sha": "7ca7261a9e0029c9a85e9114bdde35ca92a14916", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try2.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try2.C?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/89513\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-pedantic\" }\n+\n+constexpr bool foo ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  return true;\n+} catch (...) {\t\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+  return false;\n+}\t\t\t// { dg-error \"body of 'constexpr' function\" \"\" { target c++11_only } }\n+\n+constexpr bool bar ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    return true;\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } .-1 }\n+  } catch (int) {\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+    return false;\n+  }\n+} catch (...) {\t\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+  return false;\n+}\t\t\t// { dg-error \"not a return-statement\" \"\" { target c++11_only } }\n+\n+constexpr bool baz ()\n+{\n+  try { return true; } catch (...) { return false; }\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+}\t\t\t// { dg-error \"not a return-statement\" \"\" { target c++11_only } }\n+\t\t\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } .-2 }\n+\n+struct S {\n+  constexpr S () try : m (1)\t// { dg-warning \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  {\n+    try {\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    } catch (int) {\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+    }\t\t\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } .-2 }\n+  } catch (...) {\t// { dg-error \"'constexpr' constructor does not have empty body\" \"\" { target c++11_only } }\n+  }\n+  int m;\n+};\n+\n+struct T {\n+  constexpr T ()\n+  try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  } catch (...) {\t// { dg-warning \"compound-statement in 'constexpr' function\" \"\" { target c++11_only } }\n+  }\n+};"}, {"sha": "ab7e8f6d4649a67033739e4422b6c60a52c128ee", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try3.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try3.C?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/89513\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+constexpr bool foo ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  return true;\n+} catch (...) {\n+  return false;\n+}\t\t\t// { dg-error \"body of 'constexpr' function\" \"\" { target c++11_only } }\n+\n+constexpr bool bar ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    return true;\n+  } catch (int) {\n+    return false;\n+  }\n+} catch (...) {\n+  return false;\n+}\t\t\t// { dg-error \"not a return-statement\" \"\" { target c++11_only } }\n+\n+constexpr bool baz ()\n+{\n+  try { return true; } catch (...) { return false; }\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+}\t\t\t// { dg-error \"not a return-statement\" \"\" { target c++11_only } }\n+\n+struct S {\n+  constexpr S () try : m (1)\t// { dg-warning \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  {\n+    try {\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    } catch (int) {\n+    }\n+  } catch (...) {\t// { dg-error \"'constexpr' constructor does not have empty body\" \"\" { target c++11_only } }\n+  }\n+  int m;\n+};\n+\n+struct T {\n+  constexpr T ()\n+  try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  } catch (...) {\n+  }\n+};"}, {"sha": "8c2baef3725550686be6dfc403e218daa7e1e887", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try4.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try4.C?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -0,0 +1,61 @@\n+// PR c++/89513\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+constexpr int foo ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  int a = 1;\n+  for (int i = 0; i < 10; i++)\n+    a += i;\n+  return a;\n+} catch (...) {\n+  return -1;\n+}\n+\n+constexpr int bar ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  int a = 0;\n+  for (int i = 0; i < 9; i++)\n+    try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+      a += i;\n+    } catch (int) {\n+      return -1;\n+    }\n+  return a;\n+} catch (...) {\n+  return -2;\n+}\n+\n+constexpr bool baz ()\n+{\n+  try { return true; } catch (...) { return false; }\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+}\n+\n+struct S {\n+  constexpr S () try : m (1)\t// { dg-warning \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  {\n+    try {\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+      m += 2;\n+    } catch (int) {\n+      m = -1;\n+    }\n+  } catch (...) {\n+    m = -2;\n+  }\n+  int m;\n+  constexpr int get () const { return m; }\n+};\n+\n+struct T {\n+  constexpr T ()\n+  try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' constructor only available with\" \"\" { target c++17_down } }\n+  } catch (...) {\n+  }\n+};\n+\n+static_assert (foo () == 46, \"\");\n+static_assert (bar () == 36, \"\");\n+static_assert (baz (), \"\");\n+constexpr S s;\n+static_assert (s.get () == 3, \"\");\n+constexpr T t;"}, {"sha": "47cdce88e362a2b8c426823004446406a1c4ff7b", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try5.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1259cb6d0034f36cce26ca8fd3d22d40bafce04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C?ref=1259cb6d0034f36cce26ca8fd3d22d40bafce04a", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/89513\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+constexpr int foo ()\n+try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n+  int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" }\n+  static double b = 1.0;// { dg-error \"'b' declared 'static' in 'constexpr' function\" }\n+  goto l;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+  l:;\n+  return 0;\n+} catch (...) {\n+  long int c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" }\n+  static float d = 2.0f;// { dg-error \"'d' declared 'static' in 'constexpr' function\" }\n+  goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+  l2:;\n+  return -1;\n+}\n+\n+constexpr int bar ()\n+{\n+  int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" }\n+  static long double b = 3.0;// { dg-error \"'b' declared 'static' in 'constexpr' function\" }\n+  goto l;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+  l:;\n+  try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n+    short c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" }\n+    static float d;\t// { dg-error \"'d' declared 'static' in 'constexpr' function\" }\n+\t\t\t// { dg-error \"uninitialized variable 'd' in 'constexpr' function\" \"\" { target *-*-* } .-1 }\n+    goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+    l2:;\n+    return 0;\n+  } catch (int) {\n+    char e;\t\t// { dg-error \"uninitialized variable 'e' in 'constexpr' function\" }\n+    static int f = 5;\t// { dg-error \"'f' declared 'static' in 'constexpr' function\" }\n+    goto l3;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+    l3:;\n+    return 1;\n+  }\n+}"}]}