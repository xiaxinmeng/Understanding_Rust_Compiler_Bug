{"sha": "b736dee60789f2353beeda8aed5b980659712c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczNmRlZTYwNzg5ZjIzNTNiZWVkYThhZWQ1Yjk4MDY1OTcxMmM2NQ==", "commit": {"author": {"name": "Tang Ching-Hui", "email": "nicholas@cs.nthu.edu.tw", "date": "2001-12-02T10:44:54Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-12-02T10:44:54Z"}, "message": "re PR java/3096 (GCJ does not increment)\n\n2001-12-02  Tang Ching-Hui  <nicholas@cs.nthu.edu.tw>\n\t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* expr.c: call save_expr on array for correct evaluation order,\n\tmodified comment, fixed indentation.\n\t* parse.y: (patch_assignment): Correctly extract the array base\n\tfrom the tree generate by build_java_arrayaccess, added comments.\n\t(patch_array_ref): Remove SAVE_EXPR on ARRAY_REF.\n\tFixes PR java/3096, PR java/3803, PR java/3965.\n\nCo-Authored-By: Alexandre Petit-Bianco <apbianco@redhat.com>\n\nFrom-SVN: r47525", "tree": {"sha": "28bf1e5a9de0c8886fdbcffd97a6273ddb87c033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28bf1e5a9de0c8886fdbcffd97a6273ddb87c033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b736dee60789f2353beeda8aed5b980659712c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b736dee60789f2353beeda8aed5b980659712c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b736dee60789f2353beeda8aed5b980659712c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b736dee60789f2353beeda8aed5b980659712c65/comments", "author": null, "committer": null, "parents": [{"sha": "41543739cd3813a7e593fc4f61b558ecf6cffaf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41543739cd3813a7e593fc4f61b558ecf6cffaf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41543739cd3813a7e593fc4f61b558ecf6cffaf3"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "a7d9bc8de0437966bdff56fcb29f9baeaf38a747", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b736dee60789f2353beeda8aed5b980659712c65/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b736dee60789f2353beeda8aed5b980659712c65/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b736dee60789f2353beeda8aed5b980659712c65", "patch": "@@ -1,3 +1,13 @@\n+2001-12-02  Tang Ching-Hui  <nicholas@cs.nthu.edu.tw>\n+\t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* expr.c: call save_expr on array for correct evaluation order, \n+\tmodified comment, fixed indentation.\n+\t* parse.y: (patch_assignment): Correctly extract the array base\n+\tfrom the tree generate by build_java_arrayaccess, added comments.\n+\t(patch_array_ref): Remove SAVE_EXPR on ARRAY_REF.\n+\tFixes PR java/3096, PR java/3803, PR java/3965.\n+\n 2001-12-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* expr.c (expand_byte_code): Remove trailing periods from messages."}, {"sha": "0d3c61d169aff83a83917d7e23a7546414903ad7", "filename": "gcc/java/expr.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b736dee60789f2353beeda8aed5b980659712c65/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b736dee60789f2353beeda8aed5b980659712c65/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=b736dee60789f2353beeda8aed5b980659712c65", "patch": "@@ -798,14 +798,21 @@ build_java_arrayaccess (array, type, index)\n \t  TREE_SIDE_EFFECTS( throw ) = 1;\n \t}\n     }\n-  \n+\n+  /* The SAVE_EXPR is for correct evaluation order.  It would be\n+     cleaner to use force_evaluation_order (see comment there), but\n+     that is difficult when we also have to deal with bounds\n+     checking. The SAVE_EXPR is not necessary to do that when we're\n+     not checking for array bounds. */\n+  if (TREE_SIDE_EFFECTS (index) && throw)\n+    throw = build (COMPOUND_EXPR, int_type_node, save_expr (array), throw);\n+\n   node = build1 (INDIRECT_REF, type, \n \t\t fold (build (PLUS_EXPR, ptr_type_node, \n-\t\t\t      java_check_reference (array, flag_check_references), \n+\t\t\t      java_check_reference (array,\n+\t\t\t\t\t\t    flag_check_references), \n \t\t\t      (throw ? build (COMPOUND_EXPR, int_type_node, \n-\t\t\t\t\t      throw, arith )\n-\t\t\t             : arith))));\n-  \n+\t\t\t\t\t      throw, arith ) : arith))));\n   return node;\n }\n "}, {"sha": "f63faa346b761534b651b7e28b2ecd198e0df00a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b736dee60789f2353beeda8aed5b980659712c65/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b736dee60789f2353beeda8aed5b980659712c65/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=b736dee60789f2353beeda8aed5b980659712c65", "patch": "@@ -12940,10 +12940,13 @@ patch_assignment (node, wfl_op1)\n           /* We can have a SAVE_EXPR here when doing String +=.  */\n           if (TREE_CODE (op) == SAVE_EXPR)\n             op = TREE_OPERAND (op, 0);\n-          if (flag_bounds_check)\n-            base = TREE_OPERAND (TREE_OPERAND (op, 1), 0);\n-          else\n-            base = TREE_OPERAND (op, 0);\n+\t  /* We can have a COMPOUND_EXPR here when doing bounds check. */\n+\t  if (TREE_CODE (op) == COMPOUND_EXPR)\n+\t    op = TREE_OPERAND (op, 1);\n+\t  base = TREE_OPERAND (op, 0);\n+\t  /* Strip the last PLUS_EXPR to obtain the base. */\n+\t  if (TREE_CODE (base) == PLUS_EXPR)\n+\t    base = TREE_OPERAND (base, 0);\n \t}\n \n       /* Build the invocation of _Jv_CheckArrayStore */\n@@ -14592,16 +14595,7 @@ patch_array_ref (node)\n       TREE_OPERAND (node, 1) = index;\n     }\n   else\n-    {\n-      /* The save_expr is for correct evaluation order.  It would be cleaner\n-\t to use force_evaluation_order (see comment there), but that is\n-\t difficult when we also have to deal with bounds checking. */\n-      if (TREE_SIDE_EFFECTS (index))\n-\tarray = save_expr (array);\n-      node = build_java_arrayaccess (array, array_type, index);\n-      if (TREE_SIDE_EFFECTS (index))\n-\tnode = build (COMPOUND_EXPR, array_type, array, node);\n-    }\n+    node = build_java_arrayaccess (array, array_type, index);\n   TREE_TYPE (node) = array_type;\n   return node;\n }"}]}