{"sha": "5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyYTlkYTlhN2Y3YzE5NzYxZGZlOTM4NDlhYzYwZmRiMjVjZjdiZQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2013-10-30T04:03:41Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2013-10-30T04:03:41Z"}, "message": "tree-ssa-ifcombine.c: Include rtl.h and tm_p.h.\n\n2013-10-29  Andrew Pinski <apinski@cavium.com>\n\n        * tree-ssa-ifcombine.c: Include rtl.h and tm_p.h.\n        (ifcombine_ifandif): Handle cases where\n        maybe_fold_and_comparisons fails, combining the branches\n        anyways.\n        (tree_ssa_ifcombine): Inverse the order of\n        the basic block walk, increases the number of combinings.\n        * gimple.h (gsi_start_nondebug_after_labels_bb): New function.\n\n2013-10-29  Andrew Pinski <apinski@cavium.com>\n            Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n        * gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c: New test case.\n        * gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c: New test case.\n        * gcc.dg/tree-ssa/ssa-ifcombine-ccmp-3.c: New test case.\n        * gcc.dg/tree-ssa/ssa-ifcombine-ccmp-4.c: New test case.\n        * gcc.dg/tree-ssa/ssa-ifcombine-ccmp-5.c: New test case.\n        * gcc.dg/tree-ssa/ssa-ifcombine-ccmp-6.c: New test case.\n        * gcc.dg/tree-ssa/phi-opt-9.c: Use a function call to prevent\n        conditional move to be used.\n        * gcc.dg/tree-ssa/ssa-dom-thread-3.c: Remove.\n\n\nCo-Authored-By: Zhenqiang Chen <zhenqiang.chen@linaro.org>\n\nFrom-SVN: r204194", "tree": {"sha": "efa9c1f1d52130af37836627b254016ec220c182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efa9c1f1d52130af37836627b254016ec220c182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8487c949ad5f1fac62020ab22544422490b37d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8487c949ad5f1fac62020ab22544422490b37d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8487c949ad5f1fac62020ab22544422490b37d2"}], "stats": {"total": 233, "additions": 182, "deletions": 51}, "files": [{"sha": "01a0b4996bd2c5a676b1ba5bffed624707e47dc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -1,3 +1,13 @@\n+2013-10-29  Andrew Pinski <apinski@cavium.com>\n+\n+\t* tree-ssa-ifcombine.c: Include rtl.h and tm_p.h.\n+\t(ifcombine_ifandif): Handle cases where\n+\tmaybe_fold_and_comparisons fails, combining the branches\n+\tanyways.\n+\t(tree_ssa_ifcombine): Inverse the order of\n+\tthe basic block walk, increases the number of combinings.\n+\t* gimple.h (gsi_start_nondebug_after_labels_bb): New function.\n+\n 2013-10-29  Mike Stump  <mikestump@comcast.net>\n \n \t* machmode.def (PARTIAL_INT_MODE): Add precision and name."}, {"sha": "b0fb861079f22fb4bfdd992071069c264d7383ec", "filename": "gcc/gimple.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -5533,6 +5533,20 @@ gsi_start_nondebug_bb (basic_block bb)\n   return i;\n }\n \n+/* Return a new iterator pointing to the first non-debug non-label statement in\n+   basic block BB.  */\n+\n+static inline gimple_stmt_iterator\n+gsi_start_nondebug_after_labels_bb (basic_block bb)\n+{\n+  gimple_stmt_iterator i = gsi_after_labels (bb);\n+\n+  if (!gsi_end_p (i) && is_gimple_debug (gsi_stmt (i)))\n+    gsi_next_nondebug (&i);\n+\n+  return i;\n+}\n+\n /* Return a new iterator pointing to the last non-debug statement in\n    basic block BB.  */\n "}, {"sha": "8bad78720aa2c4afb2462b905f3b1c499b26ec44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -1,3 +1,16 @@\n+2013-10-29  Andrew Pinski <apinski@cavium.com>\n+            Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c: New test case.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c: New test case.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-3.c: New test case.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-4.c: New test case.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-5.c: New test case.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-6.c: New test case.\n+\t* gcc.dg/tree-ssa/phi-opt-9.c: Use a function call to prevent\n+\tconditional move to be used.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-3.c: Remove.\n+\n 2013-10-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44350"}, {"sha": "a224788f5d8858df6680eb094d468992ec2d7ba3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-9.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -2,13 +2,14 @@\n /* { dg-options \"-O -fdump-tree-optimized\" } */\n \n int g(int,int);\n+int h(int);\n int f(int t, int c)\n {\n   int d = 0;\n   int e = 0;\n   if (t)\n     {\n-      d = c+1;\n+      d = h(c);\n       e = t;\n     }\n   else d = 0, e = 0;"}, {"sha": "0d53f501d842b64f5f3fd929993eaf39b9272c7b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-3.c", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-3.c?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -1,48 +0,0 @@\n-/* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dom1-details -fno-short-enums\" } */\n-\n-extern void abort (void) __attribute__ ((__noreturn__));\n-union tree_node;\n-typedef union tree_node *tree;\n-enum tree_code\n-{\n-  VAR_DECL,\n-  SSA_NAME,\n-  MAX_TREE_CODES\n-};\n-extern unsigned char tree_contains_struct[MAX_TREE_CODES][64];\n-struct tree_base\n-{\n-  enum tree_code code:16;\n-};\n-enum tree_node_structure_enum\n-{\n-  TS_DECL_COMMON\n-};\n-struct tree_ssa_name\n-{\n-  tree var;\n-};\n-union tree_node\n-{\n-  struct tree_base base;\n-  struct tree_ssa_name ssa_name;\n-};\n-long\n-expand_one_var (tree var, unsigned char toplevel, unsigned char really_expand)\n-{\n-  tree origvar = var;\n-  var = var->ssa_name.var;\n-  if (((enum tree_code) (origvar)->base.code) == SSA_NAME\n-      && !((var->base.code != VAR_DECL)))\n-    abort ();\n-  if ((var->base.code) != VAR_DECL && ((origvar)->base.code) != SSA_NAME)\n-    ;\n-  else if (tree_contains_struct[(var->base.code)][(TS_DECL_COMMON)] != 1)\n-    abort ();\n-}\n-/* We should thread the jump, through an intermediate block.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"dom1\"} } */\n-/* { dg-final { scan-tree-dump-times \"Registering jump thread: \\\\(.*\\\\) incoming edge;  \\\\(.*\\\\) joiner;  \\\\(.*\\\\) nocopy;\" 1 \"dom1\"} } */\n-/* { dg-final { cleanup-tree-dump \"dom1\" } } */\n-"}, {"sha": "56c936daccd159a2b252b9d37009f521cd039f5d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-1.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n+\n+/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+\n+int t (int a, int b)\n+{\n+  if (a > 0)\n+    if (b > 0)\n+      return 0;\n+  return 1;\n+}\n+/* { dg-final { scan-tree-dump \"\\&\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "3273bcc5f3841805fc55775e330dda9e8ecd3374", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-2.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n+\n+/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+\n+int t (int a, int b)\n+{\n+  if (a > 0)\n+    goto L1;\n+  if (b > 0)\n+    goto L1;\n+  return 0;\n+L1:\n+  return 1;\n+}\n+/* { dg-final { scan-tree-dump \"\\|\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "500cb011708ca825ff21a4986127ca5d1a4d0611", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-3.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n+\n+/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+\n+int t (int a, int b)\n+{\n+  if (a > 0)\n+    goto L1;\n+  else\n+    goto L2;\n+L1:\n+  if (b > 0)\n+    goto L2;\n+  return 5;\n+L2:\n+  return 6;\n+}\n+/* { dg-final { scan-tree-dump \"\\|\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8b8710115c0a07874eab0a3d226519d44cac997c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-4.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n+\n+/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+\n+int t (int a, int b)\n+{\n+  if (a > 0)\n+    goto L1;\n+  if (b > 0)\n+    goto L2;\n+L1:\n+  return 0;\n+L2:\n+  return 1;\n+}\n+/* { dg-final { scan-tree-dump \"\\&\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "2aa225bd433d4becb835fadb600233eb35d9cefa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-5.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n+\n+/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+\n+int t (int a, int b, int c)\n+{\n+  if (a > 0 && b > 0 && c > 0)\n+      return 0;\n+  return 1;\n+}\n+/* { dg-final { scan-tree-dump-times \"\\&\" 2 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "659e8164beb443fc361e9de98c919a4f2b5d8d4a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-ccmp-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-ccmp-6.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-*\"} } } */\n+\n+/* { dg-options \"-O2 -g -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbranch-cost=2\" { target avr-*-* } } */\n+\n+int t (int a, int b, int c)\n+{\n+  if (a > 0 || b > 0 || c > 0)\n+      return 0;\n+  return 1;\n+}\n+/* { dg-final { scan-tree-dump-times \"\\\\|\" 2 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "73ebfe8b24e000e3a803f53b04ba7bddcb56a01f", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=5d2a9da9a7f7c19761dfe93849ac60fdb25cf7be", "patch": "@@ -22,6 +22,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+/* rtl is needed only because arm back-end requires it for\n+   BRANCH_COST.  */\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n@@ -32,6 +36,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ssa-iterators.h\"\n #include \"tree-pass.h\"\n \n+#ifndef LOGICAL_OP_NON_SHORT_CIRCUIT\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT \\\n+  (BRANCH_COST (optimize_function_for_speed_p (cfun), \\\n+                false) >= 2)\n+#endif\n+\n /* This pass combines COND_EXPRs to simplify control flow.  It\n    currently recognizes bit tests and comparisons in chains that\n    represent logical and or logical or of two COND_EXPRs.\n@@ -488,7 +498,35 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n \t\t\t\t\t    outer_cond_code,\n \t\t\t\t\t    gimple_cond_lhs (outer_cond),\n \t\t\t\t\t    gimple_cond_rhs (outer_cond))))\n-\treturn false;\n+\t{\n+\t  tree t1, t2;\n+\t  gimple_stmt_iterator gsi;\n+\t  if (!LOGICAL_OP_NON_SHORT_CIRCUIT)\n+\t    return false;\n+\t  /* Only do this optimization if the inner bb contains only the conditional. */\n+\t  if (!gsi_one_before_end_p (gsi_start_nondebug_after_labels_bb (inner_cond_bb)))\n+\t    return false;\n+\t  t1 = fold_build2_loc (gimple_location (inner_cond),\n+\t\t\t\tinner_cond_code,\n+\t\t\t\tboolean_type_node,\n+\t\t\t\tgimple_cond_lhs (inner_cond),\n+\t\t\t\tgimple_cond_rhs (inner_cond));\n+\t  t2 = fold_build2_loc (gimple_location (outer_cond),\n+\t\t\t\touter_cond_code,\n+\t\t\t\tboolean_type_node,\n+\t\t\t\tgimple_cond_lhs (outer_cond),\n+\t\t\t\tgimple_cond_rhs (outer_cond));\n+\t  t = fold_build2_loc (gimple_location (inner_cond), \n+\t\t\t       TRUTH_AND_EXPR, boolean_type_node, t1, t2);\n+\t  if (result_inv)\n+\t    {\n+\t      t = fold_build1 (TRUTH_NOT_EXPR, TREE_TYPE (t), t);\n+\t      result_inv = false;\n+\t    }\n+\t  gsi = gsi_for_stmt (inner_cond);\n+\t  t = force_gimple_operand_gsi_1 (&gsi, t, is_gimple_condexpr, NULL, true,\n+\t\t\t\t\t  GSI_SAME_STMT);\n+        }\n       if (result_inv)\n \tt = fold_build1 (TRUTH_NOT_EXPR, TREE_TYPE (t), t);\n       t = canonicalize_cond_expr_cond (t);\n@@ -631,7 +669,15 @@ tree_ssa_ifcombine (void)\n   bbs = single_pred_before_succ_order ();\n   calculate_dominance_info (CDI_DOMINATORS);\n \n-  for (i = 0; i < n_basic_blocks - NUM_FIXED_BLOCKS; ++i)\n+  /* Search every basic block for COND_EXPR we may be able to optimize.\n+\n+     We walk the blocks in order that guarantees that a block with\n+     a single predecessor is processed after the predecessor.\n+     This ensures that we collapse outter ifs before visiting the\n+     inner ones, and also that we do not try to visit a removed\n+     block.  This is opposite of PHI-OPT, because we cascade the\n+     combining rather than cascading PHIs. */\n+  for (i = n_basic_blocks - NUM_FIXED_BLOCKS - 1; i >= 0; i--)\n     {\n       basic_block bb = bbs[i];\n       gimple stmt = last_stmt (bb);"}]}