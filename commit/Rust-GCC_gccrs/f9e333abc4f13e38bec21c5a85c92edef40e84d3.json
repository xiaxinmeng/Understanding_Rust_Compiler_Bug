{"sha": "f9e333abc4f13e38bec21c5a85c92edef40e84d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllMzMzYWJjNGYxM2UzOGJlYzIxYzVhODVjOTJlZGVmNDBlODRkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:54:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:54:42Z"}, "message": "[multiple changes]\n\n2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Perform various\n\tvolatility-related checks.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_eval.adb: Minor reformatting.\n\n2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb: sem_attr.adb (Access_Attribute): Handle properly\n\tthe case where the attribute reference appears in a nested scope\n\tfrom that of the subprogram prefix.\n\t* sem_attr.adb: Minor reformatting.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Clarify documentation of Initialize_Scalar\n\tinitialization options.\n\nFrom-SVN: r213191", "tree": {"sha": "f96a3b3d9cd95879543c9da0ff4f7404b9eb88f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f96a3b3d9cd95879543c9da0ff4f7404b9eb88f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9e333abc4f13e38bec21c5a85c92edef40e84d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e333abc4f13e38bec21c5a85c92edef40e84d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e333abc4f13e38bec21c5a85c92edef40e84d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e333abc4f13e38bec21c5a85c92edef40e84d3/comments", "author": null, "committer": null, "parents": [{"sha": "87e697202e51033d351f6108eb5fd84f638e4cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e697202e51033d351f6108eb5fd84f638e4cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e697202e51033d351f6108eb5fd84f638e4cc1"}], "stats": {"total": 138, "additions": 114, "deletions": 24}, "files": [{"sha": "e7c08e5e2f60013d63fd7d8d5f9ea697921cbef5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9e333abc4f13e38bec21c5a85c92edef40e84d3", "patch": "@@ -1,3 +1,24 @@\n+2014-07-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Perform various\n+\tvolatility-related checks.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_eval.adb: Minor reformatting.\n+\n+2014-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb: sem_attr.adb (Access_Attribute): Handle properly\n+\tthe case where the attribute reference appears in a nested scope\n+\tfrom that of the subprogram prefix.\n+\t* sem_attr.adb: Minor reformatting.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Clarify documentation of Initialize_Scalar\n+\tinitialization options.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sinfo.ads: Minor comment addition."}, {"sha": "d6acef9163a26eb073ec2e44ca9fd522ee481b4c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f9e333abc4f13e38bec21c5a85c92edef40e84d3", "patch": "@@ -3411,6 +3411,43 @@ package body Freeze is\n             end if;\n          end if;\n \n+         --  The following checks are only relevant when SPARK_Mode is on as\n+         --  they are not standard Ada legality rules.\n+\n+         if SPARK_Mode = On then\n+            if Is_SPARK_Volatile (Rec) then\n+\n+               --  A discriminated type cannot be volatile (SPARK RM C.6(4))\n+\n+               if Has_Discriminants (Rec) then\n+                  Error_Msg_N (\"discriminated type & cannot be volatile\", Rec);\n+\n+               --  A tagged type cannot be volatile (SPARK RM C.6(5))\n+\n+               elsif Is_Tagged_Type (Rec) then\n+                  Error_Msg_N (\"tagged type & cannot be volatile\", Rec);\n+               end if;\n+\n+            --  A non-volatile record type cannot contain volatile components\n+            --  (SPARK RM C.6(2))\n+\n+            else\n+               Comp := First_Component (Rec);\n+               while Present (Comp) loop\n+                  if Comes_From_Source (Comp)\n+                    and then Is_SPARK_Volatile (Etype (Comp))\n+                  then\n+                     Error_Msg_Name_1 := Chars (Rec);\n+                     Error_Msg_N\n+                       (\"component & of non-volatile type % cannot be \"\n+                        & \"volatile\", Comp);\n+                  end if;\n+\n+                  Next_Component (Comp);\n+               end loop;\n+            end if;\n+         end if;\n+\n          --  All done if not a full record definition\n \n          if Ekind (Rec) /= E_Record_Type then"}, {"sha": "3c43f25930fb4bf9f8acddde98dc4c73e2999880", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f9e333abc4f13e38bec21c5a85c92edef40e84d3", "patch": "@@ -8564,13 +8564,40 @@ Require all source files to be present.\n @cindex @option{^-S^/INITIALIZE_SCALARS^} (@command{gnatbind})\n Specifies the value to be used when detecting uninitialized scalar\n objects with pragma Initialize_Scalars.\n-The @var{xxx} ^string specified with the switch^option^ may be either\n+The @var{xxx} ^string specified with the switch^option^ is one of:\n @itemize @bullet\n-@item ``@option{^in^INVALID^}'' requesting an invalid value where possible\n-@item ``@option{^lo^LOW^}'' for the lowest possible value (all 0 bits)\n-@item ``@option{^hi^HIGH^}'' for the highest possible value (all 1 bits)\n-@item ``@option{@var{xx}}'' for a value consisting of repeated bytes with the\n-value @code{16#@var{xx}#} (i.e., @var{xx} is a string of two hexadecimal digits).\n+\n+@item ``@option{^in^INVALID^}'' for an invalid value\n+If zero is invalid for the discrete type in question,\n+then the scalar value is set to all zero bits.\n+For signed discrete types, the largest possible negative value of\n+the underlying scalar is set (i.e. a one bit followed by all zero bits).\n+For unsigned discrete types, the underlying scalar value is set to all\n+one bits. For floating-point types, a NaN value is set\n+(see body of package System.Scalar_Values for exact values).\n+\n+@item ``@option{^lo^LOW^}'' for low value\n+If zero is invalid for the discrete type in question,\n+then the scalar value is set to all zero bits.\n+For signed discrete types, the largest possible negative value of\n+the underlying scalar is set (i.e. a one bit followed by all zero bits).\n+For unsigned discrete types, the underlying scalar value is set to all\n+zero bits. For floating-point, a small value is set\n+(see body of package System.Scalar_Values for exact values).\n+\n+@item ``@option{^hi^HIGH^}'' for high value\n+If zero is invalid for the discrete type in question,\n+then the scalar value is set to all one bits.\n+For signed discrete types, the largest possible positive value of\n+the underlying scalar is set (i.e. a zero bit followed by all one bits).\n+For unsigned discrete types, the underlying scalar value is set to all\n+one bits. For floating-point, a large value is set\n+(see body of package System.Scalar_Values for exact values).\n+\n+@item ``@option{@var{xx}}'' for hex value (two hex digits)\n+The underlying scalar is set to a value consisting of repeated bytes, whose\n+value corresponds to the given value. For example if @option{BF} is given,\n+then a 32-bit scalar value will be set to the bit patterm 16#BFBFBFBF#.\n @end itemize\n \n In addition, you can specify @option{-Sev} to indicate that the value is"}, {"sha": "6d0301cfc3da501d01621626b944cbceada1b2b9", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f9e333abc4f13e38bec21c5a85c92edef40e84d3", "patch": "@@ -10571,7 +10571,8 @@ package body Sem_Attr is\n \n             if Is_Entity_Name (P) then\n                declare\n-                  E : constant Entity_Id := Entity (P);\n+                  E    : constant Entity_Id := Entity (P);\n+                  Decl : Node_Id;\n                   Flag : Entity_Id;\n \n                --  If the access has been taken and the body of the subprogram\n@@ -10585,29 +10586,36 @@ package body Sem_Attr is\n \n                begin\n                   if Is_Subprogram (E)\n+                    and then Expander_Active\n                     and then Comes_From_Source (E)\n                     and then Comes_From_Source (N)\n                     and then In_Open_Scopes (Scope (E))\n                     and then\n                       Ekind_In (Scope (E), E_Block, E_Procedure, E_Function)\n                     and then not Has_Completion (E)\n                     and then No (Elaboration_Entity (E))\n-                    and then Expander_Active\n+                    and then Nkind (Unit_Declaration_Node (E)) =\n+                                                  N_Subprogram_Declaration\n                   then\n                      --  Create elaboration variable for it\n \n                      Flag := Make_Temporary (Loc, 'E');\n-\n-                     Set_Elaboration_Entity (E, Flag);\n-\n-                     Insert_Action (N,\n+                     Decl :=\n                        Make_Object_Declaration (Loc,\n                          Defining_Identifier => Flag,\n                          Object_Definition   =>\n                            New_Occurrence_Of (Standard_Short_Integer, Loc),\n                          Expression          =>\n-                           Make_Integer_Literal (Loc, Uint_0)));\n+                           Make_Integer_Literal (Loc, Uint_0));\n+                     Set_Elaboration_Entity (E, Flag);\n                      Set_Is_Frozen (Flag);\n+\n+                     --  Insert declaration for flag after subprogram\n+                     --  declaration. Note that attribute reference may\n+                     --  appear within a nested scope.\n+\n+                     Insert_After (Unit_Declaration_Node (E), Decl);\n+                     Analyze (Decl);\n                   end if;\n                end;\n             end if;"}, {"sha": "6b5601f386115eb4b38616d2b3c245fa0570af11", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f9e333abc4f13e38bec21c5a85c92edef40e84d3", "patch": "@@ -361,16 +361,13 @@ package body Sem_Ch3 is\n       Related_Node    : Node_Id;\n       Typ             : Entity_Id;\n       Constraints     : Elist_Id) return Entity_Id;\n-   --  Given a discriminated base type Typ, a list of discriminant constraint\n-   --  Constraints for Typ and a component of Typ, with type Compon_Type,\n-   --  create and return the type corresponding to Compon_type where all\n-   --  discriminant references are replaced with the corresponding constraint.\n-   --  If no discriminant references occur in Compon_Typ then return it as is.\n-   --  Constrained_Typ is the final constrained subtype to which the\n-   --  constrained Compon_Type belongs. Related_Node is the node where we will\n-   --  attach all the itypes created.\n-   --\n-   --  Above description is confused, what is Compon_Type???\n+   --  Given a discriminated base type Typ, a list of discriminant constraints,\n+   --  Constraints, for Typ and a component Comp of Typ, create and return the\n+   --  type corresponding to Etype (Comp) where all discriminant references\n+   --  are replaced with the corresponding constraint. If Etype (Comp) contains\n+   --  no discriminant references then it is returned as-is. Constrained_Typ\n+   --  is the final constrained subtype to which the constrained component\n+   --  belongs. Related_Node is the node where we attach all created itypes.\n \n    procedure Constrain_Access\n      (Def_Id      : in out Entity_Id;"}, {"sha": "addd3319261d7b8e096a8e2c69d792944ba1a6b3", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e333abc4f13e38bec21c5a85c92edef40e84d3/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f9e333abc4f13e38bec21c5a85c92edef40e84d3", "patch": "@@ -363,7 +363,7 @@ package body Sem_Eval is\n \n       elsif Is_String_Type (Typ) then\n          if Real_Or_String_Static_Predicate_Matches\n-           (Val => Expr_Value_S (Expr), Typ => Typ)\n+              (Val => Expr_Value_S (Expr), Typ => Typ)\n          then\n             return;\n          end if;"}]}