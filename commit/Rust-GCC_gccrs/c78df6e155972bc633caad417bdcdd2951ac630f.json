{"sha": "c78df6e155972bc633caad417bdcdd2951ac630f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4ZGY2ZTE1NTk3MmJjNjMzY2FhZDQxN2JkY2RkMjk1MWFjNjMwZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-05-14T05:11:38Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-05-14T05:11:38Z"}, "message": "rtl.texi (CALL_INSN_FUNCTION_USAGE): Note that (and when) it may contain MEMs.\n\n* rtl.texi (CALL_INSN_FUNCTION_USAGE): Note that (and when) it may\ncontain MEMs.  Remove useless distinction about clobbering\nregisters.\n\nFrom-SVN: r42060", "tree": {"sha": "4ee7c4ce3bfc3917cd91e24dfa37f55e17c0fc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee7c4ce3bfc3917cd91e24dfa37f55e17c0fc53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c78df6e155972bc633caad417bdcdd2951ac630f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78df6e155972bc633caad417bdcdd2951ac630f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c78df6e155972bc633caad417bdcdd2951ac630f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c78df6e155972bc633caad417bdcdd2951ac630f/comments", "author": null, "committer": null, "parents": [{"sha": "e44713f730a808084ead53f7d833bce8acf7eec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44713f730a808084ead53f7d833bce8acf7eec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e44713f730a808084ead53f7d833bce8acf7eec5"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "b5937f0a0055edb549c18997d00ff58a0f5b52f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78df6e155972bc633caad417bdcdd2951ac630f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78df6e155972bc633caad417bdcdd2951ac630f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c78df6e155972bc633caad417bdcdd2951ac630f", "patch": "@@ -1,3 +1,9 @@\n+2001-05-14  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* rtl.texi (CALL_INSN_FUNCTION_USAGE): Note that (and when) it may\n+\tcontain MEMs.  Remove useless distinction about clobbering\n+\tregisters.\n+\n 2001-05-13  Geoff Keating  <geoffk@redhat.com>\n \n \t* config/rs6000/rs6000.h (EXCEPTION_SECTION): Move to..."}, {"sha": "026172c5206d49469751e9230f755eccebd4e61a", "filename": "gcc/rtl.texi", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c78df6e155972bc633caad417bdcdd2951ac630f/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c78df6e155972bc633caad417bdcdd2951ac630f/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=c78df6e155972bc633caad417bdcdd2951ac630f", "patch": "@@ -2530,12 +2530,25 @@ unpredictably.\n accessed in the same way and in addition contain a field\n @code{CALL_INSN_FUNCTION_USAGE}, which contains a list (chain of\n @code{expr_list} expressions) containing @code{use} and @code{clobber}\n-expressions that denote hard registers used or clobbered by the called\n-function.  A register specified in a @code{clobber} in this list is\n-modified @emph{after} the execution of the @code{call_insn}, while a\n-register in a @code{clobber} in the body of the @code{call_insn} is\n-clobbered before the insn completes execution.  @code{clobber}\n-expressions in this list augment registers specified in\n+expressions that denote hard registers and @code{MEM}s used or\n+clobbered by the called function.\n+\n+A @code{MEM} generally points to a stack slots in which arguments passed\n+to the libcall by reference (@pxref{Register Arguments,\n+FUNCTION_ARG_PASS_BY_REFERENCE}) are stored.  If the argument is\n+caller-copied (@pxref{Register Arguments, FUNCTION_ARG_CALLEE_COPIES}),\n+the stack slot will be mentioned in @code{CLOBBER} and @code{USE}\n+entries; if it's callee-copied, only a @code{USE} will appear, and the\n+@code{MEM} may point to addresses that are not stack slots.  These\n+@code{MEM}s are used only in libcalls, because, unlike regular function\n+calls, @code{CONST_CALL}s (which libcalls generally are, @pxref{Flags,\n+CONST_CALL_P}) aren't assumed to read and write all memory, so flow\n+would consider the stores dead and remove them.  Note that, since a\n+libcall must never return values in memory (@pxref{Aggregate Return,\n+RETURN_IN_MEMORY}), there will never be a @code{CLOBBER} for a memory\n+address holding a return value.\n+\n+@code{CLOBBER}ed registers in this list augment registers specified in\n @code{CALL_USED_REGISTERS} (@pxref{Register Basics}).\n \n @findex code_label"}]}