{"sha": "93c75052c4b6b3754d9f868f849645ab5f7a0de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjNzUwNTJjNGI2YjM3NTRkOWY4NjhmODQ5NjQ1YWI1ZjdhMGRlMg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2019-02-10T09:00:43Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2019-02-10T09:00:43Z"}, "message": "[NDS32] Have nds32_spilt_doubleword to split POST_INC.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c (nds32_spilt_doubleword): Support\n\tto split POST_INC.\n\nFrom-SVN: r268738", "tree": {"sha": "f399f1ae4344871914b90aac4d8278eaf6690215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f399f1ae4344871914b90aac4d8278eaf6690215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93c75052c4b6b3754d9f868f849645ab5f7a0de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c75052c4b6b3754d9f868f849645ab5f7a0de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c75052c4b6b3754d9f868f849645ab5f7a0de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c75052c4b6b3754d9f868f849645ab5f7a0de2/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22cdea54ade93c2c022f1dd07f81d2f624851a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22cdea54ade93c2c022f1dd07f81d2f624851a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22cdea54ade93c2c022f1dd07f81d2f624851a05"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "44183354d8f84ce645d4b91eefe2790846c7940e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c75052c4b6b3754d9f868f849645ab5f7a0de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c75052c4b6b3754d9f868f849645ab5f7a0de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93c75052c4b6b3754d9f868f849645ab5f7a0de2", "patch": "@@ -1,3 +1,8 @@\n+2019-02-10  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_spilt_doubleword): Support\n+\tto split POST_INC.\n+\n 2019-02-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-visibility.c (localize_node): Also do not localize"}, {"sha": "3c510cf6500c69db50a84bf0227ba60c1bfab8ea", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c75052c4b6b3754d9f868f849645ab5f7a0de2/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c75052c4b6b3754d9f868f849645ab5f7a0de2/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=93c75052c4b6b3754d9f868f849645ab5f7a0de2", "patch": "@@ -3163,16 +3163,30 @@ nds32_spilt_doubleword (rtx *operands, bool load_p)\n       /* generate low_part and high_part memory format:\n \t   low_part:  (post_modify ((reg) (plus (reg) (const 4)))\n \t   high_part: (post_modify ((reg) (plus (reg) (const -12))) */\n-      low_part[mem] = gen_frame_mem (SImode,\n-\t\t\t\t     gen_rtx_POST_MODIFY (Pmode, sub_mem,\n-\t\t\t\t\t\t\t  gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t\t  sub_mem,\n-\t\t\t\t\t\t\t  GEN_INT (4))));\n-      high_part[mem] = gen_frame_mem (SImode,\n-\t\t\t\t      gen_rtx_POST_MODIFY (Pmode, sub_mem,\n-\t\t\t\t\t\t\t   gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t\t   sub_mem,\n-\t\t\t\t\t\t\t   GEN_INT (-12))));\n+      low_part[mem] = gen_rtx_MEM (SImode,\n+\t\t\t\t   gen_rtx_POST_MODIFY (Pmode, sub_mem,\n+\t\t\t\t\t\t\tgen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\tsub_mem,\n+\t\t\t\t\t\t\tGEN_INT (4))));\n+      high_part[mem] = gen_rtx_MEM (SImode,\n+\t\t\t\t    gen_rtx_POST_MODIFY (Pmode, sub_mem,\n+\t\t\t\t\t\t\t gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\t sub_mem,\n+\t\t\t\t\t\t\t GEN_INT (-12))));\n+    }\n+  else if (GET_CODE (sub_mem) == POST_INC)\n+    {\n+      /* memory format is (post_inc (reg)),\n+\t so that extract (reg) from the (post_inc (reg)) pattern.  */\n+      sub_mem = XEXP (sub_mem, 0);\n+\n+      /* generate low_part and high_part memory format:\n+\t   low_part:  (post_inc (reg))\n+\t   high_part: (post_inc (reg)) */\n+      low_part[mem] = gen_rtx_MEM (SImode,\n+\t\t\t\t   gen_rtx_POST_INC (Pmode, sub_mem));\n+      high_part[mem] = gen_rtx_MEM (SImode,\n+\t\t\t\t    gen_rtx_POST_INC (Pmode, sub_mem));\n     }\n   else if (GET_CODE (sub_mem) == POST_MODIFY)\n     {\n@@ -3189,14 +3203,14 @@ nds32_spilt_doubleword (rtx *operands, bool load_p)\n       /* Generate low_part and high_part memory format:\n \t   low_part:  (post_modify ((reg) (plus (reg) (const)))\n \t   high_part: ((plus (reg) (const 4))) */\n-      low_part[mem] = gen_frame_mem (SImode,\n-\t\t\t\t     gen_rtx_POST_MODIFY (Pmode, post_mem,\n-\t\t\t\t\t\t\t  gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t\t  post_mem,\n-\t\t\t\t\t\t\t  post_val)));\n-      high_part[mem] = gen_frame_mem (SImode, plus_constant (Pmode,\n-\t\t\t\t\t\t\t     post_mem,\n-\t\t\t\t\t\t\t     4));\n+      low_part[mem] = gen_rtx_MEM (SImode,\n+\t\t\t\t   gen_rtx_POST_MODIFY (Pmode, post_mem,\n+\t\t\t\t\t\t\tgen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\tpost_mem,\n+\t\t\t\t\t\t\tpost_val)));\n+      high_part[mem] = gen_rtx_MEM (SImode, plus_constant (Pmode,\n+\t\t\t\t\t\t\t   post_mem,\n+\t\t\t\t\t\t\t   4));\n     }\n   else\n     {"}]}