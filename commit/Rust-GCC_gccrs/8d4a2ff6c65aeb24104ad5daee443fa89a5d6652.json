{"sha": "8d4a2ff6c65aeb24104ad5daee443fa89a5d6652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0YTJmZjZjNjVhZWIyNDEwNGFkNWRhZWU0NDNmYTg5YTVkNjY1Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-05-24T03:02:44Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-05-24T03:02:44Z"}, "message": "fold-const.c (non_lvalue): Explicitly list the tree codes that need to be wrapped by NON_LVALUE_EXPR...\n\n\n\t* fold-const.c (non_lvalue): Explicitly list the tree codes that\n\tneed to be wrapped by NON_LVALUE_EXPR, instead of those that don't.\n\nFrom-SVN: r82195", "tree": {"sha": "3fa78a3f02322b1c8e4ece468c0e107283801ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa78a3f02322b1c8e4ece468c0e107283801ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652/comments", "author": null, "committer": null, "parents": [{"sha": "15077df5dcd5c9fd996f31cd56ed12a677a2b771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15077df5dcd5c9fd996f31cd56ed12a677a2b771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15077df5dcd5c9fd996f31cd56ed12a677a2b771"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "df40b59937550eeb6937bd10b5c6ebd9c02b4bd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d4a2ff6c65aeb24104ad5daee443fa89a5d6652", "patch": "@@ -1,3 +1,8 @@\n+2002-05-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (non_lvalue): Explicitly list the tree codes that\n+\tneed to be wrapped by NON_LVALUE_EXPR, instead of those that don't.\n+\n 2004-05-23  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/gcc.texi, doc/gccint.texi, doc/include/gcc-common.texi:"}, {"sha": "3fa46cafe87506cc37b8a7da09b076dc57e0ee62", "filename": "gcc/fold-const.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4a2ff6c65aeb24104ad5daee443fa89a5d6652/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8d4a2ff6c65aeb24104ad5daee443fa89a5d6652", "patch": "@@ -1993,14 +1993,48 @@ fold_convert (tree type, tree arg)\n tree\n non_lvalue (tree x)\n {\n-  /* These things are certainly not lvalues.  */\n-  if (TREE_CODE (x) == NON_LVALUE_EXPR\n-      || TREE_CODE (x) == INTEGER_CST\n-      || TREE_CODE (x) == REAL_CST\n-      || TREE_CODE (x) == STRING_CST\n-      || TREE_CODE (x) == ADDR_EXPR)\n+  /* We only need to wrap lvalue tree codes.  */\n+  switch (TREE_CODE (x))\n+  {\n+  case VAR_DECL:\n+  case PARM_DECL:\n+  case RESULT_DECL:\n+  case LABEL_DECL:\n+  case FUNCTION_DECL:\n+  case SSA_NAME:\n+\n+  case COMPONENT_REF:\n+  case INDIRECT_REF:\n+  case ARRAY_REF:\n+  case BIT_FIELD_REF:\n+  case BUFFER_REF:\n+  case ARRAY_RANGE_REF:\n+  case VTABLE_REF:\n+\n+  case REALPART_EXPR:\n+  case IMAGPART_EXPR:\n+  case PREINCREMENT_EXPR:\n+  case PREDECREMENT_EXPR:\n+  case SAVE_EXPR:\n+  case UNSAVE_EXPR:\n+  case TRY_CATCH_EXPR:\n+  case WITH_CLEANUP_EXPR:\n+  case COMPOUND_EXPR:\n+  case MODIFY_EXPR:\n+  case TARGET_EXPR:\n+  case COND_EXPR:\n+  case BIND_EXPR:\n+  case MIN_EXPR:\n+  case MAX_EXPR:\n+  case RTL_EXPR:\n+    break;\n+\n+  default:\n+    /* Assume the worst for front-end tree codes.  */\n+    if ((int)TREE_CODE (x) >= NUM_TREE_CODES)\n+      break;\n     return x;\n-\n+  }\n   return build1 (NON_LVALUE_EXPR, TREE_TYPE (x), x);\n }\n "}]}