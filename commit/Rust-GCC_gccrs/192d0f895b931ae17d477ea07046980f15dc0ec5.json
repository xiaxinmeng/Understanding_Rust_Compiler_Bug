{"sha": "192d0f895b931ae17d477ea07046980f15dc0ec5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyZDBmODk1YjkzMWFlMTdkNDc3ZWEwNzA0Njk4MGYxNWRjMGVjNQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-03-17T00:35:32Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-03-17T00:35:32Z"}, "message": "tm.texi (SDB and DWARF): Add extra parameter to ASM_OUTPUT_DWARF_OFFSET.\n\n\t* doc/tm.texi (SDB and DWARF): Add extra parameter to\n\tASM_OUTPUT_DWARF_OFFSET.  Use @var to indicate metavariables.\n\t* dwarf2asm.h (dw2_asm_output_offset): Add section parameter.\n\t* dwarf2asm.c (dw2_asm_output_offset): Add base section parameter.\n\tPass to ASM_OUTPUT_DWARF_OFFSET.\n\t* dwarf2out.c (debug_frame_section): New.\n\t(output_call_frame_info): Use debug_frame_section.  Pass it to\n\tdw2_asm_output_offset.\n\t(output_die): Pass appropriate section to dw2_asm_output_offset.\n\t(output_compilation_unit_header): Likewise.\n\t(output_pubnames): Likewise.\n\t(output_aranges): Likewise.\n\t(enum dw_val_class): Break dw_val_class_lbl_offset into\n\tdw_val_class_lineptr and dw_val_class_macptr.\n\t(add_AT_lbl_offset): Delete.\n\t(add_AT_lineptr): New.\n\t(add_AT_macptr): New.\n\t(AT_lbl): Expect a lineptr or macptr.\n\t(print_die): Handle dw_val_class_lineptr and dw_val_class_macptr.\n\t(attr_checksum): Likewise.\n\t(same_dw_val_p): Likewise.\n\t(size_of_die): Likewise.\n\t(value_format): Likewise.\n\t(output_die): Likewise.\n\t(dwarf2out_finish): Call add_AT_lineptr and add_AT_macptr instead of\n\tadd_AT_lbl_offset.\n\t* config/i386/cygming.h (ASM_OUTPUT_DWARF_OFFSET): Add extra parameter.\n\t* config/i386/i386.c (x86_file_start): Call darwin_file_start.\n\t* config/darwin-protos.h (darwin_file_start): New.\n\t(darwin_asm_output_dwarf_offset): New.\n\t* config/ia64/ia64.h (ASM_OUTPUT_DWARF_OFFSET): Add extra parameter.\n\t* config/rs6000/rs6000.c (rs6000_darwin_file_start): Call\n\tdarwin_file_start.\n\t* config/darwin.c (darwin_emit_unwind_label): Don't output label\n\tif not EH section; simplify.\n\t(darwin_file_start): New.\n\t(darwin_asm_output_dwarf_offset): New.\n\t* config/darwin.h (DEBUG_FRAME_SECTION): In __DWARF segment,\n\tmark as 'debug'.\n\t(DEBUG_INFO_SECTION): Likewise.\n\t(DEBUG_ABBREV_SECTION): Likewise.\n\t(DEBUG_ARANGES_SECTION): Likewise.\n\t(DEBUG_MACINFO_SECTION): Likewise.\n\t(DEBUG_LINE_SECTION): Likewise.\n\t(DEBUG_LOC_SECTION): Likewise.\n\t(DEBUG_PUBNAMES_SECTION): Likewise.\n\t(DEBUG_STR_SECTION): Likewise.\n\t(DEBUG_RANGES_SECTION): Likewise.\n\t(FRAME_BEGIN_LABEL): Must start with 'L' in debug section.\n\t(ASM_OUTPUT_DWARF_OFFSET): New.\n\nFrom-SVN: r112168", "tree": {"sha": "359478b0e30ffc64cd80686f3c7f1ec0e630674d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359478b0e30ffc64cd80686f3c7f1ec0e630674d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/192d0f895b931ae17d477ea07046980f15dc0ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192d0f895b931ae17d477ea07046980f15dc0ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192d0f895b931ae17d477ea07046980f15dc0ec5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192d0f895b931ae17d477ea07046980f15dc0ec5/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e9103166d10c2e69fd9d7474a8d34171c2fcb70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9103166d10c2e69fd9d7474a8d34171c2fcb70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9103166d10c2e69fd9d7474a8d34171c2fcb70"}], "stats": {"total": 315, "additions": 233, "deletions": 82}, "files": [{"sha": "4bffa9f4995186efd782496f7a7c62c0ccdcdb73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -1,3 +1,56 @@\n+2006-03-16  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* doc/tm.texi (SDB and DWARF): Add extra parameter to\n+\tASM_OUTPUT_DWARF_OFFSET.  Use @var to indicate metavariables.\n+\t* dwarf2asm.h (dw2_asm_output_offset): Add section parameter.\n+\t* dwarf2asm.c (dw2_asm_output_offset): Add base section parameter.\n+\tPass to ASM_OUTPUT_DWARF_OFFSET.\n+\t* dwarf2out.c (debug_frame_section): New.\n+\t(output_call_frame_info): Use debug_frame_section.  Pass it to\n+\tdw2_asm_output_offset.\n+\t(output_die): Pass appropriate section to dw2_asm_output_offset.\n+\t(output_compilation_unit_header): Likewise.\n+\t(output_pubnames): Likewise.\n+\t(output_aranges): Likewise.\n+\t(enum dw_val_class): Break dw_val_class_lbl_offset into\n+\tdw_val_class_lineptr and dw_val_class_macptr.\n+\t(add_AT_lbl_offset): Delete.\n+\t(add_AT_lineptr): New.\n+\t(add_AT_macptr): New.\n+\t(AT_lbl): Expect a lineptr or macptr.\n+\t(print_die): Handle dw_val_class_lineptr and dw_val_class_macptr.\n+\t(attr_checksum): Likewise.\n+\t(same_dw_val_p): Likewise.\n+\t(size_of_die): Likewise.\n+\t(value_format): Likewise.\n+\t(output_die): Likewise.\n+\t(dwarf2out_finish): Call add_AT_lineptr and add_AT_macptr instead of\n+\tadd_AT_lbl_offset.\n+\t* config/i386/cygming.h (ASM_OUTPUT_DWARF_OFFSET): Add extra parameter.\n+\t* config/i386/i386.c (x86_file_start): Call darwin_file_start.\n+\t* config/darwin-protos.h (darwin_file_start): New.\n+\t(darwin_asm_output_dwarf_offset): New.\n+\t* config/ia64/ia64.h (ASM_OUTPUT_DWARF_OFFSET): Add extra parameter.\n+\t* config/rs6000/rs6000.c (rs6000_darwin_file_start): Call\n+\tdarwin_file_start.\n+\t* config/darwin.c (darwin_emit_unwind_label): Don't output label\n+\tif not EH section; simplify.\n+\t(darwin_file_start): New.\n+\t(darwin_asm_output_dwarf_offset): New.\n+\t* config/darwin.h (DEBUG_FRAME_SECTION): In __DWARF segment,\n+\tmark as 'debug'.\n+\t(DEBUG_INFO_SECTION): Likewise.\n+\t(DEBUG_ABBREV_SECTION): Likewise.\n+\t(DEBUG_ARANGES_SECTION): Likewise.\n+\t(DEBUG_MACINFO_SECTION): Likewise.\n+\t(DEBUG_LINE_SECTION): Likewise.\n+\t(DEBUG_LOC_SECTION): Likewise.\n+\t(DEBUG_PUBNAMES_SECTION): Likewise.\n+\t(DEBUG_STR_SECTION): Likewise.\n+\t(DEBUG_RANGES_SECTION): Likewise.\n+\t(FRAME_BEGIN_LABEL): Must start with 'L' in debug section.\n+\t(ASM_OUTPUT_DWARF_OFFSET): New.\n+\n 2006-03-16  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* config.gcc (tm_defines): Always add to previous value rather"}, {"sha": "abcb172b9265d63b31c1a26b9c44b152b3527949", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -66,6 +66,7 @@ extern void darwin_pragma_ignore (struct cpp_reader *);\n extern void darwin_pragma_options (struct cpp_reader *);\n extern void darwin_pragma_unused (struct cpp_reader *);\n \n+extern void darwin_file_start (void);\n extern void darwin_file_end (void);\n \n extern void darwin_mark_decl_preserved (const char *);\n@@ -78,6 +79,8 @@ extern void darwin_globalize_label (FILE *, const char *);\n extern void darwin_assemble_visibility (tree, int);\n extern void darwin_asm_output_dwarf_delta (FILE *, int, const char *,\n \t\t\t\t\t   const char *);\n+extern void darwin_asm_output_dwarf_offset (FILE *, int, const char *,\n+\t\t\t\t\t    section *);\n extern bool darwin_binds_local_p (tree);\n extern void darwin_cpp_builtins (struct cpp_reader *);\n extern void darwin_asm_output_anchor (rtx symbol);"}, {"sha": "4db4cc682393cb1be729edd2b4e751fe3a539723", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -1328,31 +1328,16 @@ darwin_emit_unwind_label (FILE *file, tree decl, int for_eh, int empty)\n     ? DECL_ASSEMBLER_NAME (decl)\n     : DECL_NAME (decl);\n \n-  const char *prefix = user_label_prefix;\n-\n   const char *base = IDENTIFIER_POINTER (id);\n-  unsigned int base_len = IDENTIFIER_LENGTH (id);\n-\n-  const char *suffix = \".eh\";\n \n-  int need_quotes = name_needs_quotes (base);\n-  int quotes_len = need_quotes ? 2 : 0;\n+  bool need_quotes = name_needs_quotes (base);\n   char *lab;\n \n   if (! for_eh)\n-    suffix = \".eh1\";\n-\n-  lab = XNEWVEC (char, strlen (prefix)\n-\t\t + base_len + strlen (suffix) + quotes_len + 1);\n-  lab[0] = '\\0';\n+    return;\n \n-  if (need_quotes)\n-    strcat(lab, \"\\\"\");\n-  strcat(lab, prefix);\n-  strcat(lab, base);\n-  strcat(lab, suffix);\n-  if (need_quotes)\n-    strcat(lab, \"\\\"\");\n+  lab = concat (need_quotes ? \"\\\"\" : \"\", user_label_prefix, base, \".eh\",\n+\t\tneed_quotes ? \"\\\"\" : \"\", NULL);\n \n   if (TREE_PUBLIC (decl))\n     fprintf (file, \"\\t%s %s\\n\",\n@@ -1457,6 +1442,63 @@ darwin_asm_output_dwarf_delta (FILE *file, int size,\n     fprintf (file, \"\\n\\t%s L$set$%d\", directive, darwin_dwarf_label_counter++);\n }\n \n+/* Output labels for the start of the DWARF sections if necessary.  */\n+void\n+darwin_file_start (void)\n+{\n+  if (write_symbols == DWARF2_DEBUG)\n+    {\n+      static const char * const debugnames[] = \n+\t{\n+\t  DEBUG_FRAME_SECTION,\n+\t  DEBUG_INFO_SECTION,\n+\t  DEBUG_ABBREV_SECTION,\n+\t  DEBUG_ARANGES_SECTION,\n+\t  DEBUG_MACINFO_SECTION,\n+\t  DEBUG_LINE_SECTION,\n+\t  DEBUG_LOC_SECTION,\n+\t  DEBUG_PUBNAMES_SECTION,\n+\t  DEBUG_STR_SECTION,\n+\t  DEBUG_RANGES_SECTION\n+\t};\n+      size_t i;\n+\n+      for (i = 0; i < ARRAY_SIZE (debugnames); i++)\n+\t{\n+\t  int namelen;\n+\n+\t  switch_to_section (get_section (debugnames[i], SECTION_DEBUG, NULL));\n+\t  \n+\t  gcc_assert (strncmp (debugnames[i], \"__DWARF,\", 8) == 0);\n+\t  gcc_assert (strchr (debugnames[i] + 8, ','));\n+\t  \n+\t  namelen = strchr (debugnames[i] + 8, ',') - (debugnames[i] + 8);\n+\t  fprintf (asm_out_file, \"Lsection%.*s:\\n\", namelen, debugnames[i] + 8);\n+\t}\n+    }\n+}\n+\n+/* Output an offset in a DWARF section on Darwin.  On Darwin, DWARF section\n+   offsets are not represented using relocs in .o files; either the\n+   section never leaves the .o file, or the linker or other tool is\n+   responsible for parsing the DWARF and updating the offsets.  */\n+\n+void\n+darwin_asm_output_dwarf_offset (FILE *file, int size, const char * lab,\n+\t\t\t\tsection *base)\n+{\n+  char sname[64];\n+  int namelen;\n+  \n+  gcc_assert (base->common.flags & SECTION_NAMED);\n+  gcc_assert (strncmp (base->named.name, \"__DWARF,\", 8) == 0);\n+  gcc_assert (strchr (base->named.name + 8, ','));\n+\n+  namelen = strchr (base->named.name + 8, ',') - (base->named.name + 8);\n+  sprintf (sname, \"*Lsection%.*s\", namelen, base->named.name + 8);\n+  darwin_asm_output_dwarf_delta (file, size, lab, sname);\n+}\n+\n void\n darwin_file_end (void)\n {"}, {"sha": "8b836f886551d6f8834bec117e164e5ae10743d4", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -360,16 +360,16 @@ Boston, MA 02110-1301, USA.  */\n #define DWARF2_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-#define DEBUG_FRAME_SECTION   \"__DWARFA,__debug_frame,coalesced,no_toc+strip_static_syms\"\n-#define DEBUG_INFO_SECTION    \"__DWARFA,__debug_info\"\n-#define DEBUG_ABBREV_SECTION  \"__DWARFA,__debug_abbrev\"\n-#define DEBUG_ARANGES_SECTION \"__DWARFA,__debug_aranges\"\n-#define DEBUG_MACINFO_SECTION \"__DWARFA,__debug_macinfo\"\n-#define DEBUG_LINE_SECTION    \"__DWARFA,__debug_line\"\n-#define DEBUG_LOC_SECTION     \"__DWARFA,__debug_loc\"\n-#define DEBUG_PUBNAMES_SECTION        \"__DWARFA,__debug_pubnames\"\n-#define DEBUG_STR_SECTION     \"__DWARFA,__debug_str\"\n-#define DEBUG_RANGES_SECTION  \"__DWARFA,__debug_ranges\"\n+#define DEBUG_FRAME_SECTION\t\"__DWARF,__debug_frame,regular,debug\"\n+#define DEBUG_INFO_SECTION\t\"__DWARF,__debug_info,regular,debug\"\n+#define DEBUG_ABBREV_SECTION\t\"__DWARF,__debug_abbrev,regular,debug\"\n+#define DEBUG_ARANGES_SECTION\t\"__DWARF,__debug_aranges,regular,debug\"\n+#define DEBUG_MACINFO_SECTION\t\"__DWARF,__debug_macinfo,regular,debug\"\n+#define DEBUG_LINE_SECTION\t\"__DWARF,__debug_line,regular,debug\"\n+#define DEBUG_LOC_SECTION\t\"__DWARF,__debug_loc,regular,debug\"\n+#define DEBUG_PUBNAMES_SECTION\t\"__DWARF,__debug_pubnames,regular,debug\"\n+#define DEBUG_STR_SECTION\t\"__DWARF,__debug_str,regular,debug\"\n+#define DEBUG_RANGES_SECTION\t\"__DWARF,__debug_ranges,regular,debug\"\n \n /* When generating stabs debugging, use N_BINCL entries.  */\n \n@@ -439,9 +439,11 @@ Boston, MA 02110-1301, USA.  */\n #define TARGET_USES_WEAK_UNWIND_INFO 1\n \n /* We need to use a nonlocal label for the start of an EH frame: the\n-   Darwin linker requires that a coalesced section start with a label. */\n+   Darwin linker requires that a coalesced section start with a label. \n+   Unfortunately, it also requires that 'debug' sections don't contain\n+   labels.  */\n #undef FRAME_BEGIN_LABEL\n-#define FRAME_BEGIN_LABEL \"EH_frame\"\n+#define FRAME_BEGIN_LABEL (for_eh ? \"EH_frame\" : \"Lframe\")\n \n /* Emit a label for the FDE corresponding to DECL.  EMPTY means\n    emit a label for an empty FDE. */\n@@ -798,6 +800,9 @@ enum machopic_addr_class {\n #define ASM_OUTPUT_DWARF_DELTA(FILE,SIZE,LABEL1,LABEL2)  \\\n   darwin_asm_output_dwarf_delta (FILE, SIZE, LABEL1, LABEL2)\n \n+#define ASM_OUTPUT_DWARF_OFFSET(FILE,SIZE,LABEL,BASE)  \\\n+  darwin_asm_output_dwarf_offset (FILE, SIZE, LABEL, BASE)\n+\n #define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(ASM_OUT_FILE, ENCODING, SIZE, ADDR, DONE)\t\\\n       if (ENCODING == ASM_PREFERRED_EH_DATA_FORMAT (2, 1)) {\t\t\t\t\\\n \tdarwin_non_lazy_pcrel (ASM_OUT_FILE, ADDR);\t\t\t\t\t\\"}, {"sha": "1fe8e4e3f82fc628d8e7b5de1f77f4651f005625", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -37,13 +37,13 @@ Boston, MA 02110-1301, USA.  */\n /* Use section relative relocations for debugging offsets.  Unlike\n    other targets that fake this by putting the section VMA at 0, PE\n    won't allow it.  */\n-#define ASM_OUTPUT_DWARF_OFFSET(FILE, SIZE, LABEL)    \\\n-  do {                                                \\\n-    if (SIZE != 4)                                    \\\n-      abort ();                                       \\\n-                                                      \\\n-    fputs (\"\\t.secrel32\\t\", FILE);                    \\\n-    assemble_name (FILE, LABEL);                      \\\n+#define ASM_OUTPUT_DWARF_OFFSET(FILE, SIZE, LABEL, SECTION)\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if (SIZE != 4)\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    fputs (\"\\t.secrel32\\t\", FILE);\t\t\t\t\\\n+    assemble_name (FILE, LABEL);\t\t\t\t\\\n   } while (0)\n #endif\n "}, {"sha": "90e46b80da344ff1fbf263216755ee936356f434", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -17457,6 +17457,9 @@ static void\n x86_file_start (void)\n {\n   default_file_start ();\n+#if TARGET_MACHO\n+  darwin_file_start ();\n+#endif\n   if (X86_FILE_START_VERSION_DIRECTIVE)\n     fputs (\"\\t.version\\t\\\"01.01\\\"\\n\", asm_out_file);\n   if (X86_FILE_START_FLTUSED)"}, {"sha": "a4e0c7eba2cd4b8d71e97b6e6a0ab240b4c34d93", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -1891,12 +1891,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Use section-relative relocations for debugging offsets.  Unlike other\n    targets that fake this by putting the section VMA at 0, IA-64 has\n    proper relocations for them.  */\n-#define ASM_OUTPUT_DWARF_OFFSET(FILE, SIZE, LABEL)\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    fputs (integer_asm_op (SIZE, FALSE), FILE);\t\t\\\n-    fputs (\"@secrel(\", FILE);\t\t\t\t\\\n-    assemble_name (FILE, LABEL);\t\t\t\\\n-    fputc (')', FILE);\t\t\t\t\t\\\n+#define ASM_OUTPUT_DWARF_OFFSET(FILE, SIZE, LABEL, SECTION)\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    fputs (integer_asm_op (SIZE, FALSE), FILE);\t\t\t\\\n+    fputs (\"@secrel(\", FILE);\t\t\t\t\t\\\n+    assemble_name (FILE, LABEL);\t\t\t\t\\\n+    fputc (')', FILE);\t\t\t\t\t\t\\\n   } while (0)\n \n /* Emit a PC-relative relocation.  */"}, {"sha": "aeebf80f6a82db0dc214bcec73bf0007b2a27de8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -18048,6 +18048,7 @@ rs6000_darwin_file_start (void)\n   size_t i;\n \n   rs6000_file_start ();\n+  darwin_file_start ();\n \n   /* Determine the argument to -mcpu=.  Default to G3 if not specified.  */\n   for (i = 0; i < ARRAY_SIZE (rs6000_select); i++)"}, {"sha": "e65a9eacc215230c9ed71198306f1aba66905412", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -8424,18 +8424,18 @@ tables, and hence is desirable if it works.\n \n @defmac ASM_OUTPUT_DWARF_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})\n A C statement to issue assembly directives that create a difference\n-between the two given labels, using an integer of the given size.\n+@var{lab1} minus @var{lab2}, using an integer of the given @var{size}.\n @end defmac\n \n-@defmac ASM_OUTPUT_DWARF_OFFSET (@var{stream}, @var{size}, @var{label})\n+@defmac ASM_OUTPUT_DWARF_OFFSET (@var{stream}, @var{size}, @var{label}, @var{section})\n A C statement to issue assembly directives that create a\n-section-relative reference to the given label, using an integer of the\n-given size.\n+section-relative reference to the given @var{label}, using an integer of the\n+given @var{size}.  The label is known to be defined in the given @var{section}.\n @end defmac\n \n @defmac ASM_OUTPUT_DWARF_PCREL (@var{stream}, @var{size}, @var{label})\n A C statement to issue assembly directives that create a self-relative\n-reference to the given label, using an integer of the given size.\n+reference to the given @var{label}, using an integer of the given @var{size}.\n @end defmac\n \n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_DWARF_DTPREL (FILE *@var{FILE}, int @var{size}, rtx @var{x})"}, {"sha": "70854f5a93e4fd9ecca8768be611875a8e9edc8d", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -119,22 +119,23 @@ dw2_asm_output_delta (int size, const char *lab1, const char *lab2,\n   va_end (ap);\n }\n \n-/* Output a section-relative reference to a label.  In general this\n-   can only be done for debugging symbols.  E.g. on most targets with\n-   the GNU linker, this is accomplished with a direct reference and\n-   the knowledge that the debugging section will be placed at VMA 0.\n-   Some targets have special relocations for this that we must use.  */\n+/* Output a section-relative reference to a LABEL, which was placed in\n+   BASE.  In general this can only be done for debugging symbols.\n+   E.g. on most targets with the GNU linker, this is accomplished with\n+   a direct reference and the knowledge that the debugging section\n+   will be placed at VMA 0.  Some targets have special relocations for\n+   this that we must use.  */\n \n void\n-dw2_asm_output_offset (int size, const char *label,\n+dw2_asm_output_offset (int size, const char *label, section * base,\n \t\t       const char *comment, ...)\n {\n   va_list ap;\n \n   va_start (ap, comment);\n \n #ifdef ASM_OUTPUT_DWARF_OFFSET\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, size, label);\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, size, label, base);\n #else\n   dw2_assemble_integer (size, gen_rtx_SYMBOL_REF (Pmode, label));\n #endif"}, {"sha": "cd8293f736fbcf905ddcea1f2b4497c9850422f7", "filename": "gcc/dwarf2asm.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdwarf2asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdwarf2asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.h?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -1,5 +1,5 @@\n /* Dwarf2 assembler output helper routines.\n-   Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2003, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -29,8 +29,9 @@ extern void dw2_asm_output_delta (int, const char *, const char *,\n \t\t\t\t  const char *, ...)\n      ATTRIBUTE_NULL_PRINTF_4;\n \n-extern void dw2_asm_output_offset (int, const char *, const char *, ...)\n-     ATTRIBUTE_NULL_PRINTF_3;\n+extern void dw2_asm_output_offset (int, const char *, section *, \n+\t\t\t\t   const char *, ...)\n+     ATTRIBUTE_NULL_PRINTF_4;\n \n extern void dw2_asm_output_addr (int, const char *, const char *, ...)\n      ATTRIBUTE_NULL_PRINTF_3;"}, {"sha": "9308cce766070385c11885d6c81276f03c7118ca", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 65, "deletions": 23, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/192d0f895b931ae17d477ea07046980f15dc0ec5/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=192d0f895b931ae17d477ea07046980f15dc0ec5", "patch": "@@ -158,6 +158,7 @@ static GTY(()) section *debug_loc_section;\n static GTY(()) section *debug_pubnames_section;\n static GTY(()) section *debug_str_section;\n static GTY(()) section *debug_ranges_section;\n+static GTY(()) section *debug_frame_section;\n \n /* How to start an assembler comment.  */\n #ifndef ASM_COMMENT_START\n@@ -2212,7 +2213,7 @@ output_call_frame_info (int for_eh)\n   if (for_eh)\n     switch_to_eh_frame_section ();\n   else\n-    switch_to_section (get_section (DEBUG_FRAME_SECTION, SECTION_DEBUG, NULL));\n+    switch_to_section (debug_frame_section);\n \n   ASM_GENERATE_INTERNAL_LABEL (section_start_label, FRAME_BEGIN_LABEL, for_eh);\n   ASM_OUTPUT_LABEL (asm_out_file, section_start_label);\n@@ -2360,7 +2361,7 @@ output_call_frame_info (int for_eh)\n \tdw2_asm_output_delta (4, l1, section_start_label, \"FDE CIE offset\");\n       else\n \tdw2_asm_output_offset (DWARF_OFFSET_SIZE, section_start_label,\n-\t\t\t       \"FDE CIE offset\");\n+\t\t\t       debug_frame_section, \"FDE CIE offset\");\n \n       if (for_eh)\n \t{\n@@ -2655,8 +2656,9 @@ enum dw_val_class\n   dw_val_class_die_ref,\n   dw_val_class_fde_ref,\n   dw_val_class_lbl_id,\n-  dw_val_class_lbl_offset,\n-  dw_val_class_str\n+  dw_val_class_lineptr,\n+  dw_val_class_str,\n+  dw_val_class_macptr\n };\n \n /* Describe a double word constant value.  */\n@@ -3984,7 +3986,8 @@ static inline dw_loc_list_ref AT_loc_list (dw_attr_ref);\n static void add_AT_addr (dw_die_ref, enum dwarf_attribute, rtx);\n static inline rtx AT_addr (dw_attr_ref);\n static void add_AT_lbl_id (dw_die_ref, enum dwarf_attribute, const char *);\n-static void add_AT_lbl_offset (dw_die_ref, enum dwarf_attribute, const char *);\n+static void add_AT_lineptr (dw_die_ref, enum dwarf_attribute, const char *);\n+static void add_AT_macptr (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_offset (dw_die_ref, enum dwarf_attribute,\n \t\t\t   unsigned HOST_WIDE_INT);\n static void add_AT_range_list (dw_die_ref, enum dwarf_attribute,\n@@ -5159,16 +5162,34 @@ add_AT_lbl_id (dw_die_ref die, enum dwarf_attribute attr_kind, const char *lbl_i\n   add_dwarf_attr (die, attr);\n }\n \n-/* Add a section offset attribute value to a DIE.  */\n+/* Add a section offset attribute value to a DIE, an offset into the\n+   debug_line section.  */\n \n static inline void\n-add_AT_lbl_offset (dw_die_ref die, enum dwarf_attribute attr_kind, const char *label)\n+add_AT_lineptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t\tconst char *label)\n {\n   dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n \n   attr->dw_attr_next = NULL;\n   attr->dw_attr = attr_kind;\n-  attr->dw_attr_val.val_class = dw_val_class_lbl_offset;\n+  attr->dw_attr_val.val_class = dw_val_class_lineptr;\n+  attr->dw_attr_val.v.val_lbl_id = xstrdup (label);\n+  add_dwarf_attr (die, attr);\n+}\n+\n+/* Add a section offset attribute value to a DIE, an offset into the\n+   debug_macinfo section.  */\n+\n+static inline void\n+add_AT_macptr (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t       const char *label)\n+{\n+  dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n+\n+  attr->dw_attr_next = NULL;\n+  attr->dw_attr = attr_kind;\n+  attr->dw_attr_val.val_class = dw_val_class_macptr;\n   attr->dw_attr_val.v.val_lbl_id = xstrdup (label);\n   add_dwarf_attr (die, attr);\n }\n@@ -5207,7 +5228,8 @@ static inline const char *\n AT_lbl (dw_attr_ref a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_lbl_id\n-\t\t    || AT_class (a) == dw_val_class_lbl_offset));\n+\t\t    || AT_class (a) == dw_val_class_lineptr\n+\t\t    || AT_class (a) == dw_val_class_macptr));\n   return a->dw_attr_val.v.val_lbl_id;\n }\n \n@@ -5723,7 +5745,8 @@ print_die (dw_die_ref die, FILE *outfile)\n \t    fprintf (outfile, \"die -> <null>\");\n \t  break;\n \tcase dw_val_class_lbl_id:\n-\tcase dw_val_class_lbl_offset:\n+\tcase dw_val_class_lineptr:\n+\tcase dw_val_class_macptr:\n \t  fprintf (outfile, \"label: %s\", AT_lbl (a));\n \t  break;\n \tcase dw_val_class_str:\n@@ -5937,7 +5960,8 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n \n     case dw_val_class_fde_ref:\n     case dw_val_class_lbl_id:\n-    case dw_val_class_lbl_offset:\n+    case dw_val_class_lineptr:\n+    case dw_val_class_macptr:\n       break;\n \n     default:\n@@ -6038,7 +6062,8 @@ same_dw_val_p (dw_val_node *v1, dw_val_node *v2, int *mark)\n \n     case dw_val_class_fde_ref:\n     case dw_val_class_lbl_id:\n-    case dw_val_class_lbl_offset:\n+    case dw_val_class_lineptr:\n+    case dw_val_class_macptr:\n       return 1;\n \n     default:\n@@ -6612,7 +6637,8 @@ size_of_die (dw_die_ref die)\n \tcase dw_val_class_lbl_id:\n \t  size += DWARF2_ADDR_SIZE;\n \t  break;\n-\tcase dw_val_class_lbl_offset:\n+\tcase dw_val_class_lineptr:\n+\tcase dw_val_class_macptr:\n \t  size += DWARF_OFFSET_SIZE;\n \t  break;\n \tcase dw_val_class_str:\n@@ -6804,7 +6830,8 @@ value_format (dw_attr_ref a)\n       return DW_FORM_data;\n     case dw_val_class_lbl_id:\n       return DW_FORM_addr;\n-    case dw_val_class_lbl_offset:\n+    case dw_val_class_lineptr:\n+    case dw_val_class_macptr:\n       return DW_FORM_data;\n     case dw_val_class_str:\n       return AT_string_form (a);\n@@ -7023,7 +7050,7 @@ output_die (dw_die_ref die)\n \t    sprintf (p, \"+\" HOST_WIDE_INT_PRINT_HEX,\n \t\t     a->dw_attr_val.v.val_offset);\n \t    dw2_asm_output_offset (DWARF_OFFSET_SIZE, ranges_section_label,\n-\t\t\t\t   \"%s\", name);\n+\t\t\t\t   debug_ranges_section, \"%s\", name);\n \t    *p = '\\0';\n \t  }\n \t  break;\n@@ -7105,7 +7132,8 @@ output_die (dw_die_ref die)\n \t    char *sym = AT_loc_list (a)->ll_symbol;\n \n \t    gcc_assert (sym);\n-\t    dw2_asm_output_offset (DWARF_OFFSET_SIZE, sym, \"%s\", name);\n+\t    dw2_asm_output_offset (DWARF_OFFSET_SIZE, sym, debug_loc_section,\n+\t\t\t\t   \"%s\", name);\n \t  }\n \t  break;\n \n@@ -7115,7 +7143,8 @@ output_die (dw_die_ref die)\n \t      char *sym = AT_ref (a)->die_symbol;\n \n \t      gcc_assert (sym);\n-\t      dw2_asm_output_offset (DWARF2_ADDR_SIZE, sym, \"%s\", name);\n+\t      dw2_asm_output_offset (DWARF2_ADDR_SIZE, sym, debug_info_section,\n+\t\t\t\t     \"%s\", name);\n \t    }\n \t  else\n \t    {\n@@ -7131,22 +7160,30 @@ output_die (dw_die_ref die)\n \n \t    ASM_GENERATE_INTERNAL_LABEL (l1, FDE_LABEL,\n \t\t\t\t\t a->dw_attr_val.v.val_fde_index * 2);\n-\t    dw2_asm_output_offset (DWARF_OFFSET_SIZE, l1, \"%s\", name);\n+\t    dw2_asm_output_offset (DWARF_OFFSET_SIZE, l1, debug_frame_section,\n+\t\t\t\t   \"%s\", name);\n \t  }\n \t  break;\n \n \tcase dw_val_class_lbl_id:\n \t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, AT_lbl (a), \"%s\", name);\n \t  break;\n \n-\tcase dw_val_class_lbl_offset:\n-\t  dw2_asm_output_offset (DWARF_OFFSET_SIZE, AT_lbl (a), \"%s\", name);\n+\tcase dw_val_class_lineptr:\n+\t  dw2_asm_output_offset (DWARF_OFFSET_SIZE, AT_lbl (a),\n+\t\t\t\t debug_line_section, \"%s\", name);\n+\t  break;\n+\n+\tcase dw_val_class_macptr:\n+\t  dw2_asm_output_offset (DWARF_OFFSET_SIZE, AT_lbl (a),\n+\t\t\t\t debug_macinfo_section, \"%s\", name);\n \t  break;\n \n \tcase dw_val_class_str:\n \t  if (AT_string_form (a) == DW_FORM_strp)\n \t    dw2_asm_output_offset (DWARF_OFFSET_SIZE,\n \t\t\t\t   a->dw_attr_val.v.val_str->label,\n+\t\t\t\t   debug_str_section,\n \t\t\t\t   \"%s: \\\"%s\\\"\", name, AT_string (a));\n \t  else\n \t    dw2_asm_output_nstring (AT_string (a), -1, \"%s\", name);\n@@ -7180,6 +7217,7 @@ output_compilation_unit_header (void)\n \t\t       \"Length of Compilation Unit Info\");\n   dw2_asm_output_data (2, DWARF_VERSION, \"DWARF version number\");\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, abbrev_section_label,\n+\t\t\t debug_abbrev_section,\n \t\t\t \"Offset Into Abbrev. Section\");\n   dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Pointer Size (in bytes)\");\n }\n@@ -7287,6 +7325,7 @@ output_pubnames (void)\n \t\t       \"Length of Public Names Info\");\n   dw2_asm_output_data (2, DWARF_VERSION, \"DWARF Version\");\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_info_section_label,\n+\t\t\t debug_info_section,\n \t\t\t \"Offset of Compilation Unit Info\");\n   dw2_asm_output_data (DWARF_OFFSET_SIZE, next_die_offset,\n \t\t       \"Compilation Unit Length\");\n@@ -7345,6 +7384,7 @@ output_aranges (void)\n \t\t       \"Length of Address Ranges Info\");\n   dw2_asm_output_data (2, DWARF_VERSION, \"DWARF Version\");\n   dw2_asm_output_offset (DWARF_OFFSET_SIZE, debug_info_section_label,\n+\t\t\t debug_info_section,\n \t\t\t \"Offset of Compilation Unit Info\");\n   dw2_asm_output_data (1, DWARF2_ADDR_SIZE, \"Size of Address\");\n   dw2_asm_output_data (1, 0, \"Size of Segment Descriptor\");\n@@ -13732,6 +13772,8 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n \t\t\t\t   DEBUG_STR_SECTION_FLAGS, NULL);\n   debug_ranges_section = get_section (DEBUG_RANGES_SECTION,\n \t\t\t\t      SECTION_DEBUG, NULL);\n+  debug_frame_section = get_section (DEBUG_FRAME_SECTION,\n+\t\t\t\t     SECTION_DEBUG, NULL);\n \n   ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (abbrev_section_label,\n@@ -14142,11 +14184,11 @@ dwarf2out_finish (const char *filename)\n     }\n \n   if (debug_info_level >= DINFO_LEVEL_NORMAL)\n-    add_AT_lbl_offset (comp_unit_die, DW_AT_stmt_list,\n-\t\t       debug_line_section_label);\n+    add_AT_lineptr (comp_unit_die, DW_AT_stmt_list,\n+\t\t    debug_line_section_label);\n \n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n-    add_AT_lbl_offset (comp_unit_die, DW_AT_macro_info, macinfo_section_label);\n+    add_AT_macptr (comp_unit_die, DW_AT_macro_info, macinfo_section_label);\n \n   /* Output all of the compilation units.  We put the main one last so that\n      the offsets are available to output_pubnames.  */"}]}