{"sha": "c1618f825445027dd466e6db27b26dfa9b5899d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2MThmODI1NDQ1MDI3ZGQ0NjZlNmRiMjdiMjZkZmE5YjU4OTlkNw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-31T11:39:07Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-31T11:39:07Z"}, "message": "i386-common.c (OPTION_MASK_ISA_SHA_SET): New.\n\ngcc/\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_SHA_SET): New.\n\t(OPTION_MASK_ISA_SHA_UNSET): Ditto.\n\t(ix86_handle_option): Handle OPT_msha.\n\t* config.gcc (extra_headers): Add shaintrin.h.\n\t* config/i386/cpuid.h (bit_SHA): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect SHA\n\tinstructions.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n\tOPTION_MASK_ISA_SHA.\n\t* config/i386/i386.c (ix86_target_string): Add -msha.\n\t(ix86_option_override_internal): Add PTA_SHA.\n\t(ix86_valid_target_attribute_inner_p): Handle OPT_msha.\n\t(enum ix86_builtins): Add IX86_BUILTIN_SHA1MSG1,\n\tIX86_BUILTIN_SHA1MSG2, IX86_BUILTIN_SHA1NEXTE, IX86_BUILTIN_SHA1RNDS4,\n\tIX86_BUILTIN_SHA256MSG1, IX86_BUILTIN_SHA256MSG2,\n\tIX86_BUILTIN_SHA256RNDS2.\n\t(bdesc_args): Add BUILTINS defined above.\n\t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_sha1msg1,\n\t__builtin_ia32_sha1msg2, __builtin_ia32_sha1nexte,\n\t__builtin_ia32_sha1rnds4, __builtin_ia32_sha256msg1,\n\t__builtin_ia32_sha256msg2, __builtin_ia32_sha256rnds2.\n\t(ix86_expand_args_builtin): Handle V4SI_FTYPE_V4SI_V4SI_V4SI, add\n\twarning for CODE_FOR_sha1rnds4.\n\t* config/i386/i386.h (TARGET_SHA): New.\n\t(TARGET_SHA_P): Ditto.\n\t* config/i386/i386.opt (-msha): Document it.\n\t* config/i386/immintrin.h: Add shaintrin.h.\n\t* config/i386/shaintrin.h: New.\n\t* config/i386/sse.md (unspec): Add UNSPEC_SHA1MSG1, UNSPEC_SHA1MSG2,\n\tUNSPEC_SHA1NEXTE, UNSPEC_SHA1RNDS4, UNSPEC_SHA256MSG1,\n\tUNSPEC_SHA256MSG2, UNSPEC_SHA256RNDS2.\n\t(sha1msg1): New.\n\t(sha1msg2): Ditto.\n\t(sha1nexte): Ditto.\n\t(sha1rnds4): Ditto.\n\t(sha256msg1): Ditto.\n\t(sha256msg2): Ditto.\n\t(sha256rnds2): Ditto.\n\t* doc/invoke.texi: Add -msha.\n\ntestsuite/\n\n\t* gcc.target/i386/avx-1.c: Add define for __builtin_ia32_sha1rnds4.\n\t* gcc.target/i386/i386.exp (check_effective_target_sha): New.\n\t* gcc.target/i386/sha-check.h: New file.\n\t* gcc.target/i386/sha1msg1-1.c: Ditto.\n\t* gcc.target/i386/sha1msg1-2.c: Ditto.\n\t* gcc.target/i386/sha1msg2-1.c: Ditto.\n\t* gcc.target/i386/sha1msg2-2.c: Ditto.\n\t* gcc.target/i386/sha1nexte-1: Ditto.\n\t* gcc.target/i386/sha1nexte-2: Ditto.\n\t* gcc.target/i386/sha1rnds4-1.c: Ditto.\n\t* gcc.target/i386/sha1rnds4-2.c: Ditto.\n\t* gcc.target/i386/sha256msg1-1.c: Ditto.\n\t* gcc.target/i386/sha256msg1-2.c: Ditto.\n\t* gcc.target/i386/sha256msg2-1.c: Ditto.\n\t* gcc.target/i386/sha256msg2-2.c: Ditto.\n\t* gcc.target/i386/sha256rnds2-1.c: Ditto.\n\t* gcc.target/i386/sha256rnds2-2.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Add __builtin_ia32_sha1rnds4.\n\t* gcc.target/i386/sse-14.c: Add _mm_sha1rnds4_epu32.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Add __builtin_ia32_sha1rnds4.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206263", "tree": {"sha": "f9ef1cc75271737803252598e26bf8159b6c758a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9ef1cc75271737803252598e26bf8159b6c758a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1618f825445027dd466e6db27b26dfa9b5899d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1618f825445027dd466e6db27b26dfa9b5899d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1618f825445027dd466e6db27b26dfa9b5899d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1618f825445027dd466e6db27b26dfa9b5899d7/comments", "author": null, "committer": null, "parents": [{"sha": "b289d71242e76c2c0bede4f500a15ef0cedb29dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b289d71242e76c2c0bede4f500a15ef0cedb29dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b289d71242e76c2c0bede4f500a15ef0cedb29dd"}], "stats": {"total": 935, "additions": 918, "deletions": 17}, "files": [{"sha": "7ce800182fbf5ece5ac016c09860f42ee3c1bc71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -1,3 +1,53 @@\n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_SHA_SET): New.\n+\t(OPTION_MASK_ISA_SHA_UNSET): Ditto.\n+\t(ix86_handle_option): Handle OPT_msha.\n+\t* config.gcc (extra_headers): Add shaintrin.h.\n+\t* config/i386/cpuid.h (bit_SHA): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect SHA\n+\tinstructions.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tOPTION_MASK_ISA_SHA.\n+\t* config/i386/i386.c (ix86_target_string): Add -msha.\n+\t(ix86_option_override_internal): Add PTA_SHA.\n+\t(ix86_valid_target_attribute_inner_p): Handle OPT_msha.\n+\t(enum ix86_builtins): Add IX86_BUILTIN_SHA1MSG1,\n+\tIX86_BUILTIN_SHA1MSG2, IX86_BUILTIN_SHA1NEXTE, IX86_BUILTIN_SHA1RNDS4,\n+\tIX86_BUILTIN_SHA256MSG1, IX86_BUILTIN_SHA256MSG2,\n+\tIX86_BUILTIN_SHA256RNDS2.\n+\t(bdesc_args): Add BUILTINS defined above.\n+\t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_sha1msg1,\n+\t__builtin_ia32_sha1msg2, __builtin_ia32_sha1nexte,\n+\t__builtin_ia32_sha1rnds4, __builtin_ia32_sha256msg1,\n+\t__builtin_ia32_sha256msg2, __builtin_ia32_sha256rnds2.\n+\t(ix86_expand_args_builtin): Handle V4SI_FTYPE_V4SI_V4SI_V4SI, add\n+\twarning for CODE_FOR_sha1rnds4.\n+\t* config/i386/i386.h (TARGET_SHA): New.\n+\t(TARGET_SHA_P): Ditto.\n+\t* config/i386/i386.opt (-msha): Document it.\n+\t* config/i386/immintrin.h: Add shaintrin.h.\n+\t* config/i386/shaintrin.h: New.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_SHA1MSG1, UNSPEC_SHA1MSG2,\n+\tUNSPEC_SHA1NEXTE, UNSPEC_SHA1RNDS4, UNSPEC_SHA256MSG1,\n+\tUNSPEC_SHA256MSG2, UNSPEC_SHA256RNDS2.\n+\t(sha1msg1): New.\n+\t(sha1msg2): Ditto.\n+\t(sha1nexte): Ditto.\n+\t(sha1rnds4): Ditto.\n+\t(sha256msg1): Ditto.\n+\t(sha256msg2): Ditto.\n+\t(sha256rnds2): Ditto.\n+\t* doc/invoke.texi: Add -msha.\n+\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "3d87a62f0f74195d60e973a3a9fe14cf8b20eb8e", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -84,9 +84,11 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_LWP_SET \\\n   OPTION_MASK_ISA_LWP\n \n-/* AES and PCLMUL need SSE2 because they use xmm registers */\n+/* AES, SHA and PCLMUL need SSE2 because they use xmm registers.  */\n #define OPTION_MASK_ISA_AES_SET \\\n   (OPTION_MASK_ISA_AES | OPTION_MASK_ISA_SSE2_SET)\n+#define OPTION_MASK_ISA_SHA_SET \\\n+  (OPTION_MASK_ISA_SHA | OPTION_MASK_ISA_SSE2_SET)\n #define OPTION_MASK_ISA_PCLMUL_SET \\\n   (OPTION_MASK_ISA_PCLMUL | OPTION_MASK_ISA_SSE2_SET)\n \n@@ -166,6 +168,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_LWP_UNSET OPTION_MASK_ISA_LWP\n \n #define OPTION_MASK_ISA_AES_UNSET OPTION_MASK_ISA_AES\n+#define OPTION_MASK_ISA_SHA_UNSET OPTION_MASK_ISA_SHA\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n #define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n@@ -611,6 +614,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_msha:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_SHA_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SHA_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_SHA_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_SHA_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mpclmul:\n       if (value)\n \t{"}, {"sha": "db7f68411b7ef4573d5b14953f1c74fe8c86e3de", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -375,7 +375,8 @@ i[34567]86-*-*)\n \t\t       avx2intrin.h avx512fintrin.h fmaintrin.h f16cintrin.h\n \t\t       rtmintrin.h xtestintrin.h rdseedintrin.h prfchwintrin.h\n \t\t       adxintrin.h fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\n-\t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\"\n+\t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n+\t\t       shaintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -391,7 +392,8 @@ x86_64-*-*)\n \t\t       avx2intrin.h avx512fintrin.h fmaintrin.h f16cintrin.h\n \t\t       rtmintrin.h xtestintrin.h rdseedintrin.h prfchwintrin.h\n \t\t       adxintrin.h fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\n-\t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\"\n+\t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n+\t\t       shaintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "de1a463d6b73d34bb0d72d94fd17f44c5e62af04", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -77,6 +77,7 @@\n #define bit_AVX512PF\t(1 << 26)\n #define bit_AVX512ER\t(1 << 27)\n #define bit_AVX512CD\t(1 << 28)\n+#define bit_SHA\t\t(1 << 29)\n \n /* Extended State Enumeration Sub-leaf (%eax == 13, %ecx == 1) */\n #define bit_XSAVEOPT\t(1 << 0)"}, {"sha": "985db959aca90075373aa1c1169c5be309e909fc", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -409,7 +409,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n   unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n   unsigned int has_avx512er = 0, has_avx512pf = 0, has_avx512cd = 0;\n-  unsigned int has_avx512f = 0;\n+  unsigned int has_avx512f = 0, has_sha = 0;\n \n   bool arch;\n \n@@ -485,6 +485,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512er = ebx & bit_AVX512ER;\n       has_avx512pf = ebx & bit_AVX512PF;\n       has_avx512cd = ebx & bit_AVX512CD;\n+      has_sha = ebx & bit_SHA;\n     }\n \n   if (max_level >= 13)\n@@ -850,6 +851,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *sahf = has_lahf_lm ? \" -msahf\" : \" -mno-sahf\";\n       const char *movbe = has_movbe ? \" -mmovbe\" : \" -mno-movbe\";\n       const char *aes = has_aes ? \" -maes\" : \" -mno-aes\";\n+      const char *sha = has_sha ? \" -msha\" : \" -mno-sha\";\n       const char *pclmul = has_pclmul ? \" -mpclmul\" : \" -mno-pclmul\";\n       const char *popcnt = has_popcnt ? \" -mpopcnt\" : \" -mno-popcnt\";\n       const char *abm = has_abm ? \" -mabm\" : \" -mno-abm\";\n@@ -882,7 +884,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512pf = has_avx512pf ? \" -mavx512pf\" : \" -mno-avx512pf\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n-\t\t\tsse4a, cx16, sahf, movbe, aes, pclmul,\n+\t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n \t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,"}, {"sha": "cc6af7ea3f75b4f0494016e65148ddbcf5d9e911", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -327,6 +327,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__SSE4_2__\");\n   if (isa_flag & OPTION_MASK_ISA_AES)\n     def_or_undef (parse_in, \"__AES__\");\n+  if (isa_flag & OPTION_MASK_ISA_SHA)\n+    def_or_undef (parse_in, \"__SHA__\");\n   if (isa_flag & OPTION_MASK_ISA_PCLMUL)\n     def_or_undef (parse_in, \"__PCLMUL__\");\n   if (isa_flag & OPTION_MASK_ISA_AVX)"}, {"sha": "4899fdb38862dbd73636941ef50f53a7724b0f09", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -2534,6 +2534,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mcrc32\",\tOPTION_MASK_ISA_CRC32 },\n     { \"-maes\",\t\tOPTION_MASK_ISA_AES },\n+    { \"-msha\",\t\tOPTION_MASK_ISA_SHA },\n     { \"-mpclmul\",\tOPTION_MASK_ISA_PCLMUL },\n     { \"-mfsgsbase\",\tOPTION_MASK_ISA_FSGSBASE },\n     { \"-mrdrnd\",\tOPTION_MASK_ISA_RDRND },\n@@ -3029,6 +3030,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512ER\t\t(HOST_WIDE_INT_1 << 41)\n #define PTA_AVX512PF\t\t(HOST_WIDE_INT_1 << 42)\n #define PTA_AVX512CD\t\t(HOST_WIDE_INT_1 << 43)\n+#define PTA_SHA\t\t\t(HOST_WIDE_INT_1 << 45)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3526,8 +3528,11 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MOVBE))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MOVBE;\n \tif (processor_alias_table[i].flags & PTA_AES\n-\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AES))\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AES;\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_AES))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_AES;\n+\tif (processor_alias_table[i].flags & PTA_SHA\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_SHA))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_SHA;\n \tif (processor_alias_table[i].flags & PTA_PCLMUL\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PCLMUL))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PCLMUL;\n@@ -4416,6 +4421,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"lzcnt\",\tOPT_mlzcnt),\n     IX86_ATTR_ISA (\"tbm\",\tOPT_mtbm),\n     IX86_ATTR_ISA (\"aes\",\tOPT_maes),\n+    IX86_ATTR_ISA (\"sha\",\tOPT_msha),\n     IX86_ATTR_ISA (\"avx\",\tOPT_mavx),\n     IX86_ATTR_ISA (\"avx2\",\tOPT_mavx2),\n     IX86_ATTR_ISA (\"avx512f\",\tOPT_mavx512f),\n@@ -28288,6 +28294,15 @@ enum ix86_builtins\n   IX86_BUILTIN_RSQRT28PD,\n   IX86_BUILTIN_RSQRT28PS,\n \n+  /* SHA builtins.  */\n+  IX86_BUILTIN_SHA1MSG1,\n+  IX86_BUILTIN_SHA1MSG2,\n+  IX86_BUILTIN_SHA1NEXTE,\n+  IX86_BUILTIN_SHA1RNDS4,\n+  IX86_BUILTIN_SHA256MSG1,\n+  IX86_BUILTIN_SHA256MSG2,\n+  IX86_BUILTIN_SHA256RNDS2,\n+\n   /* TFmode support builtins.  */\n   IX86_BUILTIN_INFQ,\n   IX86_BUILTIN_HUGE_VALQ,\n@@ -29934,6 +29949,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_kunpckhi, \"__builtin_ia32_kunpckhi\", IX86_BUILTIN_KUNPCKBW, UNKNOWN, (int) HI_FTYPE_HI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_kxnorhi, \"__builtin_ia32_kxnorhi\", IX86_BUILTIN_KXNOR16, UNKNOWN, (int) HI_FTYPE_HI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_xorhi3, \"__builtin_ia32_kxorhi\", IX86_BUILTIN_KXOR16, UNKNOWN, (int) HI_FTYPE_HI_HI },\n+\n+  /* SHA */\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha1msg1, 0, IX86_BUILTIN_SHA1MSG1, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha1msg2, 0, IX86_BUILTIN_SHA1MSG2, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha1nexte, 0, IX86_BUILTIN_SHA1NEXTE, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha1rnds4, 0, IX86_BUILTIN_SHA1RNDS4, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha256msg1, 0, IX86_BUILTIN_SHA256MSG1, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha256msg2, 0, IX86_BUILTIN_SHA256MSG2, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sha256rnds2, 0, IX86_BUILTIN_SHA256RNDS2, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI },\n };\n \n /* Builtins with rounding support.  */\n@@ -30762,6 +30786,22 @@ ix86_init_mmx_sse_builtins (void)\n \t       VOID_FTYPE_QI_V8DI_PCINT_INT_INT,\n \t       IX86_BUILTIN_SCATTERPFQPS);\n \n+  /* SHA */\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha1msg1\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI, IX86_BUILTIN_SHA1MSG1);\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha1msg2\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI, IX86_BUILTIN_SHA1MSG2);\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha1nexte\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI, IX86_BUILTIN_SHA1NEXTE);\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha1rnds4\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI_INT, IX86_BUILTIN_SHA1RNDS4);\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha256msg1\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI, IX86_BUILTIN_SHA256MSG1);\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha256msg2\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI, IX86_BUILTIN_SHA256MSG2);\n+  def_builtin_const (OPTION_MASK_ISA_SHA, \"__builtin_ia32_sha256rnds2\",\n+\t\t     V4SI_FTYPE_V4SI_V4SI_V4SI, IX86_BUILTIN_SHA256RNDS2);\n+\n   /* RTM.  */\n   def_builtin (OPTION_MASK_ISA_RTM, \"__builtin_ia32_xabort\",\n \t       VOID_FTYPE_UNSIGNED, IX86_BUILTIN_XABORT);\n@@ -33491,6 +33531,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8SF_FTYPE_V8DF_V8SF_QI:\n     case V8SI_FTYPE_V8DF_V8SI_QI:\n     case V8SI_FTYPE_V8DI_V8SI_QI:\n+    case V4SI_FTYPE_V4SI_V4SI_V4SI:\n       nargs = 3;\n       break;\n     case V32QI_FTYPE_V32QI_V32QI_INT:\n@@ -33710,6 +33751,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t\terror (\"the last argument must be a 4-bit immediate\");\n \t\treturn const0_rtx;\n \n+\t      case CODE_FOR_sha1rnds4:\n \t      case CODE_FOR_sse4_1_blendpd:\n \t      case CODE_FOR_avx_vpermilv2df:\n \t      case CODE_FOR_xop_vpermil2v2df3:"}, {"sha": "efb755194e69d58d0c0f60d3538921e61fe86019", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -102,6 +102,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_CRC32_P(x)\tTARGET_ISA_CRC32_P(x)\n #define TARGET_AES\tTARGET_ISA_AES\n #define TARGET_AES_P(x)\tTARGET_ISA_AES_P(x)\n+#define TARGET_SHA\tTARGET_ISA_SHA\n+#define TARGET_SHA_P(x)\tTARGET_ISA_SHA_P(x)\n #define TARGET_PCLMUL\tTARGET_ISA_PCLMUL\n #define TARGET_PCLMUL_P(x)\tTARGET_ISA_PCLMUL_P(x)\n #define TARGET_CMPXCHG16B\tTARGET_ISA_CX16"}, {"sha": "e86a850e74dd190a7d02492fe9f3077f5ff314fc", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -725,6 +725,10 @@ maes\n Target Report Mask(ISA_AES) Var(ix86_isa_flags) Save\n Support AES built-in functions and code generation\n \n+msha\n+Target Report Mask(ISA_SHA) Var(ix86_isa_flags) Save\n+Support SHA1 and SHA256 built-in functions and code generation\n+\n mpclmul\n Target Report Mask(ISA_PCLMUL) Var(ix86_isa_flags) Save\n Support PCLMUL built-in functions and code generation"}, {"sha": "4fdf0000006209a3ce90bd31b3d764e6b6c42ccc", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -50,6 +50,8 @@\n \n #include <avx512cdintrin.h>\n \n+#include <shaintrin.h>\n+\n #include <lzcntintrin.h>\n \n #include <bmiintrin.h>"}, {"sha": "58c5c5d12060a041f7838344eb71452fdff22ef9", "filename": "gcc/config/i386/shaintrin.h", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fshaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fshaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fshaintrin.h?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,99 @@\n+/* Copyright (C) 2013\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <shaintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _SHAINTRIN_H_INCLUDED\n+#define _SHAINTRIN_H_INCLUDED\n+\n+#ifndef __SHA__\n+#pragma GCC push_options\n+#pragma GCC target(\"sha\")\n+#define __DISABLE_SHA__\n+#endif /* __SHA__ */\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha1msg1_epu32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_sha1msg1 ((__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha1msg2_epu32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_sha1msg2 ((__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha1nexte_epu32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_sha1nexte ((__v4si) __A, (__v4si) __B);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha1rnds4_epu32 (__m128i __A, __m128i __B, const int __I)\n+{\n+  return (__m128i) __builtin_ia32_sha1rnds4 ((__v4si) __A, (__v4si) __B, __I);\n+}\n+#else\n+#define _mm_sha1rnds4_epu32(A, B, I)\t\t\t\t    \\\n+  ((__m128i) __builtin_ia32_sha1rnds4 ((__v4si)(__m128i)A,\t    \\\n+\t\t\t\t       (__v4si)(__m128i)B, (int)I))\n+#endif\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha256msg1_epu32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_sha256msg1 ((__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha256msg2_epu32 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_sha256msg2 ((__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sha256rnds2_epu32 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_sha256rnds2 ((__v4si) __A, (__v4si) __B,\n+\t\t\t\t\t       (__v4si) __C);\n+}\n+\n+#ifdef __DISABLE_SHA__\n+#undef __DISABLE_SHA__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_SHA__ */\n+\n+#endif /* _SHAINTRIN_H_INCLUDED */"}, {"sha": "5005a478784103dab07287218525149e08ba5176", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -119,6 +119,15 @@\n   UNSPEC_EXP2\n   UNSPEC_RCP28\n   UNSPEC_RSQRT28\n+\n+  ;; For SHA support\n+  UNSPEC_SHA1MSG1\n+  UNSPEC_SHA1MSG2\n+  UNSPEC_SHA1NEXTE\n+  UNSPEC_SHA1RNDS4\n+  UNSPEC_SHA256MSG1\n+  UNSPEC_SHA256MSG2\n+  UNSPEC_SHA256RNDS2\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -15210,3 +15219,84 @@\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"sha1msg1\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_SHA1MSG1))]\n+  \"TARGET_SHA\"\n+  \"sha1msg1\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sha1msg2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_SHA1MSG2))]\n+  \"TARGET_SHA\"\n+  \"sha1msg2\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sha1nexte\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_SHA1NEXTE))]\n+  \"TARGET_SHA\"\n+  \"sha1nexte\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sha1rnds4\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t   (match_operand:SI 3 \"const_0_to_3_operand\" \"n\")]\n+\t  UNSPEC_SHA1RNDS4))]\n+  \"TARGET_SHA\"\n+  \"sha1rnds4\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sha256msg1\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_SHA256MSG1))]\n+  \"TARGET_SHA\"\n+  \"sha256msg1\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sha256msg2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")]\n+\t  UNSPEC_SHA256MSG2))]\n+  \"TARGET_SHA\"\n+  \"sha256msg2\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"sha256rnds2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI\n+\t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t   (match_operand:V4SI 3 \"register_operand\" \"Yz\")]\n+\t  UNSPEC_SHA256RNDS2))]\n+  \"TARGET_SHA\"\n+  \"sha256rnds2\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])"}, {"sha": "42c6ea459158cfb3c8a264b378de631541905895", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -666,7 +666,7 @@ Objective-C and Objective-C++ Dialects}.\n -mrecip -mrecip=@var{opt} @gol\n -mvzeroupper -mprefer-avx128 @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n--mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd @gol\n+-mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd -msha @gol\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n -mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mthreads @gol\n@@ -15192,6 +15192,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-avx512er\n @itemx -mavx512cd\n @itemx -mno-avx512cd\n+@itemx -msha\n+@itemx -mno-sha\n @itemx -maes\n @itemx -mno-aes\n @itemx -mpclmul\n@@ -15240,8 +15242,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n-AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2,\n-FXSR, XSAVE, XSAVEOPT, LZCNT, RTM or 3DNow!@:\n+SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n+BMI, BMI2, FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, or 3DNow!@:\n extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "46d5c13e5f01ab27f25155577ba43209b203d099", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -1,3 +1,35 @@\n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Add define for __builtin_ia32_sha1rnds4.\n+\t* gcc.target/i386/i386.exp (check_effective_target_sha): New.\n+\t* gcc.target/i386/sha-check.h: New file.\n+\t* gcc.target/i386/sha1msg1-1.c: Ditto.\n+\t* gcc.target/i386/sha1msg1-2.c: Ditto.\n+\t* gcc.target/i386/sha1msg2-1.c: Ditto.\n+\t* gcc.target/i386/sha1msg2-2.c: Ditto.\n+\t* gcc.target/i386/sha1nexte-1: Ditto.\n+\t* gcc.target/i386/sha1nexte-2: Ditto.\n+\t* gcc.target/i386/sha1rnds4-1.c: Ditto.\n+\t* gcc.target/i386/sha1rnds4-2.c: Ditto.\n+\t* gcc.target/i386/sha256msg1-1.c: Ditto.\n+\t* gcc.target/i386/sha256msg1-2.c: Ditto.\n+\t* gcc.target/i386/sha256msg2-1.c: Ditto.\n+\t* gcc.target/i386/sha256msg2-2.c: Ditto.\n+\t* gcc.target/i386/sha256rnds2-1.c: Ditto.\n+\t* gcc.target/i386/sha256rnds2-2.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Add __builtin_ia32_sha1rnds4.\n+\t* gcc.target/i386/sse-14.c: Add _mm_sha1rnds4_epu32.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Add __builtin_ia32_sha1rnds4.\n+\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "55e5f35c72ee7dcd0ad7a00469698c4cdba79615", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -msha\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "4a4c755ccd7021a385a47de66f3acb1bd8914e2c", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -msha\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "0d38f30ed77a7ff170b52132a949f7e08a0e201f", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -341,6 +341,9 @@\n #define __builtin_ia32_scatterpfdps(A, B, C, D, E) __builtin_ia32_scatterpfdps(A, B, C, 1, 1)\n #define __builtin_ia32_scatterpfqps(A, B, C, D, E) __builtin_ia32_scatterpfqps(A, B, C, 1, 1)\n \n+/* shaintrin.h */\n+#define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "a383940e71524d29b6918bd6511e4911f876d4c7", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -293,6 +293,20 @@ proc check_effective_target_avx512er { } {\n    } \"-Wno-psabi -mavx512er\" ]\n }\n \n+# Return 1 if sha instructions can be compiled.\n+proc check_effective_target_sha { } {\n+    return [check_no_compiler_messages sha object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_sha1msg1_epu32 (__m128i __X, __m128i __Y)\n+\t{\n+            return (__m128i) __builtin_ia32_sha1msg1 ((__v4si)__X,\n+\t\t\t\t\t\t      (__v4si)__Y);\n+\t}\n+    } \"-O2 -msha\" ]\n+}\n+\n # If the linker used understands -M <mapfile>, pass it to clear hardware\n # capabilities set by the Sun assembler.\n # Try mapfile syntax v2 first which is the only way to clear hwcap_2 flags."}, {"sha": "e0a18076e15a07bfbfa2983772c0fe906cbc657c", "filename": "gcc/testsuite/gcc.target/i386/sha-check.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha-check.h?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,37 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+\n+static void sha_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sha_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (__get_cpuid_max (0, NULL) >= 7)\n+    {\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      /* Run SHA test only if host has SHA support.  */\n+      if (ebx & bit_SHA)\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+    }\n+\n+#ifdef DEBUG\n+  printf (\"SKIPPED\\n\");\n+#endif\n+  return 0;\n+}"}, {"sha": "808f3617f8eae0a6adbd820c9aa2495f323201e0", "filename": "gcc/testsuite/gcc.target/i386/sha1msg1-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg1-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha1msg1\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha1msg1_epu32 (x, x);\n+}"}, {"sha": "35a60571f86368ddfbfbae16e2a8026ec72de171", "filename": "gcc/testsuite/gcc.target/i386/sha1msg1-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg1-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <immintrin.h>\n+\n+static void\n+compute_sha1msg1 (int *s1, int *s2, int *r)\n+{\n+  int w0, w1, w2, w3, w4, w5;\n+\n+  w0 = s1[3];\n+  w1 = s1[2];\n+  w2 = s1[1];\n+  w3 = s1[0];\n+  w4 = s2[3];\n+  w5 = s2[2];\n+\n+  r[0] = w5 ^ w3;\n+  r[1] = w4 ^ w2;\n+  r[2] = w3 ^ w1;\n+  r[3] = w2 ^ w0;\n+}\n+\n+static void\n+sha_test (void)\n+{\n+  union128i_d s1, s2, res;\n+  int res_ref[4];\n+\n+  s1.x = _mm_set_epi32 (111, 222, 333, 444);\n+  s2.x = _mm_set_epi32 (555, 666, 0, 0);\n+\n+  res.x = _mm_sha1msg1_epu32 (s1.x, s2.x);\n+\n+  compute_sha1msg1 (s1.a, s2.a, res_ref);\n+\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "9c0ffc13f6d2bd57d2403823c4ad94165b6894e2", "filename": "gcc/testsuite/gcc.target/i386/sha1msg2-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg2-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha1msg2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha1msg2_epu32 (x, x);\n+}"}, {"sha": "21eaf8dd9fe119b7b99fb9d40c8bdbc262574a2d", "filename": "gcc/testsuite/gcc.target/i386/sha1msg2-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1msg2-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <x86intrin.h>\n+#include <immintrin.h>\n+\n+static void\n+compute_sha1msg2 (int *s1, int *s2, int *r)\n+{\n+  int w13, w14, w15, w16, w17, w18, w19;\n+\n+  w13 = s2[2];\n+  w14 = s2[1];\n+  w15 = s2[0];\n+  w16 = __rold (s1[3] ^ w13, 1);\n+  w17 = __rold (s1[2] ^ w14, 1);\n+  w18 = __rold (s1[1] ^ w15, 1);\n+  w19 = __rold (s1[0] ^ w16, 1);\n+\n+  r[0] = w19;\n+  r[1] = w18;\n+  r[2] = w17;\n+  r[3] = w16;\n+}\n+\n+static void\n+sha_test (void)\n+{\n+  union128i_d s1, s2, res;\n+  int res_ref[4];\n+\n+  s1.x = _mm_set_epi32 (111, 222, 333, 444);\n+  s2.x = _mm_set_epi32 (555, 666, 777, 0);\n+\n+  res.x = _mm_sha1msg2_epu32 (s1.x, s2.x);\n+\n+  compute_sha1msg2 (s1.a, s2.a, res_ref);\n+\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "40edc780ffe97bdc8d05c0ccad7aced492fffaf8", "filename": "gcc/testsuite/gcc.target/i386/sha1nexte-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1nexte-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1nexte-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1nexte-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha1nexte\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha1nexte_epu32 (x, x);\n+}"}, {"sha": "f0dc6cbc6a460ebf73955be2bb4dbf9ff55cc315", "filename": "gcc/testsuite/gcc.target/i386/sha1nexte-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1nexte-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1nexte-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1nexte-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <x86intrin.h>\n+#include <immintrin.h>\n+\n+static void\n+compute_sha1nexte (int *s1, int *s2, int *r)\n+{\n+  int tmp = __rold (s1[3], 30);\n+\n+  r[0] = s2[0];\n+  r[1] = s2[1];\n+  r[2] = s2[2];\n+  r[3] = s2[3] + tmp;\n+}\n+\n+static void\n+sha_test (void)\n+{\n+  union128i_d s1, s2, res;\n+  int res_ref[4];\n+\n+  s1.x = _mm_set_epi32 (111, 0, 0, 0);\n+  s2.x = _mm_set_epi32 (222, 333, 444, 555);\n+\n+  res.x = _mm_sha1nexte_epu32 (s1.x, s2.x);\n+\n+  compute_sha1nexte (s1.a, s2.a, res_ref);\n+\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "c9da57df000f332ca739fbb9c75f85cc360659a0", "filename": "gcc/testsuite/gcc.target/i386/sha1rnds4-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1rnds4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1rnds4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1rnds4-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha1rnds4\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha1rnds4_epu32 (x, x, 3);\n+}"}, {"sha": "91210b1f0a56afcfdf01b7f31dcba5b20e0cbab5", "filename": "gcc/testsuite/gcc.target/i386/sha1rnds4-2.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1rnds4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1rnds4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha1rnds4-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,93 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <x86intrin.h>\n+#include <immintrin.h>\n+\n+static int\n+f0 (int b, int c, int d)\n+{\n+  return (b & c) ^ (~b & d);\n+}\n+\n+static int\n+f1 (int b, int c, int d)\n+{\n+  return b ^ c ^ d;\n+}\n+\n+static int\n+f2 (int b, int c, int d)\n+{\n+  return (b & c) ^ (b & d) ^ (c & d);\n+}\n+\n+int (*f_arr[4])(int, int, int) = { f0, f1, f2, f1 };\n+const int k_arr[4] = { 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6 };\n+\n+\n+static void\n+compute_sha1rnds4 (int *src1, int *src2, int imm, int *res)\n+{\n+  int k = k_arr[imm];\n+  int (*f)(int, int, int) = f_arr[imm];\n+\n+  int w[4] = { src2[3], src2[2], src2[1], src2[0] };\n+  int a[5], b[5], c[5], d[5], e[5];\n+\n+  a[0] = src1[3];\n+  b[0] = src1[2];\n+  c[0] = src1[1];\n+  d[0] = src1[0];\n+  e[0] = 0;\n+\n+  int i;\n+  for (i = 0; i <= 3; i++)\n+    {\n+      a[i+1] = f(b[i], c[i], d[i]) + __rold (a[i], 5) + w[i] + e[i] + k;\n+      b[i+1] = a[i];\n+      c[i+1] = __rold (b[i], 30);\n+      d[i+1] = c[i];\n+      e[i+1] = d[i];\n+    }\n+\n+  res[0] = d[4];\n+  res[1] = c[4];\n+  res[2] = b[4];\n+  res[3] = a[4];\n+}\n+\n+\n+static void\n+sha_test (void)\n+{\n+  int imm;\n+  union128i_d s1, s2, res;\n+  int res_ref[4];\n+\n+  s1.x = _mm_set_epi32 (111, 222, 333, 444);\n+  s2.x = _mm_set_epi32 (555, 666, 777, 888);\n+\n+  res.x = _mm_sha1rnds4_epu32 (s1.x, s2.x, 0);\n+  compute_sha1rnds4 (s1.a, s2.a, 0, res_ref);\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm_sha1rnds4_epu32 (s1.x, s2.x, 1);\n+  compute_sha1rnds4 (s1.a, s2.a, 1, res_ref);\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm_sha1rnds4_epu32 (s1.x, s2.x, 2);\n+  compute_sha1rnds4 (s1.a, s2.a, 2, res_ref);\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+\n+  res.x = _mm_sha1rnds4_epu32 (s1.x, s2.x, 3);\n+  compute_sha1rnds4 (s1.a, s2.a, 3, res_ref);\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "020874e4a4f310b47b13d32039365c1e2191313b", "filename": "gcc/testsuite/gcc.target/i386/sha256msg1-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg1-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha256msg1\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha256msg1_epu32 (x, x);\n+}"}, {"sha": "2b70920b029797b3d74678f12b1c0ba923f24890", "filename": "gcc/testsuite/gcc.target/i386/sha256msg1-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg1-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <x86intrin.h>\n+#include <immintrin.h>\n+\n+static int\n+s0 (int w)\n+{\n+  return __rord (w, 7) ^ __rord (w, 18) ^ (w >> 3);\n+}\n+\n+static void\n+compute_sha256msg1 (int *src1, int *src2, int *res)\n+{\n+  int w0, w1, w2, w3, w4;\n+\n+  w0 = src1[0];\n+  w1 = src1[1];\n+  w2 = src1[2];\n+  w3 = src1[3];\n+  w4 = src2[0];\n+\n+  res[0] = w0 + s0 (w1);\n+  res[1] = w1 + s0 (w2);\n+  res[2] = w2 + s0 (w3);\n+  res[3] = w3 + s0 (w4);\n+}\n+\n+static void\n+sha_test (void)\n+{\n+  union128i_d s1, s2, res;\n+  int res_ref[4];\n+\n+  s1.x = _mm_set_epi32 (111, 222, 333, 444);\n+  s2.x = _mm_set_epi32 (0, 0, 0, 555);\n+\n+  res.x = _mm_sha256msg1_epu32 (s1.x, s2.x);\n+\n+  compute_sha256msg1 (s1.a, s2.a, res_ref);\n+\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "88a9a03e4e8807a8b0a5b3a8aa65a5d36cf12923", "filename": "gcc/testsuite/gcc.target/i386/sha256msg2-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg2-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha256msg2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha256msg2_epu32 (x, x);\n+}"}, {"sha": "ffb0c2582bcd16174160fffca93196b713d094cc", "filename": "gcc/testsuite/gcc.target/i386/sha256msg2-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256msg2-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <x86intrin.h>\n+#include <immintrin.h>\n+\n+static int\n+s1 (int w)\n+{\n+  return __rord (w, 17) ^ __rord (w, 19) ^ (w >> 10);\n+}\n+\n+static void\n+compute_sha256msg2 (int *src1, int *src2, int *res)\n+{\n+  int w14, w15, w16, w17, w18, w19;\n+\n+  w14 = src2[2];\n+  w15 = src2[3];\n+  w16 = src1[0] + s1 (w14);\n+  w17 = src1[1] + s1 (w15);\n+  w18 = src1[2] + s1 (w16);\n+  w19 = src1[3] + s1 (w17);\n+\n+  res[0] = w16;\n+  res[1] = w17;\n+  res[2] = w18;\n+  res[3] = w19;\n+}\n+\n+static void\n+sha_test (void)\n+{\n+  union128i_d s1, s2, res;\n+  int res_ref[4];\n+\n+  s1.x = _mm_set_epi32 (111, 222, 333, 444);\n+  s2.x = _mm_set_epi32 (555, 666, 0, 0);\n+\n+  res.x = _mm_sha256msg2_epu32 (s1.x, s2.x);\n+\n+  compute_sha256msg2 (s1.a, s2.a, res_ref);\n+\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "8bdf6642078cdbd10dc9ccbaeb29fa6b73bdb81b", "filename": "gcc/testsuite/gcc.target/i386/sha256rnds2-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256rnds2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256rnds2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256rnds2-1.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-final { scan-assembler \"sha256rnds2\\[ \\\\t\\]+\\[^\\n\\]*%xmm0\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+\n+void extern\n+sha_test (void)\n+{\n+  x = _mm_sha256rnds2_epu32 (x, x, x);\n+}"}, {"sha": "4e586749deffdb60b36c18a893e0957f2c33c1bd", "filename": "gcc/testsuite/gcc.target/i386/sha256rnds2-2.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256rnds2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256rnds2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsha256rnds2-2.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msha\" } */\n+/* { dg-require-effective-target sha } */\n+\n+#include \"sha-check.h\"\n+#include \"m128-check.h\"\n+#include <x86intrin.h>\n+#include <immintrin.h>\n+\n+static int\n+ch (int e, int f, int g)\n+{\n+  return (e & f) ^ (~e & g);\n+}\n+\n+static int\n+maj (int a, int b, int c)\n+{\n+  return (a & b) ^ (a & c) ^ (b & c);\n+}\n+\n+static int\n+s0 (int a)\n+{\n+  return __rord (a, 2) ^ __rord (a, 13) ^ __rord (a, 22);\n+}\n+\n+static int\n+s1 (int e)\n+{\n+  return __rord (e, 6) ^ __rord (e, 11) ^ __rord (e, 25);\n+}\n+\n+static void\n+compute_sha256rnds2 (int *src0, int *src1, int *src2, int *res)\n+{\n+  int wk[2] = { src0[0], src0[1] };\n+  int a[3], b[3], c[3], d[3], e[3], f[3], g[3], h[3];\n+\n+  a[0] = src2[3];\n+  b[0] = src2[2];\n+  c[0] = src1[3];\n+  d[0] = src1[2];\n+  e[0] = src2[1];\n+  f[0] = src2[0];\n+  g[0] = src1[1];\n+  h[0] = src1[0];\n+\n+  int i;\n+  for (i = 0; i <= 1; i++)\n+    {\n+      a[i+1] = ch (e[i], f[i], g[i]) + s1 (e[i]) + wk[i] + h[i]\n+\t       + maj (a[i], b[i], c[i]) + s0 (a[i]);\n+      b[i+1] = a[i];\n+      c[i+1] = b[i];\n+      d[i+1] = c[i];\n+      e[i+1] = ch (e[i], f[i], g[i]) + s1 (e[i]) + wk[i] + h[i] + d[i];\n+      f[i+1] = e[i];\n+      g[i+1] = f[i];\n+      h[i+1] = g[i];\n+    }\n+\n+  res[0] = f[2];\n+  res[1] = e[2];\n+  res[2] = b[2];\n+  res[3] = a[2];\n+}\n+\n+static void\n+sha_test (void)\n+{\n+  union128i_d s0, s1, s2, res;\n+  int res_ref[4];\n+\n+  s0.x = _mm_set_epi32 (0, 0, 111, 222);\n+  s1.x = _mm_set_epi32 (333, 444, 555, 666);\n+  s2.x = _mm_set_epi32 (777, 888, 999, 123);\n+\n+  res.x = _mm_sha256rnds2_epu32 (s1.x, s2.x, s0.x);\n+\n+  compute_sha256rnds2 (s0.a, s1.a, s2.a, res_ref);\n+\n+  if (check_union128i_d (res, res_ref))\n+    abort ();\n+}"}, {"sha": "569eacf045060b7864c929177b1bac30c279d2d2", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -379,3 +379,6 @@\n #define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n+\n+/* shaintrin.h */\n+#define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)"}, {"sha": "e8cb5337ef62073cf647e62162c43f51161bf234", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er  -mavx512pf -mavx512cd\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er  -mavx512pf -mavx512cd -msha\" } */\n+\n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile without optimization.  All of them are\n@@ -497,6 +498,9 @@ test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n \n+/* shaintrin.h */\n+test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n+\n /* wmmintrin.h */\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)"}, {"sha": "05b4af0a875319f706a683c3cf6da079c4178c09", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -99,7 +99,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512pf,avx512er,avx512cd\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512pf,avx512er,avx512cd,sha\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -212,9 +212,9 @@ test_4 (_mm_cmpestro, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrs, int, __m128i, int, __m128i, int, 1)\n test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n-/* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F) */\n+/* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)\n@@ -666,6 +666,9 @@ test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n \n+/* shaintrin.h */\n+test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n+\n /* wmmintrin.h (AES/PCLMUL).  */\n #ifdef DIFFERENT_PRAGMAS\n #pragma GCC target (\"aes,pclmul\")"}, {"sha": "012353826cb5860eaf2433299477dd72ee9a3a6c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618f825445027dd466e6db27b26dfa9b5899d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=c1618f825445027dd466e6db27b26dfa9b5899d7", "patch": "@@ -356,7 +356,10 @@\n #define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask (A, B, C, 1)\n #define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask (A, B, C, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512pf,avx512cd\")\n+/* shaintrin.h */\n+#define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512pf,avx512cd,sha\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}