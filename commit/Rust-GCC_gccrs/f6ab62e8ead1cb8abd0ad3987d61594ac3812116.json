{"sha": "f6ab62e8ead1cb8abd0ad3987d61594ac3812116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhYjYyZThlYWQxY2I4YWJkMGFkMzk4N2Q2MTU5NGFjMzgxMjExNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-01-19T13:40:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-19T13:40:54Z"}, "message": "m68k.c (notice_update_cc): If an SFmode move is implemented using move.l...\n\ngcc/\n\t* config/m68k/m68k.c (notice_update_cc): If an SFmode move is\n\timplemented using move.l, do not use its cc result for floating-point\n\tcomparisons.\n\nFrom-SVN: r120962", "tree": {"sha": "7f9e1fefb9454821f796165cf79779e9f759df7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f9e1fefb9454821f796165cf79779e9f759df7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6ab62e8ead1cb8abd0ad3987d61594ac3812116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ab62e8ead1cb8abd0ad3987d61594ac3812116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ab62e8ead1cb8abd0ad3987d61594ac3812116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ab62e8ead1cb8abd0ad3987d61594ac3812116/comments", "author": null, "committer": null, "parents": [{"sha": "fe0cc7765429f8fe22005638c7d42f550e309ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0cc7765429f8fe22005638c7d42f550e309ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0cc7765429f8fe22005638c7d42f550e309ea4"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "bfe243824024db3e3ce2e6f4c8d023b6501ac87f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ab62e8ead1cb8abd0ad3987d61594ac3812116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ab62e8ead1cb8abd0ad3987d61594ac3812116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6ab62e8ead1cb8abd0ad3987d61594ac3812116", "patch": "@@ -1,3 +1,9 @@\n+2007-01-19  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/m68k/m68k.c (notice_update_cc): If an SFmode move is\n+\timplemented using move.l, do not use its cc result for floating-point\n+\tcomparisons.\n+\n 2007-01-19  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/m68k/m68k.h (EXTRA_CONSTRAINT): Stop the 'T' constraint"}, {"sha": "78aae6dc0b54387faaa1a431e700f23d824e8b3a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ab62e8ead1cb8abd0ad3987d61594ac3812116/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ab62e8ead1cb8abd0ad3987d61594ac3812116/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f6ab62e8ead1cb8abd0ad3987d61594ac3812116", "patch": "@@ -2834,12 +2834,18 @@ notice_update_cc (rtx exp, rtx insn)\n \t  if (cc_status.value2 && modified_in_p (cc_status.value2, insn))\n \t    cc_status.value2 = 0; \n \t}\n+      /* fmoves to memory or data registers do not set the condition\n+\t codes.  Normal moves _do_ set the condition codes, but not in\n+\t a way that is appropriate for comparison with 0, because -0.0\n+\t would be treated as a negative nonzero number.  Note that it\n+\t isn't appropriate to conditionalize this restiction on\n+\t HONOR_SIGNED_ZEROS because that macro merely indicates whether\n+\t we care about the difference between -0.0 and +0.0.  */\n       else if (!FP_REG_P (SET_DEST (exp))\n \t       && SET_DEST (exp) != cc0_rtx\n \t       && (FP_REG_P (SET_SRC (exp))\n \t\t   || GET_CODE (SET_SRC (exp)) == FIX\n-\t\t   || GET_CODE (SET_SRC (exp)) == FLOAT_TRUNCATE\n-\t\t   || GET_CODE (SET_SRC (exp)) == FLOAT_EXTEND))\n+\t\t   || FLOAT_MODE_P (GET_MODE (SET_DEST (exp)))))\n \tCC_STATUS_INIT; \n       /* A pair of move insns doesn't produce a useful overall cc.  */\n       else if (!FP_REG_P (SET_DEST (exp))"}]}