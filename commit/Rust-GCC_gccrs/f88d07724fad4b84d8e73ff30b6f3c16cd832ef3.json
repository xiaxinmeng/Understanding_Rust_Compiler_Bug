{"sha": "f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4ZDA3NzI0ZmFkNGI4NGQ4ZTczZmYzMGI2ZjNjMTZjZDgzMmVmMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-25T18:46:03Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-25T18:46:03Z"}, "message": "re PR preprocessor/39559 (constants too large for intmax_t need pedwarns)\n\nlibcpp:\n\tPR preprocessor/39559\n\t* expr.c (cpp_interpret_integer): Use a pedwarn for decimal\n\tconstants larger than intmax_t in C99 mode.\n\ngcc/testsuite:\n\t* gcc.dg/c99-intconst-2.c: New test.\n\nFrom-SVN: r146777", "tree": {"sha": "a0a78183eae0cbfd3a9ea596201c0a1fd30642d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0a78183eae0cbfd3a9ea596201c0a1fd30642d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3710436b62ad4c025de1b3b5a97e6d3eb820edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3710436b62ad4c025de1b3b5a97e6d3eb820edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3710436b62ad4c025de1b3b5a97e6d3eb820edf"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "f2fdc93c4bde4dcae3f097fde867624d42e323e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "patch": "@@ -1,3 +1,8 @@\n+2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/39559\n+\t* gcc.dg/c99-intconst-2.c: New test.\n+\n 2009-04-25  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/tree-ssa/ehcleanup-1.C: Update."}, {"sha": "34923675762abbc7e8f2f54945c183d337885c66", "filename": "gcc/testsuite/gcc.dg/c99-intconst-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intconst-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intconst-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intconst-2.c?ref=f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "patch": "@@ -0,0 +1,8 @@\n+/* Test for integer constant types: diagnostics for constants outside\n+   range of intmax_t must be pedwarns.  PR 39559.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#if 9223372036854775808LL /* { dg-error \"integer constant is so large that it is unsigned\" } */\n+unsigned long long l = 9223372036854775808LL; /* { dg-error \"integer constant is so large that it is unsigned\" } */\n+#endif"}, {"sha": "24f3f8debcf5bc4a32994fb9b543c49239eb4c2b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "patch": "@@ -1,3 +1,9 @@\n+2009-04-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/39559\n+\t* expr.c (cpp_interpret_integer): Use a pedwarn for decimal\n+\tconstants larger than intmax_t in C99 mode.\n+\n 2009-04-21  Taras Glek <tglek@mozilla.com>\n \n \t* include/cpp-id-data.h: Update GTY annotations to new syntax."}, {"sha": "f65fae02431eb22e84419a0204daad7d1f883cf3", "filename": "libcpp/expr.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f88d07724fad4b84d8e73ff30b6f3c16cd832ef3/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=f88d07724fad4b84d8e73ff30b6f3c16cd832ef3", "patch": "@@ -538,8 +538,27 @@ cpp_interpret_integer (cpp_reader *pfile, const cpp_token *token,\n \t\t    && pfile->state.in_directive)\n \t       && !num_positive (result, precision))\n \t{\n+\t  /* This is for constants within the range of uintmax_t but\n+\t     not that or intmax_t.  For such decimal constants, a\n+\t     diagnostic is required for C99 as the selected type must\n+\t     be signed and not having a type is a constraint violation\n+\t     (DR#298, TC3), so this must be a pedwarn.  For C90,\n+\t     unsigned long is specified to be used for a constant that\n+\t     does not fit in signed long; if uintmax_t has the same\n+\t     range as unsigned long this means only a warning is\n+\t     appropriate here.  C90 permits the preprocessor to use a\n+\t     wider range than unsigned long in the compiler, so if\n+\t     uintmax_t is wider than unsigned long no diagnostic is\n+\t     required for such constants in preprocessor #if\n+\t     expressions and the compiler will pedwarn for such\n+\t     constants outside the range of unsigned long that reach\n+\t     the compiler so a diagnostic is not required there\n+\t     either; thus, pedwarn for C99 but use a plain warning for\n+\t     C90.  */\n \t  if (base == 10)\n-\t    cpp_error (pfile, CPP_DL_WARNING,\n+\t    cpp_error (pfile, (CPP_OPTION (pfile, c99)\n+\t\t\t       ? CPP_DL_PEDWARN\n+\t\t\t       : CPP_DL_WARNING),\n \t\t       \"integer constant is so large that it is unsigned\");\n \t  result.unsignedp = true;\n \t}"}]}