{"sha": "097826df0cb9333f06bc857a1c02a8842d0de7fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3ODI2ZGYwY2I5MzMzZjA2YmM4NTdhMWMwMmE4ODQyZDBkZTdmZA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-11-18T23:06:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-14T15:51:51Z"}, "message": "[Ada] Additional fixes for Default_Initial_Condition\n\ngcc/ada/\n\n\t* exp_aggr.adb (Build_Array_Aggr_Code.Gen_Assign): Move\n\tgeneration of the call for DIC check past the optional\n\tgeneration of calls to controlled Initialize procedures.\n\t* exp_ch3.adb\n\t(Build_Array_Init_Proc.Init_One_Dimension.Possible_DIC_Call):\n\tSuppress generation of a DIC call when the array component type\n\tis controlled.  The call will now be generated later inside the\n\tarray's DI (Deep_Initialize) procedure.\n\t* exp_ch7.adb\n\t(Make_Deep_Array_Body.Build_Initialize_Statements): Generate a\n\tDIC call (when needed by the array component type) after any\n\tcall to the component type's controlled Initialize procedure, or\n\tgenerate the DIC call by itself if there's no Initialize to\n\tcall.\n\t* sem_aggr.adb (Resolve_Record_Aggregate.Add_Association):\n\tSimplify condition to only test Is_Box_Init_By_Default (previous\n\tcondition was overkill, as well as incorrect in some cases).\n\t* sem_elab.adb (Active_Scenarios.Output_Call): For\n\tDefault_Initial_Condition, suppress call to\n\tOutput_Verification_Call when the subprogram is a partial DIC\n\tprocedure.", "tree": {"sha": "5a7948c7fcd7334f453b3fbd6356e209a16e4dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a7948c7fcd7334f453b3fbd6356e209a16e4dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/097826df0cb9333f06bc857a1c02a8842d0de7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097826df0cb9333f06bc857a1c02a8842d0de7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097826df0cb9333f06bc857a1c02a8842d0de7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097826df0cb9333f06bc857a1c02a8842d0de7fd/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32543637450cd686a193fafc681501e930b66088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32543637450cd686a193fafc681501e930b66088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32543637450cd686a193fafc681501e930b66088"}], "stats": {"total": 112, "additions": 74, "deletions": 38}, "files": [{"sha": "d7e5470b717a08c4883e4ca4498452c717a988e1", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=097826df0cb9333f06bc857a1c02a8842d0de7fd", "patch": "@@ -1865,21 +1865,6 @@ package body Exp_Aggr is\n                    Typ               => Ctype,\n                    With_Default_Init => True));\n \n-               --  If Default_Initial_Condition applies to the component type,\n-               --  add a DIC check after the component is default-initialized.\n-               --  It will be analyzed and resolved before the code for\n-               --  initialization of other components.\n-\n-               --  Theoretically this might also be needed for cases where\n-               --  the component type doesn't have an init proc (such as for\n-               --  Default_Value cases), but those should be uncommon, and for\n-               --  now we only support the init proc case. ???\n-\n-               if Has_DIC (Ctype) and then Present (DIC_Procedure (Ctype)) then\n-                  Append_To (Stmts,\n-                    Build_DIC_Call (Loc, New_Copy_Tree (Indexed_Comp), Ctype));\n-               end if;\n-\n                --  If the component type has invariants, add an invariant\n                --  check after the component is default-initialized. It will\n                --  be analyzed and resolved before the code for initialization\n@@ -1910,6 +1895,22 @@ package body Exp_Aggr is\n                   Append_To (Stmts, Init_Call);\n                end if;\n             end if;\n+\n+            --  If Default_Initial_Condition applies to the component type,\n+            --  add a DIC check after the component is default-initialized,\n+            --  as well as after an Initialize procedure is called, in the\n+            --  case of components of a controlled type. It will be analyzed\n+            --  and resolved before the code for initialization of other\n+            --  components.\n+\n+            --  Theoretically this might also be needed for cases where Expr\n+            --  is not empty, but a default init still applies, such as for\n+            --  Default_Value cases, in which case we won't get here. ???\n+\n+            if Has_DIC (Ctype) and then Present (DIC_Procedure (Ctype)) then\n+               Append_To (Stmts,\n+                 Build_DIC_Call (Loc, New_Copy_Tree (Indexed_Comp), Ctype));\n+            end if;\n          end if;\n \n          return Add_Loop_Actions (Stmts);"}, {"sha": "e46ede8506bfecf69c8103d8820d3baffe585082", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=097826df0cb9333f06bc857a1c02a8842d0de7fd", "patch": "@@ -697,6 +697,11 @@ package body Exp_Ch3 is\n \n               and then not GNATprove_Mode\n \n+              --  DIC checks for components of controlled types are done later\n+              --  (see Exp_Ch7.Make_Deep_Array_Body).\n+\n+              and then not Is_Controlled (Comp_Type)\n+\n               and then Present (DIC_Procedure (Comp_Type))\n \n               and then not Has_Null_Body (DIC_Procedure (Comp_Type))"}, {"sha": "e06517c921377143e8867890b24f025b7f453f20", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=097826df0cb9333f06bc857a1c02a8842d0de7fd", "patch": "@@ -6848,22 +6848,49 @@ package body Exp_Ch7 is\n \n          Init_Call := Build_Initialization_Call;\n \n-         --  Only create finalization block if there is a non-trivial\n-         --  call to initialization.\n-\n-         if Present (Init_Call)\n-           and then Nkind (Init_Call) /= N_Null_Statement\n+         --  Only create finalization block if there is a nontrivial call\n+         --  to initialization or a Default_Initial_Condition check to be\n+         --  performed.\n+\n+         if (Present (Init_Call)\n+              and then Nkind (Init_Call) /= N_Null_Statement)\n+           or else\n+             (Has_DIC (Comp_Typ)\n+               and then not GNATprove_Mode\n+               and then Present (DIC_Procedure (Comp_Typ))\n+               and then not Has_Null_Body (DIC_Procedure (Comp_Typ)))\n          then\n-            Init_Loop :=\n-              Make_Block_Statement (Loc,\n-                Handled_Statement_Sequence =>\n-                  Make_Handled_Sequence_Of_Statements (Loc,\n-                    Statements         => New_List (Init_Call),\n-                    Exception_Handlers => New_List (\n-                      Make_Exception_Handler (Loc,\n-                        Exception_Choices => New_List (\n-                          Make_Others_Choice (Loc)),\n-                        Statements        => New_List (Final_Block)))));\n+            declare\n+               Init_Stmts : constant List_Id := New_List;\n+\n+            begin\n+               if Present (Init_Call) then\n+                  Append_To (Init_Stmts, Init_Call);\n+               end if;\n+\n+               if Has_DIC (Comp_Typ)\n+                 and then Present (DIC_Procedure (Comp_Typ))\n+               then\n+                  Append_To\n+                    (Init_Stmts,\n+                     Build_DIC_Call (Loc,\n+                         Make_Indexed_Component (Loc,\n+                           Prefix      => Make_Identifier (Loc, Name_V),\n+                           Expressions => New_References_To (Index_List, Loc)),\n+                         Comp_Typ));\n+               end if;\n+\n+               Init_Loop :=\n+                 Make_Block_Statement (Loc,\n+                   Handled_Statement_Sequence =>\n+                     Make_Handled_Sequence_Of_Statements (Loc,\n+                       Statements         => Init_Stmts,\n+                       Exception_Handlers => New_List (\n+                         Make_Exception_Handler (Loc,\n+                           Exception_Choices => New_List (\n+                             Make_Others_Choice (Loc)),\n+                           Statements        => New_List (Final_Block)))));\n+            end;\n \n             Append_To (Statements (Handled_Statement_Sequence (Init_Loop)),\n               Make_Assignment_Statement (Loc,"}, {"sha": "0f546462b20201200d68b3b440155a7a6e8b70a8", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=097826df0cb9333f06bc857a1c02a8842d0de7fd", "patch": "@@ -3848,10 +3848,7 @@ package body Sem_Aggr is\n          --  by default, then set flag on the new association to indicate that\n          --  the original association was for such a box-initialized component.\n \n-         if Resolve_Record_Aggregate.Is_Box_Present\n-           and then not Is_Box_Present\n-           and then Is_Box_Init_By_Default  -- ???\n-         then\n+         if Is_Box_Init_By_Default then\n             Set_Was_Default_Init_Box_Association (Last (Assoc_List));\n          end if;\n       end Add_Association;"}, {"sha": "399aeb48444c233e02d5d82de1631ae77ba3b1cd", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097826df0cb9333f06bc857a1c02a8842d0de7fd/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=097826df0cb9333f06bc857a1c02a8842d0de7fd", "patch": "@@ -2414,10 +2414,16 @@ package body Sem_Elab is\n          --  Default_Initial_Condition\n \n          elsif Is_Default_Initial_Condition_Proc (Subp_Id) then\n-            Output_Verification_Call\n-              (Pred    => \"Default_Initial_Condition\",\n-               Id      => First_Formal_Type (Subp_Id),\n-               Id_Kind => \"type\");\n+\n+            --  Only do output for a normal DIC procedure, since partial DIC\n+            --  procedures are subsidiary to those.\n+\n+            if not Is_Partial_DIC_Procedure (Subp_Id) then\n+               Output_Verification_Call\n+                 (Pred    => \"Default_Initial_Condition\",\n+                  Id      => First_Formal_Type (Subp_Id),\n+                  Id_Kind => \"type\");\n+            end if;\n \n          --  Entries\n "}]}