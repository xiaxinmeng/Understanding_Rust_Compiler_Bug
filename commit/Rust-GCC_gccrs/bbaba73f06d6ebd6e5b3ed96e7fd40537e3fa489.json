{"sha": "bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhYmE3M2YwNmQ2ZWJkNmU1YjNlZDk2ZTdmZDQwNTM3ZTNmYTQ4OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-23T16:40:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-23T16:40:55Z"}, "message": "gimplify.c (gimplify_modify_expr_rhs): Do not do a direct assignment from the constructor either if the target is volatile.\n\n\t* gimplify.c (gimplify_modify_expr_rhs) <VAR_DECL>: Do not do a direct\n\tassignment from the constructor either if the target is volatile.\nada/\n\t* einfo.ads (Is_True_Constant): Lift restriction on atomic objects.\n\t* sinfo.ads (Object Declaration): Likewise.\n\t(Assignment Statement): Likewise.\n\t* freeze.adb (Expand_Atomic_Aggregate): Remove useless test.\n\tDo not force Is_True_Constant to false on the temporary.\n\t(Freeze_Entity): Do not force Is_True_Constant to false on names on\n\tthe RHS of object declarations.\n\t* gcc-interface/trans.c (lvalue_required_p) <N_Object_Declaration>:\n\tNew case.  Return 1 if the object is atomic.\n\t<N_Assignment_Statement>: Likewise.\n\nFrom-SVN: r146652", "tree": {"sha": "c50f816477650b4e3cbb25b84c72aae959f07b1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c50f816477650b4e3cbb25b84c72aae959f07b1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/comments", "author": null, "committer": null, "parents": [{"sha": "3682dc97d6bf818e4c95c734e4d5588a9d9a4cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3682dc97d6bf818e4c95c734e4d5588a9d9a4cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3682dc97d6bf818e4c95c734e4d5588a9d9a4cda"}], "stats": {"total": 173, "additions": 115, "deletions": 58}, "files": [{"sha": "e18c15c944d3fb91d7c9a493aeb6f009c3189084", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -1,3 +1,8 @@\n+2009-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimplify.c (gimplify_modify_expr_rhs) <VAR_DECL>: Do not do a direct\n+\tassignment from the constructor either if the target is volatile.\n+\n 2009-04-23  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* config/arm/arm.md (insv): Do not share operands[0]."}, {"sha": "dd21b448436abc3802d16dec6d63f4e063cec49b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -1,3 +1,16 @@\n+2009-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Is_True_Constant): Lift restriction on atomic objects.\n+\t* sinfo.ads (Object Declaration): Likewise.\n+\t(Assignment Statement): Likewise.\n+\t* freeze.adb (Expand_Atomic_Aggregate): Remove useless test.\n+\tDo not force Is_True_Constant to false on the temporary.\n+\t(Freeze_Entity): Do not force Is_True_Constant to false on names on\n+\tthe RHS of object declarations.\n+\t* gcc-interface/trans.c (lvalue_required_p) <N_Object_Declaration>:\n+\tNew case.  Return 1 if the object is atomic.\n+\t<N_Assignment_Statement>: Likewise.\n+\n 2009-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Modular_Integer_Subtype>"}, {"sha": "35c835154ead4a2277bea66e56a72422201238ec", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -2615,16 +2615,6 @@ package Einfo is\n --       that the constant was not modified by generated code (e.g. to set a\n --       discriminant in an init proc). Assignments by user or generated code\n --       will reset this flag.\n---\n---       Note: there is one situation in which the back end does not permit\n---       this flag to be set, even if no assignments are generated. This is\n---       the case of an object of a record or array type which is initialized\n---       with an aggregate, and is itself used as the expression initializing\n---       an atomic object, or the right hand side of an assignment to an atomic\n---       object. In this case the object must not have Is_True_Constant set,\n---       even though no assignments are generated (the reason for this is that\n---       the back end must not optimize the object away, because that would\n---       violate the restriction on aggregates in these positions).\n \n --    Is_Type (synthesized)\n --       Applies to all entities, true for a type entity"}, {"sha": "7866432844e4ec00d2c8c79967b095764e7ded5e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -1120,7 +1120,6 @@ package body Freeze is\n       if (Nkind (Parent (E)) = N_Object_Declaration\n             or else Nkind (Parent (E)) = N_Assignment_Statement)\n         and then Comes_From_Source (Parent (E))\n-        and then Nkind (E) = N_Aggregate\n       then\n          Temp :=\n            Make_Defining_Identifier (Loc,\n@@ -1136,13 +1135,6 @@ package body Freeze is\n \n          Set_Expression (Parent (E), New_Occurrence_Of (Temp, Loc));\n \n-         --  To prevent the temporary from being constant-folded (which would\n-         --  lead to the same piecemeal assignment on the original target)\n-         --  indicate to the back-end that the temporary is a variable with\n-         --  real storage. See description of this flag in Einfo, and the notes\n-         --  on N_Assignment_Statement and N_Object_Declaration in Sinfo.\n-\n-         Set_Is_True_Constant (Temp, False);\n       end if;\n    end Expand_Atomic_Aggregate;\n \n@@ -2295,39 +2287,18 @@ package body Freeze is\n             Set_Encoded_Interface_Name\n               (E, Get_Default_External_Name (E));\n \n-         --  Special processing for atomic objects appearing in object decls\n+         --  If entity is an atomic object appearing in a declaration and\n+         --  the expression is an aggregate, assign it to a temporary to\n+         --  ensure that the actual assignment is done atomically rather\n+         --  than component-wise (the assignment to the temp may be done\n+         --  component-wise, but that is harmless).\n \n          elsif Is_Atomic (E)\n            and then Nkind (Parent (E)) = N_Object_Declaration\n            and then Present (Expression (Parent (E)))\n+           and then Nkind (Expression (Parent (E))) = N_Aggregate\n          then\n-            declare\n-               Expr : constant Node_Id := Expression (Parent (E));\n-\n-            begin\n-               --  If expression is an aggregate, assign to a temporary to\n-               --  ensure that the actual assignment is done atomically rather\n-               --  than component-wise (the assignment to the temp may be done\n-               --  component-wise, but that is harmless).\n-\n-               if Nkind (Expr) = N_Aggregate then\n-                  Expand_Atomic_Aggregate (Expr, Etype (E));\n-\n-               --  If the expression is a reference to a record or array object\n-               --  entity, then reset Is_True_Constant to False so that the\n-               --  compiler will not optimize away the intermediate object,\n-               --  which we need in this case for the same reason (to ensure\n-               --  that the actual assignment is atomic, rather than\n-               --  component-wise).\n-\n-               elsif Is_Entity_Name (Expr)\n-                 and then (Is_Record_Type (Etype (Expr))\n-                             or else\n-                           Is_Array_Type (Etype (Expr)))\n-               then\n-                  Set_Is_True_Constant (Entity (Expr), False);\n-               end if;\n-            end;\n+            Expand_Atomic_Aggregate (Expression (Parent (E)), Etype (E));\n          end if;\n \n          --  For a subprogram, freeze all parameter types and also the return"}, {"sha": "de6ac0b1ead5511f0772141e2a9fd6843a4cc4fe", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -723,6 +723,18 @@ lvalue_required_p (Node_Id gnat_node, tree gnu_type, int aliased)\n \t\t (Underlying_Type (Etype (Name (gnat_parent))))\n \t      || Nkind (Name (gnat_parent)) == N_Identifier);\n \n+    case N_Object_Declaration:\n+      /* We cannot use a constructor if this is an atomic object because\n+\t the actual assignment might end up being done component-wise.  */\n+      return Is_Composite_Type (Underlying_Type (Etype (gnat_node)))\n+\t     && Is_Atomic (Defining_Entity (gnat_parent));\n+\n+    case N_Assignment_Statement:\n+      /* We cannot use a constructor if the LHS is an atomic object because\n+\t the actual assignment might end up being done component-wise.  */\n+      return Is_Composite_Type (Underlying_Type (Etype (gnat_node)))\n+\t     && Is_Atomic (Entity (Name (gnat_parent)));\n+\n     default:\n       return 0;\n     }"}, {"sha": "5aae9c059c9b11634881b6919ece9d3e0cc6f33c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -2152,11 +2152,8 @@ package Sinfo is\n       --  Note: the back end places some restrictions on the form of the\n       --  Expression field. If the object being declared is Atomic, then\n       --  the Expression may not have the form of an aggregate (since this\n-      --  might cause the back end to generate separate assignments). It\n-      --  also cannot be a reference to an object marked as a true constant\n-      --  (Is_True_Constant flag set), where the object is itself initialized\n-      --  with an aggregate. If necessary the front end must generate an\n-      --  extra temporary (with Is_True_Constant set False), and initialize\n+      --  might cause the back end to generate separate assignments). In this\n+      --  case the front end must generate an extra temporary and initialize\n       --  this temporary as required (the temporary itself is not atomic).\n \n       --  Note: there is not node kind for object definition. Instead, the\n@@ -3848,11 +3845,8 @@ package Sinfo is\n       --  Note: the back end places some restrictions on the form of the\n       --  Expression field. If the object being assigned to is Atomic, then\n       --  the Expression may not have the form of an aggregate (since this\n-      --  might cause the back end to generate separate assignments). It\n-      --  also cannot be a reference to an object marked as a true constant\n-      --  (Is_True_Constant flag set), where the object is itself initialized\n-      --  with an aggregate. If necessary the front end must generate an\n-      --  extra temporary (with Is_True_Constant set False), and initialize\n+      --  might cause the back end to generate separate assignments). In this\n+      --  case the front end must generate an extra temporary and initialize\n       --  this temporary as required (the temporary itself is not atomic).\n \n       -----------------------"}, {"sha": "e491a851c5b9a34c02695e93dad361477bfe0da5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -3982,11 +3982,14 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p,\n     switch (TREE_CODE (*from_p))\n       {\n       case VAR_DECL:\n-\t/* If we're assigning from a constant constructor, move the\n-\t   constructor expression to the RHS of the MODIFY_EXPR.  */\n+\t/* If we're assigning from a read-only variable initialized with\n+\t   a constructor, do the direct assignment from the constructor,\n+\t   but only if neither source nor target are volatile since this\n+\t   latter assignment might end up being done on a per-field basis.  */\n \tif (DECL_INITIAL (*from_p)\n \t    && TREE_READONLY (*from_p)\n \t    && !TREE_THIS_VOLATILE (*from_p)\n+\t    && !TREE_THIS_VOLATILE (*to_p)\n \t    && TREE_CODE (DECL_INITIAL (*from_p)) == CONSTRUCTOR)\n \t  {\n \t    tree old_from = *from_p;"}, {"sha": "47f4a807084e1cfc2091dc333ec823a2747caed2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -1,3 +1,8 @@\n+2009-04-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/atomic1.adb: New test.\n+\t* gnat.dg/atomic1_pkg.ads: New helper.\n+\n 2009-04-23  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR testsuite/39623"}, {"sha": "1e5207bb93b9a773eb23ef459c88a0c08a49ec58", "filename": "gcc/testsuite/gnat.dg/atomic1.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic1.adb?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -0,0 +1,17 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O0 -fdump-tree-gimple\" }\n+\n+with Atomic1_Pkg; use Atomic1_Pkg;\n+\n+procedure Atomic1 is\n+\n+   C_16 : constant R16 := (2, 3, 5, 7);\n+   C_32 : constant R32 := (1, 1, 2, 3, 5, 8, 13, 5);\n+\n+begin\n+   V_16 := C_16;\n+   V_32 := C_32;\n+end;\n+\n+-- { dg-final { scan-tree-dump-times \"v_16\" 1 \"gimple\"} }\n+-- { dg-final { scan-tree-dump-times \"v_32\" 1 \"gimple\"} }"}, {"sha": "809c3e3aae6378eed21953004223266e4c656159", "filename": "gcc/testsuite/gnat.dg/atomic1_pkg.ads", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic1_pkg.ads?ref=bbaba73f06d6ebd6e5b3ed96e7fd40537e3fa489", "patch": "@@ -0,0 +1,47 @@\n+package Atomic1_Pkg is\n+\n+   type Four_Bits is mod 2 ** 4;\n+\n+   type R16 is record\n+      F1 : Four_Bits;\n+      F2 : Four_Bits;\n+      F3 : Four_Bits;\n+      F4 : Four_Bits;\n+   end record;\n+   for R16 use record\n+      F1 at 0 range 0  ..  3;\n+      F2 at 0 range 4  ..  7;\n+      F3 at 0 range 8  .. 11;\n+      F4 at 0 range 12 .. 15;\n+   end record;\n+\n+   type R32 is record\n+      F1 : Four_Bits;\n+      F2 : Four_Bits;\n+      F3 : Four_Bits;\n+      F4 : Four_Bits;\n+      F5 : Four_Bits;\n+      F6 : Four_Bits;\n+      F7 : Four_Bits;\n+      F8 : Four_Bits;\n+   end record;\n+   for R32 use record\n+      F1 at 0 range 0  ..  3;\n+      F2 at 0 range 4  ..  7;\n+      F3 at 0 range 8  .. 11;\n+      F4 at 0 range 12 .. 15;\n+      F5 at 0 range 16 .. 19;\n+      F6 at 0 range 20 .. 23;\n+      F7 at 0 range 24 .. 27;\n+      F8 at 0 range 28 .. 31;\n+   end record;\n+\n+   C_16 : constant R16 := (2, 3, 5, 7);\n+   C_32 : constant R32 := (1, 1, 2, 3, 5, 8, 13, 5);\n+\n+   V_16 : R16;\n+   pragma Atomic (V_16);\n+   V_32 : R32;\n+   pragma Atomic (V_32);\n+\n+end Atomic1_Pkg;"}]}