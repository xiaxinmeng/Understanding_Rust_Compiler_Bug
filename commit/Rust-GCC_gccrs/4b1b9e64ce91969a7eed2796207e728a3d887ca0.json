{"sha": "4b1b9e64ce91969a7eed2796207e728a3d887ca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxYjllNjRjZTkxOTY5YTdlZWQyNzk2MjA3ZTcyOGEzZDg4N2NhMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-04T09:40:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-04T09:40:54Z"}, "message": "gimple-fold.c (gimple_fold_stmt_to_constant_1): Remove dispatching to fold_binary for GIMPLE_BINARY_RHS and for comparisons...\n\n2015-08-04  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Remove\n\tdispatching to fold_binary for GIMPLE_BINARY_RHS and for\n\tcomparisons embedded in [VEC_]COND_EXPRs.\n\nFrom-SVN: r226551", "tree": {"sha": "d9d97843e418653cad9a6488ed10bd7ed6d8223d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9d97843e418653cad9a6488ed10bd7ed6d8223d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1b9e64ce91969a7eed2796207e728a3d887ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1b9e64ce91969a7eed2796207e728a3d887ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1b9e64ce91969a7eed2796207e728a3d887ca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1b9e64ce91969a7eed2796207e728a3d887ca0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8bdb6a56bb31434c78a1bcb5f055e4074208696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8bdb6a56bb31434c78a1bcb5f055e4074208696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8bdb6a56bb31434c78a1bcb5f055e4074208696"}], "stats": {"total": 60, "additions": 25, "deletions": 35}, "files": [{"sha": "10f4ff1975bf07a81aabdec8d5b286bfbcc41892", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1b9e64ce91969a7eed2796207e728a3d887ca0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1b9e64ce91969a7eed2796207e728a3d887ca0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b1b9e64ce91969a7eed2796207e728a3d887ca0", "patch": "@@ -1,3 +1,9 @@\n+2015-08-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Remove\n+\tdispatching to fold_binary for GIMPLE_BINARY_RHS and for\n+\tcomparisons embedded in [VEC_]COND_EXPRs.\n+\n 2015-08-03  Abe Skolnik  <a.skolnik@samsung.com>\n \n \t* tree-if-conv.c: Fix various typos in comments."}, {"sha": "6c53bac027b82fb7752f1d747fab46b45faceab6", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 19, "deletions": 35, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1b9e64ce91969a7eed2796207e728a3d887ca0/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1b9e64ce91969a7eed2796207e728a3d887ca0/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=4b1b9e64ce91969a7eed2796207e728a3d887ca0", "patch": "@@ -5008,49 +5008,33 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree),\n \t    return NULL_TREE;\n \n           case GIMPLE_BINARY_RHS:\n-            {\n-              /* Handle binary operators that can appear in GIMPLE form.  */\n-              tree op0 = (*valueize) (gimple_assign_rhs1 (stmt));\n-              tree op1 = (*valueize) (gimple_assign_rhs2 (stmt));\n-\n-\t      /* Translate &x + CST into an invariant form suitable for\n-\t         further propagation.  */\n-\t      if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR\n-\t\t  && TREE_CODE (op0) == ADDR_EXPR\n-\t\t  && TREE_CODE (op1) == INTEGER_CST)\n-\t\t{\n-\t\t  tree off = fold_convert (ptr_type_node, op1);\n-\t\t  return build_fold_addr_expr_loc\n-\t\t\t   (loc,\n-\t\t\t    fold_build2 (MEM_REF,\n-\t\t\t\t\t TREE_TYPE (TREE_TYPE (op0)),\n-\t\t\t\t\t unshare_expr (op0), off));\n-\t\t}\n+\t    /* Translate &x + CST into an invariant form suitable for\n+\t       further propagation.  */\n+\t    if (subcode == POINTER_PLUS_EXPR)\n+\t      {\n+\t\t/* Handle binary operators that can appear in GIMPLE form.  */\n+\t\ttree op0 = (*valueize) (gimple_assign_rhs1 (stmt));\n+\t\ttree op1 = (*valueize) (gimple_assign_rhs2 (stmt));\n \n-              return fold_binary_loc (loc, subcode,\n-\t\t\t\t      gimple_expr_type (stmt), op0, op1);\n-            }\n+\t\tif (TREE_CODE (op0) == ADDR_EXPR\n+\t\t    && TREE_CODE (op1) == INTEGER_CST)\n+\t\t  {\n+\t\t    tree off = fold_convert (ptr_type_node, op1);\n+\t\t    return build_fold_addr_expr_loc\n+\t\t\t(loc,\n+\t\t\t fold_build2 (MEM_REF,\n+\t\t\t\t      TREE_TYPE (TREE_TYPE (op0)),\n+\t\t\t\t      unshare_expr (op0), off));\n+\t\t  }\n+\t      }\n+\t    return NULL_TREE;\n \n           case GIMPLE_TERNARY_RHS:\n             {\n               /* Handle ternary operators that can appear in GIMPLE form.  */\n               tree op0 = (*valueize) (gimple_assign_rhs1 (stmt));\n               tree op1 = (*valueize) (gimple_assign_rhs2 (stmt));\n               tree op2 = (*valueize) (gimple_assign_rhs3 (stmt));\n-\n-\t      /* Fold embedded expressions in ternary codes.  */\n-\t      if ((subcode == COND_EXPR\n-\t\t   || subcode == VEC_COND_EXPR)\n-\t\t  && COMPARISON_CLASS_P (op0))\n-\t\t{\n-\t\t  tree op00 = (*valueize) (TREE_OPERAND (op0, 0));\n-\t\t  tree op01 = (*valueize) (TREE_OPERAND (op0, 1));\n-\t\t  tree tem = fold_binary_loc (loc, TREE_CODE (op0),\n-\t\t\t\t\t      TREE_TYPE (op0), op00, op01);\n-\t\t  if (tem)\n-\t\t    op0 = tem;\n-\t\t}\n-\n               return fold_ternary_loc (loc, subcode,\n \t\t\t\t       gimple_expr_type (stmt), op0, op1, op2);\n             }"}]}