{"sha": "1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3NzkwNThlMWViZDZlNjg3NzFmMjUwNjJlOTVmM2JiN2ZmNDhhYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T10:20:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-06T10:20:44Z"}, "message": "[multiple changes]\n\n2015-01-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Set_SSO_From_Defaults): When setting scalar storage\n\torder to native from default, make sure to also adjust bit order.\n\t* exp_aggr.adb: Minor reformatting.\n\n2015-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* s-valllu.adb, s-valllu.ads, s-valuti.ads, s-valuns.adb, s-valuns.ads,\n\ts-valrea.adb, s-valrea.ads: Add some additional guards for\n\tStr'Last = Positive'Last.\n\n2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb, sem_ch8.adb: Ongoing work for wrappers for actual\n\tsubprograms.\n\n2015-01-06  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Expand_Interface_Conversion): Reapply patch.\n\nFrom-SVN: r219250", "tree": {"sha": "19e553bfc8fc773dca0168fb2791706a2c396f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19e553bfc8fc773dca0168fb2791706a2c396f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/comments", "author": null, "committer": null, "parents": [{"sha": "375cbc2bec0b70a3e54f02248f3a139ef5929419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375cbc2bec0b70a3e54f02248f3a139ef5929419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375cbc2bec0b70a3e54f02248f3a139ef5929419"}], "stats": {"total": 490, "additions": 271, "deletions": 219}, "files": [{"sha": "196f0833e58ff307cc1fc2daf14647292eb44723", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -1,3 +1,24 @@\n+2015-01-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Set_SSO_From_Defaults): When setting scalar storage\n+\torder to native from default, make sure to also adjust bit order.\n+\t* exp_aggr.adb: Minor reformatting.\n+\n+2015-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-valllu.adb, s-valllu.ads, s-valuti.ads, s-valuns.adb, s-valuns.ads,\n+\ts-valrea.adb, s-valrea.ads: Add some additional guards for\n+\tStr'Last = Positive'Last.\n+\n+2015-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb, sem_ch8.adb: Ongoing work for wrappers for actual\n+\tsubprograms.\n+\n+2015-01-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Conversion): Reapply patch.\n+\n 2015-01-06  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_util.ads: Minor reformatting."}, {"sha": "abf870b642b23b13f4b2eaf12e77ba10addcb2ef", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -239,10 +239,10 @@ package body Exp_Aggr is\n    --  Packed_Array_Aggregate_Handled, we set this parameter to True, since\n    --  these are cases we handle in there.\n \n-   --  It would seem worthwhile to have a higher default value for Max_Others_\n-   --  replicate, but aggregates in the compiler make this impossible: the\n-   --  compiler bootstrap fails if Max_Others_Replicate is greater than 25.\n-   --  This is unexpected ???\n+   --  It would seem useful to have a higher default for Max_Others_Replicate,\n+   --  but aggregates in the compiler make this impossible: the compiler\n+   --  bootstrap fails if Max_Others_Replicate is greater than 25. This\n+   --  is unexpected ???\n \n    procedure Expand_Array_Aggregate (N : Node_Id);\n    --  This is the top-level routine to perform array aggregate expansion."}, {"sha": "905311b6eb923c7e1f7ee79fe42fc3f6c8aeec96", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -1138,6 +1138,25 @@ package body Exp_Disp is\n          Operand_Typ := Base_Type (Corresponding_Record_Type (Operand_Typ));\n       end if;\n \n+      --  No displacement of the pointer to the object needed when the type of\n+      --  the operand is not an interface type and the interface is one of\n+      --  its parent types (since they share the primary dispatch table).\n+\n+      declare\n+         Opnd : Entity_Id := Operand_Typ;\n+\n+      begin\n+         if Is_Access_Type (Opnd) then\n+            Opnd := Designated_Type (Opnd);\n+         end if;\n+\n+         if not Is_Interface (Opnd)\n+           and then Is_Ancestor (Iface_Typ, Opnd, Use_Full_View => True)\n+         then\n+            return;\n+         end if;\n+      end;\n+\n       --  Evaluate if we can statically displace the pointer to the object\n \n       declare"}, {"sha": "7ac51e87ad0d73fac0b4abff142b4c37eb6b573a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -7748,6 +7748,8 @@ package body Freeze is\n    --------------------------\n \n    procedure Set_SSO_From_Default (T : Entity_Id) is\n+      Reversed : Boolean;\n+\n    begin\n       --  Set default SSO for an array or record base type, except in case of\n       --  a type extension (which always inherits the SSO of its parent type).\n@@ -7758,31 +7760,35 @@ package body Freeze is\n                              and then not (Is_Tagged_Type (T)\n                                             and then Is_Derived_Type (T))))\n       then\n-         if ((Bytes_Big_Endian      and then SSO_Set_Low_By_Default  (T))\n-                or else\n-            ((not Bytes_Big_Endian) and then SSO_Set_High_By_Default (T)))\n+         Reversed :=\n+            (Bytes_Big_Endian     and then SSO_Set_Low_By_Default (T))\n+              or else\n+            (not Bytes_Big_Endian and then SSO_Set_High_By_Default (T));\n+\n+         if (SSO_Set_Low_By_Default (T) or else SSO_Set_High_By_Default (T))\n \n-           --  For a record type, if native bit order is specified explicitly,\n-           --  then never set reverse SSO from default.\n+           --  For a record type, if bit order is specified explicitly, then\n+           --  do not set SSO from default if not consistent.\n \n            and then not\n              (Is_Record_Type (T)\n                and then Has_Rep_Item (T, Name_Bit_Order)\n-               and then not Reverse_Bit_Order (T))\n+               and then Reverse_Bit_Order (T) /= Reversed)\n          then\n             --  If flags cause reverse storage order, then set the result. Note\n             --  that we would have ignored the pragma setting the non default\n             --  storage order in any case, hence the assertion at this point.\n \n-            pragma Assert (Support_Nondefault_SSO_On_Target);\n-            Set_Reverse_Storage_Order (T);\n+            pragma Assert\n+              (not Reversed or else Support_Nondefault_SSO_On_Target);\n+\n+            Set_Reverse_Storage_Order (T, Reversed);\n \n-            --  For a record type, also set reversed bit order. Note that if\n-            --  a bit order has been specified explicitly, then this is a\n-            --  no-op, as per the guard above.\n+            --  For a record type, also set reversed bit order. Note: if a bit\n+            --  order has been specified explicitly, then this is a no-op.\n \n             if Is_Record_Type (T) then\n-               Set_Reverse_Bit_Order (T);\n+               Set_Reverse_Bit_Order (T, Reversed);\n             end if;\n          end if;\n       end if;"}, {"sha": "a641be319598d3f875acc8c0f8644044ad94b387", "filename": "gcc/ada/s-valllu.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -65,6 +65,13 @@ package body System.Val_LLU is\n       --  Digit value\n \n    begin\n+      --  We do not tolerate strings with Str'Last = Positive'Last\n+\n+      if Str'Last = Positive'Last then\n+         raise Program_Error with\n+           \"string upper bound is Positive'Last, not supported\";\n+      end if;\n+\n       P := Ptr.all;\n       Uval := Character'Pos (Str (P)) - Character'Pos ('0');\n       P := P + 1;"}, {"sha": "3977e95473fa32f8a2b826fb2d435b2655a92209", "filename": "gcc/ada/s-valllu.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.ads?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,13 +66,18 @@ package System.Val_LLU is\n    --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case.\n+   --\n+   --  Note: this routine should not be called with Str'Last = Positive'Last.\n+   --  If this occurs Program_Error is raised with a message noting that this\n+   --  case is not supported. Most such cases are eliminated by the caller.\n \n    function Scan_Long_Long_Unsigned\n      (Str : String;\n       Ptr : not null access Integer;\n       Max : Integer) return System.Unsigned_Types.Long_Long_Unsigned;\n    --  Same as Scan_Raw_Long_Long_Unsigned, except scans optional leading\n    --  blanks, and an optional leading plus sign.\n+   --\n    --  Note: if a minus sign is present, Constraint_Error will be raised.\n    --  Note: trailing blanks are not scanned.\n "}, {"sha": "005643a427f2322f94846ceab475944fed2b5c59", "filename": "gcc/ada/s-valrea.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -152,6 +152,13 @@ package body System.Val_Real is\n    --  Start of processing for System.Scan_Real\n \n    begin\n+      --  We do not tolerate strings with Str'Last = Positive'Last\n+\n+      if Str'Last = Positive'Last then\n+         raise Program_Error with\n+           \"string upper bound is Positive'Last, not supported\";\n+      end if;\n+\n       --  We call the floating-point processor reset routine so that we can\n       --  be sure the floating-point processor is properly set for conversion\n       --  calls. This is notably need on Windows, where calls to the operating"}, {"sha": "8d3603f8eb4c91ae8177059fdf9905bd49927c66", "filename": "gcc/ada/s-valrea.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.ads?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,6 +60,10 @@ package System.Val_Real is\n    --  Note: if Str is null, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case.\n+   --\n+   --  Note: this routine should not be called with Str'Last = Positive'Last.\n+   --  If this occurs Program_Error is raised with a message noting that this\n+   --  case is not supported. Most such cases are eliminated by the caller.\n \n    function Value_Real (Str : String) return Long_Long_Float;\n    --  Used in computing X'Value (Str) where X is a floating-point type or an"}, {"sha": "b679807803f72f36bd4d67e53526a5a8956b03a8", "filename": "gcc/ada/s-valuns.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valuns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valuns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -65,6 +65,13 @@ package body System.Val_Uns is\n       --  Digit value\n \n    begin\n+      --  We do not tolerate strings with Str'Last = Positive'Last\n+\n+      if Str'Last = Positive'Last then\n+         raise Program_Error with\n+           \"string upper bound is Positive'Last, not supported\";\n+      end if;\n+\n       P := Ptr.all;\n       Uval := Character'Pos (Str (P)) - Character'Pos ('0');\n       P := P + 1;"}, {"sha": "54df9375098b007abda26371ee0a1264fe601e42", "filename": "gcc/ada/s-valuns.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.ads?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,13 +66,18 @@ package System.Val_Uns is\n    --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case.\n+   --\n+   --  Note: this routine should not be called with Str'Last = Positive'Last.\n+   --  If this occurs Program_Error is raised with a message noting that this\n+   --  case is not supported. Most such cases are eliminated by the caller.\n \n    function Scan_Unsigned\n      (Str : String;\n       Ptr : not null access Integer;\n       Max : Integer) return System.Unsigned_Types.Unsigned;\n    --  Same as Scan_Raw_Unsigned, except scans optional leading\n    --  blanks, and an optional leading plus sign.\n+   --\n    --  Note: if a minus sign is present, Constraint_Error will be raised.\n    --  Note: trailing blanks are not scanned.\n "}, {"sha": "a2db3432b6860eb30a367dc901707dd0e588be57", "filename": "gcc/ada/s-valuti.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.ads?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -71,6 +71,9 @@ package System.Val_Util is\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case. Constraint_Error is also\n    --  raised in this case.\n+   --\n+   --  This routine must not be called with Str'Last = Positive'Last. There is\n+   --  no check for this case, the caller must ensure this condition is met.\n \n    procedure Scan_Plus_Sign\n      (Str   : String;\n@@ -95,6 +98,9 @@ package System.Val_Util is\n    --  returning a suitable large value. If the base is zero, then any value\n    --  is allowed, and otherwise the large value will either cause underflow\n    --  or overflow during the scaling process which is fine.\n+   --\n+   --  This routine must not be called with Str'Last = Positive'Last. There is\n+   --  no check for this case, the caller must ensure this condition is met.\n \n    procedure Scan_Trailing_Blanks (Str : String; P : Positive);\n    --  Checks that the remainder of the field Str (P .. Str'Last) is all\n@@ -113,5 +119,8 @@ package System.Val_Util is\n    --  where the underscore is invalid, Constraint_Error is raised with Ptr\n    --  set appropriately, otherwise control returns with P incremented past\n    --  the underscore.\n+   --\n+   --  This routine must not be called with Str'Last = Positive'Last. There is\n+   --  no check for this case, the caller must ensure this condition is met.\n \n end System.Val_Util;"}, {"sha": "5d1ac9df6153a7a72ac85e7c883b9b320797190d", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 158, "deletions": 195, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -1207,7 +1207,8 @@ package body Sem_Ch12 is\n          if No (Found_Assoc) then\n             Default :=\n                Make_Generic_Association (Loc,\n-                 Selector_Name => New_Occurrence_Of (Id, Loc),\n+                 Selector_Name                     =>\n+                   New_Occurrence_Of (Id, Loc),\n                  Explicit_Generic_Actual_Parameter => Empty);\n             Set_Box_Present (Default);\n             Append (Default, Default_Formals);\n@@ -1421,10 +1422,10 @@ package body Sem_Ch12 is\n                         Error_Msg_Sloc := Sloc (Gen_Unit);\n                         Error_Msg_NE\n                           (\"missing actual&\",\n-                            Instantiation_Node,\n-                              Defining_Identifier (Formal));\n-                        Error_Msg_NE (\"\\in instantiation of & declared#\",\n-                            Instantiation_Node, Gen_Unit);\n+                           Instantiation_Node, Defining_Identifier (Formal));\n+                        Error_Msg_NE\n+                          (\"\\in instantiation of & declared#\",\n+                           Instantiation_Node, Gen_Unit);\n                         Abandon_Instantiation (Instantiation_Node);\n                      end if;\n \n@@ -1575,9 +1576,9 @@ package body Sem_Ch12 is\n \n                when N_Formal_Package_Declaration =>\n                   Match :=\n-                    Matching_Actual (\n-                      Defining_Identifier (Formal),\n-                      Defining_Identifier (Original_Node (Analyzed_Formal)));\n+                    Matching_Actual\n+                      (Defining_Identifier (Formal),\n+                       Defining_Identifier (Original_Node (Analyzed_Formal)));\n \n                   if No (Match) then\n                      if Partial_Parameterization then\n@@ -1587,9 +1588,10 @@ package body Sem_Ch12 is\n                         Error_Msg_Sloc := Sloc (Gen_Unit);\n                         Error_Msg_NE\n                           (\"missing actual&\",\n-                            Instantiation_Node, Defining_Identifier (Formal));\n-                        Error_Msg_NE (\"\\in instantiation of & declared#\",\n-                            Instantiation_Node, Gen_Unit);\n+                           Instantiation_Node, Defining_Identifier (Formal));\n+                        Error_Msg_NE\n+                          (\"\\in instantiation of & declared#\",\n+                           Instantiation_Node, Gen_Unit);\n \n                         Abandon_Instantiation (Instantiation_Node);\n                      end if;\n@@ -1632,14 +1634,13 @@ package body Sem_Ch12 is\n \n             if Present (Selector_Name (Actual)) then\n                Error_Msg_NE\n-                 (\"unmatched actual&\",\n-                    Actual, Selector_Name (Actual));\n-               Error_Msg_NE (\"\\in instantiation of& declared#\",\n-                    Actual, Gen_Unit);\n+                 (\"unmatched actual &\", Actual, Selector_Name (Actual));\n+               Error_Msg_NE\n+                 (\"\\in instantiation of & declared#\", Actual, Gen_Unit);\n             else\n                Error_Msg_NE\n-                 (\"unmatched actual in instantiation of& declared#\",\n-                   Actual, Gen_Unit);\n+                 (\"unmatched actual in instantiation of & declared#\",\n+                  Actual, Gen_Unit);\n             end if;\n          end if;\n \n@@ -1681,9 +1682,10 @@ package body Sem_Ch12 is\n             Subp := Node (Elmt);\n             New_D :=\n               Make_Generic_Association (Sloc (Subp),\n-                Selector_Name => New_Occurrence_Of (Subp, Sloc (Subp)),\n-                  Explicit_Generic_Actual_Parameter =>\n-                    New_Occurrence_Of (Subp, Sloc (Subp)));\n+                Selector_Name                     =>\n+                  New_Occurrence_Of (Subp, Sloc (Subp)),\n+                Explicit_Generic_Actual_Parameter =>\n+                  New_Occurrence_Of (Subp, Sloc (Subp)));\n             Mark_Rewrite_Insertion (New_D);\n             Append_To (Actuals, New_D);\n             Next_Elmt (Elmt);\n@@ -1750,8 +1752,8 @@ package body Sem_Ch12 is\n       then\n          Error_Msg_N\n            (\"in a formal, a subtype indication can only be \"\n-             & \"a subtype mark (RM 12.5.3(3))\",\n-             Subtype_Indication (Component_Definition (Def)));\n+            & \"a subtype mark (RM 12.5.3(3))\",\n+            Subtype_Indication (Component_Definition (Def)));\n       end if;\n \n    end Analyze_Formal_Array_Type;\n@@ -1888,10 +1890,10 @@ package body Sem_Ch12 is\n       else\n          New_N :=\n            Make_Full_Type_Declaration (Loc,\n-             Defining_Identifier => T,\n+             Defining_Identifier         => T,\n              Discriminant_Specifications =>\n                Discriminant_Specifications (Parent (T)),\n-             Type_Definition =>\n+             Type_Definition             =>\n                Make_Derived_Type_Definition (Loc,\n                  Subtype_Indication => Subtype_Mark (Def)));\n \n@@ -2031,7 +2033,7 @@ package body Sem_Ch12 is\n       New_N :=\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => T,\n-          Type_Definition => Def);\n+          Type_Definition     => Def);\n \n       Rewrite (N, New_N);\n       Analyze (N);\n@@ -2092,8 +2094,7 @@ package body Sem_Ch12 is\n \n             elsif Can_Never_Be_Null (T) then\n                Error_Msg_NE\n-                 (\"`NOT NULL` not allowed (& already excludes null)\",\n-                    N, T);\n+                 (\"`NOT NULL` not allowed (& already excludes null)\", N, T);\n             end if;\n          end if;\n \n@@ -2394,10 +2395,10 @@ package body Sem_Ch12 is\n          Restore_Env;\n          goto Leave;\n \n-      elsif  Gen_Unit = Current_Scope then\n+      elsif Gen_Unit = Current_Scope then\n          Error_Msg_N\n            (\"generic package cannot be used as a formal package of itself\",\n-             Gen_Id);\n+            Gen_Id);\n          Restore_Env;\n          goto Leave;\n \n@@ -2410,14 +2411,12 @@ package body Sem_Ch12 is\n \n             Error_Msg_N\n               (\"generic parent cannot be used as formal package \"\n-                & \"of a child unit\",\n-                Gen_Id);\n+               & \"of a child unit\", Gen_Id);\n \n          else\n             Error_Msg_N\n               (\"generic package cannot be used as a formal package \"\n-                & \"within itself\",\n-                Gen_Id);\n+               & \"within itself\", Gen_Id);\n             Restore_Env;\n             goto Leave;\n          end if;\n@@ -2439,7 +2438,7 @@ package body Sem_Ch12 is\n          if Chars (Gen_Name) = Chars (Pack_Id) then\n             Error_Msg_NE\n              (\"& is hidden within declaration of formal package\",\n-               Gen_Id, Gen_Name);\n+              Gen_Id, Gen_Name);\n          end if;\n       end;\n \n@@ -2503,9 +2502,8 @@ package body Sem_Ch12 is\n       Set_Inner_Instances (Formal, New_Elmt_List);\n       Push_Scope  (Formal);\n \n-      if Is_Child_Unit (Gen_Unit)\n-        and then Parent_Installed\n-      then\n+      if Is_Child_Unit (Gen_Unit) and then Parent_Installed then\n+\n          --  Similarly, we have to make the name of the formal visible in the\n          --  parent instance, to resolve properly fully qualified names that\n          --  may appear in the generic unit. The parent instance has been\n@@ -2538,15 +2536,11 @@ package body Sem_Ch12 is\n       begin\n          E := First_Entity (Formal);\n          while Present (E) loop\n-            if Associations\n-              and then not Is_Generic_Formal (E)\n-            then\n+            if Associations and then not Is_Generic_Formal (E) then\n                Set_Is_Hidden (E);\n             end if;\n \n-            if Ekind (E) = E_Package\n-              and then Renamed_Entity (E) = Formal\n-            then\n+            if Ekind (E) = E_Package and then Renamed_Entity (E) = Formal then\n                Set_Is_Hidden (E);\n                exit;\n             end if;\n@@ -2697,8 +2691,8 @@ package body Sem_Ch12 is\n               and then Is_Incomplete_Type (Ctrl_Type)\n             then\n                Error_Msg_NE\n-                 (\"controlling type of abstract formal subprogram cannot \" &\n-                     \"be incomplete type\", N, Ctrl_Type);\n+                 (\"controlling type of abstract formal subprogram cannot \"\n+                  & \"be incomplete type\", N, Ctrl_Type);\n \n             else\n                Check_Controlling_Formals (Ctrl_Type, Nam);\n@@ -2974,7 +2968,6 @@ package body Sem_Ch12 is\n       --  caller.\n \n       Gen_Parm_Decl := First (Generic_Formal_Declarations (N));\n-\n       while Present (Gen_Parm_Decl) loop\n          Analyze (Gen_Parm_Decl);\n          Next (Gen_Parm_Decl);\n@@ -3011,13 +3004,12 @@ package body Sem_Ch12 is\n           Defining_Unit_Name =>\n             Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (Defining_Entity (N)), \"GH\")),\n-          Name => Make_Identifier (Loc, Chars (Defining_Entity (N))));\n+          Name               =>\n+            Make_Identifier (Loc, Chars (Defining_Entity (N))));\n \n       if Present (Decls) then\n          Decl := First (Decls);\n-         while Present (Decl)\n-           and then Nkind (Decl) = N_Pragma\n-         loop\n+         while Present (Decl) and then Nkind (Decl) = N_Pragma loop\n             Next (Decl);\n          end loop;\n \n@@ -3229,8 +3221,9 @@ package body Sem_Ch12 is\n             if Is_Abstract_Type (Designated_Type (Result_Type))\n               and then Ada_Version >= Ada_2012\n             then\n-               Error_Msg_N (\"generic function cannot have an access result\"\n-                 & \" that designates an abstract type\", Spec);\n+               Error_Msg_N\n+                 (\"generic function cannot have an access result \"\n+                  & \"that designates an abstract type\", Spec);\n             end if;\n \n          else\n@@ -3423,7 +3416,8 @@ package body Sem_Ch12 is\n          if Nkind (Defining_Unit_Name (N)) = N_Defining_Program_Unit_Name then\n             Act_Decl_Name :=\n               Make_Defining_Program_Unit_Name (Loc,\n-                Name => New_Copy_Tree (Name (Defining_Unit_Name (N))),\n+                Name                =>\n+                  New_Copy_Tree (Name (Defining_Unit_Name (N))),\n                 Defining_Identifier => Act_Decl_Id);\n          else\n             Act_Decl_Name :=  Act_Decl_Id;\n@@ -3643,8 +3637,7 @@ package body Sem_Ch12 is\n                begin\n                   ASN1 := First (Aspect_Specifications (N));\n                   while Present (ASN1) loop\n-                     if Chars (Identifier (ASN1))\n-                        = Name_Default_Storage_Pool\n+                     if Chars (Identifier (ASN1)) = Name_Default_Storage_Pool\n                      then\n                         --  If generic carries a default storage pool, remove\n                         --  it in favor of the instance one.\n@@ -3694,7 +3687,6 @@ package body Sem_Ch12 is\n               and then not Is_Child_Unit (Gen_Unit)\n             then\n                Scop := Scope (Gen_Unit);\n-\n                while Present (Scop)\n                  and then Scop /= Standard_Standard\n                loop\n@@ -4274,10 +4266,7 @@ package body Sem_Ch12 is\n          --  must be made invisible as well.\n \n          S := Current_Scope;\n-\n-         while Present (S)\n-           and then S /= Standard_Standard\n-         loop\n+         while Present (S) and then S /= Standard_Standard loop\n             if Is_Generic_Instance (S)\n               and then (In_Package_Body (S)\n                          or else Ekind_In (S, E_Procedure, E_Function))\n@@ -4302,9 +4291,8 @@ package body Sem_Ch12 is\n               or else (Ekind (Curr_Unit) = E_Package_Body\n                         and then S = Spec_Entity (Curr_Unit))\n               or else (Ekind (Curr_Unit) = E_Subprogram_Body\n-                        and then S =\n-                          Corresponding_Spec\n-                            (Unit_Declaration_Node (Curr_Unit)))\n+                        and then S = Corresponding_Spec\n+                                       (Unit_Declaration_Node (Curr_Unit)))\n             then\n                Removed := True;\n \n@@ -4409,9 +4397,7 @@ package body Sem_Ch12 is\n                   Par : Entity_Id;\n                begin\n                   Par := Scope (Curr_Scope);\n-                  while (Present (Par))\n-                    and then Par /= Standard_Standard\n-                  loop\n+                  while (Present (Par)) and then Par /= Standard_Standard loop\n                      Install_Private_Declarations (Par);\n                      Par := Scope (Par);\n                   end loop;\n@@ -4424,9 +4410,7 @@ package body Sem_Ch12 is\n          --  scopes (and those local to the child unit itself) need to be\n          --  installed explicitly.\n \n-         if Is_Child_Unit (Curr_Unit)\n-           and then Removed\n-         then\n+         if Is_Child_Unit (Curr_Unit) and then Removed then\n             for J in reverse 1 .. Num_Inner + 1 loop\n                Scope_Stack.Table (Scope_Stack.Last - J + 1).First_Use_Clause :=\n                  Use_Clauses (J);\n@@ -4968,11 +4952,11 @@ package body Sem_Ch12 is\n                     and then Is_Controlling_Formal (Formal)\n                     and then not Can_Never_Be_Null (Formal)\n                   then\n-                     Error_Msg_NE (\"access parameter& is controlling,\",\n-                       N, Formal);\n                      Error_Msg_NE\n-                       (\"\\corresponding parameter of & must be\"\n-                       & \" explicitly null-excluding\", N, Gen_Id);\n+                       (\"access parameter& is controlling,\", N, Formal);\n+                     Error_Msg_NE\n+                       (\"\\corresponding parameter of & must be \"\n+                       & \"explicitly null-excluding\", N, Gen_Id);\n                   end if;\n \n                   Next_Formal (Formal);\n@@ -5129,6 +5113,7 @@ package body Sem_Ch12 is\n       Actual_Subp : Entity_Id) return Node_Id\n    is\n       Loc       : constant Source_Ptr := Sloc (Formal_Subp);\n+      Ret_Type  : constant Entity_Id  := Get_Instance_Of (Etype (Formal_Subp));\n       Actuals   : List_Id;\n       Decl      : Node_Id;\n       Func_Name : Node_Id;\n@@ -5150,12 +5135,7 @@ package body Sem_Ch12 is\n       Actuals := New_List;\n       Profile := New_List;\n \n-      if Present (Actual_Subp) then\n-         Act_F := First_Formal (Actual_Subp);\n-      else\n-         Act_F := Empty;\n-      end if;\n-\n+      Act_F  := First_Formal (Actual_Subp);\n       Form_F := First_Formal (Formal_Subp);\n       while Present (Form_F) loop\n \n@@ -5166,7 +5146,8 @@ package body Sem_Ch12 is\n \n          New_F := Make_Defining_Identifier (Loc, Chars (Form_F));\n \n-         Parm_Type := New_Occurrence_Of (Etype (Act_F), Loc);\n+         Parm_Type :=\n+           New_Occurrence_Of (Get_Instance_Of (Etype (Form_F)), Loc);\n \n          Append_To (Profile,\n            Make_Parameter_Specification (Loc,\n@@ -5185,8 +5166,7 @@ package body Sem_Ch12 is\n         Make_Function_Specification (Loc,\n           Defining_Unit_Name       => Func,\n           Parameter_Specifications => Profile,\n-          Result_Definition        =>\n-            Make_Identifier (Loc, Chars (Etype (Formal_Subp))));\n+          Result_Definition        => New_Occurrence_Of (Ret_Type, Loc));\n \n       Decl :=\n         Make_Expression_Function (Loc,\n@@ -5526,7 +5506,8 @@ package body Sem_Ch12 is\n             --  original name.\n \n             elsif Is_Entity_Name (Original_Node (Constant_Value (Ent))) then\n-                  Ent := Entity (Original_Node (Constant_Value (Ent)));\n+               Ent := Entity (Original_Node (Constant_Value (Ent)));\n+\n             else\n                return False;\n             end if;\n@@ -5574,9 +5555,7 @@ package body Sem_Ch12 is\n    --  Start of processing for Check_Formal_Package_Instance\n \n    begin\n-      while Present (E1)\n-        and then Present (E2)\n-      loop\n+      while Present (E1) and then Present (E2) loop\n          exit when Ekind (E1) = E_Package\n            and then Renamed_Entity (E1) = Renamed_Entity (Actual_Pack);\n \n@@ -5597,9 +5576,7 @@ package body Sem_Ch12 is\n            and then not Comes_From_Source (E1)\n            and then Chars (E1) /= Chars (E2)\n          then\n-            while Present (E1)\n-              and then  Chars (E1) /= Chars (E2)\n-            loop\n+            while Present (E1) and then  Chars (E1) /= Chars (E2) loop\n                Next_Entity (E1);\n             end loop;\n          end if;\n@@ -5631,9 +5608,7 @@ package body Sem_Ch12 is\n             --  If E2 is a formal type declaration, it is a defaulted parameter\n             --  and needs no checking.\n \n-            if not Is_Itype (E1)\n-              and then not Is_Itype (E2)\n-            then\n+            if not Is_Itype (E1) and then not Is_Itype (E2) then\n                Check_Mismatch\n                  (not Is_Type (E2)\n                    or else Etype (E1) /= Etype (E2)\n@@ -5694,15 +5669,15 @@ package body Sem_Ch12 is\n                        (not Same_Instantiated_Constant\n                          (Entity (Expr1), Entity (Expr2)));\n                   end if;\n+\n                else\n                   Check_Mismatch (True);\n                end if;\n \n             elsif Is_Entity_Name (Original_Node (Expr1))\n               and then Is_Entity_Name (Expr2)\n-            and then\n-              Same_Instantiated_Constant\n-                (Entity (Original_Node (Expr1)), Entity (Expr2))\n+              and then Same_Instantiated_Constant\n+                         (Entity (Original_Node (Expr1)), Entity (Expr2))\n             then\n                null;\n \n@@ -6026,10 +6001,10 @@ package body Sem_Ch12 is\n             begin\n                if Is_Wrapper_Package (Instance) then\n                   Gen_Id :=\n-                     Generic_Parent\n-                       (Specification\n-                         (Unit_Declaration_Node\n-                           (Related_Instance (Instance))));\n+                    Generic_Parent\n+                      (Specification\n+                        (Unit_Declaration_Node\n+                          (Related_Instance (Instance))));\n                else\n                   Gen_Id :=\n                     Generic_Parent (Package_Specification (Instance));\n@@ -6409,8 +6384,7 @@ package body Sem_Ch12 is\n               and then Is_Generic_Unit (Scope (Renamed_Object (E)))\n               and then Nkind (Name (Parent (E))) = N_Expanded_Name\n             then\n-               Rewrite (Gen_Id,\n-                 New_Copy_Tree (Name (Parent (E))));\n+               Rewrite (Gen_Id, New_Copy_Tree (Name (Parent (E))));\n                Inst_Par := Entity (Prefix (Gen_Id));\n \n                if not In_Open_Scopes (Inst_Par) then\n@@ -6458,7 +6432,7 @@ package body Sem_Ch12 is\n          Error_Msg_Node_2 := Scope (Act_Decl_Id);\n          Error_Msg_NE\n            (\"generic unit & is implicitly declared in &\",\n-             Defining_Unit_Name (N), Gen_Unit);\n+            Defining_Unit_Name (N), Gen_Unit);\n          Error_Msg_N (\"\\instance must have different name\",\n            Defining_Unit_Name (N));\n       end if;\n@@ -6616,9 +6590,8 @@ package body Sem_Ch12 is\n          if Nkind (Actual) = N_Subtype_Declaration then\n             Gen_T := Generic_Parent_Type (Actual);\n \n-            if Present (Gen_T)\n-              and then Is_Tagged_Type (Gen_T)\n-            then\n+            if Present (Gen_T) and then Is_Tagged_Type (Gen_T) then\n+\n                --  Traverse the list of primitives of the actual types\n                --  searching for hidden primitives that are visible in the\n                --  corresponding generic formal; leave them visible and\n@@ -6677,7 +6650,7 @@ package body Sem_Ch12 is\n                   Error_Msg_Node_2 := Inner;\n                   Error_Msg_NE\n                     (\"circular Instantiation: & instantiated within &!\",\n-                       N, Scop);\n+                     N, Scop);\n                   return True;\n \n                elsif Node (Elmt) = Inner then\n@@ -6687,7 +6660,7 @@ package body Sem_Ch12 is\n                   Error_Msg_Node_2 := Inner;\n                   Error_Msg_NE\n                     (\"circular Instantiation: & instantiated within &!\",\n-                      N, Node (Elmt));\n+                     N, Node (Elmt));\n                   return True;\n                end if;\n \n@@ -7195,9 +7168,7 @@ package body Sem_Ch12 is\n                   Rt  : Entity_Id;\n \n                begin\n-                  if Present (T)\n-                    and then Is_Private_Type (T)\n-                  then\n+                  if Present (T) and then Is_Private_Type (T) then\n                      Switch_View (T);\n                   end if;\n \n@@ -7256,9 +7227,8 @@ package body Sem_Ch12 is\n                --  Retrieve the allocator node in the generic copy\n \n                Acc_T := Etype (Parent (Parent (T)));\n-               if Present (Acc_T)\n-                 and then Is_Private_Type (Acc_T)\n-               then\n+\n+               if Present (Acc_T) and then Is_Private_Type (Acc_T) then\n                   Switch_View (Acc_T);\n                end if;\n             end if;\n@@ -7321,9 +7291,8 @@ package body Sem_Ch12 is\n         and then Instantiating\n       then\n          --  If the string is declared in an outer scope, the string_literal\n-         --  subtype created for it may have the wrong scope. We force the\n-         --  reanalysis of the constant to generate a new itype in the proper\n-         --  context.\n+         --  subtype created for it may have the wrong scope. Force reanalysis\n+         --  of the constant to generate a new itype in the proper context.\n \n          Set_Etype (New_N, Empty);\n          Set_Analyzed (New_N, False);\n@@ -7857,7 +7826,8 @@ package body Sem_Ch12 is\n         and then Earlier (Inst_Node, Gen_Body)\n       then\n          if Nkind (Enc_G) = N_Package_Body then\n-            E_G_Id := Corresponding_Spec (Enc_G);\n+            E_G_Id :=\n+              Corresponding_Spec (Enc_G);\n          else pragma Assert (Nkind (Enc_G) = N_Package_Body_Stub);\n             E_G_Id :=\n               Corresponding_Spec (Proper_Body (Unit (Library_Unit (Enc_G))));\n@@ -7925,6 +7895,7 @@ package body Sem_Ch12 is\n    begin\n       if Res /= Assoc_Null then\n          return Generic_Renamings.Table (Res).Act_Id;\n+\n       else\n          --  On exit, entity is not instantiated: not a generic parameter, or\n          --  else parameter of an inner generic unit.\n@@ -8110,9 +8081,10 @@ package body Sem_Ch12 is\n       Inst   : Node_Id) return Boolean\n    is\n       Decls : constant Node_Id := Parent (F_Node);\n-      Nod   : Node_Id := Parent (Inst);\n+      Nod   : Node_Id;\n \n    begin\n+      Nod := Parent (Inst);\n       while Present (Nod) loop\n          if Nod = Decls then\n             return True;\n@@ -8326,9 +8298,7 @@ package body Sem_Ch12 is\n \n       begin\n          S := Scope (Gen);\n-         while Present (S)\n-           and then S /= Standard_Standard\n-         loop\n+         while Present (S) and then S /= Standard_Standard loop\n             if Is_Generic_Instance (S)\n               and then In_Same_Source_Unit (S, N)\n             then\n@@ -8386,9 +8356,7 @@ package body Sem_Ch12 is\n                   --  In these three cases the freeze node of the previous\n                   --  instance is not relevant.\n \n-                  while Present (Scop)\n-                    and then Scop /= Standard_Standard\n-                  loop\n+                  while Present (Scop) and then Scop /= Standard_Standard loop\n                      exit when Scop = Par_I\n                        or else\n                          (Is_Generic_Instance (Scop)\n@@ -8405,8 +8373,8 @@ package body Sem_Ch12 is\n                   --  the current scope as well.\n \n                   elsif Present (Next (N))\n-                    and then Nkind_In (Next (N),\n-                      N_Subprogram_Body, N_Package_Body)\n+                    and then Nkind_In (Next (N), N_Subprogram_Body,\n+                                                 N_Package_Body)\n                     and then Comes_From_Source (Next (N))\n                   then\n                      null;\n@@ -8419,7 +8387,7 @@ package body Sem_Ch12 is\n                   --  Current instance is within an unrelated body\n \n                   elsif Present (Enclosing_N)\n-                     and then Enclosing_N /= Enclosing_Body (Par_I)\n+                    and then Enclosing_N /= Enclosing_Body (Par_I)\n                   then\n                      null;\n \n@@ -8597,11 +8565,11 @@ package body Sem_Ch12 is\n         (Gen_Unit = Act_Unit\n           and then (Nkind_In (Gen_Unit, N_Package_Declaration,\n                                         N_Generic_Package_Declaration)\n-                      or else (Gen_Unit = Body_Unit\n-                                and then True_Sloc (N) < Sloc (Orig_Body)))\n+                     or else (Gen_Unit = Body_Unit\n+                               and then True_Sloc (N) < Sloc (Orig_Body)))\n           and then Is_In_Main_Unit (Gen_Unit)\n           and then (Scope (Act_Id) = Scope (Gen_Id)\n-                      or else In_Same_Enclosing_Subp));\n+                     or else In_Same_Enclosing_Subp));\n \n       --  If this is an early instantiation, the freeze node is placed after\n       --  the generic body. Otherwise, if the generic appears in an instance,\n@@ -8784,6 +8752,7 @@ package body Sem_Ch12 is\n          end if;\n \n          Next_Entity (E);\n+\n          if Present (Gen_E) then\n             Next_Entity (Gen_E);\n          end if;\n@@ -8904,9 +8873,8 @@ package body Sem_Ch12 is\n \n       First_Gen := Gen_Par;\n \n-      while Present (Gen_Par)\n-        and then Is_Child_Unit (Gen_Par)\n-      loop\n+      while Present (Gen_Par) and then Is_Child_Unit (Gen_Par) loop\n+\n          --  Load grandparent instance as well\n \n          Inst_Node := Get_Package_Instantiation_Node (Inst_Par);\n@@ -9411,8 +9379,8 @@ package body Sem_Ch12 is\n              Defining_Unit_Name => New_Copy (Defining_Identifier (Formal)),\n              Name               => New_Occurrence_Of (Actual_Pack, Loc));\n \n-         Set_Associated_Formal_Package (Defining_Unit_Name (Nod),\n-           Defining_Identifier (Formal));\n+         Set_Associated_Formal_Package\n+           (Defining_Unit_Name (Nod), Defining_Identifier (Formal));\n          Decls := New_List (Nod);\n \n          --  If the formal F has a box, then the generic declarations are\n@@ -9551,8 +9519,8 @@ package body Sem_Ch12 is\n \n                Append_To (Decls,\n                  Make_Package_Instantiation (Sloc (Actual),\n-                   Defining_Unit_Name => I_Pack,\n-                   Name =>\n+                   Defining_Unit_Name   => I_Pack,\n+                   Name                 =>\n                      New_Occurrence_Of\n                        (Get_Instance_Of (Gen_Parent), Sloc (Actual)),\n                    Generic_Associations =>\n@@ -9640,7 +9608,7 @@ package body Sem_Ch12 is\n          end if;\n \n          Error_Msg_NE\n-           (\"expect subprogram or entry name in instantiation of&\",\n+           (\"expect subprogram or entry name in instantiation of &\",\n             Instantiation_Node, Formal_Sub);\n          Abandon_Instantiation (Instantiation_Node);\n       end Valid_Actual_Subprogram;\n@@ -9924,11 +9892,11 @@ package body Sem_Ch12 is\n \n          if No (Actual) then\n             Error_Msg_NE\n-              (\"missing actual&\",\n+              (\"missing actual &\",\n                Instantiation_Node, Gen_Obj);\n             Error_Msg_NE\n               (\"\\in instantiation of & declared#\",\n-                 Instantiation_Node, Scope (A_Gen_Obj));\n+               Instantiation_Node, Scope (A_Gen_Obj));\n             Abandon_Instantiation (Instantiation_Node);\n          end if;\n \n@@ -10023,8 +9991,7 @@ package body Sem_Ch12 is\n          Resolve (Actual, Ftyp);\n \n          if not Denotes_Variable (Actual) then\n-            Error_Msg_NE\n-              (\"actual for& must be a variable\", Actual, Gen_Obj);\n+            Error_Msg_NE (\"actual for& must be a variable\", Actual, Gen_Obj);\n \n          elsif Base_Type (Ftyp) /= Base_Type (Etype (Actual)) then\n \n@@ -10220,9 +10187,8 @@ package body Sem_Ch12 is\n \n       if Ada_Version >= Ada_2005\n         and then Present (Actual_Decl)\n-        and then\n-          Nkind_In (Actual_Decl, N_Formal_Object_Declaration,\n-                                 N_Object_Declaration)\n+        and then Nkind_In (Actual_Decl, N_Formal_Object_Declaration,\n+                                        N_Object_Declaration)\n         and then Nkind (Analyzed_Formal) = N_Formal_Object_Declaration\n         and then not Has_Null_Exclusion (Actual_Decl)\n         and then Has_Null_Exclusion (Analyzed_Formal)\n@@ -10509,8 +10475,7 @@ package body Sem_Ch12 is\n                if Nkind (Defining_Unit_Name (Act_Spec)) =\n                                               N_Defining_Program_Unit_Name\n                then\n-                  Set_Scope\n-                    (Defining_Entity (Inst_Node), Scope (Act_Decl_Id));\n+                  Set_Scope (Defining_Entity (Inst_Node), Scope (Act_Decl_Id));\n                end if;\n             end if;\n \n@@ -10791,7 +10756,7 @@ package body Sem_Ch12 is\n \n          --  If there is a formal subprogram with the same name as the unit\n          --  itself, do not add this renaming declaration. This is a temporary\n-         --  fix for one ACVC test. ???\n+         --  fix for one ACATS test. ???\n \n          Prev_Formal := First_Entity (Pack_Id);\n          while Present (Prev_Formal) loop\n@@ -10993,15 +10958,15 @@ package body Sem_Ch12 is\n          then\n             Error_Msg_NE\n               (\"actual for& cannot be a type with predicate\",\n-                 Instantiation_Node, A_Gen_T);\n+               Instantiation_Node, A_Gen_T);\n \n          elsif No_Dynamic_Predicate_On_Actual (A_Gen_T)\n            and then Has_Predicates (Act_T)\n            and then not Has_Static_Predicate_Aspect (Act_T)\n          then\n             Error_Msg_NE\n               (\"actual for& cannot be a type with a dynamic predicate\",\n-                 Instantiation_Node, A_Gen_T);\n+               Instantiation_Node, A_Gen_T);\n          end if;\n       end Diagnose_Predicated_Actual;\n \n@@ -11473,9 +11438,9 @@ package body Sem_Ch12 is\n \n             elsif Nkind (Parent (Act_T)) = N_Full_Type_Declaration\n               and then Nkind (Type_Definition (Parent (Act_T))) =\n-                         N_Derived_Type_Definition\n-              and then not Synchronized_Present (Type_Definition\n-                             (Parent (Act_T)))\n+                                                 N_Derived_Type_Definition\n+              and then not Synchronized_Present\n+                             (Type_Definition (Parent (Act_T)))\n             then\n                Error_Msg_N\n                  (\"actual of synchronized type must be synchronized\", Actual);\n@@ -11506,16 +11471,14 @@ package body Sem_Ch12 is\n            and then not Unknown_Discriminants_Present (Formal)\n            and then Is_Indefinite_Subtype (Act_T)\n          then\n-            Error_Msg_N\n-              (\"actual subtype must be constrained\", Actual);\n+            Error_Msg_N (\"actual subtype must be constrained\", Actual);\n             Abandon_Instantiation (Actual);\n          end if;\n \n          if not Unknown_Discriminants_Present (Formal) then\n             if Is_Constrained (Ancestor) then\n                if not Is_Constrained (Act_T) then\n-                  Error_Msg_N\n-                    (\"actual subtype must be constrained\", Actual);\n+                  Error_Msg_N (\"actual subtype must be constrained\", Actual);\n                   Abandon_Instantiation (Actual);\n                end if;\n \n@@ -11559,8 +11522,8 @@ package body Sem_Ch12 is\n                     No (Corresponding_Discriminant (Actual_Discr))\n                   then\n                      Error_Msg_NE\n-                       (\"discriminant & does not correspond \" &\n-                        \"to ancestor discriminant\", Actual, Actual_Discr);\n+                       (\"discriminant & does not correspond \"\n+                        & \"to ancestor discriminant\", Actual, Actual_Discr);\n                      Abandon_Instantiation (Actual);\n                   end if;\n \n@@ -11711,13 +11674,13 @@ package body Sem_Ch12 is\n                                  Anc_F_Type := Etype (Anc_Formal);\n                                  Act_F_Type := Etype (Act_Formal);\n \n-                                 if Ekind (Anc_F_Type)\n-                                      = E_Anonymous_Access_Type\n+                                 if Ekind (Anc_F_Type) =\n+                                                        E_Anonymous_Access_Type\n                                  then\n                                     Anc_F_Type := Designated_Type (Anc_F_Type);\n \n-                                    if Ekind (Act_F_Type)\n-                                         = E_Anonymous_Access_Type\n+                                    if Ekind (Act_F_Type) =\n+                                                        E_Anonymous_Access_Type\n                                     then\n                                        Act_F_Type :=\n                                          Designated_Type (Act_F_Type);\n@@ -11769,14 +11732,14 @@ package body Sem_Ch12 is\n                                     Anc_F_Type := Etype (Anc_Subp);\n                                     Act_F_Type := Etype (Act_Subp);\n \n-                                    if Ekind (Anc_F_Type)\n-                                         = E_Anonymous_Access_Type\n+                                    if Ekind (Anc_F_Type) =\n+                                                        E_Anonymous_Access_Type\n                                     then\n                                        Anc_F_Type :=\n                                          Designated_Type (Anc_F_Type);\n \n-                                       if Ekind (Act_F_Type)\n-                                            = E_Anonymous_Access_Type\n+                                       if Ekind (Act_F_Type) =\n+                                                        E_Anonymous_Access_Type\n                                        then\n                                           Act_F_Type :=\n                                             Designated_Type (Act_F_Type);\n@@ -11804,9 +11767,8 @@ package body Sem_Ch12 is\n                                       and then Anc_F_Type /= Act_F_Type\n                                       and then\n                                         Has_Controlling_Result (Anc_Subp)\n-                                      and then\n-                                        not Is_Tagged_Ancestor\n-                                              (Anc_F_Type, Act_F_Type)\n+                                      and then not Is_Tagged_Ancestor\n+                                                     (Anc_F_Type, Act_F_Type)\n                                     then\n                                        Subprograms_Correspond := False;\n                                     end if;\n@@ -11818,10 +11780,9 @@ package body Sem_Ch12 is\n \n                                  if Subprograms_Correspond then\n                                     Error_Msg_NE\n-                                      (\"abstract subprogram & overrides \" &\n-                                       \"nonabstract subprogram of ancestor\",\n-                                       Actual,\n-                                       Act_Subp);\n+                                      (\"abstract subprogram & overrides \"\n+                                       & \"nonabstract subprogram of ancestor\",\n+                                       Actual, Act_Subp);\n                                  end if;\n                               end if;\n                            end if;\n@@ -11853,8 +11814,8 @@ package body Sem_Ch12 is\n                null;\n             else\n                Error_Msg_NE\n-                 (\"actual for non-limited & cannot be a limited type\", Actual,\n-                  Gen_T);\n+                 (\"actual for non-limited & cannot be a limited type\",\n+                  Actual, Gen_T);\n                Explain_Limited_Type (Act_T, Actual);\n                Abandon_Instantiation (Actual);\n             end if;\n@@ -11964,7 +11925,7 @@ package body Sem_Ch12 is\n          if not Is_Interface (Act_T) then\n             Error_Msg_NE\n               (\"actual for formal interface type must be an interface\",\n-                Actual, Gen_T);\n+               Actual, Gen_T);\n \n          elsif Is_Limited_Type (Act_T) /= Is_Limited_Type (A_Gen_T)\n            or else Is_Task_Interface (A_Gen_T) /= Is_Task_Interface (Act_T)\n@@ -12162,7 +12123,7 @@ package body Sem_Ch12 is\n                if not Is_Discrete_Type (Act_T) then\n                   Error_Msg_NE\n                     (\"expect discrete type in instantiation of&\",\n-                       Actual, Gen_T);\n+                     Actual, Gen_T);\n                   Abandon_Instantiation (Actual);\n                end if;\n \n@@ -12275,9 +12236,8 @@ package body Sem_Ch12 is\n             Set_Generic_Parent_Type (Decl_Node, Ancestor);\n          end if;\n \n-      elsif Nkind_In (Def,\n-        N_Formal_Private_Type_Definition,\n-        N_Formal_Incomplete_Type_Definition)\n+      elsif Nkind_In (Def, N_Formal_Private_Type_Definition,\n+                           N_Formal_Incomplete_Type_Definition)\n       then\n          Set_Generic_Parent_Type (Decl_Node, A_Gen_T);\n       end if;\n@@ -12474,8 +12434,8 @@ package body Sem_Ch12 is\n            and then Nkind (True_Parent) /= N_Compilation_Unit\n          loop\n             if Nkind (True_Parent) = N_Package_Declaration\n-                 and then\n-               Nkind (Original_Node (True_Parent)) = N_Package_Instantiation\n+              and then\n+                Nkind (Original_Node (True_Parent)) = N_Package_Instantiation\n             then\n                --  Parent is a compilation unit that is an instantiation.\n                --  Instantiation node has been replaced with package decl.\n@@ -12993,8 +12953,9 @@ package body Sem_Ch12 is\n                   --  provide additional warning which might explain the error.\n \n                   Set_Is_Immediately_Visible (Cur, Vis);\n-                  Error_Msg_NE (\"& hides outer unit with the same name??\",\n-                    N, Defining_Unit_Name (N));\n+                  Error_Msg_NE\n+                    (\"& hides outer unit with the same name??\",\n+                     N, Defining_Unit_Name (N));\n                end if;\n \n                Abandon_Instantiation (Act);\n@@ -14102,8 +14063,8 @@ package body Sem_Ch12 is\n                        Make_Explicit_Dereference (Loc,\n                           Prefix => Make_Function_Call (Loc,\n                             Name =>\n-                              New_Occurrence_Of (Entity (Name (Prefix (N2))),\n-                                                 Loc))));\n+                              New_Occurrence_Of\n+                                (Entity (Name (Prefix (N2))), Loc))));\n \n                   else\n                      Set_Associated_Node (N, Empty);\n@@ -14144,6 +14105,7 @@ package body Sem_Ch12 is\n \n                   if No (N2) then\n                      Typ := Empty;\n+\n                   else\n                      Typ := Etype (N2);\n \n@@ -14183,19 +14145,20 @@ package body Sem_Ch12 is\n                        and then Comes_From_Source (Typ)\n                      then\n                         if Is_Immediately_Visible (Scope (Typ)) then\n-                           Nam := Make_Selected_Component (Loc,\n-                             Prefix =>\n-                               Make_Identifier (Loc, Chars (Scope (Typ))),\n-                             Selector_Name =>\n-                               Make_Identifier (Loc, Chars (Typ)));\n+                           Nam :=\n+                             Make_Selected_Component (Loc,\n+                               Prefix        =>\n+                                 Make_Identifier (Loc, Chars (Scope (Typ))),\n+                               Selector_Name =>\n+                                 Make_Identifier (Loc, Chars (Typ)));\n                         else\n                            Nam := Make_Identifier (Loc, Chars (Typ));\n                         end if;\n \n                         Qual :=\n                           Make_Qualified_Expression (Loc,\n                             Subtype_Mark => Nam,\n-                            Expression => Relocate_Node (N));\n+                            Expression   => Relocate_Node (N));\n                      end if;\n                   end if;\n \n@@ -14472,8 +14435,8 @@ package body Sem_Ch12 is\n       end case;\n \n       if not OK then\n-         Error_Msg_N (\"attribute reference has wrong profile for subprogram\",\n-           Def);\n+         Error_Msg_N\n+           (\"attribute reference has wrong profile for subprogram\", Def);\n       end if;\n    end Valid_Default_Attribute;\n "}, {"sha": "2f22a9af68582023646717b091f81b619f41e891", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a779058e1ebd6e68771f25062e95f3bb7ff48ab/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1a779058e1ebd6e68771f25062e95f3bb7ff48ab", "patch": "@@ -3457,19 +3457,18 @@ package body Sem_Ch8 is\n       --  points of call within an instance. Wrappers are generated if formal\n       --  subprogram is subject to axiomatization.\n \n+      --  The types in the wrapper profiles are obtained from (instances of)\n+      --  the types of the formal subprogram.\n+\n       if Is_Actual\n         and then GNATprove_Mode\n         and then Present (Containing_Package_With_Ext_Axioms (Formal_Spec))\n         and then not Inside_A_Generic\n       then\n          if Ekind (Old_S) = E_Function then\n-            Rewrite (N, Build_Function_Wrapper (New_S, Old_S));\n+            Rewrite (N, Build_Function_Wrapper (Formal_Spec, Old_S));\n             Analyze (N);\n \n-         --  For wrappers of operators, the types are obtained from (the\n-         --  instances of) the types of the formal subprogram, not from the\n-         --  actual subprogram, that carries predefined types.\n-\n          elsif Ekind (Old_S) = E_Operator then\n             Rewrite (N, Build_Operator_Wrapper (Formal_Spec, Old_S));\n             Analyze (N);"}]}