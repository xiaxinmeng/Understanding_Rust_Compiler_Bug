{"sha": "0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1NWVhYjdhMzBiYjk4ZGM0N2E0YTIzZGUzZGMxZGE4NTUwM2JmYg==", "commit": {"author": {"name": "Caroline Tice", "email": "ctice@apple.com", "date": "2004-04-05T19:23:27Z"}, "committer": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2004-04-05T19:23:27Z"}, "message": "gcc.c (combine_flag): New global variable, for new driver option.\n\n2004-04-05  Caroline Tice  <ctice@apple.com>\n\n        * gcc.c (combine_flag): New global variable, for new driver option.\n        (struct compiler): Add two new fields, to be used when\n        combining multiple input files in a single pass (IMA).\n        (default_compilers):  Add values for the new fields to all\n        compiler entries. Modify the \"@c\" compiler entry for doing IMA\n        properly with \"-save-temps\" and the \"combine\" flag.\n        (option_map):  Add new driver option, \"--combine\", to tell driver\n        to pass multiple input files to compiler at one time.\n        (have_o_argbuf_index): New global variable.\n        (store_arg): Modify to assign value to have_o_argbuf_index.\n        (struct infile):  Add three new fields, to help with IMA.\n        (display_help): Add help for new \"combine\" option.\n        (process_command): Remove local variable have_o; add code to check\n        for new \"combine\" option; remove assignment to combine_inputs.\n        (do_spec_1):  Modify to deal with IMA better.\n        (main): Make variable 'lang_n_infiles' local to entire function\n        rather than to a single block.  Use flag combine_flag to\n        determine whether to do IMA or not; Modify loop initializing\n        infiles to deal properly with linker files.\n        Add code for doing preprocessing in presence of\n        IMA with \"-save-temps\" flag.  Modify \"main\" loop to handle\n        multiple input files, in multiple languages, with or without\n        preprocessing,  gracefully.\n        * toplev.c (set_src_pwd): Modify to not complain if attempting to\n        re-set it to same directory it's previously been set to (avoid\n        irritating, meaningless warning messages when doing IMA with\n        save-temps).\n        * doc/invoke.texi: Add \"-combine\" to list of Overall Options;\n        remove documentation about IMA that is no longer accurate; Add\n        documentation explaining what \"-combine\" does.\n        * ada/lang-specs.h: Add initialization values for new fields in\n        \"struct compiler\".\n        * cp/lang-specs.h: Likewise.\n        * f/lang-specs.h: Likewise.\n        * java/lang-specs.h: Likewise.\n        * objc/lang-specs.h: Likewise.\n        * treelang/lang-specs.h: Likewise.\n\nFix gcc driver to work properly with IMI.\n\nFrom-SVN: r80435", "tree": {"sha": "54ddbad12efc3bc6774bcd0268a91392513224da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54ddbad12efc3bc6774bcd0268a91392513224da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/comments", "author": null, "committer": null, "parents": [{"sha": "26be75dbef9e280475d6fdbd3f38955d511ca02d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26be75dbef9e280475d6fdbd3f38955d511ca02d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26be75dbef9e280475d6fdbd3f38955d511ca02d"}], "stats": {"total": 358, "additions": 265, "deletions": 93}, "files": [{"sha": "2704ee9a506a12e02f568235ec62eb4c75f03c0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -1,3 +1,43 @@\n+2004-04-05  Caroline Tice  <ctice@apple.com>\n+\n+        * gcc.c (combine_flag): New global variable, for new driver option.\n+\t(struct compiler): Add two new fields, to be used when\n+\tcombining multiple input files in a single pass (IMA).\n+\t(default_compilers):  Add values for the new fields to all \n+\tcompiler entries. Modify the \"@c\" compiler entry for doing IMA \n+\tproperly with \"-save-temps\" and the \"combine\" flag.\n+\t(option_map):  Add new driver option, \"--combine\", to tell driver\n+\tto pass multiple input files to compiler at one time.\n+\t(have_o_argbuf_index): New global variable.\n+\t(store_arg): Modify to assign value to have_o_argbuf_index.\n+\t(struct infile):  Add three new fields, to help with IMA.\n+\t(display_help): Add help for new \"combine\" option.\n+\t(process_command): Remove local variable have_o; add code to check\n+\tfor new \"combine\" option; remove assignment to combine_inputs.\n+\t(do_spec_1):  Modify to deal with IMA better.\n+\t(main): Make variable 'lang_n_infiles' local to entire function\n+\trather than to a single block.  Use flag combine_flag to \n+\tdetermine whether to do IMA or not; Modify loop initializing \n+\tinfiles to deal properly with linker files.\n+\tAdd code for doing preprocessing in presence of\n+\tIMA with \"-save-temps\" flag.  Modify \"main\" loop to handle\n+\tmultiple input files, in multiple languages, with or without\n+\tpreprocessing,  gracefully.\n+\t* toplev.c (set_src_pwd): Modify to not complain if attempting to\n+\tre-set it to same directory it's previously been set to (avoid\n+\tirritating, meaningless warning messages when doing IMA with \n+\tsave-temps).\n+\t* doc/invoke.texi: Add \"-combine\" to list of Overall Options;\n+\tremove documentation about IMA that is no longer accurate; Add\n+\tdocumentation explaining what \"-combine\" does.\n+\t* ada/lang-specs.h: Add initialization values for new fields in\n+\t\"struct compiler\".\n+\t* cp/lang-specs.h: Likewise.\n+\t* f/lang-specs.h: Likewise.\n+\t* java/lang-specs.h: Likewise.\n+\t* objc/lang-specs.h: Likewise.\n+\t* treelang/lang-specs.h: Likewise.\n+\n 2004-04-05  David Edelsohn\n \n \t* config/rs6000/rs6000.c (VTABLE_NAME_P): Add _ZTI to special"}, {"sha": "c1ad1ae36f8f6b7db4c23250eea273d407f59d11", "filename": "gcc/ada/lang-specs.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fada%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fada%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flang-specs.h?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -27,8 +27,8 @@\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    GNAT.  */\n \n-  {\".ads\", \"@ada\", 0},\n-  {\".adb\", \"@ada\", 0},\n+  {\".ads\", \"@ada\", 0, 0, 0},\n+  {\".adb\", \"@ada\", 0, 0, 0},\n   {\"@ada\",\n    \"\\\n  %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n@@ -40,4 +40,4 @@\n     %{g*} %{O*} %{W*} %{w} %{p} %{pg:-p} %{m*} %{a} %{f*} %{d*}\\\n     %{!S:%{o*:%w%*-gnatO}} \\\n     %i %{S:%W{o*}%{!o*:-o %b.s}} \\\n-    %{!gnatc*:%{!gnatz*:%{!gnats*:%(invoke_as)}}}\", 0},\n+    %{!gnatc*:%{!gnatz*:%{!gnats*:%(invoke_as)}}}\", 0, 0, 0},"}, {"sha": "836ea3407f5f825686a04d66fefac8636575294a", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -26,15 +26,15 @@ Boston, MA 02111-1307, USA.  */\n #define CPLUSPLUS_CPP_SPEC 0\n #endif\n \n-  {\".cc\",  \"@c++\", 0},\n-  {\".cp\",  \"@c++\", 0},\n-  {\".cxx\", \"@c++\", 0},\n-  {\".cpp\", \"@c++\", 0},\n-  {\".c++\", \"@c++\", 0},\n-  {\".C\",   \"@c++\", 0},\n-  {\".CPP\", \"@c++\", 0},\n-  {\".H\",   \"@c++-header\", 0},\n-  {\".hh\",  \"@c++-header\", 0},\n+  {\".cc\",  \"@c++\", 0, 0, 0},\n+  {\".cp\",  \"@c++\", 0, 0, 0},\n+  {\".cxx\", \"@c++\", 0, 0, 0},\n+  {\".cpp\", \"@c++\", 0, 0, 0},\n+  {\".c++\", \"@c++\", 0, 0, 0},\n+  {\".C\",   \"@c++\", 0, 0, 0},\n+  {\".CPP\", \"@c++\", 0, 0, 0},\n+  {\".H\",   \"@c++-header\", 0, 0, 0},\n+  {\".hh\",  \"@c++-header\", 0, 0, 0},\n   {\"@c++-header\",\n     \"%{E|M|MM:cc1plus -E %(cpp_options) %2 %(cpp_debug_options)}\\\n      %{!E:%{!M:%{!MM:\\\n@@ -44,7 +44,7 @@ Boston, MA 02111-1307, USA.  */\n \t      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\\\n \t%(cc1_options) %2 %{+e1*}\\\n         -o %g.s %{!o*:--output-pch=%i.gch} %W{o*:--output-pch=%*}%V}}}\",\n-     CPLUSPLUS_CPP_SPEC},\n+     CPLUSPLUS_CPP_SPEC, 0, 0},\n   {\"@c++\",\n     \"%{E|M|MM:cc1plus -E %(cpp_options) %2 %(cpp_debug_options)}\\\n      %{!E:%{!M:%{!MM:\\\n@@ -54,9 +54,9 @@ Boston, MA 02111-1307, USA.  */\n \t      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\\\n \t%(cc1_options) %2 %{+e1*}\\\n        %{!fsyntax-only:%(invoke_as)}}}}\",\n-     CPLUSPLUS_CPP_SPEC},\n+     CPLUSPLUS_CPP_SPEC, 0, 0},\n   {\".ii\", \"@c++-cpp-output\", 0},\n   {\"@c++-cpp-output\",\n    \"%{!M:%{!MM:%{!E:\\\n     cc1plus -fpreprocessed %i %(cc1_options) %2 %{+e*}\\\n-    %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+    %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},"}, {"sha": "8afebf5fcbb8e510b7d2db95eb40b5b778a3f65b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -155,7 +155,7 @@ in the following sections.\n @table @emph\n @item Overall Options\n @xref{Overall Options,,Options Controlling the Kind of Output}.\n-@gccoptlist{-c  -S  -E  -o @var{file}  -pipe  -pass-exit-codes  @gol\n+@gccoptlist{-c  -S  -E  -o @var{file}  -combine -pipe  -pass-exit-codes  @gol\n -x @var{language}  -v  -###  --help  --target-help  --version}\n \n @item C Language Options\n@@ -868,10 +868,6 @@ Place output in file @var{file}.  This applies regardless to whatever\n sort of output is being produced, whether it be an executable file,\n an object file, an assembler file or preprocessed C code.\n \n-If you specify @option{-o} when compiling more than one input file, or\n-you are producing an executable file as output, all the source files\n-on the command line will be compiled at once.\n-\n If @option{-o} is not specified, the default is to put an executable file\n in @file{a.out}, the object file for @file{@var{source}.@var{suffix}} in\n @file{@var{source}.o}, its assembler file in @file{@var{source}.s}, and\n@@ -896,6 +892,21 @@ various stages of compilation.  This fails to work on some systems where\n the assembler is unable to read from a pipe; but the GNU assembler has\n no trouble.\n \n+@item -combine\n+@opindex combine\n+If you are compiling multiple source files, this option tells the driver\n+to pass all the source files to the compiler at once (for those \n+languages for which the compiler can handle this).  This will allow\n+intermodule analysis (IMA) to be performed by the compiler.  Currently the only\n+language for which this is supported is C.  If you pass source files for\n+multiple languages to the driver, using this option, the driver will invoke\n+the compiler(s) that support IMA once each, passing each compiler all the\n+source files appropriate for it.  For those languages that do not support\n+IMA this option will be ignored, and the compiler will be invoked once for\n+each source file in that language.  If you use this option in conjunction\n+with -save-temps, the compiler will generate multiple pre-processed files\n+(one for each source file), but only one (combined) .o or .s file. \n+\n @item --help\n @opindex help\n Print (on the standard output) a description of the command line options"}, {"sha": "f1281d6767293412815af60faece1bcc9d02857e", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -25,23 +25,23 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    g77.  */\n \n-  {\".F\",   \"@f77-cpp-input\", 0},\n-  {\".fpp\", \"@f77-cpp-input\", 0},\n-  {\".FPP\", \"@f77-cpp-input\", 0},\n+  {\".F\",   \"@f77-cpp-input\", 0, 0, 0},\n+  {\".fpp\", \"@f77-cpp-input\", 0, 0, 0},\n+  {\".FPP\", \"@f77-cpp-input\", 0, 0, 0},\n   {\"@f77-cpp-input\",\n    \"cc1 -E -traditional-cpp -D_LANGUAGE_FORTRAN %(cpp_options) \\\n         %{E|M|MM:%(cpp_debug_options)}\\\n         %{!M:%{!MM:%{!E: -o %|.f |\\n\\\n-    f771 %|.f %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n-  {\".r\", \"@ratfor\", 0},\n+    f771 %|.f %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n+  {\".r\", \"@ratfor\", 0, 0, 0},\n   {\"@ratfor\",\n    \"%{C:%{!E:%eGCC does not support -C without using -E}}\\\n     %{CC:%{!E:%eGCC does not support -CC without using -E}}\\\n     ratfor %{C} %{CC} %{v} %{E:%W{o*}} %{!E: %{!pipe:-o %g.f} %i |\\n\\\n-    f771 %m.f %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}\", 0},\n-  {\".f\",   \"@f77\", 0},\n-  {\".for\", \"@f77\", 0},\n-  {\".FOR\", \"@f77\", 0},\n+    f771 %m.f %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},\n+  {\".f\",   \"@f77\", 0, 0, 0},\n+  {\".for\", \"@f77\", 0, 0, 0},\n+  {\".FOR\", \"@f77\", 0, 0, 0},\n   {\"@f77\",\n    \"%{!M:%{!MM:%{!E:f771 %i %(cc1_options) %{I*}\\\n-\t%{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+\t%{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},"}, {"sha": "f90cba3d1368c3c0e53691be5fee83a0a4d7ed74", "filename": "gcc/gcc.c", "status": "modified", "additions": 163, "deletions": 47, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -218,6 +218,10 @@ static const char *target_sysroot_hdrs_suffix = 0;\n \n static int save_temps_flag;\n \n+/* Nonzero means pass multiple source files to the compiler at one time.  */\n+\n+static int combine_flag = 0;\n+\n /* Nonzero means use pipes to communicate between subprocesses.\n    Overridden by either of the above two flags.  */\n \n@@ -861,6 +865,10 @@ struct compiler\n   const char *cpp_spec;         /* If non-NULL, substitute this spec\n \t\t\t\t   for `%C', rather than the usual\n \t\t\t\t   cpp_spec.  */\n+  const int combinable;          /* If non-zero, compiler can deal with\n+\t\t\t\t    multiple source files at once (IMA).  */\n+  const int needs_preprocessing; /* If non-zero, source files need to\n+\t\t\t\t    be run through a preprocessor.  */\n };\n \n /* Pointer to a vector of `struct compiler' that gives the spec for\n@@ -886,37 +894,46 @@ static const struct compiler default_compilers[] =\n      were not present when we built the driver, we will hit these copies\n      and be given a more meaningful error than \"file not used since\n      linking is not done\".  */\n-  {\".m\",  \"#Objective-C\", 0}, {\".mi\",  \"#Objective-C\", 0},\n-  {\".cc\", \"#C++\", 0}, {\".cxx\", \"#C++\", 0}, {\".cpp\", \"#C++\", 0},\n-  {\".cp\", \"#C++\", 0}, {\".c++\", \"#C++\", 0}, {\".C\", \"#C++\", 0},\n-  {\".CPP\", \"#C++\", 0}, {\".ii\", \"#C++\", 0},\n-  {\".ads\", \"#Ada\", 0}, {\".adb\", \"#Ada\", 0},\n-  {\".f\", \"#Fortran\", 0}, {\".for\", \"#Fortran\", 0}, {\".fpp\", \"#Fortran\", 0},\n-  {\".F\", \"#Fortran\", 0}, {\".FOR\", \"#Fortran\", 0}, {\".FPP\", \"#Fortran\", 0},\n-  {\".r\", \"#Ratfor\", 0},\n-  {\".p\", \"#Pascal\", 0}, {\".pas\", \"#Pascal\", 0},\n-  {\".java\", \"#Java\", 0}, {\".class\", \"#Java\", 0},\n-  {\".zip\", \"#Java\", 0}, {\".jar\", \"#Java\", 0},\n+  {\".m\",  \"#Objective-C\", 0, 0, 0}, {\".mi\",  \"#Objective-C\", 0, 0, 0},\n+  {\".cc\", \"#C++\", 0, 0, 0}, {\".cxx\", \"#C++\", 0, 0, 0}, \n+  {\".cpp\", \"#C++\", 0, 0, 0}, {\".cp\", \"#C++\", 0, 0, 0}, \n+  {\".c++\", \"#C++\", 0, 0, 0}, {\".C\", \"#C++\", 0, 0, 0},\n+  {\".CPP\", \"#C++\", 0, 0, 0}, {\".ii\", \"#C++\", 0, 0, 0},\n+  {\".ads\", \"#Ada\", 0, 0, 0}, {\".adb\", \"#Ada\", 0, 0, 0},\n+  {\".f\", \"#Fortran\", 0, 0, 0}, {\".for\", \"#Fortran\", 0, 0, 0}, \n+  {\".fpp\", \"#Fortran\", 0, 0, 0}, {\".F\", \"#Fortran\", 0, 0, 0}, \n+  {\".FOR\", \"#Fortran\", 0, 0, 0}, {\".FPP\", \"#Fortran\", 0, 0, 0},\n+  {\".r\", \"#Ratfor\", 0, 0, 0},\n+  {\".p\", \"#Pascal\", 0, 0, 0}, {\".pas\", \"#Pascal\", 0, 0, 0},\n+  {\".java\", \"#Java\", 0, 0, 0}, {\".class\", \"#Java\", 0, 0, 0},\n+  {\".zip\", \"#Java\", 0, 0, 0}, {\".jar\", \"#Java\", 0, 0, 0},\n   /* Next come the entries for C.  */\n-  {\".c\", \"@c\", 0},\n+  {\".c\", \"@c\", 0, 1, 1},\n   {\"@c\",\n    /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n           %{traditional|ftraditional:\\\n %eGNU C no longer supports -traditional without -E}\\\n+       %{!combine:\\\n \t  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n \t\t%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i} \\n\\\n \t\t    cc1 -fpreprocessed %{save-temps:%b.i} %{!save-temps:%g.i} \\\n \t\t\t%(cc1_options)}\\\n \t  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)}}}\\\n-        %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+          %{!fsyntax-only:%(invoke_as)}} \\\n+      %{combine:\\\n+\t  %{save-temps|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \\\n+\t\t%(cpp_options) -o %{save-temps:%b.i} %{!save-temps:%g.i}}\\\n+\t  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\\\n+\t\tcc1 %(cpp_unique_options) %(cc1_options)}}\\\n+                %{!fsyntax-only:%(invoke_as)}}}}}}\", 0, 1, 1},\n   {\"-\",\n    \"%{!E:%e-E required when input is from standard input}\\\n-    %(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)\", 0},\n-  {\".h\", \"@c-header\", 0},\n+    %(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)\", 0, 0, 0},\n+  {\".h\", \"@c-header\", 0, 0, 0},\n   {\"@c-header\",\n    /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps is given.  */\n@@ -931,14 +948,14 @@ static const struct compiler default_compilers[] =\n \t  %{!save-temps:%{!traditional-cpp:%{!no-integrated-cpp:\\\n \t\tcc1 %(cpp_unique_options) %(cc1_options)\\\n                     -o %g.s %{!o*:--output-pch=%i.gch}\\\n-                    %W{o*:--output-pch=%*}%V}}}}}}\", 0},\n-  {\".i\", \"@cpp-output\", 0},\n+                    %W{o*:--output-pch=%*}%V}}}}}}\", 0, 0, 0},\n+  {\".i\", \"@cpp-output\", 0, 1, 0},\n   {\"@cpp-output\",\n    \"%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n-  {\".s\", \"@assembler\", 0},\n+  {\".s\", \"@assembler\", 0, 1, 0},\n   {\"@assembler\",\n-   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_debug) %(asm_options) %i %A }}}}\", 0},\n-  {\".S\", \"@assembler-with-cpp\", 0},\n+   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_debug) %(asm_options) %i %A }}}}\", 0, 1, 0},\n+  {\".S\", \"@assembler-with-cpp\", 0, 1, 0},\n   {\"@assembler-with-cpp\",\n #ifdef AS_NEEDS_DASH_FOR_PIPED_INPUT\n    \"%(trad_capable_cpp) -lang-asm %(cpp_options)\\\n@@ -951,11 +968,11 @@ static const struct compiler default_compilers[] =\n       %{!M:%{!MM:%{!E:%{!S:-o %|.s |\\n\\\n        as %(asm_debug) %(asm_options) %m.s %A }}}}\"\n #endif\n-   , 0},\n+   , 0, 1, 0},\n \n #include \"specs.h\"\n   /* Mark end of table.  */\n-  {0, 0, 0}\n+  {0, 0, 0, 0, 0}\n };\n \n /* Number of elements in default_compilers, not counting the terminator.  */\n@@ -1009,6 +1026,7 @@ static const struct option_map option_map[] =\n    {\"--classpath\", \"-fclasspath=\", \"aj\"},\n    {\"--bootclasspath\", \"-fbootclasspath=\", \"aj\"},\n    {\"--CLASSPATH\", \"-fclasspath=\", \"aj\"},\n+   {\"--combine\", \"-combine\", 0},\n    {\"--comments\", \"-C\", 0},\n    {\"--comments-in-macros\", \"-CC\", 0},\n    {\"--compile\", \"-c\", 0},\n@@ -1778,6 +1796,11 @@ static int argbuf_length;\n \n static int argbuf_index;\n \n+/* Position in the argbuf array containing the name of the output file\n+   (the value associated with the \"-o\" flag).  */\n+\n+static int have_o_argbuf_index = 0;\n+\n /* This is the list of suffixes and codes (%g/%u/%U/%j) and the associated\n    temp file.  If the HOST_BIT_BUCKET is used for %j, no entry is made for\n    it here.  */\n@@ -1836,6 +1859,8 @@ store_arg (const char *arg, int delete_always, int delete_failure)\n   argbuf[argbuf_index++] = arg;\n   argbuf[argbuf_index] = 0;\n \n+  if (strcmp (arg, \"-o\") == 0)\n+    have_o_argbuf_index = argbuf_index;\n   if (delete_always || delete_failure)\n     record_temp_file (arg, delete_always, delete_failure);\n }\n@@ -2891,6 +2916,9 @@ struct infile\n {\n   const char *name;\n   const char *language;\n+  struct compiler *incompiler;\n+  bool compiled;\n+  bool preprocessed;\n };\n \n /* Also a vector of input files specified.  */\n@@ -3005,6 +3033,7 @@ display_help (void)\n   fputs (_(\"  -Xassembler <arg>        Pass <arg> on to the assembler\\n\"), stdout);\n   fputs (_(\"  -Xpreprocessor <arg>     Pass <arg> on to the preprocessor\\n\"), stdout);\n   fputs (_(\"  -Xlinker <arg>           Pass <arg> on to the linker\\n\"), stdout);\n+  fputs (_(\"  -combine                 Pass multiple source files to compiler at once\\n\"), stdout);\n   fputs (_(\"  -save-temps              Do not delete intermediate files\\n\"), stdout);\n   fputs (_(\"  -pipe                    Use pipes rather than intermediate files\\n\"), stdout);\n   fputs (_(\"  -time                    Time the execution of each subprocess\\n\"), stdout);\n@@ -3091,7 +3120,6 @@ process_command (int argc, const char **argv)\n   const char *spec_lang = 0;\n   int last_language_n_infiles;\n   int have_c = 0;\n-  int have_o = 0;\n   int lang_n_infiles = 0;\n #ifdef MODIFY_TARGET_NAME\n   int is_modify_target_name;\n@@ -3493,6 +3521,11 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  save_temps_flag = 1;\n \t  n_switches++;\n \t}\n+      else if (strcmp (argv[i], \"-combine\") == 0)\n+\t{\n+\t  combine_flag = 1;\n+\t  n_switches++;\n+\t}\n       else if (strcmp (argv[i], \"-specs\") == 0)\n \t{\n \t  struct user_specs *user = xmalloc (sizeof (struct user_specs));\n@@ -3635,7 +3668,6 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t      goto normal_switch;\n \n \t    case 'o':\n-\t      have_o = 1;\n #if defined(HAVE_TARGET_EXECUTABLE_SUFFIX)\n \t      if (! have_c)\n \t\t{\n@@ -3728,8 +3760,6 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t}\n     }\n \n-  combine_inputs = (have_c && have_o && lang_n_infiles > 1);\n-\n   if ((save_temps_flag || report_times) && use_pipes)\n     {\n       /* -save-temps overrides -pipe, so that temp files are produced */\n@@ -4777,7 +4807,12 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    if (combine_inputs)\n \t      {\n \t\tfor (i = 0; (int) i < n_infiles; i++)\n-\t\t  store_arg (infiles[i].name, 0, 0);\n+\t\t  if ((!infiles[i].language) || (infiles[i].language[0] != '*'))\n+\t\t    if (infiles[i].incompiler == input_file_compiler)\n+\t\t      {\n+\t\t\tstore_arg (infiles[i].name, 0, 0);\n+\t\t\tinfiles[i].compiled = true;\n+\t\t      }\n \t      }\n \t    else\n \t      {\n@@ -5919,6 +5954,7 @@ main (int argc, const char **argv)\n   size_t i;\n   int value;\n   int linker_was_run = 0;\n+  int lang_n_infiles = 0;\n   int num_linker_inputs = 0;\n   char *explicit_link_files;\n   char *specs_file;\n@@ -6314,28 +6350,99 @@ main (int argc, const char **argv)\n \n   explicit_link_files = xcalloc (1, n_infiles);\n \n-  if (combine_inputs)\n+  if (combine_flag)\n+    combine_inputs = true;\n+  else\n+    combine_inputs = false;\n+\n+  for (i = 0; (int) i < n_infiles; i++)\n     {\n-       int lang_n_infiles = 0;\n-       for (i = 0; (int) i < n_infiles; i++)\n-\t {\n-\t   const char *name = infiles[i].name;\n-\t   struct compiler *compiler\n-\t     = lookup_compiler (name, strlen (name), infiles[i].language);\n-\t   if (compiler == NULL)\n-\t     error (\"%s: linker input file unused because linking not done\",\n-\t\t    name);\n-\t   else if (lang_n_infiles > 0 && compiler != input_file_compiler)\n-\t     fatal (\"cannot specify -o with -c or -S and multiple languages\");\n-\t   else\n-\t     {\n-\t       lang_n_infiles++;\n-\t       input_file_compiler = compiler;\n-\t     }\n-\t }\n+      const char *name = infiles[i].name;\n+      struct compiler *compiler = lookup_compiler (name, \n+\t\t\t\t\t\t   strlen (name), \n+\t\t\t\t\t\t   infiles[i].language);\n+      \n+      if (compiler && !(compiler->combinable))\n+\tcombine_inputs = false;\n+      \n+      if (lang_n_infiles > 0 && compiler != input_file_compiler\n+\t  && infiles[i].language && infiles[i].language[0] != '*')\n+\tinfiles[i].incompiler = compiler;\n+      else if (compiler)\n+\t{\n+\t  lang_n_infiles++;\n+\t  input_file_compiler = compiler;\n+\t  infiles[i].incompiler = compiler;\n+\t}\n+      else\n+\t{\n+\t  /* Since there is no compiler for this input file, assume it is a\n+\t     linker file. */\n+\t  explicit_link_files[i] = 1;\n+\t  infiles[i].incompiler = NULL;\n+\t}\n+      infiles[i].compiled = false;\n+      infiles[i].preprocessed = false;\n     }\n   \n-  for (i = 0; (int) i < (combine_inputs ? 1 : n_infiles); i++)\n+  if (combine_flag && save_temps_flag)\n+    {\n+      bool save_combine_inputs = combine_inputs;\n+      /* Must do a separate pre-processing pass for C & Objective-C files, to\n+\t obtain individual .i files.  */\n+\n+      combine_inputs = false;\n+      for (i = 0; (int) i < n_infiles; i++)\n+\t{\n+\t  int this_file_error = 0;\n+\t  \n+\t  input_file_number = i;\n+\t  set_input (infiles[i].name);\n+\t  if (infiles[i].incompiler\n+\t      && (infiles[i].incompiler)->needs_preprocessing)\n+\t    input_file_compiler = infiles[i].incompiler;\n+\t  else\n+\t    continue;\n+\n+\t  if (input_file_compiler)\n+\t    {\n+\t      if (input_file_compiler->spec[0] == '#')\n+\t\t{\n+\t\t  error (\"%s: %s compiler not installed on this system\",\n+\t\t\t input_filename, &input_file_compiler->spec[1]);\n+\t\t  this_file_error = 1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  value = do_spec (input_file_compiler->spec);\n+\t\t  infiles[i].preprocessed = true;\n+\t\t  if (have_o_argbuf_index)\n+\t\t    infiles[i].name = argbuf[have_o_argbuf_index];\n+\t\t  else\n+\t\t    abort ();\n+\t\t  infiles[i].incompiler = lookup_compiler (infiles[i].name,\n+\t\t\t\t\t\t       strlen (infiles[i].name),\n+\t\t\t\t\t\t       infiles[i].language);\n+\n+\t\t  if (value < 0)\n+\t\t    {\n+\t\t      this_file_error = 1;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  if (this_file_error)\n+\t    {\n+\t      delete_failure_queue ();\n+\t      error_count++;\n+\t    }\n+\t  clear_failure_queue ();\n+\t}\n+      combine_inputs = save_combine_inputs;\n+    }\n+\n+  for (i = 0; (int) i < n_infiles; i++)\n     {\n       int this_file_error = 0;\n \n@@ -6344,6 +6451,9 @@ main (int argc, const char **argv)\n       input_file_number = i;\n       set_input (infiles[i].name);\n \n+      if (infiles[i].compiled)\n+\tcontinue;\n+\n       /* Use the same thing in %o, unless cp->spec says otherwise.  */\n \n       outfiles[i] = input_filename;\n@@ -6354,6 +6464,8 @@ main (int argc, const char **argv)\n \tinput_file_compiler\n \t  = lookup_compiler (infiles[i].name, input_filename_length,\n \t\t\t     infiles[i].language);\n+      else\n+\tinput_file_compiler = infiles[i].incompiler;\n \n       if (input_file_compiler)\n \t{\n@@ -6368,8 +6480,12 @@ main (int argc, const char **argv)\n \t  else\n \t    {\n \t      value = do_spec (input_file_compiler->spec);\n+\t      infiles[i].compiled = true;\n \t      if (value < 0)\n-\t\tthis_file_error = 1;\n+\t\t{\n+\t\t  this_file_error = 1;\n+\t\t  break;\n+\t\t}\n \t    }\n \t}\n "}, {"sha": "6449ec3309ecf2c9d87dfa6b2d4e5cc0cbb01a1e", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -26,16 +26,16 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    Java.  */\n \n-  {\".java\",   \"@java\" , 0},\n-  {\".class\",  \"@java\" , 0},\n-  {\".zip\",    \"@java\" , 0},\n-  {\".jar\",    \"@java\" , 0},\n+  {\".java\",   \"@java\" , 0, 0, 0},\n+  {\".class\",  \"@java\" , 0, 0, 0},\n+  {\".zip\",    \"@java\" , 0, 0, 0},\n+  {\".jar\",    \"@java\" , 0, 0, 0},\n   {\"@java\",\n    \"%{fjni:%{femit-class-files:%e-fjni and -femit-class-files are incompatible}}\\\n     %{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n     %{femit-class-file:%{!fsyntax-only:%e-femit-class-file should used along with -fsyntax-only}}\\\n     %{femit-class-files:%{!fsyntax-only:%e-femit-class-file should used along with -fsyntax-only}}\\\n     %{!E:jc1 %i %(jc1) %(cc1_options) %{+e*} %{I*}\\\n              %{MD:-MD_} %{MMD:-MMD_} %{M} %{MM} %{MA} %{MT*} %{MF*}\\\n-             %{!fsyntax-only:%(invoke_as)}}\", 0},\n+             %{!fsyntax-only:%(invoke_as)}}\", 0, 0, 0},\n "}, {"sha": "eb9e63713a90724edf2053a0590398d14224a1b8", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    objc.  */\n \n-  {\".m\", \"@objective-c\", 0},\n+  {\".m\", \"@objective-c\", 0, 0, 0},\n   {\"@objective-c\",\n      \"%{E|M|MM:%(trad_capable_cpp)\\\n           -lang-objc %(cpp_options) %(cpp_debug_options)}\\\n@@ -33,11 +33,11 @@ Boston, MA 02111-1307, USA.  */\n \t    cc1obj -fpreprocessed %{save-temps:%b.mi} %{!save-temps:%g.mi} %(cc1_options) %{print-objc-runtime-info} %{gen-decls}}\\\n \t%{!save-temps:%{!no-integrated-cpp:\\\n \t    cc1obj %(cpp_unique_options) %(cc1_options) %{print-objc-runtime-info} %{gen-decls}}}\\\n-        %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n-  {\".mi\", \"@objc-cpp-output\", 0},\n+        %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n+  {\".mi\", \"@objc-cpp-output\", 0, 0, 0},\n   {\"@objc-cpp-output\",\n      \"%{!M:%{!MM:%{!E:cc1obj -fpreprocessed %i %(cc1_options) %{print-objc-runtime-info} %{gen-decls}\\\n-\t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+\t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\", 0, 0, 0},\n   {\"@objective-c-header\",\n      \"%{E|M|MM:cc1obj -E %{traditional|ftraditional|traditional-cpp:-traditional-cpp}\\\n           %(cpp_options) %(cpp_debug_options)}\\\n@@ -51,4 +51,4 @@ Boston, MA 02111-1307, USA.  */\n \t%{!save-temps:%{!no-integrated-cpp:\\\n \t    cc1obj %(cpp_unique_options) %(cc1_options) %{print-objc-runtime-info} %{gen-decls}\\\n                         -o %g.s %{!o*:--output-pch=%i.gch}\\\n-                        %W{o*:--output-pch=%*}%V}}}}}\", 0},\n+                        %W{o*:--output-pch=%*}%V}}}}}\", 0, 0, 0},"}, {"sha": "fcfb99d2e66b297b707f19717740a1c9fe17eb38", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -1056,7 +1056,12 @@ bool\n set_src_pwd (const char *pwd)\n {\n   if (src_pwd)\n-    return false;\n+    {\n+      if (strcmp (src_pwd, pwd) == 0)\n+\treturn true;\n+      else\n+\treturn false;\n+    }\n \n   src_pwd = xstrdup (pwd);\n   return true;"}, {"sha": "1ca9c8cc89b07e5d720a03190ee7b7b1a6c41352", "filename": "gcc/treelang/lang-specs.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Ftreelang%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0855eab7a30bb98dc47a4a23de3dc1da85503bfb/gcc%2Ftreelang%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Flang-specs.h?ref=0855eab7a30bb98dc47a4a23de3dc1da85503bfb", "patch": "@@ -29,10 +29,10 @@ Boston, MA 02111-1307, USA.  */\n    \n */\n \n-{\".tree\", \"@treelang\", NULL},\n-{\".TREE\", \"@treelang\", NULL},\n-{\".tre\", \"@treelang\", NULL},\n-{\".TRE\", \"@treelang\", NULL},\n+{\".tree\", \"@treelang\", NULL, 0, 0},\n+{\".TREE\", \"@treelang\", NULL, 0, 0},\n+{\".tre\", \"@treelang\", NULL, 0, 0},\n+{\".TRE\", \"@treelang\", NULL, 0, 0},\n {\"@treelang\",\n     \"tree1\\\n        %{!Q:-quiet}\\\n@@ -59,5 +59,5 @@ Boston, MA 02111-1307, USA.  */\n        %{!c:-o %d%w%u%O}\\\n        %g.s\\\n        %A\\n}\\\n-       \", NULL\n+       \", NULL , 0, 0\n },"}]}