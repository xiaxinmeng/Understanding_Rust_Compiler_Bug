{"sha": "2e14744fcd7820033b91c9516e22eb42b02b5290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxNDc0NGZjZDc4MjAwMzNiOTFjOTUxNmUyMmViNDJiMDJiNTI5MA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-09T15:04:52Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-09T15:04:52Z"}, "message": "Come up with -fipa-reference-addressable flag.\n\n2018-11-09  Martin Liska  <mliska@suse.cz>\n\n\t* cgraph.h (ipa_discover_readonly_nonaddressable_vars): Rename\n\tto ...\n\t(ipa_discover_variable_flags): ... this.\n\t* common.opt: Come up with new flag -fipa-reference-addressable.\n\t* doc/invoke.texi: Document it.\n\t* ipa-reference.c (propagate): Call the renamed fn.\n\t* ipa-visibility.c (whole_program_function_and_variable_visibility):\n\tLikewise.\n\t* ipa.c (ipa_discover_readonly_nonaddressable_vars): Renamed to\n\t...\n\t(ipa_discover_variable_flags): ... this.  Discover\n\tnon-addressable variables only with the newly added flag.\n\t* opts.c: Enable the newly added flag with -O1 and higher\n\toptimization level.\n2018-11-09  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/tree-ssa/writeonly-2.c: New test.\n\nFrom-SVN: r265969", "tree": {"sha": "cd0f6b1d8e87c8bebf1881f75790b1da936e3006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd0f6b1d8e87c8bebf1881f75790b1da936e3006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e14744fcd7820033b91c9516e22eb42b02b5290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e14744fcd7820033b91c9516e22eb42b02b5290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e14744fcd7820033b91c9516e22eb42b02b5290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e14744fcd7820033b91c9516e22eb42b02b5290/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ed3186036f25d9dd870cc2a02bfdf6fc31cde42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed3186036f25d9dd870cc2a02bfdf6fc31cde42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed3186036f25d9dd870cc2a02bfdf6fc31cde42"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "6a30303c99bfa2b499985974738f90349db928a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -1,3 +1,20 @@\n+2018-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.h (ipa_discover_readonly_nonaddressable_vars): Rename\n+\tto ...\n+\t(ipa_discover_variable_flags): ... this.\n+\t* common.opt: Come up with new flag -fipa-reference-addressable.\n+\t* doc/invoke.texi: Document it.\n+\t* ipa-reference.c (propagate): Call the renamed fn.\n+\t* ipa-visibility.c (whole_program_function_and_variable_visibility):\n+\tLikewise.\n+\t* ipa.c (ipa_discover_readonly_nonaddressable_vars): Renamed to\n+\t...\n+\t(ipa_discover_variable_flags): ... this.  Discover\n+\tnon-addressable variables only with the newly added flag.\n+\t* opts.c: Enable the newly added flag with -O1 and higher\n+\toptimization level.\n+\n 2018-11-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* json.cc (selftest::test_writing_literals): Fix comment."}, {"sha": "dd1e8fdbe4a3d92c2f21d8d71df685829f9c981d", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -2403,7 +2403,7 @@ void record_references_in_initializer (tree, bool);\n \n /* In ipa.c  */\n void cgraph_build_static_cdtor (char which, tree body, int priority);\n-bool ipa_discover_readonly_nonaddressable_vars (void);\n+bool ipa_discover_variable_flags (void);\n \n /* In varpool.c  */\n tree ctor_for_folding (tree);"}, {"sha": "cba516e7c6e80a8b5977d412ca37bd9fad4e2754", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -1722,7 +1722,11 @@ Perform Identical Code Folding for variables.\n \n fipa-reference\n Common Report Var(flag_ipa_reference) Init(0) Optimization\n-Discover readonly and non addressable static variables.\n+Discover read-only and non addressable static variables.\n+\n+fipa-reference-addressable\n+Common Report Var(flag_ipa_reference_addressable) Init(0) Optimization\n+Discover read-only, write-only and non-addressable static variables.\n \n fipa-matrix-reorg\n Common Ignore"}, {"sha": "e510fefe64b14ee04195a7f03eddf30874734922", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -413,8 +413,8 @@ Objective-C and Objective-C++ Dialects}.\n -finline-functions  -finline-functions-called-once  -finline-limit=@var{n} @gol\n -finline-small-functions  -fipa-cp  -fipa-cp-clone @gol\n -fipa-bit-cp -fipa-vrp @gol\n--fipa-pta  -fipa-profile  -fipa-pure-const  -fipa-reference  -fipa-icf @gol\n--fira-algorithm=@var{algorithm} @gol\n+-fipa-pta  -fipa-profile  -fipa-pure-const  -fipa-reference  -fipa-reference-addressable @gol\n+-fipa-icf  -fira-algorithm=@var{algorithm} @gol\n -fira-region=@var{region}  -fira-hoist-pressure @gol\n -fira-loop-pressure  -fno-ira-share-save-slots @gol\n -fno-ira-share-spill-slots @gol\n@@ -7882,6 +7882,7 @@ compilation time.\n -fipa-pure-const @gol\n -fipa-profile @gol\n -fipa-reference @gol\n+-fipa-reference-addressable @gol\n -fmerge-constants @gol\n -fmove-loop-invariants @gol\n -fomit-frame-pointer @gol\n@@ -8911,6 +8912,11 @@ Discover which static variables do not escape the\n compilation unit.\n Enabled by default at @option{-O} and higher.\n \n+@item -fipa-reference-addressable\n+@opindex fipa-reference-addressable\n+Discover read-only, write-only and non-addressable static variables.\n+Enabled by default at @option{-O} and higher.\n+\n @item -fipa-pta\n @opindex fipa-pta\n Perform interprocedural pointer analysis and interprocedural modification"}, {"sha": "6242aef11e690dba976f3693fc834187de40d000", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -705,7 +705,7 @@ propagate (void)\n   if (dump_file)\n     cgraph_node::dump_cgraph (dump_file);\n \n-  remove_p = ipa_discover_readonly_nonaddressable_vars ();\n+  remove_p = ipa_discover_variable_flags ();\n   generate_summary ();\n \n   /* Propagate the local information through the call graph to produce"}, {"sha": "35de913175381ca9b5e1c6c8f054d989bb93d12a", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -911,7 +911,7 @@ whole_program_function_and_variable_visibility (void)\n {\n   function_and_variable_visibility (flag_whole_program);\n   if (optimize || in_lto_p)\n-    ipa_discover_readonly_nonaddressable_vars ();\n+    ipa_discover_variable_flags ();\n   return 0;\n }\n "}, {"sha": "22c21354f7521e6e1346baf682657732bd1894ba", "filename": "gcc/ipa.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -752,10 +752,10 @@ clear_addressable_bit (varpool_node *vnode, void *data ATTRIBUTE_UNUSED)\n   return false;\n }\n \n-/* Discover variables that have no longer address taken or that are read only\n-   and update their flags.\n+/* Discover variables that have no longer address taken, are read-only or\n+   write-only and update their flags.\n \n-   Return true when unreachable symbol removan should be done.\n+   Return true when unreachable symbol removal should be done.\n \n    FIXME: This can not be done in between gimplify and omp_expand since\n    readonly flag plays role on what is shared and what is not.  Currently we do\n@@ -764,8 +764,11 @@ clear_addressable_bit (varpool_node *vnode, void *data ATTRIBUTE_UNUSED)\n    make sense to do it before early optimizations.  */\n \n bool\n-ipa_discover_readonly_nonaddressable_vars (void)\n+ipa_discover_variable_flags (void)\n {\n+  if (!flag_ipa_reference_addressable)\n+    return false;\n+\n   bool remove_p = false;\n   varpool_node *vnode;\n   if (dump_file)"}, {"sha": "e21967ba84dde8d1c67aee0742e98d58c9f7ebd4", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -451,6 +451,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_1_PLUS_NOT_DEBUG, OPT_fif_conversion2, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fipa_pure_const, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fipa_reference, NULL, 1 },\n+    { OPT_LEVELS_1_PLUS, OPT_fipa_reference_addressable, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fipa_profile, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_fmerge_constants, NULL, 1 },\n     { OPT_LEVELS_1_PLUS, OPT_freorder_blocks, NULL, 1 },"}, {"sha": "6dd28ffb7e8d4cc6a11692239b0fd0b2fef326ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -1,3 +1,7 @@\n+2018-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/writeonly-2.c: New test.\n+\n 2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gomp/workshare-reduction-1.c: New test."}, {"sha": "2272d15b171d2b4ef73f788901ce467502cf0e67", "filename": "gcc/testsuite/gcc.dg/tree-ssa/writeonly-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwriteonly-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14744fcd7820033b91c9516e22eb42b02b5290/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwriteonly-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwriteonly-2.c?ref=2e14744fcd7820033b91c9516e22eb42b02b5290", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized -fno-ipa-reference-addressable\" } */\n+static struct a {int magic1,b;} a;\n+volatile int magic2;\n+static struct b {int a,b,c,d,e,f;} magic3;\n+\n+struct b foo();\n+\n+void\n+t()\n+{\n+ a.magic1 = 1;\n+ magic2 = 1;\n+ magic3 = foo();\n+}\n+/* { dg-final { scan-tree-dump \"magic1\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump \"magic3\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump \"magic2\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump \"foo\" \"optimized\"} } */\n+ "}]}