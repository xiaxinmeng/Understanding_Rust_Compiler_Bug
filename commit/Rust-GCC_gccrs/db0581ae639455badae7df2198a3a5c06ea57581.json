{"sha": "db0581ae639455badae7df2198a3a5c06ea57581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwNTgxYWU2Mzk0NTViYWRhZTdkZjIxOThhM2E1YzA2ZWE1NzU4MQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-29T01:16:55Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-29T01:16:55Z"}, "message": "In gcc/objc/: 2010-12-28 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47076\n\t* objc-act.c (lookup_protocol): Added 'definition_required'\n\targument.  If 'definition_required', and the protocol is not\n\tdefined, emit a warning.\n\t(objc_declare_protocols): Updated call to lookup_protocol.\n\t(start_protocol): Same change.\n\t(check_protocol_recursively): Same change.\n\t(objc_build_protocol_expr): Same change.\n\t(lookup_and_install_protocols): Added definition_required argument.\n\tPass it to lookup_protocol.\n\t(objc_get_protocol_qualified_type): Updated call to\n\tlookup_and_install_protocols.\n\t(start_class): Updated calls to lookup_and_install_protocols; pass\n\ttrue to 'definition_required' to get the warnings.\n\t(start_protocol): Updated calls to lookup_and_install_protocols.\n\nIn gcc/testsuite/:\n2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47076\n\t* objc.dg/protocol-forward-1.m: New.\n\t* obj-c++.dg/protocol-forward-1.mm: New.\n\t* objc.dg/attributes/proto-attribute-2.m: Updated.\n\t* objc.dg/class-protocol-1.m: Updated.\n\t* obj-c++.dg/attributes/proto-attribute-2.mm: Updated.\n\t* obj-c++.dg/class-protocol-1.mm: Updated.\n\nFrom-SVN: r168307", "tree": {"sha": "6a723a135597a8dd3a3f05a6175f3ddf722c6571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a723a135597a8dd3a3f05a6175f3ddf722c6571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db0581ae639455badae7df2198a3a5c06ea57581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0581ae639455badae7df2198a3a5c06ea57581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0581ae639455badae7df2198a3a5c06ea57581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0581ae639455badae7df2198a3a5c06ea57581/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c0ee4007cba6a7847ca7244374fa2416e585a9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0ee4007cba6a7847ca7244374fa2416e585a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0ee4007cba6a7847ca7244374fa2416e585a9f"}], "stats": {"total": 177, "additions": 128, "deletions": 49}, "files": [{"sha": "34f34786f3880e87c2317e8750d48ec5396d2450", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -1,3 +1,21 @@\n+2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47076\n+\t* objc-act.c (lookup_protocol): Added 'definition_required'\n+\targument.  If 'definition_required', and the protocol is not\n+\tdefined, emit a warning.\n+\t(objc_declare_protocols): Updated call to lookup_protocol.\n+\t(start_protocol): Same change.\n+\t(check_protocol_recursively): Same change.\n+\t(objc_build_protocol_expr): Same change.\n+\t(lookup_and_install_protocols): Added definition_required argument.\n+\tPass it to lookup_protocol.\n+\t(objc_get_protocol_qualified_type): Updated call to\n+\tlookup_and_install_protocols.\n+\t(start_class): Updated calls to lookup_and_install_protocols; pass\n+\ttrue to 'definition_required' to get the warnings.\n+\t(start_protocol): Updated calls to lookup_and_install_protocols.\n+\n 2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_start_category_interface): Produce an error if"}, {"sha": "c7fd4a9a51162db964aceb285ea46dffb079d19c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -232,8 +232,8 @@ static void build_selector_table_decl (void);\n \n /* Protocols.  */\n \n-static tree lookup_protocol (tree, bool);\n-static tree lookup_and_install_protocols (tree);\n+static tree lookup_protocol (tree, bool, bool);\n+static tree lookup_and_install_protocols (tree, bool);\n \n /* Type encoding.  */\n \n@@ -2923,7 +2923,8 @@ objc_get_protocol_qualified_type (tree interface, tree protocols)\n \n       /* Look up protocols and install in lang specific list.  */\n       DUP_TYPE_OBJC_INFO (type, TYPE_MAIN_VARIANT (type));\n-      TYPE_OBJC_PROTOCOL_LIST (type) = lookup_and_install_protocols (protocols);\n+      TYPE_OBJC_PROTOCOL_LIST (type) = lookup_and_install_protocols\n+\t(protocols, /* definition_required */ false);\n \n       /* For RECORD_TYPEs, point to the @interface; for 'id' and 'Class',\n \t return the pointer to the new pointee variant.  */\n@@ -2951,7 +2952,8 @@ check_protocol_recursively (tree proto, tree list)\n       tree pp = TREE_VALUE (p);\n \n       if (TREE_CODE (pp) == IDENTIFIER_NODE)\n-\tpp = lookup_protocol (pp, /* warn if deprecated */ false);\n+\tpp = lookup_protocol (pp, /* warn if deprecated */ false,\n+\t\t\t      /* definition_required */ false);\n \n       if (pp == proto)\n \tfatal_error (\"protocol %qE has circular dependency\",\n@@ -2963,10 +2965,13 @@ check_protocol_recursively (tree proto, tree list)\n \n /* Look up PROTOCOLS, and return a list of those that are found.  If\n    none are found, return NULL.  Note that this function will emit a\n-   warning if a protocol is found and is deprecated.  */\n-\n+   warning if a protocol is found and is deprecated.  If\n+   'definition_required', then warn if the protocol is found but is\n+   not defined (ie, if we only saw a forward-declaration of the\n+   protocol (as in \"@protocol NSObject;\") not a real definition with\n+   the list of methods).  */\n static tree\n-lookup_and_install_protocols (tree protocols)\n+lookup_and_install_protocols (tree protocols, bool definition_required)\n {\n   tree proto;\n   tree return_value = NULL_TREE;\n@@ -2977,7 +2982,8 @@ lookup_and_install_protocols (tree protocols)\n   for (proto = protocols; proto; proto = TREE_CHAIN (proto))\n     {\n       tree ident = TREE_VALUE (proto);\n-      tree p = lookup_protocol (ident, /* warn_if_deprecated */ true);\n+      tree p = lookup_protocol (ident, /* warn_if_deprecated */ true,\n+\t\t\t\tdefinition_required);\n \n       if (p)\n \treturn_value = chainon (return_value,\n@@ -8417,7 +8423,8 @@ tree\n objc_build_protocol_expr (tree protoname)\n {\n   tree expr;\n-  tree p = lookup_protocol (protoname, /* warn if deprecated */ true);\n+  tree p = lookup_protocol (protoname, /* warn if deprecated */ true,\n+\t\t\t    /* definition_required */ false);\n \n   if (!p)\n     {\n@@ -9644,7 +9651,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n        \n       if (protocol_list)\n \tCLASS_PROTOCOL_LIST (klass)\n-\t  = lookup_and_install_protocols (protocol_list);\n+\t  = lookup_and_install_protocols (protocol_list, /* definition_required */ true);\n \n       /* Determine if 'deprecated', the only attribute we recognize\n \t for classes, was used.  Ignore all other attributes for now,\n@@ -9695,7 +9702,9 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t\t       list.  */\n \t\t    CLASS_PROTOCOL_LIST (klass)\n \t\t      = chainon (CLASS_PROTOCOL_LIST (klass),\n-\t\t\t\t lookup_and_install_protocols (protocol_list));\n+\t\t\t\t lookup_and_install_protocols\n+\t\t\t\t (protocol_list,\n+\t\t\t\t  /* definition_required */ true));\n \t\t  }\n \t      }\n \t    else\n@@ -9704,7 +9713,8 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t\t\n \t\tif (protocol_list)\n \t\t  CLASS_PROTOCOL_LIST (klass)\n-\t\t    = lookup_and_install_protocols (protocol_list);\n+\t\t    = lookup_and_install_protocols\n+\t\t    (protocol_list, /* definition_required */ true);\n \t      }\n \t  }\n       }\n@@ -10798,10 +10808,12 @@ add_protocol (tree protocol)\n }\n \n /* Looks up a protocol.  If 'warn_if_deprecated' is true, a warning is\n-   emitted if the protocol is deprecated.  */\n+   emitted if the protocol is deprecated.  If 'definition_required' is\n+   true, a warning is emitted if a full @protocol definition has not\n+   been seen.  */\n \n static tree\n-lookup_protocol (tree ident, bool warn_if_deprecated)\n+lookup_protocol (tree ident, bool warn_if_deprecated, bool definition_required)\n {\n   tree chain;\n \n@@ -10817,6 +10829,10 @@ lookup_protocol (tree ident, bool warn_if_deprecated)\n \t\t     PROTOCOL_NAME (chain));\n \t  }\n \n+\tif (definition_required && !PROTOCOL_DEFINED (chain))\n+\t  warning (0, \"definition of protocol %qE not found\",\n+\t\t   PROTOCOL_NAME (chain));\n+\n \treturn chain;\n       }\n \n@@ -10856,7 +10872,8 @@ objc_declare_protocols (tree names, tree attributes)\n     {\n       tree name = TREE_VALUE (list);\n \n-      if (lookup_protocol (name, /* warn if deprecated */ false) == NULL_TREE)\n+      if (lookup_protocol (name, /* warn if deprecated */ false,\n+\t\t\t   /* definition_required */ false) == NULL_TREE)\n \t{\n \t  tree protocol = make_node (PROTOCOL_INTERFACE_TYPE);\n \n@@ -10904,15 +10921,16 @@ start_protocol (enum tree_code code, tree name, tree list, tree attributes)\n \t}\n     }\n \n-  protocol = lookup_protocol (name, /* warn_if_deprecated */ false);\n+  protocol = lookup_protocol (name, /* warn_if_deprecated */ false,\n+\t\t\t      /* definition_required */ false);\n \n   if (!protocol)\n     {\n       protocol = make_node (code);\n       TYPE_LANG_SLOT_1 (protocol) = make_tree_vec (PROTOCOL_LANG_SLOT_ELTS);\n \n       PROTOCOL_NAME (protocol) = name;\n-      PROTOCOL_LIST (protocol) = lookup_and_install_protocols (list);\n+      PROTOCOL_LIST (protocol) = lookup_and_install_protocols (list, /* definition_required */ false);\n       add_protocol (protocol);\n       PROTOCOL_DEFINED (protocol) = 1;\n       PROTOCOL_FORWARD_DECL (protocol) = NULL_TREE;\n@@ -10922,7 +10940,7 @@ start_protocol (enum tree_code code, tree name, tree list, tree attributes)\n   else if (! PROTOCOL_DEFINED (protocol))\n     {\n       PROTOCOL_DEFINED (protocol) = 1;\n-      PROTOCOL_LIST (protocol) = lookup_and_install_protocols (list);\n+      PROTOCOL_LIST (protocol) = lookup_and_install_protocols (list, /* definition_required */ false);\n \n       check_protocol_recursively (protocol, list);\n     }"}, {"sha": "45d4441c52ad24dc01404fc3b9a14db594bc2869", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -1,3 +1,13 @@\n+2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47076\n+\t* objc.dg/protocol-forward-1.m: New.\n+\t* obj-c++.dg/protocol-forward-1.mm: New.\n+\t* objc.dg/attributes/proto-attribute-2.m: Updated.\n+\t* objc.dg/class-protocol-1.m: Updated.\n+\t* obj-c++.dg/attributes/proto-attribute-2.mm: Updated.\n+\t* obj-c++.dg/class-protocol-1.mm: Updated.\n+\t\n 2010-12-28  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45827"}, {"sha": "1e81c0b7b690c9152149e34aa2f92f73782a4192", "filename": "gcc/testsuite/obj-c++.dg/attributes/proto-attribute-2.mm", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-2.mm?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -13,19 +13,6 @@ @protocol DeprecatedProtocol1;\n \n @protocol NonDeprecatedProtocol1;\n \n-\n-@interface Class1 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n-@end\n-\n-@interface Class2 <NonDeprecatedProtocol1>\n-@end\n-\n-@interface Class3 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n-@end\n-\n-@interface Class2 (Category1) <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n-@end\n-\n void function1 (id <DeprecatedProtocol1> object); /* { dg-warning \"is deprecated\" } */\n void function2 (id <NonDeprecatedProtocol1> object);\n "}, {"sha": "6391fda6f12b094d7aa2e60469940d3cb5517a88", "filename": "gcc/testsuite/obj-c++.dg/class-protocol-1.mm", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fclass-protocol-1.mm?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -1,4 +1,3 @@\n-\n /* Check Class <protocol> types */\n /* Author: David Ayers <d.ayers@inode.at> */\n /* { dg-do compile } */\n@@ -176,7 +175,7 @@ @interface MyClass2 (Category4) <MyProto6>\n \n @protocol FwProto;\n \n-@interface MyClass1 (Forward) <FwProto>\n+@interface MyClass1 (Forward) <FwProto> /* { dg-warning \"definition of protocol .FwProto. not found\" } */\n @end\n \n Class <FwProto> clsP7 = 0;\n@@ -188,9 +187,9 @@ @interface MyClass1 (Forward) <FwProto>\n   [cls doItInstance7];      /* { dg-warning \"no .\\\\+doItInstance7. method found\" } */\n \n   [clsP7 doItClass7];       /* { dg-warning \"not found in protocol\" } */\n-  /* { dg-warning \"no .\\\\+doItClass7. method found\" \"\" { target *-*-* } 190 } */\n+  /* { dg-warning \"no .\\\\+doItClass7. method found\" \"\" { target *-*-* } 189 } */\n   [clsP7 doItInstance7];    /* { dg-warning \"not found in protocol\" } */\n-  /* { dg-warning \"no .\\\\+doItInstance7. method found\" \"\" { target *-*-* } 192 } */\n+  /* { dg-warning \"no .\\\\+doItInstance7. method found\" \"\" { target *-*-* } 191 } */\n \n   [MyClass1 doItClass7];    /* { dg-warning \"may not respond\" } */\n   [MyClass1 doItInstance7]; /* { dg-warning \"may not respond\" } */"}, {"sha": "17d9044ab3aba0667a1890b40de3b90f346e6630", "filename": "gcc/testsuite/obj-c++.dg/protocol-forward-1.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-forward-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-forward-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-forward-1.mm?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -0,0 +1,30 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that all protocols appearing in @interface declarations are\n+   real (ie, we saw a full @protocol definition with list of methods),\n+   and not just forward-references (ie, \"@protocol NSObject;\").  */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol;\n+\n+@protocol MyProtocol2\n+- (int)method2;\n+@end\n+\n+@interface MyClass <MyProtocol> /* { dg-warning \"definition of protocol .MyProtocol. not found\" } */\n+@end\n+\n+@interface MyClass2 <MyProtocol2> /* Ok */\n+@end\n+\n+@interface MyClass2 (Category) <MyProtocol>  /* { dg-warning \"definition of protocol .MyProtocol. not found\" } */\n+@end\n+\n+@protocol MyProtocol3 <MyProtocol> /* Ok */\n+@end\n+\n+/* TODO: I guess if MyProtocol3 is now used in an @interface, we\n+   should check that all the protocols it references are defined\n+   too ?  */"}, {"sha": "1e81c0b7b690c9152149e34aa2f92f73782a4192", "filename": "gcc/testsuite/objc.dg/attributes/proto-attribute-2.m", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-2.m?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -13,19 +13,6 @@ @protocol DeprecatedProtocol1;\n \n @protocol NonDeprecatedProtocol1;\n \n-\n-@interface Class1 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n-@end\n-\n-@interface Class2 <NonDeprecatedProtocol1>\n-@end\n-\n-@interface Class3 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n-@end\n-\n-@interface Class2 (Category1) <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n-@end\n-\n void function1 (id <DeprecatedProtocol1> object); /* { dg-warning \"is deprecated\" } */\n void function2 (id <NonDeprecatedProtocol1> object);\n "}, {"sha": "cf061cb8ed76b279175f623e75bce575fb3521be", "filename": "gcc/testsuite/objc.dg/class-protocol-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-protocol-1.m?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -175,7 +175,7 @@ @interface MyClass2 (Category4) <MyProto6>\n \n @protocol FwProto;\n \n-@interface MyClass1 (Forward) <FwProto>\n+@interface MyClass1 (Forward) <FwProto> /* { dg-warning \"definition of protocol .FwProto. not found\" } */\n @end\n \n Class <FwProto> clsP7 = 0;"}, {"sha": "17d9044ab3aba0667a1890b40de3b90f346e6630", "filename": "gcc/testsuite/objc.dg/protocol-forward-1.m", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-forward-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0581ae639455badae7df2198a3a5c06ea57581/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-forward-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-forward-1.m?ref=db0581ae639455badae7df2198a3a5c06ea57581", "patch": "@@ -0,0 +1,30 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that all protocols appearing in @interface declarations are\n+   real (ie, we saw a full @protocol definition with list of methods),\n+   and not just forward-references (ie, \"@protocol NSObject;\").  */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol;\n+\n+@protocol MyProtocol2\n+- (int)method2;\n+@end\n+\n+@interface MyClass <MyProtocol> /* { dg-warning \"definition of protocol .MyProtocol. not found\" } */\n+@end\n+\n+@interface MyClass2 <MyProtocol2> /* Ok */\n+@end\n+\n+@interface MyClass2 (Category) <MyProtocol>  /* { dg-warning \"definition of protocol .MyProtocol. not found\" } */\n+@end\n+\n+@protocol MyProtocol3 <MyProtocol> /* Ok */\n+@end\n+\n+/* TODO: I guess if MyProtocol3 is now used in an @interface, we\n+   should check that all the protocols it references are defined\n+   too ?  */"}]}