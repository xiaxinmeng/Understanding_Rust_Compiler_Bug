{"sha": "a4f31c00231ab4ba5a9534c06e005eb60b89af16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmMzFjMDAyMzFhYjRiYTVhOTUzNGMwNmUwMDVlYjYwYjg5YWYxNg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-07-09T20:32:33Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-07-09T20:32:33Z"}, "message": "output.h: Add declaration of final_forward_branch_p.\n\n\t* output.h: Add declaration of final_forward_branch_p.\n\n\t* config/i386/i386.c (output_fix_trunc): Remove unused variable.\n\nFrom-SVN: r43876", "tree": {"sha": "2b3b7667150e109ac1a4f6ae1b00f9519312699e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b3b7667150e109ac1a4f6ae1b00f9519312699e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f31c00231ab4ba5a9534c06e005eb60b89af16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f31c00231ab4ba5a9534c06e005eb60b89af16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f31c00231ab4ba5a9534c06e005eb60b89af16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f31c00231ab4ba5a9534c06e005eb60b89af16/comments", "author": null, "committer": null, "parents": [{"sha": "3d7c10129f226c8ccfe6dc6fa39510031dd1a2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7c10129f226c8ccfe6dc6fa39510031dd1a2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7c10129f226c8ccfe6dc6fa39510031dd1a2f8"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "45728491c2b873569a65b9a46e269a92deb27ea2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f31c00231ab4ba5a9534c06e005eb60b89af16/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f31c00231ab4ba5a9534c06e005eb60b89af16/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a4f31c00231ab4ba5a9534c06e005eb60b89af16", "patch": "@@ -784,7 +784,7 @@ override_options ()\n      ix86_regparm = REGPARM_MAX;\n \n   /* If the user has provided any of the -malign-* options,\n-     warn and use that value only if -falign-* is not set.  \n+     warn and use that value only if -falign-* is not set.\n      Remove this code in GCC 3.2 or later.  */\n   if (ix86_align_loops_string)\n     {\n@@ -1204,7 +1204,7 @@ function_arg_advance (cum, mode, type, named)\n \t  cum->sse_regno = 0;\n \t}\n     }\n-  else         \n+  else\n     {\n       cum->words += words;\n       cum->nregs -= words;\n@@ -1264,7 +1264,7 @@ function_arg (cum, mode, type, named)\n     case TImode:\n       if (cum->sse_nregs)\n         ret = gen_rtx_REG (mode, cum->sse_regno);\n-      break;    \n+      break;\n     }\n \n   if (TARGET_DEBUG_ARG)\n@@ -2273,7 +2273,7 @@ ix86_frame_pointer_required ()\n      to be able to access the saved ebp value in our frame.  */\n   if (cfun->machine->accesses_prev_frame)\n     return 1;\n-  \n+\n   /* Several x86 os'es need a frame pointer for other reasons,\n      usually pertaining to setjmp.  */\n   if (SUBTARGET_FRAME_POINTER_REQUIRED)\n@@ -2735,7 +2735,7 @@ ix86_expand_epilogue (style)\n \n   ix86_compute_frame_layout (&frame);\n \n-  /* Calculate start of saved registers relative to ebp.  Special care \n+  /* Calculate start of saved registers relative to ebp.  Special care\n      must be taken for the normal return case of a function using\n      eh_return: the eax and edx registers are marked as saved, but not\n      restored along this path.  */\n@@ -4224,7 +4224,7 @@ print_operand (file, x, code)\n \n \t    if (!optimize || optimize_size || !TARGET_BRANCH_PREDICTION_HINTS)\n \t      return;\n-\t    \n+\n \t    x = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n \t    if (x)\n \t      {\n@@ -4752,7 +4752,7 @@ output_387_binary_op (insn, operands)\n   return buf;\n }\n \n-/* Output code to initialize control word copies used by \n+/* Output code to initialize control word copies used by\n    trunc?f?i patterns.  NORMAL is set to current control word, while ROUND_DOWN\n    is set to control word rounding downwards.  */\n void\n@@ -4782,7 +4782,6 @@ output_fix_trunc (insn, operands)\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n   int dimode_p = GET_MODE (operands[0]) == DImode;\n-  rtx xops[4];\n \n   /* Jump through a hoop or two for DImode, since the hardware has no\n      non-popping instruction.  We used to do this a different way, but\n@@ -7565,7 +7564,7 @@ ix86_expand_movstr (dst, src, count_exp, align_exp)\n          than 4 bytes, because gcc is able to optimize such code better (in\n          the case the destination or the count really is aligned, gcc is often\n          able to predict the branches) and also it is friendlier to the\n-         hardware branch prediction.  \n+         hardware branch prediction.\n \n          Using loops is benefical for generic case, because we can\n          handle small counts using the loops.  Many CPUs (such as Athlon)\n@@ -8087,8 +8086,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n        emit_insn (gen_rtx_SET (VOIDmode, out,\n \t\t\t       gen_rtx_IF_THEN_ELSE (Pmode, tmp,\n-\t\t\t\t       \t\t     reg2,\n-\t\t\t\t       \t\t     out)));\n+\t\t\t\t\t\t     reg2,\n+\t\t\t\t\t\t     out)));\n \n     }\n   else\n@@ -10550,7 +10549,7 @@ ix86_secondary_memory_needed (class1, class2, mode, strict)\n \t      && (mode) != SImode));\n }\n /* Return the cost of moving data from a register in class CLASS1 to\n-   one in class CLASS2. \n+   one in class CLASS2.\n \n    It is not required that the cost always equal 2 when FROM is the same as TO;\n    on some machines it is expensive to move between registers if they are not\n@@ -10621,8 +10620,8 @@ ix86_hard_regno_mode_ok (regno, mode)\n \n    If moving between registers and memory is more expensive than\n    between two registers, you should define this macro to express the\n-   relative cost.  \n- \n+   relative cost.\n+\n    Model also increased moving costs of QImode registers in non\n    Q_REGS classes.\n  */"}, {"sha": "6eb4ca48368838f48c7a56f64e89927b8513a051", "filename": "gcc/output.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f31c00231ab4ba5a9534c06e005eb60b89af16/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f31c00231ab4ba5a9534c06e005eb60b89af16/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a4f31c00231ab4ba5a9534c06e005eb60b89af16", "patch": "@@ -1,7 +1,7 @@\n /* Declarations for insn-output.c.  These functions are defined in recog.c,\n    final.c, and varasm.c.\n    Copyright (C) 1987, 1991, 1994, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -35,7 +35,7 @@ extern void app_enable\t\tPARAMS ((void));\n    Called from varasm.c before most kinds of output.  */\n extern void app_disable\t\tPARAMS ((void));\n \n-/* Return the number of slots filled in the current \n+/* Return the number of slots filled in the current\n    delayed branch sequence (we don't count the insn needing the\n    delay slot).   Zero if not in a delayed branch sequence.  */\n extern int dbr_sequence_length\tPARAMS ((void));\n@@ -116,6 +116,11 @@ extern void split_double\tPARAMS ((rtx, rtx *, rtx *));\n /* Return nonzero if this function has no function calls.  */\n extern int leaf_function_p\tPARAMS ((void));\n \n+/* Return 1 if branch is an forward branch.\n+   Uses insn_shuid array, so it works only in the final pass.  May be used by\n+   output templates to add branch prediction hints, for example.  */\n+extern int final_forward_branch_p PARAMS ((rtx));\n+\n /* Return 1 if this function uses only the registers that can be\n    safely renumbered.  */\n extern int only_leaf_regs_used\tPARAMS ((void));"}]}