{"sha": "6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI1ODkxNWJjMzcwOTBlMmZiOTFjZTdiYTk0YjBhNmQ2YjczM2E0OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-15T14:52:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-15T14:52:23Z"}, "message": "dwarf2out.c (gen_enumeration_type_die): Remove unnecessary host_integerp test.\n\ngcc/\n\t* dwarf2out.c (gen_enumeration_type_die): Remove unnecessary\n\thost_integerp test.\n\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Likewise.\n\tUse TREE_INT_CST_LOW rather than tree_low_cst when reading the\n\tconstant.\n\t* fold-const.c (fold_binary_loc): Replace a host_integerp/tree_low_cst\n\tpair with a TREE_CODE test and TREE_INT_CST_LOW.\n\t* tree-vect-generic.c (expand_vector_divmod): Likewise.\n\nFrom-SVN: r204846", "tree": {"sha": "24a4005242502b69dc3f397ffbca92e36d73d175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24a4005242502b69dc3f397ffbca92e36d73d175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11924f8b487dc3feb882f08b195bbcbfbacfd96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11924f8b487dc3feb882f08b195bbcbfbacfd96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11924f8b487dc3feb882f08b195bbcbfbacfd96d"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "e5d586c10fcb65bfa24915f61f7b4c743788b515", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "patch": "@@ -1,3 +1,14 @@\n+2013-11-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* dwarf2out.c (gen_enumeration_type_die): Remove unnecessary\n+\thost_integerp test.\n+\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Likewise.\n+\tUse TREE_INT_CST_LOW rather than tree_low_cst when reading the\n+\tconstant.\n+\t* fold-const.c (fold_binary_loc): Replace a host_integerp/tree_low_cst\n+\tpair with a TREE_CODE test and TREE_INT_CST_LOW.\n+\t* tree-vect-generic.c (expand_vector_divmod): Likewise.\n+\n 2013-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/50262"}, {"sha": "24f405ec26ab20080793faa918f715f777960c97", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "patch": "@@ -17321,9 +17321,8 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t  if (TREE_CODE (value) == CONST_DECL)\n \t    value = DECL_INITIAL (value);\n \n-\t  if (host_integerp (value, TYPE_UNSIGNED (TREE_TYPE (value)))\n-\t      && (simple_type_size_in_bits (TREE_TYPE (value))\n-\t\t  <= HOST_BITS_PER_WIDE_INT || host_integerp (value, 0)))\n+\t  if (simple_type_size_in_bits (TREE_TYPE (value))\n+\t      <= HOST_BITS_PER_WIDE_INT || host_integerp (value, 0))\n \t    /* DWARF2 does not provide a way of indicating whether or\n \t       not enumeration constants are signed or unsigned.  GDB\n \t       always assumes the values are signed, so we output all"}, {"sha": "87cde0454a343fa0e442609e1b209c5d62622c56", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "patch": "@@ -12033,16 +12033,15 @@ fold_binary_loc (location_t loc,\n \t if the new mask might be further optimized.  */\n       if ((TREE_CODE (arg0) == LSHIFT_EXPR\n \t   || TREE_CODE (arg0) == RSHIFT_EXPR)\n-\t  && host_integerp (TREE_OPERAND (arg0, 1), 1)\n-\t  && host_integerp (arg1, TYPE_UNSIGNED (TREE_TYPE (arg1)))\n-\t  && tree_low_cst (TREE_OPERAND (arg0, 1), 1)\n-\t     < TYPE_PRECISION (TREE_TYPE (arg0))\n \t  && TYPE_PRECISION (TREE_TYPE (arg0)) <= HOST_BITS_PER_WIDE_INT\n-\t  && tree_low_cst (TREE_OPERAND (arg0, 1), 1) > 0)\n+\t  && TREE_CODE (arg1) == INTEGER_CST\n+\t  && host_integerp (TREE_OPERAND (arg0, 1), 1)\n+\t  && tree_low_cst (TREE_OPERAND (arg0, 1), 1) > 0\n+\t  && (tree_low_cst (TREE_OPERAND (arg0, 1), 1)\n+\t      < TYPE_PRECISION (TREE_TYPE (arg0))))\n \t{\n \t  unsigned int shiftc = tree_low_cst (TREE_OPERAND (arg0, 1), 1);\n-\t  unsigned HOST_WIDE_INT mask\n-\t    = tree_low_cst (arg1, TYPE_UNSIGNED (TREE_TYPE (arg1)));\n+\t  unsigned HOST_WIDE_INT mask = TREE_INT_CST_LOW (arg1);\n \t  unsigned HOST_WIDE_INT newmask, zerobits = 0;\n \t  tree shift_type = TREE_TYPE (arg0);\n "}, {"sha": "130193ce878f2d6c3ef282189df5d56787e424f3", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "patch": "@@ -432,7 +432,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n       tree cst = VECTOR_CST_ELT (op1, i);\n       unsigned HOST_WIDE_INT ml;\n \n-      if (!host_integerp (cst, unsignedp) || integer_zerop (cst))\n+      if (TREE_CODE (cst) != INTEGER_CST || integer_zerop (cst))\n \treturn NULL_TREE;\n       pre_shifts[i] = 0;\n       post_shifts[i] = 0;\n@@ -453,7 +453,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n       if (unsignedp)\n \t{\n \t  unsigned HOST_WIDE_INT mh;\n-\t  unsigned HOST_WIDE_INT d = tree_low_cst (cst, 1) & mask;\n+\t  unsigned HOST_WIDE_INT d = TREE_INT_CST_LOW (cst) & mask;\n \n \t  if (d >= ((unsigned HOST_WIDE_INT) 1 << (prec - 1)))\n \t    /* FIXME: Can transform this into op0 >= op1 ? 1 : 0.  */\n@@ -523,7 +523,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t}\n       else\n \t{\n-\t  HOST_WIDE_INT d = tree_low_cst (cst, 0);\n+\t  HOST_WIDE_INT d = TREE_INT_CST_LOW (cst);\n \t  unsigned HOST_WIDE_INT abs_d;\n \n \t  if (d == -1)"}, {"sha": "edf1e7eb2d9d738c32586a5df0aa3aaa94617850", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b58915bc37090e2fb91ce7ba94b0a6d6b733a49/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=6b58915bc37090e2fb91ce7ba94b0a6d6b733a49", "patch": "@@ -2065,9 +2065,8 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n       return pattern_stmt;\n     }\n \n-  if (!host_integerp (oprnd1, TYPE_UNSIGNED (itype))\n-      || integer_zerop (oprnd1)\n-      || prec > HOST_BITS_PER_WIDE_INT)\n+  if (prec > HOST_BITS_PER_WIDE_INT\n+      || integer_zerop (oprnd1))\n     return NULL;\n \n   if (!can_mult_highpart_p (TYPE_MODE (vectype), TYPE_UNSIGNED (itype)))\n@@ -2079,8 +2078,8 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n     {\n       unsigned HOST_WIDE_INT mh, ml;\n       int pre_shift, post_shift;\n-      unsigned HOST_WIDE_INT d = tree_low_cst (oprnd1, 1)\n-\t\t\t\t & GET_MODE_MASK (TYPE_MODE (itype));\n+      unsigned HOST_WIDE_INT d = (TREE_INT_CST_LOW (oprnd1)\n+\t\t\t\t  & GET_MODE_MASK (TYPE_MODE (itype)));\n       tree t1, t2, t3, t4;\n \n       if (d >= ((unsigned HOST_WIDE_INT) 1 << (prec - 1)))\n@@ -2196,7 +2195,7 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n     {\n       unsigned HOST_WIDE_INT ml;\n       int post_shift;\n-      HOST_WIDE_INT d = tree_low_cst (oprnd1, 0);\n+      HOST_WIDE_INT d = TREE_INT_CST_LOW (oprnd1);\n       unsigned HOST_WIDE_INT abs_d;\n       bool add = false;\n       tree t1, t2, t3, t4;"}]}