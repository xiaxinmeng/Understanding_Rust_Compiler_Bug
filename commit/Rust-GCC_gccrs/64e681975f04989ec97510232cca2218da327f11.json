{"sha": "64e681975f04989ec97510232cca2218da327f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRlNjgxOTc1ZjA0OTg5ZWM5NzUxMDIzMmNjYTIyMThkYTMyN2YxMQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-06-10T03:47:36Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-06-10T03:47:36Z"}, "message": "gjavah.c (throwable_p): Accept argument as either a classname or signature fragment.\n\n\t* gjavah.c (throwable_p): Accept argument as either a classname or\n\tsignature fragment. Create null-terminated classname string for super\n\twhen calling itself recursively.\n\t(decode_signature_piece): Skip first character from class name\n\tsignature when calling throwable_p.\n\nFrom-SVN: r54427", "tree": {"sha": "b37f58ee3a6c4af026d730a6d84392a97ac25578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37f58ee3a6c4af026d730a6d84392a97ac25578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64e681975f04989ec97510232cca2218da327f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e681975f04989ec97510232cca2218da327f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e681975f04989ec97510232cca2218da327f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e681975f04989ec97510232cca2218da327f11/comments", "author": null, "committer": null, "parents": [{"sha": "4272287154145e6a9fa46740f7c48999eb9e1866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4272287154145e6a9fa46740f7c48999eb9e1866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4272287154145e6a9fa46740f7c48999eb9e1866"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "7813997fc4d1e2196aa3b8a06a98bc801cbbb98e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e681975f04989ec97510232cca2218da327f11/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e681975f04989ec97510232cca2218da327f11/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=64e681975f04989ec97510232cca2218da327f11", "patch": "@@ -1,3 +1,11 @@\n+2002-06-10  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* gjavah.c (throwable_p): Accept argument as either a classname or \n+\tsignature fragment. Create null-terminated classname string for super\n+\twhen calling itself recursively.\n+\t(decode_signature_piece): Skip first character from class name \n+\tsignature when calling throwable_p.\n+\n 2002-06-08  H.J. Lu  (hjl@gnu.org)\n \n \t* jcf-path.c (jcf_path_init): Allocate 1 more byte for string."}, {"sha": "b4e0a51187c376f57a0aead321a6dd89598462a0", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e681975f04989ec97510232cca2218da327f11/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e681975f04989ec97510232cca2218da327f11/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=64e681975f04989ec97510232cca2218da327f11", "patch": "@@ -1104,11 +1104,12 @@ gcjh_streq (p1, p2)\n   return ! strcmp ((char *) p1, (char *) p2);\n }\n \n-/* Return 1 if the initial (L<classname>;) part of SIGNATURE names a\n-   subclass of throwable, or 0 if not.  */\n+/* Return 1 if the initial part of CLNAME names a subclass of throwable, \n+   or 0 if not.  CLNAME may be extracted from a signature, and can be \n+   terminated with either `;' or NULL.  */\n static int\n-throwable_p (signature)\n-     const unsigned char *signature;\n+throwable_p (clname)\n+     const unsigned char *clname;\n {\n   int length;\n   unsigned char *current;\n@@ -1148,12 +1149,12 @@ throwable_p (signature)\n       init_done = 1;\n     }\n \n-  for (length = 0; signature[length] != ';'; ++length)\n+  for (length = 0; clname[length] != ';' && clname[length] != '\\0'; ++length)\n     ;\n   current = (unsigned char *) ALLOC (length);\n-  for (i = 1; signature[i] != ';'; ++i)\n-    current[i - 1] = signature[i] == '/' ? '.' : signature[i];\n-  current[i - 1] = '\\0';\n+  for (i = 0; i < length; ++i)\n+    current[i] = clname[i] == '/' ? '.' : clname[i];\n+  current[length] = '\\0';\n \n   /* We don't compute the hash slot here because the table might be\n      modified by the recursion.  In that case the slot could be\n@@ -1166,6 +1167,8 @@ throwable_p (signature)\n     {\n       JCF jcf;\n       PTR *slot;\n+      unsigned char *super, *tmp;\n+      int super_length = -1;\n       const char *classfile_name = find_class (current, strlen (current),\n \t\t\t\t\t       &jcf, 0);\n \n@@ -1185,7 +1188,12 @@ throwable_p (signature)\n \t}\n       jcf_parse_class (&jcf);\n \n-      result = throwable_p (super_class_name (&jcf, NULL));\n+      tmp = (unsigned char *) super_class_name (&jcf, &super_length);\n+      super = (unsigned char *) ALLOC (super_length + 1);\n+      memcpy (super, tmp, super_length);      \n+      super[super_length] = '\\0';\n+\n+      result = throwable_p (super);\n       slot = htab_find_slot (result ? throw_hash : non_throw_hash,\n \t\t\t     current, INSERT);\n       *slot = current;\n@@ -1317,7 +1325,8 @@ decode_signature_piece (stream, signature, limit, need_space)\n \t  else if (! strncmp (signature, \"Ljava/lang/Class;\",\n \t\t\t      sizeof (\"Ljava/lang/Class;\") - 1))\n \t    ctype = \"jclass\";\n-\t  else if (throwable_p (signature))\n+\t  /* Skip leading 'L' for throwable_p call.  */\n+\t  else if (throwable_p (signature + 1))\n \t    ctype = \"jthrowable\";\n \t  else\n \t    ctype = \"jobject\";"}]}