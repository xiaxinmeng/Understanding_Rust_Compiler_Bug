{"sha": "251697a64ba4d7f10f072702771a59d30364cc26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxNjk3YTY0YmE0ZDdmMTBmMDcyNzAyNzcxYTU5ZDMwMzY0Y2MyNg==", "commit": {"author": {"name": "Hafiz Abid Qadeer", "email": "abidh@codesourcery.com", "date": "2021-05-28T16:49:46Z"}, "committer": {"name": "Hafiz Abid Qadeer", "email": "abidh@codesourcery.com", "date": "2021-06-30T16:48:22Z"}, "message": "[amdgcn] Update CFI configuration\n\nCurrently we don't get any call frame information for the amdgcn target.\nThis patch makes necessary adjustments to generate CFI that can work with\nROCGDB (ROCm 3.8+).\n\ngcc/\n\n\t* config/gcn/gcn.c (move_callee_saved_registers): Emit CFI notes for\n\tprologue register saves.\n\t(gcn_debug_unwind_info): Use UI_DWARF2.\n\t(gcn_dwarf_register_number): Map DWARF_LINK_REGISTER to DWARF PC.\n\t(gcn_dwarf_register_span): DWARF_LINK_REGISTER doesn't span.\n\t* config/gcn/gcn.h: (DWARF_FRAME_RETURN_COLUMN): New define.\n\t(DWARF_LINK_REGISTER): New define.\n\t(FIRST_PSEUDO_REGISTER): Increment.\n\t(FIXED_REGISTERS): Add entry for DWARF_LINK_REGISTER.\n\t(CALL_USED_REGISTERS): Likewise.\n\t(REGISTER_NAMES): Likewise.", "tree": {"sha": "2bae8727257ad44425460e701ded0bad9f03c6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bae8727257ad44425460e701ded0bad9f03c6bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251697a64ba4d7f10f072702771a59d30364cc26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251697a64ba4d7f10f072702771a59d30364cc26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251697a64ba4d7f10f072702771a59d30364cc26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251697a64ba4d7f10f072702771a59d30364cc26/comments", "author": {"login": "abidh", "id": 4067533, "node_id": "MDQ6VXNlcjQwNjc1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4067533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abidh", "html_url": "https://github.com/abidh", "followers_url": "https://api.github.com/users/abidh/followers", "following_url": "https://api.github.com/users/abidh/following{/other_user}", "gists_url": "https://api.github.com/users/abidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abidh/subscriptions", "organizations_url": "https://api.github.com/users/abidh/orgs", "repos_url": "https://api.github.com/users/abidh/repos", "events_url": "https://api.github.com/users/abidh/events{/privacy}", "received_events_url": "https://api.github.com/users/abidh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abidh", "id": 4067533, "node_id": "MDQ6VXNlcjQwNjc1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4067533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abidh", "html_url": "https://github.com/abidh", "followers_url": "https://api.github.com/users/abidh/followers", "following_url": "https://api.github.com/users/abidh/following{/other_user}", "gists_url": "https://api.github.com/users/abidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abidh/subscriptions", "organizations_url": "https://api.github.com/users/abidh/orgs", "repos_url": "https://api.github.com/users/abidh/repos", "events_url": "https://api.github.com/users/abidh/events{/privacy}", "received_events_url": "https://api.github.com/users/abidh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66d0b7b87d105d24da8c4784a0b907fb6b2c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66d0b7b87d105d24da8c4784a0b907fb6b2c095"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "ef4ed7c8454fcc2355d95f4880581f9ff8cf0e66", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 75, "deletions": 7, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251697a64ba4d7f10f072702771a59d30364cc26/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251697a64ba4d7f10f072702771a59d30364cc26/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=251697a64ba4d7f10f072702771a59d30364cc26", "patch": "@@ -2649,6 +2649,7 @@ move_callee_saved_registers (rtx sp, machine_function *offsets,\n   rtx as = gen_rtx_CONST_INT (VOIDmode, STACK_ADDR_SPACE);\n   HOST_WIDE_INT exec_set = 0;\n   int offreg_set = 0;\n+  auto_vec<int> saved_sgprs;\n \n   start_sequence ();\n \n@@ -2665,7 +2666,10 @@ move_callee_saved_registers (rtx sp, machine_function *offsets,\n \tint lane = saved_scalars % 64;\n \n \tif (prologue)\n-\t  emit_insn (gen_vec_setv64si (vreg, reg, GEN_INT (lane)));\n+\t  {\n+\t    emit_insn (gen_vec_setv64si (vreg, reg, GEN_INT (lane)));\n+\t    saved_sgprs.safe_push (regno);\n+\t  }\n \telse\n \t  emit_insn (gen_vec_extractv64sisi (reg, vreg, GEN_INT (lane)));\n \n@@ -2698,7 +2702,7 @@ move_callee_saved_registers (rtx sp, machine_function *offsets,\n \t\t\t\t  gcn_gen_undef (V64SImode), exec));\n \n   /* Move vectors.  */\n-  for (regno = FIRST_VGPR_REG, offset = offsets->pretend_size;\n+  for (regno = FIRST_VGPR_REG, offset = 0;\n        regno < FIRST_PSEUDO_REGISTER; regno++)\n     if ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| (regno == VGPR_REGNO (6) && saved_scalars > 0)\n@@ -2719,8 +2723,67 @@ move_callee_saved_registers (rtx sp, machine_function *offsets,\n \t  }\n \n \tif (prologue)\n-\t  emit_insn (gen_scatterv64si_insn_1offset_exec (vsp, const0_rtx, reg,\n-\t\t\t\t\t\t\t as, const0_rtx, exec));\n+\t  {\n+\t    rtx insn = emit_insn (gen_scatterv64si_insn_1offset_exec\n+\t\t\t\t  (vsp, const0_rtx, reg, as, const0_rtx,\n+\t\t\t\t   exec));\n+\n+\t    /* Add CFI metadata.  */\n+\t    rtx note;\n+\t    if (regno == VGPR_REGNO (6) || regno == VGPR_REGNO (7))\n+\t      {\n+\t\tint start = (regno == VGPR_REGNO (7) ? 64 : 0);\n+\t\tint count = MIN (saved_scalars - start, 64);\n+\t\tint add_lr = (regno == VGPR_REGNO (6)\n+\t\t\t      && df_regs_ever_live_p (LINK_REGNUM));\n+\t\tint lrdest = -1;\n+\t\trtvec seq = rtvec_alloc (count + add_lr);\n+\n+\t\t/* Add an REG_FRAME_RELATED_EXPR entry for each scalar\n+\t\t   register that was saved in this batch.  */\n+\t\tfor (int idx = 0; idx < count; idx++)\n+\t\t  {\n+\t\t    int stackaddr = offset + idx * 4;\n+\t\t    rtx dest = gen_rtx_MEM (SImode,\n+\t\t\t\t\t    gen_rtx_PLUS\n+\t\t\t\t\t    (DImode, sp,\n+\t\t\t\t\t     GEN_INT (stackaddr)));\n+\t\t    rtx src = gen_rtx_REG (SImode, saved_sgprs[start + idx]);\n+\t\t    rtx set = gen_rtx_SET (dest, src);\n+\t\t    RTX_FRAME_RELATED_P (set) = 1;\n+\t\t    RTVEC_ELT (seq, idx) = set;\n+\n+\t\t    if (saved_sgprs[start + idx] == LINK_REGNUM)\n+\t\t      lrdest = stackaddr;\n+\t\t  }\n+\n+\t\t/* Add an additional expression for DWARF_LINK_REGISTER if\n+\t\t   LINK_REGNUM was saved.  */\n+\t\tif (lrdest != -1)\n+\t\t  {\n+\t\t    rtx dest = gen_rtx_MEM (DImode,\n+\t\t\t\t\t    gen_rtx_PLUS\n+\t\t\t\t\t    (DImode, sp,\n+\t\t\t\t\t     GEN_INT (lrdest)));\n+\t\t    rtx src = gen_rtx_REG (DImode, DWARF_LINK_REGISTER);\n+\t\t    rtx set = gen_rtx_SET (dest, src);\n+\t\t    RTX_FRAME_RELATED_P (set) = 1;\n+\t\t    RTVEC_ELT (seq, count) = set;\n+\t\t  }\n+\n+\t\tnote = gen_rtx_SEQUENCE (VOIDmode, seq);\n+\t      }\n+\t    else\n+\t      {\n+\t\trtx dest = gen_rtx_MEM (V64SImode,\n+\t\t\t\t\tgen_rtx_PLUS (DImode, sp,\n+\t\t\t\t\t\t      GEN_INT (offset)));\n+\t\trtx src = gen_rtx_REG (V64SImode, regno);\n+\t\tnote = gen_rtx_SET (dest, src);\n+\t      }\n+\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t    add_reg_note (insn, REG_FRAME_RELATED_EXPR, note);\n+\t  }\n \telse\n \t  emit_insn (gen_gatherv64si_insn_1offset_exec\n \t\t     (reg, vsp, const0_rtx, as, const0_rtx,\n@@ -3224,8 +3287,7 @@ gcn_cannot_copy_insn_p (rtx_insn *insn)\n static enum unwind_info_type\n gcn_debug_unwind_info ()\n {\n-  /* No support for debug info, yet.  */\n-  return UI_NONE;\n+  return UI_DWARF2;\n }\n \n /* Determine if there is a suitable hardware conversion instruction.\n@@ -6251,6 +6313,8 @@ gcn_dwarf_register_number (unsigned int regno)\n     return 768;  */\n   else if (regno == SCC_REG)\n     return 128;\n+  else if (regno == DWARF_LINK_REGISTER)\n+    return 16;\n   else if (SGPR_REGNO_P (regno))\n     {\n       if (regno - FIRST_SGPR_REG < 64)\n@@ -6280,8 +6344,12 @@ gcn_dwarf_register_span (rtx rtl)\n   if (GET_MODE_SIZE (mode) != 8)\n     return NULL_RTX;\n \n-  rtx p = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n   unsigned regno = REGNO (rtl);\n+\n+  if (regno == DWARF_LINK_REGISTER)\n+    return NULL_RTX;\n+\n+  rtx p = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n   XVECEXP (p, 0, 0) = gen_rtx_REG (SImode, regno);\n   XVECEXP (p, 0, 1) = gen_rtx_REG (SImode, regno + 1);\n "}, {"sha": "5822ec34aa7bcf32b4593602a8c6d4cb1129c973", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251697a64ba4d7f10f072702771a59d30364cc26/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251697a64ba4d7f10f072702771a59d30364cc26/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=251697a64ba4d7f10f072702771a59d30364cc26", "patch": "@@ -88,6 +88,7 @@\n #define FIRST_PARM_OFFSET(FNDECL)    0\n #define DYNAMIC_CHAIN_ADDRESS(FP)    plus_constant (Pmode, (FP), -16)\n #define INCOMING_RETURN_ADDR_RTX     gen_rtx_REG (Pmode, LINK_REGNUM)\n+#define DWARF_FRAME_RETURN_COLUMN    16\n #define STACK_DYNAMIC_OFFSET(FNDECL) (-crtl->outgoing_args_size)\n #define ACCUMULATE_OUTGOING_ARGS     1\n #define RETURN_ADDR_RTX(COUNT,FRAMEADDR) \\\n@@ -138,7 +139,8 @@\n #define WORK_ITEM_ID_Z_REG\t  162\n #define SOFT_ARG_REG\t\t  416\n #define FRAME_POINTER_REGNUM\t  418\n-#define FIRST_PSEUDO_REGISTER\t  420\n+#define DWARF_LINK_REGISTER\t  420\n+#define FIRST_PSEUDO_REGISTER\t  421\n \n #define FIRST_PARM_REG 24\n #define NUM_PARM_REGS  6\n@@ -200,7 +202,7 @@\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     /* Other registers.  */\t\t\t    \\\n-    1, 1, 1, 1\t\t\t\t\t    \\\n+    1, 1, 1, 1, 1\t\t\t\t    \\\n }\n \n #define CALL_USED_REGISTERS {\t\t\t    \\\n@@ -238,7 +240,7 @@\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n     /* Other registers.  */\t\t\t    \\\n-    1, 1, 1, 1\t\t\t\t\t    \\\n+    1, 1, 1, 1, 1\t\t\t\t    \\\n }\n \n \f\n@@ -517,7 +519,7 @@ enum gcn_address_spaces\n     \"v236\", \"v237\", \"v238\", \"v239\", \"v240\", \"v241\", \"v242\", \"v243\", \"v244\", \\\n     \"v245\", \"v246\", \"v247\", \"v248\", \"v249\", \"v250\", \"v251\", \"v252\", \"v253\", \\\n     \"v254\", \"v255\",\t\t\t\t\t\t\t    \\\n-    \"?ap0\", \"?ap1\", \"?fp0\", \"?fp1\" }\n+    \"?ap0\", \"?ap1\", \"?fp0\", \"?fp1\", \"?dwlr\" }\n \n #define PRINT_OPERAND(FILE, X, CODE)  print_operand(FILE, X, CODE)\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  print_operand_address (FILE, ADDR)"}]}