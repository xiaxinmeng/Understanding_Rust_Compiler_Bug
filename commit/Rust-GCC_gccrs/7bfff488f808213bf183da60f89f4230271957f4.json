{"sha": "7bfff488f808213bf183da60f89f4230271957f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmZmY0ODhmODA4MjEzYmYxODNkYTYwZjg5ZjQyMzAyNzE5NTdmNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T10:03:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T10:03:25Z"}, "message": "[multiple changes]\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* inline.adb, s-traceb.adb, s-traceb-hpux.adb, memtrack.adb,\n\ts-traceb-mastop.adb: Minor reformatting.\n\n2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Expand_Record_Extension): In ASIS_Mode perform\n\texpansion, to handle properly visibility of selected components\n\tin instance bodies.\n\nFrom-SVN: r213337", "tree": {"sha": "65e23005d0906424d6085b9a4be1298abd71f4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65e23005d0906424d6085b9a4be1298abd71f4fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bfff488f808213bf183da60f89f4230271957f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfff488f808213bf183da60f89f4230271957f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfff488f808213bf183da60f89f4230271957f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfff488f808213bf183da60f89f4230271957f4/comments", "author": null, "committer": null, "parents": [{"sha": "aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "ed63217ea099f2e3f2f03c9896abc3993d522af1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -1,3 +1,14 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* inline.adb, s-traceb.adb, s-traceb-hpux.adb, memtrack.adb,\n+\ts-traceb-mastop.adb: Minor reformatting.\n+\n+2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Record_Extension): In ASIS_Mode perform\n+\texpansion, to handle properly visibility of selected components\n+\tin instance bodies.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* par-ch13.adb (Get_Aspect_Specifications): Set Inside_Depends."}, {"sha": "d404d377b6adc180c70373b3563b063a8bcc2479", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -4588,8 +4588,10 @@ package body Exp_Ch3 is\n    begin\n       --  Expand_Record_Extension is called directly from the semantics, so\n       --  we must check to see whether expansion is active before proceeding\n+      --  Because this affects the visibility of selected components in bodies\n+      --  of instances, it must also be called in ASIS mode.\n \n-      if not Expander_Active then\n+      if not (Expander_Active or ASIS_Mode) then\n          return;\n       end if;\n "}, {"sha": "e0357027af5e51db1162836409a54ede16a3fb68", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -1968,10 +1968,13 @@ package body Inline is\n          ---------------------------\n \n          function Has_Excluded_Contract return Boolean is\n-\n             function Check_Excluded_Contracts (E : Entity_Id) return Boolean;\n             --  Return True if the subprogram E has unsupported contracts\n \n+            ------------------------------\n+            -- Check_Excluded_Contracts --\n+            ------------------------------\n+\n             function Check_Excluded_Contracts (E : Entity_Id) return Boolean is\n                Items : constant Node_Id := Contract (E);\n \n@@ -1990,8 +1993,13 @@ package body Inline is\n                return False;\n             end Check_Excluded_Contracts;\n \n+            --  Local declarations\n+\n             Decl : Node_Id;\n             P_Id : Pragma_Id;\n+\n+         --  Start of processing for Has_Excluded_Contract\n+\n          begin\n             if Check_Excluded_Contracts (Spec_Id)\n               or else Check_Excluded_Contracts (Body_Id)"}, {"sha": "35ca8b26bfeff1ff11437ff2ffe44898ff222c7f", "filename": "gcc/ada/memtrack.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fmemtrack.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fmemtrack.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmemtrack.adb?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -196,8 +196,8 @@ package body System.Memory is\n          end if;\n \n          Timestamp := System.OS_Primitives.Clock;\n-         Call_Chain (Tracebk, Max_Call_Stack, Num_Calls,\n-                     Skip_Frames => 2);\n+         Call_Chain\n+           (Tracebk, Max_Call_Stack, Num_Calls, Skip_Frames => 2);\n          fputc (Character'Pos ('A'), Gmemfile);\n          fwrite (Result'Address, Address_Size, 1, Gmemfile);\n          fwrite (Actual_Size'Address, size_t'Max_Size_In_Storage_Elements, 1,\n@@ -262,8 +262,8 @@ package body System.Memory is\n             Gmem_Initialize;\n          end if;\n \n-         Call_Chain (Tracebk, Max_Call_Stack, Num_Calls,\n-                     Skip_Frames => 2);\n+         Call_Chain\n+           (Tracebk, Max_Call_Stack, Num_Calls, Skip_Frames => 2);\n          Timestamp := System.OS_Primitives.Clock;\n          fputc (Character'Pos ('D'), Gmemfile);\n          fwrite (Addr'Address, Address_Size, 1, Gmemfile);\n@@ -345,8 +345,8 @@ package body System.Memory is\n          if Needs_Init then\n             Gmem_Initialize;\n          end if;\n-         Call_Chain (Tracebk, Max_Call_Stack, Num_Calls,\n-                     Skip_Frames => 2);\n+         Call_Chain\n+           (Tracebk, Max_Call_Stack, Num_Calls, Skip_Frames => 2);\n          Timestamp := System.OS_Primitives.Clock;\n          fputc (Character'Pos ('D'), Gmemfile);\n          fwrite (Addr'Address, Address_Size, 1, Gmemfile);"}, {"sha": "9987cb3fe6466a8588850297a69e26cabef5d6c2", "filename": "gcc/ada/s-traceb-hpux.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fs-traceb-hpux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fs-traceb-hpux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-hpux.adb?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -618,8 +618,11 @@ package body System.Traceback is\n    begin\n       Call_Chain\n         (Traceback'Address, Max_Len, Len,\n-         Exclude_Min, Exclude_Max, Skip_Frames + 1);\n-      --  Skip one extra frame so we skip the other Call_Chain as well\n+         Exclude_Min, Exclude_Max,\n+\n+         --  Skip one extra frame to skip the other Call_Chain entry as well\n+\n+         Skip_Frames => Skip_Frames + 1);\n    end Call_Chain;\n \n end System.Traceback;"}, {"sha": "0ce7c50f933a0f02383c76e45e98878a8e2302a3", "filename": "gcc/ada/s-traceb-mastop.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fs-traceb-mastop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fs-traceb-mastop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-mastop.adb?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -114,8 +114,11 @@ package body System.Traceback is\n    begin\n       Call_Chain\n         (Traceback'Address, Max_Len, Len,\n-         Exclude_Min, Exclude_Max, Skip_Frames + 1);\n-      --  Skip one extra frame so we skip the other Call_Chain as well\n+         Exclude_Min, Exclude_Max,\n+\n+         --  Skip one extra frame to skip the other Call_Chain entry as well\n+\n+         Skip_Frames => Skip_Frames + 1);\n    end Call_Chain;\n \n    ------------------"}, {"sha": "0a8726c659621eddecc521e7f8dfad951d6daef2", "filename": "gcc/ada/s-traceb.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fs-traceb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfff488f808213bf183da60f89f4230271957f4/gcc%2Fada%2Fs-traceb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb.adb?ref=7bfff488f808213bf183da60f89f4230271957f4", "patch": "@@ -109,8 +109,11 @@ package body System.Traceback is\n    begin\n       Call_Chain\n         (Traceback'Address, Max_Len, Len,\n-         Exclude_Min, Exclude_Max, Skip_Frames + 1);\n-      --  Skip one extra frame so we skip the other Call_Chain as well\n+         Exclude_Min, Exclude_Max,\n+\n+         --  Skip one extra frame to skip the other Call_Chain entry as well\n+\n+         Skip_Frames => Skip_Frames + 1);\n    end Call_Chain;\n \n end System.Traceback;"}]}