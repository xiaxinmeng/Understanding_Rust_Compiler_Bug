{"sha": "1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI5NjFkZTlkYjBiN2ZmYjhkN2Y0NjE0ZGRmNjFmYWYzMWE1NDRhNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-05-26T10:20:41Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-05-26T10:20:41Z"}, "message": "re PR fortran/66082 (memory leak with automatic array dummy argument with derived type array constructor actual argument)\n\n2015-05-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/66082\n\t* trans-array.c (gfc_conv_array_parameter): Ensure that all\n\tnon-variable arrays with allocatable components have the\n\tcomponents deallocated after the procedure call.\n\n2015-05-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/66082\n\t* gfortran.dg/allocatable_scalar_13.f90: New test\n\nFrom-SVN: r223677", "tree": {"sha": "1b275d36c59aaa9239bd4cce6c1c426681fc6cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b275d36c59aaa9239bd4cce6c1c426681fc6cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/comments", "author": null, "committer": null, "parents": [{"sha": "4a72a6ddd2e9b5d425f53c4e4e99f1d66ca7c46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a72a6ddd2e9b5d425f53c4e4e99f1d66ca7c46b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a72a6ddd2e9b5d425f53c4e4e99f1d66ca7c46b"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "0bada49d283191a2fb82231f7e3b97a68e00c1ba", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "patch": "@@ -1,3 +1,10 @@\n+2015-05-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/66082\n+\t* trans-array.c (gfc_conv_array_parameter): Ensure that all\n+\tnon-variable arrays with allocatable components have the\n+\tcomponents deallocated after the procedure call.\n+\n 2015-05-24  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/66257"}, {"sha": "c8fab454249227bf42510c93a9171b46bade7e79", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "patch": "@@ -4458,7 +4458,7 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n \t  if (!nDepend && dest_expr->rank > 0\n \t      && dest_expr->ts.type == BT_CHARACTER\n \t      && ss_expr->expr_type == EXPR_VARIABLE)\n-\t    \n+\n \t    nDepend = gfc_check_dependency (dest_expr, ss_expr, false);\n \n \t  continue;\n@@ -7267,6 +7267,17 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n   if (no_pack || array_constructor || good_allocatable || ultimate_alloc_comp)\n     {\n       gfc_conv_expr_descriptor (se, expr);\n+      /* Deallocate the allocatable components of structures that are\n+\t not variable.  */\n+      if ((expr->ts.type == BT_DERIVED || expr->ts.type == BT_CLASS)\n+\t   && expr->ts.u.derived->attr.alloc_comp\n+\t   && expr->expr_type != EXPR_VARIABLE)\n+\t{\n+\t  tmp = gfc_deallocate_alloc_comp (expr->ts.u.derived, se->expr, expr->rank);\n+\n+\t  /* The components shall be deallocated before their containing entity.  */\n+\t  gfc_prepend_expr_to_block (&se->post, tmp);\n+\t}\n       if (expr->ts.type == BT_CHARACTER)\n \tse->string_length = expr->ts.u.cl->backend_decl;\n       if (size)"}, {"sha": "ccfca6add5971bad90bad5e8a192e3b6749bcfeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "patch": "@@ -1,3 +1,8 @@\n+2015-05-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/66082\n+\t* gfortran.dg/allocatable_scalar_13.f90: New test\n+\n 2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/warn11.adb: New test."}, {"sha": "57835131f1fb8346a4beae9c3466d0597d5e8716", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_auto_array_3.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b961de9db0b7ffb8d7f4614ddf61faf31a544a5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_3.f90?ref=1b961de9db0b7ffb8d7f4614ddf61faf31a544a5", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR66082. The original problem was with the first\n+! call foo_1d.\n+!\n+! Reported by Damian Rouson  <damian@sourceryinstitute.org>\n+!\n+  type foo_t\n+    real, allocatable :: bigarr\n+  end type\n+  block\n+    type(foo_t) :: foo\n+    allocate(foo%bigarr)\n+    call foo_1d (1,[foo]) ! wasy lost\n+    call foo_1d (1,bar_1d()) ! Check that this is OK\n+  end block\n+contains\n+  subroutine foo_1d (n,foo)\n+    integer n\n+    type(foo_t) :: foo(n)\n+  end subroutine\n+  function bar_1d () result (array)\n+    type(foo_t) :: array(1)\n+    allocate (array(1)%bigarr)\n+  end function\n+end\n+! { dg-final { scan-tree-dump-times \"builtin_malloc\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"builtin_free\" 4 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}