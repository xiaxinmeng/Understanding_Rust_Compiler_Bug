{"sha": "3fc7cd185f129c5f6c7d0cf9d990235306c69e6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjN2NkMTg1ZjEyOWM1ZjZjN2QwY2Y5ZDk5MDIzNTMwNmM2OWU2ZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-29T15:57:06Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-29T15:57:06Z"}, "message": "re PR bootstrap/44713 (Revision 161530 failed bootstrap)\n\n\tPR bootstrap/44713\n\t* config/i386/i386.c (type_natural_mode): Const-ify CUM parameter.\n\t(function_arg_advance_32): Const-ify TYPE parameter.\n\t(function_arg_advance_64): Likewise.  Change type of NAMED to bool.\n\t(ix86_function_arg_advance): Change type of NAMED to bool.\n\t(function_arg_32): Const-ify CUM and TYPE parameters.\n\t(function_arg_64): Likewise.  Change type of NAMED to bool.\n\t(function_arg_ms_64): Const-ify CUM parameter. Change type of NAMED\n\tto bool.\n\t(ix86_function_arg): Change type of NAMED to bool.\n\t(ix86_setup_incoming_varargs): Call ix86_function_arg_advance.  Pass\n\tlast argument as a bool.\n\nFrom-SVN: r161540", "tree": {"sha": "aa0507ae6f2ae600da75842d9c8e2ee157c6d2d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa0507ae6f2ae600da75842d9c8e2ee157c6d2d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d/comments", "author": null, "committer": null, "parents": [{"sha": "9afcc09deef52609c1c77732726d8cd76009b43b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9afcc09deef52609c1c77732726d8cd76009b43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9afcc09deef52609c1c77732726d8cd76009b43b"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "da8f9680798003b389f877996237ded1518f710b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fc7cd185f129c5f6c7d0cf9d990235306c69e6d", "patch": "@@ -1,3 +1,18 @@\n+2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR bootstrap/44713\n+\t* config/i386/i386.c (type_natural_mode): Const-ify CUM parameter.\n+\t(function_arg_advance_32): Const-ify TYPE parameter.\n+\t(function_arg_advance_64): Likewise.  Change type of NAMED to bool.\n+\t(ix86_function_arg_advance): Change type of NAMED to bool.\n+\t(function_arg_32): Const-ify CUM and TYPE parameters.\n+\t(function_arg_64): Likewise.  Change type of NAMED to bool.\n+\t(function_arg_ms_64): Const-ify CUM parameter. Change type of NAMED\n+\tto bool.\n+\t(ix86_function_arg): Change type of NAMED to bool.\n+\t(ix86_setup_incoming_varargs): Call ix86_function_arg_advance.  Pass\n+\tlast argument as a bool.\n+\n 2010-06-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* doc/tm.texi (TARGET_OPTION_OVERRIDE): Document."}, {"sha": "8d952975818a1e2bf78b0465e494ca21ee487a5e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc7cd185f129c5f6c7d0cf9d990235306c69e6d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3fc7cd185f129c5f6c7d0cf9d990235306c69e6d", "patch": "@@ -5180,7 +5180,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n    NULL.  */\n \n static enum machine_mode\n-type_natural_mode (const_tree type, CUMULATIVE_ARGS *cum)\n+type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n \n@@ -5937,7 +5937,8 @@ construct_container (enum machine_mode mode, enum machine_mode orig_mode,\n \n static void\n function_arg_advance_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t tree type, HOST_WIDE_INT bytes, HOST_WIDE_INT words)\n+\t\t\t const_tree type, HOST_WIDE_INT bytes,\n+\t\t\t HOST_WIDE_INT words)\n {\n   switch (mode)\n     {\n@@ -6025,7 +6026,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static void\n function_arg_advance_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t tree type, HOST_WIDE_INT words, int named)\n+\t\t\t const_tree type, HOST_WIDE_INT words, bool named)\n {\n   int int_nregs, sse_nregs;\n \n@@ -6067,7 +6068,7 @@ function_arg_advance_ms_64 (CUMULATIVE_ARGS *cum, HOST_WIDE_INT bytes,\n \n static void\n ix86_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t\t   const_tree type, int named)\n+\t\t\t   const_tree type, bool named)\n {\n   HOST_WIDE_INT bytes, words;\n \n@@ -6102,8 +6103,8 @@ ix86_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n static rtx\n-function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t enum machine_mode orig_mode, tree type,\n+function_arg_32 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t enum machine_mode orig_mode, const_tree type,\n \t\t HOST_WIDE_INT bytes, HOST_WIDE_INT words)\n {\n   static bool warnedsse, warnedmmx;\n@@ -6219,8 +6220,8 @@ function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n }\n \n static rtx\n-function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t enum machine_mode orig_mode, tree type, int named)\n+function_arg_64 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t enum machine_mode orig_mode, const_tree type, bool named)\n {\n   /* Handle a hidden AL argument containing number of registers\n      for varargs x86-64 functions.  */\n@@ -6255,8 +6256,8 @@ function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n }\n \n static rtx\n-function_arg_ms_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t\t    enum machine_mode orig_mode, int named,\n+function_arg_ms_64 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t    enum machine_mode orig_mode, bool named,\n \t\t    HOST_WIDE_INT bytes)\n {\n   unsigned int regno;\n@@ -6314,7 +6315,7 @@ function_arg_ms_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static rtx\n ix86_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode omode,\n-\t\t   const_tree type, int named)\n+\t\t   const_tree type, bool named)\n {\n   enum machine_mode mode = omode;\n   HOST_WIDE_INT bytes, words;\n@@ -7047,7 +7048,7 @@ ix86_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n      For stdargs, we do want to skip the last named argument.  */\n   next_cum = *cum;\n   if (stdarg_p (fntype))\n-    function_arg_advance (&next_cum, mode, type, 1);\n+    ix86_function_arg_advance (&next_cum, mode, type, true);\n \n   if (cum->call_abi == MS_ABI)\n     setup_incoming_varargs_ms_64 (&next_cum);"}]}