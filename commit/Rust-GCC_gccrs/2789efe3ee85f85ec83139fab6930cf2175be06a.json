{"sha": "2789efe3ee85f85ec83139fab6930cf2175be06a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4OWVmZTNlZTg1Zjg1ZWM4MzEzOWZhYjY5MzBjZjIxNzViZTA2YQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-06-15T00:38:55Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-06-15T00:38:55Z"}, "message": "arith.c (arith_power): Rework overflow of an integer to an integer exponent.\n\n2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* arith.c (arith_power): Rework overflow of an integer to an integer\n\texponent.\n\n2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* gfortran.dg/integer_exponentiation_4.f90: Update test.\n\t* gfortran.dg/integer_exponentiation_5.F90: Ditto.\n\t* gfortran.dg/no_range_check_1.f90: Ditto.\n\nFrom-SVN: r272320", "tree": {"sha": "9817f4631ecde77ff526033d2da53681378a1023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9817f4631ecde77ff526033d2da53681378a1023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2789efe3ee85f85ec83139fab6930cf2175be06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2789efe3ee85f85ec83139fab6930cf2175be06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2789efe3ee85f85ec83139fab6930cf2175be06a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2789efe3ee85f85ec83139fab6930cf2175be06a/comments", "author": null, "committer": null, "parents": [{"sha": "4e20bd42bc04959c4b2f845352046fcfd5313484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e20bd42bc04959c4b2f845352046fcfd5313484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e20bd42bc04959c4b2f845352046fcfd5313484"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "ddb2353e44c93480ed96eea0cfb16e1afdec39d0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2789efe3ee85f85ec83139fab6930cf2175be06a", "patch": "@@ -1,3 +1,8 @@\n+2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* arith.c (arith_power): Rework overflow of an integer to an integer\n+\texponent.\n+\n 2019-06-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/90577"}, {"sha": "a4f879531d9d6e458af384c4cfc8917d6ca92af5", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=2789efe3ee85f85ec83139fab6930cf2175be06a", "patch": "@@ -848,8 +848,6 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t    {\n \t    case BT_INTEGER:\n \t      {\n-\t\tint power;\n-\n \t\t/* First, we simplify the cases of op1 == 1, 0 or -1.  */\n \t\tif (mpz_cmp_si (op1->value.integer, 1) == 0)\n \t\t  {\n@@ -884,29 +882,36 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \t\t\t\t       \"exponent of integer has zero \"\n \t\t\t\t       \"result at %L\", &result->where);\n \t\t  }\n-\t\telse if (gfc_extract_int (op2, &power))\n+\t\telse\n \t\t  {\n-\t\t    /* If op2 doesn't fit in an int, the exponentiation will\n-\t\t       overflow, because op2 > 0 and abs(op1) > 1.  */\n-\t\t    mpz_t max;\n-\t\t    int i;\n-\t\t    i = gfc_validate_kind (BT_INTEGER, result->ts.kind, false);\n-\n-\t\t    if (flag_range_check)\n-\t\t      rc = ARITH_OVERFLOW;\n-\n-\t\t    /* Still, we want to give the same value as the\n-\t\t       processor.  */\n-\t\t    mpz_init (max);\n-\t\t    mpz_add_ui (max, gfc_integer_kinds[i].huge, 1);\n-\t\t    mpz_mul_ui (max, max, 2);\n-\t\t    mpz_powm (result->value.integer, op1->value.integer,\n-\t\t\t      op2->value.integer, max);\n-\t\t    mpz_clear (max);\n+\t\t    /* We have abs(op1) > 1 and op2 > 1.\n+\t\t       If op2 > bit_size(op1), we'll have an out-of-range\n+\t\t       result.  */\n+\t\t    int k, power;\n+\n+\t\t    k = gfc_validate_kind (BT_INTEGER, op1->ts.kind, false);\n+\t\t    power = gfc_integer_kinds[k].bit_size;\n+\t\t    if (mpz_cmp_si (op2->value.integer, power) < 0)\n+\t\t      {\n+\t\t\tgfc_extract_int (op2, &power);\n+\t\t\tmpz_pow_ui (result->value.integer, op1->value.integer,\n+\t\t\t\t    power);\n+\t\t\trc = gfc_range_check (result);\n+\t\t\tif (rc == ARITH_OVERFLOW)\n+\t\t\t  gfc_error_now (\"Result of exponentiation at %L \"\n+\t\t\t\t\t \"exceeds the range of %s\", &op1->where,\n+\t\t\t\t\t gfc_typename (&(op1->ts)));\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\t/* Provide a nonsense value to propagate up. */\n+\t\t\tmpz_set (result->value.integer,\n+\t\t\t\t gfc_integer_kinds[k].huge);\n+\t\t\tmpz_add_ui (result->value.integer,\n+\t\t\t\t    result->value.integer, 1);\n+\t\t\trc = ARITH_OVERFLOW;\n+\t\t      }\n \t\t  }\n-\t\telse\n-\t\t  mpz_pow_ui (result->value.integer, op1->value.integer,\n-\t\t\t      power);\n \t      }\n \t      break;\n "}, {"sha": "9fc92f38e6eaa85aaa712e7f99cd61e559334f8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2789efe3ee85f85ec83139fab6930cf2175be06a", "patch": "@@ -1,3 +1,9 @@\n+2019-06-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* gfortran.dg/integer_exponentiation_4.f90: Update test.\n+\t* gfortran.dg/integer_exponentiation_5.F90: Ditto.\n+\t* gfortran.dg/no_range_check_1.f90: Ditto.\n+\n 2019-06-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/90577"}, {"sha": "b224ef9671446d4213ca74098124dd3a647eb229", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_4.f90?ref=2789efe3ee85f85ec83139fab6930cf2175be06a", "patch": "@@ -21,10 +21,10 @@ program test\n   print *, (-1)**huge(0_8)\n   print *, (-1)**(-huge(0_8)-1_8)\n \n-  print *, 2**huge(0) ! { dg-error \"Arithmetic overflow\" }\n-  print *, 2**huge(0_8) ! { dg-error \"Arithmetic overflow\" }\n-  print *, (-2)**huge(0) ! { dg-error \"Arithmetic overflow\" }\n-  print *, (-2)**huge(0_8) ! { dg-error \"Arithmetic overflow\" }\n+  print *, 2**huge(0) ! { dg-error \"Arithmetic overflow|exceeds the range\" }\n+  print *, 2**huge(0_8) ! { dg-error \"Arithmetic overflow|exceeds the range\" }\n+  print *, (-2)**huge(0) ! { dg-error \"Arithmetic overflow|exceeds the range\" }\n+  print *, (-2)**huge(0_8) ! { dg-error \"Arithmetic overflow|exceeds the range\" }\n \n   print *, 2**(-huge(0)-1)\n   print *, 2**(-huge(0_8)-1_8)"}, {"sha": "f16b751b12815f57a1ffc8c6f355b01904e677da", "filename": "gcc/testsuite/gfortran.dg/integer_exponentiation_5.F90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_5.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_5.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_exponentiation_5.F90?ref=2789efe3ee85f85ec83139fab6930cf2175be06a", "patch": "@@ -67,8 +67,6 @@ program test\n   TEST(3_8,43_8,i8)\n   TEST(-3_8,43_8,i8)\n \n-  TEST(17_8,int(huge(0_4),kind=8)+1,i8)\n-\n !!!!! REAL BASE !!!!!\n   TEST(0.0,-1,r4)\n   TEST(0.0,-huge(0)-1,r4)"}, {"sha": "7066e19835ce89ee520a3a359785e1033239e07b", "filename": "gcc/testsuite/gfortran.dg/no_range_check_1.f90", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789efe3ee85f85ec83139fab6930cf2175be06a/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_1.f90?ref=2789efe3ee85f85ec83139fab6930cf2175be06a", "patch": "@@ -4,11 +4,8 @@\n ! This testcase arose from PR 31262\n   integer :: a\n   integer(kind=8) :: b\n-  a = -3\n   b = -huge(b) / 7\n-  a = a ** 73\n   b = 7894_8 * b - 78941_8\n-  if ((-3)**73 /= a) STOP 1\n   if (7894_8 * (-huge(b) / 7) - 78941_8 /= b) STOP 2\n \n   a = 1234789786453123"}]}