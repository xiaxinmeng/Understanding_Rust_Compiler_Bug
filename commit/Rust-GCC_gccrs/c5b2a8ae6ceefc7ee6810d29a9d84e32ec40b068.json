{"sha": "c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViMmE4YWU2Y2VlZmM3ZWU2ODEwZDI5YTlkODRlMzJlYzQwYjA2OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2003-11-20T17:53:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-11-20T17:53:13Z"}, "message": "35soccon.ads, [...]: New file, FreeBSD version.\n\n\t* 35soccon.ads, 45intnam.ads, 55osinte.adb, 55osinte.ads,\n\t56system.ads: New file, FreeBSD version.\n\nFrom-SVN: r73766", "tree": {"sha": "9956d5bddf5a977f9516d718780a94cfb8d9d4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9956d5bddf5a977f9516d718780a94cfb8d9d4be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/comments", "author": null, "committer": null, "parents": [{"sha": "93352ff5169fb2f190472bcda458a9d39e87f97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93352ff5169fb2f190472bcda458a9d39e87f97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93352ff5169fb2f190472bcda458a9d39e87f97b"}], "stats": {"total": 1187, "additions": 1187, "deletions": 0}, "files": [{"sha": "cd19222e1a735c5f7d450fa4c239e44adcf0e743", "filename": "gcc/ada/35soccon.ads", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F35soccon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F35soccon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F35soccon.ads?ref=c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2000-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides target dependent definitions of constant for use\n+--  by the GNAT.Sockets package (g-socket.ads). This package should not be\n+--  directly with'ed by an applications program.\n+\n+--  This is the version for i386 FreeBSD\n+\n+package GNAT.Sockets.Constants is\n+\n+   --------------\n+   -- Families --\n+   --------------\n+\n+   AF_INET            : constant :=            2; --  IPv4 address family\n+   AF_INET6           : constant :=           28; --  IPv6 address family\n+\n+   -----------\n+   -- Modes --\n+   -----------\n+\n+   SOCK_STREAM        : constant :=            1; --  Stream socket\n+   SOCK_DGRAM         : constant :=            2; --  Datagram socket\n+\n+   -------------------\n+   -- Socket errors --\n+   -------------------\n+\n+   EACCES             : constant :=           13; --  Permission denied\n+   EADDRINUSE         : constant :=           48; --  Address already in use\n+   EADDRNOTAVAIL      : constant :=           49; --  Cannot assign address\n+   EAFNOSUPPORT       : constant :=           47; --  Addr family not supported\n+   EALREADY           : constant :=           37; --  Operation in progress\n+   EBADF              : constant :=            9; --  Bad file descriptor\n+   ECONNABORTED       : constant :=           53; --  Connection aborted\n+   ECONNREFUSED       : constant :=           61; --  Connection refused\n+   ECONNRESET         : constant :=           54; --  Connection reset by peer\n+   EDESTADDRREQ       : constant :=           39; --  Destination addr required\n+   EFAULT             : constant :=           14; --  Bad address\n+   EHOSTDOWN          : constant :=           64; --  Host is down\n+   EHOSTUNREACH       : constant :=           65; --  No route to host\n+   EINPROGRESS        : constant :=           36; --  Operation now in progress\n+   EINTR              : constant :=            4; --  Interrupted system call\n+   EINVAL             : constant :=           22; --  Invalid argument\n+   EIO                : constant :=            5; --  Input output error\n+   EISCONN            : constant :=           56; --  Socket already connected\n+   ELOOP              : constant :=           62; --  Too many symbolic lynks\n+   EMFILE             : constant :=           24; --  Too many open files\n+   EMSGSIZE           : constant :=           40; --  Message too long\n+   ENAMETOOLONG       : constant :=           63; --  Name too long\n+   ENETDOWN           : constant :=           50; --  Network is down\n+   ENETRESET          : constant :=           52; --  Disconn. on network reset\n+   ENETUNREACH        : constant :=           51; --  Network is unreachable\n+   ENOBUFS            : constant :=           55; --  No buffer space available\n+   ENOPROTOOPT        : constant :=           42; --  Protocol not available\n+   ENOTCONN           : constant :=           57; --  Socket not connected\n+   ENOTSOCK           : constant :=           38; --  Operation on non socket\n+   EOPNOTSUPP         : constant :=           45; --  Operation not supported\n+   EPFNOSUPPORT       : constant :=           46; --  Unknown protocol family\n+   EPROTONOSUPPORT    : constant :=           43; --  Unknown protocol\n+   EPROTOTYPE         : constant :=           41; --  Unknown protocol type\n+   ESHUTDOWN          : constant :=           58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT    : constant :=           44; --  Socket type not supported\n+   ETIMEDOUT          : constant :=           60; --  Connection timed out\n+   ETOOMANYREFS       : constant :=           59; --  Too many references\n+   EWOULDBLOCK        : constant :=           35; --  Operation would block\n+\n+   -----------------\n+   -- Host errors --\n+   -----------------\n+\n+   HOST_NOT_FOUND     : constant :=            1; --  Unknown host\n+   TRY_AGAIN          : constant :=            2; --  Host name lookup failure\n+   NO_DATA            : constant :=            4; --  No data record for name\n+   NO_RECOVERY        : constant :=            3; --  Non recoverable errors\n+\n+   -------------------\n+   -- Control flags --\n+   -------------------\n+\n+   FIONBIO            : constant :=  -2147195266; --  Set/clear non-blocking io\n+   FIONREAD           : constant :=   1074030207; --  How many bytes to read\n+\n+   --------------------\n+   -- Shutdown modes --\n+   --------------------\n+\n+   SHUT_RD            : constant :=            0; --  No more recv\n+   SHUT_WR            : constant :=            1; --  No more send\n+   SHUT_RDWR          : constant :=            2; --  No more recv/send\n+\n+   ---------------------\n+   -- Protocol levels --\n+   ---------------------\n+\n+   SOL_SOCKET         : constant :=        65535; --  Options for socket level\n+   IPPROTO_IP         : constant :=            0; --  Dummy protocol for IP\n+   IPPROTO_UDP        : constant :=           17; --  UDP\n+   IPPROTO_TCP        : constant :=            6; --  TCP\n+\n+   -------------------\n+   -- Request flags --\n+   -------------------\n+\n+   MSG_OOB            : constant :=            1; --  Process out-of-band data\n+   MSG_PEEK           : constant :=            2; --  Peek at incoming data\n+   MSG_EOR            : constant :=            8; --  Send end of record\n+   MSG_WAITALL        : constant :=           64; --  Wait for full reception\n+\n+   --------------------\n+   -- Socket options --\n+   --------------------\n+\n+   TCP_NODELAY        : constant :=            1; --  Do not coalesce packets\n+   SO_SNDBUF          : constant :=         4097; --  Set/get send buffer size\n+   SO_RCVBUF          : constant :=         4098; --  Set/get recv buffer size\n+   SO_REUSEADDR       : constant :=            4; --  Bind reuse local address\n+   SO_KEEPALIVE       : constant :=            8; --  Enable keep-alive msgs\n+   SO_LINGER          : constant :=          128; --  Defer close to flush data\n+   SO_ERROR           : constant :=         4103; --  Get/clear error status\n+   SO_BROADCAST       : constant :=           32; --  Can send broadcast msgs\n+   IP_ADD_MEMBERSHIP  : constant :=           12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP : constant :=           13; --  Leave a multicast group\n+   IP_MULTICAST_TTL   : constant :=           10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP  : constant :=           11; --  Set/get mcast loopback\n+\n+end GNAT.Sockets.Constants;"}, {"sha": "eb05daaa9125484964d07ca8fd92643827877718", "filename": "gcc/ada/45intnam.ads", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F45intnam.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F45intnam.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F45intnam.ads?ref=c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "patch": "@@ -0,0 +1,136 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   A D A . I N T E R R U P T S . N A M E S                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1991-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the FreeBSD THREADS version of this package\n+\n+with System.OS_Interface;\n+--  used for names of interrupts\n+\n+package Ada.Interrupts.Names is\n+\n+   SIGHUP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGHUP;      --  hangup\n+\n+   SIGINT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGINT;      --  interrupt (rubout)\n+\n+   SIGQUIT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGQUIT;     --  quit (ASCD FS)\n+\n+   SIGILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGILL;      --  illegal instruction (not reset)\n+\n+   SIGTRAP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTRAP;     --  trace trap (not reset)\n+\n+   SIGIOT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGIOT;      --  IOT instruction\n+\n+   SIGABRT : constant Interrupt_ID := --  used by abort,\n+     System.OS_Interface.SIGABRT;     --  replace SIGIOT in the  future\n+\n+   SIGFPE : constant Interrupt_ID :=\n+     System.OS_Interface.SIGFPE;      --  floating point exception\n+\n+   SIGKILL : constant Interrupt_ID :=\n+     System.OS_Interface.SIGKILL;     --  kill (cannot be caught or ignored)\n+\n+   SIGBUS : constant Interrupt_ID :=\n+     System.OS_Interface.SIGBUS;      --  bus error\n+\n+   SIGSEGV : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSEGV;     --  segmentation violation\n+\n+   SIGPIPE : constant Interrupt_ID := --  write on a pipe with\n+     System.OS_Interface.SIGPIPE;     --  no one to read it\n+\n+   SIGALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGALRM;     --  alarm clock\n+\n+   SIGTERM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTERM;     --  software termination signal from kill\n+\n+   SIGURG : constant Interrupt_ID :=\n+     System.OS_Interface.SIGURG;      --  urgent condition on IO channel\n+\n+   SIGSTOP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGSTOP;     --  stop (cannot be caught or ignored)\n+\n+   SIGTSTP : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTSTP;     --  user stop requested from tty\n+\n+   SIGCONT : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCONT;     --  stopped process has been continued\n+\n+   SIGCHLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCHLD;     --  4.3BSD's/POSIX name for SIGCLD\n+\n+   SIGCLD : constant Interrupt_ID :=\n+     System.OS_Interface.SIGCLD;      --  child status change\n+\n+   SIGTTIN : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTIN;     --  background tty read attempted\n+\n+   SIGTTOU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGTTOU;     --  background tty write attempted\n+\n+   SIGIO : constant Interrupt_ID :=   --  input/output possible,\n+     System.OS_Interface.SIGIO;       --  SIGPOLL alias (Solaris)\n+\n+   SIGXCPU : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXCPU;     --  CPU time limit exceeded\n+\n+   SIGXFSZ : constant Interrupt_ID :=\n+     System.OS_Interface.SIGXFSZ;     --  filesize limit exceeded\n+\n+   SIGVTALRM : constant Interrupt_ID :=\n+     System.OS_Interface.SIGVTALRM;   --  virtual timer expired\n+\n+   SIGPROF : constant Interrupt_ID :=\n+     System.OS_Interface.SIGPROF;     --  profiling timer expired\n+\n+   SIGWINCH : constant Interrupt_ID :=\n+     System.OS_Interface.SIGWINCH;    --  window size change\n+\n+   SIGUSR1 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR1;     --  user defined signal 1\n+\n+   SIGUSR2 : constant Interrupt_ID :=\n+     System.OS_Interface.SIGUSR2;     --  user defined signal 2\n+\n+   --  Beware that the mapping of names to signals may be\n+   --  many-to-one.  There may be aliases.  Also, for all\n+   --  signal names that are not supported on the current system\n+   --  the value of the corresponding constant will be zero.\n+\n+end Ada.Interrupts.Names;"}, {"sha": "466a15d2b3383bd1126cfde931d80dc581233d30", "filename": "gcc/ada/55osinte.adb", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F55osinte.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F55osinte.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F55osinte.adb?ref=c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "patch": "@@ -0,0 +1,108 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                   B o d y                                --\n+--                                                                          --\n+--          Copyright (C) 1991-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the FreeBSD THREADS version of this package\n+\n+with Interfaces.C; use Interfaces.C;\n+\n+package body System.OS_Interface is\n+\n+   function Errno return int is\n+      type int_ptr is access all int;\n+\n+      function internal_errno return int_ptr;\n+      pragma Import (C, internal_errno, \"__error\");\n+   begin\n+      return (internal_errno.all);\n+   end Errno;\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address is\n+      pragma Unreferenced (thread);\n+   begin\n+      return (0);\n+   end Get_Stack_Base;\n+\n+   procedure pthread_init is\n+   begin\n+      null;\n+   end pthread_init;\n+\n+   -----------------\n+   -- To_Duration --\n+   -----------------\n+\n+   function To_Duration (TS : timespec) return Duration is\n+   begin\n+      return Duration (TS.ts_sec) + Duration (TS.ts_nsec) / 10#1#E9;\n+   end To_Duration;\n+\n+   -----------------\n+   -- To_Timespec --\n+   -----------------\n+\n+   function To_Timespec (D : Duration) return timespec is\n+      S : time_t;\n+      F : Duration;\n+   begin\n+      S := time_t (Long_Long_Integer (D));\n+      F := D - Duration (S);\n+\n+      --  If F has negative value due to a round-up, adjust for positive F\n+      --  value.\n+      if F < 0.0 then S := S - 1; F := F + 1.0; end if;\n+      return timespec'(ts_sec => S,\n+        ts_nsec => long (Long_Long_Integer (F * 10#1#E9)));\n+   end To_Timespec;\n+\n+\n+   function To_Duration (TV : struct_timeval) return Duration is\n+   begin\n+      return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;\n+   end To_Duration;\n+\n+   function To_Timeval (D : Duration) return struct_timeval is\n+      S : long;\n+      F : Duration;\n+   begin\n+      S := long (Long_Long_Integer (D));\n+      F := D - Duration (S);\n+\n+      --  If F has negative value due to a round-up, adjust for positive F\n+      --  value.\n+      if F < 0.0 then S := S - 1; F := F + 1.0; end if;\n+      return struct_timeval'(tv_sec => S,\n+        tv_usec => long (Long_Long_Integer (F * 10#1#E6)));\n+   end To_Timeval;\n+\n+end System.OS_Interface;"}, {"sha": "fb74ce4a6e564133f25a287039490697de5c7db9", "filename": "gcc/ada/55osinte.ads", "status": "added", "additions": 630, "deletions": 0, "changes": 630, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F55osinte.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F55osinte.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F55osinte.ads?ref=c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "patch": "@@ -0,0 +1,630 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--          Copyright (C) 1991-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the FreeBSD PTHREADS version of this package\n+\n+with Interfaces.C;\n+package System.OS_Interface is\n+   pragma Preelaborate;\n+\n+   pragma Linker_Options (\"-pthread\");\n+\n+   subtype int            is Interfaces.C.int;\n+   subtype short          is Interfaces.C.short;\n+   subtype long           is Interfaces.C.long;\n+   subtype unsigned       is Interfaces.C.unsigned;\n+   subtype unsigned_short is Interfaces.C.unsigned_short;\n+   subtype unsigned_long  is Interfaces.C.unsigned_long;\n+   subtype unsigned_char  is Interfaces.C.unsigned_char;\n+   subtype plain_char     is Interfaces.C.plain_char;\n+   subtype size_t         is Interfaces.C.size_t;\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+\n+   function Errno return int;\n+   pragma Inline (Errno);\n+\n+   EAGAIN   : constant := 35;\n+   EINTR    : constant := 4;\n+   EINVAL   : constant := 22;\n+   ENOMEM   : constant := 12;\n+   ETIMEDOUT    : constant := 60;\n+\n+   -------------\n+   -- Signals --\n+   -------------\n+\n+   Max_Interrupt : constant := 31;\n+   type Signal is new int range 0 .. Max_Interrupt;\n+   for Signal'Size use int'Size;\n+\n+   SIGHUP     : constant := 1; --  hangup\n+   SIGINT     : constant := 2; --  interrupt (rubout)\n+   SIGQUIT    : constant := 3; --  quit (ASCD FS)\n+   SIGILL     : constant := 4; --  illegal instruction (not reset)\n+   SIGTRAP    : constant := 5; --  trace trap (not reset)\n+   SIGIOT     : constant := 6; --  IOT instruction\n+   SIGABRT    : constant := 6; --  used by abort, replace SIGIOT in the  future\n+   SIGEMT     : constant := 7; --  EMT instruction\n+   SIGFPE     : constant := 8; --  floating point exception\n+   SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)\n+   SIGBUS     : constant := 10; --  bus error\n+   SIGSEGV    : constant := 11; --  segmentation violation\n+   SIGSYS     : constant := 12; --  bad argument to system call\n+   SIGPIPE    : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM    : constant := 14; --  alarm clock\n+   SIGTERM    : constant := 15; --  software termination signal from kill\n+   SIGURG     : constant := 16; --  urgent condition on IO channel\n+   SIGSTOP    : constant := 17; --  stop (cannot be caught or ignored)\n+   SIGTSTP    : constant := 18; --  user stop requested from tty\n+   SIGCONT    : constant := 19; --  stopped process has been continued\n+   SIGCLD     : constant := 20; --  alias for SIGCHLD\n+   SIGCHLD    : constant := 20; --  child status change\n+   SIGTTIN    : constant := 21; --  background tty read attempted\n+   SIGTTOU    : constant := 22; --  background tty write attempted\n+   SIGIO      : constant := 23; --  I/O possible (Solaris SIGPOLL alias)\n+   SIGXCPU    : constant := 24; --  CPU time limit exceeded\n+   SIGXFSZ    : constant := 25; --  filesize limit exceeded\n+   SIGVTALRM  : constant := 26; --  virtual timer expired\n+   SIGPROF    : constant := 27; --  profiling timer expired\n+   SIGWINCH   : constant := 28; --  window size change\n+   SIGINFO    : constant := 29; --  information request (NetBSD/FreeBSD)\n+   SIGUSR1    : constant := 30; --  user defined signal 1\n+   SIGUSR2    : constant := 31; --  user defined signal 2\n+\n+   SIGADAABORT : constant := SIGABRT;\n+   --  Change this if you want to use another signal for task abort.\n+   --  SIGTERM might be a good one.\n+\n+   type Signal_Set is array (Natural range <>) of Signal;\n+\n+   --  Interrupts that must be unmasked at all times.  FreeBSD\n+   --  pthreads will not allow an application to mask out any\n+   --  interrupt needed by the threads library.\n+   Unmasked : constant Signal_Set :=\n+     (SIGTRAP, SIGBUS, SIGTTIN, SIGTTOU, SIGTSTP);\n+\n+   --  FreeBSD will uses SIGPROF for timing.  Do not allow a\n+   --  handler to attach to this signal.\n+   Reserved : constant Signal_Set := (0 .. 0 => SIGPROF);\n+\n+   type sigset_t is private;\n+\n+   function sigaddset\n+     (set : access sigset_t;\n+      sig : Signal) return int;\n+   pragma Import (C, sigaddset, \"sigaddset\");\n+\n+   function sigdelset\n+     (set : access sigset_t;\n+      sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigfillset (set : access sigset_t) return int;\n+   pragma Import (C, sigfillset, \"sigfillset\");\n+\n+   function sigismember\n+     (set : access sigset_t;\n+      sig : Signal) return int;\n+   pragma Import (C, sigismember, \"sigismember\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   --  sigcontext is architecture dependent, so define it private\n+   type struct_sigcontext is private;\n+\n+   type old_struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_mask    : sigset_t;\n+      sa_flags   : int;\n+   end record;\n+   pragma Convention (C, old_struct_sigaction);\n+\n+   type new_struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_flags   : int;\n+      sa_mask    : sigset_t;\n+   end record;\n+   pragma Convention (C, new_struct_sigaction);\n+\n+   subtype struct_sigaction is new_struct_sigaction;\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   SIG_BLOCK   : constant := 1;\n+   SIG_UNBLOCK : constant := 2;\n+   SIG_SETMASK : constant := 3;\n+\n+   SIG_DFL : constant := 0;\n+   SIG_IGN : constant := 1;\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   ----------\n+   -- Time --\n+   ----------\n+\n+   Time_Slice_Supported : constant Boolean := True;\n+   --  Indicates wether time slicing is supported (i.e SCHED_RR is supported)\n+\n+   type timespec is private;\n+\n+   function nanosleep (rqtp, rmtp : access timespec)  return int;\n+   pragma Import (C, nanosleep, \"nanosleep\");\n+\n+   type clockid_t is private;\n+\n+   CLOCK_REALTIME : constant clockid_t;\n+\n+   function clock_gettime\n+     (clock_id : clockid_t;\n+      tp       : access timespec)\n+      return int;\n+   pragma Import (C, clock_gettime, \"clock_gettime\");\n+\n+   function To_Duration (TS : timespec) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timespec (D : Duration) return timespec;\n+   pragma Inline (To_Timespec);\n+\n+   type struct_timezone is record\n+      tz_minuteswest : int;\n+      tz_dsttime     : int;\n+   end record;\n+   pragma Convention (C, struct_timezone);\n+   type struct_timeval is private;\n+   --  This is needed on systems that do not have clock_gettime()\n+   --  but do have gettimeofday().\n+\n+   function To_Duration (TV : struct_timeval) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timeval (D : Duration) return struct_timeval;\n+   pragma Inline (To_Timeval);\n+\n+   function gettimeofday\n+     (tv : access struct_timeval;\n+      tz : System.Address) return int;\n+   pragma Import (C, gettimeofday, \"gettimeofday\");\n+\n+   procedure usleep (useconds : unsigned_long);\n+   pragma Import (C, usleep, \"usleep\");\n+\n+   -------------------------\n+   -- Priority Scheduling --\n+   -------------------------\n+\n+   SCHED_FIFO  : constant := 1;\n+   SCHED_OTHER : constant := 2;\n+   SCHED_RR    : constant := 3;\n+\n+   -------------\n+   -- Process --\n+   -------------\n+\n+   type pid_t is private;\n+\n+   Self_PID : constant pid_t;\n+\n+   function kill (pid : pid_t; sig : Signal) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   function getpid return pid_t;\n+   pragma Import (C, getpid, \"getpid\");\n+\n+   ---------\n+   -- LWP --\n+   ---------\n+\n+   function lwp_self return System.Address;\n+   --  lwp_self does not exist on this thread library, revert to pthread_self\n+   --  which is the closest approximation (with getpid). This function is\n+   --  needed to share 7staprop.adb across POSIX-like targets.\n+   pragma Import (C, lwp_self, \"pthread_self\");\n+\n+   -------------\n+   -- Threads --\n+   -------------\n+\n+   type Thread_Body is access\n+     function (arg : System.Address) return System.Address;\n+\n+   type pthread_t           is private;\n+   subtype Thread_Id        is pthread_t;\n+\n+   type pthread_mutex_t     is limited private;\n+   type pthread_cond_t      is limited private;\n+   type pthread_attr_t      is limited private;\n+   type pthread_mutexattr_t is limited private;\n+   type pthread_condattr_t  is limited private;\n+   type pthread_key_t       is private;\n+\n+   PTHREAD_CREATE_DETACHED : constant := 1;\n+   PTHREAD_CREATE_JOINABLE : constant := 0;\n+\n+   -----------\n+   -- Stack --\n+   -----------\n+\n+   Stack_Base_Available : constant Boolean := False;\n+   --  Indicates wether the stack base is available on this target.\n+   --  This allows us to share s-osinte.adb between all the FSU run time.\n+   --  Note that this value can only be true if pthread_t has a complete\n+   --  definition that corresponds exactly to the C header files.\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address;\n+   pragma Inline (Get_Stack_Base);\n+   --  returns the stack base of the specified thread.\n+   --  Only call this function when Stack_Base_Available is True.\n+\n+   function Get_Page_Size return size_t;\n+   function Get_Page_Size return Address;\n+   pragma Import (C, Get_Page_Size, \"getpagesize\");\n+   --  returns the size of a page, or 0 if this is not relevant on this\n+   --  target\n+\n+   PROT_NONE  : constant := 0;\n+   PROT_READ  : constant := 1;\n+   PROT_WRITE : constant := 2;\n+   PROT_EXEC  : constant := 4;\n+   PROT_ALL   : constant := PROT_READ + PROT_WRITE + PROT_EXEC;\n+\n+   PROT_ON    : constant := PROT_NONE;\n+   PROT_OFF   : constant := PROT_ALL;\n+\n+   function mprotect\n+     (addr : Address; len : size_t; prot : int) return int;\n+   pragma Import (C, mprotect);\n+\n+   -----------------------------------------\n+   --  Nonstandard Thread Initialization  --\n+   -----------------------------------------\n+   --  FSU_THREADS requires pthread_init, which is nonstandard\n+   --  and this should be invoked during the elaboration of s-taprop.adb\n+   --\n+   --  FreeBSD does not require this so we provide an empty Ada body.\n+   procedure pthread_init;\n+\n+   ---------------------------\n+   --  POSIX.1c  Section 3  --\n+   ---------------------------\n+\n+   function sigwait\n+     (set : access sigset_t;\n+      sig : access Signal) return int;\n+   pragma Import (C, sigwait, \"sigwait\");\n+\n+   function pthread_kill\n+     (thread : pthread_t;\n+      sig    : Signal) return   int;\n+   pragma Import (C, pthread_kill, \"pthread_kill\");\n+\n+   type sigset_t_ptr is access all sigset_t;\n+\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : sigset_t_ptr;\n+      oset : sigset_t_ptr) return int;\n+   pragma Import (C, pthread_sigmask, \"pthread_sigmask\");\n+\n+   ----------------------------\n+   --  POSIX.1c  Section 11  --\n+   ----------------------------\n+\n+   function pthread_mutexattr_init\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_init, \"pthread_mutexattr_init\");\n+\n+   function pthread_mutexattr_destroy\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_destroy, \"pthread_mutexattr_destroy\");\n+\n+   function pthread_mutex_init\n+     (mutex : access pthread_mutex_t;\n+      attr  : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutex_init, \"pthread_mutex_init\");\n+\n+   function pthread_mutex_destroy (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_destroy, \"pthread_mutex_destroy\");\n+\n+   function pthread_mutex_lock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_lock, \"pthread_mutex_lock\");\n+\n+   function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n+\n+   function pthread_condattr_init\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n+\n+   function pthread_condattr_destroy\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_destroy, \"pthread_condattr_destroy\");\n+\n+   function pthread_cond_init\n+     (cond : access pthread_cond_t;\n+      attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_cond_init, \"pthread_cond_init\");\n+\n+   function pthread_cond_destroy (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_destroy, \"pthread_cond_destroy\");\n+\n+   function pthread_cond_signal (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_signal, \"pthread_cond_signal\");\n+\n+   function pthread_cond_wait\n+     (cond  : access pthread_cond_t;\n+      mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_cond_wait, \"pthread_cond_wait\");\n+\n+   function pthread_cond_timedwait\n+     (cond    : access pthread_cond_t;\n+      mutex   : access pthread_mutex_t;\n+      abstime : access timespec) return int;\n+   pragma Import (C, pthread_cond_timedwait, \"pthread_cond_timedwait\");\n+\n+   Relative_Timed_Wait : constant Boolean := False;\n+   --  pthread_cond_timedwait requires an absolute delay time\n+\n+   ----------------------------\n+   --  POSIX.1c  Section 13  --\n+   ----------------------------\n+\n+   PTHREAD_PRIO_NONE    : constant := 0;\n+   PTHREAD_PRIO_PROTECT : constant := 2;\n+   PTHREAD_PRIO_INHERIT : constant := 1;\n+\n+   function pthread_mutexattr_setprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : int) return int;\n+   pragma Import\n+      (C, pthread_mutexattr_setprotocol, \"pthread_mutexattr_setprotocol\");\n+\n+   function pthread_mutexattr_getprotocol\n+     (attr     : access pthread_mutexattr_t;\n+      protocol : access int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_getprotocol, \"pthread_mutexattr_getprotocol\");\n+\n+   function pthread_mutexattr_setprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_setprioceiling,\n+      \"pthread_mutexattr_setprioceiling\");\n+\n+   function pthread_mutexattr_getprioceiling\n+     (attr     : access pthread_mutexattr_t;\n+      prioceiling : access int) return int;\n+   pragma Import\n+     (C, pthread_mutexattr_getprioceiling,\n+      \"pthread_mutexattr_getprioceiling\");\n+\n+   type struct_sched_param is record\n+      sched_priority : int;\n+   end record;\n+   pragma Convention (C, struct_sched_param);\n+\n+   function pthread_getschedparam\n+     (thread : pthread_t;\n+      policy : access int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_getschedparam, \"pthread_getschedparam\");\n+\n+   function pthread_setschedparam\n+     (thread : pthread_t;\n+      policy : int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_setschedparam, \"pthread_setschedparam\");\n+\n+   function pthread_attr_setscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : int) return int;\n+   pragma Import (C, pthread_attr_setscope, \"pthread_attr_setscope\");\n+\n+   function pthread_attr_getscope\n+     (attr            : access pthread_attr_t;\n+      contentionscope : access int) return int;\n+   pragma Import (C, pthread_attr_getscope, \"pthread_attr_getscope\");\n+\n+   function pthread_attr_setinheritsched\n+     (attr            : access pthread_attr_t;\n+      inheritsched : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setinheritsched, \"pthread_attr_setinheritsched\");\n+\n+   function pthread_attr_getinheritsched\n+     (attr         : access pthread_attr_t;\n+      inheritsched : access int) return int;\n+   pragma Import\n+     (C, pthread_attr_getinheritsched, \"pthread_attr_getinheritsched\");\n+\n+   function pthread_attr_setschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : int) return int;\n+   pragma Import (C, pthread_attr_setschedpolicy,\n+     \"pthread_attr_setschedpolicy\");\n+\n+   function pthread_attr_getschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : access int) return int;\n+   pragma Import (C, pthread_attr_getschedpolicy,\n+     \"pthread_attr_getschedpolicy\");\n+\n+   function pthread_attr_setschedparam\n+     (attr        : access pthread_attr_t;\n+      sched_param : int) return int;\n+   pragma Import (C, pthread_attr_setschedparam, \"pthread_attr_setschedparam\");\n+\n+   function pthread_attr_getschedparam\n+     (attr        : access pthread_attr_t;\n+      sched_param : access int) return int;\n+   pragma Import (C, pthread_attr_getschedparam, \"pthread_attr_getschedparam\");\n+\n+   function sched_yield return int;\n+   pragma Import (C, sched_yield, \"pthread_yield\");\n+\n+   -----------------------------\n+   --  P1003.1c - Section 16  --\n+   -----------------------------\n+\n+   function pthread_attr_init (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_init, \"pthread_attr_init\");\n+\n+   function pthread_attr_destroy\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_destroy, \"pthread_attr_destroy\");\n+\n+   function pthread_attr_setdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setdetachstate, \"pthread_attr_setdetachstate\");\n+\n+   function pthread_attr_getdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : access int) return int;\n+   pragma Import\n+     (C, pthread_attr_getdetachstate, \"pthread_attr_getdetachstate\");\n+\n+   function pthread_attr_getstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : access size_t) return int;\n+   pragma Import\n+     (C, pthread_attr_getstacksize, \"pthread_attr_getstacksize\");\n+\n+   function pthread_attr_setstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : size_t) return int;\n+   pragma Import\n+     (C, pthread_attr_setstacksize, \"pthread_attr_setstacksize\");\n+\n+   function pthread_create\n+     (thread        : access pthread_t;\n+      attributes    : access pthread_attr_t;\n+      start_routine : Thread_Body;\n+      arg           : System.Address) return int;\n+   pragma Import (C, pthread_create, \"pthread_create\");\n+\n+   function pthread_detach (thread : pthread_t) return int;\n+   pragma Import (C, pthread_detach, \"pthread_detach\");\n+\n+   procedure pthread_exit (status : System.Address);\n+   pragma Import (C, pthread_exit, \"pthread_exit\");\n+\n+   function pthread_self return pthread_t;\n+   pragma Import (C, pthread_self, \"pthread_self\");\n+\n+   ----------------------------\n+   --  POSIX.1c  Section 17  --\n+   ----------------------------\n+\n+   function pthread_setspecific\n+     (key   : pthread_key_t;\n+      value : System.Address) return  int;\n+   pragma Import (C, pthread_setspecific, \"pthread_setspecific\");\n+\n+   function pthread_getspecific (key : pthread_key_t) return System.Address;\n+   pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n+\n+   type destructor_pointer is access\n+      procedure (arg : System.Address);\n+\n+   function pthread_key_create\n+     (key        : access pthread_key_t;\n+      destructor : destructor_pointer) return int;\n+   pragma Import (C, pthread_key_create, \"pthread_key_create\");\n+\n+   --------------------------------------\n+   --  Non-portable pthread functions  --\n+   --------------------------------------\n+\n+   function pthread_set_name_np\n+     (thread : pthread_t;\n+      name   : System.Address) return int;\n+   pragma Import (C, pthread_set_name_np, \"pthread_set_name_np\");\n+\n+private\n+\n+   type sigset_t is array (1 .. 4) of unsigned;\n+\n+   --  In FreeBSD the component sa_handler turns out to\n+   --  be one a union type, and the selector is a macro:\n+   --  #define sa_handler __sigaction_u._handler\n+   --  #define sa_sigaction __sigaction_u._sigaction\n+\n+   --  Should we add a signal_context type here ?\n+   --  How could it be done independent of the CPU architecture ?\n+   --  sigcontext type is opaque, so it is architecturally neutral.\n+   --  It is always passed as an access type, so define it as an empty record\n+   --  since the contents are not used anywhere.\n+   type struct_sigcontext is null record;\n+   pragma Convention (C, struct_sigcontext);\n+\n+   type pid_t is new int;\n+   Self_PID : constant pid_t := 0;\n+\n+   type time_t is new long;\n+\n+   type timespec is record\n+      ts_sec  : time_t;\n+      ts_nsec : long;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   type clockid_t is new int;\n+   CLOCK_REALTIME : constant clockid_t := 0;\n+\n+   type struct_timeval is record\n+      tv_sec  : long;\n+      tv_usec : long;\n+   end record;\n+   pragma Convention (C, struct_timeval);\n+\n+   type pthread_t           is new System.Address;\n+   type pthread_attr_t      is new System.Address;\n+   type pthread_mutex_t     is new System.Address;\n+   type pthread_mutexattr_t is new System.Address;\n+   type pthread_cond_t      is new System.Address;\n+   type pthread_condattr_t  is new System.Address;\n+   type pthread_key_t       is new int;\n+\n+end System.OS_Interface;"}, {"sha": "a7371a2d9a2ae60481c5c2bad8016f3d76d5b52a", "filename": "gcc/ada/56system.ads", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F56system.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2F56system.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F56system.ads?ref=c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "patch": "@@ -0,0 +1,150 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                           (FreeBSD/x86 Version)                          --\n+--                                                                          --\n+--          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+pragma Pure (System);\n+--  Note that we take advantage of the implementation permission to\n+--  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := Integer'Last;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.000_001;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   Max_Priority           : constant Positive := 30;\n+   Max_Interrupt_Priority : constant Positive := 31;\n+\n+   subtype Any_Priority       is Integer      range  0 .. 31;\n+   subtype Priority           is Any_Priority range  0 .. 30;\n+   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+\n+   Default_Priority : constant Priority := 15;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   AAMP                      : constant Boolean := False;\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Functions_Return_By_DSP   : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   OpenVMS                   : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := False;\n+   GCC_ZCX_Support           : constant Boolean := False;\n+   Front_End_ZCX_Support     : constant Boolean := False;\n+\n+   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n+\n+   High_Integrity_Mode       : constant Boolean := False;\n+   Long_Shifts_Inlined       : constant Boolean := True;\n+\n+end System;"}, {"sha": "118be6b000c65eef4f1c3a5b73bf69bab13ebada", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5b2a8ae6ceefc7ee6810d29a9d84e32ec40b068", "patch": "@@ -1,3 +1,8 @@\n+2003-11-20  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* 35soccon.ads, 45intnam.ads, 55osinte.adb, 55osinte.ads,\n+\t56system.ads: New file, FreeBSD version.\n+\n 2003-11-20  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* Make-lang.in (ada.extraclean): Delete."}]}