{"sha": "80e59506c2065fe2f4550644e0fbf2b585ab5be3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlNTk1MDZjMjA2NWZlMmY0NTUwNjQ0ZTBmYmYyYjU4NWFiNWJlMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T15:12:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T15:12:42Z"}, "message": "[multiple changes]\n\n2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case SPARK_Mode): Handle properly\n\ta subprogram body without previous spec.\n\n2013-09-10  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch4.adb: Minor typo fixes.\n\n2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb (Aspects_On_Body_OK): New routine.\n\t* aspects.ads: Modify type Aspect_Expression to include\n\tthe Optional_XXX variants. Update the contents of\n\ttable Aspect_Argument. Add table Aspect_On_Body_OK.\n\t(Aspects_On_Body_OK): New routine.\n\t* par-ch13.adb (Get_Aspect_Specifications): Account for optional\n\tnames and expressions when parsing an aspect.\n\t* sem_ch6.adb: Add with and use clause for Aspects.\n\t(Analyze_Subprogram_Body_Helper): Do not emit an error when\n\tanalyzing a body with aspects that can be applied simultaneously\n\tto both spec and body.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Insert the\n\tcorresponding pragma of an aspect that applies to a subprogram\n\tbody in the declarative part.\n\t(Make_Aitem_Pragma): Do not generate a pragma with an empty argument\n\tlist.\n\nFrom-SVN: r202462", "tree": {"sha": "039c8844fa257a96041b0dabfdfdb9b94b398349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039c8844fa257a96041b0dabfdfdb9b94b398349"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e59506c2065fe2f4550644e0fbf2b585ab5be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e59506c2065fe2f4550644e0fbf2b585ab5be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e59506c2065fe2f4550644e0fbf2b585ab5be3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e59506c2065fe2f4550644e0fbf2b585ab5be3/comments", "author": null, "committer": null, "parents": [{"sha": "4bb9c7b9ed2ddc21915fd41fcac2bd0b77609c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb9c7b9ed2ddc21915fd41fcac2bd0b77609c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb9c7b9ed2ddc21915fd41fcac2bd0b77609c7c"}], "stats": {"total": 175, "additions": 140, "deletions": 35}, "files": [{"sha": "dc14a324dcd93c1ac4f7b77944f172343fa70608", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -1,3 +1,31 @@\n+2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case SPARK_Mode): Handle properly\n+\ta subprogram body without previous spec.\n+\n+2013-09-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch4.adb: Minor typo fixes.\n+\n+2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb (Aspects_On_Body_OK): New routine.\n+\t* aspects.ads: Modify type Aspect_Expression to include\n+\tthe Optional_XXX variants. Update the contents of\n+\ttable Aspect_Argument. Add table Aspect_On_Body_OK.\n+\t(Aspects_On_Body_OK): New routine.\n+\t* par-ch13.adb (Get_Aspect_Specifications): Account for optional\n+\tnames and expressions when parsing an aspect.\n+\t* sem_ch6.adb: Add with and use clause for Aspects.\n+\t(Analyze_Subprogram_Body_Helper): Do not emit an error when\n+\tanalyzing a body with aspects that can be applied simultaneously\n+\tto both spec and body.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Insert the\n+\tcorresponding pragma of an aspect that applies to a subprogram\n+\tbody in the declarative part.\n+\t(Make_Aitem_Pragma): Do not generate a pragma with an empty argument\n+\tlist.\n+\n 2013-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* switch-c.adb: Diagnose -gnatc given after -gnatRm."}, {"sha": "1d736467b463d666605df0fe3dc30d1b72f5c826", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -140,6 +140,40 @@ package body Aspects is\n       end if;\n    end Aspect_Specifications;\n \n+   ------------------------\n+   -- Aspects_On_Body_OK --\n+   ------------------------\n+\n+   function Aspects_On_Body_OK (N : Node_Id) return Boolean is\n+      Aspect  : Node_Id;\n+      Aspects : List_Id;\n+\n+   begin\n+      --  The routine should be invoked on a body [stub] with aspects\n+\n+      pragma Assert (Has_Aspects (N));\n+      pragma Assert (Nkind (N) in N_Body_Stub\n+                       or else Nkind_In (N, N_Package_Body,\n+                                            N_Protected_Body,\n+                                            N_Subprogram_Body,\n+                                            N_Task_Body));\n+\n+      --  Look through all aspects and see whether they can be applied to a\n+      --  body.\n+\n+      Aspects := Aspect_Specifications (N);\n+      Aspect  := First (Aspects);\n+      while Present (Aspect) loop\n+         if not Aspect_On_Body_OK (Get_Aspect_Id (Aspect)) then\n+            return False;\n+         end if;\n+\n+         Next (Aspect);\n+      end loop;\n+\n+      return True;\n+   end Aspects_On_Body_OK;\n+\n    -----------------\n    -- Find_Aspect --\n    -----------------"}, {"sha": "5e8046d1ad05c0080fabf6828b35d182b12caf9a", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -273,14 +273,15 @@ package Aspects is\n    --  The following type is used for indicating allowed expression forms\n \n    type Aspect_Expression is\n-     (Optional,               -- Optional boolean expression\n-      Expression,             -- Required expression\n-      Name);                  -- Required name\n+     (Expression,             -- Required expression\n+      Name,                   -- Required name\n+      Optional_Expression,    -- Optional boolean expression\n+      Optional_Name);         -- Optional name\n \n    --  The following array indicates what argument type is required\n \n    Aspect_Argument : constant array (Aspect_Id) of Aspect_Expression :=\n-     (No_Aspect                      => Optional,\n+     (No_Aspect                      => Optional_Expression,\n       Aspect_Abstract_State          => Expression,\n       Aspect_Address                 => Expression,\n       Aspect_Alignment               => Expression,\n@@ -323,7 +324,7 @@ package Aspects is\n       Aspect_Simple_Storage_Pool     => Name,\n       Aspect_Size                    => Expression,\n       Aspect_Small                   => Expression,\n-      Aspect_SPARK_Mode              => Name,\n+      Aspect_SPARK_Mode              => Optional_Name,\n       Aspect_Static_Predicate        => Expression,\n       Aspect_Storage_Pool            => Name,\n       Aspect_Storage_Size            => Expression,\n@@ -338,8 +339,8 @@ package Aspects is\n       Aspect_Warnings                => Name,\n       Aspect_Write                   => Name,\n \n-      Boolean_Aspects                => Optional,\n-      Library_Unit_Aspects           => Optional);\n+      Boolean_Aspects                => Optional_Expression,\n+      Library_Unit_Aspects           => Optional_Expression);\n \n    -----------------------------------------\n    -- Table Linking Names and Aspect_Id's --\n@@ -656,6 +657,17 @@ package Aspects is\n       Aspect_Volatile                     => Rep_Aspect,\n       Aspect_Volatile_Components          => Rep_Aspect);\n \n+   --  The following table indicates which aspects can apply simultaneously to\n+   --  both subprogram/package specs and bodies. For instance, the following is\n+   --  legal:\n+\n+   --    package P with SPARK_Mode ...;\n+   --    package body P with SPARK_Mode is ...;\n+\n+   Aspect_On_Body_OK : constant array (Aspect_Id) of Boolean :=\n+     (Aspect_SPARK_Mode                   => True,\n+      others                              => False);\n+\n    ---------------------------------------------------\n    -- Handling of Aspect Specifications in the Tree --\n    ---------------------------------------------------\n@@ -684,6 +696,10 @@ package Aspects is\n    --  Replace calls, and this function may be used to retrieve the aspect\n    --  specifications for the original rewritten node in such cases.\n \n+   function Aspects_On_Body_OK (N : Node_Id) return Boolean;\n+   --  N denotes a body [stub] with aspects. Determine whether all aspects of N\n+   --  can appear simultaneously in bodies and specs.\n+\n    function Find_Aspect (Id : Entity_Id; A : Aspect_Id) return Node_Id;\n    --  Find the aspect specification of aspect A associated with entity I.\n    --  Return Empty if Id does not have the requested aspect."}, {"sha": "952064440e14fe71fb7b0cf5858cacc41443e812", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -266,15 +266,20 @@ package body Ch13 is\n             if Token = Tok_Comma\n               or else Token = Tok_Semicolon\n             then\n-               if Aspect_Argument (A_Id) /= Optional then\n+               if Aspect_Argument (A_Id) /= Optional_Expression\n+                    and then\n+                  Aspect_Argument (A_Id) /= Optional_Name\n+               then\n                   Error_Msg_Node_1 := Identifier (Aspect);\n                   Error_Msg_AP (\"aspect& requires an aspect definition\");\n                   OK := False;\n                end if;\n \n             elsif not Semicolon and then Token /= Tok_Arrow then\n-               if Aspect_Argument (A_Id) /= Optional then\n-\n+               if Aspect_Argument (A_Id) /= Optional_Expression\n+                    and then\n+                  Aspect_Argument (A_Id) /= Optional_Name\n+               then\n                   --  The name or expression may be there, but the arrow is\n                   --  missing. Skip to the end of the declaration.\n \n@@ -292,9 +297,17 @@ package body Ch13 is\n                   OK := False;\n                end if;\n \n-               if Aspect_Argument (A_Id) = Name then\n+               if Aspect_Argument (A_Id) = Name\n+                    or else\n+                  Aspect_Argument (A_Id) = Optional_Name\n+               then\n                   Set_Expression (Aspect, P_Name);\n+\n                else\n+                  pragma Assert\n+                    (Aspect_Argument (A_Id) = Expression\n+                       or else\n+                     Aspect_Argument (A_Id) = Optional_Expression);\n                   Set_Expression (Aspect, P_Expression);\n                end if;\n             end if;"}, {"sha": "37b9e9a82b9877511990b3dc10616b8d8a547705", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -1357,17 +1357,26 @@ package body Sem_Ch13 is\n               (Pragma_Argument_Associations : List_Id;\n                Pragma_Name                  : Name_Id)\n             is\n+               Args : List_Id := Pragma_Argument_Associations;\n+\n             begin\n                --  We should never get here if aspect was disabled\n \n                pragma Assert (not Is_Disabled (Aspect));\n \n+               --  Certan aspects allow for an optional name or expression. Do\n+               --  not generate a pragma with an empty argument association\n+               --  list.\n+\n+               if No (Args) or else No (Expression (First (Args))) then\n+                  Args := No_List;\n+               end if;\n+\n                --  Build the pragma\n \n                Aitem :=\n                  Make_Pragma (Loc,\n-                   Pragma_Argument_Associations =>\n-                     Pragma_Argument_Associations,\n+                   Pragma_Argument_Associations => Args,\n                    Pragma_Identifier =>\n                      Make_Identifier (Sloc (Id), Pragma_Name),\n                    Class_Present     => Class_Present (Aspect),\n@@ -2433,10 +2442,10 @@ package body Sem_Ch13 is\n                Set_Has_Delayed_Aspects (E);\n                Record_Rep_Item (E, Aspect);\n \n-            --  When delay is not required and the context is a package body,\n-            --  insert the pragma in the declarations of the body.\n+            --  When delay is not required and the context is a package or a\n+            --  subprogram body, insert the pragma in the body declarations.\n \n-            elsif Nkind (N) = N_Package_Body then\n+            elsif Nkind_In (N, N_Package_Body, N_Subprogram_Body) then\n                if No (Declarations (N)) then\n                   Set_Declarations (N, New_List);\n                end if;"}, {"sha": "c4247cd403dce6fa6c2d8ffae58e94a462cdb9d1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -1037,7 +1037,7 @@ package body Sem_Ch4 is\n          --  function that returns a pointer_to_procedure which is the entity\n          --  being called. Finally, F (X) may be a call to a parameterless\n          --  function that returns a pointer to a function with parameters.\n-         --  Note that if F return an access to subprogram whose designated\n+         --  Note that if F returns an access-to-subprogram whose designated\n          --  type is an array, F (X) cannot be interpreted as an indirect call\n          --  through the result of the call to F.\n \n@@ -3003,7 +3003,7 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n-      --  An indexing requires at least one actual.The name of the call cannot\n+      --  An indexing requires at least one actual. The name of the call cannot\n       --  be an implicit indirect call, so it cannot be a generated explicit\n       --  dereference.\n \n@@ -3057,7 +3057,7 @@ package body Sem_Ch4 is\n       if not Norm_OK then\n \n          --  If an indirect call is a possible interpretation, indicate\n-         --  success to the caller. This may be an indecing of an explicit\n+         --  success to the caller. This may be an indexing of an explicit\n          --  dereference of a call that returns an access type (see above).\n \n          if Is_Indirect"}, {"sha": "7913d362f1ea1c0beeb481628152d71dfd456a6f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Checks;   use Checks;\n with Debug;    use Debug;\n@@ -2671,18 +2672,16 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n-      --  Ada 2012 aspects may appear in a subprogram body, but only if there\n-      --  is no previous spec. Ditto for a subprogram stub that does not have\n-      --  a corresponding spec, but for which there may also be a spec_id.\n+      --  Language-defined aspects cannot appear in a subprogram body if the\n+      --  corresponding spec already has aspects. Exception to this rule are\n+      --  certain user-defined aspects. Aspects that apply to a body stub are\n+      --  moved to the proper body. Do not emit an error in this case.\n \n       if Has_Aspects (N) then\n-\n-         --  Aspects that apply to a body stub are relocated to the proper\n-         --  body. Do not emit an error in this case.\n-\n          if Present (Spec_Id)\n            and then Nkind (N) not in N_Body_Stub\n            and then Nkind (Parent (N)) /= N_Subunit\n+           and then not Aspects_On_Body_OK (N)\n          then\n             Error_Msg_N\n               (\"aspect specifications must appear in subprogram declaration\","}, {"sha": "9a1332d9bb06c9351ef76e4a3be98f54a8f0ba40", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e59506c2065fe2f4550644e0fbf2b585ab5be3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=80e59506c2065fe2f4550644e0fbf2b585ab5be3", "patch": "@@ -16406,7 +16406,7 @@ package body Sem_Prag is\n             --  the consistency between modes of visible/private declarations\n             --  and body declarations/statements.\n \n-            procedure Check_Conformance\n+            procedure Check_Spark_Mode_Conformance\n               (Governing_Id : Entity_Id;\n                New_Id       : Entity_Id);\n             --  Verify the \"monotonicity\" of SPARK modes between two entities.\n@@ -16450,11 +16450,11 @@ package body Sem_Prag is\n                end if;\n             end Chain_Pragma;\n \n-            -----------------------\n-            -- Check_Conformance --\n-            -----------------------\n+            ----------------------------------\n+            -- Check_Spark_Mode_Conformance --\n+            ----------------------------------\n \n-            procedure Check_Conformance\n+            procedure Check_Spark_Mode_Conformance\n               (Governing_Id : Entity_Id;\n                New_Id       : Entity_Id)\n             is\n@@ -16486,7 +16486,7 @@ package body Sem_Prag is\n                     (Governing_Mode => Gov_Prag,\n                      New_Mode       => New_Prag);\n                end if;\n-            end Check_Conformance;\n+            end Check_Spark_Mode_Conformance;\n \n             ------------------------------\n             -- Check_Pragma_Conformance --\n@@ -16689,7 +16689,13 @@ package body Sem_Prag is\n                   Body_Id := Defining_Unit_Name (Context);\n \n                   Chain_Pragma (Body_Id, N);\n-                  Check_Conformance (Spec_Id, Body_Id);\n+\n+                  --  Verify that the SPARK modes are consistent between\n+                  --  body and spec, if any.\n+\n+                  if Present (Spec_Id) then\n+                     Check_Spark_Mode_Conformance (Spec_Id, Body_Id);\n+                  end if;\n \n                --  The pragma applies to the statements of a package body\n \n@@ -16705,7 +16711,7 @@ package body Sem_Prag is\n                   Body_Id := Defining_Unit_Name (Context);\n \n                   Chain_Pragma (Body_Id, N);\n-                  Check_Conformance (Spec_Id, Body_Id);\n+                  Check_Spark_Mode_Conformance (Spec_Id, Body_Id);\n \n                --  The pragma does not apply to a legal construct, issue error\n "}]}