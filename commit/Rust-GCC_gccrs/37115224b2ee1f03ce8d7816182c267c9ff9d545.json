{"sha": "37115224b2ee1f03ce8d7816182c267c9ff9d545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxMTUyMjRiMmVlMWYwM2NlOGQ3ODE2MTgyYzI2N2M5ZmY5ZDU0NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-31T17:21:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-31T17:21:11Z"}, "message": "[AArch64] Split gcc.target/aarch64/sve/reduc_strict_3.c\n\nThis patch splits gcc.target/aarch64/sve/reduc_strict_3.c into one\ntest per function, so that it's easier to see what each scan is\nmatching and also so that we no longer rely on the number of times\nthat each dump message is printed.\n\nThe patch also generalises the tests to work with scalable vectors.\nI think the test probably predates support for variable-length\nloop-aware SLP.\n\n2019-10-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/reduc_strict_3.c: Split all but the\n\tfirst function out into...\n\t* gcc.target/aarch64/sve/reduc_strict_4.c,\n\t* gcc.target/aarch64/sve/reduc_strict_5.c,\n\t* gcc.target/aarch64/sve/reduc_strict_6.c,\n\t* gcc.target/aarch64/sve/reduc_strict_7.c,\n\t* gcc.target/aarch64/sve/reduc_strict_8.c,\n\t* gcc.target/aarch64/sve/reduc_strict_9.c: ...these new tests.\n\tTest for scalable vectors instead of 256-bit vectors.\n\nFrom-SVN: r277681", "tree": {"sha": "d6e7e69417d91aff9b88728ad899ff9c922ec21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6e7e69417d91aff9b88728ad899ff9c922ec21b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37115224b2ee1f03ce8d7816182c267c9ff9d545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37115224b2ee1f03ce8d7816182c267c9ff9d545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37115224b2ee1f03ce8d7816182c267c9ff9d545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37115224b2ee1f03ce8d7816182c267c9ff9d545/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ff0cdebb1bc281ba2374f3ecdbe358c4fa74093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff0cdebb1bc281ba2374f3ecdbe358c4fa74093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff0cdebb1bc281ba2374f3ecdbe358c4fa74093"}], "stats": {"total": 271, "additions": 155, "deletions": 116}, "files": [{"sha": "4dae2ac88bd3eeb73cb1be988f2a482a77bfda6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -1,3 +1,15 @@\n+2019-10-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/reduc_strict_3.c: Split all but the\n+\tfirst function out into...\n+\t* gcc.target/aarch64/sve/reduc_strict_4.c,\n+\t* gcc.target/aarch64/sve/reduc_strict_5.c,\n+\t* gcc.target/aarch64/sve/reduc_strict_6.c,\n+\t* gcc.target/aarch64/sve/reduc_strict_7.c,\n+\t* gcc.target/aarch64/sve/reduc_strict_8.c,\n+\t* gcc.target/aarch64/sve/reduc_strict_9.c: ...these new tests.\n+\tTest for scalable vectors instead of 256-bit vectors.\n+\n 2019-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/92284"}, {"sha": "83ebec50bc62d6d96fc7eb19b7ba2e41170bac81", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_3.c", "status": "modified", "additions": 3, "deletions": 116, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_3.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -1,12 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -fno-inline -msve-vector-bits=256 -fdump-tree-vect-details\" } */\n-/* Disabling epilogues until we find a better way to deal with scans.  */\n-/* { dg-additional-options \"--param vect-epilogues-nomask=0\" } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n \n-double mat[100][4];\n-double mat2[100][8];\n-double mat3[100][12];\n-double mat4[100][3];\n+double mat[100][2];\n \n double\n slp_reduc_plus (int n)\n@@ -16,116 +11,8 @@ slp_reduc_plus (int n)\n     {\n       tmp = tmp + mat[i][0];\n       tmp = tmp + mat[i][1];\n-      tmp = tmp + mat[i][2];\n-      tmp = tmp + mat[i][3];\n     }\n   return tmp;\n }\n \n-double\n-slp_reduc_plus2 (int n)\n-{\n-  double tmp = 0.0;\n-  for (int i = 0; i < n; i++)\n-    {\n-      tmp = tmp + mat2[i][0];\n-      tmp = tmp + mat2[i][1];\n-      tmp = tmp + mat2[i][2];\n-      tmp = tmp + mat2[i][3];\n-      tmp = tmp + mat2[i][4];\n-      tmp = tmp + mat2[i][5];\n-      tmp = tmp + mat2[i][6];\n-      tmp = tmp + mat2[i][7];\n-    }\n-  return tmp;\n-}\n-\n-double\n-slp_reduc_plus3 (int n)\n-{\n-  double tmp = 0.0;\n-  for (int i = 0; i < n; i++)\n-    {\n-      tmp = tmp + mat3[i][0];\n-      tmp = tmp + mat3[i][1];\n-      tmp = tmp + mat3[i][2];\n-      tmp = tmp + mat3[i][3];\n-      tmp = tmp + mat3[i][4];\n-      tmp = tmp + mat3[i][5];\n-      tmp = tmp + mat3[i][6];\n-      tmp = tmp + mat3[i][7];\n-      tmp = tmp + mat3[i][8];\n-      tmp = tmp + mat3[i][9];\n-      tmp = tmp + mat3[i][10];\n-      tmp = tmp + mat3[i][11];\n-    }\n-  return tmp;\n-}\n-\n-void\n-slp_non_chained_reduc (int n, double * restrict out)\n-{\n-  for (int i = 0; i < 3; i++)\n-    out[i] = 0;\n-\n-  for (int i = 0; i < n; i++)\n-    {\n-      out[0] = out[0] + mat4[i][0];\n-      out[1] = out[1] + mat4[i][1];\n-      out[2] = out[2] + mat4[i][2];\n-    }\n-}\n-\n-/* Strict FP reductions shouldn't be used for the outer loops, only the\n-   inner loops.  */\n-\n-float\n-double_reduc1 (float (*restrict i)[16])\n-{\n-  float l = 0;\n-\n-#pragma GCC unroll 0\n-  for (int a = 0; a < 8; a++)\n-    for (int b = 0; b < 8; b++)\n-      l += i[b][a];\n-  return l;\n-}\n-\n-float\n-double_reduc2 (float *restrict i)\n-{\n-  float l = 0;\n-\n-  for (int a = 0; a < 8; a++)\n-    for (int b = 0; b < 16; b++)\n-      {\n-        l += i[b * 4];\n-        l += i[b * 4 + 1];\n-        l += i[b * 4 + 2];\n-        l += i[b * 4 + 3];\n-      }\n-  return l;\n-}\n-\n-float\n-double_reduc3 (float *restrict i, float *restrict j)\n-{\n-  float k = 0, l = 0;\n-\n-  for (int a = 0; a < 8; a++)\n-    for (int b = 0; b < 8; b++)\n-      {\n-        k += i[b];\n-        l += j[b];\n-      }\n-  return l * k;\n-}\n-\n-/* { dg-final { scan-assembler-times {\\tfadda\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} 4 } } */\n-/* { dg-final { scan-assembler-times {\\tfadda\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} 9 } } */\n-/* 1 reduction each for double_reduc{1,2} and 2 for double_reduc3.  Each one\n-   is reported three times, once for SVE, once for 128-bit AdvSIMD and once\n-   for 64-bit AdvSIMD.  */\n-/* { dg-final { scan-tree-dump-times \"Detected double reduction\" 12 \"vect\" } } */\n-/* double_reduc2 has 2 reductions and slp_non_chained_reduc has 3.  */\n-/* { dg-final { scan-tree-dump-times \"Detected reduction\" 10 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\tfadda\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "9a12edad42ecbe8b595771fd94982cc8aa65c5e6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_4.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_4.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+double mat[100][8];\n+\n+double\n+slp_reduc_plus (int n)\n+{\n+  double tmp = 0.0;\n+  for (int i = 0; i < n; i++)\n+    {\n+      tmp = tmp + mat[i][0];\n+      tmp = tmp + mat[i][1];\n+      tmp = tmp + mat[i][2];\n+      tmp = tmp + mat[i][3];\n+      tmp = tmp + mat[i][4];\n+      tmp = tmp + mat[i][5];\n+      tmp = tmp + mat[i][6];\n+      tmp = tmp + mat[i][7];\n+    }\n+  return tmp;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfadda\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} 4 } } */"}, {"sha": "7c3068fe87ad36e4f691093e25d9665a0ab49165", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_5.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+double mat[100][12];\n+\n+double\n+slp_reduc_plus (int n)\n+{\n+  double tmp = 0.0;\n+  for (int i = 0; i < n; i++)\n+    {\n+      tmp = tmp + mat[i][0];\n+      tmp = tmp + mat[i][1];\n+      tmp = tmp + mat[i][2];\n+      tmp = tmp + mat[i][3];\n+      tmp = tmp + mat[i][4];\n+      tmp = tmp + mat[i][5];\n+      tmp = tmp + mat[i][6];\n+      tmp = tmp + mat[i][7];\n+      tmp = tmp + mat[i][8];\n+      tmp = tmp + mat[i][9];\n+      tmp = tmp + mat[i][10];\n+      tmp = tmp + mat[i][11];\n+    }\n+  return tmp;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfadda\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} 6 } } */"}, {"sha": "c94e0606dad7177a5ca759c1449ea7d78e6d4109", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_6.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+double mat[100][4];\n+double mat2[100][8];\n+double mat3[100][12];\n+double mat4[100][3];\n+\n+void\n+slp_non_chained_reduc (int n, double * restrict out)\n+{\n+  for (int i = 0; i < 3; i++)\n+    out[i] = 0;\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      out[0] = out[0] + mat4[i][0];\n+      out[1] = out[1] + mat4[i][1];\n+      out[2] = out[2] + mat4[i][2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld3d\\t} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadda\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} 3 } } */"}, {"sha": "22168905a604d48a8006e6b6ec1956b8599bcd5b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_7.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_7.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+\n+/* Strict FP reductions shouldn't be used for the outer loop, only the\n+   inner loop.  */\n+\n+float\n+double_reduc (float (*i)[16])\n+{\n+  float l = 0;\n+\n+#pragma GCC unroll 0\n+  for (int a = 0; a < 8; a++)\n+    for (int b = 0; b < 100; b++)\n+      l += i[b][a];\n+  return l;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfadda\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-tree-dump \"Detected double reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}, {"sha": "6c168e7206dbf820815f117777f8dd56a28b1c71", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_8.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+\n+float\n+double_reduc (float *i)\n+{\n+  float l = 0;\n+\n+  for (int a = 0; a < 8; a++)\n+    for (int b = 0; b < 16; b++)\n+      {\n+        l += i[b * 4];\n+        l += i[b * 4 + 1];\n+        l += i[b * 4 + 2];\n+        l += i[b * 4 + 3];\n+      }\n+  return l;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfadda\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-tree-dump \"Detected double reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}, {"sha": "a51e46195c5626c8ddb0fc1b5ce1c1d2f5239430", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_strict_9.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37115224b2ee1f03ce8d7816182c267c9ff9d545/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_strict_9.c?ref=37115224b2ee1f03ce8d7816182c267c9ff9d545", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+\n+float\n+double_reduc (float *i, float *j)\n+{\n+  float k = 0, l = 0;\n+\n+  for (int a = 0; a < 8; a++)\n+    for (int b = 0; b < 100; b++)\n+      {\n+        k += i[b];\n+        l += j[b];\n+      }\n+  return l * k;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadda\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-tree-dump \"Detected double reduction\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"OUTER LOOP VECTORIZED\" \"vect\" } } */"}]}