{"sha": "abd23b66b4c3e345de19758ccf461d936cefe5eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkMjNiNjZiNGMzZTM0NWRlMTk3NThjY2Y0NjFkOTM2Y2VmZTVlYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-30T11:16:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-30T11:16:51Z"}, "message": "(substitute_in_expr): Preserve TREE_READONLY.\n\nFrom-SVN: r9546", "tree": {"sha": "07017592c861195672528edf86f22d5add523875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07017592c861195672528edf86f22d5add523875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd23b66b4c3e345de19758ccf461d936cefe5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd23b66b4c3e345de19758ccf461d936cefe5eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd23b66b4c3e345de19758ccf461d936cefe5eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd23b66b4c3e345de19758ccf461d936cefe5eb/comments", "author": null, "committer": null, "parents": [{"sha": "1c4fadec3712890f734ae74347f2abe3436455cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4fadec3712890f734ae74347f2abe3436455cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4fadec3712890f734ae74347f2abe3436455cb"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "e8038d7445a0bc2e2feee6f33bb235004187eb20", "filename": "gcc/tree.c", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd23b66b4c3e345de19758ccf461d936cefe5eb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd23b66b4c3e345de19758ccf461d936cefe5eb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=abd23b66b4c3e345de19758ccf461d936cefe5eb", "patch": "@@ -2197,6 +2197,7 @@ substitute_in_expr (exp, f, r)\n      tree r;\n {\n   enum tree_code code = TREE_CODE (exp);\n+  tree new = 0;\n   tree inner;\n \n   switch (TREE_CODE_CLASS (code))\n@@ -2217,9 +2218,10 @@ substitute_in_expr (exp, f, r)\n       switch (tree_code_length[(int) code])\n \t{\n \tcase 1:\n-\t  return fold (build1 (code, TREE_TYPE (exp),\n-\t\t\t       substitute_in_expr (TREE_OPERAND (exp, 0),\n-\t\t\t\t\t\t   f, r)));\n+\t  new = fold (build1 (code, TREE_TYPE (exp),\n+\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0),\n+\t\t\t\t\t\t  f, r)));\n+\t  break;\n \n \tcase 2:\n \t  /* An RTL_EXPR cannot contain a PLACEHOLDER_EXPR; a CONSTRUCTOR\n@@ -2229,10 +2231,11 @@ substitute_in_expr (exp, f, r)\n \t  else if (code == CONSTRUCTOR)\n \t    abort ();\n \n-\t  return fold (build (code, TREE_TYPE (exp),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 1),\n-\t\t\t\t\t\t  f, r)));\n+\t  new = fold (build (code, TREE_TYPE (exp),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 1),\n+\t\t\t\t\t\t f, r)));\n+\t  break;\n \n \tcase 3:\n \t  /* It cannot be that anything inside a SAVE_EXPR contains a\n@@ -2243,11 +2246,11 @@ substitute_in_expr (exp, f, r)\n \t  if (code != COND_EXPR)\n \t    abort ();\n \n-\t  return fold (build (code, TREE_TYPE (exp),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 1), f, r),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 2),\n-\t\t\t\t\t\t  f, r)));\n+\t  new = fold (build (code, TREE_TYPE (exp),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 1), f, r),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 2),\n+\t\t\t\t\t\t f, r)));\n \t}\n \n       break;\n@@ -2266,29 +2269,39 @@ substitute_in_expr (exp, f, r)\n \t      && TREE_OPERAND (exp, 1) == f)\n \t    return r;\n \n-\t  return fold (build (code, TREE_TYPE (exp),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n-\t\t\t      TREE_OPERAND (exp, 1)));\n+\t  new = fold (build (code, TREE_TYPE (exp),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n+\t\t\t     TREE_OPERAND (exp, 1)));\n+\t  break;\n+\n \tcase BIT_FIELD_REF:\n-\t  return fold (build (code, TREE_TYPE (exp),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 1), f, r),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 2), f, r)));\n+\t  new = fold (build (code, TREE_TYPE (exp),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 1), f, r),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 2), f, r)));\n+\t  break;\n+\n \tcase INDIRECT_REF:\n \tcase BUFFER_REF:\n-\t  return fold (build1 (code, TREE_TYPE (exp),\n-\t\t\t       substitute_in_expr (TREE_OPERAND (exp, 0),\n-\t\t\t\t\t\t f, r)));\n+\t  new = fold (build1 (code, TREE_TYPE (exp),\n+\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0),\n+\t\t\t\t\t\t  f, r)));\n+\t  break;\n+\n \tcase OFFSET_REF:\n-\t  return fold (build (code, TREE_TYPE (exp),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n-\t\t\t      substitute_in_expr (TREE_OPERAND (exp, 1), f, r)));\n+\t  new = fold (build (code, TREE_TYPE (exp),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 0), f, r),\n+\t\t\t     substitute_in_expr (TREE_OPERAND (exp, 1), f, r)));\n+\t  break;\n \t}\n     }\n \n   /* If it wasn't one of the cases we handle, give up.  */\n+  if (new == 0)\n+    abort ();\n \n-  abort ();\n+  TREE_READONLY (new) = TREE_READONLY (exp);\n+  return new;\n }\n \f\n /* Given a type T, a FIELD_DECL F, and a replacement value R,"}]}