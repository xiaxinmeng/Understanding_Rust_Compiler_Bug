{"sha": "e6be21fe8783be5abd5c15b74b9be457a3095ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiZTIxZmU4NzgzYmU1YWJkNWMxNWI3NGI5YmU0NTdhMzA5NWVjOQ==", "commit": {"author": {"name": "Richard Frith-Macdonald", "email": "rrfm@gnu.org", "date": "2001-06-08T22:19:47Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-08T22:19:47Z"}, "message": "init.c (__objc_send_message_in_list): When setting a new entry in __objc_load_methods use the method IMP as key...\n\n2001-06-06  Richard Frith-Macdonald  <rrfm@gnu.org>\n\n        * init.c (__objc_send_message_in_list): When setting a new entry\n        in __objc_load_methods use the method IMP as key, but check to see\n        if the method is in the hashtable by looking at the IMP also.\n        Also ... call the method after adding it to the hashtable rather\n        than before ... thus preventing an obscure possibility of infinite\n        recursion if a +load method itself loads a subclass.\n\nFrom-SVN: r43052", "tree": {"sha": "f0c91e12a488c83a75cdce0865034ef7d50e6df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c91e12a488c83a75cdce0865034ef7d50e6df6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6be21fe8783be5abd5c15b74b9be457a3095ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6be21fe8783be5abd5c15b74b9be457a3095ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6be21fe8783be5abd5c15b74b9be457a3095ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6be21fe8783be5abd5c15b74b9be457a3095ec9/comments", "author": null, "committer": null, "parents": [{"sha": "43fd108f69a0a0da4e929372f2809e5ad273850b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fd108f69a0a0da4e929372f2809e5ad273850b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fd108f69a0a0da4e929372f2809e5ad273850b"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "ce7f41318b6bdcaf0700b2fd596ea27d3346b714", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6be21fe8783be5abd5c15b74b9be457a3095ec9/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6be21fe8783be5abd5c15b74b9be457a3095ec9/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e6be21fe8783be5abd5c15b74b9be457a3095ec9", "patch": "@@ -1,3 +1,12 @@\n+2001-06-06  Richard Frith-Macdonald  <rrfm@gnu.org>\n+\n+\t* init.c (__objc_send_message_in_list): When setting a new entry\n+\tin __objc_load_methods use the method IMP as key, but check to see\n+\tif the method is in the hashtable by looking at the IMP also.\n+\tAlso ... call the method after adding it to the hashtable rather\n+\tthan before ... thus preventing an obscure possibility of infinite\n+\trecursion if a +load method itself loads a subclass.\n+\n 2001-05-25  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* init.c (__objc_send_message_in_list): When setting a new entry"}, {"sha": "29ce6393eb7ca8c67d2c1940dc62b1b98093bcbd", "filename": "libobjc/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6be21fe8783be5abd5c15b74b9be457a3095ec9/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6be21fe8783be5abd5c15b74b9be457a3095ec9/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=e6be21fe8783be5abd5c15b74b9be457a3095ec9", "patch": "@@ -313,16 +313,16 @@ __objc_send_message_in_list (MethodList_t method_list, Class class, SEL op)\n       Method_t mth = &method_list->method_list[i];\n \n       if (mth->method_name && sel_eq (mth->method_name, op)\n-\t  && !hash_is_key_in_hash (__objc_load_methods, mth->method_name))\n+\t  && !hash_is_key_in_hash (__objc_load_methods, mth->method_imp))\n \t{\n-\t  /* The method was found and wasn't previously executed. */\n-\t  (*mth->method_imp) ((id)class, mth->method_name);\n-\n \t  /* Add this method into the +load hash table */\n-\t  hash_add (&__objc_load_methods, mth->method_name, mth->method_imp);\n+\t  hash_add (&__objc_load_methods, mth->method_imp, mth->method_imp);\n \n \t  DEBUG_PRINTF (\"sending +load in class: %s\\n\", class->name);\n \n+\t  /* The method was found and wasn't previously executed. */\n+\t  (*mth->method_imp) ((id)class, mth->method_name);\n+\n \t  break;\n \t}\n     }"}]}