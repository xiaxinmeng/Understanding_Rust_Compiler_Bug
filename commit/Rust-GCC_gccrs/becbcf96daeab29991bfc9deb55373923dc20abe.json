{"sha": "becbcf96daeab29991bfc9deb55373923dc20abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjYmNmOTZkYWVhYjI5OTkxYmZjOWRlYjU1MzczOTIzZGMyMGFiZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-07-02T19:36:58Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-07-02T19:36:58Z"}, "message": "Fix HPUX libgcc_s.so linking problem.\n\n\t* config/ia64/ia64.h: Delete obsolete lib1funcs.asm comment.\n        * config/ia64/t-ia64: Change LIB1ASMFUNCS to use single underscore.\n        * config/ia64/lib1funcs.asm: Change macro names to match t-ia64.\n\nFrom-SVN: r43700", "tree": {"sha": "eaa73563b2fa8d3ff22deabf4a3adadaeb33f4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa73563b2fa8d3ff22deabf4a3adadaeb33f4cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/becbcf96daeab29991bfc9deb55373923dc20abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/becbcf96daeab29991bfc9deb55373923dc20abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/becbcf96daeab29991bfc9deb55373923dc20abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/becbcf96daeab29991bfc9deb55373923dc20abe/comments", "author": null, "committer": null, "parents": [{"sha": "a01eb545c4ec23419355bc3cc4d231d5043d02a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01eb545c4ec23419355bc3cc4d231d5043d02a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01eb545c4ec23419355bc3cc4d231d5043d02a8"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "7d9bb7dd3c6f4c0911748a6ce7cbf2328ff94363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=becbcf96daeab29991bfc9deb55373923dc20abe", "patch": "@@ -1,3 +1,12 @@\n+2001-07-02  Jim Wilson  <wilson@redhat.com>\n+\n+\t* config/ia64/ia64.h: Delete obsolete lib1funcs.asm comment.\n+\n+2001-07-02  Steve Ellcey  <sje@cup.hp.com>\n+\n+        * config/ia64/t-ia64: Change LIB1ASMFUNCS to use single underscore.\n+        * config/ia64/lib1funcs.asm: Change macro names to match t-ia64.\n+\n 2001-07-02  Zack Weinberg  <zackw@stanford.edu>\n \n \t* cppinit.c (lang_defaults): New table."}, {"sha": "5a89629fa49cbbe66bda3a7f56768f5bb877dc8f", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=becbcf96daeab29991bfc9deb55373923dc20abe", "patch": "@@ -1698,12 +1698,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Implicit Calls to Library Routines */\n \n-/* ??? The ia64 linux kernel requires that we use the standard names for\n-   divide and modulo routines.  However, if we aren't careful, lib1funcs.asm\n-   will be overridden by libgcc2.c.  We avoid this by using different names\n-   for lib1funcs.asm modules, e.g. __divdi3 vs _divdi3.  Since lib1funcs.asm\n-   goes into libgcc.a first, the linker will find it first.  */\n-\n /* Define this macro if GNU CC should generate calls to the System V (and ANSI\n    C) library functions `memcpy' and `memset' rather than the BSD functions\n    `bcopy' and `bzero'.  */"}, {"sha": "a69cef2713f0f42ff7538ebfa17986d124b73970", "filename": "gcc/config/ia64/lib1funcs.asm", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flib1funcs.asm?ref=becbcf96daeab29991bfc9deb55373923dc20abe", "patch": "@@ -1,4 +1,4 @@\n-#ifdef L__divtf3\n+#ifdef L_divtf3\n // Compute a 80-bit IEEE double-extended quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -40,7 +40,7 @@ __divtf3:\n \t.endp __divtf3\n #endif\n \n-#ifdef L__divdf3\n+#ifdef L_divdf3\n // Compute a 64-bit IEEE double quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -82,7 +82,7 @@ __divdf3:\n \t.endp __divdf3\n #endif\n \n-#ifdef L__divsf3\n+#ifdef L_divsf3\n // Compute a 32-bit IEEE float quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -118,7 +118,7 @@ __divsf3:\n \t.endp __divsf3\n #endif\n \n-#ifdef L__divdi3\n+#ifdef L_divdi3\n // Compute a 64-bit integer quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -168,7 +168,7 @@ __divdi3:\n \t.endp __divdi3\n #endif\n \n-#ifdef L__moddi3\n+#ifdef L_moddi3\n // Compute a 64-bit integer modulus.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -222,7 +222,7 @@ __moddi3:\n \t.endp __moddi3\n #endif\n \n-#ifdef L__udivdi3\n+#ifdef L_udivdi3\n // Compute a 64-bit unsigned integer quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -272,7 +272,7 @@ __udivdi3:\n \t.endp __udivdi3\n #endif\n \n-#ifdef L__umoddi3\n+#ifdef L_umoddi3\n // Compute a 64-bit unsigned integer modulus.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -327,7 +327,7 @@ __umoddi3:\n \t.endp __umoddi3\n #endif\n \n-#ifdef L__divsi3\n+#ifdef L_divsi3\n // Compute a 32-bit integer quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -370,7 +370,7 @@ __divsi3:\n \t.endp __divsi3\n #endif\n \n-#ifdef L__modsi3\n+#ifdef L_modsi3\n // Compute a 32-bit integer modulus.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -417,7 +417,7 @@ __modsi3:\n \t.endp __modsi3\n #endif\n \n-#ifdef L__udivsi3\n+#ifdef L_udivsi3\n // Compute a 32-bit unsigned integer quotient.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -460,7 +460,7 @@ __udivsi3:\n \t.endp __udivsi3\n #endif\n \n-#ifdef L__umodsi3\n+#ifdef L_umodsi3\n // Compute a 32-bit unsigned integer modulus.\n //\n // From the Intel IA-64 Optimization Guide, choose the minimum latency\n@@ -507,7 +507,7 @@ __umodsi3:\n \t.endp __umodsi3\n #endif\n \n-#ifdef L__save_stack_nonlocal\n+#ifdef L_save_stack_nonlocal\n // Notes on save/restore stack nonlocal: We read ar.bsp but write\n // ar.bspstore.  This is because ar.bsp can be read at all times\n // (independent of the RSE mode) but since it's read-only we need to\n@@ -556,7 +556,7 @@ __ia64_save_stack_nonlocal:\n \t.endp __ia64_save_stack_nonlocal\n #endif\n \n-#ifdef L__nonlocal_goto\n+#ifdef L_nonlocal_goto\n // void __ia64_nonlocal_goto(void *target_label, void *save_area,\n //\t\t\t     void *static_chain);\n \n@@ -609,7 +609,7 @@ __ia64_nonlocal_goto:\n \t.endp __ia64_nonlocal_goto\n #endif\n \n-#ifdef L__restore_stack_nonlocal\n+#ifdef L_restore_stack_nonlocal\n // This is mostly the same as nonlocal_goto above.\n // ??? This has not been tested yet.\n \n@@ -662,7 +662,7 @@ __ia64_restore_stack_nonlocal:\n \t.endp __ia64_restore_stack_nonlocal\n #endif\n \n-#ifdef L__trampoline\n+#ifdef L_trampoline\n // Implement the nested function trampoline.  This is out of line\n // so that we don't have to bother with flushing the icache, as\n // well as making the on-stack trampoline smaller."}, {"sha": "69e2a49ac50608c60e0f8690b6387e38a9fa1e06", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/becbcf96daeab29991bfc9deb55373923dc20abe/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=becbcf96daeab29991bfc9deb55373923dc20abe", "patch": "@@ -1,12 +1,9 @@\n LIB1ASMSRC    = ia64/lib1funcs.asm\n \n-# ??? We change the names of the DImode div/mod files so that they won't\n-# accidentally be overridden by libgcc2.c files.  We used to use __ia64 as\n-# a prefix, now we use __ as the prefix.\n-LIB1ASMFUNCS  = __divtf3 __divdf3 __divsf3 \\\n-\t__divdi3 __moddi3 __udivdi3 __umoddi3 \\\n-\t__divsi3 __modsi3 __udivsi3 __umodsi3 __save_stack_nonlocal \\\n-\t__nonlocal_goto __restore_stack_nonlocal __trampoline\n+LIB1ASMFUNCS  = _divtf3 _divdf3 _divsf3 \\\n+\t_divdi3 _moddi3 _udivdi3 _umoddi3 \\\n+\t_divsi3 _modsi3 _udivsi3 _umodsi3 _save_stack_nonlocal \\\n+\t_nonlocal_goto _restore_stack_nonlocal _trampoline\n \n # ??? Hack to get -P option used when compiling lib1funcs.asm, because Intel\n # assembler does not accept # line number as a comment."}]}