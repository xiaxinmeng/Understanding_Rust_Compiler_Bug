{"sha": "58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlYzNjYzVjMGM0NDFlMGU4YzQ5YzAyOWJlOWUyNWRjYjFkODUzZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-09T08:16:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-09T08:16:49Z"}, "message": "re PR c++/14401 (Uninitialized reference error not reported.)\n\n\tPR c++/14401\n\t* class.c (check_field_decls): Complain about non-static data\n\tmembers of reference type in unions.  Propagate\n\tCLASSTYPE_REF_FIELDS_NEED_INIT and\n\tCLASSTYPE_READONLY_FIELDS_NEED_INIT from the types of non-static\n\tdata members.\n\t* init.c (perform_member_init): Complain about mbmers with const\n\ttype that are not explicitly initialized.\n\n\tPR c++/14401\n\t* g++.dg/init/ctor3.C: New test.\n\t* g++.dg/init/union1.C: New test.\n\t* g++.dg/ext/anon-struct4.C: New test.\n\nFrom-SVN: r79158", "tree": {"sha": "4053bda91421405c7881ecbb817f38fb71ebe500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4053bda91421405c7881ecbb817f38fb71ebe500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/comments", "author": null, "committer": null, "parents": [{"sha": "f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da"}], "stats": {"total": 308, "additions": 146, "deletions": 162}, "files": [{"sha": "21ca2f959158c37f5a7a45ae68a9980d5a068306", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -1,3 +1,44 @@\n+2004-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14401\n+\t* class.c (check_field_decls): Complain about non-static data\n+\tmembers of reference type in unions.  Propagate\n+\tCLASSTYPE_REF_FIELDS_NEED_INIT and\n+\tCLASSTYPE_READONLY_FIELDS_NEED_INIT from the types of non-static\n+\tdata members.\n+\t* init.c (perform_member_init): Complain about mbmers with const\n+\ttype that are not explicitly initialized.\n+\n+2004-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (check_methods): Don't use IDENTIFIER_ERROR_LOCUS.\n+\t* cp-tree.h (DECL_INVALID_OVERRIDER_P): New macro.\n+\t(lang_identifier): Remove implicit_decl and error_locus.\n+\t(IDENTIFIER_IMPLICIT_DECL): Remove.\n+\t(SET_IDENTIFIER_IMPLICTI_DECL): Likewise.\n+\t(IDENTIFIER_ERROR_LOCUS): Likewise.\n+\t(SET_IDENTIFIER_ERROR_LOCUS): Likewise.\n+\t(TYPE_ASSEMBLER_NAME_STRING): Likewise.\n+\t(TYPE_ASSEMBLER_NAME_LENGTH): Likewise.\n+\t(implicitly_declare): Remove.\n+\t* decl.c (warn_extern_redeclared_static): Remove check of\n+\tIDENTIFIER_IMPLICIT_DECL.\n+\t(duplicate_decls): Don't check IDENTIFIER_ERROR_LOCUS.\n+\t(implicitly_declare): Remove.\n+\t(grok_ctor_properties): Don't set IDENTIFIER_ERROR_LOCUS.\n+\t(start_function): Don't check IDENTIFIER_IMPLICIT_DECL.\n+\t(start_method): Don't check IDENTIFIER_ERROR_LOCUS.\n+\t* lex.c (unqualified_name_lookup_error): Create a dummy VAR_DECL\n+\tin the innermost scope, rather than at namespace scope.\n+\t* name-lookup.c (push_local_binding): Give it external linkage.\n+\t(pushdecl): Remove dead code.\n+\t* name-lookup.h (push_local_binding): Declare it.\n+\t* ptree.c (cxx_print_identifier): Don't print\n+\tIDENTIFIER_IMPLICIT_DECL or IDENTIFIER_ERROR_LOCUS.\n+\t* search.c (check_final_overrider): Use DECL_INVALID_OVERRIDER_P,\n+\tnot IDENTIFIER_ERROR_LOCUS.\n+\t* typeck.c (build_function_call): Remove dead code.\n+\n 2004-03-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/13170"}, {"sha": "eddfda80429ced3cd7958b02e14e3e0d621175ae", "filename": "gcc/cp/class.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -2923,9 +2923,30 @@ check_field_decls (tree t, tree *access_decls,\n \n       /* If we've gotten this far, it's a data member, possibly static,\n \t or an enumerator.  */\n-\n       DECL_CONTEXT (x) = t;\n \n+      /* When this goes into scope, it will be a non-local reference.  */\n+      DECL_NONLOCAL (x) = 1;\n+\n+      if (TREE_CODE (t) == UNION_TYPE)\n+\t{\n+\t  /* [class.union]\n+\n+\t     If a union contains a static data member, or a member of\n+\t     reference type, the program is ill-formed. */\n+\t  if (TREE_CODE (x) == VAR_DECL)\n+\t    {\n+\t      cp_error_at (\"`%D' may not be static because it is a member of a union\", x);\n+\t      continue;\n+\t    }\n+\t  if (TREE_CODE (type) == REFERENCE_TYPE)\n+\t    {\n+\t      cp_error_at (\"`%D' may not have reference type `%T' because it is a member of a union\",\n+\t\t\t   x, type);\n+\t      continue;\n+\t    }\n+\t}\n+\n       /* ``A local class cannot have static data members.'' ARM 9.4 */\n       if (current_function_decl && TREE_STATIC (x))\n \tcp_error_at (\"field `%D' in local class cannot be static\", x);\n@@ -2949,21 +2970,9 @@ check_field_decls (tree t, tree *access_decls,\n       if (type == error_mark_node)\n \tcontinue;\n \t  \n-      /* When this goes into scope, it will be a non-local reference.  */\n-      DECL_NONLOCAL (x) = 1;\n-\n-      if (TREE_CODE (x) == CONST_DECL)\n+      if (TREE_CODE (x) == CONST_DECL || TREE_CODE (x) == VAR_DECL)\n \tcontinue;\n \n-      if (TREE_CODE (x) == VAR_DECL)\n-\t{\n-\t  if (TREE_CODE (t) == UNION_TYPE)\n-\t    /* Unions cannot have static members.  */\n-\t    cp_error_at (\"field `%D' declared static in union\", x);\n-\t      \n-\t  continue;\n-\t}\n-\n       /* Now it can only be a FIELD_DECL.  */\n \n       if (TREE_PRIVATE (x) || TREE_PROTECTED (x))\n@@ -2994,6 +3003,14 @@ check_field_decls (tree t, tree *access_decls,\n       if (TYPE_PTR_P (type))\n \thas_pointers = 1;\n \n+      if (CLASS_TYPE_P (type))\n+\t{\n+\t  if (CLASSTYPE_REF_FIELDS_NEED_INIT (type))\n+\t    SET_CLASSTYPE_REF_FIELDS_NEED_INIT (t, 1);\n+\t  if (CLASSTYPE_READONLY_FIELDS_NEED_INIT (type))\n+\t    SET_CLASSTYPE_READONLY_FIELDS_NEED_INIT (t, 1);\n+\t}\n+\n       if (DECL_MUTABLE_P (x) || TYPE_HAS_MUTABLE_P (type))\n \tCLASSTYPE_HAS_MUTABLE (t) = 1;\n \n@@ -3683,11 +3700,6 @@ check_methods (tree t)\n \n   for (x = TYPE_METHODS (t); x; x = TREE_CHAIN (x))\n     {\n-      /* If this was an evil function, don't keep it in class.  */\n-      if (DECL_ASSEMBLER_NAME_SET_P (x) \n-\t  && IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (x)))\n-\tcontinue;\n-\n       check_for_override (x, t);\n       if (DECL_PURE_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n \tcp_error_at (\"initializer specified for non-virtual method `%D'\", x);"}, {"sha": "dcb173eff979f6f3b5ab710fe231a4ae9cd6efbe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -100,6 +100,7 @@ struct diagnostic_context;\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n       DECL_VAR_MARKED_P (in a VAR_DECL)\n       DECL_SELF_REFERENCE_P (in a TYPE_DECL)\n+      DECL_INVALID_OVERRIRDER_P (in a FUNCTION_DECL)\n    5: DECL_INTERFACE_KNOWN.\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n    7: DECL_DEAD_FOR_LOCAL (in VAR_DECL).\n@@ -224,8 +225,6 @@ struct lang_identifier GTY(())\n   tree class_value;\n   tree class_template_info;\n   tree label_value;\n-  tree implicit_decl;\n-  tree error_locus;\n };\n \n /* In an IDENTIFIER_NODE, nonzero if this identifier is actually a\n@@ -399,16 +398,6 @@ typedef enum cp_id_kind\n #define SET_IDENTIFIER_LABEL_VALUE(NODE, VALUE)   \\\n   IDENTIFIER_LABEL_VALUE (NODE) = (VALUE)\n \n-#define IDENTIFIER_IMPLICIT_DECL(NODE) \\\n-  (LANG_IDENTIFIER_CAST (NODE)->implicit_decl)\n-#define SET_IDENTIFIER_IMPLICIT_DECL(NODE, VALUE) \\\n-  IDENTIFIER_IMPLICIT_DECL (NODE) = (VALUE)\n-\n-#define IDENTIFIER_ERROR_LOCUS(NODE) \\\n-  (LANG_IDENTIFIER_CAST (NODE)->error_locus)\n-#define SET_IDENTIFIER_ERROR_LOCUS(NODE, VALUE)\t\\\n-  IDENTIFIER_ERROR_LOCUS (NODE) = (VALUE)\n-\n /* Nonzero if this identifier is used as a virtual function name somewhere\n    (optimizes searches).  */\n #define IDENTIFIER_VIRTUAL_P(NODE) TREE_LANG_FLAG_1 (NODE)\n@@ -888,11 +877,6 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n #define TYPE_NAME_STRING(NODE) (IDENTIFIER_POINTER (TYPE_IDENTIFIER (NODE)))\n #define TYPE_NAME_LENGTH(NODE) (IDENTIFIER_LENGTH (TYPE_IDENTIFIER (NODE)))\n \n-#define TYPE_ASSEMBLER_NAME_STRING(NODE) \\\n-  (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (TYPE_NAME  (NODE))))\n-#define TYPE_ASSEMBLER_NAME_LENGTH(NODE) \\\n-  (IDENTIFIER_LENGTH (DECL_ASSEMBLER_NAME (TYPE_NAME (NODE))))\n-\n /* Nonzero if NODE has no name for linkage purposes.  */\n #define TYPE_ANONYMOUS_P(NODE) \\\n   (TAGGED_TYPE_P (NODE) && ANON_AGGRNAME_P (TYPE_LINKAGE_IDENTIFIER (NODE)))\n@@ -1951,6 +1935,13 @@ struct lang_decl GTY(())\n #define DECL_NEEDS_FINAL_OVERRIDER_P(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->decl_flags.needs_final_overrider)\n \n+/* True (in a FUNCTION_DECL) if NODE is a virtual function that is an\n+   invalid overrider for a function from a base class.  Once we have\n+   complained about an invalid overrider we avoid complaining about it\n+   again.  */\n+#define DECL_INVALID_OVERRIDER_P(NODE) \\\n+  (DECL_LANG_FLAG_4 (NODE))\n+\n /* The thunks associated with NODE, a FUNCTION_DECL.  */\n #define DECL_THUNKS(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->u.f.context)\n@@ -3614,7 +3605,6 @@ extern tree duplicate_decls\t\t\t(tree, tree);\n extern tree pushdecl_top_level\t\t\t(tree);\n extern tree pushdecl_top_level_and_finish       (tree, tree);\n extern tree push_using_decl                     (tree, tree);\n-extern tree implicitly_declare\t\t\t(tree);\n extern tree declare_local_label                 (tree);\n extern tree define_label\t\t\t(location_t, tree);\n extern void check_goto\t\t\t\t(tree);"}, {"sha": "c2698ecf4a60b2dc45649c8398c6fc0baf81ab24", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 59, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -1097,11 +1097,6 @@ decls_match (tree newdecl, tree olddecl)\n void\n warn_extern_redeclared_static (tree newdecl, tree olddecl)\n {\n-  static const char *const explicit_extern_static_warning\n-    = \"`%D' was declared `extern' and later `static'\";\n-  static const char *const implicit_extern_static_warning\n-    = \"`%D' was declared implicitly `extern' and later `static'\";\n-\n   tree name;\n \n   if (TREE_CODE (newdecl) == TYPE_DECL\n@@ -1127,9 +1122,7 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n     return;\n \n   name = DECL_ASSEMBLER_NAME (newdecl);\n-  pedwarn (IDENTIFIER_IMPLICIT_DECL (name)\n-\t      ? implicit_extern_static_warning\n-\t      : explicit_extern_static_warning, newdecl);\n+  pedwarn (\"`%D' was declared `extern' and later `static'\", newdecl);\n   cp_pedwarn_at (\"previous declaration of `%D'\", olddecl);\n }\n \n@@ -1373,10 +1366,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t  else\n \t    return NULL_TREE;\n \t}\n-\n-      /* Already complained about this, so don't do so again.  */\n-      else if (current_class_type == NULL_TREE\n-\t  || IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (newdecl)) != current_class_type)\n+      else\n \t{\n \t  error (\"conflicting declaration '%#D'\", newdecl);\n \t  cp_error_at (\"'%D' has a previous declaration as `%#D'\",\n@@ -1943,39 +1933,6 @@ duplicate_decls (tree newdecl, tree olddecl)\n   return olddecl;\n }\n \f\n-/* Generate an implicit declaration for identifier FUNCTIONID\n-   as a function of type int ().  Print a warning if appropriate.  */\n-\n-tree\n-implicitly_declare (tree functionid)\n-{\n-  tree decl;\n-\n-  /* We used to reuse an old implicit decl here,\n-     but this loses with inline functions because it can clobber\n-     the saved decl chains.  */\n-  decl = build_lang_decl (FUNCTION_DECL, functionid, default_function_type);\n-\n-  DECL_EXTERNAL (decl) = 1;\n-  TREE_PUBLIC (decl) = 1;\n-\n-  /* ISO standard says implicit declarations are in the innermost block.\n-     So we record the decl in the standard fashion.  */\n-  pushdecl (decl);\n-  rest_of_decl_compilation (decl, NULL, 0, 0);\n-\n-  if (warn_implicit\n-      /* Only one warning per identifier.  */\n-      && IDENTIFIER_IMPLICIT_DECL (functionid) == NULL_TREE)\n-    {\n-      pedwarn (\"implicit declaration of function `%#D'\", decl);\n-    }\n-\n-  SET_IDENTIFIER_IMPLICIT_DECL (functionid, decl);\n-\n-  return decl;\n-}\n-\n /* Return zero if the declaration NEWDECL is valid\n    when the declaration OLDDECL (assumed to be for the same name)\n    has already been seen.\n@@ -8844,7 +8801,6 @@ grok_ctor_properties (tree ctype, tree decl)\n      \t instantiated, but that's hard to forestall.  */\n       error (\"invalid constructor; you probably meant `%T (const %T&)'\",\n \t\tctype, ctype);\n-      SET_IDENTIFIER_ERROR_LOCUS (DECL_NAME (decl), ctype);\n       return 0;\n     }\n   \n@@ -10154,12 +10110,6 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n       ctype = NULL_TREE;\n     }\n \n-  /* Warn if function was previously implicitly declared\n-     (but not if we warned then).  */\n-  if (! warn_implicit\n-      && IDENTIFIER_IMPLICIT_DECL (DECL_NAME (decl1)) != NULL_TREE)\n-    cp_warning_at (\"`%D' implicitly declared before its definition\", IDENTIFIER_IMPLICIT_DECL (DECL_NAME (decl1)));\n-\n   /* Set up current_class_type, and enter the scope of the class, if\n      appropriate.  */\n   if (ctype)\n@@ -10929,13 +10879,10 @@ start_method (tree declspecs, tree declarator, tree attrlist)\n \n   if (DECL_IN_AGGR_P (fndecl))\n     {\n-      if (IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (fndecl)) != current_class_type)\n-\t{\n-\t  if (DECL_CONTEXT (fndecl)\n-\t      && TREE_CODE( DECL_CONTEXT (fndecl)) != NAMESPACE_DECL)\n-\t    error (\"`%D' is already defined in class `%T'\", fndecl,\n-\t              DECL_CONTEXT (fndecl));\n-\t}\n+      if (DECL_CONTEXT (fndecl)\n+\t  && TREE_CODE( DECL_CONTEXT (fndecl)) != NAMESPACE_DECL)\n+\terror (\"`%D' is already defined in class `%T'\", fndecl,\n+\t       DECL_CONTEXT (fndecl));\n       return void_type_node;\n     }\n "}, {"sha": "60a4d047a19e273cdcde0ecf9e9c399f52077fd4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -371,6 +371,9 @@ perform_member_init (tree member, tree init)\n \t  /* member traversal: note it leaves init NULL */\n \t  else if (TREE_CODE (type) == REFERENCE_TYPE)\n \t    pedwarn (\"uninitialized reference member `%D'\", member);\n+\t  else if (CP_TYPE_CONST_P (type))\n+\t    pedwarn (\"uninitialized mber `%D' with `const' type `%T'\",\n+\t\t     member, type);\n \t}\n       else if (TREE_CODE (init) == TREE_LIST)\n \t/* There was an explicit member initialization.  Do some work"}, {"sha": "66e45ed905a3151f0c54ffa947548466ef27bf80", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -627,26 +627,18 @@ unqualified_name_lookup_error (tree name)\n       if (name != ansi_opname (ERROR_MARK))\n \terror (\"`%D' not defined\", name);\n     }\n-  else if (current_function_decl == 0)\n-    error (\"`%D' was not declared in this scope\", name);\n   else\n     {\n-      if (IDENTIFIER_NAMESPACE_VALUE (name) != error_mark_node\n-\t  || IDENTIFIER_ERROR_LOCUS (name) != current_function_decl)\n+      error (\"`%D' was not declared in this scope\", name);\n+      /* Prevent repeated error messages by creating a VAR_DECL with\n+\t this NAME in the innermost block scope.  */\n+      if (current_function_decl)\n \t{\n-\t  static int undeclared_variable_notice;\n-\n-\t  error (\"`%D' undeclared (first use this function)\", name);\n-\n-\t  if (! undeclared_variable_notice)\n-\t    {\n-\t      error (\"(Each undeclared identifier is reported only once for each function it appears in.)\");\n-\t      undeclared_variable_notice = 1;\n-\t    }\n+\t  tree decl;\n+\t  decl = build_decl (VAR_DECL, name, error_mark_node);\n+\t  DECL_CONTEXT (decl) = current_function_decl;\n+\t  push_local_binding (name, decl, 0);\n \t}\n-      /* Prevent repeated error messages.  */\n-      SET_IDENTIFIER_NAMESPACE_VALUE (name, error_mark_node);\n-      SET_IDENTIFIER_ERROR_LOCUS (name, current_function_decl);\n     }\n \n   return error_mark_node;"}, {"sha": "82e583c3351fa595fda780fb40a5d96f513ca7f2", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -36,7 +36,6 @@ static cxx_scope *innermost_nonclass_level (void);\n static tree select_decl (cxx_binding *, int);\n static cxx_binding *binding_for_name (cxx_scope *, tree);\n static tree lookup_name_current_level (tree);\n-static void push_local_binding (tree, tree, int);\n static tree push_overloaded_decl (tree, int);\n static bool lookup_using_namespace (tree, cxx_binding *, tree,\n                                     tree, int);\n@@ -647,13 +646,7 @@ pushdecl (tree x)\n \t    t = NULL_TREE;\n \t}\n \n-      if (t == error_mark_node)\n-\t{\n-\t  /* error_mark_node is 0 for a while during initialization!  */\n-\t  t = NULL_TREE;\n-\t  cp_error_at (\"`%#D' used prior to declaration\", x);\n-\t}\n-      else if (t != NULL_TREE)\n+      if (t && t != error_mark_node)\n \t{\n \t  if (different_binding_level)\n \t    {\n@@ -830,24 +823,6 @@ pushdecl (tree x)\n  \t\t  || TREE_CODE (x) == TEMPLATE_DECL))\n  \t    SET_IDENTIFIER_NAMESPACE_VALUE (name, x);\n \n-\t  /* Don't forget if the function was used via an implicit decl.  */\n-\t  if (IDENTIFIER_IMPLICIT_DECL (name)\n-\t      && TREE_USED (IDENTIFIER_IMPLICIT_DECL (name)))\n-\t    TREE_USED (x) = 1;\n-\n-\t  /* Don't forget if its address was taken in that way.  */\n-\t  if (IDENTIFIER_IMPLICIT_DECL (name)\n-\t      && TREE_ADDRESSABLE (IDENTIFIER_IMPLICIT_DECL (name)))\n-\t    TREE_ADDRESSABLE (x) = 1;\n-\n-\t  /* Warn about mismatches against previous implicit decl.  */\n-\t  if (IDENTIFIER_IMPLICIT_DECL (name) != NULL_TREE\n-\t      /* If this real decl matches the implicit, don't complain.  */\n-\t      && ! (TREE_CODE (x) == FUNCTION_DECL\n-\t\t    && TREE_TYPE (TREE_TYPE (x)) == integer_type_node))\n-\t    warning\n-\t      (\"`%D' was previously implicitly declared to return `int'\", x);\n-\n \t  /* If new decl is `static' and an `extern' was seen previously,\n \t     warn about it.  */\n \t  if (x != NULL_TREE && t != NULL_TREE && decls_match (x, t))\n@@ -1035,7 +1010,7 @@ maybe_push_decl (tree decl)\n    doesn't really belong to this binding level, that it got here\n    through a using-declaration.  */\n \n-static void\n+void\n push_local_binding (tree id, tree decl, int flags)\n {\n   struct cp_binding_level *b;"}, {"sha": "1ade1a91f3f104f8178e21e62ab8c452a60c083d", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -287,6 +287,7 @@ extern tree lookup_namespace_name (tree, tree);\n extern tree lookup_qualified_name (tree, tree, bool, bool);\n extern tree lookup_name_nonclass (tree);\n extern tree lookup_function_nonclass (tree, tree);\n+extern void push_local_binding (tree, tree, int);\n extern int push_class_binding (tree, tree);\n extern bool pushdecl_class_level (tree);\n extern tree pushdecl_namespace_level (tree);"}, {"sha": "4858b869c3d0b70a1d9d46c7af04b07cceffe58d", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -157,8 +157,6 @@ cxx_print_identifier (FILE *file, tree node, int indent)\n   cxx_print_binding (file, IDENTIFIER_BINDING (node), \"local bindings\");\n   print_node (file, \"label\", IDENTIFIER_LABEL_VALUE (node), indent + 4);\n   print_node (file, \"template\", IDENTIFIER_TEMPLATE (node), indent + 4);\n-  print_node (file, \"implicit\", IDENTIFIER_IMPLICIT_DECL (node), indent + 4);\n-  print_node (file, \"error locus\", IDENTIFIER_ERROR_LOCUS (node), indent + 4);\n }\n \n void"}, {"sha": "5b66000c34e59a86c6011326d5cde123392cbfc1", "filename": "gcc/cp/search.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -1703,7 +1703,10 @@ check_final_overrider (tree overrider, tree basefn)\n   tree over_throw = TYPE_RAISES_EXCEPTIONS (over_type);\n   tree base_throw = TYPE_RAISES_EXCEPTIONS (base_type);\n   int fail = 0;\n-  \n+\n+  if (DECL_INVALID_OVERRIDER_P (overrider))\n+    return 0;\n+\n   if (same_type_p (base_return, over_return))\n     /* OK */;\n   else if ((CLASS_TYPE_P (over_return) && CLASS_TYPE_P (base_return))\n@@ -1753,8 +1756,6 @@ check_final_overrider (tree overrider, tree basefn)\n     fail = 2;\n   if (!fail)\n     /* OK */;\n-  else if (IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (overrider)))\n-    return 0;\n   else\n     {\n       if (fail == 1)\n@@ -1768,21 +1769,16 @@ check_final_overrider (tree overrider, tree basefn)\n \t\t       overrider);\n \t  cp_error_at (\"  overriding `%#D'\", basefn);\n \t}\n-      SET_IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (overrider),\n-                                  DECL_CONTEXT (overrider));\n+      DECL_INVALID_OVERRIDER_P (overrider) = 1;\n       return 0;\n     }\n   \n   /* Check throw specifier is at least as strict.  */\n   if (!comp_except_specs (base_throw, over_throw, 0))\n     {\n-      if (!IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (overrider)))\n-\t{\n-\t  cp_error_at (\"looser throw specifier for `%#F'\", overrider);\n-\t  cp_error_at (\"  overriding `%#F'\", basefn);\n-\t  SET_IDENTIFIER_ERROR_LOCUS (DECL_ASSEMBLER_NAME (overrider),\n-\t\t\t\t      DECL_CONTEXT (overrider));\n-\t}\n+      cp_error_at (\"looser throw specifier for `%#F'\", overrider);\n+      cp_error_at (\"  overriding `%#F'\", basefn);\n+      DECL_INVALID_OVERRIDER_P (overrider) = 1;\n       return 0;\n     }\n   "}, {"sha": "b7a66c2929364672708c3d1b165167aa6236b717", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -2380,7 +2380,7 @@ build_function_call (tree function, tree params)\n   tree fntype, fndecl;\n   tree coerced_params;\n   tree result;\n-  tree name = NULL_TREE, assembler_name = NULL_TREE;\n+  tree name = NULL_TREE;\n   int is_method;\n   tree original = function;\n \n@@ -2393,7 +2393,6 @@ build_function_call (tree function, tree params)\n   if (TREE_CODE (function) == FUNCTION_DECL)\n     {\n       name = DECL_NAME (function);\n-      assembler_name = DECL_ASSEMBLER_NAME (function);\n \n       mark_used (function);\n       fndecl = function;"}, {"sha": "6eb9b55d76d83a834b6c4992b2ae9afe9094e461", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -1,3 +1,19 @@\n+2004-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/14401\n+\t* g++.dg/init/ctor3.C: New test.\n+\t* g++.dg/init/union1.C: New test.\n+\t* g++.dg/ext/anon-struct4.C: New test.\n+\n+2004-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/lookup/koenig1.C: Tweak error messages.\n+\t* g++.dg/lookup/used-before-declaration.C: Likewise.\n+\t* g++.dg/other/do1.C: Likewise.\n+\t* g++.dg/overload/koenig1.C: Likewise.\n+\t* g++.dg/parse/crash13.C: Likewise.\n+\t* g++.dg/template/instantiate3.C: Likewise.\n+\t\n 2004-03-08  Eric Christopher  <echristo@redhat.com>\n \n \t* * lib/target-supports.exp: Enable libiconv in test"}, {"sha": "f0b3b57f70d14158a2947576b04bb356ec53fd51", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -0,0 +1,3 @@\n+// PR c++/14401\n+\n+struct { struct { int& i ; } bar ; } foo ; // { dg-error \"\" }"}, {"sha": "1678aaf2c4d27028458589509ee0c9d3e423a6c5", "filename": "gcc/testsuite/g++.dg/init/ctor3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor3.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/14401\n+\n+struct S {\n+  S() {} // { dg-error \"\" }\n+  const int i;\n+};"}, {"sha": "0049f4429166686893ece9bcd4589ab609d860de", "filename": "gcc/testsuite/g++.dg/init/union1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Funion1.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/14401\n+\n+union U {\n+  int& i; // { dg-error \"\" }\n+};"}, {"sha": "7273727194c915f527e4201c717c7300e894232f", "filename": "gcc/testsuite/g++.dg/lookup/koenig1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig1.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -9,5 +9,5 @@ class X;\n \n void foo() {\n   X x(1); // { dg-error \"incomplete type\" \"\" }\n-  bar(x); // { dg-error \"undeclared\" \"\" }\n+  bar(x); // { dg-error \"not declared\" \"\" }\n }"}, {"sha": "b51d270c74abb2abc36bb44c3ef1db0897634cfa", "filename": "gcc/testsuite/g++.dg/lookup/used-before-declaration.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fused-before-declaration.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fused-before-declaration.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fused-before-declaration.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -1,5 +1,5 @@\n // Copyroght (C) 2003 Free Software Foundation\n // Origin: PR/12832, Jonathan Wakely <redi@gcc.gnu.org>\n \n-void f() { g(); }               // { dg-error \"undeclared\" \"\" }\n-void g() { }                    // { dg-error \"used\" \"\" }\n+void f() { g(); }               // { dg-error \"not declared\" \"\" }\n+void g() { }"}, {"sha": "720358568f1245f4ae7fe137c6b614acf6e324c3", "filename": "gcc/testsuite/g++.dg/other/do1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fdo1.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -8,6 +8,6 @@\n void init ()\n {\n   do {  } while (0)\n-\t    obj = 0; // { dg-error \"expected|undeclared\" \"\" }\n+\t    obj = 0; // { dg-error \"expected|not declared\" \"\" }\n      \n }"}, {"sha": "1ed7bce0b146d95f4db7b88a9be408a87d2331a5", "filename": "gcc/testsuite/g++.dg/overload/koenig1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fkoenig1.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -13,6 +13,6 @@ void g ()\n {\n   B *bp;\n   N::A *ap;\n-  f (bp);\t\t\t// { dg-error \"undeclared\" }\n+  f (bp);\t\t\t// { dg-error \"not declared\" }\n   f (ap);\n }"}, {"sha": "d9e9087fa0d8d423d81e511b34d68f62ef8fe627", "filename": "gcc/testsuite/g++.dg/parse/crash13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -18,5 +18,5 @@ void func(A<T>::B* )\t// { dg-error \"variable|template|expression\" }\n \n int main() \n {\n-  func<void>(0);\t// { dg-error \"undeclared|expression|;\" }\n+  func<void>(0);\t// { dg-error \"not declared|expression|;\" }\n }"}, {"sha": "3ad8b95cbe5b230fe97fe77c6cca12c45c11b35c", "filename": "gcc/testsuite/g++.dg/template/instantiate3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C?ref=58ec3cc5c0c441e0e8c49c029be9e25dcb1d853d", "patch": "@@ -10,7 +10,7 @@ template <class TYPE>\n struct ACE_Cleanup_Adapter\n {\n   TYPE &object ()\n-  { return object_; }\t// { dg-error \"undeclared|reported\" }\n+  { return object_; }\t// { dg-error \"not declared|reported\" }\n   TYPE object_;\t\t// { dg-error \"incomplete type\" }\n };\n "}]}