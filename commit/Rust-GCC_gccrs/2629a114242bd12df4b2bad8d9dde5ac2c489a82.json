{"sha": "2629a114242bd12df4b2bad8d9dde5ac2c489a82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyOWExMTQyNDJiZDEyZGY0YjJiYWQ4ZDlkZGU1YWMyYzQ4OWE4Mg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-12-13T20:07:46Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-12-13T20:07:46Z"}, "message": "Use one makefile for fixinc\n\nFrom-SVN: r38231", "tree": {"sha": "aa77d1e180b5de6f18f88e4ec71062700cc5d417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa77d1e180b5de6f18f88e4ec71062700cc5d417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2629a114242bd12df4b2bad8d9dde5ac2c489a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2629a114242bd12df4b2bad8d9dde5ac2c489a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2629a114242bd12df4b2bad8d9dde5ac2c489a82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2629a114242bd12df4b2bad8d9dde5ac2c489a82/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c36ee1647b48c32193f007fd96f9759865fcba8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36ee1647b48c32193f007fd96f9759865fcba8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36ee1647b48c32193f007fd96f9759865fcba8a"}], "stats": {"total": 235, "additions": 95, "deletions": 140}, "files": [{"sha": "79fa00c92d73bad0f71793880b7d4701e1f825cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -1,3 +1,21 @@\n+2000-12-13  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/Makefile.in(*): substantial rewrite to accommodate systems\n+\tthat cannot handle bi-directional pipes, viz. BeOS and DOS.\n+\t* fixinc/fixlib.h(IGNORE_ARG): new macro\n+\t(STATIC): define for all of fixinc to use\n+\t* fixinc/fixfixes.c(*): eliminate unused arg warnings\n+\t* fixinc/fixtests.c(*): ditto\n+\t* fixinc/fixincl.c(start_fixer): chain_open now uses const arg list\n+\t* fixinc/gnu-regex.c: reorder some includes to avoid _GNU_SOURCE\n+\twarning.  Also, eliminate the ``#ifdef emacs'' stuff.\n+\t(re_syntax_options): make global as it is declared so.\n+\t* fixinc/mkfixinc.sh: process the argument list more consistently\n+\t(beos/msdosdjgpp): set TARGETS to twoprocess vs. oneprocess\n+\t* fixinc/procopen.c(globals): include \"fixlib.h\" for std defs\n+\t* fixinc/server.c(globals): ditto\n+\t* fixinc/server.h(defines): ditto\n+\n 2000-12-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * tradcpp.c (special_symbol): Improve test for definedness,"}, {"sha": "86155182b6f9018923b52fa34ca35f46965302a0", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -59,23 +59,38 @@ INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. \\\n ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n \n LIBERTY = ../../libiberty/libiberty.a\n-OBJ = fixincl.o fixtests.o fixfixes.o server.o procopen.o \\\n+\n+ALLOBJ = fixincl.o fixtests.o fixfixes.o server.o procopen.o \\\n       gnu-regex.o fixlib.o\n \n-HDR = server.h gnu-regex.h fixlib.h machname.h\n+TESTOBJ = fixincl.o fixlib.o fixtests.o gnu-regex.o\n+FIXOBJ  = fixfixes.o fixlib.o gnu-regex.o\n \n-TARGETS = fixincl@build_exeext@\n+HDR = server.h gnu-regex.h fixlib.h machname.h\n+FI  = fixincl@build_exeext@\n+AF  = applyfix@build_exeext@\n \n all : $(TARGETS)\n gen : $(srcdir)/fixincl.x\n \n-fixincl@build_exeext@: $(OBJ) $(LIBERTY)\n-\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $@ $(OBJ) $(LIBERTY)\n+oneprocess : full-stamp\n+twoprocess : test-stamp $(AF)\n+\n+full-stamp : $(ALLOBJ) $(LIBERTY)\n+\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $(FI) $(ALLOBJ) $(LIBERTY)\n+\ttouch $@\n+\n+test-stamp : $(TESTOBJ) $(LIBERTY)\n+\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $(FI) $(TESTOBJ) $(LIBERTY)\n+\ttouch $@\n+\n+$(AF): $(FIXOBJ) $(LIBERTY)\n+\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $@ $(FIXOBJ) $(LIBERTY)\n \n-$(OBJ)      : $(HDR)\n-fixincl.o   : $(srcdir)/fixincl.x fixincl.c\n+$(ALLOBJ)   : $(HDR)\n+fixincl.o   : fixincl.c  $(srcdir)/fixincl.x\n fixtests.o  : fixtests.c\n-fixfixes.o  : fixfixes.c\n+fixfixes.o  : fixfixes.c $(srcdir)/fixincl.x\n server.o    : server.c\n procopen.o  : procopen.c\n gnu-regex.o : gnu-regex.c\n@@ -91,7 +106,7 @@ $(srcdir)/fixincl.x: fixincl.tpl inclhack.def\n \tcd $(srcdir) ; $(SHELL) ./genfixes $@\n \n clean:\n-\trm -f *.o $(TARGETS) machname.h *~\n+\trm -f *.o *-stamp $(AF) $(FI) machname.h *~\n \n maintainer-clean : clean\n \trm -f $(srcdir)/fixincl.x\n@@ -103,11 +118,7 @@ install-bin : $(TARGETS)\n \t./fixincl -v\n \t@if [ -f ../fixinc.sh ] ; then rm -f ../fixinc.sh || \\\n \t    mv -f ../fixinc.sh ../fixinc.sh.$$ || exit 1 ; fi\n-\t@if [ -f ./fixincl.sh ] ; \\\n-\tthen echo cp ./fixincl.sh ../fixinc.sh ; \\\n-\t\tcp ./fixincl.sh ../fixinc.sh ; \\\n-\telse echo cp $(srcdir)/fixincl.sh ../fixinc.sh ; \\\n-\t\tcp $(srcdir)/fixincl.sh ../fixinc.sh ; fi\n+\t@cp $(srcdir)/fixincl.sh ../fixinc.sh\n \tchmod 755 ../fixinc.sh\n \n Makefile: Makefile.in ../config.status"}, {"sha": "56b9f5493c7fee91716594d14b45f0c91ef1ba13", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -257,6 +257,7 @@ FIX_PROC_HEAD( format_fix )\n   tCC*  pz_fmt = p_fixd->patch_args[1];\n   regex_t re;\n   regmatch_t rm[10];\n+  IGNORE_ARG(filname);\n \n   /*\n    *  We must have a format\n@@ -335,6 +336,7 @@ FIX_PROC_HEAD( char_macro_use_fix )\n   regmatch_t rm[1];\n   const char *p, *limit;\n   size_t len;\n+  IGNORE_ARG(filname);\n \n   if (str == NULL)\n     {\n@@ -419,6 +421,7 @@ FIX_PROC_HEAD( char_macro_def_fix )\n   const char *p, *limit;\n   char arg;\n   size_t len;\n+  IGNORE_ARG(filname);\n \n   if (str == NULL)\n     {\n@@ -511,6 +514,8 @@ FIX_PROC_HEAD( machine_name_fix )\n   regex_t *label_re, *name_re;\n   char scratch[SCRATCHSZ];\n   size_t len;\n+  IGNORE_ARG(filname);\n+  IGNORE_ARG(p_fixd);\n \n   mn_get_regexps (&label_re, &name_re, \"machine_name_fix\");\n \n@@ -598,14 +603,15 @@ FIX_PROC_HEAD( machine_name_fix )\n FIX_PROC_HEAD( wrap_fix )\n {\n   tSCC   z_no_wrap_pat[] = \"^#if.*__need_\";\n-  static regex_t no_wrapping_re = { NULL, 0, 0 };\n+  static regex_t no_wrapping_re; /* assume zeroed data */\n \n   char   z_fixname[ 64 ];\n   tCC*   pz_src  = p_fixd->fix_name;\n   tCC*   pz_name = z_fixname;\n   char*  pz_dst  = z_fixname;\n   int    do_end  = 0;\n   size_t len     = 0;\n+  IGNORE_ARG(filname);\n \n   if (no_wrapping_re.allocated == 0)\n     compile_re( z_no_wrap_pat, &no_wrapping_re, 0, \"no-wrap pattern\",\n@@ -670,6 +676,7 @@ FIX_PROC_HEAD( gnu_type_fix )\n   const char* pz_pat;\n   regex_t    re;\n   regmatch_t rm[GTYPE_SE_CT+1];\n+  IGNORE_ARG(filname);\n \n   {\n     tTestDesc* pTD = p_fixd->p_test_desc;"}, {"sha": "68914e2cbcac0493440391036a6e37ed7a1c4a9f", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -1,4 +1,4 @@\n-\n+:1066\n /* Install modified versions of certain ANSI-incompatible system header\n    files which are fixed to work correctly with ANSI C and placed in a\n    directory that GNU C will search.\n@@ -1066,7 +1066,7 @@ start_fixer (read_fd, p_fixd, pz_fix_file)\n       int fd;\n \n       fd = chain_open (read_fd,\n-                       (t_pchar *) p_fixd->patch_args,\n+                       (tCC **) p_fixd->patch_args,\n                        (process_chain_head == -1)\n                        ? &process_chain_head : (pid_t *) NULL);\n "}, {"sha": "4490d2086ea3f6d362ed923316a8f145ba776912", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -51,6 +51,11 @@ typedef int t_success;\n #define FAILED(p)       ((p) < SUCCESS)\n #define HADGLITCH(p)    ((p) > SUCCESS)\n \n+#ifndef DEBUG\n+# define STATIC static\n+#else\n+# define STATIC\n+#endif\n \n #define tSCC static const char\n #define tCC  const char\n@@ -81,13 +86,12 @@ typedef int t_success;\n #define EXIT_PANIC\t99\n #endif /* NOPROCESS */\n \n-#ifndef HAVE_T_BOOL_ENUM\n-#define HAVE_T_BOOL_ENUM\n+#define IGNORE_ARG(a)   ((void)(a))\n+\n typedef enum\n {\n   BOOL_FALSE, BOOL_TRUE\n } t_bool;\n-#endif\n \n typedef int apply_fix_p_t;  /* Apply Fix Predicate Type */\n "}, {"sha": "e3da35b8c363b4554fa1e002517dcc22ddcfacb8", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -72,6 +72,7 @@ TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n   regex_t *label_re, *name_re;\n   regmatch_t match[2];\n   tCC *base, *limit;\n+  IGNORE_ARG(fname);\n \n   mn_get_regexps(&label_re, &name_re, \"machine_name_test\");\n "}, {"sha": "952eccdf8299ceabd16fb954e8a75665d43792bc", "filename": "gcc/fixinc/genfixes", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fgenfixes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fgenfixes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgenfixes?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -63,7 +63,7 @@ if [ $# -eq 0 ] ; then\n   set -- fixincl.x\n fi\n \n-AG=\"autogen $AG\"\n+AG=\"autogen4 $AG\"\n set -e\n \n case \"$1\" in"}, {"sha": "0152e9fdcd23c374cf87a17e82e40413ddfa1675", "filename": "gcc/fixinc/gnu-regex.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fgnu-regex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fgnu-regex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgnu-regex.c?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -22,6 +22,8 @@\n    along with this program; if not, write to the Free Software Foundation, \n    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n+#include \"auto-host.h\"\n+\n #undef\t_GNU_SOURCE\n #define _GNU_SOURCE\n \n@@ -76,18 +78,6 @@\n # define gettext_noop(String) String\n #endif\n \n-/* The `emacs' switch turns on certain matching commands\n-   that make sense only in Emacs. */\n-#ifdef emacs\n-\n-# include \"lisp.h\"\n-# include \"buffer.h\"\n-# include \"syntax.h\"\n-\n-#else  /* not emacs */\n-\n-# include \"auto-host.h\"\n-\n # if !defined(volatile) && !defined(HAVE_VOLATILE)\n #  define volatile\n # endif\n@@ -191,8 +181,6 @@ init_syntax_once ()\n # endif /* not SYNTAX_TABLE */\n \n # define SYNTAX(c) re_syntax_table[c]\n-\n-#endif /* not emacs */\n \f\n /* Get the interface, including the syntax bits.  */\n /* GCC LOCAL: call it gnu-regex.h, not regex.h, to avoid name conflicts */\n@@ -922,7 +910,7 @@ printchar (c)\n    syntax, so it can be changed between regex compilations.  */\n /* This has no initializer because initialized variables in Emacs\n    become read-only after dumping.  */\n-static reg_syntax_t re_syntax_options;\n+reg_syntax_t re_syntax_options;\n \n \n /* Specify the precise syntax of regexps for compilation.  This provides\n@@ -5710,6 +5698,7 @@ regerror (errcode, preg, errbuf, errbuf_size)\n {\n   const char *msg;\n   size_t msg_size;\n+  (void)preg;\n \n   if (errcode < 0\n       || errcode >= (int) (sizeof (re_error_msgid)"}, {"sha": "5bb6a5502c9daca72663f566c0419782d8f5ff9e", "filename": "gcc/fixinc/mkfixinc.sh", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fmkfixinc.sh?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -1,39 +1,30 @@\n #! /bin/sh\n \n-build=$1\n-machine=$2\n-\n-if [ -z \"$build\" ]\n-then\n-\techo No target system name given\n-\texit 1\n-fi\n-\n-#  If we don't get two arguments, then assume both arguments\n-#  are the same\n-#\n-if [ -z \"$machine\" ]\n+if [ $# -ne 2 ]\n then\n-\tmachine=\"$build\"\n+  echo \"Usage: $0 <build-mach-triplet> <target-mach-triplet>\"\n+  exit 1\n fi\n \n+build=$1\n+machine=$2\n target=../fixinc.sh\n \n echo constructing ${target} for $machine to run on $build\n fixincludes=\"${machine}\"\n \n-# Choose fix build method by build system\n+# Choose one or two-process fix methodology.  Systems that cannot handle\n+# bi-directional pipes must use the twoprocess method.\n+#\n case $build in\n-\ti?86-*-msdosdjgpp* )\n-\t\tMAKE=\"${MAKE} -f ${srcdir}/Makefile.DOS srcdir=${srcdir}\"\n-\t\t;;\n-\n+\ti?86-*-msdosdjgpp* | \\\n \t*-*-beos* )\n-\t\tMAKE=\"${MAKE} -f ${srcdir}/Makefile.BEOS srcdir=${srcdir}\"\n+\t\tMAKE=\"${MAKE} TARGETS=twoprocess\"\n+\t\tCFLAGS=\"${CFLAGS} -DSEPARATE_FIX_PROC\"\n \t\t;;\n \n \t* )\n-\t\tMAKE=\"${MAKE} -f Makefile\"\n+\t\tMAKE=\"${MAKE} TARGETS=oneprocess\"\n \t\t;;\n esac\n "}, {"sha": "91566eb5a956649f57a3d07e8767420a9eb0a1a6", "filename": "gcc/fixinc/procopen.c", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fprocopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fprocopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fprocopen.c?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -50,34 +50,9 @@\n #include \"system.h\"\n \n #include \"server.h\"\n+#include \"fixlib.h\"\n \n-/* If this particular system's header files define the macro `MAXPATHLEN',\n-   we happily take advantage of it; otherwise we use a value which ought\n-   to be large enough.  */\n-#ifndef MAXPATHLEN\n-# define MAXPATHLEN     4096\n-#endif\n-\n-#ifndef STDIN_FILENO\n-# define STDIN_FILENO\t0\n-#endif\n-#ifndef STDOUT_FILENO\n-# define STDOUT_FILENO\t1\n-#endif\n-\n-#ifdef DEBUG\n-#define STATIC\n-#else\n-#define STATIC static\n-#endif\n-#ifndef tSCC\n-#define tSCC static const char\n-#endif\n-#ifndef NUL\n-#define NUL '\\0'\n-#endif\n-\n-STATIC t_pchar def_args[] =\n+STATIC const char* def_args[] =\n { (char *) NULL, (char *) NULL };\n \n /*\n@@ -92,12 +67,12 @@ STATIC t_pchar def_args[] =\n int\n chain_open (stdin_fd, pp_args, p_child)\n      int stdin_fd;\n-     t_pchar *pp_args;\n+     tCC **pp_args;\n      pid_t *p_child;\n {\n   t_fd_pair stdout_pair;\n   pid_t ch_id;\n-  char *pz_cmd;\n+  tCC *pz_cmd;\n \n   stdout_pair.read_fd = stdout_pair.write_fd = -1;\n \n@@ -115,7 +90,7 @@ chain_open (stdin_fd, pp_args, p_child)\n   /*\n    *  If we did not get an arg list, use the default\n    */\n-  if (pp_args == (t_pchar *) NULL)\n+  if (pp_args == (tCC **) NULL)\n     pp_args = def_args;\n \n   /*\n@@ -192,7 +167,7 @@ chain_open (stdin_fd, pp_args, p_child)\n   if (*pp_args == (char *) NULL)\n     *pp_args = pz_cmd;\n \n-  execvp (pz_cmd, pp_args);\n+  execvp (pz_cmd, (char**)pp_args);\n   fprintf (stderr, \"Error %d:  Could not execvp( '%s', ... ):  %s\\n\",\n            errno, pz_cmd, xstrerror (errno));\n   exit (EXIT_PANIC);\n@@ -212,7 +187,7 @@ chain_open (stdin_fd, pp_args, p_child)\n pid_t\n proc2_open (p_pair, pp_args)\n      t_fd_pair *p_pair;\n-     t_pchar *pp_args;\n+     tCC **pp_args;\n {\n   pid_t ch_id;\n \n@@ -239,7 +214,7 @@ proc2_open (p_pair, pp_args)\n pid_t\n proc2_fopen (pf_pair, pp_args)\n      t_pf_pair *pf_pair;\n-     t_pchar *pp_args;\n+     tCC **pp_args;\n {\n   t_fd_pair fd_pair;\n   pid_t ch_id = proc2_open (&fd_pair, pp_args);"}, {"sha": "e32576fca51452bf7f81a9a4943d6c00eb85089a", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -53,40 +53,14 @@\n \n #include \"server.h\"\n \n-/* If this particular system's header files define the macro `MAXPATHLEN',\n-   we happily take advantage of it; otherwise we use a value which ought\n-   to be large enough.  */\n-#ifndef MAXPATHLEN\n-# define MAXPATHLEN     4096\n-#endif\n-\n-#ifndef STDIN_FILENO\n-# define STDIN_FILENO\t0\n-#endif\n-#ifndef STDOUT_FILENO\n-# define STDOUT_FILENO\t1\n-#endif\n-\n-#ifdef DEBUG\n-#define STATIC\n-#else\n-#define STATIC static\n-#endif\n-#ifndef tSCC\n-#define tSCC static const char\n-#endif\n-#ifndef NUL\n-#define NUL '\\0'\n-#endif\n-\n #if !defined(volatile) && !defined(HAVE_VOLATILE)\n # define volatile\n #endif\n \n STATIC volatile t_bool read_pipe_timeout;\n STATIC pid_t server_master_pid = NOPROCESS;\n \n-static t_pchar def_args[] =\n+tSCC* def_args[] =\n { (char *) NULL, (char *) NULL };\n STATIC t_pf_pair server_pair =\n { (FILE *) NULL, (FILE *) NULL };\n@@ -97,7 +71,7 @@ STATIC pid_t server_id = NULLPROCESS;\n  *  the terminating output line.\n  */\n tSCC z_done[] = \"ShElL-OuTpUt-HaS-bEeN-cOmPlEtEd\";\n-STATIC t_pchar p_cur_dir = (char *) NULL;\n+tSCC* p_cur_dir = (char *) NULL;\n \n /*\n  *  load_data\n@@ -257,8 +231,8 @@ server_setup ()\n  *  override with $CONFIG_SHELL, so we do the same.\n  */\n \n-static char *find_shell PARAMS ((void));\n-static char *\n+static const char *find_shell PARAMS ((void));\n+static const char *\n find_shell ()\n {\n   char * shell = getenv (\"CONFIG_SHELL\");"}, {"sha": "c3ed6c7245fb3f81ee3bcced846d17edbb148b0e", "filename": "gcc/fixinc/server.h", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fserver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2629a114242bd12df4b2bad8d9dde5ac2c489a82/gcc%2Ffixinc%2Fserver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.h?ref=2629a114242bd12df4b2bad8d9dde5ac2c489a82", "patch": "@@ -54,6 +54,8 @@\n #include <unistd.h>\n #endif\n \n+#include \"fixlib.h\"\n+\n /*\n  *  Dual pipe opening of a child process\n  */\n@@ -70,27 +72,10 @@ typedef struct\n   FILE *pf_write;\t\t/* parent write fp */\n } t_pf_pair;\n \n-typedef char *t_pchar;\n-\n-#ifndef NOPROCESS\n-#define NOPROCESS\t((pid_t) -1)\n-#define NULLPROCESS\t((pid_t)0)\n-\n-#define EXIT_PANIC\t99\n-#endif /* NOPROCESS */\n-\n-#ifndef HAVE_T_BOOL_ENUM\n-#define HAVE_T_BOOL_ENUM\n-typedef enum\n-{\n-  BOOL_FALSE, BOOL_TRUE\n-} t_bool;\n-#endif\n-\n char *run_shell   PARAMS (( const char *pzCmd));\n-pid_t proc2_fopen PARAMS (( t_pf_pair * p_pair, t_pchar * pp_args));\n-pid_t proc2_open  PARAMS (( t_fd_pair * p_pair, t_pchar * pp_args));\n-int   chain_open  PARAMS (( int in_fd, t_pchar * pp_args,\n+pid_t proc2_fopen PARAMS (( t_pf_pair * p_pair, tCC ** pp_args));\n+pid_t proc2_open  PARAMS (( t_fd_pair * p_pair, tCC ** pp_args));\n+int   chain_open  PARAMS (( int in_fd, tCC ** pp_args,\n                             pid_t * p_child));\n void close_server PARAMS (( void ));\n #endif /* FIXINC_SERVER_H */"}]}