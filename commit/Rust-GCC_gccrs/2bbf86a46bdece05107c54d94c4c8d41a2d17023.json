{"sha": "2bbf86a46bdece05107c54d94c4c8d41a2d17023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiZjg2YTQ2YmRlY2UwNTEwN2M1NGQ5NGM0YzhkNDFhMmQxNzAyMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-14T18:15:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-14T18:15:51Z"}, "message": "re PR c++/49369 (typeof() strips const from member when used in const method)\n\n\tPR c++/49369\n\t* class.c (build_base_path): Fix cv-quals in unevaluated context.\n\nFrom-SVN: r175042", "tree": {"sha": "1f39a784eab7c00be8e20e81adf42b87e4acf284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f39a784eab7c00be8e20e81adf42b87e4acf284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bbf86a46bdece05107c54d94c4c8d41a2d17023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbf86a46bdece05107c54d94c4c8d41a2d17023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbf86a46bdece05107c54d94c4c8d41a2d17023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbf86a46bdece05107c54d94c4c8d41a2d17023/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11f449abc6fc745486699f2f7079497d4c582d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f449abc6fc745486699f2f7079497d4c582d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f449abc6fc745486699f2f7079497d4c582d40"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "a6c866567b82b0dff4dde32efd3adb07df8cf79a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bbf86a46bdece05107c54d94c4c8d41a2d17023", "patch": "@@ -1,5 +1,8 @@\n 2011-06-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49369\n+\t* class.c (build_base_path): Fix cv-quals in unevaluated context.\n+\n \tPR c++/49290\n \t* semantics.c (cxx_fold_indirect_ref): Local, more permissive copy\n \tof fold_indirect_ref_1."}, {"sha": "09444fb49ec454292e26dca8c8e47641cca379e0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2bbf86a46bdece05107c54d94c4c8d41a2d17023", "patch": "@@ -289,6 +289,12 @@ build_base_path (enum tree_code code,\n   offset = BINFO_OFFSET (binfo);\n   fixed_type_p = resolves_to_fixed_type_p (expr, &nonnull);\n   target_type = code == PLUS_EXPR ? BINFO_TYPE (binfo) : BINFO_TYPE (d_binfo);\n+  /* TARGET_TYPE has been extracted from BINFO, and, is therefore always\n+     cv-unqualified.  Extract the cv-qualifiers from EXPR so that the\n+     expression returned matches the input.  */\n+  target_type = cp_build_qualified_type\n+    (target_type, cp_type_quals (TREE_TYPE (TREE_TYPE (expr))));\n+  ptr_target_type = build_pointer_type (target_type);\n \n   /* Do we need to look in the vtable for the real offset?  */\n   virtual_access = (v_binfo && fixed_type_p <= 0);\n@@ -297,7 +303,7 @@ build_base_path (enum tree_code code,\n      source type is incomplete and the pointer value doesn't matter.  */\n   if (cp_unevaluated_operand != 0)\n     {\n-      expr = build_nop (build_pointer_type (target_type), expr);\n+      expr = build_nop (ptr_target_type, expr);\n       if (!want_pointer)\n \texpr = build_indirect_ref (EXPR_LOCATION (expr), expr, RO_NULL);\n       return expr;\n@@ -312,18 +318,7 @@ build_base_path (enum tree_code code,\n \t field, because other parts of the compiler know that such\n \t expressions are always non-NULL.  */\n       if (!virtual_access && integer_zerop (offset))\n-\t{\n-\t  tree class_type;\n-\t  /* TARGET_TYPE has been extracted from BINFO, and, is\n-\t     therefore always cv-unqualified.  Extract the\n-\t     cv-qualifiers from EXPR so that the expression returned\n-\t     matches the input.  */\n-\t  class_type = TREE_TYPE (TREE_TYPE (expr));\n-\t  target_type\n-\t    = cp_build_qualified_type (target_type,\n-\t\t\t\t       cp_type_quals (class_type));\n-\t  return build_nop (build_pointer_type (target_type), expr);\n-\t}\n+\treturn build_nop (ptr_target_type, expr);\n       null_test = error_mark_node;\n     }\n \n@@ -407,9 +402,6 @@ build_base_path (enum tree_code code,\n \toffset = v_offset;\n     }\n \n-  target_type = cp_build_qualified_type\n-    (target_type, cp_type_quals (TREE_TYPE (TREE_TYPE (expr))));\n-  ptr_target_type = build_pointer_type (target_type);\n   if (want_pointer)\n     target_type = ptr_target_type;\n "}, {"sha": "7d5e46ae7c8b2342fc02706aabe7aac0f966e21e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bbf86a46bdece05107c54d94c4c8d41a2d17023", "patch": "@@ -1,5 +1,8 @@\n 2011-06-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49369\n+\t* g++.dg/cpp0x/decltype30.C: New.\n+\n \t* g++.dg/cpp0x/constexpr-array-ptr7.C: New.\n \n 2011-06-14  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "b23c9a94d8fe460dd6f2323ca7f13f80d7446de8", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype30.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbf86a46bdece05107c54d94c4c8d41a2d17023/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype30.C?ref=2bbf86a46bdece05107c54d94c4c8d41a2d17023", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/49369\n+// { dg-options -std=c++0x }\n+\n+template <class,class> struct assert_same;\n+template <class T> struct assert_same<T,T> {};\n+\n+struct B {\n+  int member;\n+};\n+\n+struct C: B {\n+  void method() const;\n+};\n+\n+void C::method() const {\n+  assert_same<decltype((B::member)), const int&> a;\n+}"}]}