{"sha": "1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5OTIxY2JkYzczMmUxYTdmYzY2YjljMjRhNmRmYTk2MjViZDRjMA==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-06-06T12:06:04Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-06-09T01:30:07Z"}, "message": "xtensa: libgcc: fix PR target/95571\n\nRewrite uw_install_context without function calls to avoid register\nspilling in _Unwind_RaiseException during return context installation.\n\n2020-06-08  Max Filippov  <jcmvbkbc@gmail.com>\ngcc/testsuite/\n\t* g++.target/xtensa/pr95571.C: New test.\n\t* g++.target/xtensa/xtensa.exp: New testsuite.\n\nlibgcc/\n\t* config/xtensa/unwind-dw2-xtensa.c (uw_install_context): Merge\n\twith uw_install_context_1.", "tree": {"sha": "60b219c10241be1e2f0c7bc32e7154074cc2074a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60b219c10241be1e2f0c7bc32e7154074cc2074a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df2c0060e5d1e0a37001b93f36e9245bb75ef33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2c0060e5d1e0a37001b93f36e9245bb75ef33b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2c0060e5d1e0a37001b93f36e9245bb75ef33b"}], "stats": {"total": 132, "additions": 108, "deletions": 24}, "files": [{"sha": "59fe28528380ba9a38b5c2016b1315deeb567b94", "filename": "gcc/testsuite/g++.target/xtensa/pr95571.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fxtensa%2Fpr95571.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fxtensa%2Fpr95571.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fxtensa%2Fpr95571.C?ref=1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+\n+extern \"C\" void abort(void);\n+extern \"C\" void __xtensa_libgcc_window_spill(void);\n+\n+static int call;\n+static int cnt;\n+\n+extern \"C\" void *memcpy(void *dst, const void *src, unsigned int sz)\n+{\n+  char *a = (char *)dst;\n+  const char *b = (const char *)src;\n+\n+  if (call++ == cnt)\n+    __xtensa_libgcc_window_spill();\n+\n+  while (sz--)\n+    *a++ = *b++;\n+\n+  return dst;\n+}\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < 100; ++i)\n+    {\n+      call = 0;\n+      cnt = i;\n+\n+      try\n+\t{\n+\t  throw 1;\n+\t}\n+      catch (int v)\n+\t{\n+\t  if (v != 1)\n+\t    abort ();\n+\t}\n+    }\n+  return 0;\n+}"}, {"sha": "f4191201d11f0fc6a92163ae84f9c83e8cb08749", "filename": "gcc/testsuite/g++.target/xtensa/xtensa.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fxtensa%2Fxtensa.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fxtensa%2Fxtensa.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fxtensa%2Fxtensa.exp?ref=1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "patch": "@@ -0,0 +1,43 @@\n+#  Specific regression driver for Xtensa.\n+#  Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an Xtensa target.\n+if {![istarget xtensa*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+        \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "8a6a44a8b685ae182227aa989bc9a4a6c0b7e9d5", "filename": "libgcc/config/xtensa/unwind-dw2-xtensa.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c?ref=1d9921cbdc732e1a7fc66b9c24a6dfa9625bd4c0", "patch": "@@ -481,37 +481,35 @@ uw_init_context_1 (struct _Unwind_Context *context, void *outer_cfa,\n \n /* Install TARGET into CURRENT so that we can return to it.  This is a\n    macro because __builtin_eh_return must be invoked in the context of\n-   our caller.  */\n+   our caller, and also because spilling registers of the caller before\n+   the context installation may result in reload of wrong register values\n+   after the context installation due to the change of the stack pointer\n+   in the base save area.  This spilling may be caused by an interrupt\n+   handler on baremetal host.  */\n \n-#define uw_install_context(CURRENT, TARGET, FRAMES)\t\t\t\t \\\n+#define uw_install_context(CURRENT, TARGET, FRAMES)\t\t\t \\\n   do\t\t\t\t\t\t\t\t\t \\\n     {\t\t\t\t\t\t\t\t\t \\\n-      long offset = uw_install_context_1 ((CURRENT), (TARGET));\t\t \\\n       void *handler = __builtin_frob_return_addr ((TARGET)->ra);\t \\\n-      __builtin_eh_return (offset, handler);\t\t\t\t \\\n+      long i;\t\t\t\t\t\t\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n+      /* The eh_return insn assumes a window size of 8, so don't bother\t \\\n+\t copying the save areas for registers a8-a15 since they won't be \\\n+\t reloaded.  */\t\t\t\t\t\t\t \\\n+      for (i = 0; i < 2; ++i)\t\t\t\t\t\t \\\n+\t{\t\t\t\t\t\t\t\t \\\n+\t  _Unwind_Word *c = (CURRENT)->reg[i];\t\t\t\t \\\n+\t  _Unwind_Word *t = (TARGET)->reg[i];\t\t\t\t \\\n+\t  int j;\t\t\t\t\t\t\t \\\n+\t\t\t\t\t\t\t\t\t \\\n+\t  if (t && c && t != c)\t\t\t\t\t\t \\\n+\t    for (j = 0; j < 4; ++j)\t\t\t\t\t \\\n+\t      *c++ = *t++;\t\t\t\t\t\t \\\n+\t}\t\t\t\t\t\t\t\t \\\n+      __builtin_eh_return (0, handler);\t\t\t\t\t \\\n     }\t\t\t\t\t\t\t\t\t \\\n   while (0)\n \n-static long\n-uw_install_context_1 (struct _Unwind_Context *current,\n-\t\t      struct _Unwind_Context *target)\n-{\n-  long i;\n-\n-  /* The eh_return insn assumes a window size of 8, so don't bother copying\n-     the save areas for registers a8-a15 since they won't be reloaded.  */\n-  for (i = 0; i < 2; ++i)\n-    {\n-      void *c = current->reg[i];\n-      void *t = target->reg[i];\n-\n-      if (t && c && t != c)\n-\tmemcpy (c, t, 4 * sizeof (_Unwind_Word));\n-    }\n-\n-  return 0;\n-}\n-\n static inline _Unwind_Ptr\n uw_identify_context (struct _Unwind_Context *context)\n {"}]}