{"sha": "6210ec61d92762184a7c53e4fa2c9e1e037251ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxMGVjNjFkOTI3NjIxODRhN2M1M2U0ZmEyYzllMWUwMzcyNTFlZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T19:00:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T19:00:05Z"}, "message": "modulo-sched.c: Use rtx_insn in various places\n\ngcc/\n\t* modulo-sched.c (struct ps_reg_move_info): Strengthen field\n\t\"insn\" from rtx to rtx_insn *.\n\t(ps_rtl_insn): Likewise for return type.\n\t(doloop_register_get): Likewise for params \"head\", \"tail\" and\n\tlocals \"insn\", \"first_insn_not_to_check\".\n\t(schedule_reg_move): Likewise for local \"this_insn\".\n\t(schedule_reg_moves): Add a checked cast to rtx_insn * to result\n\tof gen_move_insn for now.\n\t(reset_sched_times): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t(permute_partial_schedule): Likewise.\n\t(duplicate_insns_of_cycles): Likewise for local \"u_insn\".\n\t(dump_insn_location): Likewise for param \"insn\".\n\t(loop_canon_p): Likewise for local \"insn\".\n\t(sms_schedule): Likewise.\n\t(print_partial_schedule): Likewise.\n\t(ps_has_conflicts): Likewise.\n\nFrom-SVN: r214354", "tree": {"sha": "ce8391ce1981ef54a989fe4295573007547408d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce8391ce1981ef54a989fe4295573007547408d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6210ec61d92762184a7c53e4fa2c9e1e037251ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6210ec61d92762184a7c53e4fa2c9e1e037251ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6210ec61d92762184a7c53e4fa2c9e1e037251ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6210ec61d92762184a7c53e4fa2c9e1e037251ee/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cea83a3ac8124fd77a00b7090867beb4875aa482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea83a3ac8124fd77a00b7090867beb4875aa482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea83a3ac8124fd77a00b7090867beb4875aa482"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "4b6f5b0911fa71db24b259e0c50d3ffb20fa013d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6210ec61d92762184a7c53e4fa2c9e1e037251ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6210ec61d92762184a7c53e4fa2c9e1e037251ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6210ec61d92762184a7c53e4fa2c9e1e037251ee", "patch": "@@ -1,3 +1,23 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* modulo-sched.c (struct ps_reg_move_info): Strengthen field\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(ps_rtl_insn): Likewise for return type.\n+\t(doloop_register_get): Likewise for params \"head\", \"tail\" and\n+\tlocals \"insn\", \"first_insn_not_to_check\".\n+\t(schedule_reg_move): Likewise for local \"this_insn\".\n+\t(schedule_reg_moves): Add a checked cast to rtx_insn * to result\n+\tof gen_move_insn for now.\n+\t(reset_sched_times): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t(permute_partial_schedule): Likewise.\n+\t(duplicate_insns_of_cycles): Likewise for local \"u_insn\".\n+\t(dump_insn_location): Likewise for param \"insn\".\n+\t(loop_canon_p): Likewise for local \"insn\".\n+\t(sms_schedule): Likewise.\n+\t(print_partial_schedule): Likewise.\n+\t(ps_has_conflicts): Likewise.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sched-int.h (get_ebb_head_tail): Strengthen params \"headp\" and"}, {"sha": "ede57e220dc800845f27a9edfc91945ff4811d79", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6210ec61d92762184a7c53e4fa2c9e1e037251ee/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6210ec61d92762184a7c53e4fa2c9e1e037251ee/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=6210ec61d92762184a7c53e4fa2c9e1e037251ee", "patch": "@@ -155,7 +155,7 @@ struct ps_reg_move_info\n   /* An instruction that sets NEW_REG to the correct value.  The first\n      move associated with DEF will have an rhs of OLD_REG; later moves\n      use the result of the previous move.  */\n-  rtx insn;\n+  rtx_insn *insn;\n };\n \n typedef struct ps_reg_move_info ps_reg_move_info;\n@@ -305,7 +305,7 @@ ps_reg_move (partial_schedule_ptr ps, int id)\n \n /* Return the rtl instruction that is being scheduled by partial schedule\n    instruction ID, which belongs to schedule PS.  */\n-static rtx\n+static rtx_insn *\n ps_rtl_insn (partial_schedule_ptr ps, int id)\n {\n   if (id < ps->g->num_nodes)\n@@ -342,10 +342,11 @@ ps_num_consecutive_stages (partial_schedule_ptr ps, int id)\n    more than one occurrence in the loop besides the control part or the\n    do-loop pattern is not of the form we expect.  */\n static rtx\n-doloop_register_get (rtx head ATTRIBUTE_UNUSED, rtx tail ATTRIBUTE_UNUSED)\n+doloop_register_get (rtx_insn *head ATTRIBUTE_UNUSED, rtx_insn *tail ATTRIBUTE_UNUSED)\n {\n #ifdef HAVE_doloop_end\n-  rtx reg, condition, insn, first_insn_not_to_check;\n+  rtx reg, condition;\n+  rtx_insn *insn, *first_insn_not_to_check;\n \n   if (!JUMP_P (tail))\n     return NULL_RTX;\n@@ -552,7 +553,7 @@ schedule_reg_move (partial_schedule_ptr ps, int i_reg_move,\n   int start, end, c, ii;\n   sbitmap_iterator sbi;\n   ps_reg_move_info *move;\n-  rtx this_insn;\n+  rtx_insn *this_insn;\n   ps_insn_ptr psi;\n \n   move = ps_reg_move (ps, i_reg_move);\n@@ -758,7 +759,8 @@ schedule_reg_moves (partial_schedule_ptr ps)\n \t  move->old_reg = old_reg;\n \t  move->new_reg = gen_reg_rtx (GET_MODE (prev_reg));\n \t  move->num_consecutive_stages = distances[0] && distances[1] ? 2 : 1;\n-\t  move->insn = gen_move_insn (move->new_reg, copy_rtx (prev_reg));\n+\t  move->insn = as_a <rtx_insn *> (gen_move_insn (move->new_reg,\n+\t\t\t\t\t\t\t copy_rtx (prev_reg)));\n \t  bitmap_clear (move->uses);\n \n \t  prev_reg = move->new_reg;\n@@ -852,7 +854,7 @@ reset_sched_times (partial_schedule_ptr ps, int amount)\n         if (dump_file)\n           {\n             /* Print the scheduling times after the rotation.  */\n-\t    rtx insn = ps_rtl_insn (ps, u);\n+\t    rtx_insn *insn = ps_rtl_insn (ps, u);\n \n             fprintf (dump_file, \"crr_insn->node=%d (insn id %d), \"\n                      \"crr_insn->cycle=%d, min_cycle=%d\", u,\n@@ -883,7 +885,7 @@ permute_partial_schedule (partial_schedule_ptr ps, rtx last)\n   for (row = 0; row < ii ; row++)\n     for (ps_ij = ps->rows[row]; ps_ij; ps_ij = ps_ij->next_in_row)\n       {\n-\trtx insn = ps_rtl_insn (ps, ps_ij->id);\n+\trtx_insn *insn = ps_rtl_insn (ps, ps_ij->id);\n \n \tif (PREV_INSN (last) != insn)\n \t  {\n@@ -1105,7 +1107,7 @@ duplicate_insns_of_cycles (partial_schedule_ptr ps, int from_stage,\n       {\n \tint u = ps_ij->id;\n \tint first_u, last_u;\n-\trtx u_insn;\n+\trtx_insn *u_insn;\n \n         /* Do not duplicate any insn which refers to count_reg as it\n            belongs to the control part.\n@@ -1242,7 +1244,7 @@ loop_single_full_bb_p (struct loop *loop)\n /* Dump file:line from INSN's location info to dump_file.  */\n \n static void\n-dump_insn_location (rtx insn)\n+dump_insn_location (rtx_insn *insn)\n {\n   if (dump_file && INSN_HAS_LOCATION (insn))\n     {\n@@ -1274,7 +1276,7 @@ loop_canon_p (struct loop *loop)\n     {\n       if (dump_file)\n \t{\n-\t  rtx insn = BB_END (loop->header);\n+\t  rtx_insn *insn = BB_END (loop->header);\n \n \t  fprintf (dump_file, \"SMS loop many exits\");\n \t  dump_insn_location (insn);\n@@ -1287,7 +1289,7 @@ loop_canon_p (struct loop *loop)\n     {\n       if (dump_file)\n \t{\n-\t  rtx insn = BB_END (loop->header);\n+\t  rtx_insn *insn = BB_END (loop->header);\n \n \t  fprintf (dump_file, \"SMS loop many BBs.\");\n \t  dump_insn_location (insn);\n@@ -1349,7 +1351,7 @@ setup_sched_infos (void)\n static void\n sms_schedule (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   ddg_ptr *g_arr, g;\n   int * node_order;\n   int maxii, max_asap;\n@@ -1412,7 +1414,7 @@ sms_schedule (void)\n \n       if (dump_file)\n \t{\n-\t  rtx insn = BB_END (loop->header);\n+\t  rtx_insn *insn = BB_END (loop->header);\n \n \t  fprintf (dump_file, \"SMS loop num: %d\", loop->num);\n \t  dump_insn_location (insn);\n@@ -1547,7 +1549,7 @@ sms_schedule (void)\n \n       if (dump_file)\n \t{\n-\t  rtx insn = BB_END (loop->header);\n+\t  rtx_insn *insn = BB_END (loop->header);\n \n \t  fprintf (dump_file, \"SMS loop num: %d\", loop->num);\n \t  dump_insn_location (insn);\n@@ -2930,7 +2932,7 @@ print_partial_schedule (partial_schedule_ptr ps, FILE *dump)\n       fprintf (dump, \"\\n[ROW %d ]: \", i);\n       while (ps_i)\n \t{\n-\t  rtx insn = ps_rtl_insn (ps, ps_i->id);\n+\t  rtx_insn *insn = ps_rtl_insn (ps, ps_i->id);\n \n \t  if (JUMP_P (insn))\n \t    fprintf (dump, \"%d (branch), \", INSN_UID (insn));\n@@ -3192,7 +3194,7 @@ ps_has_conflicts (partial_schedule_ptr ps, int from, int to)\n \t   crr_insn;\n \t   crr_insn = crr_insn->next_in_row)\n \t{\n-\t  rtx insn = ps_rtl_insn (ps, crr_insn->id);\n+\t  rtx_insn *insn = ps_rtl_insn (ps, crr_insn->id);\n \n \t  if (!NONDEBUG_INSN_P (insn))\n \t    continue;"}]}