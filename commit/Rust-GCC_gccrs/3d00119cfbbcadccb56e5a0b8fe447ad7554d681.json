{"sha": "3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwMDExOWNmYmJjYWRjY2I1NmU1YTBiOGZlNDQ3YWQ3NTU0ZDY4MQ==", "commit": {"author": {"name": "Anthony Brandon", "email": "anthony.brandon@gmail.com", "date": "2014-11-11T23:33:25Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-11T23:33:25Z"}, "message": "re PR driver/36312 (should refuse to overwrite input file with output file)\n\ngcc/testsuite/ChangeLog:\n\n2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR driver/36312\n\t* gcc.misc-tests/output.exp: New test case for identical input and\n\toutput files.\n\ninclude/ChangeLog:\n\n2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR driver/36312\n\t* filenames.h: Add prototype for canonical_filename_eq.\n\ngcc/ChangeLog:\n\n2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR driver/36312\n\t* diagnostic-core.h: Add prototype for fatal_error.\n\t* diagnostic.c (fatal_error): New function fatal_error.\n\t* gcc.c (store_arg): Remove have_o_argbuf_index.\n\t(process_command): Check if input and output files are the same.\n\t* toplev.c (init_asm_output): Check if input and output files are\n\tthe same.\n\nlibiberty/ChangeLog:\n\n2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR driver/36312\n\t* filename_cmp.c (canonical_filename_eq): New function to check if\n\tfile names are the same.\n\t* functions.texi: Updated with documentation for new function.\n\nCo-Authored-By: Manuel L\u00f3pez-Ib\u00e1\u00f1ez <manu@gcc.gnu.org>\n\nFrom-SVN: r217391", "tree": {"sha": "d4db9e599db1d46abb0414b25660560c2823a504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4db9e599db1d46abb0414b25660560c2823a504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/comments", "author": {"login": "anarcobra", "id": 4075704, "node_id": "MDQ6VXNlcjQwNzU3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4075704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anarcobra", "html_url": "https://github.com/anarcobra", "followers_url": "https://api.github.com/users/anarcobra/followers", "following_url": "https://api.github.com/users/anarcobra/following{/other_user}", "gists_url": "https://api.github.com/users/anarcobra/gists{/gist_id}", "starred_url": "https://api.github.com/users/anarcobra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anarcobra/subscriptions", "organizations_url": "https://api.github.com/users/anarcobra/orgs", "repos_url": "https://api.github.com/users/anarcobra/repos", "events_url": "https://api.github.com/users/anarcobra/events{/privacy}", "received_events_url": "https://api.github.com/users/anarcobra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525"}], "stats": {"total": 198, "additions": 185, "deletions": 13}, "files": [{"sha": "5a637686e97057f3e9fa22c7aa2fb98bacae1840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -1,3 +1,14 @@\n+2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR driver/36312\n+\t* diagnostic-core.h: Add prototype for fatal_error.\n+\t* diagnostic.c (fatal_error): New function fatal_error.\n+\t* gcc.c (store_arg): Remove have_o_argbuf_index.\n+\t(process_command): Check if input and output files are the same.\n+\t* toplev.c (init_asm_output): Check if input and output files are\n+\tthe same.\n+\n 2014-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* reorg.c (fill_slots_from_thread): Do not copy frame-related insns."}, {"sha": "2fba279af966ff274f312674cd682485fc54cdd5", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -68,6 +68,8 @@ extern void error_n (location_t, int, const char *, const char *, ...)\n extern void error_at (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n+extern void fatal_error (location_t, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3)\n+     ATTRIBUTE_NORETURN;\n /* Pass one of the OPT_W* from options.h as the second parameter.  */\n extern bool pedwarn (location_t, int, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(3,4);"}, {"sha": "f7f8aaa23c07d5f604248aaf329f5aa47e4d4ebc", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -1163,6 +1163,23 @@ fatal_error (const char *gmsgid, ...)\n   gcc_unreachable ();\n }\n \n+/* An error which is severe enough that we make no attempt to\n+   continue.  Do not use this for internal consistency checks; that's\n+   internal_error.  Use of this function should be rare.  */\n+void\n+fatal_error (location_t loc, const char *gmsgid, ...)\n+{\n+  diagnostic_info diagnostic;\n+  va_list ap;\n+\n+  va_start (ap, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, loc, DK_FATAL);\n+  report_diagnostic (&diagnostic);\n+  va_end (ap);\n+\n+  gcc_unreachable ();\n+}\n+\n /* An internal consistency check has failed.  We make no attempt to\n    continue.  Note that unless there is debugging value to be had from\n    a more specific message, or some other good reason, you should use"}, {"sha": "7e6af22a7c3965936993f5b67759c26868f575f6", "filename": "gcc/gcc.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -1702,17 +1702,15 @@ typedef const char *const_char_p; /* For DEF_VEC_P.  */\n \n static vec<const_char_p> argbuf;\n \n-/* Position in the argbuf vector containing the name of the output file\n-   (the value associated with the \"-o\" flag).  */\n-\n-static int have_o_argbuf_index = 0;\n-\n /* Were the options -c, -S or -E passed.  */\n static int have_c = 0;\n \n /* Was the option -o passed.  */\n static int have_o = 0;\n \n+/* Pointer to output file name passed in with -o. */\n+static const char *output_file = 0;\n+\n /* This is the list of suffixes and codes (%g/%u/%U/%j) and the associated\n    temp file.  If the HOST_BIT_BUCKET is used for %j, no entry is made for\n    it here.  */\n@@ -1762,8 +1760,6 @@ store_arg (const char *arg, int delete_always, int delete_failure)\n {\n   argbuf.safe_push (arg);\n \n-  if (strcmp (arg, \"-o\") == 0)\n-    have_o_argbuf_index = argbuf.length ();\n   if (delete_always || delete_failure)\n     {\n       const char *p;\n@@ -3713,6 +3709,7 @@ driver_handle_option (struct gcc_options *opts,\n #if defined(HAVE_TARGET_EXECUTABLE_SUFFIX) || defined(HAVE_TARGET_OBJECT_SUFFIX)\n       arg = convert_filename (arg, ! have_c, 0);\n #endif\n+      output_file = arg;\n       /* Save the output name in case -save-temps=obj was used.  */\n       save_temps_prefix = xstrdup (arg);\n       /* On some systems, ld cannot handle \"-o\" without a space.  So\n@@ -4052,6 +4049,16 @@ process_command (unsigned int decoded_options_count,\n \t\t\t   CL_DRIVER, &handlers, global_dc);\n     }\n \n+  if (output_file && strcmp (output_file, \"-\"))\n+    {\n+      int i;\n+      for (i = 0; i < n_infiles; i++)\n+\tif ((!infiles[i].language || infiles[i].language[0] != '*')\n+\t    && canonical_filename_eq (infiles[i].name, output_file))\n+\t  fatal_error (\"input file %qs is the same as output file\",\n+\t\t       output_file);\n+    }\n+\n   /* If -save-temps=obj and -o name, create the prefix to use for %b.\n      Otherwise just make -save-temps=obj the same as -save-temps=cwd.  */\n   if (save_temps_flag == SAVE_TEMPS_OBJ && save_temps_prefix != NULL)"}, {"sha": "55511f5aa465df0648c15b0b400e74987aaab425", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -1,3 +1,10 @@\n+2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR driver/36312\n+\t* gcc.misc-tests/output.exp: New test case for identical input and\n+\toutput files.\n+\n 2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/44054"}, {"sha": "6a810df4c6173a3fb4d85afef1a6db14754bfc01", "filename": "gcc/testsuite/gcc.misc-tests/output.exp", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutput.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutput.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutput.exp?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -0,0 +1,66 @@\n+# Copyright (C) 2005-2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Run GCC with the input file also specified as output file. Check that the\n+# compiler prints an error message and does not overwrite the input file.\n+\n+load_lib gcc-defs.exp\n+load_lib target-supports.exp\n+\n+# These tests don't run runtest_file_p consistently if it\n+# doesn't return the same values, so disable parallelization\n+# of this *.exp file.  The first parallel runtest to reach\n+# this will run all the tests serially.\n+if ![gcc_parallel_test_run_p output] {\n+    return\n+}\n+\n+# I'm not sure if this is needed here. It was in options.exp.\n+gcc_parallel_test_enable 0\n+\n+proc check_gcc_overwrite_input {} {\n+    set filename test-[pid]\n+    set fd [open $filename.c w]\n+    puts $fd \"int main (void) \\{ return 0; \\}\"\n+    close $fd\n+    remote_download host $filename.c\n+    set test \"input overwrite test\"\n+    set compiler cc1\n+    set gcc_output [gcc_target_compile $filename.c $filename.c executable \"\"]\n+    \n+    # Is this right, or do I need to use something like remote_upload?\n+    set fd [open $filename.c r]\n+    set file_data [read $fd]\n+    close $fd\n+    remote_file build delete $filename.c\n+\n+    # check if the contents of the input file has changed\n+    if {!($file_data eq \"int main (void) \\{ return 0; \\}\\n\")} {\n+\tfail \"$test (input overwritten)\"\n+\treturn\n+    }\n+    \n+    # check if the error message was printed\n+    if {![regexp -- \"same as output\" $gcc_output]} {\n+\tfail \"$test (no error printed)\"\n+\treturn\n+    }\n+    pass $test\n+}\n+\n+check_gcc_overwrite_input\n+\n+gcc_parallel_test_enable 1"}, {"sha": "aa1653e7c445982256b0026010549ef81322419e", "filename": "gcc/toplev.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -942,10 +942,17 @@ init_asm_output (const char *name)\n \t}\n       if (!strcmp (asm_file_name, \"-\"))\n \tasm_out_file = stdout;\n-      else\n+      else if (!canonical_filename_eq (asm_file_name, name))\n \tasm_out_file = fopen (asm_file_name, \"w\");\n+      else\n+\t/* Use fatal_error (UNKOWN_LOCATION) instead of just fatal_error to\n+\t   prevent gcc from printing the first line in the current file. */\n+\tfatal_error (UNKNOWN_LOCATION,\n+\t\t     \"input file %qs is the same as output file\",\n+\t\t     asm_file_name);\n       if (asm_out_file == 0)\n-\tfatal_error (\"can%'t open %s for writing: %m\", asm_file_name);\n+\tfatal_error (UNKNOWN_LOCATION,\n+\t\t     \"can%'t open %qs for writing: %m\", asm_file_name);\n     }\n \n   if (!flag_syntax_only)"}, {"sha": "d9cb8a0c4f5d9a0584300f8a7d58c93db98253ca", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -1,3 +1,9 @@\n+2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR driver/36312\n+\t* filenames.h: Add prototype for canonical_filename_eq.\n+\n 2014-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ChangeLog.jit: New."}, {"sha": "470c5e091abc10588a4ed5166a19751b54653e5f", "filename": "include/filenames.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/include%2Ffilenames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/include%2Ffilenames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffilenames.h?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -90,6 +90,8 @@ extern hashval_t filename_hash (const void *s);\n \n extern int filename_eq (const void *s1, const void *s2);\n \n+extern int canonical_filename_eq (const char *a, const char *b);\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "98a7c5b34bcedc5b0c24f4ca2093b93f5fc3d7a3", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -1,3 +1,11 @@\n+2014-11-11  Anthony Brandon  <anthony.brandon@gmail.com>\n+\t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR driver/36312\n+\t* filename_cmp.c (canonical_filename_eq): New function to check if\n+\tfile names are the same.\n+\t* functions.texi: Updated with documentation for new function.\n+\n 2014-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ChangeLog.jit: New."}, {"sha": "150488cbab1cc6011ea3c2f0371b2c52caae9d40", "filename": "libiberty/filename_cmp.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/libiberty%2Ffilename_cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/libiberty%2Ffilename_cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffilename_cmp.c?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -24,8 +24,13 @@\n #include <string.h>\n #endif\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include \"filenames.h\"\n #include \"safe-ctype.h\"\n+#include \"libiberty.h\"\n \n /*\n \n@@ -190,3 +195,27 @@ filename_eq (const void *s1, const void *s2)\n   /* The casts are for -Wc++-compat.  */\n   return filename_cmp ((const char *) s1, (const char *) s2) == 0;\n }\n+\n+/*\n+\n+@deftypefn Extension int canonical_filename_eq (const char *@var{a}, const char *@var{b})\n+\n+Return non-zero if file names @var{a} and @var{b} are equivalent.\n+This function compares the canonical versions of the filenames as returned by\n+@code{lrealpath()}, so that so that different file names pointing to the same\n+underlying file are treated as being identical.\n+\n+@end deftypefn\n+\n+*/\n+\n+int\n+canonical_filename_eq (const char * a, const char * b)\n+{\n+  char * ca = lrealpath(a);\n+  char * cb = lrealpath(b);\n+  int res = filename_eq (ca, cb);\n+  free (ca);\n+  free (cb);\n+  return res;\n+}"}, {"sha": "9ed9ff034381442de420f5c9a5604ee1fbe0be93", "filename": "libiberty/functions.texi", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d00119cfbbcadccb56e5a0b8fe447ad7554d681/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=3d00119cfbbcadccb56e5a0b8fe447ad7554d681", "patch": "@@ -125,6 +125,16 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n \n @end deftypefn\n \n+@c filename_cmp.c:201\n+@deftypefn Extension int canonical_filename_eq (const char *@var{a}, const char *@var{b})\n+\n+Return non-zero if file names @var{a} and @var{b} are equivalent.\n+This function compares the canonical versions of the filenames as returned by\n+@code{lrealpath()}, so that so that different file names pointing to the same\n+underlying file are treated as being identical.\n+\n+@end deftypefn\n+\n @c choose-temp.c:45\n @deftypefn Extension char* choose_temp_base (void)\n \n@@ -286,7 +296,7 @@ value 1).  If @var{valu} is zero, zero is returned.\n \n @end deftypefn\n \n-@c filename_cmp.c:32\n+@c filename_cmp.c:37\n @deftypefn Extension int filename_cmp (const char *@var{s1}, const char *@var{s2})\n \n Return zero if the two file names @var{s1} and @var{s2} are equivalent.\n@@ -303,15 +313,15 @@ and backward slashes are equal.\n \n @end deftypefn\n \n-@c filename_cmp.c:178\n+@c filename_cmp.c:183\n @deftypefn Extension int filename_eq (const void *@var{s1}, const void *@var{s2})\n \n Return non-zero if file names @var{s1} and @var{s2} are equivalent.\n This function is for use with hashtab.c hash tables.\n \n @end deftypefn\n \n-@c filename_cmp.c:147\n+@c filename_cmp.c:152\n @deftypefn Extension hashval_t filename_hash (const void *@var{s})\n \n Return the hash value for file name @var{s} that will be compared\n@@ -320,7 +330,7 @@ This function is for use with hashtab.c hash tables.\n \n @end deftypefn\n \n-@c filename_cmp.c:89\n+@c filename_cmp.c:94\n @deftypefn Extension int filename_ncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n \n Return zero if the two file names @var{s1} and @var{s2} are equivalent"}]}