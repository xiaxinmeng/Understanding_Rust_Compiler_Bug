{"sha": "d11be094c716885475a4a1562a967e4a127ecece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExYmUwOTRjNzE2ODg1NDc1YTRhMTU2MmE5NjdlNGExMjdlY2VjZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-17T15:10:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-17T15:10:48Z"}, "message": "re PR tree-optimization/87546 (Gcc miscompiles at -O3 on valid code)\n\n\tPR tree-optimization/87546\n\t* tree-vect-patterns.c (vect_look_through_possible_promotion): Add\n\tmin_precision variable, initially set it to orig_precision, only does\n\tsomething if op_type's precision is <= min_precision and update\n\tmin_precision whenever calling set_op.\n\n\t* gcc.dg/vect/O3-pr87546.c: New test.\n\nFrom-SVN: r266237", "tree": {"sha": "7abff9ebdb6092dccec9a861100cecddbbf1f9ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7abff9ebdb6092dccec9a861100cecddbbf1f9ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d11be094c716885475a4a1562a967e4a127ecece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11be094c716885475a4a1562a967e4a127ecece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d11be094c716885475a4a1562a967e4a127ecece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11be094c716885475a4a1562a967e4a127ecece/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e14aba114fb0199d12b06934d9e9af8252cce1c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14aba114fb0199d12b06934d9e9af8252cce1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14aba114fb0199d12b06934d9e9af8252cce1c2"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "3392f8f498a0e7b50dd98c63c004a5ea4563c873", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11be094c716885475a4a1562a967e4a127ecece/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11be094c716885475a4a1562a967e4a127ecece/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d11be094c716885475a4a1562a967e4a127ecece", "patch": "@@ -1,3 +1,11 @@\n+2018-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/87546\n+\t* tree-vect-patterns.c (vect_look_through_possible_promotion): Add\n+\tmin_precision variable, initially set it to orig_precision, only does\n+\tsomething if op_type's precision is <= min_precision and update\n+\tmin_precision whenever calling set_op.\n+\n 2018-11-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/87957"}, {"sha": "30386c6fa8949c999316213ca22d593e29353ccb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11be094c716885475a4a1562a967e4a127ecece/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11be094c716885475a4a1562a967e4a127ecece/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d11be094c716885475a4a1562a967e4a127ecece", "patch": "@@ -1,3 +1,8 @@\n+2018-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/87546\n+\t* gcc.dg/vect/O3-pr87546.c: New test.\n+\n 2018-11-17  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \tPR middle-end/87854"}, {"sha": "0d3b71474c50a0ceadb4a64723f1dd88ebbf2420", "filename": "gcc/testsuite/gcc.dg/vect/O3-pr87546.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11be094c716885475a4a1562a967e4a127ecece/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr87546.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11be094c716885475a4a1562a967e4a127ecece/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr87546.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr87546.c?ref=d11be094c716885475a4a1562a967e4a127ecece", "patch": "@@ -0,0 +1,29 @@\n+#include \"tree-vect.h\"\n+\n+int a;\n+long b, f;\n+signed char c, g;\n+short int d = 219;\n+int e[64];\n+\n+__attribute__((noipa)) void\n+foo (void)\n+{\n+  asm volatile (\"\" : : \"g\" (&a), \"g\" (&d) : \"memory\");\n+  for (c = 0; c < 64; c++)\n+    {\n+      g = d < 0 ? d : d >> a;\n+      f = g + b;\n+      e[c] = f;\n+    }\n+  if (e[1] != (signed char) d)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+  foo ();\n+  return 0;\n+}"}, {"sha": "2b56d85afc5962df3939befb40f7d81bc121ef7b", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11be094c716885475a4a1562a967e4a127ecece/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11be094c716885475a4a1562a967e4a127ecece/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=d11be094c716885475a4a1562a967e4a127ecece", "patch": "@@ -367,6 +367,7 @@ vect_look_through_possible_promotion (vec_info *vinfo, tree op,\n   tree res = NULL_TREE;\n   tree op_type = TREE_TYPE (op);\n   unsigned int orig_precision = TYPE_PRECISION (op_type);\n+  unsigned int min_precision = orig_precision;\n   stmt_vec_info caster = NULL;\n   while (TREE_CODE (op) == SSA_NAME && INTEGRAL_TYPE_P (op_type))\n     {\n@@ -385,15 +386,18 @@ vect_look_through_possible_promotion (vec_info *vinfo, tree op,\n \t This copes with cases such as the result of an arithmetic\n \t operation being truncated before being stored, and where that\n \t arithmetic operation has been recognized as an over-widened one.  */\n-      if (TYPE_PRECISION (op_type) <= orig_precision)\n+      if (TYPE_PRECISION (op_type) <= min_precision)\n \t{\n \t  /* Use OP as the UNPROM described above if we haven't yet\n \t     found a promotion, or if using the new input preserves the\n \t     sign of the previous promotion.  */\n \t  if (!res\n \t      || TYPE_PRECISION (unprom->type) == orig_precision\n \t      || TYPE_SIGN (unprom->type) == TYPE_SIGN (op_type))\n-\t    unprom->set_op (op, dt, caster);\n+\t    {\n+\t      unprom->set_op (op, dt, caster);\n+\t      min_precision = TYPE_PRECISION (op_type);\n+\t    }\n \t  /* Stop if we've already seen a promotion and if this\n \t     conversion does more than change the sign.  */\n \t  else if (TYPE_PRECISION (op_type)"}]}