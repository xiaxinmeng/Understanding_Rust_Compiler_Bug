{"sha": "fff6ed28b29e9fff2026ee79446f2e565ef63806", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmNmVkMjhiMjllOWZmZjIwMjZlZTc5NDQ2ZjJlNTY1ZWY2MzgwNg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-11-04T18:15:30Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-11-04T18:15:30Z"}, "message": "rs6000.c (gimple-ssa.h): New #include.\n\n[gcc]\n\n2016-11-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (gimple-ssa.h): New #include.\n\t(TARGET_GIMPLE_FOLD_BUILTIN): Define as\n\trs6000_gimple_fold_builtin.\n\t(rs6000_gimple_fold_builtin): New function.  Add handling for\n\tearly expansion of vector addition builtins.\n\n\n[gcc/testsuite]\n\n2016-11-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-add-1.c: New.\n\t* gcc.target/powerpc/fold-vec-add-2.c: New.\n\t* gcc.target/powerpc/fold-vec-add-3.c: New.\n\t* gcc.target/powerpc/fold-vec-add-4.c: New.\n\t* gcc.target/powerpc/fold-vec-add-5.c: New.\n\t* gcc.target/powerpc/fold-vec-add-6.c: New.\n\t* gcc.target/powerpc/fold-vec-add-7.c: New.\n\nFrom-SVN: r241857", "tree": {"sha": "007dfb6d606b01fe8fd0fec1600f42d895f74e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/007dfb6d606b01fe8fd0fec1600f42d895f74e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fff6ed28b29e9fff2026ee79446f2e565ef63806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff6ed28b29e9fff2026ee79446f2e565ef63806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff6ed28b29e9fff2026ee79446f2e565ef63806", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff6ed28b29e9fff2026ee79446f2e565ef63806/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b53f8c22f0ae2d594d46438e21ab83d7d755d7f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53f8c22f0ae2d594d46438e21ab83d7d755d7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53f8c22f0ae2d594d46438e21ab83d7d755d7f1"}], "stats": {"total": 300, "additions": 300, "deletions": 0}, "files": [{"sha": "d062157ab7adf2b5d394b1bed4bd8dcdf1801bf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -1,3 +1,11 @@\n+2016-11-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (gimple-ssa.h): New #include.\n+\t(TARGET_GIMPLE_FOLD_BUILTIN): Define as\n+\trs6000_gimple_fold_builtin.\n+\t(rs6000_gimple_fold_builtin): New function.  Add handling for\n+\tearly expansion of vector addition builtins.\n+\n 2016-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expr.h (copy_blkmode_from_reg): Delete."}, {"sha": "b0d2b6430a650fd174903ca57b0e3c3ee4463f6c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -56,6 +56,7 @@\n #include \"sched-int.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimple-ssa.h\"\n #include \"gimple-walk.h\"\n #include \"intl.h\"\n #include \"params.h\"\n@@ -1632,6 +1633,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_FOLD_BUILTIN\n #define TARGET_FOLD_BUILTIN rs6000_fold_builtin\n+#undef TARGET_GIMPLE_FOLD_BUILTIN\n+#define TARGET_GIMPLE_FOLD_BUILTIN rs6000_gimple_fold_builtin\n \n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n@@ -16391,6 +16394,46 @@ rs6000_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* Fold a machine-dependent built-in in GIMPLE.  (For folding into\n+   a constant, use rs6000_fold_builtin.)  */\n+\n+bool\n+rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n+{\n+  gimple *stmt = gsi_stmt (*gsi);\n+  tree fndecl = gimple_call_fndecl (stmt);\n+  gcc_checking_assert (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD);\n+  enum rs6000_builtins fn_code\n+    = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+  tree arg0, arg1, lhs;\n+\n+  switch (fn_code)\n+    {\n+    /* Flavors of vec_add.  We deliberately don't expand\n+       P8V_BUILTIN_VADDUQM as it gets lowered from V1TImode to\n+       TImode, resulting in much poorer code generation.  */\n+    case ALTIVEC_BUILTIN_VADDUBM:\n+    case ALTIVEC_BUILTIN_VADDUHM:\n+    case ALTIVEC_BUILTIN_VADDUWM:\n+    case P8V_BUILTIN_VADDUDM:\n+    case ALTIVEC_BUILTIN_VADDFP:\n+    case VSX_BUILTIN_XVADDDP:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, PLUS_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient)."}, {"sha": "910b8d2f5f3a709d6bf9592274d2a5487db1ea7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -1,3 +1,13 @@\n+2016-11-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-add-1.c: New.\n+\t* gcc.target/powerpc/fold-vec-add-2.c: New.\n+\t* gcc.target/powerpc/fold-vec-add-3.c: New.\n+\t* gcc.target/powerpc/fold-vec-add-4.c: New.\n+\t* gcc.target/powerpc/fold-vec-add-5.c: New.\n+\t* gcc.target/powerpc/fold-vec-add-6.c: New.\n+\t* gcc.target/powerpc/fold-vec-add-7.c: New.\n+\n 2016-11-04  Toma Tabacu  <toma.tabacu@imgtec.com>\n \n \t* gcc.target/mips/mips.exp (mips-dg-options): Downgrade to R5"}, {"sha": "7ca29845c58fd6b8efa06ba5f50220cf2c3f961d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-1.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,45 @@\n+/* Verify that overloaded built-ins for vec_add with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+test1 (vector bool char x, vector signed char y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed char\n+test2 (vector signed char x, vector bool char y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed char\n+test3 (vector signed char x, vector signed char y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned char\n+test4 (vector bool char x, vector unsigned char y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned char\n+test5 (vector unsigned char x, vector bool char y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned char\n+test6 (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddubm\" 6 } } */"}, {"sha": "0596604e2f814b84966aa9635aca3df2da9564db", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-2.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,45 @@\n+/* Verify that overloaded built-ins for vec_add with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test1 (vector bool short x, vector signed short y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed short\n+test2 (vector signed short x, vector bool short y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed short\n+test3 (vector signed short x, vector signed short y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned short\n+test4 (vector bool short x, vector unsigned short y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned short\n+test5 (vector unsigned short x, vector bool short y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned short\n+test6 (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadduhm\" 6 } } */"}, {"sha": "aa5f2dafd2aa51a946415aa6f3f016431faaa075", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-3.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,45 @@\n+/* Verify that overloaded built-ins for vec_add with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector bool int x, vector signed int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed int\n+test2 (vector signed int x, vector bool int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed int\n+test3 (vector signed int x, vector signed int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned int\n+test4 (vector bool int x, vector unsigned int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned int\n+test5 (vector unsigned int x, vector bool int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned int\n+test6 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadduwm\" 6 } } */"}, {"sha": "c1e73915fc35dc82c059e34344239ffc5b8c79f9", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-4.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-4.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,45 @@\n+/* Verify that overloaded built-ins for vec_add with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test1 (vector bool long long x, vector signed long long y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed long long\n+test2 (vector signed long long x, vector bool long long y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector signed long long\n+test3 (vector signed long long x, vector signed long long y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned long long\n+test4 (vector bool long long x, vector unsigned long long y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned long long\n+test5 (vector unsigned long long x, vector bool long long y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned long long\n+test6 (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddudm\" 6 } } */"}, {"sha": "2e2088ebfd46ce1f4f64164ea05981129255d67e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-5.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that overloaded built-ins for vec_add with float\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-additional-options \"-mno-vsx\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddfp\" 1 } } */"}, {"sha": "6c14fd86a58bdc91cb6aeff9e789100328c6f3fe", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-6.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_add with float and\n+   double inputs for VSX produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector double\n+test2 (vector double x, vector double y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xvaddsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvadddp\" 1 } } */"}, {"sha": "af9b39ea4685c353a7bf6042442673700a04b93e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-add-7.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6ed28b29e9fff2026ee79446f2e565ef63806/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-add-7.c?ref=fff6ed28b29e9fff2026ee79446f2e565ef63806", "patch": "@@ -0,0 +1,21 @@\n+/* Verify that overloaded built-ins for vec_add with __int128\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+\n+#include \"altivec.h\"\n+\n+vector signed __int128\n+test1 (vector signed __int128 x, vector signed __int128 y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+vector unsigned __int128\n+test2 (vector unsigned __int128 x, vector unsigned __int128 y)\n+{\n+  return vec_add (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadduqm\" 2 } } */"}]}