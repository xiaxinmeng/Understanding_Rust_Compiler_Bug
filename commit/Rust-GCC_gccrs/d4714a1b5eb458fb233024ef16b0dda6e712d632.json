{"sha": "d4714a1b5eb458fb233024ef16b0dda6e712d632", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ3MTRhMWI1ZWI0NThmYjIzMzAyNGVmMTZiMGRkYTZlNzEyZDYzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-08-27T18:36:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-08-27T18:36:23Z"}, "message": "re PR c++/86993 (assignment of read-only variable error reported at wrong location)\n\n\tPR c++/86993\n\t* cp-tree.h (cxx_readonly_error): Add location_t argument.\n\t* typeck2.c (cxx_readonly_error): Add LOC argument, pass it to\n\tERROR_FOR_ASSIGNMENT macro and readonly_error.  Add LOC argument\n\tto ERROR_FOR_ASSIGNMENT macro, use error_at instead of error and\n\tpass LOC to it.  Formatting fixes.\n\t* typeck.c (cp_build_unary_op): Pass location to cxx_readonly_error.\n\t(cp_build_modify_expr): Pass loc to cxx_readonly_error.\n\t* semantics.c (finish_asm_stmt): Pass input_location to\n\tcxx_readonly_error.\n\n\t* g++.dg/diagnostic/pr86993.C: New test.\n\nFrom-SVN: r263891", "tree": {"sha": "fb626b754e6fe9c953cc0a29d697d46263f2b18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb626b754e6fe9c953cc0a29d697d46263f2b18d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4714a1b5eb458fb233024ef16b0dda6e712d632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4714a1b5eb458fb233024ef16b0dda6e712d632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4714a1b5eb458fb233024ef16b0dda6e712d632", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4714a1b5eb458fb233024ef16b0dda6e712d632/comments", "author": null, "committer": null, "parents": [{"sha": "a9cf35bf3e9b753710f3a443f6e4095a2840c7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9cf35bf3e9b753710f3a443f6e4095a2840c7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9cf35bf3e9b753710f3a443f6e4095a2840c7b6"}], "stats": {"total": 104, "additions": 65, "deletions": 39}, "files": [{"sha": "ac46b7422bcac01f799ad9ece01e699755fb33e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -16,7 +16,7 @@\n \n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* diagnostic-show-locus.c (class layout_range): Update for\n \tconversion of show_caret_p to a tri-state.\n \t(layout_range::layout_range): Likewise.\n@@ -44,7 +44,7 @@\n \n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* diagnostic-show-locus.c (get_line_span_for_fixit_hint): Show the\n \tline above for line-insertion fix-it hints.\n \t(selftest::test_fixit_insert_containing_newline): Update the\n@@ -369,7 +369,7 @@\n \n 2018-08-24  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* diagnostic-show-locus.c (layout::layout): Ensure the margin is\n \twide enough for jumps in the line-numbering to be visible.\n \t(layout::print_gap_in_line_numbering): New member function."}, {"sha": "c45947794ead9cc1e05fffccca1dfaef397d58b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -1,6 +1,19 @@\n+2018-08-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/86993\n+\t* cp-tree.h (cxx_readonly_error): Add location_t argument.\n+\t* typeck2.c (cxx_readonly_error): Add LOC argument, pass it to\n+\tERROR_FOR_ASSIGNMENT macro and readonly_error.  Add LOC argument\n+\tto ERROR_FOR_ASSIGNMENT macro, use error_at instead of error and\n+\tpass LOC to it.  Formatting fixes.\n+\t* typeck.c (cp_build_unary_op): Pass location to cxx_readonly_error.\n+\t(cp_build_modify_expr): Pass loc to cxx_readonly_error.\n+\t* semantics.c (finish_asm_stmt): Pass input_location to\n+\tcxx_readonly_error.\n+\n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* decl.c (grokdeclarator): Update for conversion of show_caret_p\n \tto a tri-state.\n \t* error.c (cp_printer): Likewise."}, {"sha": "43e452cc1a3e3ddad89caa8a493b6c4ab75e0368", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -7388,7 +7388,8 @@ cxx_incomplete_type_error (const_tree value, const_tree type)\n extern void cxx_incomplete_type_inform \t        (const_tree);\n extern tree error_not_base_type\t\t\t(tree, tree);\n extern tree binfo_or_else\t\t\t(tree, tree);\n-extern void cxx_readonly_error\t\t\t(tree, enum lvalue_use);\n+extern void cxx_readonly_error\t\t\t(location_t, tree,\n+\t\t\t\t\t\t enum lvalue_use);\n extern void complete_type_check_abstract\t(tree);\n extern int abstract_virtuals_error\t\t(tree, tree);\n extern int abstract_virtuals_error\t\t(abstract_class_use, tree);"}, {"sha": "676de0118687ac29506eef45df0c89cd9d7ebfa3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -1532,7 +1532,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t     effectively const.  */\n \t\t  || (CLASS_TYPE_P (TREE_TYPE (operand))\n \t\t      && C_TYPE_FIELDS_READONLY (TREE_TYPE (operand)))))\n-\t    cxx_readonly_error (operand, lv_asm);\n+\t    cxx_readonly_error (input_location, operand, lv_asm);\n \n \t  tree *op = &operand;\n \t  while (TREE_CODE (*op) == COMPOUND_EXPR)"}, {"sha": "ab088a946b344c5df31139dabb3b7e96cfac3b2d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -6228,9 +6228,10 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t  || TREE_READONLY (arg)) \n         {\n           if (complain & tf_error)\n-            cxx_readonly_error (arg, ((code == PREINCREMENT_EXPR\n-\t\t\t\t      || code == POSTINCREMENT_EXPR)\n-\t\t\t\t     ? lv_increment : lv_decrement));\n+\t    cxx_readonly_error (location, arg,\n+\t\t\t\t((code == PREINCREMENT_EXPR\n+\t\t\t\t  || code == POSTINCREMENT_EXPR)\n+\t\t\t\t ? lv_increment : lv_decrement));\n           else\n             return error_mark_node;\n         }\n@@ -8159,7 +8160,7 @@ cp_build_modify_expr (location_t loc, tree lhs, enum tree_code modifycode,\n \t      && C_TYPE_FIELDS_READONLY (lhstype))))\n     {\n       if (complain & tf_error)\n-\tcxx_readonly_error (lhs, lv_assign);\n+\tcxx_readonly_error (loc, lhs, lv_assign);\n       return error_mark_node;\n     }\n "}, {"sha": "71fbff167a5b9cac747af3dca01d3b66660669d0", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -67,28 +67,28 @@ binfo_or_else (tree base, tree type)\n    value may not be changed thereafter.  */\n \n void\n-cxx_readonly_error (tree arg, enum lvalue_use errstring)\n+cxx_readonly_error (location_t loc, tree arg, enum lvalue_use errstring)\n {\n  \n /* This macro is used to emit diagnostics to ensure that all format\n    strings are complete sentences, visible to gettext and checked at\n    compile time.  */\n  \n-#define ERROR_FOR_ASSIGNMENT(AS, ASM, IN, DE, ARG)                      \\\n+#define ERROR_FOR_ASSIGNMENT(LOC, AS, ASM, IN, DE, ARG)\t\t\t\\\n   do {                                                                  \\\n     switch (errstring)                                                  \\\n       {                                                                 \\\n       case lv_assign:\t\t\t\t\t\t\t\\\n-        error(AS, ARG);                                                 \\\n+\terror_at (LOC, AS, ARG);\t\t\t\t\t\\\n         break;                                                          \\\n       case lv_asm:\t\t\t\t\t\t\t\\\n-        error(ASM, ARG);                                                \\\n+\terror_at (LOC, ASM, ARG);\t\t\t\t\t\\\n         break;                                                          \\\n       case lv_increment:\t\t\t\t\t\t\\\n-        error (IN, ARG);                                                \\\n+\terror_at (LOC, IN, ARG);\t\t\t\t\t\\\n         break;                                                          \\\n-      case lv_decrement:                                               \\\n-        error (DE, ARG);                                                \\\n+      case lv_decrement:                                                \\\n+\terror_at (LOC, DE, ARG);\t\t\t\t\t\\\n         break;                                                          \\\n       default:                                                          \\\n         gcc_unreachable ();                                             \\\n@@ -101,32 +101,25 @@ cxx_readonly_error (tree arg, enum lvalue_use errstring)\n       && DECL_LANG_SPECIFIC (arg)\n       && DECL_IN_AGGR_P (arg)\n       && !TREE_STATIC (arg))\n-    ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-\t\t\t     \"constant field %qD\"),\n-\t\t\t  G_(\"constant field %qD \"\n-\t\t\t     \"used as %<asm%> output\"),\n-\t\t\t  G_(\"increment of \"\n-\t\t\t     \"constant field %qD\"),\n-\t\t\t  G_(\"decrement of \"\n-\t\t\t     \"constant field %qD\"),\n+    ERROR_FOR_ASSIGNMENT (loc,\n+\t\t\t  G_(\"assignment of constant field %qD\"),\n+\t\t\t  G_(\"constant field %qD used as %<asm%> output\"),\n+\t\t\t  G_(\"increment of constant field %qD\"),\n+\t\t\t  G_(\"decrement of constant field %qD\"),\n \t\t\t  arg);\n   else if (INDIRECT_REF_P (arg)\n \t   && TYPE_REF_P (TREE_TYPE (TREE_OPERAND (arg, 0)))\n \t   && (VAR_P (TREE_OPERAND (arg, 0))\n \t       || TREE_CODE (TREE_OPERAND (arg, 0)) == PARM_DECL))\n-    ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                             \"read-only reference %qD\"),\n-                          G_(\"read-only reference %qD \"\n-\t\t\t     \"used as %<asm%> output\"), \n-                          G_(\"increment of \"\n-                             \"read-only reference %qD\"),\n-                          G_(\"decrement of \"\n-                             \"read-only reference %qD\"),\n-                          TREE_OPERAND (arg, 0));\n+    ERROR_FOR_ASSIGNMENT (loc,\n+\t\t\t  G_(\"assignment of read-only reference %qD\"),\n+\t\t\t  G_(\"read-only reference %qD used as %<asm%> output\"),\n+\t\t\t  G_(\"increment of read-only reference %qD\"),\n+\t\t\t  G_(\"decrement of read-only reference %qD\"),\n+\t\t\t  TREE_OPERAND (arg, 0));\n   else\n-    readonly_error (input_location, arg, errstring);\n+    readonly_error (loc, arg, errstring);\n }\n-\n \f\n /* Structure that holds information about declarations whose type was\n    incomplete and we could not check whether it was abstract or not.  */"}, {"sha": "824372c346a6ecc04897807f9ee800851cf9498e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -1,11 +1,16 @@\n+2018-08-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/86993\n+\t* g++.dg/diagnostic/pr86993.C: New test.\n+\n 2018-08-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86927\n \t* gcc.dg/vect/pr86927.c: New testcase.\n \n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* gcc.dg/empty.h: New file.\n \t* gcc.dg/fixits-pr84852-1.c: Update for move of fix-it hint to\n \ttop of file and removal of redundant second printing of warning\n@@ -18,7 +23,7 @@\n \n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* g++.dg/pr85523.C: Extend expected output to show line\n \tbefore line-insertion fix-it hint.\n \t* gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c\n@@ -88,7 +93,7 @@\n \n 2018-08-24  David Malcolm  <dmalcolm@redhat.com>\n \n-\tPR 87091\n+\tPR c++/87091\n \t* gcc.dg/missing-header-fixit-3.c: Update for changes to how\n \tline spans are printed with -fdiagnostics-show-line-numbers.\n "}, {"sha": "313a489ae865ecb68d1a6e18214cd6eecdaca9a0", "filename": "gcc/testsuite/g++.dg/diagnostic/pr86993.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr86993.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4714a1b5eb458fb233024ef16b0dda6e712d632/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr86993.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr86993.C?ref=d4714a1b5eb458fb233024ef16b0dda6e712d632", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/86993\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+int\n+main ()\n+{\n+  const int i = 5;\t// { dg-error \"assignment of read-only variable 'i'\" \"\" { target *-*-* } .+1 }\n+  i = 5 + 6;\n+/* { dg-begin-multiline-output \"\" }\n+   i = 5 + 6;\n+   ~~^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}"}]}