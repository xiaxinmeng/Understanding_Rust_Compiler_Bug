{"sha": "0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhNGUzNTE1MzdmZTZiZjI1M2UxM2UzYzNlN2IxMjJjYmU5NDY4Yw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2011-03-30T18:21:25Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2011-03-30T18:21:25Z"}, "message": "Introduce -fno-debug-types-section flag.\n\n        * common.opt (fdebug-types-section): New flag.\n        * doc/invoke.texi: Document new -fno-debug-types-section flag.\n        * dwarf2out.c (use_debug_types): New define.\n        (struct die_struct): Mark die_id with GTY desc use_debug_types.\n        (print_die): Guard output of type unit signatures using\n        use_debug_types.\n        (build_abbrev_table): Replace assert of dwarf_version >= 4\n        with assert on use_debug_types.\n        (size_of_die): Likewise.\n        (unmark_dies): Likewise.\n        (value_format): Decide AT_ref_external form on use_debug_types.\n        (output_die): Replace dwarf_version version check guard with\n        use_debug_types where appropriate.\n        (modified_type_die): Likewise.\n        (gen_reference_type_die): Likewise.\n        (dwarf2out_start_source_file): Likewise.\n        (dwarf2out_end_source_file): Likewise.\n        (prune_unused_types_walk_attribs): Likewise.\n        (dwarf2out_finish): Likewise.\n\nFrom-SVN: r171742", "tree": {"sha": "1c0cb39ea3f0a4677edeced3c3d087b63030d18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0cb39ea3f0a4677edeced3c3d087b63030d18d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/comments", "author": null, "committer": null, "parents": [{"sha": "a63940ba494c733b84fae4821a71d2f4b8bec0b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63940ba494c733b84fae4821a71d2f4b8bec0b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a63940ba494c733b84fae4821a71d2f4b8bec0b8"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "4a0ac4abd09dc6d20b5fab38d5d3ad542f8ec2f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "patch": "@@ -1,3 +1,25 @@\n+2011-03-29  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* common.opt (fdebug-types-section): New flag.\n+\t* doc/invoke.texi: Document new -fno-debug-types-section flag.\n+\t* dwarf2out.c (use_debug_types): New define.\n+\t(struct die_struct): Mark die_id with GTY desc use_debug_types.\n+\t(print_die): Guard output of type unit signatures using\n+\tuse_debug_types.\n+\t(build_abbrev_table): Replace assert of dwarf_version >= 4\n+\twith assert on use_debug_types.\n+\t(size_of_die): Likewise.\n+\t(unmark_dies): Likewise.\n+\t(value_format): Decide AT_ref_external form on use_debug_types.\n+\t(output_die): Replace dwarf_version version check guard with\n+\tuse_debug_types where appropriate.\n+\t(modified_type_die): Likewise.\n+\t(gen_reference_type_die): Likewise.\n+\t(dwarf2out_start_source_file): Likewise.\n+\t(dwarf2out_end_source_file): Likewise.\n+\t(prune_unused_types_walk_attribs): Likewise.\n+\t(dwarf2out_finish): Likewise.\n+\n 2011-03-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-color.c (ira_assign_hard_reg): Use only one variable 'mode'."}, {"sha": "213645cd97e1d869d39af404e4e54d02403bfcfc", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "patch": "@@ -1012,6 +1012,10 @@ femit-class-debug-always\n Common Report Var(flag_emit_class_debug_always) Init(0)\n Do not suppress C++ class debug information.\n \n+fdebug-types-section\n+Common Report Var(flag_debug_types_section) Init(1)\n+Output .debug_types section when using DWARF v4 debuginfo.\n+\n fexceptions\n Common Report Var(flag_exceptions) Optimization\n Enable exception handling"}, {"sha": "928e3221a642002ce0c4e45688d64a24ef00c42a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "patch": "@@ -312,7 +312,8 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-final-insns=@var{file} @gol\n -fcompare-debug@r{[}=@var{opts}@r{]}  -fcompare-debug-second @gol\n -feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n--feliminate-unused-debug-symbols -femit-class-debug-always @gol\n+-feliminate-unused-debug-symbols -femit-class-debug-always\n+-fdebug-types-section @gol\n -fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs @gol\n -frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n -fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose @gol\n@@ -4585,6 +4586,15 @@ normally emits debugging information for classes because using this\n option will increase the size of debugging information by as much as a\n factor of two.\n \n+@item -fno-debug-types-section\n+@opindex fno-types-section\n+@opindex ftypes-section\n+By default when using Dwarf v4 or higher type DIEs will be put into\n+their own .debug_types section instead of making them part of the\n+.debug_info section.  It is more efficient to put them in a separate\n+comdat sections since the linker will then be able to remove duplicates.\n+But not all dwarf consumers support .debug_types sections yet.\n+\n @item -gstabs+\n @opindex gstabs+\n Produce debugging information in stabs format (if that is supported),"}, {"sha": "91be9a4b624eee9274c4694477e487d5fb38f458", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4e351537fe6bf253e13e3c3e7b122cbe9468c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0fa4e351537fe6bf253e13e3c3e7b122cbe9468c", "patch": "@@ -5800,6 +5800,16 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n    representation is done after the entire program has been compiled.\n    The types below are used to describe the internal representation.  */\n \n+/* Whether to put type DIEs into their own section .debug_types instead\n+   of making them part of the .debug_info section.  Only supported for\n+   Dwarf V4 or higher and the user didn't disable them through\n+   -fno-debug-types-section.  It is more efficient to put them in a\n+   separate comdat sections since the linker will then be able to\n+   remove duplicates.  But not all tools support .debug_types sections\n+   yet.  */\n+\n+#define use_debug_types (dwarf_version >= 4 && flag_debug_types_section)\n+\n /* Various DIE's use offsets relative to the beginning of the\n    .debug_info section to refer to each other.  */\n \n@@ -5858,7 +5868,7 @@ typedef struct GTY((chain_circular (\"%h.die_sib\"))) die_struct {\n       char * GTY ((tag (\"0\"))) die_symbol;\n       comdat_type_node_ref GTY ((tag (\"1\"))) die_type_node;\n     }\n-  GTY ((desc (\"dwarf_version >= 4\"))) die_id;\n+  GTY ((desc (\"use_debug_types\"))) die_id;\n   VEC(dw_attr_node,gc) * die_attr;\n   dw_die_ref die_parent;\n   dw_die_ref die_child;\n@@ -8560,7 +8570,7 @@ print_die (dw_die_ref die, FILE *outfile)\n   fprintf (outfile, \" offset: %ld\", die->die_offset);\n   fprintf (outfile, \" mark: %d\\n\", die->die_mark);\n \n-  if (dwarf_version >= 4 && die->die_id.die_type_node)\n+  if (use_debug_types && die->die_id.die_type_node)\n     {\n       print_spaces (outfile);\n       fprintf (outfile, \"  signature: \");\n@@ -8612,13 +8622,13 @@ print_die (dw_die_ref die, FILE *outfile)\n \tcase dw_val_class_die_ref:\n \t  if (AT_ref (a) != NULL)\n \t    {\n-\t      if (dwarf_version >= 4 && AT_ref (a)->die_id.die_type_node)\n+\t      if (use_debug_types && AT_ref (a)->die_id.die_type_node)\n \t        {\n \t\t  fprintf (outfile, \"die -> signature: \");\n \t\t  print_signature (outfile,\n \t\t  \t\t   AT_ref (a)->die_id.die_type_node->signature);\n                 }\n-\t      else if (dwarf_version < 4 && AT_ref (a)->die_id.die_symbol)\n+\t      else if (! use_debug_types && AT_ref (a)->die_id.die_symbol)\n \t\tfprintf (outfile, \"die -> label: %s\",\n \t\t         AT_ref (a)->die_id.die_symbol);\n \t      else\n@@ -10575,7 +10585,7 @@ build_abbrev_table (dw_die_ref die)\n     if (AT_class (a) == dw_val_class_die_ref\n \t&& AT_ref (a)->die_mark == 0)\n       {\n-\tgcc_assert (dwarf_version >= 4 || AT_ref (a)->die_id.die_symbol);\n+\tgcc_assert (use_debug_types || AT_ref (a)->die_id.die_symbol);\n \tset_AT_ref_external (a, 1);\n       }\n \n@@ -10723,7 +10733,7 @@ size_of_die (dw_die_ref die)\n \t\t we use DW_FORM_ref_addr.  In DWARF2, DW_FORM_ref_addr\n \t\t is sized by target address length, whereas in DWARF3\n \t\t it's always sized as an offset.  */\n-\t      if (dwarf_version >= 4)\n+\t      if (use_debug_types)\n \t\tsize += DWARF_TYPE_SIGNATURE_SIZE;\n \t      else if (dwarf_version == 2)\n \t\tsize += DWARF2_ADDR_SIZE;\n@@ -10809,7 +10819,7 @@ unmark_dies (dw_die_ref die)\n {\n   dw_die_ref c;\n \n-  if (dwarf_version < 4)\n+  if (! use_debug_types)\n     gcc_assert (die->die_mark);\n \n   die->die_mark = 0;\n@@ -11008,7 +11018,7 @@ value_format (dw_attr_ref a)\n       return DW_FORM_flag;\n     case dw_val_class_die_ref:\n       if (AT_ref_external (a))\n-\treturn dwarf_version >= 4 ? DW_FORM_ref_sig8 : DW_FORM_ref_addr;\n+\treturn use_debug_types ? DW_FORM_ref_sig8 : DW_FORM_ref_addr;\n       else\n \treturn DW_FORM_ref;\n     case dw_val_class_fde_ref:\n@@ -11218,7 +11228,7 @@ output_die (dw_die_ref die)\n \n   /* If someone in another CU might refer to us, set up a symbol for\n      them to point to.  */\n-  if (dwarf_version < 4 && die->die_id.die_symbol)\n+  if (! use_debug_types && die->die_id.die_symbol)\n     output_die_symbol (die);\n \n   dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (%#lx) %s)\",\n@@ -11357,7 +11367,7 @@ output_die (dw_die_ref die)\n \tcase dw_val_class_die_ref:\n \t  if (AT_ref_external (a))\n \t    {\n-\t      if (dwarf_version >= 4)\n+\t      if (use_debug_types)\n \t        {\n \t          comdat_type_node_ref type_node =\n \t            AT_ref (a)->die_id.die_type_node;\n@@ -12898,7 +12908,7 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n     }\n   else if (code == REFERENCE_TYPE)\n     {\n-      if (TYPE_REF_IS_RVALUE (type) && dwarf_version >= 4)\n+      if (TYPE_REF_IS_RVALUE (type) && use_debug_types)\n \tmod_type_die = new_die (DW_TAG_rvalue_reference_type, comp_unit_die (),\n \t\t\t\ttype);\n       else\n@@ -20139,7 +20149,7 @@ gen_reference_type_die (tree type, dw_die_ref context_die)\n {\n   dw_die_ref ref_die, scope_die = scope_die_for (type, context_die);\n \n-  if (TYPE_REF_IS_RVALUE (type) && dwarf_version >= 4)\n+  if (TYPE_REF_IS_RVALUE (type) && use_debug_types)\n     ref_die = new_die (DW_TAG_rvalue_reference_type, scope_die, type);\n   else\n     ref_die = new_die (DW_TAG_reference_type, scope_die, type);\n@@ -22226,7 +22236,7 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n static void\n dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n {\n-  if (flag_eliminate_dwarf2_dups && dwarf_version < 4)\n+  if (flag_eliminate_dwarf2_dups && ! use_debug_types)\n     {\n       /* Record the beginning of the file for break_out_includes.  */\n       dw_die_ref bincl_die;\n@@ -22250,7 +22260,7 @@ dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n static void\n dwarf2out_end_source_file (unsigned int lineno ATTRIBUTE_UNUSED)\n {\n-  if (flag_eliminate_dwarf2_dups && dwarf_version < 4)\n+  if (flag_eliminate_dwarf2_dups && ! use_debug_types)\n     /* Record the end of the file for break_out_includes.  */\n     new_die (DW_TAG_GNU_EINCL, comp_unit_die (), NULL);\n \n@@ -22515,7 +22525,7 @@ prune_unused_types_walk_attribs (dw_die_ref die)\n \t  /* A reference to another DIE.\n \t     Make sure that it will get emitted.\n \t     If it was broken out into a comdat group, don't follow it.  */\n-          if (dwarf_version < 4\n+          if (! use_debug_types\n               || a->dw_attr == DW_AT_specification\n               || a->dw_attr_val.v.val_die_ref.die->die_id.die_type_node == NULL)\n \t    prune_unused_types_mark (a->dw_attr_val.v.val_die_ref.die, 1);\n@@ -22596,7 +22606,7 @@ prune_unused_types_mark (dw_die_ref die, int dokids)\n \t breaking out types into comdat sections, do this\n \t for all type definitions.  */\n       if (die->die_tag == DW_TAG_array_type\n-          || (dwarf_version >= 4\n+          || (use_debug_types\n               && is_type_die (die) && ! is_declaration_die (die)))\n \tFOR_EACH_CHILD (die, c, prune_unused_types_mark (c, 1));\n       else\n@@ -23589,11 +23599,11 @@ dwarf2out_finish (const char *filename)\n \n   /* Generate separate CUs for each of the include files we've seen.\n      They will go into limbo_die_list.  */\n-  if (flag_eliminate_dwarf2_dups && dwarf_version < 4)\n+  if (flag_eliminate_dwarf2_dups && ! use_debug_types)\n     break_out_includes (comp_unit_die ());\n \n   /* Generate separate COMDAT sections for type DIEs. */\n-  if (dwarf_version >= 4)\n+  if (use_debug_types)\n     {\n       break_out_comdat_types (comp_unit_die ());\n "}]}