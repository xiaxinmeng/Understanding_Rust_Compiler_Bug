{"sha": "a8e9f9a310c7073dbf656cf4d47b72bff4605a2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlOWY5YTMxMGM3MDczZGJmNjU2Y2Y0ZDQ3YjcyYmZmNDYwNWEyZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-06-01T10:31:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-06-01T10:31:30Z"}, "message": "match.pd ((A & B) - (A & ~B) -> B - (A ^ B)): Add missing :c.\n\n2016-06-01  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd ((A & B) - (A & ~B) -> B - (A ^ B)): Add missing :c.\n\t(relational patterns): Use :c to avoid pattern duplications.\n\nFrom-SVN: r236979", "tree": {"sha": "8c5a1980e3d57b4f2badc508c6101c7f0a30001f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c5a1980e3d57b4f2badc508c6101c7f0a30001f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48de570121fa393e003a11f63a85b862a0c1030e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48de570121fa393e003a11f63a85b862a0c1030e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48de570121fa393e003a11f63a85b862a0c1030e"}], "stats": {"total": 50, "additions": 10, "deletions": 40}, "files": [{"sha": "fc45d3511946e4b4d7bd7cb8d1d65d8f650d7ebd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8e9f9a310c7073dbf656cf4d47b72bff4605a2d", "patch": "@@ -1,3 +1,8 @@\n+2016-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd ((A & B) - (A & ~B) -> B - (A ^ B)): Add missing :c.\n+\t(relational patterns): Use :c to avoid pattern duplications.\n+\n 2016-06-01  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (comparison_code_p): New predicate."}, {"sha": "dde6988a6f57e2fcf0e39be0e14bc4580cdb2a4b", "filename": "gcc/match.pd", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e9f9a310c7073dbf656cf4d47b72bff4605a2d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a8e9f9a310c7073dbf656cf4d47b72bff4605a2d", "patch": "@@ -493,7 +493,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Fold (A & B) - (A & ~B) into B - (A ^ B).  */\n (simplify\n- (minus (bit_and:s @0 @1) (bit_and:cs @0 (bit_not @1)))\n+ (minus (bit_and:cs @0 @1) (bit_and:cs @0 (bit_not @1)))\n   (minus @1 (bit_xor @0 @1)))\n \n /* Simplify (X & ~Y) | (~X & Y) -> X ^ Y.  */\n@@ -2584,18 +2584,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (for cmp (lt le ge gt)\n      out (gt gt le le)\n  (simplify\n-  (cmp (plus@2 @0 INTEGER_CST@1) @0)\n-  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))\n-       && wi::ne_p (@1, 0)\n-       && single_use (@2))\n-   (out @0 { wide_int_to_tree (TREE_TYPE (@0), wi::max_value\n-\t       (TYPE_PRECISION (TREE_TYPE (@0)), UNSIGNED) - @1); }))))\n-/* A CMP A + CST  ->  A CMP' CST' */\n-(for cmp (gt ge le lt)\n-     out (gt gt le le)\n- (simplify\n-  (cmp @0 (plus@2 @0 INTEGER_CST@1))\n+  (cmp:c (plus@2 @0 INTEGER_CST@1) @0)\n   (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n        && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))\n        && wi::ne_p (@1, 0)\n@@ -2608,51 +2597,27 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    expects the long form, so we restrict the transformation for now.  */\n (for cmp (gt le)\n  (simplify\n-  (cmp (minus@2 @0 @1) @0)\n+  (cmp:c (minus@2 @0 @1) @0)\n   (if (single_use (@2)\n        && ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n        && TYPE_UNSIGNED (TREE_TYPE (@0))\n        && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n    (cmp @1 @0))))\n-(for cmp (lt ge)\n- (simplify\n-  (cmp @0 (minus@2 @0 @1))\n-  (if (single_use (@2)\n-       && ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-       && TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n-   (cmp @0 @1))))\n \n /* Testing for overflow is unnecessary if we already know the result.  */\n-/* A < A - B  */\n-(for cmp (lt ge)\n-     out (ne eq)\n- (simplify\n-  (cmp @0 (realpart (IFN_SUB_OVERFLOW@2 @0 @1)))\n-  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n-   (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n /* A - B > A  */\n (for cmp (gt le)\n      out (ne eq)\n  (simplify\n-  (cmp (realpart (IFN_SUB_OVERFLOW@2 @0 @1)) @0)\n+  (cmp:c (realpart (IFN_SUB_OVERFLOW@2 @0 @1)) @0)\n   (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n        && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n    (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n /* A + B < A  */\n (for cmp (lt ge)\n      out (ne eq)\n  (simplify\n-  (cmp (realpart (IFN_ADD_OVERFLOW:c@2 @0 @1)) @0)\n-  (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n-       && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n-   (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))\n-/* A > A + B  */\n-(for cmp (gt le)\n-     out (ne eq)\n- (simplify\n-  (cmp @0 (realpart (IFN_ADD_OVERFLOW:c@2 @0 @1)))\n+  (cmp:c (realpart (IFN_ADD_OVERFLOW:c@2 @0 @1)) @0)\n   (if (TYPE_UNSIGNED (TREE_TYPE (@0))\n        && types_match (TREE_TYPE (@0), TREE_TYPE (@1)))\n    (out (imagpart @2) { build_zero_cst (TREE_TYPE (@0)); }))))"}]}