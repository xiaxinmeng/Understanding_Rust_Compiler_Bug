{"sha": "3845b5420e13373edfd412d50e72a7d4571ba8a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg0NWI1NDIwZTEzMzczZWRmZDQxMmQ1MGU3MmE3ZDQ1NzFiYThhMQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1992-06-29T19:38:45Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1992-06-29T19:38:45Z"}, "message": "Always use index and rindex and never strchr or strrchr.\n\nFrom-SVN: r1343", "tree": {"sha": "cf58ed8001ffda6aff7ab64f682bcd4c4be2a607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf58ed8001ffda6aff7ab64f682bcd4c4be2a607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3845b5420e13373edfd412d50e72a7d4571ba8a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3845b5420e13373edfd412d50e72a7d4571ba8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3845b5420e13373edfd412d50e72a7d4571ba8a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3845b5420e13373edfd412d50e72a7d4571ba8a1/comments", "author": null, "committer": null, "parents": [{"sha": "43ae693e4771cdd9b4850243e0b4c115dab3bff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ae693e4771cdd9b4850243e0b4c115dab3bff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ae693e4771cdd9b4850243e0b4c115dab3bff4"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "0c56a6f38cafe80926e45085c0e9e2a9b7a18db7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3845b5420e13373edfd412d50e72a7d4571ba8a1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3845b5420e13373edfd412d50e72a7d4571ba8a1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3845b5420e13373edfd412d50e72a7d4571ba8a1", "patch": "@@ -33,6 +33,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"c-tree.h\"\n #include \"flags.h\"\n \n+extern char *index ();\n+extern char *rindex ();\n+\n int mark_addressable ();\n static tree convert_for_assignment ();\n static void warn_for_assignment ();\n@@ -1384,21 +1387,6 @@ init_format_info_table ()\n }\n \n static char\ttfaff[] = \"too few arguments for format\";\n-\n-/* Don't rely on existence of strchr.  */\n-\n-static char *\n-my_strchr (string, c)\n-     char *string;\n-     int c;\n-{\n-  char *p;\n-  for (p = string; *p; p++)\n-    if (*p == c)\n-      return p;\n-\n-  return 0;\n-}\n \f\n /* Check the argument list of a call to printf, scanf, etc.\n    INFO points to the element of function_info_table.\n@@ -1502,9 +1490,9 @@ check_format (info, params)\n \t}\n       else\n \t{\n-\t  while (*format_chars != 0 && my_strchr (\" +#0-\", *format_chars) != 0)\n+\t  while (*format_chars != 0 && index (\" +#0-\", *format_chars) != 0)\n \t    {\n-\t      if (my_strchr (flag_chars, *format_chars) != 0)\n+\t      if (index (flag_chars, *format_chars) != 0)\n \t\t{\n \t\t  sprintf (message, \"repeated `%c' flag in format\",\n \t\t\t   *format_chars);\n@@ -1516,13 +1504,13 @@ check_format (info, params)\n \t    }\n \t  /* \"If the space and + flags both appear, \n \t     the space flag will be ignored.\"  */\n-\t  if (my_strchr (flag_chars, ' ') != 0\n-\t      && my_strchr (flag_chars, '+') != 0)\n+\t  if (index (flag_chars, ' ') != 0\n+\t      && index (flag_chars, '+') != 0)\n \t    warning (\"use of both ` ' and `+' flags in format\");\n \t  /* \"If the 0 and - flags both appear,\n \t     the 0 flag will be ignored.\"  */\n-\t  if (my_strchr (flag_chars, '0') != 0\n-\t      && my_strchr (flag_chars, '-') != 0)\n+\t  if (index (flag_chars, '0') != 0\n+\t      && index (flag_chars, '-') != 0)\n \t    warning (\"use of both `0' and `-' flags in format\");\n \t  if (*format_chars == '*')\n \t    {\n@@ -1563,7 +1551,7 @@ check_format (info, params)\n \t      /* \"For d, i, o, u, x, and X conversions,\n \t\t if a precision is specified, the 0 flag will be ignored.\n \t\t For other conversions, the behavior is undefined.\"  */\n-\t      if (my_strchr (flag_chars, '0') != 0)\n+\t      if (index (flag_chars, '0') != 0)\n \t\twarning (\"precision and `0' flag both used in one %%-sequence\");\n \t      ++format_chars;\n \t      if (*format_chars != '*' && !ISDIGIT (*format_chars))\n@@ -1621,7 +1609,7 @@ check_format (info, params)\n       while (1)\n \t{\n \t  if (fci->format_chars == 0\n-\t      || my_strchr (fci->format_chars, format_char) != 0)\n+\t      || index (fci->format_chars, format_char) != 0)\n \t    break;\n \t  ++fci;\n \t}\n@@ -1638,21 +1626,21 @@ check_format (info, params)\n \t  warning (message);\n \t  continue;\n \t}\n-      if (wide && my_strchr (fci->flag_chars, 'w') == 0)\n+      if (wide && index (fci->flag_chars, 'w') == 0)\n \t{\n \t  sprintf (message, \"width used with `%c' format\",\n \t\t   format_char);\n \t  warning (message);\n \t}\n-      if (precise && my_strchr (fci->flag_chars, 'p') == 0)\n+      if (precise && index (fci->flag_chars, 'p') == 0)\n \t{\n \t  sprintf (message, \"precision used with `%c' format\",\n \t\t   format_char);\n \t  warning (message);\n \t}\n       if (suppressed)\n \t{\n-\t  if (my_strchr (fci->flag_chars, '*') == 0)\n+\t  if (index (fci->flag_chars, '*') == 0)\n \t    {\n \t      sprintf (message,\n \t\t       \"suppression of `%c' conversion in format\",\n@@ -1663,7 +1651,7 @@ check_format (info, params)\n \t}\n       for (i = 0; flag_chars[i] != 0; ++i)\n \t{\n-\t  if (my_strchr (fci->flag_chars, flag_chars[i]) == 0)\n+\t  if (index (fci->flag_chars, flag_chars[i]) == 0)\n \t    {\n \t      sprintf (message, \"flag `%c' used with type `%c'\",\n \t\t       flag_chars[i], format_char);"}]}