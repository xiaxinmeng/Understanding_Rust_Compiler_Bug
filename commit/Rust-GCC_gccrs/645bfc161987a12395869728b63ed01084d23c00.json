{"sha": "645bfc161987a12395869728b63ed01084d23c00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1YmZjMTYxOTg3YTEyMzk1ODY5NzI4YjYzZWQwMTA4NGQyM2MwMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-03-29T20:43:14Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-03-29T20:43:14Z"}, "message": "Require GLIBC 2.32 for Decimal/_Float128 conversions.\n\nIn the patch that I applied on March 2nd, I had code to provide support for\nDecimal/_Float128 conversions if the user did not use at least GLIBC 2.32.  It\ndid this by using __ibm128 as an intermediate type.  The trouble is __ibm128\ncannot represent all of the numbers that _Float128 can, and you lose if you do\nthis conversion.\n\nThis patch removes this support.  The dfp-bit.c functions now call the the\n__sprintfieee128 and __strtoieee128 functions to do the conversion.  If the\nuser does not have GLIBC, they will get a linker error that these functions do\nnot exist.\n\nThe float128 support functions are only built into the static libgcc, so there\nisn't an issue with having references to __strtoieee128 and __sprintfieee128\nwith older GLIBC libraries.\n\nAs an added bonus, this patch eliminates the __sprintfkf function which\nincluded stdio.h to get a definition for the sprintf library function.  This\nallows for building cross compilers without having to have a target stdio.h\navailable.\n\nlibgcc/\n2021-03-29  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/t-float128 (fp128_decstr_funcs): Delete.\n\t(fp128_ppc_funcs): Do not add $(fp128_decstr_funcs).\n\t(fp128_decstr_objs): Delete.\n\t* dfp-bit.h: Call __sprintfieee128 to do conversions from\n\t_Float128 to a Decimal type.  Call __strtoieee128 to do\n\tconversions from a Decimal type to _Float128.\n\t* config/rs6000/_sprintfkf.c: Delete file.\n\t* config/rs6000/_sprintfkf.h: Delete file.\n\t* config/rs6000/_strtokf.c: Delete file.\n\t* config/rs6000/_strtokf.h: Delete file.", "tree": {"sha": "4a8f432e6256620f3b8d441bd3c537f145985c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a8f432e6256620f3b8d441bd3c537f145985c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/645bfc161987a12395869728b63ed01084d23c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645bfc161987a12395869728b63ed01084d23c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645bfc161987a12395869728b63ed01084d23c00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645bfc161987a12395869728b63ed01084d23c00/comments", "author": null, "committer": null, "parents": [{"sha": "77093a75ca4f3a0d6d9ca77ca8905b77695a2599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77093a75ca4f3a0d6d9ca77ca8905b77695a2599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77093a75ca4f3a0d6d9ca77ca8905b77695a2599"}], "stats": {"total": 186, "additions": 5, "deletions": 181}, "files": [{"sha": "2d624f14e2593cc478310abeb0dd9c649b4fd214", "filename": "libgcc/config/rs6000/_sprintfkf.c", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.c?ref=77093a75ca4f3a0d6d9ca77ca8905b77695a2599", "patch": "@@ -1,58 +0,0 @@\n-/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Conversion to IEEE 128-bit floating point from string using snprintf.  */\n-\n-#include <stddef.h>\n-#include <stdlib.h>\n-#include <soft-fp.h>\n-#include <quad-float128.h>\n-#include <stdio.h>\n-#include <_sprintfkf.h>\n-\n-/* This function must be built with IBM 128-bit as long double, so that we can\n-   access the strfroml function if do not have an IEEE 128-bit version, and if\n-   that is not available, use sprintf.  */\n-#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IBM128__)\n-#error \"Long double is not IBM 128-bit\"\n-#endif\n-\n-/* If the user is using GLIBC 2.32, we can use the __snprintfieee128 function.\n-\n-   If we are linked against an earlier library, we will have fake it by\n-   converting the value to long double, and using sprintf to do the conversion.\n-   This isn't ideal, as IEEE 128-bit has more exponent range than IBM\n-   128-bit.  */\n-\n-extern int __sprintfieee128 (char *restrict, const char *restrict, ...)\n-  __attribute__ ((__weak__));\n-\n-int __sprintfkf (char *restrict string,\n-\t\t const char *restrict format,\n-\t\t _Float128 number)\n-{\n-  if (__sprintfieee128)\n-    return __sprintfieee128 (string, format, number);\n-\n-  return sprintf (string, format, (long double) number);\n-}"}, {"sha": "de9d7137f69a3405b1032b50e145300241149a2d", "filename": "libgcc/config/rs6000/_sprintfkf.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_sprintfkf.h?ref=77093a75ca4f3a0d6d9ca77ca8905b77695a2599", "patch": "@@ -1,27 +0,0 @@\n-/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Declaration of the conversion function to IEEE 128-bit floating point from\n-   string using snprintf.  */\n-\n-extern int __sprintfkf (char *restrict, const char *restrict, _Float128);"}, {"sha": "dc13534cdc2235577b75a4ae0682c621b07cd7f7", "filename": "libgcc/config/rs6000/_strtokf.c", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_strtokf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_strtokf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_strtokf.c?ref=77093a75ca4f3a0d6d9ca77ca8905b77695a2599", "patch": "@@ -1,53 +0,0 @@\n-/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Conversion to IEEE 128-bit floating point from string.  */\n-\n-#include <stddef.h>\n-#include <stdlib.h>\n-#include <soft-fp.h>\n-#include <quad-float128.h>\n-\n-/* This function must be built with IBM 128-bit as long double, so that we can\n-   access the strtold function if do not have an IEEE 128-bit version.  */\n-#if !defined(__LONG_DOUBLE_128__) || !defined(__LONG_DOUBLE_IBM128__)\n-#error \"Long double is not IBM 128-bit\"\n-#endif\n-\n-/* If the user is using GLIBC 2.32, we can use the __strtoieee128 function.\n-\n-   If we are linked against an earlier library, we will have fake it by\n-   converting the string to IBM 128-bit long double, and then converting that to\n-   __float128.  This isn't ideal, as IEEE 128-bit has more exponent range than\n-   IBM 128-bit.  */\n-\n-extern _Float128 __strtoieee128 (const char *, char **) __attribute__ ((__weak__));\n-\n-_Float128\n-__strtokf (const char *string, char **endptr)\n-{\n-  if (__strtoieee128)\n-    return __strtoieee128 (string, endptr);\n-\n-  return strtold (string, endptr);\n-}"}, {"sha": "a7ca8e092440816c1169293dad4fd0797f92c199", "filename": "libgcc/config/rs6000/_strtokf.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_strtokf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77093a75ca4f3a0d6d9ca77ca8905b77695a2599/libgcc%2Fconfig%2Frs6000%2F_strtokf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_strtokf.h?ref=77093a75ca4f3a0d6d9ca77ca8905b77695a2599", "patch": "@@ -1,27 +0,0 @@\n-/* Copyright (C) 1989-2021 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Declaration of the conversion function to IEEE 128-bit floating point from\n-   string.  */\n-\n-extern _Float128 __strtokf (const char *, char **);"}, {"sha": "8b089d4433c39259042235a7f258e76039d68ad9", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645bfc161987a12395869728b63ed01084d23c00/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645bfc161987a12395869728b63ed01084d23c00/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=645bfc161987a12395869728b63ed01084d23c00", "patch": "@@ -26,10 +26,6 @@ fp128_softfp_obj\t= $(fp128_softfp_static_obj) $(fp128_softfp_shared_obj)\n fp128_dec_funcs\t\t= _kf_to_sd _kf_to_dd _kf_to_td \\\n \t\t\t  _sd_to_kf _dd_to_kf _td_to_kf\n \n-# _Float128 to/from string conversions that must be compiled with IBM 128-bit\n-# long double.\n-fp128_decstr_funcs\t= _strtokf _sprintfkf\n-\n # Decimal <-> __ibm128 conversions\n ibm128_dec_funcs\t= _tf_to_sd _tf_to_dd _tf_to_td \\\n \t\t\t  _sd_to_tf _dd_to_tf _td_to_tf\n@@ -38,7 +34,7 @@ ibm128_dec_funcs\t= _tf_to_sd _tf_to_dd _tf_to_td \\\n fp128_ppc_funcs\t\t= floattikf floatuntikf fixkfti fixunskfti \\\n \t\t\t  extendkftf2-sw trunctfkf2-sw \\\n \t\t\t  sfp-exceptions _mulkc3 _divkc3 _powikf2 \\\n-\t\t\t  $(fp128_dec_funcs) $(fp128_decstr_funcs)\n+\t\t\t  $(fp128_dec_funcs)\n \n fp128_ppc_src\t\t= $(addprefix $(srcdir)/config/rs6000/,$(addsuffix \\\n \t\t\t\t.c,$(fp128_ppc_funcs)))\n@@ -88,22 +84,15 @@ $(fp128_obj)\t\t : $(srcdir)/config/rs6000/quad-float128.h\n fp128_dec_objs\t\t= $(addsuffix $(objext),$(fp128_dec_funcs)) \\\n \t\t\t  $(addsuffix _s$(objext),$(fp128_dec_funcs))\n \n-fp128_decstr_objs\t= $(addsuffix $(objext),$(fp128_decstr_funcs)) \\\n-\t\t\t  $(addsuffix _s$(objext),$(fp128_decstr_funcs))\n-\n ibm128_dec_objs\t\t= $(addsuffix $(objext),$(ibm128_dec_funcs)) \\\n \t\t\t  $(addsuffix _s$(objext),$(ibm128_dec_funcs))\n \n FP128_CFLAGS_DECIMAL\t= -mno-gnu-attribute -Wno-psabi -mabi=ieeelongdouble\n IBM128_CFLAGS_DECIMAL\t= -mno-gnu-attribute -Wno-psabi -mabi=ibmlongdouble\n \n $(fp128_dec_objs)\t: INTERNAL_CFLAGS += $(FP128_CFLAGS_DECIMAL)\n-$(fp128_decstr_objs)\t: INTERNAL_CFLAGS += $(IBM128_CFLAGS_DECIMAL)\n $(ibm128_dec_objs)\t: INTERNAL_CFLAGS += $(IBM128_CFLAGS_DECIMAL)\n \n-$(fp128_decstr_objs)\t: $(srcdir)/config/rs6000/_strtokf.h \\\n-\t\t\t  $(srcdir)/config/rs6000/_sprintfkf.h \\\n-\n $(fp128_softfp_src) : $(srcdir)/soft-fp/$(subst -sw,,$(subst kf,tf,$@)) $(fp128_dep)\n \t@src=\"$(srcdir)/soft-fp/$(subst -sw,,$(subst kf,tf,$@))\"; \\\n \techo \"Create $@\"; \\"}, {"sha": "e04cb83102623ba38ce6366a6bf502df456452b2", "filename": "libgcc/dfp-bit.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645bfc161987a12395869728b63ed01084d23c00/libgcc%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645bfc161987a12395869728b63ed01084d23c00/libgcc%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fdfp-bit.h?ref=645bfc161987a12395869728b63ed01084d23c00", "patch": "@@ -298,8 +298,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define BFP_TYPE _Float128\n #define BFP_FMT \"%.36Le\"\n #define BFP_VIA_TYPE _Float128\n-#define STR_TO_BFP __strtokf\n-#include <_strtokf.h>\n+#define STR_TO_BFP __strtoieee128\n+extern _Float128 __strtoieee128 (const char *, char **);\n \n #endif /* BFP_KIND */\n \n@@ -647,8 +647,8 @@ extern DFP_C_TYPE BFP_TO_DFP (BFP_TYPE);\n \n #elif defined (L_kf_to_sd) || defined (L_kf_to_dd) || defined (L_kf_to_td)\n extern DFP_C_TYPE BFP_TO_DFP (BFP_TYPE);\n-#include <_sprintfkf.h>\n-#define BFP_SPRINTF __sprintfkf\n+extern int __sprintfieee128 (char *restrict, const char *restrict, ...);\n+#define BFP_SPRINTF __sprintfieee128\n #endif\n \n #endif /* _DFPBIT_H */"}]}