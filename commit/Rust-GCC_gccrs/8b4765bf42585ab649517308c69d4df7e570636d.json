{"sha": "8b4765bf42585ab649517308c69d4df7e570636d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0NzY1YmY0MjU4NWFiNjQ5NTE3MzA4YzY5ZDRkZjdlNTcwNjM2ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-04-30T09:29:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-04-30T09:29:44Z"}, "message": "cgraph.h (cgraph_local_info): Remove for_functions_valid.\n\n\t* cgraph.h (cgraph_local_info): Remove for_functions_valid.\n\t(cgraph_global_info): Remove inlined.\n\t(LTO_cgraph_tag_names): Remove.\n\t(LTO_cgraph_tags, LCC_NOT_FOUND): Move to ...\n\t* lto-cgraph.c (LTO_cgraph_tags, LCC_NOT_FOUND): ... here;\n\tsimplify cgraph tags and document.\n\t(lto_output_node): Use only LTO_cgraph_unavail_node and\n\tLTO_cgraph_analyzed_node; Do not save analzed, reachable,\n\tfor_functions_valid, global info, process and output\n\tflags.\n\t(input_overwrite_node): Initialize estimated stack size and\n\testimated growth.\n\tDo not read flags we no longer store.\n\t(input_node): Likewise do not read info no longer stored.\n\t* ipa-inline.c (cgraph_mark_inline_edge): Do not set global.inlined\n\tflag.\n\nFrom-SVN: r158926", "tree": {"sha": "49d92e570e073cfdedbda44a392d33179b9136d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49d92e570e073cfdedbda44a392d33179b9136d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4765bf42585ab649517308c69d4df7e570636d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4765bf42585ab649517308c69d4df7e570636d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4765bf42585ab649517308c69d4df7e570636d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4765bf42585ab649517308c69d4df7e570636d/comments", "author": null, "committer": null, "parents": [{"sha": "e7fc9c75d0e914748acda8cd682479fbe9da38e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fc9c75d0e914748acda8cd682479fbe9da38e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7fc9c75d0e914748acda8cd682479fbe9da38e9"}], "stats": {"total": 174, "additions": 61, "deletions": 113}, "files": [{"sha": "dc50ee4b0fc3d2017340d751b2569d88bb8fbb22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b4765bf42585ab649517308c69d4df7e570636d", "patch": "@@ -1,3 +1,22 @@\n+2010-04-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.h (cgraph_local_info): Remove for_functions_valid.\n+\t(cgraph_global_info): Remove inlined.\n+\t(LTO_cgraph_tag_names): Remove.\n+\t(LTO_cgraph_tags, LCC_NOT_FOUND): Move to ...\n+\t* lto-cgraph.c (LTO_cgraph_tags, LCC_NOT_FOUND): ... here;\n+\tsimplify cgraph tags and document.\n+\t(lto_output_node): Use only LTO_cgraph_unavail_node and\n+\tLTO_cgraph_analyzed_node; Do not save analzed, reachable,\n+\tfor_functions_valid, global info, process and output\n+\tflags.\n+\t(input_overwrite_node): Initialize estimated stack size and\n+\testimated growth.\n+\tDo not read flags we no longer store.\n+\t(input_node): Likewise do not read info no longer stored.\n+\t* ipa-inline.c (cgraph_mark_inline_edge): Do not set global.inlined\n+\tflag.\n+\n 2010-04-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43879\n@@ -8,7 +27,7 @@\n \n \t* builtins.c (fold_builtin_1): Delete free (0).\n \n-2010-04-29  Jan HUbicka  <jh@suse.cz>\n+2010-04-29  Jan Hubicka  <jh@suse.cz>\n \n \t* gengtype.c (open_base_files): Add lto-streamer.h\n \t* cgraph.h (cgraph_local_info): lto_file_data is now in GGC."}, {"sha": "ed6ce6e7536d5724877a278cdfd3ceca3844a0ad", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=8b4765bf42585ab649517308c69d4df7e570636d", "patch": "@@ -111,10 +111,6 @@ struct GTY(()) cgraph_local_info {\n      redefined now.  */\n   unsigned redefined_extern_inline : 1;\n \n-  /* True if statics_read_for_function and\n-     statics_written_for_function contain valid data.  */\n-  unsigned for_functions_valid : 1;\n-\n   /* True if the function is going to be emitted in some other translation\n      unit, referenced from vtable.  */\n   unsigned vtable_method : 1;\n@@ -139,9 +135,6 @@ struct GTY(()) cgraph_global_info {\n \n   /* Estimated growth after inlining.  INT_MIN if not computed.  */\n   int estimated_growth;\n-\n-  /* Set iff the function has been inlined at least once.  */\n-  bool inlined;\n };\n \n /* Information about the function that is propagated by the RTL backend.\n@@ -721,24 +714,6 @@ unsigned int compute_inline_parameters (struct cgraph_node *);\n /* Create a new static variable of type TYPE.  */\n tree add_new_static_var (tree type);\n \n-/* lto-cgraph.c */\n-\n-enum LTO_cgraph_tags\n-{\n-  /* Must leave 0 for the stopper.  */\n-  LTO_cgraph_avail_node = 1,\n-  LTO_cgraph_overwritable_node,\n-  LTO_cgraph_unavail_node,\n-  LTO_cgraph_edge,\n-  LTO_cgraph_indirect_edge,\n-  LTO_cgraph_last_tag\n-};\n-\n-extern const char * LTO_cgraph_tag_names[LTO_cgraph_last_tag];\n-\n-#define LCC_NOT_FOUND\t(-1)\n-\n-\n /* Return true if iterator CSI points to nothing.  */\n static inline bool\n csi_end_p (cgraph_node_set_iterator csi)"}, {"sha": "e18a0cd0ddd42899a829f4795fd036f7f32cb61d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=8b4765bf42585ab649517308c69d4df7e570636d", "patch": "@@ -310,10 +310,7 @@ cgraph_mark_inline_edge (struct cgraph_edge *e, bool update_original,\n \n   gcc_assert (e->inline_failed);\n   e->inline_failed = CIF_OK;\n-\n-  if (!e->callee->global.inlined)\n-    DECL_POSSIBLY_INLINED (e->callee->decl) = true;\n-  e->callee->global.inlined = true;\n+  DECL_POSSIBLY_INLINED (e->callee->decl) = true;\n \n   cgraph_clone_inlined_nodes (e, true, update_original);\n "}, {"sha": "19821857229193009ba54be978acdf3d5871c0f6", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 40, "deletions": 83, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4765bf42585ab649517308c69d4df7e570636d/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=8b4765bf42585ab649517308c69d4df7e570636d", "patch": "@@ -47,6 +47,21 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n #include \"gcov-io.h\"\n \n+/* Cgraph streaming is organized as set of record whose type\n+   is indicated by a tag.  */\n+enum LTO_cgraph_tags\n+{\n+  /* Must leave 0 for the stopper.  */\n+\n+  /* Cgraph node without body available.  */\n+  LTO_cgraph_unavail_node = 1,\n+  /* Cgraph node with function body.  */\n+  LTO_cgraph_analyzed_node,\n+  /* Cgraph edges.  */\n+  LTO_cgraph_edge,\n+  LTO_cgraph_indirect_edge\n+};\n+\n /* Create a new cgraph encoder.  */\n \n lto_cgraph_encoder_t\n@@ -95,6 +110,7 @@ lto_cgraph_encoder_encode (lto_cgraph_encoder_t encoder,\n   return ref;\n }\n \n+#define LCC_NOT_FOUND\t(-1)\n \n /* Look up NODE in encoder.  Return NODE's reference if it has been encoded\n    or LCC_NOT_FOUND if it is not there.  */\n@@ -203,43 +219,20 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n {\n   unsigned int tag;\n   struct bitpack_d *bp;\n-  unsigned local, externally_visible, inlinable, analyzed;\n   bool boundary_p, wrote_decl_p;\n   intptr_t ref;\n   bool in_other_partition = false;\n \n   boundary_p = !cgraph_node_in_set_p (node, set);\n   wrote_decl_p = bitmap_bit_p (written_decls, DECL_UID (node->decl));\n \n-  switch (cgraph_function_body_availability (node))\n-    {\n-    case AVAIL_NOT_AVAILABLE:\n-      tag = LTO_cgraph_unavail_node;\n-      break;\n-\n-    case AVAIL_AVAILABLE:\n-    case AVAIL_LOCAL:\n-      tag = LTO_cgraph_avail_node;\n-      break;\n-\n-    case AVAIL_OVERWRITABLE:\n-      tag = LTO_cgraph_overwritable_node;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  if (boundary_p)\n+  if (node->analyzed && !boundary_p)\n+    tag = LTO_cgraph_analyzed_node;\n+  else\n     tag = LTO_cgraph_unavail_node;\n \n   lto_output_uleb128_stream (ob->main_stream, tag);\n \n-  local = node->local.local;\n-  externally_visible = node->local.externally_visible;\n-  inlinable = node->local.inlinable;\n-  analyzed = node->analyzed;\n-\n   /* In WPA mode, we only output part of the call-graph.  Also, we\n      fake cgraph node attributes.  There are two cases that we care.\n \n@@ -250,7 +243,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n      Cherry-picked nodes:  These are nodes we pulled from other\n      translation units into SET during IPA-inlining.  We make them as\n      local static nodes to prevent clashes with other local statics.  */\n-  if (boundary_p)\n+  if (boundary_p && node->analyzed)\n     {\n       /* Inline clones can not be part of boundary.  \n          gcc_assert (!node->global.inlined_to);  \n@@ -261,7 +254,6 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \t needs a bit extra work and will be promplty done by cgraph_remove_node\n \t after reading back.  */\n       in_other_partition = 1;\n-      analyzed = 0;\n     }\n \n   lto_output_uleb128_stream (ob->main_stream, wrote_decl_p);\n@@ -273,30 +265,27 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   lto_output_sleb128_stream (ob->main_stream, node->count);\n \n   bp = bitpack_create ();\n-  bp_pack_value (bp, local, 1);\n-  bp_pack_value (bp, externally_visible, 1);\n+  bp_pack_value (bp, node->local.local, 1);\n+  bp_pack_value (bp, node->local.externally_visible, 1);\n   bp_pack_value (bp, node->local.finalized, 1);\n-  bp_pack_value (bp, inlinable, 1);\n+  bp_pack_value (bp, node->local.inlinable, 1);\n   bp_pack_value (bp, node->local.disregard_inline_limits, 1);\n   bp_pack_value (bp, node->local.redefined_extern_inline, 1);\n-  bp_pack_value (bp, node->local.for_functions_valid, 1);\n   bp_pack_value (bp, node->local.vtable_method, 1);\n   bp_pack_value (bp, node->needed, 1);\n   bp_pack_value (bp, node->address_taken, 1);\n   bp_pack_value (bp, node->abstract_and_needed, 1);\n-  bp_pack_value (bp, node->reachable, 1);\n-  bp_pack_value (bp, analyzed && reachable_from_other_partition_p (node, set), 1);\n+  bp_pack_value (bp, tag == LTO_cgraph_analyzed_node\n+\t\t && reachable_from_other_partition_p (node, set), 1);\n   bp_pack_value (bp, node->lowered, 1);\n-  bp_pack_value (bp, analyzed, 1);\n   bp_pack_value (bp, in_other_partition, 1);\n-  bp_pack_value (bp, node->process, 1);\n   bp_pack_value (bp, node->alias, 1);\n   bp_pack_value (bp, node->finalized_by_frontend, 1);\n   bp_pack_value (bp, node->frequency, 2);\n   lto_output_bitpack (ob->main_stream, bp);\n   bitpack_delete (bp);\n \n-  if (tag != LTO_cgraph_unavail_node)\n+  if (tag == LTO_cgraph_analyzed_node)\n     {\n       lto_output_sleb128_stream (ob->main_stream,\n \t\t\t\t node->local.inline_summary.estimated_self_stack_size);\n@@ -308,29 +297,17 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \t\t\t\t node->local.inline_summary.self_time);\n       lto_output_sleb128_stream (ob->main_stream,\n \t\t\t\t node->local.inline_summary.time_inlining_benefit);\n-    }\n+      if (node->global.inlined_to)\n+\t{\n+\t  ref = lto_cgraph_encoder_lookup (encoder, node->global.inlined_to);\n+\t  gcc_assert (ref != LCC_NOT_FOUND);\n+\t}\n+      else\n+\tref = LCC_NOT_FOUND;\n \n-  /* FIXME lto: Outputting global info is not neccesary until after\n-     inliner was run.  Global structure holds results of propagation\n-     done by inliner.  */\n-  lto_output_sleb128_stream (ob->main_stream,\n-\t\t\t     node->global.estimated_stack_size);\n-  lto_output_sleb128_stream (ob->main_stream,\n-\t\t\t     node->global.stack_frame_offset);\n-  if (node->global.inlined_to && !boundary_p)\n-    {\n-      ref = lto_cgraph_encoder_lookup (encoder, node->global.inlined_to);\n-      gcc_assert (ref != LCC_NOT_FOUND);\n+      lto_output_sleb128_stream (ob->main_stream, ref);\n     }\n-  else\n-    ref = LCC_NOT_FOUND;\n-  lto_output_sleb128_stream (ob->main_stream, ref);\n \n-  lto_output_sleb128_stream (ob->main_stream, node->global.time);\n-  lto_output_sleb128_stream (ob->main_stream, node->global.size);\n-  lto_output_sleb128_stream (ob->main_stream,\n-\t\t\t     node->global.estimated_growth);\n-  lto_output_uleb128_stream (ob->main_stream, node->global.inlined);\n   if (node->same_comdat_group && !boundary_p)\n     {\n       ref = lto_cgraph_encoder_lookup (encoder, node->same_comdat_group);\n@@ -579,6 +556,8 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->local.inline_summary.size_inlining_benefit = size_inlining_benefit;\n   node->global.time = self_time;\n   node->global.size = self_size;\n+  node->global.estimated_stack_size = stack_size;\n+  node->global.estimated_growth = INT_MIN;\n   node->local.lto_file_data = file_data;\n \n   node->local.local = bp_unpack_value (bp, 1);\n@@ -587,17 +566,14 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->local.inlinable = bp_unpack_value (bp, 1);\n   node->local.disregard_inline_limits = bp_unpack_value (bp, 1);\n   node->local.redefined_extern_inline = bp_unpack_value (bp, 1);\n-  node->local.for_functions_valid = bp_unpack_value (bp, 1);\n   node->local.vtable_method = bp_unpack_value (bp, 1);\n   node->needed = bp_unpack_value (bp, 1);\n   node->address_taken = bp_unpack_value (bp, 1);\n   node->abstract_and_needed = bp_unpack_value (bp, 1);\n-  node->reachable = bp_unpack_value (bp, 1);\n   node->reachable_from_other_partition = bp_unpack_value (bp, 1);\n   node->lowered = bp_unpack_value (bp, 1);\n-  node->analyzed = bp_unpack_value (bp, 1);\n+  node->analyzed = tag == LTO_cgraph_analyzed_node;\n   node->in_other_partition = bp_unpack_value (bp, 1);\n-  node->process = bp_unpack_value (bp, 1);\n   node->alias = bp_unpack_value (bp, 1);\n   node->finalized_by_frontend = bp_unpack_value (bp, 1);\n   node->frequency = (enum node_frequency)bp_unpack_value (bp, 2);\n@@ -644,18 +620,12 @@ input_node (struct lto_file_decl_data *file_data,\n   int stack_size = 0;\n   unsigned decl_index;\n   bool clone_p;\n-  int estimated_stack_size = 0;\n-  int stack_frame_offset = 0;\n   int ref = LCC_NOT_FOUND, ref2 = LCC_NOT_FOUND;\n-  int estimated_growth = 0;\n-  int time = 0;\n-  int size = 0;\n   int self_time = 0;\n   int self_size = 0;\n   int time_inlining_benefit = 0;\n   int size_inlining_benefit = 0;\n   unsigned long same_body_count = 0;\n-  bool inlined = false;\n \n   clone_p = (lto_input_uleb128 (ib) != 0);\n \n@@ -672,22 +642,17 @@ input_node (struct lto_file_decl_data *file_data,\n   node->count = lto_input_sleb128 (ib);\n   bp = lto_input_bitpack (ib);\n \n-  if (tag != LTO_cgraph_unavail_node)\n+  if (tag == LTO_cgraph_analyzed_node)\n     {\n       stack_size = lto_input_sleb128 (ib);\n       self_size = lto_input_sleb128 (ib);\n       size_inlining_benefit = lto_input_sleb128 (ib);\n       self_time = lto_input_sleb128 (ib);\n       time_inlining_benefit = lto_input_sleb128 (ib);\n+\n+      ref = lto_input_sleb128 (ib);\n     }\n \n-  estimated_stack_size = lto_input_sleb128 (ib);\n-  stack_frame_offset = lto_input_sleb128 (ib);\n-  ref = lto_input_sleb128 (ib);\n-  time = lto_input_sleb128 (ib);\n-  size = lto_input_sleb128 (ib);\n-  estimated_growth = lto_input_sleb128 (ib);\n-  inlined = lto_input_uleb128 (ib);\n   ref2 = lto_input_sleb128 (ib);\n   same_body_count = lto_input_uleb128 (ib);\n \n@@ -704,17 +669,9 @@ input_node (struct lto_file_decl_data *file_data,\n \t\t\tsize_inlining_benefit);\n   bitpack_delete (bp);\n \n-  node->global.estimated_stack_size = estimated_stack_size;\n-  node->global.stack_frame_offset = stack_frame_offset;\n-  node->global.time = time;\n-  node->global.size = size;\n-\n   /* Store a reference for now, and fix up later to be a pointer.  */\n   node->global.inlined_to = (cgraph_node_ptr) (intptr_t) ref;\n \n-  node->global.estimated_growth = estimated_growth;\n-  node->global.inlined = inlined;\n-\n   /* Store a reference for now, and fix up later to be a pointer.  */\n   node->same_comdat_group = (cgraph_node_ptr) (intptr_t) ref2;\n "}]}