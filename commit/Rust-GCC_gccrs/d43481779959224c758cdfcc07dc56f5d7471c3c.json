{"sha": "d43481779959224c758cdfcc07dc56f5d7471c3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzNDgxNzc5OTU5MjI0Yzc1OGNkZmNjMDdkYzU2ZjVkNzQ3MWMzYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-07-28T09:01:09Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-07-28T09:01:09Z"}, "message": "prefix.c (update_path): Don't strip single `.' path components unless stripping a later `..' component.\n\n\t* prefix.c (update_path): Don't strip single `.' path components\n\tunless stripping a later `..' component.  Exit loop as soon as\n\ta valid path is found.\n\nFrom-SVN: r55814", "tree": {"sha": "ef688e323315a98c3c31c2872e3c7f41a6ac3c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef688e323315a98c3c31c2872e3c7f41a6ac3c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d43481779959224c758cdfcc07dc56f5d7471c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43481779959224c758cdfcc07dc56f5d7471c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43481779959224c758cdfcc07dc56f5d7471c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43481779959224c758cdfcc07dc56f5d7471c3c/comments", "author": null, "committer": null, "parents": [{"sha": "3e75a2f99d191267d767d11e8e1900c1e409c80f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e75a2f99d191267d767d11e8e1900c1e409c80f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e75a2f99d191267d767d11e8e1900c1e409c80f"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "8ab4daf1090dc53c31a671016b0105b74ba1ffe7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43481779959224c758cdfcc07dc56f5d7471c3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43481779959224c758cdfcc07dc56f5d7471c3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d43481779959224c758cdfcc07dc56f5d7471c3c", "patch": "@@ -1,3 +1,9 @@\n+2002-07-28  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* prefix.c (update_path): Don't strip single `.' path components\n+\tunless stripping a later `..' component.  Exit loop as soon as\n+\ta valid path is found.\n+\n 2002-07-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.def [DEF_GCC_BUILTIN]: Require an explicit ATTRS"}, {"sha": "06930fee2ab1bfdc35c3f2aa4bf815758020e524", "filename": "gcc/prefix.c", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43481779959224c758cdfcc07dc56f5d7471c3c/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43481779959224c758cdfcc07dc56f5d7471c3c/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=d43481779959224c758cdfcc07dc56f5d7471c3c", "patch": "@@ -284,49 +284,39 @@ update_path (path, key)\n       p = strchr (p, '.');\n       if (p == NULL)\n \tbreak;\n-      /* Get rid of a leading `./' and replace `/./' with `/', when\n-\t such components are followed with another `.'.  */\n-      if (IS_DIR_SEPARATOR (p[1])\n-\t  && (p == result || IS_DIR_SEPARATOR (p[-1])))\n-\t{\n-\t  src = p + 2;\n-\t  /* Be careful about .//foo  */\n-\t  while (IS_DIR_SEPARATOR (*src))\n-\t    ++src;\n-\t  if (*src == '.')\n-\t    {\n-\t      dest = p;\n-\t      while ((*dest++ = *src++) != 0)\n-\t\t;\n-\t    }\n-\t  else\n-\t    ++p;\n-\t}\n       /* Look for `/../'  */\n-      else if (p[1] == '.'\n-\t       && IS_DIR_SEPARATOR (p[2])\n-\t       && (p != result && IS_DIR_SEPARATOR (p[-1])))\n+      if (p[1] == '.'\n+\t  && IS_DIR_SEPARATOR (p[2])\n+\t  && (p != result && IS_DIR_SEPARATOR (p[-1])))\n \t{\n \t  *p = 0;\n \t  if (!ALWAYS_STRIP_DOTDOT && access (result, X_OK) == 0)\n \t    {\n \t      *p = '.';\n-\t      p += 3;\n+\t      break;\n \t    }\n \t  else\n \t    {\n \t      /* We can't access the dir, so we won't be able to\n-\t\t access dir/.. either.  Strip out dir/..  We know dir\n-\t\t isn't `.' because we've rid ourselves of `.' path\n-\t\t components above.  */\n-\t      dest = p - 1;\n-\t      while (dest != result && IS_DIR_SEPARATOR (*dest))\n-\t\t--dest;\n-\t      while (dest != result && !IS_DIR_SEPARATOR (dest[-1]))\n-\t\t--dest;\n-\t      /* Don't strip leading `/'.  */\n-\t      while (IS_DIR_SEPARATOR (*dest))\n-\t\t++dest;\n+\t\t access dir/.. either.  Strip out `dir/../'.  If `dir'\n+\t\t turns out to be `.', strip one more path component.  */\n+\t      dest = p;\n+\t      do\n+\t\t{\n+\t\t  --dest;\n+\t\t  while (dest != result && IS_DIR_SEPARATOR (*dest))\n+\t\t    --dest;\n+\t\t  while (dest != result && !IS_DIR_SEPARATOR (dest[-1]))\n+\t\t    --dest;\n+\t\t}\n+\t      while (dest != result && *dest == '.');\n+\t      /* If we have something like `./..' or `/..', don't\n+\t\t strip anything more.  */\n+\t      if (*dest == '.' || IS_DIR_SEPARATOR (*dest))\n+\t\t{\n+\t\t  *p = '.';\n+\t\t  break;\n+\t\t}\n \t      src = p + 3;\n \t      while (IS_DIR_SEPARATOR (*src))\n \t\t++src;"}]}