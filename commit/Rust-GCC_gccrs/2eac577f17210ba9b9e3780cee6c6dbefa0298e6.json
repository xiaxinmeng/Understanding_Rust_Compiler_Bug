{"sha": "2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhYzU3N2YxNzIxMGJhOWI5ZTM3ODBjZWU2YzZkYmVmYTAyOThlNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-01T22:02:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-01T22:02:41Z"}, "message": "cppinternals.texi, [...]: Use terminology \"testsuite\" and \"enumerated\".\n\n\t* doc/cppinternals.texi, doc/install.texi, doc/invoke.texi,\n\tdoc/md.texi, doc/sourcebuild.texi, doc/tm.texi, doc/trouble.texi:\n\tUse terminology \"testsuite\" and \"enumerated\".\n\nFrom-SVN: r84000", "tree": {"sha": "c8a38bbac8373c4d8c8889c596d4fd2c255b6257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a38bbac8373c4d8c8889c596d4fd2c255b6257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bac38110a0cca955b7d3e8ab9697ab33027b9e0"}], "stats": {"total": 102, "additions": 54, "deletions": 48}, "files": [{"sha": "f8351e59bb754718ef9e57f26c5f9ec4a15166ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -1,3 +1,9 @@\n+2004-07-01  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/cppinternals.texi, doc/install.texi, doc/invoke.texi,\n+\tdoc/md.texi, doc/sourcebuild.texi, doc/tm.texi, doc/trouble.texi:\n+\tUse terminology \"testsuite\" and \"enumerated\".\n+\n 2004-07-01  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (reg_save): Use INVALID_REGNUM."}, {"sha": "2b8c50868837dd1f538ff65e93ab493794450270", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -226,7 +226,7 @@ foo\n @end smallexample\n \n This is a good example of the subtlety of getting token spacing correct\n-in the preprocessor; there are plenty of tests in the test suite for\n+in the preprocessor; there are plenty of tests in the testsuite for\n corner cases like this.\n \n The lexer is written to treat each of @samp{\\r}, @samp{\\n}, @samp{\\r\\n}"}, {"sha": "18f1b7b8a928ab5be8f1be052c0c716a472f80fb", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -1688,7 +1688,7 @@ might emit some harmless messages resembling\n @samp{WARNING: Couldn't find the global config file.} or\n @samp{WARNING: Couldn't find tool init file} that can be ignored.\n \n-@section How can I run the test suite on selected tests?\n+@section How can I run the testsuite on selected tests?\n \n In order to run sets of tests selectively, there are targets\n @samp{make check-gcc} and @samp{make check-g++}\n@@ -1801,7 +1801,7 @@ specifying the location of that tree when invoking @samp{make}, as in\n @samp{make MAUVEDIR=~/mauve check}.\n \n @uref{http://www-124.ibm.com/developerworks/oss/cvs/jikes/~checkout~/jacks/jacks.html,,Jacks}\n-is a free test suite that tests Java compiler front ends.  This suite\n+is a free testsuite that tests Java compiler front ends.  This suite\n can be run as part of libgcj testing by placing the Jacks tree within\n the libjava testsuite at @file{libjava/testsuite/libjava.jacks/jacks}.\n "}, {"sha": "4d05a98fd86ce3b4749b61edfbdb1dbd23c54a8c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -1718,7 +1718,7 @@ to a plain pointer.\n @item -Wsign-promo @r{(C++ only)}\n @opindex Wsign-promo\n Warn when overload resolution chooses a promotion from unsigned or\n-enumeral type to a signed type, over a conversion to an unsigned type of\n+enumerated type to a signed type, over a conversion to an unsigned type of\n the same size.  Previous versions of G++ would try to preserve\n unsignedness, but the standard mandates the current behavior.\n \n@@ -2347,7 +2347,7 @@ exceptions are @samp{main} and functions defined in system headers.\n \n @item -Wswitch\n @opindex Wswitch\n-Warn whenever a @code{switch} statement has an index of enumeral type\n+Warn whenever a @code{switch} statement has an index of enumerated type\n and lacks a @code{case} for one or more of the named codes of that\n enumeration.  (The presence of a @code{default} label prevents this\n warning.)  @code{case} labels outside the enumeration range also\n@@ -2360,7 +2360,7 @@ case.\n \n @item -Wswitch-enum\n @opindex Wswitch-enum\n-Warn whenever a @code{switch} statement has an index of enumeral type\n+Warn whenever a @code{switch} statement has an index of enumerated type\n and lacks a @code{case} for one or more of the named codes of that\n enumeration.  @code{case} labels outside the enumeration range also\n provoke warnings when this option is used."}, {"sha": "b7ccecef30398ad67a708b62c97f3906e1fbd242", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -4877,7 +4877,7 @@ specified for an attribute, the following are defined:\n A @samp{#define} is written for the symbol @samp{HAVE_ATTR_@var{name}}.\n \n @item\n-An enumeral class is defined for @samp{attr_@var{name}} with\n+An enumerated class is defined for @samp{attr_@var{name}} with\n elements of the form @samp{@var{upper-name}_@var{upper-value}} where\n the attribute name and value are first converted to uppercase.\n "}, {"sha": "400634ba4c5c199fe21de8990e30201a1a42113c", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -14,7 +14,7 @@ which it is presumed that you are familiar.\n * Configure Terms:: Configuration terminology and history.\n * Top Level::       The top level source directory.\n * gcc Directory::   The @file{gcc} subdirectory.\n-* Test Suites::     The GCC test suites.\n+* Testsuites::      The GCC testsuites.\n @end menu\n \n @include configterms.texi\n@@ -44,7 +44,7 @@ front end.\n @item gcc\n The main sources of GCC itself (except for runtime libraries),\n including optimizers, support for different target architectures,\n-language front ends, and test suites.  @xref{gcc Directory, , The\n+language front ends, and testsuites.  @xref{gcc Directory, , The\n @file{gcc} Subdirectory}, for details.\n \n @item include\n@@ -104,7 +104,7 @@ configure, The GNU configure and build system}, for details.\n The @file{gcc} directory contains many files that are part of the C\n sources of GCC, other files used as part of the configuration and\n build process, and subdirectories including documentation and a\n-test suite.  The files that are sources of GCC are documented in a\n+testsuite.  The files that are sources of GCC are documented in a\n separate chapter.  @xref{Passes, , Passes and Files of the Compiler}.\n \n @menu\n@@ -172,8 +172,8 @@ by @samp{make gcc.pot}, and @file{EXCLUDES}, a list of files from\n which messages should not be extracted.\n \n @item testsuite\n-The GCC test suites (except for those for runtime libraries).\n-@xref{Test Suites}.\n+The GCC testsuites (except for those for runtime libraries).\n+@xref{Testsuites}.\n @end table\n \n @node Configuration\n@@ -488,9 +488,9 @@ Details of source file suffixes for that language and @option{-x\n Entries in @code{default_compilers} in @file{gcc.c} for source file\n suffixes for that language.\n @item\n-Preferably test suites, which may be under @file{gcc/testsuite} or\n+Preferably testsuites, which may be under @file{gcc/testsuite} or\n runtime library directories.  FIXME: document somewhere how to write\n-test suite harnesses.\n+testsuite harnesses.\n @item\n Probably a runtime library for the language, outside the @file{gcc}\n directory.  FIXME: document this further.\n@@ -804,26 +804,26 @@ but it would be unusual to add support for a target that does not have\n a maintainer when support is added.\n @end itemize\n \n-@node Test Suites\n-@section Test Suites\n+@node Testsuites\n+@section Testsuites\n \n-GCC contains several test suites to help maintain compiler quality.\n-Most of the runtime libraries and language front ends in GCC have test\n-suites.  Currently only the C language test suites are documented\n+GCC contains several testsuites to help maintain compiler quality.\n+Most of the runtime libraries and language front ends in GCC have\n+testsuites.  Currently only the C language testsuites are documented\n here; FIXME: document the others.\n \n @menu\n-* Test Idioms::     Idioms used in test suite code.\n-* Ada Tests::       The Ada language test suites.\n-* C Tests::         The C language test suites.\n-* libgcj Tests::    The Java library test suites.\n+* Test Idioms::     Idioms used in testsuite code.\n+* Ada Tests::       The Ada language testsuites.\n+* C Tests::         The C language testsuites.\n+* libgcj Tests::    The Java library testsuites.\n * gcov Testing::    Support for testing gcov.\n * profopt Testing:: Support for testing profile-directed optimizations.\n * compat Testing::  Support for testing binary compatibility.\n @end menu\n \n @node Test Idioms\n-@subsection Idioms Used in Test Suite Code\n+@subsection Idioms Used in Testsuite Code\n \n In general C testcases have a trailing @file{-@var{n}.c}, starting\n with @file{-1.c}, in case other testcases with similar names are added\n@@ -841,7 +841,7 @@ been fixed, or whether it may be a regression, but does not give any\n other information about the bug or where discussion of it may be\n found.  Some other language testsuites follow similar conventions.\n \n-In the @file{gcc.dg} test suite, it is often necessary to test that an\n+In the @file{gcc.dg} testsuite, it is often necessary to test that an\n error is indeed a hard error and not just a warning---for example,\n where it is a constraint violation in the C standard, which must\n become an error with @option{-pedantic-errors}.  The following idiom,\n@@ -899,20 +899,21 @@ All testcases must be portable.  Target-specific testcases must have\n appropriate code to avoid causing failures on unsupported systems;\n unfortunately, the mechanisms for this differ by directory.\n \n-FIXME: discuss non-C test suites here.\n+FIXME: discuss non-C testsuites here.\n \n @node Ada Tests\n-@subsection Ada Language Test Suites\n+@subsection Ada Language Testsuites\n \n-The Ada test suite includes executable tests from the ACATS 2.5 test\n-suite, publicly available at @uref{http://www.adaic.org/compilers/acats/2.5}\n+The Ada testsuite includes executable tests from the ACATS 2.5\n+testsuite, publicly available at\n+@uref{http://www.adaic.org/compilers/acats/2.5}\n \n-These tests are integrated in the GCC test suite in the\n+These tests are integrated in the GCC testsuite in the\n @file{gcc/testsuite/ada/acats} directory, and\n enabled automatically when running @code{make check}, assuming\n the Ada language has been enabled when configuring GCC.\n \n-You can also run the Ada test suite independently, using\n+You can also run the Ada testsuite independently, using\n @code{make check-ada}, or run a subset of the tests by specifying which\n chapter to run, e.g:\n \n@@ -935,9 +936,9 @@ These tests are run using the build tree: they can be run without doing\n a @code{make install}.\n \n @node C Tests\n-@subsection C Language Test Suites\n+@subsection C Language Testsuites\n \n-GCC contains the following C language test suites, in the\n+GCC contains the following C language testsuites, in the\n @file{gcc/testsuite} directory:\n \n @table @file\n@@ -986,7 +987,7 @@ FIXME: describe this.\n \n This directory should probably not be used for new tests.\n @item gcc.c-torture/compile\n-This test suite contains test cases that should compile, but do not\n+This testsuite contains test cases that should compile, but do not\n need to link or run.  These test cases are compiled with several\n different combinations of optimization options.  All warnings are\n disabled for these test cases, so this directory is not suitable if\n@@ -996,7 +997,7 @@ platforms, by the use of @file{.x} files, mostly these test cases\n should not contain platform dependencies.  FIXME: discuss how defines\n such as @code{NO_LABEL_VALUES} and @code{STACK_SIZE} are used.\n @item gcc.c-torture/execute\n-This test suite contains test cases that should compile, link and run;\n+This testsuite contains test cases that should compile, link and run;\n otherwise the same comments as for @file{gcc.c-torture/compile} apply.\n @item gcc.c-torture/execute/ieee\n This contains tests which are specific to IEEE floating point.\n@@ -1033,14 +1034,14 @@ FIXME: merge in @file{testsuite/README.gcc} and discuss the format of\n test cases and magic comments more.\n \n @node libgcj Tests\n-@subsection The Java library test suites.\n+@subsection The Java library testsuites.\n \n Runtime tests are executed via @samp{make check} in the\n @file{@var{target}/libjava/testsuite} directory in the build\n tree.  Additional runtime tests can be checked into this testsuite.\n \n Regression testing of the core packages in libgcj is also covered by the\n-Mauve test suite.  The @uref{http://sources.redhat.com/mauve/,,Mauve Project}\n+Mauve testsuite.  The @uref{http://sources.redhat.com/mauve/,,Mauve Project}\n develops tests for the Java Class Libraries.  These tests are run as part\n of libgcj testing by placing the Mauve tree within the libjava testsuite\n sources at @file{libjava/testsuite/libjava.mauve/mauve}, or by specifying\n@@ -1054,8 +1055,8 @@ Update this file when adding new failing tests to Mauve, or when fixing\n bugs in libgcj that had caused Mauve test failures.\n \n The @uref{http://oss.software.ibm.com/developerworks/opensource/jacks/,,\n-Jacks} project provides a test suite for Java compilers that can be used\n-to test changes that affect the GCJ front end.  This test suite is run as\n+Jacks} project provides a testsuite for Java compilers that can be used\n+to test changes that affect the GCJ front end.  This testsuite is run as\n part of Java testing by placing the Jacks tree within the the libjava\n testsuite sources at @file{libjava/testsuite/libjava.jacks/jacks}.\n \n@@ -1170,11 +1171,10 @@ torture tests\n @subsection Support for testing binary compatibility\n \n The file @file{compat.exp} provides language-independent support for\n-binary compatibility testing.  It supports testing interoperability\n-of two compilers that follow the same ABI, or of multiple sets of\n-compiler options that should not affect binary compatibility.\n-It is intended to be used for test suites that complement ABI test\n-suites.\n+binary compatibility testing.  It supports testing interoperability of\n+two compilers that follow the same ABI, or of multiple sets of\n+compiler options that should not affect binary compatibility.  It is\n+intended to be used for testsuites that complement ABI testsuites.\n \n A test supported by this framework has three parts, each in a\n separate source file: a main program and two pieces that interact"}, {"sha": "b196ac4d85421f61b62308fb8eabc4a60f7f92f3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -2318,9 +2318,9 @@ single-byte values can be loaded or stored.  This is so that\n @code{PREFERRED_RELOAD_CLASS} can always have a possible value to return.\n \n @deftp {Data type} {enum reg_class}\n-An enumeral type that must be defined with all the register class names\n-as enumeral values.  @code{NO_REGS} must be first.  @code{ALL_REGS}\n-must be the last register class, followed by one more enumeral value,\n+An enumerated type that must be defined with all the register class names\n+as enumerated values.  @code{NO_REGS} must be first.  @code{ALL_REGS}\n+must be the last register class, followed by one more enumerated value,\n @code{LIM_REG_CLASSES}, which is not a register class but rather\n tells how many classes there are.\n "}, {"sha": "c28f9a21f5237c563ed22c994ea0dac6868b7ed4", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eac577f17210ba9b9e3780cee6c6dbefa0298e6/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=2eac577f17210ba9b9e3780cee6c6dbefa0298e6", "patch": "@@ -1423,7 +1423,7 @@ an error message for a certain program.\n ISO C requires a ``diagnostic'' message for certain kinds of invalid\n programs, but a warning is defined by GCC to count as a diagnostic.  If\n GCC produces a warning but not an error, that is correct ISO C support.\n-If test suites call this ``failure'', they should be run with the GCC\n+If testsuites call this ``failure'', they should be run with the GCC\n option @option{-pedantic-errors}, which will turn these warnings into\n errors.\n "}]}