{"sha": "a80e0583973cb1664adf663d499c43c0425018b6", "node_id": "C_kwDOANBUbNoAKGE4MGUwNTgzOTczY2IxNjY0YWRmNjYzZDQ5OWM0M2MwNDI1MDE4YjY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-12T12:22:53Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:23Z"}, "message": "[Ada] Extend No_Dependence restriction to code generation (continued)\n\ngcc/ada/\n\n\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Op_Divide>: Report a\n\tviolation of No_Dependence on System.GCC if the result type is\n\tlarger than a word.\n\t<N_Op_Shift>: Likewise.\n\t<N_Op_Mod>: Likewise.\n\t<N_Op_Rem>: Likewise.\n\t(convert_with_check): Report a violation of No_Dependence on\n\tSystem.GCC for a conversion between an integer type larger than\n\ta word and a floating-point type.", "tree": {"sha": "97735b4cd884a28b38b297612a0340b3692524d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97735b4cd884a28b38b297612a0340b3692524d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a80e0583973cb1664adf663d499c43c0425018b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80e0583973cb1664adf663d499c43c0425018b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80e0583973cb1664adf663d499c43c0425018b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80e0583973cb1664adf663d499c43c0425018b6/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e34c91420ffcacb27e4b0a9a83b97b9ee42a337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e34c91420ffcacb27e4b0a9a83b97b9ee42a337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e34c91420ffcacb27e4b0a9a83b97b9ee42a337"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "eae15dc0b73f4b3eb544e4e75249a8ea6e2d0619", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a80e0583973cb1664adf663d499c43c0425018b6/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a80e0583973cb1664adf663d499c43c0425018b6/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=a80e0583973cb1664adf663d499c43c0425018b6", "patch": "@@ -6864,6 +6864,11 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t    : (Rounded_Result (gnat_node)\n \t\t\t\t       ? ROUND_DIV_EXPR : TRUNC_DIV_EXPR),\n \t\t\t\t    gnu_result_type, gnu_lhs, gnu_rhs);\n+      /* If the result type is larger than a word, then declare the dependence\n+\t on the libgcc routine.  */\n+      if (INTEGRAL_TYPE_P (gnu_result_type)\n+\t  && TYPE_PRECISION (gnu_result_type) > BITS_PER_WORD)\n+\tCheck_Restriction_No_Dependence_On_System (Name_Gcc, gnat_node);\n       break;\n \n     case N_Op_Eq:\n@@ -6923,6 +6928,10 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    gnu_rhs = convert (gnu_count_type, gnu_rhs);\n \t    gnu_max_shift\n \t      = convert (TREE_TYPE (gnu_rhs), TYPE_SIZE (gnu_type));\n+\t    /* If the result type is larger than a word, then declare the dependence\n+\t       on the libgcc routine.  */\n+\t    if (TYPE_PRECISION (gnu_result_type) > BITS_PER_WORD)\n+\t      Check_Restriction_No_Dependence_On_System (Name_Gcc, gnat_node);\n \t  }\n \n \t/* If this is a comparison between (potentially) large aggregates, then\n@@ -6935,6 +6944,12 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  Check_Restriction_No_Dependence_On_System (Name_Memory_Compare,\n \t\t\t\t\t\t     gnat_node);\n \n+\t/* If this is a modulo/remainder and the result type is larger than a\n+\t   word, then declare the dependence on the libgcc routine.  */\n+\telse if ((kind == N_Op_Mod ||kind == N_Op_Rem)\n+\t\t && TYPE_PRECISION (gnu_result_type) > BITS_PER_WORD)\n+\t  Check_Restriction_No_Dependence_On_System (Name_Gcc, gnat_node);\n+\n \t/* Pending generic support for efficient vector logical operations in\n \t   GCC, convert vectors to their representative array type view.  */\n \tgnu_lhs = maybe_vector_array (gnu_lhs);\n@@ -9749,6 +9764,16 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflow_p,\n   else\n     gnu_result = convert (gnu_base_type, gnu_result);\n \n+  /* If this is a conversion between an integer type larger than a word and a\n+     floating-point type, then declare the dependence on the libgcc routine.  */\n+  if ((INTEGRAL_TYPE_P (gnu_in_base_type)\n+       && TYPE_PRECISION (gnu_in_base_type) > BITS_PER_WORD\n+       && FLOAT_TYPE_P (gnu_base_type))\n+      || (FLOAT_TYPE_P (gnu_in_base_type)\n+\t  && INTEGRAL_TYPE_P (gnu_base_type)\n+\t  && TYPE_PRECISION (gnu_base_type) > BITS_PER_WORD))\n+    Check_Restriction_No_Dependence_On_System (Name_Gcc, gnat_node);\n+\n   return convert (gnu_type, gnu_result);\n }\n "}]}