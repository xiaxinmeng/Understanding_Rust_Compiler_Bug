{"sha": "fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3YzM0YjA4MWZkNzY1ZTdiYTZjNzEwOGI0YWM5YWM0NmI0N2Q2MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-07T01:46:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-07T01:46:22Z"}, "message": "ia64.c (sdata_symbolic_operand): Mark unused args.\n\n        * config/ia64/ia64.c (sdata_symbolic_operand): Mark unused args.\n        (symbolic_operand, function_operand, setjmp_operand): Likewise.\n        (shift_count_operand, shift_32bit_count_operand): Likewise.\n        (shladd_operand, fetchadd_operand, ia64_function_prologue): Likewise.\n        (ia64_function_epilogue, ia64_setup_incoming_varargs): Likewise.\n        (ia64_function_arg_partial_nregs, ia64_function_value): Likewise.\n        (ia64_print_operand_address, ia64_secondary_reload_class): Likewise.\n        (ia64_expand_builtin): Likewise.\n        (call_multiple_values_operation): Make dest_regno unsigned.\n\nFrom-SVN: r33753", "tree": {"sha": "0a516f13893ab90a6a8bf4aa81e98a19122b7d8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a516f13893ab90a6a8bf4aa81e98a19122b7d8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61/comments", "author": null, "committer": null, "parents": [{"sha": "809d4ef105b860e85f92006d9fb7dfb8e23f99ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809d4ef105b860e85f92006d9fb7dfb8e23f99ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809d4ef105b860e85f92006d9fb7dfb8e23f99ad"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "33bc27a6f349cb2d45bd4afdcaf2fa411c0b3550", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61", "patch": "@@ -1,4 +1,3 @@\n-2000-05-06  Richard Henderson  <rth@cygnus.com>\n 2000-05-06  Richard Henderson  <rth@cygnus.com>\n \n \t* c-decl.c: Include \"tm_p.h\".\n@@ -19,6 +18,16 @@\n \t* config/ia64/ia64.h (ASM_OUTPUT_BYTE): Mask and cast value to int\n \tfor printing.\n \n+\t* config/ia64/ia64.c (sdata_symbolic_operand): Mark unused args.\n+\t(symbolic_operand, function_operand, setjmp_operand): Likewise.\n+\t(shift_count_operand, shift_32bit_count_operand): Likewise.\n+\t(shladd_operand, fetchadd_operand, ia64_function_prologue): Likewise.\n+\t(ia64_function_epilogue, ia64_setup_incoming_varargs): Likewise.\n+\t(ia64_function_arg_partial_nregs, ia64_function_value): Likewise.\n+\t(ia64_print_operand_address, ia64_secondary_reload_class): Likewise.\n+\t(ia64_expand_builtin): Likewise.\n+\t(call_multiple_values_operation): Make dest_regno unsigned.\n+\n 2000-05-06  Richard Henderson  <rth@cygnus.com>\n \n \t* rtl.def (DEFINE_COND_EXEC): New."}, {"sha": "d42467b902092e84a0f4a0710a08cda44007de71", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fd7c34b081fd765e7ba6c7108b4ac9ac46b47d61", "patch": "@@ -140,7 +140,7 @@ call_operand (op, mode)\n int\n sdata_symbolic_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -163,7 +163,7 @@ sdata_symbolic_operand (op, mode)\n int\n symbolic_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -183,7 +183,7 @@ symbolic_operand (op, mode)\n int\n function_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == SYMBOL_REF && SYMBOL_REF_FLAG (op))\n     return 1;\n@@ -198,7 +198,7 @@ function_operand (op, mode)\n int\n setjmp_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   const char *name;\n   int retval = 0;\n@@ -350,7 +350,7 @@ reg_or_22bit_operand (op, mode)\n int\n shift_count_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == CONST_INT && CONST_OK_FOR_M (INTVAL (op)))\n \t  || GET_CODE (op) == CONSTANT_P_RTX);\n@@ -361,7 +361,7 @@ shift_count_operand (op, mode)\n int\n shift_32bit_count_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return ((GET_CODE (op) == CONST_INT\n \t   && (INTVAL (op) >= 0 && INTVAL (op) < 32))\n@@ -373,7 +373,7 @@ shift_32bit_count_operand (op, mode)\n int\n shladd_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) == 2 || INTVAL (op) == 4\n@@ -385,7 +385,7 @@ shladd_operand (op, mode)\n int\n fetchadd_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n           && (INTVAL (op) == -16 || INTVAL (op) == -8 ||\n@@ -443,7 +443,7 @@ call_multiple_values_operation (op, mode)\n {\n   int count = XVECLEN (op, 0) - 2;\n   int i;\n-  int dest_regno;\n+  unsigned int dest_regno;\n \n   /* Perform a quick check so we don't block up below.  */\n   if (count <= 1\n@@ -1082,7 +1082,7 @@ ia64_expand_epilogue ()\n void\n ia64_function_prologue (file, size)\n      FILE *file;\n-     int size;\n+     int size ATTRIBUTE_UNUSED;\n {\n   rtx insn;\n   if (ia64_need_regstk)\n@@ -1123,8 +1123,8 @@ ia64_function_prologue (file, size)\n \n void\n ia64_function_epilogue (file, size)\n-     FILE *file;\n-     int size;\n+     FILE *file ATTRIBUTE_UNUSED;\n+     int size ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -1144,8 +1144,8 @@ ia64_direct_return ()\n void\n ia64_setup_incoming_varargs (cum, int_mode, type, pretend_size, second_time)\n      CUMULATIVE_ARGS cum;\n-     int             int_mode;\n-     tree            type;\n+     int             int_mode ATTRIBUTE_UNUSED;\n+     tree            type ATTRIBUTE_UNUSED;\n      int *           pretend_size;\n      int\t     second_time;\n {\n@@ -1418,7 +1418,7 @@ ia64_function_arg_partial_nregs (cum, mode, type, named)\n      CUMULATIVE_ARGS *cum;\n      enum machine_mode mode;\n      tree type;\n-     int named;\n+     int named ATTRIBUTE_UNUSED;\n {\n   int words = (((mode == BLKmode ? int_size_in_bytes (type)\n \t\t : GET_MODE_SIZE (mode)) + UNITS_PER_WORD - 1)\n@@ -1623,7 +1623,7 @@ ia64_return_in_memory (valtype)\n rtx\n ia64_function_value (valtype, func)\n      tree valtype;\n-     tree func;\n+     tree func ATTRIBUTE_UNUSED;\n {\n   enum machine_mode mode;\n   enum machine_mode hfa_mode;\n@@ -1670,8 +1670,8 @@ ia64_function_value (valtype, func)\n \n void\n ia64_print_operand_address (stream, address)\n-     FILE * stream;\n-     rtx    address;\n+     FILE * stream ATTRIBUTE_UNUSED;\n+     rtx    address ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -1858,7 +1858,7 @@ ia64_print_operand (file, x, code)\n enum reg_class\n ia64_secondary_reload_class (class, mode, x)\n      enum reg_class class;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      rtx x;\n {\n   int regno = -1;\n@@ -3515,9 +3515,9 @@ rtx\n ia64_expand_builtin (exp, target, subtarget, mode, ignore)\n      tree exp;\n      rtx target;\n-     rtx subtarget;\n-     enum machine_mode mode;\n-     int ignore;\n+     rtx subtarget ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     int ignore ATTRIBUTE_UNUSED;\n {\n   rtx op0, op1, pat;\n   rtx tmp_reg;"}]}