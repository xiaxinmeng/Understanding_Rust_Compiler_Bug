{"sha": "bcc8cc820aee26465255c3aa47d3367fdd4e3885", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNjOGNjODIwYWVlMjY0NjUyNTVjM2FhNDdkMzM2N2ZkZDRlMzg4NQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-11-07T17:44:57Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-11-07T17:44:57Z"}, "message": "Fix libstdc++-v3 build failure on sh64-elf:\n\n\t* sh-protos.h (sh_pch_valid_p): Declare.\n\t* sh.c (\"intl.h\"): Include.\n\t(TARGET_PCH_VALID_P): Override.\n\t(sh_target_switches): New variable.\n\t(target_switches): Define.\n\t(sh_pch_valid_p): New function.\n\n\t* sh.h (MODE_AFTER): Don't change mode unless TARGET_HITACHI.\n\nFrom-SVN: r73338", "tree": {"sha": "bfa2c68ad407e6ac4b07e9f58d3a240df9729126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa2c68ad407e6ac4b07e9f58d3a240df9729126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcc8cc820aee26465255c3aa47d3367fdd4e3885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc8cc820aee26465255c3aa47d3367fdd4e3885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc8cc820aee26465255c3aa47d3367fdd4e3885", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc8cc820aee26465255c3aa47d3367fdd4e3885/comments", "author": null, "committer": null, "parents": [{"sha": "b938ad89a5372c6b9cc420cb5de51d57a2d505e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b938ad89a5372c6b9cc420cb5de51d57a2d505e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b938ad89a5372c6b9cc420cb5de51d57a2d505e1"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "0e70f63e886df64d303ace228074397e1f428ab8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcc8cc820aee26465255c3aa47d3367fdd4e3885", "patch": "@@ -1,3 +1,14 @@\n+2003-11-07  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh-protos.h (sh_pch_valid_p): Declare.\n+\t* sh.c (\"intl.h\"): Include.\n+\t(TARGET_PCH_VALID_P): Override.\n+\t(sh_target_switches): New variable.\n+\t(target_switches): Define.\n+\t(sh_pch_valid_p): New function.\n+\n+\t* sh.h (MODE_AFTER): Don't change mode unless TARGET_HITACHI.\n+\n 2003-11-07  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (x86_64_sign_extended_value):  Return false from tls variables."}, {"sha": "008d4bcd62fa10ea6340c11495683b96c75df924", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=bcc8cc820aee26465255c3aa47d3367fdd4e3885", "patch": "@@ -138,5 +138,6 @@ extern rtx sh_get_pr_initial_val (void);\n extern rtx sh_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void sh_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n+extern const char *sh_pch_valid_p (const void *data_p, size_t sz);\n \n #endif /* ! GCC_SH_PROTOS_H */"}, {"sha": "52f9500aae40ba71bc521994b65bfa4a7aa5c9c8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=bcc8cc820aee26465255c3aa47d3367fdd4e3885", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"basic-block.h\"\n #include \"ra.h\"\n #include \"cfglayout.h\"\n+#include \"intl.h\"\n \n int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n \n@@ -349,6 +350,9 @@ static tree sh_build_builtin_va_list (void);\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST sh_build_builtin_va_list\n \n+#undef TARGET_PCH_VALID_P\n+#define TARGET_PCH_VALID_P sh_pch_valid_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Print the operand address in x to the stream.  */\n@@ -6837,6 +6841,90 @@ sh_cfun_interrupt_handler_p (void)\n \t\t\t    DECL_ATTRIBUTES (current_function_decl))\n \t  != NULL_TREE);\n }\n+\n+/* ??? target_switches in toplev.c is static, hence we have to duplicate it.  */\n+static const struct\n+{\n+  const char *const name;\n+  const int value;\n+  const char *const description;\n+}\n+sh_target_switches[] = TARGET_SWITCHES;\n+#define target_switches sh_target_switches\n+\n+/* Like default_pch_valid_p, but take flag_mask into account.  */\n+const char *\n+sh_pch_valid_p (const void *data_p, size_t len)\n+{\n+  const char *data = (const char *)data_p;\n+  const char *flag_that_differs = NULL;\n+  size_t i;\n+  int old_flags;\n+  int flag_mask\n+    = (SH1_BIT | SH2_BIT | SH3_BIT | SH_E_BIT | HARD_SH4_BIT | FPU_SINGLE_BIT\n+       | SH4_BIT | HITACHI_BIT | LITTLE_ENDIAN_BIT);\n+  \n+  /* -fpic and -fpie also usually make a PCH invalid.  */\n+  if (data[0] != flag_pic)\n+    return _(\"created and used with different settings of -fpic\");\n+  if (data[1] != flag_pie)\n+    return _(\"created and used with different settings of -fpie\");\n+  data += 2;\n+\n+  /* Check target_flags.  */\n+  memcpy (&old_flags, data, sizeof (target_flags));\n+  if (((old_flags ^ target_flags) & flag_mask) != 0)\n+    {\n+      for (i = 0; i < ARRAY_SIZE (target_switches); i++)\n+\t{\n+\t  int bits;\n+\n+\t  bits = target_switches[i].value;\n+\t  if (bits < 0)\n+\t    bits = -bits;\n+\t  bits &= flag_mask;\n+\t  if ((target_flags & bits) != (old_flags & bits))\n+\t    {\n+\t      flag_that_differs = target_switches[i].name;\n+\t      goto make_message;\n+\t    }\n+\t}\n+      abort ();\n+    }\n+  data += sizeof (target_flags);\n+  len -= sizeof (target_flags);\n+  \n+  /* Check string options.  */\n+#ifdef TARGET_OPTIONS\n+  for (i = 0; i < ARRAY_SIZE (target_options); i++)\n+    {\n+      const char *str = *target_options[i].variable;\n+      size_t l;\n+      if (! str)\n+\tstr = \"\";\n+      l = strlen (str) + 1;\n+      if (len < l || memcmp (data, str, l) != 0)\n+\t{\n+\t  flag_that_differs = target_options[i].prefix;\n+\t  goto make_message;\n+\t}\n+      data += l;\n+      len -= l;\n+    }\n+#endif\n+\n+  return NULL;\n+  \n+ make_message:\n+  {\n+    char *r;\n+    asprintf (&r, _(\"created and used with differing settings of `-m%s'\"),\n+\t\t  flag_that_differs);\n+    if (r == NULL)\n+      return _(\"out of memory\");\n+    return r;\n+  }\n+}\n \f\n /* Predicates used by the templates.  */\n "}, {"sha": "581f7efb9cec146aed2712b031af39dc93d2b933", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcc8cc820aee26465255c3aa47d3367fdd4e3885/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=bcc8cc820aee26465255c3aa47d3367fdd4e3885", "patch": "@@ -3242,7 +3242,8 @@ extern int rtx_equal_function_value_matters;\n    : FP_MODE_NONE)\n \n #define MODE_AFTER(MODE, INSN)                  \\\n-     (recog_memoized (INSN) >= 0                \\\n+     (TARGET_HITACHI\t\t\t\t\\\n+      && recog_memoized (INSN) >= 0\t\t\\\n       && get_attr_fp_set (INSN) != FP_SET_NONE  \\\n       ? get_attr_fp_set (INSN)                  \\\n       : (MODE))"}]}