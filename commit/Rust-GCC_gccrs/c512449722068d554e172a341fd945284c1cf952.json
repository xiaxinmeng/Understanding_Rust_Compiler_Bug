{"sha": "c512449722068d554e172a341fd945284c1cf952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxMjQ0OTcyMjA2OGQ1NTRlMTcyYTM0MWZkOTQ1Mjg0YzFjZjk1Mg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-04-06T16:46:27Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-04-06T16:46:27Z"}, "message": "* doc/install.texi: Update HP-UX 11 installation procedure.\n\nFrom-SVN: r80457", "tree": {"sha": "731a5e73429a76c79933fed11690bc8b1a040037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/731a5e73429a76c79933fed11690bc8b1a040037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c512449722068d554e172a341fd945284c1cf952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c512449722068d554e172a341fd945284c1cf952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c512449722068d554e172a341fd945284c1cf952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c512449722068d554e172a341fd945284c1cf952/comments", "author": null, "committer": null, "parents": [{"sha": "5f3b79c570eea5d64fbbfa90606c07ac63157321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3b79c570eea5d64fbbfa90606c07ac63157321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3b79c570eea5d64fbbfa90606c07ac63157321"}], "stats": {"total": 167, "additions": 105, "deletions": 62}, "files": [{"sha": "567864e851c5c9d12d847329d6b9f51a117e6cd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c512449722068d554e172a341fd945284c1cf952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c512449722068d554e172a341fd945284c1cf952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c512449722068d554e172a341fd945284c1cf952", "patch": "@@ -1,3 +1,7 @@\n+2004-04-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* doc/install.texi: Update HP-UX 11 installation procedure.\n+\n 2004-04-06  Paul Brook  <paul@codesourcery.com>\n \n \t* doc/sourcebuild.texi: Remove obsolete contraint on testcases."}, {"sha": "96ee18505668ad99806161322c3acbf8c88bb25f", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 101, "deletions": 62, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c512449722068d554e172a341fd945284c1cf952/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c512449722068d554e172a341fd945284c1cf952/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=c512449722068d554e172a341fd945284c1cf952", "patch": "@@ -2590,9 +2590,8 @@ use GAS and GDB and configure GCC with the\n @option{--with-as=@dots{}} options.\n \n If you wish to use the pa-risc 2.0 architecture support with a 32-bit\n-runtime, you must use either the HP assembler, gas/binutils 2.11 or newer,\n-or a recent\n-@uref{ftp://sources.redhat.com/pub/binutils/snapshots,,snapshot of gas}.\n+runtime, you must use either the HP assembler, or gas/binutils 2.11\n+or newer.\n \n There are two default scheduling models for instructions.  These are\n PROCESSOR_7100LC and PROCESSOR_8000.  They are selected from the pa-risc\n@@ -2643,62 +2642,108 @@ the failure from @samp{make bootstrap}.\n @end html\n @heading @anchor{hppa*-hp-hpux11}hppa*-hp-hpux11\n \n-GCC 3.0 and up support HP-UX 11.  On 64-bit capable systems, there\n-are two distinct ports.  The @samp{hppa2.0w-hp-hpux11*} port generates\n-code for the 32-bit pa-risc runtime architecture.  It uses the HP\n-linker.  The @samp{hppa64-hp-hpux11*} port generates 64-bit code for the\n-pa-risc 2.0 architecture.  The script config.guess now selects the port\n-type based on the type compiler detected during configuration.  You must\n-set your @env{PATH} or define @env{CC} so that configure finds an appropriate\n-compiler for the initial bootstrap.  Different prefixes must be used if\n-both ports are to be installed on the same system.\n+GCC 3.0 and up support HP-UX 11.  GCC 2.95.x is not supported and cannot\n+be used to compile GCC 3.0 and up.\n \n-It is best to explicitly configure the @samp{hppa64-hp-hpux11*} target\n-with the @option{--with-ld=@dots{}} option.  We support both the HP\n-and GNU linkers for this target.  The two linkers require different\n-link commands.  Thus, it's not possible to switch linkers during a\n-GCC build.  This has been been reported to occur in a unified build\n-of binutils and GCC.\n+Refer to @uref{binaries.html,,binaries} for information about obtaining\n+precompiled GCC binaries for HP-UX.  Precompiled binaries must be obtained\n+to build the Ada language as it can't be bootstrapped using C.  Ada is\n+only available for the 32-bit PA-RISC runtime.  The libffi and libjava\n+haven't been ported to HP-UX and don't build.\n \n-GCC 2.95.x is not supported under HP-UX 11 and cannot be used to\n-compile GCC 3.0 and up.  Refer to @uref{binaries.html,,binaries} for\n-information about obtaining precompiled GCC binaries for HP-UX.\n+It is possible to build GCC 3.3 starting with the bundled HP compiler,\n+but the process requires several steps.  GCC 3.3 can then be used to\n+build later versions.  The fastjar program contains ISO C code and\n+can't be built with the HP bundled compiler.  This problem can be\n+avoided by not building the Java language.  For example, use the\n+@option{--enable-languages=\"c,c++,f77,objc\"} option in your configure\n+command.\n \n-You must use GNU binutils 2.11 or above with the 32-bit port.  Thread\n-support is not currently implemented, so @option{--enable-threads} does\n-not work.  See:\n+Starting with GCC 3.4 an ISO C compiler is required to bootstrap.  The\n+bundled compiler supports only traditional C; you will need either HP's\n+unbundled compiler, or a binary distribution of GCC@.\n \n-@itemize\n-@item @uref{http://gcc.gnu.org/ml/gcc-prs/2002-01/msg00551.html}\n-@item @uref{http://gcc.gnu.org/ml/gcc-bugs/2002-01/msg00663.html}\n-@end itemize\n+There are several possible approaches to building the distribution.\n+Binutils can be built first using the HP tools.  Then, the GCC\n+distribution can be built.  The second approach is to build GCC\n+first using the HP tools, then build binutils, then rebuild GCC.\n+There have been problems with various binary distributions, so it\n+is best not to start from a binary distribution.\n+\n+On 64-bit capable systems, there are two distinct targets.  Different\n+installation prefixes must be used if both are to be installed on\n+the same system.  The @samp{hppa[1-2]*-hp-hpux11*} target generates code\n+for the 32-bit PA-RISC runtime architecture and uses the HP linker.\n+The @samp{hppa64-hp-hpux11*} target generates 64-bit code for the\n+PA-RISC 2.0 architecture.  The HP and GNU linkers are both supported\n+for this target.\n+\n+The script config.guess now selects the target type based on the compiler\n+detected during configuration.  You must define @env{PATH} or @env{CC} so\n+that configure finds an appropriate compiler for the initial bootstrap.\n+When @env{CC} is used, the definition should contain the options that are\n+needed whenever @env{CC} is used.\n+\n+Specifically, options that determine the runtime architecture must be\n+in @env{CC} to correctly select the target for the build.  It is also\n+convenient to place many other compiler options in @env{CC}.  For example, \n+@env{CC=\"cc -Ac +DA2.0W -Wp,-H16376 -D_CLASSIC_TYPES -D_HPUX_SOURCE\"}\n+can be used to bootstrap the GCC 3.3 branch with the HP compiler in\n+64-bit K&R/bundled mode.  The @option{+DA2.0W} option will result in\n+the automatic selection of the @samp{hppa64-hp-hpux11*} target.  The\n+macro definition table of cpp needs to be increased for a successful\n+build with the HP compiler.  _CLASSIC_TYPES and _HPUX_SOURCE need to\n+be defined when building with the bundled compiler, or when using the\n+@option{-Ac} option.  These defines aren't necessary with @option{-Ae}.\n \n-GCC 3.3 and later support weak symbols on the 32-bit port using SOM\n-secondary definition symbols.  This feature is not enabled for earlier\n-versions of HP-UX since there have been bugs in the linker support for\n-secondary symbols.  The HP linker patches @code{PHSS_26559} and\n-@code{PHSS_24304} for HP-UX 11.00 and 11.11, respectively, correct the\n-problem of linker core dumps creating C++ libraries.  Earlier patches\n-may work but they have not been tested.\n-\n-GCC 3.3 nows uses the ELF DT_INIT_ARRAY and DT_FINI_ARRAY capability\n-to run initializers and finalizers on the 64-bit port.  The feature\n-requires CVS binutils as of January 2, 2003, or a subsequent release\n-to correct a problem arising from HP's non-standard use of the .init\n-and .fini sections.  The 32-bit port uses the linker @option{+init}\n-and @option{+fini} options.  As with the support for secondary symbols,\n-there have been bugs in the order in which these options are executed\n-by the HP linker.  So, again a recent linker patch is recommended.\n-\n-The HP assembler has many limitations and is not recommended for either\n-the 32 or 64-bit ports.  For example, it does not support weak symbols\n-or alias definitions.  As a result, explicit template instantiations\n-are required when using C++.  This will make it difficult if not\n-impossible to build many C++ applications.  You also can't generate\n-debugging information when using the HP assembler with GCC.\n+It is best to explicitly configure the @samp{hppa64-hp-hpux11*} target\n+with the @option{--with-ld=@dots{}} option.  This overrides the standard\n+search for ld.  The two linkers supported on this target require different\n+commands.  The default linker is determined during configuration.  As a\n+result, it's not possible to switch linkers in the middle of a GCC build.\n+This has been been reported to sometimes occur in unified builds of\n+binutils and GCC.\n+\n+With GCC 3.0 through 3.2, you must use binutils 2.11 or above.  As of\n+GCC 3.3, binutils 2.14 or later is required.\n+\n+Although the HP assembler can be used for an initial build, it shouldn't\n+be used with any languages other than C and perhaps Fortran due to its\n+many limitations.  For example, it does not support weak symbols or alias\n+definitions.  As a result, explicit template instantiations are required\n+when using C++.  This makes it difficult if not impossible to build many\n+C++ applications.  You can't generate debugging information when using\n+the HP assembler.  Finally, @samp{make bootstrap} fails in the final\n+comparison of object modules due to the time stamps that it inserts into\n+the modules.  The bootstrap can be continued from this point with\n+@samp{make all}.\n+\n+A recent linker patch must be installed for the correct operation of\n+GCC 3.3 and later.  @code{PHSS_26559} and @code{PHSS_24304} are the\n+oldest linker patches that are known to work.  They are for HP-UX\n+11.00 and 11.11, respectively.  @code{PHSS_24303}, the companion to\n+@code{PHSS_24304}, might be usable but it hasn't been tested.  These\n+patches have been superseded.  Consult the HP patch database to obtain\n+the currently recommended linker patch for your system.\n+\n+The patches are necessary for the support of weak symbols on the\n+32-bit port, and for the running of initializers and finalizers.  Weak\n+symbols are implemented using SOM secondary definition symbols.  Prior\n+to HP-UX 11, there are bugs in the linker support for secondary symbols.\n+The patches correct a problem of linker core dumps creating shared\n+libraries containing secondary symbols, as well as various other\n+linking issues involving secondary symbols.\n+\n+GCC 3.3 uses the ELF DT_INIT_ARRAY and DT_FINI_ARRAY capabilities to\n+run initializers and finalizers on the 64-bit port.  The 32-bit port\n+uses the linker @option{+init} and @option{+fini} options for the same\n+purpose.  The patches correct various problems with the +init/+fini\n+options, including program core dumps.  Binutils 2.14 corrects a\n+problem on the 64-bit port resulting from HP's non-standard use of\n+the .init and .fini sections for array initializers and finalizers.\n \n There are a number of issues to consider in selecting which linker to\n-use with the 64-bit port.  The  GNU 64-bit linker can only create dynamic\n+use with the 64-bit port.  The GNU 64-bit linker can only create dynamic\n binaries.  The @option{-static} option causes linking with archive\n libraries but doesn't produce a truly static binary.  Dynamic binaries\n still require final binding by the dynamic loader to resolve a set of\n@@ -2717,16 +2762,10 @@ with @option{-static}.  It doesn't provide stubs for internal\n calls to global functions in shared libraries, so these calls\n can't be overloaded.\n \n-There are several possible approaches to building the distribution.\n-Binutils can be built first using the HP tools.  Then, the GCC\n-distribution can be built.  The second approach is to build GCC\n-first using the HP tools, then build binutils, then rebuild GCC.\n-There have been problems with various binary distributions, so\n-it is best not to start from a binary distribution.\n-\n-Starting with GCC 3.4 an ISO C compiler is required to bootstrap.\n-The bundled compiler supports only traditional C; you will need\n-either HP's unbundled compiler, or a binary distribution of GCC@.\n+Thread support is not implemented in GCC 3.0 through 3.2, so the\n+@option{--enable-threads} configure option does not work.  In 3.3\n+and later, POSIX threads are supported.  The optional DCE thread\n+library is not supported.\n \n This port still is undergoing significant development.\n "}]}