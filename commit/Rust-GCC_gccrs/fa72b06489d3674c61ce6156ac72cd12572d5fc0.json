{"sha": "fa72b06489d3674c61ce6156ac72cd12572d5fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3MmIwNjQ4OWQzNjc0YzYxY2U2MTU2YWM3MmNkMTI1NzJkNWZjMA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-07-23T13:54:06Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-23T13:54:06Z"}, "message": "Fix PR/7363:\n\n2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n\n        Fix PR/7363:\n        * c-common.c (c_sizeof_or_alignof_type): New function.\n        (c_alignof): Remove definition.\n        * c-common.h (c_sizeof, c_alignof): Define as macros.\n        (c_sizeof_or_alignof_type): Declare.\n        (my_friendly_assert): Moved from cp/cp-tree.h\n        * c-typeck.c (c_sizeof): Remove definition.\n\ncp/\n\n2002-07-21  Gabriel Dos Reis  <gdr@nerim.net>\n\n        Fix PR/7363:\n        * typeck.c (cxx_sizeof_or_alignof_type): New function.\n        (c_sizeof): Remove definition.\n        (expr_sizeof): Use cxx_sizeof.\n        * decl2.c (build_expr_from_tree): Use cxx_sizeof_or_alignof_type.\n        * decl.c (finish_destructor_body): Use cxx_sizeof.\n        * semantics.c (finish_alignof): Likewise.\n        (finish_alignof): Use cxx_alignof.\n        * cp-tree.h (cxx_sizeof, cxx_alignof): New macros.\n        (cxx_sizeof_or_alignof_type): Declare.\n        (my_friendly_assert): Move to ../c-common.h.\n\nFrom-SVN: r55678", "tree": {"sha": "5a3cc29ddefe2d01107bd8557ff47770b29e7bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a3cc29ddefe2d01107bd8557ff47770b29e7bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa72b06489d3674c61ce6156ac72cd12572d5fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa72b06489d3674c61ce6156ac72cd12572d5fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa72b06489d3674c61ce6156ac72cd12572d5fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa72b06489d3674c61ce6156ac72cd12572d5fc0/comments", "author": null, "committer": null, "parents": [{"sha": "2b773ee2c1954b982aac0ee71fd6e5ae148e4691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b773ee2c1954b982aac0ee71fd6e5ae148e4691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b773ee2c1954b982aac0ee71fd6e5ae148e4691"}], "stats": {"total": 248, "additions": 124, "deletions": 124}, "files": [{"sha": "aeb15c44913895afd660b2355428ed8f252698bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -1,3 +1,13 @@\n+2002-07-23  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\tFix PR/7363:\n+\t* c-common.c (c_sizeof_or_alignof_type): New function.\n+\t(c_alignof): Remove definition.\n+\t* c-common.h (c_sizeof, c_alignof): Define as macros.\n+\t(c_sizeof_or_alignof_type): Declare.\n+\t(my_friendly_assert): Moved from cp/cp-tree.h\n+\t* c-typeck.c (c_sizeof): Remove definition.\n+\n 2002-07-23  Jan Hubicka  <jh@suse.cz>\n \n \t* gcse.c (try_replace_reg): Use num_changes_pending."}, {"sha": "d7be6c812d1f46d755cdc59f45c7e0ee6f424e8d", "filename": "gcc/c-common.c", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -2601,36 +2601,61 @@ c_common_get_alias_set (t)\n   return -1;\n }\n \f\n-/* Implement the __alignof keyword: Return the minimum required\n-   alignment of TYPE, measured in bytes.  */\n-\n+/* Compute the value of 'sizeof (TYPE)' or '__alignof__ (TYPE)', where the\n+   second parameter indicates which OPERATOR is being applied.  */\n tree\n-c_alignof (type)\n+c_sizeof_or_alignof_type (type, op)\n      tree type;\n+     enum tree_code op;\n {\n-  enum tree_code code = TREE_CODE (type);\n-  tree t;\n-\n-  /* In C++, sizeof applies to the referent.  Handle alignof the same way.  */\n-  if (code == REFERENCE_TYPE)\n+  const char *op_name;\n+  tree value = NULL;\n+  enum tree_code type_code = TREE_CODE (type);\n+  \n+  my_friendly_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR, 20020720);\n+  op_name = op == SIZEOF_EXPR ? \"sizeof\" : \"__alignof__\";\n+  \n+  if (type_code == FUNCTION_TYPE)\n+    {\n+      if (op == SIZEOF_EXPR)\n+\t{\n+\t  if (pedantic || warn_pointer_arith)\n+\t    pedwarn (\"invalid application of `sizeof' to a function type\");\n+\t  value = size_one_node;\n+\t}\n+      else\n+\tvalue = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+    }\n+  else if (type_code == VOID_TYPE || type_code == ERROR_MARK)\n     {\n-      type = TREE_TYPE (type);\n-      code = TREE_CODE (type);\n+      if (type_code == VOID_TYPE && (pedantic || warn_pointer_arith))\n+\tpedwarn (\"invalid application of `%s' to a void type\", op_name);\n+      value = size_one_node;\n     }\n-\n-  if (code == FUNCTION_TYPE)\n-    t = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n-  else if (code == VOID_TYPE || code == ERROR_MARK)\n-    t = size_one_node;\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      error (\"__alignof__ applied to an incomplete type\");\n-      t = size_zero_node;\n+      error (\"invalid application of `%s' to an incomplete type\", op_name);\n+      value = size_zero_node;\n     }\n   else\n-    t = size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n+    {\n+      if (op == SIZEOF_EXPR)\n+\t/* Convert in case a char is more than one unit.  */\n+\tvalue = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n+\t\t\t    size_int (TYPE_PRECISION (char_type_node)\n+\t\t\t\t      / BITS_PER_UNIT));\n+      else\n+\tvalue = size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n+    }\n \n-  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n+  /* VALUE will have an integer type with TYPE_IS_SIZETYPE set.\n+     TYPE_IS_SIZETYPE means that certain things (like overflow) will\n+     never happen.  However, this node should really have type\n+     `size_t', which is just a typedef for an ordinary integer type.  */\n+  value = fold (build1 (NOP_EXPR, c_size_type_node, value));\n+  my_friendly_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (value)), 20001021);\n+  \n+  return value;\n }\n \n /* Implement the __alignof keyword: Return the minimum required"}, {"sha": "fabfb1642a1f2c01026f7f8a6222f50091e7c6df", "filename": "gcc/c-common.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -548,12 +548,14 @@ extern tree c_common_signed_type\t\tPARAMS ((tree));\n extern tree c_common_signed_or_unsigned_type\tPARAMS ((int, tree));\n extern tree c_common_truthvalue_conversion\tPARAMS ((tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n-extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n-extern tree c_alignof\t\t\t\tPARAMS ((tree));\n+extern tree c_sizeof_or_alignof_type\tPARAMS ((tree, enum tree_code));\n extern tree c_alignof_expr\t\t\tPARAMS ((tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error\t\t\tPARAMS ((enum tree_code));\n+#define my_friendly_assert(EXP, N) (void) \\\n+ (((EXP) == 0) ? (fancy_abort (__FILE__, __LINE__, __FUNCTION__), 0) : 0)\n+\n extern tree c_expand_expr_stmt\t\t\tPARAMS ((tree));\n extern void c_expand_start_cond\t\t\tPARAMS ((tree, int, tree));\n extern void c_finish_then                       PARAMS ((void));\n@@ -573,6 +575,8 @@ extern void unsigned_conversion_warning\t\tPARAMS ((tree, tree));\n /* Read the rest of the current #-directive line.  */\n extern char *get_directive_line\t\t\tPARAMS ((void));\n #define GET_DIRECTIVE_LINE() get_directive_line ()\n+#define c_sizeof(T)  c_sizeof_or_alignof_type (T, SIZEOF_EXPR)\n+#define c_alignof(T) c_sizeof_or_alignof_type (T, ALIGNOF_EXPR)\n \n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types"}, {"sha": "f6e8d538d7531a5229bda9e011d47a91c3e56a40", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -736,47 +736,6 @@ type_lists_compatible_p (args1, args2)\n     }\n }\n \f\n-/* Compute the value of the `sizeof' operator.  */\n-\n-tree\n-c_sizeof (type)\n-     tree type;\n-{\n-  enum tree_code code = TREE_CODE (type);\n-  tree size;\n-\n-  if (code == FUNCTION_TYPE)\n-    {\n-      if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"sizeof applied to a function type\");\n-      size = size_one_node;\n-    }\n-  else if (code == VOID_TYPE)\n-    {\n-      if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"sizeof applied to a void type\");\n-      size = size_one_node;\n-    }\n-  else if (code == ERROR_MARK)\n-    size = size_one_node;\n-  else if (!COMPLETE_TYPE_P (type))\n-    {\n-      error (\"sizeof applied to an incomplete type\");\n-      size = size_zero_node;\n-    }\n-  else\n-    /* Convert in case a char is more than one unit.  */\n-    size = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n-\t\t       size_int (TYPE_PRECISION (char_type_node)\n-\t\t\t         / BITS_PER_UNIT));\n-\n-  /* SIZE will have an integer type with TYPE_IS_SIZETYPE set.\n-     TYPE_IS_SIZETYPE means that certain things (like overflow) will\n-     never happen.  However, this node should really have type\n-     `size_t', which is just a typedef for an ordinary integer type.  */\n-  return fold (build1 (NOP_EXPR, c_size_type_node, size));\n-}\n-\n tree\n c_sizeof_nowarn (type)\n      tree type;"}, {"sha": "3cb8bd6b0de2df464336df4ff414802da14743e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -1,3 +1,17 @@\n+2002-07-23  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\tFix PR/7363:\n+\t* typeck.c (cxx_sizeof_or_alignof_type): New function.\n+\t(c_sizeof): Remove definition.\n+\t(expr_sizeof): Use cxx_sizeof.\n+\t* decl2.c (build_expr_from_tree): Use cxx_sizeof_or_alignof_type.\n+\t* decl.c (finish_destructor_body): Use cxx_sizeof.\n+\t* semantics.c (finish_alignof): Likewise.\n+\t(finish_alignof): Use cxx_alignof.\n+\t* cp-tree.h (cxx_sizeof, cxx_alignof): New macros.\n+\t(cxx_sizeof_or_alignof_type): Declare.\n+\t(my_friendly_assert): Move to ../c-common.h.\n+\n 2002-07-23  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* class.c, method.c, pt.c, search.c: Don't define obstack macros.\n@@ -30,7 +44,7 @@\n \n 2002-07-20  Gabriel Dos Reis  <gdr@nerim.net>\n \n-\t* spew.c (struct uinparsed_test): Replace 'filename' and 'lineno'\n+\t* spew.c (struct unparsed_test): Replace 'filename' and 'lineno'\n \tmembers with 'locus'.  Adjust use throughout.\n \t(struct feed):  Likewise.\n \t(alloc_unparsed_test): Change prototype, take a 'const location_t *'."}, {"sha": "fa7243dc5a7217b0114c3ff75ca9391e71d06d9a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -4437,6 +4437,7 @@ extern int compparms\t\t\t\tPARAMS ((tree, tree));\n extern int comp_cv_qualification                PARAMS ((tree, tree));\n extern int comp_cv_qual_signature               PARAMS ((tree, tree));\n extern tree expr_sizeof\t\t\t\tPARAMS ((tree));\n+extern tree cxx_sizeof_or_alignof_type    PARAMS ((tree, enum tree_code));\n extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n extern tree inline_conversion\t\t\tPARAMS ((tree));\n extern tree decay_conversion\t\t\tPARAMS ((tree));\n@@ -4483,6 +4484,8 @@ extern tree merge_types\t\t\t\tPARAMS ((tree, tree));\n extern tree check_return_expr                   PARAMS ((tree));\n #define cp_build_binary_op(code, arg1, arg2) \\\n   build_binary_op(code, arg1, arg2, 1)\n+#define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR)\n+#define cxx_alignof(T) cxx_sizeof_or_alignof_type (T, ALIGNOF_EXPR)\n \n /* in typeck2.c */\n extern void cxx_incomplete_type_diagnostic\tPARAMS ((tree, tree, int));\n@@ -4495,9 +4498,6 @@ extern tree binfo_or_else\t\t\tPARAMS ((tree, tree));\n extern void readonly_error\t\t\tPARAMS ((tree, const char *, int));\n extern int abstract_virtuals_error\t\tPARAMS ((tree, tree));\n \n-#define my_friendly_assert(EXP, N) (void) \\\n- (((EXP) == 0) ? (fancy_abort (__FILE__, __LINE__, __FUNCTION__), 0) : 0)\n-\n extern tree force_store_init_value\t\tPARAMS ((tree, tree));\n extern tree store_init_value\t\t\tPARAMS ((tree, tree));\n extern tree digest_init\t\t\t\tPARAMS ((tree, tree, tree *));"}, {"sha": "337107baf62d84930b35f0a0c81dffc390a9760a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -14070,7 +14070,7 @@ finish_destructor_body ()\n   if (DECL_VIRTUAL_P (current_function_decl))\n     {\n       tree if_stmt;\n-      tree virtual_size = c_sizeof (current_class_type);\n+      tree virtual_size = cxx_sizeof (current_class_type);\n \n       /* [class.dtor]\n "}, {"sha": "66922b19de30f3e1a8c671bf539a96338522ebca", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -3779,7 +3779,7 @@ build_expr_from_tree (t)\n \tif (!TYPE_P (r))\n \t  return TREE_CODE (t) == SIZEOF_EXPR ? expr_sizeof (r) : c_alignof_expr (r);\n \telse\n-\t  return TREE_CODE (t) == SIZEOF_EXPR ? c_sizeof (r) : c_alignof (r);\n+\t  return cxx_sizeof_or_alignof_type (r, TREE_CODE (t));\n       }\n \n     case MODOP_EXPR:"}, {"sha": "ad127bf174709932a3d20788c4ecbe799052f90a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -2106,7 +2106,7 @@ finish_sizeof (t)\n   if (processing_template_decl)\n     return build_min_nt (SIZEOF_EXPR, t);\n \n-  return TYPE_P (t) ? c_sizeof (t) : expr_sizeof (t);\n+  return TYPE_P (t) ? cxx_sizeof (t) : expr_sizeof (t);\n }\n \n /* Implement the __alignof keyword: Return the minimum required\n@@ -2119,7 +2119,7 @@ finish_alignof (t)\n   if (processing_template_decl)\n     return build_min_nt (ALIGNOF_EXPR, t);\n \n-  return TYPE_P (t) ? c_alignof (t) : c_alignof_expr (t);\n+  return TYPE_P (t) ? cxx_alignof (t) : c_alignof_expr (t);\n }\n \n /* Generate RTL for the statement T, and its substatements, and any"}, {"sha": "6d810f592ae61a3063e3514b2ebecbf10608dbdb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 22, "deletions": 53, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -1486,73 +1486,42 @@ comp_target_parms (parms1, parms2)\n   return warn_contravariance ? -1 : 1;\n }\n \f\n-/* Compute the value of the `sizeof' operator.  */\n-\n tree\n-c_sizeof (type)\n+cxx_sizeof_or_alignof_type (type, op)\n      tree type;\n+     enum tree_code op;\n {\n-  enum tree_code code = TREE_CODE (type);\n-  tree size;\n+  enum tree_code type_code;\n+  tree value;\n+  const char *op_name;\n \n+  my_friendly_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR, 20020720);\n   if (processing_template_decl)\n-    return build_min_nt (SIZEOF_EXPR, type);\n+    return build_min_nt (op, type);\n+  \n+  op_name = operator_name_info[(int) op].name;\n+  \n+  if (TREE_CODE (type) == REFERENCE_TYPE)\n+    type = TREE_TYPE (type);\n+  type_code = TREE_CODE (type);\n \n-  if (code == FUNCTION_TYPE)\n-    {\n-      if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"ISO C++ forbids applying `sizeof' to a function type\");\n-      size = size_one_node;\n-    }\n-  else if (code == METHOD_TYPE)\n+  if (type_code == METHOD_TYPE)\n     {\n       if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"ISO C++ forbids applying `sizeof' to a member function\");\n-      size = size_one_node;\n+\tpedwarn (\"invalid application of `%s' to a member function\", op_name);\n+      value = size_one_node;\n     }\n-  else if (code == VOID_TYPE)\n+  else if (type_code == OFFSET_TYPE)\n     {\n-      if (pedantic || warn_pointer_arith)\n-\tpedwarn (\"ISO C++ forbids applying `sizeof' to type `void' which is an incomplete type\");\n-      size = size_one_node;\n+      error (\"invalid application of `%s' to non-static member\", op_name);\n+      value = size_zero_node;\n     }\n-  else if (code == ERROR_MARK)\n-    size = size_one_node;\n   else\n-    {\n-      /* ARM $5.3.2: ``When applied to a reference, the result is the\n-\t size of the referenced object.'' */\n-      if (code == REFERENCE_TYPE)\n-\ttype = TREE_TYPE (type);\n-\n-      if (code == OFFSET_TYPE)\n-\t{\n-\t  error (\"`sizeof' applied to non-static member\");\n-\t  size = size_zero_node;\n-\t}\n-      else if (!COMPLETE_TYPE_P (complete_type (type)))\n-\t{\n-\t  error (\"`sizeof' applied to incomplete type `%T'\", type);\n-\t  size = size_zero_node;\n-\t}\n-      else\n-\t/* Convert in case a char is more than one unit.  */\n-\tsize = size_binop (CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n-\t\t\t   size_int (TYPE_PRECISION (char_type_node)\n-\t\t\t\t     / BITS_PER_UNIT));\n-    }\n+    value = c_sizeof_or_alignof_type (complete_type (type), op);\n \n-  /* SIZE will have an integer type with TYPE_IS_SIZETYPE set.\n-     TYPE_IS_SIZETYPE means that certain things (like overflow) will\n-     never happen.  However, this node should really have type\n-     `size_t', which is just a typedef for an ordinary integer type.  */\n-  size = fold (build1 (NOP_EXPR, c_size_type_node, size));\n-  my_friendly_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (size)), \n-\t\t      20001021);\n-  return size;\n+  return value;\n }\n \n-\n tree\n expr_sizeof (e)\n      tree e;\n@@ -1582,7 +1551,7 @@ expr_sizeof (e)\n   if (e == error_mark_node)\n     return e;\n \n-  return c_sizeof (TREE_TYPE (e));\n+  return cxx_sizeof (TREE_TYPE (e));\n }\n   \n tree"}, {"sha": "9e930ed857f794caea6568d7cbfac9d9bc0a6c96", "filename": "gcc/testsuite/g++.dg/ext/alignof1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falignof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa72b06489d3674c61ce6156ac72cd12572d5fc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falignof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falignof1.C?ref=fa72b06489d3674c61ce6156ac72cd12572d5fc0", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Gabriel Dos Reis <gdr@codesourcery.com>, 2002-07-20\n+// Bug PR/7363.\n+\n+template<typename T>\n+int my_alignof()\n+{\n+  return __alignof__ (T);\n+}\n+\n+template<typename>\n+  struct X { };\n+\n+int main()\n+{\n+  return my_alignof<X<void> >();\n+}"}]}