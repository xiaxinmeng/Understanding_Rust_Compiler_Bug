{"sha": "438396422cf866b96ccdb10c32875e425b37c0ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4Mzk2NDIyY2Y4NjZiOTZjY2RiMTBjMzI4NzVlNDI1YjM3YzBhYw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-07-13T17:34:18Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-13T17:34:18Z"}, "message": "Makefile.in (LIBCPP_DEPS): Remove coretypes.h and $(TM_H).\n\n\t* Makefile.in (LIBCPP_DEPS): Remove coretypes.h and $(TM_H).\n\t(hashtable.o, line-map.o, mkdeps.o): Likewise, from dependency\n\tlist.  Move these all together down by cpplib.\n\n\t* cpplib.h: Don't refer to MAX_WCHAR_TYPE_SIZE when determining\n\tdefinition of CPPCHAR_SIGNED_T.\n\n\t* cppcharset.c, cpperror.c, cppexp.c, cppfiles.c, cpphash.c, cppinit.c\n\t* cpplex.c, cpplib.c, cppmacro.c, cpppch.c, cpptrad.c, hashtable.c\n\t* line-map.c, mkdeps.c: Don't include coretypes.h or tm.h.\n\n\t* cpphash.c (_cpp_init_hashtable): Don't use gcc_obstack_init.\n\t* cppinit.c (cpp_create_reader): Likewise.\n\n\t* cpphash.h (scan_out_logical_line): Rename _cpp_scan_out_logical_line.\n\t* cpptrad.c: Likewise.  All callers changed.\n\t* cpplib.c: All callers changed.\n\t* c-ppoutput.c: Replace 'uchar' with 'unsigned char' throughout.\n\t* hashtable.h: Define GTY(x) to nothing here too.\n\nFrom-SVN: r69298", "tree": {"sha": "a7cccc1c8ac0a9c5388a19e98814b9a1cc541648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7cccc1c8ac0a9c5388a19e98814b9a1cc541648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/438396422cf866b96ccdb10c32875e425b37c0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438396422cf866b96ccdb10c32875e425b37c0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438396422cf866b96ccdb10c32875e425b37c0ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438396422cf866b96ccdb10c32875e425b37c0ac/comments", "author": null, "committer": null, "parents": [{"sha": "0acf4f8857224501ab8bd97bf0146f7cb766441e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acf4f8857224501ab8bd97bf0146f7cb766441e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acf4f8857224501ab8bd97bf0146f7cb766441e"}], "stats": {"total": 111, "additions": 56, "deletions": 55}, "files": [{"sha": "d95408bf93a4659355f4300798d01cb9ab5bb64b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -1,3 +1,25 @@\n+2003-07-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in (LIBCPP_DEPS): Remove coretypes.h and $(TM_H).\n+\t(hashtable.o, line-map.o, mkdeps.o): Likewise, from dependency\n+\tlist.  Move these all together down by cpplib.\n+\n+\t* cpplib.h: Don't refer to MAX_WCHAR_TYPE_SIZE when determining\n+\tdefinition of CPPCHAR_SIGNED_T.\n+\n+\t* cppcharset.c, cpperror.c, cppexp.c, cppfiles.c, cpphash.c, cppinit.c\n+\t* cpplex.c, cpplib.c, cppmacro.c, cpppch.c, cpptrad.c, hashtable.c\n+\t* line-map.c, mkdeps.c: Don't include coretypes.h or tm.h.\n+\n+\t* cpphash.c (_cpp_init_hashtable): Don't use gcc_obstack_init.\n+\t* cppinit.c (cpp_create_reader): Likewise.\n+\n+\t* cpphash.h (scan_out_logical_line): Rename _cpp_scan_out_logical_line.\n+\t* cpptrad.c: Likewise.  All callers changed.\n+\t* cpplib.c: All callers changed.\n+\t* c-ppoutput.c: Replace 'uchar' with 'unsigned char' throughout.\n+\t* hashtable.h: Define GTY(x) to nothing here too.\n+\n 2003-07-13  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* stor-layout.c (compute_record_mode): Remove very obsolete test"}, {"sha": "ed2a23ae7600268d1658485c6ad730a8f2eb45c5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -1450,10 +1450,6 @@ ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TR\n stringpool.o: stringpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(GGC_H) gt-stringpool.h\n \n-hashtable.o: hashtable.c hashtable.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(OBSTACK_H)\n-\n-line-map.o: line-map.c line-map.h intl.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n-\n ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(GGC_H)\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n@@ -2356,7 +2352,7 @@ LIBCPP_OBJS =\tcpplib.o cpplex.o cppmacro.o cppexp.o cppfiles.o cpptrad.o \\\n \t\thashtable.o line-map.o mkdeps.o cpppch.o\n \n LIBCPP_DEPS =\t$(CPPLIB_H) cpphash.h line-map.h hashtable.h intl.h \\\n-\t\t$(OBSTACK_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n+\t\t$(OBSTACK_H) $(CONFIG_H) $(SYSTEM_H)\n \n # Most of the other archives built/used by this makefile are for\n # targets.  This one is strictly for the host.\n@@ -2383,7 +2379,9 @@ cppdefault.o: cppdefault.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(PREPROCESSOR_DEFINES) \\\n \t  -c $(srcdir)/cppdefault.c $(OUTPUT_OPTION)\n \n-mkdeps.o: mkdeps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) mkdeps.h\n+mkdeps.o: mkdeps.c $(CONFIG_H) $(SYSTEM_H) mkdeps.h\n+hashtable.o: hashtable.c hashtable.h $(CONFIG_H) $(SYSTEM_H) $(OBSTACK_H)\n+line-map.o: line-map.c line-map.h intl.h $(CONFIG_H) $(SYSTEM_H)\n \n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon)."}, {"sha": "c37435fbf39340e8e00d7a7df223ff12f0afe77c", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -42,7 +42,7 @@ static struct\n /* General output routines.  */\n static void scan_translation_unit (cpp_reader *);\n static void scan_translation_unit_trad (cpp_reader *);\n-static void account_for_newlines (const uchar *, size_t);\n+static void account_for_newlines (const unsigned char *, size_t);\n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n \n static void print_line (const struct line_map *, unsigned int,\n@@ -174,7 +174,7 @@ scan_translation_unit (cpp_reader *pfile)\n \n /* Adjust print.line for newlines embedded in output.  */\n static void\n-account_for_newlines (const uchar *str, size_t len)\n+account_for_newlines (const unsigned char *str, size_t len)\n {\n   while (len--)\n     if (*str++ == '\\n')"}, {"sha": "b38eea01ad64837af79a246e21c12cae4575a77e", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -20,8 +20,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"cppucnid.h\""}, {"sha": "ceb4b938bb5c17b30af55e257059541a95b560af", "filename": "gcc/cpperror.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -25,8 +25,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"intl.h\""}, {"sha": "b558b3e8b8aa4b147ad842d7e95b580108878b9c", "filename": "gcc/cppexp.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -20,8 +20,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n "}, {"sha": "742e5f110efe83c6f39b4c9cd561750db3ebe439", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -23,8 +23,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include <dirent.h>\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"intl.h\""}, {"sha": "8016189bc5d26b2eb745fff0a63f1e25eb01f73e", "filename": "gcc/cpphash.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -25,8 +25,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n \n@@ -57,7 +55,10 @@ _cpp_init_hashtable (cpp_reader *pfile, hash_table *table)\n       pfile->our_hashtable = 1;\n       table = ht_create (13);\t/* 8K (=2^13) entries.  */\n       table->alloc_node = (hashnode (*) (hash_table *)) alloc_node;\n-      gcc_obstack_init (&pfile->hash_ob);\n+\n+      _obstack_begin (&pfile->hash_ob, 0, 0,\n+\t\t      (void *(*) (long)) xmalloc,\n+\t\t      (void (*) (void *)) free);\n     }\n \n   table->pfile = pfile;"}, {"sha": "f814b9fd280cb70b383380641f2d611c8adf73ba", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -552,7 +552,7 @@ extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,\n extern void _cpp_pop_buffer (cpp_reader *);\n \n /* In cpptrad.c.  */\n-extern bool scan_out_logical_line (cpp_reader *, cpp_macro *);\n+extern bool _cpp_scan_out_logical_line (cpp_reader *, cpp_macro *);\n extern bool _cpp_read_logical_line_trad (cpp_reader *);\n extern void _cpp_overlay_buffer (cpp_reader *pfile, const uchar *, size_t);\n extern void _cpp_remove_overlay (cpp_reader *);"}, {"sha": "0c107b77e988db655cbb784a26bac751c3da0c46", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -21,8 +21,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"mkdeps.h\"\n@@ -194,7 +192,9 @@ cpp_create_reader (enum c_lang lang, hash_table *table)\n   _cpp_expand_op_stack (pfile);\n \n   /* Initialize the buffer obstack.  */\n-  gcc_obstack_init (&pfile->buffer_ob);\n+  _obstack_begin (&pfile->buffer_ob, 0, 0,\n+\t\t  (void *(*) (long)) xmalloc,\n+\t\t  (void (*) (void *)) free);\n \n   _cpp_init_includes (pfile);\n "}, {"sha": "a7f13e79eae08f1c44f96af5508ec2dba206eb25", "filename": "gcc/cpplex.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -21,8 +21,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n "}, {"sha": "3169f363569a68917e30fc37a1c63881357f9c8d", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -21,9 +21,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"obstack.h\"\n@@ -280,7 +277,7 @@ prepare_directive_trad (cpp_reader *pfile)\n \t\t\t\t    || pfile->directive == &dtable[T_ELIF]);\n       if (no_expand)\n \tpfile->state.prevent_expansion++;\n-      scan_out_logical_line (pfile, NULL);\n+      _cpp_scan_out_logical_line (pfile, NULL);\n       if (no_expand)\n \tpfile->state.prevent_expansion--;\n       pfile->state.skipping = was_skipping;"}, {"sha": "434e455331a00a1d404304986d46f5e2be6b2436", "filename": "gcc/cpplib.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -191,18 +191,18 @@ struct cpp_token\n \n /* A type wide enough to hold any multibyte source character.\n    cpplib's character constant interpreter requires an unsigned type.\n-   Also, a typedef for the signed equivalent.  */\n-#ifndef MAX_WCHAR_TYPE_SIZE\n-# define MAX_WCHAR_TYPE_SIZE WCHAR_TYPE_SIZE\n-#endif\n-#if CHAR_BIT * SIZEOF_INT >= MAX_WCHAR_TYPE_SIZE\n+   Also, a typedef for the signed equivalent.\n+   The width of this type is capped at 32 bits; there do exist targets\n+   where wchar_t is 64 bits, but only in a non-default mode, and there\n+   would be no meaningful interpretation for a wchar_t value greater\n+   than 2^32 anyway -- the widest wide-character encoding around is\n+   ISO 10646, which stops at 2^31.  */\n+#if CHAR_BIT * SIZEOF_INT >= 32\n # define CPPCHAR_SIGNED_T int\n+#elif CHAR_BIT * SIZEOF_LONG >= 32\n+# define CPPCHAR_SIGNED_T long\n #else\n-# if CHAR_BIT * SIZEOF_LONG >= MAX_WCHAR_TYPE_SIZE || !HAVE_LONG_LONG\n-#  define CPPCHAR_SIGNED_T long\n-# else\n-#  define CPPCHAR_SIGNED_T long long\n-# endif\n+# error \"Cannot find a least-32-bit signed integer type\"\n #endif\n typedef unsigned CPPCHAR_SIGNED_T cppchar_t;\n typedef CPPCHAR_SIGNED_T cppchar_signed_t;"}, {"sha": "87ad5927754eb7f55fd090773d5b6bf0ccfce8af", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -25,8 +25,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n "}, {"sha": "bdb7d16cfa0a125f114d79126183a181924011ab", "filename": "gcc/cpppch.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpppch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpppch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpppch.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -17,7 +17,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"intl.h\""}, {"sha": "152bc0fd657fdd3c8e77f5d6afbdc2914b70bc56", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -18,8 +18,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n \n@@ -305,7 +303,7 @@ _cpp_read_logical_line_trad (cpp_reader *pfile)\n       if (pfile->buffer->need_line && !_cpp_get_fresh_line (pfile))\n \treturn false;\n     }\n-  while (!scan_out_logical_line (pfile, NULL) || pfile->state.skipping);\n+  while (!_cpp_scan_out_logical_line (pfile, NULL) || pfile->state.skipping);\n \n   return true;\n }\n@@ -343,7 +341,7 @@ save_argument (struct fun_macro *macro, size_t offset)\n    MACRO, and we call save_replacement_text() every time we meet an\n    argument.  */\n bool\n-scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n+_cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n {\n   bool result = true;\n   cpp_context *context;\n@@ -982,7 +980,7 @@ _cpp_create_trad_definition (cpp_reader *pfile, cpp_macro *macro)\n   if (* CUR (context) == '(')\n     {\n       /* Setting macro to NULL indicates an error occurred, and\n-\t prevents unnecessary work in scan_out_logical_line.  */\n+\t prevents unnecessary work in _cpp_scan_out_logical_line.  */\n       if (!scan_parameters (pfile, macro))\n \tmacro = NULL;\n       else\n@@ -1000,7 +998,7 @@ _cpp_create_trad_definition (cpp_reader *pfile, cpp_macro *macro)\n \t\t       CPP_OPTION (pfile, discard_comments_in_macro_exp));\n \n   pfile->state.prevent_expansion++;\n-  scan_out_logical_line (pfile, macro);\n+  _cpp_scan_out_logical_line (pfile, macro);\n   pfile->state.prevent_expansion--;\n \n   if (!macro)"}, {"sha": "fafa1000a03b4cbf78d6cd08f3aa9ddc24481942", "filename": "gcc/hashtable.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -21,8 +21,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"hashtable.h\"\n \n /* The code below is a specialization of Vladimir Makarov's expandable\n@@ -63,7 +61,10 @@ ht_create (unsigned int order)\n   memset (table, 0, sizeof (hash_table));\n \n   /* Strings need no alignment.  */\n-  gcc_obstack_init (&table->stack);\n+  _obstack_begin (&table->stack, 0, 0,\n+\t\t  (void *(*) (long)) xmalloc,\n+\t\t  (void (*) (void *)) free);\n+\n   obstack_alignment_mask (&table->stack) = 0;\n \n   table->entries = (hashnode *) xcalloc (nslots, sizeof (hashnode));"}, {"sha": "b14ab18bfaff3ef59911033e98b5eeff854a45af", "filename": "gcc/hashtable.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.h?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -19,6 +19,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define GCC_HASHTABLE_H\n \n #include \"obstack.h\"\n+#define GTY(x) /* nothing */\n \n /* This is what each hash table entry points to.  It may be embedded\n    deeply within another object.  */"}, {"sha": "1023b9132ebb46a77e46cb991848b6f86bc85c29", "filename": "gcc/line-map.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -22,8 +22,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"line-map.h\"\n #include \"intl.h\"\n "}, {"sha": "bb084a59d0a1b19242b12bceb8c1b14eeffba0c0", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438396422cf866b96ccdb10c32875e425b37c0ac/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=438396422cf866b96ccdb10c32875e425b37c0ac", "patch": "@@ -22,8 +22,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"mkdeps.h\"\n \n /* Keep this structure local to this file, so clients don't find it"}]}