{"sha": "bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4NGU1NjA3ZWY1YzAxYjlmYzVmM2NiZDAwNGFlZDgwN2EwODRmMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-24T02:59:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-24T02:59:34Z"}, "message": "PR c++/66617 - virtual base list-initialization\n\n\t* call.c (add_list_candidates): Handle VTT parm.\n\t(build_new_method_call_1): Likewise.\n\nFrom-SVN: r238689", "tree": {"sha": "9a41fbaf4e0e10449b9a01497760ce2919f4e901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a41fbaf4e0e10449b9a01497760ce2919f4e901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f388b7be18a49bb21ef98f1ea09e055d632bd357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f388b7be18a49bb21ef98f1ea09e055d632bd357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f388b7be18a49bb21ef98f1ea09e055d632bd357"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "6c5b5de29239ce7b82f3a5cc870ab7c198488e5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "patch": "@@ -1,5 +1,9 @@\n 2016-07-23  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/66617\n+\t* call.c (add_list_candidates): Handle VTT parm.\n+\t(build_new_method_call_1): Likewise.\n+\n \tPR c++/55922\n \tPR c++/63151\n \t* init.c (expand_aggr_init_1): Handle list-initialization from {}."}, {"sha": "802c3258e8f35fa6ae35d2fc4c1f8d7b6f419e03", "filename": "gcc/cp/call.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "patch": "@@ -3577,15 +3577,13 @@ merge_conversion_sequences (conversion *user_seq, conversion *std_seq)\n \n static void\n add_list_candidates (tree fns, tree first_arg,\n-\t\t     tree init_list, tree totype,\n+\t\t     const vec<tree, va_gc> *args, tree totype,\n \t\t     tree explicit_targs, bool template_only,\n \t\t     tree conversion_path, tree access_path,\n \t\t     int flags,\n \t\t     struct z_candidate **candidates,\n \t\t     tsubst_flags_t complain)\n {\n-  vec<tree, va_gc> *args;\n-\n   gcc_assert (*candidates == NULL);\n \n   /* We're looking for a ctor for list-initialization.  */\n@@ -3594,6 +3592,9 @@ add_list_candidates (tree fns, tree first_arg,\n      avoid the copy constructor call for copy-list-initialization.  */\n   flags |= LOOKUP_NO_NARROWING;\n \n+  unsigned nart = num_artificial_parms_for (get_first_fn (fns)) - 1;\n+  tree init_list = (*args)[nart];\n+\n   /* Always use the default constructor if the list is empty (DR 990).  */\n   if (CONSTRUCTOR_NELTS (init_list) == 0\n       && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype))\n@@ -3603,22 +3604,27 @@ add_list_candidates (tree fns, tree first_arg,\n   else if (TYPE_HAS_LIST_CTOR (totype))\n     {\n       flags |= LOOKUP_LIST_ONLY;\n-      args = make_tree_vector_single (init_list);\n       add_candidates (fns, first_arg, args, NULL_TREE,\n \t\t      explicit_targs, template_only, conversion_path,\n \t\t      access_path, flags, candidates, complain);\n       if (any_strictly_viable (*candidates))\n \treturn;\n     }\n \n-  args = ctor_to_vec (init_list);\n+  /* Expand the CONSTRUCTOR into a new argument vec.  */\n+  vec<tree, va_gc> *new_args;\n+  vec_alloc (new_args, nart + CONSTRUCTOR_NELTS (init_list));\n+  for (unsigned i = 0; i < nart; ++i)\n+    new_args->quick_push ((*args)[i]);\n+  for (unsigned i = 0; i < CONSTRUCTOR_NELTS (init_list); ++i)\n+    new_args->quick_push (CONSTRUCTOR_ELT (init_list, i)->value);\n \n   /* We aren't looking for list-ctors anymore.  */\n   flags &= ~LOOKUP_LIST_ONLY;\n   /* We allow more user-defined conversions within an init-list.  */\n   flags &= ~LOOKUP_NO_CONVERSION;\n \n-  add_candidates (fns, first_arg, args, NULL_TREE,\n+  add_candidates (fns, first_arg, new_args, NULL_TREE,\n \t\t  explicit_targs, template_only, conversion_path,\n \t\t  access_path, flags, candidates, complain);\n }\n@@ -3698,16 +3704,16 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n       gcc_assert (!DECL_HAS_IN_CHARGE_PARM_P (OVL_CURRENT (ctors))\n \t\t  && !DECL_HAS_VTT_PARM_P (OVL_CURRENT (ctors)));\n \n+      args = make_tree_vector_single (expr);\n       if (BRACE_ENCLOSED_INITIALIZER_P (expr))\n \t{\n \t  /* List-initialization.  */\n-\t  add_list_candidates (ctors, first_arg, expr, totype, NULL_TREE,\n+\t  add_list_candidates (ctors, first_arg, args, totype, NULL_TREE,\n \t\t\t       false, TYPE_BINFO (totype), TYPE_BINFO (totype),\n \t\t\t       ctorflags, &candidates, complain);\n \t}\n       else\n \t{\n-\t  args = make_tree_vector_single (expr);\n \t  add_candidates (ctors, first_arg, args, NULL_TREE, NULL_TREE, false,\n \t\t\t  TYPE_BINFO (totype), TYPE_BINFO (totype),\n \t\t\t  ctorflags, &candidates, complain);\n@@ -8350,15 +8356,20 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n   /* Get the high-water mark for the CONVERSION_OBSTACK.  */\n   p = conversion_obstack_alloc (0);\n \n+  /* The number of arguments artificial parms in ARGS; we subtract one because\n+     there's no 'this' in ARGS.  */\n+  unsigned skip = num_artificial_parms_for (fn) - 1;\n+\n   /* If CONSTRUCTOR_IS_DIRECT_INIT is set, this was a T{ } form\n      initializer, not T({ }).  */\n-  if (DECL_CONSTRUCTOR_P (fn) && args != NULL && !vec_safe_is_empty (*args)\n-      && DIRECT_LIST_INIT_P ((**args)[0]))\n+  if (DECL_CONSTRUCTOR_P (fn)\n+      && vec_safe_length (user_args) > skip\n+      && DIRECT_LIST_INIT_P ((*user_args)[skip]))\n     {\n-      tree init_list = (**args)[0];\n+      tree init_list = (*user_args)[skip];\n       tree init = NULL_TREE;\n \n-      gcc_assert ((*args)->length () == 1\n+      gcc_assert (user_args->length () == skip + 1\n \t\t  && !(flags & LOOKUP_ONLYCONVERTING));\n \n       /* If the initializer list has no elements and T is a class type with\n@@ -8391,7 +8402,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t}\n \n       /* Otherwise go ahead with overload resolution.  */\n-      add_list_candidates (fns, first_mem_arg, init_list,\n+      add_list_candidates (fns, first_mem_arg, user_args,\n \t\t\t   basetype, explicit_targs, template_only,\n \t\t\t   conversion_path, access_binfo, flags,\n \t\t\t   &candidates, complain);"}, {"sha": "cbae170b0283b2b143601ec9d64b273cafb3df2a", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-base1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-base1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd84e5607ef5c01b9fc5f3cbd004aed807a084f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-base1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-base1.C?ref=bd84e5607ef5c01b9fc5f3cbd004aed807a084f2", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/66617\n+// { dg-do compile { target c++11 } }\n+\n+struct A { };\n+struct B: virtual A\n+{\n+protected:\n+  B(int, int);\n+};\n+struct C: B\n+{\n+  C(): B{1,2} {}\n+};\n+\n+       "}]}