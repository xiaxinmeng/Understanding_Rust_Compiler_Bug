{"sha": "9c6344c10de1c90015c68adfb880291af980b886", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2MzQ0YzEwZGUxYzkwMDE1YzY4YWRmYjg4MDI5MWFmOTgwYjg4Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-25T19:10:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-08-31T19:54:25Z"}, "message": "c++: Various small fixes\n\nA copy-paste error, a couple of missed checks to guard undefined accesses,\nand we don't need to use type_uses_auto to extract the auto node we just\nbuilt.\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (flatten_await_stmt): Fix copyo.\n\t* decl.c (reshape_init_class): Simplify.\n\t* module.cc (module_state::read_language): Add null check.\n\t* parser.c (build_range_temp): Avoid type_uses_auto.\n\t(cp_parser_class_specifier_1): Add null check.", "tree": {"sha": "e41045d74d9b32a9b9b9ec0ceaf53e025a79f157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e41045d74d9b32a9b9b9ec0ceaf53e025a79f157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6344c10de1c90015c68adfb880291af980b886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6344c10de1c90015c68adfb880291af980b886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6344c10de1c90015c68adfb880291af980b886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6344c10de1c90015c68adfb880291af980b886/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4cb3bb9ac11b4126ffa718287dd509a4b10a658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4cb3bb9ac11b4126ffa718287dd509a4b10a658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4cb3bb9ac11b4126ffa718287dd509a4b10a658"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "25269d9e51a74a2fa99a3fd38f05257f7e126ff9", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=9c6344c10de1c90015c68adfb880291af980b886", "patch": "@@ -2905,7 +2905,7 @@ flatten_await_stmt (var_nest_node *n, hash_set<tree> *promoted,\n \t  tree else_cl = COND_EXPR_ELSE (old_expr);\n \t  if (!VOID_TYPE_P (TREE_TYPE (else_cl)))\n \t    {\n-\t      gcc_checking_assert (TREE_CODE (then_cl) != STATEMENT_LIST);\n+\t      gcc_checking_assert (TREE_CODE (else_cl) != STATEMENT_LIST);\n \t      else_cl\n \t\t= build2 (init_expr ? INIT_EXPR : MODIFY_EXPR, var_type,\n \t\t\t  var, else_cl);"}, {"sha": "e981eadc6dd84f9711f6afef9e04afd16785a9f0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9c6344c10de1c90015c68adfb880291af980b886", "patch": "@@ -6563,8 +6563,7 @@ reshape_init_class (tree type, reshape_iter *d, bool first_initializer_p,\n     continue_:\n       if (base_binfo)\n \t{\n-\t  BINFO_BASE_ITERATE (binfo, ++binfo_idx, base_binfo);\n-\t  if (base_binfo)\n+\t  if (BINFO_BASE_ITERATE (binfo, ++binfo_idx, base_binfo))\n \t    field = base_binfo;\n \t  else\n \t    field = next_initializable_field (TYPE_FIELDS (type));"}, {"sha": "4b2ad6f3db8087a2601fcaa16fa8fa7443706bba", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=9c6344c10de1c90015c68adfb880291af980b886", "patch": "@@ -17977,7 +17977,7 @@ module_state::read_language (bool outermost)\n \n   function_depth++; /* Prevent unexpected GCs.  */\n \n-  if (counts[MSC_entities] != entity_num)\n+  if (ok && counts[MSC_entities] != entity_num)\n     ok = false;\n   if (ok && counts[MSC_entities]\n       && !read_entities (counts[MSC_entities],"}, {"sha": "d3c31be0967090a24f22e60679c8f3d371976bfd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6344c10de1c90015c68adfb880291af980b886/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9c6344c10de1c90015c68adfb880291af980b886", "patch": "@@ -13474,17 +13474,15 @@ cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl,\n static tree\n build_range_temp (tree range_expr)\n {\n-  tree range_type, range_temp;\n-\n   /* Find out the type deduced by the declaration\n      `auto &&__range = range_expr'.  */\n-  range_type = cp_build_reference_type (make_auto (), true);\n-  range_type = do_auto_deduction (range_type, range_expr,\n-\t\t\t\t  type_uses_auto (range_type));\n+  tree auto_node = make_auto ();\n+  tree range_type = cp_build_reference_type (auto_node, true);\n+  range_type = do_auto_deduction (range_type, range_expr, auto_node);\n \n   /* Create the __range variable.  */\n-  range_temp = build_decl (input_location, VAR_DECL, for_range__identifier,\n-\t\t\t   range_type);\n+  tree range_temp = build_decl (input_location, VAR_DECL,\n+\t\t\t\tfor_range__identifier, range_type);\n   TREE_USED (range_temp) = 1;\n   DECL_ARTIFICIAL (range_temp) = 1;\n \n@@ -25910,7 +25908,8 @@ cp_parser_class_specifier_1 (cp_parser* parser)\n \t     so that maybe_instantiate_noexcept can tsubst the NOEXCEPT_EXPR\n \t     in the pattern.  */\n \t  for (tree i : DEFPARSE_INSTANTIATIONS (def_parse))\n-\t    DEFERRED_NOEXCEPT_PATTERN (TREE_PURPOSE (i)) = TREE_PURPOSE (spec);\n+\t    DEFERRED_NOEXCEPT_PATTERN (TREE_PURPOSE (i))\n+\t      = spec ? TREE_PURPOSE (spec) : error_mark_node;\n \n \t  /* Restore the state of local_variables_forbidden_p.  */\n \t  parser->local_variables_forbidden_p = local_variables_forbidden_p;"}]}