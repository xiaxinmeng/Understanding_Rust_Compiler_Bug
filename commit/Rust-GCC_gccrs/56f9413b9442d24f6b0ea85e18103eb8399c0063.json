{"sha": "56f9413b9442d24f6b0ea85e18103eb8399c0063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmOTQxM2I5NDQyZDI0ZjZiMGVhODVlMTgxMDNlYjgzOTljMDA2Mw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:06:25Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:06:25Z"}, "message": "h8300-protos.h (function_arg): Delete.\n\n\t* config/h8300/h8300-protos.h (function_arg): Delete.\n\t* config/h8300/h8300.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/h8300/h8300.c (function_arg): Rename to...\n\t(h8300_function_arg): ...this.  Make static.  Take a const_tree and\n\ta bool.\n\t(h8300_function_arg_advance): New function.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166042", "tree": {"sha": "94974720a031e0437a65211fe1386ec44c12f2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94974720a031e0437a65211fe1386ec44c12f2a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f9413b9442d24f6b0ea85e18103eb8399c0063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f9413b9442d24f6b0ea85e18103eb8399c0063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f9413b9442d24f6b0ea85e18103eb8399c0063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f9413b9442d24f6b0ea85e18103eb8399c0063/comments", "author": null, "committer": null, "parents": [{"sha": "66d5ee1440253133ff2a483f61b2468957cf407f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d5ee1440253133ff2a483f61b2468957cf407f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d5ee1440253133ff2a483f61b2468957cf407f"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "6d1519e3cfb1609906116dce1190d4f333854663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56f9413b9442d24f6b0ea85e18103eb8399c0063", "patch": "@@ -1,3 +1,13 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/h8300/h8300-protos.h (function_arg): Delete.\n+\t* config/h8300/h8300.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/h8300/h8300.c (function_arg): Rename to...\n+\t(h8300_function_arg): ...this.  Make static.  Take a const_tree and\n+\ta bool.\n+\t(h8300_function_arg_advance): New function.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/arc/arc.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Move code"}, {"sha": "676b3b7018e4186e9f4c9f887519058034bc6c81", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=56f9413b9442d24f6b0ea85e18103eb8399c0063", "patch": "@@ -89,8 +89,6 @@ extern int h8300_ldm_stm_parallel (rtvec, int, int);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern struct rtx_def *function_arg (CUMULATIVE_ARGS *,\n-\t\t\t\t     enum machine_mode, tree, int);\n extern int h8300_funcvec_function_p (tree);\n extern int h8300_eightbit_data_p (tree);\n extern int h8300_tiny_data_p (tree);"}, {"sha": "f9bcc74732cb9f9828998ed4963fe6240ef0c510", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=56f9413b9442d24f6b0ea85e18103eb8399c0063", "patch": "@@ -1095,11 +1095,14 @@ h8300_pr_saveall (struct cpp_reader *pfile ATTRIBUTE_UNUSED)\n /* If the next function argument with MODE and TYPE is to be passed in\n    a register, return a reg RTX for the hard register in which to pass\n    the argument.  CUM represents the state after the last argument.\n-   If the argument is to be pushed, NULL_RTX is returned.  */\n+   If the argument is to be pushed, NULL_RTX is returned.\n \n-rtx\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-\t      tree type, int named)\n+   On the H8/300 all normal args are pushed, unless -mquickcall in which\n+   case the first 3 arguments are passed in registers.  */\n+\n+static rtx\n+h8300_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t    const_tree type, bool named)\n {\n   static const char *const hand_list[] = {\n     \"__main\",\n@@ -1163,6 +1166,20 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   return result;\n }\n+\n+/* Update the data in CUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+static void\n+h8300_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t    const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  cum->nbytes += (mode != BLKmode\n+\t\t  ? (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD\n+\t\t  : (int_size_in_bytes (type) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD);\n+}\n+\n \f\n /* Compute the cost of an and insn.  */\n \n@@ -5915,6 +5932,12 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY h8300_return_in_memory\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG h8300_function_arg\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE h8300_function_arg_advance\n+\n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG h8300_reorg\n "}, {"sha": "eb747ed348dc65d170d9b32f417468ac7457ad99", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f9413b9442d24f6b0ea85e18103eb8399c0063/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=56f9413b9442d24f6b0ea85e18103eb8399c0063", "patch": "@@ -600,35 +600,6 @@ struct cum_arg\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).nbytes = 0, (CUM).libcall = LIBNAME)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n- ((CUM).nbytes += ((MODE) != BLKmode\t\t\t\t\t\\\n-  ? (GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD\t\\\n-  : (int_size_in_bytes (TYPE) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD))\n-\n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-\n-/* On the H8/300 all normal args are pushed, unless -mquickcall in which\n-   case the first 3 arguments are passed in registers.\n-   See function `function_arg'.  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  function_arg (&CUM, MODE, TYPE, NAMED)\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}]}