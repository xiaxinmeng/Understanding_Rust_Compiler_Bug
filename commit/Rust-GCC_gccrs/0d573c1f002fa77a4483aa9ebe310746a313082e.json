{"sha": "0d573c1f002fa77a4483aa9ebe310746a313082e", "node_id": "C_kwDOANBUbNoAKDBkNTczYzFmMDAyZmE3N2E0NDgzYWE5ZWJlMzEwNzQ2YTMxMzA4MmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-07T15:28:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-07T15:28:20Z"}, "message": "c++: Fix up ICE in emit_support_tinfo_1 [PR109042]\n\nIn my recent rtti.cc change I assumed when emitting the support tinfos\nthat the tinfos for the fundamental types haven't been created yet.\nNormally (in libsupc++.a (fundamental_type_info.o)) that is the case,\nbut as can be seen on the testcase, one can violate it by using typeid\netc. in the same TU and do it before ~__fundamental_type_info ()\ndefinition.\n\nThe following patch fixes that by popping from unemitted_tinfo_decls\nonly in the normal case when it is there, and treating non-NULL\nDECL_INITIAL on a tinfo node as indication that emit_tinfo_decl has\nprocessed it already.\n\n2023-03-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109042\n\t* rtti.cc (emit_support_tinfo_1): Don't assert that last\n\tunemitted_tinfo_decls element is tinfo, instead pop from it only in\n\tthat case.\n\t* decl2.cc (c_parse_final_cleanups): Don't call emit_tinfo_decl\n\tfor unemitted_tinfO_decls which have already non-NULL DECL_INITIAL.\n\n\t* g++.dg/rtti/pr109042.C: New test.", "tree": {"sha": "f4ba156eb343dfe00aa0ad0a04ec2e41279942a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ba156eb343dfe00aa0ad0a04ec2e41279942a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d573c1f002fa77a4483aa9ebe310746a313082e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d573c1f002fa77a4483aa9ebe310746a313082e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d573c1f002fa77a4483aa9ebe310746a313082e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d573c1f002fa77a4483aa9ebe310746a313082e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4692319fd5fc7d740436e8bb338f44cb8df6c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4692319fd5fc7d740436e8bb338f44cb8df6c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4692319fd5fc7d740436e8bb338f44cb8df6c58"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "387e24542cd727aa4cd2abc7629325bad5c77398", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d573c1f002fa77a4483aa9ebe310746a313082e/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d573c1f002fa77a4483aa9ebe310746a313082e/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=0d573c1f002fa77a4483aa9ebe310746a313082e", "patch": "@@ -4982,7 +4982,7 @@ c_parse_final_cleanups (void)\n \t get emitted.  */\n       for (i = unemitted_tinfo_decls->length ();\n \t   unemitted_tinfo_decls->iterate (--i, &t);)\n-\tif (emit_tinfo_decl (t))\n+\tif (DECL_INITIAL (t) || emit_tinfo_decl (t))\n \t  {\n \t    reconsider = true;\n \t    unemitted_tinfo_decls->unordered_remove (i);"}, {"sha": "7878929c246798a50e2b64ffb9f4506d5c389ebe", "filename": "gcc/cp/rtti.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d573c1f002fa77a4483aa9ebe310746a313082e/gcc%2Fcp%2Frtti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d573c1f002fa77a4483aa9ebe310746a313082e/gcc%2Fcp%2Frtti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.cc?ref=0d573c1f002fa77a4483aa9ebe310746a313082e", "patch": "@@ -1581,10 +1581,19 @@ emit_support_tinfo_1 (tree bltn)\n       /* Emit it right away if not emitted already.  */\n       if (DECL_INITIAL (tinfo) == NULL_TREE)\n \t{\n-\t  gcc_assert (unemitted_tinfo_decls->last () == tinfo);\n \t  bool ok = emit_tinfo_decl (tinfo);\n \t  gcc_assert (ok);\n-\t  unemitted_tinfo_decls->pop ();\n+\t  /* When compiling libsupc++.a (fundamental_type_info.o),\n+\t     unemitted_tinfo_decls->last () will be tinfo, so pop it\n+\t     from the vector as it is emitted now.  If one uses typeid\n+\t     etc. in the same TU as the definition of\n+\t     ~fundamental_type_info (), the tinfo might be emitted\n+\t     already earlier, in such case keep it in the vector\n+\t     (as otherwise we'd need to walk the whole vector) and\n+\t     let c_parse_final_cleanups ignore it when it will have\n+\t     non-NULL DECL_INITIAL.  */\n+\t  if (unemitted_tinfo_decls->last () == tinfo)\n+\t    unemitted_tinfo_decls->pop ();\n \t}\n     }\n }"}, {"sha": "af448f74a99e0e2bbb790456842de9f4693f540f", "filename": "gcc/testsuite/g++.dg/rtti/pr109042.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d573c1f002fa77a4483aa9ebe310746a313082e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fpr109042.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d573c1f002fa77a4483aa9ebe310746a313082e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fpr109042.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fpr109042.C?ref=0d573c1f002fa77a4483aa9ebe310746a313082e", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/109042\n+// { dg-do compile }\n+\n+namespace std { class type_info {}; }\n+\n+std::type_info\n+foo ()\n+{\n+  return typeid (void);\n+}\n+\n+namespace __cxxabiv1 {\n+  struct __fundamental_type_info {\n+    virtual ~__fundamental_type_info ();\n+  };\n+\n+  __fundamental_type_info::~__fundamental_type_info ()\n+  {\n+  }\n+}"}]}