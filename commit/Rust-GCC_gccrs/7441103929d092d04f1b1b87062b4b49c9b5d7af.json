{"sha": "7441103929d092d04f1b1b87062b4b49c9b5d7af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0MTEwMzkyOWQwOTJkMDRmMWIxYjg3MDYyYjRiNDljOWI1ZDdhZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-04-23T12:29:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-04-23T12:29:43Z"}, "message": "i386.c (ix86_output_addr_diff_elt): Avoid x86_64 binutils bug workaround.\n\n\t* i386.c (ix86_output_addr_diff_elt): Avoid x86_64 binutils bug\n\tworkaround.\n\t(ix86_expand_int_movcc): Avoid x86_64 compilation chrash.\n\t(ix86_expand_clrstr): Fix typo.\n\t* loop.c (gen_load_of_final_value): New.\n\t(loop_givs_rescan, strength_reduce, check_dbra_loop):\n\tUse it.\n\nFrom-SVN: r52664", "tree": {"sha": "f83589b318bbe45bd7a32929c3720d5ce25c9b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f83589b318bbe45bd7a32929c3720d5ce25c9b96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7441103929d092d04f1b1b87062b4b49c9b5d7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7441103929d092d04f1b1b87062b4b49c9b5d7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7441103929d092d04f1b1b87062b4b49c9b5d7af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7441103929d092d04f1b1b87062b4b49c9b5d7af/comments", "author": null, "committer": null, "parents": [{"sha": "1a887f860a2905e95ab853fb1f8adef14515d74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a887f860a2905e95ab853fb1f8adef14515d74e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a887f860a2905e95ab853fb1f8adef14515d74e"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "145cb20f7f2594cc52da2c883af717e303b41e6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7441103929d092d04f1b1b87062b4b49c9b5d7af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7441103929d092d04f1b1b87062b4b49c9b5d7af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7441103929d092d04f1b1b87062b4b49c9b5d7af", "patch": "@@ -1,3 +1,13 @@\n+Tue Apr 23 14:24:25 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_output_addr_diff_elt): Avoid x86_64 binutils bug\n+\tworkaround.\n+\t(ix86_expand_int_movcc): Avoid x86_64 compilation chrash.\n+\t(ix86_expand_clrstr): Fix typo.\n+\t* loop.c (gen_load_of_final_value): New.\n+\t(loop_givs_rescan, strength_reduce, check_dbra_loop):\n+\tUse it.\n+\n 2002-04-23  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (builtin_memset_gen_str): New function."}, {"sha": "091a49c36d2fbbe067033ab48c4d2b35f1b2e222", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7441103929d092d04f1b1b87062b4b49c9b5d7af/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7441103929d092d04f1b1b87062b4b49c9b5d7af/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7441103929d092d04f1b1b87062b4b49c9b5d7af", "patch": "@@ -6686,7 +6686,7 @@ ix86_output_addr_diff_elt (file, value, rel)\n      int value, rel;\n {\n   if (TARGET_64BIT)\n-    fprintf (file, \"%s%s%d-.+(.-%s%d)\\n\",\n+    fprintf (file, \"%s%s%d-%s%d\\n\",\n \t     ASM_LONG, LPREFIX, value, LPREFIX, rel);\n   else if (HAVE_AS_GOTOFF_IN_DATA)\n     fprintf (file, \"%s%s%d@GOTOFF\\n\", ASM_LONG, LPREFIX, value);\n@@ -7983,6 +7983,10 @@ ix86_expand_int_movcc (operands)\n       && GET_CODE (ix86_compare_op1) == CONST_INT\n       && mode != HImode\n       && (unsigned int) INTVAL (ix86_compare_op1) != 0xffffffff\n+      /* The operand still must be representable as sign extended value.  */\n+      && (!TARGET_64BIT\n+\t  || GET_MODE (ix86_compare_op0) != DImode\n+\t  || (unsigned int) INTVAL (ix86_compare_op1) != 0x7fffffff)\n       && GET_CODE (operands[2]) == CONST_INT\n       && GET_CODE (operands[3]) == CONST_INT)\n     {\n@@ -9528,7 +9532,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t\t\t\t gen_rtx_SUBREG (SImode, zeroreg, 0)));\n       if (TARGET_64BIT && (align <= 4 || count == 0))\n \t{\n-\t  rtx label = ix86_expand_aligntest (destreg, 2);\n+\t  rtx label = ix86_expand_aligntest (countreg, 2);\n \t  emit_insn (gen_strsetsi (destreg,\n \t\t\t\t   gen_rtx_SUBREG (SImode, zeroreg, 0)));\n \t  emit_label (label);\n@@ -9539,7 +9543,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t\t\t\t gen_rtx_SUBREG (HImode, zeroreg, 0)));\n       if (align <= 2 || count == 0)\n \t{\n-\t  rtx label = ix86_expand_aligntest (destreg, 2);\n+\t  rtx label = ix86_expand_aligntest (countreg, 2);\n \t  emit_insn (gen_strsethi (destreg,\n \t\t\t\t   gen_rtx_SUBREG (HImode, zeroreg, 0)));\n \t  emit_label (label);\n@@ -9550,7 +9554,7 @@ ix86_expand_clrstr (src, count_exp, align_exp)\n \t\t\t\t gen_rtx_SUBREG (QImode, zeroreg, 0)));\n       if (align <= 1 || count == 0)\n \t{\n-\t  rtx label = ix86_expand_aligntest (destreg, 1);\n+\t  rtx label = ix86_expand_aligntest (countreg, 1);\n \t  emit_insn (gen_strsetqi (destreg,\n \t\t\t\t   gen_rtx_SUBREG (QImode, zeroreg, 0)));\n \t  emit_label (label);"}, {"sha": "da344f0af7ba99d3d7ea42b88eecde11e9327b9d", "filename": "gcc/loop.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7441103929d092d04f1b1b87062b4b49c9b5d7af/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7441103929d092d04f1b1b87062b4b49c9b5d7af/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=7441103929d092d04f1b1b87062b4b49c9b5d7af", "patch": "@@ -354,6 +354,7 @@ static rtx loop_insn_sink_or_swim PARAMS((const struct loop *, rtx));\n static void loop_dump_aux PARAMS ((const struct loop *, FILE *, int));\n static void loop_delete_insns PARAMS ((rtx, rtx));\n static HOST_WIDE_INT remove_constant_addition PARAMS ((rtx *));\n+static rtx gen_load_of_final_value PARAMS ((rtx, rtx));\n void debug_ivs PARAMS ((const struct loop *));\n void debug_iv_class PARAMS ((const struct iv_class *));\n void debug_biv PARAMS ((const struct induction *));\n@@ -4798,7 +4799,8 @@ loop_givs_rescan (loop, bl, reg_map)\n \t\t\t       v->mult_val, v->add_val, v->dest_reg);\n       else if (v->final_value)\n \tloop_insn_sink_or_swim (loop,\n-\t\t\t\tgen_move_insn (v->dest_reg, v->final_value));\n+\t\t\t\tgen_load_of_final_value (v->dest_reg,\n+\t\t\t\t\t\t\t v->final_value));\n \n       if (loop_dump_stream)\n \t{\n@@ -5155,8 +5157,9 @@ strength_reduce (loop, flags)\n \t     value, so we don't need another one.  We can't calculate the\n \t     proper final value for such a biv here anyways.  */\n \t  if (bl->final_value && ! bl->reversed)\n-\t      loop_insn_sink_or_swim (loop, gen_move_insn\n-\t\t\t\t      (bl->biv->dest_reg, bl->final_value));\n+\t      loop_insn_sink_or_swim (loop,\n+\t\t\t\t      gen_load_of_final_value (bl->biv->dest_reg,\n+\t\t\t\t\t\t\t       bl->final_value));\n \n \t  if (loop_dump_stream)\n \t    fprintf (loop_dump_stream, \"Reg %d: biv eliminated\\n\",\n@@ -5165,8 +5168,8 @@ strength_reduce (loop, flags)\n       /* See above note wrt final_value.  But since we couldn't eliminate\n \t the biv, we must set the value after the loop instead of before.  */\n       else if (bl->final_value && ! bl->reversed)\n-\tloop_insn_sink (loop, gen_move_insn (bl->biv->dest_reg,\n-\t\t\t\t\t     bl->final_value));\n+\tloop_insn_sink (loop, gen_load_of_final_value (bl->biv->dest_reg,\n+\t\t\t\t\t\t       bl->final_value));\n     }\n \n   /* Go through all the instructions in the loop, making all the\n@@ -8361,7 +8364,7 @@ check_dbra_loop (loop, insn_count)\n \t      if ((REGNO_LAST_UID (bl->regno) != INSN_UID (first_compare))\n \t\t  || ! bl->init_insn\n \t\t  || REGNO_FIRST_UID (bl->regno) != INSN_UID (bl->init_insn))\n-\t\tloop_insn_sink (loop, gen_move_insn (reg, final_value));\n+\t\tloop_insn_sink (loop, gen_load_of_final_value (reg, final_value));\n \n \t      /* Delete compare/branch at end of loop.  */\n \t      delete_related_insns (PREV_INSN (loop_end));\n@@ -10352,6 +10355,21 @@ loop_insn_sink (loop, pattern)\n   return loop_insn_emit_before (loop, 0, loop->sink, pattern);\n }\n \n+/* bl->final_value can be eighter general_operand or PLUS of general_operand\n+   and constant.  Emit sequence of intructions to load it into REG  */\n+static rtx\n+gen_load_of_final_value (reg, final_value)\n+     rtx reg, final_value;\n+{\n+  rtx seq;\n+  start_sequence ();\n+  final_value = force_operand (final_value, reg);\n+  if (final_value != reg)\n+    emit_move_insn (reg, final_value);\n+  seq = gen_sequence ();\n+  end_sequence ();\n+  return seq;\n+}\n \n /* If the loop has multiple exits, emit insn for PATTERN before the\n    loop to ensure that it will always be executed no matter how the"}]}