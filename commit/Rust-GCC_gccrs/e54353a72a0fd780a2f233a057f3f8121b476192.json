{"sha": "e54353a72a0fd780a2f233a057f3f8121b476192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0MzUzYTcyYTBmZDc4MGEyZjIzM2EwNTdmM2Y4MTIxYjQ3NjE5Mg==", "commit": {"author": {"name": "Fei Yang", "email": "felix.yang@huawei.com", "date": "2020-06-18T19:11:09Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-06-18T19:11:09Z"}, "message": "vect: Use vect_relevant_for_alignment_p consistently\n\nMinor code refactorings in tree-vect-data-refs.c.  When trying loop peeling\nto force alignment, call vect_relevant_for_alignment_p to filter out data\nreferences in the loop whose alignment is irrelevant.\n\n2020-06-18  Felix Yang  <felix.yang@huawei.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Call\n\tvect_relevant_for_alignment_p to filter out data references in\n\tthe loop whose alignment is irrelevant when trying loop peeling\n\tto force alignment.", "tree": {"sha": "f0eb46a32bb3789499801d5a9b30c7118420011f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0eb46a32bb3789499801d5a9b30c7118420011f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e54353a72a0fd780a2f233a057f3f8121b476192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54353a72a0fd780a2f233a057f3f8121b476192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54353a72a0fd780a2f233a057f3f8121b476192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54353a72a0fd780a2f233a057f3f8121b476192/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95395926a84a2406faefe0995295d199d595440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95395926a84a2406faefe0995295d199d595440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95395926a84a2406faefe0995295d199d595440"}], "stats": {"total": 29, "additions": 3, "deletions": 26}, "files": [{"sha": "2365a3925bb815fc864822456811d561d62d3bb7", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54353a72a0fd780a2f233a057f3f8121b476192/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54353a72a0fd780a2f233a057f3f8121b476192/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=e54353a72a0fd780a2f233a057f3f8121b476192", "patch": "@@ -1722,29 +1722,10 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n   FOR_EACH_VEC_ELT (datarefs, i, dr)\n     {\n       dr_vec_info *dr_info = loop_vinfo->lookup_dr (dr);\n-      stmt_vec_info stmt_info = dr_info->stmt;\n-\n-      if (!STMT_VINFO_RELEVANT_P (stmt_info))\n-\tcontinue;\n-\n-      /* For interleaving, only the alignment of the first access\n-         matters.  */\n-      if (STMT_VINFO_GROUPED_ACCESS (stmt_info)\n-\t  && DR_GROUP_FIRST_ELEMENT (stmt_info) != stmt_info)\n-\tcontinue;\n-\n-      /* For scatter-gather or invariant accesses there is nothing\n-\t to enhance.  */\n-      if (STMT_VINFO_GATHER_SCATTER_P (stmt_info)\n-\t  || integer_zerop (DR_STEP (dr)))\n-\tcontinue;\n-\n-      /* Strided accesses perform only component accesses, alignment is\n-\t irrelevant for them.  */\n-      if (STMT_VINFO_STRIDED_P (stmt_info)\n-\t  && !STMT_VINFO_GROUPED_ACCESS (stmt_info))\n+      if (!vect_relevant_for_alignment_p (dr_info))\n \tcontinue;\n \n+      stmt_vec_info stmt_info = dr_info->stmt;\n       supportable_dr_alignment\n \t= vect_supportable_dr_alignment (loop_vinfo, dr_info, true);\n       do_peeling = vector_alignment_reachable_p (dr_info);\n@@ -2136,12 +2117,8 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n \t  FOR_EACH_VEC_ELT (datarefs, i, dr)\n \t    if (dr != dr0_info->dr)\n \t      {\n-\t\t/* Strided accesses perform only component accesses, alignment\n-\t\t   is irrelevant for them.  */\n \t\tdr_vec_info *dr_info = loop_vinfo->lookup_dr (dr);\n-\t\tstmt_info = dr_info->stmt;\n-\t\tif (STMT_VINFO_STRIDED_P (stmt_info)\n-\t\t    && !STMT_VINFO_GROUPED_ACCESS (stmt_info))\n+\t\tif (!vect_relevant_for_alignment_p (dr_info))\n \t\t  continue;\n \n \t\tvect_update_misalignment_for_peel (dr_info, dr0_info, npeel);"}]}