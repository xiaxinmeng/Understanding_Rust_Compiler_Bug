{"sha": "6475e077a091ea57b7442ed35feaf031728bdeb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3NWUwNzdhMDkxZWE1N2I3NDQyZWQzNWZlYWYwMzE3MjhiZGViMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-06-29T09:56:40Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-06-29T09:56:40Z"}, "message": "dumpfile.c: add indentation via DUMP_VECT_SCOPE\n\nThis patch adds a concept of nested \"scopes\" to dumpfile.c's dump_*_loc\ncalls, and wires it up to the DUMP_VECT_SCOPE macro in tree-vectorizer.h,\nso that the nested structure is shown in -fopt-info by indentation.\n\nFor example, this converts -fopt-info-all e.g. from:\n\ntest.c:8:3: note: === analyzing loop ===\ntest.c:8:3: note: === analyze_loop_nest ===\ntest.c:8:3: note: === vect_analyze_loop_form ===\ntest.c:8:3: note: === get_loop_niters ===\ntest.c:8:3: note: symbolic number of iterations is (unsigned int) n_9(D)\ntest.c:8:3: note: not vectorized: loop contains function calls or data references that cannot be analyzed\ntest.c:8:3: note: vectorized 0 loops in function\n\nto:\n\ntest.c:8:3: note: === analyzing loop ===\ntest.c:8:3: note:  === analyze_loop_nest ===\ntest.c:8:3: note:   === vect_analyze_loop_form ===\ntest.c:8:3: note:    === get_loop_niters ===\ntest.c:8:3: note:   symbolic number of iterations is (unsigned int) n_9(D)\ntest.c:8:3: note:   not vectorized: loop contains function calls or data references that cannot be analyzed\ntest.c:8:3: note: vectorized 0 loops in function\n\nshowing that the \"symbolic number of iterations\" message is within\nthe \"=== analyze_loop_nest ===\" (and not within the\n\"=== vect_analyze_loop_form ===\").\n\nThis is also enabling work for followups involving optimization records\n(allowing the records to directly capture the nested structure of the\ndump messages).\n\ngcc/ChangeLog:\n\t* dumpfile.c (dump_loc): Add indentation based on scope depth.\n\t(dump_scope_depth): New variable.\n\t(get_dump_scope_depth): New function.\n\t(dump_begin_scope): New function.\n\t(dump_end_scope): New function.\n\t* dumpfile.h (get_dump_scope_depth): New declaration.\n\t(dump_begin_scope): New declaration.\n\t(dump_end_scope): New declaration.\n\t(class auto_dump_scope): New class.\n\t(AUTO_DUMP_SCOPE): New macro.\n\t* tree-vectorizer.h (DUMP_VECT_SCOPE): Reimplement in terms of\n\tAUTO_DUMP_SCOPE.\n\nFrom-SVN: r262246", "tree": {"sha": "51378b372948340b17f7da85b6fb2375dfa3a031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51378b372948340b17f7da85b6fb2375dfa3a031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6475e077a091ea57b7442ed35feaf031728bdeb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6475e077a091ea57b7442ed35feaf031728bdeb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6475e077a091ea57b7442ed35feaf031728bdeb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6475e077a091ea57b7442ed35feaf031728bdeb2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fdce073fc342fab76363e9169f7bcf49d8ab98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fdce073fc342fab76363e9169f7bcf49d8ab98b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fdce073fc342fab76363e9169f7bcf49d8ab98b"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "5c7c502212322b5c1af618ac52fd1f039220c266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6475e077a091ea57b7442ed35feaf031728bdeb2", "patch": "@@ -1,3 +1,18 @@\n+2018-06-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* dumpfile.c (dump_loc): Add indentation based on scope depth.\n+\t(dump_scope_depth): New variable.\n+\t(get_dump_scope_depth): New function.\n+\t(dump_begin_scope): New function.\n+\t(dump_end_scope): New function.\n+\t* dumpfile.h (get_dump_scope_depth): New declaration.\n+\t(dump_begin_scope): New declaration.\n+\t(dump_end_scope): New declaration.\n+\t(class auto_dump_scope): New class.\n+\t(AUTO_DUMP_SCOPE): New macro.\n+\t* tree-vectorizer.h (DUMP_VECT_SCOPE): Reimplement in terms of\n+\tAUTO_DUMP_SCOPE.\n+\n 2018-06-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_analyze_data_ref_dependences): Assert"}, {"sha": "93bc65148dd94779f6f6059d15347f543527c4ef", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=6475e077a091ea57b7442ed35feaf031728bdeb2", "patch": "@@ -453,6 +453,8 @@ dump_loc (dump_flags_t dump_kind, FILE *dfile, source_location loc)\n                  DECL_SOURCE_FILE (current_function_decl),\n                  DECL_SOURCE_LINE (current_function_decl),\n                  DECL_SOURCE_COLUMN (current_function_decl));\n+      /* Indentation based on scope depth.  */\n+      fprintf (dfile, \"%*s\", get_dump_scope_depth (), \"\");\n     }\n }\n \n@@ -573,6 +575,39 @@ template void dump_dec (dump_flags_t, const poly_uint64 &);\n template void dump_dec (dump_flags_t, const poly_offset_int &);\n template void dump_dec (dump_flags_t, const poly_widest_int &);\n \n+/* The current dump scope-nesting depth.  */\n+\n+static int dump_scope_depth;\n+\n+/* Get the current dump scope-nesting depth.\n+   For use by dump_*_loc (for showing nesting via indentation).  */\n+\n+unsigned int\n+get_dump_scope_depth ()\n+{\n+  return dump_scope_depth;\n+}\n+\n+/* Push a nested dump scope.\n+   Print \"=== NAME ===\\n\" to the dumpfile, if any, and to the -fopt-info\n+   destination, if any.\n+   Increment the scope depth.  */\n+\n+void\n+dump_begin_scope (const char *name, const dump_location_t &loc)\n+{\n+  dump_printf_loc (MSG_NOTE, loc, \"=== %s ===\\n\", name);\n+  dump_scope_depth++;\n+}\n+\n+/* Pop a nested dump scope.  */\n+\n+void\n+dump_end_scope ()\n+{\n+  dump_scope_depth--;\n+}\n+\n /* Start a dump for PHASE. Store user-supplied dump flags in\n    *FLAG_PTR.  Return the number of streams opened.  Set globals\n    DUMP_FILE, and ALT_DUMP_FILE to point to the opened streams, and"}, {"sha": "9828a3f550cf317923363d690596743b472c1f6b", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=6475e077a091ea57b7442ed35feaf031728bdeb2", "patch": "@@ -459,6 +459,45 @@ dump_enabled_p (void)\n   return dumps_are_enabled;\n }\n \n+/* Managing nested scopes, so that dumps can express the call chain\n+   leading to a dump message.  */\n+\n+extern unsigned int get_dump_scope_depth ();\n+extern void dump_begin_scope (const char *name, const dump_location_t &loc);\n+extern void dump_end_scope ();\n+\n+/* Implementation detail of the AUTO_DUMP_SCOPE macro below.\n+\n+   A RAII-style class intended to make it easy to emit dump\n+   information about entering and exiting a collection of nested\n+   function calls.  */\n+\n+class auto_dump_scope\n+{\n+ public:\n+  auto_dump_scope (const char *name, dump_location_t loc)\n+  {\n+    if (dump_enabled_p ())\n+      dump_begin_scope (name, loc);\n+  }\n+  ~auto_dump_scope ()\n+  {\n+    if (dump_enabled_p ())\n+      dump_end_scope ();\n+  }\n+};\n+\n+/* A macro for calling:\n+     dump_begin_scope (NAME, LOC);\n+   via an RAII object, thus printing \"=== MSG ===\\n\" to the dumpfile etc,\n+   and then calling\n+     dump_end_scope ();\n+   once the object goes out of scope, thus capturing the nesting of\n+   the scopes.  */\n+\n+#define AUTO_DUMP_SCOPE(NAME, LOC) \\\n+  auto_dump_scope scope (NAME, LOC)\n+\n namespace gcc {\n \n class dump_manager"}, {"sha": "a8406b3df7a126868dc3373aed34f7377a993898", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6475e077a091ea57b7442ed35feaf031728bdeb2/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=6475e077a091ea57b7442ed35feaf031728bdeb2", "patch": "@@ -1440,15 +1440,16 @@ vect_get_scalar_dr_size (struct data_reference *dr)\n /* Source location + hotness information. */\n extern dump_user_location_t vect_location;\n \n-/* If dumping is enabled, emit a MSG_NOTE at vect_location about\n-   entering MSG within the vectorizer.  MSG should be a string literal. */\n+/* A macro for calling:\n+     dump_begin_scope (MSG, vect_location);\n+   via an RAII object, thus printing \"=== MSG ===\\n\" to the dumpfile etc,\n+   and then calling\n+     dump_end_scope ();\n+   once the object goes out of scope, thus capturing the nesting of\n+   the scopes.  */\n \n #define DUMP_VECT_SCOPE(MSG) \\\n-  do {\t\t\t\t\t\t\\\n-    if (dump_enabled_p ())\t\t\t\\\n-      dump_printf_loc (MSG_NOTE, vect_location, \\\n-\t\t       \"=== \" MSG \" ===\\n\");\t\\\n-  } while (0)\n+  AUTO_DUMP_SCOPE (MSG, vect_location)\n \n /*-----------------------------------------------------------------*/\n /* Function prototypes.                                            */"}]}