{"sha": "7e46250027e3654b430af0db8ffc0f6c822a2c7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U0NjI1MDAyN2UzNjU0YjQzMGFmMGRiOGZmYzBmNmM4MjJhMmM3Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-03T00:41:03Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-03T00:41:03Z"}, "message": "(objc_verror): New function.\n\n(objc_fatal): Remove function.\n(objc_set_error_handler): New function.\n(_objc_error_handler): New global variable.\n(__alpha__): Remove unneeded code.\n(objc_error): Allow user specified error handler function to trap and\nhandle the objc error.  Added an error code parameter which indicates\nthe specific error that occured.\n(objc_malloc, objc_atomic_malloc): Replace call to objc_fatal function\nwith call to objc_error function.\n(objc_valloc, objc_realloc, objc_calloc): Likewise.\n\nFrom-SVN: r13589", "tree": {"sha": "cd783b7a928f3129734756e2a1456dd7a9c6a20c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd783b7a928f3129734756e2a1456dd7a9c6a20c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e46250027e3654b430af0db8ffc0f6c822a2c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e46250027e3654b430af0db8ffc0f6c822a2c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e46250027e3654b430af0db8ffc0f6c822a2c7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e46250027e3654b430af0db8ffc0f6c822a2c7f/comments", "author": null, "committer": null, "parents": [{"sha": "241365d3cca8fbfa14551346155b669450ad70d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241365d3cca8fbfa14551346155b669450ad70d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241365d3cca8fbfa14551346155b669450ad70d3"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "8fc8a3fa6c8c6429b2e3e974cc87a05e57da48fe", "filename": "gcc/objc/misc.c", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e46250027e3654b430af0db8ffc0f6c822a2c7f/gcc%2Fobjc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e46250027e3654b430af0db8ffc0f6c822a2c7f/gcc%2Fobjc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fmisc.c?ref=7e46250027e3654b430af0db8ffc0f6c822a2c7f", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective C Runtime Miscellaneous \n-   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contrbuted by Kresten Krab Thorup\n \n This file is part of GNU CC.\n@@ -27,30 +27,53 @@ Boston, MA 02111-1307, USA.  */\n \n #define __USE_FIXED_PROTOTYPES__\n #include <stdlib.h>\n-\n-#ifdef __alpha__\n-extern int write (int, const char*, int);\n-extern size_t strlen (const char*);\n-#endif\n-\n #include \"runtime.h\"\n \n-void objc_error(id object, const char* fmt, va_list);\n+/*\n+** Error handler function\n+** NULL so that default is to just print to stderr\n+*/\n+static objc_error_handler _objc_error_handler = NULL;\n+\n+/* Trigger an objc error */\n+void\n+objc_error(id object, int code, const char* fmt, ...)\n+{\n+  va_list ap;\n \n-void (*_objc_error)(id, const char*, va_list) = objc_error;\n+  va_start(ap, fmt);\n+  objc_verror(object, code, fmt, ap);\n+  va_end(ap);\n+}\n \n+/* Trigger an objc error */\n void\n-objc_error(id object, const char* fmt, va_list ap)\n+objc_verror(id object, int code, const char* fmt, va_list ap)\n {\n-  vfprintf (stderr, fmt, ap);\n-  abort ();\n+  BOOL result = NO;\n+\n+  /* Call the error handler if its there\n+     Otherwise print to stderr */\n+  if (_objc_error_handler)\n+    result = (*_objc_error_handler)(object, code, fmt, ap);\n+  else\n+    vfprintf (stderr, fmt, ap);\n+\n+  /* Continue if the error handler says its ok\n+     Otherwise abort the program */\n+  if (result)\n+    return;\n+  else\n+    abort();\n }\n \n-volatile void\n-objc_fatal(const char* msg)\n+/* Set the error handler */\n+objc_error_handler\n+objc_set_error_handler(objc_error_handler func)\n {\n-  write(2, msg, (int)strlen((const char*)msg));\n-  abort();\n+  objc_error_handler temp = _objc_error_handler;\n+  _objc_error_handler = func;\n+  return temp;\n }\n \n /*\n@@ -65,7 +88,7 @@ objc_malloc(size_t size)\n {\n   void* res = (void*) (*_objc_malloc)(size);\n   if(!res)\n-    objc_fatal(\"Virtual memory exhausted\\n\");\n+    objc_error(nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -74,7 +97,7 @@ objc_atomic_malloc(size_t size)\n {\n   void* res = (void*) (*_objc_atomic_malloc)(size);\n   if(!res)\n-    objc_fatal(\"Virtual memory exhausted\\n\");\n+    objc_error(nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -83,7 +106,7 @@ objc_valloc(size_t size)\n {\n   void* res = (void*) (*_objc_valloc)(size);\n   if(!res)\n-    objc_fatal(\"Virtual memory exhausted\\n\");\n+    objc_error(nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -92,7 +115,7 @@ objc_realloc(void *mem, size_t size)\n {\n   void* res = (void*) (*_objc_realloc)(mem, size);\n   if(!res)\n-    objc_fatal(\"Virtual memory exhausted\\n\");\n+    objc_error(nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n   return res;\n }\n \n@@ -101,7 +124,7 @@ objc_calloc(size_t nelem, size_t size)\n {\n   void* res = (void*) (*_objc_calloc)(nelem, size);\n   if(!res)\n-    objc_fatal(\"Virtual memory exhausted\\n\");\n+    objc_error(nil, OBJC_ERR_MEMORY, \"Virtual memory exhausted\\n\");\n   return res;\n }\n "}]}