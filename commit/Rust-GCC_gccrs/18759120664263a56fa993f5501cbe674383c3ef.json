{"sha": "18759120664263a56fa993f5501cbe674383c3ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3NTkxMjA2NjQyNjNhNTZmYTk5M2Y1NTAxY2JlNjc0MzgzYzNlZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-05-21T19:25:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-05-21T19:25:50Z"}, "message": "re PR c++/84588 (internal compiler error: Segmentation fault (contains_struct_check()))\n\n/cp\n2018-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84588\n\t* parser.c (cp_parser_maybe_commit_to_declaration,\n\tcp_parser_check_condition_declarator): New.\n\t(cp_parser_simple_declaration): Use the first above.\n\t(cp_parser_condition): Use both the above; enforce\n\t[stmt.stmt]/2 about the declarator not specifying\n\ta function or an array; improve error-recovery.\n\n/testsuite\n2018-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/84588\n\t* g++.dg/cpp0x/cond1.C: New.\n\t* g++.dg/cpp1y/pr84588-1.C: Likewise.\n\t* g++.dg/cpp1y/pr84588-2.C: Likewise.\n\t* g++.dg/cpp1y/pr84588-3.C: Likewise.\n\t* g++.dg/parse/cond6.C: Likewise.\n\t* g++.dg/parse/cond7.C: Likewise.\n\t* g++.dg/parse/cond8.C: Likewise.\n\t* g++.dg/cpp1z/decomp16.C: Update.\n\t* g++.old-deja/g++.jason/cond.C: Likewise.\n\nFrom-SVN: r260482", "tree": {"sha": "11692eed301ed0825ad27370dcef0b4ccf3c2482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11692eed301ed0825ad27370dcef0b4ccf3c2482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18759120664263a56fa993f5501cbe674383c3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18759120664263a56fa993f5501cbe674383c3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18759120664263a56fa993f5501cbe674383c3ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18759120664263a56fa993f5501cbe674383c3ef/comments", "author": null, "committer": null, "parents": [{"sha": "b3229fe17f103d8f1a36f15ab2734361d660b0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3229fe17f103d8f1a36f15ab2734361d660b0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3229fe17f103d8f1a36f15ab2734361d660b0c8"}], "stats": {"total": 233, "additions": 218, "deletions": 15}, "files": [{"sha": "db39e7b9b2ac02caf6c90977bf35a8fe5bdfa760", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -1,3 +1,13 @@\n+2018-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84588\n+\t* parser.c (cp_parser_maybe_commit_to_declaration,\n+\tcp_parser_check_condition_declarator): New.\n+\t(cp_parser_simple_declaration): Use the first above.\n+\t(cp_parser_condition): Use both the above; enforce\n+\t[stmt.stmt]/2 about the declarator not specifying\n+\ta function or an array; improve error-recovery.\n+\n 2018-05-20  Jason Merrill  <jason@redhat.com>\n \n \tPR libstdc++/85843 - warning in logic_error copy constructor."}, {"sha": "3f621911f12f51b72c4d8af5f7a2cd4c2ba1f9a4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -11527,6 +11527,49 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n     }\n }\n \n+/* Helper function for cp_parser_condition and cp_parser_simple_declaration.\n+   If we have seen at least one decl-specifier, and the next token\n+   is not a parenthesis, then we must be looking at a declaration.\n+   (After \"int (\" we might be looking at a functional cast.)  */\n+\n+static void\n+cp_parser_maybe_commit_to_declaration (cp_parser* parser,\n+\t\t\t\t       bool any_specifiers_p)\n+{\n+  if (any_specifiers_p\n+      && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN)\n+      && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE)\n+      && !cp_parser_error_occurred (parser))\n+    cp_parser_commit_to_tentative_parse (parser);\n+}\n+\n+/* Helper function for cp_parser_condition.  Enforces [stmt.stmt]/2:\n+   The declarator shall not specify a function or an array.  Returns\n+   TRUE if the declarator is valid, FALSE otherwise.  */\n+\n+static bool\n+cp_parser_check_condition_declarator (cp_parser* parser,\n+                                     cp_declarator *declarator,\n+                                     location_t loc)\n+{\n+  if (function_declarator_p (declarator)\n+      || declarator->kind == cdk_array)\n+    {\n+      if (declarator->kind == cdk_array)\n+       error_at (loc, \"condition declares an array\");\n+      else\n+       error_at (loc, \"condition declares a function\");\n+      if (parser->fully_implicit_function_template_p)\n+       abort_fully_implicit_template (parser);\n+      cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n+                                            /*or_comma=*/false,\n+                                            /*consume_paren=*/false);\n+      return false;\n+    }\n+  else\n+    return true;\n+}\n+\n /* Parse a condition.\n \n    condition:\n@@ -11563,6 +11606,10 @@ cp_parser_condition (cp_parser* parser)\n \t\t\t\t&declares_class_or_enum);\n   /* Restore the saved message.  */\n   parser->type_definition_forbidden_message = saved_message;\n+\n+  cp_parser_maybe_commit_to_declaration (parser,\n+\t\t\t\t\t type_specifiers.any_specifiers_p);\n+\n   /* If all is well, we might be looking at a declaration.  */\n   if (!cp_parser_error_occurred (parser))\n     {\n@@ -11571,6 +11618,7 @@ cp_parser_condition (cp_parser* parser)\n       tree attributes;\n       cp_declarator *declarator;\n       tree initializer = NULL_TREE;\n+      location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \n       /* Parse the declarator.  */\n       declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n@@ -11601,6 +11649,9 @@ cp_parser_condition (cp_parser* parser)\n \t  bool non_constant_p;\n \t  int flags = LOOKUP_ONLYCONVERTING;\n \n+\t  if (!cp_parser_check_condition_declarator (parser, declarator, loc))\n+\t    return error_mark_node;\n+\n \t  /* Create the declaration.  */\n \t  decl = start_decl (declarator, &type_specifiers,\n \t\t\t     /*initialized_p=*/true,\n@@ -11614,11 +11665,17 @@ cp_parser_condition (cp_parser* parser)\n \t      CONSTRUCTOR_IS_DIRECT_INIT (initializer) = 1;\n \t      flags = 0;\n \t    }\n-\t  else\n+\t  else if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n \t    {\n \t      /* Consume the `='.  */\n-\t      cp_parser_require (parser, CPP_EQ, RT_EQ);\n-\t      initializer = cp_parser_initializer_clause (parser, &non_constant_p);\n+\t      cp_lexer_consume_token (parser->lexer);\n+\t      initializer = cp_parser_initializer_clause (parser,\n+\t\t\t\t\t\t\t  &non_constant_p);\n+\t    }\n+\t  else\n+\t    {\n+\t      cp_parser_error (parser, \"expected initializer\");\n+\t      initializer = error_mark_node;\n \t    }\n \t  if (BRACE_ENCLOSED_INITIALIZER_P (initializer))\n \t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n@@ -12936,14 +12993,8 @@ cp_parser_simple_declaration (cp_parser* parser,\n       goto done;\n     }\n \n-  /* If we have seen at least one decl-specifier, and the next token\n-     is not a parenthesis, then we must be looking at a declaration.\n-     (After \"int (\" we might be looking at a functional cast.)  */\n-  if (decl_specifiers.any_specifiers_p\n-      && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN)\n-      && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE)\n-      && !cp_parser_error_occurred (parser))\n-    cp_parser_commit_to_tentative_parse (parser);\n+  cp_parser_maybe_commit_to_declaration (parser,\n+\t\t\t\t\t decl_specifiers.any_specifiers_p);\n \n   /* Look for C++17 decomposition declaration.  */\n   for (size_t n = 1; ; n++)"}, {"sha": "3a669d78c2a302003c26f8709f76747b5a0d9e03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -1,3 +1,16 @@\n+2018-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/84588\n+\t* g++.dg/cpp0x/cond1.C: New.\n+\t* g++.dg/cpp1y/pr84588-1.C: Likewise.\n+\t* g++.dg/cpp1y/pr84588-2.C: Likewise.\n+\t* g++.dg/cpp1y/pr84588-3.C: Likewise.\n+\t* g++.dg/parse/cond6.C: Likewise.\n+\t* g++.dg/parse/cond7.C: Likewise.\n+\t* g++.dg/parse/cond8.C: Likewise.\n+\t* g++.dg/cpp1z/decomp16.C: Update.\n+\t* g++.old-deja/g++.jason/cond.C: Likewise.\n+\n 2018-05-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tChangeLog for r260480"}, {"sha": "cdfdd9a27e460be8e69ace2fad97f7564936d847", "filename": "gcc/testsuite/g++.dg/cpp0x/cond1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcond1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcond1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcond1.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/84588\n+// { dg-do compile { target c++11 } }\n+\n+void foo()\n+{\n+  if (int bar() {});  // { dg-error \"condition declares a function\" }\n+\n+  for (;int bar() {};);  // { dg-error \"condition declares a function\" }\n+\n+  while (int bar() {});  // { dg-error \"condition declares a function\" }\n+\n+  if (int a[] {});  // { dg-error \"condition declares an array\" }\n+\n+  for (;int a[] {};);  // { dg-error \"condition declares an array\" }\n+\n+  while (int a[] {});  // { dg-error \"condition declares an array\" }\n+}"}, {"sha": "35f3256800a390d00ed6f0d77878db98d4d903ea", "filename": "gcc/testsuite/g++.dg/cpp1y/pr84588-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-1.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++14 } }\n+\n+struct a {\n+  void b() {}\n+  void c(void (*) () = [] {\n+      if (a a(int auto) {})  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};\n+\n+struct d {\n+  void e() {}\n+  void f(void (*) () = [] {\n+      for (;d d(int auto) {};)  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};\n+\n+struct g {\n+  void h() {}\n+  void i(void (*) () = [] {\n+      while (g g(int auto) {})  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};"}, {"sha": "402ac293bcb364fc378dfa5ad808ff2aa14ee0a2", "filename": "gcc/testsuite/g++.dg/cpp1y/pr84588-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-2.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++14 } }\n+\n+struct a {\n+  void b() {}\n+  void c(void (*) () = [] {\n+      if (a a(int auto))  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};\n+\n+struct d {\n+  void e() {}\n+  void f(void (*) () = [] {\n+      for (;d d(int auto);)  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};\n+\n+struct g {\n+  void h() {}\n+  void i(void (*) () = [] {\n+      while (g g(int auto))  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};"}, {"sha": "477c3e3f51c5faee4be3d4deb32d29d7c5eca157", "filename": "gcc/testsuite/g++.dg/cpp1y/pr84588-3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr84588-3.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++14 } }\n+\n+struct a {\n+  void b() {}\n+  void c(void (*) () = [] {\n+      if (a a(int auto)JUNK)  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};\n+\n+struct d {\n+  void e() {}\n+  void f(void (*) () = [] {\n+      for (;d d(int auto)JUNK;)  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};\n+\n+struct g {\n+  void h() {}\n+  void i(void (*) () = [] {\n+      while (g g(int auto)JUNK)  // { dg-error \"two or more data types|condition declares a function\" }\n+      ;\n+  }) {}\n+};"}, {"sha": "dad69b89c08fca0fe8c0ea02fb80e1c5a767df9e", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp16.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -8,7 +8,7 @@ void\n foo ()\n {\n   auto [ a, b ] = A ();\n-  for (; auto [ a, b ] = A (); )\t\t\t// { dg-error \"expected\" }\n+  for (; auto [ a, b ] = A (); )\t\t\t// { dg-error \"expected|no match\" }\n     ;\n   for (; false; auto [ a, b ] = A ())\t\t\t// { dg-error \"expected\" }\n     ;"}, {"sha": "78d033727a2e73e7f348154bfb12e5ff8fc0639c", "filename": "gcc/testsuite/g++.dg/parse/cond6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond6.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/84588\n+\n+void foo()\n+{\n+  if (int bar());  // { dg-error \"condition declares a function\" }\n+\n+  for (;int bar(););  // { dg-error \"condition declares a function\" }\n+\n+  while (int bar());  // { dg-error \"condition declares a function\" }\n+\n+  if (int a[]);  // { dg-error \"condition declares an array\" }\n+\n+  for (;int a[];);  // { dg-error \"condition declares an array\" }\n+\n+  while (int a[]);  // { dg-error \"condition declares an array\" }\n+}"}, {"sha": "45befe62326ec5a7252722b0b38a52598a3bf78b", "filename": "gcc/testsuite/g++.dg/parse/cond7.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond7.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/84588\n+\n+bool (foo()) { return 0; } // declaration\n+\n+void bar()\n+{\n+  if (bool (foo())); // expression\n+\n+  for (;bool (foo());); // expression\n+\n+  while (bool (foo())); // expression\n+}"}, {"sha": "40ba29d643930275e4bb017d0581244ad33bc483", "filename": "gcc/testsuite/g++.dg/parse/cond8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond8.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/84588\n+\n+void foo()\n+{\n+  if (int x);  // { dg-error \"expected initializer\" }\n+\n+  for (;int x;);  // { dg-error \"expected initializer\" }\n+\n+  while (int x);  // { dg-error \"expected initializer\" }\n+}"}, {"sha": "f9287090fb2949fa6135432b7a46c72e524198f6", "filename": "gcc/testsuite/g++.old-deja/g++.jason/cond.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18759120664263a56fa993f5501cbe674383c3ef/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcond.C?ref=18759120664263a56fa993f5501cbe674383c3ef", "patch": "@@ -47,11 +47,10 @@ int main()\n   if (struct B * foo = new B)\n     ;\n \n-  if (int f () = 1)\t\t// { dg-warning \"extern\" \"extern\" } \n-  // { dg-error \"is initialized like a variable\" \"var\" { target *-*-* } .-1 }\n+  if (int f () = 1)\t\t// { dg-error \"declares a function\" } \n     ;\n   \n-  if (int a[2] = {1, 2})\t// { dg-error \"extended init\" \"\" { target { ! c++11 } } }\n+  if (int a[2] = {1, 2})\t// { dg-error \"declares an array\" }\n     ;\n \n }"}]}