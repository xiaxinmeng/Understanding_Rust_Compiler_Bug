{"sha": "b6237343e78ae115d09618efc1443bdf2fd6c09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyMzczNDNlNzhhZTExNWQwOTYxOGVmYzE0NDNiZGYyZmQ2YzA5Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-21T07:59:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-21T07:59:05Z"}, "message": "openmp: Fix up handling of addressable temporaries in simd lb, b and incr expressions [PR98383]\n\nFor simd, we have code to artificially add locally defined variables into\nprivate clauses if they are addressable, so that omplower turns them into\n\"omp simd array\" variables.  As the testcase shows, this is undesirable if\nthose temporaries only show in the lb, b or incr expressions and nowhere else,\nif it is just used there, we really want normal scalar temporaries.\n\nThis patch implements that by making sure we don't set for those GOVD_LOCAL-ish\ntemporaries turned into GOVD_PRIVATE the GOVD_SEEN flag during gimplification\nof the lb, b and incr expressions, which means that the private clause isn't\nadded for those.\n\n2020-12-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98383\n\t* gimplify.c (struct gimplify_omp_ctx): Add in_for_exprs flag.\n\t(gimple_add_tmp_var): For addressable temporaries appearing in\n\tsimd lb, b or incr expressions, don't add a private clause unless\n\tit is seen also outside of those expressions in the simd body.\n\t(omp_notice_variable): Likewise.\n\t(gimplify_omp_for): Set and reset in_for_exprs around gimplification\n\tof lb, b or incr expressions.\n\n\t* g++.dg/gomp/pr98383.C: New test.", "tree": {"sha": "d6842ad9344827543f015e68d82e2ad2613404db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6842ad9344827543f015e68d82e2ad2613404db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6237343e78ae115d09618efc1443bdf2fd6c09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6237343e78ae115d09618efc1443bdf2fd6c09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6237343e78ae115d09618efc1443bdf2fd6c09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6237343e78ae115d09618efc1443bdf2fd6c09b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bac66390c0c838594e42877f938bca441665937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bac66390c0c838594e42877f938bca441665937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bac66390c0c838594e42877f938bca441665937"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "ea8a53e18cb3da53edc5d9ca52643d5b848d4a96", "filename": "gcc/gimplify.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6237343e78ae115d09618efc1443bdf2fd6c09b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6237343e78ae115d09618efc1443bdf2fd6c09b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b6237343e78ae115d09618efc1443bdf2fd6c09b", "patch": "@@ -232,6 +232,7 @@ struct gimplify_omp_ctx\n   bool add_safelen1;\n   bool order_concurrent;\n   bool has_depend;\n+  bool in_for_exprs;\n   int defaultmap[4];\n };\n \n@@ -781,7 +782,7 @@ gimple_add_tmp_var (tree tmp)\n       if (gimplify_omp_ctxp)\n \t{\n \t  struct gimplify_omp_ctx *ctx = gimplify_omp_ctxp;\n-\t  int flag = GOVD_LOCAL;\n+\t  int flag = GOVD_LOCAL | GOVD_SEEN;\n \t  while (ctx\n \t\t && (ctx->region_type == ORT_WORKSHARE\n \t\t     || ctx->region_type == ORT_TASKGROUP\n@@ -794,14 +795,16 @@ gimple_add_tmp_var (tree tmp)\n \t\t{\n \t\t  if (TREE_CODE (DECL_SIZE_UNIT (tmp)) != INTEGER_CST)\n \t\t    ctx->add_safelen1 = true;\n-\t\t  else\n+\t\t  else if (ctx->in_for_exprs)\n \t\t    flag = GOVD_PRIVATE;\n+\t\t  else\n+\t\t    flag = GOVD_PRIVATE | GOVD_SEEN;\n \t\t  break;\n \t\t}\n \t      ctx = ctx->outer_context;\n \t    }\n \t  if (ctx)\n-\t    omp_add_variable (ctx, tmp, flag | GOVD_SEEN);\n+\t    omp_add_variable (ctx, tmp, flag);\n \t}\n     }\n   else if (cfun)\n@@ -7617,6 +7620,14 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n       goto do_outer;\n     }\n \n+  /* Don't mark as GOVD_SEEN addressable temporaries seen only in simd\n+     lb, b or incr expressions, those shouldn't be turned into simd arrays.  */\n+  if (ctx->region_type == ORT_SIMD\n+      && ctx->in_for_exprs\n+      && ((n->value & (GOVD_PRIVATE | GOVD_SEEN | GOVD_EXPLICIT))\n+\t  == GOVD_PRIVATE))\n+    flags &= ~GOVD_SEEN;\n+\n   if ((n->value & (GOVD_SEEN | GOVD_LOCAL)) == 0\n       && (flags & (GOVD_SEEN | GOVD_LOCAL)) == GOVD_SEEN\n       && DECL_SIZE (decl))\n@@ -12080,6 +12091,7 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       else\n \tvar = decl;\n \n+      gimplify_omp_ctxp->in_for_exprs = true;\n       if (TREE_CODE (TREE_OPERAND (t, 1)) == TREE_VEC)\n \t{\n \t  tree lb = TREE_OPERAND (t, 1);\n@@ -12092,6 +12104,7 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       else\n \ttret = gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n \t\t\t      is_gimple_val, fb_rvalue, false);\n+      gimplify_omp_ctxp->in_for_exprs = false;\n       ret = MIN (ret, tret);\n       if (ret == GS_ERROR)\n \treturn ret;\n@@ -12101,6 +12114,7 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       gcc_assert (COMPARISON_CLASS_P (t));\n       gcc_assert (TREE_OPERAND (t, 0) == decl);\n \n+      gimplify_omp_ctxp->in_for_exprs = true;\n       if (TREE_CODE (TREE_OPERAND (t, 1)) == TREE_VEC)\n \t{\n \t  tree ub = TREE_OPERAND (t, 1);\n@@ -12113,6 +12127,7 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n       else\n \ttret = gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n \t\t\t      is_gimple_val, fb_rvalue, false);\n+      gimplify_omp_ctxp->in_for_exprs = false;\n       ret = MIN (ret, tret);\n \n       /* Handle OMP_FOR_INCR.  */\n@@ -12178,6 +12193,7 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t      gcc_unreachable ();\n \t    }\n \n+\t  gimplify_omp_ctxp->in_for_exprs = true;\n \t  tret = gimplify_expr (&TREE_OPERAND (t, 1), &for_pre_body, NULL,\n \t\t\t\tis_gimple_val, fb_rvalue, false);\n \t  ret = MIN (ret, tret);\n@@ -12199,6 +12215,7 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n+\t  gimplify_omp_ctxp->in_for_exprs = false;\n \t  break;\n \n \tdefault:"}, {"sha": "8106138f1331ededf4b5585fba2ba7fde866430c", "filename": "gcc/testsuite/g++.dg/gomp/pr98383.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6237343e78ae115d09618efc1443bdf2fd6c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr98383.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6237343e78ae115d09618efc1443bdf2fd6c09b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr98383.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr98383.C?ref=b6237343e78ae115d09618efc1443bdf2fd6c09b", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/98383\n+// { dg-options \"-fopenmp -O1\" }\n+\n+int bar (const int &);\n+\n+void\n+foo (int *a)\n+{\n+#pragma omp simd\n+  for (int i = 0; i < bar (8); ++i)\n+    a[i]++;\n+#pragma omp simd\n+  for (int i = bar (9); i < 16; ++i)\n+    a[i]++;\n+#pragma omp simd\n+  for (int i = 0; i < 32; i += bar (10))\n+    a[i]++;\n+}"}]}