{"sha": "2e100703fa86b17b9c05011fc73d0a8adf555908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxMDA3MDNmYTg2YjE3YjljMDUwMTFmYzczZDBhOGFkZjU1NTkwOA==", "commit": {"author": {"name": "Vidya Praveen", "email": "vidyapraveen@arm.com", "date": "2013-08-27T10:50:26Z"}, "committer": {"name": "Vidya Praveen", "email": "vp@gcc.gnu.org", "date": "2013-08-27T10:50:26Z"}, "message": "aarch64.md (unspec): Add UNSPEC_SISD_SSHL...\n\ngcc/\n\n2013-08-27  Vidya Praveen  <vidyapraveen@arm.com>\n\n\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_SISD_SSHL, \n\tUNSPEC_SISD_USHL, UNSPEC_USHL_2S, UNSPEC_SSHL_2S, UNSPEC_SISD_NEG.\n\t(<optab><mode>3_insn): Remove.\n\t(aarch64_ashl_sisd_or_int_<mode>3): New Pattern.\n\t(aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n\t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n\t(define_split for aarch64_lshr_sisd_or_int_di3): Likewise.\n\t(define_split for aarch64_lshr_sisd_or_int_si3): Likewise.\n\t(define_split for aarch64_ashr_sisd_or_int_di3): Likewise.\n\t(define_split for aarch64_ashr_sisd_or_int_si3): Likewise.\n\t(aarch64_sisd_ushl, aarch64_sisd_sshl): Likewise.\n\t(aarch64_ushl_2s, aarch64_sshl_2s, aarch64_sisd_neg_qi): Likewise.\n\t(ror<mode>3_insn): Likewise.\n\t* config/aarch64/predicates.md (aarch64_simd_register): New.\n\ngcc/testsuite/\n\n2013-08-27  Vidya Praveen  <vidyapraveen@arm.com>\n\n\t* gcc.target/aarch64/scalar_shift_1.c: New.\n\nFrom-SVN: r202020", "tree": {"sha": "df24a9554d92f8cbb0f4fd25a81861117939c839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df24a9554d92f8cbb0f4fd25a81861117939c839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e100703fa86b17b9c05011fc73d0a8adf555908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e100703fa86b17b9c05011fc73d0a8adf555908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e100703fa86b17b9c05011fc73d0a8adf555908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e100703fa86b17b9c05011fc73d0a8adf555908/comments", "author": {"login": "vparm", "id": 63807973, "node_id": "MDQ6VXNlcjYzODA3OTcz", "avatar_url": "https://avatars.githubusercontent.com/u/63807973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vparm", "html_url": "https://github.com/vparm", "followers_url": "https://api.github.com/users/vparm/followers", "following_url": "https://api.github.com/users/vparm/following{/other_user}", "gists_url": "https://api.github.com/users/vparm/gists{/gist_id}", "starred_url": "https://api.github.com/users/vparm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vparm/subscriptions", "organizations_url": "https://api.github.com/users/vparm/orgs", "repos_url": "https://api.github.com/users/vparm/repos", "events_url": "https://api.github.com/users/vparm/events{/privacy}", "received_events_url": "https://api.github.com/users/vparm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ded82768aaa1e00d3cda62ee66f2e5cd767ceb9"}], "stats": {"total": 473, "additions": 468, "deletions": 5}, "files": [{"sha": "6a9d78ba997d40d8ea386424422bf078da7dc01b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e100703fa86b17b9c05011fc73d0a8adf555908", "patch": "@@ -1,3 +1,20 @@\n+2013-08-27  Vidya Praveen  <vidyapraveen@arm.com>\n+\n+\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_SISD_SSHL,\n+\tUNSPEC_SISD_USHL, UNSPEC_USHL_2S, UNSPEC_SSHL_2S, UNSPEC_SISD_NEG.\n+\t(<optab><mode>3_insn): Remove.\n+\t(aarch64_ashl_sisd_or_int_<mode>3): New Pattern.\n+\t(aarch64_lshr_sisd_or_int_<mode>3): Likewise.\n+\t(aarch64_ashr_sisd_or_int_<mode>3): Likewise.\n+\t(define_split for aarch64_lshr_sisd_or_int_di3): Likewise.\n+\t(define_split for aarch64_lshr_sisd_or_int_si3): Likewise.\n+\t(define_split for aarch64_ashr_sisd_or_int_di3): Likewise.\n+\t(define_split for aarch64_ashr_sisd_or_int_si3): Likewise.\n+\t(aarch64_sisd_ushl, aarch64_sisd_sshl): Likewise.\n+\t(aarch64_ushl_2s, aarch64_sshl_2s, aarch64_sisd_neg_qi): Likewise.\n+\t(ror<mode>3_insn): Likewise.\n+\t* config/aarch64/predicates.md (aarch64_simd_register): New.\n+\n 2013-08-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57521"}, {"sha": "47532fca2c550e8ec9b63898511ef6c276943a45", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 179, "deletions": 5, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2e100703fa86b17b9c05011fc73d0a8adf555908", "patch": "@@ -88,11 +88,16 @@\n     UNSPEC_NOP\n     UNSPEC_PRLG_STK\n     UNSPEC_RBIT\n+    UNSPEC_SISD_NEG\n+    UNSPEC_SISD_SSHL\n+    UNSPEC_SISD_USHL\n+    UNSPEC_SSHL_2S\n     UNSPEC_ST2\n     UNSPEC_ST3\n     UNSPEC_ST4\n     UNSPEC_TLS\n     UNSPEC_TLSDESC\n+    UNSPEC_USHL_2S\n     UNSPEC_VSTRUCTDUMMY\n ])\n \n@@ -3183,13 +3188,182 @@\n   }\n )\n \n-(define_insn \"*<optab><mode>3_insn\"\n+;; Logical left shift using SISD or Integer instruction\n+(define_insn \"*aarch64_ashl_sisd_or_int_<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w,w,r\")\n+        (ashift:GPI\n+          (match_operand:GPI 1 \"register_operand\" \"w,w,r\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,w,rUs<cmode>\")))]\n+  \"\"\n+  \"@\n+   shl\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n+   ushl\\t%<rtn>0<vas>, %<rtn>1<vas>, %<rtn>2<vas>\n+   lsl\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"simd\" \"yes,yes,no\")\n+   (set_attr \"simd_type\" \"simd_shift_imm,simd_shift,*\")\n+   (set_attr \"simd_mode\" \"<MODE>,<MODE>,*\")\n+   (set_attr \"v8type\" \"*,*,shift\")\n+   (set_attr \"type\" \"*,*,shift\")\n+   (set_attr \"mode\" \"*,*,<MODE>\")]\n+)\n+\n+;; Logical right shift using SISD or Integer instruction\n+(define_insn \"*aarch64_lshr_sisd_or_int_<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w,w,r\")\n+        (lshiftrt:GPI\n+          (match_operand:GPI 1 \"register_operand\" \"w,w,r\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"Us<cmode>,w,rUs<cmode>\")))]\n+  \"\"\n+  \"@\n+   ushr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n+   #\n+   lsr\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"simd\" \"yes,yes,no\")\n+   (set_attr \"simd_type\" \"simd_shift_imm,simd_shift,*\")\n+   (set_attr \"simd_mode\" \"<MODE>,<MODE>,*\")\n+   (set_attr \"v8type\" \"*,*,shift\")\n+   (set_attr \"type\" \"*,*,shift\")\n+   (set_attr \"mode\" \"*,*,<MODE>\")]\n+)\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"aarch64_simd_register\")\n+        (lshiftrt:DI\n+           (match_operand:DI 1 \"aarch64_simd_register\")\n+           (match_operand:QI 2 \"aarch64_simd_register\")))]\n+  \"TARGET_SIMD && reload_completed\"\n+  [(set (match_dup 2)\n+        (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n+   (set (match_dup 0)\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SISD_USHL))]\n+  \"\"\n+)\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"aarch64_simd_register\")\n+        (lshiftrt:SI\n+           (match_operand:SI 1 \"aarch64_simd_register\")\n+           (match_operand:QI 2 \"aarch64_simd_register\")))]\n+  \"TARGET_SIMD && reload_completed\"\n+  [(set (match_dup 2)\n+        (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n+   (set (match_dup 0)\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_USHL_2S))]\n+  \"\"\n+)\n+\n+;; Arithmetic right shift using SISD or Integer instruction\n+(define_insn \"*aarch64_ashr_sisd_or_int_<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=w,w,r\")\n+        (ashiftrt:GPI\n+          (match_operand:GPI 1 \"register_operand\" \"w,w,r\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_di\" \"Us<cmode>,w,rUs<cmode>\")))]\n+  \"\"\n+  \"@\n+   sshr\\t%<rtn>0<vas>, %<rtn>1<vas>, %2\n+   #\n+   asr\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"simd\" \"yes,yes,no\")\n+   (set_attr \"simd_type\" \"simd_shift_imm,simd_shift,*\")\n+   (set_attr \"simd_mode\" \"<MODE>,<MODE>,*\")\n+   (set_attr \"v8type\" \"*,*,shift\")\n+   (set_attr \"type\" \"*,*,shift\")\n+   (set_attr \"mode\" \"*,*,<MODE>\")]\n+)\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"aarch64_simd_register\")\n+        (ashiftrt:DI\n+           (match_operand:DI 1 \"aarch64_simd_register\")\n+           (match_operand:QI 2 \"aarch64_simd_register\")))]\n+  \"TARGET_SIMD && reload_completed\"\n+  [(set (match_dup 2)\n+        (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n+   (set (match_dup 0)\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SISD_SSHL))]\n+  \"\"\n+)\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"aarch64_simd_register\")\n+        (ashiftrt:SI\n+           (match_operand:SI 1 \"aarch64_simd_register\")\n+           (match_operand:QI 2 \"aarch64_simd_register\")))]\n+  \"TARGET_SIMD && reload_completed\"\n+  [(set (match_dup 2)\n+        (unspec:QI [(match_dup 2)] UNSPEC_SISD_NEG))\n+   (set (match_dup 0)\n+        (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_SSHL_2S))]\n+  \"\"\n+)\n+\n+(define_insn \"*aarch64_sisd_ushl\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=w\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"w\")\n+                    (match_operand:QI 2 \"register_operand\" \"w\")]\n+                   UNSPEC_SISD_USHL))]\n+  \"TARGET_SIMD\"\n+  \"ushl\\t%d0, %d1, %d2\"\n+  [(set_attr \"simd\" \"yes\")\n+   (set_attr \"simd_type\" \"simd_shift\")\n+   (set_attr \"simd_mode\" \"DI\")]\n+)\n+\n+(define_insn \"*aarch64_ushl_2s\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=w\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"w\")\n+                    (match_operand:QI 2 \"register_operand\" \"w\")]\n+                   UNSPEC_USHL_2S))]\n+  \"TARGET_SIMD\"\n+  \"ushl\\t%0.2s, %1.2s, %2.2s\"\n+  [(set_attr \"simd\" \"yes\")\n+   (set_attr \"simd_type\" \"simd_shift\")\n+   (set_attr \"simd_mode\" \"DI\")]\n+)\n+\n+(define_insn \"*aarch64_sisd_sshl\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=w\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"w\")\n+                    (match_operand:QI 2 \"register_operand\" \"w\")]\n+                   UNSPEC_SISD_SSHL))]\n+  \"TARGET_SIMD\"\n+  \"sshl\\t%d0, %d1, %d2\"\n+  [(set_attr \"simd\" \"yes\")\n+   (set_attr \"simd_type\" \"simd_shift\")\n+   (set_attr \"simd_mode\" \"DI\")]\n+)\n+\n+(define_insn \"*aarch64_sshl_2s\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=w\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"w\")\n+                    (match_operand:QI 2 \"register_operand\" \"w\")]\n+                   UNSPEC_SSHL_2S))]\n+  \"TARGET_SIMD\"\n+  \"sshl\\t%0.2s, %1.2s, %2.2s\"\n+  [(set_attr \"simd\" \"yes\")\n+   (set_attr \"simd_type\" \"simd_shift\")\n+   (set_attr \"simd_mode\" \"DI\")]\n+)\n+\n+(define_insn \"*aarch64_sisd_neg_qi\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=w\")\n+        (unspec:QI [(match_operand:QI 1 \"register_operand\" \"w\")]\n+                   UNSPEC_SISD_NEG))]\n+  \"TARGET_SIMD\"\n+  \"neg\\t%d0, %d1\"\n+  [(set_attr \"simd\" \"yes\")\n+   (set_attr \"simd_type\" \"simd_negabs\")\n+   (set_attr \"simd_mode\" \"QI\")]\n+)\n+\n+;; Rotate right\n+(define_insn \"*ror<mode>3_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(SHIFT:GPI\n-\t (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"rUs<cmode>\")))]\n+        (rotatert:GPI\n+          (match_operand:GPI 1 \"register_operand\" \"r\")\n+          (match_operand:QI 2 \"aarch64_reg_or_shift_imm_<mode>\" \"rUs<cmode>\")))]\n   \"\"\n-  \"<shift>\\\\t%<w>0, %<w>1, %<w>2\"\n+  \"ror\\\\t%<w>0, %<w>1, %<w>2\"\n   [(set_attr \"v8type\" \"shift\")\n    (set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"<MODE>\")]"}, {"sha": "dbc90826665d19a6ac6131918efb2c8a32bd1f04", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=2e100703fa86b17b9c05011fc73d0a8adf555908", "patch": "@@ -26,6 +26,11 @@\n \t\t\t      && GET_MODE_CLASS (GET_MODE (op)) == MODE_CC\"))))\n )\n \n+(define_predicate \"aarch64_simd_register\"\n+  (and (match_code \"reg\")\n+       (ior (match_test \"REGNO_REG_CLASS (REGNO (op)) == FP_LO_REGS\")\n+            (match_test \"REGNO_REG_CLASS (REGNO (op)) == FP_REGS\"))))\n+\n (define_predicate \"aarch64_reg_or_zero\"\n   (and (match_code \"reg,subreg,const_int\")\n        (ior (match_operand 0 \"register_operand\")"}, {"sha": "554a81b1cb7c55587e25ae3f408788f730b84a31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e100703fa86b17b9c05011fc73d0a8adf555908", "patch": "@@ -1,3 +1,7 @@\n+2013-08-27  Vidya Praveen  <vidyapraveen@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_shift_1.c: New.\n+\n 2013-08-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57521"}, {"sha": "7cb17f89c51dadb2cdc45b24d8938a9827ef1bd9", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_shift_1.c", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e100703fa86b17b9c05011fc73d0a8adf555908/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_shift_1.c?ref=2e100703fa86b17b9c05011fc73d0a8adf555908", "patch": "@@ -0,0 +1,263 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline -save-temps\" } */\n+\n+extern void abort ();\n+\n+#define force_simd_di(v) asm volatile (\"mov %d0, %1.d[0]\" :\"=w\" (v) :\"w\" (v) :)\n+#define force_simd_si(v) asm volatile (\"mov %s0, %1.s[0]\" :\"=w\" (v) :\"w\" (v) :)\n+\n+typedef unsigned long long int UInt64x1;\n+typedef long long int Int64x1;\n+typedef unsigned int UInt32x1;\n+typedef int Int32x1;\n+\n+UInt64x1\n+test_lshift_left_sisd_di (UInt64x1 b, UInt64x1 c)\n+{\n+  UInt64x1 a;\n+\n+  force_simd_di (b);\n+  force_simd_di (c);\n+  a = b << 8;\n+  a = a << c;\n+  force_simd_di (a);\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"shl\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ 8\" } } */\n+/* { dg-final { scan-assembler \"ushl\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ d\\[0-9\\]+\" } } */\n+\n+UInt32x1\n+test_lshift_left_sisd_si (UInt32x1 b, UInt32x1 c)\n+{\n+  UInt32x1 a;\n+\n+  force_simd_si (b);\n+  force_simd_si (c);\n+  a = b << 4;\n+  a = a << c;\n+  force_simd_si (a);\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"shl\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ 4\" } } */\n+/* \"ushl\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" (counted later) */\n+\n+UInt64x1\n+test_lshift_right_sisd_di (UInt64x1 b, UInt64x1 c)\n+{\n+  UInt64x1 a;\n+\n+  force_simd_di (b);\n+  force_simd_di (c);\n+  a = b >> 8;\n+  a = a >> c;\n+  force_simd_di (a);\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"ushr\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ 8\" } } */\n+/* \"neg\\td\\[0-9\\]+,\\ d\\[0-9\\]+\" (counted later) */\n+/* { dg-final { scan-assembler \"ushl\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ d\\[0-9\\]+\" } } */\n+\n+UInt64x1\n+test_lshift_right_sisd_si (UInt32x1 b, UInt32x1 c)\n+{\n+  UInt32x1 a;\n+\n+  force_simd_si (b);\n+  force_simd_si (c);\n+  a = b >> 4;\n+  a = a >> c;\n+  force_simd_si (a);\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"ushr\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ 4\" } } */\n+/* \"neg\\td\\[0-9\\]+,\\ d\\[0-9\\]+\" (counted later) */\n+/* { dg-final { scan-assembler-times \"ushl\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" 2 } } */\n+\n+Int64x1\n+test_ashift_right_sisd_di (Int64x1 b, Int64x1 c)\n+{\n+  Int64x1 a;\n+\n+  force_simd_di (b);\n+  force_simd_di (c);\n+  a = b >> 8;\n+  a = a >> c;\n+  force_simd_di (a);\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"sshr\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ 8\" } } */\n+/* \"neg\\td\\[0-9\\]+,\\ d\\[0-9\\]+\" (counted later) */\n+/* { dg-final { scan-assembler \"sshl\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ d\\[0-9\\]+\" } } */\n+\n+Int32x1\n+test_ashift_right_sisd_si (Int32x1 b, Int32x1 c)\n+{\n+  Int32x1 a;\n+\n+  force_simd_si (b);\n+  force_simd_si (c);\n+  a = b >> 4;\n+  a = a >> c;\n+  force_simd_si (a);\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"sshr\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ 4\" } } */\n+/* { dg-final { scan-assembler-times \"neg\\td\\[0-9\\]+,\\ d\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler \"sshl\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s\" } } */\n+\n+\n+/* The following are to make sure if the integer instructions lsl/lsr/asr are\n+   generated in non-vector scenarios */\n+\n+UInt64x1\n+test_lshift_left_int_di (UInt64x1 b, UInt64x1 c)\n+{\n+  UInt64x1 a;\n+\n+  a = b << 8;\n+  a = a << c;\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"lsl\\tx\\[0-9\\]+,\\ x\\[0-9\\]+,\\ 8\" } } */\n+/* { dg-final { scan-assembler \"lsl\\tx\\[0-9\\]+,\\ x\\[0-9\\]+,\\ x\\[0-9\\]+\" } } */\n+\n+UInt32x1\n+test_lshift_left_int_si (UInt32x1 b, UInt32x1 c)\n+{\n+  UInt32x1 a;\n+\n+  a = b << 4;\n+  a = a << c;\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"lsl\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ 4\" } } */\n+/* { dg-final { scan-assembler \"lsl\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ w\\[0-9\\]+\" } } */\n+\n+UInt64x1\n+test_lshift_right_int_di (UInt64x1 b, UInt64x1 c)\n+{\n+  UInt64x1 a;\n+\n+  a = b >> 8;\n+  a = a >> c;\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"lsr\\tx\\[0-9\\]+,\\ x\\[0-9\\]+,\\ 8\" } } */\n+/* { dg-final { scan-assembler \"lsr\\tx\\[0-9\\]+,\\ x\\[0-9\\]+,\\ x\\[0-9\\]+\" } } */\n+\n+UInt32x1\n+test_lshift_right_int_si (UInt32x1 b, UInt32x1 c)\n+{\n+  UInt32x1 a;\n+\n+  a = b >> 4;\n+  a = a >> c;\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"lsr\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ 4\" } } */\n+/* { dg-final { scan-assembler \"lsr\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ w\\[0-9\\]+\" } } */\n+\n+Int64x1\n+test_ashift_right_int_di (Int64x1 b, Int64x1 c)\n+{\n+  Int64x1 a;\n+\n+  a = b >> 8;\n+  a = a >> c;\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"asr\\tx\\[0-9\\]+,\\ x\\[0-9\\]+,\\ 8\" } } */\n+/* { dg-final { scan-assembler \"asr\\tx\\[0-9\\]+,\\ x\\[0-9\\]+,\\ x\\[0-9\\]+\" } } */\n+\n+Int32x1\n+test_ashift_right_int_si (Int32x1 b, Int32x1 c)\n+{\n+  Int32x1 a;\n+\n+  a = b >> 4;\n+  a = a >> c;\n+  return a;\n+}\n+/* { dg-final { scan-assembler \"asr\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ 4\" } } */\n+/* { dg-final { scan-assembler \"asr\\tw\\[0-9\\]+,\\ w\\[0-9\\]+,\\ w\\[0-9\\]+\" } } */\n+\n+Int64x1\n+test_corners_sisd_di (Int64x1 b)\n+{\n+  force_simd_di (b);\n+  b = b >> 63;\n+  b = b >> 0;\n+  b += b >> 65; /* { dg-warning \"right shift count >= width of type\" } */\n+  force_simd_di (b);\n+\n+  return b;\n+}\n+/* { dg-final { scan-assembler \"sshr\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ 63\" } } */\n+/* { dg-final { scan-assembler \"shl\\td\\[0-9\\]+,\\ d\\[0-9\\]+,\\ 1\" } } */\n+\n+Int32x1\n+test_corners_sisd_si (Int32x1 b)\n+{\n+  force_simd_si (b);\n+  b = b >> 31;\n+  b = b >> 0;\n+  b += b >> 33; /* { dg-warning \"right shift count >= width of type\" } */\n+  force_simd_si (b);\n+\n+  return b;\n+}\n+/* { dg-final { scan-assembler \"sshr\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ 31\" } } */\n+/* { dg-final { scan-assembler \"shl\\tv\\[0-9\\]+\\.2s,\\ v\\[0-9\\]+\\.2s,\\ 1\" } } */\n+\n+\n+\n+#define CHECK(var,val) \\\n+do                     \\\n+  {                    \\\n+    if (var != val)    \\\n+      abort();         \\\n+  }                    \\\n+while(0)\n+\n+UInt64x1 x = 0xC01dDeadBeefFaceull;\n+UInt32x1 y = 0xDeadBeef;\n+\n+int\n+main ()\n+{\n+  x = test_lshift_left_sisd_di (x, 8);\n+  CHECK (x, 0xdeadbeefface0000ull);\n+  x = test_lshift_right_int_di (x, 8);\n+  CHECK (x, 0x0000deadbeeffaceull);\n+  x = test_lshift_right_sisd_di (x, 8);\n+  CHECK (x, 0x00000000deadbeefull);\n+  x = test_lshift_left_int_di (x, 8);\n+  CHECK (x, 0x0000deadbeef0000ull);\n+  x = ~x;\n+  x = test_ashift_right_int_di (x, 8);\n+  CHECK (x, 0xffffffff21524110ull);\n+  x = test_ashift_right_sisd_di (x, 8);\n+  CHECK (x, 0xffffffffffff2152ull);\n+  x = test_corners_sisd_di (x);\n+  CHECK (x, 0xfffffffffffffffeull);\n+\n+  y = test_lshift_left_sisd_si (y, 4);\n+  CHECK (y, 0xadbeef00);\n+  y = test_lshift_right_int_si (y, 4);\n+  CHECK (y, 0x00adbeef);\n+  y = test_lshift_right_sisd_si (y, 4);\n+  CHECK (y, 0x0000adbe);\n+  y = test_lshift_left_int_si (y, 4);\n+  CHECK (y, 0x00adbe00);\n+  y = ~y;\n+  y = test_ashift_right_int_si (y, 4);\n+  CHECK (y, 0xffff5241);\n+  y = test_ashift_right_sisd_si (y, 4);\n+  CHECK (y, 0xffffff52);\n+  y = test_corners_sisd_si (y);\n+  CHECK (y, 0xfffffffe);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}