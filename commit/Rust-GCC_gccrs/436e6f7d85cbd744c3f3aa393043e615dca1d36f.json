{"sha": "436e6f7d85cbd744c3f3aa393043e615dca1d36f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2ZTZmN2Q4NWNiZDc0NGMzZjNhYTM5MzA0M2U2MTVkY2ExZDM2Zg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@orcam.me.uk", "date": "2021-04-21T21:33:02Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@orcam.me.uk", "date": "2021-04-27T18:02:06Z"}, "message": "VAX: Remove dead `adjacent_operands_p' function\n\nThis function has never been used and it is unclear what its intended\npurpose was.\n\n\tgcc/\n\t* config/vax/vax-protos.h (adjacent_operands_p): Remove\n\tprototype.\n\t* config/vax/vax.c (adjacent_operands_p): Remove.", "tree": {"sha": "195cfa25afa25844d2c3a2608fb86ab033457b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195cfa25afa25844d2c3a2608fb86ab033457b6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/436e6f7d85cbd744c3f3aa393043e615dca1d36f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436e6f7d85cbd744c3f3aa393043e615dca1d36f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436e6f7d85cbd744c3f3aa393043e615dca1d36f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436e6f7d85cbd744c3f3aa393043e615dca1d36f/comments", "author": null, "committer": null, "parents": [{"sha": "6c1976fa3ff57f5b547e0c3f1e0461409936586b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1976fa3ff57f5b547e0c3f1e0461409936586b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1976fa3ff57f5b547e0c3f1e0461409936586b"}], "stats": {"total": 74, "additions": 0, "deletions": 74}, "files": [{"sha": "6dcbf5355704494655c52a926624720b0b701f93", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436e6f7d85cbd744c3f3aa393043e615dca1d36f/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436e6f7d85cbd744c3f3aa393043e615dca1d36f/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=436e6f7d85cbd744c3f3aa393043e615dca1d36f", "patch": "@@ -24,7 +24,6 @@ extern void vax_expand_prologue (void);\n extern bool vax_acceptable_pic_operand_p (rtx, bool, bool);\n extern machine_mode vax_select_cc_mode (enum rtx_code, rtx, rtx);\n extern const char *cond_name (rtx);\n-extern bool adjacent_operands_p (rtx, rtx, machine_mode);\n extern const char *rev_cond_name (rtx);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);"}, {"sha": "870af2b3af4cd32c4c7694c80e8db0aafbd73bf6", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/436e6f7d85cbd744c3f3aa393043e615dca1d36f/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/436e6f7d85cbd744c3f3aa393043e615dca1d36f/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=436e6f7d85cbd744c3f3aa393043e615dca1d36f", "patch": "@@ -2108,79 +2108,6 @@ vax_expand_addsub_di_operands (rtx * operands, enum rtx_code code)\n     }\n }\n \n-bool\n-adjacent_operands_p (rtx lo, rtx hi, machine_mode mode)\n-{\n-  HOST_WIDE_INT lo_offset;\n-  HOST_WIDE_INT hi_offset;\n-\n-  if (GET_CODE (lo) != GET_CODE (hi))\n-    return false;\n-\n-  if (REG_P (lo))\n-    return mode == SImode && REGNO (lo) + 1 == REGNO (hi);\n-  if (CONST_INT_P (lo))\n-    return INTVAL (hi) == 0 && UINTVAL (lo) < 64;\n-  if (CONST_INT_P (lo))\n-    return mode != SImode;\n-\n-  if (!MEM_P (lo))\n-    return false;\n-\n-  if (MEM_VOLATILE_P (lo) || MEM_VOLATILE_P (hi))\n-    return false;\n-\n-  lo = XEXP (lo, 0);\n-  hi = XEXP (hi, 0);\n-\n-  if (GET_CODE (lo) == POST_INC /* || GET_CODE (lo) == PRE_DEC */)\n-    return rtx_equal_p (lo, hi);\n-\n-  switch (GET_CODE (lo))\n-    {\n-    case REG:\n-    case SYMBOL_REF:\n-      lo_offset = 0;\n-      break;\n-    case CONST:\n-      lo = XEXP (lo, 0);\n-      /* FALLTHROUGH */\n-    case PLUS:\n-      if (!CONST_INT_P (XEXP (lo, 1)))\n-\treturn false;\n-      lo_offset = INTVAL (XEXP (lo, 1));\n-      lo = XEXP (lo, 0);\n-      break;\n-    default:\n-      return false;\n-    }\n-\n-  switch (GET_CODE (hi))\n-    {\n-    case REG:\n-    case SYMBOL_REF:\n-      hi_offset = 0;\n-      break;\n-    case CONST:\n-      hi = XEXP (hi, 0);\n-      /* FALLTHROUGH */\n-    case PLUS:\n-      if (!CONST_INT_P (XEXP (hi, 1)))\n-\treturn false;\n-      hi_offset = INTVAL (XEXP (hi, 1));\n-      hi = XEXP (hi, 0);\n-      break;\n-    default:\n-      return false;\n-    }\n-\n-  if (GET_CODE (lo) == MULT || GET_CODE (lo) == PLUS)\n-    return false;\n-\n-  return rtx_equal_p (lo, hi)\n-\t && hi_offset - lo_offset == GET_MODE_SIZE (mode);\n-}\n-\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts.  */\n "}]}