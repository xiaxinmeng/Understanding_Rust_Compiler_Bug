{"sha": "5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmNDZmOTU1OTZjNjAwY2Y0ZDE3YmY5OGY0ODA0ZTZiZDUzY2ZjNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-09-23T00:47:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-23T00:47:02Z"}, "message": "PR libstdc++/32422, DR 23 [Ready in R60]\n\n2008-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/32422, DR 23 [Ready in R60]\n\t* config/locale/gnu/c_locale.cc (__convert_to_v(const char*, float&,\n\tios_base::iostate&, const __c_locale&), __convert_to_v(const char*,\n\tdouble&, ios_base::iostate&, const __c_locale&), __convert_to_v(const\n\tchar*, long double&, ios_base::iostate&, const __c_locale&)): Implement\n\tDR 23 and deal correctly with broken exponents.\n\t* config/locale/generic/c_locale.cc (__convert_to_v(const char*,\n\tfloat&, ios_base::iostate&, const __c_locale&), __convert_to_v(const\n\tchar*, double&, ios_base::iostate&, const __c_locale&),\n\t__convert_to_v(const char*, long double&, ios_base::iostate&, const\n\t__c_locale&)): Likewise.\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int(_InIter,\n\t_InIter, ios_base&, ios_base::iostate&, _ValueT&)): Likewise.\n\t(num_get<>::_M_extract_float(_InIter, _InIter, ios_base&,\n\tios_base::iostate&, string&): Change grouping check to set instead of\n\tOR failbit; do not check for eofbit here...\n\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n\tios_base::iostate&, float&), num_get<>::do_get(iter_type, iter_type,\n\tios_base&, ios_base::iostate&, double&), num_get<>::do_get(iter_type,\n\titer_type, ios_base&, ios_base::iostate&, long double&),\n\tnum_get<>::__do_get(iter_type, iter_type, ios_base&,\n\tios_base::iostate&, double&)): ... do it here instead.\n\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n\tios_base::iostate&, bool&)): Implement DR 23.\n\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n\tios_base::iostate&, void*&)): Adjust.\n\t* doc/xml/manual/intro.xml: Add and entry for DR 23.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/10.cc:\n\tAdjust.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc:\n\tLikewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/22131.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/10.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/12.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/15.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/16.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/22131.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/10.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/12.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/15.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/16.cc: Likewise.\n\nFrom-SVN: r140574", "tree": {"sha": "9d02f6e05a6a1e62f93b452749b09a474b553c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d02f6e05a6a1e62f93b452749b09a474b553c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/comments", "author": null, "committer": null, "parents": [{"sha": "441154b19b1e998fe06a8f9045df8b69fa5ca274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441154b19b1e998fe06a8f9045df8b69fa5ca274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441154b19b1e998fe06a8f9045df8b69fa5ca274"}], "stats": {"total": 462, "additions": 308, "deletions": 154}, "files": [{"sha": "9af75471c80e7ccb7bbbbde3f8230470df763679", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,3 +1,47 @@\n+2008-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/32422, DR 23 [Ready in R60]\n+\t* config/locale/gnu/c_locale.cc (__convert_to_v(const char*, float&,\n+\tios_base::iostate&, const __c_locale&), __convert_to_v(const char*,\n+\tdouble&, ios_base::iostate&, const __c_locale&), __convert_to_v(const\n+\tchar*, long double&, ios_base::iostate&, const __c_locale&)): Implement\n+\tDR 23 and deal correctly with broken exponents.\n+\t* config/locale/generic/c_locale.cc (__convert_to_v(const char*,\n+\tfloat&, ios_base::iostate&, const __c_locale&), __convert_to_v(const\n+\tchar*, double&, ios_base::iostate&, const __c_locale&),\n+\t__convert_to_v(const char*, long double&, ios_base::iostate&, const\n+\t__c_locale&)): Likewise.\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int(_InIter,\n+\t_InIter, ios_base&, ios_base::iostate&, _ValueT&)): Likewise.\n+\t(num_get<>::_M_extract_float(_InIter, _InIter, ios_base&,\n+\tios_base::iostate&, string&): Change grouping check to set instead of\n+\tOR failbit; do not check for eofbit here...\n+\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n+\tios_base::iostate&, float&), num_get<>::do_get(iter_type, iter_type,\n+\tios_base&, ios_base::iostate&, double&), num_get<>::do_get(iter_type,\n+\titer_type, ios_base&, ios_base::iostate&, long double&),\n+\tnum_get<>::__do_get(iter_type, iter_type, ios_base&,\n+\tios_base::iostate&, double&)): ... do it here instead.\n+\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n+\tios_base::iostate&, bool&)): Implement DR 23.\n+\t(num_get<>::do_get(iter_type, iter_type, ios_base&,\n+\tios_base::iostate&, void*&)): Adjust.\n+\t* doc/xml/manual/intro.xml: Add and entry for DR 23.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/10.cc:\n+\tAdjust.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc:\n+\tLikewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/22131.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/10.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/12.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/15.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/16.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/22131.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/10.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/12.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/15.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/16.cc: Likewise.\n+\n 2008-09-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/37391"}, {"sha": "67efd9e850f4e6f907e3be850ab6a29d281fffb0", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 77, "deletions": 50, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -49,7 +49,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Specializations for all types used in num_get.\n   template<>\n     void\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n@@ -62,40 +61,53 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       memcpy(__sav, __old, __len);\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n+      bool __overflow = false;\n \n #if !__FLT_HAS_INFINITY__\n       errno = 0;\n #endif\n \n-#if defined(_GLIBCXX_HAVE_STRTOF)\n-      float __f = strtof(__s, &__sanity);\n+#ifdef _GLIBCXX_HAVE_STRTOF\n+      __v = strtof(__s, &__sanity);\n #else\n       double __d = strtod(__s, &__sanity);\n-      float __f = static_cast<float>(__d);\n+      __v = static_cast<float>(__d);\n #ifdef _GLIBCXX_HAVE_FINITEF\n-      if (!finitef (__f))\n-\t__s = __sanity;\n+      if (!finitef (__v))\n+\t__overflow = true;\n #elif defined (_GLIBCXX_HAVE_FINITE)\n-      if (!finite (static_cast<double> (__f)))\n-\t__s = __sanity;\n+      if (!finite (static_cast<double> (__v)))\n+\t__overflow = true;\n #elif defined (_GLIBCXX_HAVE_ISINF)\n-      if (isinf (static_cast<double> (__f)))\n-\t__s = __sanity;\n+      if (isinf (static_cast<double> (__v)))\n+\t__overflow = true;\n #else\n       if (fabs(__d) > numeric_limits<float>::max())\n-\t__s = __sanity;\n+\t__overflow = true;\n #endif\n-#endif\n-\n-      if (__sanity != __s\n-#if !__FLT_HAS_INFINITY__\n-\t  && errno != ERANGE)\n+#endif // _GLIBCXX_HAVE_STRTOF\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0f;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__overflow\n+#if __FLT_HAS_INFINITY__\n+\t       || __v == numeric_limits<float>::infinity()\n+\t       || __v == -numeric_limits<float>::infinity())\n #else\n-\t  && __f != __builtin_huge_valf() && __f != -__builtin_huge_valf())\n+\t       || ((__v > 1.0f || __v < -1.0f) && errno == ERANGE)\n #endif\n-\t__v = __f;\n-      else\n-\t__err |= ios_base::failbit;\n+\t{\n+\t  if (__v > 0.0f)\n+\t    __v = numeric_limits<float>::max();\n+\t  else\n+\t    __v = -numeric_limits<float>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n \n       setlocale(LC_ALL, __sav);\n       delete [] __sav;\n@@ -118,17 +130,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       errno = 0;\n #endif\n \n-      double __d = strtod(__s, &__sanity);\n-\n-      if (__sanity != __s\n-#if !__DBL_HAS_INFINITY__\n-          && errno != ERANGE) \n-#else\n-\t  && __d != __builtin_huge_val() && __d != -__builtin_huge_val())\n+      __v = strtod(__s, &__sanity);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (\n+#if __DBL_HAS_INFINITY__\n+\t       __v == numeric_limits<double>::infinity()\n+\t       || __v == -numeric_limits<double>::infinity())\n+#else          \n+\t       (__v > 1.0 || __v < -1.0) && errno == ERANGE)\n #endif\n-\t__v = __d;\n-      else\n-\t__err |= ios_base::failbit;\n+\t{\n+\t  if (__v > 0.0)\n+\t    __v = numeric_limits<double>::max();\n+\t  else\n+\t    __v = -numeric_limits<double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n \n       setlocale(LC_ALL, __sav);\n       delete [] __sav;\n@@ -152,32 +176,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #if defined(_GLIBCXX_HAVE_STRTOLD) && !defined(_GLIBCXX_HAVE_BROKEN_STRTOLD)\n       char* __sanity;\n-      long double __ld = strtold(__s, &__sanity);\n-\n-      if (__sanity != __s\n-#if !__LDBL_HAS_INFINITY__\n-          && errno != ERANGE)\n-#else\n-\t  && __ld != __builtin_huge_vall() && __ld != -__builtin_huge_vall())\n-#endif\n-\t__v = __ld;\n+      __v = strtold(__s, &__sanity);\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n #else\n       typedef char_traits<char>::int_type int_type;\n-      long double __ld;\n-      int __p = sscanf(__s, \"%Lf\", &__ld);\n+      int __p = sscanf(__s, \"%Lf\", &__v);\n \n-      if (__p && static_cast<int_type>(__p) != char_traits<char>::eof()\n-#if !__LDBL_HAS_INFINITY__\n-          && errno != ERANGE)\n-#else\n-          && __ld != __builtin_huge_vall() && __ld != -__builtin_huge_vall())\n+      if (!__p || static_cast<int_type>(__p) == char_traits<char>::eof())\n #endif\n-\t__v = __ld;\n-\n+\t{\n+\t  __v = 0.0l;\n+\t  __err = ios_base::failbit;\n+\t}\n+       else if (\n+#if __LDBL_HAS_INFINITY__\n+\t        __v == numeric_limits<long double>::infinity()\n+\t        || __v == -numeric_limits<long double>::infinity())\n+#else\n+\t        (__v > 1.0l || __v < -1.0l) && errno == ERANGE)\n #endif\n-      else\n-\t__err |= ios_base::failbit;\n+\t{\n+\t  if (__v > 0.0l)\n+\t    __v = numeric_limits<long double>::max();\n+\t  else\n+\t    __v = -numeric_limits<long double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n \n       setlocale(LC_ALL, __sav);\n       delete [] __sav;"}, {"sha": "0e39d9431a12bf2ad0caaa879f015932642e3e5e", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 60, "deletions": 20, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,6 +36,7 @@\n \n #include <locale>\n #include <stdexcept>\n+#include <limits>\n #include <langinfo.h>\n #include <bits/c++locale_internal.h>\n \n@@ -47,12 +48,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale& __cloc)\n     {\n       char* __sanity;\n-      float __f = __strtof_l(__s, &__sanity, __cloc);\n-      if (__sanity != __s && __f != __builtin_huge_valf()\n-\t  && __f != -__builtin_huge_valf())\n-\t__v = __f;\n-      else\n-\t__err |= ios_base::failbit;\n+      __v = __strtof_l(__s, &__sanity, __cloc);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0f;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == numeric_limits<float>::infinity())\n+\t{\n+\t  __v = numeric_limits<float>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == -numeric_limits<float>::infinity())\n+\t{\n+\t  __v = -numeric_limits<float>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n     }\n \n   template<>\n@@ -61,12 +75,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale& __cloc)\n     {\n       char* __sanity;\n-      double __d = __strtod_l(__s, &__sanity, __cloc);\n-      if (__sanity != __s && __d != __builtin_huge_val()\n-\t  && __d != -__builtin_huge_val())\n-\t__v = __d;\n-      else\n-\t__err |= ios_base::failbit;\n+      __v = __strtod_l(__s, &__sanity, __cloc);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == numeric_limits<double>::infinity())\n+\t{\n+\t  __v = numeric_limits<double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == -numeric_limits<double>::infinity())\n+\t{\n+\t  __v = -numeric_limits<double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n     }\n \n   template<>\n@@ -78,15 +105,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n       // Prefer strtold_l, as __strtold_l isn't prototyped in more recent\n       // glibc versions.\n-      long double __ld = strtold_l(__s, &__sanity, __cloc);\n+      __v = strtold_l(__s, &__sanity, __cloc);\n #else\n-      long double __ld = __strtold_l(__s, &__sanity, __cloc);\n+      __v = __strtold_l(__s, &__sanity, __cloc);\n #endif\n-      if (__sanity != __s && __ld != __builtin_huge_vall()\n-\t  && __ld != -__builtin_huge_vall())\n-\t__v = __ld;\n-      else\n-\t__err |= ios_base::failbit;\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0l;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == numeric_limits<long double>::infinity())\n+\t{\n+\t  __v = numeric_limits<long double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == -numeric_limits<long double>::infinity())\n+\t{\n+\t  __v = -numeric_limits<long double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n     }\n \n   void"}, {"sha": "08e107aad5ba51e79a62eb84f7b803ecf9e2d28e", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -192,6 +192,12 @@\n     <listitem><para>Re-opening a file stream does <emphasis>not</emphasis> clear the state flags.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><ulink url=\"../ext/lwg-active.html#23\">23</ulink>:\n+        <emphasis>Num_get overflow result</emphasis>\n+    </term>\n+    <listitem><para>Implement the proposed resolution.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><ulink url=\"../ext/lwg-defects.html#25\">25</ulink>:\n         <emphasis>String operator&lt;&lt; uses width() value wrong</emphasis>\n     </term>"}, {"sha": "271f2bd29018ee5007dbfa01971f33ea6f400a8b", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -345,12 +345,9 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n           if (!std::__verify_grouping(__lc->_M_grouping, \n \t\t\t\t      __lc->_M_grouping_size,\n \t\t\t\t      __found_grouping))\n-\t    __err |= ios_base::failbit;\n+\t    __err = ios_base::failbit;\n         }\n \n-      // Finish up.\n-      if (__testeof)\n-        __err |= ios_base::eofbit;\n       return __beg;\n     }\n \n@@ -454,6 +451,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \tif (__lc->_M_use_grouping)\n \t  __found_grouping.reserve(32);\n \tbool __testfail = false;\n+\tbool __testoverflow = false;\n \tconst __unsigned_type __max = __negative\n \t  ? -__gnu_cxx::__numeric_traits<_ValueT>::__min\n \t  : __gnu_cxx::__numeric_traits<_ValueT>::__max;\n@@ -471,11 +469,11 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t\tbreak;\n \t      \n \t      if (__result > __smax)\n-\t\t__testfail = true;\n+\t\t__testoverflow = true;\n \t      else\n \t\t{\n \t\t  __result *= __base;\n-\t\t  __testfail |= __result > __max - __digit;\n+\t\t  __testoverflow |= __result > __max - __digit;\n \t\t  __result += __digit;\n \t\t  ++__sep_pos;\n \t\t}\n@@ -518,11 +516,11 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t\t  if (__digit > 15)\n \t\t    __digit -= 6;\n \t\t  if (__result > __smax)\n-\t\t    __testfail = true;\n+\t\t    __testoverflow = true;\n \t\t  else\n \t\t    {\n \t\t      __result *= __base;\n-\t\t      __testfail |= __result > __max - __digit;\n+\t\t      __testoverflow |= __result > __max - __digit;\n \t\t      __result += __digit;\n \t\t      ++__sep_pos;\n \t\t    }\n@@ -544,14 +542,27 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t    if (!std::__verify_grouping(__lc->_M_grouping,\n \t\t\t\t\t__lc->_M_grouping_size,\n \t\t\t\t\t__found_grouping))\n-\t      __err |= ios_base::failbit;\n+\t      __err = ios_base::failbit;\n \t  }\n \n-\tif (!__testfail && (__sep_pos || __found_zero \n-\t\t\t    || __found_grouping.size()))\n-\t  __v = __negative ? -__result : __result;\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 23. Num_get overflow result.\n+\tif ((!__sep_pos && !__found_zero && !__found_grouping.size())\n+\t    || __testfail)\n+\t  {\n+\t    __v = 0;\n+\t    __err = ios_base::failbit;\n+\t  }\n+\telse if (__testoverflow)\n+\t  {\n+\t    if (__negative)\n+\t      __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;\n+\t    else\n+\t      __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;\n+\t    __err = ios_base::failbit;\n+\t  }\n \telse\n-\t  __err |= ios_base::failbit;\n+\t  __v = __negative ? -__result : __result;\n \n \tif (__testeof)\n \t  __err |= ios_base::eofbit;\n@@ -576,7 +587,14 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t  if (__l == 0 || __l == 1)\n \t    __v = bool(__l);\n \t  else\n-            __err |= ios_base::failbit;\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 23. Num_get overflow result.\n+\t      __v = true;\n+\t      __err = ios_base::failbit;\n+\t      if (__beg == __end)\n+\t\t__err |= ios_base::eofbit;\n+\t    }\n         }\n       else\n         {\n@@ -621,7 +639,12 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \t  else if (__testt && __n == __lc->_M_truename_size)\n \t    __v = true;\n \t  else\n-\t    __err |= ios_base::failbit;\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 23. Num_get overflow result.\n+\t      __v = false;\n+\t      __err = ios_base::failbit;\n+\t    }\n \n           if (__testeof)\n             __err |= ios_base::eofbit;\n@@ -683,6 +706,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n       std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n+      if (__beg == __end)\n+\t__err |= ios_base::eofbit;\n       return __beg;\n     }\n \n@@ -696,6 +721,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n       std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n+      if (__beg == __end)\n+\t__err |= ios_base::eofbit;\n       return __beg;\n     }\n \n@@ -710,6 +737,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n       std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n+      if (__beg == __end)\n+\t__err |= ios_base::eofbit;\n       return __beg;\n     }\n #endif\n@@ -724,6 +753,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n       std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n+      if (__beg == __end)\n+\t__err |= ios_base::eofbit;\n       return __beg;\n     }\n \n@@ -748,8 +779,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       // Reset from hex formatted input.\n       __io.flags(__fmt);\n \n-      if (!(__err & ios_base::failbit))\n-\t__v = reinterpret_cast<void*>(__ul);\n+      __v = reinterpret_cast<void*>(__ul);\n       return __beg;\n     }\n "}, {"sha": "03e4a8ed7aec4307817b1fa6940edcd6171f0d43", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/10.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F10.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2003 Free Software Foundation\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,24 +45,24 @@ void test01()\n   iss.str(\"1e.\");\n   err = ios_base::goodbit;\n   end = ng.get(iss.rdbuf(), 0, iss, err, f);\n-  VERIFY( err == ios_base::goodbit );\n+  VERIFY( err == ios_base::failbit );\n   VERIFY( *end == '.' );\n-  VERIFY( f == f1 );\n+  VERIFY( f == 0.0f );\n \n   iss.str(\"3e+\");\n   iss.clear();\n   err = ios_base::goodbit;\n   end = ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( err == ios_base::eofbit );\n-  VERIFY( d == d1 );\n+  VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n+  VERIFY( d == 0.0 );\n \n   iss.str(\"6e \");\n   iss.clear();\n   err = ios_base::goodbit;\n   end = ng.get(iss.rdbuf(), 0, iss, err, ld);\n-  VERIFY( err == ios_base::goodbit );\n+  VERIFY( err == ios_base::failbit );\n   VERIFY( *end == ' ' );\n-  VERIFY( ld == ld1 );\n+  VERIFY( ld == 0.0l );\n }\n \n int main()"}, {"sha": "c315a59e3c67cc94160181de33c6f8b2f6f8992c", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/12.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F12.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2003-12-22  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -129,7 +129,7 @@ void test01()\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == 'X' );\n-  VERIFY( l == l3 );\n+  VERIFY( l == 0 );\n \n   iss2.str(\"000778\");\n   iss2.clear();"}, {"sha": "f5c5ec4d0d76807b563b1fe32f753c6894941113", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/15.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F15.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F15.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F15.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2004-03-01  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2004 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,21 +51,22 @@ void test01()\n \n   ios_base::iostate err = ios_base::goodbit;\n   iterator_type end;\n-  double d = 0.0;\n-  double d1 = 1.0;\n-  double d2 = 3.0;\n+  double d = 1.0;\n   \n   iss1.str(\"1e+2\");\n   err = ios_base::goodbit;\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n-  VERIFY( err == ios_base::goodbit );\n-  VERIFY( d == d1 );\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == '+' );\n+  VERIFY( d == 0.0 );\n \n   iss2.str(\"3e-1\");\n   err = ios_base::goodbit;\n+  d = 1.0;\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n-  VERIFY( err == ios_base::goodbit );\n-  VERIFY( d == d2 );\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == '-' );\n+  VERIFY( d == 0.0 );\n }\n \n int main()"}, {"sha": "cdabe1e9f3f90803c1d75c3e4252910426f5d7dc", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/16.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F16.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2005-04-26  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2005 Free Software Foundation\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, us0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( us0 == 0 );\n+  VERIFY( us0 == numeric_limits<unsigned short>::max() );\n \n   ui0 = 0U;\n   ss.clear();\n@@ -82,7 +82,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ui0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ui0 == 0U );\n+  VERIFY( ui0 == numeric_limits<unsigned int>::max() );\n \n   ul0 = 0UL;\n   ss.clear();\n@@ -100,7 +100,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ul0 == 0UL );\n+  VERIFY( ul0 == numeric_limits<unsigned long>::max() );\n \n   l01 = 0L;\n   ss.clear();\n@@ -118,7 +118,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, l01);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( l01 == 0L );\n+  VERIFY( l01 == numeric_limits<long>::max() );\n \n   l02 = 0L;\n   ss.clear();\n@@ -136,7 +136,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, l02);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( l02 == 0L );\n+  VERIFY( l02 == numeric_limits<long>::min() );\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   ull0 = 0ULL;\n@@ -155,7 +155,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ull0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ull0 == 0ULL );\n+  VERIFY( ull0 == numeric_limits<unsigned long long>::max() );\n \n   ll01 = 0LL;\n   ss.clear();\n@@ -173,7 +173,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ll01);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ll01 == 0LL );\n+  VERIFY( ll01 == numeric_limits<long long>::max() );\n \n   ll02 = 0LL;\n   ss.clear();\n@@ -191,7 +191,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ll02);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ll02 == 0LL );\n+  VERIFY( ll02 == numeric_limits<long long>::min() );\n #endif\n }\n "}, {"sha": "60fa184bb475b7828fc7bda13981df46f35e94dd", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/22131.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F22131.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F22131.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F22131.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2005-06-28  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2005 Free Software Foundation\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,7 @@ void test01()\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == '#' );\n-  VERIFY( l == l1 );\n+  VERIFY( l == 0 );\n \n   iss1.str(\"0#0#0#2\");\n   iss1.clear();\n@@ -86,7 +86,7 @@ void test01()\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == '#' );\n-  VERIFY( d == d1 );\n+  VERIFY( d == 0.0 );\n \n   iss1.str(\"0#0#0#2\");\n   iss1.clear();\n@@ -102,7 +102,7 @@ void test01()\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == '#' );\n-  VERIFY( l == l2 );\n+  VERIFY( l == 0 );\n \n   iss1.str(\"00#0#3\");\n   iss1.clear();"}, {"sha": "425eba5051ec507af7991b1fdbd752cf3fd46901", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/10.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F10.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2003 Free Software Foundation\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,24 +45,24 @@ void test01()\n   iss.str(L\"1e.\");\n   err = ios_base::goodbit;\n   end = ng.get(iss.rdbuf(), 0, iss, err, f);\n-  VERIFY( err == ios_base::goodbit );\n+  VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L'.' );\n-  VERIFY( f == f1 );\n+  VERIFY( f == 0.0f );\n \n   iss.str(L\"3e+\");\n   iss.clear();\n   err = ios_base::goodbit;\n   end = ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( err == ios_base::eofbit );\n-  VERIFY( d == d1 );\n+  VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n+  VERIFY( d == 0.0 );\n \n   iss.str(L\"6e \");\n   iss.clear();\n   err = ios_base::goodbit;\n   end = ng.get(iss.rdbuf(), 0, iss, err, ld);\n-  VERIFY( err == ios_base::goodbit );\n+  VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L' ' );\n-  VERIFY( ld == ld1 );\n+  VERIFY( ld == 0.0l );\n }\n \n int main()"}, {"sha": "097b5ee331dc2271e777c5c595d2a034adcbc0ec", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/12.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F12.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2003-12-22  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -129,7 +129,7 @@ void test01()\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L'X' );\n-  VERIFY( l == l3 );\n+  VERIFY( l == 0 );\n \n   iss2.str(L\"000778\");\n   iss2.clear();"}, {"sha": "6b8613d4f6cace13b9d28b8d91e2806e8d628224", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/15.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F15.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F15.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F15.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2004-03-01  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2004 Free Software Foundation\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,21 +51,22 @@ void test01()\n \n   ios_base::iostate err = ios_base::goodbit;\n   iterator_type end;\n-  double d = 0.0;\n-  double d1 = 1.0;\n-  double d2 = 3.0;\n+  double d = 1.0;\n   \n   iss1.str(L\"1e+2\");\n   err = ios_base::goodbit;\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n-  VERIFY( err == ios_base::goodbit );\n-  VERIFY( d == d1 );\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == L'+' );\n+  VERIFY( d == 0.0 );\n \n   iss2.str(L\"3e-1\");\n   err = ios_base::goodbit;\n+  d = 1.0;\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n-  VERIFY( err == ios_base::goodbit );\n-  VERIFY( d == d2 );\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == L'-' );\n+  VERIFY( d == 0.0 );\n }\n \n int main()"}, {"sha": "77950041b8b220be79f601cb13e1eea6204f373d", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/16.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F16.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,6 @@\n // 2005-04-26  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2005 Free Software Foundation\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, us0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( us0 == 0 );\n+  VERIFY( us0 == numeric_limits<unsigned short>::max() );\n \n   ui0 = 0U;\n   ss.clear();\n@@ -82,7 +82,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ui0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ui0 == 0U );\n+  VERIFY( ui0 == numeric_limits<unsigned int>::max() );\n \n   ul0 = 0UL;\n   ss.clear();\n@@ -100,7 +100,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ul0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ul0 == 0UL );\n+  VERIFY( ul0 == numeric_limits<unsigned long>::max() );\n \n   l01 = 0L;\n   ss.clear();\n@@ -118,7 +118,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, l01);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( l01 == 0L );\n+  VERIFY( l01 == numeric_limits<long>::max() );\n \n   l02 = 0L;\n   ss.clear();\n@@ -136,7 +136,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, l02);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( l02 == 0L );\n+  VERIFY( l02 == numeric_limits<long>::min() );\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   ull0 = 0ULL;\n@@ -155,7 +155,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ull0);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ull0 == 0ULL );\n+  VERIFY( ull0 == numeric_limits<unsigned long long>::max() );\n \n   ll01 = 0LL;\n   ss.clear();\n@@ -173,7 +173,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ll01);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ll01 == 0LL );\n+  VERIFY( ll01 == numeric_limits<long long>::max() );\n \n   ll02 = 0LL;\n   ss.clear();\n@@ -191,7 +191,7 @@ void test01()\n   err = ios_base::goodbit;\n   end = ng.get(ss.rdbuf(), 0, ss, err, ll02);\n   VERIFY( err == (ios_base::failbit | ios_base::eofbit) );\n-  VERIFY( ll02 == 0LL );\n+  VERIFY( ll02 == numeric_limits<long long>::min() );\n #endif\n }\n "}, {"sha": "6c622be66753b004ef59d17fef681865644453de", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/22131.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F22131.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F22131.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F22131.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -64,7 +64,7 @@ void test01()\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L'#' );\n-  VERIFY( l == l1 );\n+  VERIFY( l == 0 );\n \n   iss1.str(L\"0#0#0#2\");\n   iss1.clear();\n@@ -86,7 +86,7 @@ void test01()\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L'#' );\n-  VERIFY( d == d1 );\n+  VERIFY( d == 0.0 );\n \n   iss1.str(L\"0#0#0#2\");\n   iss1.clear();\n@@ -102,7 +102,7 @@ void test01()\n   end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L'#' );\n-  VERIFY( l == l2 );\n+  VERIFY( l == 0 );\n \n   iss1.str(L\"00#0#3\");\n   iss1.clear();"}, {"sha": "3437a560c2e17fdfcb465d625e5f53bf2d8b1242", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,6 +1,7 @@\n // 1999-04-12 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -109,14 +110,16 @@ bool test10()\n \n   is_05 >> f;\n   VERIFY( f == 0 );\n+  f = 1;\n   is_05 >> f;\n-  VERIFY( f == 5.0 );\n-  VERIFY( is_05.rdstate() == std::ios_base::goodbit );\n+  VERIFY( f == 0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05 >> c;\n   VERIFY( c == 'a' );\n+  f = 1;\n   is_05 >> f;\n-  VERIFY( f == 5.0 );\n+  VERIFY( f == 0 );\n   VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05.ignore();"}, {"sha": "c4cc59049b760e54afffe7cef28c7a5dc961832b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/10.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ef46f95596c600cf4d17bf98f4804e6bd53cfc5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F10.cc?ref=5ef46f95596c600cf4d17bf98f4804e6bd53cfc5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -107,14 +107,16 @@ bool test10()\n \n   is_05 >> f;\n   VERIFY( f == 0 );\n+  f = 1;\n   is_05 >> f;\n-  VERIFY( f == 5.0 );\n-  VERIFY( is_05.rdstate() == std::ios_base::goodbit );\n+  VERIFY( f == 0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05 >> c;\n   VERIFY( c == L'a' );\n+  f = 1;\n   is_05 >> f;\n-  VERIFY( f == 5.0 );\n+  VERIFY( f == 0 );\n   VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05.ignore();"}]}