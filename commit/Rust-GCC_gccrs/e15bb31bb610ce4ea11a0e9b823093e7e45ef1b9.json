{"sha": "e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1YmIzMWJiNjEwY2U0ZWExMWEwZTliODIzMDkzZTdlNDVlZjFiOQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T17:39:35Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T17:39:35Z"}, "message": "ChangeLog\n\nFrom-SVN: r99736", "tree": {"sha": "8526b64d7d38368da88ddcb3d9ca9714491c295a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8526b64d7d38368da88ddcb3d9ca9714491c295a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9/comments", "author": null, "committer": null, "parents": [{"sha": "d842a495a504025380ed9077bc2c9436a3d8fddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d842a495a504025380ed9077bc2c9436a3d8fddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d842a495a504025380ed9077bc2c9436a3d8fddd"}], "stats": {"total": 302, "additions": 158, "deletions": 144}, "files": [{"sha": "d8637797e4ced2e83d72b532f21a1d5a1637e847", "filename": "libiberty/functions.texi", "status": "modified", "additions": 158, "deletions": 144, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=e15bb31bb610ce4ea11a0e9b823093e7e45ef1b9", "patch": "@@ -25,139 +25,6 @@ nineteen EBCDIC varying characters is tested; exercise caution.)\n @end ftable\n @end defvr\n \n-@c pexecute.txh:1\n-@deftypefn Extension struct pex_obj *pex_init (int @var{flags}, const char *@var{pname}, const char *@var{tempbase})\n-\n-Prepare to execute one or more programs, with standard output of each\n-program fed to standard input of the next.  This is a system\n-independent interface to execute a pipeline.\n-\n-@var{flags} is a bitwise combination of the following:\n-\n-@table @code\n-\n-@vindex PEX_RECORD_TIMES\n-@item PEX_RECORD_TIMES\n-Record subprocess times if possible.\n-\n-@vindex PEX_USE_PIPES\n-@item PEX_USE_PIPES\n-Use pipes for communication between processes, if possible.\n-\n-@vindex PEX_SAVE_TEMPS\n-@item PEX_SAVE_TEMPS\n-Don't delete temporary files used for communication between\n-processes.\n-\n-@end table\n-\n-@var{pname} is the name of program to be executed, used in error\n-messages.  @var{tempbase} is a base name to use for any required\n-temporary files; it may be @code{NULL} to use a randomly chosen name.\n-\n-@end deftypefn\n-\n-@c pexecute.txh:161\n-@deftypefn Extension const char *pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n-\n-An interface to @code{pex_init} to permit the easy execution of a\n-single program.  The return value and most of the parameters are as\n-for a call to @code{pex_run}.  @var{flags} is restricted to a\n-combination of @code{PEX_SEARCH}, @code{PEX_STDERR_TO_STDOUT}, and\n-@code{PEX_BINARY_OUTPUT}.  @var{outname} is interpreted as if\n-@code{PEX_LAST} were set.  On a successful return, *@var{status} will\n-be set to the exit status of the program.\n-\n-@end deftypefn\n-\n-@c pexecute.txh:32\n-@deftypefn Extension const char *pex_run (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n-\n-Execute one program in a pipeline.  On success this returns\n-@code{NULL}.  On failure it returns an error message, a statically\n-allocated string.\n-\n-@var{obj} is returned by a previous call to @code{pex_init}.\n-\n-@var{flags} is a bitwise combination of the following:\n-\n-@table @code\n-\n-@vindex PEX_LAST\n-@item PEX_LAST\n-This must be set on the last program in the pipeline.  In particular,\n-it should be set when executing a single program.  The standard output\n-of the program will be sent to @var{outname}, or, if @var{outname} is\n-@code{NULL}, to the standard output of the calling program.  This\n-should not be set if you want to call @code{pex_read_output}\n-(described below).  After a call to @code{pex_run} with this bit set,\n-@var{pex_run} may no longer be called with the same @var{obj}.\n-\n-@vindex PEX_SEARCH\n-@item PEX_SEARCH\n-Search for the program using the user's executable search path.\n-\n-@vindex PEX_SUFFIX\n-@item PEX_SUFFIX\n-@var{outname} is a suffix.  See the description of @var{outname},\n-below.\n-\n-@vindex PEX_STDERR_TO_STDOUT\n-@item PEX_STDERR_TO_STDOUT\n-Send the program's standard error to standard output, if possible.\n-\n-@vindex PEX_BINARY_INPUT\n-@vindex PEX_BINARY_OUTPUT\n-@item PEX_BINARY_INPUT\n-@itemx PEX_BINARY_OUTPUT\n-The standard input (output) of the program should be read (written) in\n-binary mode rather than text mode.  These flags are ignored on systems\n-which do not distinguish binary mode and text mode, such as Unix.  For\n-proper behavior these flags should match appropriately--a call to\n-@code{pex_run} using @code{PEX_BINARY_OUTPUT} should be followed by a\n-call using @code{PEX_BINARY_INPUT}.\n-@end table\n-\n-@var{executable} is the program to execute.  @var{argv} is the set of\n-arguments to pass to the program; normally @code{@var{argv}[0]} will\n-be a copy of @var{executable}.\n-\n-@var{outname} is used to set the name of the file to use for standard\n-output.  There are two cases in which no output file will be used: 1)\n-if @code{PEX_LAST} is not set in @var{flags}, and @code{PEX_USE_PIPES}\n-was set in the call to @code{pex_init}, and the system supports pipes;\n-2) if @code{PEX_LAST} is set in @var{flags}, and @var{outname} is\n-@code{NULL}.  Otherwise the code will use a file to hold standard\n-output.  If @code{PEX_LAST} is not set, this file is considered to be\n-a temporary file, and it will be removed when no longer needed, unless\n-@code{PEX_SAVE_TEMPS} was set in the call to @code{pex_init}.\n-\n-There are two cases to consider when setting the name of the file to\n-hold standard output.\n-\n-First case: @code{PEX_SUFFIX} is set in @var{flags}.  In this case\n-@var{outname} may not be @code{NULL}.  If the @var{tempbase} parameter\n-to @code{pex_init} was not @code{NULL}, then the output file name is\n-the concatenation of @var{tempbase} and @var{outname}.  If\n-@var{tempbase} was @code{NULL}, then the output file name is a random\n-file name ending in @var{outname}.\n-\n-Second case: @code{PEX_SUFFIX} was not set in @var{flags}.  In this\n-case, if @var{outname} is not @code{NULL}, it is used as the output\n-file name.  If @var{outname} is @code{NULL}, and @var{tempbase} was\n-not NULL, the output file name is randomly chosen using\n-@var{tempbase}.  Otherwise the output file name is chosen completely\n-at random.\n-\n-@var{errname} is the file name to use for standard error output.  If\n-it is @code{NULL}, standard error is the same as the caller.\n-Otherwise, standard error is written to the named file.\n-\n-On an error return, the code sets @code{*@var{err}} to an @code{errno}\n-value, or to 0 if there is no relevant @code{errno}.\n-\n-@end deftypefn\n-\n @c alloca.c:26\n @deftypefn Replacement void* alloca (size_t @var{size})\n \n@@ -363,7 +230,7 @@ and inode numbers.\n @end deftypefn\n \n @c fopen_unlocked.c:48\n-@deftypefn Extension FILE * fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -432,7 +299,7 @@ Ignores case when performing the comparison.\n @end deftypefn\n \n @c fopen_unlocked.c:39\n-@deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fopen_unlocked (const char *@var{path}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -452,7 +319,7 @@ itself.\n @end deftypefn\n \n @c fopen_unlocked.c:57\n-@deftypefn Extension FILE * freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n+@deftypefn Extension {FILE *} freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n \n Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -781,14 +648,14 @@ reading and writing.\n \n @end deftypefn\n \n-@c pexecute.txh:155\n+@c pexecute.txh:169\n @deftypefn Extension void pex_free (struct pex_obj @var{obj})\n \n Clean up and free all data associated with @var{obj}.\n \n @end deftypefn\n \n-@c pexecute.txh:131\n+@c pexecute.txh:144\n @deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, int @var{count}, int *@var{vector})\n \n Returns the exit status of all programs run using @var{obj}.\n@@ -798,7 +665,7 @@ to @code{pex_run}.  Returns 0 on error, 1 on success.\n \n @end deftypefn\n \n-@c pexecute.txh:140\n+@c pexecute.txh:153\n @deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, int @var{count}, struct pex_time *@var{vector})\n \n Returns the process execution times of all programs run using\n@@ -807,15 +674,61 @@ results will be placed into @var{vector}.  The results are in the\n order of the calls to @code{pex_run}.  Returns 0 on error, 1 on\n success.\n \n-@code{struct pex_time} has the following fields: @code{user_seconds},\n+@code{struct pex_time} has the following fields of the type\n+@code{unsigned long}: @code{user_seconds},\n @code{user_microseconds}, @code{system_seconds},\n @code{system_microseconds}.  On systems which do not support reporting\n process times, all the fields will be set to @code{0}.\n \n @end deftypefn\n \n-@c pexecute.txh:119\n-@deftypefn Extension FILE * pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n+@c pexecute.txh:1\n+@deftypefn Extension {struct pex_obj *} pex_init (int @var{flags}, const char *@var{pname}, const char *@var{tempbase})\n+\n+Prepare to execute one or more programs, with standard output of each\n+program fed to standard input of the next.  This is a system\n+independent interface to execute a pipeline.\n+\n+@var{flags} is a bitwise combination of the following:\n+\n+@table @code\n+\n+@vindex PEX_RECORD_TIMES\n+@item PEX_RECORD_TIMES\n+Record subprocess times if possible.\n+\n+@vindex PEX_USE_PIPES\n+@item PEX_USE_PIPES\n+Use pipes for communication between processes, if possible.\n+\n+@vindex PEX_SAVE_TEMPS\n+@item PEX_SAVE_TEMPS\n+Don't delete temporary files used for communication between\n+processes.\n+\n+@end table\n+\n+@var{pname} is the name of program to be executed, used in error\n+messages.  @var{tempbase} is a base name to use for any required\n+temporary files; it may be @code{NULL} to use a randomly chosen name.\n+\n+@end deftypefn\n+\n+@c pexecute.txh:175\n+@deftypefn Extension {const char *} pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n+\n+An interface to permit the easy execution of a\n+single program.  The return value and most of the parameters are as\n+for a call to @code{pex_run}.  @var{flags} is restricted to a\n+combination of @code{PEX_SEARCH}, @code{PEX_STDERR_TO_STDOUT}, and\n+@code{PEX_BINARY_OUTPUT}.  @var{outname} is interpreted as if\n+@code{PEX_LAST} were set.  On a successful return, @code{*@var{status}} will\n+be set to the exit status of the program.\n+\n+@end deftypefn\n+\n+@c pexecute.txh:132\n+@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n output of the last program in the pipeline.  When this is used,\n@@ -827,7 +740,108 @@ it will be closed by @code{pex_free}.\n \n @end deftypefn\n \n-@c pexecute.txh:173\n+@c pexecute.txh:32\n+@deftypefn Extension {const char *} pex_run (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+\n+Execute one program in a pipeline.  On success this returns\n+@code{NULL}.  On failure it returns an error message, a statically\n+allocated string.\n+\n+@var{obj} is returned by a previous call to @code{pex_init}.\n+\n+@var{flags} is a bitwise combination of the following:\n+\n+@table @code\n+\n+@vindex PEX_LAST\n+@item PEX_LAST\n+This must be set on the last program in the pipeline.  In particular,\n+it should be set when executing a single program.  The standard output\n+of the program will be sent to @var{outname}, or, if @var{outname} is\n+@code{NULL}, to the standard output of the calling program.  Do @emph{not}\n+set this bit if you want to call @code{pex_read_output}\n+(described below).  After a call to @code{pex_run} with this bit set,\n+@var{pex_run} may no longer be called with the same @var{obj}.\n+\n+@vindex PEX_SEARCH\n+@item PEX_SEARCH\n+Search for the program using the user's executable search path.\n+\n+@vindex PEX_SUFFIX\n+@item PEX_SUFFIX\n+@var{outname} is a suffix.  See the description of @var{outname},\n+below.\n+\n+@vindex PEX_STDERR_TO_STDOUT\n+@item PEX_STDERR_TO_STDOUT\n+Send the program's standard error to standard output, if possible.\n+\n+@vindex PEX_BINARY_INPUT\n+@vindex PEX_BINARY_OUTPUT\n+@item PEX_BINARY_INPUT\n+@itemx PEX_BINARY_OUTPUT\n+The standard input (output) of the program should be read (written) in\n+binary mode rather than text mode.  These flags are ignored on systems\n+which do not distinguish binary mode and text mode, such as Unix.  For\n+proper behavior these flags should match appropriately---a call to\n+@code{pex_run} using @code{PEX_BINARY_OUTPUT} should be followed by a\n+call using @code{PEX_BINARY_INPUT}.\n+@end table\n+\n+@var{executable} is the program to execute.  @var{argv} is the set of\n+arguments to pass to the program; normally @code{@var{argv}[0]} will\n+be a copy of @var{executable}.\n+\n+@var{outname} is used to set the name of the file to use for standard\n+output.  There are two cases in which no output file will be used:\n+\n+@enumerate\n+@item\n+if @code{PEX_LAST} is not set in @var{flags}, and @code{PEX_USE_PIPES}\n+was set in the call to @code{pex_init}, and the system supports pipes\n+\n+@item\n+if @code{PEX_LAST} is set in @var{flags}, and @var{outname} is\n+@code{NULL}\n+@end enumerate\n+\n+@noindent\n+Otherwise the code will use a file to hold standard\n+output.  If @code{PEX_LAST} is not set, this file is considered to be\n+a temporary file, and it will be removed when no longer needed, unless\n+@code{PEX_SAVE_TEMPS} was set in the call to @code{pex_init}.\n+\n+There are two cases to consider when setting the name of the file to\n+hold standard output.\n+\n+@enumerate\n+@item\n+@code{PEX_SUFFIX} is set in @var{flags}.  In this case\n+@var{outname} may not be @code{NULL}.  If the @var{tempbase} parameter\n+to @code{pex_init} was not @code{NULL}, then the output file name is\n+the concatenation of @var{tempbase} and @var{outname}.  If\n+@var{tempbase} was @code{NULL}, then the output file name is a random\n+file name ending in @var{outname}.\n+\n+@item\n+@code{PEX_SUFFIX} was not set in @var{flags}.  In this\n+case, if @var{outname} is not @code{NULL}, it is used as the output\n+file name.  If @var{outname} is @code{NULL}, and @var{tempbase} was\n+not NULL, the output file name is randomly chosen using\n+@var{tempbase}.  Otherwise the output file name is chosen completely\n+at random.\n+@end enumerate\n+\n+@var{errname} is the file name to use for standard error output.  If\n+it is @code{NULL}, standard error is the same as the caller's.\n+Otherwise, standard error is written to the named file.\n+\n+On an error return, the code sets @code{*@var{err}} to an @code{errno}\n+value, or to 0 if there is no relevant @code{errno}.\n+\n+@end deftypefn\n+\n+@c pexecute.txh:187\n @deftypefn Extension int pexecute (const char *@var{program}, char * const *@var{argv}, const char *@var{this_pname}, const char *@var{temp_base}, char **@var{errmsg_fmt}, char **@var{errmsg_arg}, int flags)\n \n This is the old interface to execute one or more programs.  It is\n@@ -855,7 +869,7 @@ name is unset/removed.\n \n @end deftypefn\n \n-@c pexecute.txh:181\n+@c pexecute.txh:195\n @deftypefn Extension int pwait (int @var{pid}, int *@var{status}, int @var{flags})\n \n Another part of the old execution interface."}]}