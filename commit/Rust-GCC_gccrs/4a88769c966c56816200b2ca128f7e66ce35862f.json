{"sha": "4a88769c966c56816200b2ca128f7e66ce35862f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4ODc2OWM5NjZjNTY4MTYyMDBiMmNhMTI4ZjdlNjZjZTM1ODYyZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-08-24T13:43:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-08-24T13:43:54Z"}, "message": "re PR libstdc++/65049 (Undefined behaviour with std::char_traits<char>)\n\n\tPR libstdc++/65049\n\t* include/bits/char_traits.h (char_traits<char>::compare,\n\tchar_traits<char>::find, char_traits<char>::move,\n\tchar_traits<char>::copy, char_traits<char>::assign): Check for zero\n\tlength.\n\t(char_traits<wchar_t>::compare, char_traits<wchar_t>::find,\n\tchar_traits<wchar_t>::move, char_traits<wchar_t>::copy,\n\tchar_traits<wchar_t>::assign): Likewise.\n\t(char_traits<char16_t>::move, char_traits<char16_t>::copy): Likewise.\n\t(char_traits<char32_t>::move, char_traits<char32_t>::copy): Likewise.\n\t* include/ext/pod_char_traits.h (char_traits<character<>>::move,\n\tchar_traits<character<>>::copy): Likewise.\n\t* testsuite/21_strings/char_traits/requirements/char/65049.cc: New.\n\t* testsuite/21_strings/char_traits/requirements/char16_t/65049.cc:\n\tNew.\n\t* testsuite/21_strings/char_traits/requirements/char32_t/65049.cc:\n\tNew.\n\t* testsuite/21_strings/char_traits/requirements/wchar_t/65049.cc:\n\tNew.\n\nFrom-SVN: r227127", "tree": {"sha": "9e2a0e196c68f7e5f03acc5d9aa61d64c76e3700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e2a0e196c68f7e5f03acc5d9aa61d64c76e3700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a88769c966c56816200b2ca128f7e66ce35862f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a88769c966c56816200b2ca128f7e66ce35862f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a88769c966c56816200b2ca128f7e66ce35862f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a88769c966c56816200b2ca128f7e66ce35862f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3af7efb7d966228f55664175c029d02d21b69873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af7efb7d966228f55664175c029d02d21b69873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af7efb7d966228f55664175c029d02d21b69873"}], "stats": {"total": 284, "additions": 274, "deletions": 10}, "files": [{"sha": "f6f68a813016260f16edb3bc3eec1f38eb8f758b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -1,5 +1,25 @@\n 2015-08-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/65049\n+\t* include/bits/char_traits.h (char_traits<char>::compare,\n+\tchar_traits<char>::find, char_traits<char>::move,\n+\tchar_traits<char>::copy, char_traits<char>::assign): Check for zero\n+\tlength.\n+\t(char_traits<wchar_t>::compare, char_traits<wchar_t>::find,\n+\tchar_traits<wchar_t>::move, char_traits<wchar_t>::copy,\n+\tchar_traits<wchar_t>::assign): Likewise.\n+\t(char_traits<char16_t>::move, char_traits<char16_t>::copy): Likewise.\n+\t(char_traits<char32_t>::move, char_traits<char32_t>::copy): Likewise.\n+\t* include/ext/pod_char_traits.h (char_traits<character<>>::move,\n+\tchar_traits<character<>>::copy): Likewise.\n+\t* testsuite/21_strings/char_traits/requirements/char/65049.cc: New.\n+\t* testsuite/21_strings/char_traits/requirements/char16_t/65049.cc:\n+\tNew.\n+\t* testsuite/21_strings/char_traits/requirements/char32_t/65049.cc:\n+\tNew.\n+\t* testsuite/21_strings/char_traits/requirements/wchar_t/65049.cc:\n+\tNew.\n+\n \tPR libstdc++/67309\n \t* include/bits/random.tcc\n \t(poisson_distribution::param_type::_M_initialize): Use max<double>."}, {"sha": "0d0063bcee6f41d8d31829bc786f029147deaf1d", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -256,27 +256,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return __builtin_memcmp(__s1, __s2, __n); }\n+      {\n+\tif (__n == 0)\n+\t  return 0;\n+\treturn __builtin_memcmp(__s1, __s2, __n);\n+      }\n \n       static size_t\n       length(const char_type* __s)\n       { return __builtin_strlen(__s); }\n \n       static const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n-      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }\n+      {\n+\tif (__n == 0)\n+\t  return 0;\n+\treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n+      }\n \n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }\n+      {\n+\tif (__n == 0)\n+\t  return __s1;\n+\treturn static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\n+      }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }\n+      {\n+\tif (__n == 0)\n+\t  return __s1;\n+\treturn static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\n+      }\n \n       static char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n-      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }\n+      {\n+\tif (__n == 0)\n+\t  return __s;\n+\treturn static_cast<char_type*>(__builtin_memset(__s, __a, __n));\n+      }\n \n       static _GLIBCXX_CONSTEXPR char_type\n       to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT\n@@ -327,27 +347,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       static int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return wmemcmp(__s1, __s2, __n); }\n+      {\n+\tif (__n == 0)\n+\t  return 0;\n+\treturn wmemcmp(__s1, __s2, __n);\n+      }\n \n       static size_t\n       length(const char_type* __s)\n       { return wcslen(__s); }\n \n       static const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n-      { return wmemchr(__s, __a, __n); }\n+      {\n+\tif (__n == 0)\n+\t  return 0;\n+\treturn wmemchr(__s, __a, __n);\n+      }\n \n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return wmemmove(__s1, __s2, __n); }\n+      {\n+\tif (__n == 0)\n+\t  return __s1;\n+\treturn wmemmove(__s1, __s2, __n);\n+      }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return wmemcpy(__s1, __s2, __n); }\n+      {\n+\tif (__n == 0)\n+\t  return __s1;\n+\treturn wmemcpy(__s1, __s2, __n);\n+      }\n \n       static char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n-      { return wmemset(__s, __a, __n); }\n+      {\n+\tif (__n == 0)\n+\t  return __s;\n+\treturn wmemset(__s, __a, __n);\n+      }\n \n       static _GLIBCXX_CONSTEXPR char_type\n       to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT\n@@ -436,13 +476,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return __s1;\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));\n       }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return __s1;\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));\n       }\n@@ -529,13 +573,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return __s1;\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));\n       }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       { \n+\tif (__n == 0)\n+\t  return __s1;\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));\n       }"}, {"sha": "38a84c80d5b5ee89089b320d6fa7e195781823ec", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -144,13 +144,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       { \n+\tif (__n == 0)\n+\t  return __s1;\n \treturn static_cast<char_type*>\n \t  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type)));\n       }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n+\tif (__n == 0)\n+\t  return __s1;\n \tstd::copy(__s2, __s2 + __n, __s1);\n \treturn __s1;\n       }"}, {"sha": "1aa00ddc1fcb36467452e0af4dd5f55a1fd3fa2a", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char/65049.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F65049.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F65049.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar%2F65049.cc?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// libstdc++/65049\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = char;\n+\n+void\n+test01()\n+{\n+  const C* p = 0;\n+  C* q = 0;\n+  auto c = std::char_traits<C>::compare(p, q, 0);\n+  VERIFY( c == 0 );\n+  auto r = std::char_traits<C>::find(p, 0, '0');\n+  VERIFY( r == nullptr );\n+  r = std::char_traits<C>::move(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::copy(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::assign(q, 0, '0');\n+  VERIFY( r == q );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "7af6db3ff42f579bb835e5d3abf15dc7874f6fbb", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char16_t/65049.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar16_t%2F65049.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar16_t%2F65049.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar16_t%2F65049.cc?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// libstdc++/65049\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = char16_t;\n+\n+void\n+test01()\n+{\n+  const C* p = 0;\n+  C* q = 0;\n+  auto c = std::char_traits<C>::compare(p, q, 0);\n+  VERIFY( c == 0 );\n+  auto r = std::char_traits<C>::find(p, 0, '0');\n+  VERIFY( r == nullptr );\n+  r = std::char_traits<C>::move(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::copy(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::assign(q, 0, '0');\n+  VERIFY( r == q );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "a7730ec2582b33a9d749524e1b83fe3caa4101ea", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char32_t/65049.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar32_t%2F65049.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar32_t%2F65049.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar32_t%2F65049.cc?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// libstdc++/65049\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = char32_t;\n+\n+void\n+test01()\n+{\n+  const C* p = 0;\n+  C* q = 0;\n+  auto c = std::char_traits<C>::compare(p, q, 0);\n+  VERIFY( c == 0 );\n+  auto r = std::char_traits<C>::find(p, 0, '0');\n+  VERIFY( r == nullptr );\n+  r = std::char_traits<C>::move(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::copy(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::assign(q, 0, '0');\n+  VERIFY( r == q );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "22dfdf03513de152488934428d05ffe7e32eb0e6", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/wchar_t/65049.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F65049.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a88769c966c56816200b2ca128f7e66ce35862f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F65049.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fwchar_t%2F65049.cc?ref=4a88769c966c56816200b2ca128f7e66ce35862f", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// libstdc++/65049\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = wchar_t;\n+\n+void\n+test01()\n+{\n+  const C* p = 0;\n+  C* q = 0;\n+  auto c = std::char_traits<C>::compare(p, q, 0);\n+  VERIFY( c == 0 );\n+  auto r = std::char_traits<C>::find(p, 0, '0');\n+  VERIFY( r == nullptr );\n+  r = std::char_traits<C>::move(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::copy(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::assign(q, 0, '0');\n+  VERIFY( r == q );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}