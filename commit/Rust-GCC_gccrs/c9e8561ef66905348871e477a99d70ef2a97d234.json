{"sha": "c9e8561ef66905348871e477a99d70ef2a97d234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzllODU2MWVmNjY5MDUzNDg4NzFlNDc3YTk5ZDcwZWYyYTk3ZDIzNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-11T13:50:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-11T13:50:27Z"}, "message": "re PR c++/63139 (Class-scope typedef overwrites typedef of previously defined class)\n\n\tPR c++/63139\n\t* pt.c (tsubst_pack_expansion): Simplify substitution into T....\n\t(tsubst): Don't throw away PACK_EXPANSION_EXTRA_ARGS.\n\nFrom-SVN: r215171", "tree": {"sha": "a8ff0e0f673ab2dad9f082d285612678aafaedb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8ff0e0f673ab2dad9f082d285612678aafaedb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9e8561ef66905348871e477a99d70ef2a97d234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e8561ef66905348871e477a99d70ef2a97d234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e8561ef66905348871e477a99d70ef2a97d234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e8561ef66905348871e477a99d70ef2a97d234/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89632536fc913518954ea0c4b6d749d898c6a543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89632536fc913518954ea0c4b6d749d898c6a543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89632536fc913518954ea0c4b6d749d898c6a543"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "7ebc56b634295ce76ce96a0f1a8bab3ca1668af7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e8561ef66905348871e477a99d70ef2a97d234/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e8561ef66905348871e477a99d70ef2a97d234/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c9e8561ef66905348871e477a99d70ef2a97d234", "patch": "@@ -1,3 +1,9 @@\n+2014-09-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63139\n+\t* pt.c (tsubst_pack_expansion): Simplify substitution into T....\n+\t(tsubst): Don't throw away PACK_EXPANSION_EXTRA_ARGS.\n+\n 2014-09-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/61659"}, {"sha": "7f7ab93089034bd01a2b464710364d46c0777712", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e8561ef66905348871e477a99d70ef2a97d234/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e8561ef66905348871e477a99d70ef2a97d234/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c9e8561ef66905348871e477a99d70ef2a97d234", "patch": "@@ -9913,6 +9913,11 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t}\n     }\n \n+  /* If the expansion is just T..., return the matching argument pack.  */\n+  if (!unsubstituted_packs\n+      && TREE_PURPOSE (packs) == pattern)\n+    return ARGUMENT_PACK_ARGS (TREE_VALUE (packs));\n+\n   /* We cannot expand this expansion expression, because we don't have\n      all of the argument packs we need.  */\n   if (use_pack_expansion_extra_args_p (packs, len, unsubstituted_packs))\n@@ -11831,7 +11836,11 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t   gen_elem_of_pack_expansion_instantiation will\n \t\t   build the resulting pack expansion from it.  */\n \t\tif (PACK_EXPANSION_P (arg))\n-\t\t  arg = PACK_EXPANSION_PATTERN (arg);\n+\t\t  {\n+\t\t    /* Make sure we aren't throwing away arg info.  */\n+\t\t    gcc_assert (!PACK_EXPANSION_EXTRA_ARGS (arg));\n+\t\t    arg = PACK_EXPANSION_PATTERN (arg);\n+\t\t  }\n \t      }\n \t  }\n "}, {"sha": "ac6eaf6a36a52e46786bbd5b1616760e7565a175", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic161.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9e8561ef66905348871e477a99d70ef2a97d234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic161.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9e8561ef66905348871e477a99d70ef2a97d234/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic161.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic161.C?ref=c9e8561ef66905348871e477a99d70ef2a97d234", "patch": "@@ -0,0 +1,51 @@\n+// PR c++/63139\n+// { dg-do compile { target c++11 } }\n+\n+template<typename ...T>\n+struct type_list {};\n+\n+template<typename ...T>\n+struct make_type_list\n+{\n+    using type = type_list<T...>;\n+};\n+\n+// The bug disappears if you use make_type_list directly.\n+template<typename ...T>\n+using make_type_list_t = typename make_type_list<T...>::type;\n+\n+\n+struct ContainerEndA {};\n+\n+template<typename ...Ts>\n+struct ContainerA\n+{\n+    using type = make_type_list_t<Ts..., ContainerEndA>;\n+};\n+\n+\n+struct ContainerEndB {};\n+\n+template<typename ...Ts>\n+struct ContainerB\n+{\n+    using type = make_type_list_t<Ts..., ContainerEndB>;\n+};\n+\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T>\n+{\n+  static const bool value = true;\n+};\n+\n+#define SA(X) static_assert((X), #X)\n+\n+SA((is_same<ContainerB<>::type, type_list<ContainerEndB>>::value));\n+SA((!is_same<ContainerA<>::type, type_list<ContainerEndB>>::value));\n+SA((!is_same<ContainerA<>::type, ContainerB<>::type>::value));"}]}