{"sha": "77d3109be28c227a324991307b0e2e46774b011c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdkMzEwOWJlMjhjMjI3YTMyNDk5MTMwN2IwZTJlNDY3NzRiMDExYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-10T03:04:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-10T03:04:41Z"}, "message": "* class.c, gjavah.c, parse.y, verify.c: Don't use PTR.\n\nFrom-SVN: r61137", "tree": {"sha": "e064acf94ef904267708e251567092ae16d89098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e064acf94ef904267708e251567092ae16d89098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77d3109be28c227a324991307b0e2e46774b011c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d3109be28c227a324991307b0e2e46774b011c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d3109be28c227a324991307b0e2e46774b011c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d3109be28c227a324991307b0e2e46774b011c/comments", "author": null, "committer": null, "parents": [{"sha": "17211ab55314d76370a68036f2d057b1effd687f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17211ab55314d76370a68036f2d057b1effd687f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17211ab55314d76370a68036f2d057b1effd687f"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "4cf5631f697a073033ba2de19d8aaf7e9565aa89", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=77d3109be28c227a324991307b0e2e46774b011c", "patch": "@@ -1,3 +1,7 @@\n+2003-01-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c, gjavah.c, parse.y, verify.c: Don't use PTR.\n+\n 2003-01-09  Geoffrey Keating  <geoffk@apple.com>\n \n \tMerge from pch-branch:"}, {"sha": "c1d88574e935c22b898bc2b46d457d6a3d1f10bc", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=77d3109be28c227a324991307b0e2e46774b011c", "patch": "@@ -2314,7 +2314,7 @@ java_treetreehash_new (ht, t)\n      htab_t ht;\n      tree t;\n {\n-  PTR *e;\n+  void **e;\n   struct treetreehash_entry *tthe;\n   hashval_t hv = JAVA_TREEHASHHASH_H (t);\n \n@@ -2323,7 +2323,7 @@ java_treetreehash_new (ht, t)\n     {\n       tthe = (*ht->alloc_f) (1, sizeof (*tthe));\n       tthe->key = t;\n-      *e = (PTR) tthe;\n+      *e = tthe;\n     }\n   else\n     tthe = (struct treetreehash_entry *) *e;"}, {"sha": "c800e12ca85526b2974d7e699190df295bff1d34", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=77d3109be28c227a324991307b0e2e46774b011c", "patch": "@@ -1128,8 +1128,8 @@ throwable_p (clname)\n \n   if (! init_done)\n     {\n-      PTR *slot;\n-      const unsigned char *str;\n+      void **slot;\n+      unsigned char *str;\n \n       /* Self-initializing.  The cost of this really doesn't matter.\n \t We also don't care about freeing these, either.  */\n@@ -1141,11 +1141,11 @@ throwable_p (clname)\n       /* Make sure the root classes show up in the tables.  */\n       str = xstrdup (\"java.lang.Throwable\");\n       slot = htab_find_slot (throw_hash, str, INSERT);\n-      *slot = (PTR) str;\n+      *slot = str;\n \n       str = xstrdup (\"java.lang.Object\");\n       slot = htab_find_slot (non_throw_hash, str, INSERT);\n-      *slot = (PTR) str;\n+      *slot = str;\n \n       init_done = 1;\n     }\n@@ -1167,7 +1167,7 @@ throwable_p (clname)\n   else\n     {\n       JCF jcf;\n-      PTR *slot;\n+      void **slot;\n       unsigned char *super, *tmp;\n       int super_length = -1;\n       const char *classfile_name = find_class (current, strlen (current),"}, {"sha": "65a114721191981cccc53cb209adf2f4496654cb", "filename": "gcc/java/parse.y", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=77d3109be28c227a324991307b0e2e46774b011c", "patch": "@@ -326,8 +326,8 @@ static tree build_dot_class_method_invocation (tree);\n static void create_new_parser_context (int);\n static tree maybe_build_class_init_for_field (tree, tree);\n \n-static int attach_init_test_initialization_flags (PTR *, PTR);\n-static int emit_test_initialization (PTR *, PTR);\n+static int attach_init_test_initialization_flags (void **, void *);\n+static int emit_test_initialization (void **, void *);\n \n static char *string_convert_int_cst (tree);\n \n@@ -2663,11 +2663,11 @@ create_new_parser_context (copy_from_previous)\n   new =  (struct parser_ctxt *) ggc_alloc (sizeof (struct parser_ctxt));\n   if (copy_from_previous)\n     {\n-      memcpy ((PTR)new, (PTR)ctxp, sizeof (struct parser_ctxt));\n+      memcpy (new, ctxp, sizeof (struct parser_ctxt));\n       new->saved_data_ctx = 1;\n     }\n   else\n-    memset ((PTR) new, 0, sizeof (struct parser_ctxt));\n+    memset (new, 0, sizeof (struct parser_ctxt));\n \n   new->next = ctxp;\n   ctxp = new;\n@@ -7035,7 +7035,7 @@ register_package (name)\n      tree name;\n {\n   static htab_t pht;\n-  PTR *e;\n+  void **e;\n \n   if (pht == NULL)\n     pht = htab_create (50, htab_hash_pointer, htab_eq_pointer, NULL);\n@@ -16191,8 +16191,8 @@ init_src_parse ()\n \n static int\n attach_init_test_initialization_flags (entry, ptr)\n-     PTR *entry;\n-     PTR ptr;\n+     void **entry;\n+     void *ptr;\n {\n   tree block = (tree)ptr;\n   struct treetreehash_entry *ite = (struct treetreehash_entry *) *entry;\n@@ -16213,8 +16213,8 @@ attach_init_test_initialization_flags (entry, ptr)\n \n static int\n emit_test_initialization (entry_p, info)\n-     PTR *entry_p;\n-     PTR info;\n+     void **entry_p;\n+     void *info;\n {\n   tree l = (tree) info;\n   tree decl, init;"}, {"sha": "cf502b5ba660d90e09d753fbe3445d4c3a3ee2d8", "filename": "gcc/java/verify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77d3109be28c227a324991307b0e2e46774b011c/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=77d3109be28c227a324991307b0e2e46774b011c", "patch": "@@ -40,7 +40,7 @@ static void push_pending_label (tree);\n static tree merge_types (tree, tree);\n static const char *check_pending_block (tree);\n static void type_stack_dup (int, int);\n-static int start_pc_cmp (const PTR, const PTR);\n+static int start_pc_cmp (const void *, const void *);\n static char *pop_argument_types (tree);\n \n extern int stack_pointer;\n@@ -351,8 +351,8 @@ struct pc_index\n /* A helper that is used when sorting exception ranges.  */\n static int\n start_pc_cmp (xp, yp)\n-     const PTR xp;\n-     const PTR yp;\n+     const void *xp;\n+     const void *yp;\n {\n   const struct pc_index *x = (const struct pc_index *) xp;\n   const struct pc_index *y = (const struct pc_index *) yp;"}]}