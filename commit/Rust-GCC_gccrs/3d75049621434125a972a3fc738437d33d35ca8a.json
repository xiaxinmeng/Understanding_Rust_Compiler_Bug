{"sha": "3d75049621434125a972a3fc738437d33d35ca8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3NTA0OTYyMTQzNDEyNWE5NzJhM2ZjNzM4NDM3ZDMzZDM1Y2E4YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-01-24T20:51:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-01-24T20:51:22Z"}, "message": "re PR tree-optimization/59919 (ICE in process_assert_insertions_for, at tree-vrp.c:6096)\n\n\tPR tree-optimization/59919\n\t* tree-vrp.c (find_assert_locations_1): Do not register asserts\n\tfor non-returning calls.\n\n\tPR tree-optimization/59919\n\t* gcc.c-torture/compile/pr59919.c: New test.\n\nFrom-SVN: r207061", "tree": {"sha": "8b1664fb93585f97779d04af6d25654ac1f830b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b1664fb93585f97779d04af6d25654ac1f830b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d75049621434125a972a3fc738437d33d35ca8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d75049621434125a972a3fc738437d33d35ca8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d75049621434125a972a3fc738437d33d35ca8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d75049621434125a972a3fc738437d33d35ca8a/comments", "author": null, "committer": null, "parents": [{"sha": "bb393514d5be4d683a72fa4bfda938943368505a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb393514d5be4d683a72fa4bfda938943368505a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb393514d5be4d683a72fa4bfda938943368505a"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "f49d6bb95ecfdfbfc88a4ae51996af527679e81d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d75049621434125a972a3fc738437d33d35ca8a", "patch": "@@ -1,3 +1,9 @@\n+2014-01-24  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59919\n+\t* tree-vrp.c (find_assert_locations_1): Do not register asserts\n+\tfor non-returning calls.\n+\n 2014-01-24  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* common/config/aarch64/aarch64-common.c"}, {"sha": "8a44033f7de9df9372e2905d989e2a70f344b9fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d75049621434125a972a3fc738437d33d35ca8a", "patch": "@@ -1,3 +1,8 @@\n+2014-01-24  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/59919\n+\t* gcc.c-torture/compile/pr59919.c: New test.\n+\n 2014-01-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57524"}, {"sha": "6809caaf9f3adee9d1c8525214b4e7155cb6b631", "filename": "gcc/testsuite/gcc.c-torture/compile/pr59919.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59919.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59919.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr59919.c?ref=3d75049621434125a972a3fc738437d33d35ca8a", "patch": "@@ -0,0 +1,18 @@\n+typedef int jmp_buf[10];\n+struct S\n+{\n+  int i;\n+  jmp_buf buf;\n+};\n+\n+void setjmp (jmp_buf);\n+void foo (int *);\n+__attribute__ ((__noreturn__, __nonnull__)) void bar (struct S *);\n+\n+void\n+baz (struct S *p)\n+{\n+  bar (p);\n+  setjmp (p->buf);\n+  foo (&p->i);\n+}"}, {"sha": "7aa732ddbb990d8ec36d9098be489a9503d499c7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d75049621434125a972a3fc738437d33d35ca8a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3d75049621434125a972a3fc738437d33d35ca8a", "patch": "@@ -4534,12 +4534,21 @@ infer_value_range (gimple stmt, tree op, enum tree_code *comp_code_p, tree *val_\n   if (stmt_could_throw_p (stmt))\n     return false;\n \n-  /* If STMT is the last statement of a basic block with no\n+  /* If STMT is the last statement of a basic block with no normal\n      successors, there is no point inferring anything about any of its\n      operands.  We would not be able to find a proper insertion point\n      for the assertion, anyway.  */\n-  if (stmt_ends_bb_p (stmt) && EDGE_COUNT (gimple_bb (stmt)->succs) == 0)\n-    return false;\n+  if (stmt_ends_bb_p (stmt))\n+    {\n+      edge_iterator ei;\n+      edge e;\n+\n+      FOR_EACH_EDGE (e, ei, gimple_bb (stmt)->succs)\n+\tif (!(e->flags & EDGE_ABNORMAL))\n+\t  break;\n+      if (e == NULL)\n+\treturn false;\n+    }\n \n   if (infer_nonnull_range (stmt, op, true, true))\n     {"}]}