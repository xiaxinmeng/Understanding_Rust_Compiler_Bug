{"sha": "70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhMzkwYmJiNjcwYzM1OGUxZjkzM2VmOGU3NWEzYTNkN2NhOGZhNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-04-26T16:35:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-04-26T16:35:31Z"}, "message": "re PR tree-optimization/17598 (an extra addition when comparing address of &a->b and &c->b.)\n\n2004-04-26  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\tPR tree-optimization/17598\n\t* fold-const.c (fold_binary): Fold comparisons of addresses\n\tof COMPONENT_REFs which reference the same field to\n\tcomparisons of the addresses of the base objects.\n\n\t* gcc.dg/tree-ssa/pr17598.c: New testcase.\n\nFrom-SVN: r98775", "tree": {"sha": "75a85c6c78844dca9ea04acfe5326683bc8d8c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a85c6c78844dca9ea04acfe5326683bc8d8c99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/comments", "author": null, "committer": null, "parents": [{"sha": "866af8a90915d8ed191ab7af616b3a186c28cae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866af8a90915d8ed191ab7af616b3a186c28cae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866af8a90915d8ed191ab7af616b3a186c28cae4"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "2d57e1f2e811a922a181ca7be93e8d0432bc0f6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "patch": "@@ -1,3 +1,10 @@\n+2004-04-26  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR tree-optimization/17598\n+\t* fold-const.c (fold_binary): Fold comparisons of addresses\n+\tof COMPONENT_REFs which reference the same field to\n+\tcomparisons of the addresses of the base objects.\n+\n 2005-04-26  Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/arm.c (arm_return_in_msb): New function."}, {"sha": "9de988c2300b693696049a642b1b48039a40b121", "filename": "gcc/fold-const.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "patch": "@@ -9708,6 +9708,39 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    return t1;\n \t}\n \n+      /* Fold a comparison of the address of COMPONENT_REFs with the same\n+         type and component to a comparison of the address of the base\n+\t object.  In short, &x->a OP &y->a to x OP y and\n+         &x->a OP &y.a to x OP &y  */\n+      if (TREE_CODE (arg0) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == COMPONENT_REF\n+\t  && TREE_CODE (arg1) == ADDR_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == COMPONENT_REF)\n+        {\n+\t  tree cref0 = TREE_OPERAND (arg0, 0);\n+\t  tree cref1 = TREE_OPERAND (arg1, 0);\n+\t  if (TREE_OPERAND (cref0, 1) == TREE_OPERAND (cref1, 1))\n+\t    {\n+\t      tree op0 = TREE_OPERAND (cref0, 0);\n+\t      tree op1 = TREE_OPERAND (cref1, 0);\n+\t      if (TREE_CODE (op0) == INDIRECT_REF)\n+\t\top0 = TREE_OPERAND (op0, 0);\n+\t      else\n+\t        {\n+\t          tree ptype = build_pointer_type (TREE_TYPE (op0));\n+\t          op0 = build1 (ADDR_EXPR, ptype, op0);\n+\t\t}\n+\t      if (TREE_CODE (op1) == INDIRECT_REF)\n+\t\top1 = TREE_OPERAND (op1, 0);\n+\t      else\n+\t        {\n+\t          tree ptype = build_pointer_type (TREE_TYPE (op1));\n+\t\t  op1 = build1 (ADDR_EXPR, ptype, op1);\n+\t\t}\n+\t      return fold_build2 (code, type, op0, op1);\n+\t    }\n+\t}\n+\n       /* If this is a comparison of complex values and either or both sides\n \t are a COMPLEX_EXPR or COMPLEX_CST, it is best to split up the\n \t comparisons and join them with a TRUTH_ANDIF_EXPR or TRUTH_ORIF_EXPR."}, {"sha": "17d95422d83c6b3faff8e1477d8c67cd1fcaf7ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "patch": "@@ -1,3 +1,8 @@\n+2004-04-26  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR tree-optimization/17598\n+\t* gcc.dg/tree-ssa/pr17598.c: New testcase.\n+\n 2005-04-25  Mike Stump  <mrs@apple.com>\n \n \t* objc.dg/fix-and-continue-1.m: Add."}, {"sha": "9313623f8883433458c16f0965730615f504db48", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr17598.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17598.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17598.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17598.c?ref=70a390bbb670c358e1f933ef8e75a3a3d7ca8fa5", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-generic\" } */\n+\n+struct f\n+{\n+  int i;\n+  int j;\n+};\n+\n+struct g\n+{\n+  int i;\n+  struct f j;\n+  struct f *k;\n+};\n+\n+int foo(struct f *x, struct f *y)\n+{\n+  return &x->j == &y->j; /* x == y */\n+}\n+\n+struct f y;\n+int bar(struct f *x)\n+{\n+  return &x->j == &y.j; /* x == &y */\n+}\n+\n+struct g yy;\n+int foobar(struct g *x)\n+{\n+  return &x->j.i == &yy.j.i; /* x == &yy */\n+}\n+int foobar2(struct g *x)\n+{\n+  return &x->k->i == &yy.k->i; /* x->k == yy.k */\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"x == y\" 1 \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"x == &y\" 2 \"generic\" } } */\n+/* { dg-final { scan-tree-dump \"x->k\" \"generic\" } } */\n+/* { dg-final { scan-tree-dump \"yy.k\" \"generic\" } } */\n+/* { dg-final { cleanup-tree-dump \"generic\" } } */"}]}