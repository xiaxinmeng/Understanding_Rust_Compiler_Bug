{"sha": "8f454e9f8a19248cbbe33c039934494d67c1feaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0NTRlOWY4YTE5MjQ4Y2JiZTMzYzAzOTkzNDQ5NGQ2N2MxZmVhYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-24T10:58:28Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-24T10:58:28Z"}, "message": "[AArch64] Optimize epilogue in the presence of an outgoing args area.\n\nFrom-SVN: r212976", "tree": {"sha": "e63f97d5d8d7c00ad8267827ed6c77d52fe38dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63f97d5d8d7c00ad8267827ed6c77d52fe38dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f454e9f8a19248cbbe33c039934494d67c1feaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f454e9f8a19248cbbe33c039934494d67c1feaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f454e9f8a19248cbbe33c039934494d67c1feaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f454e9f8a19248cbbe33c039934494d67c1feaa/comments", "author": null, "committer": null, "parents": [{"sha": "8ae9698d085b4607da89b9fe193806cc15794510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae9698d085b4607da89b9fe193806cc15794510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae9698d085b4607da89b9fe193806cc15794510"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "b17476401d1604ea22fe01320e61810d2cc8b30f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f454e9f8a19248cbbe33c039934494d67c1feaa", "patch": "@@ -1,3 +1,8 @@\n+2014-07-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_epilogue): Don't\n+\tsubtract outgoing area size when restoring stack_pointer_rtx.\n+\n 2014-07-24  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.md (stack_push): Adjust RTL to account for the fact"}, {"sha": "345705185e0ce14db5687840bf9a0b7c79845e61", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8f454e9f8a19248cbbe33c039934494d67c1feaa", "patch": "@@ -2363,35 +2363,25 @@ aarch64_expand_epilogue (bool for_sibcall)\n     {\n       insn = emit_insn (gen_add3_insn (stack_pointer_rtx,\n \t\t\t\t       hard_frame_pointer_rtx,\n-\t\t\t\t       GEN_INT (- fp_offset)));\n+\t\t\t\t       GEN_INT (0)));\n+      offset = offset - fp_offset;\n       RTX_FRAME_RELATED_P (insn) = 1;\n       /* As SP is set to (FP - fp_offset), according to the rules in\n \t dwarf2cfi.c:dwarf2out_frame_debug_expr, CFA should be calculated\n \t from the value of SP from now on.  */\n       cfa_reg = stack_pointer_rtx;\n     }\n \n-  aarch64_restore_callee_saves (DFmode, fp_offset, V0_REGNUM, V31_REGNUM);\n+  aarch64_restore_callee_saves (DFmode, frame_pointer_needed ? 0 : fp_offset,\n+\t\t\t\tV0_REGNUM, V31_REGNUM);\n \n   if (offset > 0)\n     {\n       if (frame_pointer_needed)\n \t{\n-\t  if (fp_offset)\n-\t    {\n-\t      aarch64_restore_callee_saves (DImode, fp_offset, R0_REGNUM,\n-\t\t\t\t\t    R30_REGNUM);\n-\t      insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n-\t\t\t\t\t       GEN_INT (offset)));\n-\t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t    }\n-\t  else\n-\t    {\n-\t      aarch64_restore_callee_saves (DImode, fp_offset, R0_REGNUM,\n-\t\t\t\t\t    R28_REGNUM);\n-\t      aarch64_popwb_pair_reg (DImode, R29_REGNUM, R30_REGNUM, offset,\n-\t\t\t\t      cfa_reg);\n-\t    }\n+\t  aarch64_restore_callee_saves (DImode, 0, R0_REGNUM, R28_REGNUM);\n+\t  aarch64_popwb_pair_reg (DImode, R29_REGNUM, R30_REGNUM, offset,\n+\t\t\t\t  cfa_reg);\n \t}\n       else\n \t{"}, {"sha": "2067bee777727defafcd1aaefcfbcedbd58a1188", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f454e9f8a19248cbbe33c039934494d67c1feaa", "patch": "@@ -1,3 +1,8 @@\n+2014-07-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/test_frame_12.c: Match optimized instruction\n+\tsequences.\n+\n 2014-07-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/57653"}, {"sha": "81f00706175e93e4a71658fb48a1a5c409eb5e1d", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_12.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f454e9f8a19248cbbe33c039934494d67c1feaa/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c?ref=8f454e9f8a19248cbbe33c039934494d67c1feaa", "patch": "@@ -12,4 +12,8 @@ t_frame_pattern_outgoing (test12, 400, , 8, a[8])\n t_frame_run (test12)\n \n /* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n+\n+/* Check epilogue using write-back.  */\n+/* { dg-final { scan-assembler-times \"ldp\\tx29, x30, \\\\\\[sp\\\\\\], \\[0-9\\]+\" 3 } } */\n+\n /* { dg-final { cleanup-saved-temps } } */"}]}