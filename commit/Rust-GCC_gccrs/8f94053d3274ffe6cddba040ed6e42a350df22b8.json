{"sha": "8f94053d3274ffe6cddba040ed6e42a350df22b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5NDA1M2QzMjc0ZmZlNmNkZGJhMDQwZWQ2ZTQyYTM1MGRmMjJiOA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-02-08T07:34:54Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-02-08T07:34:54Z"}, "message": "TODO: Update.\n\n2002-02-08  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/doxygen/TODO:  Update.\n\t* docs/doxygen/doxygroups.cc:  Tweak __gnu_cxx description.\n\t* docs/doxygen/mainpage.html:  Add TODO list link.\n\t* docs/doxygen/user.cfg.in:  Add @doctodo hook.\n\t* docs/doxygen/tables.html:  New file, emoty structure only.\n\n\t* include/bits/stl_iterator.h:  Doxygenate just about everything.\n\t* include/bits/stl_iterator_base_funcs.h:  Ditto, clean up spaces.\n\t* include/bits/stl_iterator_base_types.h:  Add notes.\n\nFrom-SVN: r49608", "tree": {"sha": "28abb2350209948faa6f676b8b229b1cddbe83b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28abb2350209948faa6f676b8b229b1cddbe83b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f94053d3274ffe6cddba040ed6e42a350df22b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f94053d3274ffe6cddba040ed6e42a350df22b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f94053d3274ffe6cddba040ed6e42a350df22b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f94053d3274ffe6cddba040ed6e42a350df22b8/comments", "author": null, "committer": null, "parents": [{"sha": "6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07"}], "stats": {"total": 714, "additions": 629, "deletions": 85}, "files": [{"sha": "4786fce2d429aa6afe49d3c9d1e2d51611a736ff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -1,3 +1,15 @@\n+2002-02-08  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/doxygen/TODO:  Update.\n+\t* docs/doxygen/doxygroups.cc:  Tweak __gnu_cxx description.\n+\t* docs/doxygen/mainpage.html:  Add TODO list link.\n+\t* docs/doxygen/user.cfg.in:  Add @doctodo hook.\n+\t* docs/doxygen/tables.html:  New file, emoty structure only.\n+\n+\t* include/bits/stl_iterator.h:  Doxygenate just about everything.\n+\t* include/bits/stl_iterator_base_funcs.h:  Ditto, clean up spaces.\n+\t* include/bits/stl_iterator_base_types.h:  Add notes.\n+\n 2002-02-07  Stephan Buys  <sbproxy@icon.co.za>\n \n \t* include/bits/stl_map.h:  Tweak doxygen markup."}, {"sha": "375cd5fc785bac947fc0df34bc04b9b7dcdf3f69", "filename": "libstdc++-v3/docs/doxygen/TODO", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FTODO?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -7,6 +7,13 @@ documented in the course of doing other headers.\n \"Untouched\" means I've deliberately skipped it for various reasons, or\n haven't gotten to it yet.  It /will/ be done (by somebody, eventually.)\n \n+If you document an area and need to skip (for whatever reason) a non-trivial\n+entity (i.e., one that should be documented), go ahead and add the comment\n+markup, and use the homegrown @doctodo tag.  See include/bits/stl_iterator.h\n+for examples of this.  Doing so will at least cause doxygen to consider the\n+entitiy as documented and include it in the output.  It will also add the\n+entity to the generated TODO page.\n+\n \n  Area           Still needs to be doxygen-documented\n -----------------------------------------------------------\n@@ -18,7 +25,8 @@ c20             Note A\n c21             Untouched, Note B\n c22             Untouched\n c23             See doxygroups.cc and Note B.\n-c24             Untouched\n+c24             stl_iterator.h (__normal_iterator, other small TODO bits)\n+                stream iterators\n c25             stl_algo.h (lots of stuff)\n c26             <complex>, <valarray>, stl_numeric.h[26.4], Note A\n c27             Untouched\n@@ -40,8 +48,7 @@ do not have the C code (to which the doxygen comments would be attached),\n this would need to be done in entirely separate files, a la doxygroups.cc.\n \n B)  Huge chunks of containers and strings are described in common \"Tables\"\n-in the standard.  How to reproduce this information?  I suspect we should\n-simply write some HTML tables (say, one <table> per Table per file), and\n+in the standard.  These are being pseudo-duplicated in tables.html.  We can\n use doxygen hooks like @pre and @see to reference the tables.  Then the\n individual classes would do like the standard does, and only document\n members for which additional info is available."}, {"sha": "8af04b1ea54087194e52a679c9d244038d24d7e1", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -13,14 +13,17 @@\n  *  @brief Everything defined by the ISO C++ Standard is within namespace std.\n */\n /** @namespace __gnu_cxx\n- *  @brief Non-standard things.\n+ *  @brief This namespace serves two purposes.\n  *\n- *  This namespace is used for\n+ *  This namespace is used for two things:\n  *  -  sequestering internal (implementation-only) names away from the\n- *     global namespace\n- *  -  GNU extensions\n+ *     global namespace; these are details of the implementation and should\n+ *     not be touched by users\n+ *  -  GNU extensions for public use\n  *\n- *  This is still fluid and changing rapidly.\n+ *  This is still fluid and changing rapidly.  Currently the rule is:  if an\n+ *  entitity is found in the user-level documentation, it falls into the\n+ *  second category.\n */\n \n // // // // // // // // // // // // // // // // // // // // // // // //"}, {"sha": "88ea279331fa6575d7bd62d24fcb9f3230b7abea", "filename": "libstdc++-v3/docs/doxygen/mainpage.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.html?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -25,7 +25,7 @@ <h1>libstdc++-v3 Source Documentation</h1>\n \n <h2> Documentation Overview </h2>\n \n-<p class=\"smallertext\">Generated 2002-02-04.</p>\n+<p class=\"smallertext\">Generated 2002-02-08.</p>\n \n <p>There are two types of documentation for libstdc++-v3.  One is the\n    distribution documentation, which can be read online at\n@@ -97,6 +97,7 @@ <h2> Full page index </h2>\n     <li><a href=\"namespacemembers.html\">Namespace Members</a>\n     <li><a href=\"functions.html\">Compound Members</a>\n     <li><a href=\"globals.html\">File Members</a>\n+    <li><a href=\"todo.html\">TODO List</a> (This is incomplete... how ironic.)\n    </ul>\n </p>\n "}, {"sha": "d38e461c537db28f37a05c80d9aa8da114dcf24d", "filename": "libstdc++-v3/docs/doxygen/tables.html", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -0,0 +1,260 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n+<html>\n+<head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">\n+<title>Tables</title>\n+<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\n+</head>\n+\n+<body bgcolor=\"#ffffff\">\n+<!--\n+     Tables can be jumped to with their number, e.g., \"tables.html#67\".\n+-->\n+\n+<h1>Tables</h1>\n+\n+<p>Most of the requirements on containers are presented in the ISO standard\n+   in the form of tables.  In order to avoid massive duplication of effort,\n+   we follow the standard's lead and present the information here.\n+   Individual classes will only document their departures from these tables\n+   (removed functions, additional functions, changes, etc).\n+</p>\n+\n+<p>The numbers are the same as those used in the standard.\n+</p>\n+\n+<hr />\n+\n+<a name=\"65\"><p>\n+<table cellpadding=\"3\" cellspacing=\"5\" align=\"center\" rules=\"rows\" border=\"3\"\n+       cols=\"3\" title=\"Table 65\">\n+<caption><h2>Table 65 --- Container Requirements</h2></caption>\n+<tr><th colspan=\"4\">\n+Anything calling itself a container must meet these minimum requirements.\n+</th></tr>\n+<tr>\n+<td><strong>expression</strong></td>\n+<td><strong>result type</strong></td>\n+<td><strong>notes</strong></td>\n+<td><strong>complexity</strong></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+</table title=\"Table 65\"></p></a>\n+\n+\n+<a name=\"66\"><p>\n+<table cellpadding=\"3\" cellspacing=\"5\" align=\"center\" rules=\"rows\" border=\"3\"\n+       cols=\"3\" title=\"Table 66\">\n+<caption><h2>Table 66 --- Reversible Container Requirements</h2></caption>\n+<tr><th colspan=\"4\">\n+If a container's iterator is bidirectional or random-access, then the\n+container also meets these requirements.\n+Foo, bar, and baz are such containers.\n+</th></tr>\n+<tr>\n+<td><strong>expression</strong></td>\n+<td><strong>result type</strong></td>\n+<td><strong>notes</strong></td>\n+<td><strong>complexity</strong></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+</table title=\"Table 66\"></p></a>\n+\n+\n+<a name=\"67\"><p>\n+<table cellpadding=\"3\" cellspacing=\"5\" align=\"center\" rules=\"rows\" border=\"3\"\n+       cols=\"3\" title=\"Table 67\">\n+<caption><h2>Table 67 --- Sequence Requirements</h2></caption>\n+<tr><th colspan=\"4\">\n+These are in addition to the requirements of <a href=\"#65\">containers</a>.\n+Foo, bar, and baz are such containers.\n+</th></tr>\n+<tr>\n+<td><strong>expression</strong></td>\n+<td><strong>result type</strong></td>\n+<td><strong>notes</strong></td>\n+<td><strong>complexity</strong></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+</table title=\"Table 67\"></p></a>\n+\n+\n+<a name=\"68\"><p>\n+<table cellpadding=\"3\" cellspacing=\"5\" align=\"center\" rules=\"rows\" border=\"3\"\n+       cols=\"3\" title=\"Table 68\">\n+<caption><h2>Table 68 --- Optional Sequence Operations</h2></caption>\n+<tr><th colspan=\"4\">\n+These operations are only included in containers when the operation can be\n+done in constant time.\n+Foo, bar, and baz are such containers.\n+</th></tr>\n+<tr>\n+<td><strong>expression</strong></td>\n+<td><strong>result type</strong></td>\n+<td><strong>notes</strong></td>\n+<td><strong>complexity</strong></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+</table title=\"Table 68\"></p></a>\n+\n+\n+<a name=\"69\"><p>\n+<table cellpadding=\"3\" cellspacing=\"5\" align=\"center\" rules=\"rows\" border=\"3\"\n+       cols=\"3\" title=\"Table 69\">\n+<caption><h2>Table 69 --- Associative Container Requirements</h2></caption>\n+<tr><th colspan=\"4\">\n+These are in addition to the requirements of <a href=\"#65\">containers</a>.\n+</th></tr>\n+<tr>\n+<td><strong>expression</strong></td>\n+<td><strong>result type</strong></td>\n+<td><strong>notes</strong></td>\n+<td><strong>complexity</strong></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+\n+<tr>\n+<td></td>\n+<td></td>\n+<td></td>\n+<td></td>\n+</tr>\n+</table title=\"Table 69\"></p></a>\n+\n+\n+<hr />\n+<p class=\"smallertext\"><em>\n+See <a href=\"mainpage.html\">mainpage.html</a> for copying conditions.\n+</em></p>\n+\n+\n+</body>\n+</html>\n+"}, {"sha": "2a1a4c639f23540b0f5240f4a511ba73be4da258", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -201,7 +201,7 @@ TAB_SIZE               = 4\n # disable (NO) the todo list. This list is created by putting \\todo \n # commands in the documentation.\n \n-GENERATE_TODOLIST      = NO\n+GENERATE_TODOLIST      = YES\n \n # The GENERATE_TESTLIST tag can be used to enable (YES) or \n # disable (NO) the test list. This list is created by putting \\test \n@@ -223,7 +223,8 @@ GENERATE_BUGLIST       = YES\n # You can put \\n's in the value part of an alias to insert newlines.\n \n ALIASES                = \"maint=@if maint\" \\\n-                         \"endmaint=@endif\"\n+                         \"endmaint=@endif\" \\\n+\t\"doctodo=@todo\\nDoc me!  See docs/doxygen/TODO and http://gcc.gnu.org/ml/libstdc++/2002-02/msg00003.html for more.\"\n \n # The ENABLED_SECTIONS tag can be used to enable conditional \n # documentation sections, marked by \\if sectionname ... \\endif."}, {"sha": "b42181f5ba2122d4459ce363cfae87c99fa70ea7", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -56,6 +56,10 @@\n /** @file stl_iterator.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n+ *\n+ *  This file implements reverse_iterator, back_insert_iterator,\n+ *  front_insert_iterator, insert_iterator, __normal_iterator, and their\n+ *  supporting functions and overloaded operators.\n  */\n \n #ifndef __GLIBCPP_INTERNAL_ITERATOR_H\n@@ -64,6 +68,24 @@\n namespace std\n {\n   // 24.4.1 Reverse iterators\n+  /**\n+   *  \"Bidirectional and random access iterators have corresponding reverse\n+   *  %iterator adaptors that iterate through the data structure in the\n+   *  opposite direction.  They have the same signatures as the corresponding\n+   *  iterators.  The fundamental relation between a reverse %iterator and its\n+   *  corresponding %iterator @c i is established by the identity:\n+   *  @code\n+   *      &*(reverse_iterator(i)) == &*(i - 1)\n+   *  @endcode\n+   *\n+   *  This mapping is dictated by the fact that while there is always a\n+   *  pointer past the end of an array, there might not be a valid pointer\n+   *  before the beginning of an array.\" [24.4.1]/1,2\n+   *\n+   *  Reverse iterators can be tricky and surprising at first.  Their\n+   *  semantics make sense, however, and the trickiness is a side effect of\n+   *  the requirement that the iterators must be safe.\n+  */\n   template<typename _Iterator>\n     class reverse_iterator \n     : public iterator<typename iterator_traits<_Iterator>::iterator_category,\n@@ -83,38 +105,74 @@ namespace std\n       typedef typename iterator_traits<_Iterator>::pointer     pointer;\n \n     public:\n+      /**\n+       *  The default constructor gives an undefined state to this %iterator.\n+      */\n       reverse_iterator() { }\n \n+      /**\n+       *  This %iterator will move in the opposite direction that @p x does.\n+      */\n       explicit \n       reverse_iterator(iterator_type __x) : current(__x) { }\n \n+      /**\n+       *  The copy constructor is normal.\n+      */\n       reverse_iterator(const reverse_iterator& __x) \n       : current(__x.current) { }\n \n+      /**\n+       *  A reverse_iterator across other types can be copied in the normal\n+       *  fashion.\n+      */\n       template<typename _Iter>\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n \t: current(__x.base()) { }\n     \n+      /**\n+       *  @return  @c current, the %iterator used for underlying work.\n+      */\n       iterator_type \n       base() const { return current; }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reference \n       operator*() const \n       {\n \t_Iterator __tmp = current;\n \treturn *--__tmp;\n       }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       pointer \n       operator->() const { return &(operator*()); }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator& \n       operator++() \n       {\n \t--current;\n \treturn *this;\n       }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator \n       operator++(int) \n       {\n@@ -123,46 +181,91 @@ namespace std\n \treturn __tmp;\n       }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator& \n       operator--() \n       {\n \t++current;\n \treturn *this;\n       }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator operator--(int) \n       {\n \treverse_iterator __tmp = *this;\n \t++current;\n \treturn __tmp;\n       }\n       \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator \n       operator+(difference_type __n) const \n       { return reverse_iterator(current - __n); }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator& \n       operator+=(difference_type __n) \n       {\n \tcurrent -= __n;\n \treturn *this;\n       }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator \n       operator-(difference_type __n) const \n       { return reverse_iterator(current + __n); }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reverse_iterator& \n       operator-=(difference_type __n) \n       {\n \tcurrent += __n;\n \treturn *this;\n       }\n \n+      /**\n+       *  @return  TODO\n+       *\n+       *  @doctodo\n+      */\n       reference \n       operator[](difference_type __n) const { return *(*this + __n); }  \n     }; \n  \n+  //@{\n+  /**\n+   *  @param  x  A %reverse_iterator.\n+   *  @param  y  A %reverse_iterator.\n+   *  @return  A simple bool.\n+   *\n+   *  Reverse iterators forward many operations to their underlying base()\n+   *  iterators.  Others are implemented in terms of one another.\n+   *\n+  */\n   template<typename _Iterator>\n     inline bool \n     operator==(const reverse_iterator<_Iterator>& __x, \n@@ -210,8 +313,17 @@ namespace std\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n \t      const reverse_iterator<_Iterator>& __x) \n     { return reverse_iterator<_Iterator>(__x.base() - __n); }\n+  //@}\n \n   // 24.4.2.2.1 back_insert_iterator\n+  /**\n+   *  These are output iterators, constructed from a container-of-T.\n+   *  Assigning a T to the iterator appends it to the container using\n+   *  push_back.\n+   *\n+   *  Tip:  Using the back_inserter function to create these iterators can\n+   *  save typing.\n+  */\n   template<typename _Container>\n     class back_insert_iterator \n     : public iterator<output_iterator_tag, void, void, void, void>\n@@ -220,33 +332,68 @@ namespace std\n       _Container* container;\n \n     public:\n+      /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n       \n+      /// The only way to create this %iterator is with a container.\n       explicit \n       back_insert_iterator(_Container& __x) : container(&__x) { }\n \n+      /**\n+       *  @param  value  An instance of whatever type\n+       *                 container_type::const_reference is; presumably a\n+       *                 reference-to-const T for container<T>.\n+       *  @return  This %iterator, for chained operations.\n+       *\n+       *  This kind of %iterator doesn't really have a \"position\" in the\n+       *  container (you can think of the position as being permanently at\n+       *  the end, if you like).  Assigning a value to the %iterator will\n+       *  always append the value to the end of the container.\n+      */\n       back_insert_iterator&\n       operator=(typename _Container::const_reference __value) \n       { \n \tcontainer->push_back(__value);\n \treturn *this;\n       }\n \n+      /// Simply returns *this.\n       back_insert_iterator& \n       operator*() { return *this; }\n \n+      /// Simply returns *this.  (This %iterator does not \"move\".)\n       back_insert_iterator& \n       operator++() { return *this; }\n \n+      /// Simply returns *this.  (This %iterator does not \"move\".)\n       back_insert_iterator\n       operator++(int) { return *this; }\n     };\n \n+  /**\n+   *  @param  x  A container of arbitrary type.\n+   *  @return  An instance of back_insert_iterator working on @p x.\n+   *\n+   *  This wrapper function helps in creating back_insert_iterator instances.\n+   *  Typing the name of the %iterator requires knowing the precise full\n+   *  type of the container, which can be tedious and impedes generic\n+   *  programming.  Using this function lets you take advantage of automatic\n+   *  template parameter deduction, making the compiler match the correct\n+   *  types for you.\n+  */\n   template<typename _Container>\n     inline back_insert_iterator<_Container> \n     back_inserter(_Container& __x) \n     { return back_insert_iterator<_Container>(__x); }\n \n+  /**\n+   *  These are output iterators, constructed from a container-of-T.\n+   *  Assigning a T to the iterator prepends it to the container using\n+   *  push_front.\n+   *\n+   *  Tip:  Using the front_inserter function to create these iterators can\n+   *  save typing.\n+  */\n   template<typename _Container>\n     class front_insert_iterator \n     : public iterator<output_iterator_tag, void, void, void, void>\n@@ -255,32 +402,71 @@ namespace std\n       _Container* container;\n \n     public:\n+      /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n \n+      /// The only way to create this %iterator is with a container.\n       explicit front_insert_iterator(_Container& __x) : container(&__x) { }\n \n+      /**\n+       *  @param  value  An instance of whatever type\n+       *                 container_type::const_reference is; presumably a\n+       *                 reference-to-const T for container<T>.\n+       *  @return  This %iterator, for chained operations.\n+       *\n+       *  This kind of %iterator doesn't really have a \"position\" in the\n+       *  container (you can think of the position as being permanently at\n+       *  the front, if you like).  Assigning a value to the %iterator will\n+       *  always prepend the value to the front of the container.\n+      */\n       front_insert_iterator&\n       operator=(typename _Container::const_reference __value) \n       { \n \tcontainer->push_front(__value);\n \treturn *this;\n       }\n \n+      /// Simply returns *this.\n       front_insert_iterator& \n       operator*() { return *this; }\n \n+      /// Simply returns *this.  (This %iterator does not \"move\".)\n       front_insert_iterator& \n       operator++() { return *this; }\n \n+      /// Simply returns *this.  (This %iterator does not \"move\".)\n       front_insert_iterator \n       operator++(int) { return *this; }\n     };\n \n+  /**\n+   *  @param  x  A container of arbitrary type.\n+   *  @return  An instance of front_insert_iterator working on @p x.\n+   *\n+   *  This wrapper function helps in creating front_insert_iterator instances.\n+   *  Typing the name of the %iterator requires knowing the precise full\n+   *  type of the container, which can be tedious and impedes generic\n+   *  programming.  Using this function lets you take advantage of automatic\n+   *  template parameter deduction, making the compiler match the correct\n+   *  types for you.\n+  */\n   template<typename _Container>\n     inline front_insert_iterator<_Container> \n     front_inserter(_Container& __x) \n     { return front_insert_iterator<_Container>(__x); }\n \n+  /**\n+   *  These are output iterators, constructed from a container-of-T.\n+   *  Assigning a T to the iterator inserts it in the container at the\n+   *  %iterator's position, rather than overwriting the value at that\n+   *  position.\n+   *\n+   *  (Sequences will actually insert a @e copy of the value before the\n+   *  %iterator's position.)\n+   *\n+   *  Tip:  Using the inserter function to create these iterators can\n+   *  save typing.\n+  */\n   template<typename _Container>\n     class insert_iterator \n     : public iterator<output_iterator_tag, void, void, void, void>\n@@ -290,11 +476,39 @@ namespace std\n       typename _Container::iterator iter;\n \n     public:\n+      /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n       \n+      /**\n+       *  The only way to create this %iterator is with a container and an\n+       *  initial position (a normal %iterator into the container).\n+      */\n       insert_iterator(_Container& __x, typename _Container::iterator __i) \n       : container(&__x), iter(__i) {}\n    \n+      /**\n+       *  @param  value  An instance of whatever type\n+       *                 container_type::const_reference is; presumably a\n+       *                 reference-to-const T for container<T>.\n+       *  @return  This %iterator, for chained operations.\n+       *\n+       *  This kind of %iterator maintains its own position in the\n+       *  container.  Assigning a value to the %iterator will insert the\n+       *  value into the container at the place before the %iterator.\n+       *\n+       *  The position is maintained such that subsequent assignments will\n+       *  insert values immediately after one another.  For example,\n+       *  @code\n+       *     // vector v contains A and Z\n+       *\n+       *     insert_iterator i (v, ++v.begin());\n+       *     i = 1;\n+       *     i = 2;\n+       *     i = 3;\n+       *\n+       *     // vector v contains A, 1, 2, 3, and Z\n+       *  @endcode\n+      */\n       insert_iterator&\n       operator=(const typename _Container::const_reference __value) \n       { \n@@ -303,16 +517,30 @@ namespace std\n \treturn *this;\n       }\n \n+      /// Simply returns *this.\n       insert_iterator& \n       operator*() { return *this; }\n \n+      /// Simply returns *this.  (This %iterator does not \"move\".)\n       insert_iterator& \n       operator++() { return *this; }\n \n+      /// Simply returns *this.  (This %iterator does not \"move\".)\n       insert_iterator& \n       operator++(int) { return *this; }\n     };\n   \n+  /**\n+   *  @param  x  A container of arbitrary type.\n+   *  @return  An instance of insert_iterator working on @p x.\n+   *\n+   *  This wrapper function helps in creating insert_iterator instances.\n+   *  Typing the name of the %iterator requires knowing the precise full\n+   *  type of the container, which can be tedious and impedes generic\n+   *  programming.  Using this function lets you take advantage of automatic\n+   *  template parameter deduction, making the compiler match the correct\n+   *  types for you.\n+  */\n   template<typename _Container, typename _Iterator>\n     inline insert_iterator<_Container> \n     inserter(_Container& __x, _Iterator __i)"}, {"sha": "8389f5e7d03a778cba29e5766ae5bc3fb7a9e352", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 101, "deletions": 72, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -1,6 +1,6 @@\n // Functions used by iterators -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -56,89 +56,118 @@\n /** @file stl_iterator_base_funcs.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n+ *\n+ *  This file contains all of the general iterator-related utility\n+ *  functions, such as distance() and advance().\n  */\n \n #ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H\n #define __GLIBCPP_INTERNAL_ITERATOR_BASE_FUNCS_H\n \n-// This file contains all of the general iterator-related utility\n-// functions, such as distance() and advance().\n-// The internal file stl_iterator.h contains predefined iterators, \n-// such as front_insert_iterator and istream_iterator.\n-\n #pragma GCC system_header\n #include <bits/concept_check.h>\n \n+// Since this entire file is within namespace std, there's no reason to\n+// waste two spaces along the left column.  Thus the leading indentation is\n+// slightly violated from here on.\n namespace std\n {\n-  template<typename _InputIterator>\n-    inline typename iterator_traits<_InputIterator>::difference_type\n-    __distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n-      typename iterator_traits<_InputIterator>::difference_type __n = 0;\n-      while (__first != __last) {\n-\t++__first; ++__n;\n-      }\n-      return __n;\n+template<typename _InputIterator>\n+  inline typename iterator_traits<_InputIterator>::difference_type\n+  __distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)\n+  {\n+    // concept requirements\n+    __glibcpp_function_requires(_InputIteratorConcept<_InputIterator>)\n+\n+    typename iterator_traits<_InputIterator>::difference_type __n = 0;\n+    while (__first != __last) {\n+      ++__first; ++__n;\n     }\n-\n-  template<typename _RandomAccessIterator>\n-    inline typename iterator_traits<_RandomAccessIterator>::difference_type\n-    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t\t\t   random_access_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      return __last - __first;\n-    }\n-\n-  template<typename _InputIterator>\n-    inline typename iterator_traits<_InputIterator>::difference_type\n-    distance(_InputIterator __first, _InputIterator __last)\n-    {\n-      // concept requirements -- taken care of in __distance\n-      return __distance(__first, __last, __iterator_category(__first));\n-    }\n-\n-  template<typename _InputIter, typename _Distance>\n-    inline void\n-    __advance(_InputIter& __i, _Distance __n, input_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+    return __n;\n+  }\n+\n+template<typename _RandomAccessIterator>\n+  inline typename iterator_traits<_RandomAccessIterator>::difference_type\n+  __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+             random_access_iterator_tag)\n+  {\n+    // concept requirements\n+    __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+    return __last - __first;\n+  }\n+\n+/**\n+ *  @brief A generalization of pointer arithmetic.\n+ *  @param  first  An input iterator.\n+ *  @param  last  An input iterator.\n+ *  @return  The distance between them.\n+ *\n+ *  Returns @c n such that first + n == last.  This requires that @p last\n+ *  must be reachable from @p first.  Note that @c n may be negative.\n+ *\n+ *  For random access iterators, this uses their @c + and @c - operations\n+ *  and are constant time.  For other %iterator classes they are linear time.\n+*/\n+template<typename _InputIterator>\n+  inline typename iterator_traits<_InputIterator>::difference_type\n+  distance(_InputIterator __first, _InputIterator __last)\n+  {\n+    // concept requirements -- taken care of in __distance\n+    return __distance(__first, __last, __iterator_category(__first));\n+  }\n+\n+template<typename _InputIter, typename _Distance>\n+  inline void\n+  __advance(_InputIter& __i, _Distance __n, input_iterator_tag)\n+  {\n+    // concept requirements\n+    __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)\n+    while (__n--) ++__i;\n+  }\n+\n+template<typename _BidirectionalIterator, typename _Distance>\n+  inline void\n+  __advance(_BidirectionalIterator& __i, _Distance __n,\n+            bidirectional_iterator_tag)\n+  {\n+    // concept requirements\n+    __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n+\n+    if (__n > 0)\n       while (__n--) ++__i;\n-    }\n-\n-  template<typename _BidirectionalIterator, typename _Distance>\n-    inline void\n-    __advance(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_BidirectionalIteratorConcept<_BidirectionalIterator>)\n-      if (__n > 0)\n-\twhile (__n--) ++__i;\n-      else\n-\twhile (__n++) --__i;\n-    }\n-\n-  template<typename _RandomAccessIterator, typename _Distance>\n-    inline void\n-    __advance(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)\n-    {\n-      // concept requirements\n-      __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n-      __i += __n;\n-    }\n-\n-  template<typename _InputIterator, typename _Distance>\n-    inline void\n-    advance(_InputIterator& __i, _Distance __n)\n-    {\n-      // concept requirements -- taken care of in __advance\n-      __advance(__i, __n, __iterator_category(__i));\n-    }\n+    else\n+      while (__n++) --__i;\n+  }\n+\n+template<typename _RandomAccessIterator, typename _Distance>\n+  inline void\n+  __advance(_RandomAccessIterator& __i, _Distance __n,\n+            random_access_iterator_tag)\n+  {\n+    // concept requirements\n+    __glibcpp_function_requires(_RandomAccessIteratorConcept<_RandomAccessIterator>)\n+    __i += __n;\n+  }\n+\n+/**\n+ *  @brief A generalization of pointer arithmetic.\n+ *  @param  i  An input iterator.\n+ *  @param  n  The \"delta\" by which to change @p i.\n+ *  @return  Nothing.\n+ *\n+ *  This increments @p i by @p n.  For bidirectional and random access\n+ *  iterators, @p n may be negative, in which case @p i is decremented.\n+ *\n+ *  For random access iterators, this uses their @c + and @c - operations\n+ *  and are constant time.  For other %iterator classes they are linear time.\n+*/\n+template<typename _InputIterator, typename _Distance>\n+  inline void\n+  advance(_InputIterator& __i, _Distance __n)\n+  {\n+    // concept requirements -- taken care of in __advance\n+    __advance(__i, __n, __iterator_category(__i));\n+  }\n \n } // namespace std\n "}, {"sha": "e5b3fa461b4655d395b3721ef92f1644a3fac529", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f94053d3274ffe6cddba040ed6e42a350df22b8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=8f94053d3274ffe6cddba040ed6e42a350df22b8", "patch": "@@ -1,6 +1,6 @@\n // Types used in iterator implementation -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -90,9 +90,12 @@ namespace std\n \n \n   /**\n-   *  This class does nothing but define nested typedefs.  Iterator classes\n+   *  This class does nothing but define nested typedefs.  %Iterator classes\n    *  can inherit from this class to save some work.  The typedefs are then\n    *  used in specializations and overloading.\n+   *\n+   *  In particular, there are no default implementations of requirements\n+   *  such as @c operator++ and the like.  (How could there be?)\n   */\n   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,\n \t   typename _Pointer = _Tp*, typename _Reference = _Tp&>"}]}