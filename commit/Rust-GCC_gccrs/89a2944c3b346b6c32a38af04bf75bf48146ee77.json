{"sha": "89a2944c3b346b6c32a38af04bf75bf48146ee77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhMjk0NGMzYjM0NmI2YzMyYTM4YWYwNGJmNzViZjQ4MTQ2ZWU3Nw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-04-13T19:07:47Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-04-13T19:07:47Z"}, "message": "Initial revision\n\nFrom-SVN: r11756", "tree": {"sha": "77f01232c4ffc3522c50c7a5e7d646ef3925625e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77f01232c4ffc3522c50c7a5e7d646ef3925625e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89a2944c3b346b6c32a38af04bf75bf48146ee77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a2944c3b346b6c32a38af04bf75bf48146ee77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a2944c3b346b6c32a38af04bf75bf48146ee77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a2944c3b346b6c32a38af04bf75bf48146ee77/comments", "author": null, "committer": null, "parents": [{"sha": "31fdb4d52b0ed2ebdb4f3d94cfd1243ffa8b6888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31fdb4d52b0ed2ebdb4f3d94cfd1243ffa8b6888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31fdb4d52b0ed2ebdb4f3d94cfd1243ffa8b6888"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "3af43e14fba3668a050e2b484e954c02bf7a1027", "filename": "gcc/config/arm/coff.h", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a2944c3b346b6c32a38af04bf75bf48146ee77/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a2944c3b346b6c32a38af04bf75bf48146ee77/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=89a2944c3b346b6c32a38af04bf75bf48146ee77", "patch": "@@ -0,0 +1,205 @@\n+/* Definitions of target machine for GNU compiler,\n+   for ARM with COFF obj format.\n+   Copyright (C) 1995, 1996 Free Software Foundation, Inc.\n+   Contributed by Doug Evans (dje@cygnus.com).\n+   \n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"arm/semi.h\"\n+\f\n+/* Run-time Target Specification.  */\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fputs (\" (ARM/coff)\", stderr)\n+\n+/* ??? Maybe use --with{enable?}-fpu or some such to make hardware floating\n+   point the default.  NOT --nfp!  --with{enable?} is supposed to replace it\n+   (right?), so let's stop using it.  */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (ARM_FLAG_SOFT_FLOAT + TARGET_CPU_DEFAULT)\n+\n+#if TARGET_CPU_DEFAULT & ARM_FLAG_BIG_END\n+#define MULTILIB_DEFAULTS { \"mbe\", \"mbig-endian\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"mle\", \"mlittle-endian\" }\n+#endif\n+\f\n+/* ??? Does arm.h really need to set this to 32?  */\n+#undef STRUCTURE_SIZE_BOUNDARY\n+#define STRUCTURE_SIZE_BOUNDARY 8\n+\f\n+/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n+   is a valid machine specific attribute for DECL.\n+   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n+extern int arm_valid_machine_decl_attribute ();\n+#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n+arm_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n+\f\n+/* This is COFF, but prefer stabs.  */\n+#define SDB_DEBUGGING_INFO\n+\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#include \"dbxcoff.h\"\n+\f\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+/* A C statement to output assembler commands which will identify the\n+   object file as having been compiled with GNU CC (or another GNU\n+   compiler).  */\n+/* Define this to NULL so we don't get anything.\n+   We have ASM_IDENTIFY_LANGUAGE.\n+   Also, when using stabs, gcc2_compiled must be a stabs entry, not an\n+   ordinary symbol, or gdb won't see it.  The stabs entry must be\n+   before the N_SO in order for gdb to find it.  */\n+#define ASM_IDENTIFY_GCC(STREAM)\n+\n+/* This outputs a lot of .req's to define alias for various registers.\n+   Let's try to avoid this.  */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(STREAM) \\\n+do {\t\t\t\t\t\t\t\t\\\n+  extern char *version_string;\t\t\t\t\t\\\n+  fprintf (STREAM, \"%s Generated by gcc %s for ARM/coff\\n\",\t\\\n+\t   ASM_COMMENT_START, version_string);\t\t\t\\\n+} while (0)\n+\n+/* A C statement to output something to the assembler file to switch to section\n+   NAME for object DECL which is either a FUNCTION_DECL, a VAR_DECL or\n+   NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n+   define this macro in such cases.  */\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME) \\\n+do {\t\t\t\t\t\t\t\t\\\n+  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n+    fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n+  else if ((DECL) && TREE_READONLY (DECL))\t\t\t\\\n+    fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\\n+} while (0)\n+\f\n+/* Support the ctors/dtors and other sections.  */\n+\n+#undef INIT_SECTION_ASM_OP\n+\n+/* Define this macro if jump tables (for `tablejump' insns) should be\n+   output in the text section, along with the assembler instructions.\n+   Otherwise, the readonly data section is used.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION\n+\n+#undef READONLY_DATA_SECTION\n+#define READONLY_DATA_SECTION\trdata_section\n+#undef RDATA_SECTION_ASM_OP\n+#define RDATA_SECTION_ASM_OP\t\"\\t.section .rdata\"\n+\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section .ctors,\\\"x\\\"\"\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section .dtors,\\\"x\\\"\"\n+\n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_rdata, in_ctors, in_dtors\n+\n+#define SUBTARGET_EXTRA_SECTIONS\n+\n+/* A list of extra section function definitions.  */\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS \\\n+  RDATA_SECTION_FUNCTION\t\\\n+  CTORS_SECTION_FUNCTION\t\\\n+  DTORS_SECTION_FUNCTION\t\\\n+  SUBTARGET_EXTRA_SECTION_FUNCTIONS\n+\n+#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\n+\n+#define RDATA_SECTION_FUNCTION \\\n+void\t\t\t\t\t\t\t\t\t\\\n+rdata_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_rdata)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\t\\\n+      in_section = in_rdata;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define CTORS_SECTION_FUNCTION \\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION \\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\f\n+/* Support the ctors/dtors sections for g++.  */\n+\n+#define INT_ASM_OP \".word\"\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(STREAM,NAME) \\\n+do {\t\t\t\t\t\t\\\n+  ctors_section ();\t\t\t\t\\\n+  fprintf (STREAM, \"\\t%s\\t \", INT_ASM_OP);\t\\\n+  assemble_name (STREAM, NAME);\t\t\t\\\n+  fprintf (STREAM, \"\\n\");\t\t\t\\\n+} while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#undef ASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(STREAM,NAME) \\\n+do {\t\t\t\t\t\t\\\n+  dtors_section ();                   \t\t\\\n+  fprintf (STREAM, \"\\t%s\\t \", INT_ASM_OP);\t\\\n+  assemble_name (STREAM, NAME);              \t\\\n+  fprintf (STREAM, \"\\n\");\t\t\t\\\n+} while (0)\n+\n+/* __CTOR_LIST__ and __DTOR_LIST__ must be defined by the linker script.  */\n+#define CTOR_LISTS_DEFINED_EXTERNALLY\n+\n+#undef DO_GLOBAL_CTORS_BODY\n+#undef DO_GLOBAL_DTORS_BODY\n+\n+/* The ARM development system has atexit and doesn't have _exit,\n+   so define this for now.  */\n+#define HAVE_ATEXIT\n+\n+/* The ARM development system defines __main.  */\n+#define NAME__MAIN \"__gccmain\"\n+#define SYMBOL__MAIN __gccmain"}, {"sha": "4f1d84ace62fe45c84751a5212826e435eb5b5cb", "filename": "gcc/config/arm/t-bare", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a2944c3b346b6c32a38af04bf75bf48146ee77/gcc%2Fconfig%2Farm%2Ft-bare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a2944c3b346b6c32a38af04bf75bf48146ee77/gcc%2Fconfig%2Farm%2Ft-bare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-bare?ref=89a2944c3b346b6c32a38af04bf75bf48146ee77", "patch": "@@ -0,0 +1,30 @@\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = arm/lib1funcs.asm\n+LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so...\n+\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifndef __ARMEB__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifndef __ARMEB__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+# Avoid building a duplicate set of libraries for the default endian-ness.\n+MULTILIB_OPTIONS = mle/mbe mhard-float\n+MULTILIB_DIRNAMES = le be fpu\n+MULTILIB_MATCHES = mbe=mbig-endian mle=mlittle-endian\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}]}