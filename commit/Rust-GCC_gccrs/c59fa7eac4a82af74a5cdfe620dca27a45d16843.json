{"sha": "c59fa7eac4a82af74a5cdfe620dca27a45d16843", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5ZmE3ZWFjNGE4MmFmNzRhNWNkZmU2MjBkY2EyN2E0NWQxNjg0Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-26T16:02:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-26T16:02:19Z"}, "message": "PR c++/86429 - constexpr variable in lambda.\n\nWhen we refer to a captured variable from a constant-expression context\ninside a lambda, the closure (like any function parameter) is not constant\nbecause we aren't in a call, so we don't have an argument.  So the capture\nis non-constant.  But if the captured variable is constant, we might be able\nto use it directly in constexpr evaluation.\n\n\tPR c++/82643\n\tPR c++/87327\n\t* constexpr.c (cxx_eval_constant_expression): In a lambda function,\n\ttry evaluating the captured variable directly.\n\nFrom-SVN: r269951", "tree": {"sha": "45250c1852f1bfe23db6d53a66beb6a39faac3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45250c1852f1bfe23db6d53a66beb6a39faac3e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c59fa7eac4a82af74a5cdfe620dca27a45d16843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59fa7eac4a82af74a5cdfe620dca27a45d16843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59fa7eac4a82af74a5cdfe620dca27a45d16843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59fa7eac4a82af74a5cdfe620dca27a45d16843/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ac205673caade367552a567a98e27940f17cf35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac205673caade367552a567a98e27940f17cf35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac205673caade367552a567a98e27940f17cf35"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "550b7541d9fc4fb6b2331ad806e19d19ad05549f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c59fa7eac4a82af74a5cdfe620dca27a45d16843", "patch": "@@ -1,3 +1,11 @@\n+2019-03-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86429 - constexpr variable in lambda.\n+\tPR c++/82643\n+\tPR c++/87327\n+\t* constexpr.c (cxx_eval_constant_expression): In a lambda function,\n+\ttry evaluating the captured variable directly.\n+\n 2019-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89796"}, {"sha": "c00d642fcfeda2167d250ca834cec8fae394a2f1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c59fa7eac4a82af74a5cdfe620dca27a45d16843", "patch": "@@ -4442,8 +4442,29 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \n     case VAR_DECL:\n       if (DECL_HAS_VALUE_EXPR_P (t))\n-\treturn cxx_eval_constant_expression (ctx, DECL_VALUE_EXPR (t),\n-\t\t\t\t\t     lval, non_constant_p, overflow_p);\n+\t{\n+\t  if (is_normal_capture_proxy (t)\n+\t      && current_function_decl == DECL_CONTEXT (t))\n+\t    {\n+\t      /* Function parms aren't constexpr within the function\n+\t\t definition, so don't try to look at the closure.  But if the\n+\t\t captured variable is constant, try to evaluate it directly. */\n+\t      r = DECL_CAPTURED_VARIABLE (t);\n+\t      tree type = TREE_TYPE (t);\n+\t      if (TYPE_REF_P (type) != TYPE_REF_P (TREE_TYPE (r)))\n+\t\t{\n+\t\t  /* Adjust r to match the reference-ness of t.  */\n+\t\t  if (TYPE_REF_P (type))\n+\t\t    r = build_address (r);\n+\t\t  else\n+\t\t    r = convert_from_reference (r);\n+\t\t}\n+\t    }\n+\t  else\n+\t    r = DECL_VALUE_EXPR (t);\n+\t  return cxx_eval_constant_expression (ctx, r, lval, non_constant_p,\n+\t\t\t\t\t       overflow_p);\n+\t}\n       /* fall through */\n     case CONST_DECL:\n       /* We used to not check lval for CONST_DECL, but darwin.c uses"}, {"sha": "e0080b3d4f6763f5ef9a2c43ecd52ebca2ceb85a", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const10.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const10.C?ref=c59fa7eac4a82af74a5cdfe620dca27a45d16843", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/82643\n+// { dg-do compile { target c++14 } }\n+\n+int main()\n+{\n+  struct A {\n+    constexpr int operator()() const { return 42; }\n+  };\n+\n+  auto f = A();\n+  constexpr auto x = f(); //ok, call constexpr const non-static method\n+\n+  [](auto const &f) {\n+    constexpr auto x = f(); /*ok*/\n+  }(f);\n+\n+  [&]() {\n+    constexpr auto x = f(); //ko, __closure is not a constant expression\n+  };\n+\n+  [=]() {\n+    constexpr auto x = f(); //same ko, __closure is not a constant expression\n+  };\n+}"}, {"sha": "491c7c322c3e73890a5ca5a2ade0debc936bbc16", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const9.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const9.C?ref=c59fa7eac4a82af74a5cdfe620dca27a45d16843", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/86429\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  int i;\n+  constexpr int f(const int&) const { return i; }\n+};\n+\n+void g()\n+{\n+  constexpr A a = { 42 };\n+  [&](auto x) {\n+    constexpr auto y = a.f(x);\n+  }(24);\n+}"}, {"sha": "2edb24e41ac357b304f12f9e847682a85e0191d2", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda24.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59fa7eac4a82af74a5cdfe620dca27a45d16843/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda24.C?ref=c59fa7eac4a82af74a5cdfe620dca27a45d16843", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/87327\n+// { dg-do compile { target c++17 } }\n+\n+template <int N>\n+struct Foo {\n+    constexpr auto size() const {\n+        return N;\n+    }\n+};\n+\n+constexpr int foo() {\n+    constexpr auto a = Foo<5>{};\n+\n+    [&] {\n+        Foo<a.size()> it = {};\n+\n+        return it;\n+    }();\n+\n+    return 42;\n+}\n+\n+constexpr int i = foo();"}]}