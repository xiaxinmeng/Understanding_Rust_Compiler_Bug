{"sha": "072d019dfc7517723bba106766b5dc830814b44b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyZDAxOWRmYzc1MTc3MjNiYmExMDY3NjZiNWRjODMwODE0YjQ0Yg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-02-05T20:56:47Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-02-05T20:56:47Z"}, "message": "* gnu/classpath/jdwp/natVMVirtualMachine.cc\n        (registerEvent): Implement EVENT_BREAKPOINT.\n        (unregisterEvent): Likewise.\n        (get_request_location): New function.\n\nFrom-SVN: r121608", "tree": {"sha": "2c5613f6f2c49e3a9f83cfa420f131521a3f640c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c5613f6f2c49e3a9f83cfa420f131521a3f640c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/072d019dfc7517723bba106766b5dc830814b44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072d019dfc7517723bba106766b5dc830814b44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072d019dfc7517723bba106766b5dc830814b44b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072d019dfc7517723bba106766b5dc830814b44b/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d38026be8d69796e18179b869b50f52ac7cd032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d38026be8d69796e18179b869b50f52ac7cd032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d38026be8d69796e18179b869b50f52ac7cd032"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "f94ac741f3b93e35508d94ae6d82cfcd1e9e6353", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072d019dfc7517723bba106766b5dc830814b44b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072d019dfc7517723bba106766b5dc830814b44b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=072d019dfc7517723bba106766b5dc830814b44b", "patch": "@@ -1,3 +1,10 @@\n+2007-02-05  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc\n+\t(registerEvent): Implement EVENT_BREAKPOINT.\n+\t(unregisterEvent): Likewise.\n+\t(get_request_location): New function.\n+\n 2007-02-05  Matthias Klose  <doko@debian.org>\n \n \ttestsuite/Makefile.am (compile-tests): Fix typo."}, {"sha": "208e689b79d50120a0fd4e9aa77c387c7b45512d", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072d019dfc7517723bba106766b5dc830814b44b/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072d019dfc7517723bba106766b5dc830814b44b/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=072d019dfc7517723bba106766b5dc830814b44b", "patch": "@@ -10,6 +10,7 @@ details. */\n \n #include <config.h>\n #include <gcj/cni.h>\n+#include <java-assert.h>\n #include <jvm.h>\n #include <jvmti.h>\n \n@@ -21,6 +22,7 @@ details. */\n #include <java/lang/Thread.h>\n #include <java/nio/ByteBuffer.h>\n #include <java/util/ArrayList.h>\n+#include <java/util/Collection.h>\n #include <java/util/Hashtable.h>\n #include <java/util/Iterator.h>\n \n@@ -29,20 +31,28 @@ details. */\n #include <gnu/classpath/jdwp/VMMethod.h>\n #include <gnu/classpath/jdwp/VMVirtualMachine.h>\n #include <gnu/classpath/jdwp/event/ClassPrepareEvent.h>\n+#include <gnu/classpath/jdwp/event/EventManager.h>\n #include <gnu/classpath/jdwp/event/EventRequest.h>\n #include <gnu/classpath/jdwp/event/ThreadEndEvent.h>\n #include <gnu/classpath/jdwp/event/ThreadStartEvent.h>\n #include <gnu/classpath/jdwp/event/VmDeathEvent.h>\n #include <gnu/classpath/jdwp/event/VmInitEvent.h>\n+#include <gnu/classpath/jdwp/event/filters/IEventFilter.h>\n+#include <gnu/classpath/jdwp/event/filters/LocationOnlyFilter.h>\n+#include <gnu/classpath/jdwp/exception/InvalidLocationException.h>\n #include <gnu/classpath/jdwp/exception/InvalidMethodException.h>\n #include <gnu/classpath/jdwp/exception/JdwpInternalErrorException.h>\n+#include <gnu/classpath/jdwp/util/Location.h>\n #include <gnu/classpath/jdwp/util/MethodResult.h>\n+#include <gnu/gcj/jvmti/Breakpoint.h>\n+#include <gnu/gcj/jvmti/BreakpointManager.h>\n \n using namespace java::lang;\n using namespace gnu::classpath::jdwp::event;\n using namespace gnu::classpath::jdwp::util;\n \n // Forward declarations\n+static Location *get_request_location (EventRequest *);\n static void JNICALL jdwpClassPrepareCB (jvmtiEnv *, JNIEnv *, jthread, jclass);\n static void JNICALL jdwpThreadEndCB (jvmtiEnv *, JNIEnv *, jthread);\n static void JNICALL jdwpThreadStartCB (jvmtiEnv *, JNIEnv *, jthread);\n@@ -189,7 +199,29 @@ gnu::classpath::jdwp::VMVirtualMachine::registerEvent (EventRequest *request)\n       break;\n \n     case EventRequest::EVENT_BREAKPOINT:\n-      break;\n+      {\n+\tusing namespace ::gnu::gcj::jvmti;\n+\tLocation *loc = get_request_location (request);\n+\tif (loc == NULL)\n+\t  {\n+\t    using namespace gnu::classpath::jdwp::exception;\n+\t    throw new InvalidLocationException ();\n+\t  }\n+\n+\tjlong method = loc->getMethod ()->getId ();\n+\tjlocation index = loc->getIndex ();\n+\tBreakpoint  *bp = BreakpointManager::getBreakpoint (method, index);\n+\tif (bp == NULL)\n+\t  {\n+\t    // Breakpoint not in interpreter yet\n+\t    bp = BreakpointManager::newBreakpoint (method, index);\n+\t  }\n+\telse\n+\t  {\n+\t    // Ignore the duplicate\n+\t  }\n+      }\n+     break;\n \n     case EventRequest::EVENT_FRAME_POP:\n       break;\n@@ -244,6 +276,46 @@ gnu::classpath::jdwp::VMVirtualMachine::unregisterEvent (EventRequest *request)\n       break;\n \n     case EventRequest::EVENT_BREAKPOINT:\n+      {\n+\tusing namespace gnu::gcj::jvmti;\n+\t::java::util::Collection *breakpoints;\n+\tEventManager *em = EventManager::getDefault ();\n+\tbreakpoints = em->getRequests (EventRequest::EVENT_BREAKPOINT);\n+\n+\t// Check for duplicates\n+\tint matches = 0;\n+\tLocation *the_location = get_request_location (request);\n+\n+\t// This should not be possible: we REQUIRE a Location\n+\t// to install a breakpoint\n+\tJvAssert (the_location != NULL);\n+\n+\t::java::util::Iterator *iter = breakpoints->iterator ();\n+\twhile (iter->hasNext ())\n+\t  {\n+\t    EventRequest *er\n+\t      = reinterpret_cast<EventRequest *> (iter->next ());\n+\t    Location *loc = get_request_location (er);\n+\t    JvAssert (loc != NULL);\n+\t    if (loc->equals (the_location) && ++matches == 2)\n+\t      {\n+\t\t// Short-circuit: already more than one breakpoint\n+\t\treturn;\n+\t      }\n+\t  }\n+\n+\tif (matches == 0)\n+\t  {\n+\t    using namespace gnu::classpath::jdwp::exception;\n+\t    jstring msg\n+\t      = JvNewStringLatin1 (\"attempt to remove unknown breakpoint\");\n+\t    throw new JdwpInternalErrorException (msg);\n+\t  }\n+\n+\tjlong methodId = the_location->getMethod ()->getId ();\n+\tBreakpointManager::deleteBreakpoint (methodId,\n+\t\t\t\t\t     the_location->getIndex ());\n+      }\n       break;\n \n     case EventRequest::EVENT_FRAME_POP:\n@@ -410,6 +482,27 @@ getSourceFile (MAYBE_UNUSED jclass clazz)\n   return NULL;\n }\n \n+static Location *\n+get_request_location (EventRequest *request)\n+{\n+  Location *loc = NULL;\n+  ::java::util::Collection *filters = request->getFilters ();\n+  ::java::util::Iterator *iter = filters->iterator ();\n+  while (iter->hasNext ())\n+    {\n+      using namespace gnu::classpath::jdwp::event::filters;\n+      IEventFilter *filter = (IEventFilter *) iter->next ();\n+      if (filter->getClass () == &LocationOnlyFilter::class$)\n+\t{\n+\t  LocationOnlyFilter *lof\n+\t    = reinterpret_cast<LocationOnlyFilter *> (filter);\n+\t  loc = lof->getLocation ();\n+\t}\n+    }\n+\n+  return loc;\n+}\n+\n static void\n throw_jvmti_error (jvmtiError err)\n {"}]}