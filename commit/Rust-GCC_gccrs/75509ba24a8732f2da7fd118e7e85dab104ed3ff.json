{"sha": "75509ba24a8732f2da7fd118e7e85dab104ed3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1MDliYTI0YTg3MzJmMmRhN2ZkMTE4ZTdlODVkYWIxMDRlZDNmZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-17T13:15:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-17T13:15:53Z"}, "message": "genopinit.c (main): Use vec<>::qsort method.\n\n2014-06-17  Richard Biener  <rguenther@suse.de>\n\n\t* genopinit.c (main): Use vec<>::qsort method.\n\t* tree-ssa-loop-niter.c (discover_iteration_bound_by_body_walk):\n\tLikewise.\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Likewise.\n\nFrom-SVN: r211738", "tree": {"sha": "9ac9098188b835b6e26267572eddf69cab90d555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac9098188b835b6e26267572eddf69cab90d555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75509ba24a8732f2da7fd118e7e85dab104ed3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75509ba24a8732f2da7fd118e7e85dab104ed3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75509ba24a8732f2da7fd118e7e85dab104ed3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75509ba24a8732f2da7fd118e7e85dab104ed3ff/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58b74ea3d6f27dc6e3f2022f12d1711a94f5a07"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "2820759a2808adb9c8b44ca17efdd0e81483ace6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75509ba24a8732f2da7fd118e7e85dab104ed3ff", "patch": "@@ -1,3 +1,10 @@\n+2014-06-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* genopinit.c (main): Use vec<>::qsort method.\n+\t* tree-ssa-loop-niter.c (discover_iteration_bound_by_body_walk):\n+\tLikewise.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Likewise.\n+\n 2014-06-17  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* config/mips/mips-protos.h (mips_expand_fcc_reload): Remove."}, {"sha": "ef7f674d09b21503a62a5621d30b66b11f474ebf", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=75509ba24a8732f2da7fd118e7e85dab104ed3ff", "patch": "@@ -357,8 +357,7 @@ main (int argc, char **argv)\n     }\n \n   /* Sort the collected patterns.  */\n-  qsort (patterns.address (), patterns.length (),\n-\t sizeof (pattern), pattern_cmp);\n+  patterns.qsort (pattern_cmp);\n \n   /* Now that we've handled the \"extra\" patterns, eliminate them from\n      the optabs array.  That way they don't get in the way below.  */"}, {"sha": "36d68a884bb412a3a4d84375cf52ccb2b962e417", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=75509ba24a8732f2da7fd118e7e85dab104ed3ff", "patch": "@@ -3144,8 +3144,7 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n     fprintf (dump_file, \" Trying to walk loop body to reduce the bound.\\n\");\n \n   /* Sort the bounds in decreasing order.  */\n-  qsort (bounds.address (), bounds.length (),\n-\t sizeof (widest_int), wide_int_cmp);\n+  bounds.qsort (wide_int_cmp);\n \n   /* For every basic block record the lowest bound that is guaranteed to\n      terminate the loop.  */"}, {"sha": "b2b629c03c666052877fd0e52a44f9cf105f7e65", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75509ba24a8732f2da7fd118e7e85dab104ed3ff/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=75509ba24a8732f2da7fd118e7e85dab104ed3ff", "patch": "@@ -2508,8 +2508,7 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n      linear.  Don't modify the original vector's order, it is needed for\n      determining what dependencies are reversed.  */\n   vec<data_reference_p> datarefs_copy = datarefs.copy ();\n-  qsort (datarefs_copy.address (), datarefs_copy.length (),\n-\t sizeof (data_reference_p), dr_group_sort_cmp);\n+  datarefs_copy.qsort (dr_group_sort_cmp);\n \n   /* Build the interleaving chains.  */\n   for (i = 0; i < datarefs_copy.length () - 1;)"}]}