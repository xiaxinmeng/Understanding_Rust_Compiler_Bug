{"sha": "e64738b3087bda05d4b499430212b785fda6cfb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0NzM4YjMwODdiZGEwNWQ0YjQ5OTQzMDIxMmI3ODVmZGE2Y2ZiOQ==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2003-12-09T03:27:10Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-12-09T03:27:10Z"}, "message": "algo.h, [...]: Remove trailing whitespace.\n\n\t* include/backward/algo.h, include/backward/algobase.h,\n\tinclude/backward/alloc.h, include/backward/complex.h,\n\tinclude/backward/defalloc.h, include/backward/function.h,\n\tinclude/backward/iterator.h, include/backward/new.h,\n\tinclude/backward/ostream.h, include/backward/queue.h,\n\tinclude/backward/rope.h, include/backward/stream.h,\n\tinclude/backward/streambuf.h, include/backward/strstream,\n\tinclude/backward/tempbuf.h, include/backward/tree.h,\n\tinclude/backward/vector.h: Remove trailing whitespace.\n\nFrom-SVN: r74455", "tree": {"sha": "bf602470a3835eaf79a95b4c542242c02bafa43e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf602470a3835eaf79a95b4c542242c02bafa43e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e64738b3087bda05d4b499430212b785fda6cfb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64738b3087bda05d4b499430212b785fda6cfb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e64738b3087bda05d4b499430212b785fda6cfb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e64738b3087bda05d4b499430212b785fda6cfb9/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9baceb10b8db929dbf87c0670b041aaa9171b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9baceb10b8db929dbf87c0670b041aaa9171b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9baceb10b8db929dbf87c0670b041aaa9171b42"}], "stats": {"total": 360, "additions": 186, "deletions": 174}, "files": [{"sha": "6ad22d7333135d14e8156625a9fc03b16136f1b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -1,3 +1,15 @@\n+2003-12-09  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* include/backward/algo.h, include/backward/algobase.h,\n+\tinclude/backward/alloc.h, include/backward/complex.h,\n+\tinclude/backward/defalloc.h, include/backward/function.h,\n+\tinclude/backward/iterator.h, include/backward/new.h,\n+\tinclude/backward/ostream.h, include/backward/queue.h,\n+\tinclude/backward/rope.h, include/backward/stream.h,\n+\tinclude/backward/streambuf.h, include/backward/strstream,\n+\tinclude/backward/tempbuf.h, include/backward/tree.h,\n+\tinclude/backward/vector.h: Remove trailing whitespace.\n+\n 2003-12-08  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/locale/generic/c_locale.cc (__convert_to_v(long&),"}, {"sha": "6f248356cf8ec4843282ef8558d3aaff36d3314e", "filename": "libstdc++-v3/include/backward/algo.h", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -66,57 +66,57 @@\n #include <ext/numeric>\n \n // Names from <stl_algo.h>\n-using std::for_each; \n-using std::find; \n-using std::find_if; \n-using std::adjacent_find; \n-using std::count; \n-using std::count_if; \n-using std::search; \n-using std::search_n; \n-using std::swap_ranges; \n-using std::transform; \n-using std::replace; \n-using std::replace_if; \n-using std::replace_copy; \n-using std::replace_copy_if; \n-using std::generate; \n-using std::generate_n; \n-using std::remove; \n-using std::remove_if; \n-using std::remove_copy; \n-using std::remove_copy_if; \n-using std::unique; \n-using std::unique_copy; \n-using std::reverse; \n-using std::reverse_copy; \n-using std::rotate; \n-using std::rotate_copy; \n-using std::random_shuffle; \n-using std::partition; \n-using std::stable_partition; \n-using std::sort; \n-using std::stable_sort; \n-using std::partial_sort; \n-using std::partial_sort_copy; \n-using std::nth_element; \n-using std::lower_bound; \n-using std::upper_bound; \n-using std::equal_range; \n-using std::binary_search; \n-using std::merge; \n-using std::inplace_merge; \n-using std::includes; \n-using std::set_union; \n-using std::set_intersection; \n-using std::set_difference; \n-using std::set_symmetric_difference; \n-using std::min_element; \n-using std::max_element; \n-using std::next_permutation; \n-using std::prev_permutation; \n-using std::find_first_of; \n-using std::find_end; \n+using std::for_each;\n+using std::find;\n+using std::find_if;\n+using std::adjacent_find;\n+using std::count;\n+using std::count_if;\n+using std::search;\n+using std::search_n;\n+using std::swap_ranges;\n+using std::transform;\n+using std::replace;\n+using std::replace_if;\n+using std::replace_copy;\n+using std::replace_copy_if;\n+using std::generate;\n+using std::generate_n;\n+using std::remove;\n+using std::remove_if;\n+using std::remove_copy;\n+using std::remove_copy_if;\n+using std::unique;\n+using std::unique_copy;\n+using std::reverse;\n+using std::reverse_copy;\n+using std::rotate;\n+using std::rotate_copy;\n+using std::random_shuffle;\n+using std::partition;\n+using std::stable_partition;\n+using std::sort;\n+using std::stable_sort;\n+using std::partial_sort;\n+using std::partial_sort_copy;\n+using std::nth_element;\n+using std::lower_bound;\n+using std::upper_bound;\n+using std::equal_range;\n+using std::binary_search;\n+using std::merge;\n+using std::inplace_merge;\n+using std::includes;\n+using std::set_union;\n+using std::set_intersection;\n+using std::set_difference;\n+using std::set_symmetric_difference;\n+using std::min_element;\n+using std::max_element;\n+using std::next_permutation;\n+using std::prev_permutation;\n+using std::find_first_of;\n+using std::find_end;\n \n // Names from stl_heap.h\n using std::push_heap;\n@@ -125,22 +125,22 @@ using std::make_heap;\n using std::sort_heap;\n \n // Names from stl_numeric.h\n-using std::accumulate; \n-using std::inner_product; \n-using std::partial_sum; \n-using std::adjacent_difference; \n+using std::accumulate;\n+using std::inner_product;\n+using std::partial_sum;\n+using std::adjacent_difference;\n \n // Names from ext/algorithm\n-using __gnu_cxx::random_sample; \n+using __gnu_cxx::random_sample;\n using __gnu_cxx::random_sample_n;\n-using __gnu_cxx::is_sorted; \n+using __gnu_cxx::is_sorted;\n using __gnu_cxx::is_heap;\n using __gnu_cxx::count;   // Extension returning void\n using __gnu_cxx::count_if;   // Extension returning void\n \n // Names from ext/numeric\n-using __gnu_cxx::power; \n-using __gnu_cxx::iota; \n+using __gnu_cxx::power;\n+using __gnu_cxx::iota;\n \n #endif /* _BACKWARD_ALGO_H */\n "}, {"sha": "86028a0d05c0a8eaaa40a60c19ca0493e4bccaaa", "filename": "libstdc++-v3/include/backward/algobase.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -64,26 +64,26 @@\n #include <ext/memory>\n \n // Names from stl_algobase.h\n-using std::iter_swap; \n-using std::swap; \n-using std::min; \n-using std::max; \n-using std::copy; \n-using std::copy_backward; \n-using std::fill; \n-using std::fill_n; \n-using std::mismatch; \n-using std::equal; \n-using std::lexicographical_compare; \n+using std::iter_swap;\n+using std::swap;\n+using std::min;\n+using std::max;\n+using std::copy;\n+using std::copy_backward;\n+using std::fill;\n+using std::fill_n;\n+using std::mismatch;\n+using std::equal;\n+using std::lexicographical_compare;\n \n // Names from stl_uninitialized.h\n using std::uninitialized_copy;\n using std::uninitialized_fill;\n using std::uninitialized_fill_n;\n \n // Names from ext/algorithm\n-using __gnu_cxx::copy_n; \n-using __gnu_cxx::lexicographical_compare_3way; \n+using __gnu_cxx::copy_n;\n+using __gnu_cxx::lexicographical_compare_3way;\n \n // Names from ext/memory\n using __gnu_cxx::uninitialized_copy_n;"}, {"sha": "96cdd54397704e7cabccfb6b9b7bc78f7650da56", "filename": "libstdc++-v3/include/backward/alloc.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -49,11 +49,11 @@\n #include <ext/debug_allocator.h>\n #include <ext/malloc_allocator.h>\n \n-using __gnu_cxx::__malloc_alloc; \n-using __gnu_cxx::__debug_alloc; \n-using __gnu_cxx::__pool_alloc; \n-using std::__alloc; \n-using std::__simple_alloc; \n+using __gnu_cxx::__malloc_alloc;\n+using __gnu_cxx::__debug_alloc;\n+using __gnu_cxx::__pool_alloc;\n+using std::__alloc;\n+using std::__simple_alloc;\n using std::allocator;\n \n-#endif \n+#endif"}, {"sha": "dfc67140655dbac9392b5a7f9d7e9d46f8627209", "filename": "libstdc++-v3/include/backward/complex.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -32,9 +32,9 @@\n #include <complex>\n \n using std::complex;\n-typedef complex<float> \t\tfloat_complex;\n-typedef complex<double> \tdouble_complex;\n-typedef complex<long double> \tlong_double_complex;\n+typedef complex<float>\t\tfloat_complex;\n+typedef complex<double>\t\tdouble_complex;\n+typedef complex<long double>\tlong_double_complex;\n \n #endif\n "}, {"sha": "76ea52abc9e282cbdc0bf835e8d07d601ed06979", "filename": "libstdc++-v3/include/backward/defalloc.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -47,7 +47,7 @@\n // This file WILL BE REMOVED in a future release.\n //\n // DO NOT USE THIS FILE unless you have an old container implementation\n-// that requires an allocator with the HP-style interface.  \n+// that requires an allocator with the HP-style interface.\n //\n // Standard-conforming allocators have a very different interface.  The\n // standard default allocator is declared in the header <memory>.\n@@ -59,8 +59,8 @@\n #include \"new.h\"\n #include <stddef.h>\n #include <stdlib.h>\n-#include <limits.h> \n-#include \"iostream.h\" \n+#include <limits.h>\n+#include \"iostream.h\"\n #include \"algobase.h\"\n \n \n@@ -69,7 +69,7 @@ inline _Tp* allocate(ptrdiff_t __size, _Tp*) {\n     set_new_handler(0);\n     _Tp* __tmp = (_Tp*)(::operator new((size_t)(__size * sizeof(_Tp))));\n     if (__tmp == 0) {\n-\tcerr << \"out of memory\" << endl; \n+\tcerr << \"out of memory\" << endl;\n \texit(1);\n     }\n     return __tmp;\n@@ -91,19 +91,19 @@ class allocator {\n     typedef const _Tp& const_reference;\n     typedef size_t size_type;\n     typedef ptrdiff_t difference_type;\n-    pointer allocate(size_type __n) { \n+    pointer allocate(size_type __n) {\n \treturn ::allocate((difference_type)__n, (pointer)0);\n     }\n     void deallocate(pointer __p) { ::deallocate(__p); }\n     pointer address(reference __x) { return (pointer)&__x; }\n-    const_pointer const_address(const_reference __x) { \n-\treturn (const_pointer)&__x; \n+    const_pointer const_address(const_reference __x) {\n+\treturn (const_pointer)&__x;\n     }\n-    size_type init_page_size() { \n-\treturn max(size_type(1), size_type(4096/sizeof(_Tp))); \n+    size_type init_page_size() {\n+\treturn max(size_type(1), size_type(4096/sizeof(_Tp)));\n     }\n-    size_type max_size() const { \n-\treturn max(size_type(1), size_type(UINT_MAX/sizeof(_Tp))); \n+    size_type max_size() const {\n+\treturn max(size_type(1), size_type(UINT_MAX/sizeof(_Tp)));\n     }\n };\n "}, {"sha": "9fc8719c07a1a1177fd0106aa5d3ea0af46a24a3", "filename": "libstdc++-v3/include/backward/function.h", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -63,65 +63,65 @@\n #include <ext/functional>\n \n // Names from stl_function.h\n-using std::unary_function; \n-using std::binary_function; \n-using std::plus; \n-using std::minus; \n-using std::multiplies; \n-using std::divides; \n-using std::modulus; \n-using std::negate; \n-using std::equal_to; \n-using std::not_equal_to; \n-using std::greater; \n-using std::less; \n-using std::greater_equal; \n-using std::less_equal; \n-using std::logical_and; \n-using std::logical_or; \n-using std::logical_not; \n-using std::unary_negate; \n-using std::binary_negate; \n-using std::not1; \n-using std::not2; \n-using std::binder1st; \n-using std::binder2nd; \n-using std::bind1st; \n-using std::bind2nd; \n-using std::pointer_to_unary_function; \n-using std::pointer_to_binary_function; \n-using std::ptr_fun; \n-using std::mem_fun_t; \n-using std::const_mem_fun_t; \n-using std::mem_fun_ref_t; \n-using std::const_mem_fun_ref_t; \n-using std::mem_fun1_t; \n-using std::const_mem_fun1_t; \n-using std::mem_fun1_ref_t; \n-using std::const_mem_fun1_ref_t; \n-using std::mem_fun; \n-using std::mem_fun_ref; \n+using std::unary_function;\n+using std::binary_function;\n+using std::plus;\n+using std::minus;\n+using std::multiplies;\n+using std::divides;\n+using std::modulus;\n+using std::negate;\n+using std::equal_to;\n+using std::not_equal_to;\n+using std::greater;\n+using std::less;\n+using std::greater_equal;\n+using std::less_equal;\n+using std::logical_and;\n+using std::logical_or;\n+using std::logical_not;\n+using std::unary_negate;\n+using std::binary_negate;\n+using std::not1;\n+using std::not2;\n+using std::binder1st;\n+using std::binder2nd;\n+using std::bind1st;\n+using std::bind2nd;\n+using std::pointer_to_unary_function;\n+using std::pointer_to_binary_function;\n+using std::ptr_fun;\n+using std::mem_fun_t;\n+using std::const_mem_fun_t;\n+using std::mem_fun_ref_t;\n+using std::const_mem_fun_ref_t;\n+using std::mem_fun1_t;\n+using std::const_mem_fun1_t;\n+using std::mem_fun1_ref_t;\n+using std::const_mem_fun1_ref_t;\n+using std::mem_fun;\n+using std::mem_fun_ref;\n \n // Names from ext/functional\n-using __gnu_cxx::identity_element; \n-using __gnu_cxx::unary_compose; \n-using __gnu_cxx::binary_compose; \n-using __gnu_cxx::compose1; \n-using __gnu_cxx::compose2; \n-using __gnu_cxx::identity; \n-using __gnu_cxx::select1st; \n-using __gnu_cxx::select2nd; \n-using __gnu_cxx::project1st; \n-using __gnu_cxx::project2nd; \n-using __gnu_cxx::constant_void_fun; \n-using __gnu_cxx::constant_unary_fun; \n-using __gnu_cxx::constant_binary_fun; \n-using __gnu_cxx::constant0; \n-using __gnu_cxx::constant1; \n-using __gnu_cxx::constant2; \n-using __gnu_cxx::subtractive_rng; \n-using __gnu_cxx::mem_fun1; \n-using __gnu_cxx::mem_fun1_ref; \n+using __gnu_cxx::identity_element;\n+using __gnu_cxx::unary_compose;\n+using __gnu_cxx::binary_compose;\n+using __gnu_cxx::compose1;\n+using __gnu_cxx::compose2;\n+using __gnu_cxx::identity;\n+using __gnu_cxx::select1st;\n+using __gnu_cxx::select2nd;\n+using __gnu_cxx::project1st;\n+using __gnu_cxx::project2nd;\n+using __gnu_cxx::constant_void_fun;\n+using __gnu_cxx::constant_unary_fun;\n+using __gnu_cxx::constant_binary_fun;\n+using __gnu_cxx::constant0;\n+using __gnu_cxx::constant1;\n+using __gnu_cxx::constant2;\n+using __gnu_cxx::subtractive_rng;\n+using __gnu_cxx::mem_fun1;\n+using __gnu_cxx::mem_fun1_ref;\n \n #endif /* _BACKWARD_FUNCTION_H */\n "}, {"sha": "659176a73c5eca887e67fd82ee00745a01b0da49", "filename": "libstdc++-v3/include/backward/iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -116,7 +116,7 @@ template<class _Iter>\n \n using std::distance;\n using __gnu_cxx::distance; // 3-parameter extension\n-using std::advance; \n+using std::advance;\n \n using std::insert_iterator;\n using std::front_insert_iterator;\n@@ -145,7 +145,7 @@ template <class _Tp>\n   inline void\n   destroy(_Tp* __pointer)\n   { std::_Destroy(__pointer); }\n-  \n+\n template <class _ForwardIterator>\n   inline void\n   destroy(_ForwardIterator __first, _ForwardIterator __last)"}, {"sha": "00a4819a0bb26d35a40edde29e9a67bfc8870054", "filename": "libstdc++-v3/include/backward/new.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -7,12 +7,12 @@\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-// \n+//\n // GCC is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-// \n+//\n // You should have received a copy of the GNU General Public License\n // along with GCC; see the file COPYING.  If not, write to\n // the Free Software Foundation, 59 Temple Place - Suite 330,\n@@ -39,4 +39,4 @@ using std::nothrow;\n using std::new_handler;\n using std::set_new_handler;\n \n-#endif \n+#endif"}, {"sha": "a72de09d9eb2508792af7a707277f195994d7d7c", "filename": "libstdc++-v3/include/backward/ostream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -31,7 +31,7 @@\n #include \"backward_warning.h\"\n #include \"iostream.h\"\n \n-#endif \n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "a3e2ff3af091b710f17becd638b45e34ad424440", "filename": "libstdc++-v3/include/backward/queue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -34,7 +34,7 @@\n using std::queue;\n using std::priority_queue;\n \n-#endif \n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "fc6715aa750cfd98c0b55631790f80229ca6b424", "filename": "libstdc++-v3/include/backward/rope.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -44,14 +44,14 @@\n #define _BACKWARD_ROPE_H 1\n \n #include \"backward_warning.h\"\n-#include \"hashtable.h\"   \n+#include \"hashtable.h\"\n #include <ext/rope>\n \n-using __gnu_cxx::char_producer; \n-using __gnu_cxx::sequence_buffer; \n-using __gnu_cxx::rope; \n-using __gnu_cxx::crope; \n-using __gnu_cxx::wrope; \n+using __gnu_cxx::char_producer;\n+using __gnu_cxx::sequence_buffer;\n+using __gnu_cxx::rope;\n+using __gnu_cxx::crope;\n+using __gnu_cxx::wrope;\n \n #endif /* _BACKWARD_ROPE_H */\n "}, {"sha": "5540c7eebd1608b61b90f407f9e170dc3dc8b717", "filename": "libstdc++-v3/include/backward/stream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -31,7 +31,7 @@\n #include \"backward_warning.h\"\n #include \"iostream.h\"\n \n-#endif \n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "fc9825ef0a3f7686ea3a44489c04b4bf2fb25b72", "filename": "libstdc++-v3/include/backward/streambuf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -33,7 +33,7 @@\n \n using std::streambuf;\n \n-#endif \n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "695d7970db91fdafd1a1ece0b2e93d7211d5f048", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -61,12 +61,12 @@ namespace std\n   // Note that this class is not a template.\n   class strstreambuf : public basic_streambuf<char, char_traits<char> >\n   {\n-  public:                         \n+  public:\n     // Types.\n     typedef char_traits<char>              _Traits;\n     typedef basic_streambuf<char, _Traits> _Base;\n \n-  public:  \n+  public:\n     // Constructor, destructor\n     explicit strstreambuf(streamsize __initial_capacity = 0);\n     strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));\n@@ -97,15 +97,15 @@ namespace std\n     virtual pos_type seekpos(pos_type __pos, ios_base::openmode __mode\n \t\t\t     = ios_base::in | ios_base::out);\n \n-  private:  \n+  private:\n     // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n     char* _M_alloc(size_t);\n     void  _M_free(char*);\n \n     // Helper function used in constructors.\n     void _M_setup(char* __get, char* __put, streamsize __n);\n \n-  private:  \n+  private:\n     // Data members.\n     void* (*_M_alloc_fun)(size_t);\n     void  (*_M_free_fun)(void*);\n@@ -171,4 +171,4 @@ namespace std\n     strstreambuf _M_buf;\n   };\n } // namespace std\n-#endif \n+#endif"}, {"sha": "06de2bd39d478a23f783f8811892a78d80b5b4df", "filename": "libstdc++-v3/include/backward/tempbuf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -60,9 +60,9 @@\n #include \"pair.h\"\n #include \"iterator.h\"\n #include <limits.h>\n-#include <stddef.h> \n-#include <stdlib.h> \n-#include <bits/type_traits.h>  \n+#include <stddef.h>\n+#include <stdlib.h>\n+#include <bits/type_traits.h>\n #include <bits/stl_construct.h>\n #include <bits/stl_uninitialized.h>\n #include <ext/memory>"}, {"sha": "fcfcbf48dc478f5a68102e53535c0c2d12d5e96d", "filename": "libstdc++-v3/include/backward/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -49,7 +49,7 @@\n \n using __gnu_cxx::rb_tree;\n \n-#endif \n+#endif\n // Local Variables:\n // mode:C++\n // End:"}, {"sha": "ba9b704c1dc155590be19f5391406620971f0a0c", "filename": "libstdc++-v3/include/backward/vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e64738b3087bda05d4b499430212b785fda6cfb9/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h?ref=e64738b3087bda05d4b499430212b785fda6cfb9", "patch": "@@ -58,7 +58,7 @@\n \n #include \"backward_warning.h\"\n #include \"algobase.h\"\n-#include \"alloc.h\"  \n+#include \"alloc.h\"\n #include <vector>\n \n using std::vector;"}]}