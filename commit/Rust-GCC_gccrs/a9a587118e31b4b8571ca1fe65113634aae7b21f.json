{"sha": "a9a587118e31b4b8571ca1fe65113634aae7b21f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlhNTg3MTE4ZTMxYjRiODU3MWNhMWZlNjUxMTM2MzRhYWU3YjIxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-05-21T21:05:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-05-21T21:05:33Z"}, "message": "re PR tree-optimization/53436 (Volatile behaves strange with OpenMP)\n\n\tPR tree-optimization/53436\n\t* omp-low.c (omp_build_component_ref): New function.\n\t(build_receiver_ref, build_sender_ref, create_task_copyfn): Use it.\n\nFrom-SVN: r187741", "tree": {"sha": "62d3d5a4a2e164d5d28141713819875e9a379f3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62d3d5a4a2e164d5d28141713819875e9a379f3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9a587118e31b4b8571ca1fe65113634aae7b21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a587118e31b4b8571ca1fe65113634aae7b21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a587118e31b4b8571ca1fe65113634aae7b21f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a587118e31b4b8571ca1fe65113634aae7b21f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1ea1f5c047c3e94c8b2c604bb1af7608cc27724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ea1f5c047c3e94c8b2c604bb1af7608cc27724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ea1f5c047c3e94c8b2c604bb1af7608cc27724"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "798ed806f59c12d519cc48902240aee7441dc017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a587118e31b4b8571ca1fe65113634aae7b21f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a587118e31b4b8571ca1fe65113634aae7b21f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9a587118e31b4b8571ca1fe65113634aae7b21f", "patch": "@@ -1,3 +1,9 @@\n+2012-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53436\n+\t* omp-low.c (omp_build_component_ref): New function.\n+\t(build_receiver_ref, build_sender_ref, create_task_copyfn): Use it.\n+\n 2012-05-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (put_condition_code): Change \"reverse\" and \"fp\""}, {"sha": "980d06f89a1b987eeebf550ee023aa384a3105c3", "filename": "gcc/omp-low.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a587118e31b4b8571ca1fe65113634aae7b21f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a587118e31b4b8571ca1fe65113634aae7b21f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a9a587118e31b4b8571ca1fe65113634aae7b21f", "patch": "@@ -852,6 +852,19 @@ omp_copy_decl_1 (tree var, omp_context *ctx)\n   return omp_copy_decl_2 (var, DECL_NAME (var), TREE_TYPE (var), ctx);\n }\n \n+/* Build COMPONENT_REF and set TREE_THIS_VOLATILE and TREE_READONLY on it\n+   as appropriate.  */\n+static tree\n+omp_build_component_ref (tree obj, tree field)\n+{\n+  tree ret = build3 (COMPONENT_REF, TREE_TYPE (field), obj, field, NULL);\n+  if (TREE_THIS_VOLATILE (field))\n+    TREE_THIS_VOLATILE (ret) |= 1;\n+  if (TREE_READONLY (field))\n+    TREE_READONLY (ret) |= 1;\n+  return ret;\n+}\n+\n /* Build tree nodes to access the field for VAR on the receiver side.  */\n \n static tree\n@@ -866,7 +879,7 @@ build_receiver_ref (tree var, bool by_ref, omp_context *ctx)\n     field = x;\n \n   x = build_simple_mem_ref (ctx->receiver_decl);\n-  x = build3 (COMPONENT_REF, TREE_TYPE (field), x, field, NULL);\n+  x = omp_build_component_ref (x, field);\n   if (by_ref)\n     x = build_simple_mem_ref (x);\n \n@@ -916,8 +929,7 @@ static tree\n build_sender_ref (tree var, omp_context *ctx)\n {\n   tree field = lookup_sfield (var, ctx);\n-  return build3 (COMPONENT_REF, TREE_TYPE (field),\n-\t\t ctx->sender_decl, field, NULL);\n+  return omp_build_component_ref (ctx->sender_decl, field);\n }\n \n /* Add a new field for VAR inside the structure CTX->SENDER_DECL.  */\n@@ -6529,7 +6541,7 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n \t  sf = (tree) n->value;\n \t  sf = *(tree *) pointer_map_contains (tcctx.cb.decl_map, sf);\n \t  src = build_simple_mem_ref_loc (loc, sarg);\n-\t  src = build3 (COMPONENT_REF, TREE_TYPE (sf), src, sf, NULL);\n+\t  src = omp_build_component_ref (src, sf);\n \t  t = build2 (MODIFY_EXPR, TREE_TYPE (*p), *p, src);\n \t  append_to_statement_list (t, &list);\n \t}\n@@ -6552,9 +6564,9 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n \tif (tcctx.cb.decl_map)\n \t  sf = *(tree *) pointer_map_contains (tcctx.cb.decl_map, sf);\n \tsrc = build_simple_mem_ref_loc (loc, sarg);\n-\tsrc = build3 (COMPONENT_REF, TREE_TYPE (sf), src, sf, NULL);\n+\tsrc = omp_build_component_ref (src, sf);\n \tdst = build_simple_mem_ref_loc (loc, arg);\n-\tdst = build3 (COMPONENT_REF, TREE_TYPE (f), dst, f, NULL);\n+\tdst = omp_build_component_ref (dst, f);\n \tt = build2 (MODIFY_EXPR, TREE_TYPE (dst), dst, src);\n \tappend_to_statement_list (t, &list);\n \tbreak;\n@@ -6575,14 +6587,14 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n \t    if (tcctx.cb.decl_map)\n \t      sf = *(tree *) pointer_map_contains (tcctx.cb.decl_map, sf);\n \t    src = build_simple_mem_ref_loc (loc, sarg);\n-\t    src = build3 (COMPONENT_REF, TREE_TYPE (sf), src, sf, NULL);\n+\t    src = omp_build_component_ref (src, sf);\n \t    if (use_pointer_for_field (decl, NULL) || is_reference (decl))\n \t      src = build_simple_mem_ref_loc (loc, src);\n \t  }\n \telse\n \t  src = decl;\n \tdst = build_simple_mem_ref_loc (loc, arg);\n-\tdst = build3 (COMPONENT_REF, TREE_TYPE (f), dst, f, NULL);\n+\tdst = omp_build_component_ref (dst, f);\n \tt = lang_hooks.decls.omp_clause_copy_ctor (c, dst, src);\n \tappend_to_statement_list (t, &list);\n \tbreak;\n@@ -6601,14 +6613,14 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n \t    if (tcctx.cb.decl_map)\n \t      sf = *(tree *) pointer_map_contains (tcctx.cb.decl_map, sf);\n \t    src = build_simple_mem_ref_loc (loc, sarg);\n-\t    src = build3 (COMPONENT_REF, TREE_TYPE (sf), src, sf, NULL);\n+\t    src = omp_build_component_ref (src, sf);\n \t    if (use_pointer_for_field (decl, NULL))\n \t      src = build_simple_mem_ref_loc (loc, src);\n \t  }\n \telse\n \t  src = decl;\n \tdst = build_simple_mem_ref_loc (loc, arg);\n-\tdst = build3 (COMPONENT_REF, TREE_TYPE (f), dst, f, NULL);\n+\tdst = omp_build_component_ref (dst, f);\n \tt = build2 (MODIFY_EXPR, TREE_TYPE (dst), dst, src);\n \tappend_to_statement_list (t, &list);\n \tbreak;\n@@ -6640,18 +6652,18 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n \t  sf = (tree) n->value;\n \t  sf = *(tree *) pointer_map_contains (tcctx.cb.decl_map, sf);\n \t  src = build_simple_mem_ref_loc (loc, sarg);\n-\t  src = build3 (COMPONENT_REF, TREE_TYPE (sf), src, sf, NULL);\n+\t  src = omp_build_component_ref (src, sf);\n \t  src = build_simple_mem_ref_loc (loc, src);\n \t  dst = build_simple_mem_ref_loc (loc, arg);\n-\t  dst = build3 (COMPONENT_REF, TREE_TYPE (f), dst, f, NULL);\n+\t  dst = omp_build_component_ref (dst, f);\n \t  t = lang_hooks.decls.omp_clause_copy_ctor (c, dst, src);\n \t  append_to_statement_list (t, &list);\n \t  n = splay_tree_lookup (ctx->field_map,\n \t\t\t\t (splay_tree_key) TREE_OPERAND (ind, 0));\n \t  df = (tree) n->value;\n \t  df = *(tree *) pointer_map_contains (tcctx.cb.decl_map, df);\n \t  ptr = build_simple_mem_ref_loc (loc, arg);\n-\t  ptr = build3 (COMPONENT_REF, TREE_TYPE (df), ptr, df, NULL);\n+\t  ptr = omp_build_component_ref (ptr, df);\n \t  t = build2 (MODIFY_EXPR, TREE_TYPE (ptr), ptr,\n \t\t      build_fold_addr_expr_loc (loc, dst));\n \t  append_to_statement_list (t, &list);"}]}