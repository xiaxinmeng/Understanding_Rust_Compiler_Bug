{"sha": "52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3NzhlMmE2MmQ4ZTllYWNmMzMzM2UyY2IzNGI2NWE0NWFhZjEyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-07-03T22:02:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-07-03T22:02:18Z"}, "message": "tree-flow.h (loop_only_exit_p): Declare.\n\n\t* tree-flow.h (loop_only_exit_p): Declare.\n\t* tree-ssa-loop-niter.c (loop_only_exit_p): Make public.\n\t* tree-ssa-loop-ivopts.c (may_eliminate_iv): Reinstate direct check on\n\tthe number of iterations if it is constant.  Otherwise, if this is the\n\tonly possible exit of the loop, use the conservative estimate on the\n\tnumber of iterations of the entire loop if available.\n\nFrom-SVN: r137437", "tree": {"sha": "9886efa3473e49dd9518ad36302fcd41d4de7204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9886efa3473e49dd9518ad36302fcd41d4de7204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/comments", "author": null, "committer": null, "parents": [{"sha": "b8fff079189688a014f9db20afaabb90a3d7d1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8fff079189688a014f9db20afaabb90a3d7d1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8fff079189688a014f9db20afaabb90a3d7d1a6"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "42f0b325cc72928ce11ac3547fe4307f6d7d522d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -1,3 +1,12 @@\n+2008-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-flow.h (loop_only_exit_p): Declare.\n+\t* tree-ssa-loop-niter.c (loop_only_exit_p): Make public.\n+\t* tree-ssa-loop-ivopts.c (may_eliminate_iv): Reinstate direct check on\n+\tthe number of iterations if it is constant.  Otherwise, if this is the\n+\tonly possible exit of the loop, use the conservative estimate on the\n+\tnumber of iterations of the entire loop if available.\n+\n 2008-07-03  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (libgcc.mvars): Add LIBGCC_SYNC and LIBGCC_SYNC_CFLAGS."}, {"sha": "51e89e577564fc2a731e19b569a944839c1a68d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -1,3 +1,8 @@\n+2008-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization3.adb: New test.\n+\t* gnat.dg/loop_optimization3_pkg.ad[sb]: New helper.\n+\n 2008-07-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/36710"}, {"sha": "e69f535fb0564276b85032619bb1a758964a42a6", "filename": "gcc/testsuite/gnat.dg/loop_optimization3.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3.adb?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Loop_Optimization3_Pkg; use Loop_Optimization3_Pkg;\n+\n+procedure Loop_Optimization3 is\n+\n+  type Arr is array (Integer range -3 .. 3) of Integer;\n+  C : constant Arr := (1, others => F(2));\n+\n+begin\n+  if C /= (1, 2, 2, 2, 2, 2, 2) then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "7a64815033d8571bc90414a489e64de0858861cb", "filename": "gcc/testsuite/gnat.dg/loop_optimization3_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3_pkg.adb?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -0,0 +1,8 @@\n+package body Loop_Optimization3_Pkg is\n+\n+  function F (n : Integer) return Integer is\n+  begin\n+    return n;\n+  end;\n+\n+end Loop_Optimization3_Pkg;"}, {"sha": "90f4fc32bad2b18e2d75ad0148acdab381167dde", "filename": "gcc/testsuite/gnat.dg/loop_optimization3_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization3_pkg.ads?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -0,0 +1,5 @@\n+package Loop_Optimization3_Pkg is\n+\n+  function F (n : Integer) return Integer;\n+\n+end Loop_Optimization3_Pkg;"}, {"sha": "5479c3342c7f3ab13aa501ffb3d8531956079b95", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -1039,6 +1039,7 @@ void tree_ssa_iv_optimize (void);\n unsigned tree_predictive_commoning (void);\n bool parallelize_loops (void);\n \n+bool loop_only_exit_p (const struct loop *, const_edge);\n bool number_of_iterations_exit (struct loop *, edge,\n \t\t\t\tstruct tree_niter_desc *niter, bool);\n tree find_loop_niter (struct loop *, edge *);"}, {"sha": "ce5c05cd88f743d623106685dc7f0e296e8d38df", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -3745,13 +3745,12 @@ may_eliminate_iv (struct ivopts_data *data,\n   tree nit, period;\n   struct loop *loop = data->current_loop;\n   aff_tree bnd;\n-  double_int period_value, max_niter;\n \n   if (TREE_CODE (cand->iv->step) != INTEGER_CST)\n     return false;\n \n-  /* For now works only for exits that dominate the loop latch.  TODO -- extend\n-     for other conditions inside loop body.  */\n+  /* For now works only for exits that dominate the loop latch.\n+     TODO: extend to other conditions inside loop body.  */\n   ex_bb = bb_for_stmt (use->stmt);\n   if (use->stmt != last_stmt (ex_bb)\n       || TREE_CODE (use->stmt) != COND_EXPR)\n@@ -3769,19 +3768,33 @@ may_eliminate_iv (struct ivopts_data *data,\n   if (!nit)\n     return false;\n \n-  /* Determine whether we may use the variable to test whether niter iterations\n-     elapsed.  This is the case iff the period of the induction variable is\n-     greater than the number of iterations.  */\n+  /* Determine whether we can use the variable to test the exit condition.\n+     This is the case iff the period of the induction variable is greater\n+     than the number of iterations for which the exit condition is true.  */\n   period = iv_period (cand->iv);\n-  if (!period)\n-    return false;\n \n-  /* Compare the period with the estimate on the number of iterations of the\n-     loop.  */\n-  if (!estimated_loop_iterations (loop, true, &max_niter))\n-    return false;\n-  period_value = tree_to_double_int (period);\n-  if (double_int_ucmp (period_value, max_niter) <= 0)\n+  /* If the number of iterations is constant, compare against it directly.  */\n+  if (TREE_CODE (nit) == INTEGER_CST)\n+    {\n+      if (!tree_int_cst_lt (nit, period))\n+\treturn false;\n+    }\n+\n+  /* If not, and if this is the only possible exit of the loop, see whether\n+     we can get a conservative estimate on the number of iterations of the\n+     entire loop and compare against that instead.  */\n+  else if (loop_only_exit_p (loop, exit))\n+    {\n+      double_int period_value, max_niter;\n+      if (!estimated_loop_iterations (loop, true, &max_niter))\n+\treturn false;\n+      period_value = tree_to_double_int (period);\n+      if (double_int_ucmp (max_niter, period_value) >= 0)\n+\treturn false;\n+    }\n+\n+  /* Otherwise, punt.  */\n+  else\n     return false;\n \n   cand_value_at (loop, cand, use->stmt, nit, &bnd);"}, {"sha": "80b45c298b7bfa27b498fc9a3cefebb6ed71e39c", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52778e2a62d8e9eacf3333e2cb34b65a45aaf12d/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=52778e2a62d8e9eacf3333e2cb34b65a45aaf12d", "patch": "@@ -1672,7 +1672,7 @@ simplify_using_outer_evolutions (struct loop *loop, tree expr)\n \n /* Returns true if EXIT is the only possible exit from LOOP.  */\n \n-static bool\n+bool\n loop_only_exit_p (const struct loop *loop, const_edge exit)\n {\n   basic_block *body;"}]}