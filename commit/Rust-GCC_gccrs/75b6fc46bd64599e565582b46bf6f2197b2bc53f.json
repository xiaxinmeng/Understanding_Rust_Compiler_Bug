{"sha": "75b6fc46bd64599e565582b46bf6f2197b2bc53f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzViNmZjNDZiZDY0NTk5ZTU2NTU4MmI0NmJmNmYyMTk3YjJiYzUzZg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-05T11:43:44Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-06T15:29:01Z"}, "message": "Move scan for unused names to be after type resolution\n\nMethods are resolved as part of type resolution so scanning ribs early\non will results in false warnings about unused methods.", "tree": {"sha": "1eecacbddf9c31f91c000cb76939c483234974e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eecacbddf9c31f91c000cb76939c483234974e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75b6fc46bd64599e565582b46bf6f2197b2bc53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b6fc46bd64599e565582b46bf6f2197b2bc53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b6fc46bd64599e565582b46bf6f2197b2bc53f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b6fc46bd64599e565582b46bf6f2197b2bc53f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "599b04aa7d928a305029d8e8cf5d6f5c5a683da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599b04aa7d928a305029d8e8cf5d6f5c5a683da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599b04aa7d928a305029d8e8cf5d6f5c5a683da8"}], "stats": {"total": 102, "additions": 43, "deletions": 59}, "files": [{"sha": "cc8e4519039a56ffbf4a3a1e40454b60e91b006f", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=75b6fc46bd64599e565582b46bf6f2197b2bc53f", "patch": "@@ -24,7 +24,6 @@\n #include \"rust-ast-resolve-type.h\"\n #include \"rust-ast-resolve-pattern.h\"\n #include \"rust-ast-resolve-stmt.h\"\n-#include \"rust-ast-resolve-unused.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -110,9 +109,6 @@ class ResolveItem : public ResolverBase\n     ResolveExpr::go (function.get_definition ().get (),\n \t\t     function.get_node_id ());\n \n-    ScanUnused::Scan (resolver->get_name_scope ().peek ());\n-    ScanUnused::Scan (resolver->get_type_scope ().peek ());\n-\n     resolver->get_name_scope ().pop ();\n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "928cf1114a9a97378d55edfa4632547d2c08d8ca", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=75b6fc46bd64599e565582b46bf6f2197b2bc53f", "patch": "@@ -24,10 +24,10 @@\n namespace Rust {\n namespace Resolver {\n \n-class ScanUnused : public ResolverBase\n+class ScanUnused\n {\n public:\n-  static void Scan (Rib *r)\n+  static void ScanRib (Rib *r)\n   {\n     r->iterate_decls ([&] (NodeId decl_node_id, Location locus) -> bool {\n       if (!r->have_references_for_node (decl_node_id))\n@@ -37,6 +37,13 @@ class ScanUnused : public ResolverBase\n       return true;\n     });\n   }\n+\n+  static void Scan ()\n+  {\n+    auto resolver = Resolver::get ();\n+    resolver->iterate_name_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n+    resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n+  }\n };\n \n } // namespace Resolver"}, {"sha": "593a7324756e1df7fc511eb62ea1068ca983116e", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=75b6fc46bd64599e565582b46bf6f2197b2bc53f", "patch": "@@ -22,7 +22,6 @@\n #include \"rust-ast-resolve-toplevel.h\"\n #include \"rust-ast-resolve-item.h\"\n #include \"rust-ast-resolve-expr.h\"\n-#include \"rust-ast-resolve-unused.h\"\n \n #define MKBUILTIN_TYPE(_X, _R, _TY)                                            \\\n   do                                                                           \\\n@@ -284,9 +283,6 @@ NameResolution::go (AST::Crate &crate)\n   // next we can drill down into the items and their scopes\n   for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n     ResolveItem::go (it->get ());\n-\n-  ScanUnused::Scan (resolver->get_name_scope ().peek ());\n-  ScanUnused::Scan (resolver->get_type_scope ().peek ());\n }\n \n // rust-ast-resolve-expr.h\n@@ -308,9 +304,6 @@ ResolveExpr::visit (AST::BlockExpr &expr)\n   if (expr.has_tail_expr ())\n     ResolveExpr::go (expr.get_tail_expr ().get (), expr.get_node_id ());\n \n-  ScanUnused::Scan (resolver->get_name_scope ().peek ());\n-  ScanUnused::Scan (resolver->get_type_scope ().peek ());\n-\n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n }"}, {"sha": "5544f30d94653dbd40101bc947b7e83d73e22dc9", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=75b6fc46bd64599e565582b46bf6f2197b2bc53f", "patch": "@@ -290,6 +290,23 @@ class Resolver\n     return it->second.size ();\n   }\n \n+  void iterate_name_ribs (std::function<void (Rib *)> cb)\n+  {\n+    for (auto it = name_ribs.begin (); it != name_ribs.end (); it++)\n+      cb (it->second);\n+  }\n+\n+  void iterate_type_ribs (std::function<void (Rib *)> cb)\n+  {\n+    for (auto it = type_ribs.begin (); it != type_ribs.end (); it++)\n+      {\n+\tif (it->first == global_type_node_id)\n+\t  continue;\n+\n+\tcb (it->second);\n+      }\n+  }\n+\n private:\n   Resolver ();\n "}, {"sha": "a2e5edd025f51f05a19c1931960ae626d65f3bf4", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=75b6fc46bd64599e565582b46bf6f2197b2bc53f", "patch": "@@ -35,6 +35,7 @@\n #include \"rust-ast-lower.h\"\n #include \"rust-hir-type-check.h\"\n #include \"rust-tycheck-dump.h\"\n+#include \"rust-ast-resolve-unused.h\"\n #include \"rust-compile.h\"\n \n extern Linemap *\n@@ -524,9 +525,7 @@ Session::parse_file (const char *filename)\n     }\n \n   // resolution pipeline stage\n-  resolution (parsed_crate);\n-  fprintf (stderr, \"\\033[0;31mSUCCESSFULLY FINISHED RESOLUTION \\n\\033[0m\");\n-\n+  Resolver::NameResolution::Resolve (parsed_crate);\n   if (options.dump_option == CompileOptions::RESOLUTION_DUMP)\n     {\n       // TODO: what do I dump here? resolved names? AST with resolved names?\n@@ -536,7 +535,7 @@ Session::parse_file (const char *filename)\n     return;\n \n   // lower AST to HIR\n-  HIR::Crate hir = lower_ast (parsed_crate);\n+  HIR::Crate hir = HIR::ASTLowering::Resolve (parsed_crate);\n   if (options.dump_option == CompileOptions::HIR_DUMP)\n     {\n       fprintf (stderr, \"%s\", hir.as_string ().c_str ());\n@@ -547,11 +546,17 @@ Session::parse_file (const char *filename)\n     return;\n \n   // type resolve\n-  type_resolution (hir);\n+  Resolver::TypeResolution::Resolve (hir);\n+  if (options.dump_option == CompileOptions::TYPE_RESOLUTION_DUMP)\n+    {\n+      auto buf = Resolver::TypeResolverDump::go (hir);\n+      fprintf (stderr, \"%s\\n\", buf.c_str ());\n+      return;\n+    }\n \n-  // FIXME this needs an option of itself\n-  // auto buf = Resolver::TypeResolverDump::go (hir);\n-  // fprintf (stderr, \"%s\\n\", buf.c_str ());\n+  // scan unused has to be done after type resolution since methods are resolved\n+  // at that point\n+  Resolver::ScanUnused::Scan ();\n \n   if (saw_errors ())\n     return;\n@@ -788,31 +793,6 @@ Session::expansion (AST::Crate &crate)\n   fprintf (stderr, \"finished expansion\\n\");\n }\n \n-void\n-Session::resolution (AST::Crate &crate)\n-{\n-  fprintf (stderr, \"started name resolution\\n\");\n-  Resolver::NameResolution::Resolve (crate);\n-  fprintf (stderr, \"finished name resolution\\n\");\n-}\n-\n-HIR::Crate\n-Session::lower_ast (AST::Crate &crate)\n-{\n-  fprintf (stderr, \"started lowering AST\\n\");\n-  auto hir = HIR::ASTLowering::Resolve (crate);\n-  fprintf (stderr, \"finished lowering AST\\n\");\n-  return hir;\n-}\n-\n-void\n-Session::type_resolution (HIR::Crate &crate)\n-{\n-  fprintf (stderr, \"started type resolution\\n\");\n-  Resolver::TypeResolution::Resolve (crate);\n-  fprintf (stderr, \"finished type resolution\\n\");\n-}\n-\n void\n TargetOptions::dump_target_options () const\n {"}, {"sha": "07d54615ce4871affc5e02a690e613beab11795b", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75b6fc46bd64599e565582b46bf6f2197b2bc53f/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=75b6fc46bd64599e565582b46bf6f2197b2bc53f", "patch": "@@ -177,7 +177,8 @@ struct CompileOptions\n     RESOLUTION_DUMP,\n     TARGET_OPTION_DUMP,\n     HIR_DUMP,\n-    // TODO: add more?\n+    TYPE_RESOLUTION_DUMP,\n+\n   } dump_option;\n \n   /* configuration options - actually useful for conditional compilation and\n@@ -204,8 +205,6 @@ struct Session\n   // backend linemap\n   Linemap *linemap;\n \n-  // TODO: replace raw pointers with smart pointers?\n-\n public:\n   /* Initialise compiler session. Corresponds to langhook grs_langhook_init().\n    * Note that this is called after option handling. */\n@@ -217,7 +216,6 @@ struct Session\n   void init_options ();\n \n private:\n-  // TODO: should this be private or public?\n   void parse_file (const char *filename);\n   bool enable_dump (std::string arg);\n \n@@ -232,23 +230,16 @@ struct Session\n    * (top-level inner attribute creation from command line arguments), setting\n    * options maybe, registering lints maybe, loading plugins maybe. */\n   void register_plugins (AST::Crate &crate);\n+\n   /* Injection pipeline stage. TODO maybe move to another object? Maybe have\n    * some lint checks (in future, obviously), register builtin macros, crate\n    * injection. */\n   void injection (AST::Crate &crate);\n+\n   /* Expansion pipeline stage. TODO maybe move to another object? Expands all\n    * macros, maybe build test harness in future, AST validation, maybe create\n    * macro crate (if not rustdoc).*/\n   void expansion (AST::Crate &crate);\n-  /* Resolution pipeline stage. TODO maybe move to another object.\n-   * Performs name resolution and type resolution, maybe complete gated\n-   * feature checking, maybe create buffered lints in future. */\n-  void resolution (AST::Crate &crate);\n-  /* This lowers the AST down to HIR and assigns all mappings from AST\n-   * NodeIds back to HirIds */\n-  HIR::Crate lower_ast (AST::Crate &crate);\n-  /* This adds the type resolution process */\n-  void type_resolution (HIR::Crate &crate);\n };\n } // namespace Rust\n "}]}