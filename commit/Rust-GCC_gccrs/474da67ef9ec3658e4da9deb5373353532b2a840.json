{"sha": "474da67ef9ec3658e4da9deb5373353532b2a840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0ZGE2N2VmOWVjMzY1OGU0ZGE5ZGViNTM3MzM1MzUzMmIyYTg0MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-12-14T17:23:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-12-14T17:23:16Z"}, "message": "PR c/78673 - sprintf missing attribute nonnull on destination argument\n\nPR c/78673 - sprintf missing attribute nonnull on destination argument\nPR c/17308 - nonnull attribute not as useful as it could be\n\ngcc/ChangeLog:\n\n\tPR c/17308\n\t* builtin-attrs.def (ATTR_NONNULL_1_1, ATTR_NONNULL_1_2): Defined.\n\t(ATTR_NONNULL_1_3, ATTR_NONNULL_1_4, ATTR_NONNULL_1_5): Same.\n\t(ATTR_NOTHROW_NONNULL_1_1, ATTR_NOTHROW_NONNULL_1_2): Same.\n\t(ATTR_NOTHROW_NONNULL_1_3, ATTR_NOTHROW_NONNULL_1_4): Same.\n\t(ATTR_NOTHROW_NONNULL_1_5): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_1_2): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_2_0): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_2_3): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_3_0): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_3_4): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_4_0): Same.\n\t(ATTR_NONNULL_1_FORMAT_PRINTF_4_5): Same.\n\t* builtins.c (validate_arg): Add argument.  Treat null pointers\n\tpassed to nonnull arguments as invalid.\n\t(validate_arglist): Same.\n\t* builtins.def (fprintf, fprintf_unlocked): Add nonnull attribute.\n\t(printf, printf_unlocked, sprintf. vfprintf, vsprintf): Same.\n\t(__sprintf_chk, __vsprintf_chk, __fprintf_chk, __vfprintf_chk): Same.\n\t* calls.c (get_nonnull_ags, maybe_warn_null_arg): New functions.\n\t(initialize_argument_information): Diagnose null pointers passed to\n\targuments declared nonnull.\n\t* calls.h (get_nonnull_args): Declared.\n\ngcc/c-family/ChangeLog:\n\n\tPR c/17308\n\t* c-common.c (check_nonnull_arg): Disable when optimization\n\tis enabled.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/17308\n\t* gcc.dg/builtins-nonnull.c: New test.\n\t* gcc.dg/nonnull-4.c: New test.\n\nFrom-SVN: r243661", "tree": {"sha": "9216700dc546aef48d9bff1a0ab2203160ce0f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9216700dc546aef48d9bff1a0ab2203160ce0f8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/474da67ef9ec3658e4da9deb5373353532b2a840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474da67ef9ec3658e4da9deb5373353532b2a840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474da67ef9ec3658e4da9deb5373353532b2a840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474da67ef9ec3658e4da9deb5373353532b2a840/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4ba0852099ad28a533327ac25e8337910be28e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ba0852099ad28a533327ac25e8337910be28e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ba0852099ad28a533327ac25e8337910be28e8"}], "stats": {"total": 586, "additions": 566, "deletions": 20}, "files": [{"sha": "b52d9b41a28d5b53c3824b62143bd5818cbc7da1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -1,3 +1,29 @@\n+2016-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/17308\n+\t* builtin-attrs.def (ATTR_NONNULL_1_1, ATTR_NONNULL_1_2): Defined.\n+\t(ATTR_NONNULL_1_3, ATTR_NONNULL_1_4, ATTR_NONNULL_1_5): Same.\n+\t(ATTR_NOTHROW_NONNULL_1_1, ATTR_NOTHROW_NONNULL_1_2): Same.\n+\t(ATTR_NOTHROW_NONNULL_1_3, ATTR_NOTHROW_NONNULL_1_4): Same.\n+\t(ATTR_NOTHROW_NONNULL_1_5): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_1_2): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_2_0): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_2_3): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_3_0): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_3_4): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_4_0): Same.\n+\t(ATTR_NONNULL_1_FORMAT_PRINTF_4_5): Same.\n+\t* builtins.c (validate_arg): Add argument.  Treat null pointers\n+\tpassed to nonnull arguments as invalid.\n+\t(validate_arglist): Same.\n+\t* builtins.def (fprintf, fprintf_unlocked): Add nonnull attribute.\n+\t(printf, printf_unlocked, sprintf. vfprintf, vsprintf): Same.\n+\t(__sprintf_chk, __vsprintf_chk, __fprintf_chk, __vfprintf_chk): Same.\n+\t* calls.c (get_nonnull_ags, maybe_warn_null_arg): New functions.\n+\t(initialize_argument_information): Diagnose null pointers passed to\n+\targuments declared nonnull.\n+\t* calls.h (get_nonnull_args): Declared.\n+\n 2016-12-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_split_vec_extract_var): On ISA"}, {"sha": "22452d99c09f3fa9323d69cc13cb345bfc414618", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -72,6 +72,9 @@ DEF_ATTR_FOR_STRING (STR1, \"1\")\n \t\t      ATTR_##VALUE1, ATTR_LIST_##VALUE2)\n DEF_LIST_INT_INT (1,0)\n DEF_LIST_INT_INT (1,2)\n+DEF_LIST_INT_INT (1,3)\n+DEF_LIST_INT_INT (1,4)\n+DEF_LIST_INT_INT (1,5)\n DEF_LIST_INT_INT (2,0)\n DEF_LIST_INT_INT (2,3)\n DEF_LIST_INT_INT (3,0)\n@@ -205,6 +208,40 @@ DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_4, ATTR_NONNULL, ATTR_LIST_4, \\\n /* Nothrow functions whose fifth parameter is a nonnull pointer.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_5, ATTR_NONNULL, ATTR_LIST_5, \\\n \t\t\tATTR_NOTHROW_LIST)\n+\n+/* Same as ATTR_NONNULL_1.  */\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1_1, ATTR_NONNULL, ATTR_LIST_1, ATTR_NULL)\n+/* Functions like {v,}fprintf whose first and second parameters are\n+   nonnull pointers.  As cancellation points the functions are not\n+   nothrow.  */\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1_2, ATTR_NONNULL, ATTR_LIST_1_2, ATTR_NULL)\n+/* The following don't have {v,}fprintf forms.  They exist only to\n+   make it possible to declare {v,}{f,s}printf attributes using\n+   the same macro.  */\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1_3, ATTR_NONNULL, ATTR_LIST_1_3, ATTR_NULL)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1_4, ATTR_NONNULL, ATTR_LIST_1_4, ATTR_NULL)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1_5, ATTR_NONNULL, ATTR_LIST_1_5, ATTR_NULL)\n+\n+/* Same as ATTR_NOTHROW_NONNULL_1.  */\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_1, ATTR_NONNULL, ATTR_LIST_1,\n+\t\t    ATTR_NOTHROW_LIST)\n+/* Nothrow functions like {v,}sprintf whose first and second parameters\n+   are nonnull pointers.  */\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_2, ATTR_NONNULL, ATTR_LIST_1_2, \\\n+\t\t    ATTR_NOTHROW_LIST)\n+/* Nothrow functions like {v,}snprintf whose first and third parameters\n+   are nonnull pointers.  */\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_3, ATTR_NONNULL, ATTR_LIST_1_3, \\\n+\t\t    ATTR_NOTHROW_LIST)\n+/* Nothrow functions like {v,}sprintf_chk whose first and fourth parameters\n+   are nonnull pointers.  */\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_4, ATTR_NONNULL, ATTR_LIST_1_4, \\\n+\t\t    ATTR_NOTHROW_LIST)\n+/* Nothrow functions like {v,}snprintf_chk whose first and fifth parameters\n+   are nonnull pointers.  */\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_5, ATTR_NONNULL, ATTR_LIST_1_5, \\\n+\t\t    ATTR_NOTHROW_LIST)\n+\t\t\n /* Nothrow leaf functions which are type-generic.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_TYPEGENERIC_LEAF, ATTR_TYPEGENERIC, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_LEAF_LIST)\n@@ -245,24 +282,42 @@ DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_NONNULL, ATTR_MALLOC, ATTR_NULL, \\\n DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_NONNULL_LEAF, ATTR_MALLOC, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL_LEAF)\n \n-/* Construct a tree for a format attribute.  */\n+/* Construct a tree for the format attribute (and implicitly nonnull).  */\n #define DEF_FORMAT_ATTRIBUTE(TYPE, FA, VALUES)\t\t\t\t \\\n   DEF_ATTR_TREE_LIST (ATTR_##TYPE##_##VALUES, ATTR_NULL,\t\t \\\n \t\t      ATTR_##TYPE, ATTR_LIST_##VALUES)\t\t\t \\\n   DEF_ATTR_TREE_LIST (ATTR_FORMAT_##TYPE##_##VALUES, ATTR_FORMAT,\t \\\n \t\t      ATTR_##TYPE##_##VALUES, ATTR_NONNULL_##FA)\n+\n+/* Construct a tree for the format and nothrow attributes (format\n+   implies nonnull).  */\n #define DEF_FORMAT_ATTRIBUTE_NOTHROW(TYPE, FA, VALUES)\t\t\t \\\n   DEF_ATTR_TREE_LIST (ATTR_##TYPE##_##VALUES, ATTR_NULL,\t\t \\\n \t\t      ATTR_##TYPE, ATTR_LIST_##VALUES)\t\t\t \\\n   DEF_ATTR_TREE_LIST (ATTR_FORMAT_##TYPE##_NOTHROW_##VALUES, ATTR_FORMAT,\\\n \t\t      ATTR_##TYPE##_##VALUES, ATTR_NOTHROW_NONNULL_##FA)\n+\n+/* Construct one tree for the format attribute and another for the format\n+   and nothrow attributes (in both cases format implies nonnull).  */\n #define DEF_FORMAT_ATTRIBUTE_BOTH(TYPE, FA, VALUES)\t\t\t \\\n   DEF_ATTR_TREE_LIST (ATTR_##TYPE##_##VALUES, ATTR_NULL,\t\t \\\n \t\t      ATTR_##TYPE, ATTR_LIST_##VALUES)\t\t\t \\\n   DEF_ATTR_TREE_LIST (ATTR_FORMAT_##TYPE##_##VALUES, ATTR_FORMAT,\t \\\n \t\t      ATTR_##TYPE##_##VALUES, ATTR_NONNULL_##FA)\t \\\n   DEF_ATTR_TREE_LIST (ATTR_FORMAT_##TYPE##_NOTHROW_##VALUES, ATTR_FORMAT,\\\n \t\t      ATTR_##TYPE##_##VALUES, ATTR_NOTHROW_NONNULL_##FA)\n+\n+/* Construct a pair of trees for the nonnull attribute for the first\n+   argument, plus format printf attribute (format implies nonnull):\n+   the first ordinary and the second nothrow.  */\n+#define DEF_FORMAT_ATTRIBUTE_NONNULL(TYPE, FA, VALUES)\t\t\t \\\n+  DEF_ATTR_TREE_LIST (ATTR_NONNULL_1_FORMAT_##TYPE##_##VALUES,   \t \\\n+  \t\t      ATTR_FORMAT, ATTR_##TYPE##_##VALUES, \t \t \\\n+\t\t      ATTR_NONNULL_1_##FA)\t\t\t\t \\\n+  DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1_FORMAT_##TYPE##_##VALUES,   \\\n+  \t\t      ATTR_FORMAT, ATTR_##TYPE##_##VALUES, \t \t \\\n+\t\t      ATTR_NOTHROW_NONNULL_1_##FA)\n+\n DEF_FORMAT_ATTRIBUTE(PRINTF,1,1_0)\n DEF_FORMAT_ATTRIBUTE(PRINTF,1,1_2)\n DEF_FORMAT_ATTRIBUTE_BOTH(PRINTF,2,2_0)\n@@ -273,6 +328,26 @@ DEF_FORMAT_ATTRIBUTE_NOTHROW(PRINTF,4,4_0)\n DEF_FORMAT_ATTRIBUTE_NOTHROW(PRINTF,4,4_5)\n DEF_FORMAT_ATTRIBUTE_NOTHROW(PRINTF,5,5_0)\n DEF_FORMAT_ATTRIBUTE_NOTHROW(PRINTF,5,5_6)\n+\n+/* Attributes for fprintf(f, f, va).  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,1,1_2)\n+/* Attributes for v{f,s}printf(d, f, va).  vsprintf is nothrow, vfprintf\n+   is not.  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,2,2_0)\n+/* Attributes for {f,s}printf(d, f, ...).  sprintf is nothrow, fprintf\n+   is not.  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,2,2_3)\n+/* Attributes for vprintf_chk.  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,3,3_0)\n+/* Attributes for printf_chk.  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,3,3_4)\n+/* Attributes for v{f,s}printf_chk(d, t, bos, f, va).  vsprintf_chk is\n+   nothrow, vfprintf_chk is not.  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,4,4_0)\n+/* Attributes for {f,s}printf_chk(d, t, bos, f, ...).  sprintf_chk is\n+   nothrow, fprintf_chk is not.  */\n+DEF_FORMAT_ATTRIBUTE_NONNULL(PRINTF,4,4_5)\n+\n DEF_FORMAT_ATTRIBUTE(SCANF,1,1_0)\n DEF_FORMAT_ATTRIBUTE(SCANF,1,1_2)\n DEF_FORMAT_ATTRIBUTE_BOTH(SCANF,2,2_0)"}, {"sha": "ca038cdcc7cc44d8aa30e3ec67114f45b9ed5b22", "filename": "gcc/builtins.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -147,7 +147,7 @@ static tree fold_builtin_classify_type (tree);\n static tree fold_builtin_strlen (location_t, tree, tree);\n static tree fold_builtin_inf (location_t, tree, int);\n static tree rewrite_call_expr (location_t, tree, int, tree, int, ...);\n-static bool validate_arg (const_tree, enum tree_code code);\n+static bool validate_arg (const_tree, enum tree_code code, bool = false);\n static rtx expand_builtin_fabs (tree, rtx, rtx);\n static rtx expand_builtin_signbit (tree, rtx);\n static tree fold_builtin_memcmp (location_t, tree, tree, tree);\n@@ -1034,7 +1034,7 @@ more_const_call_expr_args_p (const const_call_expr_arg_iterator *iter)\n \n /* This function validates the types of a function call argument list\n    against a specified list of tree_codes.  If the last specifier is a 0,\n-   that represents an ellipses, otherwise the last specifier must be a\n+   that represents an ellipsis, otherwise the last specifier must be a\n    VOID_TYPE.  */\n \n static bool\n@@ -1049,9 +1049,14 @@ validate_arglist (const_tree callexpr, ...)\n   va_start (ap, callexpr);\n   init_const_call_expr_arg_iterator (callexpr, &iter);\n \n-  do\n+  /* Get a bitmap of pointer argument numbers declared attribute nonnull.  */\n+  bitmap argmap = get_nonnull_args (callexpr);\n+\n+  for (unsigned argno = 1; ; ++argno)\n     {\n       code = (enum tree_code) va_arg (ap, int);\n+      bool nonnull = false;\n+\n       switch (code)\n \t{\n \tcase 0:\n@@ -1063,23 +1068,31 @@ validate_arglist (const_tree callexpr, ...)\n \t     true, otherwise return false.  */\n \t  res = !more_const_call_expr_args_p (&iter);\n \t  goto end;\n+\tcase POINTER_TYPE:\n+\t  /* The actual argument must be nonnull when either the whole\n+\t     called function has been declared nonnull, or when the formal\n+\t     argument corresponding to the actual argument has been.  */\n+\t  if (argmap)\n+\t    nonnull = bitmap_empty_p (argmap) || bitmap_bit_p (argmap, argno);\n+\t  /* FALLTHRU */\n \tdefault:\n \t  /* If no parameters remain or the parameter's code does not\n \t     match the specified code, return false.  Otherwise continue\n \t     checking any remaining arguments.  */\n \t  arg = next_const_call_expr_arg (&iter);\n-\t  if (!validate_arg (arg, code))\n+\t  if (!validate_arg (arg, code, nonnull))\n \t    goto end;\n \t  break;\n \t}\n     }\n-  while (1);\n \n   /* We need gotos here since we can only have one VA_CLOSE in a\n      function.  */\n  end: ;\n   va_end (ap);\n \n+  BITMAP_FREE (argmap);\n+\n   return res;\n }\n \n@@ -9121,15 +9134,17 @@ rewrite_call_expr (location_t loc, tree exp, int skip, tree fndecl, int n, ...)\n }\n \n /* Validate a single argument ARG against a tree code CODE representing\n-   a type.  */\n+   a type.  When NONNULL is true consider a pointer argument valid only\n+   if it's non-null.  Return true when argument is valid.  */\n \n static bool\n-validate_arg (const_tree arg, enum tree_code code)\n+validate_arg (const_tree arg, enum tree_code code, bool nonnull /*= false*/)\n {\n   if (!arg)\n     return false;\n   else if (code == POINTER_TYPE)\n-    return POINTER_TYPE_P (TREE_TYPE (arg));\n+    return POINTER_TYPE_P (TREE_TYPE (arg))\n+      && (!nonnull || !integer_zerop (arg));\n   else if (code == INTEGER_TYPE)\n     return INTEGRAL_TYPE_P (TREE_TYPE (arg));\n   return code == TREE_CODE (TREE_TYPE (arg));"}, {"sha": "24b34e80cf1114eafd07b6cd0c7f05d30aae1999", "filename": "gcc/builtins.def", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -683,8 +683,8 @@ DEF_LIB_BUILTIN        (BUILT_IN_STRSPN, \"strspn\", BT_FN_SIZE_CONST_STRING_CONST\n DEF_LIB_BUILTIN        (BUILT_IN_STRSTR, \"strstr\", BT_FN_STRING_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n \n /* Category: stdio builtins.  */\n-DEF_LIB_BUILTIN        (BUILT_IN_FPRINTF, \"fprintf\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPRINTF_UNLOCKED, \"fprintf_unlocked\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n+DEF_LIB_BUILTIN        (BUILT_IN_FPRINTF, \"fprintf\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_NONNULL_1_FORMAT_PRINTF_2_3)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPRINTF_UNLOCKED, \"fprintf_unlocked\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_NONNULL_1_FORMAT_PRINTF_2_3)\n DEF_LIB_BUILTIN        (BUILT_IN_PUTC, \"putc\", BT_FN_INT_INT_FILEPTR, ATTR_NONNULL_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_PUTC_UNLOCKED, \"putc_unlocked\", BT_FN_INT_INT_FILEPTR, ATTR_NONNULL_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_FPUTC, \"fputc\", BT_FN_INT_INT_FILEPTR, ATTR_NONNULL_LIST)\n@@ -695,21 +695,22 @@ DEF_LIB_BUILTIN        (BUILT_IN_FSCANF, \"fscanf\", BT_FN_INT_FILEPTR_CONST_STRIN\n DEF_LIB_BUILTIN        (BUILT_IN_FWRITE, \"fwrite\", BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR, ATTR_NONNULL_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FWRITE_UNLOCKED, \"fwrite_unlocked\", BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR, ATTR_NONNULL_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_PRINTF, \"printf\", BT_FN_INT_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_1_2)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_PRINTF_UNLOCKED, \"printf_unlocked\", BT_FN_INT_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_1_2)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_PRINTF_UNLOCKED, \"printf_unlocked\", BT_FN_INT_CONST_STRING_VAR, ATTR_NONNULL_1_FORMAT_PRINTF_1_2)\n DEF_LIB_BUILTIN        (BUILT_IN_PUTCHAR, \"putchar\", BT_FN_INT_INT, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_PUTCHAR_UNLOCKED, \"putchar_unlocked\", BT_FN_INT_INT, ATTR_NULL)\n DEF_LIB_BUILTIN        (BUILT_IN_PUTS, \"puts\", BT_FN_INT_CONST_STRING, ATTR_NONNULL_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_PUTS_UNLOCKED, \"puts_unlocked\", BT_FN_INT_CONST_STRING, ATTR_NONNULL_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_SCANF, \"scanf\", BT_FN_INT_CONST_STRING_VAR, ATTR_FORMAT_SCANF_1_2)\n DEF_C99_BUILTIN        (BUILT_IN_SNPRINTF, \"snprintf\", BT_FN_INT_STRING_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_3_4)\n-DEF_LIB_BUILTIN        (BUILT_IN_SPRINTF, \"sprintf\", BT_FN_INT_STRING_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_2_3)\n+\n+DEF_LIB_BUILTIN        (BUILT_IN_SPRINTF, \"sprintf\", BT_FN_INT_STRING_CONST_STRING_VAR, ATTR_NOTHROW_NONNULL_1_FORMAT_PRINTF_2_3)\n DEF_LIB_BUILTIN        (BUILT_IN_SSCANF, \"sscanf\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_FORMAT_SCANF_NOTHROW_2_3)\n-DEF_LIB_BUILTIN        (BUILT_IN_VFPRINTF, \"vfprintf\", BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_2_0)\n+DEF_LIB_BUILTIN        (BUILT_IN_VFPRINTF, \"vfprintf\", BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG, ATTR_NONNULL_1_FORMAT_PRINTF_2_0)\n DEF_C99_BUILTIN        (BUILT_IN_VFSCANF, \"vfscanf\", BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_2_0)\n DEF_LIB_BUILTIN        (BUILT_IN_VPRINTF, \"vprintf\", BT_FN_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_1_0)\n DEF_C99_BUILTIN        (BUILT_IN_VSCANF, \"vscanf\", BT_FN_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_1_0)\n DEF_C99_BUILTIN        (BUILT_IN_VSNPRINTF, \"vsnprintf\", BT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_NOTHROW_3_0)\n-DEF_LIB_BUILTIN        (BUILT_IN_VSPRINTF, \"vsprintf\", BT_FN_INT_STRING_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_NOTHROW_2_0)\n+DEF_LIB_BUILTIN        (BUILT_IN_VSPRINTF, \"vsprintf\", BT_FN_INT_STRING_CONST_STRING_VALIST_ARG, ATTR_NOTHROW_NONNULL_1_FORMAT_PRINTF_2_0)\n DEF_C99_BUILTIN        (BUILT_IN_VSSCANF, \"vsscanf\", BT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_NOTHROW_2_0)\n \n /* Category: ctype builtins.  */\n@@ -926,12 +927,12 @@ DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCPY_CHK, \"__strcpy_chk\", BT_FN_STRING_STRI\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCAT_CHK, \"__strncat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCPY_CHK, \"__strncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SNPRINTF_CHK, \"__snprintf_chk\", BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_5_6)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_SPRINTF_CHK, \"__sprintf_chk\", BT_FN_INT_STRING_INT_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_4_5)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SPRINTF_CHK, \"__sprintf_chk\", BT_FN_INT_STRING_INT_SIZE_CONST_STRING_VAR, ATTR_NOTHROW_NONNULL_1_FORMAT_PRINTF_4_5)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_VSNPRINTF_CHK, \"__vsnprintf_chk\", BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_NOTHROW_5_0)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_VSPRINTF_CHK, \"__vsprintf_chk\", BT_FN_INT_STRING_INT_SIZE_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_NOTHROW_4_0)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPRINTF_CHK, \"__fprintf_chk\", BT_FN_INT_FILEPTR_INT_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_3_4)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_VSPRINTF_CHK, \"__vsprintf_chk\", BT_FN_INT_STRING_INT_SIZE_CONST_STRING_VALIST_ARG, ATTR_NOTHROW_NONNULL_1_FORMAT_PRINTF_4_0)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPRINTF_CHK, \"__fprintf_chk\", BT_FN_INT_FILEPTR_INT_CONST_STRING_VAR, ATTR_NONNULL_1_FORMAT_PRINTF_3_4)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_PRINTF_CHK, \"__printf_chk\", BT_FN_INT_INT_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_VFPRINTF_CHK, \"__vfprintf_chk\", BT_FN_INT_FILEPTR_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_3_0)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_VFPRINTF_CHK, \"__vfprintf_chk\", BT_FN_INT_FILEPTR_INT_CONST_STRING_VALIST_ARG, ATTR_NONNULL_1_FORMAT_PRINTF_3_0)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_VPRINTF_CHK, \"__vprintf_chk\", BT_FN_INT_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_2_0)\n \n /* Profiling hooks.  */"}, {"sha": "39a3582289fe8f2822c067cd6503f1003bf13305", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -1,3 +1,9 @@\n+2016-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/17308\n+\t* c-common.c (check_nonnull_arg): Disable when optimization\n+\tis enabled.\n+\n 2016-12-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/78647"}, {"sha": "b690afb5e04eaaf576e582d522c17fb3c1a9b67b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -5388,7 +5388,10 @@ check_nonnull_arg (void *ctx, tree param, unsigned HOST_WIDE_INT param_num)\n   if (TREE_CODE (TREE_TYPE (param)) != POINTER_TYPE)\n     return;\n \n-  if (integer_zerop (param))\n+  /* When not optimizing diagnose the simple cases of null arguments.\n+     When optimization is enabled defer the checking until expansion\n+     when more cases can be detected.  */\n+  if (!optimize && integer_zerop (param))\n     warning_at (*ploc, OPT_Wnonnull, \"null argument where non-null required \"\n \t\t\"(argument %lu)\", (unsigned long) param_num);\n }"}, {"sha": "84664273fd4f55f8bf6c9157230c7ec56b40fbe6", "filename": "gcc/calls.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -1501,6 +1501,91 @@ maybe_complain_about_tail_call (tree call_expr, const char *reason)\n   error_at (EXPR_LOCATION (call_expr), \"cannot tail-call: %s\", reason);\n }\n \n+/* Return a bitmap with a bit set corresponding to each argument in\n+   a function call expression CALLEXPR declared with attribute nonnull,\n+   or null if none of the function's argument are nonnull.  The caller\n+   must free the bitmap.  */\n+\n+bitmap\n+get_nonnull_args (const_tree callexpr)\n+{\n+  tree fn = CALL_EXPR_FN (callexpr);\n+  if (!fn || TREE_CODE (fn) != ADDR_EXPR)\n+    return NULL;\n+\n+  tree fndecl = TREE_OPERAND (fn, 0);\n+  tree fntype = TREE_TYPE (fndecl);\n+  tree attrs = TYPE_ATTRIBUTES (fntype);\n+  if (!attrs)\n+    return NULL;\n+\n+  bitmap argmap = NULL;\n+\n+  /* A function declaration can specify multiple attribute nonnull,\n+     each with zero or more arguments.  The loop below creates a bitmap\n+     representing a union of all the arguments.  An empty (but non-null)\n+     bitmap means that all arguments have been declaraed nonnull.  */\n+  for ( ; attrs; attrs = TREE_CHAIN (attrs))\n+    {\n+      attrs = lookup_attribute (\"nonnull\", attrs);\n+      if (!attrs)\n+\tbreak;\n+\n+      if (!argmap)\n+\targmap = BITMAP_ALLOC (NULL);\n+\n+      if (!TREE_VALUE (attrs))\n+\t{\n+\t  /* Clear the bitmap in case a previous attribute nonnull\n+\t     set it and this one overrides it for all arguments.  */\n+\t  bitmap_clear (argmap);\n+\t  return argmap;\n+\t}\n+\n+      /* Iterate over the indices of the format arguments declared nonnull\n+\t and set a bit for each.  */\n+      for (tree idx = TREE_VALUE (attrs); idx; idx = TREE_CHAIN (idx))\n+\t{\n+\t  unsigned int val = TREE_INT_CST_LOW (TREE_VALUE (idx)) - 1;\n+\t  bitmap_set_bit (argmap, val);\n+\t}\n+    }\n+\n+  return argmap;\n+}\n+\n+/* In a call EXP to a function FNDECL some of whose arguments may have\n+   been declared with attribute nonnull as described by NONNULLARGS,\n+   check actual argument ARG at the zero-based position ARGPOS for\n+   equality to null and issue a warning if it is not expected to be.  */\n+\n+static void\n+maybe_warn_null_arg (tree fndecl, tree exp, tree arg,\n+\t\t     unsigned argpos, bitmap nonnullargs)\n+{\n+  if (!optimize\n+      || !nonnullargs\n+      || TREE_CODE (TREE_TYPE (arg)) != POINTER_TYPE\n+      || !integer_zerop (arg)\n+      || (!bitmap_empty_p (nonnullargs)\n+\t  && !bitmap_bit_p (nonnullargs, argpos)))\n+    return;\n+\n+  ++argpos;\n+\n+  location_t exploc EXPR_LOCATION (exp);\n+\n+  if (warning_at (exploc, OPT_Wnonnull,\n+\t\t  \"argument %u null where non-null expected\", argpos))\n+    {\n+      if (DECL_IS_BUILTIN (fndecl))\n+\tinform (exploc, \"in a call to built-in function %qD\", fndecl);\n+      else\n+\tinform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t\"in a call to function %qD declared here\", fndecl);\n+    }\n+}\n+\n /* Fill in ARGS_SIZE and ARGS array based on the parameters found in\n    CALL_EXPR EXP.\n \n@@ -1684,6 +1769,9 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n   /* Array for up to the two attribute alloc_size arguments.  */\n   tree alloc_args[] = { NULL_TREE, NULL_TREE };\n \n+  /* Get a bitmap of pointer argument numbers declared attribute nonnull.  */\n+  bitmap nonnullargs = get_nonnull_args (exp);\n+\n   /* I counts args in order (to be) pushed; ARGPOS counts in order written.  */\n   for (argpos = 0; argpos < num_actuals; i--, argpos++)\n     {\n@@ -1915,6 +2003,11 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       if (args[i].locate.size.var)\n \tADD_PARM_SIZE (*args_size, args[i].locate.size.var);\n \n+      /* Check pointer argument for equality to NULL that is being passed\n+\t to arguments declared with attribute nonnull and warn.  */\n+      maybe_warn_null_arg (fndecl, exp, args[i].tree_value, argpos,\n+\t\t\t   nonnullargs);\n+\n       /* Increment ARGS_SO_FAR, which has info about which arg-registers\n \t have been used, etc.  */\n \n@@ -1935,6 +2028,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t alloc_size.  */\n       maybe_warn_alloc_args_overflow (fndecl, exp, alloc_args, alloc_idx);\n     }\n+\n+  BITMAP_FREE (nonnullargs);\n }\n \n /* Update ARGS_SIZE to contain the total size for the argument block."}, {"sha": "9d2084c1c816c42c67cd552d0a861c1b9deddfd4", "filename": "gcc/calls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -38,5 +38,6 @@ extern bool pass_by_reference (CUMULATIVE_ARGS *, machine_mode,\n extern bool reference_callee_copied (CUMULATIVE_ARGS *, machine_mode,\n \t\t\t\t     tree, bool);\n extern void maybe_warn_alloc_args_overflow (tree, tree, tree[2], int[2]);\n+extern bitmap get_nonnull_args (const_tree);\n \n #endif // GCC_CALLS_H"}, {"sha": "64d7839c3750929f5665afcd85304f540ee8c324", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -1,3 +1,9 @@\n+2016-12-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/17308\n+\t* gcc.dg/builtins-nonnull.c: New test.\n+\t* gcc.dg/nonnull-4.c: New test.\n+\n 2016-12-14  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/78701"}, {"sha": "fa9eaf2327dfa76b889556dc2d600fc0aa9ace3d", "filename": "gcc/testsuite/gcc.dg/builtins-nonnull.c", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -0,0 +1,239 @@\n+/* PR c/17308 - nonnull attribute not as useful as it could be\n+   PR c/78673 - sprintf missing attribute nonnull on destination argument\n+   { dg-do \"compile\" }\n+   { dg-additional-options \"-O2 -Wnonnull -ftrack-macro-expansion=0 -std=c99\" } */\n+\n+#define va_list __builtin_va_list\n+\n+typedef struct FILE FILE;\n+\n+char* null (void)\n+{\n+  return 0;\n+}\n+\n+void sink (int, ...);\n+#define T(arg) sink (0, arg)\n+\n+\n+#define bzero    __builtin_bzero\n+#define memcpy   __builtin_memcpy\n+#define memmove  __builtin_memmove\n+#define mempcpy  __builtin_mempcpy\n+#define memset   __builtin_memset\n+\n+void test_memfuncs (void *s, unsigned n)\n+{\n+  /* Bzero is not declared attribute nonnull.  */\n+  bzero (null (), n);\n+\n+  T (memcpy (null (), s, n));     /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (memcpy (s, null (), n));     /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (memmove (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (memmove (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (mempcpy (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (mempcpy (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (memset (null (), 0, n));     /* { dg-warning \"argument 1 null where non-null expected\" } */\n+}\n+\n+#undef memcpy\n+#undef memmove\n+#undef mempcpy\n+#undef memset\n+#define memcpy(d, s, n)   __builtin___memcpy_chk (d, s, n, n)\n+#define memmove(d, s, n)  __builtin___memmove_chk (d, s, n, n)\n+#define mempcpy(d, s, n)  __builtin___mempcpy_chk (d, s, n, n)\n+#define memset(d, x, n)   __builtin___memset_chk (d, x, n, n)\n+\n+void test_memfuncs_chk (void *s, unsigned n)\n+{\n+  T (memcpy (null (), s, n));     /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (memcpy (s, null (), n));     /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (memmove (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (memmove (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (mempcpy (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (mempcpy (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (memset (null (), 0, n));     /* { dg-warning \"argument 1 null where non-null expected\" } */\n+}\n+\n+\n+#define strcat   __builtin_strcat\n+#define strchr   __builtin_strchr\n+#define stpcpy   __builtin_stpcpy\n+#define stpncpy  __builtin_stpncpy\n+#define strcpy   __builtin_strcpy\n+#define strncpy  __builtin_strncpy\n+#define strlen   __builtin_strlen\n+#define strncat  __builtin_strncat\n+#define strstr   __builtin_strstr\n+\n+void test_strfuncs (char *s, unsigned n)\n+{\n+  T (strcat (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strcat (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strchr (null (), 'x'));      /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (stpcpy (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (stpcpy (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (stpncpy (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (stpncpy (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strcpy (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strcpy (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strncpy (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strncpy (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strlen (null ()));           /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (strncat (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+  T (strncat (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (strstr (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strstr (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+}\n+\n+\n+#undef strcat\n+#undef stpcpy\n+#undef stpncpy\n+#undef strcpy\n+#undef strncpy\n+#undef strncat\n+\n+#define strcat(d, s)      __builtin___strcat_chk (d, s, n)\n+#define stpcpy(d, s)      __builtin___stpcpy_chk (d, s, n)\n+#define stpncpy(d, s, n)  __builtin___stpncpy_chk (d, s, n, n)\n+#define strcpy(d, s)      __builtin___strcpy_chk (d, s, n)\n+#define strncpy(d, s, n)  __builtin___strncpy_chk (d, s, n, n)\n+#define strncat(d, s, n)  __builtin___strncat_chk (d, s, n, n)\n+\n+void test_strfuncs_chk (char *s, unsigned n)\n+{\n+  T (strcat (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strcat (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strchr (null (), 'x'));      /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (stpcpy (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (stpcpy (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (stpncpy (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (stpncpy (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strcpy (null (), s));        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strcpy (s, null ()));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strncpy (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (strncpy (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (strncat (s, null (), n));    /* { dg-warning \"argument 2 null where non-null expected\" } */\n+  T (strncat (null (), s, n));    /* { dg-warning \"argument 1 null where non-null expected\" } */\n+}\n+\n+\n+#define fprintf             __builtin_fprintf\n+#define fprintf_unlocked    __builtin_fprintf_unlocked\n+#define vfprintf            __builtin_vfprintf\n+#define printf              __builtin_printf\n+#define printf_unlocked     __builtin_printf_unlocked\n+#define vprintf             __builtin_vprintf\n+#define sprintf             __builtin_sprintf\n+#define snprintf            __builtin_snprintf\n+#define vsprintf            __builtin_vsprintf\n+#define vsnprintf           __builtin_vsnprintf\n+\n+void test_stdio_funcs (FILE *f, char *d, unsigned n, va_list va)\n+{\n+  T (fprintf (null (), \"%i\", 0)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (fprintf (f, null ()));       /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (fprintf_unlocked (null (), \"%i\", 0)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (fprintf_unlocked (f, null ()));       /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (vfprintf (null (), \"%i\", va));/* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (vfprintf (f, null (), va));   /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (vprintf (null (), va));      /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (printf (null ()));           /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (printf_unlocked (null ()));  /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (vprintf (null (), va));      /* { dg-warning \"argument 1 null where non-null expected\" } */\n+\n+  T (sprintf (null (), \"%i\", 0)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (sprintf (d, null ()));       /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (snprintf (null (), n, \"%i\", 0));\n+  T (snprintf (d, n, null ()));   /* { dg-warning \"argument 3 null where non-null expected\" } */\n+\n+  T (vsprintf (null (), \"%i\", va)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (vsprintf (d, null (), va));   /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (vsnprintf (null (), n, \"%i\", va));\n+  T (vsnprintf (d, n, null (), va));  /* { dg-warning \"argument 3 null where non-null expected\" } */\n+}\n+\n+#undef fprintf\n+#undef fprintf_unlocked\n+#undef vfprintf\n+#undef printf\n+#undef printf_unlocked\n+#undef vprintf\n+#undef sprintf\n+#undef snprintf\n+#undef vsprintf\n+#undef vsnprintf\n+\n+#define fprintf(f, fmt, ...)\t\t\t\t\\\n+  __builtin___fprintf_chk (f, 0, fmt, __VA_ARGS__)\n+#define vfprintf(f, fmt, va)\t\t\t\\\n+  __builtin___vfprintf_chk (f, 0, fmt, va)\n+#define printf(fmt, ...)\t\t\t\\\n+  __builtin___printf_chk (0, fmt, __VA_ARGS__)\n+#define vprintf(fmt, va)\t\t\t\\\n+  __builtin___vprintf_chk (0, fmt, va)\n+#define sprintf(d, fmt, ... )\t\t\t\t\\\n+  __builtin___sprintf_chk (d, 0, n, fmt, __VA_ARGS__)\n+#define snprintf(d, n, fmt, ...)\t\t\t\\\n+  __builtin___snprintf_chk (d, n, 0, n,  fmt, __VA_ARGS__)\n+#define vsprintf(d, fmt, va)\t\t\t\\\n+  __builtin___vsprintf_chk (d, 0, n, fmt, va)\n+#define vsnprintf(d, n, fmt, va)\t\t\t\\\n+  __builtin___vsnprintf_chk (d, n, 0, n, fmt, va)\n+\n+void test_stdio_funcs_chk (FILE *f, char *d, const char *fmt,\n+\t\t\t   unsigned n, va_list va)\n+{\n+  T (fprintf (null (), \"%i\", 0)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (fprintf (f, null (), 0));    /* { dg-warning \"argument 3 null where non-null expected\" } */\n+\n+  T (vfprintf (null (), \"%i\", va));/* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (vfprintf (f, null (), va));   /* { dg-warning \"argument 3 null where non-null expected\" } */\n+\n+  T (vprintf (null (), va));      /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (printf (null (), 0));        /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (vprintf (null (), va));      /* { dg-warning \"argument 2 null where non-null expected\" } */\n+\n+  T (sprintf (null (), \"%i\", 0)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (sprintf (d, null (), 0));    /* { dg-warning \"argument 4 null where non-null expected\" } */\n+\n+  T (snprintf (null (), n, \"%i\", 0));\n+  T (snprintf (d, n, null (), 0));  /* { dg-warning \"argument 5 null where non-null expected\" } */\n+\n+  T (vsprintf (null (), \"%i\", va)); /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  T (vsprintf (d, null (), va));   /* { dg-warning \"argument 4 null where non-null expected\" } */\n+\n+  T (vsnprintf (null (), n, \"%i\", va));\n+  T (vsnprintf (d, n, null (), va));  /* { dg-warning \"argument 5 null where non-null expected\" } */\n+}"}, {"sha": "577a04c6185f5abab22fc738822accbca44380de", "filename": "gcc/testsuite/gcc.dg/nonnull-4.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/474da67ef9ec3658e4da9deb5373353532b2a840/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-4.c?ref=474da67ef9ec3658e4da9deb5373353532b2a840", "patch": "@@ -0,0 +1,79 @@\n+/* PR c/78673 - sprintf missing attribute nonnull on destination argument\n+   Test to verify that calls to user-defined functions declared with\n+   the \"nonnull\" function attribute are diagnosed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wnonnull\" } */\n+\n+#define N(...) __attribute__ ((nonnull (__VA_ARGS__)))\n+\n+void N (1) f1_1 (void*);\n+\n+void N (1)       f2_1 (void*, void*);\n+void N (1) N (2) f2_1_2 (void*, void*);\n+\n+void N (1) N (3) f3_1_3 (void*, void*, void*);\n+\n+void N (1, 2) N (4) g4_1_2_4 (void*, void*, void*, void*);\n+void N (1, 3) N (4) g4_1_3_4 (void*, void*, void*, void*);\n+void N (2, 3, 4)    g4_2_3_4 (void*, void*, void*, void*);\n+\n+void N () g4_all (void*, void*, void*, void*);\n+\n+void N (1, 3, 5, 7, 11, 13)\n+g16_1_3_5_7_11_13 (void*, void*, void*, void*,\n+\t\t   void*, void*, void*, void*,\n+\t\t   void*, void*, void*, void*,\n+\t\t   void*, void*, void*, void*);\n+\n+void* null (void) { return 0; }\n+\n+void test (void)\n+{\n+  void *p0 = null ();\n+  void *px = &px;\n+\n+  f1_1 (p0);   /* { dg-warning \"argument 1 null where non-null expected \" } */\n+  f1_1 (px);\n+\n+  f2_1 (p0, px);  /* { dg-warning \"argument 1 null\" } */\n+  f2_1 (px, p0);\n+  f2_1 (p0, p0);  /* { dg-warning \"argument 1 null\" } */\n+\n+  f2_1_2 (p0, px);  /* { dg-warning \"argument 1 null\" } */\n+  f2_1_2 (px, p0);  /* { dg-warning \"argument 2 null\" } */\n+  f2_1_2 (p0, p0);  /* { dg-warning \"argument 1 null\" } */\n+  /* { dg-warning \"argument 2 null\" \"argument 2\" { target *-*-* } .-1 } */\n+\n+  f3_1_3 (p0, px, px);  /* { dg-warning \"argument 1 null\" } */\n+  f3_1_3 (px, p0, px);\n+  f3_1_3 (px, px, p0);  /* { dg-warning \"argument 3 null\" } */\n+  f3_1_3 (p0, p0, px);  /* { dg-warning \"argument 1 null\" } */\n+  f3_1_3 (px, p0, p0);  /* { dg-warning \"argument 3 null\" } */\n+  f3_1_3 (p0, p0, p0);  /* { dg-warning \"argument 1 null\" } */\n+  /* { dg-warning \"argument 3 null\" \"argument 3\" { target *-*-* } .-1 } */\n+\n+  g4_1_2_4 (p0, px, px, px);  /* { dg-warning \"argument 1 null\" } */\n+  g4_1_2_4 (px, p0, px, px);  /* { dg-warning \"argument 2 null\" } */\n+  g4_1_2_4 (px, px, p0, px);\n+  g4_1_2_4 (px, px, px, p0);  /* { dg-warning \"argument 4 null\" } */\n+\n+  g4_1_3_4 (p0, px, px, px);  /* { dg-warning \"argument 1 null\" } */\n+  g4_1_3_4 (px, p0, px, px);\n+  g4_1_3_4 (px, px, p0, px);  /* { dg-warning \"argument 3 null\" } */\n+  g4_1_3_4 (px, px, px, p0);  /* { dg-warning \"argument 4 null\" } */\n+\n+  g4_2_3_4 (p0, px, px, px);\n+  g4_2_3_4 (px, p0, px, px);  /* { dg-warning \"argument 2 null\" } */\n+  g4_2_3_4 (px, px, p0, px);  /* { dg-warning \"argument 3 null\" } */\n+  g4_2_3_4 (px, px, px, p0);  /* { dg-warning \"argument 4 null\" } */\n+\n+  g4_all (p0, px, px, px);  /* { dg-warning \"argument 1 null\" } */\n+  g4_all (px, p0, px, px);  /* { dg-warning \"argument 2 null\" } */\n+  g4_all (px, px, p0, px);  /* { dg-warning \"argument 3 null\" } */\n+  g4_all (px, px, px, p0);  /* { dg-warning \"argument 4 null\" } */\n+\n+  g16_1_3_5_7_11_13 (px, px, px, px, px, px, px, px,\n+\t\t     px, px, px, px, px, px, px, px);\n+\n+  g16_1_3_5_7_11_13 (px, p0, px, p0, px, p0, px, p0, p0, p0, px, p0, p0, p0, p0, p0);   /* { dg-warning \"argument 13 null\" } */\n+}"}]}