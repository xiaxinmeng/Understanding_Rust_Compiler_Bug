{"sha": "19dd439389be2c5eb6b986d164760e061ba01938", "node_id": "C_kwDOANBUbNoAKDE5ZGQ0MzkzODliZTJjNWViNmI5ODZkMTY0NzYwZTA2MWJhMDE5Mzg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-12T13:26:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-23T09:30:39Z"}, "message": "Remove is_gimple_condexpr\n\nThis removes is_gimple_condexpr, note the vectorizer via patterns\nstill creates COND_EXPRs with embedded GENERIC conditions and has\na reference to the function in comments.  Otherwise is_gimple_condexpr\nis now equal to is_gimple_val.\n\n2022-05-16  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-expr.cc (is_gimple_condexpr): Remove.\n\t* gimple-expr.h (is_gimple_condexpr): Likewise.\n\t* gimplify.cc (gimplify_expr): Remove is_gimple_condexpr usage.\n\t* tree-if-conv.cc (set_bb_predicate): Likewie.\n\t(add_to_predicate_list): Likewise.\n\t(gen_phi_arg_condition): Likewise.\n\t(predicate_scalar_phi): Likewise.\n\t(predicate_statements): Likewise.", "tree": {"sha": "e420557032a8ca9d755b2da5d9b88afe8cfe22bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e420557032a8ca9d755b2da5d9b88afe8cfe22bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19dd439389be2c5eb6b986d164760e061ba01938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dd439389be2c5eb6b986d164760e061ba01938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dd439389be2c5eb6b986d164760e061ba01938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dd439389be2c5eb6b986d164760e061ba01938/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e0063397ba820e71adc220b2da0581dce29ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e0063397ba820e71adc220b2da0581dce29ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e0063397ba820e71adc220b2da0581dce29ffa"}], "stats": {"total": 46, "additions": 14, "deletions": 32}, "files": [{"sha": "c9c7285efbc64840d126482590c8bcb046bd1334", "filename": "gcc/gimple-expr.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Fgimple-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Fgimple-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.cc?ref=19dd439389be2c5eb6b986d164760e061ba01938", "patch": "@@ -614,17 +614,6 @@ is_gimple_condexpr_1 (tree t, bool allow_traps, bool allow_cplx)\n \t      && is_gimple_val (TREE_OPERAND (t, 1))));\n }\n \n-/* Return true if T is a condition operand in a GIMPLE assignment\n-   with a COND_EXPR RHS.  */\n-\n-bool\n-is_gimple_condexpr (tree t)\n-{\n-  /* Always split out _Complex type compares since complex lowering\n-     doesn't handle this case.  */\n-  return is_gimple_val (t);\n-}\n-\n /* Like is_gimple_condexpr, but does not allow T to trap.  */\n \n bool"}, {"sha": "0c3ac096ed77b9337d3ea61f26fb560fcaa9d902", "filename": "gcc/gimple-expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Fgimple-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Fgimple-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.h?ref=19dd439389be2c5eb6b986d164760e061ba01938", "patch": "@@ -40,7 +40,6 @@ extern void extract_ops_from_tree (tree, enum tree_code *, tree *, tree *,\n extern void gimple_cond_get_ops_from_tree (tree, enum tree_code *, tree *,\n \t\t\t\t\t   tree *);\n extern bool is_gimple_lvalue (tree);\n-extern bool is_gimple_condexpr (tree);\n extern bool is_gimple_condexpr_for_cond (tree);\n extern bool is_gimple_address (const_tree);\n extern bool is_gimple_invariant_address (const_tree);"}, {"sha": "98f554491e26097e8aa3c3c733b04327502ed2e8", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=19dd439389be2c5eb6b986d164760e061ba01938", "patch": "@@ -15023,7 +15023,6 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n     gcc_assert (fallback & (fb_rvalue | fb_lvalue));\n   else if (gimple_test_f == is_gimple_val\n            || gimple_test_f == is_gimple_call_addr\n-           || gimple_test_f == is_gimple_condexpr\n \t   || gimple_test_f == is_gimple_condexpr_for_cond\n            || gimple_test_f == is_gimple_mem_rhs\n            || gimple_test_f == is_gimple_mem_rhs_or_call"}, {"sha": "2245b6bfd7c22d7743937e84f65c99bcc6852718", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dd439389be2c5eb6b986d164760e061ba01938/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=19dd439389be2c5eb6b986d164760e061ba01938", "patch": "@@ -244,8 +244,8 @@ static inline void\n set_bb_predicate (basic_block bb, tree cond)\n {\n   gcc_assert ((TREE_CODE (cond) == TRUTH_NOT_EXPR\n-\t       && is_gimple_condexpr (TREE_OPERAND (cond, 0)))\n-\t      || is_gimple_condexpr (cond));\n+\t       && is_gimple_val (TREE_OPERAND (cond, 0)))\n+\t      || is_gimple_val (cond));\n   ((struct bb_predicate *) bb->aux)->predicate = cond;\n }\n \n@@ -544,10 +544,10 @@ add_to_predicate_list (class loop *loop, basic_block bb, tree nc)\n     tp = &TREE_OPERAND (bc, 0);\n   else\n     tp = &bc;\n-  if (!is_gimple_condexpr (*tp))\n+  if (!is_gimple_val (*tp))\n     {\n       gimple_seq stmts;\n-      *tp = force_gimple_operand_1 (*tp, &stmts, is_gimple_condexpr, NULL_TREE);\n+      *tp = force_gimple_operand (*tp, &stmts, true, NULL_TREE);\n       add_bb_predicate_gimplified_stmts (bb, stmts);\n     }\n   set_bb_predicate (bb, bc);\n@@ -1884,16 +1884,14 @@ gen_phi_arg_condition (gphi *phi, vec<int> *occur,\n \t  cond = c;\n \t  break;\n \t}\n-      c = force_gimple_operand_gsi_1 (gsi, unshare_expr (c),\n-\t\t\t\t      is_gimple_condexpr, NULL_TREE,\n-\t\t\t\t      true, GSI_SAME_STMT);\n+      c = force_gimple_operand_gsi (gsi, unshare_expr (c),\n+\t\t\t\t    true, NULL_TREE, true, GSI_SAME_STMT);\n       if (cond != NULL_TREE)\n \t{\n \t  /* Must build OR expression.  */\n \t  cond = fold_or_predicates (EXPR_LOCATION (c), c, cond);\n-\t  cond = force_gimple_operand_gsi_1 (gsi, unshare_expr (cond),\n-\t\t\t\t\t     is_gimple_condexpr, NULL_TREE,\n-\t\t\t\t\t     true, GSI_SAME_STMT);\n+\t  cond = force_gimple_operand_gsi (gsi, unshare_expr (cond), true,\n+\t\t\t\t\t   NULL_TREE, true, GSI_SAME_STMT);\n \t}\n       else\n \tcond = c;\n@@ -1973,9 +1971,8 @@ predicate_scalar_phi (gphi *phi, gimple_stmt_iterator *gsi)\n       else\n \tcond = bb_predicate (first_edge->src);\n       /* Gimplify the condition to a valid cond-expr conditonal operand.  */\n-      cond = force_gimple_operand_gsi_1 (gsi, unshare_expr (cond),\n-\t\t\t\t\t is_gimple_condexpr, NULL_TREE,\n-\t\t\t\t\t true, GSI_SAME_STMT);\n+      cond = force_gimple_operand_gsi (gsi, unshare_expr (cond), true,\n+\t\t\t\t       NULL_TREE, true, GSI_SAME_STMT);\n       true_bb = first_edge->src;\n       if (EDGE_PRED (bb, 1)->src == true_bb)\n \t{\n@@ -2074,9 +2071,8 @@ predicate_scalar_phi (gphi *phi, gimple_stmt_iterator *gsi)\n \t  cond = TREE_OPERAND (cond, 0);\n \t}\n       /* Gimplify the condition to a valid cond-expr conditonal operand.  */\n-      cond = force_gimple_operand_gsi_1 (gsi, unshare_expr (cond),\n-\t\t\t\t\t is_gimple_condexpr, NULL_TREE,\n-\t\t\t\t\t true, GSI_SAME_STMT);\n+      cond = force_gimple_operand_gsi (gsi, unshare_expr (cond), true,\n+\t\t\t\t       NULL_TREE, true, GSI_SAME_STMT);\n       if (!(is_cond_scalar_reduction (phi, &reduc, arg0 , arg1,\n \t\t\t\t      &op0, &op1, true, &has_nop, &nop_reduc)))\n \trhs = fold_build_cond_expr (TREE_TYPE (res), unshare_expr (cond),\n@@ -2612,9 +2608,8 @@ predicate_statements (loop_p loop)\n \t      rhs = ifc_temp_var (type, unshare_expr (rhs), &gsi);\n \t      if (swap)\n \t\tstd::swap (lhs, rhs);\n-\t      cond = force_gimple_operand_gsi_1 (&gsi, unshare_expr (cond),\n-\t\t\t\t\t\t is_gimple_condexpr, NULL_TREE,\n-\t\t\t\t\t\t true, GSI_SAME_STMT);\n+\t      cond = force_gimple_operand_gsi (&gsi, unshare_expr (cond), true,\n+\t\t\t\t\t       NULL_TREE, true, GSI_SAME_STMT);\n \t      rhs = fold_build_cond_expr (type, unshare_expr (cond), rhs, lhs);\n \t      gimple_assign_set_rhs1 (stmt, ifc_temp_var (type, rhs, &gsi));\n \t      update_stmt (stmt);"}]}