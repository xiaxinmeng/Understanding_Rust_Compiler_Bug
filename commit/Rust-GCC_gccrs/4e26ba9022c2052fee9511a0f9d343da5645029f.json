{"sha": "4e26ba9022c2052fee9511a0f9d343da5645029f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyNmJhOTAyMmMyMDUyZmVlOTUxMWEwZjlkMzQzZGE1NjQ1MDI5Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-05-24T21:29:35Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-05-24T21:29:35Z"}, "message": "In gcc/: 2011-05-24 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/48187\n\t* c-parser.c (c_parser_objc_class_instance_variables): More robust\n\tparsing of syntax error in ObjC instance variable lists.  In\n\tparticular, avoid an infinite loop if there is a stray ']'.\n\tUpdated error message.\n\nIn gcc/cp/:\n2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>,\n\n\t* parser.c (cp_parser_objc_class_ivars): Deal gracefully with a\n\tsyntax error in declaring an ObjC instance variable.\n\nIn gcc/testsuite/:\n2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/48187\n\t* objc.dg/pr48187.m: New testcase.\n\t* obj-c++.dg/pr48187.mm: New testcase.\n\t* objc.dg/ivar-extra-semicolon.m: New testcase.\n\nFrom-SVN: r174142", "tree": {"sha": "45a2ea1e54c55ccbf8843a2f531a8fac8f843c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45a2ea1e54c55ccbf8843a2f531a8fac8f843c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e26ba9022c2052fee9511a0f9d343da5645029f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e26ba9022c2052fee9511a0f9d343da5645029f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e26ba9022c2052fee9511a0f9d343da5645029f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e26ba9022c2052fee9511a0f9d343da5645029f/comments", "author": null, "committer": null, "parents": [{"sha": "936fd13c5b33cd6748788802ec3bb3445a396228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936fd13c5b33cd6748788802ec3bb3445a396228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936fd13c5b33cd6748788802ec3bb3445a396228"}], "stats": {"total": 153, "additions": 144, "deletions": 9}, "files": [{"sha": "3e1b6e4d63ca805f27ef467c48499ba3b0fbb8bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -1,3 +1,11 @@\n+2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/48187\n+\t* c-parser.c (c_parser_objc_class_instance_variables): More robust\n+\tparsing of syntax error in ObjC instance variable lists.  In\n+\tparticular, avoid an infinite loop if there is a stray ']'.\n+\tUpdated error message.\n+\n 2011-05-24  Ian Lance Taylor  <iant@google.com>\n \n \t* godump.c (go_define): Don't accept a string immediately after"}, {"sha": "cb70bed41efe3b2ae9ed9fab1050b7df0e99fc76", "filename": "gcc/c-parser.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -6945,7 +6945,7 @@ c_parser_objc_class_instance_variables (c_parser *parser)\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n \t  pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n-\t\t   \"extra semicolon in struct or union specified\");\n+\t\t   \"extra semicolon\");\n \t  c_parser_consume_token (parser);\n \t  continue;\n \t}\n@@ -6988,13 +6988,34 @@ c_parser_objc_class_instance_variables (c_parser *parser)\n \n       /* Parse some comma-separated declarations.  */\n       decls = c_parser_struct_declaration (parser);\n-      {\n-\t/* Comma-separated instance variables are chained together in\n-\t   reverse order; add them one by one.  */\n-\ttree ivar = nreverse (decls);\n-\tfor (; ivar; ivar = DECL_CHAIN (ivar))\n-\t  objc_add_instance_variable (copy_node (ivar));\n-      }\n+      if (decls == NULL)\n+\t{\n+\t  /* There is a syntax error.  We want to skip the offending\n+\t     tokens up to the next ';' (included) or '}'\n+\t     (excluded).  */\n+\t  \n+\t  /* First, skip manually a ')' or ']'.  This is because they\n+\t     reduce the nesting level, so c_parser_skip_until_found()\n+\t     wouldn't be able to skip past them.  */\n+\t  c_token *token = c_parser_peek_token (parser);\n+\t  if (token->type == CPP_CLOSE_PAREN || token->type == CPP_CLOSE_SQUARE)\n+\t    c_parser_consume_token (parser);\n+\n+\t  /* Then, do the standard skipping.  */\n+\t  c_parser_skip_until_found (parser, CPP_SEMICOLON, NULL);\n+\n+\t  /* We hopefully recovered.  Start normal parsing again.  */\n+\t  parser->error = false;\n+\t  continue;\n+\t}\n+      else\n+\t{\n+\t  /* Comma-separated instance variables are chained together\n+\t     in reverse order; add them one by one.  */\n+\t  tree ivar = nreverse (decls);\n+\t  for (; ivar; ivar = DECL_CHAIN (ivar))\n+\t    objc_add_instance_variable (copy_node (ivar));\n+\t}\n       c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n     }\n }"}, {"sha": "6397194d7381d6483cee3e356c78f228312d368f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -1,3 +1,8 @@\n+2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>,\n+\n+\t* parser.c (cp_parser_objc_class_ivars): Deal gracefully with a\n+\tsyntax error in declaring an ObjC instance variable.\n+\n 2011-05-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48884"}, {"sha": "3493e44496d8fb96450ed137ad5588759650e62d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -22494,7 +22494,8 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n \t\t\t      NULL_TREE, attributes);\n \n \t  /* Add the instance variable.  */\n-\t  objc_add_instance_variable (decl);\n+\t  if (decl != error_mark_node && decl != NULL_TREE)\n+\t    objc_add_instance_variable (decl);\n \n \t  /* Reset PREFIX_ATTRIBUTES.  */\n \t  while (attributes && TREE_CHAIN (attributes) != first_attribute)"}, {"sha": "bf257e06f3633b4d052a1717ef6d4cb684c00a04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -1,3 +1,10 @@\n+2011-05-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/48187\n+\t* objc.dg/pr48187.m: New testcase.\n+\t* obj-c++.dg/pr48187.mm: New testcase.\n+\t* objc.dg/ivar-extra-semicolon.m: New testcase.\n+\n 2011-05-24  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/access21.C: New."}, {"sha": "750710b1f240351bcb44f7f7486461603d5f136f", "filename": "gcc/testsuite/obj-c++.dg/pr48187.mm", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr48187.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr48187.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr48187.mm?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+\n+@interface A\n+{\n+  ]  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface B\n+{\n+  ];  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface C\n+{\n+  ];  /* { dg-error \"xpected\" } */\n+  int x;\n+}\n+@end\n+\n+@interface D\n+{\n+  (\n+}  /* { dg-error \"xpected\" } */\n+@end\n+\n+@interface E\n+{\n+  (;  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface F\n+{\n+  (;  /* { dg-error \"xpected\" } */\n+  int x;\n+}\n+@end"}, {"sha": "d3f0b5472dee354396a538a0332f5a04f78db29a", "filename": "gcc/testsuite/objc.dg/ivar-extra-semicolon.m", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2Fobjc.dg%2Fivar-extra-semicolon.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2Fobjc.dg%2Fivar-extra-semicolon.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fivar-extra-semicolon.m?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -0,0 +1,15 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, May 2011.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  ;       /* { dg-warning \"extra semicolon\" } */\n+  int a;  \n+  ;       /* { dg-warning \"extra semicolon\" } */\n+  int b;\n+  ;       /* { dg-warning \"extra semicolon\" } */\n+}\n+@end"}, {"sha": "cd7910da92471e3362cc280f577c774f7d60a4d8", "filename": "gcc/testsuite/objc.dg/pr48187.m", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2Fobjc.dg%2Fpr48187.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e26ba9022c2052fee9511a0f9d343da5645029f/gcc%2Ftestsuite%2Fobjc.dg%2Fpr48187.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr48187.m?ref=4e26ba9022c2052fee9511a0f9d343da5645029f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+\n+@interface A\n+{\n+  ]  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface B\n+{\n+  ];  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface C\n+{\n+  ];  /* { dg-error \"xpected\" } */\n+  int x;\n+}\n+@end\n+\n+@interface D\n+{\n+  )  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface E\n+{\n+  );  /* { dg-error \"xpected\" } */\n+}\n+@end\n+\n+@interface F\n+{\n+  );  /* { dg-error \"xpected\" } */\n+  int x;\n+}\n+@end"}]}