{"sha": "542a8afa8a40e0714720ce168046a3880a44d311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQyYThhZmE4YTQwZTA3MTQ3MjBjZTE2ODA0NmEzODgwYTQ0ZDMxMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-18T21:08:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-18T21:08:35Z"}, "message": "emit-rtl.c (gen_const_mem): New.\n\n        * emit-rtl.c (gen_const_mem): New.\n        * rtl.h (gen_const_mem): Declare.\n        * expr.c (do_tablejump): Use it.\n        * varasm.c (force_const_mem): Likewise.\n        * config/darwin.c (machopic_indirect_data_reference): Likewise.\n        (machopic_legitimize_pic_address): Likewise.\n        * config/arm/arm.c (legitimize_pic_address): Likewise.\n        * config/i386/i386.c (legitimize_pic_address): Likewise.\n        (legitimize_tls_address): Likewise.\n        * config/ia64/ia64.c (ia64_expand_tls_address): Likewise.\n        * config/ia64/ia64.md (load_fptr): Likewise.\n        * config/m32r/m32r.c (m32r_legitimize_pic_address): Likewise.\n        * config/pa/pa.c (legitimize_pic_address): Likewise.\n        * config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Likewise.\n        (rs6000_emit_move): Likewise.\n        * config/s390/s390.c (legitimize_pic_address): Likewise.\n        (legitimize_tls_address): Likewise.\n        * config/s390/s390.md (casesi): Likewise.\n        * config/sh/sh.c (sh_reorg): Likewise.\n        * config/sparc/sparc.c (legitimize_pic_address): Likewise.\n        * config/v850/v850.md (casesi): Likewise.\n\n        * config/darwin.c (machopic_indirect_call_target): Set MEM_NOTRAP_P.\n        * config/sh/sh.c (prepare_move_operands): Remove incorrect\n        use of MEM_READONLY_P.\n\nFrom-SVN: r86207", "tree": {"sha": "8e12ef5e22b0f9baabc992a10805a642c7d0bec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e12ef5e22b0f9baabc992a10805a642c7d0bec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/542a8afa8a40e0714720ce168046a3880a44d311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542a8afa8a40e0714720ce168046a3880a44d311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/542a8afa8a40e0714720ce168046a3880a44d311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542a8afa8a40e0714720ce168046a3880a44d311/comments", "author": null, "committer": null, "parents": [{"sha": "0516f6fe82641daf7c1ac8812998049ac591201e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0516f6fe82641daf7c1ac8812998049ac591201e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0516f6fe82641daf7c1ac8812998049ac591201e"}], "stats": {"total": 165, "additions": 85, "deletions": 80}, "files": [{"sha": "48597b531c2746610bc139963316c9f6e4758386", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -1,3 +1,31 @@\n+2004-08-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* emit-rtl.c (gen_const_mem): New.\n+\t* rtl.h (gen_const_mem): Declare.\n+\t* expr.c (do_tablejump): Use it.\n+\t* varasm.c (force_const_mem): Likewise.\n+\t* config/darwin.c (machopic_indirect_data_reference): Likewise.\n+\t(machopic_legitimize_pic_address): Likewise.\n+\t* config/arm/arm.c (legitimize_pic_address): Likewise.\n+\t* config/i386/i386.c (legitimize_pic_address): Likewise.\n+\t(legitimize_tls_address): Likewise.\n+\t* config/ia64/ia64.c (ia64_expand_tls_address): Likewise.\n+\t* config/ia64/ia64.md (load_fptr): Likewise.\n+\t* config/m32r/m32r.c (m32r_legitimize_pic_address): Likewise.\n+\t* config/pa/pa.c (legitimize_pic_address): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Likewise.\n+\t(rs6000_emit_move): Likewise.\n+\t* config/s390/s390.c (legitimize_pic_address): Likewise.\n+\t(legitimize_tls_address): Likewise.\n+\t* config/s390/s390.md (casesi): Likewise.\n+\t* config/sh/sh.c (sh_reorg): Likewise.\n+\t* config/sparc/sparc.c (legitimize_pic_address): Likewise.\n+\t* config/v850/v850.md (casesi): Likewise.\n+\n+\t* config/darwin.c (machopic_indirect_call_target): Set MEM_NOTRAP_P.\n+\t* config/sh/sh.c (prepare_move_operands): Remove incorrect\n+\tuse of MEM_READONLY_P.\n+\n 2004-08-18  Steven Bosscher  <stevenb@suse.de>\n \n \t* Makefile.in (OBJS-common): Add postreload-gcse.c."}, {"sha": "ed6445fff0a8ab10d8668bee6f37fee1bd3762c8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -2921,10 +2921,9 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \tpic_ref = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, address);\n       else\n \t{\n-\t  pic_ref = gen_rtx_MEM (Pmode,\n-\t\t\t\t gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n-\t\t\t\t\t       address));\n-\t  MEM_READONLY_P (pic_ref) = 1;\n+\t  pic_ref = gen_const_mem (Pmode,\n+\t\t\t\t   gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n+\t\t\t\t\t         address));\n \t}\n \n       insn = emit_move_insn (reg, pic_ref);"}, {"sha": "579daf876fac51b719fce1adf989bbe659236c46", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -386,10 +386,9 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t\t (Pmode, \n \t\t  machopic_indirection_name (orig, /*stub_p=*/false)));\n \n-     SYMBOL_REF_DECL (ptr_ref) = SYMBOL_REF_DECL (orig);\n+      SYMBOL_REF_DECL (ptr_ref) = SYMBOL_REF_DECL (orig);\n \n-      ptr_ref = gen_rtx_MEM (Pmode, ptr_ref);\n-      MEM_READONLY_P (ptr_ref) = 1;\n+      ptr_ref = gen_const_mem (Pmode, ptr_ref);\n \n       return ptr_ref;\n     }\n@@ -474,6 +473,7 @@ machopic_indirect_call_target (rtx target)\n       XEXP (target, 0) = gen_rtx_SYMBOL_REF (mode, stub_name);\n       SYMBOL_REF_DECL (XEXP (target, 0)) = decl;\n       MEM_READONLY_P (target) = 1;\n+      MEM_NOTRAP_P (target) = 1;\n     }\n \n   return target;\n@@ -536,9 +536,8 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      emit_insn (mode == DImode\n \t\t\t ? gen_macho_high_di (temp_reg, asym)\n \t\t\t : gen_macho_high (temp_reg, asym));\n-\t      mem = gen_rtx_MEM (GET_MODE (orig),\n-\t\t\t\t gen_rtx_LO_SUM (Pmode, temp_reg, asym));\n-\t      MEM_READONLY_P (mem) = 1;\n+\t      mem = gen_const_mem (GET_MODE (orig),\n+\t\t\t\t   gen_rtx_LO_SUM (Pmode, temp_reg, asym));\n \t      emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n #else\n \t      /* Some other CPU -- WriteMe! but right now there are no other platform that can use dynamic-no-pic  */\n@@ -568,10 +567,9 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \n \t      emit_insn (gen_rtx_SET (Pmode, hi_sum_reg, sum));\n \n-\t      mem = gen_rtx_MEM (GET_MODE (orig),\n-\t\t\t\t gen_rtx_LO_SUM (Pmode, \n-\t\t\t\t\t\t hi_sum_reg, offset));\n-\t      MEM_READONLY_P (mem) = 1;\n+\t      mem = gen_const_mem (GET_MODE (orig),\n+\t\t\t\t  gen_rtx_LO_SUM (Pmode, \n+\t\t\t\t\t\t  hi_sum_reg, offset));\n \t      insn = emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n \t      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, pic_ref, \n \t\t\t\t\t\t    REG_NOTES (insn));\n@@ -618,8 +616,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \n #if !defined (TARGET_TOC)\n \t  emit_move_insn (reg, pic_ref);\n-\t  pic_ref = gen_rtx_MEM (GET_MODE (orig), reg);\n-\t  MEM_READONLY_P (pic_ref) = 1;\n+\t  pic_ref = gen_const_mem (GET_MODE (orig), reg);\n #endif\n \t}\n       else"}, {"sha": "9ae3972c4627fb938f5aa088a34b7cb2760061d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -5306,8 +5306,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t{\n \t  new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);\n \t  new = gen_rtx_CONST (Pmode, new);\n-\t  new = gen_rtx_MEM (Pmode, new);\n-\t  MEM_READONLY_P (new) = 1;\n+\t  new = gen_const_mem (Pmode, new);\n \t  set_mem_alias_set (new, ix86_GOT_alias_set ());\n \n \t  if (reg == 0)\n@@ -5328,8 +5327,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t  new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n \t  new = gen_rtx_CONST (Pmode, new);\n \t  new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n-\t  new = gen_rtx_MEM (Pmode, new);\n-\t  MEM_READONLY_P (new) = 1;\n+\t  new = gen_const_mem (Pmode, new);\n \t  set_mem_alias_set (new, ix86_GOT_alias_set ());\n \n \t  if (reg == 0)\n@@ -5508,8 +5506,7 @@ legitimize_tls_address (rtx x, enum tls_model model, int for_mov)\n       off = gen_rtx_CONST (Pmode, off);\n       if (pic)\n \toff = gen_rtx_PLUS (Pmode, pic, off);\n-      off = gen_rtx_MEM (Pmode, off);\n-      MEM_READONLY_P (off) = 1;\n+      off = gen_const_mem (Pmode, off);\n       set_mem_alias_set (off, ix86_GOT_alias_set ());\n \n       if (TARGET_64BIT || TARGET_GNU_TLS)"}, {"sha": "770f83279155dce8f4421465455f949ba08f5331", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -686,13 +686,11 @@ ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n \n       tga_op1 = gen_reg_rtx (Pmode);\n       emit_insn (gen_load_ltoff_dtpmod (tga_op1, op1));\n-      tga_op1 = gen_rtx_MEM (Pmode, tga_op1);\n-      MEM_READONLY_P (tga_op1) = 1;\n+      tga_op1 = gen_const_mem (Pmode, tga_op1);\n \n       tga_op2 = gen_reg_rtx (Pmode);\n       emit_insn (gen_load_ltoff_dtprel (tga_op2, op1));\n-      tga_op2 = gen_rtx_MEM (Pmode, tga_op2);\n-      MEM_READONLY_P (tga_op2) = 1;\n+      tga_op2 = gen_const_mem (Pmode, tga_op2);\n \n       tga_ret = emit_library_call_value (gen_tls_get_addr (), NULL_RTX,\n \t\t\t\t\t LCT_CONST, Pmode, 2, tga_op1,\n@@ -715,8 +713,7 @@ ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n \n       tga_op1 = gen_reg_rtx (Pmode);\n       emit_insn (gen_load_ltoff_dtpmod (tga_op1, op1));\n-      tga_op1 = gen_rtx_MEM (Pmode, tga_op1);\n-      MEM_READONLY_P (tga_op1) = 1;\n+      tga_op1 = gen_const_mem (Pmode, tga_op1);\n \n       tga_op2 = const0_rtx;\n \n@@ -746,8 +743,7 @@ ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n     case TLS_MODEL_INITIAL_EXEC:\n       tmp = gen_reg_rtx (Pmode);\n       emit_insn (gen_load_ltoff_tprel (tmp, op1));\n-      tmp = gen_rtx_MEM (Pmode, tmp);\n-      MEM_READONLY_P (tmp) = 1;\n+      tmp = gen_const_mem (Pmode, tmp);\n       tmp = force_reg (Pmode, tmp);\n \n       if (!register_operand (op0, Pmode))"}, {"sha": "4b9a4b95b3227131fef6ed8ec771f9642483d3b4", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -718,8 +718,7 @@\n   \"\"\n {\n   operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (DImode);\n-  operands[3] = gen_rtx_MEM (DImode, operands[2]);\n-  MEM_READONLY_P (operands[3]) = 1;\n+  operands[3] = gen_const_mem (DImode, operands[2]);\n })\n \n (define_insn \"*load_fptr_internal1\""}, {"sha": "ca4079f5ffadb75864404463a5575ab3b8bcf297", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -1993,9 +1993,7 @@ m32r_legitimize_pic_address (rtx orig, rtx reg)\n       emit_insn (gen_pic_load_addr (address, orig));\n \n       emit_insn (gen_addsi3 (address, address, pic_offset_table_rtx));\n-      pic_ref = gen_rtx_MEM (Pmode, address);\n-\n-      MEM_READONLY_P (pic_ref) = 1;\n+      pic_ref = gen_const_mem (Pmode, address);\n       insn = emit_move_insn (reg, pic_ref);\n       current_function_uses_pic_offset_table = 1;\n #if 0"}, {"sha": "be1c4bd4618864e4c6eb5166c11f30d965aa4f42", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -1013,15 +1013,13 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t      gen_rtx_PLUS (word_mode, pic_offset_table_rtx,\n \t\t\t\t    gen_rtx_HIGH (word_mode, orig)));\n       pic_ref\n-\t= gen_rtx_MEM (Pmode,\n-\t\t       gen_rtx_LO_SUM (Pmode, tmp_reg,\n-\t\t\t\t       gen_rtx_UNSPEC (Pmode,\n-\t\t\t\t\t\t       gen_rtvec (1, orig),\n-\t\t\t\t\t\t       UNSPEC_DLTIND14R)));\n+\t= gen_const_mem (Pmode,\n+\t\t         gen_rtx_LO_SUM (Pmode, tmp_reg,\n+\t\t\t\t         gen_rtx_UNSPEC (Pmode,\n+\t\t\t\t\t\t         gen_rtvec (1, orig),\n+\t\t\t\t\t\t         UNSPEC_DLTIND14R)));\n \n       current_function_uses_pic_offset_table = 1;\n-      MEM_NOTRAP_P (pic_ref) = 1;\n-      MEM_READONLY_P (pic_ref) = 1;\n       mark_reg_pointer (reg, BITS_PER_UNIT);\n       insn = emit_move_insn (reg, pic_ref);\n "}, {"sha": "13143d7aed179d9d07a1a16de892ae25901e0db8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -3460,8 +3460,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\t  tmp1 = gen_reg_rtx (Pmode);\n \t\t  tmp2 = gen_reg_rtx (Pmode);\n \t\t  tmp3 = gen_reg_rtx (Pmode);\n-\t\t  mem = gen_rtx_MEM (Pmode, tmp1);\n-\t\t  MEM_READONLY_P (mem) = 1;\n+\t\t  mem = gen_const_mem (Pmode, tmp1);\n \n \t\t  first = emit_insn (gen_load_toc_v4_PIC_1b (tempLR, lab,\n \t\t\t\t\t\t\t     gsym));\n@@ -4418,10 +4417,9 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t\tget_pool_mode (XEXP (operands[1], 0))))\n \t    {\n \t      operands[1]\n-\t\t= gen_rtx_MEM (mode,\n-\t\t\t       create_TOC_reference (XEXP (operands[1], 0)));\n+\t\t= gen_const_mem (mode,\n+\t\t\t         create_TOC_reference (XEXP (operands[1], 0)));\n \t      set_mem_alias_set (operands[1], get_TOC_alias_set ());\n-\t      MEM_READONLY_P (operands[1]) = 1;\n \t    }\n \t}\n       break;"}, {"sha": "89c95df8aec91dc5c00da1ac188c118c8cd4285f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -2604,8 +2604,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n           new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n           new = gen_rtx_CONST (Pmode, new);\n           new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n-          new = gen_rtx_MEM (Pmode, new);\n-\t  MEM_READONLY_P (new) = 1;\n+          new = gen_const_mem (Pmode, new);\n           emit_move_insn (reg, new);\n           new = reg;\n         }\n@@ -2620,8 +2619,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n           new = gen_rtx_CONST (Pmode, new);\n           emit_move_insn (temp, new);\n \n-          new = gen_rtx_MEM (Pmode, temp);\n-\t  MEM_READONLY_P (new) = 1;\n+          new = gen_const_mem (Pmode, temp);\n           emit_move_insn (reg, new);\n           new = reg;\n         }\n@@ -2641,8 +2639,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n           emit_move_insn (temp, addr);\n \n           new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, temp);\n-          new = gen_rtx_MEM (Pmode, new);\n-\t  MEM_READONLY_P (new) = 1;\n+          new = gen_const_mem (Pmode, new);\n           emit_move_insn (reg, new);\n           new = reg;\n         }\n@@ -2932,8 +2929,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \t    new = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTNTPOFF);\n \t    new = gen_rtx_CONST (Pmode, new);\n \t    new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, new);\n-\t    new = gen_rtx_MEM (Pmode, new);\n-\t    MEM_READONLY_P (new) = 1;\n+\t    new = gen_const_mem (Pmode, new);\n \t    temp = gen_reg_rtx (Pmode);\n \t    emit_move_insn (temp, new);\n \t  }\n@@ -2947,8 +2943,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \t    temp = gen_reg_rtx (Pmode);\n \t    emit_move_insn (temp, new);\n \n-\t    new = gen_rtx_MEM (Pmode, temp);\n-\t    MEM_READONLY_P (new) = 1;\n+\t    new = gen_const_mem (Pmode, temp);\n \t    temp = gen_reg_rtx (Pmode);\n \t    emit_move_insn (temp, new);\n \t  }\n@@ -2967,8 +2962,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \t    emit_move_insn (temp, new);\n \n             new = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, temp);\n-\t    new = gen_rtx_MEM (Pmode, new);\n-\t    MEM_READONLY_P (new) = 1;\n+\t    new = gen_const_mem (Pmode, new);\n \n \t    new = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, new, addr), UNSPEC_TLS_LOAD);\n \t    temp = gen_reg_rtx (Pmode);\n@@ -2986,9 +2980,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \t    emit_move_insn (temp, new);\n \n \t    new = temp;\n-\t    new = gen_rtx_MEM (Pmode, new);\n-\t    MEM_READONLY_P (new) = 1;\n-\n+\t    new = gen_const_mem (Pmode, new);\n \t    new = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, new, addr), UNSPEC_TLS_LOAD);\n \t    temp = gen_reg_rtx (Pmode);\n \t    emit_insn (gen_rtx_SET (Pmode, temp, new));"}, {"sha": "bbfed329f36232ad62cdb7771fa5a61635d8f3ae", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -6840,9 +6840,7 @@\n \n    emit_move_insn (base, gen_rtx_LABEL_REF (Pmode, operands[3]));\n \n-   index = gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, base, index));\n-   MEM_READONLY_P (index) = 1;\n-   MEM_NOTRAP_P (index) = 1;\n+   index = gen_const_mem (Pmode, gen_rtx_PLUS (Pmode, base, index));\n    emit_move_insn (target, index);\n \n    if (flag_pic)"}, {"sha": "254aef5e55bb304c7c5710cd1d92a97405bec12d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -1042,7 +1042,6 @@ prepare_move_operands (rtx operands[], enum machine_mode mode)\n \t      emit_insn (gen_load_gbr (tmp2));\n \t      tmp = gen_reg_rtx (Pmode);\n \t      emit_insn (gen_symTPOFF2reg (tmp, op1));\n-\t      MEM_READONLY_P (tmp) = 1;\n \n \t      if (register_operand (op0, Pmode))\n \t\top1 = op0;\n@@ -4398,9 +4397,8 @@ sh_reorg (void)\n \t\t  else\n \t\t    {\n \t\t      lab = add_constant (src, mode, 0);\n-\t\t      newsrc = gen_rtx_MEM (mode,\n-\t\t\t\t\t    gen_rtx_LABEL_REF (VOIDmode, lab));\n-\t\t      MEM_READONLY_P (newsrc) = 1;\n+\t\t      newsrc = gen_rtx_LABEL_REF (VOIDmode, lab);\n+\t\t      newsrc = gen_const_mem (mode, newsrc);\n \t\t    }\n \t\t  *patp = gen_rtx_SET (VOIDmode, dst, newsrc);\n \t\t  INSN_CODE (scan) = -1;"}, {"sha": "ac1a4345a0748fbcba6766515f9e7dd69e58ade8", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -3805,11 +3805,10 @@ legitimize_pic_address (rtx orig, enum machine_mode mode ATTRIBUTE_UNUSED,\n       else\n \taddress = orig;\n \n-      pic_ref = gen_rtx_MEM (Pmode,\n-\t\t\t     gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t   pic_offset_table_rtx, address));\n+      pic_ref = gen_const_mem (Pmode,\n+\t\t\t       gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t     pic_offset_table_rtx, address));\n       current_function_uses_pic_offset_table = 1;\n-      MEM_READONLY_P (pic_ref) = 1;\n       insn = emit_move_insn (reg, pic_ref);\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */"}, {"sha": "cc82079629b89b2541b7307145616ce4809c3806", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -1320,8 +1320,7 @@\n   /* Add the table address to the index.  */\n   emit_insn (gen_addsi3 (reg, reg, tableaddress));\n   /* Load the table entry.  */\n-  mem = gen_rtx_MEM (CASE_VECTOR_MODE, reg);\n-  MEM_READONLY_P (mem) = 1;\n+  mem = gen_const_mem (CASE_VECTOR_MODE, reg);\n   if (! TARGET_BIG_SWITCH)\n     {\n       rtx reg2 = gen_reg_rtx (HImode);"}, {"sha": "4d40705d1bcf85f4abae9f2233fa1917a39e549d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -607,6 +607,17 @@ gen_rtx_MEM (enum machine_mode mode, rtx addr)\n   return rt;\n }\n \n+/* Generate a memory referring to non-trapping constant memory.  */\n+\n+rtx\n+gen_const_mem (enum machine_mode mode, rtx addr)\n+{\n+  rtx mem = gen_rtx_MEM (mode, addr);\n+  MEM_READONLY_P (mem) = 1;\n+  MEM_NOTRAP_P (mem) = 1;\n+  return mem;\n+}\n+\n rtx\n gen_rtx_SUBREG (enum machine_mode mode, rtx reg, int offset)\n {"}, {"sha": "c0f10d914bb6c0b268691dbb1749bccbbf361d49", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -8737,9 +8737,7 @@ do_tablejump (rtx index, enum machine_mode mode, rtx range, rtx table_label,\n #endif\n     index = memory_address_noforce (CASE_VECTOR_MODE, index);\n   temp = gen_reg_rtx (CASE_VECTOR_MODE);\n-  vector = gen_rtx_MEM (CASE_VECTOR_MODE, index);\n-  MEM_READONLY_P (vector) = 1;\n-  MEM_NOTRAP_P (vector) = 1;\n+  vector = gen_const_mem (CASE_VECTOR_MODE, index);\n   convert_move (temp, vector, 0);\n \n   emit_jump_insn (gen_tablejump (temp, table_label));"}, {"sha": "0d0e300ca6012c8c120ed266551abdb298a21a11", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -2195,6 +2195,7 @@ extern rtx unlink_insn_chain (rtx, rtx);\n extern rtx delete_insn_and_edges (rtx);\n extern void delete_insn_chain_and_edges (rtx, rtx);\n extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);\n+extern rtx gen_const_mem (enum machine_mode, rtx);\n \n /* In combine.c */\n extern int combine_instructions (rtx, unsigned int);"}, {"sha": "e363bf134b9801e79e3395291662cb2f9c899df9", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542a8afa8a40e0714720ce168046a3880a44d311/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=542a8afa8a40e0714720ce168046a3880a44d311", "patch": "@@ -2979,9 +2979,8 @@ force_const_mem (enum machine_mode mode, rtx x)\n   *slot = desc;\n \n   /* Construct the MEM.  */\n-  desc->mem = def = gen_rtx_MEM (mode, symbol);\n+  desc->mem = def = gen_const_mem (mode, symbol);\n   set_mem_attributes (def, lang_hooks.types.type_for_mode (mode, 0), 1);\n-  MEM_READONLY_P (def) = 1;\n \n   /* If we're dropping a label to the constant pool, make sure we\n      don't delete it.  */"}]}