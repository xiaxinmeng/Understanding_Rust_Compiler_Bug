{"sha": "5bb86bf23de91f8495c4c9d578cf702a81624633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiODZiZjIzZGU5MWY4NDk1YzRjOWQ1NzhjZjcwMmE4MTYyNDYzMw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-04-28T16:53:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-04-28T16:53:00Z"}, "message": "flow.c (propagate_block_delete_insn): Handle deletion of ADDR_VEC and ADDR_DIFF_VEC insns when...\n\n\n        * flow.c (propagate_block_delete_insn): Handle deletion of ADDR_VEC\n        and ADDR_DIFF_VEC insns when the proceeding CODE_LABEL was put\n        into the constant pool.\n        * jump.c (jump_optimize_1): Remove barrier successors after all\n        the LABEL_NUSES counds have been computed.\n        (delete_barrier_successors): When deleting a tablejump insn, also\n        delete the jump table it uses.\n        * varasm.c (force_const_mem): Set LABEL_PRESERVE_P when forcing a\n        label into memory.\n\nFrom-SVN: r41662", "tree": {"sha": "875f2d598870b2626ddc81d482220efa9067a49c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875f2d598870b2626ddc81d482220efa9067a49c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb86bf23de91f8495c4c9d578cf702a81624633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb86bf23de91f8495c4c9d578cf702a81624633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb86bf23de91f8495c4c9d578cf702a81624633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb86bf23de91f8495c4c9d578cf702a81624633/comments", "author": null, "committer": null, "parents": [{"sha": "3a432f1fae269a046bfb30062a61dea7258c6354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a432f1fae269a046bfb30062a61dea7258c6354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a432f1fae269a046bfb30062a61dea7258c6354"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "3c4711381ef25a364c2c859d78a13b8fe7bff3ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bb86bf23de91f8495c4c9d578cf702a81624633", "patch": "@@ -1,3 +1,15 @@\n+Sat Apr 28 10:36:23 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* flow.c (propagate_block_delete_insn): Handle deletion of ADDR_VEC\n+\tand ADDR_DIFF_VEC insns when the proceeding CODE_LABEL was put\n+\tinto the constant pool.\n+\t* jump.c (jump_optimize_1): Remove barrier successors after all\n+\tthe LABEL_NUSES counds have been computed.\n+\t(delete_barrier_successors): When deleting a tablejump insn, also\n+\tdelete the jump table it uses.\n+\t* varasm.c (force_const_mem): Set LABEL_PRESERVE_P when forcing a\n+\tlabel into memory.\n+\n 2001-04-28  Martin Kalen  <martin.kalen@todaysystems.com.au>\n \n         * pa.c (FRP): Remove erroneous white space in macro definition."}, {"sha": "96d2ad040a4fef2895d42d3550778ca1017470a2", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=5bb86bf23de91f8495c4c9d578cf702a81624633", "patch": "@@ -3638,7 +3638,10 @@ propagate_block_delete_insn (bb, insn)\n       rtx label = XEXP (inote, 0);\n       rtx next;\n \n-      if (LABEL_NUSES (label) == 1\n+      /* The label may be forced if it has been put in the constant\n+\t pool.  If that is the only use we must discard the table\n+\t jump following it, but not the label itself.  */\n+      if (LABEL_NUSES (label) == 1 + LABEL_PRESERVE_P (label)\n \t  && (next = next_nonnote_insn (label)) != NULL\n \t  && GET_CODE (next) == JUMP_INSN\n \t  && (GET_CODE (PATTERN (next)) == ADDR_VEC"}, {"sha": "4046b9a350d65fc5cd92c208c9679c354720043e", "filename": "gcc/jump.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=5bb86bf23de91f8495c4c9d578cf702a81624633", "patch": "@@ -214,9 +214,6 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n   cross_jump_death_matters = (cross_jump == 2);\n   max_uid = init_label_info (f) + 1;\n \n-  if (! mark_labels_only)\n-    delete_barrier_successors (f);\n-\n   /* Leave some extra room for labels and duplicate exit test insns\n      we make.  */\n   max_jump_chain = max_uid * 14 / 10;\n@@ -239,6 +236,9 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n     if (GET_CODE (XEXP (insn, 0)) == CODE_LABEL)\n       LABEL_NUSES (XEXP (insn, 0))++;\n \n+  if (! mark_labels_only)\n+    delete_barrier_successors (f);\n+\n   /* Quit now if we just wanted to rebuild the JUMP_LABEL and REG_LABEL\n      notes and recompute LABEL_NUSES.  */\n   if (mark_labels_only)\n@@ -792,7 +792,24 @@ delete_barrier_successors (f)\n \n \t  while (insn != 0 && GET_CODE (insn) != CODE_LABEL)\n \t    {\n-\t      if (GET_CODE (insn) == NOTE\n+\t      if (GET_CODE (insn) == JUMP_INSN)\n+\t\t{\n+\t\t  /* Detect when we're deleting a tablejump; get rid of\n+\t\t     the jump table as well.  */\n+\t\t  rtx next1 = next_nonnote_insn (insn);\n+\t\t  rtx next2 = next1 ? next_nonnote_insn (next1) : 0;\n+\t\t  if (next2 && GET_CODE (next1) == CODE_LABEL\n+\t\t      && GET_CODE (next2) == JUMP_INSN\n+\t\t      && (GET_CODE (PATTERN (next2)) == ADDR_VEC\n+\t\t\t  || GET_CODE (PATTERN (next2)) == ADDR_DIFF_VEC))\n+\t\t    {\n+\t\t      delete_insn (insn);\n+\t\t      insn = next2;\n+\t\t    }\n+\t\t  else\n+\t\t    insn = delete_insn (insn);\n+\t\t}\n+\t      else if (GET_CODE (insn) == NOTE\n \t\t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_END)\n \t\tinsn = NEXT_INSN (insn);\n \t      else"}, {"sha": "86f2e4f420b128cd5485ac4a6a14aadc85186f37", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb86bf23de91f8495c4c9d578cf702a81624633/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5bb86bf23de91f8495c4c9d578cf702a81624633", "patch": "@@ -3589,6 +3589,9 @@ force_const_mem (mode, x)\n       pool_offset += align - 1;\n       pool_offset &= ~ (align - 1);\n \n+      if (GET_CODE (x) == LABEL_REF)\n+\tLABEL_PRESERVE_P (XEXP (x, 0)) = 1;\n+\n       /* Allocate a pool constant descriptor, fill it in, and chain it in.  */\n \n       pool = (struct pool_constant *) ggc_alloc (sizeof (struct pool_constant));"}]}