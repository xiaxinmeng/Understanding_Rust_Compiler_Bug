{"sha": "301bbc16628d9ca57cd7b0af306fde6753f04911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxYmJjMTY2MjhkOWNhNTdjZDdiMGFmMzA2ZmRlNjc1M2YwNDkxMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-08-29T13:04:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-08-29T13:04:19Z"}, "message": "re PR tree-optimization/58246 (wrong code at -O1 and above)\n\n2013-08-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58246\n\t* tree-ssa-dce.c (mark_aliased_reaching_defs_necessary_1): Properly\n\thandle the dominance check inside a basic-block.\n\n\t* gcc.dg/torture/pr58246.c: New testcase.\n\nFrom-SVN: r202071", "tree": {"sha": "0a21cee48f6a9e573e775c87ff8e1a9a4c321ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a21cee48f6a9e573e775c87ff8e1a9a4c321ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/301bbc16628d9ca57cd7b0af306fde6753f04911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301bbc16628d9ca57cd7b0af306fde6753f04911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301bbc16628d9ca57cd7b0af306fde6753f04911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301bbc16628d9ca57cd7b0af306fde6753f04911/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4860a46271bd50674a3adf1bc33704b98d7efffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4860a46271bd50674a3adf1bc33704b98d7efffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4860a46271bd50674a3adf1bc33704b98d7efffc"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "30caf6edf4e05498dc8a36355075d68cdd3ffda3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=301bbc16628d9ca57cd7b0af306fde6753f04911", "patch": "@@ -1,3 +1,9 @@\n+2013-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58246\n+\t* tree-ssa-dce.c (mark_aliased_reaching_defs_necessary_1): Properly\n+\thandle the dominance check inside a basic-block.\n+\n 2013-08-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57287"}, {"sha": "1f34c2d8433c279c57f7bcd239cb0ae5f4426d21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=301bbc16628d9ca57cd7b0af306fde6753f04911", "patch": "@@ -1,3 +1,8 @@\n+2013-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58246\n+\t* gcc.dg/torture/pr58246.c: New testcase.\n+\n 2013-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/52243"}, {"sha": "5417abf913d5e4ba7856ac9049cfd27cf1e2eacd", "filename": "gcc/testsuite/gcc.dg/torture/pr58246.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58246.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58246.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58246.c?ref=301bbc16628d9ca57cd7b0af306fde6753f04911", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+int a, b; \n+\n+int main ()\n+{\n+  int t[2] = {1,1};\n+\n+  for (a = 0; a < 2; a++)\n+    {\n+      b ^= t[a];\n+      t[a] = t[1] = 0;\n+    }\n+\n+  if (b != 1)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "22ae50b791c17330089ca97a8ee702d56353d155", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301bbc16628d9ca57cd7b0af306fde6753f04911/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=301bbc16628d9ca57cd7b0af306fde6753f04911", "patch": "@@ -574,6 +574,11 @@ mark_aliased_reaching_defs_necessary_1 (ao_ref *ref, tree vdef, void *data)\n \t\t      in the references (gcc.c-torture/execute/pr42142.c).\n \t\t      The simplest way is to check if the kill dominates\n \t\t      the use.  */\n+\t\t   /* But when both are in the same block we cannot\n+\t\t      easily tell whether we came from a backedge\n+\t\t      unless we decide to compute stmt UIDs\n+\t\t      (see PR58246).  */\n+\t\t   && (basic_block) data != gimple_bb (def_stmt)\n \t\t   && dominated_by_p (CDI_DOMINATORS, (basic_block) data,\n \t\t\t\t      gimple_bb (def_stmt))\n \t\t   && operand_equal_p (ref->ref, lhs, 0))"}]}