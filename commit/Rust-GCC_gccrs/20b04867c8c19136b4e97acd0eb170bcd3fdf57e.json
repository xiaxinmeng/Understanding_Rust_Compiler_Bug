{"sha": "20b04867c8c19136b4e97acd0eb170bcd3fdf57e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiMDQ4NjdjOGMxOTEzNmI0ZTk3YWNkMGViMTcwYmNkM2ZkZjU3ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-25T01:38:04Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-25T01:38:04Z"}, "message": "(shiftcosts, genshifty_op): Add SH3 support.\n\nFrom-SVN: r9813", "tree": {"sha": "68fd14d71f1059e37da278da2700ec5f5c7695fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68fd14d71f1059e37da278da2700ec5f5c7695fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b04867c8c19136b4e97acd0eb170bcd3fdf57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b04867c8c19136b4e97acd0eb170bcd3fdf57e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b04867c8c19136b4e97acd0eb170bcd3fdf57e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b04867c8c19136b4e97acd0eb170bcd3fdf57e/comments", "author": null, "committer": null, "parents": [{"sha": "6b005b889e9f122d350a7d8641edc292879e33d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b005b889e9f122d350a7d8641edc292879e33d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b005b889e9f122d350a7d8641edc292879e33d1"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "69b0b8f057f23675b0b5dbc44a24029482f1336d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b04867c8c19136b4e97acd0eb170bcd3fdf57e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b04867c8c19136b4e97acd0eb170bcd3fdf57e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=20b04867c8c19136b4e97acd0eb170bcd3fdf57e", "patch": "@@ -36,6 +36,7 @@\n #define MSW (TARGET_LITTLE_ENDIAN ? 1 : 0)\n #define LSW (TARGET_LITTLE_ENDIAN ? 0 : 1)\n \n+/* ??? The pragma interrupt support will not work for SH3.  */\n /* This is set by #pragma interrupt and #pragma trapa, and causes gcc to\n    output code for the next function appropriate for an interrupt handler.  */\n int pragma_interrupt;\n@@ -735,6 +736,9 @@ shiftcosts (x)\n   /* If shift by a non constant, then this will be expensive.  */\n   if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n     {\n+      if (TARGET_SH3)\n+\treturn 2;\n+      /* If not an sh3 then we don't even have an instruction for it.  */\n       return 20;\n     }\n \n@@ -836,6 +840,8 @@ gen_ashift (type, n, reg)\n /* Output RTL to split a constant shift into its component SH constant\n    shift instructions.  */\n    \n+/* ??? For SH3, should reject constant shifts when slower than loading the\n+   shift count into a register?  */\n \n int\n gen_shifty_op (code, operands)\n@@ -884,6 +890,13 @@ expand_ashiftrt (operands)\n   tree func_name;\n   int value;\n \n+  if (TARGET_SH3 && GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx count = copy_to_mode_reg (SImode, operands[2]);\n+      emit_insn (gen_negsi2 (count, count));\n+      emit_insn (gen_ashrsi3_d (operands[0], operands[1], count));\n+      return 1;\n+    }\n   if (GET_CODE (operands[2]) != CONST_INT)\n     return 0;\n "}]}