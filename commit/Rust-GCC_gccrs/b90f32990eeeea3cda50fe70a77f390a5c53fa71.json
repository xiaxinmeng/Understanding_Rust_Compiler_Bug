{"sha": "b90f32990eeeea3cda50fe70a77f390a5c53fa71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwZjMyOTkwZWVlZWEzY2RhNTBmZTcwYTc3ZjM5MGE1YzUzZmE3MQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2004-03-02T21:06:24Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2004-03-02T21:06:24Z"}, "message": "m68hc11.md (SOFT_TMP_REGNUM): Define.\n\n\t* config/m68hc11/m68hc11.md (SOFT_TMP_REGNUM): Define.\n\t(SOFT_XY_REGNUM): Define.\n\t(cmp split): Use the above instead of hard coded numbers.\n\t(8-bit op split): No need to check the mode; allow Q_REG.\n\t(ashift split): Adjust the first operand if it uses the SP and we\n\tare pushing the shifted value.\n\t(plus shift split): Fix when a source is in register D+X.\n\t(\"doloop_end\"): Pass dummy arguments to gen_rtx_NE.\n\nFrom-SVN: r78781", "tree": {"sha": "8b53abecba2d352b5b39ce6e2c035978d99d84ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b53abecba2d352b5b39ce6e2c035978d99d84ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b90f32990eeeea3cda50fe70a77f390a5c53fa71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90f32990eeeea3cda50fe70a77f390a5c53fa71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90f32990eeeea3cda50fe70a77f390a5c53fa71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90f32990eeeea3cda50fe70a77f390a5c53fa71/comments", "author": null, "committer": null, "parents": [{"sha": "77d2a36d1db2b70ad5e9f6824b341b09109628f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77d2a36d1db2b70ad5e9f6824b341b09109628f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77d2a36d1db2b70ad5e9f6824b341b09109628f7"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "f8a1e26af6b449ed8a5fbb61e78bc91afeaaa632", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90f32990eeeea3cda50fe70a77f390a5c53fa71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90f32990eeeea3cda50fe70a77f390a5c53fa71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b90f32990eeeea3cda50fe70a77f390a5c53fa71", "patch": "@@ -1,3 +1,14 @@\n+2004-03-02  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.md (SOFT_TMP_REGNUM): Define.\n+\t(SOFT_XY_REGNUM): Define.\n+\t(cmp split): Use the above instead of hard coded numbers.\n+\t(8-bit op split): No need to check the mode; allow Q_REG.\n+\t(ashift split): Adjust the first operand if it uses the SP and we\n+\tare pushing the shifted value.\n+\t(plus shift split): Fix when a source is in register D+X.\n+\t(\"doloop_end\"): Pass dummy arguments to gen_rtx_NE.\n+\n 2004-03-02  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_check_z_replacement): Fix when"}, {"sha": "335095e09cd1123077bb16e2737a168204f3a8f1", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b90f32990eeeea3cda50fe70a77f390a5c53fa71/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b90f32990eeeea3cda50fe70a77f390a5c53fa71/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=b90f32990eeeea3cda50fe70a77f390a5c53fa71", "patch": "@@ -144,7 +144,9 @@\n    (A_REGNUM        5)\t\t; A (high part of D)\n    (B_REGNUM        6)\t\t; B (low part of D)\n    (CC_REGNUM       7)\t\t; Condition code register\n-   (SOFT_Z_REGNUM  11)          ; Z soft register\n+   (SOFT_TMP_REGNUM 10)         ; TMP soft register\n+   (SOFT_Z_REGNUM   11)         ; Z soft register\n+   (SOFT_XY_REGNUM  12)         ; XY soft register\n ])\n \n ;;--------------------------------------------------------------------\n@@ -252,7 +254,7 @@\n   [(set (cc0)\n \t(match_operand:QI 0 \"tst_operand\" \"m\"))\n    (use (match_operand:HI 1 \"hard_reg_operand\" \"dxy\"))\n-   (use (reg:HI 11))]\n+   (use (reg:HI SOFT_Z_REGNUM))]\n   \"\"\n   \"#\")\n \n@@ -937,9 +939,9 @@\n (define_split\n   [(set (match_operand:QI 0 \"hard_addr_reg_operand\" \"\")\n         (match_operand:QI 1 \"general_operand\" \"\"))]\n-  \"z_replacement_completed == 2 && GET_MODE (operands[0]) == QImode\n+  \"z_replacement_completed == 2\n    && !reg_mentioned_p (operands[0], operands[1])\n-   && !D_REG_P (operands[1])\"\n+   && !(D_REG_P (operands[1]) || Q_REG_P (operands[1]))\"\n   [(parallel [(set (reg:HI D_REGNUM) (match_dup 2))\n               (set (match_dup 2) (reg:HI D_REGNUM))])\n    (set (reg:QI D_REGNUM) (match_dup 1))\n@@ -953,9 +955,9 @@\n (define_split\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n         (match_operand:QI 1 \"hard_addr_reg_operand\" \"\"))]\n-  \"z_replacement_completed == 2 && GET_MODE (operands[1]) == QImode\n+  \"z_replacement_completed == 2\n    && !reg_mentioned_p (operands[1], operands[0])\n-   && !D_REG_P (operands[0])\"\n+   && !(D_REG_P (operands[0]) || Q_REG_P (operands[0]))\"\n   [(parallel [(set (reg:HI D_REGNUM) (match_dup 2))\n               (set (match_dup 2) (reg:HI D_REGNUM))])\n    (set (match_dup 0) (reg:QI D_REGNUM))\n@@ -4443,6 +4445,13 @@\n       {\n          m68hc11_split_move (m68hc11_gen_lowpart (SImode, operands[0]),\n \t\t\t     const0_rtx, operands[2]);\n+\n+         /* Adjust first operand if it uses SP so that we take into\n+            account the above push.  Can occur only for 68HC12.  */\n+         if (reg_mentioned_p (gen_rtx (REG, HImode, HARD_SP_REGNUM),\n+\t                      operands[1]))\n+           operands[1] = adjust_address (operands[1],\n+\t                                 GET_MODE (operands[0]), 4);\n       }\n     m68hc11_split_move (m68hc11_gen_highpart (SImode, operands[0]),\n \t\t        m68hc11_gen_lowpart (SImode, operands[1]),\n@@ -4531,14 +4540,24 @@\n \t\t\t\t(const_int 16))\n \t\t   (match_operand:SI 2 \"general_operand\" \"\")))]\n   \"z_replacement_completed == 2 && X_REG_P (operands[1])\"\n-  [(set (reg:HI D_REGNUM) (reg:HI X_REGNUM))\n+  [(set (reg:HI D_REGNUM) (match_dup 5))\n    (set (reg:HI X_REGNUM) (match_dup 3))\n    (set (reg:HI D_REGNUM) (plus:HI (reg:HI D_REGNUM) (match_dup 4)))\n    (set (reg:HI X_REGNUM) (plus:HI (plus:HI (reg:HI X_REGNUM)\n \t\t\t\t\t    (const_int 0))\n \t\t\t\t   (reg:HI CC_REGNUM)))]\n   \"operands[3] = m68hc11_gen_highpart (HImode, operands[2]);\n-   operands[4] = m68hc11_gen_lowpart (HImode, operands[2]);\")\n+   if (X_REG_P (operands[2]))\n+     {\n+       operands[4] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+       operands[5] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n+     }\n+   else\n+     {\n+       operands[4] = m68hc11_gen_lowpart (HImode, operands[2]);\n+       operands[5] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+     }\n+\")\n \n (define_insn \"addsi_ashift16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")"}]}