{"sha": "3a978538036cd43d629c7b003c5ee6c8b3bf2c98", "node_id": "C_kwDOANBUbNoAKDNhOTc4NTM4MDM2Y2Q0M2Q2MjljN2IwMDNjNWVlNmM4YjNiZjJjOTg", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-22T15:32:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:25Z"}, "message": "[Ada] Check declare and qualified expressions for unset references\n\nDetection of references to unset (uninitialized) objects requires calls\nto Check_Unset_Reference on every subexpression of a composite statement\nand expression. For declare and qualified expressions this was done only\nwhen they occurred within another composite statement/expression.\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Declare_Expression): Check expression for\n\treferences to unset objects.\n\t(Resolve_Qualified_Expression): Likewise.\n\t* sem_warn.adb (Check_Unset_Reference): Remove handling of\n\tdeclare and qualified expressions; clarify comment for type\n\tconversions.", "tree": {"sha": "ce5147c2907ad86ff3f93324380cba0adb9e9560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce5147c2907ad86ff3f93324380cba0adb9e9560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a978538036cd43d629c7b003c5ee6c8b3bf2c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a978538036cd43d629c7b003c5ee6c8b3bf2c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a978538036cd43d629c7b003c5ee6c8b3bf2c98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a978538036cd43d629c7b003c5ee6c8b3bf2c98/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469688bfee89002aa8e5a7812dcbf2b1ee9073dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469688bfee89002aa8e5a7812dcbf2b1ee9073dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469688bfee89002aa8e5a7812dcbf2b1ee9073dc"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "5a57d62faae7947e430af4543e189d531a0b4a06", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a978538036cd43d629c7b003c5ee6c8b3bf2c98/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a978538036cd43d629c7b003c5ee6c8b3bf2c98/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3a978538036cd43d629c7b003c5ee6c8b3bf2c98", "patch": "@@ -7673,6 +7673,7 @@ package body Sem_Res is\n       end if;\n \n       Resolve (Expr, Typ);\n+      Check_Unset_Reference (Expr);\n    end Resolve_Declare_Expression;\n \n    -----------------------------------------\n@@ -10586,6 +10587,7 @@ package body Sem_Res is\n \n    begin\n       Resolve (Expr, Target_Typ);\n+      Check_Unset_Reference (Expr);\n \n       --  A qualified expression requires an exact match of the type, class-\n       --  wide matching is not allowed. However, if the qualifying type is"}, {"sha": "8ca5c76a075e440d25afd4e6b7290a7f1decb22c", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a978538036cd43d629c7b003c5ee6c8b3bf2c98/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a978538036cd43d629c7b003c5ee6c8b3bf2c98/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=3a978538036cd43d629c7b003c5ee6c8b3bf2c98", "patch": "@@ -2244,13 +2244,11 @@ package body Sem_Warn is\n                Check_Unset_Reference (Pref);\n             end;\n \n-         --  For type conversions, qualifications, or expressions with actions,\n-         --  examine the expression.\n+         --  Type conversions can appear in assignment statements both\n+         --  as variable names and as expressions. We examine their own\n+         --  expressions only when processing their parent node.\n \n-         when N_Expression_With_Actions\n-            | N_Qualified_Expression\n-            | N_Type_Conversion\n-         =>\n+         when N_Type_Conversion =>\n             Check_Unset_Reference (Expression (N));\n \n          --  For explicit dereference, always check prefix, which will generate"}]}