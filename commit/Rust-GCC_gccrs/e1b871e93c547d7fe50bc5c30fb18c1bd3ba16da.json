{"sha": "e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiODcxZTkzYzU0N2Q3ZmU1MGJjNWMzMGZiMThjMWJkM2JhMTZkYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T09:32:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T09:32:20Z"}, "message": "[multiple changes]\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* back_end.adb, sem_res.adb, switch-c.adb, sem_scil.adb: Minor\n\treformatting.\n\t* sem_attr.adb, sem_cat.adb, sem_disp.adb, sem_elab.adb, sem_elim.adb,\n\tsem_eval.adb: Use Ekind_In\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb: better error message for illegal inherited discriminant\n\n2010-06-17  Vincent Celier  <celier@adacore.com>\n\n\t* bindusg.adb: Remove lines for -A and -C\n\t* gnat_ugn.texi: Remove all documentation and examples of switches -A\n\tand -C for gnatbind and gnatlink.\n\t* gnatlink.adb (Usage): Remove lines for -A and -C\n\t* switch-b.adb (Scan_Binder_Switches): Issue warning when switch -C is\n\tspecified.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\nFrom-SVN: r160891", "tree": {"sha": "e2ae13596d1291a159e6037aadeb00aae5035555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ae13596d1291a159e6037aadeb00aae5035555"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/comments", "author": null, "committer": null, "parents": [{"sha": "67e740fa3005211b72da34e28ec2a8a22dcc4797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e740fa3005211b72da34e28ec2a8a22dcc4797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e740fa3005211b72da34e28ec2a8a22dcc4797"}], "stats": {"total": 247, "additions": 89, "deletions": 158}, "files": [{"sha": "1392d199525f24c7eb24ff2d05d193ddbf798c50", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -1,3 +1,24 @@\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* back_end.adb, sem_res.adb, switch-c.adb, sem_scil.adb: Minor\n+\treformatting.\n+\t* sem_attr.adb, sem_cat.adb, sem_disp.adb, sem_elab.adb, sem_elim.adb,\n+\tsem_eval.adb: Use Ekind_In\n+\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb: better error message for illegal inherited discriminant\n+\n+2010-06-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* bindusg.adb: Remove lines for -A and -C\n+\t* gnat_ugn.texi: Remove all documentation and examples of switches -A\n+\tand -C for gnatbind and gnatlink.\n+\t* gnatlink.adb (Usage): Remove lines for -A and -C\n+\t* switch-b.adb (Scan_Binder_Switches): Issue warning when switch -C is\n+\tspecified.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n 2010-06-17  Vincent Celier  <celier@adacore.com>\n \n \t* back_end.adb (Scan_Compiler_Arguments): Put all arguments in new"}, {"sha": "02202b8b88d81b961ade6d1a05eac6748595df0d", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -244,7 +244,6 @@ package body Back_End is\n             Argv_Len : constant Nat            := Len_Arg (Arg);\n             Argv     : constant String         :=\n                          Argv_Ptr (1 .. Natural (Argv_Len));\n-\n          begin\n             Args (Positive (Arg)) := new String'(Argv);\n          end;"}, {"sha": "ff328cba365c136f1916c3eead51b8c33fa3af89", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -73,10 +73,6 @@ package body Bindusg is\n       Write_Line (\"  -a        Automatically initialize elaboration \" &\n                   \"procedure\");\n \n-      --  Line for A switch\n-\n-      Write_Line (\"  -A        Generate binder program in Ada (default)\");\n-\n       --  Line for -b switch\n \n       Write_Line (\"  -b        Generate brief messages to stderr \" &\n@@ -87,10 +83,6 @@ package body Bindusg is\n       Write_Line (\"  -c        Check only, no generation of \" &\n                   \"binder output file\");\n \n-      --  Line for C switch\n-\n-      Write_Line (\"  -C        Generate binder program in C\");\n-\n       --  Line for -d switch\n \n       Write_Line (\"  -dnn[k|m] Default primary stack \" &"}, {"sha": "13763a16033cc0a7b8053862d8f82bc08fe01aaf", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -4193,17 +4193,16 @@ ada/switch-b.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n    ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n \n-ada/switch-c.o : ada/ada.ads ada/a-comlin.ads ada/a-except.ads \\\n-   ada/a-unccon.ads ada/a-uncdea.ads ada/alloc.ads ada/debug.ads \\\n-   ada/gnatvsn.ads ada/hostparm.ads ada/lib.ads ada/namet.ads ada/opt.ads \\\n-   ada/osint.ads ada/output.ads ada/prepcomp.ads ada/sem_warn.ads \\\n-   ada/stylesw.ads ada/switch.ads ada/switch-c.ads ada/switch-c.adb \\\n-   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads \\\n-   ada/s-parame.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n-   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n-   ada/table.adb ada/tree_io.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads ada/validsw.ads \n+ada/switch-c.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n+   ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/gnatvsn.ads \\\n+   ada/hostparm.ads ada/lib.ads ada/namet.ads ada/opt.ads ada/osint.ads \\\n+   ada/output.ads ada/prepcomp.ads ada/sem_warn.ads ada/stylesw.ads \\\n+   ada/switch.ads ada/switch-c.ads ada/switch-c.adb ada/system.ads \\\n+   ada/s-exctab.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n+   ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n+   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/unchconv.ads ada/unchdeal.ads ada/validsw.ads \n \n ada/switch.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/debug.ads ada/gnatvsn.ads \\"}, {"sha": "4a2bdbbf85f12ba422f4472f7a31618e232ceb5d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 79, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -7927,7 +7927,7 @@ $ gnatbind @r{[}@var{switches}@r{]} @var{mainprog}@r{[}.ali@r{]} @r{[}@var{switc\n \n @noindent\n where @file{@var{mainprog}.adb} is the Ada file containing the main program\n-unit body. If no switches are specified, @code{gnatbind} constructs an Ada\n+unit body. @code{gnatbind} constructs an Ada\n package in two files whose names are\n @file{b~@var{mainprog}.ads}, and @file{b~@var{mainprog}.adb}.\n For example, if given the\n@@ -7998,14 +7998,6 @@ the generated main program. It can also be debugged just like any other\n Ada code provided the @option{^-g^/DEBUG^} switch is used for\n @command{gnatbind} and @command{gnatlink}.\n \n-However for some purposes it may be convenient to generate the main\n-program in C rather than Ada. This may for example be helpful when you\n-are generating a mixed language program with the main program in C. The\n-GNAT compiler itself is an example.\n-The use of the @option{^-C^/BIND_FILE=C^} switch\n-for both @code{gnatbind} and @command{gnatlink} will cause the program to\n-be generated in C (and compiled using the gnu C compiler).\n-\n @node Switches for gnatbind\n @section Switches for @command{gnatbind}\n \n@@ -8049,10 +8041,6 @@ Specify directory to be searched for ALI files.\n @cindex @option{^-aI^/SOURCE_SEARCH^} (@command{gnatbind})\n Specify directory to be searched for source file.\n \n-@item ^-A^/BIND_FILE=ADA^\n-@cindex @option{^-A^/BIND_FILE=ADA^} (@command{gnatbind})\n-Generate binder program in Ada (default)\n-\n @item ^-b^/REPORT_ERRORS=BRIEF^\n @cindex @option{^-b^/REPORT_ERRORS=BRIEF^} (@command{gnatbind})\n Generate brief messages to @file{stderr} even if verbose mode set.\n@@ -8061,10 +8049,6 @@ Generate brief messages to @file{stderr} even if verbose mode set.\n @cindex @option{^-c^/NOOUTPUT^} (@command{gnatbind})\n Check only, no generation of binder output file.\n \n-@item ^-C^/BIND_FILE=C^\n-@cindex @option{^-C^/BIND_FILE=C^} (@command{gnatbind})\n-Generate binder program in C\n-\n @item ^-d^/DEFAULT_STACK_SIZE=^@var{nn}@r{[}k@r{|}m@r{]}\n @cindex @option{^-d^/DEFAULT_STACK_SIZE=^@var{nn}@r{[}k@r{|}m@r{]}} (@command{gnatbind})\n This switch can be used to change the default task stack size value\n@@ -8510,24 +8494,11 @@ generated by the binder.\n @table @option\n @c !sort!\n \n-@item ^-A^/BIND_FILE=ADA^\n-@cindex @option{^-A^/BIND_FILE=ADA^} (@code{gnatbind})\n-Generate binder program in Ada (default). The binder program is named\n-@file{b~@var{mainprog}.adb} by default. This can be changed with\n-@option{^-o^/OUTPUT^} @code{gnatbind} option.\n-\n @item ^-c^/NOOUTPUT^\n @cindex @option{^-c^/NOOUTPUT^} (@code{gnatbind})\n Check only. Do not generate the binder output file. In this mode the\n binder performs all error checks but does not generate an output file.\n \n-@item ^-C^/BIND_FILE=C^\n-@cindex @option{^-C^/BIND_FILE=C^} (@code{gnatbind})\n-Generate binder program in C. The binder program is named\n-@file{b_@var{mainprog}.c}.\n-This can be changed with @option{^-o^/OUTPUT^} @code{gnatbind}\n-option.\n-\n @item ^-e^/ELABORATION_DEPENDENCIES^\n @cindex @option{^-e^/ELABORATION_DEPENDENCIES^} (@code{gnatbind})\n Output complete list of elaboration-order dependencies, showing the\n@@ -8562,8 +8533,7 @@ directory names for the run-time units depend on the system configuration.\n @cindex @option{^-o^/OUTPUT^} (@code{gnatbind})\n Set name of output file to @var{file} instead of the normal\n @file{b~@var{mainprog}.adb} default. Note that @var{file} denote the Ada\n-binder generated body filename. In C mode you would normally give\n-@var{file} an extension of @file{.c} because it will be a C source program.\n+binder generated body filename.\n Note that if this option is used, then linking must be done manually.\n It is not possible to use gnatlink in this case, since it cannot locate\n the binder file.\n@@ -8637,9 +8607,7 @@ more quite separate groups of Ada units.\n The binder takes the name of its output file from the last specified ALI\n file, unless overridden by the use of the @option{^-o file^/OUTPUT=file^}.\n @cindex @option{^-o^/OUTPUT^} (@command{gnatbind})\n-The output is an Ada unit in source form that can\n-be compiled with GNAT unless the -C switch is used in which case the\n-output is a C source file, which must be compiled using the C compiler.\n+The output is an Ada unit in source form that can be compiled with GNAT.\n This compilation occurs automatically as part of the @command{gnatlink}\n processing.\n \n@@ -8836,39 +8804,8 @@ The main program @code{Hello} (source program in @file{hello.adb}) is\n bound using the standard switch settings. The generated main program is\n @file{mainprog.adb} with the associated spec in\n @file{mainprog.ads}. Note that you must specify the body here not the\n-spec, in the case where the output is in Ada. Note that if this option\n-is used, then linking must be done manually, since gnatlink will not\n-be able to find the generated file.\n-\n-@ifclear vms\n-@item gnatbind main -C -o mainprog.c -x\n-@end ifclear\n-@ifset vms\n-@item gnatbind MAIN.ALI /BIND_FILE=C /OUTPUT=Mainprog.C /READ_SOURCES=NONE\n-@end ifset\n-The main program @code{Main} (source program in\n-@file{main.adb}) is bound, excluding source files from the\n-consistency checking, generating\n-the file @file{mainprog.c}.\n-\n-@ifclear vms\n-@item gnatbind -x main_program -C -o mainprog.c\n-This command is exactly the same as the previous example. Switches may\n-appear anywhere in the command line, and single letter switches may be\n-combined into a single switch.\n-@end ifclear\n-\n-@ifclear vms\n-@item gnatbind -n math dbase -C -o ada-control.c\n-@end ifclear\n-@ifset vms\n-@item gnatbind /NOMAIN math dbase /BIND_FILE=C /OUTPUT=ada-control.c\n-@end ifset\n-The main program is in a language other than Ada, but calls to\n-subprograms in packages @code{Math} and @code{Dbase} appear. This call\n-to @code{gnatbind} generates the file @file{ada-control.c} containing\n-the @code{adainit} and @code{adafinal} routines to be called before and\n-after accessing the Ada units.\n+spec. Note that if this option is used, then linking must be done manually,\n+since gnatlink will not be able to find the generated file.\n @end table\n \n @c ------------------------------------\n@@ -8987,17 +8924,6 @@ Display Copyright and version, then exit disregarding all other options.\n If @option{--version} was not used, display usage, then exit disregarding\n all other options.\n \n-@item ^-A^/BIND_FILE=ADA^\n-@cindex @option{^-A^/BIND_FILE=ADA^} (@command{gnatlink})\n-The binder has generated code in Ada. This is the default.\n-\n-@item ^-C^/BIND_FILE=C^\n-@cindex @option{^-C^/BIND_FILE=C^} (@command{gnatlink})\n-If instead of generating a file in Ada, the binder has generated one in\n-C, then the linker needs to know about it. Use this switch to signal\n-to @command{gnatlink} that the binder has generated C code rather than\n-Ada code.\n-\n @item ^-f^/FORCE_OBJECT_FILE_LIST^\n @cindex Command line length\n @cindex @option{^-f^/FORCE_OBJECT_FILE_LIST^} (@command{gnatlink})"}, {"sha": "675d9a364e4997476646737682e8ad8a139c1383", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -1447,8 +1447,6 @@ procedure Gnatlink is\n       Write_Eol;\n       Write_Line (\"  mainprog.ali   the ALI file of the main program\");\n       Write_Eol;\n-      Write_Line (\"  -A    Binder generated source file is in Ada (default)\");\n-      Write_Line (\"  -C    Binder generated source file is in C\");\n       Write_Line (\"  -f    force object file list to be generated\");\n       Write_Line (\"  -g    Compile binder source file with debug information\");\n       Write_Line (\"  -n    Do not compile the binder source file\");"}, {"sha": "bb10ec7afc6bc17e6a67cbbadc582fed3d540efc", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -2775,10 +2775,8 @@ package body Sem_Attr is\n                exit;\n \n             elsif Ekind (Scope (Ent)) in Task_Kind\n-              and then Ekind (S) /= E_Loop\n-              and then Ekind (S) /= E_Block\n-              and then Ekind (S) /= E_Entry\n-              and then Ekind (S) /= E_Entry_Family\n+              and then\n+                not Ekind_In (S, E_Loop, E_Block, E_Entry, E_Entry_Family)\n             then\n                Error_Attr (\"Attribute % cannot appear in inner unit\", N);\n \n@@ -7813,11 +7811,9 @@ package body Sem_Attr is\n                --  also be accessibility checks on those, this is where the\n                --  checks can eventually be centralized ???\n \n-               if Ekind (Btyp) = E_Access_Subprogram_Type\n-                    or else\n-                  Ekind (Btyp) = E_Anonymous_Access_Subprogram_Type\n-                    or else\n-                  Ekind (Btyp) = E_Anonymous_Access_Protected_Subprogram_Type\n+               if Ekind_In (Btyp, E_Access_Subprogram_Type,\n+                                  E_Anonymous_Access_Subprogram_Type,\n+                                  E_Anonymous_Access_Protected_Subprogram_Type)\n                then\n                   --  Deal with convention mismatch\n \n@@ -8244,9 +8240,8 @@ package body Sem_Attr is\n                end if;\n             end if;\n \n-            if Ekind (Btyp) = E_Access_Protected_Subprogram_Type\n-                 or else\n-               Ekind (Btyp) = E_Anonymous_Access_Protected_Subprogram_Type\n+            if Ekind_In (Btyp, E_Access_Protected_Subprogram_Type,\n+                               E_Anonymous_Access_Protected_Subprogram_Type)\n             then\n                if Is_Entity_Name (P)\n                  and then not Is_Protected_Type (Scope (Entity (P)))\n@@ -8268,9 +8263,8 @@ package body Sem_Attr is\n                   return;\n                end if;\n \n-            elsif (Ekind (Btyp) = E_Access_Subprogram_Type\n-                     or else\n-                   Ekind (Btyp) = E_Anonymous_Access_Subprogram_Type)\n+            elsif Ekind_In (Btyp, E_Access_Subprogram_Type,\n+                                  E_Anonymous_Access_Subprogram_Type)\n               and then Ekind (Etype (N)) = E_Access_Protected_Subprogram_Type\n             then\n                Error_Msg_F (\"context requires a non-protected subprogram\", P);"}, {"sha": "fcab128e3c7918ff74fbc3be380f90b8c3a420d5", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -1397,8 +1397,8 @@ package body Sem_Cat is\n \n                null;\n \n-            elsif Ekind (Param_Type) = E_Anonymous_Access_Type\n-              or else Ekind (Param_Type) = E_Anonymous_Access_Subprogram_Type\n+            elsif Ekind_In (Param_Type, E_Anonymous_Access_Type,\n+                                        E_Anonymous_Access_Subprogram_Type)\n             then\n                --  From RM E.2.2(14), no anonymous access parameter other than\n                --  controlling ones may be used (because an anonymous access\n@@ -1454,9 +1454,9 @@ package body Sem_Cat is\n                  (\"limited type not allowed in rci unit\", Parent (E));\n                Explain_Limited_Type (E, Parent (E));\n \n-            elsif Ekind (E) = E_Generic_Function\n-              or else Ekind (E) = E_Generic_Package\n-              or else Ekind (E) = E_Generic_Procedure\n+            elsif Ekind_In (E, E_Generic_Function,\n+                               E_Generic_Package,\n+                               E_Generic_Procedure)\n             then\n                Error_Msg_N (\"generic declaration not allowed in rci unit\",\n                  Parent (E));\n@@ -1551,7 +1551,6 @@ package body Sem_Cat is\n             Type_Decl  := Parent (Param_Type);\n \n             if Ekind (Param_Type) = E_Anonymous_Access_Type then\n-\n                if K = N_Subprogram_Declaration then\n                   Error_Node := Param_Spec;\n                end if;"}, {"sha": "b4ffb8b2b91733518b6a780e1527c2e43d45ec91", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -3843,6 +3843,16 @@ package body Sem_Ch8 is\n                         Error_Msg_NE (\"\\\\missing `WITH &;`\", N, Ent);\n                         Error_Msg_Qual_Level := 0;\n                      end if;\n+\n+                     if Ekind (Ent) = E_Discriminant\n+                       and then Present (Corresponding_Discriminant (Ent))\n+                       and then Scope (Corresponding_Discriminant (Ent)) =\n+                                                        Etype (Scope (Ent))\n+                     then\n+                        Error_Msg_N\n+                          (\"inherited discriminant not allowed here\" &\n+                            \" (RM 3.8 (12), 3.8.1 (6))!\", N);\n+                     end if;\n                   end if;\n \n                   --  Set entity and its containing package as referenced. We"}, {"sha": "84b1a3eb464487637f4a77a936f939cf230b5ce9", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -175,10 +175,7 @@ package body Sem_Disp is\n          Next_Formal (Formal);\n       end loop;\n \n-      if Ekind (Subp) = E_Function\n-           or else\n-         Ekind (Subp) = E_Generic_Function\n-      then\n+      if Ekind_In (Subp, E_Function, E_Generic_Function) then\n          Ctrl_Type := Check_Controlling_Type (Etype (Subp), Subp);\n \n          if Present (Ctrl_Type) then\n@@ -673,7 +670,7 @@ package body Sem_Disp is\n       Body_Is_Last_Primitive : Boolean := False;\n \n    begin\n-      if Ekind (Subp) /= E_Procedure and then Ekind (Subp) /= E_Function then\n+      if not Ekind_In (Subp, E_Procedure, E_Function) then\n          return;\n       end if;\n \n@@ -1499,7 +1496,7 @@ package body Sem_Disp is\n \n       --  For subprograms internally generated by derivations of tagged types\n       --  use the alias subprogram as a reference to locate the dispatching\n-      --  type of Subp\n+      --  type of Subp.\n \n       elsif not Comes_From_Source (Subp)\n         and then Present (Alias (Subp))"}, {"sha": "2bf34745e67437723db28a89dc1d2c17597a8ddb", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -3013,10 +3013,7 @@ package body Sem_Elab is\n       --  Check for case of body entity\n       --  Why is the check for E_Void needed???\n \n-      if Ekind (E) = E_Void\n-        or else Ekind (E) = E_Subprogram_Body\n-        or else Ekind (E) = E_Package_Body\n-      then\n+      if Ekind_In (E, E_Void, E_Subprogram_Body, E_Package_Body) then\n          Decl := E;\n \n          loop\n@@ -3047,17 +3044,17 @@ package body Sem_Elab is\n \n             if No (Corresponding_Body (N)) then\n                declare\n-                  Loc : constant Source_Ptr := Sloc (N);\n-                  B : Node_Id;\n-                  Formals : constant List_Id :=\n-                     Copy_Parameter_List (Ent);\n-                  Nam  : constant Entity_Id :=\n-                    Make_Defining_Identifier (Loc, Chars (Ent));\n-                  Spec : Node_Id;\n-                  Stats : constant List_Id :=\n-                    New_List\n-                      (Make_Raise_Program_Error (Loc,\n-                         Reason => PE_Access_Before_Elaboration));\n+                  Loc     : constant Source_Ptr := Sloc (N);\n+                  B       : Node_Id;\n+                  Formals : constant List_Id := Copy_Parameter_List (Ent);\n+                  Nam     : constant Entity_Id :=\n+                              Make_Defining_Identifier (Loc, Chars (Ent));\n+                  Spec    : Node_Id;\n+                  Stats   : constant List_Id :=\n+                              New_List\n+                               (Make_Raise_Program_Error (Loc,\n+                                  Reason => PE_Access_Before_Elaboration));\n+\n                begin\n                   if Ekind (Ent) = E_Function then\n                      Spec :="}, {"sha": "aa2c1901a6d6fd62787bec690509aba8b3ebc68d", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -332,9 +332,8 @@ package body Sem_Elim is\n \n             --  Check for case of subprogram\n \n-            elsif Ekind (E) = E_Function\n-              or else Ekind (E) = E_Procedure\n-            then\n+            elsif Ekind_In (E, E_Function, E_Procedure) then\n+\n                --  If Source_Location present, then see if it matches\n \n                if Elmt.Source_Location /= No_Name then"}, {"sha": "13bbdefa8aa04ba6f4aef64ad1ab4059ed91c8e2", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -4698,8 +4698,8 @@ package body Sem_Eval is\n          if Can_Never_Be_Null (T1) /= Can_Never_Be_Null (T2) then\n             return False;\n \n-         elsif Ekind (T1) = E_Access_Subprogram_Type\n-           or else Ekind (T1) = E_Anonymous_Access_Subprogram_Type\n+         elsif Ekind_In (T1, E_Access_Subprogram_Type,\n+                             E_Anonymous_Access_Subprogram_Type)\n          then\n             return\n               Subtype_Conformant"}, {"sha": "24980c1d1ee5ce6d2594fa26e889f392c0602956", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -8984,13 +8984,10 @@ package body Sem_Res is\n \n       Set_Etype (N, Slice_Subtype);\n \n-      --  In the packed case, this must be immediately frozen\n-\n       --  Always freeze subtype. This ensures that the slice subtype is\n       --  elaborated in the scope of the expression.\n \n       Freeze_Itype (Slice_Subtype, N);\n-\n    end Set_Slice_Subtype;\n \n    --------------------------------"}, {"sha": "1722841f015ad61dceb7e4727d496380aad74395", "filename": "gcc/ada/sem_scil.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_scil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fsem_scil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_scil.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -149,7 +149,6 @@ package body Sem_SCIL is\n             when others =>\n                pragma Assert (False);\n                null;\n-\n          end case;\n \n          return Skip;\n@@ -484,7 +483,7 @@ package body Sem_SCIL is\n                   then\n                      return Found_Node;\n \n-                  --  In the subexpression case, keep climbing\n+                  --  In the subexpression case keep climbing\n \n                   else\n                      null;\n@@ -647,7 +646,7 @@ package body Sem_SCIL is\n \n          end case;\n \n-         --  If we fall through above tests, keep climbing tree\n+         --  If we fall through above tests keep climbing tree\n \n          if Nkind (Parent (P)) = N_Subunit then\n "}, {"sha": "e0b6ab735dc313970d643e87aeb23e4194aa99e7", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,9 +23,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Debug; use Debug;\n-with Osint; use Osint;\n-with Opt;   use Opt;\n+with Debug;  use Debug;\n+with Osint;  use Osint;\n+with Opt;    use Opt;\n+with Output; use Output;\n \n with System.WCh_Con; use System.WCh_Con;\n \n@@ -146,6 +147,8 @@ package body Switch.B is\n \n             Ada_Bind_File := False;\n \n+            Write_Line (\"warning: gnatbind switch -C is obsolescent\");\n+\n          --  Processing for d switch\n \n          when 'd' =>"}, {"sha": "ccc9986bf4b5295a384a3063508f18563260978e", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=e1b871e93c547d7fe50bc5c30fb18c1bd3ba16da", "patch": "@@ -1100,6 +1100,7 @@ package body Switch.C is\n       Arg_Rank : Positive) return Boolean\n    is\n       use type System.Strings.String_Access;\n+\n    begin\n       --  Loop through arguments following the current one\n "}]}