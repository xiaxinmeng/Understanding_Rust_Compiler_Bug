{"sha": "904f3daa028eea44c6a591fb1ac746ee81c72be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0ZjNkYWEwMjhlZWE0NGM2YTU5MWZiMWFjNzQ2ZWU4MWM3MmJlMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-04-05T08:37:44Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-04-05T08:37:44Z"}, "message": "Remove usage of apostrophes in error and warning messages (PR translation/89935).\n\n2019-04-05  Martin Liska  <mliska@suse.cz>\n\n\tPR translation/89935\n\t* check-internal-format-escaping.py: Properly detect wrong\n\tapostrophes.\n2019-04-05  Martin Liska  <mliska@suse.cz>\n\n\tPR translation/89935\n\t* collect-utils.c (collect_execute): Use %< and %>, or %qs in\n\torder to wrap keywords or arguments.\n\t* collect2.c (main): Likewise.\n\t(scan_prog_file): Likewise.\n\t(scan_libraries): Likewise.\n\t* common/config/riscv/riscv-common.c (riscv_subset_list::parsing_subset_version): Likewise.\n\t(riscv_subset_list::parse_std_ext): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Likewise.\n\t* config/arm/arm.c (arm_option_override): Likewise.\n\t* config/cris/cris.c (cris_print_operand): Likewise.\n\t* config/darwin-c.c (darwin_pragma_options): Likewise.\n\t(darwin_pragma_unused): Likewise.\n\t(darwin_pragma_ms_struct): Likewise.\n\t* config/ft32/ft32.c (ft32_print_operand): Likewise.\n\t* config/i386/i386.c (print_reg): Likewise.\n\t(ix86_print_operand): Likewise.\n\t* config/i386/xm-djgpp.h: Likewise.\n\t* config/iq2000/iq2000.c (iq2000_print_operand): Likewise.\n\t* config/m32c/m32c.c (m32c_option_override): Likewise.\n\t* config/msp430/msp430.c (msp430_option_override): Likewise.\n\t* config/nds32/nds32.c (nds32_option_override): Likewise.\n\t* config/nvptx/mkoffload.c (main): Likewise.\n\t* config/rx/rx.c (rx_print_operand): Likewise.\n\t(valid_psw_flag): Likewise.\n\t* config/vms/vms-c.c (vms_pragma_member_alignment): Likewise.\n\t(vms_pragma_nomember_alignment): Likewise.\n\t(vms_pragma_extern_model): Likewise.\n\t* lto-wrapper.c (compile_offload_image): Likewise.\n\t* omp-offload.c (oacc_parse_default_dims): Likewise.\n\t* symtab.c (symtab_node::verify_base): Likewise.\n\t* tlink.c (recompile_files): Likewise.\n\t(start_tweaking): Likewise.\n\t* tree-profile.c (parse_profile_filter): Likewise.\n2019-04-05  Martin Liska  <mliska@suse.cz>\n\n\tPR translation/89935\n\t* objc-act.c (objc_add_property_declaration): Use %< and %>, or %qs in\n\torder to wrap keywords or arguments.\n\t(objc_add_synthesize_declaration_for_property): Likewise.\n\nFrom-SVN: r270163", "tree": {"sha": "cf8126bdefb6a0be9b1636a06ee491b90f1ab6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf8126bdefb6a0be9b1636a06ee491b90f1ab6a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/904f3daa028eea44c6a591fb1ac746ee81c72be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904f3daa028eea44c6a591fb1ac746ee81c72be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/904f3daa028eea44c6a591fb1ac746ee81c72be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904f3daa028eea44c6a591fb1ac746ee81c72be1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d6b13da61aabc7c55d858ee3fd7ae22798d6a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6b13da61aabc7c55d858ee3fd7ae22798d6a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6b13da61aabc7c55d858ee3fd7ae22798d6a61"}], "stats": {"total": 202, "additions": 130, "deletions": 72}, "files": [{"sha": "9996d33eb321fd3172a0228f635ef429fa9ae265", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -1,3 +1,9 @@\n+2019-04-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR translation/89935\n+\t* check-internal-format-escaping.py: Properly detect wrong\n+\tapostrophes.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* check-internal-format-escaping.py: Uncomment apostrophes"}, {"sha": "aac4f9edeeebba5ac043b3a6cc8add282cd24bd1", "filename": "contrib/check-internal-format-escaping.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/contrib%2Fcheck-internal-format-escaping.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/contrib%2Fcheck-internal-format-escaping.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fcheck-internal-format-escaping.py?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -56,7 +56,7 @@\n                             print('%s: %s' % (origin, text))\n                     elif p.startswith('__builtin_'):\n                         print('%s: %s' % (origin, text))\n-                    if re.search(\"[a-zA-Z]'[a-zA-Z]\", p):\n+                    if re.search(\"[^%]'\", p):\n                         print('%s: %s' % (origin, text))\n             j += 1\n "}, {"sha": "a7f66a9cd94c7e7be794f3a5f718cdbb2b70d7d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -1,3 +1,40 @@\n+2019-04-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR translation/89935\n+\t* collect-utils.c (collect_execute): Use %< and %>, or %qs in\n+\torder to wrap keywords or arguments.\n+\t* collect2.c (main): Likewise.\n+\t(scan_prog_file): Likewise.\n+\t(scan_libraries): Likewise.\n+\t* common/config/riscv/riscv-common.c (riscv_subset_list::parsing_subset_version): Likewise.\n+\t(riscv_subset_list::parse_std_ext): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal): Likewise.\n+\t* config/arm/arm.c (arm_option_override): Likewise.\n+\t* config/cris/cris.c (cris_print_operand): Likewise.\n+\t* config/darwin-c.c (darwin_pragma_options): Likewise.\n+\t(darwin_pragma_unused): Likewise.\n+\t(darwin_pragma_ms_struct): Likewise.\n+\t* config/ft32/ft32.c (ft32_print_operand): Likewise.\n+\t* config/i386/i386.c (print_reg): Likewise.\n+\t(ix86_print_operand): Likewise.\n+\t* config/i386/xm-djgpp.h: Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_print_operand): Likewise.\n+\t* config/m32c/m32c.c (m32c_option_override): Likewise.\n+\t* config/msp430/msp430.c (msp430_option_override): Likewise.\n+\t* config/nds32/nds32.c (nds32_option_override): Likewise.\n+\t* config/nvptx/mkoffload.c (main): Likewise.\n+\t* config/rx/rx.c (rx_print_operand): Likewise.\n+\t(valid_psw_flag): Likewise.\n+\t* config/vms/vms-c.c (vms_pragma_member_alignment): Likewise.\n+\t(vms_pragma_nomember_alignment): Likewise.\n+\t(vms_pragma_extern_model): Likewise.\n+\t* lto-wrapper.c (compile_offload_image): Likewise.\n+\t* omp-offload.c (oacc_parse_default_dims): Likewise.\n+\t* symtab.c (symtab_node::verify_base): Likewise.\n+\t* tlink.c (recompile_files): Likewise.\n+\t(start_tweaking): Likewise.\n+\t* tree-profile.c (parse_profile_filter): Likewise.\n+\n 2019-04-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/89956"}, {"sha": "1b1b27c925152501e84988f0fcdc5f67cb9d0ad0", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -176,7 +176,7 @@ collect_execute (const char *prog, char **argv, const char *outname,\n      since we might not end up needing something that we could not find.  */\n \n   if (argv[0] == 0)\n-    fatal_error (input_location, \"cannot find '%s'\", prog);\n+    fatal_error (input_location, \"cannot find %qs\", prog);\n \n   pex = pex_init (0, \"collect2\", NULL);\n   if (pex == NULL)"}, {"sha": "25d49310ae2d72ee06df8921f097773dce332a10", "filename": "gcc/collect2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -1516,7 +1516,7 @@ main (int argc, char **argv)\n \t\t      enum demangling_styles style\n \t\t\t= cplus_demangle_name_to_style (arg+11);\n \t\t      if (style == unknown_demangling)\n-\t\t\terror (\"unknown demangling style '%s'\", arg+11);\n+\t\t\terror (\"unknown demangling style %qs\", arg+11);\n \t\t      else\n \t\t\tcurrent_demangling_style = style;\n \t\t    }\n@@ -2422,7 +2422,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \n   /* If we do not have an `nm', complain.  */\n   if (nm_file_name == 0)\n-    fatal_error (input_location, \"cannot find 'nm'\");\n+    fatal_error (input_location, \"cannot find %<nm%>\");\n \n   nm_argv[argc++] = nm_file_name;\n   if (NM_FLAGS[0] != '\\0')\n@@ -2593,7 +2593,7 @@ scan_libraries (const char *prog_name)\n   /* If we do not have an `ldd', complain.  */\n   if (ldd_file_name == 0)\n     {\n-      error (\"cannot find 'ldd'\");\n+      error (\"cannot find %<ldd%>\");\n       return;\n     }\n \n@@ -2669,8 +2669,8 @@ scan_libraries (const char *prog_name)\n       if (access (name, R_OK) == 0)\n \tadd_to_list (&libraries, name);\n       else\n-\tfatal_error (input_location, \"unable to open dynamic dependency '%s'\",\n-\t\t     buf);\n+\tfatal_error (input_location, \"unable to open dynamic dependency \"\n+\t\t     \"%qs\", buf);\n \n       if (debug)\n \tfprintf (stderr, \"\\t%s\\n\", buf);"}, {"sha": "eeb75717db04c04418172cdf2f7ebb01c4c9d607", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -250,8 +250,8 @@ riscv_subset_list::parsing_subset_version (const char *p,\n \t\t}\n \t      else\n \t\t{\n-\t\t  error_at (m_loc, \"%<-march=%s%>: Expect number after `%dp'.\",\n-\t\t\t    m_arch, version);\n+\t\t  error_at (m_loc, \"%<-march=%s%>: Expect number \"\n+\t\t\t    \"after %<%dp%>.\", m_arch, version);\n \t\t  return NULL;\n \t\t}\n \t    }\n@@ -348,8 +348,8 @@ riscv_subset_list::parse_std_ext (const char *p)\n       break;\n \n     default:\n-      error_at (m_loc, \"%<-march=%s%>: first ISA subset must be `e', \"\n-\t\t\"`i' or `g'\", m_arch);\n+      error_at (m_loc, \"%<-march=%s%>: first ISA subset must be %<e%>, \"\n+\t\t\"%<i%> or %<g%>\", m_arch);\n       return NULL;\n     }\n \n@@ -375,12 +375,12 @@ riscv_subset_list::parse_std_ext (const char *p)\n       if (std_ext != *std_exts)\n \t{\n \t  if (strchr (all_std_exts, std_ext) == NULL)\n-\t    error_at (m_loc, \"%<-march=%s%>: unsupported ISA subset `%c'\",\n+\t    error_at (m_loc, \"%<-march=%s%>: unsupported ISA subset %<%c%>\",\n \t\t      m_arch, *p);\n \t  else\n \t    error_at (m_loc,\n \t\t      \"%<-march=%s%>: ISA string is not in canonical order. \"\n-\t\t      \"`%c'\", m_arch, *p);\n+\t\t      \"%<%c%>\", m_arch, *p);\n \t  return NULL;\n \t}\n "}, {"sha": "95e5b039865d72b842e95292505e76c13710eda6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -11575,8 +11575,8 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   int probe_interval\n     = PARAM_VALUE (PARAM_STACK_CLASH_PROTECTION_PROBE_INTERVAL);\n   if (guard_size != probe_interval)\n-    error (\"stack clash guard size '%d' must be equal to probing interval \"\n-\t   \"'%d'\", guard_size, probe_interval);\n+    error (\"stack clash guard size %<%d%> must be equal to probing interval \"\n+\t   \"%<%d%>\", guard_size, probe_interval);\n \n   /* Enable sw prefetching at specified optimization level for\n      CPUS that have prefetch.  Lower optimization level threshold by 1"}, {"sha": "7ce063f43d23c50b9bd34e3ae473f7b81c6c6c46", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -3499,7 +3499,7 @@ arm_option_override (void)\n \t       || pic_register >= PC_REGNUM\n \t       || (TARGET_VXWORKS_RTP\n \t\t   && (unsigned int) pic_register != arm_pic_register))\n-\terror (\"unable to use '%s' for PIC register\", arm_pic_register_string);\n+\terror (\"unable to use %qs for PIC register\", arm_pic_register_string);\n       else\n \tarm_pic_register = pic_register;\n     }"}, {"sha": "95bc004d9689cbae64c38b3d7a0a91e36d67b178", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -903,7 +903,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n     case ':':\n       /* The PIC register.  */\n       if (! flag_pic)\n-\tinternal_error (\"invalid use of ':' modifier\");\n+\tinternal_error (\"invalid use of %<:%> modifier\");\n       fprintf (file, \"$%s\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n       return;\n "}, {"sha": "83311537e760b012ed3531df8b12ff23e41d010d", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -99,17 +99,17 @@ darwin_pragma_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   tree t, x;\n \n   if (pragma_lex (&t) != CPP_NAME)\n-    BAD (\"malformed '#pragma options', ignoring\");\n+    BAD (\"malformed %<#pragma options%>, ignoring\");\n   arg = IDENTIFIER_POINTER (t);\n   if (strcmp (arg, \"align\"))\n-    BAD (\"malformed '#pragma options', ignoring\");\n+    BAD (\"malformed %<#pragma options%>, ignoring\");\n   if (pragma_lex (&t) != CPP_EQ)\n-    BAD (\"malformed '#pragma options', ignoring\");\n+    BAD (\"malformed %<#pragma options%>, ignoring\");\n   if (pragma_lex (&t) != CPP_NAME)\n-    BAD (\"malformed '#pragma options', ignoring\");\n+    BAD (\"malformed %<#pragma options%>, ignoring\");\n \n   if (pragma_lex (&x) != CPP_EOF)\n-    warning (OPT_Wpragmas, \"junk at end of '#pragma options'\");\n+    warning (OPT_Wpragmas, \"junk at end of %<#pragma options%>\");\n \n   arg = IDENTIFIER_POINTER (t);\n   if (!strcmp (arg, \"mac68k\"))\n@@ -119,7 +119,7 @@ darwin_pragma_options (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   else if (!strcmp (arg, \"reset\"))\n     pop_field_alignment ();\n   else\n-    BAD (\"malformed '#pragma options align={mac68k|power|reset}', ignoring\");\n+    BAD (\"malformed %<#pragma options align={mac68k|power|reset}%>, ignoring\");\n }\n \n /* #pragma unused ([var {, var}*]) */\n@@ -131,7 +131,7 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   int tok;\n \n   if (pragma_lex (&x) != CPP_OPEN_PAREN)\n-    BAD (\"missing '(' after '#pragma unused', ignoring\");\n+    BAD (\"missing %<(%> after %<#pragma unused%>, ignoring\");\n \n   while (1)\n     {\n@@ -152,10 +152,10 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     }\n \n   if (tok != CPP_CLOSE_PAREN)\n-    BAD (\"missing ')' after '#pragma unused', ignoring\");\n+    BAD (\"missing %<)%> after %<#pragma unused%>, ignoring\");\n \n   if (pragma_lex (&x) != CPP_EOF)\n-    BAD (\"junk at end of '#pragma unused'\");\n+    BAD (\"junk at end of %<#pragma unused%>\");\n }\n \n /* Parse the ms_struct pragma.  */\n@@ -166,18 +166,18 @@ darwin_pragma_ms_struct (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   tree t;\n \n   if (pragma_lex (&t) != CPP_NAME)\n-    BAD (\"malformed '#pragma ms_struct', ignoring\");\n+    BAD (\"malformed %<#pragma ms_struct%>, ignoring\");\n   arg = IDENTIFIER_POINTER (t);\n \n   if (!strcmp (arg, \"on\"))\n     darwin_ms_struct = true;\n   else if (!strcmp (arg, \"off\") || !strcmp (arg, \"reset\"))\n     darwin_ms_struct = false;\n   else\n-    BAD (\"malformed '#pragma ms_struct {on|off|reset}', ignoring\");\n+    BAD (\"malformed %<#pragma ms_struct {on|off|reset}%>, ignoring\");\n \n   if (pragma_lex (&t) != CPP_EOF)\n-    BAD (\"junk at end of '#pragma ms_struct'\");\n+    BAD (\"junk at end of %<#pragma ms_struct%>\");\n }\n \n static struct frameworks_in_use {"}, {"sha": "64b3172834f5e7c0b5459f0318baa9619b882539", "filename": "gcc/config/ft32/ft32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fft32%2Fft32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fft32%2Fft32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -178,7 +178,7 @@ ft32_print_operand (FILE * file, rtx x, int code)\n \n     case 'h':\n       if (GET_CODE (operand) != REG)\n-        internal_error (\"'h' applied to non-register operand\");\n+\tinternal_error (\"%<h%> applied to non-register operand\");\n       fprintf (file, \"%s\", reg_names[REGNO (operand) + 1]);\n       return;\n "}, {"sha": "57d5a7b8432d465e2daa29289b427b188fd0dcda", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -17632,7 +17632,7 @@ print_reg (rtx x, int code, FILE *file)\n       if (GENERAL_REGNO_P (regno))\n \tmsize = GET_MODE_SIZE (word_mode);\n       else\n-\terror (\"'V' modifier on non-integer register\");\n+\terror (\"%<V%> modifier on non-integer register\");\n     }\n \n   duplicated = code == 'd' && TARGET_AVX;\n@@ -17896,7 +17896,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    }\n \n \t  if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\t    warning (0, \"non-integer operand used with operand code 'z'\");\n+\t    warning (0, \"non-integer operand used with operand code %<z%>\");\n \t  /* FALLTHRU */\n \n \tcase 'Z':"}, {"sha": "8cb8bc6939cf17af76ccd99552148997032d901a", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -84,10 +84,10 @@ along with GCC; see the file COPYING3.  If not see\n         if (djgpp == NULL) \\\n           fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP not defined\"); \\\n         else if (access (djgpp, R_OK) == 0) \\\n-          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP points to missing file '%s'\", \\\n+          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP points to missing file %qs\", \\\n                  djgpp); \\\n         else \\\n-          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP points to corrupt file '%s'\", \\\n+          fatal_error (UNKNOWN_LOCATION, \"environment variable DJGPP points to corrupt file %qs\", \\\n                   djgpp); \\\n       } \\\n   } while (0)"}, {"sha": "c3be6fa0eca9a162c6787c5a1995c959e7223529", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -3099,7 +3099,7 @@ iq2000_print_operand (FILE *file, rtx op, int letter)\n \t  break;\n \n \tdefault:\n-\t  error (\"PRINT_OPERAND: Unknown punctuation '%c'\", letter);\n+\t  error (\"PRINT_OPERAND: Unknown punctuation %<%c%>\", letter);\n \t  break;\n \t}\n "}, {"sha": "1a0d0c681b42aceac4aab321fd8951d6c073cdbb", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -417,7 +417,7 @@ m32c_option_override (void)\n   if (global_options_set.x_target_memregs)\n     {\n       if (target_memregs < 0 || target_memregs > 16)\n-\terror (\"invalid target memregs value '%d'\", target_memregs);\n+\terror (\"invalid target memregs value %<%d%>\", target_memregs);\n     }\n   else\n     target_memregs = 16;"}, {"sha": "020e980b8cc152446e9d5eaef71996a3f6ffdf54", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -797,30 +797,30 @@ msp430_option_override (void)\n \t    if (msp430_warn_mcu)\n \t      {\n \t\tif (target_cpu&& msp430x != xisa)\n-\t\t  warning (0, \"MCU '%s' supports %s ISA but %<-mcpu%> option \"\n+\t\t  warning (0, \"MCU %qs supports %s ISA but %<-mcpu%> option \"\n \t\t\t   \"is set to %s\",\n \t\t\t   target_mcu, xisa ? \"430X\" : \"430\", msp430x ? \"430X\" : \"430\");\n \n \t\tif (msp430_mcu_data[i].hwmpy == 0\n \t\t    && msp430_hwmult_type != MSP430_HWMULT_AUTO\n \t\t    && msp430_hwmult_type != MSP430_HWMULT_NONE)\n-\t\t  warning (0, \"MCU '%s' does not have hardware multiply \"\n+\t\t  warning (0, \"MCU %qs does not have hardware multiply \"\n \t\t\t   \"support, but %<-mhwmult%> is set to %s\",\n \t\t\t   target_mcu,\n \t\t\t   msp430_hwmult_type == MSP430_HWMULT_SMALL ? \"16-bit\"\n \t\t\t   : msp430_hwmult_type == MSP430_HWMULT_LARGE ? \"32-bit\" : \"f5series\");\n \t\telse if (msp430_hwmult_type == MSP430_HWMULT_SMALL\n \t\t    && msp430_mcu_data[i].hwmpy != 1\n \t\t    && msp430_mcu_data[i].hwmpy != 2 )\n-\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, \"\n+\t\t  warning (0, \"MCU %qs supports %s hardware multiply, \"\n \t\t\t   \"but %<-mhwmult%> is set to 16-bit\",\n \t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n \t\telse if (msp430_hwmult_type == MSP430_HWMULT_LARGE && msp430_mcu_data[i].hwmpy != 4)\n-\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, \"\n+\t\t  warning (0, \"MCU %qs supports %s hardware multiply, \"\n \t\t\t   \"but %<-mhwmult%> is set to 32-bit\",\n \t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n \t\telse if (msp430_hwmult_type == MSP430_HWMULT_F5SERIES && msp430_mcu_data[i].hwmpy != 8)\n-\t\t  warning (0, \"MCU '%s' supports %s hardware multiply, \"\n+\t\t  warning (0, \"MCU %qs supports %s hardware multiply, \"\n \t\t\t   \"but %<-mhwmult%> is set to f5series\",\n \t\t\t   target_mcu, hwmult_name (msp430_mcu_data[i].hwmpy));\n \t      }\n@@ -837,14 +837,14 @@ msp430_option_override (void)\n \t\t{\n \t\t  if (target_cpu == NULL)\n \t\t    warning (0,\n-\t\t\t     \"Unrecognized MCU name '%s', assuming that it is \"\n+\t\t\t     \"Unrecognized MCU name %qs, assuming that it is \"\n \t\t\t     \"just a MSP430 with no hardware multiply.\\n\"\n \t\t\t     \"Use the %<-mcpu%> and %<-mhwmult%> options to \"\n \t\t\t     \"set these explicitly.\",\n \t\t\t     target_mcu);\n \t\t  else\n \t\t    warning (0,\n-\t\t\t     \"Unrecognized MCU name '%s', assuming that it \"\n+\t\t\t     \"Unrecognized MCU name %qs, assuming that it \"\n \t\t\t     \"has no hardware multiply.\\nUse the %<-mhwmult%> \"\n \t\t\t     \"option to set this explicitly.\",\n \t\t\t     target_mcu);\n@@ -856,15 +856,15 @@ msp430_option_override (void)\n \t    {\n \t      if (msp430_warn_mcu)\n \t\twarning (0,\n-\t\t\t \"Unrecognized MCU name '%s', assuming that it just \"\n+\t\t\t \"Unrecognized MCU name %qs, assuming that it just \"\n \t\t\t \"supports the MSP430 ISA.\\nUse the %<-mcpu%> option \"\n \t\t\t \"to set the ISA explicitly.\",\n \t\t\t target_mcu);\n \n \t      msp430x = false;\n \t    }\n \t  else if (msp430_warn_mcu)\n-\t    warning (0, \"Unrecognized MCU name '%s'.\", target_mcu);\n+\t    warning (0, \"Unrecognized MCU name %qs.\", target_mcu);\n \t}\n     }\n "}, {"sha": "fe5c26091116bd8510018a981aca424ba3568735", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -4175,10 +4175,10 @@ nds32_option_override (void)\n     {\n       if (nds32_arch_option == ARCH_V3S || nds32_arch_option == ARCH_V3F)\n \terror (\"Disable FPU ISA, \"\n-\t       \"the ABI option must be enable '-mfloat-abi=soft'\");\n+\t       \"the ABI option must be enable %<-mfloat-abi=soft%>\");\n       else\n-\terror (\"'-mabi=2fp+' option only support when FPU available, \"\n-\t       \"must be enable '-mext-fpu-sp' or '-mext-fpu-dp'\");\n+\terror (\"%<-mabi=2fp+%> option only support when FPU available, \"\n+\t       \"must be enable %<-mext-fpu-sp%> or %<-mext-fpu-dp%>\");\n     }\n \n   nds32_init_rtx_costs ();"}, {"sha": "e93a129c98882f785768568d5423a7101dd19b70", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -454,7 +454,7 @@ main (int argc, char **argv)\n \n   if (!found)\n     fatal_error (input_location,\n-\t\t \"offload compiler %s not found (consider using '-B')\",\n+\t\t \"offload compiler %s not found (consider using %<-B%>)\",\n \t\t GCC_INSTALL_NAME);\n \n   /* We may be called with all the arguments stored in some file and"}, {"sha": "f70e8f340046846b37195e11f25ee72e84da7258", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -648,8 +648,8 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase CTRLREG_FINTV: fprintf (file, \"fintv\"); break;\n \tcase CTRLREG_INTB:  fprintf (file, \"intb\"); break;\n \tdefault:\n-\t  warning (0, \"unrecognized control register number: %d - using 'psw'\",\n-\t\t   (int) INTVAL (op));\n+\t  warning (0, \"unrecognized control register number: %d\"\n+\t\t   \"- using %<psw%>\", (int) INTVAL (op));\n \t  fprintf (file, \"psw\");\n \t  break;\n \t}\n@@ -2593,7 +2593,8 @@ valid_psw_flag (rtx op, const char *which)\n \treturn 1;\n       }\n \n-  error (\"%<__builtin_rx_%s%> takes 'C', 'Z', 'S', 'O', 'I', or 'U'\", which);\n+  error (\"%<__builtin_rx_%s%> takes %<C%>, %<Z%>, %<S%>, %<O%>, %<I%>, \"\n+\t \"or %<U%>\", which);\n   if (!mvtc_inform_done)\n     error (\"use %<__builtin_rx_mvtc%> (0, ... ) to write arbitrary values to PSW\");\n   mvtc_inform_done = 1;"}, {"sha": "d2bdd049e82b6c38c37ef8e143abff3cc84269b4", "filename": "gcc/config/vms/vms-c.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fvms%2Fvms-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fconfig%2Fvms%2Fvms-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -77,7 +77,8 @@ vms_pragma_member_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     }\n   if (tok != CPP_NAME)\n     {\n-      warning (OPT_Wpragmas, \"malformed '#pragma member_alignment', ignoring\");\n+      warning (OPT_Wpragmas,\n+\t       \"malformed %<#pragma member_alignment%>, ignoring\");\n       return;\n     }\n \n@@ -92,12 +93,12 @@ vms_pragma_member_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     maximum_field_alignment = saved_member_alignment;\n   else\n     {\n-      error (\"unknown '#pragma member_alignment' name %s\", arg);\n+      error (\"unknown %<#pragma member_alignment%> name %s\", arg);\n       return;\n     }\n   if (pragma_lex (&x) != CPP_EOF)\n     {\n-      error (\"malformed '#pragma member_alignment'\");\n+      error (\"malformed %<#pragma member_alignment%>\");\n       return;\n     }\n }\n@@ -131,7 +132,7 @@ vms_pragma_nomember_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n         maximum_field_alignment = 16 * BITS_PER_UNIT;\n       else\n         {\n-          error (\"unhandled alignment for '#pragma nomember_alignment'\");\n+\t  error (\"unhandled alignment for %<#pragma nomember_alignment%>\");\n         }\n \n       tok = pragma_lex (&x);\n@@ -144,7 +145,7 @@ vms_pragma_nomember_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \n   if (tok != CPP_EOF)\n     {\n-      error (\"garbage at end of '#pragma nomember_alignment'\");\n+      error (\"garbage at end of %<#pragma nomember_alignment%>\");\n       return;\n     }\n }\n@@ -199,7 +200,7 @@ vms_pragma_extern_model (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \n   if (tok != CPP_NAME)\n     {\n-      warning (OPT_Wpragmas, \"malformed '#pragma extern_model', ignoring\");\n+      warning (OPT_Wpragmas, \"malformed %<#pragma extern_model%>, ignoring\");\n       return;\n     }\n \n@@ -225,7 +226,7 @@ vms_pragma_extern_model (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     }\n   else\n     {\n-      error (\"unknown '#pragma extern_model' model '%s'\", arg);\n+      error (\"unknown %<#pragma extern_model%> model %qs\", arg);\n       return;\n     }\n #if 0"}, {"sha": "56eea90ac8c179f664a872c5c8de051e6de94f55", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -822,8 +822,8 @@ compile_offload_image (const char *target, const char *compiler_path,\n \n   if (!compiler)\n     fatal_error (input_location,\n-\t\t \"could not find %s in %s (consider using '-B')\\n\", suffix + 1,\n-\t\t compiler_path);\n+\t\t \"could not find %s in %s (consider using %<-B%>)\\n\",\n+\t\t suffix + 1, compiler_path);\n \n   /* Generate temporary output file name.  */\n   filename = make_temp_file (\".target.o\");"}, {"sha": "0fdebdaf161dde4262af6173adfd10e906ede904", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -1,3 +1,10 @@\n+2019-04-05  Martin Liska  <mliska@suse.cz>\n+\n+\tPR translation/89935\n+\t* objc-act.c (objc_add_property_declaration): Use %< and %>, or %qs in\n+\torder to wrap keywords or arguments.\n+\t(objc_add_synthesize_declaration_for_property): Likewise.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "5cf7205c23b87b4020fa8d2e0e6927824cd36af8", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -1090,7 +1090,8 @@ objc_add_property_declaration (location_t location, tree decl,\n       if (PROPERTY_NONATOMIC (x) != parsed_property_nonatomic)\n \t{\n \t  warning_at (location, 0,\n-\t\t      \"'nonatomic' attribute of property %qD conflicts with previous declaration\", decl);\n+\t\t      \"%<nonatomic%> attribute of property %qD conflicts with \"\n+\t\t      \"previous declaration\", decl);\n \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -1100,7 +1101,8 @@ objc_add_property_declaration (location_t location, tree decl,\n       if (PROPERTY_GETTER_NAME (x) != parsed_property_getter_ident)\n \t{\n \t  warning_at (location, 0,\n-\t\t      \"'getter' attribute of property %qD conflicts with previous declaration\", decl);\n+\t\t      \"%<getter%> attribute of property %qD conflicts with \"\n+\t\t      \"previous declaration\", decl);\n \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -1113,7 +1115,8 @@ objc_add_property_declaration (location_t location, tree decl,\n \t  if (PROPERTY_SETTER_NAME (x) != parsed_property_setter_ident)\n \t    {\n \t      warning_at (location, 0,\n-\t\t\t  \"'setter' attribute of property %qD conflicts with previous declaration\", decl);\n+\t\t\t  \"%<setter%> attribute of property %qD conflicts with \"\n+\t\t\t  \"previous declaration\", decl);\n \n \t      if (original_location != UNKNOWN_LOCATION)\n \t\tinform (original_location, \"originally specified here\");\n@@ -1135,7 +1138,8 @@ objc_add_property_declaration (location_t location, tree decl,\n       if (PROPERTY_READONLY (x) == 0  &&  property_readonly == 1)\n \t{\n \t  warning_at (location, 0,\n-\t\t      \"'readonly' attribute of property %qD conflicts with previous declaration\", decl);\n+\t\t      \"%<readonly%> attribute of property %qD conflicts with \"\n+\t\t      \"previous declaration\", decl);\n \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -7638,7 +7642,8 @@ objc_add_synthesize_declaration_for_property (location_t location, tree interfac\n \t  {\n \t    location_t original_location = DECL_SOURCE_LOCATION (ivar);\n \n-\t    error_at (location, \"'assign' property %qs is using bit-field instance variable %qs\",\n+\t    error_at (location, \"%<assign%> property %qs is using bit-field \"\n+\t\t      \"instance variable %qs\",\n \t\t      IDENTIFIER_POINTER (property_name),\n \t\t      IDENTIFIER_POINTER (ivar_name));\n \n@@ -7651,7 +7656,8 @@ objc_add_synthesize_declaration_for_property (location_t location, tree interfac\n \t  {\n \t    location_t original_location = DECL_SOURCE_LOCATION (ivar);\n \n-\t    error_at (location, \"'atomic' property %qs is using bit-field instance variable %qs\",\n+\t    error_at (location, \"%<atomic%> property %qs is using bit-field \"\n+\t\t      \"instance variable %qs\",\n \t\t      IDENTIFIER_POINTER (property_name),\n \t\t      IDENTIFIER_POINTER (ivar_name));\n "}, {"sha": "97ae47b313589fd89ac2ece1e66c3c5de208a3d5", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -639,7 +639,7 @@ oacc_parse_default_dims (const char *dims)\n \t{\n \tmalformed:\n \t  error_at (UNKNOWN_LOCATION,\n-\t\t    \"%<-fopenacc-dim%> operand is malformed at '%s'\", pos);\n+\t\t    \"%<-fopenacc-dim%> operand is malformed at %qs\", pos);\n \t}\n     }\n "}, {"sha": "d648d288e401c72aeb3ec91cd082d15c239ec344", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -1002,7 +1002,7 @@ symtab_node::verify_base (void)\n \t\t!= NULL)\n \t       != dyn_cast <cgraph_node *> (this)->ifunc_resolver)\n \t{\n-          error (\"inconsistent `ifunc' attribute\");\n+\t  error (\"inconsistent %<ifunc%> attribute\");\n           error_found = true;\n \t}\n     }"}, {"sha": "16a7b152d4d8f75e14a71ed07a2413fdf4010532", "filename": "gcc/tlink.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -490,7 +490,7 @@ recompile_files (void)\n \n       if (!f->args)\n \t{\n-\t  error (\"repository file '%s' does not contain command-line \"\n+\t  error (\"repository file %qs does not contain command-line \"\n \t\t \"arguments\", f->key);\n \t  return 0;\n \t}\n@@ -616,7 +616,7 @@ start_tweaking (symbol *sym)\n {\n   if (sym && sym->tweaked)\n     {\n-      error (\"'%s' was assigned to '%s', but was not defined \"\n+      error (\"%qs was assigned to %qs, but was not defined \"\n \t     \"during recompilation, or vice versa\",\n \t     sym->key, sym->file->key);\n       return 0;"}, {"sha": "9b6f351a3d61fb67228069f48f251ba7ccd58ca7", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904f3daa028eea44c6a591fb1ac746ee81c72be1/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=904f3daa028eea44c6a591fb1ac746ee81c72be1", "patch": "@@ -632,7 +632,7 @@ parse_profile_filter (const char *regex, vec<regex_t> *v,\n \t  regex_t r;\n \t  if (regcomp (&r, p, REG_EXTENDED | REG_NOSUB) != 0)\n \t    {\n-\t      error (\"invalid regular expression '%s' in %<%s%>\",\n+\t      error (\"invalid regular expression %qs in %qs\",\n \t\t     p, flag_name);\n \t      return;\n \t    }"}]}