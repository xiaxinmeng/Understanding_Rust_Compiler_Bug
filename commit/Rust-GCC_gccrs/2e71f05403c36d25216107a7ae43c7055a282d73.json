{"sha": "2e71f05403c36d25216107a7ae43c7055a282d73", "node_id": "C_kwDOANBUbNoAKDJlNzFmMDU0MDNjMzZkMjUyMTYxMDdhN2FlNDNjNzA1NWEyODJkNzM", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2023-03-28T20:08:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2023-03-28T20:08:42Z"}, "message": "libbacktrace: minor fixes for zstd decompression\n\n\t* elf.c (elf_zstd_read_fse): Call elf_fetch_bits after reading\n\tbits, not before.  Add unlikely for error case.\n\t(elf_zstd_offset_table): Regenerate.\n\t(elf_zstd_read_huff): Clear 13 entries in weight_mark, not 12.\n\t(elf_zstd_read_literals): For a single stream adjust by\n\ttotal_streams_size, not compressed_size.", "tree": {"sha": "864883d391877da0b7e3c10bd4a0b5f80163defb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/864883d391877da0b7e3c10bd4a0b5f80163defb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e71f05403c36d25216107a7ae43c7055a282d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e71f05403c36d25216107a7ae43c7055a282d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e71f05403c36d25216107a7ae43c7055a282d73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e71f05403c36d25216107a7ae43c7055a282d73/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c3a6c3c118283dfef1b9928dd21110098679b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c3a6c3c118283dfef1b9928dd21110098679b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c3a6c3c118283dfef1b9928dd21110098679b7"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "665b3dd1a5372e94be2ea35425eaadb017cb23ab", "filename": "libbacktrace/elf.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e71f05403c36d25216107a7ae43c7055a282d73/libbacktrace%2Felf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e71f05403c36d25216107a7ae43c7055a282d73/libbacktrace%2Felf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Felf.c?ref=2e71f05403c36d25216107a7ae43c7055a282d73", "patch": "@@ -2806,18 +2806,18 @@ elf_zstd_read_fse (const unsigned char **ppin, const unsigned char *pinend,\n \t  while ((val & 0xfff) == 0xfff)\n \t    {\n \t      zidx += 3 * 6;\n-\t      if  (!elf_fetch_bits (&pin, pinend, &val, &bits))\n-\t\treturn 0;\n \t      val >>= 12;\n \t      bits -= 12;\n+\t      if  (!elf_fetch_bits (&pin, pinend, &val, &bits))\n+\t\treturn 0;\n \t    }\n \t  while ((val & 3) == 3)\n \t    {\n \t      zidx += 3;\n-\t      if (!elf_fetch_bits (&pin, pinend, &val, &bits))\n-\t\treturn 0;\n \t      val >>= 2;\n \t      bits -= 2;\n+\t      if (!elf_fetch_bits (&pin, pinend, &val, &bits))\n+\t\treturn 0;\n \t    }\n \t  /* We have at least 13 bits here, don't need to fetch.  */\n \t  zidx += val & 3;\n@@ -2947,7 +2947,7 @@ elf_zstd_build_fse (const int16_t *norm, int idx, uint16_t *next,\n \t    pos = (pos + step) & mask;\n \t}\n     }\n-  if (pos != 0)\n+  if (unlikely (pos != 0))\n     {\n       elf_uncompress_failed ();\n       return 0;\n@@ -3423,17 +3423,17 @@ static const struct elf_zstd_fse_baseline_entry elf_zstd_match_table[64] =\n \n static const struct elf_zstd_fse_baseline_entry elf_zstd_offset_table[32] =\n {\n-  { 1, 0, 5, 0 }, { 64, 6, 4, 0 }, { 512, 9, 5, 0 },\n-  { 32768, 15, 5, 0 }, { 2097152, 21, 5, 0 }, { 8, 3, 5, 0 },\n-  { 128, 7, 4, 0 }, { 4096, 12, 5, 0 }, { 262144, 18, 5, 0 },\n-  { 8388608, 23, 5, 0 }, { 32, 5, 5, 0 }, { 256, 8, 4, 0 },\n-  { 16384, 14, 5, 0 }, { 1048576, 20, 5, 0 }, { 4, 2, 5, 0 },\n-  { 128, 7, 4, 16 }, { 2048, 11, 5, 0 }, { 131072, 17, 5, 0 },\n-  { 4194304, 22, 5, 0 }, { 16, 4, 5, 0 }, { 256, 8, 4, 16 },\n-  { 8192, 13, 5, 0 }, { 524288, 19, 5, 0 }, { 2, 1, 5, 0 },\n-  { 64, 6, 4, 16 }, { 1024, 10, 5, 0 }, { 65536, 16, 5, 0 },\n-  { 268435456, 28, 5, 0 }, { 134217728, 27, 5, 0 }, { 67108864, 26, 5, 0 },\n-  { 33554432, 25, 5, 0 }, { 16777216, 24, 5, 0 },\n+  { 1, 0, 5, 0 }, { 61, 6, 4, 0 }, { 509, 9, 5, 0 },\n+  { 32765, 15, 5, 0 }, { 2097149, 21, 5, 0 }, { 5, 3, 5, 0 },\n+  { 125, 7, 4, 0 }, { 4093, 12, 5, 0 }, { 262141, 18, 5, 0 },\n+  { 8388605, 23, 5, 0 }, { 29, 5, 5, 0 }, { 253, 8, 4, 0 },\n+  { 16381, 14, 5, 0 }, { 1048573, 20, 5, 0 }, { 1, 2, 5, 0 },\n+  { 125, 7, 4, 16 }, { 2045, 11, 5, 0 }, { 131069, 17, 5, 0 },\n+  { 4194301, 22, 5, 0 }, { 13, 4, 5, 0 }, { 253, 8, 4, 16 },\n+  { 8189, 13, 5, 0 }, { 524285, 19, 5, 0 }, { 2, 1, 5, 0 },\n+  { 61, 6, 4, 16 }, { 1021, 10, 5, 0 }, { 65533, 16, 5, 0 },\n+  { 268435453, 28, 5, 0 }, { 134217725, 27, 5, 0 }, { 67108861, 26, 5, 0 },\n+  { 33554429, 25, 5, 0 }, { 16777213, 24, 5, 0 },\n };\n \n /* Read a zstd Huffman table and build the decoding table in *TABLE, reading\n@@ -3618,7 +3618,7 @@ elf_zstd_read_huff (const unsigned char **ppin, const unsigned char *pinend,\n     }\n \n   weight_mark = (uint32_t *) (weights + 256);\n-  memset (weight_mark, 0, 12 * sizeof (uint32_t));\n+  memset (weight_mark, 0, 13 * sizeof (uint32_t));\n   weight_mask = 0;\n   for (i = 0; i < count; ++i)\n     {\n@@ -3685,7 +3685,7 @@ elf_zstd_read_huff (const unsigned char **ppin, const unsigned char *pinend,\n \n   /* Change WEIGHT_MARK from a count of weights to the index of the first\n      symbol for that weight.  We shift the indexes to also store how many we\n-     hae seen so far, below.  */\n+     have seen so far, below.  */\n   {\n     uint32_t next;\n \n@@ -3766,7 +3766,7 @@ elf_zstd_read_literals (const unsigned char **ppin,\n     {\n       int raw;\n \n-      /* Raw_literals_Block or RLE_Literals_Block */\n+      /* Raw_Literals_Block or RLE_Literals_Block */\n \n       raw = (hdr & 3) == 0;\n \n@@ -3948,7 +3948,7 @@ elf_zstd_read_literals (const unsigned char **ppin,\n       unsigned int bits;\n       uint32_t i;\n \n-      pback = pin + compressed_size - 1;\n+      pback = pin + total_streams_size - 1;\n       pbackend = pin;\n       if (!elf_fetch_backward_init (&pback, pbackend, &val, &bits))\n \treturn 0;"}]}