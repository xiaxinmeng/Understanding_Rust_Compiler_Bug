{"sha": "6c26973039ecae250cd9c29d4546f7669ecce6be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyNjk3MzAzOWVjYWUyNTBjZDljMjlkNDU0NmY3NjY5ZWNjZTZiZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-04-26T15:42:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-04-26T15:42:52Z"}, "message": "* natCollator.cc: New file.\n\nFrom-SVN: r26655", "tree": {"sha": "29901def3a4f1c0259ccf96db19556c02467fb8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29901def3a4f1c0259ccf96db19556c02467fb8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c26973039ecae250cd9c29d4546f7669ecce6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c26973039ecae250cd9c29d4546f7669ecce6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c26973039ecae250cd9c29d4546f7669ecce6be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c26973039ecae250cd9c29d4546f7669ecce6be/comments", "author": null, "committer": null, "parents": [{"sha": "3cc26081445329aec4d4711d69c0d86e05af841b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc26081445329aec4d4711d69c0d86e05af841b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc26081445329aec4d4711d69c0d86e05af841b"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "67160b8d692125179ad76a84dd7f8eed20052df6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c26973039ecae250cd9c29d4546f7669ecce6be/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c26973039ecae250cd9c29d4546f7669ecce6be/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6c26973039ecae250cd9c29d4546f7669ecce6be", "patch": "@@ -1,5 +1,7 @@\n 1999-04-26  Tom Tromey  <tromey@cygnus.com>\n \n+\t* natCollator.cc: New file.\n+\n \t* java/util/GregorianCalendar.java (setDefaultTime): New method.\n \t(GregorianCalendar): Use it in all constructors.\n \t* java/util/Calendar.java (Calendar): Changed argument name to"}, {"sha": "7624b7c973a20d95da2070128f1bf0804db822f5", "filename": "libjava/java/text/natCollator.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c26973039ecae250cd9c29d4546f7669ecce6be/libjava%2Fjava%2Ftext%2FnatCollator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c26973039ecae250cd9c29d4546f7669ecce6be/libjava%2Fjava%2Ftext%2FnatCollator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FnatCollator.cc?ref=6c26973039ecae250cd9c29d4546f7669ecce6be", "patch": "@@ -0,0 +1,74 @@\n+// natCollator.cc - Native code for collation.\n+\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+// Written by Tom Tromey <tromey@cygnus.com>.\n+\n+#include <config.h>\n+\n+#include <cni.h>\n+#include <jvm.h>\n+\n+#include <java/text/Collator.h>\n+#include <java/lang/StringBuffer.h>\n+\n+#include <java-chardecomp.h>\n+\n+void\n+java::text::Collator::decomposeCharacter (jchar c,\n+\t\t\t\t\t  java::lang::StringBuffer *buf)\n+{\n+  if (decmp == NO_DECOMPOSITION)\n+    {\n+      buf->append(c);\n+      return;\n+    }\n+\n+  struct decomp_entry *base;\n+  int high;\n+\n+  if (decmp == FULL_DECOMPOSITION)\n+    {\n+      base = full_decomposition;\n+      high = sizeof (full_decomposition) / sizeof (struct decomp_entry);\n+    }\n+  else\n+    {\n+      base = canonical_decomposition;\n+      high = sizeof (canonical_decomposition) / sizeof (struct decomp_entry);\n+    }\n+\n+  // FIXME: this is probably a bit slow for the task at hand.\n+  int i = high / 2;\n+  int low = 0;\n+  while (true)\n+    {\n+      if (c < base[i].key)\n+\thigh = i;\n+      else if (c > base[i].key)\n+\tlow = i;\n+      else\n+\tbreak;\n+\n+      int old = i;\n+      i = (high + low) / 2;\n+      if (i == old)\n+\t{\n+\t  // Not in table, so it expands to itself.\n+\t  buf->append(c);\n+\t  return;\n+\t}\n+    }\n+\n+  for (int j = 0; base[i].value[j] != '\\0'; j += 2)\n+    {\n+      jchar x = (base[i].value[j] << 8) | (base[i].value[j + 1]);\n+      buf->append (x);\n+    }\n+}"}]}