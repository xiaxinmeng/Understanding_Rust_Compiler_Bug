{"sha": "e66b9f6779f46433b0e2c093b58403604ed131cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2YjlmNjc3OWY0NjQzM2IwZTJjMDkzYjU4NDAzNjA0ZWQxMzFjYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-09-08T18:37:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-09-08T18:37:19Z"}, "message": "analyzer: fix ICE when discarding result of realloc [PR102225]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/102225\n\t* analyzer.h (compat_types_p): New decl.\n\t* constraint-manager.cc\n\t(constraint_manager::get_or_add_equiv_class): Guard against NULL\n\ttype when checking for pointer types.\n\t* region-model-impl-calls.cc (region_model::impl_call_realloc):\n\tGuard against NULL lhs type/region.  Guard against the size value\n\tnot being of a compatible type for dynamic extents.\n\t* region-model.cc (compat_types_p): Make non-static.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/102225\n\t* gcc.dg/analyzer/realloc-1.c (test_10): New.\n\t* gcc.dg/analyzer/torture/pr102225.c: New test.", "tree": {"sha": "ab637db2e7048d40545e4be1964f4334b80eff19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab637db2e7048d40545e4be1964f4334b80eff19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e66b9f6779f46433b0e2c093b58403604ed131cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66b9f6779f46433b0e2c093b58403604ed131cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66b9f6779f46433b0e2c093b58403604ed131cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66b9f6779f46433b0e2c093b58403604ed131cc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716a5836928ee6d8fb884d9a2fbc1b1386ec8994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716a5836928ee6d8fb884d9a2fbc1b1386ec8994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716a5836928ee6d8fb884d9a2fbc1b1386ec8994"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "3ba4e21b015f65c28587562fa0b32f44293a87df", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=e66b9f6779f46433b0e2c093b58403604ed131cc", "patch": "@@ -203,6 +203,8 @@ class region_offset\n \n extern location_t get_stmt_location (const gimple *stmt, function *fun);\n \n+extern bool compat_types_p (tree src_type, tree dst_type);\n+\n /* Passed by pointer to PLUGIN_ANALYZER_INIT callbacks.  */\n \n class plugin_analyzer_init_iface"}, {"sha": "6df23fb477ead9e15f3b8b8fbf164eea1e64706f", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=e66b9f6779f46433b0e2c093b58403604ed131cc", "patch": "@@ -2088,10 +2088,11 @@ constraint_manager::get_or_add_equiv_class (const svalue *sval)\n \n   /* Convert all NULL pointers to (void *) to avoid state explosions\n      involving all of the various (foo *)NULL vs (bar *)NULL.  */\n-  if (POINTER_TYPE_P (sval->get_type ()))\n-    if (tree cst = sval->maybe_get_constant ())\n-      if (zerop (cst))\n-\tsval = m_mgr->get_or_create_constant_svalue (null_pointer_node);\n+  if (sval->get_type ())\n+    if (POINTER_TYPE_P (sval->get_type ()))\n+      if (tree cst = sval->maybe_get_constant ())\n+\tif (zerop (cst))\n+\t  sval = m_mgr->get_or_create_constant_svalue (null_pointer_node);\n \n   /* Try svalue match.  */\n   if (get_equiv_class_by_svalue (sval, &result))"}, {"sha": "ff2ae9ca77d86903c1570a567db2bc60dc7916b4", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=e66b9f6779f46433b0e2c093b58403604ed131cc", "patch": "@@ -540,11 +540,14 @@ region_model::impl_call_realloc (const call_details &cd)\n     {\n       /* Return NULL; everything else is unchanged.  */\n       const call_details cd (get_call_details (model, ctxt));\n-      const svalue *zero\n-\t= model->m_mgr->get_or_create_int_cst (cd.get_lhs_type (), 0);\n-      model->set_value (cd.get_lhs_region (),\n-\t\t\tzero,\n-\t\t\tcd.get_ctxt ());\n+      if (cd.get_lhs_type ())\n+\t{\n+\t  const svalue *zero\n+\t    = model->m_mgr->get_or_create_int_cst (cd.get_lhs_type (), 0);\n+\t  model->set_value (cd.get_lhs_region (),\n+\t\t\t    zero,\n+\t\t\t    cd.get_ctxt ());\n+\t}\n       return true;\n     }\n   };\n@@ -575,11 +578,17 @@ region_model::impl_call_realloc (const call_details &cd)\n       const svalue *ptr_sval = cd.get_arg_svalue (0);\n       const svalue *size_sval = cd.get_arg_svalue (1);\n       if (const region *buffer_reg = ptr_sval->maybe_get_region ())\n-\tmodel->set_dynamic_extents (buffer_reg, size_sval);\n-      model->set_value (cd.get_lhs_region (), ptr_sval, cd.get_ctxt ());\n-      const svalue *zero\n-\t= model->m_mgr->get_or_create_int_cst (cd.get_lhs_type (), 0);\n-      return model->add_constraint (ptr_sval, NE_EXPR, zero, cd.get_ctxt ());\n+\tif (compat_types_p (size_sval->get_type (), size_type_node))\n+\t  model->set_dynamic_extents (buffer_reg, size_sval);\n+      if (cd.get_lhs_region ())\n+\t{\n+\t  model->set_value (cd.get_lhs_region (), ptr_sval, cd.get_ctxt ());\n+\t  const svalue *zero\n+\t    = model->m_mgr->get_or_create_int_cst (cd.get_lhs_type (), 0);\n+\t  return model->add_constraint (ptr_sval, NE_EXPR, zero, cd.get_ctxt ());\n+\t}\n+      else\n+\treturn true;\n     }\n   };\n \n@@ -643,10 +652,15 @@ region_model::impl_call_realloc (const call_details &cd)\n \t and the new_ptr_sval as \"nonnull\".  */\n       model->on_realloc_with_move (cd, old_ptr_sval, new_ptr_sval);\n \n-      const svalue *zero\n-\t= model->m_mgr->get_or_create_int_cst (cd.get_lhs_type (), 0);\n-      return model->add_constraint (new_ptr_sval, NE_EXPR, zero,\n-\t\t\t\t    cd.get_ctxt ());\n+      if (cd.get_lhs_type ())\n+\t{\n+\t  const svalue *zero\n+\t    = model->m_mgr->get_or_create_int_cst (cd.get_lhs_type (), 0);\n+\t  return model->add_constraint (new_ptr_sval, NE_EXPR, zero,\n+\t\t\t\t\tcd.get_ctxt ());\n+\t}\n+      else\n+\treturn true;\n     }\n   };\n "}, {"sha": "a14d107709cd923b2c3b28419689ec2432878d0b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e66b9f6779f46433b0e2c093b58403604ed131cc", "patch": "@@ -1713,7 +1713,7 @@ assert_compat_types (tree src_type, tree dst_type)\n \n /* Return true if SRC_TYPE can be converted to DST_TYPE as a no-op.  */\n \n-static bool\n+bool\n compat_types_p (tree src_type, tree dst_type)\n {\n   if (src_type && dst_type && !VOID_TYPE_P (dst_type))"}, {"sha": "ef117ad9d7b5e8377aa37b96b8db3d74e2bcacbc", "filename": "gcc/testsuite/gcc.dg/analyzer/realloc-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-1.c?ref=e66b9f6779f46433b0e2c093b58403604ed131cc", "patch": "@@ -88,3 +88,8 @@ void test_9 (void *p)\n   free (p);\n   void *q = realloc (p, 1024); /* { dg-warning \"double-'free' of 'p'\" } */\n }\n+\n+void test_10 (char *s, int n)\n+{\n+  __builtin_realloc(s, n); /* { dg-warning \"ignoring return value of '__builtin_realloc' declared with attribute 'warn_unused_result'\" } */\n+} /* { dg-warning \"leak\" } */"}, {"sha": "a7c324922fd747740390f206e108368e2baf083d", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr102225.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr102225.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66b9f6779f46433b0e2c093b58403604ed131cc/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr102225.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr102225.c?ref=e66b9f6779f46433b0e2c093b58403604ed131cc", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+void bad_realloc(char *s, int n)\n+{\n+  char *p = __builtin_realloc(s, n);\n+} /* { dg-warning \"leak\" } */"}]}