{"sha": "431cdfbea1f8c452f581ec3974f2581addec9ac7", "node_id": "C_kwDOANBUbNoAKDQzMWNkZmJlYTFmOGM0NTJmNTgxZWMzOTc0ZjI1ODFhZGRlYzlhYzc", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-22T21:55:56Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-29T22:34:18Z"}, "message": "Track value_relations in GORI.\n\nThis allows GORI to recognize and pass relations along the calculation chain.\nThis will allow relations between the LHS and the operand being calculated\nto be utilized in op1_range and op2_range.\n\n\t* gimple-range-gori.cc (ori_compute::compute_operand_range):\n\tCreate a relation record and pass it along when possible.\n\t(gori_compute::compute_operand1_range): Pass relation along.\n\t(gori_compute::compute_operand2_range): Ditto.\n\t(gori_compute::compute_operand1_and_operand2_range): Ditto.\n\t* gimple-range-gori.h (class gori_compute): Adjust prototypes.\n\t* gimple-range-op.cc (gimple_range_op_handler::calc_op1): Pass\n\trelation to op1_range call.\n\t(gimple_range_op_handler::calc_op2): Pass relation to op2_range call.\n\t* gimple-range-op.h (class gimple_range_op_handler): Adjust\n\tprototypes.", "tree": {"sha": "74ada03e4fa453319a778360f865975f3d53f95f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ada03e4fa453319a778360f865975f3d53f95f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/431cdfbea1f8c452f581ec3974f2581addec9ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431cdfbea1f8c452f581ec3974f2581addec9ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431cdfbea1f8c452f581ec3974f2581addec9ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431cdfbea1f8c452f581ec3974f2581addec9ac7/comments", "author": null, "committer": null, "parents": [{"sha": "cfa7434c4b09e439ae8b904ad116adf6d3033f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa7434c4b09e439ae8b904ad116adf6d3033f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa7434c4b09e439ae8b904ad116adf6d3033f8c"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "57a7e8207494149a58788b310aeaca7d97bc042e", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=431cdfbea1f8c452f581ec3974f2581addec9ac7", "patch": "@@ -603,8 +603,10 @@ gori_compute::compute_operand_range_switch (vrange &r, gswitch *s,\n bool\n gori_compute::compute_operand_range (vrange &r, gimple *stmt,\n \t\t\t\t     const vrange &lhs, tree name,\n-\t\t\t\t     fur_source &src)\n+\t\t\t\t     fur_source &src, value_relation *rel)\n {\n+  value_relation vrel;\n+  value_relation *vrel_ptr = rel;\n   // If the lhs doesn't tell us anything, neither will unwinding further.\n   if (lhs.varying_p ())\n     return false;\n@@ -625,11 +627,23 @@ gori_compute::compute_operand_range (vrange &r, gimple *stmt,\n   tree op1 = gimple_range_ssa_p (handler.operand1 ());\n   tree op2 = gimple_range_ssa_p (handler.operand2 ());\n \n+  // If there is a relation, use it instead of any passed in.  This will allow\n+  // multiple relations to be processed in compound logicals.\n+  if (op1 && op2)\n+    {\n+      relation_kind k = handler.op1_op2_relation (lhs);\n+      if (k != VREL_VARYING)\n+       {\n+\t vrel.set_relation (k, op1, op2);\n+\t vrel_ptr = &vrel;\n+       }\n+    }\n+\n   // Handle end of lookup first.\n   if (op1 == name)\n-    return compute_operand1_range (r, handler, lhs, name, src);\n+    return compute_operand1_range (r, handler, lhs, name, src, vrel_ptr);\n   if (op2 == name)\n-    return compute_operand2_range (r, handler, lhs, name, src);\n+    return compute_operand2_range (r, handler, lhs, name, src, vrel_ptr);\n \n   // NAME is not in this stmt, but one of the names in it ought to be\n   // derived from it.\n@@ -672,11 +686,12 @@ gori_compute::compute_operand_range (vrange &r, gimple *stmt,\n     }\n   // Follow the appropriate operands now.\n   else if (op1_in_chain && op2_in_chain)\n-    res = compute_operand1_and_operand2_range (r, handler, lhs, name, src);\n+    res = compute_operand1_and_operand2_range (r, handler, lhs, name, src,\n+\t\t\t\t\t       vrel_ptr);\n   else if (op1_in_chain)\n-    res = compute_operand1_range (r, handler, lhs, name, src);\n+    res = compute_operand1_range (r, handler, lhs, name, src, vrel_ptr);\n   else if (op2_in_chain)\n-    res = compute_operand2_range (r, handler, lhs, name, src);\n+    res = compute_operand2_range (r, handler, lhs, name, src, vrel_ptr);\n   else\n     gcc_unreachable ();\n \n@@ -927,7 +942,7 @@ bool\n gori_compute::compute_operand1_range (vrange &r,\n \t\t\t\t      gimple_range_op_handler &handler,\n \t\t\t\t      const vrange &lhs, tree name,\n-\t\t\t\t      fur_source &src)\n+\t\t\t\t      fur_source &src, value_relation *rel)\n {\n   gimple *stmt = handler.stmt ();\n   tree op1 = handler.operand1 ();\n@@ -998,7 +1013,7 @@ gori_compute::compute_operand1_range (vrange &r,\n   gcc_checking_assert (src_stmt);\n \n   // Then feed this range back as the LHS of the defining statement.\n-  return compute_operand_range (r, src_stmt, op1_range, name, src);\n+  return compute_operand_range (r, src_stmt, op1_range, name, src, rel);\n }\n \n \n@@ -1010,7 +1025,7 @@ bool\n gori_compute::compute_operand2_range (vrange &r,\n \t\t\t\t      gimple_range_op_handler &handler,\n \t\t\t\t      const vrange &lhs, tree name,\n-\t\t\t\t      fur_source &src)\n+\t\t\t\t      fur_source &src, value_relation *rel)\n {\n   gimple *stmt = handler.stmt ();\n   tree op1 = handler.operand1 ();\n@@ -1070,7 +1085,7 @@ gori_compute::compute_operand2_range (vrange &r,\n //  gcc_checking_assert (!is_import_p (op2, find.bb));\n \n   // Then feed this range back as the LHS of the defining statement.\n-  return compute_operand_range (r, src_stmt, op2_range, name, src);\n+  return compute_operand_range (r, src_stmt, op2_range, name, src, rel);\n }\n \n // Calculate a range for NAME from both operand positions of S\n@@ -1083,17 +1098,18 @@ gori_compute::compute_operand1_and_operand2_range (vrange &r,\n \t\t\t\t\t\t\t\t     &handler,\n \t\t\t\t\t\t   const vrange &lhs,\n \t\t\t\t\t\t   tree name,\n-\t\t\t\t\t\t   fur_source &src)\n+\t\t\t\t\t\t   fur_source &src,\n+\t\t\t\t\t\t   value_relation *rel)\n {\n   Value_Range op_range (TREE_TYPE (name));\n \n   // Calculate a good a range for op2.  Since op1 == op2, this will\n   // have already included whatever the actual range of name is.\n-  if (!compute_operand2_range (op_range, handler, lhs, name, src))\n+  if (!compute_operand2_range (op_range, handler, lhs, name, src, rel))\n     return false;\n \n   // Now get the range thru op1.\n-  if (!compute_operand1_range (r, handler, lhs, name, src))\n+  if (!compute_operand1_range (r, handler, lhs, name, src, rel))\n     return false;\n \n   // Both operands have to be simultaneously true, so perform an intersection."}, {"sha": "1fff3e6255a93912f9a715a74a514bebfc895444", "filename": "gcc/gimple-range-gori.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-gori.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-gori.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.h?ref=431cdfbea1f8c452f581ec3974f2581addec9ac7", "patch": "@@ -153,6 +153,8 @@ class gori_map : public range_def_chain\n //\n // The remaining routines are internal use only.\n \n+class value_relation;\n+\n class gori_compute : public gori_map\n {\n public:\n@@ -167,17 +169,21 @@ class gori_compute : public gori_map\n   bool may_recompute_p (tree name, edge e);\n   bool may_recompute_p (tree name, basic_block bb = NULL);\n   bool compute_operand_range (vrange &r, gimple *stmt, const vrange &lhs,\n-\t\t\t      tree name, class fur_source &src);\n+\t\t\t      tree name, class fur_source &src,\n+\t\t\t      value_relation *rel = NULL);\n   bool compute_operand_range_switch (vrange &r, gswitch *s, const vrange &lhs,\n \t\t\t\t     tree name, fur_source &src);\n   bool compute_operand1_range (vrange &r, gimple_range_op_handler &handler,\n-\t\t\t       const vrange &lhs, tree name, fur_source &src);\n+\t\t\t       const vrange &lhs, tree name, fur_source &src,\n+\t\t\t       value_relation *rel = NULL);\n   bool compute_operand2_range (vrange &r, gimple_range_op_handler &handler,\n-\t\t\t       const vrange &lhs, tree name, fur_source &src);\n+\t\t\t       const vrange &lhs, tree name, fur_source &src,\n+\t\t\t       value_relation *rel = NULL);\n   bool compute_operand1_and_operand2_range (vrange &r,\n \t\t\t\t\t    gimple_range_op_handler &handler,\n \t\t\t\t\t    const vrange &lhs, tree name,\n-\t\t\t\t\t    fur_source &src);\n+\t\t\t\t\t    fur_source &src,\n+\t\t\t\t\t    value_relation *rel = NULL);\n   void compute_logical_operands (vrange &true_range, vrange &false_range,\n \t\t\t\t gimple_range_op_handler &handler,\n \t\t\t\t const irange &lhs, tree name, fur_source &src,"}, {"sha": "3a7c90746596d5f574c9dd41f8dcc350d97063ea", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=431cdfbea1f8c452f581ec3974f2581addec9ac7", "patch": "@@ -202,7 +202,7 @@ gimple_range_op_handler::calc_op1 (vrange &r, const vrange &lhs_range)\n \n bool\n gimple_range_op_handler::calc_op1 (vrange &r, const vrange &lhs_range,\n-\t\t\t\t   const vrange &op2_range)\n+\t\t\t\t   const vrange &op2_range, relation_kind k)\n {\n   // Give up on empty ranges.\n   if (lhs_range.undefined_p ())\n@@ -225,9 +225,9 @@ gimple_range_op_handler::calc_op1 (vrange &r, const vrange &lhs_range,\n \top2_type = TREE_TYPE (operand1 ());\n       Value_Range trange (op2_type);\n       trange.set_varying (op2_type);\n-      return op1_range (r, type, lhs_range, trange);\n+      return op1_range (r, type, lhs_range, trange, k);\n     }\n-  return op1_range (r, type, lhs_range, op2_range);\n+  return op1_range (r, type, lhs_range, op2_range, k);\n }\n \n // Calculate what we can determine of the range of this statement's\n@@ -237,7 +237,7 @@ gimple_range_op_handler::calc_op1 (vrange &r, const vrange &lhs_range,\n \n bool\n gimple_range_op_handler::calc_op2 (vrange &r, const vrange &lhs_range,\n-\t\t\t\t   const vrange &op1_range)\n+\t\t\t\t   const vrange &op1_range, relation_kind k)\n {\n   // Give up on empty ranges.\n   if (lhs_range.undefined_p ())\n@@ -250,9 +250,9 @@ gimple_range_op_handler::calc_op2 (vrange &r, const vrange &lhs_range,\n       tree op1_type = TREE_TYPE (operand1 ());\n       Value_Range trange (op1_type);\n       trange.set_varying (op1_type);\n-      return op2_range (r, type, lhs_range, trange);\n+      return op2_range (r, type, lhs_range, trange, k);\n     }\n-  return op2_range (r, type, lhs_range, op1_range);\n+  return op2_range (r, type, lhs_range, op1_range, k);\n }\n \n // --------------------------------------------------------------------"}, {"sha": "3a555f29a65ae81cb5c7de86208b006e58f5c3c8", "filename": "gcc/gimple-range-op.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-op.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/431cdfbea1f8c452f581ec3974f2581addec9ac7/gcc%2Fgimple-range-op.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.h?ref=431cdfbea1f8c452f581ec3974f2581addec9ac7", "patch": "@@ -35,8 +35,10 @@ class gimple_range_op_handler : public range_op_handler\n   tree operand1 () const { gcc_checking_assert (m_valid); return m_op1; }\n   tree operand2 () const { gcc_checking_assert (m_valid); return m_op2; }\n   bool calc_op1 (vrange &r, const vrange &lhs_range);\n-  bool calc_op1 (vrange &r, const vrange &lhs_range, const vrange &op2_range);\n-  bool calc_op2 (vrange &r, const vrange &lhs_range, const vrange &op1_range);\n+  bool calc_op1 (vrange &r, const vrange &lhs_range, const vrange &op2_range,\n+\t\t relation_kind k = VREL_VARYING);\n+  bool calc_op2 (vrange &r, const vrange &lhs_range, const vrange &op1_range,\n+\t\t relation_kind k = VREL_VARYING);\n private:\n   void maybe_builtin_call ();\n   gimple *m_stmt;"}]}