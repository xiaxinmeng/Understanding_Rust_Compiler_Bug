{"sha": "f941c3e2122d574412d351c69ddb634c2260683d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0MWMzZTIxMjJkNTc0NDEyZDM1MWM2OWRkYjYzNGMyMjYwNjgzZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-16T12:39:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-16T12:39:13Z"}, "message": "complex (complex<float>::operator=(float), [...]): Simplify a tad...\n\n2010-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/complex (complex<float>::operator=(float),\n\tcomplex<float>::operator+=(float),\n\tcomplex<float>::operator-=(float),\n\tcomplex<double>::operator=(double),\n\tcomplex<double>::operator+=(double),\n\tcomplex<double>::operator-=(double),\n\tcomplex<long double>::operator=(long double),\n\tcomplex<long double>::operator+=(long double),\n\tcomplex<long double>::operator-=(long double)): Simplify a tad,\n\tjust forward to the underlying __complex__ T operators, as\n\toperator*= and operator/= already do.\n\n\t* include/std/complex (complex<float>, complex<double>,\n\tcomplex<long double>): Simplify spelling of return types, just\n\tsay complex, instead of complex<float>, complex<double>,\n\tcomplex<long double>, respectively.\n\nFrom-SVN: r164337", "tree": {"sha": "576463cec9dd097b28ec6d73cc960383ecb55385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576463cec9dd097b28ec6d73cc960383ecb55385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f941c3e2122d574412d351c69ddb634c2260683d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f941c3e2122d574412d351c69ddb634c2260683d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f941c3e2122d574412d351c69ddb634c2260683d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f941c3e2122d574412d351c69ddb634c2260683d/comments", "author": null, "committer": null, "parents": [{"sha": "65592aadaf607bdcfb29ef7fbe6464043fb32d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65592aadaf607bdcfb29ef7fbe6464043fb32d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65592aadaf607bdcfb29ef7fbe6464043fb32d51"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "983a1e960feecfd8cbac5f069572fa2ec34ea955", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f941c3e2122d574412d351c69ddb634c2260683d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f941c3e2122d574412d351c69ddb634c2260683d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f941c3e2122d574412d351c69ddb634c2260683d", "patch": "@@ -1,3 +1,22 @@\n+2010-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/complex (complex<float>::operator=(float),\n+\tcomplex<float>::operator+=(float),\n+\tcomplex<float>::operator-=(float),\n+\tcomplex<double>::operator=(double),\n+\tcomplex<double>::operator+=(double),\n+\tcomplex<double>::operator-=(double),\n+\tcomplex<long double>::operator=(long double),\n+\tcomplex<long double>::operator+=(long double),\n+\tcomplex<long double>::operator-=(long double)): Simplify a tad,\n+\tjust forward to the underlying __complex__ T operators, as\n+\toperator*= and operator/= already do.\n+\n+\t* include/std/complex (complex<float>, complex<double>,\n+\tcomplex<long double>): Simplify spelling of return types, just\n+\tsay complex, instead of complex<float>, complex<double>,\n+\tcomplex<long double>, respectively.\n+\n 2010-09-15  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n \t* testsuite/lib/libstdc++.exp,([check_v3_target_namedlocale]):"}, {"sha": "31c44363137ea90d57e4dab527c8bac67b1a3f32", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f941c3e2122d574412d351c69ddb634c2260683d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f941c3e2122d574412d351c69ddb634c2260683d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=f941c3e2122d574412d351c69ddb634c2260683d", "patch": "@@ -1062,36 +1062,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       void imag(float __val)\n       { __imag__ _M_value = __val; }\n \n-      complex<float>&\n+      complex&\n       operator=(float __f)\n       {\n-\t__real__ _M_value = __f;\n-\t__imag__ _M_value = 0.0f;\n+\t_M_value = __f;\n \treturn *this;\n       }\n \n-      complex<float>&\n+      complex&\n       operator+=(float __f)\n       {\n-\t__real__ _M_value += __f;\n+\t_M_value += __f;\n \treturn *this;\n       }\n \n-      complex<float>&\n+      complex&\n       operator-=(float __f)\n       {\n-\t__real__ _M_value -= __f;\n+\t_M_value -= __f;\n \treturn *this;\n       }\n \n-      complex<float>&\n+      complex&\n       operator*=(float __f)\n       {\n \t_M_value *= __f;\n \treturn *this;\n       }\n \n-      complex<float>&\n+      complex&\n       operator/=(float __f)\n       {\n \t_M_value /= __f;\n@@ -1103,7 +1102,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // complex& operator=(const complex&);\n \n       template<typename _Tp>\n-        complex<float>&\n+        complex&\n         operator=(const complex<_Tp>&  __z)\n \t{\n \t  __real__ _M_value = __z.real();\n@@ -1112,7 +1111,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<float>&\n+        complex&\n         operator+=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value += __z.real();\n@@ -1121,7 +1120,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<class _Tp>\n-        complex<float>&\n+        complex&\n         operator-=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value -= __z.real();\n@@ -1130,7 +1129,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<class _Tp>\n-        complex<float>&\n+        complex&\n         operator*=(const complex<_Tp>& __z)\n \t{\n \t  _ComplexT __t;\n@@ -1141,7 +1140,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<class _Tp>\n-        complex<float>&\n+        complex&\n         operator/=(const complex<_Tp>& __z)\n \t{\n \t  _ComplexT __t;\n@@ -1208,36 +1207,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       void imag(double __val)\n       { __imag__ _M_value = __val; }\n \n-      complex<double>&\n+      complex&\n       operator=(double __d)\n       {\n-\t__real__ _M_value = __d;\n-\t__imag__ _M_value = 0.0;\n+\t_M_value = __d;\n \treturn *this;\n       }\n \n-      complex<double>&\n+      complex&\n       operator+=(double __d)\n       {\n-\t__real__ _M_value += __d;\n+\t_M_value += __d;\n \treturn *this;\n       }\n \t\n-      complex<double>&\n+      complex&\n       operator-=(double __d)\n       {\n-\t__real__ _M_value -= __d;\n+\t_M_value -= __d;\n \treturn *this;\n       }\n \n-      complex<double>&\n+      complex&\n       operator*=(double __d)\n       {\n \t_M_value *= __d;\n \treturn *this;\n       }\n \n-      complex<double>&\n+      complex&\n       operator/=(double __d)\n       {\n \t_M_value /= __d;\n@@ -1248,7 +1246,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // complex& operator=(const complex&);\n \n       template<typename _Tp>\n-        complex<double>&\n+        complex&\n         operator=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value = __z.real();\n@@ -1257,7 +1255,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<double>&\n+        complex&\n         operator+=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value += __z.real();\n@@ -1266,7 +1264,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<double>&\n+        complex&\n         operator-=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value -= __z.real();\n@@ -1275,7 +1273,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<double>&\n+        complex&\n         operator*=(const complex<_Tp>& __z)\n \t{\n \t  _ComplexT __t;\n@@ -1286,7 +1284,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<double>&\n+        complex&\n         operator/=(const complex<_Tp>& __z)\n \t{\n \t  _ComplexT __t;\n@@ -1354,36 +1352,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       void imag(long double __val)\n       { __imag__ _M_value = __val; }\n \n-      complex<long double>&\n+      complex&\n       operator=(long double __r)\n       {\n-\t__real__ _M_value = __r;\n-\t__imag__ _M_value = 0.0L;\n+\t_M_value = __r;\n \treturn *this;\n       }\n \n-      complex<long double>&\n+      complex&\n       operator+=(long double __r)\n       {\n-\t__real__ _M_value += __r;\n+\t_M_value += __r;\n \treturn *this;\n       }\n \n-      complex<long double>&\n+      complex&\n       operator-=(long double __r)\n       {\n-\t__real__ _M_value -= __r;\n+\t_M_value -= __r;\n \treturn *this;\n       }\n \n-      complex<long double>&\n+      complex&\n       operator*=(long double __r)\n       {\n \t_M_value *= __r;\n \treturn *this;\n       }\n \n-      complex<long double>&\n+      complex&\n       operator/=(long double __r)\n       {\n \t_M_value /= __r;\n@@ -1394,7 +1391,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // complex& operator=(const complex&);\n \n       template<typename _Tp>\n-        complex<long double>&\n+        complex&\n         operator=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value = __z.real();\n@@ -1403,7 +1400,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<long double>&\n+        complex&\n \toperator+=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value += __z.real();\n@@ -1412,7 +1409,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<long double>&\n+        complex&\n \toperator-=(const complex<_Tp>& __z)\n \t{\n \t  __real__ _M_value -= __z.real();\n@@ -1421,7 +1418,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<long double>&\n+        complex&\n \toperator*=(const complex<_Tp>& __z)\n \t{\n \t  _ComplexT __t;\n@@ -1432,7 +1429,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n \n       template<typename _Tp>\n-        complex<long double>&\n+        complex&\n \toperator/=(const complex<_Tp>& __z)\n \t{\n \t  _ComplexT __t;"}]}