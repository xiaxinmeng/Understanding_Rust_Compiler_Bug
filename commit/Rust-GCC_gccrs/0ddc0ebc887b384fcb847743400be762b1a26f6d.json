{"sha": "0ddc0ebc887b384fcb847743400be762b1a26f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkYzBlYmM4ODdiMzg0ZmNiODQ3NzQzNDAwYmU3NjJiMWEyNmY2ZA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2017-06-28T15:09:08Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-06-28T15:09:08Z"}, "message": "[ARM] Consistently check for neon in vect effective targets\n\nConditions checked for ARM targets in vector-related effective targets\nare inconsistent:\n\n* sometimes arm*-*-* is checked\n* sometimes Neon is checked\n* sometimes arm_neon_ok and sometimes arm_neon is used for neon check\n* sometimes check_effective_target_* is used, sometimes\n* is-effective-target\n\nThis patch consolidate all of these check into using is-effective-target\narm_neon and when little endian was checked, the check is kept.\n\n2017-06-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/testsuite/\n    * lib/target-supports.exp (check_effective_target_vect_int): Replace\n    current ARM check by ARM NEON's availability check.\n    (check_effective_target_vect_intfloat_cvt): Likewise.\n    (check_effective_target_vect_uintfloat_cvt): Likewise.\n    (check_effective_target_vect_floatint_cvt): Likewise.\n    (check_effective_target_vect_floatuint_cvt): Likewise.\n    (check_effective_target_vect_shift): Likewise.\n    (check_effective_target_whole_vector_shift): Likewise.\n    (check_effective_target_vect_bswap): Likewise.\n    (check_effective_target_vect_shift_char): Likewise.\n    (check_effective_target_vect_long): Likewise.\n    (check_effective_target_vect_float): Likewise.\n    (check_effective_target_vect_perm): Likewise.\n    (check_effective_target_vect_perm_byte): Likewise.\n    (check_effective_target_vect_perm_short): Likewise.\n    (check_effective_target_vect_widen_sum_hi_to_si_pattern): Likewise.\n    (check_effective_target_vect_widen_sum_qi_to_hi): Likewise.\n    (check_effective_target_vect_widen_mult_qi_to_hi): Likewise.\n    (check_effective_target_vect_widen_mult_hi_to_si): Likewise.\n    (check_effective_target_vect_widen_mult_qi_to_hi_pattern): Likewise.\n    (check_effective_target_vect_widen_mult_hi_to_si_pattern): Likewise.\n    (check_effective_target_vect_widen_shift): Likewise.\n    (check_effective_target_vect_extract_even_odd): Likewise.\n    (check_effective_target_vect_interleave): Likewise.\n    (check_effective_target_vect_multiple_sizes): Likewise.\n    (check_effective_target_vect64): Likewise.\n    (check_effective_target_vect_max_reduc): Likewise.\n\nFrom-SVN: r249744", "tree": {"sha": "975c6ba79dde07f35d9cfb0198b1c6118e07bfad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/975c6ba79dde07f35d9cfb0198b1c6118e07bfad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ddc0ebc887b384fcb847743400be762b1a26f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ddc0ebc887b384fcb847743400be762b1a26f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ddc0ebc887b384fcb847743400be762b1a26f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ddc0ebc887b384fcb847743400be762b1a26f6d/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8afb53589b8c4378636f940d8e0d19e6e3db75b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afb53589b8c4378636f940d8e0d19e6e3db75b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afb53589b8c4378636f940d8e0d19e6e3db75b4"}], "stats": {"total": 96, "additions": 58, "deletions": 38}, "files": [{"sha": "8b279fa6a7b71cef25943f7640da877c21f3f577", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ddc0ebc887b384fcb847743400be762b1a26f6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ddc0ebc887b384fcb847743400be762b1a26f6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ddc0ebc887b384fcb847743400be762b1a26f6d", "patch": "@@ -1,3 +1,33 @@\n+2017-06-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_int): Replace\n+\tcurrent ARM check by ARM NEON's availability check.\n+\t(check_effective_target_vect_intfloat_cvt): Likewise.\n+\t(check_effective_target_vect_uintfloat_cvt): Likewise.\n+\t(check_effective_target_vect_floatint_cvt): Likewise.\n+\t(check_effective_target_vect_floatuint_cvt): Likewise.\n+\t(check_effective_target_vect_shift): Likewise.\n+\t(check_effective_target_whole_vector_shift): Likewise.\n+\t(check_effective_target_vect_bswap): Likewise.\n+\t(check_effective_target_vect_shift_char): Likewise.\n+\t(check_effective_target_vect_long): Likewise.\n+\t(check_effective_target_vect_float): Likewise.\n+\t(check_effective_target_vect_perm): Likewise.\n+\t(check_effective_target_vect_perm_byte): Likewise.\n+\t(check_effective_target_vect_perm_short): Likewise.\n+\t(check_effective_target_vect_widen_sum_hi_to_si_pattern): Likewise.\n+\t(check_effective_target_vect_widen_sum_qi_to_hi): Likewise.\n+\t(check_effective_target_vect_widen_mult_qi_to_hi): Likewise.\n+\t(check_effective_target_vect_widen_mult_hi_to_si): Likewise.\n+\t(check_effective_target_vect_widen_mult_qi_to_hi_pattern): Likewise.\n+\t(check_effective_target_vect_widen_mult_hi_to_si_pattern): Likewise.\n+\t(check_effective_target_vect_widen_shift): Likewise.\n+\t(check_effective_target_vect_extract_even_odd): Likewise.\n+\t(check_effective_target_vect_interleave): Likewise.\n+\t(check_effective_target_vect_multiple_sizes): Likewise.\n+\t(check_effective_target_vect64): Likewise.\n+\t(check_effective_target_vect_max_reduc): Likewise.\n+\n 2017-06-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/81227"}, {"sha": "fe5e77756404d603f04d674bb5ca872956d4b7ad", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ddc0ebc887b384fcb847743400be762b1a26f6d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ddc0ebc887b384fcb847743400be762b1a26f6d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0ddc0ebc887b384fcb847743400be762b1a26f6d", "patch": "@@ -2974,7 +2974,7 @@ proc check_effective_target_vect_int { } {\n \t     || [istarget alpha*-*-*]\n \t     || [istarget ia64-*-*] \n \t     || [istarget aarch64*-*-*]\n-\t     || [check_effective_target_arm32]\n+\t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && ([et-is-effective-target mips_loongson]\n \t\t     || [et-is-effective-target mips_msa])) } {\n@@ -3002,8 +3002,7 @@ proc check_effective_target_vect_intfloat_cvt { } {\n         if { [istarget i?86-*-*] || [istarget x86_64-*-*]\n \t     || ([istarget powerpc*-*-*]\n \t\t && ![istarget powerpc-*-linux*paired*])\n-\t     || ([istarget arm*-*-*]\n-\t\t && [check_effective_target_arm_neon_ok])\n+\t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa]) } {\n \t    set et_vect_intfloat_cvt_saved($et_index) 1\n@@ -3045,8 +3044,7 @@ proc check_effective_target_vect_uintfloat_cvt { } {\n \t     || ([istarget powerpc*-*-*]\n \t\t && ![istarget powerpc-*-linux*paired*])\n \t     || [istarget aarch64*-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t\t && [check_effective_target_arm_neon_ok])\n+\t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa]) } {\n \t    set et_vect_uintfloat_cvt_saved($et_index) 1\n@@ -3074,8 +3072,7 @@ proc check_effective_target_vect_floatint_cvt { } {\n         if { [istarget i?86-*-*] || [istarget x86_64-*-*]\n \t     || ([istarget powerpc*-*-*]\n \t\t && ![istarget powerpc-*-linux*paired*])\n-\t     || ([istarget arm*-*-*]\n-\t\t && [check_effective_target_arm_neon_ok])\n+\t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa]) } {\n \t    set et_vect_floatint_cvt_saved($et_index) 1\n@@ -3101,8 +3098,7 @@ proc check_effective_target_vect_floatuint_cvt { } {\n \tset et_vect_floatuint_cvt_saved($et_index) 0\n         if { ([istarget powerpc*-*-*]\n \t      && ![istarget powerpc-*-linux*paired*])\n-\t    || ([istarget arm*-*-*]\n-\t\t&& [check_effective_target_arm_neon_ok])\n+\t    || [is-effective-target arm_neon]\n \t    || ([istarget mips*-*-*]\n \t\t&& [et-is-effective-target mips_msa]) } {\n \t   set et_vect_floatuint_cvt_saved($et_index) 1\n@@ -4978,7 +4974,7 @@ proc check_effective_target_vect_shift { } {\n \t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*] || [istarget x86_64-*-*]\n \t     || [istarget aarch64*-*-*]\n-\t     || [check_effective_target_arm32]\n+\t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && ([et-is-effective-target mips_msa]\n \t\t     || [et-is-effective-target mips_loongson])) } {\n@@ -4996,7 +4992,7 @@ proc check_effective_target_whole_vector_shift { } {\n \t || [istarget ia64-*-*]\n \t || [istarget aarch64*-*-*]\n \t || [istarget powerpc64*-*-*]\n-\t || ([check_effective_target_arm32]\n+\t || ([is-effective-target arm_neon]\n \t     && [check_effective_target_arm_little_endian])\n \t || ([istarget mips*-*-*]\n \t     && [et-is-effective-target mips_loongson]) } {\n@@ -5020,8 +5016,7 @@ proc check_effective_target_vect_bswap { } {\n     } else {\n \tset et_vect_bswap_saved($et_index) 0\n \tif { [istarget aarch64*-*-*]\n-             || ([istarget arm*-*-*]\n-                && [check_effective_target_arm_neon])\n+             || [is-effective-target arm_neon]\n \t   } {\n \t   set et_vect_bswap_saved($et_index) 1\n \t}\n@@ -5044,7 +5039,7 @@ proc check_effective_target_vect_shift_char { } {\n \tset et_vect_shift_char_saved($et_index) 0\n \tif { ([istarget powerpc*-*-*]\n              && ![istarget powerpc-*-linux*paired*])\n-\t     || [check_effective_target_arm32]\n+\t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa]) } {\n \t   set et_vect_shift_char_saved($et_index) 1\n@@ -5062,10 +5057,10 @@ proc check_effective_target_vect_shift_char { } {\n \n proc check_effective_target_vect_long { } {\n     if { [istarget i?86-*-*] || [istarget x86_64-*-*]\n-\t || (([istarget powerpc*-*-*] \n-              && ![istarget powerpc-*-linux*paired*]) \n+\t || (([istarget powerpc*-*-*]\n+              && ![istarget powerpc-*-linux*paired*])\n               && [check_effective_target_ilp32])\n-\t || [check_effective_target_arm32]\n+\t || [is-effective-target arm_neon]\n \t || ([istarget sparc*-*-*] && [check_effective_target_ilp32])\n \t || [istarget aarch64*-*-*]\n \t || ([istarget mips*-*-*]\n@@ -5100,7 +5095,7 @@ proc check_effective_target_vect_float { } {\n \t     || [istarget aarch64*-*-*]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa])\n-\t     || [check_effective_target_arm32] } {\n+\t     || [is-effective-target arm_neon] } {\n \t    set et_vect_float_saved($et_index) 1\n \t}\n     }\n@@ -5249,7 +5244,7 @@ proc check_effective_target_vect_perm { } {\n         verbose \"check_effective_target_vect_perm: using cached result\" 2\n     } else {\n \tset et_vect_perm_saved($et_index) 0\n-        if { [is-effective-target arm_neon_ok]\n+        if { [is-effective-target arm_neon]\n \t     || [istarget aarch64*-*-*]\n \t     || [istarget powerpc*-*-*]\n              || [istarget spu-*-*]\n@@ -5278,7 +5273,7 @@ proc check_effective_target_vect_perm_byte { } {\n         verbose \"check_effective_target_vect_perm_byte: using cached result\" 2\n     } else {\n \tset et_vect_perm_byte_saved($et_index) 0\n-        if { ([is-effective-target arm_neon_ok]\n+        if { ([is-effective-target arm_neon]\n \t      && [is-effective-target arm_little_endian])\n \t     || ([istarget aarch64*-*-*]\n \t\t && [is-effective-target aarch64_little_endian])\n@@ -5307,7 +5302,7 @@ proc check_effective_target_vect_perm_short { } {\n         verbose \"check_effective_target_vect_perm_short: using cached result\" 2\n     } else {\n \tset et_vect_perm_short_saved($et_index) 0\n-        if { ([is-effective-target arm_neon_ok]\n+        if { ([is-effective-target arm_neon]\n \t      && [is-effective-target arm_little_endian])\n \t     || ([istarget aarch64*-*-*]\n \t\t && [is-effective-target aarch64_little_endian])\n@@ -5339,8 +5334,7 @@ proc check_effective_target_vect_widen_sum_hi_to_si_pattern { } {\n \tset et_vect_widen_sum_hi_to_si_pattern_saved($et_index) 0\n         if { [istarget powerpc*-*-*]\n              || [istarget aarch64*-*-*]\n-\t     || ([istarget arm*-*-*] &&\n-\t\t [check_effective_target_arm_neon_ok])\n+\t     || [is-effective-target arm_neon]\n              || [istarget ia64-*-*] } {\n \t    set et_vect_widen_sum_hi_to_si_pattern_saved($et_index) 1\n         }\n@@ -5394,7 +5388,7 @@ proc check_effective_target_vect_widen_sum_qi_to_hi { } {\n     } else {\n \tset et_vect_widen_sum_qi_to_hi_saved($et_index) 0\n \tif { [check_effective_target_vect_unpack] \n-\t     || [check_effective_target_arm_neon_ok]\n+\t     || [is-effective-target arm_neon]\n \t     || [istarget ia64-*-*] } {\n \t    set et_vect_widen_sum_qi_to_hi_saved($et_index) 1\n \t}\n@@ -5452,7 +5446,7 @@ proc check_effective_target_vect_widen_mult_qi_to_hi { } {\n \t}\n         if { [istarget powerpc*-*-*]\n               || [istarget aarch64*-*-*]\n-              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {\n+              || [is-effective-target arm_neon] } {\n \t    set et_vect_widen_mult_qi_to_hi_saved($et_index) 1\n         }\n     }\n@@ -5489,8 +5483,7 @@ proc check_effective_target_vect_widen_mult_hi_to_si { } {\n \t     || [istarget ia64-*-*]\n \t     || [istarget aarch64*-*-*]\n \t     || [istarget i?86-*-*] || [istarget x86_64-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t\t && [check_effective_target_arm_neon_ok]) } {\n+\t     || [is-effective-target arm_neon] } {\n \t    set et_vect_widen_mult_hi_to_si_saved($et_index) 1\n         }\n     }\n@@ -5514,8 +5507,7 @@ proc check_effective_target_vect_widen_mult_qi_to_hi_pattern { } {\n     } else {\n \tset et_vect_widen_mult_qi_to_hi_pattern_saved($et_index) 0\n         if { [istarget powerpc*-*-*]\n-              || ([istarget arm*-*-*]\n-\t\t  && [check_effective_target_arm_neon_ok]\n+              || ([is-effective-target arm_neon]\n \t\t  && [check_effective_target_arm_little_endian]) } {\n \t    set et_vect_widen_mult_qi_to_hi_pattern_saved($et_index) 1\n         }\n@@ -5543,8 +5535,7 @@ proc check_effective_target_vect_widen_mult_hi_to_si_pattern { } {\n \t     || [istarget spu-*-*]\n \t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*] || [istarget x86_64-*-*]\n-\t     || ([istarget arm*-*-*]\n-\t\t && [check_effective_target_arm_neon_ok]\n+\t     || ([is-effective-target arm_neon]\n \t\t && [check_effective_target_arm_little_endian]) } {\n \t    set et_vect_widen_mult_hi_to_si_pattern_saved($et_index) 1\n         }\n@@ -5591,7 +5582,7 @@ proc check_effective_target_vect_widen_shift { } {\n         verbose \"check_effective_target_vect_widen_shift: using cached result\" 2\n     } else {\n \tset et_vect_widen_shift_saved($et_index) 0\n-        if { ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {\n+        if { [is-effective-target arm_neon] } {\n \t    set et_vect_widen_shift_saved($et_index) 1\n         }\n     }\n@@ -6145,7 +6136,7 @@ proc check_effective_target_vect_extract_even_odd { } {\n \tset et_vect_extract_even_odd_saved($et_index) 0\n \tif { [istarget aarch64*-*-*]\n \t     || [istarget powerpc*-*-*]\n-\t     || [is-effective-target arm_neon_ok]\n+\t     || [is-effective-target arm_neon]\n              || [istarget i?86-*-*] || [istarget x86_64-*-*]\n              || [istarget ia64-*-*]\n              || [istarget spu-*-*]\n@@ -6173,7 +6164,7 @@ proc check_effective_target_vect_interleave { } {\n \tset et_vect_interleave_saved($et_index) 0\n \tif { [istarget aarch64*-*-*]\n \t     || [istarget powerpc*-*-*]\n-\t     || [is-effective-target arm_neon_ok]\n+\t     || [is-effective-target arm_neon]\n              || [istarget i?86-*-*] || [istarget x86_64-*-*]\n              || [istarget ia64-*-*]\n              || [istarget spu-*-*]\n@@ -6227,7 +6218,7 @@ proc check_effective_target_vect_multiple_sizes { } {\n \n     set et_vect_multiple_sizes_saved($et_index) 0\n     if { [istarget aarch64*-*-*]\n-\t || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok])\n+\t || [is-effective-target arm_neon]\n \t || (([istarget i?86-*-*] || [istarget x86_64-*-*])\n \t     && ([check_avx_available] && ![check_prefer_avx128])) } {\n \tset et_vect_multiple_sizes_saved($et_index) 1\n@@ -6248,8 +6239,7 @@ proc check_effective_target_vect64 { } {\n         verbose \"check_effective_target_vect64: using cached result\" 2\n     } else {\n \tset et_vect64_saved($et_index) 0\n-        if { ([istarget arm*-*-*]\n-\t      && [check_effective_target_arm_neon_ok]\n+        if { ([is-effective-target arm_neon]\n \t      && [check_effective_target_arm_little_endian])\n \t     || [istarget aarch64*-*-*]\n              || [istarget sparc*-*-*] } {\n@@ -8274,7 +8264,7 @@ proc check_effective_target_builtin_eh_return { } {\n # Return 1 if the target supports max reduction for vectors.\n \n proc check_effective_target_vect_max_reduc { } {\n-    if { [istarget aarch64*-*-*] || [istarget arm*-*-*] } {\n+    if { [istarget aarch64*-*-*] || [is-effective-target arm_neon] } {\n \treturn 1\n     }\n     return 0"}]}