{"sha": "50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhNzFjZDAxODJhZTExNDQ0YmM3YjU4MmEzYjFjYjFjNTRjN2EwZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-15T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-15T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "e96fc24b6d5fbfdce9f26dae3b76da295b384ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e96fc24b6d5fbfdce9f26dae3b76da295b384ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/comments", "author": null, "committer": null, "parents": [{"sha": "0620f4d79e270f1a455a7ec099504d44dc6180e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0620f4d79e270f1a455a7ec099504d44dc6180e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0620f4d79e270f1a455a7ec099504d44dc6180e6"}], "stats": {"total": 368, "additions": 367, "deletions": 1}, "files": [{"sha": "87eab28cb03b0fd431ffe5451a6f06bd6a9f7d36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,171 @@\n+2020-09-14  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* doc/invoke.texi: fix '-fprofile-reproducibility' option\n+\tspelling in manual.\n+\n+2020-09-14  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config/bpf/bpf.md (\"nop\"): Re-define as `ja 0'.\n+\n+2020-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Make sure to set\n+\tcfun->tail_call_marked when forcing a tail call.\n+\t* function.c (assign_parm_setup_reg): Always use a register to\n+\tload a parameter passed by reference if cfun->tail_call_marked.\n+\n+2020-09-14  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/power10.md (power10-mffgpr, power10-mftgpr): Rename to\n+\tpower10-mtvsr/power10-mfvsr.\n+\t* config/rs6000/power6.md (X2F_power6, power6-mftgpr, power6-mffgpr):\n+\tRemove.\n+\t* config/rs6000/power8.md (power8-mffgpr, power8-mftgpr): Rename to\n+\tpower8-mtvsr/power8-mfvsr.\n+\t* config/rs6000/power9.md (power9-mffgpr, power9-mftgpr): Rename to\n+\tpower9-mtvsr/power9-mfvsr.\n+\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Remove Power6\n+\tTYPE_MFFGPR cases.\n+\t* config/rs6000/rs6000.md (mffgpr, mftgpr, zero_extendsi<mode>2,\n+\textendsi<mode>2, @signbit<mode>2_dm, lfiwax, lfiwzx, *movsi_internal1,\n+\tmovsi_from_sf, *movdi_from_sf_zero_ext, *mov<mode>_internal,\n+\tmovsd_hardfloat, movsf_from_si, *mov<mode>_hardfloat64, p8_mtvsrwz,\n+\tp8_mtvsrd_df, p8_mtvsrd_sf, p8_mfvsrd_3_<mode>, *movdi_internal64,\n+\tunpack<mode>_dm): Rename mffgpr/mftgpr to mtvsr/mfvsr.\n+\t* config/rs6000/vsx.md (vsx_mov<mode>_64bit, vsx_extract_<mode>,\n+\tvsx_extract_si, *vsx_extract_<mode>_p8): Likewise.\n+\n+2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/arm/arm.opt (x_arm_arch_string, x_arm_cpu_string,\n+\tx_arm_tune_string): Remove TargetSave entries.\n+\t(march=, mcpu=, mtune=): Add Save keyword.\n+\t* config/arm/arm.c (arm_option_save): Remove.\n+\t(TARGET_OPTION_SAVE): Don't redefine.\n+\t(arm_option_restore): Don't restore x_arm_*_string here.\n+\n+2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* opt-read.awk: Also initialize extra_target_var_types array.\n+\t* opth-gen.awk: Emit explicit_mask arrays to struct cl_optimization\n+\tand cl_target_option.  Adjust cl_optimization_save,\n+\tcl_optimization_restore, cl_target_option_save and\n+\tcl_target_option_restore declarations.\n+\t* optc-save-gen.awk: Add opts_set argument to cl_optimization_save,\n+\tcl_optimization_restore, cl_target_option_save and\n+\tcl_target_option_restore functions and save or restore opts_set\n+\tnext to the opts values into or from explicit_mask arrays.\n+\tIn cl_target_option_eq and cl_optimization_option_eq compare\n+\texplicit_mask arrays, in cl_target_option_hash and cl_optimization_hash\n+\thash them and in cl_target_option_stream_out,\n+\tcl_target_option_stream_in, cl_optimization_stream_out and\n+\tcl_optimization_stream_in stream them.\n+\t* tree.h (build_optimization_node, build_target_option_node): Add\n+\topts_set argument.\n+\t* tree.c (build_optimization_node): Add opts_set argument, pass it\n+\tto cl_optimization_save.\n+\t(build_target_option_node): Add opts_set argument, pass it to\n+\tcl_target_option_save.\n+\t* function.c (invoke_set_current_function_hook): Adjust\n+\tcl_optimization_restore caller.\n+\t* ipa-inline-transform.c (inline_call): Adjust cl_optimization_restore\n+\tand build_optimization_node callers.\n+\t* target.def (TARGET_OPTION_SAVE, TARGET_OPTION_RESTORE): Add opts_set\n+\targument.\n+\t* target-globals.c (save_target_globals_default_opts): Adjust\n+\tcl_optimization_restore callers.\n+\t* toplev.c (process_options): Adjust build_optimization_node and\n+\tcl_optimization_restore callers.\n+\t(target_reinit): Adjust cl_optimization_restore caller.\n+\t* tree-streamer-in.c (lto_input_ts_function_decl_tree_pointers):\n+\tAdjust build_optimization_node and cl_optimization_restore callers.\n+\t* doc/tm.texi: Updated.\n+\t* config/aarch64/aarch64.c (aarch64_override_options): Adjust\n+\tbuild_target_option_node caller.\n+\t(aarch64_option_save, aarch64_option_restore): Add opts_set argument.\n+\t(aarch64_set_current_function): Adjust cl_target_option_restore\n+\tcaller.\n+\t(aarch64_option_valid_attribute_p): Adjust cl_target_option_save,\n+\tcl_target_option_restore, cl_optimization_restore,\n+\tbuild_optimization_node and build_target_option_node callers.\n+\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse): Adjust\n+\tcl_target_option_restore and build_target_option_node callers.\n+\t* config/arm/arm.c (arm_option_save, arm_option_restore): Add\n+\topts_set argument.\n+\t(arm_option_override): Adjust cl_target_option_save,\n+\tbuild_optimization_node and build_target_option_node callers.\n+\t(arm_set_current_function): Adjust cl_target_option_restore caller.\n+\t(arm_valid_target_attribute_tree): Adjust build_target_option_node\n+\tcaller.\n+\t(add_attribute): Formatting fix.\n+\t(arm_valid_target_attribute_p): Adjust cl_optimization_restore,\n+\tcl_target_option_restore, arm_valid_target_attribute_tree and\n+\tbuild_optimization_node callers.\n+\t* config/arm/arm-c.c (arm_pragma_target_parse): Adjust\n+\tcl_target_option_restore callers.\n+\t* config/csky/csky.c (csky_option_override): Adjust\n+\tbuild_target_option_node and cl_target_option_save callers.\n+\t* config/gcn/gcn.c (gcn_fixup_accel_lto_options): Adjust\n+\tbuild_optimization_node and cl_optimization_restore callers.\n+\t* config/i386/i386-builtins.c (get_builtin_code_for_version):\n+\tAdjust cl_target_option_save and cl_target_option_restore\n+\tcallers.\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Adjust\n+\tbuild_target_option_node and cl_target_option_restore callers.\n+\t* config/i386/i386-options.c (ix86_function_specific_save,\n+\tix86_function_specific_restore): Add opts_set arguments.\n+\t(ix86_valid_target_attribute_tree): Adjust build_target_option_node\n+\tcaller.\n+\t(ix86_valid_target_attribute_p): Adjust build_optimization_node,\n+\tcl_optimization_restore, cl_target_option_restore,\n+\tix86_valid_target_attribute_tree and build_optimization_node callers.\n+\t(ix86_option_override_internal): Adjust build_target_option_node\n+\tcaller.\n+\t(ix86_reset_previous_fndecl, ix86_set_current_function): Adjust\n+\tcl_target_option_restore callers.\n+\t* config/i386/i386-options.h (ix86_function_specific_save,\n+\tix86_function_specific_restore): Add opts_set argument.\n+\t* config/nios2/nios2.c (nios2_option_override): Adjust\n+\tbuild_target_option_node caller.\n+\t(nios2_option_save, nios2_option_restore): Add opts_set argument.\n+\t(nios2_valid_target_attribute_tree): Adjust build_target_option_node\n+\tcaller.\n+\t(nios2_valid_target_attribute_p): Adjust build_optimization_node,\n+\tcl_optimization_restore, cl_target_option_save and\n+\tcl_target_option_restore callers.\n+\t(nios2_set_current_function, nios2_pragma_target_parse): Adjust\n+\tcl_target_option_restore callers.\n+\t* config/pru/pru.c (pru_option_override): Adjust\n+\tbuild_target_option_node caller.\n+\t(pru_set_current_function): Adjust cl_target_option_restore\n+\tcallers.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust\n+\tcl_target_option_save caller.\n+\t(rs6000_option_override_internal): Adjust build_target_option_node\n+\tcaller.\n+\t(rs6000_valid_attribute_p): Adjust build_optimization_node,\n+\tcl_optimization_restore, cl_target_option_save,\n+\tcl_target_option_restore and build_target_option_node callers.\n+\t(rs6000_pragma_target_parse): Adjust cl_target_option_restore and\n+\tbuild_target_option_node callers.\n+\t(rs6000_activate_target_options): Adjust cl_target_option_restore\n+\tcallers.\n+\t(rs6000_function_specific_save, rs6000_function_specific_restore):\n+\tAdd opts_set argument.\n+\t* config/s390/s390.c (s390_function_specific_restore): Likewise.\n+\t(s390_option_override_internal): Adjust s390_function_specific_restore\n+\tcaller.\n+\t(s390_option_override, s390_valid_target_attribute_tree): Adjust\n+\tbuild_target_option_node caller.\n+\t(s390_valid_target_attribute_p): Adjust build_optimization_node,\n+\tcl_optimization_restore and cl_target_option_restore callers.\n+\t(s390_activate_target_options): Adjust cl_target_option_restore\n+\tcaller.\n+\t* config/s390/s390-c.c (s390_cpu_cpp_builtins): Adjust\n+\tcl_target_option_save caller.\n+\t(s390_pragma_target_parse): Adjust build_target_option_node and\n+\tcl_target_option_restore callers.\n+\n 2020-09-13  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* config/pa/pa.c (hppa_rtx_costs) [ASHIFT, ASHIFTRT, LSHIFTRT]:"}, {"sha": "792c97ce32d62004002493f51d4d443b81aace1a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1 +1 @@\n-20200914\n+20200915"}, {"sha": "280b834ed9efe55d06ecc0a59249985645dbada6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/trans.c (gigi): Adjust build_optimization_node\n+\tcaller.\n+\n 2020-09-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fe.h: Fix pilot error in previous change."}, {"sha": "d0f84017ea81750339c24540107455d9cc265c85", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,25 @@\n+2020-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.opt (-param=analyzer-max-constraints=): New param.\n+\t* constraint-manager.cc\n+\t(constraint_manager::add_constraint_internal): Silently reject\n+\tattempts to add constraints when the above limit is reached.\n+\n+2020-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96653\n+\t* constraint-manager.cc\n+\t(constraint_manager::get_or_add_equiv_class): Don't accumulate\n+\ttransitive closure of all constraints on constants.\n+\n+2020-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97029\n+\t* analyzer.cc (is_setjmp_call_p): Require the initial arg to be a\n+\tpointer.\n+\t* region-model.cc (region_model::deref_rvalue): Assert that the\n+\tsvalue is of pointer type.\n+\n 2020-09-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/96798"}, {"sha": "738083910d7f4edfda894d7a783434bd991298cc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,15 @@\n+2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-attribs.c (handle_optimize_attribute): Adjust\n+\tcl_optimization_save, cl_optimization_restore and\n+\tbuild_optimization_node callers.\n+\t* c-pragma.c (handle_pragma_optimize): Adjust\n+\tbuild_optimization_node caller.\n+\t(handle_pragma_push_options): Adjust\n+\tbuild_optimization_node and build_target_option_node callers.\n+\t(handle_pragma_pop_options, handle_pragma_reset_options):\n+\tAdjust cl_optimization_restore callers.\n+\n 2020-08-28  Martin Sebor  <msebor@redhat.com>\n \n \t* c.opt (Wstringop-overread): New option."}, {"sha": "7bf1b25aa4c38f7bd8548f036e09adf5eb254d39", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,15 @@\n+2020-09-14  Marek Polacek  <polacek@redhat.com>\n+\n+\t* pt.c (push_template_decl_real): Use VAR_OR_FUNCTION_DECL_P.\n+\n+2020-09-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (push_template_decl_real): Don't attach a template head to\n+\tlocal externs.\n+\t(tsubst_function_decl): Add support for headless local extern\n+\tdecls.\n+\t(tsubst_decl): Add support for headless local extern decls.\n+\n 2020-09-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (grokfndecl): Don't attach to local extern."}, {"sha": "b25aa0cd42348a1a798076cf9eabfac3739d64de", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,9 @@\n+2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* go-gcc.cc (Gcc_backend::function): Adjust\n+\tcl_optimization_save, cl_optimization_restore and\n+\tbuild_optimization_node callers.\n+\n 2020-08-10  Cl\u00e9ment Chigot  <chigot.c@gmail.com>\n \n \t* go-c.h (struct go_create_gogo_args): Add need_eqtype field."}, {"sha": "48bd54d13ddb54df845d12edb94b6d9247c772ba", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,7 @@\n+2020-09-14  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2020-09-11  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_14): New ABI tag."}, {"sha": "ec179a321a95aad31d751a60040856dfc21c9a83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,40 @@\n+2020-09-14  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* gcc.target/bpf/nop-1.c: New test.\n+\n+2020-09-14  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-1.c: Make the test\n+\trun as non-dynamic for m32 Darwin.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-3.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-5.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-7.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-1.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-3.c: Likewise.\n+\t* gcc.target/i386/avx512vl-broadcast-pr87767-5.c: Likewise.\n+\t* gcc.target/i386/avx512f-broadcast-pr87767-6.c: Adjust dg-requires\n+\tclause.\n+\n+2020-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96653\n+\t* gcc.dg/analyzer/pr96653.c: New test.\n+\n+2020-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/rhbz1878600.c: New test.\n+\n+2020-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/pr97029.c: New test.\n+\n+2020-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/thunk1.adb: New test.\n+\t* gnat.dg/thunk1_pkg1.ads: New helper.\n+\t* gnat.dg/thunk1_pkg2.ads: Likewise.\n+\t* gnat.dg/thunk1_pkg2.adb: Likewise.\n+\n 2020-09-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/97002"}, {"sha": "76ff7fd6389443fb94927289da0b00082e95ebe2", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,96 @@\n+2020-09-14  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libbacktrace/93608\n+\tAdd support for MiniDebugInfo.\n+\t* elf.c (struct elf_view): Define.  Replace most uses of\n+\tbacktrace_view with elf_view.\n+\t(elf_get_view): New static functions.  Replace most calls of\n+\tbacktrace_get_view with elf_get_view.\n+\t(elf_release_view): New static functions.  Replace most calls of\n+\tbacktrace_release_view with elf_release_view.\n+\t(elf_uncompress_failed): Rename from elf_zlib_failed.  Change all\n+\tcallers.\n+\t(LZMA_STATES, LZMA_POS_STATES, LZMA_DIST_STATES): Define.\n+\t(LZMA_DIST_SLOTS, LZMA_DIST_MODEL_START): Define.\n+\t(LZMA_DIST_MODEL_END, LZMA_FULL_DISTANCES): Define.\n+\t(LZMA_ALIGN_SIZE, LZMA_LEN_LOW_SYMBOLS): Define.\n+\t(LZMA_LEN_MID_SYMBOLS, LZMA_LEN_HIGH_SYMBOLS): Define.\n+\t(LZMA_LITERAL_CODERS_MAX, LZMA_LITERAL_CODER_SIZE): Define.\n+\t(LZMA_PROB_IS_MATCH_LEN, LZMA_PROB_IS_REP_LEN): Define.\n+\t(LZMA_PROB_IS_REP0_LEN, LZMA_PROB_IS_REP1_LEN): Define.\n+\t(LZMA_PROB_IS_REP2_LEN, LZMA_PROB_IS_REP0_LONG_LEN): Define.\n+\t(LZMA_PROB_DIST_SLOT_LEN, LZMA_PROB_DIST_SPECIAL_LEN): Define.\n+\t(LZMA_PROB_DIST_ALIGN_LEN): Define.\n+\t(LZMA_PROB_MATCH_LEN_CHOICE_LEN): Define.\n+\t(LZMA_PROB_MATCH_LEN_CHOICE2_LEN): Define.\n+\t(LZMA_PROB_MATCH_LEN_LOW_LEN): Define.\n+\t(LZMA_PROB_MATCH_LEN_MID_LEN): Define.\n+\t(LZMA_PROB_MATCH_LEN_HIGH_LEN): Define.\n+\t(LZMA_PROB_REP_LEN_CHOICE_LEN): Define.\n+\t(LZMA_PROB_REP_LEN_CHOICE2_LEN): Define.\n+\t(LZMA_PROB_REP_LEN_LOW_LEN): Define.\n+\t(LZMA_PROB_REP_LEN_MID_LEN): Define.\n+\t(LZMA_PROB_REP_LEN_HIGH_LEN): Define.\n+\t(LZMA_PROB_LITERAL_LEN): Define.\n+\t(LZMA_PROB_IS_MATCH_OFFSET, LZMA_PROB_IS_REP_OFFSET): Define.\n+\t(LZMA_PROB_IS_REP0_OFFSET, LZMA_PROB_IS_REP1_OFFSET): Define.\n+\t(LZMA_PROB_IS_REP2_OFFSET): Define.\n+\t(LZMA_PROB_IS_REP0_LONG_OFFSET): Define.\n+\t(LZMA_PROB_DIST_SLOT_OFFSET): Define.\n+\t(LZMA_PROB_DIST_SPECIAL_OFFSET): Define.\n+\t(LZMA_PROB_DIST_ALIGN_OFFSET): Define.\n+\t(LZMA_PROB_MATCH_LEN_CHOICE_OFFSET): Define.\n+\t(LZMA_PROB_MATCH_LEN_CHOICE2_OFFSET): Define.\n+\t(LZMA_PROB_MATCH_LEN_LOW_OFFSET): Define.\n+\t(LZMA_PROB_MATCH_LEN_MID_OFFSET): Define.\n+\t(LZMA_PROB_MATCH_LEN_HIGH_OFFSET): Define.\n+\t(LZMA_PROB_REP_LEN_CHOICE_OFFSET): Define.\n+\t(LZMA_PROB_REP_LEN_CHOICE2_OFFSET): Define.\n+\t(LZMA_PROB_REP_LEN_LOW_OFFSET): Define.\n+\t(LZMA_PROB_REP_LEN_MID_OFFSET): Define.\n+\t(LZMA_PROB_REP_LEN_HIGH_OFFSET): Define.\n+\t(LZMA_PROB_LITERAL_OFFSET): Define.\n+\t(LZMA_PROB_TOTAL_COUNT): Define.\n+\t(LZMA_IS_MATCH, LZMA_IS_REP, LZMA_IS_REP0): Define.\n+\t(LZMA_IS_REP1, LZMA_IS_REP2, LZMA_IS_REP0_LONG): Define.\n+\t(LZMA_DIST_SLOT, LZMA_DIST_SPECIAL, LZMA_DIST_ALIGN): Define.\n+\t(LZMA_MATCH_LEN_CHOICE, LZMA_MATCH_LEN_CHOICE2): Define.\n+\t(LZMA_MATCH_LEN_LOW, LZMA_MATCH_LEN_MID): Define.\n+\t(LZMA_MATCH_LEN_HIGH, LZMA_REP_LEN_CHOICE): Define.\n+\t(LZMA_REP_LEN_CHOICE2, LZMA_REP_LEN_LOW): Define.\n+\t(LZMA_REP_LEN_MID, LZMA_REP_LEN_HIGH, LZMA_LITERAL): Define.\n+\t(elf_lzma_varint): New static function.\n+\t(elf_lzma_range_normalize): New static function.\n+\t(elf_lzma_bit, elf_lzma_integer): New static functions.\n+\t(elf_lzma_reverse_integer): New static function.\n+\t(elf_lzma_len, elf_uncompress_lzma_block): New static functions.\n+\t(elf_uncompress_lzma): New static function.\n+\t(backtrace_uncompress_lzma): New function.\n+\t(elf_add): Add memory and memory_size parameters.  Change all\n+\tcallers.  Look for .gnu_debugdata section, and, if found,\n+\tdecompress it and use it for symbols and debug info.  Permit the\n+\tdescriptor parameter to be -1.\n+\t* internal.h (backtrace_uncompress_lzma): Declare.\n+\t* mtest.c: New file.\n+\t* xztest.c: New file.\n+\t* configure.ac: Check for nm, xz, and comm programs.  Check for\n+\tliblzma library.\n+\t(HAVE_MINIDEBUG): Define.\n+\t* Makefile.am (mtest_SOURCES): Define.\n+\t(mtest_CFLAGS, mtest_LDADD): Define.\n+\t(TESTS): Add mtest_minidebug if HAVE_MINIDEBUG.\n+\t(%_minidebug): New pattern rule, if HAVE_MINIDEBUG.\n+\t(xztest_SOURCES, xztest_CFLAGS, xztest_LDADD): Define.\n+\t(xztest_alloc_SOURCES, xztest_alloc_CFLAGS): Define\n+\t(xztest_alloc_LDADD): Define.\n+\t(BUILDTESTS): Add mtest, xztest, xztest_alloc.\n+\t(CLEANFILES): Add files created by minidebug pattern.\n+\t(btest.lo): Correct INCDIR reference.\n+\t(mtest.lo, xztest.lo, ztest.lo): New targets.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\n 2020-09-09  Ian Lance Taylor  <iant@golang.org>\n \n \t* pecoff.c (coff_initialize_syminfo): Add is_64 parameter."}, {"sha": "bed76d0c8552c6002b321f8bc063872fd2daa2af", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/atomic.c: New file.  Add\n+\t__sync_val_compare_and_swap_16.\n+\t* testsuite/libgomp.c-c++-common/reduction-16.c: Add -latomic for\n+\ttarget offload_target_nvptx.\n+\n 2020-09-08  Julian Brown  <julian@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/atomic_capture-2.c: Remove"}]}