{"sha": "502c4bb950b3f5f0b1089800123acadf595e12b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyYzRiYjk1MGIzZjVmMGIxMDg5ODAwMTIzYWNhZGY1OTVlMTJiNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-06-19T18:18:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-06-19T18:18:54Z"}, "message": "trans.c (emit_check): Do not wrap up the result in a SAVE_EXPR.\n\n\t* gcc-interface/trans.c (emit_check): Do not wrap up the result\n\tin a SAVE_EXPR.\n\t(protect_multiple_eval): Always protect complex expressions.\n\nFrom-SVN: r148723", "tree": {"sha": "866ee4024661709e4c172685223da255f18a8114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866ee4024661709e4c172685223da255f18a8114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/502c4bb950b3f5f0b1089800123acadf595e12b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502c4bb950b3f5f0b1089800123acadf595e12b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502c4bb950b3f5f0b1089800123acadf595e12b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502c4bb950b3f5f0b1089800123acadf595e12b4/comments", "author": null, "committer": null, "parents": [{"sha": "d4aa4f4b78fd35f3005943ee7a59468660504337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4aa4f4b78fd35f3005943ee7a59468660504337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4aa4f4b78fd35f3005943ee7a59468660504337"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "b03304f1ce2fef22feb1a027cde43dc0157671e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502c4bb950b3f5f0b1089800123acadf595e12b4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502c4bb950b3f5f0b1089800123acadf595e12b4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=502c4bb950b3f5f0b1089800123acadf595e12b4", "patch": "@@ -1,3 +1,9 @@\n+2009-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (emit_check): Do not wrap up the result\n+\tin a SAVE_EXPR.\n+\t(protect_multiple_eval): Always protect complex expressions.\n+\n 2009-06-19  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj-ext.adb, makeutl.adb, makeutl.ads (Executable_Prefix_Path): Now"}, {"sha": "ed9337c33898d1114158ccc21249ae91019dc2d3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502c4bb950b3f5f0b1089800123acadf595e12b4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502c4bb950b3f5f0b1089800123acadf595e12b4/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=502c4bb950b3f5f0b1089800123acadf595e12b4", "patch": "@@ -6610,10 +6610,7 @@ emit_check (tree gnu_cond, tree gnu_expr, int reason, Node_Id gnat_node)\n      we don't need to evaluate it just for the check.  */\n   TREE_SIDE_EFFECTS (gnu_result) = TREE_SIDE_EFFECTS (gnu_expr);\n \n-  /* ??? Unfortunately, if we don't put a SAVE_EXPR around this whole thing,\n-     we will repeatedly do the test and, at compile time, we will repeatedly\n-     visit it during unsharing, which leads to an exponential explosion.  */\n-  return save_expr (gnu_result);\n+  return gnu_result;\n }\n \f\n /* Return an expression that converts GNU_EXPR to GNAT_TYPE, doing overflow\n@@ -7229,8 +7226,15 @@ protect_multiple_eval (tree exp)\n {\n   tree type = TREE_TYPE (exp);\n \n-  /* If this has no side effects, we don't need to do anything.  */\n-  if (!TREE_SIDE_EFFECTS (exp))\n+  /* If EXP has no side effects, we theoritically don't need to do anything.\n+     However, we may be recursively passed more and more complex expressions\n+     involving checks which will be reused multiple times and eventually be\n+     unshared for gimplification; in order to avoid a complexity explosion\n+     at that point, we protect any expressions more complex than a simple\n+     arithmetic expression.  */\n+  if (!TREE_SIDE_EFFECTS (exp)\n+      && (CONSTANT_CLASS_P (exp)\n+\t  || !EXPRESSION_CLASS_P (skip_simple_arithmetic (exp))))\n     return exp;\n \n   /* If this is a conversion, protect what's inside the conversion."}]}