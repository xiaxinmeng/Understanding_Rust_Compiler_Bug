{"sha": "2a83259f837e5cbd39467a3faf954b51d9d13664", "node_id": "C_kwDOANBUbNoAKDJhODMyNTlmODM3ZTVjYmQzOTQ2N2EzZmFmOTU0YjUxZDlkMTM2NjQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-02T21:58:32Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-02T21:58:32Z"}, "message": "x86_64: Improved implementation of TImode rotations.\n\nThis simple patch improves the implementation of 128-bit (TImode)\nrotations on x86_64 (a missed optimization opportunity spotted\nduring the recent V1TImode improvements).\n\nCurrently, the function:\n\nunsigned __int128 rotrti3(unsigned __int128 x, unsigned int i) {\n  return (x >> i) | (x << (128-i));\n}\n\nproduces:\n\nrotrti3:\n        movq    %rsi, %r8\n        movq    %rdi, %r9\n        movl    %edx, %ecx\n        movq    %rdi, %rsi\n        movq    %r9, %rax\n        movq    %r8, %rdx\n        movq    %r8, %rdi\n        shrdq   %r8, %rax\n        shrq    %cl, %rdx\n        xorl    %r8d, %r8d\n        testb   $64, %cl\n        cmovne  %rdx, %rax\n        cmovne  %r8, %rdx\n        negl    %ecx\n        andl    $127, %ecx\n        shldq   %r9, %rdi\n        salq    %cl, %rsi\n        xorl    %r9d, %r9d\n        testb   $64, %cl\n        cmovne  %rsi, %rdi\n        cmovne  %r9, %rsi\n        orq     %rdi, %rdx\n        orq     %rsi, %rax\n        ret\n\nwith this patch, GCC will now generate the much nicer:\nrotrti3:\n        movl    %edx, %ecx\n        movq    %rdi, %rdx\n        shrdq   %rsi, %rdx\n        shrdq   %rdi, %rsi\n        andl    $64, %ecx\n        movq    %rdx, %rax\n        cmove   %rsi, %rdx\n        cmovne  %rsi, %rax\n        ret\n\nEven I wasn't expecting the optimizer's choice of the final three\ninstructions; a thing of beauty.  For rotations larger than 64,\nthe lowpart and the highpart (%rax and %rdx) are transposed, and\nit would be nice to have a conditional swap/exchange.  The inspired\nsolution the compiler comes up with is to store/duplicate the same\nvalue in both %rax/%rdx, and then use complementary conditional moves\nto either update the lowpart or highpart, which cleverly avoids the\npotential decode-stage pipeline stall (on some microarchitectures)\nfrom having multiple instructions conditional on the same condition.\nSee X86_TUNE_ONE_IF_CONV_INSN, and notice there are two such stalls\nin the original expansion of rot[rl]ti3.\n\n2021-11-02  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (<any_rotate>ti3): Provide expansion for\n\trotations by non-constant amounts.", "tree": {"sha": "2831f9357c817abdde9cb326acfd2a1a0c0f3499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2831f9357c817abdde9cb326acfd2a1a0c0f3499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a83259f837e5cbd39467a3faf954b51d9d13664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a83259f837e5cbd39467a3faf954b51d9d13664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a83259f837e5cbd39467a3faf954b51d9d13664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a83259f837e5cbd39467a3faf954b51d9d13664/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f0873d1e595dc2e5db738550e6e2b0e2953d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f0873d1e595dc2e5db738550e6e2b0e2953d84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f0873d1e595dc2e5db738550e6e2b0e2953d84"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "6eb9de81921edf3c02e844ef5562b91f43408978", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a83259f837e5cbd39467a3faf954b51d9d13664/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a83259f837e5cbd39467a3faf954b51d9d13664/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2a83259f837e5cbd39467a3faf954b51d9d13664", "patch": "@@ -12589,8 +12589,24 @@\n     emit_insn (gen_ix86_<insn>ti3_doubleword\n \t\t(operands[0], operands[1], operands[2]));\n   else\n-    FAIL;\n-\n+    {\n+      rtx amount = force_reg (QImode, operands[2]);\n+      rtx src_lo = gen_lowpart (DImode, operands[1]);\n+      rtx src_hi = gen_highpart (DImode, operands[1]);\n+      rtx tmp_lo = gen_reg_rtx (DImode);\n+      rtx tmp_hi = gen_reg_rtx (DImode);\n+      emit_move_insn (tmp_lo, src_lo);\n+      emit_move_insn (tmp_hi, src_hi);\n+      rtx (*shiftd) (rtx, rtx, rtx)\n+\t    = (<CODE> == ROTATE) ? gen_x86_64_shld : gen_x86_64_shrd;\n+      emit_insn (shiftd (tmp_lo, src_hi, amount));\n+      emit_insn (shiftd (tmp_hi, src_lo, amount));\n+      rtx dst_lo = gen_lowpart (DImode, operands[0]);\n+      rtx dst_hi = gen_highpart (DImode, operands[0]);\n+      emit_move_insn (dst_lo, tmp_lo);\n+      emit_move_insn (dst_hi, tmp_hi);\n+      emit_insn (gen_x86_shiftdi_adj_1 (dst_lo, dst_hi, amount, tmp_lo));\n+    }\n   DONE;\n })\n "}]}