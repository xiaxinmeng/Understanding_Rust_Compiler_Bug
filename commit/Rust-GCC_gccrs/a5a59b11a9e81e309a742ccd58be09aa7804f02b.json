{"sha": "a5a59b11a9e81e309a742ccd58be09aa7804f02b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhNTliMTFhOWU4MWUzMDlhNzQyY2NkNThiZTA5YWE3ODA0ZjAyYg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-03-13T17:35:15Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-03-13T17:35:15Z"}, "message": "Cleanup: remove FIXMEs, add new function.\n\n2010-03-10  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (gcc_type_for_iv_of_clast_loop): Remove\n\tforward declaration.\n\t* graphite-sese-to-poly.c (reduction_phi_p): Remove FIXME comment.\n\t(add_upper_bounds_from_estimated_nit): New.\n\t(build_loop_iteration_domains): Use it.\n\nFrom-SVN: r157436", "tree": {"sha": "4d26361c8833755d0daa38142fbfc67001d6012d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d26361c8833755d0daa38142fbfc67001d6012d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a59b11a9e81e309a742ccd58be09aa7804f02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a59b11a9e81e309a742ccd58be09aa7804f02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a59b11a9e81e309a742ccd58be09aa7804f02b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a59b11a9e81e309a742ccd58be09aa7804f02b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d19891386c3d0a4626b6c08a4bcc7dd9f56cfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d19891386c3d0a4626b6c08a4bcc7dd9f56cfb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d19891386c3d0a4626b6c08a4bcc7dd9f56cfb5"}], "stats": {"total": 139, "additions": 78, "deletions": 61}, "files": [{"sha": "0ca526cd17d41daf872b0f21b833341a9c17b85a", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a59b11a9e81e309a742ccd58be09aa7804f02b/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a59b11a9e81e309a742ccd58be09aa7804f02b/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=a5a59b11a9e81e309a742ccd58be09aa7804f02b", "patch": "@@ -1,3 +1,11 @@\n+2010-03-10  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (gcc_type_for_iv_of_clast_loop): Remove\n+\tforward declaration.\n+\t* graphite-sese-to-poly.c (reduction_phi_p): Remove FIXME comment.\n+\t(add_upper_bounds_from_estimated_nit): New.\n+\t(build_loop_iteration_domains): Use it.\n+\n 2010-03-09  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* doc/invoke.texi (PARAM_LOOP_BLOCK_TILE_SIZE): Document."}, {"sha": "377ca8beeaabd0b247eedffa86e4383c89384ea7", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a59b11a9e81e309a742ccd58be09aa7804f02b/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a59b11a9e81e309a742ccd58be09aa7804f02b/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=a5a59b11a9e81e309a742ccd58be09aa7804f02b", "patch": "@@ -823,9 +823,6 @@ translate_clast_user (sese region, struct clast_user_stmt *stmt, edge next_e,\n   return next_e;\n }\n \n-static tree gcc_type_for_iv_of_clast_loop (struct clast_for *);\n-\n-\n /* Creates a new if region protecting the loop to be executed, if the execution\n    count is zero (lb > ub).  */\n static edge"}, {"sha": "28ed07c99985396c46500c726dae7fac12e576bb", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 70, "deletions": 58, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a59b11a9e81e309a742ccd58be09aa7804f02b/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a59b11a9e81e309a742ccd58be09aa7804f02b/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=a5a59b11a9e81e309a742ccd58be09aa7804f02b", "patch": "@@ -180,7 +180,7 @@ reduction_phi_p (sese region, gimple_stmt_iterator *psi)\n \n   if (simple_copy_phi_p (phi))\n     {\n-      /* FIXME: PRE introduces phi nodes like these, for an example,\n+      /* PRE introduces phi nodes like these, for an example,\n \t see id-5.f in the fortran graphite testsuite:\n \n \t # prephitmp.85_265 = PHI <prephitmp.85_258(33), prephitmp.85_265(18)>\n@@ -1038,6 +1038,74 @@ gbb_from_bb (basic_block bb)\n   return (gimple_bb_p) bb->aux;\n }\n \n+/* Insert in the SCOP context constraints from the estimation of the\n+   number of iterations.  UB_EXPR is a linear expression describing\n+   the number of iterations in a loop.  This expression is bounded by\n+   the estimation NIT.  */\n+\n+static void\n+add_upper_bounds_from_estimated_nit (scop_p scop, double_int nit,\n+\t\t\t\t     ppl_dimension_type dim,\n+\t\t\t\t     ppl_Linear_Expression_t ub_expr)\n+{\n+  Value val;\n+  ppl_Linear_Expression_t nb_iters_le;\n+  ppl_Polyhedron_t pol;\n+  ppl_Coefficient_t coef;\n+  ppl_Constraint_t ub;\n+\n+  ppl_new_Linear_Expression_with_dimension (&ub_expr, dim);\n+  ppl_new_C_Polyhedron_from_space_dimension (&pol, dim, 0);\n+  ppl_new_Linear_Expression_from_Linear_Expression (&nb_iters_le,\n+\t\t\t\t\t\t    ub_expr);\n+\n+  /* Construct the negated number of last iteration in VAL.  */\n+  value_init (val);\n+  mpz_set_double_int (val, nit, false);\n+  value_sub_int (val, val, 1);\n+  value_oppose (val, val);\n+\n+  /* NB_ITERS_LE holds the number of last iteration in\n+     parametrical form.  Subtract estimated number of last\n+     iteration and assert that result is not positive.  */\n+  ppl_new_Coefficient_from_mpz_t (&coef, val);\n+  ppl_Linear_Expression_add_to_inhomogeneous (nb_iters_le, coef);\n+  ppl_delete_Coefficient (coef);\n+  ppl_new_Constraint (&ub, nb_iters_le,\n+\t\t      PPL_CONSTRAINT_TYPE_LESS_OR_EQUAL);\n+  ppl_Polyhedron_add_constraint (pol, ub);\n+\n+  /* Remove all but last GDIM dimensions from POL to obtain\n+     only the constraints on the parameters.  */\n+  {\n+    graphite_dim_t gdim = scop_nb_params (scop);\n+    ppl_dimension_type *dims = XNEWVEC (ppl_dimension_type, dim - gdim);\n+    graphite_dim_t i;\n+\n+    for (i = 0; i < dim - gdim; i++)\n+      dims[i] = i;\n+\n+    ppl_Polyhedron_remove_space_dimensions (pol, dims, dim - gdim);\n+    XDELETEVEC (dims);\n+  }\n+\n+  /* Add the constraints on the parameters to the SCoP context.  */\n+  {\n+    ppl_Pointset_Powerset_C_Polyhedron_t constraints_ps;\n+\n+    ppl_new_Pointset_Powerset_C_Polyhedron_from_C_Polyhedron\n+      (&constraints_ps, pol);\n+    ppl_Pointset_Powerset_C_Polyhedron_intersection_assign\n+      (SCOP_CONTEXT (scop), constraints_ps);\n+    ppl_delete_Pointset_Powerset_C_Polyhedron (constraints_ps);\n+  }\n+\n+  ppl_delete_Polyhedron (pol);\n+  ppl_delete_Linear_Expression (nb_iters_le);\n+  ppl_delete_Constraint (ub);\n+  value_clear (val);\n+}\n+\n /* Builds the constraint polyhedra for LOOP in SCOP.  OUTER_PH gives\n    the constraints for the surrounding loops.  */\n \n@@ -1113,64 +1181,8 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n       scan_tree_for_params (SCOP_REGION (scop), nb_iters, ub_expr, one);\n       value_clear (one);\n \n-      /* N <= estimated_nb_iters\n-\n-\t FIXME: This is a workaround that should go away once we will\n-\t have the PIP algorithm.  */\n       if (estimated_loop_iterations (loop, true, &nit))\n-\t{\n-\t  Value val;\n-\t  ppl_Linear_Expression_t nb_iters_le;\n-\t  ppl_Polyhedron_t pol;\n-\t  graphite_dim_t n = scop_nb_params (scop);\n-\t  ppl_Coefficient_t coef;\n-\n-\t  ppl_new_C_Polyhedron_from_space_dimension (&pol, dim, 0);\n-\t  ppl_new_Linear_Expression_from_Linear_Expression (&nb_iters_le,\n-\t\t\t\t\t\t\t    ub_expr);\n-\n-\t  /* Construct the negated number of last iteration in VAL.  */\n-\t  value_init (val);\n-\t  mpz_set_double_int (val, nit, false);\n-\t  value_sub_int (val, val, 1);\n-\t  value_oppose (val, val);\n-\n-\t  /* NB_ITERS_LE holds number of last iteration in parametrical form.\n-\t  Subtract estimated number of last iteration and assert that result\n-\t  is not positive.  */\n-\t  ppl_new_Coefficient_from_mpz_t (&coef, val);\n-\t  ppl_Linear_Expression_add_to_inhomogeneous (nb_iters_le, coef);\n-\t  ppl_delete_Coefficient (coef);\n-\t  ppl_new_Constraint (&ub, nb_iters_le,\n-\t\t\t      PPL_CONSTRAINT_TYPE_LESS_OR_EQUAL);\n-\t  ppl_Polyhedron_add_constraint (pol, ub);\n-\n-\t  /* Remove all but last N dimensions from POL to obtain constraints\n-\t     on parameters.  */\n-\t    {\n-\t      ppl_dimension_type *dims = XNEWVEC (ppl_dimension_type, dim - n);\n-\t      graphite_dim_t i;\n-\t      for (i = 0; i < dim - n; i++)\n-\t\tdims[i] = i;\n-\t      ppl_Polyhedron_remove_space_dimensions (pol, dims, dim - n);\n-\t      XDELETEVEC (dims);\n-\t    }\n-\n-\t  /* Add constraints on parameters to SCoP context.  */\n-\t    {\n-\t      ppl_Pointset_Powerset_C_Polyhedron_t constraints_ps;\n-\t      ppl_new_Pointset_Powerset_C_Polyhedron_from_C_Polyhedron\n-\t       (&constraints_ps, pol);\n-\t      ppl_Pointset_Powerset_C_Polyhedron_intersection_assign\n-\t       (SCOP_CONTEXT (scop), constraints_ps);\n-\t      ppl_delete_Pointset_Powerset_C_Polyhedron (constraints_ps);\n-\t    }\n-\n-\t  ppl_delete_Polyhedron (pol);\n-\t  ppl_delete_Linear_Expression (nb_iters_le);\n-\t  ppl_delete_Constraint (ub);\n-\t  value_clear (val);\n-\t}\n+\tadd_upper_bounds_from_estimated_nit (scop, nit, dim, ub_expr);\n \n       /* loop_i <= expr_nb_iters */\n       ppl_set_coef (ub_expr, nb, -1);"}]}