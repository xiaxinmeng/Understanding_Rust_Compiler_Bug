{"sha": "ca261cb478a90a849cdb96673439a7c9e5fca50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EyNjFjYjQ3OGE5MGE4NDljZGI5NjY3MzQzOWE3YzllNWZjYTUwYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-02-25T20:48:42Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-02-25T20:48:42Z"}, "message": "cppexp.c (left_shift, [...]): Replace uses of long/HOST_BITS_PER_LONG with...\n\n        * cppexp.c (left_shift, right_shift, parse_charconst, COMPARE,\n        cpp_parse_expr): Replace uses of long/HOST_BITS_PER_LONG with\n        HOST_WIDEST_INT/HOST_BITS_PER_WIDEST_INT.\n\nFrom-SVN: r25447", "tree": {"sha": "6b89a6f64784f31da85afaf75ca805921218e3a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b89a6f64784f31da85afaf75ca805921218e3a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca261cb478a90a849cdb96673439a7c9e5fca50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca261cb478a90a849cdb96673439a7c9e5fca50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca261cb478a90a849cdb96673439a7c9e5fca50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca261cb478a90a849cdb96673439a7c9e5fca50c/comments", "author": null, "committer": null, "parents": [{"sha": "e915b770d9eca0fdfd5dd363daf70be12e543579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e915b770d9eca0fdfd5dd363daf70be12e543579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e915b770d9eca0fdfd5dd363daf70be12e543579"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "9a6ef2c77c9ceb0f1fef0a9d0aeb7b4235bb4f41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca261cb478a90a849cdb96673439a7c9e5fca50c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca261cb478a90a849cdb96673439a7c9e5fca50c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca261cb478a90a849cdb96673439a7c9e5fca50c", "patch": "@@ -1,5 +1,10 @@\n Thu Feb 25 23:33:06 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* cppexp.c (left_shift, right_shift, parse_charconst, COMPARE,\n+\tcpp_parse_expr): Replace uses of long/HOST_BITS_PER_LONG with\n+\tHOST_WIDEST_INT/HOST_BITS_PER_WIDEST_INT.\n+\n+\n \t* Makefile.in (cppmain.o, cpplib.o, cpphash.o, cppalloc.o,\n  \tcpperror.o, cppexp.o, cppfiles.o, cppinit.o, fix-header.o,\n  \tscan-decls.o): Don't depend on machmode.h."}, {"sha": "8b59630af03639f7729577221a3131728bd695ac", "filename": "gcc/cppexp.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca261cb478a90a849cdb96673439a7c9e5fca50c/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca261cb478a90a849cdb96673439a7c9e5fca50c/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=ca261cb478a90a849cdb96673439a7c9e5fca50c", "patch": "@@ -77,8 +77,8 @@ Written by Per Bothner 1994.  */\n #define possible_sum_sign(a, b, sum) ((((a) ^ (b)) | ~ ((a) ^ (sum))) < 0)\n \n static void integer_overflow PARAMS ((cpp_reader *));\n-static long left_shift PARAMS ((cpp_reader *, long, int, unsigned long));\n-static long right_shift PARAMS ((cpp_reader *, long, int, unsigned long));\n+static HOST_WIDEST_INT left_shift PARAMS ((cpp_reader *, HOST_WIDEST_INT, int, unsigned HOST_WIDEST_INT));\n+static HOST_WIDEST_INT right_shift PARAMS ((cpp_reader *, HOST_WIDEST_INT, int, unsigned HOST_WIDEST_INT));\n \n #define ERROR 299\n #define OROR 300\n@@ -330,11 +330,11 @@ parse_charconst (pfile, start, end)\n   if (cpp_lookup (pfile, (U_CHAR *)\"__CHAR_UNSIGNED__\",\n \t\t  sizeof (\"__CHAR_UNSIGNED__\")-1, -1)\n       || ((result >> (num_bits - 1)) & 1) == 0)\n-    op.value = result & ((unsigned long) ~0\n-\t\t\t >> (HOST_BITS_PER_LONG - num_bits));\n+    op.value = result & ((unsigned HOST_WIDEST_INT) ~0\n+\t\t\t >> (HOST_BITS_PER_WIDEST_INT - num_bits));\n   else\n-    op.value = result | ~((unsigned long) ~0\n-\t\t\t  >> (HOST_BITS_PER_LONG - num_bits));\n+    op.value = result | ~((unsigned HOST_WIDEST_INT) ~0\n+\t\t\t  >> (HOST_BITS_PER_WIDEST_INT - num_bits));\n \n   /* This is always a signed type.  */\n   op.unsignedp = 0;\n@@ -620,41 +620,41 @@ integer_overflow (pfile)\n     cpp_pedwarn (pfile, \"integer overflow in preprocessor expression\");\n }\n \n-static long\n+static HOST_WIDEST_INT\n left_shift (pfile, a, unsignedp, b)\n      cpp_reader *pfile;\n-     long a;\n+     HOST_WIDEST_INT a;\n      int unsignedp;\n-     unsigned long b;\n+     unsigned HOST_WIDEST_INT b;\n {\n-  if (b >= HOST_BITS_PER_LONG)\n+  if (b >= HOST_BITS_PER_WIDEST_INT)\n     {\n       if (! unsignedp && a != 0)\n \tinteger_overflow (pfile);\n       return 0;\n     }\n   else if (unsignedp)\n-    return (unsigned long) a << b;\n+    return (unsigned HOST_WIDEST_INT) a << b;\n   else\n     {\n-      long l = a << b;\n+      HOST_WIDEST_INT l = a << b;\n       if (l >> b != a)\n \tinteger_overflow (pfile);\n       return l;\n     }\n }\n \n-static long\n+static HOST_WIDEST_INT\n right_shift (pfile, a, unsignedp, b)\n      cpp_reader *pfile ATTRIBUTE_UNUSED;\n-     long a;\n+     HOST_WIDEST_INT a;\n      int unsignedp;\n-     unsigned long b;\n+     unsigned HOST_WIDEST_INT b;\n {\n-  if (b >= HOST_BITS_PER_LONG)\n-    return unsignedp ? 0 : a >> (HOST_BITS_PER_LONG - 1);\n+  if (b >= HOST_BITS_PER_WIDEST_INT)\n+    return unsignedp ? 0 : a >> (HOST_BITS_PER_WIDEST_INT - 1);\n   else if (unsignedp)\n-    return (unsigned long) a >> b;\n+    return (unsigned HOST_WIDEST_INT) a >> b;\n   else\n     return a >> b;\n }\n@@ -679,7 +679,7 @@ right_shift (pfile, a, unsignedp, b)\n #define COMPARE(OP) \\\n   top->unsignedp = 0;\\\n   top->value = (unsigned1 || unsigned2) \\\n-  ? (unsigned long) v1 OP (unsigned long) v2 : (v1 OP v2)\n+  ? (unsigned HOST_WIDEST_INT) v1 OP (unsigned HOST_WIDEST_INT) v2 : (v1 OP v2)\n \n /* Parse and evaluate a C expression, reading from PFILE.\n    Returns the value of the expression.  */\n@@ -789,7 +789,7 @@ cpp_parse_expr (pfile)\n       /* Push an operator, and check if we can reduce now.  */\n       while (top->rprio > lprio)\n \t{\n-\t  long v1 = top[-1].value, v2 = top[0].value;\n+\t  HOST_WIDEST_INT v1 = top[-1].value, v2 = top[0].value;\n \t  int unsigned1 = top[-1].unsignedp, unsigned2 = top[0].unsignedp;\n \t  top--;\n \t  if ((top[1].flags & LEFT_OPERAND_REQUIRED)\n@@ -844,7 +844,7 @@ cpp_parse_expr (pfile)\n \t    case '*':\n \t      top->unsignedp = unsigned1 || unsigned2;\n \t      if (top->unsignedp)\n-\t\ttop->value = (unsigned long) v1 * v2;\n+\t\ttop->value = (unsigned HOST_WIDEST_INT) v1 * v2;\n \t      else if (!skip_evaluation)\n \t\t{\n \t\t  top->value = v1 * v2;\n@@ -864,7 +864,7 @@ cpp_parse_expr (pfile)\n \t\t}\n \t      top->unsignedp = unsigned1 || unsigned2;\n \t      if (top->unsignedp)\n-\t\ttop->value = (unsigned long) v1 / v2;\n+\t\ttop->value = (unsigned HOST_WIDEST_INT) v1 / v2;\n \t      else\n \t\t{\n \t\t  top->value = v1 / v2;\n@@ -882,7 +882,7 @@ cpp_parse_expr (pfile)\n \t\t}\n \t      top->unsignedp = unsigned1 || unsigned2;\n \t      if (top->unsignedp)\n-\t\ttop->value = (unsigned long) v1 % v2;\n+\t\ttop->value = (unsigned HOST_WIDEST_INT) v1 % v2;\n \t      else\n \t\ttop->value = v1 % v2;\n \t      break;"}]}