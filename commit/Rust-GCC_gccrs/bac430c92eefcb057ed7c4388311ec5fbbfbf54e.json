{"sha": "bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFjNDMwYzkyZWVmY2IwNTdlZDdjNDM4ODMxMWVjNWZiYmZiZjU0ZQ==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-11-10T10:14:24Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-11-10T10:14:24Z"}, "message": "re PR tree-optimization/51058 (ICE: gimple check: expected gimple_assign(error_mark), have gimple_call() in gimple_assign_rhs_code, at gimple.h:1992)\n\n\n        PR tree-optimization/51058\n        * tree-vect-slp.c (vect_get_constant_vectors): Handle CALL_EXPR.\n\nFrom-SVN: r181251", "tree": {"sha": "803ae53e22e3efebfd1f5ab74c65dd3234c49002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/803ae53e22e3efebfd1f5ab74c65dd3234c49002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/comments", "author": null, "committer": null, "parents": [{"sha": "78048b1c66c31b87770b8a29fa44fc291213fd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78048b1c66c31b87770b8a29fa44fc291213fd9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78048b1c66c31b87770b8a29fa44fc291213fd9b"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "380779b5d106073d8036e784893f38d2052f9cac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "patch": "@@ -1,3 +1,8 @@\n+2011-11-10  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/51058\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Handle CALL_EXPR.\n+\n 2011-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/51000"}, {"sha": "2d7d99b431f80bd02b4f9117eef384bdb19b318b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "patch": "@@ -1,3 +1,8 @@\n+2011-11-10  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/51058\n+\t* gfortran.dg/vect/pr51058.f90: New test.\n+\n 2011-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/51000"}, {"sha": "abee4c8af993749ddb6a0a6364361070fa573b76", "filename": "gcc/testsuite/gfortran.dg/vect/pr51058.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51058.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51058.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr51058.f90?ref=bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+\n+      SUBROUTINE MLIST(MOLsp,PBCx,PBCy,PBCz, X0)\n+      IMPLICIT NONE\n+      INTEGER, PARAMETER :: NM=16384\n+      INTEGER :: MOLsp, i\n+      REAL :: PBCx, PBCy, PBCz, boxjmp, HALf=1./2.\n+      REAL :: X0(2,-2:NM)\n+\n+         DO i = 1 , MOLsp\n+            boxjmp = PBCx*INT(X0(1,i)+SIGN(HALf,X0(1,i)))\n+            X0(1,i) = X0(1,i) - boxjmp\n+            boxjmp = PBCy*INT(X0(2,i)+SIGN(HALf,X0(2,i)))\n+            X0(2,i) = X0(2,i) - boxjmp\n+         ENDDO\n+      END\n+\n+! { dg-final { cleanup-tree-dump \"vect\" } }\n+"}, {"sha": "7ceb6fe8734f1008006af0416caf8f47d17491f1", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac430c92eefcb057ed7c4388311ec5fbbfbf54e/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=bac430c92eefcb057ed7c4388311ec5fbbfbf54e", "patch": "@@ -2191,7 +2191,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n   VEC (tree, heap) *voprnds = VEC_alloc (tree, heap, number_of_vectors);\n   bool constant_p, is_store;\n   tree neutral_op = NULL;\n-  enum tree_code code = gimple_assign_rhs_code (stmt);\n+  enum tree_code code = gimple_expr_code (stmt);\n   gimple def_stmt;\n   struct loop *loop;\n \n@@ -2287,21 +2287,31 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n         {\n           if (is_store)\n             op = gimple_assign_rhs1 (stmt);\n-          else if (gimple_assign_rhs_code (stmt) != COND_EXPR)\n-            op = gimple_op (stmt, op_num + 1);\n-\t  else\n+          else\n \t    {\n-\t      if (op_num == 0 || op_num == 1)\n-\t\t{\n-\t\t  tree cond = gimple_assign_rhs1 (stmt);\n-\t\t  op = TREE_OPERAND (cond, op_num);\n-\t\t}\n-\t      else\n+\t      switch (code)\n \t\t{\n-\t\t  if (op_num == 2)\n-\t\t    op = gimple_assign_rhs2 (stmt);\n-\t\t  else\n-\t\t    op = gimple_assign_rhs3 (stmt);\n+\t\t  case COND_EXPR:\n+\t\t    if (op_num == 0 || op_num == 1)\n+\t\t      {\n+\t\t\ttree cond = gimple_assign_rhs1 (stmt);\n+\t\t\top = TREE_OPERAND (cond, op_num);\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\tif (op_num == 2)\n+\t\t\t  op = gimple_assign_rhs2 (stmt);\n+\t\t\telse\n+\t\t\t  op = gimple_assign_rhs3 (stmt);\n+\t\t      }\n+\t\t    break;\n+\n+\t\t  case CALL_EXPR:\n+\t\t    op = gimple_call_arg (stmt, op_num);\n+\t\t    break;\n+\n+\t\t  default:\n+\t\t    op = gimple_op (stmt, op_num + 1);\n \t\t}\n \t    }\n "}]}