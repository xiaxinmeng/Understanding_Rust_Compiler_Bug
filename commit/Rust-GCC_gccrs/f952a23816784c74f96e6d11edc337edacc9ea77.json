{"sha": "f952a23816784c74f96e6d11edc337edacc9ea77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1MmEyMzgxNjc4NGM3NGY5NmU2ZDExZWRjMzM3ZWRhY2M5ZWE3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@sunsite.ms.mff.cuni.cz", "date": "1998-08-26T06:19:46Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-08-26T06:19:46Z"}, "message": "sparc.c (sparc_override_options): If not TARGET_FPU, turn off TARGET_VIS.\n\n\t* config/sparc/sparc.c (sparc_override_options): If not\n\tTARGET_FPU, turn off TARGET_VIS.\n\t* config/sparc/sparc.h (TARGET_SWITCHES): Add no-vis.\n\t(LEGITIMATE_CONSTANT_P): Allow SF/DF mode zero when TARGET_VIS.\n\t* config/sparc/sparc.md (movsi_insn): Use fzeros not fzero.\n\t(movdi_insn_sp64): Add VIS fzero alternative.\n\t(clear_sf, clear_df): New VIS patterns.\n\t(movsf, movdf expanders): Allow fp_zero_operand flat out when\n\tTARGET_VIS.\n\t(one_cmpldi2_sp64): Provide new fnot1 VIS alternative.\n\nFrom-SVN: r21996", "tree": {"sha": "1bdede9e6240bae79f92d310f6cb0d0fcf909dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bdede9e6240bae79f92d310f6cb0d0fcf909dcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f952a23816784c74f96e6d11edc337edacc9ea77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f952a23816784c74f96e6d11edc337edacc9ea77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f952a23816784c74f96e6d11edc337edacc9ea77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f952a23816784c74f96e6d11edc337edacc9ea77/comments", "author": null, "committer": null, "parents": [{"sha": "04069e5c0cdb53970462cf1d6f0786c6278aa96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04069e5c0cdb53970462cf1d6f0786c6278aa96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04069e5c0cdb53970462cf1d6f0786c6278aa96d"}], "stats": {"total": 100, "additions": 86, "deletions": 14}, "files": [{"sha": "e36c5ccc90646c8a1e3033fd8ba796fc97237bef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f952a23816784c74f96e6d11edc337edacc9ea77", "patch": "@@ -1,3 +1,16 @@\n+Wed Aug 26 05:09:27 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n+\n+\t* config/sparc/sparc.c (sparc_override_options): If not\n+\tTARGET_FPU, turn off TARGET_VIS.\n+\t* config/sparc/sparc.h (TARGET_SWITCHES): Add no-vis.\n+\t(LEGITIMATE_CONSTANT_P): Allow SF/DF mode zero when TARGET_VIS.\n+\t* config/sparc/sparc.md (movsi_insn): Use fzeros not fzero.\n+\t(movdi_insn_sp64): Add VIS fzero alternative.\n+\t(clear_sf, clear_df): New VIS patterns.\n+\t(movsf, movdf expanders): Allow fp_zero_operand flat out when\n+\tTARGET_VIS.\n+\t(one_cmpldi2_sp64): Provide new fnot1 VIS alternative.\n+\t\n Tue Aug 25 10:57:41 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* loop.c (n_times_set, n_times_used, may_not_optimize,"}, {"sha": "3f537d551b5b4248c82b6b12cc09a76701f62618", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f952a23816784c74f96e6d11edc337edacc9ea77", "patch": "@@ -287,6 +287,10 @@ sparc_override_options ()\n   /* Don't use stack biasing in 32 bit mode.  */\n   if (TARGET_ARCH32)\n     target_flags &= ~MASK_STACK_BIAS;\n+    \n+  /* Don't allow -mvis if FPU is disabled.  */\n+  if (! TARGET_FPU)\n+    target_flags &= ~MASK_VIS;\n \n   /* Validate -malign-loops= value, or provide default.  */\n   if (sparc_align_loops_string)"}, {"sha": "8fcd8e6ea2e5341894dccf84ca12badca317c5db", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=f952a23816784c74f96e6d11edc337edacc9ea77", "patch": "@@ -501,6 +501,7 @@ extern int target_flags;\n     {\"v8plus\", MASK_V8PLUS},\t\t\\\n     {\"no-v8plus\", -MASK_V8PLUS},\t\\\n     {\"vis\", MASK_VIS},\t\t\t\\\n+    {\"no-vis\", -MASK_VIS},\t\t\\\n     /* ??? These are deprecated, coerced to -mcpu=.  Delete in 2.9.  */ \\\n     {\"cypress\", 0},\t\t\t\\\n     {\"sparclite\", 0},\t\t\t\\\n@@ -2266,10 +2267,13 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n #define LEGITIMATE_PIC_OPERAND_P(X)  (! pic_address_needs_scratch (X))\n \n /* Nonzero if the constant value X is a legitimate general operand.\n-   Anything can be made to work except floating point constants.  */\n+   Anything can be made to work except floating point constants.\n+   If TARGET_VIS, 0.0 can be made to work as well.  */\n \n-#define LEGITIMATE_CONSTANT_P(X) \\\n-  (GET_CODE (X) != CONST_DOUBLE || GET_MODE (X) == VOIDmode)\n+#define LEGITIMATE_CONSTANT_P(X) \t\t\t\t\t\\\n+  (GET_CODE (X) != CONST_DOUBLE || GET_MODE (X) == VOIDmode || \t\t\\\n+   (TARGET_VIS && (GET_MODE (X) == SFmode || GET_MODE (X) == DFmode) &&\t\\\n+    fp_zero_operand (X)))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class."}, {"sha": "130c819de7ccac3998428c7db16d6d2a6aa5ff50", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f952a23816784c74f96e6d11edc337edacc9ea77/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=f952a23816784c74f96e6d11edc337edacc9ea77", "patch": "@@ -2152,7 +2152,7 @@\n    ld\\\\t%1, %0\n    st\\\\t%r1, %0\n    st\\\\t%1, %0\n-   fzero\\\\t%0\"\n+   fzeros\\\\t%0\"\n   [(set_attr \"type\" \"move,fpmove,move,move,load,fpload,store,fpstore,fpmove\")\n    (set_attr \"length\" \"1\")])\n \n@@ -2369,8 +2369,8 @@\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*movdi_insn_sp64\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=r,r,r,r,m,?e,?e,?m\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,K,J,m,rJ,e,m,e\"))]\n+  [(set (match_operand:DI 0 \"general_operand\" \"=r,r,r,r,m,?e,?e,?m,b\")\n+        (match_operand:DI 1 \"input_operand\"   \"rI,K,J,m,rJ,e,m,e,J\"))]\n   \"TARGET_ARCH64 &&\n    (register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\"\n@@ -2382,8 +2382,9 @@\n    stx\\\\t%r1, %0\n    fmovd\\\\t%1, %0\n    ldd\\\\t%1, %0\n-   std\\\\t%1, %0\"\n-  [(set_attr \"type\" \"move,move,move,load,store,fpmove,fpload,fpstore\")\n+   std\\\\t%1, %0\n+   fzero\\\\t%0\"\n+  [(set_attr \"type\" \"move,move,move,load,store,fpmove,fpload,fpstore,fpmove\")\n    (set_attr \"length\" \"1\")])\n \n ;; ??? revisit this...\n@@ -2731,6 +2732,17 @@\n \f\n ;; Floating point move insns\n \n+(define_insn \"*clear_sf\"\n+  [(set (match_operand:SF 0 \"general_operand\" \"=f\")\n+        (match_operand:SF 1 \"\" \"\"))]\n+  \"TARGET_VIS\n+   && GET_CODE (operands[1]) == CONST_DOUBLE\n+   && GET_CODE (operands[0]) == REG\n+   && fp_zero_operand (operands[1])\"\n+  \"fzeros\\\\t%0\"\n+  [(set_attr \"type\" \"fpmove\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_insn \"*movsf_const_intreg\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=f,r\")\n         (match_operand:SF 1 \"\"                 \"m,F\"))]\n@@ -2809,6 +2821,11 @@\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n+      if (TARGET_VIS\n+          && GET_CODE (operands[1]) == CONST_DOUBLE\n+\t  && fp_zero_operand (operands[1]))\n+\tgoto movsf_is_ok;\n+\n       /* emit_group_store will send such bogosity to us when it is\n          not storing directly into memory.  So fix this up to avoid\n          crashes in output_constant_pool.  */\n@@ -2885,10 +2902,37 @@\n   [(set_attr \"type\" \"move,load,store\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"*movdf_const_intreg\"\n+(define_insn \"*clear_df\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=e\")\n+        (match_operand:DF 1 \"\" \"\"))]\n+  \"TARGET_VIS\n+   && GET_CODE (operands[1]) == CONST_DOUBLE\n+   && GET_CODE (operands[0]) == REG\n+   && fp_zero_operand (operands[1])\"\n+  \"fzero\\\\t%0\"\n+  [(set_attr \"type\" \"fpmove\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"*movdf_const_intreg_sp32\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=e,e,r\")\n         (match_operand:DF 1 \"\"                 \"T,o,F\"))]\n-  \"TARGET_FPU\n+  \"TARGET_FPU && ! TARGET_ARCH64\n+   && GET_CODE (operands[1]) == CONST_DOUBLE\n+   && GET_CODE (operands[0]) == REG\"\n+  \"*\n+{\n+  if (which_alternative == 0)\n+    return \\\"ldd\\\\t%1, %0\\\";\n+  else\n+    return \\\"#\\\";\n+}\"\n+  [(set_attr \"type\" \"move\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"*movdf_const_intreg_sp64\"\n+  [(set (match_operand:DF 0 \"general_operand\" \"=e,e,r\")\n+        (match_operand:DF 1 \"\"                 \"m,o,F\"))]\n+  \"TARGET_FPU && TARGET_ARCH64\n    && GET_CODE (operands[1]) == CONST_DOUBLE\n    && GET_CODE (operands[0]) == REG\"\n   \"*\n@@ -2951,6 +2995,11 @@\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n+      if (TARGET_VIS\n+          && GET_CODE (operands[1]) == CONST_DOUBLE\n+\t  && fp_zero_operand (operands[1]))\n+\tgoto movdf_is_ok;\n+\n       /* emit_group_store will send such bogosity to us when it is\n          not storing directly into memory.  So fix this up to avoid\n          crashes in output_constant_pool.  */\n@@ -6321,11 +6370,13 @@\n    operands[5] = gen_lowpart (SImode, operands[1]);\")\n \n (define_insn \"*one_cmpldi2_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n+\t(not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI,b\")))]\n   \"TARGET_ARCH64\"\n-  \"xnor\\\\t%%g0, %1, %0\"\n-  [(set_attr \"type\" \"unary\")\n+  \"@\n+   xnor\\\\t%%g0, %1, %0\n+   fnot1\\\\t%1, %0\"\n+  [(set_attr \"type\" \"unary,fp\")\n    (set_attr \"length\" \"1\")])\n \n (define_expand \"one_cmplsi2\""}]}