{"sha": "02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmYTYzY2RmN2EwMjBjYzQ3ZWIzM2YzZDAzMGZjNzdiYzI0YTA3YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-19T21:09:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-19T21:09:36Z"}, "message": "c-decl.c: Follow spelling conventions.\n\n\t* c-decl.c: Follow spelling conventions.\n\t* cppfiles.c: Likewise.\n\nFrom-SVN: r70578", "tree": {"sha": "bb68dcb42d0505b180935f97feb4e5e9db8ba075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb68dcb42d0505b180935f97feb4e5e9db8ba075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/comments", "author": null, "committer": null, "parents": [{"sha": "59e4e217ae04230110961dfa6e0d7905189e7edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4e217ae04230110961dfa6e0d7905189e7edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e4e217ae04230110961dfa6e0d7905189e7edc"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "b2a0ba10d1e7240d73e5cf5949a03e0a07357cd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "patch": "@@ -1,3 +1,8 @@\n+2003-08-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-decl.c: Follow spelling conventions.\n+\t* cppfiles.c: Likewise.\n+\n 2003-08-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-common.c: Fix comment formatting."}, {"sha": "33df3524fdec2ea66ce5a84de8ff424c601f8124", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "patch": "@@ -6764,7 +6764,7 @@ merge_translation_unit_decls (void)\n \t      tree old_decl = (tree) *slot;\n \n \t      /* If this is weak or common or whatever, suppress it\n-\t\t in favour of the other definition.  */\n+\t\t in favor of the other definition.  */\n \t      if (DECL_WEAK (decl))\n \t\tDECL_EXTERNAL (decl) = 1;\n \t      else if (DECL_WEAK (old_decl) && ! DECL_WEAK (decl))"}, {"sha": "c0aaa5cf0abaaf56b75649db9570ec6bf4882ca9", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02fa63cdf7a020cc47eb33f3d030fc77bc24a07a/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=02fa63cdf7a020cc47eb33f3d030fc77bc24a07a", "patch": "@@ -334,7 +334,7 @@ find_file_in_dir (cpp_reader *pfile, _cpp_file *file)\n    add the result to our cache.\n \n    If the file was not found in the filesystem, or there was an error\n-   opening it, then ERR_NO is non-zero and FD is -1.  If the file was\n+   opening it, then ERR_NO is nonzero and FD is -1.  If the file was\n    found, then ERR_NO is zero and FD could be -1 or an open file\n    descriptor.  FD can be -1 if the file was found in the cache and\n    had previously been closed.  To open it again pass the return value\n@@ -675,7 +675,7 @@ search_path_head (cpp_reader *pfile, const char *fname, int angle_brackets,\n }\n \n /* Strip the basename from the file's path.  It ends with a slash if\n-   of non-zero length.  Note that this procedure also works for\n+   of nonzero length.  Note that this procedure also works for\n    <stdin>, which is represented by the empty string.  */\n static const char *\n dir_name_of_file (_cpp_file *file)"}]}