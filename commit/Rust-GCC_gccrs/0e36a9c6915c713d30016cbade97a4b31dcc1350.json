{"sha": "0e36a9c6915c713d30016cbade97a4b31dcc1350", "node_id": "C_kwDOANBUbNoAKDBlMzZhOWM2OTE1YzcxM2QzMDAxNmNiYWRlOTdhNGIzMWRjYzEzNTA", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-10-20T18:55:19Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-10-27T18:41:54Z"}, "message": "x86: Replace ne:CCC/ne:CCO with UNSPEC_CC_NE in neg patterns\n\nIn i386.md, neg patterns which set MODE_CC register like\n\n(set (reg:CCC FLAGS_REG)\n     (ne:CCC (match_operand:SWI48 1 \"general_reg_operand\") (const_int 0)))\n\ncan lead to errors when operand 1 is a constant value.  If FLAGS_REG in\n\n(set (reg:CCC FLAGS_REG)\n     (ne:CCC (const_int 2) (const_int 0)))\n\nis set to 1, RTX simplifiers may simplify\n\n(set (reg:SI 93)\n     (neg:SI (ltu:SI (reg:CCC 17 flags) (const_int 0 [0]))))\n\nas\n\n(set (reg:SI 93)\n     (neg:SI (ltu:SI (const_int 1) (const_int 0 [0]))))\n\nwhich leads to incorrect results since LTU on MODE_CC register isn't the\nsame as \"unsigned less than\" in x86 backend.  To prevent RTL optimizers\nfrom setting MODE_CC register to a constant, use UNSPEC_CC_NE to replace\nne:CCC/ne:CCO when setting FLAGS_REG in neg patterns.\n\ngcc/\n\n\tPR target/107172\n\t* config/i386/i386.md (UNSPEC_CC_NE): New.\n\tReplace ne:CCC/ne:CCO with UNSPEC_CC_NE in neg patterns.\n\ngcc/testsuite/\n\n\tPR target/107172\n\t* gcc.target/i386/pr107172.c: New test.", "tree": {"sha": "19af9d463981225452ec3a82498371f9a269612b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19af9d463981225452ec3a82498371f9a269612b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e36a9c6915c713d30016cbade97a4b31dcc1350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e36a9c6915c713d30016cbade97a4b31dcc1350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e36a9c6915c713d30016cbade97a4b31dcc1350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e36a9c6915c713d30016cbade97a4b31dcc1350/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "aaa678e7314de2216e421e3d8d1378c435265bac", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e36a9c6915c713d30016cbade97a4b31dcc1350/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e36a9c6915c713d30016cbade97a4b31dcc1350/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0e36a9c6915c713d30016cbade97a4b31dcc1350", "patch": "@@ -113,6 +113,7 @@\n   UNSPEC_PEEPSIB\n   UNSPEC_INSN_FALSE_DEP\n   UNSPEC_SBB\n+  UNSPEC_CC_NE\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -11470,7 +11471,7 @@\n   \"&& reload_completed\"\n   [(parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_dup 1) (const_int 0)))\n+\t  (unspec:CCC [(match_dup 1) (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 0) (neg:DWIH (match_dup 1)))])\n    (parallel\n     [(set (match_dup 2)\n@@ -11499,7 +11500,8 @@\n \t(match_operand:SWI48 1 \"nonimmediate_gr_operand\"))\n    (parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_operand:SWI48 2 \"general_reg_operand\") (const_int 0)))\n+\t  (unspec:CCC [(match_operand:SWI48 2 \"general_reg_operand\")\n+\t\t       (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 2) (neg:SWI48 (match_dup 2)))])\n    (parallel\n     [(set (match_dup 0)\n@@ -11517,7 +11519,7 @@\n    && !reg_mentioned_p (operands[2], operands[1])\"\n   [(parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_dup 2) (const_int 0)))\n+\t  (unspec:CCC [(match_dup 2) (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 2) (neg:SWI48 (match_dup 2)))])\n    (parallel\n     [(set (match_dup 0)\n@@ -11543,7 +11545,8 @@\n      (clobber (reg:CC FLAGS_REG))])\n    (parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_operand:SWI48 1 \"general_reg_operand\") (const_int 0)))\n+\t  (unspec:CCC [(match_operand:SWI48 1 \"general_reg_operand\")\n+\t\t       (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 1) (neg:SWI48 (match_dup 1)))])\n    (parallel\n     [(set (match_dup 0)\n@@ -11559,7 +11562,7 @@\n   \"REGNO (operands[0]) != REGNO (operands[1])\"\n   [(parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_dup 1) (const_int 0)))\n+\t  (unspec:CCC [(match_dup 1) (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 1) (neg:SWI48 (match_dup 1)))])\n    (parallel\n     [(set (match_dup 0)\n@@ -11635,9 +11638,9 @@\n \n (define_insn \"*neg<mode>_ccc_1\"\n   [(set (reg:CCC FLAGS_REG)\n-\t(ne:CCC\n-\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n-\t  (const_int 0)))\n+\t(unspec:CCC\n+\t  [(match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t   (const_int 0)] UNSPEC_CC_NE))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(neg:SWI (match_dup 1)))]\n   \"\"\n@@ -11647,9 +11650,9 @@\n \n (define_insn \"*neg<mode>_ccc_2\"\n   [(set (reg:CCC FLAGS_REG)\n-\t(ne:CCC\n-\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n-\t  (const_int 0)))\n+\t(unspec:CCC\n+\t  [(match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t   (const_int 0)] UNSPEC_CC_NE))\n    (clobber (match_scratch:SWI 0 \"=<r>\"))]\n   \"\"\n   \"neg{<imodesuffix>}\\t%0\"\n@@ -11659,8 +11662,8 @@\n (define_expand \"x86_neg<mode>_ccc\"\n   [(parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_operand:SWI48 1 \"register_operand\")\n-\t\t  (const_int 0)))\n+\t  (unspec:CCC [(match_operand:SWI48 1 \"register_operand\")\n+\t\t       (const_int 0)] UNSPEC_CC_NE))\n      (set (match_operand:SWI48 0 \"register_operand\")\n \t  (neg:SWI48 (match_dup 1)))])])\n \n@@ -11686,8 +11689,9 @@\n ;; Negate with jump on overflow.\n (define_expand \"negv<mode>3\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n-\t\t   (ne:CCO (match_operand:SWI 1 \"register_operand\")\n-\t\t\t   (match_dup 3)))\n+\t\t   (unspec:CCO\n+\t\t     [(match_operand:SWI 1 \"register_operand\")\n+\t\t      (match_dup 3)] UNSPEC_CC_NE))\n \t      (set (match_operand:SWI 0 \"register_operand\")\n \t\t   (neg:SWI (match_dup 1)))])\n    (set (pc) (if_then_else\n@@ -11703,8 +11707,9 @@\n \n (define_insn \"*negv<mode>3\"\n   [(set (reg:CCO FLAGS_REG)\n-\t(ne:CCO (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n-\t\t(match_operand:SWI 2 \"const_int_operand\")))\n+\t(unspec:CCO [(match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:SWI 2 \"const_int_operand\")]\n+\t\t    UNSPEC_CC_NE))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(neg:SWI (match_dup 1)))]\n   \"ix86_unary_operator_ok (NEG, <MODE>mode, operands)\n@@ -11770,7 +11775,7 @@\n    \"&& 1\"\n   [(parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_dup 1) (const_int 0)))\n+\t  (unspec:CCC [(match_dup 1) (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 2) (neg:DWIH (match_dup 1)))])\n    (parallel\n     [(set (match_dup 5)\n@@ -11814,7 +11819,7 @@\n    \"&& 1\"\n   [(parallel\n     [(set (reg:CCC FLAGS_REG)\n-\t  (ne:CCC (match_dup 1) (const_int 0)))\n+\t  (unspec:CCC [(match_dup 1) (const_int 0)] UNSPEC_CC_NE))\n      (set (match_dup 2) (neg:DWIH (match_dup 1)))])\n    (parallel\n     [(set (match_dup 5)\n@@ -21456,7 +21461,7 @@\n \t    (const_int 0))))]\n   \"\"\n   [(set (reg:CCC FLAGS_REG)\n-\t(ne:CCC (match_dup 1) (const_int 0)))\n+\t(unspec:CCC [(match_dup 1) (const_int 0)] UNSPEC_CC_NE))\n    (set (match_dup 0)\n \t(neg:SWI (ltu:SWI (reg:CCC FLAGS_REG) (const_int 0))))])\n "}, {"sha": "d2c85f3f47ce20cc4e034ab79181da0fb6195bda", "filename": "gcc/testsuite/gcc.target/i386/pr107172.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e36a9c6915c713d30016cbade97a4b31dcc1350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e36a9c6915c713d30016cbade97a4b31dcc1350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107172.c?ref=0e36a9c6915c713d30016cbade97a4b31dcc1350", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -ftree-vrp\" } */\n+\n+int a, c, d;\n+int\n+main()\n+{\n+  long e = 1;\n+  int f = a = 1;\n+L1:\n+  if (a)\n+    a = 2;\n+  int h = e = ~e;\n+  c = -1;\n+  if (e >= a)\n+    goto L2;\n+  if (-1 > a)\n+    goto L1;\n+  if (a)\n+    f = -1;\n+L2:\n+  d = (-f + d) & h;\n+  if (d)\n+    __builtin_abort();\n+  return 0;\n+}"}]}