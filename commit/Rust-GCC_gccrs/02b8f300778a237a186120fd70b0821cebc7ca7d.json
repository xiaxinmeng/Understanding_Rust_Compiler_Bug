{"sha": "02b8f300778a237a186120fd70b0821cebc7ca7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiOGYzMDA3NzhhMjM3YTE4NjEyMGZkNzBiMDgyMWNlYmM3Y2E3ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-28T00:23:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-28T00:23:36Z"}, "message": "(simplify_relation_operation): We can compute the result of a comparison of...\n\n(simplify_relation_operation): We can compute the result of a\ncomparison of CONST_INTs no matter what mode the computation is to be\ndone in.\n\nFrom-SVN: r3372", "tree": {"sha": "8e8fb5c1205644b4fbea4eb25802d6a16c38c1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8fb5c1205644b4fbea4eb25802d6a16c38c1d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02b8f300778a237a186120fd70b0821cebc7ca7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b8f300778a237a186120fd70b0821cebc7ca7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b8f300778a237a186120fd70b0821cebc7ca7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b8f300778a237a186120fd70b0821cebc7ca7d/comments", "author": null, "committer": null, "parents": [{"sha": "c2615a67c76b0f94c16ab8c872a7132995ee3219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2615a67c76b0f94c16ab8c872a7132995ee3219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2615a67c76b0f94c16ab8c872a7132995ee3219"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "4249af65e3bd252e2f8ba0e18be018aa98748907", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b8f300778a237a186120fd70b0821cebc7ca7d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b8f300778a237a186120fd70b0821cebc7ca7d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=02b8f300778a237a186120fd70b0821cebc7ca7d", "patch": "@@ -4051,8 +4051,12 @@ simplify_relational_operation (code, mode, op0, op1)\n   if (GET_CODE (op0) == COMPARE && op1 == const0_rtx)\n     op1 = XEXP (op0, 1), op0 = XEXP (op0, 0);\n \n-  if (GET_CODE (op0) != CONST_INT || GET_CODE (op1) != CONST_INT\n-      || width > HOST_BITS_PER_WIDE_INT || width == 0)\n+  /* Unlike the arithmetic operations, we can do the comparison whether\n+     or not WIDTH is larger than HOST_BITS_PER_WIDE_INT because the\n+     CONST_INTs are to be understood as being infinite precision as\n+     is the comparison.  So there is no question of overflow.  */\n+\n+  if (GET_CODE (op0) != CONST_INT || GET_CODE (op1) != CONST_INT || width == 0)\n     {\n       /* Even if we can't compute a constant result,\n \t there are some cases worth simplifying.  */"}]}