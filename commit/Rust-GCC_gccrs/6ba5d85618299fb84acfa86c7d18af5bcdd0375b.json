{"sha": "6ba5d85618299fb84acfa86c7d18af5bcdd0375b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhNWQ4NTYxODI5OWZiODRhY2ZhODZjN2QxOGFmNWJjZGQwMzc1Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-31T16:14:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-31T16:14:08Z"}, "message": "i386.md (*movtf_internal): Avoid allocating general registers.\n\n\t* config/i386/i386.md (*movtf_internal): Avoid allocating general\n\tregisters.  Penalize F*r->o alternative to prevent partial memory\n\tstalls.  Slightly penalize *roF->*r alternative.  Generate SSE\n\tCONST_DOUBLE immediates when optimizing function for size.  Do not move\n\tCONST_DOUBLEs directly to memory for !TARGET_MEMORY_MISMATCH_STALL.\n\t(*movxf_internal): Slightly penalize Yx*roF->Yx*r alternative.\n\t(*movdf_internal): Slightly penalize Yd*roF->Yd*r alternative.\n\t(*movdf_internal_rex64): Slightly penalize rm->r, F->m and r->m\n\talternatives.\n\t(*movsf_internal): Slightly penalize rmF->r and Fr->m alternatives.\n\n\t(fp_register_operand splitters): Use fp_register_operand\n\tconstraint.  Do not use FP_REG_P in insn condition.\n\t(any_fp_register_operand splitters): Use any_fp_register_operand\n\tconstraint.  Do not use ANY_FP_REG_P in insn condition.\n\n\t* config/i386/i386.md (*pushxf_nointeger): Merge alternatives 1 and 2.\n\t(FP push_operand splitters): Merge {TF,XF,DF}mode splitters.\n\nFrom-SVN: r174489", "tree": {"sha": "b3a5027345c52e6b5a3f04b335a61ad4c29558ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a5027345c52e6b5a3f04b335a61ad4c29558ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba5d85618299fb84acfa86c7d18af5bcdd0375b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba5d85618299fb84acfa86c7d18af5bcdd0375b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba5d85618299fb84acfa86c7d18af5bcdd0375b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba5d85618299fb84acfa86c7d18af5bcdd0375b/comments", "author": null, "committer": null, "parents": [{"sha": "533c07c594cef102741325e09a6580094fa32cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533c07c594cef102741325e09a6580094fa32cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533c07c594cef102741325e09a6580094fa32cba"}], "stats": {"total": 160, "additions": 85, "deletions": 75}, "files": [{"sha": "f4346fb7ba7a2867b43c7acffb3a0ae69c42f4ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba5d85618299fb84acfa86c7d18af5bcdd0375b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba5d85618299fb84acfa86c7d18af5bcdd0375b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ba5d85618299fb84acfa86c7d18af5bcdd0375b", "patch": "@@ -1,3 +1,26 @@\n+2011-05-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*pushxf_nointeger): Merge alternatives 1 and 2.\n+\t(FP push_operand splitters): Merge {TF,XF,DF}mode splitters.\n+\n+2011-05-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movtf_internal): Avoid allocating general\n+\tregisters.  Penalize F*r->o alternative to prevent partial memory\n+\tstalls.  Slightly penalize *roF->*r alternative.  Generate SSE\n+\tCONST_DOUBLE immediates when optimizing function for size.  Do not move\n+\tCONST_DOUBLEs directly to memory for !TARGET_MEMORY_MISMATCH_STALL.\n+\t(*movxf_internal): Slightly penalize Yx*roF->Yx*r alternative.\n+\t(*movdf_internal): Slightly penalize Yd*roF->Yd*r alternative.\n+\t(*movdf_internal_rex64): Slightly penalize rm->r, F->m and r->m\n+\talternatives.\n+\t(*movsf_internal): Slightly penalize rmF->r and Fr->m alternatives.\n+\n+\t(fp_register_operand splitters): Use fp_register_operand\n+\tconstraint.  Do not use FP_REG_P in insn condition.\n+\t(any_fp_register_operand splitters): Use any_fp_register_operand\n+\tconstraint.  Do not use ANY_FP_REG_P in insn condition.\n+\n 2011-05-31  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (cgraph_inline_failed_t): Give enum a name\n@@ -39,7 +62,7 @@\n \n \tPR debug/49047\n \t* dwarf2out.c (gen_subprogram_die): Emit linkage name attribute\n-    \tfor concrete functions containing the code of cloned functions.\n+\tfor concrete functions containing the code of cloned functions.\n \n 2011-05-31  Richard Guenther  <rguenther@suse.de>\n \n@@ -57,8 +80,7 @@\n \t(tree_ssa_forward_propagate_single_use_vars): Rename to ...\n \t(ssa_forward_propagate_and_combine): ... this.  Re-structure\n \tto do a forward forward-propagation walk on BBs and a backward\n-\tstmt combining walk on BBs.  Consistently re-scan changed\n-\tstatements.\n+\tstmt combining walk on BBs.  Consistently re-scan changed statements.\n \t(pass_forwprop): Adjust.\n \n 2011-05-30  Ian Lance Taylor  <iant@google.com>\n@@ -78,12 +100,12 @@\n \tto prevent partial memory stalls.  Do not move CONST_DOUBLEs directly\n \tto memory for !TARGET_MEMORY_MISMATCH_STALL.\n \t(*movdf_internal_rex64): Do not penalize F->r alternative.\n-\t(*movdf_internal):  Penalize FYd*r->o alternative to prevent partial\n+\t(*movdf_internal): Penalize FYd*r->o alternative to prevent partial\n \tmemory stalls.  Generate SSE and x87 CONST_DOUBLE immediates only\n \twhen optimizing function for size.  Do not move CONST_DOUBLEs\n \tdirectly to memory for !TARGET_MEMORY_MISMATCH_STALL.\n-\t(FP move splitters): Merge {TF,XF,DF}mode move splitters.  Do not\n-\thandle SUBREGs.  Do not check for MEM_P operands in the insn condition,\n+\t(FP move splitters): Merge {TF,XF,DF}mode splitters.  Do not handle\n+\tSUBREGs.  Do not check for MEM_P operands in the insn condition,\n \tcheck for ANY_FP_REGNO_P instead.\n \t* config/i386/constraints.md (Yd): Enable GENERAL_REGS for\n \tTARGET_64BIT and for TARGET_INTEGER_DFMODE_MOVES when optimizing\n@@ -147,9 +169,8 @@\n 2011-05-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49210\n-\t* ipa-split.c (split_function): Care for the case where the\n-\tcall result is not trivially convertible to the result holding\n-\tvariable.\n+\t* ipa-split.c (split_function): Care for the case where the call\n+\tresult is not trivially convertible to the result holding variable.\n \n 2011-05-30  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "204a1e60fd6479d1c88db4920de5aba1af54d06b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 55, "deletions": 66, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba5d85618299fb84acfa86c7d18af5bcdd0375b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba5d85618299fb84acfa86c7d18af5bcdd0375b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6ba5d85618299fb84acfa86c7d18af5bcdd0375b", "patch": "@@ -2678,21 +2678,14 @@\n    (set_attr \"unit\" \"sse,*,*\")\n    (set_attr \"mode\" \"TF,SI,SI\")])\n \n+;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\" \"\")\n \t(match_operand:TF 1 \"sse_reg_operand\" \"\"))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -16)))\n    (set (mem:TF (reg:P SP_REG)) (match_dup 1))])\n \n-(define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(match_operand:TF 1 \"general_operand\" \"\"))]\n-  \"TARGET_SSE2 && reload_completed\n-   && !SSE_REG_P (operands[1])\"\n-  [(const_int 0)]\n-  \"ix86_split_long_move (operands); DONE;\")\n-\n (define_insn \"*pushxf\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,ro\"))]\n@@ -2712,17 +2705,18 @@\n ;; only once, but this ought to be handled elsewhere).\n \n (define_insn \"*pushxf_nointeger\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=X,X,X\")\n-\t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n+  [(set (match_operand:XF 0 \"push_operand\" \"=X,X\")\n+\t(match_operand:XF 1 \"general_no_elim_operand\" \"f,*rFo\"))]\n   \"optimize_function_for_size_p (cfun)\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387,*,*\")\n-   (set_attr \"mode\" \"XF,SI,SI\")])\n+   (set_attr \"unit\" \"i387,*\")\n+   (set_attr \"mode\" \"XF,SI\")])\n \n+;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(match_operand:XF 1 \"fp_register_operand\" \"\"))]\n@@ -2731,14 +2725,6 @@\n    (set (mem:XF (reg:P SP_REG)) (match_dup 1))]\n   \"operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\")\n \n-(define_split\n-  [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"reload_completed\n-   && !FP_REG_P (operands[1])\"\n-  [(const_int 0)]\n-  \"ix86_split_long_move (operands); DONE;\")\n-\n ;; Size of pushdf is 3 (for sub) + 2 (for fstp) + memory operand size.\n ;; Size of pushdf using integer instructions is 2+2*memory operand size\n ;; On the average, pushdf using integers can be still shorter.\n@@ -2763,14 +2749,6 @@\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -8)))\n    (set (mem:DF (reg:P SP_REG)) (match_dup 1))])\n \n-(define_split\n-  [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n-  \"reload_completed\n-   && !ANY_FP_REG_P (operands[1])\"\n-  [(const_int 0)]\n-  \"ix86_split_long_move (operands); DONE;\")\n-\n (define_insn \"*pushsf_rex64\"\n   [(set (match_operand:SF 0 \"push_operand\" \"=X,X,X\")\n \t(match_operand:SF 1 \"nonmemory_no_elim_operand\" \"f,rF,x\"))]\n@@ -2797,23 +2775,32 @@\n    (set_attr \"unit\" \"i387,*,*\")\n    (set_attr \"mode\" \"SF,SI,SF\")])\n \n-(define_split\n-  [(set (match_operand:SF 0 \"push_operand\" \"\")\n-\t(match_operand:SF 1 \"memory_operand\" \"\"))]\n-  \"reload_completed\n-   && MEM_P (operands[1])\n-   && (operands[2] = find_constant_src (insn))\"\n-  [(set (match_dup 0)\n-\t(match_dup 2))])\n-\n ;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:SF 0 \"push_operand\" \"\")\n \t(match_operand:SF 1 \"any_fp_register_operand\" \"\"))]\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n    (set (mem:SF (reg:P SP_REG)) (match_dup 1))]\n-  \"operands[2] = GEN_INT (-GET_MODE_SIZE (<MODE>mode));\")\n+  \"operands[2] = GEN_INT (-GET_MODE_SIZE (<P:MODE>mode));\")\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"push_operand\" \"\")\n+\t(match_operand:SF 1 \"memory_operand\" \"\"))]\n+  \"reload_completed\n+   && (operands[2] = find_constant_src (insn))\"\n+  [(set (match_dup 0) (match_dup 2))])\n+\n+(define_split\n+  [(set (match_operand 0 \"push_operand\" \"\")\n+\t(match_operand 1 \"general_operand\" \"\"))]\n+  \"reload_completed\n+   && (GET_MODE (operands[0]) == TFmode\n+       || GET_MODE (operands[0]) == XFmode\n+       || GET_MODE (operands[0]) == DFmode)\n+   && !ANY_FP_REG_P (operands[1])\"\n+  [(const_int 0)]\n+  \"ix86_split_long_move (operands); DONE;\")\n \f\n ;; Floating point move instructions.\n \n@@ -2833,17 +2820,25 @@\n   \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n \n (define_insn \"*movtf_internal\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?r ,?o\")\n-\t(match_operand:TF 1 \"general_operand\"\t   \"xm,x,C,roF,Fr\"))]\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?*r ,!o\")\n+\t(match_operand:TF 1 \"general_operand\"\t   \"xm,x,C,*roF,F*r\"))]\n   \"TARGET_SSE2\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n+   && (!can_create_pseudo_p ()\n+       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n+       || GET_CODE (operands[1]) != CONST_DOUBLE\n+       || (optimize_function_for_size_p (cfun)\n+\t   && standard_sse_constant_p (operands[1])\n+\t   && !memory_operand (operands[0], TFmode))\n+       || (!TARGET_MEMORY_MISMATCH_STALL\n+\t   && memory_operand (operands[0], TFmode)))\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n     case 1:\n-      /* Handle misaligned load/store since we don't have movmisaligntf\n-\t pattern. */\n+      /* Handle misaligned load/store since we\n+         don't have movmisaligntf pattern. */\n       if (misaligned_operand (operands[0], TFmode)\n \t  || misaligned_operand (operands[1], TFmode))\n \t{\n@@ -2892,7 +2887,7 @@\n \n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movxf_internal\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,Yx*r  ,!o\")\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,?Yx*r ,!o\")\n \t(match_operand:XF 1 \"general_operand\"\t   \"fm,f,G,Yx*roF,FYx*r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n@@ -2926,9 +2921,9 @@\n \n (define_insn \"*movdf_internal_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,r ,m,r,!m,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n+\t\t\"=f,m,f,?r,?m,?r,!m,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,rm,r,F,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n+\t\t\"fm,f,G,rm,r ,F ,F ,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3076,7 +3071,7 @@\n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,Yd*r  ,!o   ,Y2*x,Y2*x,Y2*x,m  \")\n+\t\t\"=f,m,f,?Yd*r ,!o   ,Y2*x,Y2*x,Y2*x,m  \")\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\"fm,f,G,Yd*roF,FYd*r,C   ,Y2*x,m   ,Y2*x\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n@@ -3212,7 +3207,7 @@\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=f,m,f,r  ,m ,x,x,x ,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n+\t  \"=f,m,f,?r ,?m,x,x,x ,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n \t(match_operand:SF 1 \"general_operand\"\n \t  \"fm,f,G,rmF,Fr,C,x,xm,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n@@ -3309,14 +3304,13 @@\n \t       (const_string \"SF\")))])\n \n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"any_fp_register_operand\" \"\")\n \t(match_operand 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n    && (GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == DFmode\n        || GET_MODE (operands[0]) == SFmode)\n-   && ANY_FP_REGNO_P (REGNO (operands[0]))\n    && (operands[2] = find_constant_src (insn))\"\n   [(set (match_dup 0) (match_dup 2))]\n {\n@@ -3329,13 +3323,12 @@\n })\n \n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"any_fp_register_operand\" \"\")\n \t(float_extend (match_operand 1 \"memory_operand\" \"\")))]\n   \"reload_completed\n    && (GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == DFmode)\n-   && ANY_FP_REGNO_P (REGNO (operands[0]))\n    && (operands[2] = find_constant_src (insn))\"\n   [(set (match_dup 0) (match_dup 2))]\n {\n@@ -3349,9 +3342,9 @@\n \n ;; Split the load of -0.0 or -1.0 into fldz;fchs or fld1;fchs sequence\n (define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+  [(set (match_operand:X87MODEF 0 \"fp_register_operand\" \"\")\n \t(match_operand:X87MODEF 1 \"immediate_operand\" \"\"))]\n-  \"reload_completed && FP_REGNO_P (REGNO (operands[0]))\n+  \"reload_completed\n    && (standard_80387_constant_p (operands[1]) == 8\n        || standard_80387_constant_p (operands[1]) == 9)\"\n   [(set (match_dup 0)(match_dup 1))\n@@ -5225,24 +5218,22 @@\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+  [(set (match_operand:X87MODEF 0 \"fp_register_operand\" \"\")\n \t(float:X87MODEF (match_operand:SSEMODEI24 1 \"register_operand\" \"\")))\n    (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387\n    && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode)\n-   && reload_completed\n-   && FP_REG_P (operands[0])\"\n+   && reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (float:X87MODEF (match_dup 2)))])\n \n (define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+  [(set (match_operand:X87MODEF 0 \"fp_register_operand\" \"\")\n \t(float:X87MODEF (match_operand:SSEMODEI24 1 \"memory_operand\" \"\")))\n    (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387\n    && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode)\n-   && reload_completed\n-   && FP_REG_P (operands[0])\"\n+   && reload_completed\"\n   [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n ;; Avoid store forwarding (partial memory) stall penalty\n@@ -5265,16 +5256,15 @@\n    (set_attr \"fp_int_src\" \"true\")])\n \n (define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+  [(set (match_operand:X87MODEF 0 \"fp_register_operand\" \"\")\n \t(float:X87MODEF (match_operand:DI 1 \"register_operand\" \"\")))\n    (clobber (match_scratch:V4SI 3 \"\"))\n    (clobber (match_scratch:V4SI 4 \"\"))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n    && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n-   && reload_completed\n-   && FP_REG_P (operands[0])\"\n+   && reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n {\n@@ -5291,16 +5281,15 @@\n })\n \n (define_split\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+  [(set (match_operand:X87MODEF 0 \"fp_register_operand\" \"\")\n \t(float:X87MODEF (match_operand:DI 1 \"memory_operand\" \"\")))\n    (clobber (match_scratch:V4SI 3 \"\"))\n    (clobber (match_scratch:V4SI 4 \"\"))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, DImode)\n    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n    && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n-   && reload_completed\n-   && FP_REG_P (operands[0])\"\n+   && reload_completed\"\n   [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n ;; Avoid store forwarding (partial memory) stall penalty by extending"}]}