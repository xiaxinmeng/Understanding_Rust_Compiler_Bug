{"sha": "676f6f3277181662cf3ed07769edfa2d4fb7df28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2ZjZmMzI3NzE4MTY2MmNmM2VkMDc3NjllZGZhMmQ0ZmI3ZGYyOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-25T21:38:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-25T21:38:08Z"}, "message": "c++: Fix CTAD of single-element initializer list [PR99103]\n\nWhen determining whether to rule out initializer-list constructors\nduring CTAD with a single-element initializer list (as per P0702), the\nelement type's cv-qualifiers should be irrelevant.  This patch fixes\nthis by making is_spec_or_derived strip cv-qualifiers from the supplied\nexpression type.\n\nIn passing, I noticed in maybe_aggr_guide we were calling\nis_spec_or_derived with swapped arguments.  This led us to prefer the\naggregate deduction candidate over copying deduction in the second\ntestcase below with -std=c++20.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99103\n\t* pt.c (is_spec_or_derived): Drop cv-qualifiers from 'etype'.\n\t(maybe_aggr_guide): Fix order of arguments to is_spec_or_derived.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99103\n\t* g++.dg/cpp1z/class-deduction79.C: New test.\n\t* g++.dg/cpp1z/class-deduction80.C: New test.", "tree": {"sha": "c61df9191b1964205ac5d2a49f343c08616f50c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c61df9191b1964205ac5d2a49f343c08616f50c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676f6f3277181662cf3ed07769edfa2d4fb7df28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676f6f3277181662cf3ed07769edfa2d4fb7df28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676f6f3277181662cf3ed07769edfa2d4fb7df28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676f6f3277181662cf3ed07769edfa2d4fb7df28/comments", "author": null, "committer": null, "parents": [{"sha": "2ffc26458dd7ba7b3fa00897f2d8c6cd24ba06f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffc26458dd7ba7b3fa00897f2d8c6cd24ba06f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffc26458dd7ba7b3fa00897f2d8c6cd24ba06f3"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "0623e92a54fd61943bea3b17432a3480f0b2e379", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676f6f3277181662cf3ed07769edfa2d4fb7df28/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676f6f3277181662cf3ed07769edfa2d4fb7df28/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=676f6f3277181662cf3ed07769edfa2d4fb7df28", "patch": "@@ -28833,6 +28833,7 @@ is_spec_or_derived (tree etype, tree tmpl)\n   if (!etype || !CLASS_TYPE_P (etype))\n     return false;\n \n+  etype = cv_unqualified (etype);\n   tree type = TREE_TYPE (tmpl);\n   tree tparms = (INNERMOST_TEMPLATE_PARMS\n \t\t (DECL_TEMPLATE_PARMS (tmpl)));\n@@ -28863,7 +28864,7 @@ maybe_aggr_guide (tree tmpl, tree init, vec<tree,va_gc> *args)\n   if (args->length() == 1)\n     {\n       tree val = (*args)[0];\n-      if (is_spec_or_derived (tmpl, TREE_TYPE (val)))\n+      if (is_spec_or_derived (TREE_TYPE (val), tmpl))\n \treturn NULL_TREE;\n     }\n "}, {"sha": "ebbe2b21d90902d2c0087ed2468edb8c0b769059", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction79.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676f6f3277181662cf3ed07769edfa2d4fb7df28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction79.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676f6f3277181662cf3ed07769edfa2d4fb7df28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction79.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction79.C?ref=676f6f3277181662cf3ed07769edfa2d4fb7df28", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/99103\n+// { dg-do compile { target c++17 } }\n+#include <initializer_list>\n+\n+template <class T>\n+struct S { S(std::initializer_list<T>); };\n+\n+extern const S<int> x;\n+using type = decltype(S{x});\n+using type = S<int>; // not S<S<int>>"}, {"sha": "5ccfc932a2bde1b18c396ef6e8dbedba9d101223", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction80.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676f6f3277181662cf3ed07769edfa2d4fb7df28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction80.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676f6f3277181662cf3ed07769edfa2d4fb7df28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction80.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction80.C?ref=676f6f3277181662cf3ed07769edfa2d4fb7df28", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/99103\n+// { dg-do compile { target c++17 } }\n+\n+template <class T> struct X { T a; };\n+template <class T> struct Y : X<T> {};\n+\n+extern const Y<int> y;\n+using type = decltype(X{y});\n+using type = X<int>; // not X<Y<int>>"}]}