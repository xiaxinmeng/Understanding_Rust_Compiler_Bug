{"sha": "44aea9acaba6da791facb79cf2a7e49de9c796a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhZWE5YWNhYmE2ZGE3OTFmYWNiNzljZjJhN2U0OWRlOWM3OTZhMA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-04-05T22:10:28Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-04-05T22:10:28Z"}, "message": "extend.texi (Other Builtins): Add decimal float variants of signbit.\n\n\t* doc/extend.texi (Other Builtins): Add decimal float variants\n\tof signbit.\n\t* builtins.def: Ditto.\n\t* builtins.c (expand_builtin): Ditto.\ntestsuite/\n\t* gcc.dg/dfp/signbit-1.c\n\t* gcc.dg/dfp/signbit-2.c\nM    gcc/doc/extend.texi\nM    gcc/builtins.c\nM    gcc/ChangeLog\nA    gcc/testsuite/gcc.dg/dfp/signbit-2.c\nA    gcc/testsuite/gcc.dg/dfp/signbit-1.c\nM    gcc/testsuite/ChangeLog\nM    gcc/builtins.def\n\nFrom-SVN: r123528", "tree": {"sha": "c38a91fbd5bfd1088c8fd8957c1e2fde0ab02b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c38a91fbd5bfd1088c8fd8957c1e2fde0ab02b01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44aea9acaba6da791facb79cf2a7e49de9c796a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44aea9acaba6da791facb79cf2a7e49de9c796a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44aea9acaba6da791facb79cf2a7e49de9c796a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44aea9acaba6da791facb79cf2a7e49de9c796a0/comments", "author": null, "committer": null, "parents": [{"sha": "27120a5993456da95c4ec3d4a55a7774b9b0d6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27120a5993456da95c4ec3d4a55a7774b9b0d6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27120a5993456da95c4ec3d4a55a7774b9b0d6b4"}], "stats": {"total": 128, "additions": 117, "deletions": 11}, "files": [{"sha": "906f1c37d717953643e9ea34248c6bbf633955a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -1,3 +1,10 @@\n+2007-04-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/extend.texi (Other Builtins): Add decimal float variants\n+\tof signbit.\n+\t* builtins.def: Ditto.\n+\t* builtins.c (expand_builtin): Ditto.\n+\n 2007-04-05  Uros Bizjak  <ubizjak@gmail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "498aea62e6ab9c86a7d13610a09cc45598a4f46a", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -5553,7 +5553,8 @@ expand_builtin_adjust_trampoline (tree exp)\n   return tramp;\n }\n \n-/* Expand a call to the built-in signbit, signbitf or signbitl function.\n+/* Expand a call to the built-in signbit, signbitf, signbitl, signbitd32,\n+   signbitd64, or signbitd128 function.\n    Return NULL_RTX if a normal call should be emitted rather than expanding\n    the function in-line.  EXP is the expression that is a call to the builtin\n    function; if convenient, the result should be placed in TARGET.  */\n@@ -6490,6 +6491,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     CASE_FLT_FN (BUILT_IN_SIGNBIT):\n+    case BUILT_IN_SIGNBITD32:\n+    case BUILT_IN_SIGNBITD64:\n+    case BUILT_IN_SIGNBITD128:\n       target = expand_builtin_signbit (exp, target);\n       if (target)\n \treturn target;"}, {"sha": "e0652c85233a924233b3939fbc44e4ddf3949647", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -381,6 +381,9 @@ DEF_C99_BUILTIN        (BUILT_IN_SCALBNL, \"scalbnl\", BT_FN_LONGDOUBLE_LONGDOUBLE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBIT, \"signbit\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITF, \"signbitf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITL, \"signbitl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITD32, \"signbitd32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITD64, \"signbitd64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITD128, \"signbitd128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICAND, \"significand\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDF, \"significandf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDL, \"significandl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "ce63202ebb0184b10170510251cbd09cbd547777", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -5609,6 +5609,9 @@ should be called and the @var{flag} argument passed to it.\n @findex signbit\n @findex signbitf\n @findex signbitl\n+@findex signbitd32\n+@findex signbitd64\n+@findex signbitd128\n @findex significand\n @findex significandf\n @findex significandl\n@@ -5713,6 +5716,7 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{mempcpy}, @code{pow10f}, @code{pow10l}, @code{pow10},\n @code{printf_unlocked}, @code{rindex}, @code{scalbf}, @code{scalbl},\n @code{scalb}, @code{signbit}, @code{signbitf}, @code{signbitl},\n+@code{signbitd32}, @code{signbitd64}, @code{signbitd128},\n @code{significandf}, @code{significandl}, @code{significand},\n @code{sincosf}, @code{sincosl}, @code{sincos}, @code{stpcpy},\n @code{stpncpy}, @code{strcasecmp}, @code{strdup}, @code{strfmon},"}, {"sha": "45181d072c83bbdf85237d6678e589731ea9f9b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -1,13 +1,18 @@\n-2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n-\r\n-\tPR fortran/31483\r\n-\t* gfortran.dg/altreturn_5.f90: New test.\r\n-\n-2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\r\n-\r\n-\tPR fortran/31292\r\n-\t* gfortran.dg/contained_module_proc_1.f90: New test.\r\n-\r\n+2007-04-05  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/signbit-1.c\n+\t* gcc.dg/dfp/signbit-2.c\n+\n+2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31483\n+\t* gfortran.dg/altreturn_5.f90: New test.\n+\n+2007-04-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31292\n+\t* gfortran.dg/contained_module_proc_1.f90: New test.\n+\n 2007-04-04  Stuart Hastings  <stuart@apple.com>\n \n \tPR 31281"}, {"sha": "cde28f9ba8471399813c4e2a4ba5ea822895148a", "filename": "gcc/testsuite/gcc.dg/dfp/signbit-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-1.c?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-options \"-O0 -std=gnu99\" } */\n+\n+/* Decimal float versions of __builtin_signbit.  */\n+\n+extern void abort (void);\n+int failures;\n+\n+#ifdef DBG\n+extern int printf (const char *, ...);\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failures++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+#define CHECK32(D,I) \\\n+  if ((__builtin_signbitd32 (D) != 0) != I) FAILURE\n+\n+#define CHECK64(D,I) \\\n+  if ((__builtin_signbitd64 (D) != 0) != I) FAILURE\n+\n+#define CHECK128(D,I) \\\n+  if ((__builtin_signbitd128 (D) != 0) != I) FAILURE\n+\n+/* Prevent the compiler from folding the calls at compile time.  */\n+volatile _Decimal32 sd;\n+volatile _Decimal64 dd;\n+volatile _Decimal128 td;\n+\n+int\n+main ()\n+{\n+  sd = 1.9df;  CHECK32 (sd, 0)\n+  sd = -5.3df; CHECK32 (sd, 1)\n+  sd = 0.0df;  CHECK32 (sd, 0)\n+  sd = -0.0df; CHECK32 (sd, 1)\n+\n+  dd = 1.9dd;  CHECK64 (dd, 0)\n+  dd = -5.3dd; CHECK64 (dd, 1)\n+  dd = 0.0dd;  CHECK64 (dd, 0)\n+  dd = -0.0dd; CHECK64 (dd, 1)\n+\n+  td = 1.9dl;  CHECK128 (td, 0)\n+  td = -5.3dl; CHECK128 (td, 1)\n+  td = 0.0dl;  CHECK128 (td, 0)\n+  td = -0.0dl; CHECK128 (td, 1)\n+\n+  if (failures != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6f9a2276b8ab9d3d88f1e5f68fef1db0186d5e56", "filename": "gcc/testsuite/gcc.dg/dfp/signbit-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44aea9acaba6da791facb79cf2a7e49de9c796a0/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-2.c?ref=44aea9acaba6da791facb79cf2a7e49de9c796a0", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options \"-O0 -std=gnu99\" } */\n+\n+/* Check that the compiler uses builtins for signbit; if not the link\n+   will fail because library functions are in libm.  */\n+\n+extern void abort (void);\n+\n+volatile _Decimal32 sd = 2.3df;\n+volatile _Decimal64 dd = -4.5dd;\n+volatile _Decimal128 tf = 5.3dl;\n+volatile float f = 1.2f;\n+volatile double d = -7.8;\n+volatile long double ld = 3.4L;\n+\n+extern int signbitf (float);\n+extern int signbit (double);\n+extern int signbitl (long double);\n+extern int signbitd32 (_Decimal32);\n+extern int signbitd64 (_Decimal64);\n+extern int signbitd128 (_Decimal128);\n+\n+int\n+main ()\n+{\n+  if (signbitf (f) != 0) abort ();\n+  if (signbit (d) == 0) abort ();\n+  if (signbitl (ld) != 0) abort ();\n+  if (signbitd32 (sd) != 0) abort ();\n+  if (signbitd64 (dd) == 0) abort ();\n+  if (signbitd128 (tf) != 0) abort ();\n+\n+  return 0;\n+}"}]}