{"sha": "a4aeea9a90b3ed23e154d325b0224d788a89f609", "node_id": "C_kwDOANBUbNoAKGE0YWVlYTlhOTBiM2VkMjNlMTU0ZDMyNWIwMjI0ZDc4OGE4OWY2MDk", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-03T18:17:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-03T19:27:24Z"}, "message": "gccrs: make predicate bounds overwrite-able\n\nWhen compiling types especially when using queries it needs to be\npermissive and allow them to be overwritten and a predicate might have one\nset of details in one senario and a new one with the same id later on but\nwith different types.\n\nFixes #1524\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-typecheck-context.cc (TypeCheckContext::insert_resolved_predicate): remove\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-1524.rs: New test.", "tree": {"sha": "ce29dafd6f50aeb31671ffd8d07f43a7c60e6e5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce29dafd6f50aeb31671ffd8d07f43a7c60e6e5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4aeea9a90b3ed23e154d325b0224d788a89f609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4aeea9a90b3ed23e154d325b0224d788a89f609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4aeea9a90b3ed23e154d325b0224d788a89f609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4aeea9a90b3ed23e154d325b0224d788a89f609/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e1d43c2f8a05af9fd862e6497c21741fce85c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e1d43c2f8a05af9fd862e6497c21741fce85c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e1d43c2f8a05af9fd862e6497c21741fce85c7"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "6bc4160e76ebb02e0f9f88e80e2a56af0b6cc82f", "filename": "gcc/rust/typecheck/rust-typecheck-context.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aeea9a90b3ed23e154d325b0224d788a89f609/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aeea9a90b3ed23e154d325b0224d788a89f609/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc?ref=a4aeea9a90b3ed23e154d325b0224d788a89f609", "patch": "@@ -437,8 +437,8 @@ void\n TypeCheckContext::insert_resolved_predicate (HirId id,\n \t\t\t\t\t     TyTy::TypeBoundPredicate predicate)\n {\n-  auto it = predicates.find (id);\n-  rust_assert (it == predicates.end ());\n+  // auto it = predicates.find (id);\n+  // rust_assert (it == predicates.end ());\n \n   predicates.insert ({id, predicate});\n }"}, {"sha": "e46efe4595f12647dd622e7e55fbe713cdfd41b5", "filename": "gcc/testsuite/rust/compile/issue-1524.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aeea9a90b3ed23e154d325b0224d788a89f609/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1524.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aeea9a90b3ed23e154d325b0224d788a89f609/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1524.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1524.rs?ref=a4aeea9a90b3ed23e154d325b0224d788a89f609", "patch": "@@ -0,0 +1,49 @@\n+// { dg-additional-options \"-w\" }\n+// https://github.com/Rust-GCC/gccrs/issues/1524\n+// https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/src/test/ui/methods/method-normalize-bounds-issue-20604.rs\n+trait Hasher {\n+    type Output;\n+    fn finish(&self) -> Self::Output;\n+}\n+\n+trait Hash<H: Hasher> {\n+    fn hash(&self, h: &mut H);\n+}\n+\n+trait HashState {\n+    type Wut: Hasher;\n+    fn hasher(&self) -> Self::Wut;\n+}\n+\n+struct SipHasher;\n+impl Hasher for SipHasher {\n+    type Output = u64;\n+    fn finish(&self) -> u64 { 4 }\n+}\n+\n+impl Hash<SipHasher> for isize {\n+    fn hash(&self, h: &mut SipHasher) {}\n+}\n+\n+struct SipState;\n+impl HashState for SipState {\n+    type Wut = SipHasher;\n+    fn hasher(&self) -> SipHasher { SipHasher }\n+}\n+\n+struct Map<S> {\n+    s: S,\n+}\n+\n+impl<S> Map<S>\n+    where S: HashState,\n+          <S as HashState>::Wut: Hasher<Output=u64>,\n+{\n+    fn foo<K>(&self, k: K) where K: Hash< <S as HashState>::Wut> {}\n+}\n+\n+fn foo<K: Hash<SipHasher>>(map: &Map<SipState>) {\n+    map.foo(22);\n+}\n+\n+fn main() {}"}]}