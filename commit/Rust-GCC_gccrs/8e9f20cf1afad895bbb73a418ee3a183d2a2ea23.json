{"sha": "8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5ZjIwY2YxYWZhZDg5NWJiYjczYTQxOGVlM2ExODNkMmEyZWEyMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-13T14:35:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-13T14:35:12Z"}, "message": "re PR c++/55652 (ICE (segfault) with templates and structs)\n\n\tPR c++/55652\n\t* typeck2.c (merge_exception_specifiers): Don't call operand_equal_p\n\tif noex is NULL.\n\n\t* g++.dg/cpp0x/noexcept19.C: New test.\n\nFrom-SVN: r194479", "tree": {"sha": "8d6601148fa8b78c438d3dac7314309e33870e31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d6601148fa8b78c438d3dac7314309e33870e31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5944e3a8cc4e34030c2f6ca06db347ecafb9371a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5944e3a8cc4e34030c2f6ca06db347ecafb9371a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5944e3a8cc4e34030c2f6ca06db347ecafb9371a"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "ea4cfb203426e9aeb717712359570639852fef19", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "patch": "@@ -1,3 +1,9 @@\n+2012-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55652\n+\t* typeck2.c (merge_exception_specifiers): Don't call operand_equal_p\n+\tif noex is NULL.\n+\n 2012-12-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54883"}, {"sha": "fbf50004b60c7b4dedbcf4e8158b1b34a93c7198", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "patch": "@@ -1871,7 +1871,7 @@ merge_exception_specifiers (tree list, tree add, tree fn)\n       /* If ADD is a deferred noexcept, we must have been called from\n \t process_subob_fn.  For implicitly declared functions, we build up\n \t a list of functions to consider at instantiation time.  */\n-      if (operand_equal_p (noex, boolean_true_node, 0))\n+      if (noex && operand_equal_p (noex, boolean_true_node, 0))\n \tnoex = NULL_TREE;\n       gcc_assert (fn && (!noex || is_overloaded_fn (noex)));\n       noex = build_overload (fn, noex);"}, {"sha": "e16352a38122df8a28910facf340ea7616ed7565", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "patch": "@@ -1,3 +1,8 @@\n+2012-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/55652\n+\t* g++.dg/cpp0x/noexcept19.C: New test.\n+\n 2012-12-13  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/55660"}, {"sha": "12ff86e0d22b331f5858a3428d2a4c486a0c7669", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept19.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9f20cf1afad895bbb73a418ee3a183d2a2ea23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C?ref=8e9f20cf1afad895bbb73a418ee3a183d2a2ea23", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/55652\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+\n+template <typename T>\n+struct A\n+{\n+  static const bool a = false;\n+};\n+\n+template <typename X, typename Y = A <X>>\n+struct B\n+{\n+  B () noexcept (A <Y>::a) {}\n+};\n+\n+template <typename X, typename Y>\n+struct C\n+{\n+  X x;\n+  Y y;\n+};\n+\n+struct D\n+{\n+  D () throw (int);\n+};\n+\n+C <D, B <D>> c;"}]}