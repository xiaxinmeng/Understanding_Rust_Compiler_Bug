{"sha": "c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVlYTVmM2IzMzg0ZTRmNGNmNDlkZWJkY2MzZGZiYTdhNzRkYjNmYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-13T10:54:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-13T10:54:28Z"}, "message": "(rtx_equal_for_thread_p): Correct error in previous change; add\nmissing arg in recursive call.\n\nFrom-SVN: r6763", "tree": {"sha": "957455676fc87441ef47de59d80ebdf4ee6f6d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/957455676fc87441ef47de59d80ebdf4ee6f6d95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa/comments", "author": null, "committer": null, "parents": [{"sha": "7b70a020c3dd85c63ffc6cceb165b400576d89b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b70a020c3dd85c63ffc6cceb165b400576d89b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b70a020c3dd85c63ffc6cceb165b400576d89b5"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3e20833906d96ea5b5c780ae98f691c0aaa184ac", "filename": "gcc/jump.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c5ea5f3b3384e4f4cf49debdcc3dfba7a74db3fa", "patch": "@@ -4210,15 +4210,15 @@ rtx_equal_for_thread_p (x, y, yinsn)\n   /* For commutative operations, the RTX match if the operand match in any\n      order.  Also handle the simple binary and unary cases without a loop.  */\n   if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n-    return ((rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0))\n-\t     && rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 1)))\n-\t    || (rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 1))\n-\t\t&& rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 0))));\n+    return ((rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0), yinsn)\n+\t     && rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 1), yinsn))\n+\t    || (rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 1), yinsn)\n+\t\t&& rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 0), yinsn)));\n   else if (GET_RTX_CLASS (code) == '<' || GET_RTX_CLASS (code) == '2')\n-    return (rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0))\n-\t    && rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 1)));\n+    return (rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0), yinsn)\n+\t    && rtx_equal_for_thread_p (XEXP (x, 1), XEXP (y, 1), yinsn));\n   else if (GET_RTX_CLASS (code) == '1')\n-    return rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0));\n+    return rtx_equal_for_thread_p (XEXP (x, 0), XEXP (y, 0), yinsn);\n \n   /* Handle special-cases first.  */\n   switch (code)"}]}