{"sha": "245215bf8d11025dfca3c7003ce10151aa7ba4e4", "node_id": "C_kwDOANBUbNoAKDI0NTIxNWJmOGQxMTAyNWRmY2EzYzcwMDNjZTEwMTUxYWE3YmE0ZTQ", "commit": {"author": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-05-05T13:00:48Z"}, "committer": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-05-09T11:19:18Z"}, "message": "Lower IfLet expressions.\n\nAddresses #1177.", "tree": {"sha": "9444d53f931244c6324e596086b7d3dd518aa1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9444d53f931244c6324e596086b7d3dd518aa1a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/245215bf8d11025dfca3c7003ce10151aa7ba4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245215bf8d11025dfca3c7003ce10151aa7ba4e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245215bf8d11025dfca3c7003ce10151aa7ba4e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245215bf8d11025dfca3c7003ce10151aa7ba4e4/comments", "author": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af031b081fcd26f9fcb3e4a561f5a3d98158e163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af031b081fcd26f9fcb3e4a561f5a3d98158e163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af031b081fcd26f9fcb3e4a561f5a3d98158e163"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "5c328b534466ea1d47573d00d7e2657a32508360", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245215bf8d11025dfca3c7003ce10151aa7ba4e4/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245215bf8d11025dfca3c7003ce10151aa7ba4e4/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=245215bf8d11025dfca3c7003ce10151aa7ba4e4", "patch": "@@ -120,6 +120,35 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n   bool terminated;\n };\n \n+class ASTLoweringIfLetBlock : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::IfLetExpr *translate (AST::IfLetExpr *expr)\n+  {\n+    ASTLoweringIfLetBlock resolver;\n+    expr->accept_vis (resolver);\n+    if (resolver.translated != nullptr)\n+      {\n+\tresolver.mappings->insert_hir_expr (\n+\t  resolver.translated->get_mappings ().get_crate_num (),\n+\t  resolver.translated->get_mappings ().get_hirid (),\n+\t  resolver.translated);\n+      }\n+    return resolver.translated;\n+  }\n+\n+  ~ASTLoweringIfLetBlock () {}\n+\n+  void visit (AST::IfLetExpr &expr) override;\n+\n+private:\n+  ASTLoweringIfLetBlock () : ASTLoweringBase (), translated (nullptr) {}\n+\n+  HIR::IfLetExpr *translated;\n+};\n+\n class ASTLoweringExprWithBlock : public ASTLoweringBase\n {\n   using Rust::HIR::ASTLoweringBase::visit;\n@@ -159,6 +188,11 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::IfLetExpr &expr) override\n+  {\n+    translated = ASTLoweringIfLetBlock::translate (&expr);\n+  }\n+\n   void visit (AST::BlockExpr &expr) override\n   {\n     translated = ASTLoweringBlock::translate (&expr, &terminated);"}, {"sha": "d8a0488323279a07a637e3b57823c5cec8a91905", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/245215bf8d11025dfca3c7003ce10151aa7ba4e4/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/245215bf8d11025dfca3c7003ce10151aa7ba4e4/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=245215bf8d11025dfca3c7003ce10151aa7ba4e4", "patch": "@@ -223,6 +223,34 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n \t\t\t       expr.get_locus ());\n }\n \n+void\n+ASTLoweringIfLetBlock::visit (AST::IfLetExpr &expr)\n+{\n+  std::vector<std::unique_ptr<HIR::Pattern> > patterns;\n+  for (auto &pattern : expr.get_patterns ())\n+    {\n+      HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n+      patterns.push_back (std::unique_ptr<HIR::Pattern> (ptrn));\n+    }\n+  HIR::Expr *value_ptr\n+    = ASTLoweringExpr::translate (expr.get_value_expr ().get ());\n+\n+  bool ignored_terminated = false;\n+  HIR::BlockExpr *block\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &ignored_terminated);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::IfLetExpr (mapping, std::move (patterns),\n+\t\t\t\t   std::unique_ptr<HIR::Expr> (value_ptr),\n+\t\t\t\t   std::unique_ptr<HIR::BlockExpr> (block),\n+\t\t\t\t   expr.get_locus ());\n+}\n+\n // rust-ast-lower-struct-field-expr.h\n \n void"}]}