{"sha": "1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "node_id": "C_kwDOANBUbNoAKDFhYzdhOGM5ZTQ3OThkMzUyZWI4YzY0OTA1ZGQzODA4NmFmNGUxY2Q", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2021-12-02T10:24:03Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2021-12-02T10:27:16Z"}, "message": "fortran: OpenMP/OpenACC array mapping alignment fix (PR90030)\n\nFix issue with the Fortran front-end when mapping arrays: when creating the\ndata MEM_REF for the map clause, there was a convention of casting the\nreferencing pointer to 'c_char *' by\nfold_convert (build_pointer_type (char_type_node), ptr).\n\nThis causes the alignment passed to the libgomp runtime for array data\nhardwared to '1', and causes alignment errors on the offload target.\n\nThis patch fixes this by removing the char_type_node pointer converts, and\nadding gcc_asserts to ensure POINTER_TYPE_P (TREE_TYPE (ptr)).\n\n\tPR fortran/90030\n\ngcc/fortran/ChangeLog:\n\n\t* trans-openmp.c (gfc_omp_finish_clause): Remove fold_convert to pointer\n\tto char_type_node, add gcc_assert of POINTER_TYPE_P.\n\t(gfc_trans_omp_array_section): Likewise.\n\t(gfc_trans_omp_clauses): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/goacc/finalize-1.f: Adjust scan test.\n\t* gfortran.dg/gomp/affinity-clause-1.f90: Likewise.\n\t* gfortran.dg/gomp/affinity-clause-5.f90: Likewise.\n\t* gfortran.dg/gomp/defaultmap-4.f90: Likewise.\n\t* gfortran.dg/gomp/defaultmap-5.f90: Likewise.\n\t* gfortran.dg/gomp/defaultmap-6.f90: Likewise.\n\t* gfortran.dg/gomp/map-3.f90: Likewise.\n\t* gfortran.dg/gomp/pr78260-2.f90: Likewise.\n\t* gfortran.dg/gomp/pr78260-3.f90: Likewise.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.oacc-fortran/pr90030.f90: New test.\n\t* testsuite/libgomp.fortran/pr90030.f90: New test.", "tree": {"sha": "3aa91b3f74382e391ec248cbca909f7a6a59df7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa91b3f74382e391ec248cbca909f7a6a59df7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c5317d6214baec897120320423e6ad9f4980fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c5317d6214baec897120320423e6ad9f4980fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c5317d6214baec897120320423e6ad9f4980fdf"}], "stats": {"total": 179, "additions": 105, "deletions": 74}, "files": [{"sha": "18268fb29a0a8626a07fcccea0d2ba30935cac4c", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -1564,7 +1564,7 @@ gfc_omp_finish_clause (tree c, gimple_seq *pre_p, bool openacc)\n       if (present)\n \tptr = gfc_build_cond_assign_expr (&block, present, ptr,\n \t\t\t\t\t  null_pointer_node);\n-      ptr = fold_convert (build_pointer_type (char_type_node), ptr);\n+      gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n       ptr = build_fold_indirect_ref (ptr);\n       OMP_CLAUSE_DECL (c) = ptr;\n       c2 = build_omp_clause (input_location, OMP_CLAUSE_MAP);\n@@ -2381,7 +2381,7 @@ gfc_trans_omp_array_section (stmtblock_t *block, gfc_omp_namelist *n,\n \t\t\t\t\t    OMP_CLAUSE_SIZE (node), elemsz);\n     }\n   gcc_assert (se.post.head == NULL_TREE);\n-  ptr = fold_convert (build_pointer_type (char_type_node), ptr);\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n   OMP_CLAUSE_DECL (node) = build_fold_indirect_ref (ptr);\n   ptr = fold_convert (ptrdiff_type_node, ptr);\n \n@@ -2849,8 +2849,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (decl)))\n \t\t    {\n \t\t      decl = gfc_conv_descriptor_data_get (decl);\n-\t\t      decl = fold_convert (build_pointer_type (char_type_node),\n-\t\t\t\t\t   decl);\n+\t\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (decl)));\n \t\t      decl = build_fold_indirect_ref (decl);\n \t\t    }\n \t\t  else if (DECL_P (decl))\n@@ -2873,8 +2872,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t    }\n \t\t  gfc_add_block_to_block (&iter_block, &se.pre);\n \t\t  gfc_add_block_to_block (&iter_block, &se.post);\n-\t\t  ptr = fold_convert (build_pointer_type (char_type_node),\n-\t\t\t\t      ptr);\n+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n \t\t  OMP_CLAUSE_DECL (node) = build_fold_indirect_ref (ptr);\n \t\t}\n \t      if (list == OMP_LIST_DEPEND)\n@@ -3117,8 +3115,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t      if (present)\n \t\t\tptr = gfc_build_cond_assign_expr (block, present, ptr,\n \t\t\t\t\t\t\t  null_pointer_node);\n-\t\t      ptr = fold_convert (build_pointer_type (char_type_node),\n-\t\t\t\t\t  ptr);\n+\t\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n \t\t      ptr = build_fold_indirect_ref (ptr);\n \t\t      OMP_CLAUSE_DECL (node) = ptr;\n \t\t      node2 = build_omp_clause (input_location,\n@@ -3555,8 +3552,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t    {\n \t\t      tree type = TREE_TYPE (decl);\n \t\t      tree ptr = gfc_conv_descriptor_data_get (decl);\n-\t\t      ptr = fold_convert (build_pointer_type (char_type_node),\n-\t\t\t\t\t  ptr);\n+\t\t      gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n \t\t      ptr = build_fold_indirect_ref (ptr);\n \t\t      OMP_CLAUSE_DECL (node) = ptr;\n \t\t      OMP_CLAUSE_SIZE (node)\n@@ -3606,8 +3602,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t\t       OMP_CLAUSE_SIZE (node), elemsz);\n \t\t    }\n \t\t  gfc_add_block_to_block (block, &se.post);\n-\t\t  ptr = fold_convert (build_pointer_type (char_type_node),\n-\t\t\t\t      ptr);\n+\t\t  gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n \t\t  OMP_CLAUSE_DECL (node) = build_fold_indirect_ref (ptr);\n \t\t}\n \t      omp_clauses = gfc_trans_add_clause (node, omp_clauses);"}, {"sha": "1e5bf0ba1e68d9f2a93e8bd279fe8a359f41b5a1", "filename": "gcc/testsuite/gfortran.dg/goacc/finalize-1.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffinalize-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffinalize-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffinalize-1.f?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -20,8 +20,8 @@ SUBROUTINE f\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:del_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA FINALIZE DELETE (del_f_p(2:5))\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:\\\\*\\\\(c_char \\\\*\\\\) parm\\\\.0\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=1\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) del_f_p\\\\.data \\\\\\[pointer assign, bias: \\\\(.*int.*\\\\) parm\\\\.0\\\\.data - \\\\(.*int.*\\\\) del_f_p\\\\.data\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:MEM\\\\\\[\\\\(c_char \\\\*\\\\)\\[^\\\\\\]\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:del_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:\\\\*\\\\(integer\\\\(kind=.\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parm\\\\.0\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=1\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) del_f_p\\\\.data \\\\\\[pointer assign, bias: \\\\(.*int.*\\\\) parm\\\\.0\\\\.data - \\\\(.*int.*\\\\) del_f_p\\\\.data\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:MEM <\\[^>\\]+> \\\\\\[\\\\(integer\\\\(kind=.\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\)_\\[0-9\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:del_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA COPYOUT (cpo_r)\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:cpo_r\\\\);$\" 1 \"original\" } }\n@@ -32,6 +32,6 @@ SUBROUTINE f\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(force_from:cpo_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA COPYOUT (cpo_f_p(4:10)) FINALIZE\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:\\\\*\\\\(c_char \\\\*\\\\) parm\\\\.1\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=1\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\\\(.*int.*\\\\) parm\\\\.1\\\\.data - \\\\(.*int.*\\\\) cpo_f_p\\\\.data\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(force_from:MEM\\\\\\[\\\\(c_char \\\\*\\\\)\\[^\\\\\\]\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:\\\\*\\\\(integer\\\\(kind=.\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parm\\\\.1\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=1\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\\\(.*int.*\\\\) parm\\\\.1\\\\.data - \\\\(.*int.*\\\\) cpo_f_p\\\\.data\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(force_from:MEM <\\[^>\\]+> \\\\\\[\\\\(integer\\\\(kind=.\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\)_\\[0-9\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n       END SUBROUTINE f"}, {"sha": "08c7740cf0db053d4348f2ba6033447d4fb10d56", "filename": "gcc/testsuite/gfortran.dg/gomp/affinity-clause-1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-1.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -22,12 +22,12 @@ subroutine foo(x)\n \n ! { dg-final { scan-tree-dump-times \"D\\\\.\\[0-9\\]+ = .integer.kind=4.. __builtin_cosf ..real.kind=4.. a \\\\+ 1.0e\\\\+0\\\\);\" 2 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):\\\\*\\\\(c_char \\\\*\\\\) &b\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):\\\\*\\\\(c_char \\\\*\\\\) &d\\\\\\[\\\\(.*jj \\\\* 5 \\\\+ .* <?i>?\\\\) \\\\+ -6\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) jj=2:5:2, integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(.*jj \\\\* 5 \\\\+ .* <?i>?\\\\) \\\\+ -6\\\\\\]\\\\)\" 1 \"original\" } }\n \n-! { dg final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D.3938:5:1\\\\):\\\\*\\\\(c_char \\\\*\\\\) &b\\\\\\[\\\\(.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):\\\\*\\\\(c_char \\\\*\\\\) &d\\\\\\[\\\\(\\\\(integer\\\\(kind=8\\\\)\\\\) i \\\\+ -1\\\\) \\\\* 6\\\\\\]\\\\)\"  1 \"original\" } }\n+! { dg final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):b\\\\\\[\\\\(.* <?i>? \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=D\\\\.\\[0-9\\]+:5:1\\\\):d\\\\\\[\\\\(\\\\(integer\\\\(kind=8\\\\)\\\\) i \\\\+ -1\\\\) \\\\* 6\\\\\\]\\\\)\"  1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):a\\\\)\\[^ \\]\" 1 \"original\" } }\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):a\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:5:1\\\\):\\\\*x\\\\)\"  1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) k=7:4:-1, integer\\\\(kind=8\\\\) j=1:5:1\\\\):\\\\*\\\\(c_char \\\\*\\\\) &b\\\\\\[\\\\(?\\\\(integer\\\\(kind=.\\\\).* \\[jk\\] \\\\+ .*\\[kj\\]\\\\) \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) k=7:4:-1, integer\\\\(kind=8\\\\) j=1:5:1\\\\):a\\\\) affinity\\\\(cc\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) k=7:4:-1, integer\\\\(kind=8\\\\) j=1:5:1\\\\):b\\\\\\[\\\\(?\\\\(integer\\\\(kind=.\\\\).* \\[jk\\] \\\\+ .*\\[kj\\]\\\\) \\\\+ -1\\\\\\]\\\\) affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) k=7:4:-1, integer\\\\(kind=8\\\\) j=1:5:1\\\\):a\\\\) affinity\\\\(cc\\\\)\" 1 \"original\" } }"}, {"sha": "c23fee066462f5f8c81338f7dc667a63d5da8868", "filename": "gcc/testsuite/gfortran.dg/gomp/affinity-clause-5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Faffinity-clause-5.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -18,6 +18,6 @@\n \n ! { dg-final { scan-tree-dump-times \"pragma omp task affinity\\\\(iterator\\\\)\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(\\\\*\\\\(c_char \\\\*\\\\) &iterator\\\\\\[2\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\\\[2\\\\\\]\\\\)\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:10:1\\\\):\\\\*\\\\(c_char \\\\*\\\\) &iterator\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task affinity\\\\(iterator\\\\(integer\\\\(kind=4\\\\) i=1:10:1\\\\):iterator\\\\\\[.* <?i>? \\\\+ -1\\\\\\]\\\\)\" 1 \"original\" } }"}, {"sha": "7b182b52021231a49d7c88733e75260dd93e2c1f", "filename": "gcc/testsuite/gfortran.dg/gomp/defaultmap-4.f90", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-4.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -56,16 +56,18 @@\n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*aii \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:aii \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:arr \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(c_char \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxparr\\\\\\] \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxaarr\\\\\\] \\\\* restrict\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\* restrict\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\* restrict\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+\n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict\\\\) str1aarr\\\\.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\* restrict\\\\) str5aarr\\\\.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxaarr\\\\\\] \\\\* restrict\\\\) strxaarr\\\\.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 2 \"gimple\" } }\n@@ -103,21 +105,23 @@\n ! { dg-final { scan-tree-dump-times \"map\\\\(always_pointer:\\\\(struct t\\\\\\[0:\\\\\\] \\\\*\\\\) dtparr\\\\.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:aarr \\\\\\[pointer set, len:\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:arr \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxparr\\\\\\] \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtaarr \\\\\\[pointer set, len:\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtarr \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dt \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtparr \\\\\\[pointer set, len:\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*aii \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxaarr\\\\\\] \\\\* restrict\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\* restrict\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\* restrict\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*dta \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*str1a \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*str5a \\\\\\[len:\" 1 \"gimple\" } }"}, {"sha": "1391274be31cf672a6cd7a60cf44c24d42fd0f2a", "filename": "gcc/testsuite/gfortran.dg/gomp/defaultmap-5.f90", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-5.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -86,28 +86,28 @@\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:aarr \\\\\\[pointer set, len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*aii \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:arr \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(c_char \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxparr\\\\\\] \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxaarr\\\\\\] \\\\* restrict\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\* restrict\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\* restrict\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtaarr \\\\\\[pointer set, len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*dta \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtarr \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dt \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtparr \\\\\\[pointer set, len:\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:\\\\*dtp \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:arr \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxparr\\\\\\] \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:dtarr \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:dt \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*dtp \\\\\\[len:\" 1 \"gimple\" } }"}, {"sha": "9a81d0f15324ca381a68561b71d9eb7a4d884dea", "filename": "gcc/testsuite/gfortran.dg/gomp/defaultmap-6.f90", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdefaultmap-6.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -65,16 +65,16 @@\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:dtparr \\\\\\[pointer set, len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*aii \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:arr \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxparr\\\\\\] \\\\*\\\\) strxparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:\\\\.strxaarr\\\\\\] \\\\* restrict\\\\) strxaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\*\\\\) str5parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:5\\\\\\] \\\\* restrict\\\\) str5aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\*\\\\) str1parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(character\\\\(kind=1\\\\)\\\\\\[0:\\\\\\]\\\\\\[1:1\\\\\\] \\\\* restrict\\\\) str1aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) parr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\*\\\\) dtparr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(struct t\\\\\\[0:\\\\\\] \\\\* restrict\\\\) dtaarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) aarr\\\\.data \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:\\\\*dta \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:dtarr \\\\\\[len:\" 1 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:dt \\\\\\[len:\" 1 \"gimple\" } }"}, {"sha": "2f0a79288197534985c9074ed0e21634927d2afe", "filename": "gcc/testsuite/gfortran.dg/gomp/map-3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fmap-3.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -34,5 +34,5 @@ subroutine bar\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data use_device_addr\\\\(x\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data use_device_addr\\\\(x2\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target exit data map\\\\(release:x\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) y.data \\\\\\[len: .*\\\\) map\\\\(to:y \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*y.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_addr\\\\(y\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) z.data \\\\\\[len: .*\\\\) map\\\\(to:z \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*z.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_addr\\\\(z\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) y.data \\\\\\[len: .*\\\\) map\\\\(to:y \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*y.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_addr\\\\(y\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) z.data \\\\\\[len: .*\\\\) map\\\\(to:z \\\\\\[pointer set, len: .*\\\\) map\\\\(alloc:.*z.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) use_device_addr\\\\(z\\\\)\" 1 \"original\" } }"}, {"sha": "f5d888592b95f35a7f04cbe03d5b4e3ee5245a50", "filename": "gcc/testsuite/gfortran.dg/gomp/pr78260-2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78260-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78260-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78260-2.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -48,10 +48,10 @@ subroutine sub()\n   end subroutine sub\n end module m\n \n-! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) arr.data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\) map\\\\(to:arr \\\\\\[pointer set, len: ..\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) arr.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target update to\\\\(\\\\*\\\\(c_char \\\\*\\\\) arr.data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(c_char \\\\*\\\\) __result->data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\) map\\\\(to:\\\\*__result \\\\\\[pointer set, len: ..\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) __result->data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) map\\\\(alloc:__result \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp target update to\\\\(\\\\*\\\\(c_char \\\\*\\\\) __result->data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) arr.data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\) map\\\\(to:arr \\\\\\[pointer set, len: ..\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) arr.data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target update to\\\\(\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) arr.data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) __result->data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\) map\\\\(to:\\\\*__result \\\\\\[pointer set, len: ..\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) __result->data \\\\\\[pointer assign, bias: 0\\\\\\]\\\\) map\\\\(alloc:__result \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp target update to\\\\(\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) __result->data \\\\\\[len: D.\\[0-9\\]+ \\\\* 4\\\\\\]\\\\)\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:\\\\*__result.0\\\\) map\\\\(alloc:__result.0 \\\\\\[pointer assign, bias: 0\\\\\\]\\\\)\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target update to\\\\(\\\\*__result.0\\\\)\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp target data map\\\\(tofrom:__result_f1\\\\)\" 1 \"original\" } }"}, {"sha": "64851b34249465fb888365a73a963dfaedc79ccb", "filename": "gcc/testsuite/gfortran.dg/gomp/pr78260-3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78260-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78260-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr78260-3.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -70,5 +70,5 @@ end subroutine sub\n \n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:__result_f1\\\\)\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:\\\\*__result.0\\\\)\" 4 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:\\\\*\\\\(c_char \\\\*\\\\) __result->data\\\\)\" 2 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:\\\\*\\\\(c_char \\\\*\\\\) arr.data\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) __result->data\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp task depend\\\\(inout:\\\\*\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) arr.data\\\\)\" 2 \"original\" } }"}, {"sha": "8c2432cb17831860d2500ff063a3d4e0e92fb9ab", "filename": "libgomp/testsuite/libgomp.fortran/pr90030.f90", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr90030.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr90030.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr90030.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -0,0 +1,3 @@\n+! { dg-do run }\n+\n+include '../libgomp.oacc-fortran/pr90030.f90'"}, {"sha": "bbfcff3a869f72d4574bf8ef8aa6acb3ad42347c", "filename": "libgomp/testsuite/libgomp.oacc-fortran/pr90030.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr90030.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ac7a8c9e4798d352eb8c64905dd38086af4e1cd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr90030.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr90030.f90?ref=1ac7a8c9e4798d352eb8c64905dd38086af4e1cd", "patch": "@@ -0,0 +1,29 @@\n+! PR90030.\n+! Test if the array data associated with c is properly aligned\n+! on the accelerator.  If it is not, this program will crash.\n+\n+! This is also included from '../libgomp.fortran/pr90030.f90'.\n+\n+! { dg-do run }\n+\n+program routine_align_main\n+  implicit none\n+  integer :: i, n\n+  real*8, dimension(:), allocatable :: c\n+\n+  n = 10\n+\n+  allocate (c(n))\n+\n+  !$omp target map(to: n) map(from: c(1:n))\n+  !$acc parallel copyin(n) copyout(c(1:n))\n+  do i = 1, n\n+     c(i) = i\n+  enddo\n+  !$acc end parallel\n+  !$omp end target\n+\n+  do i = 1, n\n+     if (c(i) .ne. i) stop i\n+  enddo\n+end program routine_align_main"}]}