{"sha": "ac4a7e21ca926ec25d5224efb2094d952436496a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM0YTdlMjFjYTkyNmVjMjVkNTIyNGVmYjIwOTRkOTUyNDM2NDk2YQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2007-11-09T17:02:10Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2007-11-09T17:02:10Z"}, "message": "haifa-sched.c (haifa_classify_insn): Rename to ...\n\n\t* gcc/haifa-sched.c (haifa_classify_insn): Rename to ...\n\t(haifa_classify_rtx): ...  this.  Improve handling of COND_EXECs,\n\thandle PARALLELs by recursing.  Use it ...  \n\t(haifa_classify_insn): ...  here.  Reimplement.\n\nFrom-SVN: r130050", "tree": {"sha": "a1303e941634176b3386594395ca4211bed05b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1303e941634176b3386594395ca4211bed05b58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac4a7e21ca926ec25d5224efb2094d952436496a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4a7e21ca926ec25d5224efb2094d952436496a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4a7e21ca926ec25d5224efb2094d952436496a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4a7e21ca926ec25d5224efb2094d952436496a/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18f310b7d377ba5391fb3e81c10e3bba172be375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f310b7d377ba5391fb3e81c10e3bba172be375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f310b7d377ba5391fb3e81c10e3bba172be375"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "33e38e4854c130a7c91664b6c803a90045d61755", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4a7e21ca926ec25d5224efb2094d952436496a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4a7e21ca926ec25d5224efb2094d952436496a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac4a7e21ca926ec25d5224efb2094d952436496a", "patch": "@@ -1,3 +1,10 @@\n+2007-11-09  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* gcc/haifa-sched.c (haifa_classify_insn): Rename to ...\n+\t(haifa_classify_rtx): ...  this.  Improve handling of COND_EXECs,\n+\thandle PARALLELs by recursing.  Use it ...  \n+\t(haifa_classify_insn): ...  here.  Reimplement.\n+\n 2007-11-09  Richard Guenther  <rguenther@suse.de>\n \n \t* bitmap.h (bitmap_single_bit_set_p): Declare."}, {"sha": "6a53543f5e301e2f2158835ea33c40dc237a91d4", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4a7e21ca926ec25d5224efb2094d952436496a/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4a7e21ca926ec25d5224efb2094d952436496a/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ac4a7e21ca926ec25d5224efb2094d952436496a", "patch": "@@ -405,79 +405,61 @@ may_trap_exp (const_rtx x, int is_store)\n     }\n }\n \n-/* Classifies insn for the purpose of verifying that it can be\n-   moved speculatively, by examining it's patterns, returning:\n+/* Classifies rtx X of an insn for the purpose of verifying that X can be\n+   executed speculatively (and consequently the insn can be moved\n+   speculatively), by examining X, returning:\n    TRAP_RISKY: store, or risky non-load insn (e.g. division by variable).\n    TRAP_FREE: non-load insn.\n    IFREE: load from a globally safe location.\n    IRISKY: volatile load.\n    PFREE_CANDIDATE, PRISKY_CANDIDATE: load that need to be checked for\n    being either PFREE or PRISKY.  */\n \n-int\n-haifa_classify_insn (const_rtx insn)\n+static int\n+haifa_classify_rtx (const_rtx x)\n {\n-  rtx pat = PATTERN (insn);\n   int tmp_class = TRAP_FREE;\n   int insn_class = TRAP_FREE;\n   enum rtx_code code;\n \n-  if (GET_CODE (pat) == PARALLEL)\n+  if (GET_CODE (x) == PARALLEL)\n     {\n-      int i, len = XVECLEN (pat, 0);\n+      int i, len = XVECLEN (x, 0);\n \n       for (i = len - 1; i >= 0; i--)\n \t{\n-\t  code = GET_CODE (XVECEXP (pat, 0, i));\n-\t  switch (code)\n-\t    {\n-\t    case CLOBBER:\n-\t      /* Test if it is a 'store'.  */\n-\t      tmp_class = may_trap_exp (XEXP (XVECEXP (pat, 0, i), 0), 1);\n-\t      break;\n-\t    case SET:\n-\t      /* Test if it is a store.  */\n-\t      tmp_class = may_trap_exp (SET_DEST (XVECEXP (pat, 0, i)), 1);\n-\t      if (tmp_class == TRAP_RISKY)\n-\t\tbreak;\n-\t      /* Test if it is a load.  */\n-\t      tmp_class\n-\t\t= WORST_CLASS (tmp_class,\n-\t\t\t       may_trap_exp (SET_SRC (XVECEXP (pat, 0, i)),\n-\t\t\t\t\t     0));\n-\t      break;\n-\t    case COND_EXEC:\n-\t    case TRAP_IF:\n-\t      tmp_class = TRAP_RISKY;\n-\t      break;\n-\t    default:\n-\t      ;\n-\t    }\n+\t  tmp_class = haifa_classify_rtx (XVECEXP (x, 0, i));\n \t  insn_class = WORST_CLASS (insn_class, tmp_class);\n \t  if (insn_class == TRAP_RISKY || insn_class == IRISKY)\n \t    break;\n \t}\n     }\n   else\n     {\n-      code = GET_CODE (pat);\n+      code = GET_CODE (x);\n       switch (code)\n \t{\n \tcase CLOBBER:\n \t  /* Test if it is a 'store'.  */\n-\t  tmp_class = may_trap_exp (XEXP (pat, 0), 1);\n+\t  tmp_class = may_trap_exp (XEXP (x, 0), 1);\n \t  break;\n \tcase SET:\n \t  /* Test if it is a store.  */\n-\t  tmp_class = may_trap_exp (SET_DEST (pat), 1);\n+\t  tmp_class = may_trap_exp (SET_DEST (x), 1);\n \t  if (tmp_class == TRAP_RISKY)\n \t    break;\n \t  /* Test if it is a load.  */\n \t  tmp_class =\n \t    WORST_CLASS (tmp_class,\n-\t\t\t may_trap_exp (SET_SRC (pat), 0));\n+\t\t\t may_trap_exp (SET_SRC (x), 0));\n \t  break;\n \tcase COND_EXEC:\n+\t  tmp_class = haifa_classify_rtx (COND_EXEC_CODE (x));\n+\t  if (tmp_class == TRAP_RISKY)\n+\t    break;\n+\t  tmp_class = WORST_CLASS (tmp_class,\n+\t\t\t\t   may_trap_exp (COND_EXEC_TEST (x), 0));\n+\t  break;\n \tcase TRAP_IF:\n \t  tmp_class = TRAP_RISKY;\n \t  break;\n@@ -489,6 +471,13 @@ haifa_classify_insn (const_rtx insn)\n   return insn_class;\n }\n \n+int\n+haifa_classify_insn (const_rtx insn)\n+{\n+  return haifa_classify_rtx (PATTERN (insn));\n+}\n+\n+\n /* A typedef for rtx vector.  */\n typedef VEC(rtx, heap) *rtx_vec_t;\n "}]}