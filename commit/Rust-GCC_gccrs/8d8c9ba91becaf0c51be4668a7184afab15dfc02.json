{"sha": "8d8c9ba91becaf0c51be4668a7184afab15dfc02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ4YzliYTkxYmVjYWYwYzUxYmU0NjY4YTcxODRhZmFiMTVkZmMwMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-07-04T15:44:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-07-04T15:44:14Z"}, "message": "(get_inner_reference): Delete using alternate mode for bitfield; we\ndon't make bitfields anymore if not needed.\n\nFrom-SVN: r12398", "tree": {"sha": "574b048a440d3776b994f7d02deef0df72554c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574b048a440d3776b994f7d02deef0df72554c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d8c9ba91becaf0c51be4668a7184afab15dfc02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8c9ba91becaf0c51be4668a7184afab15dfc02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8c9ba91becaf0c51be4668a7184afab15dfc02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8c9ba91becaf0c51be4668a7184afab15dfc02/comments", "author": null, "committer": null, "parents": [{"sha": "4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae9b5f55b9f7eaf80f4a6613e7752988eb757ee"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "09fc824c092f779cf06bd3f8177e663e044416dc", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8c9ba91becaf0c51be4668a7184afab15dfc02/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8c9ba91becaf0c51be4668a7184afab15dfc02/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8d8c9ba91becaf0c51be4668a7184afab15dfc02", "patch": "@@ -4240,11 +4240,9 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t    constant = pos, var = integer_zero_node;\n \n \t  *pbitpos += TREE_INT_CST_LOW (constant);\n-\n-\t  if (var)\n-\t    offset = size_binop (PLUS_EXPR, offset,\n-\t\t\t\t size_binop (EXACT_DIV_EXPR, var,\n-\t\t\t\t\t     size_int (BITS_PER_UNIT)));\n+\t  offset = size_binop (PLUS_EXPR, offset,\n+\t\t\t       size_binop (EXACT_DIV_EXPR, var,\n+\t\t\t\t\t   size_int (BITS_PER_UNIT)));\n \t}\n \n       else if (TREE_CODE (exp) == ARRAY_REF)\n@@ -4296,20 +4294,6 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n       exp = TREE_OPERAND (exp, 0);\n     }\n \n-  /* If this was a bit-field, see if there is a mode that allows direct\n-     access in case EXP is in memory.  */\n-  if (mode == VOIDmode && *pbitsize != 0 && *pbitpos % *pbitsize == 0)\n-    {\n-      mode = mode_for_size (*pbitsize,\n-\t\t\t    (TYPE_MODE (TREE_TYPE (orig_exp)) == BLKmode\n-\t\t\t     ? MODE_INT\n-\t\t\t     : GET_MODE_CLASS (TYPE_MODE\n-\t\t\t\t\t       (TREE_TYPE (orig_exp)))),\n-\t\t\t    0);\n-      if (mode == BLKmode)\n-\tmode = VOIDmode;\n-    }\n-\n   if (integer_zerop (offset))\n     offset = 0;\n "}]}