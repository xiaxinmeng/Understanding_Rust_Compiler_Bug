{"sha": "8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a", "node_id": "C_kwDOANBUbNoAKDhjYjc0OGEzMWNkOGM3YWM5Yzg4YjZhYmMzOGNlMDc3ZGQ0NjJhN2E", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-04T19:26:44Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-04T19:32:11Z"}, "message": "rs6000: Clean up ISA 3.1 documentation [PR100808]\n\nDue to a pasto error in the documentation, vec_replace_unaligned was\nimplemented with the same function prototypes as vec_replace_elt.  It was\nintended that vec_replace_unaligned always specify output vectors as having\ntype vector unsigned char, to emphasize that elements are potentially\nmisaligned by this built-in function.  This patch corrects the\nmisimplementation.\n\n2022-02-04  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\tPR target/100808\n\t* doc/extend.texi (Basic PowerPC Built-in Functions Available on ISA\n\t3.1): Provide consistent type names.  Remove unnecessary semicolons.\n\tFix bad line breaks.", "tree": {"sha": "bea5642ff048c7c6943dc442954f249ad601f114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea5642ff048c7c6943dc442954f249ad601f114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a/comments", "author": null, "committer": null, "parents": [{"sha": "8d6fffc4bcd4afa0beb0efad4f3b95394aa15618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6fffc4bcd4afa0beb0efad4f3b95394aa15618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6fffc4bcd4afa0beb0efad4f3b95394aa15618"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "cb1b2b98ca8524fd826bcc185dec74920ec5f66c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8cb748a31cd8c7ac9c88b6abc38ce077dd462a7a", "patch": "@@ -18276,74 +18276,89 @@ The following built-in functions are available on Linux 64-bit systems\n that use a future architecture instruction set (@option{-mcpu=power10}):\n \n @smallexample\n-@exdent unsigned long long int\n-@exdent __builtin_cfuged (unsigned long long int, unsigned long long int)\n+@exdent unsigned long long\n+@exdent __builtin_cfuged (unsigned long long, unsigned long long)\n @end smallexample\n Perform a 64-bit centrifuge operation, as if implemented by the\n @code{cfuged} instruction.\n @findex __builtin_cfuged\n \n @smallexample\n-@exdent unsigned long long int\n-@exdent __builtin_cntlzdm (unsigned long long int, unsigned long long int)\n+@exdent unsigned long long\n+@exdent __builtin_cntlzdm (unsigned long long, unsigned long long)\n @end smallexample\n Perform a 64-bit count leading zeros operation under mask, as if\n implemented by the @code{cntlzdm} instruction.\n @findex __builtin_cntlzdm\n \n @smallexample\n-@exdent unsigned long long int\n-@exdent __builtin_cnttzdm (unsigned long long int, unsigned long long int)\n+@exdent unsigned long long\n+@exdent __builtin_cnttzdm (unsigned long long, unsigned long long)\n @end smallexample\n Perform a 64-bit count trailing zeros operation under mask, as if\n implemented by the @code{cnttzdm} instruction.\n @findex __builtin_cnttzdm\n \n @smallexample\n-@exdent unsigned long long int\n-@exdent __builtin_pdepd (unsigned long long int, unsigned long long int)\n+@exdent unsigned long long\n+@exdent __builtin_pdepd (unsigned long long, unsigned long long)\n @end smallexample\n Perform a 64-bit parallel bits deposit operation, as if implemented by the\n @code{pdepd} instruction.\n @findex __builtin_pdepd\n \n @smallexample\n-@exdent unsigned long long int\n-@exdent __builtin_pextd (unsigned long long int, unsigned long long int)\n+@exdent unsigned long long\n+@exdent __builtin_pextd (unsigned long long, unsigned long long)\n @end smallexample\n Perform a 64-bit parallel bits extract operation, as if implemented by the\n @code{pextd} instruction.\n @findex __builtin_pextd\n \n @smallexample\n-@exdent vector signed __int128 vsx_xl_sext (signed long long, signed char *);\n-@exdent vector signed __int128 vsx_xl_sext (signed long long, signed short *);\n-@exdent vector signed __int128 vsx_xl_sext (signed long long, signed int *);\n-@exdent vector signed __int128 vsx_xl_sext (signed long long, signed long long *);\n-@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned char *);\n-@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned short *);\n-@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned int *);\n-@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned long long *);\n+@exdent vector signed __int128 vsx_xl_sext (signed long long, signed char *)\n+\n+@exdent vector signed __int128 vsx_xl_sext (signed long long, signed short *)\n+\n+@exdent vector signed __int128 vsx_xl_sext (signed long long, signed int *)\n+\n+@exdent vector signed __int128 vsx_xl_sext (signed long long, signed long long *)\n+\n+@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned char *)\n+\n+@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned short *)\n+\n+@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned int *)\n+\n+@exdent vector unsigned __int128 vsx_xl_zext (signed long long, unsigned long long *)\n @end smallexample\n \n Load (and sign extend) to an __int128 vector, as if implemented by the ISA 3.1\n-@code{lxvrbx} @code{lxvrhx} @code{lxvrwx} @code{lxvrdx} instructions.\n+@code{lxvrbx}, @code{lxvrhx}, @code{lxvrwx}, and  @code{lxvrdx} instructions.\n @findex vsx_xl_sext\n @findex vsx_xl_zext\n \n @smallexample\n-@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed char *);\n-@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed short *);\n-@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed int *);\n-@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed long long *);\n-@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned char *);\n-@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned short *);\n-@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned int *);\n-@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned long long *);\n+@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed char *)\n+\n+@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed short *)\n+\n+@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed int *)\n+\n+@exdent void vec_xst_trunc (vector signed __int128, signed long long, signed long long *)\n+\n+@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned char *)\n+\n+@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned short *)\n+\n+@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned int *)\n+\n+@exdent void vec_xst_trunc (vector unsigned __int128, signed long long, unsigned long long *)\n @end smallexample\n \n Truncate and store the rightmost element of a vector, as if implemented by the\n-ISA 3.1 @code{stxvrbx} @code{stxvrhx} @code{stxvrwx} @code{stxvrdx} instructions.\n+ISA 3.1 @code{stxvrbx}, @code{stxvrhx}, @code{stxvrwx}, and @code{stxvrdx}\n+instructions.\n @findex vec_xst_trunc\n \n @node PowerPC AltiVec/VSX Built-in Functions"}]}