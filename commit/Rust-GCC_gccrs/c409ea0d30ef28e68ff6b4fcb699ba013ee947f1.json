{"sha": "c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwOWVhMGQzMGVmMjhlNjhmZjZiNGZjYjY5OWJhMDEzZWU5NDdmMQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2003-04-17T23:18:58Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2003-04-17T23:18:58Z"}, "message": "toplev.c (target_options): Add value field.\n\n* toplev.c (target_options): Add value field.\n(set_target_switch): Handle target options with\tvalues.\n* doc/tm.texi: Document how fixed vs variable target\noptions work.\n* config/alpha/alpha.h, config/arc/arc.h, config/avr/avr.h,\nconfig/c4x/c4x.h, config/cris/aout.h, config/cris/cris.h,\nconfig/d30v/d30v.h, config/dsp16xx/dsp16xx.h,\nconfig/frv/frv.h, config/i386/i386.h, config/ia64/ia64.h,\nconfig/m32r/m32r.h, config/m68hc11/m68hc11.h,\nconfig/m68k/m68k.h, config/m88k/m88k.h, config/mcore/mcore.h,\nconfig/mips/mips.h, config/mmix/mmix.h, config/pa/pa.h,\nconfig/rs6000/rs6000.h, config/rs6000/sysv4.h,\nconfig/s390/s390.h, config/sparc/sparc.h, config/v850/v850.h:\nAdd value initializer to target options.\n\nFrom-SVN: r65756", "tree": {"sha": "432d0630d4f7f8857bbaeabf962e23436cceb28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/432d0630d4f7f8857bbaeabf962e23436cceb28b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/comments", "author": null, "committer": null, "parents": [{"sha": "368018184c55e6e262dc1acfe8b21a674b170e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368018184c55e6e262dc1acfe8b21a674b170e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368018184c55e6e262dc1acfe8b21a674b170e75"}], "stats": {"total": 301, "additions": 185, "deletions": 116}, "files": [{"sha": "71135aeb6889ed49df0b7740b14fb3434f4e55e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -1,3 +1,20 @@\n+2003-04-17  DJ Delorie  <dj@redhat.com>\n+\n+\t* toplev.c (target_options): Add value field.\n+\t(set_target_switch): Handle target options with\tvalues.\n+\t* doc/tm.texi: Document how fixed vs variable target\n+\toptions work.\n+\t* config/alpha/alpha.h, config/arc/arc.h, config/avr/avr.h,\n+\tconfig/c4x/c4x.h, config/cris/aout.h, config/cris/cris.h,\n+\tconfig/d30v/d30v.h, config/dsp16xx/dsp16xx.h,\n+\tconfig/frv/frv.h, config/i386/i386.h, config/ia64/ia64.h,\n+\tconfig/m32r/m32r.h, config/m68hc11/m68hc11.h,\n+\tconfig/m68k/m68k.h, config/m88k/m88k.h, config/mcore/mcore.h,\n+\tconfig/mips/mips.h, config/mmix/mmix.h, config/pa/pa.h,\n+\tconfig/rs6000/rs6000.h, config/rs6000/sysv4.h,\n+\tconfig/s390/s390.h, config/sparc/sparc.h, config/v850/v850.h:\n+\tAdd value initializer to target options.\n+\n 2003-04-07  Loren James Rittle  <ljrittle@acm.org>\n \n \t* cpppch.c (cpp_valid_state): Unconditionally initialize nl."}, {"sha": "32453cf13514bebbaa58ebedf13189a888b89071", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -350,19 +350,19 @@ extern const char *alpha_tls_size_string; /* For -mtls-size= */\n #define TARGET_OPTIONS\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   {\"cpu=\",\t\t&alpha_cpu_string,\t\t\\\n-   N_(\"Use features of and schedule given CPU\")},\t\\\n+   N_(\"Use features of and schedule given CPU\"), 0},\t\\\n   {\"tune=\",\t\t&alpha_tune_string,\t\t\\\n-   N_(\"Schedule given CPU\")},\t\t\t\t\\\n+   N_(\"Schedule given CPU\"), 0},\t\t\t\\\n   {\"fp-rounding-mode=\",\t&alpha_fprm_string,\t\t\\\n-   N_(\"Control the generated fp rounding mode\")},\t\\\n+   N_(\"Control the generated fp rounding mode\"), 0},\t\\\n   {\"fp-trap-mode=\",\t&alpha_fptm_string,\t\t\\\n-   N_(\"Control the IEEE trap mode\")},\t\t\t\\\n+   N_(\"Control the IEEE trap mode\"), 0},\t\t\\\n   {\"trap-precision=\",\t&alpha_tp_string,\t\t\\\n-   N_(\"Control the precision given to fp exceptions\")},\t\\\n+   N_(\"Control the precision given to fp exceptions\"), 0},\t\\\n   {\"memory-latency=\",\t&alpha_mlat_string,\t\t\\\n-   N_(\"Tune expected memory latency\")},\t\t\t\\\n+   N_(\"Tune expected memory latency\"), 0},\t\t\\\n   {\"tls-size=\",\t\t&alpha_tls_size_string,\t\t\\\n-   N_(\"Specify bit size of immediate TLS offsets\")},\t\\\n+   N_(\"Specify bit size of immediate TLS offsets\"), 0},\t\\\n }\n \n /* This macro defines names of additional specifications to put in the"}, {"sha": "62c221dd8633b3b82970fa868b6aa87dcc4ae93b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -138,11 +138,11 @@ extern const char *arc_cpu_string;\n extern const char *arc_text_string,*arc_data_string,*arc_rodata_string;\n \n #define TARGET_OPTIONS \\\n-{\t\t\t\t\t\t\\\n-  { \"cpu=\",\t&arc_cpu_string\t\t},\t\\\n-  { \"text=\",\t&arc_text_string\t},\t\\\n-  { \"data=\",\t&arc_data_string\t},\t\\\n-  { \"rodata=\",\t&arc_rodata_string\t},\t\\\n+{\t\t\t\t\t\\\n+  { \"cpu=\",\t&arc_cpu_string, 0},\t\\\n+  { \"text=\",\t&arc_text_string, 0},\t\\\n+  { \"data=\",\t&arc_data_string, 0},\t\\\n+  { \"rodata=\",\t&arc_rodata_string, 0},\t\\\n }\n \n /* Which cpu we're compiling for.  */"}, {"sha": "5ee4cd1b59ac43340dd7dfc35b88806f176cb7dc", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -105,8 +105,8 @@ extern int avr_asm_only_p;\n #define AVR_ENHANCED (avr_enhanced_p)\n \n #define TARGET_OPTIONS {\t\t\t\t\t\t      \\\n- { \"init-stack=\", &avr_init_stack, N_(\"Specify the initial stack address\") }, \\\n- { \"mcu=\", &avr_mcu_name, N_(\"Specify the MCU name\") } }\n+ { \"init-stack=\", &avr_init_stack, N_(\"Specify the initial stack address\"), 0}, \\\n+ { \"mcu=\", &avr_mcu_name, N_(\"Specify the MCU name\"), 0} }\n \n #define TARGET_VERSION fprintf (stderr, \" (GNU assembler syntax)\");\n /* This macro is a C statement to print on `stderr' a string"}, {"sha": "e414a241342700f01609abb72328aa855bfeffc5", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -328,9 +328,9 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n { {\"rpts=\", &c4x_rpts_cycles_string,\t\t\t\t\\\n-   N_(\"Specify maximum number of iterations for RPTS\") },\t\\\n+   N_(\"Specify maximum number of iterations for RPTS\"), 0},\t\\\n   {\"cpu=\", &c4x_cpu_version_string,\t\t\t\t\\\n-   N_(\"Select CPU to generate code for\") } }\n+   N_(\"Select CPU to generate code for\"), 0} }\n \n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro"}, {"sha": "9939dbac54f591a94755a1cb18b07df733531d47", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -112,7 +112,7 @@ Boston, MA 02111-1307, USA.  */\n #undef CRIS_SUBTARGET_LONG_OPTIONS\n #define CRIS_SUBTARGET_LONG_OPTIONS \\\n   {\"elinux-stacksize=\", &cris_elinux_stacksize_str,\t\t\t\\\n-   N_(\"For elinux, request a specified stack-size for this program\")},\t\\\n+   N_(\"For elinux, request a specified stack-size for this program\"), 0},\t\\\n \n #undef CRIS_SUBTARGET_VERSION\n #define CRIS_SUBTARGET_VERSION \" - a.out\""}, {"sha": "fceee0fbbb3a23f636f95af34953c69dab2220ae", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -427,15 +427,15 @@ extern int target_flags;\n #define TARGET_HAS_MUL_INSNS (cris_cpu_version >= CRIS_CPU_NG)\n \n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n- {{\"cpu=\", &cris_cpu_str, \"\"},\t\t\t\t\t\t\\\n+ {{\"cpu=\", &cris_cpu_str, \"\", 0},\t\t\t\t\t\\\n   {\"arch=\", &cris_cpu_str,\t\t\t\t\t\t\\\n-   N_(\"Generate code for the specified chip or CPU version\")},\t\t\\\n+   N_(\"Generate code for the specified chip or CPU version\"), 0},\t\\\n   {\"tune=\", &cris_tune_str,\t\t\t\t\t\t\\\n-   N_(\"Tune alignment for the specified chip or CPU version\")},\t\t\\\n+   N_(\"Tune alignment for the specified chip or CPU version\"), 0},\t\\\n   {\"max-stackframe=\", &cris_max_stackframe_str,\t\t\t\t\\\n-   N_(\"Warn when a stackframe is larger than the specified size\")},\t\\\n+   N_(\"Warn when a stackframe is larger than the specified size\"), 0},\t\\\n   CRIS_SUBTARGET_LONG_OPTIONS\t\t\t\t\t\t\\\n-  {\"ax-stackframe=\", &cris_max_stackframe_str, \"\"}}\n+  {\"ax-stackframe=\", &cris_max_stackframe_str, \"\", 0} }\n \n #define CRIS_SUBTARGET_LONG_OPTIONS\n "}, {"sha": "aa113d7cbcc0102964b7653530473e7ae29c0648", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -146,10 +146,10 @@ extern int target_flags;\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   {\"branch-cost=\",  &d30v_branch_cost_string,\t\t\t\t\\\n-     N_(\"Change the branch costs within the compiler\") },\t\t\\\n+     N_(\"Change the branch costs within the compiler\"), 0},\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   {\"cond-exec=\",    &d30v_cond_exec_string,\t\t\t\t\\\n-     N_(\"Change the threshold for conversion to conditional execution\") }, \\\n+     N_(\"Change the threshold for conversion to conditional execution\"), 0}, \\\n }\n \n #define TARGET_VERSION fprintf (stderr, \" d30v\")"}, {"sha": "9e22afbf438f159ec4207bff908a59aed7dfbe19", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -269,15 +269,15 @@ extern int target_flags;\n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   { \"text=\",\t&text_seg_name,\t\t\t\t        \\\n-    N_(\"Specify alternate name for text section\") },            \\\n+    N_(\"Specify alternate name for text section\"), 0},          \\\n   { \"data=\",\t&data_seg_name,\t\t\t\t        \\\n-    N_(\"Specify alternate name for data section\") },            \\\n+    N_(\"Specify alternate name for data section\"), 0},          \\\n   { \"bss=\",\t&bss_seg_name,\t\t\t\t        \\\n-    N_(\"Specify alternate name for bss section\") },             \\\n+    N_(\"Specify alternate name for bss section\"), 0},           \\\n   { \"const=\",   &const_seg_name,                                \\\n-    N_(\"Specify alternate name for constant section\") },        \\\n+    N_(\"Specify alternate name for constant section\"), 0},      \\\n   { \"chip=\",    &chip_name,                                     \\\n-    N_(\"Specify alternate name for dsp16xx chip\") },            \\\n+    N_(\"Specify alternate name for dsp16xx chip\"), 0},          \\\n }\n \n /* Sometimes certain combinations of command options do not make sense"}, {"sha": "56d3ec4508b108f1cf4c38ff127b7bb30cf27d41", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -486,13 +486,13 @@ extern int target_flags;\n \t \"Specify the size of the short data section\"  } }\n \n    This declaration is optional.  */\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t    \\\n-{\t\t\t\t\t\t\t\t\t    \\\n-  { \"cpu=\",\t\t&frv_cpu_string,\t \"Set cpu type\" },\t    \\\n-  { \"branch-cost=\",\t&frv_branch_cost_string, \"Internal debug switch\" }, \\\n-  { \"cond-exec-insns=\", &frv_condexec_insns_str, \"Internal debug switch\" }, \\\n-  { \"cond-exec-temps=\", &frv_condexec_temps_str, \"Internal debug switch\" }, \\\n-  { \"sched-lookahead=\", &frv_sched_lookahead_str,\"Internal debug switch\" }, \\\n+#define TARGET_OPTIONS\t\t\t\t\t\t\t      \\\n+{\t\t\t\t\t\t\t\t\t      \\\n+  { \"cpu=\",\t\t&frv_cpu_string,\t \"Set cpu type\", 0},\t      \\\n+  { \"branch-cost=\",\t&frv_branch_cost_string, \"Internal debug switch\", 0}, \\\n+  { \"cond-exec-insns=\", &frv_condexec_insns_str, \"Internal debug switch\", 0}, \\\n+  { \"cond-exec-temps=\", &frv_condexec_temps_str, \"Internal debug switch\", 0}, \\\n+  { \"sched-lookahead=\", &frv_sched_lookahead_str,\"Internal debug switch\", 0}, \\\n }\n \n /* This macro is a C statement to print on `stderr' a string describing the"}, {"sha": "7c43c6b1f9ac11c02d6d8ad65b4d777faa92f55e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -433,34 +433,34 @@ extern int x86_prefetch_sse;\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n { { \"tune=\",\t\t&ix86_tune_string,\t\t\t\\\n-    N_(\"Schedule code for given CPU\")},\t\t\t\t\\\n+    N_(\"Schedule code for given CPU\"), 0},\t\t\t\\\n   { \"fpmath=\",\t\t&ix86_fpmath_string,\t\t\t\\\n-    N_(\"Generate floating point mathematics using given instruction set\")},\\\n+    N_(\"Generate floating point mathematics using given instruction set\"), 0},\\\n   { \"arch=\",\t\t&ix86_arch_string,\t\t\t\\\n-    N_(\"Generate code for given CPU\")},\t\t\t\t\\\n+    N_(\"Generate code for given CPU\"), 0},\t\t\t\\\n   { \"regparm=\",\t\t&ix86_regparm_string,\t\t\t\\\n-    N_(\"Number of registers used to pass integer arguments\") },\t\\\n+    N_(\"Number of registers used to pass integer arguments\"), 0},\\\n   { \"align-loops=\",\t&ix86_align_loops_string,\t\t\\\n-    N_(\"Loop code aligned to this power of 2\") },\t\t\\\n+    N_(\"Loop code aligned to this power of 2\"), 0},\t\t\\\n   { \"align-jumps=\",\t&ix86_align_jumps_string,\t\t\\\n-    N_(\"Jump targets are aligned to this power of 2\") },\t\\\n+    N_(\"Jump targets are aligned to this power of 2\"), 0},\t\\\n   { \"align-functions=\",\t&ix86_align_funcs_string,\t\t\\\n-    N_(\"Function starts are aligned to this power of 2\") },\t\\\n+    N_(\"Function starts are aligned to this power of 2\"), 0},\t\\\n   { \"preferred-stack-boundary=\",\t\t\t\t\\\n     &ix86_preferred_stack_boundary_string,\t\t\t\\\n-    N_(\"Attempt to keep stack aligned to this power of 2\") },\t\\\n+    N_(\"Attempt to keep stack aligned to this power of 2\"), 0},\t\\\n   { \"branch-cost=\",\t&ix86_branch_cost_string,\t\t\\\n-    N_(\"Branches are this expensive (1-5, arbitrary units)\") },\t\\\n+    N_(\"Branches are this expensive (1-5, arbitrary units)\"), 0},\\\n   { \"cmodel=\", &ix86_cmodel_string,\t\t\t\t\\\n-    N_(\"Use given x86-64 code model\") },\t\t\t\\\n+    N_(\"Use given x86-64 code model\"), 0},\t\t\t\\\n   { \"debug-arg\", &ix86_debug_arg_string,\t\t\t\\\n-    \"\" /* Undocumented. */ },\t\t\t\t\t\\\n+    \"\" /* Undocumented. */, 0},\t\t\t\t\t\\\n   { \"debug-addr\", &ix86_debug_addr_string,\t\t\t\\\n-    \"\" /* Undocumented. */ },\t\t\t\t\t\\\n+    \"\" /* Undocumented. */, 0},\t\t\t\t\t\\\n   { \"asm=\", &ix86_asm_string,\t\t\t\t\t\\\n-    N_(\"Use given assembler dialect\") },\t\t\t\\\n+    N_(\"Use given assembler dialect\"), 0},\t\t\t\\\n   { \"tls-dialect=\", &ix86_tls_dialect_string,\t\t\t\\\n-    N_(\"Use given thread-local storage dialect\") },\t\t\\\n+    N_(\"Use given thread-local storage dialect\"), 0},\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n }\n "}, {"sha": "1869e67646ec332eec513b7695c9bb3ffeac189e", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -238,11 +238,11 @@ extern const char *ia64_tune_string;\n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"fixed-range=\", \t&ia64_fixed_range_string,\t\t\t\\\n-      N_(\"Specify range of registers to make fixed\")},\t\t\t\\\n+      N_(\"Specify range of registers to make fixed\"), 0},\t\t\\\n   { \"tls-size=\",\t&ia64_tls_size_string,\t\t\t\t\\\n-      N_(\"Specify bit size of immediate TLS offsets\")},\t\t\t\\\n+      N_(\"Specify bit size of immediate TLS offsets\"), 0},\t\t\\\n   { \"tune=\",\t\t&ia64_tune_string,\t\t\t\t\\\n-      N_(\"Schedule code for given CPU\")},\t\t\t\t\\\n+      N_(\"Schedule code for given CPU\"), 0},\t\t\t\t\\\n }\n \n /* Sometimes certain combinations of command options do not make sense on a"}, {"sha": "744eb94a02f36a2b4ac9662639d801287c3853d9", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -269,9 +269,9 @@ extern const char * m32r_sdata_string;\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"model=\", & m32r_model_string,\t\t\t\t\t\\\n-    N_(\"Code size: small, medium or large\") },\t\t\t\t\\\n+    N_(\"Code size: small, medium or large\"), 0},\t\t\t\\\n   { \"sdata=\", & m32r_sdata_string,\t\t\t\t\t\\\n-    N_(\"Small data area: none, sdata, use\") }\t\t\t\t\\\n+    N_(\"Small data area: none, sdata, use\"), 0}\t\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}, {"sha": "0801972c176526cffa8945016372f8275d6514f9", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -218,9 +218,9 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n { { \"reg-alloc=\",\t&m68hc11_reg_alloc_order,                       \\\n-    N_(\"Specify the register allocation order\")},\t\t\t\\\n+    N_(\"Specify the register allocation order\"), 0},\t\t\t\\\n   { \"soft-reg-count=\",\t&m68hc11_soft_reg_count,                        \\\n-    N_(\"Indicate the number of soft registers available\") },\t\t\\\n+    N_(\"Indicate the number of soft registers available\"), 0},\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}, {"sha": "42cabaf22af9cddafaf1366a6207f9c2cc855952", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -260,11 +260,11 @@ extern int target_flags;\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n { { \"align-loops=\",\t&m68k_align_loops_string,\t\t\t\\\n-    N_(\"Loop code aligned to this power of 2\") },\t\t\t\\\n+    N_(\"Loop code aligned to this power of 2\"), 0},\t\t\t\\\n   { \"align-jumps=\",\t&m68k_align_jumps_string,\t\t\t\\\n-    N_(\"Jump targets are aligned to this power of 2\") },\t\t\\\n+    N_(\"Jump targets are aligned to this power of 2\"), 0},\t\t\\\n   { \"align-functions=\",\t&m68k_align_funcs_string,\t\t\t\\\n-    N_(\"Function starts are aligned to this power of 2\") },\t\t\\\n+    N_(\"Function starts are aligned to this power of 2\"), 0},\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}, {"sha": "5ab1e8e408b2b5f6d79ebc9277a986515c001ce1", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -249,8 +249,8 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n \n /* Macro to define table for command options with values.  */\n \n-#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data }, \\\n-\t\t\t { \"version-\", &m88k_version } }\n+#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data, 0}, \\\n+\t\t\t { \"version-\", &m88k_version, 0} }\n \n /* Do any checking or such that is needed after processing the -m switches.  */\n "}, {"sha": "b8dce6a4c3996a9d9685b90c26366eaddefc5498", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -176,7 +176,7 @@ extern const char * mcore_stack_increment_string;\n #define\tTARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   {\"stack-increment=\", & mcore_stack_increment_string,\t\t\t\\\n-     N_(\"Maximum amount for a single stack increment operation\")}\t\\\n+     N_(\"Maximum amount for a single stack increment operation\"), 0}\t\\\n }\n \n #ifndef CC1_SPEC"}, {"sha": "c56340e1e638c19976f61149ba68819778cccf3d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -756,21 +756,21 @@ extern void\t\tsbss_section PARAMS ((void));\n {\t\t\t\t\t\t\t\t\t\\\n   SUBTARGET_TARGET_OPTIONS\t\t\t\t\t\t\\\n   { \"tune=\",    &mips_tune_string,\t\t\t                \\\n-      N_(\"Specify CPU for scheduling purposes\")},                       \\\n+      N_(\"Specify CPU for scheduling purposes\"), 0},                    \\\n   { \"arch=\",    &mips_arch_string,                                      \\\n-      N_(\"Specify CPU for code generation purposes\")},                  \\\n+      N_(\"Specify CPU for code generation purposes\"), 0},               \\\n   { \"abi=\", &mips_abi_string,\t\t\t\t\t\t\\\n-      N_(\"Specify an ABI\")},\t\t\t\t\t\t\\\n+      N_(\"Specify an ABI\"), 0},\t\t\t\t\t\t\\\n   { \"ips\",\t&mips_isa_string,\t\t\t\t\t\\\n-      N_(\"Specify a Standard MIPS ISA\")},\t\t\t\t\\\n+      N_(\"Specify a Standard MIPS ISA\"), 0},\t\t\t\t\\\n   { \"entry\",\t&mips_entry_string,\t\t\t\t\t\\\n-      N_(\"Use mips16 entry/exit psuedo ops\")},\t\t\t\t\\\n+      N_(\"Use mips16 entry/exit psuedo ops\"), 0},\t\t\t\\\n   { \"no-mips16\", &mips_no_mips16_string,\t\t\t\t\\\n-      N_(\"Don't use MIPS16 instructions\")},\t\t\t\t\\\n+      N_(\"Don't use MIPS16 instructions\"), 0},\t\t\t\t\\\n   { \"no-flush-func\", &mips_cache_flush_func,\t\t\t\t\\\n-      N_(\"Don't call any cache flush functions\")},\t\t\t\\\n+      N_(\"Don't call any cache flush functions\"), 0},\t\t\t\\\n   { \"flush-func=\", &mips_cache_flush_func,\t\t\t\t\\\n-      N_(\"Specify cache flush function\")},\t\t\t\t\\\n+      N_(\"Specify cache flush function\"), 0},\t\t\t\t\\\n }\n \n /* This is meant to be redefined in the host dependent files.  */"}, {"sha": "3986b865eebfa6bea52388420108aae533542a18", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -129,9 +129,9 @@ extern const char *mmix_cc1_ignored_option;\n \n #define TARGET_OPTIONS\t\t\t\t\t\\\n    {{\"set-program-start=\", &mmix_cc1_ignored_option,\t\\\n-  N_(\"Set start-address of the program\") },\t\t\\\n+  N_(\"Set start-address of the program\"), 0},\t\t\\\n     {\"set-data-start=\", &mmix_cc1_ignored_option,\t\\\n-  N_(\"Set start-address of data\")}}\n+  N_(\"Set start-address of data\"), 0} }\n \n /* FIXME: There's no provision for profiling here.  */\n #define STARTFILE_SPEC  \\"}, {"sha": "5dbfe57a7c6e0d0bb11533b5ee73e8f9eaf601e9", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -307,9 +307,9 @@ extern int target_flags;\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"schedule=\",\t\t&pa_cpu_string,\t\t\t\t\\\n-    N_(\"Specify CPU for scheduling purposes\") },\t\t\t\\\n+    N_(\"Specify CPU for scheduling purposes\"), 0},\t\t\t\\\n   { \"arch=\",\t\t\t&pa_arch_string,\t\t\t\\\n-    N_(\"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\") }\\\n+    N_(\"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\"), 0}\\\n }\n \n /* Specify the dialect of assembler to use.  New mnemonics is dialect one"}, {"sha": "b566619e7a917b7fbb9eca72c53f208655c49683", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -376,26 +376,26 @@ extern enum processor_type rs6000_cpu;\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n    {\"cpu=\",  &rs6000_select[1].string,\t\t\t\t\t\\\n-    N_(\"Use features of and schedule code for given CPU\") },\t\t\\\n+    N_(\"Use features of and schedule code for given CPU\"), 0},\t\t\\\n    {\"tune=\", &rs6000_select[2].string,\t\t\t\t\t\\\n-    N_(\"Schedule code for given CPU\") },\t\t\t\t\\\n-   {\"debug=\", &rs6000_debug_name, N_(\"Enable debug output\") },\t\t\\\n+    N_(\"Schedule code for given CPU\"), 0},\t\t\t\t\\\n+   {\"debug=\", &rs6000_debug_name, N_(\"Enable debug output\"), 0},\t\\\n    {\"traceback=\", &rs6000_traceback_name,\t\t\t\t\\\n-    N_(\"Select full, part, or no traceback table\") },\t\t\t\\\n-   {\"abi=\", &rs6000_abi_string, N_(\"Specify ABI to use\") },\t\t\\\n+    N_(\"Select full, part, or no traceback table\"), 0},\t\t\t\\\n+   {\"abi=\", &rs6000_abi_string, N_(\"Specify ABI to use\"), 0},\t\t\\\n    {\"long-double-\", &rs6000_long_double_size_string,\t\t\t\\\n-    N_(\"Specify size of long double (64 or 128 bits)\") },\t\t\\\n+    N_(\"Specify size of long double (64 or 128 bits)\"), 0},\t\t\\\n    {\"isel=\", &rs6000_isel_string,                                       \\\n-    N_(\"Specify yes/no if isel instructions should be generated\") },    \\\n+    N_(\"Specify yes/no if isel instructions should be generated\"), 0},  \\\n    {\"spe=\", &rs6000_spe_string,                                         \\\n-    N_(\"Specify yes/no if SPE SIMD instructions should be generated\") },\\\n+    N_(\"Specify yes/no if SPE SIMD instructions should be generated\"), 0},\\\n    {\"float-gprs=\", &rs6000_float_gprs_string,                           \\\n-    N_(\"Specify yes/no if using floating point in the GPRs\") },         \\\n-   {\"vrsave=\", &rs6000_altivec_vrsave_string,                         \\\n-    N_(\"Specify yes/no if VRSAVE instructions should be generated for AltiVec\") }, \\\n+    N_(\"Specify yes/no if using floating point in the GPRs\"), 0},       \\\n+   {\"vrsave=\", &rs6000_altivec_vrsave_string,                           \\\n+    N_(\"Specify yes/no if VRSAVE instructions should be generated for AltiVec\"), 0}, \\\n    {\"longcall\", &rs6000_longcall_switch,\t\t\t\t\\\n-    N_(\"Avoid all range limits on call instructions\") },\t\t\\\n-   {\"no-longcall\", &rs6000_longcall_switch, \"\" },\t\t\t\\\n+    N_(\"Avoid all range limits on call instructions\"), 0},\t\t\\\n+   {\"no-longcall\", &rs6000_longcall_switch, \"\", 0},\t\t\t\\\n    SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n "}, {"sha": "3e7d711942eb59020dcefd614f766795aeae22cc", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -82,9 +82,9 @@ extern const char *rs6000_sdata_name;\n \n /* Override rs6000.h definition.  */\n #undef\tSUBTARGET_OPTIONS\n-#define\tSUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"call-\",  &rs6000_abi_name, N_(\"Select ABI calling convention\") },\t\\\n-  { \"sdata=\", &rs6000_sdata_name, N_(\"Select method for sdata handling\") }\n+#define\tSUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n+  { \"call-\",  &rs6000_abi_name, N_(\"Select ABI calling convention\"), 0},\t\\\n+  { \"sdata=\", &rs6000_sdata_name, N_(\"Select method for sdata handling\"), 0}\n \n /* Max # of bytes for variables to automatically be put into the .sdata\n    or .sdata2 sections.  */"}, {"sha": "b5f40554e0e56b539d5eaee21ec2887b501f2cba", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -114,9 +114,9 @@ extern int target_flags;\n \n #define TARGET_OPTIONS                                          \\\n { { \"tune=\",            &s390_tune_string,                      \\\n-    N_(\"Schedule code for given CPU\")},                         \\\n+    N_(\"Schedule code for given CPU\"), 0},                      \\\n   { \"arch=\",            &s390_arch_string,                      \\\n-    N_(\"Generate code for given CPU\")},                         \\\n+    N_(\"Generate code for given CPU\"), 0},                      \\\n }\n \n /* Target version string.  Overridden by the OS header.  */"}, {"sha": "61e6f94fffa62467e90aca47b1cc7ca9396c2c14", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -632,11 +632,11 @@ extern enum processor_type sparc_cpu;\n #define TARGET_OPTIONS \\\n {\t\t\t\t\t\t\t\t\\\n   { \"cpu=\",  &sparc_select[1].string,\t\t\t\t\\\n-    N_(\"Use features of and schedule code for given CPU\") },\t\\\n+    N_(\"Use features of and schedule code for given CPU\"), 0},\t\\\n   { \"tune=\", &sparc_select[2].string,\t\t\t\t\\\n-    N_(\"Schedule code for given CPU\") },\t\t\t\\\n+    N_(\"Schedule code for given CPU\"), 0},\t\t\t\\\n   { \"cmodel=\", &sparc_cmodel_string,\t\t\t\t\\\n-    N_(\"Use given SPARC code model\") },\t\t\t\t\\\n+    N_(\"Use given SPARC code model\"), 0},\t\t\t\\\n   SUBTARGET_OPTIONS \t\t\t\t\t\t\\\n }\n "}, {"sha": "b18d85afceda9e7f91a17d183e7a082b7005847e", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -220,14 +220,14 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"tda=\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value,\t\t\\\n-      N_(\"Set the max size of data eligible for the TDA area\")  },\t\\\n-  { \"tda-\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value, \"\" },\t\\\n+      N_(\"Set the max size of data eligible for the TDA area\"), 0},\t\\\n+  { \"tda-\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value, \"\", 0},\t\\\n   { \"sda=\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \t\t\\\n-      N_(\"Set the max size of data eligible for the SDA area\")  },\t\\\n-  { \"sda-\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \"\" },\t\\\n+      N_(\"Set the max size of data eligible for the SDA area\"), 0},\t\\\n+  { \"sda-\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \"\", 0},\t\\\n   { \"zda=\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \t\t\\\n-      N_(\"Set the max size of data eligible for the ZDA area\")  },\t\\\n-  { \"zda-\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \"\" },\t\\\n+      N_(\"Set the max size of data eligible for the ZDA area\"), 0},\t\\\n+  { \"zda-\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \"\", 0},\t\\\n }\n \n /* Sometimes certain combinations of command options do not make"}, {"sha": "b824b1e7bfc4374cc539adf4d0071bcf440ec9e4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -761,17 +761,26 @@ This macro is similar to @code{TARGET_SWITCHES} but defines names of command\n options that have values.  Its definition is an initializer with a\n subgrouping for each command option.\n \n-Each subgrouping contains a string constant, that defines the fixed part\n-of the option name, the address of a variable, and a description string.\n-Non-empty description strings should be marked with @code{N_(@dots{})} for\n-@command{xgettext}.  Please do not mark empty strings because the empty\n-string is reserved by GNU gettext. @code{gettext(\"\")} returns the header entry\n-of the message catalog with meta information, not the empty string.\n+Each subgrouping contains a string constant, that defines the option\n+name, the address of a variable, a description string, and a value.\n+Non-empty description strings should be marked with @code{N_(@dots{})}\n+for @command{xgettext}.  Please do not mark empty strings because the\n+empty string is reserved by GNU gettext. @code{gettext(\"\")} returns the\n+header entry of the message catalog with meta information, not the empty\n+string.\n+\n+If the value listed in the table is @code{NULL}, then the variable, type\n+@code{char *}, is set to the variable part of the given option if the\n+fixed part matches.  In other words, if the first part of the option\n+matches what's in the table, the variable will be set to point to the\n+rest of the option.  This allows the user to specify a value for that\n+option.  The actual option name is made by appending @samp{-m} to the\n+specified name.  Again, each option should also be documented in\n+@file{invoke.texi}.\n \n-The variable, type @code{char *}, is set to the variable part of the\n-given option if the fixed part matches.  The actual option name is made\n-by appending @samp{-m} to the specified name.  Again, each option should\n-also be documented in @file{invoke.texi}.\n+If the value listed in the table is non-@code{NULL}, then the option\n+must match the option in the table exactly (with @samp{-m}), and the\n+variable is set to point to the value listed in the table.\n \n Here is an example which defines @option{-mshort-data-@var{number}}.  If the\n given option is @option{-mshort-data-512}, the variable @code{m88k_short_data}\n@@ -781,7 +790,38 @@ will be set to the string @code{\"512\"}.\n extern char *m88k_short_data;\n #define TARGET_OPTIONS \\\n  @{ @{ \"short-data-\", &m88k_short_data, \\\n-     N_(\"Specify the size of the short data section\") @} @}\n+     N_(\"Specify the size of the short data section\"), 0 @} @}\n+@end smallexample\n+\n+Here is an variant of the above that allows the user to also specify\n+just @option{-mshort-data} where a default of @code{\"64\"} is used.\n+\n+@smallexample\n+extern char *m88k_short_data;\n+#define TARGET_OPTIONS \\\n+ @{ @{ \"short-data-\", &m88k_short_data, \\\n+     N_(\"Specify the size of the short data section\"), 0 @} \\\n+    @{ \"short-data\", &m88k_short_data, \"\", \"64\" @},\n+    @}\n+@end smallexample\n+\n+Here is an example which defines @option{-mno-alu}, @option{-malu1}, and\n+@option{-malu2} as a three-state switch, along with suitable macros for\n+checking the state of the option (documentation is elided for brevity).\n+\n+@smallexample\n+[chip.c]\n+char *chip_alu = \"\"; /* Specify default here.  */\n+\n+[chip.h]\n+extern char *chip_alu;\n+#define TARGET_OPTIONS \\\n+  @{ @{ \"no-alu\", &chip_alu, \"\", \"\" @}, \\\n+     @{ \"alu1\", &chip_alu, \"\", \"1\" @}, \\\n+     @{ \"alu2\", &chip_alu, \"\", \"2\" @}, @}\n+#define TARGET_ALU (chip_alu[0] != '\\0')\n+#define TARGET_ALU1 (chip_alu[0] == '1')\n+#define TARGET_ALU2 (chip_alu[0] == '2')\n @end smallexample\n \n @findex TARGET_VERSION"}, {"sha": "49301fbf74fd08d5142e95bad5f779ee6e5b9323", "filename": "gcc/toplev.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c409ea0d30ef28e68ff6b4fcb699ba013ee947f1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c409ea0d30ef28e68ff6b4fcb699ba013ee947f1", "patch": "@@ -1437,6 +1437,7 @@ static const struct\n   const char *const prefix;\n   const char **const variable;\n   const char *const description;\n+  const char *const value;\n }\n target_options[] = TARGET_OPTIONS;\n #endif\n@@ -4685,10 +4686,21 @@ set_target_switch (name)\n     for (j = 0; j < ARRAY_SIZE (target_options); j++)\n       {\n \tint len = strlen (target_options[j].prefix);\n-\tif (!strncmp (target_options[j].prefix, name, len))\n+\tif (target_options[j].value)\n \t  {\n-\t    *target_options[j].variable = name + len;\n-\t    valid_target_option = 1;\n+\t    if (!strcmp (target_options[j].prefix, name))\n+\t      {\n+\t\t*target_options[j].variable = target_options[j].value;\n+\t\tvalid_target_option = 1;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    if (!strncmp (target_options[j].prefix, name, len))\n+\t      {\n+\t\t*target_options[j].variable = name + len;\n+\t\tvalid_target_option = 1;\n+\t      }\n \t  }\n       }\n #endif"}]}