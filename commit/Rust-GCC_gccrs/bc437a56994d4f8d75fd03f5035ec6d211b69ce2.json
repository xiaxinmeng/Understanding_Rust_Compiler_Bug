{"sha": "bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM0MzdhNTY5OTRkNGY4ZDc1ZmQwM2Y1MDM1ZWM2ZDIxMWI2OWNlMg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-10-02T23:57:19Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-10-02T23:57:19Z"}, "message": "Clean up more fallout from r252976.\n\nlibatomic/ChangeLog:\n2017-10-02  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/81854\n\t* acinclude.m4 (LIBAT_CHECK_IFUNC): Have ifunc resolver return\n\ta function pointer rather than void* to avoid GCC 8 warnings.\n\t* configure: Regenerate.\n\t* libatomic_i.h: Declare ifunc resolvers to return function\n\tpointers rather than void*.\n\nFrom-SVN: r253372", "tree": {"sha": "7057399e4312ddfd64fe5b95a55069246953400b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7057399e4312ddfd64fe5b95a55069246953400b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a741aee62831fb98afb1c9fab8bff7dfe8c2a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a741aee62831fb98afb1c9fab8bff7dfe8c2a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a741aee62831fb98afb1c9fab8bff7dfe8c2a7f"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "835ea6c5093690963821b0e029cbaa4f1589cd73", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "patch": "@@ -1,3 +1,12 @@\n+2017-10-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81854\n+\t* acinclude.m4 (LIBAT_CHECK_IFUNC): Have ifunc resolver return\n+\ta function pointer rather than void* to avoid GCC 8 warnings.\n+\t* configure: Regenerate.\n+\t* libatomic_i.h: Declare ifunc resolvers to return function\n+\tpointers rather than void*.\n+\n 2017-05-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/lib/libatomic.exp: Load scanlang.exp."}, {"sha": "383218f933f0a0e7bd901137c59bba709ad214ef", "filename": "libatomic/acinclude.m4", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Facinclude.m4?ref=bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "patch": "@@ -195,7 +195,8 @@ AC_DEFUN([LIBAT_CHECK_IFUNC], [\n   CFLAGS=\"$CFLAGS -Werror\"\n   AC_TRY_LINK([\n     int foo_alt(void) { return 0; }\n-    void *foo_sel(void) { return foo_alt; }\n+    typedef int F (void);\n+    F *foo_sel(void) { return foo_alt; }\n     int foo(void) __attribute__((ifunc(\"foo_sel\")));],\n     [return foo();], libat_cv_have_ifunc=yes, libat_cv_have_ifunc=no)])\n   LIBAT_DEFINE_YESNO([HAVE_IFUNC], [$libat_cv_have_ifunc],"}, {"sha": "e88a7b8c55316ddd414569dc806c654626093e9b", "filename": "libatomic/configure", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "patch": "@@ -12333,6 +12333,7 @@ _ACEOF\n \n \n \n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __atomic_load/store for size 2\" >&5\n $as_echo_n \"checking for __atomic_load/store for size 2... \" >&6; }\n if test \"${libat_cv_have_at_ldst_2+set}\" = set; then :\n@@ -12400,6 +12401,7 @@ _ACEOF\n \n \n \n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __atomic_load/store for size 4\" >&5\n $as_echo_n \"checking for __atomic_load/store for size 4... \" >&6; }\n if test \"${libat_cv_have_at_ldst_4+set}\" = set; then :\n@@ -12467,6 +12469,7 @@ _ACEOF\n \n \n \n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __atomic_load/store for size 8\" >&5\n $as_echo_n \"checking for __atomic_load/store for size 8... \" >&6; }\n if test \"${libat_cv_have_at_ldst_8+set}\" = set; then :\n@@ -12534,6 +12537,7 @@ _ACEOF\n \n \n \n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __atomic_load/store for size 16\" >&5\n $as_echo_n \"checking for __atomic_load/store for size 16... \" >&6; }\n if test \"${libat_cv_have_at_ldst_16+set}\" = set; then :\n@@ -12602,6 +12606,7 @@ _ACEOF\n \n \n \n+\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __atomic_test_and_set for size 1\" >&5\n $as_echo_n \"checking for __atomic_test_and_set for size 1... \" >&6; }\n if test \"${libat_cv_have_at_tas_1+set}\" = set; then :\n@@ -14693,7 +14698,8 @@ else\n /* end confdefs.h.  */\n \n     int foo_alt(void) { return 0; }\n-    void *foo_sel(void) { return foo_alt; }\n+    typedef int F (void);\n+    F *foo_sel(void) { return foo_alt; }\n     int foo(void) __attribute__((ifunc(\"foo_sel\")));\n int\n main ()"}, {"sha": "2dad4a84d7a8b054b60e25809bb4228ddea0ee0a", "filename": "libatomic/libatomic_i.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2Flibatomic_i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc437a56994d4f8d75fd03f5035ec6d211b69ce2/libatomic%2Flibatomic_i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Flibatomic_i.h?ref=bc437a56994d4f8d75fd03f5035ec6d211b69ce2", "patch": "@@ -240,7 +240,7 @@ bool libat_is_lock_free (size_t, void *) MAN(is_lock_free);\n # if IFUNC_NCOND(N) == 1\n #  define GEN_SELECTOR(X)\t\t\t\t\t\\\n \textern typeof(C2(libat_,X)) C3(libat_,X,_i1) HIDDEN;\t\\\n-\tstatic void * C2(select_,X) (void)\t\t\t\\\n+\tstatic typeof(C2(libat_,X)) * C2(select_,X) (void)\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  if (IFUNC_COND_1)\t\t\t\t\t\\\n \t    return C3(libat_,X,_i1);\t\t\t\t\\\n@@ -250,7 +250,7 @@ bool libat_is_lock_free (size_t, void *) MAN(is_lock_free);\n #  define GEN_SELECTOR(X)\t\t\t\t\t\\\n \textern typeof(C2(libat_,X)) C3(libat_,X,_i1) HIDDEN;\t\\\n \textern typeof(C2(libat_,X)) C3(libat_,X,_i2) HIDDEN;\t\\\n-\tstatic void * C2(select_,X) (void)\t\t\t\\\n+\tstatic typeof(C2(libat_,X)) * C2(select_,X) (void)\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  if (IFUNC_COND_1)\t\t\t\t\t\\\n \t    return C3(libat_,X,_i1);\t\t\t\t\\\n@@ -263,7 +263,7 @@ bool libat_is_lock_free (size_t, void *) MAN(is_lock_free);\n \textern typeof(C2(libat_,X)) C3(libat_,X,_i1) HIDDEN;\t\\\n \textern typeof(C2(libat_,X)) C3(libat_,X,_i2) HIDDEN;\t\\\n \textern typeof(C2(libat_,X)) C3(libat_,X,_i3) HIDDEN;\t\\\n-\tstatic void * C2(select_,X) (void)\t\t\t\\\n+\tstatic typeof(C2(libat_,X)) * C2(select_,X) (void)\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  if (IFUNC_COND_1)\t\t\t\t\t\\\n \t    return C3(libat_,X,_i1);\t\t\t\t\\"}]}