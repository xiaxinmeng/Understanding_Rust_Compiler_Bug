{"sha": "32101f99491da036f466cd6ba1eed7a2586983af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxMDFmOTk0OTFkYTAzNmY0NjZjZDZiYTFlZWQ3YTI1ODY5ODNhZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-05-24T05:56:00Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-05-24T05:56:00Z"}, "message": "builtins.c (fold_builtin_fpclassify): Fix spelling of FP_INFINITE.\n\n\t* builtins.c (fold_builtin_fpclassify): Fix spelling of FP_INFINITE.\n\t* doc/extend.texi: Likewise.\n\ntestsuite:\n\t* gcc.dg/tg-tests.h: Fix spelling of FP_INFINITE.\n\nFrom-SVN: r135844", "tree": {"sha": "1e17773cabf10b54a666b6128a45974648ac6932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e17773cabf10b54a666b6128a45974648ac6932"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32101f99491da036f466cd6ba1eed7a2586983af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32101f99491da036f466cd6ba1eed7a2586983af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32101f99491da036f466cd6ba1eed7a2586983af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32101f99491da036f466cd6ba1eed7a2586983af/comments", "author": null, "committer": null, "parents": [{"sha": "c9db440dd71fc73344da315e8a9964fc6752ce8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9db440dd71fc73344da315e8a9964fc6752ce8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9db440dd71fc73344da315e8a9964fc6752ce8c"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "2a77cf8a207197845caa9eaaa994f6dbe4d6f6ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32101f99491da036f466cd6ba1eed7a2586983af", "patch": "@@ -1,3 +1,8 @@\n+2008-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_fpclassify): Fix spelling of FP_INFINITE.\n+\t* doc/extend.texi: Likewise.\n+\n 2008-05-23  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/jump.md (untyped_call): Add."}, {"sha": "695567cfbfc8e0981698991f0d305b11232f7e8f", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=32101f99491da036f466cd6ba1eed7a2586983af", "patch": "@@ -9748,14 +9748,15 @@ fold_builtin_classify (tree fndecl, tree arg, int builtin_index)\n    This builtin will generate code to return the appropriate floating\n    point classification depending on the value of the floating point\n    number passed in.  The possible return values must be supplied as\n-   int arguments to the call in the following order: FP_NAN, FP_INF,\n+   int arguments to the call in the following order: FP_NAN, FP_INFINITE,\n    FP_NORMAL, FP_SUBNORMAL and FP_ZERO.  The ellipses is for exactly\n    one floating point argument which is \"type generic\".  */\n \n static tree\n fold_builtin_fpclassify (tree exp)\n {\n-  tree fp_nan, fp_inf, fp_normal, fp_subnormal, fp_zero, arg, type, res, tmp;\n+  tree fp_nan, fp_infinite, fp_normal, fp_subnormal, fp_zero,\n+    arg, type, res, tmp;\n   enum machine_mode mode;\n   REAL_VALUE_TYPE r;\n   char buf[128];\n@@ -9767,7 +9768,7 @@ fold_builtin_fpclassify (tree exp)\n     return NULL_TREE;\n   \n   fp_nan = CALL_EXPR_ARG (exp, 0);\n-  fp_inf = CALL_EXPR_ARG (exp, 1);\n+  fp_infinite = CALL_EXPR_ARG (exp, 1);\n   fp_normal = CALL_EXPR_ARG (exp, 2);\n   fp_subnormal = CALL_EXPR_ARG (exp, 3);\n   fp_zero = CALL_EXPR_ARG (exp, 4);\n@@ -9778,7 +9779,7 @@ fold_builtin_fpclassify (tree exp)\n \n   /* fpclassify(x) -> \n        isnan(x) ? FP_NAN :\n-         (fabs(x) == Inf ? FP_INF :\n+         (fabs(x) == Inf ? FP_INFINITE :\n \t   (fabs(x) >= DBL_MIN ? FP_NORMAL :\n \t     (x == 0 ? FP_ZERO : FP_SUBNORMAL))).  */\n   \n@@ -9796,7 +9797,7 @@ fold_builtin_fpclassify (tree exp)\n       real_inf (&r);\n       tmp = fold_build2 (EQ_EXPR, integer_type_node, arg,\n \t\t\t build_real (type, r));\n-      res = fold_build3 (COND_EXPR, integer_type_node, tmp, fp_inf, res);\n+      res = fold_build3 (COND_EXPR, integer_type_node, tmp, fp_infinite, res);\n     }\n \n   if (HONOR_NANS (mode))"}, {"sha": "103af2c4c51887a173d08fb63dffc2a5dca18787", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=32101f99491da036f466cd6ba1eed7a2586983af", "patch": "@@ -6567,7 +6567,7 @@ This built-in implements the C99 fpclassify functionality.  The first\n five int arguments should be the target library's notion of the\n possible FP classes and are used for return values.  They must be\n constant values and they must appear in this order: @code{FP_NAN},\n-@code{FP_INF}, @code{FP_NORMAL}, @code{FP_SUBNORMAL} and\n+@code{FP_INFINITE}, @code{FP_NORMAL}, @code{FP_SUBNORMAL} and\n @code{FP_ZERO}.  The ellipsis is for exactly one floating point value\n to classify.  GCC treats the last argument as type-generic, which\n means it does not do default promotion from float to double."}, {"sha": "951fe3d5c8a8d989089021a39b5e431eaa08b5d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32101f99491da036f466cd6ba1eed7a2586983af", "patch": "@@ -1,3 +1,7 @@\n+2008-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/tg-tests.h: Fix spelling of FP_INFINITE.\n+\n 2008-05-23  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Daniel Jacobowitz  <dan@codesourcery.com>\n "}, {"sha": "ce9cfb866cfb455a879e28ac500af21fa21fcba8", "filename": "gcc/testsuite/gcc.dg/tg-tests.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32101f99491da036f466cd6ba1eed7a2586983af/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h?ref=32101f99491da036f466cd6ba1eed7a2586983af", "patch": "@@ -1,11 +1,11 @@\n /* Test various type-generic builtins by calling \"main_tests()\".  */\n \n #define FP_NAN 1\n-#define FP_INF 2\n+#define FP_INFINITE 2\n #define FP_NORMAL 3\n #define FP_SUBNORMAL 4\n #define FP_ZERO 5\n-#define fpclassify(X) __builtin_fpclassify(FP_NAN, FP_INF, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, (X))\n+#define fpclassify(X) __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, (X))\n \n void __attribute__ ((__noinline__))\n foo_1 (float f, double d, long double ld,\n@@ -118,7 +118,7 @@ main_tests (void)\n \n   /* Test infinity.  */\n   f = __builtin_inff(); d = __builtin_inf(); ld = __builtin_infl();\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0, FP_INF);\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0, FP_INFINITE);\n \n   /* Test zero.  */\n   f = 0; d = 0; ld = 0;\n@@ -142,7 +142,7 @@ main_tests (void)\n \n   /* Test overflow values.  */\n   f = __FLT_MAX__*2; d = __DBL_MAX__*2; ld = __LDBL_MAX__*2;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0, FP_INF);\n+  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0, FP_INFINITE);\n \n   return 0;\n }"}]}