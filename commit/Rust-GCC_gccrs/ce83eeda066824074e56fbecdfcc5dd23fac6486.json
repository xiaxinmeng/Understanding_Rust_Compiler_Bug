{"sha": "ce83eeda066824074e56fbecdfcc5dd23fac6486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U4M2VlZGEwNjY4MjQwNzRlNTZmYmVjZGZjYzVkZDIzZmFjNjQ4Ng==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-29T04:43:21Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-29T04:43:21Z"}, "message": "[RS6000] rs6000_indirect_call_template\n\nLike the last patch for external calls, now handle most assembly code\nfor indirect calls in one place.  The patch also merges some insns,\ncorrecting some !rs6000_speculate_indirect_jumps cases branching to\nLR, which don't require a speculation barrier.\n\n\t* config/rs6000/rs6000-protos.h (rs6000_indirect_call_template),\n\t(rs6000_indirect_sibcall_template): Declare.\n\t* config/rs6000/rs6000.c (rs6000_indirect_call_template_1),\n\t(rs6000_indirect_call_template, rs6000_indirect_sibcall_template):\n\tNew functions.\n\t* config/rs6000/rs6000.md (call_indirect_nonlocal_sysv),\n\t(call_value_indirect_nonlocal_sysv, sibcall_nonlocal_sysv),\n\t(call_indirect_aix, call_value_indirect_aix): Use\n\trs6000_indirect_call_template and rs6000_indirect_sibcall_template.\n\tcall_indirect_elfv2, call_value_indirect_elfv2): Likewise, and\n\thandle both speculation and non-speculation cases.\n\t(call_indirect_aix_nospec, call_value_indirect_aix_nospec): Delete.\n\t(call_indirect_elfv2_nospec, call_value_indirect_elfv2_nospec): Delete.\n\nFrom-SVN: r266601", "tree": {"sha": "8707ec139df15a2a40d15143b861c4d580e5109d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8707ec139df15a2a40d15143b861c4d580e5109d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce83eeda066824074e56fbecdfcc5dd23fac6486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce83eeda066824074e56fbecdfcc5dd23fac6486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce83eeda066824074e56fbecdfcc5dd23fac6486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce83eeda066824074e56fbecdfcc5dd23fac6486/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75a0b80599ca4326da8a203e042cb9db6c27ab08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a0b80599ca4326da8a203e042cb9db6c27ab08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a0b80599ca4326da8a203e042cb9db6c27ab08"}], "stats": {"total": 209, "additions": 134, "deletions": 75}, "files": [{"sha": "85ae1d95c1fc82a02f345d8b6d61e3795866931c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce83eeda066824074e56fbecdfcc5dd23fac6486", "patch": "@@ -1,3 +1,19 @@\n+2018-11-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_indirect_call_template),\n+\t(rs6000_indirect_sibcall_template): Declare.\n+\t* config/rs6000/rs6000.c (rs6000_indirect_call_template_1),\n+\t(rs6000_indirect_call_template, rs6000_indirect_sibcall_template):\n+\tNew functions.\n+\t* config/rs6000/rs6000.md (call_indirect_nonlocal_sysv),\n+\t(call_value_indirect_nonlocal_sysv, sibcall_nonlocal_sysv),\n+\t(call_indirect_aix, call_value_indirect_aix): Use\n+\trs6000_indirect_call_template and rs6000_indirect_sibcall_template.\n+\tcall_indirect_elfv2, call_value_indirect_elfv2): Likewise, and\n+\thandle both speculation and non-speculation cases.\n+\t(call_indirect_aix_nospec, call_value_indirect_aix_nospec): Delete.\n+\t(call_indirect_elfv2_nospec, call_value_indirect_elfv2_nospec): Delete.\n+\n 2018-11-29  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_call_template): Declare."}, {"sha": "f1a294a3617b31f765e8012d9361c61222822a62", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=ce83eeda066824074e56fbecdfcc5dd23fac6486", "patch": "@@ -107,6 +107,8 @@ extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern const char *rs6000_call_template (rtx *, unsigned int, const char *);\n extern const char *rs6000_sibcall_template (rtx *, unsigned int, const char *);\n+extern const char *rs6000_indirect_call_template (rtx *, unsigned int);\n+extern const char *rs6000_indirect_sibcall_template (rtx *, unsigned int);\n extern enum rtx_code rs6000_reverse_condition (machine_mode,\n \t\t\t\t\t       enum rtx_code);\n extern rtx rs6000_emit_eqne (machine_mode, rtx, rtx, rtx);"}, {"sha": "497a157b89c60c1aca7e929b3b56e3ae7714d7b2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ce83eeda066824074e56fbecdfcc5dd23fac6486", "patch": "@@ -21411,6 +21411,83 @@ rs6000_sibcall_template (rtx *operands, unsigned int funop, const char *arg)\n   return rs6000_call_template_1 (operands, funop, true, arg);\n }\n \n+/* As above, for indirect calls.  */\n+\n+static const char *\n+rs6000_indirect_call_template_1 (rtx *operands, unsigned int funop,\n+\t\t\t\t bool sibcall)\n+{\n+  /* -Wformat-overflow workaround, without which gcc thinks that %u\n+      might produce 10 digits.  */\n+  gcc_assert (funop <= MAX_RECOG_OPERANDS);\n+\n+  static char str[144];\n+  const char *ptrload = TARGET_64BIT ? \"d\" : \"wz\";\n+\n+  /* We don't need the extra code to stop indirect call speculation if\n+     calling via LR.  */\n+  bool speculate = (TARGET_MACHO\n+\t\t    || rs6000_speculate_indirect_jumps\n+\t\t    || (REG_P (operands[funop])\n+\t\t\t&& REGNO (operands[funop]) == LR_REGNO));\n+\n+  if (DEFAULT_ABI == ABI_AIX)\n+    {\n+      if (speculate)\n+\tsprintf (str,\n+\t\t \"l%s 2,%%%u\\n\\t\"\n+\t\t \"b%%T%ul\\n\\t\"\n+\t\t \"l%s 2,%%%u(1)\",\n+\t\t ptrload, funop + 2, funop, ptrload, funop + 3);\n+      else\n+\tsprintf (str,\n+\t\t \"crset 2\\n\\t\"\n+\t\t \"l%s 2,%%%u\\n\\t\"\n+\t\t \"beq%%T%ul-\\n\\t\"\n+\t\t \"l%s 2,%%%u(1)\",\n+\t\t ptrload, funop + 2, funop, ptrload, funop + 3);\n+    }\n+  else if (DEFAULT_ABI == ABI_ELFv2)\n+    {\n+      if (speculate)\n+\tsprintf (str,\n+\t\t \"b%%T%ul\\n\\t\"\n+\t\t \"l%s 2,%%%u(1)\",\n+\t\t funop, ptrload, funop + 2);\n+      else\n+\tsprintf (str,\n+\t\t \"crset 2\\n\\t\"\n+\t\t \"beq%%T%ul-\\n\\t\"\n+\t\t \"l%s 2,%%%u(1)\",\n+\t\t funop, ptrload, funop + 2);\n+    }\n+  else\n+    {\n+      if (speculate)\n+\tsprintf (str,\n+\t\t \"b%%T%u%s\",\n+\t\t funop, sibcall ? \"\" : \"l\");\n+      else\n+\tsprintf (str,\n+\t\t \"crset 2\\n\\t\"\n+\t\t \"beq%%T%u%s-%s\",\n+\t\t funop, sibcall ? \"\" : \"l\", sibcall ? \"\\n\\tb $\" : \"\");\n+    }\n+  return str;\n+}\n+\n+const char *\n+rs6000_indirect_call_template (rtx *operands, unsigned int funop)\n+{\n+  return rs6000_indirect_call_template_1 (operands, funop, false);\n+}\n+\n+const char *\n+rs6000_indirect_sibcall_template (rtx *operands, unsigned int funop)\n+{\n+  return rs6000_indirect_call_template_1 (operands, funop, true);\n+}\n+\n #if defined (HAVE_GAS_HIDDEN) && !TARGET_MACHO\n /* Emit an assembler directive to set symbol visibility for DECL to\n    VISIBILITY_TYPE.  */"}, {"sha": "c918b04e64bcb9e524084eb8abd821c60e483ee8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 39, "deletions": 75, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce83eeda066824074e56fbecdfcc5dd23fac6486/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ce83eeda066824074e56fbecdfcc5dd23fac6486", "patch": "@@ -10525,11 +10525,7 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  if (rs6000_speculate_indirect_jumps\n-      || which_alternative == 1 || which_alternative == 3)\n-    return \"b%T0l\";\n-  else\n-    return \"crset 2\\;beq%T0l-\";\n+  return rs6000_indirect_call_template (operands, 0);\n }\n   [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n    (set_attr_alternative \"length\"\n@@ -10615,11 +10611,7 @@\n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n-  if (rs6000_speculate_indirect_jumps\n-      || which_alternative == 1 || which_alternative == 3)\n-    return \"b%T1l\";\n-  else\n-    return \"crset 2\\;beq%T1l-\";\n+  return rs6000_indirect_call_template (operands, 1);\n }\n   [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n    (set_attr_alternative \"length\"\n@@ -10750,21 +10742,16 @@\n    (use (match_operand:P 2 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_AIX && rs6000_speculate_indirect_jumps\"\n-  \"<ptrload> 2,%2\\;b%T0l\\;<ptrload> 2,%3(1)\"\n-  [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"12\")])\n-\n-(define_insn \"*call_indirect_aix<mode>_nospec\"\n-  [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l\"))\n-\t (match_operand 1 \"\" \"g,g\"))\n-   (use (match_operand:P 2 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n-   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n-   (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_AIX && !rs6000_speculate_indirect_jumps\"\n-  \"crset 2\\;<ptrload> 2,%2\\;beq%T0l-\\;<ptrload> 2,%3(1)\"\n+  \"DEFAULT_ABI == ABI_AIX\"\n+{\n+  return rs6000_indirect_call_template (operands, 0);\n+}\n   [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"16\")])\n+   (set (attr \"length\")\n+\t(if_then_else (and (match_test \"!rs6000_speculate_indirect_jumps\")\n+\t\t\t   (match_test \"which_alternative != 1\"))\n+\t\t      (const_string \"16\")\n+\t\t      (const_string \"12\")))])\n \n (define_insn \"*call_value_indirect_aix<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -10773,22 +10760,16 @@\n    (use (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 4 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_AIX && rs6000_speculate_indirect_jumps\"\n-  \"<ptrload> 2,%3\\;b%T1l\\;<ptrload> 2,%4(1)\"\n-  [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"12\")])\n-\n-(define_insn \"*call_value_indirect_aix<mode>_nospec\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n-\t      (match_operand 2 \"\" \"g,g\")))\n-   (use (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n-   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 4 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n-   (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_AIX && !rs6000_speculate_indirect_jumps\"\n-  \"crset 2\\;<ptrload> 2,%3\\;beq%T1l-\\;<ptrload> 2,%4(1)\"\n+  \"DEFAULT_ABI == ABI_AIX\"\n+{\n+  return rs6000_indirect_call_template (operands, 1);\n+}\n   [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"16\")])\n+   (set (attr \"length\")\n+\t(if_then_else (and (match_test \"!rs6000_speculate_indirect_jumps\")\n+\t\t\t   (match_test \"which_alternative != 1\"))\n+\t\t      (const_string \"16\")\n+\t\t      (const_string \"12\")))])\n \n ;; Call to indirect functions with the ELFv2 ABI.\n ;; Operand0 is the addresss of the function to call\n@@ -10799,44 +10780,33 @@\n \t (match_operand 1 \"\" \"g,g\"))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 2 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_ELFv2 && rs6000_speculate_indirect_jumps\"\n-  \"b%T0l\\;<ptrload> 2,%2(1)\"\n-  [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"8\")])\n-\n-;; Variant with deliberate misprediction.\n-(define_insn \"*call_indirect_elfv2<mode>_nospec\"\n-  [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l\"))\n-\t (match_operand 1 \"\" \"g,g\"))\n-   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 2 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n-   (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_ELFv2 && !rs6000_speculate_indirect_jumps\"\n-  \"crset 2\\;beq%T0l-\\;<ptrload> 2,%2(1)\"\n+  \"DEFAULT_ABI == ABI_ELFv2\"\n+{\n+  return rs6000_indirect_call_template (operands, 0);\n+}\n   [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"12\")])\n+   (set (attr \"length\")\n+\t(if_then_else (and (match_test \"!rs6000_speculate_indirect_jumps\")\n+\t\t\t   (match_test \"which_alternative != 1\"))\n+\t\t      (const_string \"12\")\n+\t\t      (const_string \"8\")))])\n \n (define_insn \"*call_value_indirect_elfv2<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_ELFv2 && rs6000_speculate_indirect_jumps\"\n-  \"b%T1l\\;<ptrload> 2,%3(1)\"\n-  [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"8\")])\n-\n-; Variant with deliberate misprediction.\n-(define_insn \"*call_value_indirect_elfv2<mode>_nospec\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n-\t      (match_operand 2 \"\" \"g,g\")))\n-   (set (reg:P TOC_REGNUM) (unspec:P [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n-   (clobber (reg:P LR_REGNO))]\n-  \"DEFAULT_ABI == ABI_ELFv2 && !rs6000_speculate_indirect_jumps\"\n-  \"crset 2\\;beq%T1l-\\;<ptrload> 2,%3(1)\"\n+  \"DEFAULT_ABI == ABI_ELFv2\"\n+{\n+  return rs6000_indirect_call_template (operands, 1);\n+}\n   [(set_attr \"type\" \"jmpreg\")\n-   (set_attr \"length\" \"12\")])\n+   (set (attr \"length\")\n+\t(if_then_else (and (match_test \"!rs6000_speculate_indirect_jumps\")\n+\t\t\t   (match_test \"which_alternative != 1\"))\n+\t\t      (const_string \"12\")\n+\t\t      (const_string \"8\")))])\n \n ;; Call subroutine returning any type.\n (define_expand \"untyped_call\"\n@@ -11005,13 +10975,7 @@\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n   if (which_alternative >= 2)\n-    {\n-      if (rs6000_speculate_indirect_jumps)\n-\treturn \"b%T0\";\n-      else\n-\t/* Can use CR0 since it is volatile across sibcalls.  */\n-\treturn \"crset 2\\;beq%T0-\\;b $\";\n-    }\n+    return rs6000_indirect_sibcall_template (operands, 0);\n   else\n     return rs6000_sibcall_template (operands, 0, \"\");\n }"}]}