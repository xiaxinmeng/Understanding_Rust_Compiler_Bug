{"sha": "04924d6a8881c2f4d4461e0e7a169846f2a34a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5MjRkNmE4ODgxYzJmNGQ0NDYxZTBlN2ExNjk4NDZmMmEzNGEwNQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-28T12:04:54Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-28T12:04:54Z"}, "message": "vec.h (vec_heap_free): Add parentheses around free.\n\ngcc/\n\t* vec.h (vec_heap_free): Add parentheses around free.\n\ngcc/fortran/\n\t* trans-openmp.c (dovar_init): Define.  Define VECs containing it.\n\t(gfc_trans_omp_do): Use a VEC to accumulate variables and their\n\tinitializers.\n\nFrom-SVN: r161486", "tree": {"sha": "bb1f1cf3fc571083de0db917a2eeeb95c8c15cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb1f1cf3fc571083de0db917a2eeeb95c8c15cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04924d6a8881c2f4d4461e0e7a169846f2a34a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04924d6a8881c2f4d4461e0e7a169846f2a34a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04924d6a8881c2f4d4461e0e7a169846f2a34a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04924d6a8881c2f4d4461e0e7a169846f2a34a05/comments", "author": null, "committer": null, "parents": [{"sha": "3b06d379028526625f4b9e0cf5d5f5137de950d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b06d379028526625f4b9e0cf5d5f5137de950d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b06d379028526625f4b9e0cf5d5f5137de950d4"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "8a25bc7b7f9e61e28babc7f8c7eba5e70e43cb0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04924d6a8881c2f4d4461e0e7a169846f2a34a05", "patch": "@@ -1,3 +1,7 @@\n+2010-06-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* vec.h (vec_heap_free): Add parentheses around free.\n+\n 2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* system.h: Poison GCC_EXCEPT_H for front-end files."}, {"sha": "6fbac64a2dbd0a21d04f83c48446cbcd1f4c0188", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=04924d6a8881c2f4d4461e0e7a169846f2a34a05", "patch": "@@ -1,3 +1,9 @@\n+2010-06-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* trans-openmp.c (dovar_init): Define.  Define VECs containing it.\n+\t(gfc_trans_omp_do): Use a VEC to accumulate variables and their\n+\tinitializers.\n+\n 2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* Make-lang.in: Update dependencies."}, {"sha": "7a7d33088d7da610940988164d37e522a71a1335", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=04924d6a8881c2f4d4461e0e7a169846f2a34a05", "patch": "@@ -1150,6 +1150,14 @@ gfc_trans_omp_critical (gfc_code *code)\n   return build2 (OMP_CRITICAL, void_type_node, stmt, name);\n }\n \n+typedef struct dovar_init_d {\n+  tree var;\n+  tree init;\n+} dovar_init;\n+\n+DEF_VEC_O(dovar_init);\n+DEF_VEC_ALLOC_O(dovar_init,heap);\n+\n static tree\n gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n \t\t  gfc_omp_clauses *do_clauses, tree par_clauses)\n@@ -1161,7 +1169,9 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n   stmtblock_t body;\n   gfc_omp_clauses *clauses = code->ext.omp_clauses;\n   int i, collapse = clauses->collapse;\n-  tree dovar_init = NULL_TREE;\n+  VEC(dovar_init,heap) *inits = NULL;\n+  dovar_init *di;\n+  unsigned ix;\n \n   if (collapse <= 0)\n     collapse = 1;\n@@ -1276,7 +1286,9 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n \t  /* Initialize DOVAR.  */\n \t  tmp = fold_build2 (MULT_EXPR, type, count, step);\n \t  tmp = fold_build2 (PLUS_EXPR, type, from, tmp);\n-\t  dovar_init = tree_cons (dovar, tmp, dovar_init);\n+\t  di = VEC_safe_push (dovar_init, heap, inits, NULL);\n+\t  di->var = dovar;\n+\t  di->init = tmp;\n \t}\n \n       if (!dovar_found)\n@@ -1345,13 +1357,9 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n \n   gfc_start_block (&body);\n \n-  dovar_init = nreverse (dovar_init);\n-  while (dovar_init)\n-    {\n-      gfc_add_modify (&body, TREE_PURPOSE (dovar_init),\n-\t\t\t   TREE_VALUE (dovar_init));\n-      dovar_init = TREE_CHAIN (dovar_init);\n-    }\n+  for (ix = 0; VEC_iterate (dovar_init, inits, ix, di); ix++)\n+    gfc_add_modify (&body, di->var, di->init);\n+  VEC_free (dovar_init, heap, inits);\n \n   /* Cycle statement is implemented with a goto.  Exit statement must not be\n      present for this loop.  */"}, {"sha": "93a432df839aee2905ce7ddd2e47447514818d3f", "filename": "gcc/vec.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04924d6a8881c2f4d4461e0e7a169846f2a34a05/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=04924d6a8881c2f4d4461e0e7a169846f2a34a05", "patch": "@@ -436,7 +436,8 @@ extern void dump_vec_loc_statistics (void);\n #ifdef GATHER_STATISTICS\n void vec_heap_free (void *);\n #else\n-#define vec_heap_free(V) free (V)\n+/* Avoid problems with frontends that #define free(x).  */\n+#define vec_heap_free(V) (free) (V)\n #endif\n \n #if ENABLE_CHECKING"}]}