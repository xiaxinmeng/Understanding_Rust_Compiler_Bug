{"sha": "799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5ZDBlMDVjNzFmNjNiMTFkZGI3ZDY0ZjMxNGMxMjgxZmU1M2NmYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T10:22:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T10:22:07Z"}, "message": "[multiple changes]\n\n2012-05-15  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb, exp_ch11.adb, exp_ch11.ads: Minor reformatting.\n\n2012-05-15  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb (Resolve): Enforce E.2.2(11/2) and E.2.2(12) for\n\t'Unrestricted_Access and 'Unchecked_Access (not just 'Access):\n\teven in those cases, a remote access type may only designate a\n\tremote subprogram.\n\n2012-05-15  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb, sem_util.ads, sem_cat.adb: Minor refactoring.\n\t(Enclosing_Lib_Unit_Node): Rename to Enclosing_Comp_Unit_Node.\n\n2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove obsolete\n\tchecks on nested inlined subprograms.\n\n2012-05-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* fe.h (Get_RT_Exception_Name): Declare.\n\n2012-05-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (db_region_for): Use %p + cast to avoid warnings.\n\t(get_region_description_for): Likewise.\n\t(db_action_for): Likewise.\n\t(get_call_site_action_for): Likewise.\n\t(get_ttype_entry_for): Remove useless 'const'.\n\t(PERSONALITY_FUNCTION): Add ATTRIBUTE_UNUSED on uw_exception_class.\n\n2012-05-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exextr.adb (Unhandled_Exception_Terminate): Save occurrence\n\ton the stack to avoid a dynamic memory allocation.\n\n2012-05-15  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Timed_Entry_Call): Move initialization of\n\tE_Stats and D_Stats after Process_Statements_For_Controlled_Objects,\n\tbecause those calls can destroy the Statements list.\n\nFrom-SVN: r187518", "tree": {"sha": "a5d47583428526feb383a0496917baf367d642b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d47583428526feb383a0496917baf367d642b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/comments", "author": null, "committer": null, "parents": [{"sha": "0c644c99db0e5a83b8106a25e8346c2ecc250297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c644c99db0e5a83b8106a25e8346c2ecc250297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c644c99db0e5a83b8106a25e8346c2ecc250297"}], "stats": {"total": 309, "additions": 171, "deletions": 138}, "files": [{"sha": "f18c54d3b4df5c80d8d0b41f27bd2ccc3516a559", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -1,3 +1,48 @@\n+2012-05-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb, exp_ch11.adb, exp_ch11.ads: Minor reformatting.\n+\n+2012-05-15  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Enforce E.2.2(11/2) and E.2.2(12) for\n+\t'Unrestricted_Access and 'Unchecked_Access (not just 'Access):\n+\teven in those cases, a remote access type may only designate a\n+\tremote subprogram.\n+\n+2012-05-15  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads, sem_cat.adb: Minor refactoring.\n+\t(Enclosing_Lib_Unit_Node): Rename to Enclosing_Comp_Unit_Node.\n+\n+2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove obsolete\n+\tchecks on nested inlined subprograms.\n+\n+2012-05-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* fe.h (Get_RT_Exception_Name): Declare.\n+\n+2012-05-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c (db_region_for): Use %p + cast to avoid warnings.\n+\t(get_region_description_for): Likewise.\n+\t(db_action_for): Likewise.\n+\t(get_call_site_action_for): Likewise.\n+\t(get_ttype_entry_for): Remove useless 'const'.\n+\t(PERSONALITY_FUNCTION): Add ATTRIBUTE_UNUSED on uw_exception_class.\n+\n+2012-05-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exextr.adb (Unhandled_Exception_Terminate): Save occurrence\n+\ton the stack to avoid a dynamic memory allocation.\n+\n+2012-05-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Timed_Entry_Call): Move initialization of\n+\tE_Stats and D_Stats after Process_Statements_For_Controlled_Objects,\n+\tbecause those calls can destroy the Statements list.\n+\n 2012-05-15  Tristan Gingold  <gingold@adacore.com>\n \n \t* fe.h (Get_RT_Exception_Name): Define."}, {"sha": "55ff74d419592eba48155cea8e919cefec2c79b7", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -162,14 +162,15 @@ package body Exception_Traces is\n    -----------------------------------\n \n    procedure Unhandled_Exception_Terminate is\n-      Excep : constant EOA := Save_Occurrence (Get_Current_Excep.all.all);\n+      Excep : Exception_Occurrence;\n       --  This occurrence will be used to display a message after finalization.\n       --  It is necessary to save a copy here, or else the designated value\n       --  could be overwritten if an exception is raised during finalization\n       --  (even if that exception is caught).\n \n    begin\n-      Last_Chance_Handler (Excep.all);\n+      Save_Occurrence (Excep, Get_Current_Excep.all.all);\n+      Last_Chance_Handler (Excep);\n    end Unhandled_Exception_Terminate;\n \n    ------------------------------------"}, {"sha": "e4584753feca79a2add10e71fb75925ca642cac2", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 52, "deletions": 46, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -1909,72 +1909,78 @@ package body Exp_Ch11 is\n             --  case it will end up in the block statements, even though it\n             --  is not there now.\n \n-            if Is_List_Member (N)\n-              and then (List_Containing (N) = Statements (P)\n-                          or else\n-                        List_Containing (N) = SSE.Actions_To_Be_Wrapped_Before\n-                          or else\n-                        List_Containing (N) = SSE.Actions_To_Be_Wrapped_After)\n-            then\n-               --  Loop through exception handlers\n+            if Is_List_Member (N) then\n+               declare\n+                  LCN : constant List_Id := List_Containing (N);\n \n-               H := First (Exception_Handlers (P));\n-               while Present (H) loop\n+               begin\n+                  if LCN = Statements (P)\n+                       or else\n+                     LCN  = SSE.Actions_To_Be_Wrapped_Before\n+                       or else\n+                     LCN = SSE.Actions_To_Be_Wrapped_After\n+                  then\n+                     --  Loop through exception handlers\n \n-                  --  Guard against other constructs appearing in the list of\n-                  --  exception handlers.\n+                     H := First (Exception_Handlers (P));\n+                     while Present (H) loop\n \n-                  if Nkind (H) = N_Exception_Handler then\n+                        --  Guard against other constructs appearing in the\n+                        --  list of exception handlers.\n \n-                     --  Loop through choices in one handler\n+                        if Nkind (H) = N_Exception_Handler then\n \n-                     C := First (Exception_Choices (H));\n-                     while Present (C) loop\n+                           --  Loop through choices in one handler\n \n-                        --  Deal with others case\n+                           C := First (Exception_Choices (H));\n+                           while Present (C) loop\n \n-                        if Nkind (C) = N_Others_Choice then\n+                              --  Deal with others case\n \n-                           --  Matching others handler, but we need to ensure\n-                           --  there is no choice parameter. If there is, then\n-                           --  we don't have a local handler after all (since\n-                           --  we do not allow choice parameters for local\n-                           --  handlers).\n+                              if Nkind (C) = N_Others_Choice then\n \n-                           if No (Choice_Parameter (H)) then\n-                              return H;\n-                           else\n-                              return Empty;\n-                           end if;\n+                                 --  Matching others handler, but we need\n+                                 --  to ensure there is no choice parameter.\n+                                 --  If there is, then we don't have a local\n+                                 --  handler after all (since we do not allow\n+                                 --  choice parameters for local handlers).\n \n-                        --  If not others must be entity name\n+                                 if No (Choice_Parameter (H)) then\n+                                    return H;\n+                                 else\n+                                    return Empty;\n+                                 end if;\n \n-                        elsif Nkind (C) /= N_Others_Choice then\n-                           pragma Assert (Is_Entity_Name (C));\n-                           pragma Assert (Present (Entity (C)));\n+                                 --  If not others must be entity name\n \n-                           --  Get exception being handled, dealing with\n-                           --  renaming.\n+                              elsif Nkind (C) /= N_Others_Choice then\n+                                 pragma Assert (Is_Entity_Name (C));\n+                                 pragma Assert (Present (Entity (C)));\n \n-                           EHandle := Get_Renamed_Entity (Entity (C));\n+                                 --  Get exception being handled, dealing with\n+                                 --  renaming.\n \n-                           --  If match, then check choice parameter\n+                                 EHandle := Get_Renamed_Entity (Entity (C));\n \n-                           if ERaise = EHandle then\n-                              if No (Choice_Parameter (H)) then\n-                                 return H;\n-                              else\n-                                 return Empty;\n+                                 --  If match, then check choice parameter\n+\n+                                 if ERaise = EHandle then\n+                                    if No (Choice_Parameter (H)) then\n+                                       return H;\n+                                    else\n+                                       return Empty;\n+                                    end if;\n+                                 end if;\n                               end if;\n-                           end if;\n+\n+                              Next (C);\n+                           end loop;\n                         end if;\n \n-                        Next (C);\n+                        Next (H);\n                      end loop;\n                   end if;\n-\n-                  Next (H);\n-               end loop;\n+               end;\n             end if;\n          end if;\n "}, {"sha": "d715a27c4e7ea6db1877e8e245946828b50d1fe5", "filename": "gcc/ada/exp_ch11.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.ads?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -79,9 +79,9 @@ package Exp_Ch11 is\n    --  the exception entity to be passed to Local_Raise.\n \n    procedure Get_RT_Exception_Name (Code : RT_Exception_Code);\n-   --  This procedure is provided for use by the back end to get in the\n-   --  name of the Rcheck procedure for Code. The name is appended to\n-   --  Namet.Name_Buffer, without the __gnat_rcheck_ prefix.\n+   --  This procedure is provided for use by the back end to obtain the name of\n+   --  the Rcheck procedure for Code. The name is appended to Namet.Name_Buffer\n+   --  without the __gnat_rcheck_ prefix.\n \n    function Is_Non_Ada_Error (E : Entity_Id) return Boolean;\n    --  This function is provided for Gigi use. It returns True if operating on"}, {"sha": "6c42ad6f826ea7ee3b86dee8edcaeef63b10eb41", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -723,9 +723,10 @@ package body Exp_Ch7 is\n       pragma Assert (Present (Data.Raised_Id));\n \n       if Exception_Extra_Info\n-        or else (For_Library and then not Restricted_Profile)\n+        or else (For_Library and not Restricted_Profile)\n       then\n          if Exception_Extra_Info then\n+\n             --  Generate:\n \n             --    Get_Current_Excep.all\n@@ -735,8 +736,9 @@ package body Exp_Ch7 is\n                 Name =>\n                   Make_Explicit_Dereference (Data.Loc,\n                     Prefix =>\n-                      New_Reference_To (RTE (RE_Get_Current_Excep),\n-                                        Data.Loc)));\n+                      New_Reference_To\n+                        (RTE (RE_Get_Current_Excep), Data.Loc)));\n+\n          else\n             --  Generate:\n \n@@ -748,15 +750,17 @@ package body Exp_Ch7 is\n          if For_Library and then not Restricted_Profile then\n             Proc_To_Call := RTE (RE_Save_Library_Occurrence);\n             Actuals := New_List (Except);\n+\n          else\n             Proc_To_Call := RTE (RE_Save_Occurrence);\n \n             --  The dereference occurs only when Exception_Extra_Info is true,\n             --  and therefore Except is not null.\n \n-            Actuals := New_List (\n-              New_Reference_To (Data.E_Id, Data.Loc),\n-              Make_Explicit_Dereference (Data.Loc, Except));\n+            Actuals :=\n+              New_List (\n+                New_Reference_To (Data.E_Id, Data.Loc),\n+                Make_Explicit_Dereference (Data.Loc, Except));\n          end if;\n \n          --  Generate:\n@@ -3054,6 +3058,7 @@ package body Exp_Ch7 is\n          A_Expr := New_Reference_To (RTE (RE_Triggered_By_Abort), Loc);\n \n          --  Generate:\n+\n          --    Abort_Id : constant Boolean := <A_Expr>;\n \n          Append_To (Decls,\n@@ -3073,6 +3078,7 @@ package body Exp_Ch7 is\n          Data.E_Id      := Make_Temporary (Loc, 'E');\n \n          --  Generate:\n+\n          --    E_Id : Exception_Occurrence;\n \n          E_Decl :=\n@@ -3089,6 +3095,7 @@ package body Exp_Ch7 is\n       end if;\n \n       --  Generate:\n+\n       --    Raised_Id : Boolean := False;\n \n       Append_To (Decls,\n@@ -3134,6 +3141,7 @@ package body Exp_Ch7 is\n       end if;\n \n       --  Generate:\n+\n       --    Raised_Id and then not Abort_Id\n       --      <or>\n       --    Raised_Id\n@@ -3149,6 +3157,7 @@ package body Exp_Ch7 is\n       end if;\n \n       --  Generate:\n+\n       --    if Raised_Id and then not Abort_Id then\n       --       Raise_From_Controlled_Operation (E_Id);\n       --         <or>"}, {"sha": "47eea187921ed9342613e7545cec1cc5f08700dc", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -11883,12 +11883,10 @@ package body Exp_Ch9 is\n \n       E_Call  : Node_Id :=\n                   Entry_Call_Statement (Entry_Call_Alternative (N));\n-      E_Stats : constant List_Id :=\n-                  Statements (Entry_Call_Alternative (N));\n+      E_Stats : List_Id;  --  statements after entry call\n       D_Stat  : Node_Id :=\n                   Delay_Statement (Delay_Alternative (N));\n-      D_Stats : constant List_Id :=\n-                  Statements (Delay_Alternative (N));\n+      D_Stats : List_Id;  --  statements after \"delay ...\"\n \n       Actuals        : List_Id;\n       Blk_Typ        : Entity_Id;\n@@ -11933,6 +11931,12 @@ package body Exp_Ch9 is\n       Process_Statements_For_Controlled_Objects (Entry_Call_Alternative (N));\n       Process_Statements_For_Controlled_Objects (Delay_Alternative (N));\n \n+      --  Must fetch E_Stats/D_Stats after above \"Process_...\", because it\n+      --  might modify them.\n+\n+      E_Stats := Statements (Entry_Call_Alternative (N));\n+      D_Stats := Statements (Delay_Alternative (N));\n+\n       --  The arguments in the call may require dynamic allocation, and the\n       --  call statement may have been transformed into a block. The block\n       --  may contain additional declarations for internal entities, and the"}, {"sha": "9f5d64f01fe1d85fd8f392e821ecb1f8d7ad378b", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -110,6 +110,7 @@ extern Nat       Serious_Errors_Detected;\n \n extern Entity_Id Get_Local_Raise_Call_Entity (void);\n extern Entity_Id Get_RT_Exception_Entity (int);\n+extern void Get_RT_Exception_Name (int);\n \n /* exp_code:  */\n "}, {"sha": "b29d3b535a98f41f5a36e612fe266c6864e1c625", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 1992-2011, Free Software Foundation, Inc.      *\n+ *             Copyright (C) 1992-2012, Free Software Foundation, Inc.      *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -535,10 +535,10 @@ db_region_for (region_descriptor *region, _Unwind_Context *uw_context)\n \n   ip = get_ip_from_context (uw_context);\n \n-  db (DB_REGIONS, \"For ip @ 0x%08x => \", ip);\n+  db (DB_REGIONS, \"For ip @ %p => \", (void *)ip);\n \n   if (region->lsda)\n-    db (DB_REGIONS, \"lsda @ 0x%x\", region->lsda);\n+    db (DB_REGIONS, \"lsda @ %p\", (void *)region->lsda);\n   else\n     db (DB_REGIONS, \"no lsda\");\n \n@@ -548,7 +548,7 @@ db_region_for (region_descriptor *region, _Unwind_Context *uw_context)\n /* Retrieve the ttype entry associated with FILTER in the REGION's\n    ttype table.  */\n \n-static const _Unwind_Ptr\n+static _Unwind_Ptr\n get_ttype_entry_for (region_descriptor *region, long filter)\n {\n   _Unwind_Ptr ttype_entry;\n@@ -582,7 +582,7 @@ get_region_description_for (_Unwind_Context *uw_context,\n     return;\n \n   /* Parse the lsda and fill the region descriptor.  */\n-  p = (char *)region->lsda;\n+  p = (const unsigned char *)region->lsda;\n \n   region->base = _Unwind_GetRegionStart (uw_context);\n \n@@ -662,13 +662,13 @@ db_action_for (action_descriptor *action, _Unwind_Context *uw_context)\n {\n   _Unwind_Ptr ip = get_ip_from_context (uw_context);\n \n-  db (DB_ACTIONS, \"For ip @ 0x%08x => \", ip);\n+  db (DB_ACTIONS, \"For ip @ %p => \", (void *)ip);\n \n   switch (action->kind)\n      {\n      case unknown:\n-       db (DB_ACTIONS, \"lpad @ 0x%x, record @ 0x%x\\n\",\n-\t   action->landing_pad, action->table_entry);\n+       db (DB_ACTIONS, \"lpad @ %p, record @ %p\\n\",\n+\t   (void *) action->landing_pad, action->table_entry);\n        break;\n \n      case nothing:\n@@ -680,7 +680,7 @@ db_action_for (action_descriptor *action, _Unwind_Context *uw_context)\n        break;\n \n      case handler:\n-       db (DB_ACTIONS, \"Handler, filter = %d\\n\", action->ttype_filter);\n+       db (DB_ACTIONS, \"Handler, filter = %d\\n\", (int) action->ttype_filter);\n        break;\n \n      default:\n@@ -784,9 +784,9 @@ get_call_site_action_for (_Unwind_Context *uw_context,\n       p = read_uleb128 (p, &cs_action);\n \n       db (DB_CSITE,\n-\t  \"c_site @ 0x%08x (+0x%03x), len = %3d, lpad @ 0x%08x (+0x%03x)\\n\",\n-\t  region->base+cs_start, cs_start, cs_len,\n-\t  region->lp_base+cs_lp, cs_lp);\n+\t  \"c_site @ %p (+%p), len = %p, lpad @ %p (+%p)\\n\",\n+\t  (void *)region->base + cs_start, (void *)cs_start, (void *)cs_len,\n+\t  (void *)region->lp_base + cs_lp, (void *)cs_lp);\n \n       /* The table is sorted, so if we've passed the IP, stop.  */\n       if (ip < region->base + cs_start)\n@@ -1069,7 +1069,8 @@ PERSONALITY_FUNCTION (version_arg_t, phases_arg_t,\n _Unwind_Reason_Code\n PERSONALITY_FUNCTION (version_arg_t version_arg,\n                       phases_arg_t phases_arg,\n-                      _Unwind_Exception_Class uw_exception_class,\n+                      _Unwind_Exception_Class uw_exception_class\n+\t\t         ATTRIBUTE_UNUSED,\n                       _Unwind_Exception *uw_exception,\n                       _Unwind_Context *uw_context)\n {"}, {"sha": "e53645e45de3bb50106033e7b0585286946ced49", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -2131,7 +2131,7 @@ package body Sem_Cat is\n \n             if Is_Internal_File_Name (Unit_File_Name (Get_Source_Unit (N)))\n               and then\n-                Enclosing_Lib_Unit_Node (N) /= Enclosing_Lib_Unit_Node (E)\n+                Enclosing_Comp_Unit_Node (N) /= Enclosing_Comp_Unit_Node (E)\n               and then (Is_Preelaborated (Scope (E))\n                          or else Is_Pure (Scope (E))\n                          or else (Present (Renamed_Object (E))"}, {"sha": "d079f47fad62b9ef45a32115e3c45abfa78127b9", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -1812,7 +1812,6 @@ package body Sem_Ch6 is\n       Prev_Id      : constant Entity_Id  := Current_Entity_In_Scope (Body_Id);\n       Conformant   : Boolean;\n       HSS          : Node_Id;\n-      P_Ent        : Entity_Id;\n       Prot_Typ     : Entity_Id := Empty;\n       Spec_Id      : Entity_Id;\n       Spec_Decl    : Node_Id   := Empty;\n@@ -2507,42 +2506,10 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n-      --  Do not inline any subprogram that contains nested subprograms, since\n-      --  the backend inlining circuit seems to generate uninitialized\n-      --  references in this case. We know this happens in the case of front\n-      --  end ZCX support, but it also appears it can happen in other cases as\n-      --  well. The backend often rejects attempts to inline in the case of\n-      --  nested procedures anyway, so little if anything is lost by this.\n-      --  Note that this is test is for the benefit of the back-end. There is\n-      --  a separate test for front-end inlining that also rejects nested\n-      --  subprograms.\n-\n-      --  Do not do this test if errors have been detected, because in some\n-      --  error cases, this code blows up, and we don't need it anyway if\n-      --  there have been errors, since we won't get to the linker anyway.\n-\n-      if Comes_From_Source (Body_Id)\n-        and then Serious_Errors_Detected = 0\n-        and then not Debug_Flag_Dot_K\n-      then\n-         P_Ent := Body_Id;\n-         loop\n-            P_Ent := Scope (P_Ent);\n-            exit when No (P_Ent) or else P_Ent = Standard_Standard;\n-\n-            if Is_Subprogram (P_Ent) then\n-               Set_Is_Inlined (P_Ent, False);\n-\n-               if Comes_From_Source (P_Ent)\n-                 and then Has_Pragma_Inline (P_Ent)\n-               then\n-                  Cannot_Inline\n-                    (\"cannot inline& (nested subprogram)?\",\n-                     N, P_Ent);\n-               end if;\n-            end if;\n-         end loop;\n-      end if;\n+      --  Previously we scanned the body to look for nested subprograms, and\n+      --  rejected an inline directive if nested subprograms were present,\n+      --  because the back-end would generate conflicting symbols for the\n+      --  nested bodies.  This is now unecessary.\n \n       --  Look ahead to recognize a pragma inline that appears after the body\n "}, {"sha": "86805d6f92a5eb5fe192209ea80a6e3deee58855", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -1967,7 +1967,10 @@ package body Sem_Res is\n                --  Prefix (N) must statically denote a remote subprogram\n                --  declared in a package specification.\n \n-               if Attr = Attribute_Access then\n+               if Attr = Attribute_Access           or else\n+                  Attr = Attribute_Unchecked_Access or else\n+                  Attr = Attribute_Unrestricted_Access\n+               then\n                   Decl := Unit_Declaration_Node (Entity (Pref));\n \n                   if Nkind (Decl) = N_Subprogram_Body then\n@@ -1990,26 +1993,22 @@ package body Sem_Res is\n                        (\"prefix must statically denote a remote subprogram \",\n                         N);\n                   end if;\n-               end if;\n \n-               --   If we are generating code for a distributed program.\n-               --   perform semantic checks against the corresponding\n-               --   remote entities.\n+                  --  If we are generating code in distributed mode, perform\n+                  --  semantic checks against corresponding remote entities.\n \n-               if (Attr = Attribute_Access           or else\n-                   Attr = Attribute_Unchecked_Access or else\n-                   Attr = Attribute_Unrestricted_Access)\n-                 and then Full_Expander_Active\n-                 and then Get_PCS_Name /= Name_No_DSA\n-               then\n-                  Check_Subtype_Conformant\n-                    (New_Id  => Entity (Prefix (N)),\n-                     Old_Id  => Designated_Type\n-                                  (Corresponding_Remote_Type (Typ)),\n-                     Err_Loc => N);\n-\n-                  if Is_Remote then\n-                     Process_Remote_AST_Attribute (N, Typ);\n+                  if Full_Expander_Active\n+                    and then Get_PCS_Name /= Name_No_DSA\n+                  then\n+                     Check_Subtype_Conformant\n+                       (New_Id  => Entity (Prefix (N)),\n+                        Old_Id  => Designated_Type\n+                                     (Corresponding_Remote_Type (Typ)),\n+                        Err_Loc => N);\n+\n+                     if Is_Remote then\n+                        Process_Remote_AST_Attribute (N, Typ);\n+                     end if;\n                   end if;\n                end if;\n             end if;"}, {"sha": "18c57312b2c54c5d828e530f291fa2ae5d90ff2a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -3165,11 +3165,11 @@ package body Sem_Util is\n       return Unit_Entity;\n    end Enclosing_Lib_Unit_Entity;\n \n-   -----------------------------\n-   -- Enclosing_Lib_Unit_Node --\n-   -----------------------------\n+   ------------------------------\n+   -- Enclosing_Comp_Unit_Node --\n+   ------------------------------\n \n-   function Enclosing_Lib_Unit_Node (N : Node_Id) return Node_Id is\n+   function Enclosing_Comp_Unit_Node (N : Node_Id) return Node_Id is\n       Current_Node : Node_Id;\n \n    begin\n@@ -3185,7 +3185,7 @@ package body Sem_Util is\n       end if;\n \n       return Current_Node;\n-   end Enclosing_Lib_Unit_Node;\n+   end Enclosing_Comp_Unit_Node;\n \n    -----------------------\n    -- Enclosing_Package --"}, {"sha": "0c4643d1e4b59c25c732b7bbe1d6975f32b5fc3e", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799d0e05c71f63b11ddb7d64f314c1281fe53cfb/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=799d0e05c71f63b11ddb7d64f314c1281fe53cfb", "patch": "@@ -386,7 +386,7 @@ package Sem_Util is\n    --  root of the current scope (which must not be Standard_Standard, and the\n    --  caller is responsible for ensuring this condition).\n \n-   function Enclosing_Lib_Unit_Node (N : Node_Id) return Node_Id;\n+   function Enclosing_Comp_Unit_Node (N : Node_Id) return Node_Id;\n    --  Returns the enclosing N_Compilation_Unit Node that is the root of a\n    --  subtree containing N.\n "}]}