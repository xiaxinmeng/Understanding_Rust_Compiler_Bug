{"sha": "94714ecc92fc575dcc5275ce291cc1681e88e62b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3MTRlY2M5MmZjNTc1ZGNjNTI3NWNlMjkxY2MxNjgxZTg4ZTYyYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-15T12:53:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-15T12:53:26Z"}, "message": "(eliminate_regs, case USE): If using a register that is source of\nelimination, show can't be eliminated.\n\nFrom-SVN: r11277", "tree": {"sha": "8db2a45c6e3b7941578a150fd26cb8b05ee15776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8db2a45c6e3b7941578a150fd26cb8b05ee15776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94714ecc92fc575dcc5275ce291cc1681e88e62b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94714ecc92fc575dcc5275ce291cc1681e88e62b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94714ecc92fc575dcc5275ce291cc1681e88e62b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94714ecc92fc575dcc5275ce291cc1681e88e62b/comments", "author": null, "committer": null, "parents": [{"sha": "a8a8cbb7599563f3a2ae7de6984e1279b3dec3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a8cbb7599563f3a2ae7de6984e1279b3dec3d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a8cbb7599563f3a2ae7de6984e1279b3dec3d2"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "788c36a6b14522bd3d94ee3af46d7738a18b8d0a", "filename": "gcc/reload1.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94714ecc92fc575dcc5275ce291cc1681e88e62b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94714ecc92fc575dcc5275ce291cc1681e88e62b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=94714ecc92fc575dcc5275ce291cc1681e88e62b", "patch": "@@ -2894,7 +2894,6 @@ eliminate_regs (x, mem_mode, insn)\n \t  }\n \n       /* Fall through to generic unary operation case.  */\n-    case USE:\n     case STRICT_LOW_PART:\n     case NEG:          case NOT:\n     case SIGN_EXTEND:  case ZERO_EXTEND:\n@@ -2983,6 +2982,19 @@ eliminate_regs (x, mem_mode, insn)\n \n       return x;\n \n+    case USE:\n+      /* If using a register that is the source of an eliminate we still\n+\t think can be performed, note it cannot be performed since we don't\n+\t know how this register is used.  */\n+      for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n+\tif (ep->from_rtx == XEXP (x, 0))\n+\t  ep->can_eliminate = 0;\n+\n+      new = eliminate_regs (XEXP (x, 0), mem_mode, insn);\n+      if (new != XEXP (x, 0))\n+\treturn gen_rtx (code, GET_MODE (x), new);\n+      return x;\n+\n     case CLOBBER:\n       /* If clobbering a register that is the replacement register for an\n \t elimination we still think can be performed, note that it cannot"}]}