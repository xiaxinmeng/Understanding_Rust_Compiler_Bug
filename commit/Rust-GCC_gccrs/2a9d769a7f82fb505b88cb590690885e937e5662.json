{"sha": "2a9d769a7f82fb505b88cb590690885e937e5662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5ZDc2OWE3ZjgyZmI1MDViODhjYjU5MDY5MDg4NWU5MzdlNTY2Mg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2011-04-01T23:38:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-01T23:38:57Z"}, "message": "dwarf2out.c (dwarf_attr_name): Map DW_AT_GNAT_descriptive_type.\n\n\t* dwarf2out.c (dwarf_attr_name): Map DW_AT_GNAT_descriptive_type.\n\t(add_gnat_descriptive_type_attribute): New function.\n\t(gen_array_type_die): Call it.\n\t(gen_enumeration_type_die): Likewise.\n\t(gen_struct_or_union_type_die): Likewise.\n\t(modified_type_die): Likewise.\n\t* langhooks.h (lang_hooks_for_types): New descriptive_type hook.\n\t* langhooks-def.h (LANG_HOOKS_DESCRIPTIVE_TYPE): Default to NULL.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add LANG_HOOKS_DESCRIPTIVE_TYPE.\nada/\n\t* gcc-interface/misc.c (gnat_descriptive_type): New function.\n\t(LANG_HOOKS_DESCRIPTIVE_TYPE): Redefine to gnat_descriptive_type.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\nCo-Authored-By: Nicolas Setton <setton@adacore.com>\n\nFrom-SVN: r171862", "tree": {"sha": "037329f3415309e9ac21668c4c9050522ef31060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037329f3415309e9ac21668c4c9050522ef31060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a9d769a7f82fb505b88cb590690885e937e5662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9d769a7f82fb505b88cb590690885e937e5662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9d769a7f82fb505b88cb590690885e937e5662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9d769a7f82fb505b88cb590690885e937e5662/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b2398a4c48cc52d3131516e01402e6297ceb16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2398a4c48cc52d3131516e01402e6297ceb16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2398a4c48cc52d3131516e01402e6297ceb16e"}], "stats": {"total": 96, "additions": 90, "deletions": 6}, "files": [{"sha": "d7f82f87dbc7e48625b68263ef2bcf71d139bf07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a9d769a7f82fb505b88cb590690885e937e5662", "patch": "@@ -1,3 +1,17 @@\n+2011-04-01  Olivier Hainque  <hainque@adacore.com>\n+            Nicolas Setton  <setton@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.c (dwarf_attr_name): Map DW_AT_GNAT_descriptive_type.\n+\t(add_gnat_descriptive_type_attribute): New function.\n+\t(gen_array_type_die): Call it.\n+\t(gen_enumeration_type_die): Likewise.\n+\t(gen_struct_or_union_type_die): Likewise.\n+\t(modified_type_die): Likewise.\n+\t* langhooks.h (lang_hooks_for_types): New descriptive_type hook.\n+\t* langhooks-def.h (LANG_HOOKS_DESCRIPTIVE_TYPE): Default to NULL.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add LANG_HOOKS_DESCRIPTIVE_TYPE.\n+\n 2011-04-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/48148"}, {"sha": "7d51728ba5ba9073fe0a7d74d5c6402e977685fc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a9d769a7f82fb505b88cb590690885e937e5662", "patch": "@@ -1,3 +1,10 @@\n+2011-04-01  Olivier Hainque  <hainque@adacore.com>\n+            Nicolas Setton  <setton@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_descriptive_type): New function.\n+\t(LANG_HOOKS_DESCRIPTIVE_TYPE): Redefine to gnat_descriptive_type.\n+\n 2011-03-28  Kai Tietz  <ktietz@redhat.com>\n \n \t* gcc-interface/Makefile.in (SO_LIB): Handle multilib build for native"}, {"sha": "a10998249d12d60687a9671ff3076c639709ca80", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=2a9d769a7f82fb505b88cb590690885e937e5662", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -521,6 +521,17 @@ gnat_dwarf_name (tree decl, int verbosity ATTRIBUTE_UNUSED)\n   return (const char *) IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n \n+/* Return the descriptive type associated with TYPE, if any.  */\n+\n+static tree\n+gnat_descriptive_type (const_tree type)\n+{\n+  if (TYPE_STUB_DECL (type))\n+    return DECL_PARALLEL_TYPE (TYPE_STUB_DECL (type));\n+  else\n+    return NULL_TREE;\n+}\n+\n /* Return true if types T1 and T2 are identical for type hashing purposes.\n    Called only after doing all language independent checks.  At present,\n    this function is only called when both types are FUNCTION_TYPE.  */\n@@ -746,6 +757,8 @@ gnat_eh_personality (void)\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tgnat_types_compatible_p\n #undef  LANG_HOOKS_GET_SUBRANGE_BOUNDS\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS  gnat_get_subrange_bounds\n+#undef  LANG_HOOKS_DESCRIPTIVE_TYPE\n+#define LANG_HOOKS_DESCRIPTIVE_TYPE\tgnat_descriptive_type\n #undef  LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n #undef  LANG_HOOKS_BUILTIN_FUNCTION"}, {"sha": "222f6bf0c8ec1b34fb968867d39a9ebf009713cc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2a9d769a7f82fb505b88cb590690885e937e5662", "patch": "@@ -6499,6 +6499,7 @@ static bool add_location_or_const_value_attribute (dw_die_ref, tree, bool,\n static bool tree_add_const_value_attribute (dw_die_ref, tree);\n static bool tree_add_const_value_attribute_for_decl (dw_die_ref, tree);\n static void add_name_attribute (dw_die_ref, const char *);\n+static void add_gnat_descriptive_type_attribute (dw_die_ref, tree, dw_die_ref);\n static void add_comp_dir_attribute (dw_die_ref);\n static void add_bound_info (dw_die_ref, enum dwarf_attribute, tree);\n static void add_subscript_info (dw_die_ref, tree, bool);\n@@ -7141,6 +7142,7 @@ dwarf_attr_name (unsigned int attr)\n       return \"DW_AT_body_begin\";\n     case DW_AT_body_end:\n       return \"DW_AT_body_end\";\n+\n     case DW_AT_GNU_vector:\n       return \"DW_AT_GNU_vector\";\n     case DW_AT_GNU_guarded_by:\n@@ -7178,6 +7180,9 @@ dwarf_attr_name (unsigned int attr)\n     case DW_AT_GNU_all_source_call_sites:\n       return \"DW_AT_GNU_all_source_call_sites\";\n \n+    case DW_AT_GNAT_descriptive_type:\n+      return \"DW_AT_GNAT_descriptive_type\";\n+\n     case DW_AT_VMS_rtnbeg_pd_address:\n       return \"DW_AT_VMS_rtnbeg_pd_address\";\n \n@@ -12859,6 +12864,7 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n \t   useful source coordinates anyway.  */\n \tname = DECL_NAME (name);\n       add_name_attribute (mod_type_die, IDENTIFIER_POINTER (name));\n+      add_gnat_descriptive_type_attribute (mod_type_die, type, context_die);\n     }\n   /* This probably indicates a bug.  */\n   else if (mod_type_die && mod_type_die->die_tag == DW_TAG_base_type)\n@@ -17306,6 +17312,38 @@ add_name_attribute (dw_die_ref die, const char *name_string)\n     }\n }\n \n+/* Retrieve the descriptive type of TYPE, if any, make sure it has a\n+   DIE and attach a DW_AT_GNAT_descriptive_type attribute to the DIE\n+   of TYPE accordingly.\n+\n+   ??? This is a temporary measure until after we're able to generate\n+   regular DWARF for the complex Ada type system.  */\n+\n+static void \n+add_gnat_descriptive_type_attribute (dw_die_ref die, tree type,\n+\t\t\t\t     dw_die_ref context_die)\n+{\n+  tree dtype;\n+  dw_die_ref dtype_die;\n+\n+  if (!lang_hooks.types.descriptive_type)\n+    return;\n+\n+  dtype = lang_hooks.types.descriptive_type (type);\n+  if (!dtype)\n+    return;\n+\n+  dtype_die = lookup_type_die (dtype);\n+  if (!dtype_die)\n+    {\n+      gen_type_die (dtype, context_die);\n+      dtype_die = lookup_type_die (dtype);\n+      gcc_assert (dtype_die);\n+    }\n+\n+  add_AT_die_ref (die, DW_AT_GNAT_descriptive_type, dtype_die);\n+}\n+\n /* Generate a DW_AT_comp_dir attribute for DIE.  */\n \n static void\n@@ -18185,6 +18223,7 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n \n   array_die = new_die (DW_TAG_array_type, scope_die, type);\n   add_name_attribute (array_die, type_tag (type));\n+  add_gnat_descriptive_type_attribute (array_die, type, context_die);\n   equate_type_number_to_die (type, array_die);\n \n   if (TREE_CODE (type) == VECTOR_TYPE)\n@@ -18487,6 +18526,7 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t\t\t  scope_die_for (type, context_die), type);\n       equate_type_number_to_die (type, type_die);\n       add_name_attribute (type_die, type_tag (type));\n+      add_gnat_descriptive_type_attribute (type_die, type, context_die);\n       if (dwarf_version >= 4 || !dwarf_strict)\n \t{\n \t  if (ENUM_IS_SCOPED (type))\n@@ -20306,7 +20346,10 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n       if (old_die)\n \tadd_AT_specification (type_die, old_die);\n       else\n-\tadd_name_attribute (type_die, type_tag (type));\n+\t{\n+\t  add_name_attribute (type_die, type_tag (type));\n+\t  add_gnat_descriptive_type_attribute (type_die, type, context_die);\n+\t}\n     }\n   else\n     remove_AT (type_die, DW_AT_declaration);"}, {"sha": "ed3230c62915420d8ff14973f78dbde1c00d540e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=2a9d769a7f82fb505b88cb590690885e937e5662", "patch": "@@ -1,6 +1,6 @@\n /* Default macros to initialize the lang_hooks data structure.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n This file is part of GCC.\n@@ -176,6 +176,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_TYPE_HASH_EQ\t\tNULL\n #define LANG_HOOKS_GET_ARRAY_DESCR_INFO\tNULL\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS\tNULL\n+#define LANG_HOOKS_DESCRIPTIVE_TYPE\tNULL\n #define LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE reconstruct_complex_type\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n@@ -193,6 +194,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_TYPE_HASH_EQ, \\\n   LANG_HOOKS_GET_ARRAY_DESCR_INFO, \\\n   LANG_HOOKS_GET_SUBRANGE_BOUNDS, \\\n+  LANG_HOOKS_DESCRIPTIVE_TYPE, \\\n   LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE \\\n }\n "}, {"sha": "e0dea01fc9aef02857d6618297a36d4b0aa6df47", "filename": "gcc/langhooks.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9d769a7f82fb505b88cb590690885e937e5662/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2a9d769a7f82fb505b88cb590690885e937e5662", "patch": "@@ -1,6 +1,6 @@\n /* The lang_hooks data structure.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -132,6 +132,11 @@ struct lang_hooks_for_types\n   /* Fill in information for the debugger about the bounds of TYPE.  */\n   void (*get_subrange_bounds) (const_tree, tree *, tree *);\n \n+  /* A type descriptive of TYPE's complex layout generated to help the\n+     debugger to decode variable-length or self-referential constructs.\n+     This is only used for the AT_GNAT_descriptive_type DWARF attribute.  */\n+  tree (*descriptive_type) (const_tree);\n+\n   /* If we requested a pointer to a vector, build up the pointers that\n      we stripped off while looking for the inner type.  Similarly for\n      return values from functions.  The argument TYPE is the top of the"}]}