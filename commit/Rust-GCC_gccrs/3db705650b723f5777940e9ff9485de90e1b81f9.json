{"sha": "3db705650b723f5777940e9ff9485de90e1b81f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiNzA1NjUwYjcyM2Y1Nzc3OTQwZTlmZjk0ODVkZTkwZTFiODFmOQ==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2017-01-05T10:05:47Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-01-05T10:05:47Z"}, "message": "S/390: Additional memset/memcpy runtime tests.\n\nThese were provided by Dominik to check more of the corner case in our\nmemset/memcpy inline code.\n\ngcc/testsuite/ChangeLog:\n\n2017-01-05  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/memcpy-2.c: New test.\n\t* gcc.target/s390/memset-2.c: New test.\n\nFrom-SVN: r244099", "tree": {"sha": "0ff8e5482dcbccab74bc0bf5625ca9b48cfe6e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ff8e5482dcbccab74bc0bf5625ca9b48cfe6e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db705650b723f5777940e9ff9485de90e1b81f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db705650b723f5777940e9ff9485de90e1b81f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db705650b723f5777940e9ff9485de90e1b81f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db705650b723f5777940e9ff9485de90e1b81f9/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a537e3905a9a098f8f4acaa8cd8e4fc1be07ff"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "86dee20ddb8bb2ce65d85e08e51f541a725e7d60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db705650b723f5777940e9ff9485de90e1b81f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db705650b723f5777940e9ff9485de90e1b81f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3db705650b723f5777940e9ff9485de90e1b81f9", "patch": "@@ -1,3 +1,8 @@\n+2017-01-05  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/memcpy-2.c: New test.\n+\t* gcc.target/s390/memset-2.c: New test.\n+\n 2017-01-05  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/memcpy-1.c: New test."}, {"sha": "b9568ec6b7a4c6dbf0fa52161a2b98610910ed5d", "filename": "gcc/testsuite/gcc.target/s390/memcpy-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db705650b723f5777940e9ff9485de90e1b81f9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db705650b723f5777940e9ff9485de90e1b81f9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemcpy-2.c?ref=3db705650b723f5777940e9ff9485de90e1b81f9", "patch": "@@ -0,0 +1,94 @@\n+/* Funtional memmov test.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#define MAX_LEN (8 * 1000)\n+#define X 0x11\n+\n+char gsrc[MAX_LEN + 2];\n+char gdst[MAX_LEN + 2];\n+\n+__attribute__ ((noinline))\n+int\n+compare_mem (int len)\n+{\n+  int i;\n+\n+  if (gdst[0] != 0x61)\n+    __builtin_abort();\n+  for (i = 1; i <= len; i++)\n+    if (gsrc[i] != gdst[i])\n+      __builtin_abort();\n+  for (i = len + 1; i < MAX_LEN; i++)\n+    if (gdst[i] != 0x61 + i % 4)\n+      __builtin_abort();\n+}\n+\n+__attribute__ ((noinline))\n+void\n+init_mem (void)\n+{\n+  unsigned int *p1;\n+  unsigned int *p2;\n+  int i;\n+\n+  p1 = (unsigned int *)gsrc;\n+  p2 = (unsigned int *)gdst;\n+  for (i = 0; i < MAX_LEN / sizeof(unsigned int); i++)\n+    {\n+      p1[i] = 0x71727374;\n+      p2[i] = 0x61626364;\n+    }\n+}\n+\n+#define MEMCPY_CHECK(DST, SRC, LEN)\t\t\t\\\n+  init_mem ();\t\t\t\t\t\t\\\n+  __builtin_memcpy ((DST) + 1, (SRC) + 1, (LEN));\t\\\n+  compare_mem ((LEN));\n+\n+\n+int main(void)\n+{\n+  int lens[] =\n+    {\n+      255, 256, 257,\n+      511, 512, 513,\n+      767, 768, 769,\n+      1023, 1024, 1025,\n+      1279, 1280, 1281,\n+      1535, 1536, 1537,\n+      -999\n+    };\n+  int t;\n+\n+  /* variable length */\n+  for (t = 0; lens[t] != -999; t++)\n+    {\n+      MEMCPY_CHECK (gdst, gsrc, lens[t]);\n+    }\n+  /* constant length */\n+  MEMCPY_CHECK (gdst, gsrc, 0);\n+  MEMCPY_CHECK (gdst, gsrc, 1);\n+  MEMCPY_CHECK (gdst, gsrc, 2);\n+  MEMCPY_CHECK (gdst, gsrc, 3);\n+  MEMCPY_CHECK (gdst, gsrc, 256);\n+  MEMCPY_CHECK (gdst, gsrc, 257);\n+  MEMCPY_CHECK (gdst, gsrc, 511);\n+  MEMCPY_CHECK (gdst, gsrc, 512);\n+  MEMCPY_CHECK (gdst, gsrc, 513);\n+  MEMCPY_CHECK (gdst, gsrc, 767);\n+  MEMCPY_CHECK (gdst, gsrc, 768);\n+  MEMCPY_CHECK (gdst, gsrc, 769);\n+  MEMCPY_CHECK (gdst, gsrc, 1023);\n+  MEMCPY_CHECK (gdst, gsrc, 1024);\n+  MEMCPY_CHECK (gdst, gsrc, 1025);\n+  MEMCPY_CHECK (gdst, gsrc, 1279);\n+  MEMCPY_CHECK (gdst, gsrc, 1280);\n+  MEMCPY_CHECK (gdst, gsrc, 1281);\n+  MEMCPY_CHECK (gdst, gsrc, 1535);\n+  MEMCPY_CHECK (gdst, gsrc, 1536);\n+  MEMCPY_CHECK (gdst, gsrc, 1537);\n+\n+  return 0;\n+}"}, {"sha": "e1af7fe30d877391aa642ace1c653bdb5d14c5e7", "filename": "gcc/testsuite/gcc.target/s390/memset-2.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db705650b723f5777940e9ff9485de90e1b81f9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemset-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db705650b723f5777940e9ff9485de90e1b81f9/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemset-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemset-2.c?ref=3db705650b723f5777940e9ff9485de90e1b81f9", "patch": "@@ -0,0 +1,92 @@\n+/* Funtional setmem test.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#define MAX_LEN (8 * 1000)\n+\n+__attribute__ ((noinline))\n+int\n+check_mem (char *mem, int val, int len)\n+{\n+  int i;\n+\n+  if (mem[0] != 0x71)\n+    __builtin_abort();\n+  for (i = 1; i <= len; i++)\n+    if (mem[i] != val)\n+      __builtin_abort();\n+  if (mem[len + 1] != 0x71 + (len + 1) % 4)\n+    __builtin_abort();\n+}\n+\n+__attribute__ ((noinline))\n+void\n+init_mem (char *mem)\n+{\n+  unsigned int *p;\n+  int i;\n+\n+  p = (unsigned int *)mem;\n+  for (i = 0; i < MAX_LEN / sizeof(unsigned int); i++)\n+    p[i] = 0x71727374;\n+}\n+\n+#define MEMSET_CHECK(VAL, SIZE)\t\t\t\\\n+  init_mem (mem1);\t\t\t\t\\\n+  __builtin_memset (mem1 + 1, 0, (SIZE));\t\\\n+  check_mem (mem1, 0, SIZE);\t\t\t\\\n+  init_mem (mem2);\t\t\t\t\\\n+  __builtin_memset (mem2 + 1, (VAL), (SIZE));\t\\\n+  check_mem (mem2, VAL, SIZE);\n+\n+char mem1[MAX_LEN + 2];\n+char mem2[MAX_LEN + 2];\n+\n+int main(int argc, char **argv)\n+{\n+  int lens[] =\n+    {\n+      256, 257, 258, 259,\n+      512, 513, 514, 515,\n+      768, 769, 770, 771,\n+      1024, 1025, 1026, 1027,\n+      1280, 1281, 1282, 1283,\n+      -999\n+    };\n+  int t;\n+\n+  /* variable length */\n+  for (t = 0; lens[t] != -999; t++)\n+    {\n+      MEMSET_CHECK (argc + 0x10, lens[t]);\n+    }\n+\n+  /* constant length */\n+  MEMSET_CHECK (argc + 0x10, 0);\n+  MEMSET_CHECK (argc + 0x10, 1);\n+  MEMSET_CHECK (argc + 0x10, 2);\n+  MEMSET_CHECK (argc + 0x10, 3);\n+  MEMSET_CHECK (argc + 0x10, 256);\n+  MEMSET_CHECK (argc + 0x10, 257);\n+  MEMSET_CHECK (argc + 0x10, 258);\n+  MEMSET_CHECK (argc + 0x10, 259);\n+  MEMSET_CHECK (argc + 0x10, 512);\n+  MEMSET_CHECK (argc + 0x10, 513);\n+  MEMSET_CHECK (argc + 0x10, 514);\n+  MEMSET_CHECK (argc + 0x10, 515);\n+  MEMSET_CHECK (argc + 0x10, 768);\n+  MEMSET_CHECK (argc + 0x10, 769);\n+  MEMSET_CHECK (argc + 0x10, 770);\n+  MEMSET_CHECK (argc + 0x10, 771);\n+  MEMSET_CHECK (argc + 0x10, 1024);\n+  MEMSET_CHECK (argc + 0x10, 1025);\n+  MEMSET_CHECK (argc + 0x10, 1026);\n+  MEMSET_CHECK (argc + 0x10, 1027);\n+  MEMSET_CHECK (argc + 0x10, 1280);\n+  MEMSET_CHECK (argc + 0x10, 1281);\n+  MEMSET_CHECK (argc + 0x10, 1282);\n+  MEMSET_CHECK (argc + 0x10, 1283);\n+\n+  return 0;\n+}"}]}