{"sha": "6f573a73b33879d1327f2f37b82cd2664a52764d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1NzNhNzNiMzM4NzlkMTMyN2YyZjM3YjgyY2QyNjY0YTUyNzY0ZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-31T07:02:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-31T07:02:46Z"}, "message": "Fix thinko in last change.\n\nFrom-SVN: r29002", "tree": {"sha": "a14c75556350b6679b93c1695ddfea41a6de8ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a14c75556350b6679b93c1695ddfea41a6de8ad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f573a73b33879d1327f2f37b82cd2664a52764d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f573a73b33879d1327f2f37b82cd2664a52764d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f573a73b33879d1327f2f37b82cd2664a52764d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f573a73b33879d1327f2f37b82cd2664a52764d/comments", "author": null, "committer": null, "parents": [{"sha": "835126657b0fcfa7515b819c156751dfc10c9d5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835126657b0fcfa7515b819c156751dfc10c9d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835126657b0fcfa7515b819c156751dfc10c9d5a"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "fc33130df3ed48f9eb4b0ac5900722105373e209", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f573a73b33879d1327f2f37b82cd2664a52764d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f573a73b33879d1327f2f37b82cd2664a52764d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6f573a73b33879d1327f2f37b82cd2664a52764d", "patch": "@@ -1689,16 +1689,6 @@ copy_rtx_if_shared (orig)\n       if (CONSTANT_ADDRESS_P (XEXP (x, 0)))\n \treturn x;\n \n-      if (GET_CODE (XEXP (x, 0)) == PLUS\n-\t  && CONSTANT_ADDRESS_P (XEXP (XEXP (x, 0), 1)))\n-\t{\n-\t  /* This MEM can appear in more than one place,\n-\t     but its address better not be shared with anything else.  */\n-\t  if (! x->used)\n-\t    XEXP (x, 0) = copy_rtx_if_shared (XEXP (x, 0));\n-\t  x->used = 1;\n-\t  return x;\n-\t}\n       break;\n \n     default:"}]}