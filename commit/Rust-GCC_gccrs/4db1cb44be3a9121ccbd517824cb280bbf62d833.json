{"sha": "4db1cb44be3a9121ccbd517824cb280bbf62d833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiMWNiNDRiZTNhOTEyMWNjYmQ1MTc4MjRjYjI4MGJiZjYyZDgzMw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2016-07-15T17:16:32Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2016-07-15T17:16:32Z"}, "message": "Implement C++17 P0025 clamp.\n\n2016-07-15  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement C++17 P0025 clamp.\n\t* include/bits/algorithmfwd.h: Declare clamp overloads.\n\t* include/bits/stl_algo.h: Implement clamp.  Feature __cpp_lib_clamp.\n\t* testsuite/25_algorithms/clamp/1.cc: New test.\n\t* testsuite/25_algorithms/clamp/2.cc: New test.\n\t* testsuite/25_algorithms/clamp/constexpr.cc: New test.\n\t* testsuite/25_algorithms/clamp/requirements/explicit_instantiation/\n\t1.cc: New test.\n\t* testsuite/25_algorithms/clamp/requirements/explicit_instantiation/\n\tpod.cc: New test.\n\nFrom-SVN: r238383", "tree": {"sha": "54ebeb5d20114eb85cee86260ec2b09fada95261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54ebeb5d20114eb85cee86260ec2b09fada95261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db1cb44be3a9121ccbd517824cb280bbf62d833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db1cb44be3a9121ccbd517824cb280bbf62d833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db1cb44be3a9121ccbd517824cb280bbf62d833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db1cb44be3a9121ccbd517824cb280bbf62d833/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a1248da3997c0d1120cf283e4765e42a8e94dd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1248da3997c0d1120cf283e4765e42a8e94dd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1248da3997c0d1120cf283e4765e42a8e94dd8"}], "stats": {"total": 330, "additions": 329, "deletions": 1}, "files": [{"sha": "25b8191e2a8ff0f03e436ce698d2203292b85996", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -1,3 +1,16 @@\n+2016-07-15  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement C++17 P0025 clamp.\n+\t* include/bits/algorithmfwd.h: Declare clamp overloads.\n+\t* include/bits/stl_algo.h: Implement clamp.  Feature __cpp_lib_clamp.\n+\t* testsuite/25_algorithms/clamp/1.cc: New test.\n+\t* testsuite/25_algorithms/clamp/2.cc: New test.\n+\t* testsuite/25_algorithms/clamp/constexpr.cc: New test.\n+\t* testsuite/25_algorithms/clamp/requirements/explicit_instantiation/\n+\t1.cc: New test.\n+\t* testsuite/25_algorithms/clamp/requirements/explicit_instantiation/\n+\tpod.cc: New test.\n+\n 2016-07-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tFix the constraints for any's assignment operator template to properly"}, {"sha": "1defb1d9080d3e208ceadef22d9c3c0708236bea", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -48,6 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     all_of (C++0x)\n     any_of (C++0x)\n     binary_search\n+    clamp (C++17)\n     copy\n     copy_backward\n     copy_if (C++0x)\n@@ -208,6 +209,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool \n     binary_search(_FIter, _FIter, const _Tp&, _Compare);\n \n+#if __cplusplus > 201402L\n+  template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n+    const _Tp&\n+    clamp(const _Tp&, const _Tp&, const _Tp&);\n+\n+  template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n+    const _Tp&\n+    clamp(const _Tp&, const _Tp&, const _Tp&, _Compare);\n+#endif\n+\n   template<typename _IIter, typename _OIter>\n     _OIter \n     copy(_IIter, _IIter, _OIter);"}, {"sha": "a0820d4132faca786448e61aa591e0c0b0bbe57b", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -3698,7 +3698,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return std::__is_permutation(__first1, __last1, __first2, __last2,\n \t\t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__pred));\n     }\n-#endif\n+\n+#if __cplusplus > 201402L\n+\n+#define __cpp_lib_clamp 201603\n+\n+  /**\n+   *  @brief  Returns the value clamped between lo and hi.\n+   *  @ingroup sorting_algorithms\n+   *  @param  __val  A value of arbitrary type.\n+   *  @param  __lo   A lower limit of arbitrary type.\n+   *  @param  __hi   An upper limit of arbitrary type.\n+   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.\n+   */\n+  template<typename _Tp>\n+    constexpr const _Tp&\n+    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)\n+    {\n+      __glibcxx_assert(!(__hi < __lo));\n+      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;\n+    }\n+\n+  /**\n+   *  @brief  Returns the value clamped between lo and hi.\n+   *  @ingroup sorting_algorithms\n+   *  @param  __val   A value of arbitrary type.\n+   *  @param  __lo    A lower limit of arbitrary type.\n+   *  @param  __hi    An upper limit of arbitrary type.\n+   *  @param  __comp  A comparison functor.\n+   *  @return max(__val, __lo, __comp) if __comp(__val, __hi)\n+   *\t      or min(__val, __hi, __comp) otherwise.\n+   */\n+  template<typename _Tp, typename _Compare>\n+    constexpr const _Tp&\n+    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi, _Compare __comp)\n+    {\n+      __glibcxx_assert(!__comp(__hi, __lo));\n+      return __comp(__val, __lo) ? __lo : __comp(__hi, __val) ? __hi : __val;\n+    }\n+#endif // C++17\n+#endif // C++14\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n   /**"}, {"sha": "cf2e13150ac252d8b23020cd8954a57c8150f73c", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F1.cc?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int x = std::clamp(1, 2, 4);\n+  const int y = std::clamp(3, 2, 4);\n+  const int z = std::clamp(5, 2, 4);\n+  VERIFY( x == 2 );\n+  VERIFY( y == 3 );\n+  VERIFY( z == 4 );\n+\n+  const int xc = std::clamp(1, 2, 4, std::greater<int>());\n+  const int yc = std::clamp(3, 2, 4, std::greater<int>());\n+  const int zc = std::clamp(5, 2, 4, std::greater<int>());\n+  VERIFY( xc == 4 );\n+  VERIFY( yc == 2 );\n+  VERIFY( zc == 2 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "50c1a518ff2ddcb87f28d11a568f2b4e93fbed6c", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/2.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2F2.cc?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -0,0 +1,102 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2000-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  struct A { static const T a; };\n+\n+template<typename T>\n+const T A<T>::a = T(3);\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( 3 == std::clamp(A<int>::a, 2, 4) );\n+  VERIFY( 2 == std::clamp(A<int>::a, 1, 2) );\n+  VERIFY( 4 == std::clamp(A<int>::a, 4, 6) );\n+\n+  VERIFY( 3u == std::clamp(A<unsigned int>::a, 2u, 4u) );\n+  VERIFY( 2u == std::clamp(A<unsigned int>::a, 1u, 2u) );\n+  VERIFY( 4u == std::clamp(A<unsigned int>::a, 4u, 6u) );\n+\n+  VERIFY( 3l == std::clamp(A<long>::a, 2l, 4l) );\n+  VERIFY( 2l == std::clamp(A<long>::a, 1l, 2l) );\n+  VERIFY( 4l == std::clamp(A<long>::a, 4l, 6l) );\n+\n+  VERIFY( 3ul == std::clamp(A<unsigned long>::a, 2ul, 4ul) );\n+  VERIFY( 2ul == std::clamp(A<unsigned long>::a, 1ul, 2ul) );\n+  VERIFY( 4ul == std::clamp(A<unsigned long>::a, 4ul, 6ul) );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  VERIFY( 3ll == std::clamp(A<long long>::a, 2ll, 4ll) );\n+  VERIFY( 2ll == std::clamp(A<long long>::a, 1ll, 2ll) );\n+  VERIFY( 4ll == std::clamp(A<long long>::a, 4ll, 6ll) );\n+\n+  VERIFY( 3ull == std::clamp(A<unsigned long long>::a, 2ull, 4ull) );\n+  VERIFY( 2ull == std::clamp(A<unsigned long long>::a, 1ull, 2ull) );\n+  VERIFY( 4ull == std::clamp(A<unsigned long long>::a, 4ull, 6ull) );\n+#endif\n+\n+  VERIFY( (short)3 == std::clamp(A<short>::a, (short)2, (short)4) );\n+  VERIFY( (short)2 == std::clamp(A<short>::a, (short)1, (short)2) );\n+  VERIFY( (short)4 == std::clamp(A<short>::a, (short)4, (short)6) );\n+\n+  VERIFY( (unsigned short)3 == std::clamp(A<unsigned short>::a, (unsigned short)2, (unsigned short)4) );\n+  VERIFY( (unsigned short)2 == std::clamp(A<unsigned short>::a, (unsigned short)1, (unsigned short)2) );\n+  VERIFY( (unsigned short)4 == std::clamp(A<unsigned short>::a, (unsigned short)4, (unsigned short)6) );\n+\n+  VERIFY( (char)3 == std::clamp(A<char>::a, (char)2, (char)4) );\n+  VERIFY( (char)2 == std::clamp(A<char>::a, (char)1, (char)2) );\n+  VERIFY( (char)4 == std::clamp(A<char>::a, (char)4, (char)6) );\n+\n+  VERIFY( (signed char)3 == std::clamp(A<signed char>::a, (signed char)2, (signed char)4) );\n+  VERIFY( (signed char)2 == std::clamp(A<signed char>::a, (signed char)1, (signed char)2) );\n+  VERIFY( (signed char)4 == std::clamp(A<signed char>::a, (signed char)4, (signed char)6) );\n+\n+  VERIFY( (unsigned char)3 == std::clamp(A<unsigned char>::a, (unsigned char)2, (unsigned char)4) );\n+  VERIFY( (unsigned char)2 == std::clamp(A<unsigned char>::a, (unsigned char)1, (unsigned char)2) );\n+  VERIFY( (unsigned char)4 == std::clamp(A<unsigned char>::a, (unsigned char)4, (unsigned char)6) );\n+\n+  VERIFY( (wchar_t)3 == std::clamp(A<wchar_t>::a, (wchar_t)2, (wchar_t)4) );\n+  VERIFY( (wchar_t)2 == std::clamp(A<wchar_t>::a, (wchar_t)1, (wchar_t)2) );\n+  VERIFY( (wchar_t)4 == std::clamp(A<wchar_t>::a, (wchar_t)4, (wchar_t)6) );\n+\n+  VERIFY( 3.0 == std::clamp(A<double>::a, 2.0, 4.0) );\n+  VERIFY( 2.0 == std::clamp(A<double>::a, 1.0, 2.0) );\n+  VERIFY( 4.0 == std::clamp(A<double>::a, 4.0, 6.0) );\n+\n+  VERIFY( 3.0f == std::clamp(A<float>::a, 2.0f, 4.0f) );\n+  VERIFY( 2.0f == std::clamp(A<float>::a, 1.0f, 2.0f) );\n+  VERIFY( 4.0f == std::clamp(A<float>::a, 4.0f, 6.0f) );\n+\n+  VERIFY( 3.0l == std::clamp(A<long double>::a, 2.0l, 4.0l) );\n+  VERIFY( 2.0l == std::clamp(A<long double>::a, 1.0l, 2.0l) );\n+  VERIFY( 4.0l == std::clamp(A<long double>::a, 4.0l, 6.0l) );\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "4ff8798cfaeef68ed5a95cfb471bf6139ea05e3c", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/constexpr.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Fconstexpr.cc?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+\n+#ifndef __cpp_lib_clamp\n+# error \"Feature-test macro for clamp missing\"\n+#elif __cpp_lib_clamp != 201603\n+# error \"Feature-test macro for clamp has wrong value\"\n+#endif\n+\n+static_assert(std::clamp(2, 0, 1) == 1, \"\");\n+static_assert(std::clamp(2, 0, 1, std::greater<int>()) == 0, \"\");"}, {"sha": "d8bf8d6dcee4692eaedb9ddc2a1e0389255fd2ec", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+#ifndef __cpp_lib_clamp\n+# error \"Feature-test macro for clamp missing\"\n+#elif __cpp_lib_clamp != 201603\n+# error \"Feature-test macro for clamp has wrong value\"\n+#endif\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible\tvalue_type;\n+  typedef value_type*\t\t\titerator_type;\n+  typedef std::less<value_type>\t\tcompare_type;\n+\n+  template const value_type& clamp(const value_type&,\n+\t\t\t\t   const value_type&, const value_type&);\n+  template const value_type& clamp(const value_type&,\n+\t\t\t\t   const value_type&, const value_type&,\n+\t\t\t\t   compare_type);\n+}"}, {"sha": "acb6d0f26b82faa965ad533322b6230ff75af25a", "filename": "libstdc++-v3/testsuite/25_algorithms/clamp/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db1cb44be3a9121ccbd517824cb280bbf62d833/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fclamp%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=4db1cb44be3a9121ccbd517824cb280bbf62d833", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template const value_type& clamp(const value_type&,\n+\t\t\t\t   const value_type&, const value_type&);\n+  template const value_type& clamp(const value_type&,\n+\t\t\t\t   const value_type&, const value_type&,\n+\t\t\t\t   compare_type);\n+}"}]}