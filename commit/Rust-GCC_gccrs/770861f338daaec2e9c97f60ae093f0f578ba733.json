{"sha": "770861f338daaec2e9c97f60ae093f0f578ba733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwODYxZjMzOGRhYWVjMmU5Yzk3ZjYwYWUwOTNmMGY1NzhiYTczMw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-01-12T19:52:29Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-01-12T19:52:29Z"}, "message": "Makefile.in (bootstrap): rename stages to be mnemonic.\n\n* Makefile.in (bootstrap): rename stages to be mnemonic.  Add\nrestageN, unstageN, bubblestrap, quickstrap, and cleanstrap\ntargets.\n\nFrom-SVN: r38959", "tree": {"sha": "eb9df4cc33815ae275d55b043682be8b76100602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb9df4cc33815ae275d55b043682be8b76100602"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770861f338daaec2e9c97f60ae093f0f578ba733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770861f338daaec2e9c97f60ae093f0f578ba733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770861f338daaec2e9c97f60ae093f0f578ba733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770861f338daaec2e9c97f60ae093f0f578ba733/comments", "author": null, "committer": null, "parents": [{"sha": "6f87af20c351e777702cc58a31dbef03bbbf1bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f87af20c351e777702cc58a31dbef03bbbf1bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f87af20c351e777702cc58a31dbef03bbbf1bac"}], "stats": {"total": 152, "additions": 104, "deletions": 48}, "files": [{"sha": "9afec5bbde79d6af43bd81fb81686fca536a8763", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770861f338daaec2e9c97f60ae093f0f578ba733/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770861f338daaec2e9c97f60ae093f0f578ba733/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=770861f338daaec2e9c97f60ae093f0f578ba733", "patch": "@@ -1,3 +1,9 @@\n+2001-01-12  DJ Delorie  <dj@redhat.com>\n+\n+\t* Makefile.in (bootstrap): rename stages to be mnemonic.  Add\n+\trestageN, unstageN, bubblestrap, quickstrap, and cleanstrap\n+\ttargets.\n+\n 2001-01-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* cpp.texi, extend.texi, gcc.texi, install.texi, invoke.texi,"}, {"sha": "aa9c2e2475b35712abad9a85c919f1c03bcce57e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 98, "deletions": 48, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770861f338daaec2e9c97f60ae093f0f578ba733/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770861f338daaec2e9c97f60ae093f0f578ba733/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=770861f338daaec2e9c97f60ae093f0f578ba733", "patch": "@@ -2295,8 +2295,9 @@ clean: mostlyclean $(INTL_CLEAN) lang.clean\n \tfi ; fi\n \t-rm -fr stage1 stage2 stage3 stage4\n # Delete stamps of bootstrap stages\n-\t-rm -f stage_*\n-\t-rm -f clean_*\n+\t-rm -f stage?_*\n+\t-rm -f clean?_*\n+\t-rm -f stage_last\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n@@ -2827,84 +2828,133 @@ STAGE2_FLAGS_TO_PASS = \\\n # Only build the C compiler for stage1, because that is the only one that\n # we can guarantee will build with the native compiler, and also it is the\n # only thing useful for building stage2.\n-stage_a: \n+stage1_build:\n \t+$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\"\n-\ttouch stage_a\n+\ttouch stage1_build\n+\techo stage1_build > stage_last\n \n-stage_b: stage_a\n+stage1_copy: stage1_build\n \t$(MAKE) stage1\n-\ttouch stage_b\n+\ttouch stage1_copy\n+\techo stage2_build > stage_last\n \n # This used to define ALLOCA as empty, but that would lead to bad results\n # for a subsequent `make install' since that would not have ALLOCA empty.\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-stage_c: stage_b\n+stage2_build: stage1_copy\n \t+$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" \\\n \t\t STAGE_PREFIX=stage1/ \\\n \t\t $(STAGE2_FLAGS_TO_PASS)\n-\ttouch stage_c\n+\ttouch stage2_build\n+\techo stage2_build > stage_last\n \n-stage_d: stage_c\n+stage2_copy: stage2_build\n \t+$(MAKE) stage2\n-\ttouch stage_d\n+\ttouch stage2_copy\n+\techo stage3_build > stage_last\n \n-stage_e: stage_d\n+stage3_build: stage2_copy\n \t+$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" \\\n \t\t STAGE_PREFIX=stage2/ \\\n \t\t $(STAGE2_FLAGS_TO_PASS)\n-\ttouch stage_e\n+\ttouch stage3_build\n+\techo stage3_build > stage_last\n \n # For bootstrap4:\n-stage_f: stage_e\n+stage3_copy: stage3_build\n+\t+$(MAKE) stage3\n+\ttouch stage3_copy\n+\techo stage4_build > stage_last\n+\n+stage4_build: stage3_copy\n \t+$(MAKE) CC=\"stage3/xgcc$(exeext) -B$(build_tooldir)/bin/ -Bstage3/\" \\\n \t\t STAGE_PREFIX=stage3/ \\\n \t\t $(STAGE2_FLAGS_TO_PASS)\n-\ttouch stage_f\n+\ttouch stage4_build\n+\techo stage4_build > stage_last\n \n # Additional steps for *-lean targets:\n-clean_s1: stage_b\n+clean_s1: stage1_copy\n \t-(cd stage1 && rm -f $(VOL_FILES))\n \ttouch clean_s1\n \n-clean_s2: stage_d\n+clean_s2: stage2_copy\n \t-rm -rf stage1\n \ttouch clean_s2\n \n-# This next little bit is the way it is for parallel builds.  It's simply\n-# a chain of stages which DO have to be done sequentially.\n-\n-bootstrap_a:              stage_a\n-bootstrap_b:  bootstrap_a stage_b\n-bootstrap_c:  bootstrap_b stage_c\n-bootstrap_d:  bootstrap_c stage_d\n-bootstrap_e:  bootstrap_d stage_e\n-bootstrap: force bootstrap_e\n-\n-bootstrap-lean_a:                   stage_a\n-bootstrap-lean_b:  bootstrap-lean_a stage_b\n-bootstrap-lean_c:  bootstrap-lean_b clean_s1 \n-bootstrap-lean_d:  bootstrap-lean_c stage_c\n-bootstrap-lean_e:  bootstrap-lean_d stage_d\n-bootstrap-lean_f:  bootstrap-lean_e clean_s2\n-bootstrap-lean_g:  bootstrap-lean_f stage_e\n-bootstrap-lean: force bootstrap-lean_g\n-\n-bootstrap2_c:               stage_c\n-bootstrap2_d:  bootstrap2_c stage_d\n-bootstrap2_e:  bootstrap2_d stage_e\n-bootstrap2: force bootstrap2_e\n-\n-bootstrap2-lean_c:                    stage_c\n-bootstrap2-lean_d:  bootstrap2-lean_c stage_d\n-bootstrap2-lean_e:  bootstrap2-lean_d clean_s2\n-bootstrap2-lean_f:  bootstrap2-lean_e stage_e\n-bootstrap2-lean: force bootstrap2-lean_f\n-\n-bootstrap3 bootstrap3-lean: force stage_e\n+# The various entry points for bootstrapping.\n+\n+bootstrap: stage3_build\n+\t@echo\n+\t@echo Bootstrap complete - make \\\"quickstrap\\\" to redo last build,\n+\t@echo \\\"restage1\\\" through \\\"restage3\\\" to rebuild specific stages,\n+\t@echo or \\\"cleanstrap\\\" to redo the bootstrap from scratch.\n+\n+bootstrap-lean : clean_s1 clean_s2 stage3_build\n+\t@echo\n+\t@echo Bootstrap complete - make \\\"quickstrap\\\" to redo last build,\n+\t@echo or \\\"cleanstrap\\\" to redo the bootstrap from scratch.\n+\n+bootstrap2: bootstrap\n+\n+bootstrap2-lean : bootstrap_lean\n+\n+bootstrap3 bootstrap3-lean: bootstrap\n  \n-bootstrap4 bootstrap4-lean: force stage_f\n+bootstrap4 bootstrap4-lean: stage4_build\n+\n+unstage1 unstage2 unstage3 unstage4:\n+\t-set -vx; stage=`echo $@ | sed -e 's/un//'`; \\\n+\tif test -d $$stage; then \\\n+\t  mv $$stage/* . 2>/dev/null; \\\n+\t  for i in `cd $$stage; echo *` ; do \\\n+\t    if test -d $$stage/$$i; then \\\n+\t      mv $$stage/$$i/* $$i/. 2>/dev/null; \\\n+\t    else \\\n+\t      mv $$stage/$$i .; \\\n+\t    fi \\\n+\t  done \\\n+\tfi ; \\\n+\trm -f $${stage}_build $${stage}_copy ;\\\n+\techo $${stage}_build > stage_last\n+\n+restage1: unstage1\n+\t$(MAKE) stage1_build\n+\n+restage2: unstage2\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage2_build\n+\n+restage3: unstage3\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage3_build\n+\n+restage4: unstage4\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage4_build\n+\n+bubblestrap:\n+\tif test -f stage3_build; then true; else \\\n+\t  echo; echo You must \\\"make bootstrap\\\" first.; \\\n+\t  exit 1; \\\n+\tfi\n+\tfor i in stage3 \\\n+\t\tunstage1 stage1_build stage1_copy \\\n+\t\tunstage2 stage2_build stage2_copy \\\n+\t\tunstage3 stage3_build ; \\\n+\tdo \\\n+\t  $(MAKE) LANGUAGES=\"$(LANGUAGES)\" $$i || exit 1 ; \\\n+\tdone\n+\n+quickstrap:\n+\tif test -f stage_last ; then \\\n+\t  LAST=`cat stage_last`; rm $$LAST; $(MAKE) LANGUAGES=\"$(LANGUAGES)\" $$LAST; \\\n+\telse \\\n+\t  $(MAKE) stage1_build; \\\n+\tfi\n+\n+cleanstrap:\n+\t-$(MAKE) clean\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" bootstrap\n \n # Compare the object files in the current directory with those in the\n # stage2 directory."}]}