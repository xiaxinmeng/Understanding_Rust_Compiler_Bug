{"sha": "16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZhMTZlYzdkYjBhNWM2MjY1NjdiNTdiYTQ5ZTA5YzRhNWNjY2I3Ng==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2015-06-25T16:51:35Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2015-06-25T16:51:35Z"}, "message": "function.h (struct incoming_args): Move struct.\n\n\n2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* function.h (struct incoming_args): Move struct.\n\t(pass_by_reference, reference_callee_copied): Remove prototypes.\n\t* emit-rtl.h (struct incoming_args): Relocate struct here.\n\t* calls.h (pass_by_reference, reference_callee_copied): Relocate\n\tprototypes here.\n\t* function.c (pass_by_reference, reference_callee_copied): Move.\n\t* calls.c (pass_by_reference, reference_callee_copied): Relocate here.\n\t* cfgloop.h: Don't include tm.h or hard-reg-set.h.\n\t* ipa-chkp.c: Include calls.h.\n\n\t* ada/gcc-interface/misc.c: Include calls.h not function.h.\n\n\t* c-family/cilk.c: Move calls.h after tm.h in the include chain.\n\nFrom-SVN: r224951", "tree": {"sha": "08270b7c9b79613ad264a52e14a5567e8d6dc4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08270b7c9b79613ad264a52e14a5567e8d6dc4fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/comments", "author": null, "committer": null, "parents": [{"sha": "9cad7a76c373e3e18c6d821a8848aae7dcb73675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cad7a76c373e3e18c6d821a8848aae7dcb73675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cad7a76c373e3e18c6d821a8848aae7dcb73675"}], "stats": {"total": 181, "additions": 102, "deletions": 79}, "files": [{"sha": "a45adfd715f60965e50c7fcaea7d4cbf67f44e26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -1,3 +1,15 @@\n+2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* function.h (struct incoming_args): Move struct.\n+\t(pass_by_reference, reference_callee_copied): Remove prototypes.\n+\t* emit-rtl.h (struct incoming_args): Relocate struct here.\n+\t* calls.h (pass_by_reference, reference_callee_copied): Relocate\n+\tprototypes here.\n+\t* function.c (pass_by_reference, reference_callee_copied): Move.\n+\t* calls.c (pass_by_reference, reference_callee_copied): Relocate here.\n+\t* cfgloop.h: Don't include tm.h or hard-reg-set.h.\n+\t* ipa-chkp.c: Include calls.h.\n+\n 2015-06-25  Andrew Macleod  <amacleod@redhat.com>\n \n \t* alias.h (alias_set_type): Move typedef."}, {"sha": "09d1ef9e09d81cd742148612460c4342f4b5e05d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc-interface/misc.c: Include calls.h not function.h.\n+\n 2015-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (record_builtin_type): Adjust comment."}, {"sha": "bb11ce49b83a8f0f7cbdd172765537f792bad64f", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -48,7 +48,7 @@\n #include \"plugin.h\"\n #include \"hashtab.h\"\n #include \"hard-reg-set.h\"\n-#include \"function.h\"\t/* For pass_by_reference.  */\n+#include \"calls.h\"\t/* For pass_by_reference.  */\n #include \"dwarf2out.h\"\n \n #include \"ada.h\""}, {"sha": "61afc6a87e54bc7819efd500cdf1426a03ee53c7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* cilk.c: Move calls.h after tm.h in the include chain.\n+\n 2015-06-25  Marek Polacek  <polacek@redhat.com>\n \n \t* array-notation-common.c: Use VAR_P throughout."}, {"sha": "29ac1b294227a641fbdd4d7d15e4eb77580dc932", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -29,7 +29,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"fold-const.h\"\n #include \"stringpool.h\"\n-#include \"calls.h\"\n #include \"langhooks.h\"\n #include \"gimple-expr.h\"\n #include \"gimplify.h\"\n@@ -41,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"hard-reg-set.h\"\n #include \"function.h\"\n+#include \"calls.h\"\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\""}, {"sha": "7cb2c3df9487d1627cbeeca16ebf4d035ef9452d", "filename": "gcc/calls.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -858,6 +858,50 @@ call_expr_flags (const_tree t)\n   return flags;\n }\n \n+/* Return true if TYPE should be passed by invisible reference.  */\n+\n+bool\n+pass_by_reference (CUMULATIVE_ARGS *ca, machine_mode mode,\n+\t\t   tree type, bool named_arg)\n+{\n+  if (type)\n+    {\n+      /* If this type contains non-trivial constructors, then it is\n+\t forbidden for the middle-end to create any new copies.  */\n+      if (TREE_ADDRESSABLE (type))\n+\treturn true;\n+\n+      /* GCC post 3.4 passes *all* variable sized types by reference.  */\n+      if (!TYPE_SIZE (type) || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+\treturn true;\n+\n+      /* If a record type should be passed the same as its first (and only)\n+\t member, use the type and mode of that member.  */\n+      if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n+\t{\n+\t  type = TREE_TYPE (first_field (type));\n+\t  mode = TYPE_MODE (type);\n+\t}\n+    }\n+\n+  return targetm.calls.pass_by_reference (pack_cumulative_args (ca), mode,\n+\t\t\t\t\t  type, named_arg);\n+}\n+\n+/* Return true if TYPE, which is passed by reference, should be callee\n+   copied instead of caller copied.  */\n+\n+bool\n+reference_callee_copied (CUMULATIVE_ARGS *ca, machine_mode mode,\n+\t\t\t tree type, bool named_arg)\n+{\n+  if (type && TREE_ADDRESSABLE (type))\n+    return false;\n+  return targetm.calls.callee_copies (pack_cumulative_args (ca), mode, type,\n+\t\t\t\t      named_arg);\n+}\n+\n+\n /* Precompute all register parameters as described by ARGS, storing values\n    into fields within the ARGS array.\n "}, {"sha": "7cea2c12567967f2775c9cb32ed432afd63aa646", "filename": "gcc/calls.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -32,6 +32,11 @@ extern bool shift_return_value (machine_mode, bool, rtx);\n extern rtx expand_call (tree, rtx, int);\n extern void fixup_tail_calls (void);\n \n+extern bool pass_by_reference (CUMULATIVE_ARGS *, machine_mode,\n+\t\t\t       tree, bool);\n+extern bool reference_callee_copied (CUMULATIVE_ARGS *, machine_mode,\n+\t\t\t\t     tree, bool);\n+\n \n \n #endif // GCC_CALLS_H"}, {"sha": "29b626a90edd45d65cc36789849cd1a815506d66", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -22,8 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n-#include \"tm.h\"\n-#include \"hard-reg-set.h\"\n #include \"function.h\"\n #include \"cfgloopmanip.h\"\n "}, {"sha": "f52c3357b9cbeb75ed8fce5865e8267c423b1e7a", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -23,6 +23,36 @@ along with GCC; see the file COPYING3.  If not see\n struct temp_slot;\n typedef struct temp_slot *temp_slot_p;\n \n+/* Information mainlined about RTL representation of incoming arguments.  */\n+struct GTY(()) incoming_args {\n+  /* Number of bytes of args popped by function being compiled on its return.\n+     Zero if no bytes are to be popped.\n+     May affect compilation of return insn or of function epilogue.  */\n+  int pops_args;\n+\n+  /* If function's args have a fixed size, this is that size, in bytes.\n+     Otherwise, it is -1.\n+     May affect compilation of return insn or of function epilogue.  */\n+  int size;\n+\n+  /* # bytes the prologue should push and pretend that the caller pushed them.\n+     The prologue must do this, but only if parms can be passed in\n+     registers.  */\n+  int pretend_args_size;\n+\n+  /* This is the offset from the arg pointer to the place where the first\n+     anonymous arg can be found, if there is one.  */\n+  rtx arg_offset_rtx;\n+\n+  /* Quantities of various kinds of registers\n+     used for the current function's args.  */\n+  CUMULATIVE_ARGS info;\n+\n+  /* The arg pointer hard register, or the pseudo into which it was copied.  */\n+  rtx internal_arg_pointer;\n+};\n+\n+\n /* Datastructures maintained for currently processed function in RTL form.  */\n struct GTY(()) rtl_data {\n   struct expr_status expr;"}, {"sha": "e746b3fbbe230af3a4059b6907d5601a850375b8", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -2169,49 +2169,6 @@ use_register_for_decl (const_tree decl)\n   return true;\n }\n \n-/* Return true if TYPE should be passed by invisible reference.  */\n-\n-bool\n-pass_by_reference (CUMULATIVE_ARGS *ca, machine_mode mode,\n-\t\t   tree type, bool named_arg)\n-{\n-  if (type)\n-    {\n-      /* If this type contains non-trivial constructors, then it is\n-\t forbidden for the middle-end to create any new copies.  */\n-      if (TREE_ADDRESSABLE (type))\n-\treturn true;\n-\n-      /* GCC post 3.4 passes *all* variable sized types by reference.  */\n-      if (!TYPE_SIZE (type) || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n-\treturn true;\n-\n-      /* If a record type should be passed the same as its first (and only)\n-\t member, use the type and mode of that member.  */\n-      if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n-\t{\n-\t  type = TREE_TYPE (first_field (type));\n-\t  mode = TYPE_MODE (type);\n-\t}\n-    }\n-\n-  return targetm.calls.pass_by_reference (pack_cumulative_args (ca), mode,\n-\t\t\t\t\t  type, named_arg);\n-}\n-\n-/* Return true if TYPE, which is passed by reference, should be callee\n-   copied instead of caller copied.  */\n-\n-bool\n-reference_callee_copied (CUMULATIVE_ARGS *ca, machine_mode mode,\n-\t\t\t tree type, bool named_arg)\n-{\n-  if (type && TREE_ADDRESSABLE (type))\n-    return false;\n-  return targetm.calls.callee_copies (pack_cumulative_args (ca), mode, type,\n-\t\t\t\t      named_arg);\n-}\n-\n /* Structures to communicate between the subroutines of assign_parms.\n    The first holds data persistent across all parameters, the second\n    is cleared out for each parameter.  */"}, {"sha": "f9b2468e0be8482e7b67219928e5c0f33ec81748", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -169,34 +169,6 @@ struct GTY(()) varasm_status {\n   unsigned int deferred_constants;\n };\n \n-/* Information mainlined about RTL representation of incoming arguments.  */\n-struct GTY(()) incoming_args {\n-  /* Number of bytes of args popped by function being compiled on its return.\n-     Zero if no bytes are to be popped.\n-     May affect compilation of return insn or of function epilogue.  */\n-  int pops_args;\n-\n-  /* If function's args have a fixed size, this is that size, in bytes.\n-     Otherwise, it is -1.\n-     May affect compilation of return insn or of function epilogue.  */\n-  int size;\n-\n-  /* # bytes the prologue should push and pretend that the caller pushed them.\n-     The prologue must do this, but only if parms can be passed in\n-     registers.  */\n-  int pretend_args_size;\n-\n-  /* This is the offset from the arg pointer to the place where the first\n-     anonymous arg can be found, if there is one.  */\n-  rtx arg_offset_rtx;\n-\n-  /* Quantities of various kinds of registers\n-     used for the current function's args.  */\n-  CUMULATIVE_ARGS info;\n-\n-  /* The arg pointer hard register, or the pseudo into which it was copied.  */\n-  rtx internal_arg_pointer;\n-};\n \n /* Data for function partitioning.  */\n struct GTY(()) function_subsections {\n@@ -610,10 +582,6 @@ extern bool initial_value_entry (int i, rtx *, rtx *);\n extern void instantiate_decl_rtl (rtx x);\n extern int aggregate_value_p (const_tree, const_tree);\n extern bool use_register_for_decl (const_tree);\n-extern bool pass_by_reference (CUMULATIVE_ARGS *, machine_mode,\n-\t\t\t       tree, bool);\n-extern bool reference_callee_copied (CUMULATIVE_ARGS *, machine_mode,\n-\t\t\t\t     tree, bool);\n extern gimple_seq gimplify_parameters (void);\n extern void locate_and_pad_parm (machine_mode, tree, int, int, int,\n \t\t\t\t tree, struct args_size *,"}, {"sha": "c0bc4326078a0f600b32bf4cdba35604364876c5", "filename": "gcc/ipa-chkp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16a16ec7db0a5c626567b57ba49e09c4a5cccb76/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=16a16ec7db0a5c626567b57ba49e09c4a5cccb76", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"hard-reg-set.h\"\n #include \"function.h\"\n+#include \"calls.h\"\n #include \"tree-ssa-alias.h\"\n #include \"predict.h\"\n #include \"basic-block.h\""}]}