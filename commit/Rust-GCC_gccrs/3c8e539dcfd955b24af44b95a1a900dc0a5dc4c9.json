{"sha": "3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4ZTUzOWRjZmQ5NTViMjRhZjQ0Yjk1YTFhOTAwZGMwYTVkYzRjOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-30T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-30T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "a486a4d7ff64f773090b2d615e03dab9643042ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a486a4d7ff64f773090b2d615e03dab9643042ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/comments", "author": null, "committer": null, "parents": [{"sha": "e52494da916600ff89becc812e8ed972563c8c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52494da916600ff89becc812e8ed972563c8c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52494da916600ff89becc812e8ed972563c8c1c"}], "stats": {"total": 652, "additions": 651, "deletions": 1}, "files": [{"sha": "975a43f9b4b0bd95024f1e51ce237010f0615514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,233 @@\n+2021-04-29  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config.gcc: Merged x86 and x86_64 cpu_type-setting cases.\n+\n+2021-04-29  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/i386/i386.h (ASM_OUTPUT_MAX_SKIP_PAD): Rename to...\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN): ... this.  Enclose in do/while(0).\n+\t* config/i386/i386.c: Adjust.\n+\t* config/i386/i386.md: Adjust.\n+\t* config/i386/darwin.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Drop.\n+\t* config/i386/dragonfly.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/freebsd.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/gas.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/gnu-user.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/iamcu.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/lynx.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/netbsd-elf.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/openbsdelf.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t* config/i386/x86-64.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Likewise.\n+\t(ASM_OUTPUT_MAX_SKIP_PAD): Likewise.\n+\n+2021-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_int_compare):\n+\tSwap operands of GTU and LEU comparison to emit carry flag comparison.\n+\t* config/i386/i386.md (*add<mode>3_carry_0): Change insn\n+\tpredicate to allow more combine opportunities with memory operands.\n+\t(*sub<mode>3_carry_0): Ditto.\n+\n+2021-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/100303\n+\t* rtl-ssa/accesses.cc (function_info::make_use_available): Take a\n+\tboolean that indicates whether the use will only be used in\n+\tdebug instructions.  Treat it in the same way that existing\n+\tcross-EBB debug references would be handled if so.\n+\t(function_info::make_uses_available): Likewise.\n+\t* rtl-ssa/functions.h (function_info::make_uses_available): Update\n+\tprototype accordingly.\n+\t(function_info::make_uses_available): Likewise.\n+\t* fwprop.c (try_fwprop_subst): Update call accordingly.\n+\n+2021-04-29  Jeff Law  <jlaw@tachyum.com>\n+\n+\t* config/nios2/nios2-protos.h (nios2_fpu_insn_enabled): Move outside\n+\tof RTX_CODE guard.\n+\n+2021-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/100312\n+\t* config/i386/i386-builtin.def (IX86_BUILTIN_MASKLOADPD)\n+\t(IX86_BUILTIN_MASKLOADPS, IX86_BUILTIN_MASKLOADPD256)\n+\t(IX86_BUILTIN_MASKLOADPS256, IX86_BUILTIN_MASKLOADD)\n+\t(IX86_BUILTIN_MASKLOADQ, IX86_BUILTIN_MASKLOADD256)\n+\t(IX86_BUILTIN_MASKLOADQ256): Move from SPECIAL_ARGS\n+\tto PURE_ARGS category.\n+\t* config/i386/i386-builtins.c (ix86_init_mmx_sse_builtins):\n+\tHandle PURE_ARGS category.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Ditto.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Check for the presence of sys/locking.h header and\n+\tfor whether _LK_LOCK is supported by _locking.\n+\t* configure: Regenerate.\n+\t* config.in: Likewise.\n+\t* gcov-io.h: Define GCOV_LOCKED_WITH_LOCKING if HOST_HAS_LK_LOCK.\n+\t* gcov-io.c (gcov_open): Add support for GCOV_LOCKED_WITH_LOCKING.\n+\t* system.h: Include <sys/locking.h> if HAVE_SYS_LOCKING_H.\n+\n+2021-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (fcmov_comparison_operator):\n+\tDo not check for trivial FP comparison operator.\n+\t<case GEU, case LTU>: Allow CCGZmode.\n+\t<case GTU, case LEU>: Do not allow CCCmode.\n+\t(ix86_comparison_operator) <case GTU, case LEU>: Allow only CCmode.\n+\t(ix86_carry_flag_operator): Match only LTU and UNLT code.\n+\tDo not check for trivial FP comparison operator.  Allow CCGZmode.\n+\n+2021-04-29  Tom de Vries  <tdevries@suse.de>\n+\n+\t* omp-expand.c (expand_omp_simd): Add step_orig, and replace uses of\n+\tfd->loop.step by either step or orig_step.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (gen_load_pcrel_sym): Delete.\n+\t(load_got_register): Do the PIC dance here.\n+\t(sparc_legitimize_tls_address): Simplify.\n+\t(sparc_emit_probe_stack_range): Likewise.\n+\t(sparc32_initialize_trampoline): Likewise.\n+\t(sparc64_initialize_trampoline): Likewise.\n+\t* config/sparc/sparc.md (load_pcrel_sym<P:mode>): Add @ marker.\n+\t(probe_stack_range<P:mode>): Likewise.\n+\t(flush<P:mode>): Likewise.\n+\t(tgd_hi22<P:mode>): Likewise.\n+\t(tgd_lo10<P:mode>): Likewise.\n+\t(tgd_add<P:mode>): Likewise.\n+\t(tgd_call<P:mode>): Likewise.\n+\t(tldm_hi22<P:mode>): Likewise.\n+\t(tldm_lo10<P:mode>): Likewise.\n+\t(tldm_add<P:mode>): Likewise.\n+\t(tldm_call<P:mode>): Likewise.\n+\t(tldo_hix22<P:mode>): Likewise.\n+\t(tldo_lox10<P:mode>): Likewise.\n+\t(tldo_add<P:mode>): Likewise.\n+\t(tie_hi22<P:mode>): Likewise.\n+\t(tie_lo10<P:mode>): Likewise.\n+\t(tie_add<P:mode>): Likewise.\n+\t(tle_hix22<P:mode>): Likewise.\n+\t(tle_lox10<P:mode>): Likewise.\n+\t(stack_protect_setsi): Rename to...\n+\t(stack_protect_set32): ...this.\n+\t(stack_protect_setdi): Rename to...\n+\t(stack_protect_set64): ...this.\n+\t(stack_protect_set): Adjust calls to above.\n+\t(stack_protect_testsi): Rename to...\n+\t(stack_protect_test32): ...this.\n+\t(stack_protect_testdi): Rename to...\n+\t(stack_protect_test64): ...this.\n+\t(stack_protect_test): Adjust calls to above.\n+\n+2021-04-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* builtins.c (builtin_memcpy_read_str): Add a dummy argument.\n+\t(builtin_strncpy_read_str): Likewise.\n+\t(builtin_memset_read_str): Add an argument for the previous RTL\n+\tinformation and generate the new RTL from the previous RTL info.\n+\t(builtin_memset_gen_str): Likewise.\n+\t* builtins.h (builtin_strncpy_read_str): Update the prototype.\n+\t(builtin_memset_read_str): Likewise.\n+\t* expr.c (by_pieces_ninsns): If targetm.overlap_op_by_pieces_p()\n+\treturns true, round up size and alignment to the widest integer\n+\tmode for maximum size.\n+\t(pieces_addr::adjust): Add a pointer to by_pieces_prev argument\n+\tand pass it to m_constfn.\n+\t(op_by_pieces_d): Add m_push and m_overlap_op_by_pieces.\n+\t(op_by_pieces_d::op_by_pieces_d): Add a bool argument to\n+\tinitialize m_push.  Initialize m_overlap_op_by_pieces with\n+\ttargetm.overlap_op_by_pieces_p ().\n+\t(op_by_pieces_d::run): Pass the previous RTL information to\n+\tpieces_addr::adjust and generate overlapping operations if\n+\tm_overlap_op_by_pieces is true.\n+\t(PUSHG_P): New.\n+\t(move_by_pieces_d::move_by_pieces_d): Updated for op_by_pieces_d\n+\tchange.\n+\t(store_by_pieces_d::store_by_pieces_d): Updated for op_by_pieces_d\n+\tchange.\n+\t(can_store_by_pieces): Use by_pieces_constfn on constfun.\n+\t(store_by_pieces): Use by_pieces_constfn on constfun.  Updated\n+\tfor op_by_pieces_d change.\n+\t(clear_by_pieces_1): Add a dummy argument.\n+\t(clear_by_pieces): Updated for op_by_pieces_d change.\n+\t(compare_by_pieces_d::compare_by_pieces_d): Likewise.\n+\t(string_cst_read_str): Add a dummy argument.\n+\t* expr.h (by_pieces_constfn): Add a dummy argument.\n+\t(by_pieces_prev): New.\n+\t* target.def (overlap_op_by_pieces_p): New target hook.\n+\t* config/i386/i386.c (TARGET_OVERLAP_OP_BY_PIECES_P): New.\n+\t* doc/tm.texi.in: Add TARGET_OVERLAP_OP_BY_PIECES_P.\n+\t* doc/tm.texi: Regenerated.\n+\n+2021-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100253\n+\t* tree-vect-stmts.c (vectorizable_load): Do not assume\n+\telement alignment when DR_MISALIGNMENT is -1.\n+\t(vectorizable_store): Likewise.\n+\n+2021-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100302\n+\t* config/aarch64/aarch64.c (aarch64_add_offset_1_temporaries): Use\n+\tabsu_hwi instead of abs_hwi.\n+\n+2021-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/38474\n+\t* tree-ssa-structalias.c (add_graph_edge): Avoid direct\n+\tforwarding when indirect forwarding through ESCAPED\n+\talread happens.\n+\n+2021-04-29  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/100232\n+\t* internal-fn.c (expand_GOMP_SIMT_ENTER_ALLOC)\n+\t(expand_GOMP_SIMT_LAST_LANE, expand_GOMP_SIMT_ORDERED_PRED)\n+\t(expand_GOMP_SIMT_VOTE_ANY, expand_GOMP_SIMT_XCHG_BFLY)\n+\t(expand_GOMP_SIMT_XCHG_IDX): Ensure target is assigned to.\n+\n+2021-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99912\n+\t* tree-ssa-dse.c (dse_dom_walker::m_need_cfg_cleanup): New.\n+\t(dse_dom_walker::todo): Likewise.\n+\t(dse_dom_walker::dse_optimize_stmt): Move VDEF check to the\n+\tcaller.\n+\t(dse_dom_walker::before_dom_children): Remove trivially\n+\tdead SSA defs and schedule CFG cleanup if we removed all\n+\tPHIs in a block.\n+\t(pass_dse::execute): Get TODO as computed by the DOM walker\n+\tand return it.  Wipe dominator info earlier.\n+\n+2021-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/100308\n+\t* ipa-prop.c (ipcp_modif_dom_walker::before_dom_children):\n+\tTrack blocks to cleanup EH in new m_need_eh_cleanup.\n+\t(ipcp_modif_dom_walker::cleanup_eh): New.\n+\t(ipcp_transform_function): Release dominator info before\n+\tdoing EH cleanup.\n+\n+2021-04-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100250\n+\t* attribs.c (attr_access::array_as_string): Avoid dereferencing\n+\ta pointer when it's null.\n+\n+2021-04-29  Martin Sebor  <msebor@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add ipa-free-lang-data.o.\n+\t* ipa-free-lang-data.cc: New file.\n+\t* tree.c: Move pass free_lang_data to file above.\n+\t (build_array_type_1): Declare extern.\n+\t* tree.h (build_array_type_1): Declare.\n+\n 2021-04-28  Jonathan Wright  <jonathan.wright@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def: Modify comment to"}, {"sha": "e485971526caf73d700b446f4c292c2d321577d5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1 +1 @@\n-20210429\n+20210430"}, {"sha": "acaa7ae5367e73fca777582ea4125598bd6ce155", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,243 @@\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference)\n+\t<Attribute_Max_Size_In_Storage_Elements>: Apply the checks for\n+\tuniversal integer contexts only in the default case.\n+\t* exp_ch4.adb (Get_Size_For_Range): Move to library level.\n+\t(Expand_N_Type_Conversion): If the operand has Universal_Integer\n+\ttype and the conversion requires an overflow check, try to do an\n+\tintermediate conversion to a narrower type.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Anonymous_Access_Component): Factor out\n+\tcore processing of Check_Anonymous_Access_Components.\n+\t(Check_Anonymous_Access_Components): Call\n+\tCheck_Anonymous_Access_Component.\n+\t(Process_Discriminants): Call Check_Anonymous_Access_Component.\n+\t* freeze.adb (Freeze_Record_Type): Code cleanups and add more tree\n+\tchecking to handle changes in sem_ch3.adb.\n+\t* sem_ch8.adb (Find_Type): Remove special case for access\n+\tdiscriminant in task types, these are now supported.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Compare_Minimize_Eliminate_Overflow): Remove\n+\tentry condition.\n+\t(Expand_N_In): Call Minimized_Eliminated_Overflow_Check on the left\n+\toperand before doing the special overflow expansion.\n+\t(Expand_N_Op_Eq): Likewise.\n+\t(Expand_N_Op_Ge): Likewise.\n+\t(Expand_N_Op_Gt): Likewise.\n+\t(Expand_N_Op_Le): Likewise.\n+\t(Expand_N_Op_Lt): Likewise.\n+\t(Expand_N_Op_Ne): Likewise.\n+\t(Minimized_Eliminated_Overflow_Check): Return False for Minimized\n+\tif the size of the type is greater than that of Long_Long_Integer.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_If_Statement): Only perform the\n+\tsimplification on return True/False for internal nodes when\n+\t-fpreserve-control-flow is not set.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute) <Attribute_Machine>: Use\n+\tRound_Even instead of Round in the call to the Machine routine.\n+\n+2021-04-29  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Change \"$\" to \"&\".\n+\tOtherwise, Errout will trip over an uninitialized (invalid)\n+\tvariable (Error_Msg_Unit_1).\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Set Extra to zero\n+\twhen the precision limit is reached by means of trailing zeros\n+\tand prevent it from being overwritten later.\n+\n+2021-04-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (Output_Messages): Insert SGR strings where needed.\n+\t* erroutc.adb (Output_Message_Txt): Insert SGR strings where\n+\tneeded in the text of the message itself.\n+\t(Output_Msg_Text): Allow for style message not to start\n+\twith (style).\n+\t* erroutc.ads: Add new constants and functions to control colors\n+\tin messages output to the terminal. Add variable Use_SGR_Control\n+\tthat should be set to True for using SGR color control strings.\n+\n+2021-04-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_eval.adb (Check_Non_Static_Context_For_Overflow): Apply\n+\tcompile-time checking for overflows in non-static contexts\n+\tincluding inlined code.\n+\t(Eval_Arithmetic_Op): Use the new procedure.\n+\t(Eval_Unary_Op, Eval_Op_Expon): Add call to the new procedure.\n+\n+2021-04-29  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Apply_Type_Conversion_Checks): Move out constraint\n+\tcheck generation, and add case for general access types with\n+\tconstraints.\n+\t(Make_Discriminant_Constraint_Check): Created to centralize\n+\tgeneration of constraint checks for stored discriminants.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Force a 32-bit Duration\n+\ttype if the maximum integer size is lower than 64 bits.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl (ADA_EXCLUDE_SRCS): Remove unused files.\n+\t(ADA_INCLUDE_SRCS): Remove libgnat/system.ads\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Collect_Initialization_Statements): Removed.\n+\t(Convert_Aggr_In_Object_Decl, Expand_Array_Aggregate): Fix\n+\tcreation and insertion of Initialization_Statements.  Do not set\n+\tInitialization_Statements when a transient scope is involved.\n+\tMove processing of Array_Slice here.  Ensure that an object with\n+\tan Array_Slice call gets its array component initialized.  Add\n+\tcomments.\n+\t* exp_ch7.adb: Update comments.\n+\t(Store_Actions_In_Scope): Deal properly with an empty list which\n+\tmight now be generated by Convert_Aggr_In_Object_Decl.\n+\t* exp_ch3.adb: Update comments.\n+\t(Expand_N_Object_Declaration): Remove processing of Array_Slice.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Update check for\n+\tAI12-0401.\n+\n+2021-04-29  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/s-stoele.ads (Storage_Offset): Cleanup comment.\n+\n+2021-04-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Add_Own_DIC): Relax the suppression of adding a\n+\tDIC Check pragma that's done for abstract types by still doing\n+\tit in the case where GNATprove_Mode is set.\n+\n+2021-04-29  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* Makefile.rtl (ADA_EXCLUDE_SRCS): Remove s-gcc.adb, s-gcc.ads,\n+\ts-gccdiv.adb, s-gccdiv.ads, s-gccshi.adb and s-gccshi.ads.\n+\n+2021-04-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* layout.adb (Layout_Type): Refine type of a local variable with\n+\tthe required size of object from Int to Pos (it is initialized\n+\twith 8 and only multiplied by 2); fix unbalanced parens in\n+\tcomment.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* eval_fat.adb (Succ): Use Ureal_Half in a couple of places.\n+\n+2021-04-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Build_Constrained_Itype): Inhibit the generation\n+\tof predicate functions for this Itype, which is created for an\n+\taggregate of a discriminated type. The object to which the\n+\taggregate is assigned, e.g a writable actual parameter, will\n+\tapply the predicates if any are inherited from the base type.\n+\n+2021-04-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_cat.adb (Set_Categorization_From_Pragmas): Remove special\n+\tcase for generic child units; remove optimization for empty list\n+\tof pragmas; properly restore visibility.\n+\n+2021-04-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_elab.adb (Process_SPARK_Instantiation): Fix typo in\n+\tcomment.\n+\t* sem_prag.adb (Find_Related_Context): Add missing reference to\n+\tNo_Caching in the comment; handle pragmas on compilation units.\n+\n+2021-04-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst: Change all\n+\toccurrences of \"permissible prefix\" to \"allowed prefix\", for\n+\tconsistency.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* eval_fat.adb (Succ): Add a special case for zero if the type does\n+\tnot support denormalized numbers.  Always use the canonical formula\n+\tin other cases and add commentary throughout the function.\n+\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-fatgen.adb: Remove with clause for Interfaces and\n+\tuse type clauses for Interfaces.Unsigned_{16,32,64}.\n+\t(Small16): Remove.\n+\t(Small32): Likewise\n+\t(Small64): Likewise.\n+\t(Small80): Likewise.\n+\t(Tiny16): Likewise.\n+\t(Tiny32): Likewise.\n+\t(Tiny64): Likewise.\n+\t(Tiny80): Likewise.\n+\t(Siz): Always use 16.\n+\t(NR): New constant.\n+\t(Rep_Last): Use it in the computation.\n+\t(Exp_Factor): Remove special case for 80-bit.\n+\t(Sign_Mask): Likewise.\n+\t(Finite_Succ): New function implementing the Succ attribute for\n+\tfinite numbers.\n+\t(Pred): Rewrite in terms of Finite_Succ.\n+\t(Succ): Likewise.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* debug_a.adb (Debug_Output_Astring): Remove obsolete comment.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_attr.adb (Check_Image_Type): Protect against empty\n+\tImage_Type.\n+\n+2021-04-29  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads (From_Universal_Image): New.\n+\t(Big_Integer): Update definition.\n+\t* libgnat/a-nbnbre.ads, libgnat/a-nbnbre.adb\n+\t(From_Universal_Image): New.\n+\t(From_String): Remove alternate body, replaced by\n+\tFrom_Universal_Image.\n+\t(Big_Real): Update definition.\n+\n+2021-04-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Type): Check the No_Obsolescent_Features\n+\trestriction for 'Class applied to an untagged incomplete\n+\ttype (when Ada_Version >= Ada_2005).  Remove disabling of the\n+\twarning message for such usage, along with the ??? comment,\n+\twhich no longer applies (because the -gnatg switch no longer\n+\tsets Warn_On_Obsolescent_Feature).\n+\n+2021-04-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (Error_Msg_NEL): Extract span from node.\n+\t(First_And_Last_Nodes): Use spans for subtype indications and\n+\tattribute definition clauses.\n+\t(Write_Source_Code_Lines): Fix for tabulation characters. Change\n+\toutput for large spans to skip intermediate lines.\n+\t* sem_case.adb (Check_Choice_Set): Report duplicate choice on\n+\tthe Original_Node for the case.\n+\t(Generic_Check_Choices): Set the Original_Node for the rewritten\n+\tcase, so that the subtree used in spans has the correct\n+\tlocations.\n+\n 2021-04-28  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_ch13.adb, sem_util.adb: Fix style."}, {"sha": "e61ec5d6180106042d8372705c70fc4e8bb32934", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,10 @@\n+2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-typeck.c (function_types_compatible_p): For C2X, treat\n+\tunprototyped function as compatible with non-variadic prototyped\n+\tfunction even if some argument types are changed by the default\n+\targument promotions.\n+\n 2021-04-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/99420"}, {"sha": "86430fb582839325f1ce6563db10f5131a98b897", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,56 @@\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_fold_indirect_ref_1): Only set *empty_base if we\n+\tdon't find a field.\n+\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51344\n+\t* decl2.c (grokfield): Call cplus_decl_attributes for friend.\n+\t(save_template_attributes): Use chainon.\n+\t* friend.c (do_friend): Remove attrlist parm.\n+\t* cp-tree.h (do_friend): Adjust.\n+\t* class.c (add_implicitly_declared_members): Adjust.\n+\t* decl.c (grokdeclarator): Adjust.\n+\t* pt.c (apply_late_template_attributes): Optimize.\n+\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97974\n+\t* class.c (finish_struct_anon_r): Drop complain parm.\n+\tRemove non-field diagnostic.\n+\t(finish_struct_anon): Adjust.\n+\t* decl.c (fixup_anonymous_aggr): Move non-field diagnostic here.\n+\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (cp_evaluated): Add reset parm to constructor.\n+\t* parser.c (cp_parser_constant_expression): Change\n+\tallow_non_constant_p to int.  Use cp_evaluated.\n+\t(cp_parser_initializer_clause): Pass 2 to allow_non_constant_p.\n+\t* semantics.c (finish_id_expression_1): Don't mess with\n+\tcp_unevaluated_operand here.\n+\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h: Clarify comments.\n+\t* pt.c (get_template_parm_object): Add assert.\n+\t* semantics.c (finish_compound_literal): Clear TREE_HAS_CONSTRUCTOR.\n+\t* tree.c (zero_init_expr_p): Check TREE_HAS_CONSTRUCTOR.\n+\t* typeck2.c (store_init_value): Likewise.\n+\n+2021-04-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/68942\n+\t* pt.c (tsubst_copy_and_build) <case CALL_EXPR>: When KOENIG_P,\n+\tset tf_conv during the initial substitution into the function.\n+\n+2021-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100319\n+\t* semantics.c (finish_omp_clauses): Fix up check that variable\n+\tmentioned in detach clause doesn't appear in data-sharing clauses.\n+\n 2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* module.cc: Remove #error that triggers if DEV-PHASE is empty."}, {"sha": "6c780008a68669f5370cc017a938541b4f8d9021", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,11 @@\n+2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n+2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* fr.po: Update.\n+\n 2021-04-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,"}, {"sha": "e9c943b5a8bcefa18e5f362ebecf6bbe8e40c4a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,95 @@\n+2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/82359\n+\t* g++.dg/cpp1y/digit-sep-line.C,\n+\tg++.dg/cpp1y/digit-sep-line-neg.C: New tests.\n+\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/lookup/using-decl1.C: New test.\n+\n+2021-04-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97974\n+\t* g++.old-deja/g++.law/union4.C: Add expected diagnostic.\n+\n+2021-04-29  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/68942\n+\t* g++.dg/template/koenig12.C: New test.\n+\n+2021-04-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94102\n+\t* g++.dg/cpp1z/class-deduction87.C: New test.\n+\n+2021-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/100303\n+\t* g++.dg/torture/pr100303.C: New file.\n+\n+2021-04-29  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* g++.dg/pr90773-1.h: New test.\n+\t* g++.dg/pr90773-1a.C: Likewise.\n+\t* g++.dg/pr90773-1b.C: Likewise.\n+\t* g++.dg/pr90773-1c.C: Likewise.\n+\t* g++.dg/pr90773-1d.C: Likewise.\n+\t* gcc.target/i386/pr90773-1.c: Likewise.\n+\t* gcc.target/i386/pr90773-2.c: Likewise.\n+\t* gcc.target/i386/pr90773-3.c: Likewise.\n+\t* gcc.target/i386/pr90773-4.c: Likewise.\n+\t* gcc.target/i386/pr90773-5.c: Likewise.\n+\t* gcc.target/i386/pr90773-6.c: Likewise.\n+\t* gcc.target/i386/pr90773-7.c: Likewise.\n+\t* gcc.target/i386/pr90773-8.c: Likewise.\n+\t* gcc.target/i386/pr90773-9.c: Likewise.\n+\t* gcc.target/i386/pr90773-10.c: Likewise.\n+\t* gcc.target/i386/pr90773-11.c: Likewise.\n+\t* gcc.target/i386/pr90773-12.c: Likewise.\n+\t* gcc.target/i386/pr90773-13.c: Likewise.\n+\t* gcc.target/i386/pr90773-14.c: Likewise.\n+\n+2021-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100253\n+\t* g++.dg/pr100253.C: New testcase.\n+\n+2021-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100305\n+\t* gcc.c-torture/compile/pr100305.c: Remove dg-options.  Add PR line.\n+\n+2021-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100302\n+\t* gcc.target/aarch64/sve/pr100302.c: New test.\n+\n+2021-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100319\n+\t* c-c++-common/gomp/task-detach-3.c: New test.\n+\n+2021-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99912\n+\t* gcc.dg/pr95580.c: Disable DSE.\n+\t* gcc.dg/Wrestrict-8.c: Place a use after each memcpy.\n+\t* c-c++-common/ubsan/overflow-negate-3.c: Make asms volatile\n+\tto prevent them from being removed.\n+\t* c-c++-common/ubsan/overflow-sub-4.c: Likewise.\n+\n+2021-04-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/100250\n+\t* gcc.dg/uninit-pr100250.c: New test.\n+\n+2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-unproto-1.c, gcc.dg/c11-unproto-2.c,\n+\tgcc.dg/c2x-unproto-1.c, gcc.dg/c2x-unproto-2.c: New tests.\n+\n 2021-04-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.dg/gomp/map-5.f90: New test."}, {"sha": "8f7d8a40b39ad82c7bdb8ba6aa435376b85d5dac", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,8 @@\n+2021-04-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/82359\n+\t* directives.c (strtolinenum): Handle digit separators.\n+\n 2021-04-19  Richard Biener  <rguenther@suse.de>\n \n \tPR preprocessor/100142"}, {"sha": "b7fe756dea3254bbdda31e788789d2ee63c53955", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,9 @@\n+2021-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgcov.h: For the target, define GCOV_LOCKED_WITH_LOCKING\n+\tif __MSVCRT__ and, for the host, define it if HOST_HAS_LK_LOCK.\n+\t* libgcov-driver.c: Add directives if GCOV_LOCKED_WITH_LOCKING.\n+\n 2021-04-28  Patrick McGehearty  <patrick.mcgehearty@oracle.com>\n \n \t* libgcc2.c (XMTYPE, XCTYPE, RBIG, RMIN, RMIN2, RMINSCAL, RMAX2):"}, {"sha": "f85337e9f8eceb2fff2f95e538688d985d1dd0b5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3c8e539dcfd955b24af44b95a1a900dc0a5dc4c9", "patch": "@@ -1,3 +1,12 @@\n+2021-04-29  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.c/pr81778.c: New test.\n+\n+2021-04-29  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/100232\n+\t* testsuite/libgomp.c/target-43.c: New file.\n+\n 2021-04-28  Jakub Jelinek  <jakub@redhat.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}]}