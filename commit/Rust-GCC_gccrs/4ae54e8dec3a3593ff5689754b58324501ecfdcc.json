{"sha": "4ae54e8dec3a3593ff5689754b58324501ecfdcc", "node_id": "C_kwDOANBUbNoAKDRhZTU0ZThkZWMzYTM1OTNmZjU2ODk3NTRiNTgzMjQ1MDFlY2ZkY2M", "commit": {"author": {"name": "chenglulu", "email": "chenglulu@loongson.cn", "date": "2021-11-27T07:07:31Z"}, "committer": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2022-03-29T09:43:36Z"}, "message": "LoongArch Port: gcc/testsuite\n\n2022-03-29  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Lulu Cheng  <chenglulu@loongson.cn>\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-rom.C: Add build options for LoongArch.\n\t* g++.old-deja/g++.abi/ptrmem.C: Add LoongArch support.\n\t* g++.old-deja/g++.pt/ptrmem6.C: xfail for LoongArch.\n\t* gcc.dg/20020312-2.c: Add LoongArch support.\n\t* c-c++-common/zero-scratch-regs-10.c: Like wise\n\t* c-c++-common/zero-scratch-regs-11.c: Like wise\n\t* c-c++-common/zero-scratch-regs-8.c: Like wise\n\t* c-c++-common/zero-scratch-regs-9.c: Like wise\n\t* gcc.dg/loop-8.c: Skip on LoongArch.\n\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-3.c: Likewise.\n\t* go.test/go-test.exp: Define the LoongArch target.\n\t* lib/target-supports.exp: Like wise.\n\t* gcc.target/loongarch/loongarch.exp: New file.\n\t* gcc.target/loongarch/tst-asm-const.c: Like wise.\n\t* gcc.target/loongarch/larch-builtin.c: Like wise.", "tree": {"sha": "ef435a330c65b6e7c22ece253ac3d2fa78bf5221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef435a330c65b6e7c22ece253ac3d2fa78bf5221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ae54e8dec3a3593ff5689754b58324501ecfdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae54e8dec3a3593ff5689754b58324501ecfdcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae54e8dec3a3593ff5689754b58324501ecfdcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae54e8dec3a3593ff5689754b58324501ecfdcc/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34024b715068801ddf4e1a95223f9ff31f63a802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34024b715068801ddf4e1a95223f9ff31f63a802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34024b715068801ddf4e1a95223f9ff31f63a802"}], "stats": {"total": 356, "additions": 346, "deletions": 10}, "files": [{"sha": "a89de4850a60bdd589768f4ff4b51b550a0bd37b", "filename": "gcc/testsuite/c-c++-common/zero-scratch-regs-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-10.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* nvptx*-*-* s390*-*-* } } } */\n+/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* nvptx*-*-* s390*-*-* loongarch64*-*-* } } } */\n /* { dg-options \"-O2\" } */\n \n #include <assert.h>"}, {"sha": "b7739b2c6f66a502a1d1ac5224bfad0641dfe83d", "filename": "gcc/testsuite/c-c++-common/zero-scratch-regs-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-11.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* arm*-*-* nvptx*-*-* s390*-*-* } } } */\n+/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* arm*-*-* nvptx*-*-* s390*-*-* loongarch64*-*-* } } } */\n /* { dg-options \"-O2 -fzero-call-used-regs=all\" } */\n \n #include \"zero-scratch-regs-10.c\""}, {"sha": "067b2c67778476f1e988917edd62ae4bf64a3e58", "filename": "gcc/testsuite/c-c++-common/zero-scratch-regs-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-8.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* arm*-*-* nvptx*-*-* s390*-*-* } } } */\n+/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* arm*-*-* nvptx*-*-* s390*-*-* loongarch64*-*-* } } } */\n /* { dg-options \"-O2 -fzero-call-used-regs=all-arg\" } */\n \n #include \"zero-scratch-regs-1.c\""}, {"sha": "ea83bc146b7b2c88694e3bab9395c11d58b86e47", "filename": "gcc/testsuite/c-c++-common/zero-scratch-regs-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fzero-scratch-regs-9.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* arm*-*-* nvptx*-*-* s390*-*-* } } } */\n+/* { dg-skip-if \"not implemented\" { ! { i?86*-*-* x86_64*-*-* sparc*-*-* aarch64*-*-* arm*-*-* nvptx*-*-* s390*-*-* loongarch64*-*-* } } } */\n /* { dg-options \"-O2 -fzero-call-used-regs=all\" } */\n \n #include \"zero-scratch-regs-1.c\""}, {"sha": "424979a604b88c6edb48803761f957dc1b5a4ca5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-rom.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-rom.C?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1,6 +1,6 @@\n // PR c++/49673: check that test_data goes into .rodata\n // { dg-do compile { target c++11 } }\n-// { dg-additional-options -G0 { target { { alpha*-*-* frv*-*-* ia64-*-* lm32*-*-* m32r*-*-* microblaze*-*-* mips*-*-* nios2-*-* powerpc*-*-* rs6000*-*-* } && { ! { *-*-darwin* *-*-aix* alpha*-*-*vms* } } } } }\n+// { dg-additional-options -G0 { target { { alpha*-*-* frv*-*-* ia64-*-* lm32*-*-* m32r*-*-* microblaze*-*-* mips*-*-* loongarch*-*-* nios2-*-* powerpc*-*-* rs6000*-*-* } && { ! { *-*-darwin* *-*-aix* alpha*-*-*vms* } } } } }\n // { dg-final { scan-assembler \"\\\\.rdata\" { target mips*-*-* } } }\n // { dg-final { scan-assembler \"rodata\" { target { { *-*-linux-gnu *-*-gnu* *-*-elf } && { ! { mips*-*-* riscv*-*-* } } } } } }\n "}, {"sha": "f69000e90811c097e19dadd86a21f8b4cb7a2bd6", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrmem.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -7,7 +7,7 @@\n    function.  However, some platforms use all bits to encode a\n    function pointer.  Such platforms use the lowest bit of the delta,\n    that is shifted left by one bit.  */\n-#if defined __MN10300__ || defined __SH5__ || defined __arm__ || defined __thumb__ || defined __mips__ || defined __aarch64__ || defined __PRU__\n+#if defined __MN10300__ || defined __SH5__ || defined __arm__ || defined __thumb__ || defined __mips__ || defined __aarch64__ || defined __PRU__ || defined __loongarch__\n #define ADJUST_PTRFN(func, virt) ((void (*)())(func))\n #define ADJUST_DELTA(delta, virt) (((delta) << 1) + !!(virt))\n #else"}, {"sha": "8f8f7017ab761c3fd316b7b9b86afdb5a56fbef7", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ptrmem6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fptrmem6.C?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -25,7 +25,7 @@ int main() {\n   h<&B::j>(); // { dg-error \"\" } \n   g<(void (A::*)()) &A::f>(); // { dg-error \"\" \"\" { xfail c++11 } }\n   h<(int A::*) &A::i>(); // { dg-error \"\" \"\" { xfail c++11 } }\n-  g<(void (A::*)()) &B::f>(); // { dg-error \"\" \"\" { xfail { c++11 && { aarch64*-*-* arm*-*-* mips*-*-* } } } }\n+  g<(void (A::*)()) &B::f>(); // { dg-error \"\" \"\" { xfail { c++11 && { aarch64*-*-* arm*-*-* mips*-*-* loongarch*-*-* } } } }\n   h<(int A::*) &B::j>(); // { dg-error \"\" } \n   g<(void (A::*)()) 0>(); // { dg-error \"\" \"\" { target { ! c++11 } } }\n   h<(int A::*) 0>(); // { dg-error \"\" \"\" { target { ! c++11 } } }"}, {"sha": "92bc150df0fc8f7871e05f6e9930eec6404fc895", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -37,6 +37,8 @@ extern void abort (void);\n /* PIC register is r1, but is used even without -fpic.  */\n #elif defined(__lm32__)\n /* No pic register.  */\n+#elif defined(__loongarch__)\n+/* No pic register.  */\n #elif defined(__M32R__)\n /* No pic register.  */\n #elif defined(__m68k__)"}, {"sha": "8e5f2087831ebf215152479d8ed0a7eee6a580cb", "filename": "gcc/testsuite/gcc.dg/loop-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fdump-rtl-loop2_invariant\" } */\n-/* { dg-skip-if \"unexpected IV\" { \"hppa*-*-* mips*-*-* visium-*-* powerpc*-*-* riscv*-*-* mmix-*-* vax-*-*\" } } */\n+/* { dg-skip-if \"unexpected IV\" { \"hppa*-*-* mips*-*-* visium-*-* powerpc*-*-* riscv*-*-* mmix-*-* vax-*-* loongarch*-*-*\" } } */\n /* Load immediate on condition is available from z13 on and prevents moving\n    the load out of the loop, so always run this test with -march=zEC12 that\n    does not have load immediate on condition.  */"}, {"sha": "552ca1433f4f119c6d30c4d6dbad9212b33e7165", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -9,7 +9,7 @@\n /* arm_hf_eabi: Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\n    avr: Variadic funcs don't pass arguments in registers, while normal funcs\n         do.  */\n-/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { csky*-*-* avr-*-* riscv*-*-* or1k*-*-* msp430-*-* amdgcn-*-* pru-*-* } } } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { csky*-*-* avr-*-* riscv*-*-* or1k*-*-* msp430-*-* amdgcn-*-* pru-*-* loongarch*-*-* } } } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { nds32*-*-* } { v850*-*-* } } */\n /* { dg-require-effective-target untyped_assembly } */\n    "}, {"sha": "224dd4f72ef82724430eb37966f5dca246184f10", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-3.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -5,7 +5,7 @@\n \n    When the condition is true, we distribute \"(int) (a + b)\" as\n    \"(int) a + (int) b\", otherwise we keep the original.  */\n-/* { dg-do compile { target { ! mips64 } } } */\n+/* { dg-do compile { target { ! mips64 } && { ! loongarch64 } } } */\n /* { dg-options \"-O -fno-tree-forwprop -fno-tree-ccp -fwrapv -fdump-tree-fre1-details\" } */\n \n /* From PR14844.  */"}, {"sha": "ca7ddb1406f558e7ccfe322331dc0de8f04bff85", "filename": "gcc/testsuite/gcc.target/loongarch/larch-builtin.c", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Flarch-builtin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Flarch-builtin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Flarch-builtin.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -0,0 +1,265 @@\n+/* Test for LoongArch intrinsics. */\n+\n+/* { dg-do compile } */\n+\n+/* { dg-final { scan-assembler-times \"test_rdtime_d:.*rdtime\\\\.d.*\\\\.size\ttest_rdtime_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_rdtimeh_w:.*rdtimeh\\\\.w.*\\\\.size\ttest_rdtimeh_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_rdtimel_w:.*rdtimel\\\\.w.*\\\\.size\ttest_rdtimel_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_movfcsr2gr:.*movfcsr2gr.*\\\\.size\ttest_movfcsr2gr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_movgr2fcsr:.*movgr2fcsr.*\\\\.size\ttest_movgr2fcsr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_cacop_d:.*cacop.*\\\\.size\ttest_cacop_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_cpucfg:.*cpucfg.*\\\\.size\ttest_cpucfg\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_asrtle_d:.*asrtle\\\\.d.*\\\\.size\ttest_asrtle_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_asrtgt_d:.*asrtgt\\\\.d.*\\\\.size\ttest_asrtgt_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_lddir_d:.*lddir.*\\\\.size\ttest_lddir_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_ldpte_d:.*ldpte.*\\\\.size\ttest_ldpte_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crc_w_b_w:.*crc\\\\.w\\\\.b\\\\.w.*\\\\.size\ttest_crc_w_b_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crc_w_h_w:.*crc\\\\.w\\\\.h\\\\.w.*\\\\.size\ttest_crc_w_h_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crc_w_w_w:.*crc\\\\.w\\\\.w\\\\.w.*\\\\.size\ttest_crc_w_w_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crc_w_d_w:.*crc\\\\.w\\\\.d\\\\.w.*\\\\.size\ttest_crc_w_d_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crcc_w_b_w:.*crcc\\\\.w\\\\.b\\\\.w.*\\\\.size\ttest_crcc_w_b_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crcc_w_h_w:.*crcc\\\\.w\\\\.h\\\\.w.*\\\\.size\ttest_crcc_w_h_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crcc_w_w_w:.*crcc\\\\.w\\\\.w\\\\.w.*\\\\.size\ttest_crcc_w_w_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_crcc_w_d_w:.*crcc\\\\.w\\\\.d\\\\.w.*\\\\.size\ttest_crcc_w_d_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_csrrd_w:.*csrrd.*\\\\.size\ttest_csrrd_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_csrwr_w:.*csrwr.*\\\\.size\ttest_csrwr_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_csrxchg_w:.*csrxchg.*\\\\.size\ttest_csrxchg_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_csrrd_d:.*csrrd.*\\\\.size\ttest_csrrd_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_csrwr_d:.*csrwr.*\\\\.size\ttest_csrwr_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_csrxchg_d:.*csrxchg.*\\\\.size\ttest_csrxchg_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrrd_b:.*iocsrrd\\\\.b.*\\\\.size\ttest_iocsrrd_b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrrd_h:.*iocsrrd\\\\.h.*\\\\.size\ttest_iocsrrd_h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrrd_w:.*iocsrrd\\\\.w.*\\\\.size\ttest_iocsrrd_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrrd_d:.*iocsrrd\\\\.d.*\\\\.size\ttest_iocsrrd_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrwr_b:.*iocsrwr\\\\.b.*\\\\.size\ttest_iocsrwr_b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrwr_h:.*iocsrwr\\\\.h.*\\\\.size\ttest_iocsrwr_h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrwr_w:.*iocsrwr\\\\.w.*\\\\.size\ttest_iocsrwr_w\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_iocsrwr_d:.*iocsrwr\\\\.d.*\\\\.size\ttest_iocsrwr_d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_dbar:.*dbar.*\\\\.size\ttest_dbar\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_ibar:.*ibar.*\\\\.size\ttest_ibar\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_syscall:.*syscall.*\\\\.size\ttest_syscall\" 1 } } */\n+/* { dg-final { scan-assembler-times \"test_break:.*break.*\\\\.size\ttest_break\" 1 } } */\n+\n+#include<larchintrin.h>\n+\n+__drdtime_t\n+test_rdtime_d ()\n+{\n+  return __rdtime_d ();\n+}\n+\n+__rdtime_t\n+test_rdtimeh_w ()\n+{\n+  return __rdtimeh_w ();\n+}\n+\n+__rdtime_t\n+test_rdtimel_w ()\n+{\n+  return __rdtimel_w ();\n+}\n+\n+unsigned int\n+test_movfcsr2gr ()\n+{\n+  return __movfcsr2gr (1);\n+}\n+\n+void\n+test_movgr2fcsr (unsigned int _1)\n+{\n+  __movgr2fcsr (1, _1);\n+}\n+\n+void\n+test_cacop_d (unsigned long int _1)\n+{\n+  __cacop_d (1, _1, 1);\n+}\n+\n+unsigned int\n+test_cpucfg (unsigned int _1)\n+{\n+  return __cpucfg (_1);\n+}\n+\n+void\n+test_asrtle_d (long int _1, long int _2)\n+{\n+  __asrtle_d (_1, _2);\n+}\n+\n+void\n+test_asrtgt_d (long int _1, long int _2)\n+{\n+  __asrtgt_d (_1, _2);\n+}\n+\n+long int\n+test_lddir_d (long int _1)\n+{\n+  return __lddir_d (_1, 1);\n+}\n+\n+void\n+test_ldpte_d (long int _1)\n+{\n+  __ldpte_d (_1, 1);\n+}\n+\n+int\n+test_crc_w_b_w (char _1, int _2)\n+{\n+  return __crc_w_b_w (_1, _2);\n+}\n+\n+int\n+test_crc_w_h_w (short _1, int _2)\n+{\n+  return __crc_w_h_w (_1, _2);\n+}\n+\n+int\n+test_crc_w_w_w (int _1, int _2)\n+{\n+  return __crc_w_w_w (_1, _2);\n+}\n+\n+int\n+test_crc_w_d_w (long int _1, int _2)\n+{\n+  return __crc_w_d_w (_1, _2);\n+}\n+\n+int\n+test_crcc_w_b_w (char _1, int _2)\n+{\n+  return __crcc_w_b_w (_1, _2);\n+}\n+\n+int\n+test_crcc_w_h_w (short _1, int _2)\n+{\n+  return __crcc_w_h_w (_1, _2);\n+}\n+\n+int\n+test_crcc_w_w_w (int _1, int _2)\n+{\n+  return __crcc_w_w_w (_1, _2);\n+}\n+\n+int\n+test_crcc_w_d_w (long int _1, int _2)\n+{\n+  return __crcc_w_d_w (_1, _2);\n+}\n+\n+unsigned int\n+test_csrrd_w ()\n+{\n+  return __csrrd_w (1);\n+}\n+\n+unsigned int\n+test_csrwr_w (unsigned int _1)\n+{\n+  return __csrwr_w (_1, 1);\n+}\n+\n+unsigned int\n+test_csrxchg_w (unsigned int _1, unsigned int _2)\n+{\n+  return __csrxchg_w (_1, _2, 1);\n+}\n+\n+unsigned long int\n+test_csrrd_d ()\n+{\n+  return __csrrd_d (1);\n+}\n+\n+unsigned long int\n+test_csrwr_d (unsigned long int _1)\n+{\n+  return __csrwr_d (_1, 1);\n+}\n+\n+unsigned long int\n+test_csrxchg_d (unsigned long int _1, unsigned long int _2)\n+{\n+  return __csrxchg_d (_1, _2, 1);\n+}\n+\n+unsigned char\n+test_iocsrrd_b (unsigned int _1)\n+{\n+  return __iocsrrd_b (_1);\n+}\n+\n+unsigned char\n+test_iocsrrd_h (unsigned int _1)\n+{\n+  return __iocsrrd_h (_1);\n+}\n+\n+unsigned int\n+test_iocsrrd_w (unsigned int _1)\n+{\n+  return __iocsrrd_w (_1);\n+}\n+\n+unsigned long int\n+test_iocsrrd_d (unsigned int _1)\n+{\n+  return __iocsrrd_d (_1);\n+}\n+\n+void\n+test_iocsrwr_b (unsigned char _1, unsigned int _2)\n+{\n+  __iocsrwr_b (_1, _2);\n+}\n+\n+void\n+test_iocsrwr_h (unsigned short _1, unsigned int _2)\n+{\n+  __iocsrwr_h (_1, _2);\n+}\n+\n+void\n+test_iocsrwr_w (unsigned int _1, unsigned int _2)\n+{\n+  __iocsrwr_w (_1, _2);\n+}\n+\n+void\n+test_iocsrwr_d (unsigned long int _1, unsigned int _2)\n+{\n+  __iocsrwr_d (_1, _2);\n+}\n+\n+void\n+test_dbar ()\n+{\n+  __dbar (1);\n+}\n+\n+void\n+test_ibar ()\n+{\n+  __ibar (1);\n+}\n+\n+void\n+test_syscall ()\n+{\n+  __syscall (1);\n+}\n+\n+void\n+test_break ()\n+{\n+  __break (1);\n+}"}, {"sha": "41977c8e402b4e7c4687d5a91513a9917d936a9a", "filename": "gcc/testsuite/gcc.target/loongarch/loongarch.exp", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Floongarch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Floongarch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Floongarch.exp?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -0,0 +1,40 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a LoongArch target.\n+if ![istarget loongarch*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" \"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+# All done.\n+dg-finish"}, {"sha": "2e04b99e301a1fdb22fb690c8655783a1666abf6", "filename": "gcc/testsuite/gcc.target/loongarch/tst-asm-const.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ftst-asm-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ftst-asm-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ftst-asm-const.c?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -0,0 +1,16 @@\n+/* Test asm const. */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-times \"foo:.*\\\\.long 1061109567.*\\\\.long 52\" 1 } } */\n+int foo ()\n+{\n+  __asm__ volatile (\n+          \"foo:\"\n+          \"\\n\\t\"\n+\t  \".long %a0\\n\\t\"\n+\t  \".long %a1\\n\\t\"\n+\t  :\n+\t  :\"i\"(0x3f3f3f3f), \"i\"(52)\n+\t  :\n+\t  );\n+}\n+"}, {"sha": "11c178ad7ecbe9d568a3c25ce76abce072af7e84", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -232,6 +232,9 @@ proc go-set-goarch { } {\n \t\"riscv64-*-*\" {\n \t    set goarch \"riscv64\"\n \t}\n+\t\"loongarch64-*-*\" {\n+\t    set goarch \"loongarch64\"\n+\t}\n \t\"s390*-*-*\" {\n \t    if [check_effective_target_ilp32] {\n \t\tset goarch \"s390\""}, {"sha": "a1aef0e0a162279ac42f1bc4e11d2c105fcf7a1a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae54e8dec3a3593ff5689754b58324501ecfdcc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4ae54e8dec3a3593ff5689754b58324501ecfdcc", "patch": "@@ -1297,6 +1297,14 @@ proc check_effective_target_mpaired_single { } {\n # Return true if the target has access to FPU instructions.\n \n proc check_effective_target_hard_float { } {\n+    if { [istarget loongarch*-*-*] } {\n+\treturn [check_no_compiler_messages hard_float assembly {\n+\t\t#if (defined __loongarch_soft_float)\n+\t\t#error __loongarch_soft_float\n+\t\t#endif\n+\t}]\n+    }\n+\n     if { [istarget mips*-*-*] } {\n \treturn [check_no_compiler_messages hard_float assembly {\n \t\t#if (defined __mips_soft_float || defined __mips16)\n@@ -8616,6 +8624,7 @@ proc check_effective_target_sync_char_short { } {\n \t     || [istarget cris-*-*]\n \t     || ([istarget sparc*-*-*] && [check_effective_target_sparc_v9])\n \t     || ([istarget arc*-*-*] && [check_effective_target_arc_atomic])\n+\t     || [istarget loongarch*-*-*]\n \t     || [check_effective_target_mips_llsc] }}]\n }\n \n@@ -10708,6 +10717,7 @@ proc check_effective_target_branch_cost {} {\n \t || [istarget epiphany*-*-*]\n \t || [istarget frv*-*-*]\n \t || [istarget i?86-*-*] || [istarget x86_64-*-*]\n+\t || [istarget loongarch*-*-*]\n \t || [istarget mips*-*-*]\n \t || [istarget s390*-*-*]\n \t || [istarget riscv*-*-*]"}]}