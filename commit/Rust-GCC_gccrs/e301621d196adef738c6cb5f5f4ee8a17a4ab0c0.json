{"sha": "e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMwMTYyMWQxOTZhZGVmNzM4YzZjYjVmNWY0ZWU4YTE3YTRhYjBjMA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-12-30T12:18:39Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-12-30T12:18:39Z"}, "message": "For boehm-gc:\n\n\t* configure.in: Rename THREADLIB to THREADLIBS.\n\t* Makefile.am (LINK): Add $(THREADLIBS) to libtool command line. This\n\tensures that we link the correct version of the linuxthreads semaphore\n\tfunctions.\n\t* Makefile.in: Rebuilt.\n\t* configure: Rebuilt.\n\n\t* linux_thread.c (GC_thr_init, GC_suspend_handler): Add SIGABRT to the\n\tlist of signals which are not blocked during suspend in the NO_SIGNALS\n\tcase.\n\nFor libjava:\n\t* Makefile.am (libgcj_la_LIBADD): Add $(THREADLIBS). This ensures that\n\tthe correct versions of various linuxthreads functions get linked.\n\t* Makefile.in: Rebuilt.\n\t* java/lang/natThread.cc (finalize_native): New static function. Call\n\t_Jv_ThreadDestroyData.\n\t(initialize_native): Register finalizer for \"data\".\n\t* include/posix-threads.h (_Jv_ThreadInitData): New simpler prototype.\n\t(_Jv_ThreadDestroyData): New prototype.\n\t* include/win32-threads.h: Ditto.\n\t* include/no-threads.h: Ditto.\n\t* posix-threads.cc (_Jv_ThreadInitData): Implement new prototype.\n\t(_Jv_ThreadDestroyData): New function. Free native thread \"data\" and\n\tmove mutex and condition variable destroy code from:\n\t(really_start): ...here.\n\t(_Jv_ThreadStart): Set PTHREAD_CREATE_DETACHED.\n\t* win32-threads.cc (_Jv_ThreadInitData): Implement new prototype.\n\t(_Jv_ThreadDestroyData): Implemented.\n\t* nogc.cc (_Jv_AllocObject): Use \"void *\" not \"ptr_t\".\n\t(_Jv_AllocArray): Ditto.\n\nFrom-SVN: r38557", "tree": {"sha": "45acacc07816160e269cf47dd6cdeccef9036f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45acacc07816160e269cf47dd6cdeccef9036f29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/comments", "author": null, "committer": null, "parents": [{"sha": "4c2f5b4fd3e2b691c7a14a5860dae341d33455b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2f5b4fd3e2b691c7a14a5860dae341d33455b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2f5b4fd3e2b691c7a14a5860dae341d33455b3"}], "stats": {"total": 230, "additions": 171, "deletions": 59}, "files": [{"sha": "2ae9240ed32391b5c0112d264396c5675f5f1479", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -1,3 +1,16 @@\n+2000-12-30  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* configure.in: Rename THREADLIB to THREADLIBS.\n+\t* Makefile.am (LINK): Add $(THREADLIBS) to libtool command line. This\n+\tensures that we link the correct version of the linuxthreads semaphore\n+\tfunctions.\n+\t* Makefile.in: Rebuilt.\n+\t* configure: Rebuilt.\n+\t\n+\t* linux_thread.c (GC_thr_init, GC_suspend_handler): Add SIGABRT to the \n+\tlist of signals which are not blocked during suspend in the NO_SIGNALS\n+\tcase.\n+\n 2000-12-23  Hans Boehm  <Hans_Boehm@hp.com>\n \n \t* gcj_mlc.c (GC_gcj_malloc): Don't release allocation lock twice."}, {"sha": "06d740b15af8b4464839618da1b5a7d8d05e61c3", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -32,7 +32,10 @@ hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\\n solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h\n-libgcjgc_la_LIBADD = @addobjs@\n+\n+# Include THREADLIBS here to ensure that the correct versions of\n+# linuxthread semaphore functions get linked:\n+libgcjgc_la_LIBADD = @addobjs@ $(THREADLIBS)\n libgcjgc_la_DEPENDENCIES = @addobjs@\n libgcjgc_la_LDFLAGS = -version-info 1:1:0 -rpath $(toolexeclibdir)\n \n@@ -45,7 +48,7 @@ AM_CFLAGS = @BOEHM_GC_CFLAGS@\n \n check_PROGRAMS = gctest\n gctest_SOURCES = test.c\n-gctest_LDADD = ./libgcjgc.la $(THREADLIB) $(EXTRA_TEST_LIBS)\n+gctest_LDADD = ./libgcjgc.la $(THREADLIBS) $(EXTRA_TEST_LIBS)\n \n TESTS = gctest\n "}, {"sha": "ec91baa62df29c004af4800077c573c4bef4e303", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -87,7 +87,7 @@ OBJEXT = @OBJEXT@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n STRIP = @STRIP@\n-THREADLIB = @THREADLIB@\n+THREADLIBS = @THREADLIBS@\n VERSION = @VERSION@\n addobjs = @addobjs@\n boehm_gc_basedir = @boehm_gc_basedir@\n@@ -102,19 +102,30 @@ MULTIDIRS =\n MULTISUBDIR = \n MULTIDO = true\n MULTICLEAN = true\n-@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = $(target_all)\n EXTRA_LTLIBRARIES = libgcjgc.la\n-libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\tgcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h gcj_mlc.c headers.c hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\treal_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h\n-\n-libgcjgc_la_LIBADD = @addobjs@\n+libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\t\\\n+gcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h \\\n+gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h gcj_mlc.c headers.c \\\n+hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n+misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n+real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\\n+solaris_threads.h stubborn.c typd_mlc.c version.h weakpointer.h\n+\n+\n+# Include THREADLIBS here to ensure that the correct versions of\n+# linuxthread semaphore functions get linked:\n+libgcjgc_la_LIBADD = @addobjs@ $(THREADLIBS)\n libgcjgc_la_DEPENDENCIES = @addobjs@\n libgcjgc_la_LDFLAGS = -version-info 1:1:0 -rpath $(toolexeclibdir)\n \n-EXTRA_libgcjgc_la_SOURCES = alpha_mach_dep.s mips_sgi_mach_dep.s mips_ultrix_mach_dep.s rs6000_mach_dep.s sparc_mach_dep.s sparc_sunos4_mach_dep.s mach_dep.c ecos.cc\n+EXTRA_libgcjgc_la_SOURCES = alpha_mach_dep.s mips_sgi_mach_dep.s \\\n+mips_ultrix_mach_dep.s rs6000_mach_dep.s sparc_mach_dep.s \\\n+sparc_sunos4_mach_dep.s mach_dep.c ecos.cc\n \n \n AM_CXXFLAGS = @BOEHM_GC_CFLAGS@\n@@ -123,20 +134,58 @@ AM_CFLAGS = @BOEHM_GC_CFLAGS@\n \n check_PROGRAMS = gctest\n gctest_SOURCES = test.c\n-gctest_LDADD = ./libgcjgc.la $(THREADLIB) $(EXTRA_TEST_LIBS)\n+gctest_LDADD = ./libgcjgc.la $(THREADLIBS) $(EXTRA_TEST_LIBS)\n \n TESTS = gctest\n \n all_objs = @addobjs@ $(libgcjgc_la_OBJECTS)\n \n-LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \t$(AM_CPPFLAGS) $(CPPFLAGS) \t$(AM_CFLAGS) $(MY_CFLAGS) $(BOEHM_GC_CFLAGS) \n+LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) \\\n+\t$(AM_CFLAGS) $(MY_CFLAGS) $(BOEHM_GC_CFLAGS) \n \n LINK = $(LIBTOOL) --mode=link $(CC) $(AM_CFLAGS) $(MY_CFLAGS) $(LDFLAGS) -o $@\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"NM=$(NM)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"DESTDIR=$(DESTDIR)\"\n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"DESTDIR=$(DESTDIR)\"\n \n \n CONFIG_STATUS_DEPENDENCIES = $(boehm_gc_basedir)/configure.host\n@@ -176,7 +225,7 @@ aclocal.m4 configure configure.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libgcjgc_la_SOURCES) $(EXTRA_libgcjgc_la_SOURCES) $(gctest_SOURCES)\n OBJECTS = $(libgcjgc_la_OBJECTS) $(gctest_OBJECTS)\n@@ -357,7 +406,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "c11cf55f7f134ef5d300a67a56f61d392d974032", "filename": "boehm-gc/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -2609,7 +2609,7 @@ if test \"$THREADS\" = yes; then\n fi\n \n INCLUDES=\n-THREADLIB=\n+THREADLIBS=\n case \"$THREADS\" in\n  no | none | single)\n     THREADS=none\n@@ -2644,7 +2644,7 @@ EOF\n \n \t;;\n     esac\n-    THREADLIB=-lpthread\n+    THREADLIBS=-lpthread\n     ;;\n  decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n     { echo \"configure: error: thread package $THREADS not yet supported\" 1>&2; exit 1; }\n@@ -3042,7 +3042,7 @@ s%@OBJEXT@%$OBJEXT%g\n s%@STRIP@%$STRIP%g\n s%@LIBTOOL@%$LIBTOOL%g\n s%@CXXCPP@%$CXXCPP%g\n-s%@THREADLIB@%$THREADLIB%g\n+s%@THREADLIBS@%$THREADLIBS%g\n s%@EXTRA_TEST_LIBS@%$EXTRA_TEST_LIBS%g\n s%@target_all@%$target_all%g\n s%@INCLUDES@%$INCLUDES%g"}, {"sha": "6a75b192b703bd7d8eda565fdbac52c30fe16ac9", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -66,7 +66,7 @@ if test \"$THREADS\" = yes; then\n fi\n \n INCLUDES=\n-THREADLIB=\n+THREADLIBS=\n case \"$THREADS\" in\n  no | none | single)\n     THREADS=none\n@@ -86,7 +86,7 @@ case \"$THREADS\" in\n \tAC_DEFINE(IRIX_THREADS)\n \t;;\n     esac\n-    THREADLIB=-lpthread\n+    THREADLIBS=-lpthread\n     ;;\n  decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n     AC_MSG_ERROR(thread package $THREADS not yet supported)\n@@ -96,7 +96,7 @@ case \"$THREADS\" in\n     ;;\n esac\n AC_MSG_RESULT($THREADS)\n-AC_SUBST(THREADLIB)\n+AC_SUBST(THREADLIBS)\n \n AC_CHECK_LIB(dl, dlopen, EXTRA_TEST_LIBS=\"$EXTRA_TEST_LIBS -ldl\")\n AC_SUBST(EXTRA_TEST_LIBS)"}, {"sha": "cac52374d72371fb26c71326e1770771952f1d8b", "filename": "boehm-gc/linux_threads.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2Flinux_threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/boehm-gc%2Flinux_threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Flinux_threads.c?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -201,6 +201,7 @@ void GC_suspend_handler(int sig)\n       if (sigdelset(&mask, SIGINT) != 0) ABORT(\"sigdelset() failed\");\n       if (sigdelset(&mask, SIGQUIT) != 0) ABORT(\"sigdelset() failed\");\n       if (sigdelset(&mask, SIGTERM) != 0) ABORT(\"sigdelset() failed\");\n+      if (sigdelset(&mask, SIGABRT) != 0) ABORT(\"sigdelset() failed\");\n #   endif\n     do {\n \t    me->signal = 0;\n@@ -487,7 +488,8 @@ void GC_thr_init()\n #   ifdef NO_SIGNALS\n       if (sigdelset(&act.sa_mask, SIGINT) != 0\n \t  || sigdelset(&act.sa_mask, SIGQUIT != 0)\n-\t  || sigdelset(&act.sa_mask, SIGTERM != 0)) {\n+\t  || sigdelset(&act.sa_mask, SIGTERM != 0)\n+\t  || sigdelset(&act.sa_mask, SIGABRT != 0)) {\n         ABORT(\"sigdelset() failed\");\n       }\n #   endif"}, {"sha": "551c2e68c327d2e2213fff5ddf164fbf3b35397f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -1,3 +1,25 @@\n+2000-12-30  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* Makefile.am (libgcj_la_LIBADD): Add $(THREADLIBS). This ensures that\n+\tthe correct versions of various linuxthreads functions get linked.\n+\t* Makefile.in: Rebuilt.\n+\t* java/lang/natThread.cc (finalize_native): New static function. Call\n+\t_Jv_ThreadDestroyData.\n+\t(initialize_native): Register finalizer for \"data\".\n+\t* include/posix-threads.h (_Jv_ThreadInitData): New simpler prototype.\n+\t(_Jv_ThreadDestroyData): New prototype.\n+\t* include/win32-threads.h: Ditto.\n+\t* include/no-threads.h: Ditto.\n+\t* posix-threads.cc (_Jv_ThreadInitData): Implement new prototype.\n+\t(_Jv_ThreadDestroyData): New function. Free native thread \"data\" and \n+\tmove mutex and condition variable destroy code from:\n+\t(really_start): ...here.\n+\t(_Jv_ThreadStart): Set PTHREAD_CREATE_DETACHED.\n+\t* win32-threads.cc (_Jv_ThreadInitData): Implement new prototype.\n+\t(_Jv_ThreadDestroyData): Implemented.\n+\t* nogc.cc (_Jv_AllocObject): Use \"void *\" not \"ptr_t\".\n+\t(_Jv_AllocArray): Ditto.\t\n+\t\n 2000-12-27  Jeff Sturm  <jeff.sturm@commerceone.com>\n \n \t* java/sql/DriverManager.java (getConnection): Don't set user/password"}, {"sha": "69b6d437ba1a5a8c94949ecd69e477782927539e", "filename": "libjava/include/no-threads.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Finclude%2Fno-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Finclude%2Fno-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fno-threads.h?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -102,10 +102,15 @@ _Jv_InitThreads (void)\n {\n }\n \n+inline _Jv_Thread_t *\n+_Jv_ThreadInitData (java::lang::Thread *)\n+{\n+  return NULL;\n+}\n+\n inline void\n-_Jv_ThreadInitData (_Jv_Thread_t **data, java::lang::Thread *)\n+_Jv_ThreadDestroyData (_Jv_Thread_t *data)\n {\n-  *data = NULL;\n }\n \n inline java::lang::Thread *"}, {"sha": "75285ca6f50acea2b14303e2e5777272e319b10e", "filename": "libjava/include/posix-threads.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Finclude%2Fposix-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Finclude%2Fposix-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix-threads.h?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -169,7 +169,8 @@ _Jv_MutexDestroy (_Jv_Mutex_t *mu)\n \n void _Jv_InitThreads (void);\n \n-void _Jv_ThreadInitData (_Jv_Thread_t **data, java::lang::Thread *thread);\n+_Jv_Thread_t *_Jv_ThreadInitData (java::lang::Thread *thread);\n+void _Jv_ThreadDestroyData (_Jv_Thread_t *data);\n \n inline java::lang::Thread *\n _Jv_ThreadCurrent (void)"}, {"sha": "31b961b253b833e766b1f729dc5926548a8a19a4", "filename": "libjava/include/win32-threads.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Finclude%2Fwin32-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Finclude%2Fwin32-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32-threads.h?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -97,7 +97,8 @@ _Jv_MutexUnlock (_Jv_Mutex_t *mu)\n //\n \n void _Jv_InitThreads (void);\n-void _Jv_ThreadInitData (_Jv_Thread_t **data, java::lang::Thread *thread);\n+_Jv_Thread_t *_Jv_ThreadInitData (java::lang::Thread *thread);\n+void _Jv_ThreadDestroyData (_Jv_Thread_t *data);\n \n inline java::lang::Thread *\n _Jv_ThreadCurrent (void)"}, {"sha": "796713af400965ed6d419c3296667295e39b031b", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -50,26 +50,39 @@ struct natThread\n   JNIEnv *jni_env;\n };\n \n+static void finalize_native (jobject ptr);\n+\n // This is called from the constructor to initialize the native side\n // of the Thread.\n void\n java::lang::Thread::initialize_native (void)\n {\n-  // FIXME: this must interact with the GC in some logical way.  At\n-  // the very least we must register a finalizer to clean up.  This\n-  // isn't easy to do.  If the Thread object resurrects itself in its\n-  // own finalizer then we will need to reinitialize this structure at\n-  // any \"interesting\" point.\n   natThread *nt = (natThread *) _Jv_AllocBytes (sizeof (natThread));\n+  \n+  // The native thread data is kept in a Object field, not a rawdata, so that\n+  // the GC allocator can be used and a finalizer run after the thread becomes\n+  // unreachable. Note that this relies on the GC's ability to finalize \n+  // non-Java objects. FIXME?\n   data = reinterpret_cast<jobject> (nt);\n+  \n+  // Register a finalizer to clean up the native thread resources.\n+  _Jv_RegisterFinalizer (data, finalize_native);\n+\n   _Jv_MutexInit (&nt->join_mutex);\n   _Jv_CondInit (&nt->join_cond);\n-  _Jv_ThreadInitData (&nt->thread, this);\n+  nt->thread = _Jv_ThreadInitData (this);\n   // FIXME: if JNI_ENV is set we will want to free it.  It is\n   // malloc()d.\n   nt->jni_env = NULL;\n }\n \n+static void\n+finalize_native (jobject ptr)\n+{\n+  natThread *nt = (natThread *) ptr;\n+  _Jv_ThreadDestroyData (nt->thread);\n+}\n+\n jint\n java::lang::Thread::countStackFrames (void)\n {"}, {"sha": "08296719cbfa6b13878ff3b02988e2d4e1e9e94f", "filename": "libjava/nogc.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fnogc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fnogc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fnogc.cc?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -1,4 +1,4 @@\n-// nogc.cc - Code to implement no GC.\n+// nogc.cc - Implement null garbage collector.\n \n /* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n@@ -31,7 +31,7 @@ void *\n _Jv_AllocObj (jsize size, jclass klass)\n {\n   total += size;\n-  ptr_t obj = calloc (size, 1);\n+  void *obj = calloc (size, 1);\n   *((_Jv_VTable **) obj) = klass->vtable;\n   return obj;\n }\n@@ -40,7 +40,7 @@ void *\n _Jv_AllocArray (jsize size, jclass klass)\n {\n   total += size;\n-  ptr_t obj = calloc (size, 1);\n+  void *obj = calloc (size, 1);\n   *((_Jv_VTable **) obj) = klass->vtable;\n   return obj;\n }"}, {"sha": "20538436481c94cc77bf808cecf95345ec9d12c0", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -147,7 +147,7 @@ _Jv_CondWait (_Jv_ConditionVariable_t *cv, _Jv_Mutex_t *mu,\n       else\n \tr = pthread_cond_timedwait (&current->wait_cond, &current->wait_mutex, \n \t\t\t\t    &ts);\n-\t\t\t\t    \n+\n       // In older glibc's (prior to 2.1.3), the cond_wait functions may \n       // spuriously wake up on a signal. Catch that here.\n       if (r != EINTR)\n@@ -297,20 +297,25 @@ _Jv_InitThreads (void)\n   sigaction (INTR, &act, NULL);\n }\n \n-void\n-_Jv_ThreadInitData (_Jv_Thread_t **data, java::lang::Thread *obj)\n+_Jv_Thread_t *\n+_Jv_ThreadInitData (java::lang::Thread *obj)\n {\n-  _Jv_Thread_t *info = new _Jv_Thread_t;\n-  info->flags = 0;\n-  info->thread_obj = obj;\n+  _Jv_Thread_t *data = new _Jv_Thread_t;\n+  data->flags = 0;\n+  data->thread_obj = obj;\n \n-  pthread_mutex_init (&info->wait_mutex, NULL);\n-  pthread_cond_init (&info->wait_cond, NULL);\n+  pthread_mutex_init (&data->wait_mutex, NULL);\n+  pthread_cond_init (&data->wait_cond, NULL);\n \n-  // FIXME register a finalizer for INFO here.\n-  // FIXME also must mark INFO somehow.\n+  return data;\n+}\n \n-  *data = info;\n+void\n+_Jv_ThreadDestroyData (_Jv_Thread_t *data)\n+{\n+  pthread_mutex_destroy (&data->wait_mutex);\n+  pthread_cond_destroy (&data->wait_cond);\n+  delete data;\n }\n \n void\n@@ -352,12 +357,6 @@ really_start (void *x)\n       pthread_mutex_unlock (&daemon_mutex);\n     }\n   \n-#ifndef LINUX_THREADS\n-  // Clean up. These calls do nothing on Linux.\n-  pthread_mutex_destroy (&info->data->wait_mutex);\n-  pthread_cond_destroy (&info->data->wait_cond);\n-#endif /* ! LINUX_THREADS */\n-\n   return NULL;\n }\n \n@@ -377,6 +376,7 @@ _Jv_ThreadStart (java::lang::Thread *thread, _Jv_Thread_t *data,\n \n   pthread_attr_init (&attr);\n   pthread_attr_setschedparam (&attr, &param);\n+  pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_DETACHED);\n \n   // FIXME: handle marking the info object for GC.\n   info = (struct starter *) _Jv_AllocBytes (sizeof (struct starter));"}, {"sha": "29b6a72a8fcbf2dc51db42c628f21961a81c4b15", "filename": "libjava/win32-threads.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fwin32-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e301621d196adef738c6cb5f5f4ee8a17a4ab0c0/libjava%2Fwin32-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fwin32-threads.cc?ref=e301621d196adef738c6cb5f5f4ee8a17a4ab0c0", "patch": "@@ -123,16 +123,19 @@ _Jv_InitThreads (void)\n   non_daemon_count = 0;\n }\n \n-void\n-_Jv_ThreadInitData (_Jv_Thread_t **data, java::lang::Thread *)\n+_Jv_Thread_t *\n+_Jv_ThreadInitData (java::lang::Thread *)\n {\n-  _Jv_Thread_t *info = new _Jv_Thread_t;\n-  info->flags = 0;\n+  _Jv_Thread_t *data = new _Jv_Thread_t;\n+  data->flags = 0;\n \n-  // FIXME register a finalizer for INFO here.\n-  // FIXME also must mark INFO somehow.\n+  return data;\n+}\n \n-  *data = info;\n+void\n+_Jv_ThreadDestroyData (_Jv_Thread_t *data)\n+{\n+  delete data;\n }\n \n void"}]}