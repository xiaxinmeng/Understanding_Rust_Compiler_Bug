{"sha": "bf3f651054fdf0fdd672ffe344b0886e74f20098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzZjY1MTA1NGZkZjBmZGQ2NzJmZmUzNDRiMDg4NmU3NGYyMDA5OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-28T12:00:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-28T12:00:32Z"}, "message": "inlinehint-3.c: New testcase.\n\n\n\t* gcc.dg/ipa/inlinehint-3.c: New testcase.\n\t* ipa-inline.c (edge_badness): Fix overflow.\n\t(inline_small_functions): Initialize SCCs correctly.\n\t(do_estimate_edge_time, do_estimate_edge_hints): Skip self\n\trecursive functions in SCC hints.\n\nFrom-SVN: r192891", "tree": {"sha": "bb44264423c65bd2e325dd7398d14e341c3b013a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb44264423c65bd2e325dd7398d14e341c3b013a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3f651054fdf0fdd672ffe344b0886e74f20098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3f651054fdf0fdd672ffe344b0886e74f20098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3f651054fdf0fdd672ffe344b0886e74f20098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3f651054fdf0fdd672ffe344b0886e74f20098/comments", "author": null, "committer": null, "parents": [{"sha": "5d517141037264e94ae503a0f883f074aad2b8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d517141037264e94ae503a0f883f074aad2b8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d517141037264e94ae503a0f883f074aad2b8fb"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "1e30bc1e7eaf3173fd8f17982eea4d28138cd1ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf3f651054fdf0fdd672ffe344b0886e74f20098", "patch": "@@ -1,3 +1,11 @@\n+2012-10-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/inlinehint-3.c: New testcase.\n+\t* ipa-inline.c (edge_badness): Fix overflow.\n+\t(inline_small_functions): Initialize SCCs correctly.\n+\t(do_estimate_edge_time, do_estimate_edge_hints): Skip self\n+\trecursive functions in SCC hints.\n+\n 2012-10-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR rtl-optimization/38711"}, {"sha": "3b56e7ae0a0265095941269865d74eeeac8388cb", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=bf3f651054fdf0fdd672ffe344b0886e74f20098", "patch": "@@ -1375,6 +1375,9 @@ dump_inline_summary (FILE * f, struct cgraph_node *node)\n \t       (int) s->estimated_self_stack_size);\n       fprintf (f, \"  global stack:    %i\\n\",\n \t       (int) s->estimated_stack_size);\n+      if (s->scc_no)\n+        fprintf (f, \"  In SCC:          %i\\n\",\n+\t         (int) s->scc_no);\n       for (i = 0;\n \t   VEC_iterate (size_time_entry, s->entry, i, e);\n \t   i++)\n@@ -3348,7 +3351,8 @@ do_estimate_edge_time (struct cgraph_edge *edge)\n       VEC_index (edge_growth_cache_entry, edge_growth_cache, edge->uid).size\n \t= size + (size >= 0);\n       if (inline_summary (to)->scc_no\n-\t  && inline_summary (to)->scc_no == inline_summary (callee)->scc_no)\n+\t  && inline_summary (to)->scc_no == inline_summary (callee)->scc_no\n+\t  && !cgraph_edge_recursive_p (edge))\n \thints |= INLINE_HINT_same_scc;\n       VEC_index (edge_growth_cache_entry, edge_growth_cache, edge->uid).hints\n \t= hints + 1;\n@@ -3439,7 +3443,8 @@ do_estimate_edge_hints (struct cgraph_edge *edge)\n   VEC_free (tree, heap, known_binfos);\n   VEC_free (ipa_agg_jump_function_p, heap, known_aggs);\n   if (inline_summary (to)->scc_no\n-      && inline_summary (to)->scc_no == inline_summary (callee)->scc_no)\n+      && inline_summary (to)->scc_no == inline_summary (callee)->scc_no\n+      && !cgraph_edge_recursive_p (edge))\n     hints |= INLINE_HINT_same_scc;\n   return hints;\n }"}, {"sha": "6d5b252519a1fc9f6870fbde6e172108b7696979", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=bf3f651054fdf0fdd672ffe344b0886e74f20098", "patch": "@@ -861,9 +861,9 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n \t We might mix the valud into the fraction by taking into account\n \t relative growth of the unit, but for now just add the number\n \t into resulting fraction.  */\n-      if (badness > INT_MAX / 4)\n+      if (badness > INT_MAX / 8)\n \t{\n-\t  badness = INT_MAX / 4;\n+\t  badness = INT_MAX / 8;\n \t  if (dump)\n \t    fprintf (dump_file, \"Badness overflow\\n\");\n \t}\n@@ -1360,8 +1360,19 @@ inline_small_functions (void)\n \n \t    if (!DECL_EXTERNAL (node->symbol.decl))\n \t      initial_size += info->size;\n-\t    info->scc_no = (dfs && dfs->next_cycle && dfs->next_cycle != node\n-\t\t\t    ? dfs->scc_no + 1 : 0);\n+\t    if (dfs && dfs->next_cycle)\n+\t      {\n+\t\tstruct cgraph_node *n2;\n+\t\tint id = dfs->scc_no + 1;\n+\t\tfor (n2 = node; n2;\n+\t\t     n2 = ((struct ipa_dfs_info *) node->symbol.aux)->next_cycle)\n+\t\t  {\n+\t\t    struct inline_summary *info2 = inline_summary (n2);\n+\t\t    if (info2->scc_no)\n+\t\t      break;\n+\t\t    info2->scc_no = id;\n+\t\t  }\n+\t      }\n \t  }\n \n \tfor (edge = node->callers; edge; edge = edge->next_caller)"}, {"sha": "110ae443c67aff1c6ce81c2e4d7a9ec431ee89cf", "filename": "gcc/testsuite/gcc.dg/ipa/inlinehint-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3f651054fdf0fdd672ffe344b0886e74f20098/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-3.c?ref=bf3f651054fdf0fdd672ffe344b0886e74f20098", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-options \"-O3 -c -fdump-ipa-inline-details -fno-early-inlining -fno-ipa-cp\"  } */\n+void abort (void);\n+int sum;\n+int a[10];\n+int\n+scc_next (int c)\n+{\n+  int i;\n+  for (i=0;i<c;i++)\n+    a[i]=c;\n+  scc_entry (c);\n+}\n+int\n+scc_entry (int c)\n+{\n+  int i;\n+  for (i=0;i<c;i++)\n+    sum+=a[i];\n+  if (c--)\n+    scc_next (c);\n+  return sum;\n+}\n+main()\n+{\n+  int sum;\n+  int i;\n+  for (i=0;i<10;i++)\n+    scc_entry (i);\n+  if (sum < 0)\n+    abort ();\n+  return 0;\n+}\n+/* { dg-final { scan-ipa-dump \"in_scc\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"same_scc\"  \"inline\"  } } */\n+/* Main is not in scc, the two functions are.  */\n+/* { dg-final { scan-ipa-dump-times \"In SCC\" 2 \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}