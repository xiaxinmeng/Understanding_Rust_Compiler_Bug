{"sha": "202d1d5f54c5cb27b90358ac754acbea5697e40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyZDFkNWY1NGM1Y2IyN2I5MDM1OGFjNzU0YWNiZWE1Njk3ZTQwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-03T23:27:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-03T23:27:55Z"}, "message": "random (variate_generator<>::min, [...]): Return non-trivial values when _Engine_result_type is a floating point type and...\n\n2007-11-03  Paolo Carlini  <pcarlini@suse.de>\n\t    Kai-Uwe Bux  <bux@kubux.net>\n\n\t* include/tr1_impl/random (variate_generator<>::min, max,\n\toperator()()): Return non-trivial values when _Engine_result_type\n\tis a floating point type and result_type is an integer type.\n\nCo-Authored-By: Kai-Uwe Bux <bux@kubux.net>\n\nFrom-SVN: r129875", "tree": {"sha": "ed31fce3c8c55d5b58038fb0e13e19cd1a5645c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed31fce3c8c55d5b58038fb0e13e19cd1a5645c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/202d1d5f54c5cb27b90358ac754acbea5697e40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202d1d5f54c5cb27b90358ac754acbea5697e40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/202d1d5f54c5cb27b90358ac754acbea5697e40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202d1d5f54c5cb27b90358ac754acbea5697e40a/comments", "author": null, "committer": null, "parents": [{"sha": "83dffdeb44589d502a1e21fc19380bc27e7dfc54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83dffdeb44589d502a1e21fc19380bc27e7dfc54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83dffdeb44589d502a1e21fc19380bc27e7dfc54"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "968789991fc46784441c1448e4dcdced28c0255c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202d1d5f54c5cb27b90358ac754acbea5697e40a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202d1d5f54c5cb27b90358ac754acbea5697e40a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=202d1d5f54c5cb27b90358ac754acbea5697e40a", "patch": "@@ -1,3 +1,10 @@\n+2007-11-03  Paolo Carlini  <pcarlini@suse.de>\n+\t    Kai-Uwe Bux  <bux@kubux.net>\n+\n+\t* include/tr1_impl/random (variate_generator<>::min, max,\n+\toperator()()): Return non-trivial values when _Engine_result_type\n+\tis a floating point type and result_type is an integer type.\n+\n 2007-11-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algo.h (minmax, minmax_element): Add."}, {"sha": "02ad85af7e35bfd7e3ee7a0796016fddd33794c4", "filename": "libstdc++-v3/include/tr1_impl/random", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202d1d5f54c5cb27b90358ac754acbea5697e40a/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202d1d5f54c5cb27b90358ac754acbea5697e40a/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom?ref=202d1d5f54c5cb27b90358ac754acbea5697e40a", "patch": "@@ -89,60 +89,63 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \tresult_type\n \tmin() const\n \t{\n-\t  result_type __return_value = 0;\n+\t  result_type __return_value;\n \t  if (is_integral<_Engine_result_type>::value\n \t      && is_integral<result_type>::value)\n \t    __return_value = _M_g.min();\n-\t  else if (!is_integral<result_type>::value)\n+\t  else\n \t    __return_value = result_type(0);\n \t  return __return_value;\n \t}\n \n \tresult_type\n \tmax() const\n \t{\n-\t  result_type __return_value = 0;\n+\t  result_type __return_value;\n \t  if (is_integral<_Engine_result_type>::value\n \t      && is_integral<result_type>::value)\n \t    __return_value = _M_g.max();\n \t  else if (!is_integral<result_type>::value)\n \t    __return_value = result_type(1);\n+\t  else\n+\t    __return_value = std::numeric_limits<result_type>::max() - 1;\n \t  return __return_value;\n \t}\n \n+\t/*\n+\t * Converts a value generated by the adapted random number generator\n+\t * into a value in the input domain for the dependent random number\n+\t * distribution.\n+\t *\n+\t * Because the type traits are compile time constants only the\n+\t * appropriate clause of the if statements will actually be emitted\n+\t * by the compiler.\n+\t */\n \tresult_type\n-\toperator()();\n+\toperator()()\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = _M_g();\n+\t  else if (!is_integral<_Engine_result_type>::value\n+\t\t   && !is_integral<result_type>::value)\n+\t    __return_value = result_type(_M_g() - _M_g.min())\n+\t      / result_type(_M_g.max() - _M_g.min());\n+\t  else if (is_integral<_Engine_result_type>::value\n+\t\t   && !is_integral<result_type>::value)\n+\t    __return_value = result_type(_M_g() - _M_g.min())\n+\t      / result_type(_M_g.max() - _M_g.min() + result_type(1));\n+\t  else\n+\t    __return_value = (((_M_g() - _M_g.min()) \n+\t\t\t       / (_M_g.max() - _M_g.min()))\n+\t\t\t      * std::numeric_limits<result_type>::max());\n+\t  return __return_value;\n+\t}\n \n       private:\n \t_Engine _M_g;\n       };\n-\n-    /*\n-     * Converts a value generated by the adapted random number generator into a\n-     * value in the input domain for the dependent random number distribution.\n-     *\n-     * Because the type traits are compile time constants only the appropriate\n-     * clause of the if statements will actually be emitted by the compiler.\n-     */\n-    template<typename _Engine, typename _Distribution>\n-      typename _Adaptor<_Engine, _Distribution>::result_type\n-      _Adaptor<_Engine, _Distribution>::\n-      operator()()\n-      {\n-\tresult_type __return_value = 0;\n-\tif (is_integral<_Engine_result_type>::value\n-\t    && is_integral<result_type>::value)\n-\t  __return_value = _M_g();\n-      \telse if (is_integral<_Engine_result_type>::value\n-\t\t && !is_integral<result_type>::value)\n-\t  __return_value = result_type(_M_g() - _M_g.min())\n-\t    / result_type(_M_g.max() - _M_g.min() + result_type(1));\n-\telse if (!is_integral<_Engine_result_type>::value\n-\t\t && !is_integral<result_type>::value)\n-\t  __return_value = result_type(_M_g() - _M_g.min())\n-\t    / result_type(_M_g.max() - _M_g.min());\n-      \treturn __return_value;\n-      }\n   } // namespace __detail\n \n   /**"}]}