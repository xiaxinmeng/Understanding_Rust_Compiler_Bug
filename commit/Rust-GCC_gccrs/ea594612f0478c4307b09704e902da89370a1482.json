{"sha": "ea594612f0478c4307b09704e902da89370a1482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1OTQ2MTJmMDQ3OGM0MzA3YjA5NzA0ZTkwMmRhODkzNzBhMTQ4Mg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-05-11T20:03:47Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-05-11T20:03:47Z"}, "message": "2017-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/safe_container.h [_GLIBCXX_USE_CXX11_ABI]\n\t(_Safe_container<>): Remove _IsCxx11AllocatorAware template parameter.\n\t* include/debug/string: Adapt.\n\nFrom-SVN: r247926", "tree": {"sha": "723e6e1ba268f3ea310f58987857f2432b18c6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/723e6e1ba268f3ea310f58987857f2432b18c6ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea594612f0478c4307b09704e902da89370a1482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea594612f0478c4307b09704e902da89370a1482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea594612f0478c4307b09704e902da89370a1482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea594612f0478c4307b09704e902da89370a1482/comments", "author": null, "committer": null, "parents": [{"sha": "dc4dd7f63f97b6e4796aec5537ba1d238ee16920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4dd7f63f97b6e4796aec5537ba1d238ee16920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4dd7f63f97b6e4796aec5537ba1d238ee16920"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "6d626f2343fa18d37ec7a66f5814a074261d5d9b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea594612f0478c4307b09704e902da89370a1482/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea594612f0478c4307b09704e902da89370a1482/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ea594612f0478c4307b09704e902da89370a1482", "patch": "@@ -1,5 +1,9 @@\n 2017-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/debug/safe_container.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(_Safe_container<>): Remove _IsCxx11AllocatorAware template parameter.\n+\t* include/debug/string: Adapt.\n+\n \t* include/debug/formatter.h [_GLIBCXX_INLINE_VERSION]\n \t(__gnu_debug::_Error_formatter::_Parameter::_M_print_field): Remove.\n \t(__gnu_debug::_Error_formatter::_Parameter::_M_print_description):"}, {"sha": "e985c2ae88aad5611c09dd2508cca8968b7bf4bd", "filename": "libstdc++-v3/include/debug/safe_container.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea594612f0478c4307b09704e902da89370a1482/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea594612f0478c4307b09704e902da89370a1482/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h?ref=ea594612f0478c4307b09704e902da89370a1482", "patch": "@@ -36,8 +36,12 @@ namespace __gnu_debug\n   /// Safe class dealing with some allocator dependent operations.\n   template<typename _SafeContainer,\n \t   typename _Alloc,\n-\t   template<typename> class _SafeBase,\n-\t   bool _IsCxx11AllocatorAware = true>\n+\t   template<typename> class _SafeBase\n+#if _GLIBCXX_USE_CXX11_ABI\n+\t   >\n+#else\n+\t   , bool _IsCxx11AllocatorAware = true>\n+#endif\n     class _Safe_container\n     : public _SafeBase<_SafeContainer>\n     {\n@@ -82,8 +86,10 @@ namespace __gnu_debug\n       {\n \t__glibcxx_check_self_move_assign(__x);\n \n+#  if !_GLIBCXX_USE_CXX11_ABI\n \tif (_IsCxx11AllocatorAware)\n \t  {\n+#  endif\n \t    typedef __gnu_cxx::__alloc_traits<_Alloc> _Alloc_traits;\n \n \t    bool __xfer_memory = _Alloc_traits::_S_propagate_on_move_assign()\n@@ -92,9 +98,11 @@ namespace __gnu_debug\n \t      _Base::_M_swap(__x);\n \t    else\n \t      this->_M_invalidate_all();\n+#  if !_GLIBCXX_USE_CXX11_ABI\n \t  }\n \telse\n \t  _Base::_M_swap(__x);\n+#  endif\n \n \t__x._M_invalidate_all();\n \treturn *this;\n@@ -103,7 +111,9 @@ namespace __gnu_debug\n       void\n       _M_swap(_Safe_container& __x) noexcept\n       {\n+#  if !_GLIBCXX_USE_CXX11_ABI\n \tif (_IsCxx11AllocatorAware)\n+#  endif\n \t  {\n \t    typedef __gnu_cxx::__alloc_traits<_Alloc> _Alloc_traits;\n "}, {"sha": "8fd292a45a443d5600e584278387a81e3ce14567", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea594612f0478c4307b09704e902da89370a1482/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea594612f0478c4307b09704e902da89370a1482/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=ea594612f0478c4307b09704e902da89370a1482", "patch": "@@ -44,13 +44,20 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n   class basic_string\n   : public __gnu_debug::_Safe_container<\n       basic_string<_CharT, _Traits, _Allocator>,\n-      _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>,\n+#if _GLIBCXX_USE_CXX11_ABI\n+      _Allocator, _Safe_sequence>,\n+#else\n+      _Allocator, _Safe_sequence, false>,\n+#endif\n     public std::basic_string<_CharT, _Traits, _Allocator>\n   {\n     typedef std::basic_string<_CharT, _Traits, _Allocator>\t_Base;\n     typedef __gnu_debug::_Safe_container<\n-      basic_string, _Allocator, _Safe_sequence, bool(_GLIBCXX_USE_CXX11_ABI)>\n-      _Safe;\n+#if _GLIBCXX_USE_CXX11_ABI\n+      basic_string, _Allocator, _Safe_sequence> _Safe;\n+#else\n+      basic_string, _Allocator, _Safe_sequence, false> _Safe;\n+#endif\n \n   public:\n     // types:"}]}