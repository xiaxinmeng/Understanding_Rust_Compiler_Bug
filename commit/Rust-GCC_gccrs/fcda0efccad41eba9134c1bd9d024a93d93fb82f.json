{"sha": "fcda0efccad41eba9134c1bd9d024a93d93fb82f", "node_id": "C_kwDOANBUbNoAKGZjZGEwZWZjY2FkNDFlYmE5MTM0YzFiZDlkMDI0YTkzZDkzZmI4MmY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-04-27T08:24:44Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-09T13:21:32Z"}, "message": "Implement permutation with pslldq + psrldq + por when pshufb is not available.\n\npand/pandn may be used to clear upper/lower bits of the operands, in\nthat case there will be 4-5 instructions for permutation, and it's\nstill better than scalar codes.\n\ngcc/ChangeLog:\n\n\tPR target/105354\n\t* config/i386/i386-expand.cc\n\t(expand_vec_perm_pslldq_psrldq_por): New function.\n\t(ix86_expand_vec_perm_const_1): Try\n\texpand_vec_perm_pslldq_psrldq_por for both 3-instruction and\n\t4/5-instruction sequence.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105354-1.c: New test.\n\t* gcc.target/i386/pr105354-2.c: New test.", "tree": {"sha": "c194330658a2754b92a252b80699c174472a80a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c194330658a2754b92a252b80699c174472a80a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcda0efccad41eba9134c1bd9d024a93d93fb82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcda0efccad41eba9134c1bd9d024a93d93fb82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcda0efccad41eba9134c1bd9d024a93d93fb82f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcda0efccad41eba9134c1bd9d024a93d93fb82f/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addedd48e805edcf555c4fef80e531cd7dbf0c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/addedd48e805edcf555c4fef80e531cd7dbf0c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/addedd48e805edcf555c4fef80e531cd7dbf0c45"}], "stats": {"total": 347, "additions": 347, "deletions": 0}, "files": [{"sha": "0fd3028c205b7bb425a31653ad2a3ce7139e6326", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcda0efccad41eba9134c1bd9d024a93d93fb82f/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcda0efccad41eba9134c1bd9d024a93d93fb82f/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=fcda0efccad41eba9134c1bd9d024a93d93fb82f", "patch": "@@ -20941,6 +20941,106 @@ expand_vec_perm_vpshufb2_vpermq_even_odd (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* Implement permutation with pslldq + psrldq + por when pshufb is not\n+   available.  */\n+static bool\n+expand_vec_perm_pslldq_psrldq_por (struct expand_vec_perm_d *d, bool pandn)\n+{\n+  unsigned i, nelt = d->nelt;\n+  unsigned start1, end1 = -1;\n+  machine_mode vmode = d->vmode, imode;\n+  int start2 = -1;\n+  bool clear_op0, clear_op1;\n+  unsigned inner_size;\n+  rtx op0, op1, dop1;\n+  rtx (*gen_vec_shr) (rtx, rtx, rtx);\n+  rtx (*gen_vec_shl) (rtx, rtx, rtx);\n+\n+  /* pshufd can be used for V4SI/V2DI under TARGET_SSE2.  */\n+  if (!TARGET_SSE2 || (vmode != E_V16QImode && vmode != E_V8HImode))\n+    return false;\n+\n+  start1 = d->perm[0];\n+  for (i = 1; i < nelt; i++)\n+    {\n+      if (d->perm[i] != d->perm[i-1] + 1)\n+\t{\n+\t  if (start2 == -1)\n+\t    {\n+\t      start2 = d->perm[i];\n+\t      end1 = d->perm[i-1];\n+\t    }\n+\t  else\n+\t    return false;\n+\t}\n+      else if (d->perm[i] >= nelt\n+\t       && start2 == -1)\n+\t{\n+\t  start2 = d->perm[i];\n+\t  end1 = d->perm[i-1];\n+\t}\n+    }\n+\n+  clear_op0 = end1 != nelt - 1;\n+  clear_op1 = start2 % nelt != 0;\n+  /* pandn/pand is needed to clear upper/lower bits of op0/op1.  */\n+  if (!pandn && (clear_op0 || clear_op1))\n+    return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  gen_vec_shr = vmode == E_V16QImode ? gen_vec_shr_v16qi : gen_vec_shr_v8hi;\n+  gen_vec_shl = vmode == E_V16QImode ? gen_vec_shl_v16qi : gen_vec_shl_v8hi;\n+  imode = GET_MODE_INNER (vmode);\n+  inner_size = GET_MODE_BITSIZE (imode);\n+  op0 = gen_reg_rtx (vmode);\n+  op1 = gen_reg_rtx (vmode);\n+\n+  if (start1)\n+    emit_insn (gen_vec_shr (op0, d->op0, GEN_INT (start1 * inner_size)));\n+  else\n+    emit_move_insn (op0, d->op0);\n+\n+  dop1 = d->op1;\n+  if (d->one_operand_p)\n+    dop1 = d->op0;\n+\n+  int shl_offset = end1 - start1 + 1 - start2 % nelt;\n+  if (shl_offset)\n+    emit_insn (gen_vec_shl (op1, dop1, GEN_INT (shl_offset * inner_size)));\n+  else\n+    emit_move_insn (op1, dop1);\n+\n+  /* Clear lower/upper bits for op0/op1.  */\n+  if (clear_op0 || clear_op1)\n+    {\n+      rtx vec[16];\n+      rtx const_vec;\n+      rtx clear;\n+      for (i = 0; i != nelt; i++)\n+\t{\n+\t  if (i < (end1 - start1 + 1))\n+\t    vec[i] = gen_int_mode ((HOST_WIDE_INT_1U << inner_size) - 1, imode);\n+\t  else\n+\t    vec[i] = CONST0_RTX (imode);\n+\t}\n+      const_vec = gen_rtx_CONST_VECTOR (vmode, gen_rtvec_v (nelt, vec));\n+      const_vec = validize_mem (force_const_mem (vmode, const_vec));\n+      clear = force_reg (vmode, const_vec);\n+\n+      if (clear_op0)\n+\temit_move_insn (op0, gen_rtx_AND (vmode, op0, clear));\n+      if (clear_op1)\n+\temit_move_insn (op1, gen_rtx_AND (vmode,\n+\t\t\t\t\t  gen_rtx_NOT (vmode, clear),\n+\t\t\t\t\t  op1));\n+    }\n+\n+  emit_move_insn (d->target, gen_rtx_IOR (vmode, op0, op1));\n+  return true;\n+}\n+\n /* A subroutine of expand_vec_perm_even_odd_1.  Implement extract-even\n    and extract-odd permutations of two V8QI, V8HI, V16QI, V16HI or V32QI\n    operands with two \"and\" and \"pack\" or two \"shift\" and \"pack\" insns.\n@@ -21853,6 +21953,9 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_pshufb2 (d))\n     return true;\n \n+  if (expand_vec_perm_pslldq_psrldq_por (d, false))\n+    return true;\n+\n   if (expand_vec_perm_interleave3 (d))\n     return true;\n \n@@ -21891,6 +21994,10 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_even_odd (d))\n     return true;\n \n+  /* Generate four or five instructions.  */\n+  if (expand_vec_perm_pslldq_psrldq_por (d, true))\n+    return true;\n+\n   /* Even longer sequences.  */\n   if (expand_vec_perm_vpshufb4_vpermq2 (d))\n     return true;"}, {"sha": "8d91ded7420c5c4e401d14248310daacceb07156", "filename": "gcc/testsuite/gcc.target/i386/pr105354-1.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcda0efccad41eba9134c1bd9d024a93d93fb82f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105354-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcda0efccad41eba9134c1bd9d024a93d93fb82f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105354-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105354-1.c?ref=fcda0efccad41eba9134c1bd9d024a93d93fb82f", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-ssse3\" } */\n+/* { dg-final { scan-assembler-times {(?n)psrldq[\\t ]+} 16 } } */\n+/* { dg-final { scan-assembler-times {(?n)pslldq[\\t ]+} 16 } } */\n+/* { dg-final { scan-assembler-times {(?n)por[\\t ]+} 16 } } */\n+/* { dg-final { scan-assembler-times {(?n)pandn[\\t ]+} 8 } } */\n+/* { dg-final { scan-assembler-times {(?n)pand[\\t ]+} 8 } } */\n+\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef char v16qi __attribute__((vector_size (16)));\n+\n+v16qi\n+__attribute__((noipa))\n+foo (v16qi a, v16qi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 15, 16, 17, 18, 19, 20);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo1 (v16qi a, v16qi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 15, 18, 19, 20, 21, 22);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo2 (v16qi a, v16qi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 16, 17, 18, 19, 20, 21);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo3 (v16qi a, v16qi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 17, 18, 19, 20, 21, 22);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo4 (v8hi a, v8hi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 7, 8, 9, 10, 11, 12);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo5 (v8hi a, v8hi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 7, 9, 10, 11, 12, 13);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo6 (v8hi a, v8hi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 8, 9, 10, 11, 12, 13);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo7 (v8hi a, v8hi b)\n+{\n+  return __builtin_shufflevector (a, b, 5, 6, 9, 10, 11, 12, 13, 14);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo8 (v16qi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 15, 16, 17, 18, 19, 20);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo9 (v16qi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 15, 18, 19, 20, 21, 22);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo10 (v16qi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 16, 17, 18, 19, 20, 21);\n+}\n+\n+v16qi\n+__attribute__((noipa))\n+foo11 (v16qi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 7, 8, 9, 10, 11, 12,\n+\t\t\t\t  13, 14, 17, 18, 19, 20, 21, 22);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo12 (v8hi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 7, 8, 9, 10, 11, 12);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo13 (v8hi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 7, 9, 10, 11, 12, 13);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo14 (v8hi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 8, 9, 10, 11, 12, 13);\n+}\n+\n+v8hi\n+__attribute__((noipa))\n+foo15 (v8hi a)\n+{\n+  return __builtin_shufflevector (a, a, 5, 6, 9, 10, 11, 12, 13, 14);\n+}"}, {"sha": "b78b62e1e7e0932a767aa3fab5c287de0535916f", "filename": "gcc/testsuite/gcc.target/i386/pr105354-2.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcda0efccad41eba9134c1bd9d024a93d93fb82f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105354-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcda0efccad41eba9134c1bd9d024a93d93fb82f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105354-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105354-2.c?ref=fcda0efccad41eba9134c1bd9d024a93d93fb82f", "patch": "@@ -0,0 +1,110 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2 -mno-ssse3\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+\n+#include \"pr105354-1.c\"\n+void\n+sse2_test (void)\n+{\n+  union128i_b a, b, res_ab, exp_ab;\n+  union128i_w c, d, res_cd, exp_cd;\n+\n+  for (int i = 0; i != 16;i++)\n+    {\n+      a.a[i] = i;\n+      b.a[i] = i + 16;\n+      res_ab.a[i] = 0;\n+      exp_ab.a[i] = -1;\n+      if (i <= 8)\n+\t{\n+\t  c.a[i] = i;\n+\t  d.a[i] = i + 8;\n+\t  res_cd.a[i] = 0;\n+\t  exp_cd.a[i] = -1;\n+\t}\n+    }\n+\n+  res_ab.x = (__m128i)foo ((v16qi)a.x, (v16qi)b.x);\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort ();\n+\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22 };\n+  res_ab.x = (__m128i)foo1 ((v16qi)a.x, (v16qi)b.x);\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort();\n+\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21 };\n+  res_ab.x = (__m128i)foo2 ((v16qi)a.x, (v16qi)b.x);\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort();\n+\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22 };\n+  res_ab.x = (__m128i)foo3 ((v16qi)a.x, (v16qi)b.x);\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort();\n+\n+  res_ab.x = (__m128i)foo8 ((v16qi)a.x);\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4 };\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort ();\n+\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6 };\n+  res_ab.x = (__m128i)foo9 ((v16qi)a.x);\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort();\n+\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5 };\n+  res_ab.x = (__m128i)foo10 ((v16qi)a.x);\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort();\n+\n+  exp_ab.x = __extension__(__m128i) (v16qi) { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6 };\n+  res_ab.x = (__m128i)foo11 ((v16qi)a.x);\n+  if (check_union128i_b (exp_ab, res_ab.a))\n+    abort();\n+\n+  res_cd.x = (__m128i)foo4 ((v8hi)c.x, (v8hi)d.x);\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 7, 8, 9, 10, 11, 12 };\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort ();\n+\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 7, 9, 10, 11, 12, 13 };\n+  res_cd.x = (__m128i)foo5 ((v8hi)c.x, (v8hi)d.x);\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort();\n+\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 8, 9, 10, 11, 12, 13 };\n+  res_cd.x = (__m128i)foo6 ((v8hi)c.x, (v8hi)d.x);\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort();\n+\n+  res_cd.x = (__m128i)foo7 ((v8hi)c.x, (v8hi)d.x);\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 9, 10, 11, 12, 13, 14 };\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort ();\n+\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 7, 0, 1, 2, 3, 4 };\n+  res_cd.x = (__m128i)foo12 ((v8hi)c.x);\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort();\n+\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 7, 1, 2, 3, 4, 5 };\n+  res_cd.x = (__m128i)foo13 ((v8hi)c.x);\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort();\n+\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 0, 1, 2, 3, 4, 5 };\n+  res_cd.x = (__m128i)foo14 ((v8hi)c.x);\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort();\n+\n+  exp_cd.x = __extension__(__m128i) (v8hi) { 5, 6, 1, 2, 3, 4, 5, 6 };\n+  res_cd.x = (__m128i)foo15 ((v8hi)c.x);\n+  if (check_union128i_w (exp_cd, res_cd.a))\n+    abort();\n+\n+}\n+"}]}