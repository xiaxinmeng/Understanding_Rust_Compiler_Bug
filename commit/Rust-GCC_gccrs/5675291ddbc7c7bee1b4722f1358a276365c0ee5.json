{"sha": "5675291ddbc7c7bee1b4722f1358a276365c0ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3NTI5MWRkYmM3YzdiZWUxYjQ3MjJmMTM1OGEyNzYzNjVjMGVlNQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2017-11-22T19:19:13Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2017-11-22T19:19:13Z"}, "message": "PR 83097 Use __BYTE_ORDER__ predefined macro instead of runtime check\n\nBy using the __BYTE_ORDER__ predefined macro we don't need the\ndetermine_endianness function anymore.\n\nRegtested on x86_64-pc-linux-gnu.\n\nlibgfortran/ChangeLog:\n\n2017-11-22  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        PR libfortran/83097\n\t* io/inquire.c (inquire_via_unit): Use __BYTE_ORDER__ predefined\n\tmacro.\n\t* io/open.c (st_open): Likewise.\n\t* io/transfer.c (data_transfer_init): Likewise.\n\t* io/write.c (btoa_big): Likewise.\n\t(otoa_big): Likewise.\n\t(ztoa_big): Likewise.\n\t* libgfortran.h (big_endian): Remove variable.\n\t(GFOR_POINTER_TO_L1): Use __BYTE_ORDER__ macro.\n\t* runtime/main.c (determine_endianness): Remove function.\n\t(init): Remove call to determine_endianness.\n\t* runtime/minimal.c: Remove setting big_endian variable.\n\nFrom-SVN: r255072", "tree": {"sha": "d591cf873aa6b611276b396c56845bbd1e9af949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d591cf873aa6b611276b396c56845bbd1e9af949"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5675291ddbc7c7bee1b4722f1358a276365c0ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5675291ddbc7c7bee1b4722f1358a276365c0ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5675291ddbc7c7bee1b4722f1358a276365c0ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5675291ddbc7c7bee1b4722f1358a276365c0ee5/comments", "author": null, "committer": null, "parents": [{"sha": "90b415f686b16f9492cd9b11c4f5c3f3c937d5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b415f686b16f9492cd9b11c4f5c3f3c937d5d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b415f686b16f9492cd9b11c4f5c3f3c937d5d9"}], "stats": {"total": 80, "additions": 26, "deletions": 54}, "files": [{"sha": "6df2843b9fb5ca68c16db458d7b72305681c2954", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -1,3 +1,19 @@\n+2017-11-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/83097\n+\t* io/inquire.c (inquire_via_unit): Use __BYTE_ORDER__ predefined\n+\tmacro.\n+\t* io/open.c (st_open): Likewise.\n+\t* io/transfer.c (data_transfer_init): Likewise.\n+\t* io/write.c (btoa_big): Likewise.\n+\t(otoa_big): Likewise.\n+\t(ztoa_big): Likewise.\n+\t* libgfortran.h (big_endian): Remove variable.\n+\t(GFOR_POINTER_TO_L1): Use __BYTE_ORDER__ macro.\n+\t* runtime/main.c (determine_endianness): Remove function.\n+\t(init): Remove call to determine_endianness.\n+\t* runtime/minimal.c: Remove setting big_endian variable.\n+\n 2017-11-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/36313"}, {"sha": "fe353c553145504ab893e5a9a944642c6f148db8", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -612,13 +612,12 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit *u)\n       else\n \tswitch (u->flags.convert)\n \t  {\n-\t    /*  big_endian is 0 for little-endian, 1 for big-endian.  */\n \t  case GFC_CONVERT_NATIVE:\n-\t    p = big_endian ? \"BIG_ENDIAN\" : \"LITTLE_ENDIAN\";\n+\t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"BIG_ENDIAN\" : \"LITTLE_ENDIAN\";\n \t    break;\n \n \t  case GFC_CONVERT_SWAP:\n-\t    p = big_endian ? \"LITTLE_ENDIAN\" : \"BIG_ENDIAN\";\n+\t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"LITTLE_ENDIAN\" : \"BIG_ENDIAN\";\n \t    break;\n \n \t  default:"}, {"sha": "fab20653c77a39b0c17a542626d92a944e628088", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -805,20 +805,18 @@ st_open (st_parameter_open *opp)\n \tconv = compile_options.convert;\n     }\n   \n-  /* We use big_endian, which is 0 on little-endian machines\n-     and 1 on big-endian machines.  */\n   switch (conv)\n     {\n     case GFC_CONVERT_NATIVE:\n     case GFC_CONVERT_SWAP:\n       break;\n       \n     case GFC_CONVERT_BIG:\n-      conv = big_endian ? GFC_CONVERT_NATIVE : GFC_CONVERT_SWAP;\n+      conv = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? GFC_CONVERT_NATIVE : GFC_CONVERT_SWAP;\n       break;\n       \n     case GFC_CONVERT_LITTLE:\n-      conv = big_endian ? GFC_CONVERT_SWAP : GFC_CONVERT_NATIVE;\n+      conv = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? GFC_CONVERT_SWAP : GFC_CONVERT_NATIVE;\n       break;\n       \n     default:"}, {"sha": "acaa88a01f9bd3572ab3c79d750bd6b34649aa42", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -2723,20 +2723,18 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n       if (conv == GFC_CONVERT_NONE)\n \tconv = compile_options.convert;\n \n-      /* We use big_endian, which is 0 on little-endian machines\n-\t and 1 on big-endian machines.  */\n       switch (conv)\n \t{\n \tcase GFC_CONVERT_NATIVE:\n \tcase GFC_CONVERT_SWAP:\n \t  break;\n \n \tcase GFC_CONVERT_BIG:\n-\t  conv = big_endian ? GFC_CONVERT_NATIVE : GFC_CONVERT_SWAP;\n+\t  conv = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? GFC_CONVERT_NATIVE : GFC_CONVERT_SWAP;\n \t  break;\n \n \tcase GFC_CONVERT_LITTLE:\n-\t  conv = big_endian ? GFC_CONVERT_SWAP : GFC_CONVERT_NATIVE;\n+\t  conv = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? GFC_CONVERT_SWAP : GFC_CONVERT_NATIVE;\n \t  break;\n \n \tdefault:"}, {"sha": "f4172029c0ed7dfb49a072b2968437dbe3172d81", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -986,7 +986,7 @@ btoa_big (const char *s, char *buffer, int len, GFC_UINTEGER_LARGEST *n)\n   int i, j;\n \n   q = buffer;\n-  if (big_endian)\n+  if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n     {\n       const char *p = s;\n       for (i = 0; i < len; i++)\n@@ -1051,7 +1051,7 @@ otoa_big (const char *s, char *buffer, int len, GFC_UINTEGER_LARGEST *n)\n   *q = '\\0';\n   i = k = octet = 0;\n \n-  if (big_endian)\n+  if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n     {\n       const char *p = s + len - 1;\n       char c = *p;\n@@ -1126,7 +1126,7 @@ ztoa_big (const char *s, char *buffer, int len, GFC_UINTEGER_LARGEST *n)\n \n   q = buffer;\n \n-  if (big_endian)\n+  if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n     {\n       const char *p = s;\n       for (i = 0; i < len; i++)"}, {"sha": "21ad5fc23fde5ed050b5966aac27dd4bb6a76ec1", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -266,12 +266,8 @@ typedef GFC_UINTEGER_4 gfc_char4_t;\n    simply equal to the kind parameter itself.  */\n #define GFC_SIZE_OF_CHAR_KIND(kind) (kind)\n \n-/* This will be 0 on little-endian machines and one on big-endian machines.  */\n-extern int big_endian;\n-internal_proto(big_endian);\n-\n #define GFOR_POINTER_TO_L1(p, kind) \\\n-  (big_endian * (kind - 1) + (GFC_LOGICAL_1 *)(p))\n+  ((__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? 1: 0) * (kind - 1) + (GFC_LOGICAL_1 *)(p))\n \n #define GFC_INTEGER_1_HUGE \\\n   (GFC_INTEGER_1)((((GFC_UINTEGER_1)1) << 7) - 1)"}, {"sha": "209627151a305e2d661d740b5fbba3a9d957449d", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -33,31 +33,6 @@ stupid_function_name_for_static_linking (void)\n   return;\n }\n \n-/* This will be 0 for little-endian\n-   machines and 1 for big-endian machines.  */\n-int big_endian = 0;\n-\n-\n-/* Figure out endianness for this machine.  */\n-\n-static void\n-determine_endianness (void)\n-{\n-  union\n-  {\n-    GFC_LOGICAL_8 l8;\n-    GFC_LOGICAL_4 l4[2];\n-  } u;\n-\n-  u.l8 = 1;\n-  if (u.l4[0])\n-    big_endian = 0;\n-  else if (u.l4[1])\n-    big_endian = 1;\n-  else\n-    runtime_error (\"Unable to determine machine endianness\");\n-}\n-\n \n static int argc_save;\n static char **argv_save;\n@@ -89,9 +64,6 @@ get_args (int *argc, char ***argv)\n static void __attribute__((constructor))\n init (void)\n {\n-  /* Figure out the machine endianness.  */\n-  determine_endianness ();\n-\n   /* Must be first */\n   init_variables ();\n "}, {"sha": "3c7eca1ba8ea125cd354ed7932a16e55b49b13f6", "filename": "libgfortran/runtime/minimal.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fruntime%2Fminimal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5675291ddbc7c7bee1b4722f1358a276365c0ee5/libgfortran%2Fruntime%2Fminimal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fminimal.c?ref=5675291ddbc7c7bee1b4722f1358a276365c0ee5", "patch": "@@ -40,13 +40,6 @@ stupid_function_name_for_static_linking (void)\n \n options_t options;\n \n-/* This will be 0 for little-endian\n-   machines and 1 for big-endian machines.\n-\n-   Currently minimal libgfortran only runs on little-endian devices\n-   which don't support constructors so this is just a constant.  */\n-int big_endian = 0;\n-\n static int argc_save;\n static char **argv_save;\n "}]}