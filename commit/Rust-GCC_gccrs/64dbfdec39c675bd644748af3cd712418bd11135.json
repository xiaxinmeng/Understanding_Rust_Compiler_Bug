{"sha": "64dbfdec39c675bd644748af3cd712418bd11135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRkYmZkZWMzOWM2NzViZDY0NDc0OGFmM2NkNzEyNDE4YmQxMTEzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T17:17:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T17:17:12Z"}, "message": "[multiple changes]\n\n2014-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): When the parent\n\tis untagged and has discriminants, build the implicit full\n\tview even if the derived type is a completion, and make it\n\tthe Underlying_Full_View of the type.\n\t(Copy_And_Build): Fix Is_Completion actual parameter in the calls to\n\tBuild_Derived_Type.\n\t(Build_Derived_Record_Type): Likewise.\n\n2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: Add guard to convention setting.\n\nFrom-SVN: r216487", "tree": {"sha": "4f4501a6008583f515c576f5a302abed0b0aa02c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4501a6008583f515c576f5a302abed0b0aa02c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64dbfdec39c675bd644748af3cd712418bd11135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dbfdec39c675bd644748af3cd712418bd11135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64dbfdec39c675bd644748af3cd712418bd11135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dbfdec39c675bd644748af3cd712418bd11135/comments", "author": null, "committer": null, "parents": [{"sha": "59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f"}], "stats": {"total": 145, "additions": 78, "deletions": 67}, "files": [{"sha": "f431f804d0ae25ec8bd04eeeb036a5a078ed8d69", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dbfdec39c675bd644748af3cd712418bd11135/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dbfdec39c675bd644748af3cd712418bd11135/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=64dbfdec39c675bd644748af3cd712418bd11135", "patch": "@@ -1,3 +1,17 @@\n+2014-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): When the parent\n+\tis untagged and has discriminants, build the implicit full\n+\tview even if the derived type is a completion, and make it\n+\tthe Underlying_Full_View of the type.\n+\t(Copy_And_Build): Fix Is_Completion actual parameter in the calls to\n+\tBuild_Derived_Type.\n+\t(Build_Derived_Record_Type): Likewise.\n+\n+2014-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: Add guard to convention setting.\n+\n 2014-10-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, prj-proc.adb, prj-proc.ads, prj-conf.adb: Minor"}, {"sha": "c1c9eecfff1f0d1c58c00ba2efb0ed9b9a3a7f10", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dbfdec39c675bd644748af3cd712418bd11135/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dbfdec39c675bd644748af3cd712418bd11135/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=64dbfdec39c675bd644748af3cd712418bd11135", "patch": "@@ -10705,7 +10705,9 @@ package body Sem_Ch13 is\n \n       --  Convention\n \n-      if Typ /= Base_Type (Typ) and then Is_Frozen (Base_Type (Typ)) then\n+      if Is_Record_Type (Typ)\n+        and then Typ /= Base_Type (Typ) and then Is_Frozen (Base_Type (Typ))\n+      then\n          Set_Convention (Typ, Convention (Base_Type (Typ)));\n       end if;\n "}, {"sha": "a6368da44fcb420acd2ecbe0f878050f68e1e2f7", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 61, "deletions": 66, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dbfdec39c675bd644748af3cd712418bd11135/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dbfdec39c675bd644748af3cd712418bd11135/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=64dbfdec39c675bd644748af3cd712418bd11135", "patch": "@@ -6668,14 +6668,11 @@ package body Sem_Ch3 is\n       Is_Completion : Boolean;\n       Derive_Subps  : Boolean := True)\n    is\n-      Loc        : constant Source_Ptr := Sloc (N);\n-      Par_Base   : constant Entity_Id  := Base_Type (Parent_Type);\n-      Par_Scope  : constant Entity_Id  := Scope (Par_Base);\n-      Der_Base   : Entity_Id;\n-      Discr      : Entity_Id;\n-      Full_Der   : Entity_Id;\n-      Full_P     : Entity_Id;\n-      Last_Discr : Entity_Id;\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Par_Base  : constant Entity_Id  := Base_Type (Parent_Type);\n+      Par_Scope : constant Entity_Id  := Scope (Par_Base);\n+      Full_Der  : Entity_Id           := Empty;\n+      Full_P    : Entity_Id;\n \n       procedure Build_Full_Derivation;\n       --  Build full derivation, i.e. derive from the full view\n@@ -6796,7 +6793,8 @@ package body Sem_Ch3 is\n \n             else\n                Build_Derived_Type\n-                 (Full_N, Full_Parent, Full_Der, True, Derive_Subps => False);\n+                 (Full_N, Full_Parent, Full_Der,\n+                  Is_Completion => False, Derive_Subps => False);\n             end if;\n \n             --  The full declaration has been introduced into the tree and\n@@ -6815,7 +6813,8 @@ package body Sem_Ch3 is\n             Set_Associated_Node_For_Itype (Full_Der, N);\n             Set_Parent (Full_Der, N);\n             Build_Derived_Type\n-              (N, Full_Parent, Full_Der, True, Derive_Subps => False);\n+              (N, Full_Parent, Full_Der,\n+               Is_Completion => False, Derive_Subps => False);\n          end if;\n \n          Set_Has_Private_Declaration (Full_Der);\n@@ -6945,76 +6944,72 @@ package body Sem_Ch3 is\n          return;\n \n       elsif Has_Discriminants (Parent_Type) then\n-         if Present (Full_View (Parent_Type)) then\n-            if not Is_Completion then\n-               --  If this is not a completion, construct the implicit full\n-               --  view by deriving from the full view of the parent type.\n-\n-               Build_Full_Derivation;\n-\n-            else\n-               --  If this is a completion, the full view being built is itself\n-               --  private. We build a subtype of the parent with the same\n-               --  constraints as this full view, to convey to the back end the\n-               --  constrained components and the size of this subtype. If the\n-               --  parent is constrained, its full view can serve as the\n-               --  underlying full view of the derived type.\n-\n-               if No (Discriminant_Specifications (N)) then\n-                  if Nkind (Subtype_Indication (Type_Definition (N))) =\n-                                                        N_Subtype_Indication\n-                  then\n-                     Build_Underlying_Full_View (N, Derived_Type, Parent_Type);\n-\n-                  elsif Is_Constrained (Full_View (Parent_Type)) then\n-                     Set_Underlying_Full_View\n-                       (Derived_Type, Full_View (Parent_Type));\n-                  end if;\n-\n-               else\n-                  --  If there are new discriminants, the parent subtype is\n-                  --  constrained by them, but it is not clear how to build\n-                  --  the Underlying_Full_View in this case???\n+         --  Build the full derivation if this is not the anonymous derived\n+         --  base type created by Build_Derived_Record_Type in the constrained\n+         --  case (see point 5. of its head comment) since we build it for the\n+         --  derived subtype. And skip it for protected types altogether, as\n+         --  gigi does not use these types directly.\n \n-                  null;\n-               end if;\n-            end if;\n+         if Present (Full_View (Parent_Type))\n+           and then not Is_Itype (Derived_Type)\n+           and then not (Ekind (Full_View (Parent_Type)) in Protected_Kind)\n+         then\n+            Build_Full_Derivation;\n          end if;\n \n          --  Build partial view of derived type from partial view of parent\n \n          Build_Derived_Record_Type\n            (N, Parent_Type, Derived_Type, Derive_Subps);\n \n-         if Present (Full_View (Parent_Type)) and then not Is_Completion then\n-            --  Install full view in derived type (base type and subtype)\n+         if Present (Full_Der) then\n+            declare\n+               Der_Base   : constant Entity_Id := Base_Type (Derived_Type);\n+               Discr      : Entity_Id;\n+               Last_Discr : Entity_Id;\n \n-            Der_Base := Base_Type (Derived_Type);\n-            Set_Full_View (Derived_Type, Full_Der);\n-            Set_Full_View (Der_Base, Base_Type (Full_Der));\n+            begin\n+               --  If this is not a completion, construct the implicit full\n+               --  view by deriving from the full view of the parent type.\n+               --  But if this is a completion, the derived private type\n+               --  being built is a full view and the full derivation can\n+               --  only be its underlying full view.\n+\n+               if not Is_Completion then\n+                  Set_Full_View (Derived_Type, Full_Der);\n+               else\n+                  Set_Underlying_Full_View (Derived_Type, Full_Der);\n+               end if;\n \n-            --  Copy the discriminant list from full view to the partial views\n-            --  (base type and its subtype). Gigi requires that the partial and\n-            --  full views have the same discriminants.\n+               if not Is_Base_Type (Derived_Type) then\n+                  Set_Full_View (Der_Base, Base_Type (Full_Der));\n+               end if;\n \n-            --  Note that since the partial view is pointing to discriminants\n-            --  in the full view, their scope will be that of the full view.\n-            --  This might cause some front end problems and need adjustment???\n+               --  Copy the discriminant list from full view to the partial\n+               --  view (base type and its subtype). Gigi requires that the\n+               --  partial and full views have the same discriminants.\n \n-            Discr := First_Discriminant (Base_Type (Full_Der));\n-            Set_First_Entity (Der_Base, Discr);\n+               --  Note that since the partial view points to discriminants\n+               --  in the full view, their scope will be that of the full\n+               --  view. This might cause some front end problems and need\n+               --  adjustment???\n \n-            loop\n-               Last_Discr := Discr;\n-               Next_Discriminant (Discr);\n-               exit when No (Discr);\n-            end loop;\n+               Discr := First_Discriminant (Base_Type (Full_Der));\n+               Set_First_Entity (Der_Base, Discr);\n \n-            Set_Last_Entity (Der_Base, Last_Discr);\n+               loop\n+                  Last_Discr := Discr;\n+                  Next_Discriminant (Discr);\n+                  exit when No (Discr);\n+               end loop;\n \n-            Set_First_Entity (Derived_Type, First_Entity (Der_Base));\n-            Set_Last_Entity  (Derived_Type, Last_Entity  (Der_Base));\n-            Set_Stored_Constraint (Full_Der, Stored_Constraint (Derived_Type));\n+               Set_Last_Entity (Der_Base, Last_Discr);\n+               Set_First_Entity (Derived_Type, First_Entity (Der_Base));\n+               Set_Last_Entity  (Derived_Type, Last_Entity  (Der_Base));\n+\n+               Set_Stored_Constraint\n+                 (Full_Der, Stored_Constraint (Derived_Type));\n+            end;\n          end if;\n \n       elsif Present (Full_View (Parent_Type))\n@@ -7859,7 +7854,7 @@ package body Sem_Ch3 is\n \n          Build_Derived_Type\n            (New_Decl, Parent_Base, New_Base,\n-            Is_Completion => True, Derive_Subps => False);\n+            Is_Completion => False, Derive_Subps => False);\n \n          --  ??? This needs re-examination to determine whether the\n          --  above call can simply be replaced by a call to Analyze."}]}