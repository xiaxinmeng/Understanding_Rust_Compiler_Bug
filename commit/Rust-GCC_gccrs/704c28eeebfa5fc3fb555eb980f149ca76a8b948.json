{"sha": "704c28eeebfa5fc3fb555eb980f149ca76a8b948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0YzI4ZWVlYmZhNWZjM2ZiNTU1ZWI5ODBmMTQ5Y2E3NmE4Yjk0OA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-06-07T10:56:54Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-06-07T10:56:54Z"}, "message": "tree-vect-loop-manip.c (vect_do_peeling): Don't skip vector loop if versioning is required.\n\n\t* tree-vect-loop-manip.c (vect_do_peeling): Don't skip vector loop\n\tif versioning is required.\n\t* tree-vect-loop.c (vect_analyze_loop_2): Merge niter check for loop\n\tpeeling with the check for versioning.\n\nFrom-SVN: r248959", "tree": {"sha": "41d76aa330fbf57d65b3adc3737650006fbd3a4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41d76aa330fbf57d65b3adc3737650006fbd3a4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/704c28eeebfa5fc3fb555eb980f149ca76a8b948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704c28eeebfa5fc3fb555eb980f149ca76a8b948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704c28eeebfa5fc3fb555eb980f149ca76a8b948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704c28eeebfa5fc3fb555eb980f149ca76a8b948/comments", "author": null, "committer": null, "parents": [{"sha": "7078979b291419f353804cc32ecfdb22367b6e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7078979b291419f353804cc32ecfdb22367b6e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7078979b291419f353804cc32ecfdb22367b6e0d"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "8198e0c88d66cd993c1bf89a6a50dd5e009894f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704c28eeebfa5fc3fb555eb980f149ca76a8b948/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704c28eeebfa5fc3fb555eb980f149ca76a8b948/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=704c28eeebfa5fc3fb555eb980f149ca76a8b948", "patch": "@@ -1,3 +1,10 @@\n+2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-vect-loop-manip.c (vect_do_peeling): Don't skip vector loop\n+\tif versioning is required.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Merge niter check for loop\n+\tpeeling with the check for versioning.\n+\n 2017-06-07  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vectorizer.h (vect_build_loop_niters): New parameter."}, {"sha": "d60b84e60ef5478556e770a9e00ebe6e58a012b5", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704c28eeebfa5fc3fb555eb980f149ca76a8b948/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704c28eeebfa5fc3fb555eb980f149ca76a8b948/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=704c28eeebfa5fc3fb555eb980f149ca76a8b948", "patch": "@@ -1691,9 +1691,11 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \n   /* Prolog loop may be skipped.  */\n   bool skip_prolog = (prolog_peeling != 0);\n-  /* Skip to epilog if scalar loop may be preferred.  It's only used when\n-     we peel for epilog loop.  */\n-  bool skip_vector = (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo));\n+  /* Skip to epilog if scalar loop may be preferred.  It's only needed\n+     when we peel for epilog loop and when it hasn't been checked with\n+     loop versioning.  */\n+  bool skip_vector = (!LOOP_VINFO_NITERS_KNOWN_P (loop_vinfo)\n+\t\t      && !LOOP_REQUIRES_VERSIONING (loop_vinfo));\n   /* Epilog loop must be executed if the number of iterations for epilog\n      loop is known at compile time, otherwise we need to add a check at\n      the end of vector loop and skip to the end of epilog loop.  */"}, {"sha": "92d9a28fd9a998c981e3351ef48f869392893b79", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/704c28eeebfa5fc3fb555eb980f149ca76a8b948/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/704c28eeebfa5fc3fb555eb980f149ca76a8b948/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=704c28eeebfa5fc3fb555eb980f149ca76a8b948", "patch": "@@ -2220,6 +2220,36 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n         }\n     }\n \n+  /* During peeling, we need to check if number of loop iterations is\n+     enough for both peeled prolog loop and vector loop.  This check\n+     can be merged along with threshold check of loop versioning, so\n+     increase threshold for this case if necessary.  */\n+  if (LOOP_REQUIRES_VERSIONING (loop_vinfo)\n+      && (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n+\t  || LOOP_VINFO_PEELING_FOR_NITER (loop_vinfo)))\n+    {\n+      unsigned niters_th;\n+\n+      /* Niters for peeled prolog loop.  */\n+      if (LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo) < 0)\n+\t{\n+\t  struct data_reference *dr = LOOP_VINFO_UNALIGNED_DR (loop_vinfo);\n+\t  tree vectype = STMT_VINFO_VECTYPE (vinfo_for_stmt (DR_STMT (dr)));\n+\n+\t  niters_th = TYPE_VECTOR_SUBPARTS (vectype) - 1;\n+\t}\n+      else\n+\tniters_th = LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo);\n+\n+      /* Niters for at least one iteration of vectorized loop.  */\n+      niters_th += LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n+      /* One additional iteration because of peeling for gap.  */\n+      if (!LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo))\n+\tniters_th++;\n+      if (LOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo) < niters_th)\n+\tLOOP_VINFO_COST_MODEL_THRESHOLD (loop_vinfo) = niters_th;\n+    }\n+\n   gcc_assert (vectorization_factor\n \t      == (unsigned)LOOP_VINFO_VECT_FACTOR (loop_vinfo));\n "}]}