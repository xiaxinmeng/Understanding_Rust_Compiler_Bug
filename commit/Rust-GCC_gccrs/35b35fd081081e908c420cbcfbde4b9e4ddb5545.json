{"sha": "35b35fd081081e908c420cbcfbde4b9e4ddb5545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViMzVmZDA4MTA4MWU5MDhjNDIwY2JjZmJkZTRiOWU0ZGRiNTU0NQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-02-11T09:02:06Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-02-11T09:02:06Z"}, "message": "[patch i386]: For target x86_64-pc-mingw32 _alloca and\n_stkchk may corrupts  stack alignment.\n\nFrom-SVN: r132236", "tree": {"sha": "ba70f5ee3d314971570606058e21bb599acb2f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba70f5ee3d314971570606058e21bb599acb2f4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35b35fd081081e908c420cbcfbde4b9e4ddb5545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b35fd081081e908c420cbcfbde4b9e4ddb5545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35b35fd081081e908c420cbcfbde4b9e4ddb5545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35b35fd081081e908c420cbcfbde4b9e4ddb5545/comments", "author": null, "committer": null, "parents": [{"sha": "f8c5cff401b6a2a49d3b21b6df2496297d495b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c5cff401b6a2a49d3b21b6df2496297d495b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c5cff401b6a2a49d3b21b6df2496297d495b55"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "d5f7b4fdd60586d559c6fe9e16e3299a17cb36dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b35fd081081e908c420cbcfbde4b9e4ddb5545/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b35fd081081e908c420cbcfbde4b9e4ddb5545/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35b35fd081081e908c420cbcfbde4b9e4ddb5545", "patch": "@@ -1,3 +1,9 @@\n+2008-02-11  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/cygwin.asm: (__alloca): Correct calling \n+\tconvention and alignment.\n+\t(__chkstk): Force 8 byte stack alignment.\n+\n 2008-02-11  Uros Bizjak  <ubizjak@gmail.com>\n \t    Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "90d9f31ca32c32dc8452e9b0cfda48e3f9b42177", "filename": "gcc/config/i386/cygwin.asm", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35b35fd081081e908c420cbcfbde4b9e4ddb5545/gcc%2Fconfig%2Fi386%2Fcygwin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35b35fd081081e908c420cbcfbde4b9e4ddb5545/gcc%2Fconfig%2Fi386%2Fcygwin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.asm?ref=35b35fd081081e908c420cbcfbde4b9e4ddb5545", "patch": "@@ -72,15 +72,44 @@ Ldone:\n \tpushl\t%eax\n \tret\n #else\n-/* __alloca is a normal function call, which uses %rcx as the argument.  */\n+/* __alloca is a normal function call, which uses %rcx as the argument.  And stack space\n+   for the argument is saved.  */\n __alloca:\n-\tmovq\t%rcx, %rax\n-\t/* FALLTHRU */\n+ \tmovq\t%rcx, %rax\n+\taddq\t$0x7, %rax\n+\tandq\t$0xfffffffffffffff8, %rax\n+\tpopq\t%rcx\t\t/* pop return address */\n+\tpopq\t%r10\t\t/* Pop the reserved stack space.  */\n+\tmovq\t%rsp, %r10\t/* get sp */\n+\tcmpq\t$0x1000, %rax\t/* > 4k ?*/\n+\tjb\tLdone_alloca\n+\n+Lprobe_alloca:\n+\tsubq\t$0x1000, %r10  \t\t/* yes, move pointer down 4k*/\n+\torq\t$0x0, (%r10)   \t\t/* probe there */\n+\tsubq\t$0x1000, %rax  \t \t/* decrement count */\n+\tcmpq\t$0x1000, %rax\n+\tja\tLprobe_alloca         \t \t/* and do it again */\n+\n+Ldone_alloca:\n+\tsubq\t%rax, %r10\n+\torq\t$0x0, (%r10)\t/* less than 4k, just peek here */\n+\tmovq\t%r10, %rax\n+\tsubq\t$0x8, %r10\t/* Reserve argument stack space.  */\n+\tmovq\t%r10, %rsp\t/* decrement stack */\n+\n+\t/* Push the return value back.  Doing this instead of just\n+\t   jumping to %rcx preserves the cached call-return stack\n+\t   used by most modern processors.  */\n+\tpushq\t%rcx\n+\tret\n \n /* ___chkstk is a *special* function call, which uses %rax as the argument.\n    We avoid clobbering the 4 integer argument registers, %rcx, %rdx, \n    %r8 and %r9, which leaves us with %rax, %r10, and %r11 to use.  */\n ___chkstk:\n+\taddq\t$0x7, %rax\t/* Make sure stack is on alignment of 8.  */\n+\tandq\t$0xfffffffffffffff8, %rax\n \tpopq\t%r11\t\t/* pop return address */\n \tmovq\t%rsp, %r10\t/* get sp */\n \tcmpq\t$0x1000, %rax\t/* > 4k ?*/"}]}