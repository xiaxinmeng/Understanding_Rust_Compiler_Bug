{"sha": "fe58e07668767de1adc8cab509649a485607d127", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU1OGUwNzY2ODc2N2RlMWFkYzhjYWI1MDk2NDlhNDg1NjA3ZDEyNw==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2005-08-24T20:04:20Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-08-24T20:04:20Z"}, "message": "re PR fortran/17758 (gfortran_abort and some others should be marked as noreturn)\n\n2005-08-24  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/17758\n\t* gfortran.h (symbol_attribute):  Add noreturn to the structure.\n\t(gfc_intrinsic_sym):  Add noreturn to the structure.\n\t* intrinsic.c (make_noreturn):  New function.\n\t(add_subroutines):  Mark subroutines abort and exit as noreturn.\n\t(gfc_intrinsic_sub_interface):  Copy noreturn attribute from\n\tisym to the resolved symbol.\n\t* trans-decl.c (gfc_get_extern_function_decl): Set function\n\tas VOLATILE (== noreturn) if the noreturn attribute is set.\n\n2005-08-24  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/17758\n\tgfortran.dg/nonreturning_statements.f90: New test.\n\nFrom-SVN: r103449", "tree": {"sha": "ee3f72b0e9a25230193623fc852517df5c61a9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee3f72b0e9a25230193623fc852517df5c61a9e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe58e07668767de1adc8cab509649a485607d127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe58e07668767de1adc8cab509649a485607d127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe58e07668767de1adc8cab509649a485607d127", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe58e07668767de1adc8cab509649a485607d127/comments", "author": null, "committer": null, "parents": [{"sha": "1a1e6a9d4a1c8cfb8aef4d7f18fe4c68444f9317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a1e6a9d4a1c8cfb8aef4d7f18fe4c68444f9317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a1e6a9d4a1c8cfb8aef4d7f18fe4c68444f9317"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "271bbc4bb46de521057883b9a5f9bedaf8dcadf7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fe58e07668767de1adc8cab509649a485607d127", "patch": "@@ -1,3 +1,15 @@\n+2005-08-24  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/17758\n+\t* gfortran.h (symbol_attribute):  Add noreturn to the structure.\n+\t(gfc_intrinsic_sym):  Add noreturn to the structure.\n+\t* intrinsic.c (make_noreturn):  New function.\n+\t(add_subroutines):  Mark subroutines abort and exit as noreturn.\n+\t(gfc_intrinsic_sub_interface):  Copy noreturn attribute from\n+\tisym to the resolved symbol.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Set function\n+\tas VOLATILE (== noreturn) if the noreturn attribute is set.\n+\n 2005-08-21  Steven G. Kargl  <kargls@comcast.net>\n \n \t* decl.c: Typo in comment."}, {"sha": "8c4303b1e15126457e5d913f5d3f7042ef2dd65b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=fe58e07668767de1adc8cab509649a485607d127", "patch": "@@ -428,6 +428,10 @@ typedef struct\n   unsigned sequence:1, elemental:1, pure:1, recursive:1;\n   unsigned unmaskable:1, masked:1, contained:1;\n \n+  /* This is set if the subroutine doesn't return.  Currently, this\n+     is only possible for intrinsic subroutines.  */\n+  unsigned noreturn:1;\n+\n   /* Set if this procedure is an alternate entry point.  These procedures\n      don't have any code associated, and the backend will turn them into\n      thunks to the master function.  */\n@@ -1032,7 +1036,7 @@ typedef struct gfc_intrinsic_sym\n   const char *name, *lib_name;\n   gfc_intrinsic_arg *formal;\n   gfc_typespec ts;\n-  int elemental, pure, generic, specific, actual_ok, standard;\n+  int elemental, pure, generic, specific, actual_ok, standard, noreturn;\n \n   gfc_simplify_f simplify;\n   gfc_check_f check;"}, {"sha": "180e7ae36f6650c06d4371e1f1b18d945d94a548", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=fe58e07668767de1adc8cab509649a485607d127", "patch": "@@ -843,6 +843,14 @@ make_alias (const char *name, int standard)\n     }\n }\n \n+/* Make the current subroutine noreturn.  */\n+\n+static void\n+make_noreturn(void)\n+{\n+  if (sizing == SZ_NOTHING)\n+      next_sym[-1].noreturn = 1;\n+}\n \n /* Add intrinsic functions.  */\n \n@@ -2108,6 +2116,8 @@ add_subroutines (void)\n \n   add_sym_0s (\"abort\", 1, GFC_STD_GNU, NULL);\n \n+  make_noreturn();\n+\n   add_sym_1s (\"cpu_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n \t      tm, BT_REAL, dr, REQUIRED);\n@@ -2199,6 +2209,8 @@ add_subroutines (void)\n              gfc_check_exit, NULL, gfc_resolve_exit,\n \t      c, BT_INTEGER, di, OPTIONAL);\n \n+  make_noreturn();\n+\n   add_sym_1s (\"flush\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_flush, NULL, gfc_resolve_flush,\n \t      c, BT_INTEGER, di, OPTIONAL);\n@@ -3161,6 +3173,7 @@ gfc_intrinsic_sub_interface (gfc_code * c, int error_flag)\n       return MATCH_ERROR;\n     }\n \n+  c->resolved_sym->attr.noreturn = isym->noreturn;\n   check_intrinsic_standard (name, isym->standard, &c->loc);\n \n   return MATCH_YES;"}, {"sha": "aaa4006da635ddb459fc17257fb6bac75a5e2a34", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=fe58e07668767de1adc8cab509649a485607d127", "patch": "@@ -1001,6 +1001,10 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n       TREE_SIDE_EFFECTS (fndecl) = 0;\n     }\n \n+  /* Mark non-returning functions.  */\n+  if (sym->attr.noreturn)\n+      TREE_THIS_VOLATILE(fndecl) = 1;\n+\n   sym->backend_decl = fndecl;\n \n   if (DECL_CONTEXT (fndecl) == NULL_TREE)"}, {"sha": "80b184e802642361d6a51b471661506418c8e63d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe58e07668767de1adc8cab509649a485607d127", "patch": "@@ -1,3 +1,8 @@\n+2005-08-24  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/17758\n+\tgfortran.dg/nonreturning_statements.f90: New test.\n+\n 2005-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/22454\n@@ -120,6 +125,10 @@\n \tPR c++/23337\n \t* g++.dg/ext/vector2.C: New.\n \n+2005-08-16  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\t* gfortran.dg/inquire-complex.f90:  Correct mangled testcase.\n+\n 2005-08-16  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/23428"}, {"sha": "6268f72291c2d6bc5c0f98c4e06b567ab3a905d9", "filename": "gcc/testsuite/gfortran.dg/nonreturning_statements.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ftestsuite%2Fgfortran.dg%2Fnonreturning_statements.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe58e07668767de1adc8cab509649a485607d127/gcc%2Ftestsuite%2Fgfortran.dg%2Fnonreturning_statements.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnonreturning_statements.f90?ref=fe58e07668767de1adc8cab509649a485607d127", "patch": "@@ -0,0 +1,25 @@\n+! { dg-final { scan-assembler-not \"should_be_noreturn\" } }\n+! PR 17758\n+! This checks that non-returning subroutines and statements\n+! really don't return by calling non-existing subroutines\n+! afterwards.  These calls are supposed to be optimized away, so\n+! they won't show up in the generated assembly.\n+program main\n+  character(len=5) :: c\n+  c = '12345'\n+  read(unit=c,fmt='(A)') i\n+  select case(i)\n+     case(1)\n+        call abort\n+        call abort_should_be_noreturn\n+     case(2)\n+        stop 65\n+        call stop_numeric_should_be_noreturn\n+     case(3)\n+        stop \"foobar\"\n+        call stop_string_should_be_noreturn\n+     case(4)\n+        call exit\n+        call exit_should_be_noreturn\n+     end select\n+end program main"}]}