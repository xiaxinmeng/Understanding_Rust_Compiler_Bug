{"sha": "94b9aa66d805b177bca768ba88368280f9f95b2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRiOWFhNjZkODA1YjE3N2JjYTc2OGJhODgzNjgyODBmOWY5NWIyYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-10-07T20:08:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-10-07T20:08:41Z"}, "message": "mips.c (mips_function_rodata_section): New function.\n\n\t* config/mips/mips.c (mips_function_rodata_section): New function.\n\t(TARGET_ASM_FUNCTION_RODATA_SECTION): Use it.\n\nFrom-SVN: r88703", "tree": {"sha": "93ed52d11f7ffb7c738c8c02d6a3fc4c518fb503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93ed52d11f7ffb7c738c8c02d6a3fc4c518fb503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94b9aa66d805b177bca768ba88368280f9f95b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b9aa66d805b177bca768ba88368280f9f95b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94b9aa66d805b177bca768ba88368280f9f95b2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94b9aa66d805b177bca768ba88368280f9f95b2b/comments", "author": null, "committer": null, "parents": [{"sha": "63b191fe513f22f7e5345539e13bd48e896929af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b191fe513f22f7e5345539e13bd48e896929af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b191fe513f22f7e5345539e13bd48e896929af"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "6eb08c7bc0c37db20b5762624b712639adcc64ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94b9aa66d805b177bca768ba88368280f9f95b2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94b9aa66d805b177bca768ba88368280f9f95b2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94b9aa66d805b177bca768ba88368280f9f95b2b", "patch": "@@ -1,3 +1,8 @@\n+2004-10-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_function_rodata_section): New function.\n+\t(TARGET_ASM_FUNCTION_RODATA_SECTION): Use it.\n+\n 2004-10-07  Devang Patel  <dpatel@apple.com>\n \n         * rs6000/altivec.md (UNSPEC_VCMPBFP, UNSPEC_VCMPEQUB, UNSPEC_VCMPEQUH,"}, {"sha": "048e5a8a3654db71e13d6166273449211068722a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94b9aa66d805b177bca768ba88368280f9f95b2b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94b9aa66d805b177bca768ba88368280f9f95b2b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=94b9aa66d805b177bca768ba88368280f9f95b2b", "patch": "@@ -292,6 +292,7 @@ static void mips_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n static int symbolic_expression_p (rtx);\n static void mips_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t     unsigned HOST_WIDE_INT);\n+static void mips_function_rodata_section (tree);\n static bool mips_in_small_data_p (tree);\n static int mips_fpr_return_fields (tree, tree *);\n static bool mips_return_in_msb (tree);\n@@ -722,6 +723,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #define TARGET_ASM_FUNCTION_EPILOGUE mips_output_function_epilogue\n #undef TARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION mips_select_rtx_section\n+#undef TARGET_ASM_FUNCTION_RODATA_SECTION\n+#define TARGET_ASM_FUNCTION_RODATA_SECTION mips_function_rodata_section\n \n #undef TARGET_SCHED_REORDER\n #define TARGET_SCHED_REORDER mips_sched_reorder\n@@ -6574,6 +6577,42 @@ mips_select_rtx_section (enum machine_mode mode, rtx x,\n     }\n }\n \n+/* Implement TARGET_ASM_FUNCTION_RODATA_SECTION.\n+\n+   The complication here is that, with the combination TARGET_ABICALLS\n+   && !TARGET_GPWORD, jump tables will use absolute addresses, and should\n+   therefore not be included in the read-only part of a DSO.  Handle such\n+   cases by selecting a normal data section instead of a read-only one.\n+   The logic apes that in default_function_rodata_section.  */\n+\n+static void\n+mips_function_rodata_section (tree decl)\n+{\n+  if (!TARGET_ABICALLS || TARGET_GPWORD)\n+    default_function_rodata_section (decl);\n+  else if (decl && DECL_SECTION_NAME (decl))\n+    {\n+      const char *name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      if (DECL_ONE_ONLY (decl) && strncmp (name, \".gnu.linkonce.t.\", 16) == 0)\n+\t{\n+\t  char *rname = ASTRDUP (name);\n+\t  rname[14] = 'd';\n+\t  named_section_real (rname, SECTION_LINKONCE | SECTION_WRITE, decl);\n+\t}\n+      else if (flag_function_sections && flag_data_sections\n+\t       && strncmp (name, \".text.\", 6) == 0)\n+\t{\n+\t  char *rname = ASTRDUP (name);\n+\t  memcpy (rname + 1, \"data\", 4);\n+\t  named_section_flags (rname, SECTION_WRITE);\n+\t}\n+      else\n+\tdata_section ();\n+    }\n+  else\n+    data_section ();\n+}\n+\n /* Implement TARGET_IN_SMALL_DATA_P.  Return true if it would be safe to\n    access DECL using %gp_rel(...)($gp).  */\n "}]}