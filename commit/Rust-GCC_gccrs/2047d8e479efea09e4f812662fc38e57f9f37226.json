{"sha": "2047d8e479efea09e4f812662fc38e57f9f37226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0N2Q4ZTQ3OWVmZWEwOWU0ZjgxMjY2MmZjMzhlNTdmOWYzNzIyNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-18T10:41:56Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-18T10:41:56Z"}, "message": "Math.java, [...]: Reworked import statements, HTML in javadocs and modifier orders.\n\n2004-10-18  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/Math.java,\n\tjava/lang/Package.java,\n\tjava/lang/Runtime.java,\n\tjava/lang/StrictMath.java,\n\tjava/lang/System.java,\n\tjava/lang/Thread.java,\n\tjava/lang/ThreadLocal.java,\n\tjava/lang/Void.java:\n\tReworked import statements, HTML in javadocs and modifier orders.\n\nFrom-SVN: r89207", "tree": {"sha": "13de505ee49b7bb4b843feeac949d8748d7360ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13de505ee49b7bb4b843feeac949d8748d7360ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2047d8e479efea09e4f812662fc38e57f9f37226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2047d8e479efea09e4f812662fc38e57f9f37226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2047d8e479efea09e4f812662fc38e57f9f37226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2047d8e479efea09e4f812662fc38e57f9f37226/comments", "author": null, "committer": null, "parents": [{"sha": "36071b5cbeaf23f0ac98cd313ba7d29d016b5ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36071b5cbeaf23f0ac98cd313ba7d29d016b5ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36071b5cbeaf23f0ac98cd313ba7d29d016b5ca2"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "98309209bb4a78e87a3ee250d9f957f873e2d602", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -1,3 +1,15 @@\n+2004-10-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/Math.java,\n+\tjava/lang/Package.java,\n+\tjava/lang/Runtime.java,\n+\tjava/lang/StrictMath.java,\n+\tjava/lang/System.java,\n+\tjava/lang/Thread.java,\n+\tjava/lang/ThreadLocal.java,\n+\tjava/lang/Void.java:\n+\tReworked import statements, HTML in javadocs and modifier orders.\n+\n 2004-10-18  Jeroen Frijters  <jeroen@frijters.net>\n \n \t* java/util/Timer.java"}, {"sha": "aac33aa299d6b97a7d806b08adc4fea2ec71e6b3", "filename": "libjava/java/lang/Math.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FMath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FMath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FMath.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -38,9 +38,10 @@\n \n package java.lang;\n \n-import java.util.Random;\n import gnu.classpath.Configuration;\n \n+import java.util.Random;\n+\n /**\n  * Helper class containing useful mathematical functions and constants.\n  * <P>\n@@ -50,7 +51,7 @@\n  *\n  * @author Paul Fisher\n  * @author John Keiser\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.0\n  */\n public final class Math"}, {"sha": "89945cadd8a15638539e7a7cd3dc2f51c6b0b6dd", "filename": "libjava/java/lang/Package.java", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FPackage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FPackage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPackage.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -41,6 +41,7 @@\n import java.util.NoSuchElementException;\n import java.util.StringTokenizer;\n \n+\n /**\n  * Everything you ever wanted to know about a package. This class makes it\n  * possible to attach specification and implementation information to a\n@@ -63,7 +64,7 @@\n  * then the other version, etc. (If a version has no minor, micro, etc numbers\n  * then they are considered the be 0.)\n  *\n- * @author Mark Wielaard <mark@klomp.org>\n+ * @author Mark Wielaard (mark@klomp.org)\n  * @see ClassLoader#definePackage(String, String, String, String, String,\n  *      String, String, URL)\n  * @since 1.2\n@@ -72,28 +73,28 @@\n public class Package\n {\n   /** The name of the Package */\n-  final private String name;\n+  private final String name;\n \n   /** The name if the implementation */\n-  final private String implTitle;\n+  private final String implTitle;\n \n   /** The vendor that wrote this implementation */\n-  final private String implVendor;\n+  private final String implVendor;\n \n   /** The version of this implementation */\n-  final private String implVersion;\n+  private final String implVersion;\n \n   /** The name of the specification */\n-  final private String specTitle;\n+  private final String specTitle;\n \n   /** The name of the specification designer */\n-  final private String specVendor;\n+  private final String specVendor;\n \n   /** The version of this specification */\n-  final private String specVersion;\n+  private final String specVersion;\n \n   /** If sealed the origin of the package classes, otherwise null */\n-  final private URL sealed;\n+  private final URL sealed;\n \n   /**\n    * A package local constructor for the Package class. All parameters except"}, {"sha": "a1babfc1817ce7d30fcf7df42694e721e453f606", "filename": "libjava/java/lang/Runtime.java", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FRuntime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FRuntime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntime.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.lang;\n \n import java.io.File;\n-import java.io.InputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -79,34 +80,35 @@\n    * treated as read-only.\n    *\n    * No matter what class you start initialization with, it defers to the\n-   * superclass, therefore Object.<clinit> will be the first Java code\n+   * superclass, therefore Object.&lt;clinit&gt; will be the first Java code\n    * executed. From there, the bootstrap sequence, up to the point that\n    * native libraries are loaded (as of March 24, when I traced this\n    * manually) is as follows:\n    *\n-   * Object.<clinit> uses a String literal, possibly triggering initialization\n-   *  String.<clinit> calls WeakHashMap.<init>, triggering initialization\n+   * Object.&lt;clinit&gt; uses a String literal, possibly triggering initialization\n+   *  String.&lt;clinit&gt; calls WeakHashMap.&lt;init&gt;, triggering initialization\n    *   AbstractMap, WeakHashMap, WeakHashMap$1 have no dependencies\n-   *  String.<clinit> calls CaseInsensitiveComparator.<init>, triggering\n+   *  String.&lt;clinit&gt; calls CaseInsensitiveComparator.&lt;init&gt;, triggering\n    *      initialization\n    *   CaseInsensitiveComparator has no dependencies\n-   * Object.<clinit> calls System.loadLibrary, triggering initialization\n-   *  System.<clinit> calls System.loadLibrary\n+   * Object.&lt;clinit&gt; calls System.loadLibrary, triggering initialization\n+   *  System.&lt;clinit&gt; calls System.loadLibrary\n    *  System.loadLibrary calls Runtime.getRuntime, triggering initialization\n-   *   Runtime.<clinit> calls Properties.<init>, triggering initialization\n+   *   Runtime.&lt;clinit&gt; calls Properties.&lt;init&gt;, triggering initialization\n    *    Dictionary, Hashtable, and Properties have no dependencies\n-   *   Runtime.<clinit> calls VMRuntime.insertSystemProperties, triggering\n+   *   Runtime.&lt;clinit&gt; calls VMRuntime.insertSystemProperties, triggering\n    *      initialization of VMRuntime; the VM must make sure that there are\n    *      not any harmful dependencies\n-   *   Runtime.<clinit> calls Runtime.<init>\n-   *    Runtime.<init> calls StringTokenizer.<init>, triggering initialization\n+   *   Runtime.&lt;clinit&gt; calls Runtime.&lt;init&gt;\n+   *    Runtime.&lt;init&gt; calls StringTokenizer.&lt;init&gt;, triggering initialization\n    *     StringTokenizer has no dependencies\n    *  System.loadLibrary calls Runtime.loadLibrary\n    *   Runtime.loadLibrary should be able to load the library, although it\n    *       will probably set off another string of initializations from\n    *       ClassLoader first\n    */\n   static Properties defaultProperties = new Properties();\n+\n   static\n   {\n     insertSystemProperties(defaultProperties);"}, {"sha": "5a9c7cabb430885b7f459703479310f4211bb107", "filename": "libjava/java/lang/StrictMath.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FStrictMath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FStrictMath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStrictMath.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -51,9 +51,10 @@\n \n package java.lang;\n \n-import java.util.Random;\n import gnu.classpath.Configuration;\n \n+import java.util.Random;\n+\n /**\n  * Helper class containing useful mathematical functions and constants.\n  * This class mirrors {@link Math}, but is 100% portable, because it uses\n@@ -69,7 +70,7 @@\n  * Note that angles are specified in radians.  Conversion functions are\n  * provided for your convenience.\n  *\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.3\n  */\n public final strictfp class StrictMath"}, {"sha": "8372fbec4a071190de6a9a63a6aca05912280248", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -36,16 +36,9 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.lang;\n \n import gnu.classpath.Configuration;\n-\n-import java.io.BufferedInputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.FileDescriptor;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.InputStream;\n import java.io.PrintStream;\n import java.util.Properties;\n@@ -56,7 +49,7 @@\n  * general environment.  As such, all methods are static.\n  *\n  * @author John Keiser\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.0\n  * @status still missing 1.4 functionality\n  */"}, {"sha": "5f3940f84622490ee7ba73f209ce4ebc3d5ca28a", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -44,7 +44,7 @@\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete to version 1.4, with caveats. We do not \n+ * Status:  Believed complete to version 1.4, with caveats. We do not\n  *          implement the deprecated (and dangerous) stop, suspend, and resume\n  *          methods. Security implementation is not complete.\n  */\n@@ -79,7 +79,7 @@\n  *\n  * @author Tom Tromey\n  * @author John Keiser\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @see Runnable\n  * @see Runtime#exit(int)\n  * @see #run()"}, {"sha": "d9967c6a2c8b2bc78b00a37079738b2e874f7d8d", "filename": "libjava/java/lang/ThreadLocal.java", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FThreadLocal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FThreadLocal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadLocal.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -41,6 +41,7 @@\n import java.util.Map;\n import java.util.WeakHashMap;\n \n+\n /**\n  * ThreadLocal objects have a different state associated with every\n  * Thread that accesses them. Every access to the ThreadLocal object\n@@ -51,8 +52,11 @@\n  * <p>The first time a ThreadLocal object is accessed on a particular\n  * Thread, the state for that Thread's copy of the local variable is set by\n  * executing the method <code>initialValue()</code>.\n+ * </p>\n  *\n  * <p>An example how you can use this:\n+ * </p>\n+ *\n  * <pre>\n  * class Connection\n  * {\n@@ -65,20 +69,22 @@\n  *     };\n  * ...\n  * }\n- * </pre></br>\n+ * </pre>\n  *\n- * Now all instances of connection can see who the owner of the currently\n+ * <p>Now all instances of connection can see who the owner of the currently\n  * executing Thread is by calling <code>owner.get()</code>. By default any\n  * Thread would be associated with 'nobody'. But the Connection object could\n  * offer a method that changes the owner associated with the Thread on\n  * which the method was called by calling <code>owner.put(\"somebody\")</code>.\n  * (Such an owner changing method should then be guarded by security checks.)\n+ * </p>\n  *\n  * <p>When a Thread is garbage collected all references to values of\n  * the ThreadLocal objects associated with that Thread are removed.\n+ * </p>\n  *\n- * @author Mark Wielaard <mark@klomp.org>\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Mark Wielaard (mark@klomp.org)\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.2\n  * @status updated to 1.4\n  */"}, {"sha": "39094d722448e7c895ba98f29e9229c52d10e33a", "filename": "libjava/java/lang/Void.java", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FVoid.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2047d8e479efea09e4f812662fc38e57f9f37226/libjava%2Fjava%2Flang%2FVoid.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVoid.java?ref=2047d8e479efea09e4f812662fc38e57f9f37226", "patch": "@@ -35,19 +35,19 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.lang;\n \n+\n /**\n  * Void is a placeholder class so that the variable <code>Void.TYPE</code>\n  * (also available as <code>void.class</code>) can be supported for\n  * reflection return types.\n  *\n- * <p>This class could be Serializable, but that is up to Sun.\n+ * <p>This class could be Serializable, but that is up to Sun.</p>\n  *\n  * @author Paul Fisher\n  * @author John Keiser\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.1\n  * @status updated to 1.4\n  */\n@@ -62,5 +62,7 @@\n   /**\n    * Void is non-instantiable.\n    */\n-  private Void() { }\n+  private Void()\n+  {\n+  }\n }"}]}