{"sha": "32df61aee46663b8813d3e620d947c24b9f6d634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJkZjYxYWVlNDY2NjNiODgxM2QzZTYyMGQ5NDdjMjRiOWY2ZDYzNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-01-09T15:37:47Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-01-09T15:37:47Z"}, "message": "re PR fortran/38536 (ICE with C_LOC in resolve.c due to not properly going through expr->ref)\n\n2011-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/38536\n\t* resolve.c (is_scalar_expr_ptr):  For a substring reference,\n\tuse gfc_dep_compare_expr to compare start and end expession.\n\tAdd FIXME for using gfc_deb_compare_expr elsewhere.\n\n2011-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/38536\n\t* gfortran.dg/iso_c_binding_c_loc_char_1.f03:  New test.\n\nFrom-SVN: r168614", "tree": {"sha": "7073e7c8d0f79c5f589d5e321cebea3799e98e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7073e7c8d0f79c5f589d5e321cebea3799e98e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32df61aee46663b8813d3e620d947c24b9f6d634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32df61aee46663b8813d3e620d947c24b9f6d634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32df61aee46663b8813d3e620d947c24b9f6d634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32df61aee46663b8813d3e620d947c24b9f6d634/comments", "author": null, "committer": null, "parents": [{"sha": "8df6219395528dafbec01a93e2c0da388112fd12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df6219395528dafbec01a93e2c0da388112fd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df6219395528dafbec01a93e2c0da388112fd12"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "0c623dd4857715edf6c12bd5e6bdb9d526c3972b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=32df61aee46663b8813d3e620d947c24b9f6d634", "patch": "@@ -1,3 +1,10 @@\n+2011-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/38536\n+\t* resolve.c (is_scalar_expr_ptr):  For a substring reference,\n+\tuse gfc_dep_compare_expr to compare start and end expession.\n+\tAdd FIXME for using gfc_deb_compare_expr elsewhere.\n+\n 2011-01-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46313"}, {"sha": "b86c430d34a4499233f73708528c079ffdd924f4", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=32df61aee46663b8813d3e620d947c24b9f6d634", "patch": "@@ -2567,21 +2567,11 @@ is_scalar_expr_ptr (gfc_expr *expr)\n       switch (ref->type)\n         {\n         case REF_SUBSTRING:\n-          if (ref->u.ss.length != NULL \n-              && ref->u.ss.length->length != NULL\n-              && ref->u.ss.start\n-              && ref->u.ss.start->expr_type == EXPR_CONSTANT \n-              && ref->u.ss.end\n-              && ref->u.ss.end->expr_type == EXPR_CONSTANT)\n-            {\n-              start = (int) mpz_get_si (ref->u.ss.start->value.integer);\n-              end = (int) mpz_get_si (ref->u.ss.end->value.integer);\n-              if (end - start + 1 != 1)\n-                retval = FAILURE;\n-            }\n-          else\n-            retval = FAILURE;\n+          if (ref->u.ss.start == NULL || ref->u.ss.end == NULL\n+\t      || gfc_dep_compare_expr (ref->u.ss.start, ref->u.ss.end) != 0)\n+\t    retval = FAILURE;\n           break;\n+\n         case REF_ARRAY:\n           if (ref->u.ar.type == AR_ELEMENT)\n             retval = SUCCESS;\n@@ -2610,7 +2600,8 @@ is_scalar_expr_ptr (gfc_expr *expr)\n \t\t    {\n \t\t      /* We have constant lower and upper bounds.  If the\n \t\t\t difference between is 1, it can be considered a\n-\t\t\t scalar.  */\n+\t\t\t scalar.  \n+\t\t\t FIXME: Use gfc_dep_compare_expr instead.  */\n \t\t      start = (int) mpz_get_si\n \t\t\t\t(ref->u.ar.as->lower[0]->value.integer);\n \t\t      end = (int) mpz_get_si"}, {"sha": "82d316a37a0a942cab543e1aa7a90c9d247bc1a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32df61aee46663b8813d3e620d947c24b9f6d634", "patch": "@@ -1,3 +1,8 @@\n+2011-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/38536\n+\t* gfortran.dg/iso_c_binding_c_loc_char_1.f03:  New test.\n+\n 2011-01-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46313"}, {"sha": "14bc4a075927acbfc5d8604bc17086b02e6bd361", "filename": "gcc/testsuite/gfortran.dg/iso_c_binding_c_loc_char_1.f03", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_c_loc_char_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32df61aee46663b8813d3e620d947c24b9f6d634/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_c_loc_char_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_c_binding_c_loc_char_1.f03?ref=32df61aee46663b8813d3e620d947c24b9f6d634", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! PR 38536 - don't reject substring of length one\n+! Original test case by Scot Breitenfeld\n+SUBROUTINE test(buf, buf2, buf3, n)\n+  USE, INTRINSIC :: ISO_C_BINDING\n+  IMPLICIT NONE\n+  CHARACTER(LEN=*), INTENT(INOUT), TARGET :: buf\n+  INTEGER, INTENT(in) :: n\n+  CHARACTER(LEN=*), INTENT(INOUT), DIMENSION(1:2), TARGET :: buf2\n+  CHARACTER(LEN=3), TARGET :: buf3\n+  TYPE(C_PTR) :: f_ptr\n+\n+  f_ptr = C_LOC(buf(1:1))      ! Used to fail\n+                               ! Error: CHARACTER argument 'buf' to 'c_loc'\n+                               ! at (1) must have a length of 1\n+  f_ptr = C_LOC(buf2(1)(1:1))  ! PASSES\n+\n+  f_ptr = C_LOC(buf(n:n))\n+\n+  f_ptr = C_LOC(buf3(3:))\n+END SUBROUTINE test"}]}