{"sha": "736432eedbab9ede68c755437ae8228a95e89871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2NDMyZWVkYmFiOWVkZTY4Yzc1NTQzN2FlODIyOGE5NWU4OTg3MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-01-06T17:50:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-01-06T17:50:26Z"}, "message": "tree-cfg.c (bsi_replace): Rename final argument from PRESERVE_EH_INFO to UPDATE_EH_INFO.\n\n\n\t* tree-cfg.c (bsi_replace): Rename final argument from\n\tPRESERVE_EH_INFO to UPDATE_EH_INFO.  Fix typo in last\n\tchange (stmt -> orig_stmt).\n\t* tree-eh.c (verify_eh_throw_stmt_node): New function.\n\t(bsi_remove): Add new argument.  Remove EH information\n\tif requested.\n\t(verify_eh_throw_table_statements): New function.\n\t(bsi_remove): Add new argument REMOVE_EH_INFO.  All callers\n\tupdated.\n\t* tree-optimize.c (execute_free_cfg_annotations): Verify\n\tthe EH throw statement table after removing annotations.\n\t* except.h (verify_eh_throw_table_statements): Prototype.\n\t* tree-flow.h (bsi_remove): Update prototype.\n\t* tree-vrp.c (remove_range_assertions): Add new argument to\n\tbsi_remove call.\n\t* tree-ssa-loop-im.c (move_computations_stmt): Likewise.\n\t* tree-complex.c (expand_complex_div_wide): Likewise.\n\t* tree-ssa-threadupdate.c (remove_ctrl_stmt_and_useless_edges): Likewise\n\t* tree-tailcall.c (eliminate_tailcall): Likewise.\n\t* tree-ssa-dse.c (dse_optimize_stmt): Likewise.\n\t* tree-ssa-loop-ivopts.c (remove_statement): Likewise.\n\t* tree-nrv.c (tree_nrv): Likewise.\n\t* tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Likewise.\n\t* tree-if-conv.c (tree_if_convert_cond_expr): Likewise.\n\t(combine_blocks): Likewise.\n\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable): Likewise.\n\t* tree-cfgcleanup.c (cleanup_ctrl_expr_graph): Likewise.\n\t(cleanup_control_flow): Likewise.\n\t(remove_forwarder_block): Likewise.\n\t* tree-ssa-pre.c (remove_dead_inserted_code): Likewise.\n\t* tree-sra.c (sra_replace): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Likewise.\n\t(forward_propagate_single_use_vars): Likewise.\n\t* tree-ssa-dce.c (remove_dead_stmt): Likewise.\n\t* tree-inline.c (expand_call_inline): Likewise.\n\t* tree-vect-transform.c (vect_transform_loop): Likewise.\n\t* tree-outof-ssa.c (rewrite_trees): Likewise.\n\t* tree-cfg.c (make_goto_expr_edges): Likewise.\n\t(cleanup_dead_labels): Likewise.\n\t(tree_merge_blocks, remove_bb, disband_implicit_edges): Likewise.\n\t(bsi_move_before, bsi_move_after): Likewise.\n\t(bsi_move_to_bb_end, try_redirect_by_replacing_jump): Likewise\n\t(tree_redirect_edge_and_branch, tree_split_block): Likewise.\n\nFrom-SVN: r109421", "tree": {"sha": "632c2510f93d3283918e12e09ca26259dd93ad01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632c2510f93d3283918e12e09ca26259dd93ad01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/736432eedbab9ede68c755437ae8228a95e89871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736432eedbab9ede68c755437ae8228a95e89871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736432eedbab9ede68c755437ae8228a95e89871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736432eedbab9ede68c755437ae8228a95e89871/comments", "author": null, "committer": null, "parents": [{"sha": "8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae5e6f215545e316f6cb2b84fae7b64cdd44de1"}], "stats": {"total": 179, "additions": 134, "deletions": 45}, "files": [{"sha": "c8b616af0c2989bdc14a99bcea705165a19e15fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -1,3 +1,50 @@\n+2005-01-06  Jeff Law  <law@redhat.com>\n+\n+\tPR ada/24994\n+\t* tree-cfg.c (bsi_replace): Rename final argument from\n+\tPRESERVE_EH_INFO to UPDATE_EH_INFO.  Fix typo in last\n+\tchange (stmt -> orig_stmt).\n+\t* tree-eh.c (verify_eh_throw_stmt_node): New function.\n+\t(bsi_remove): Add new argument.  Remove EH information\n+\tif requested.\n+\t(verify_eh_throw_table_statements): New function.\n+\t(bsi_remove): Add new argument REMOVE_EH_INFO.  All callers\n+\tupdated.\n+\t* tree-optimize.c (execute_free_cfg_annotations): Verify\n+\tthe EH throw statement table after removing annotations.\n+\t* except.h (verify_eh_throw_table_statements): Prototype.\n+\t* tree-flow.h (bsi_remove): Update prototype.\n+\t* tree-vrp.c (remove_range_assertions): Add new argument to\n+\tbsi_remove call.\n+\t* tree-ssa-loop-im.c (move_computations_stmt): Likewise.\n+\t* tree-complex.c (expand_complex_div_wide): Likewise.\n+\t* tree-ssa-threadupdate.c (remove_ctrl_stmt_and_useless_edges): Likewise\n+\t* tree-tailcall.c (eliminate_tailcall): Likewise.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Likewise.\n+\t* tree-ssa-loop-ivopts.c (remove_statement): Likewise.\n+\t* tree-nrv.c (tree_nrv): Likewise.\n+\t* tree-vectorizer.c (slpeel_make_loop_iterate_ntimes): Likewise.\n+\t* tree-if-conv.c (tree_if_convert_cond_expr): Likewise.\n+\t(combine_blocks): Likewise.\n+\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable): Likewise.\n+\t* tree-cfgcleanup.c (cleanup_ctrl_expr_graph): Likewise.\n+\t(cleanup_control_flow): Likewise.\n+\t(remove_forwarder_block): Likewise.\n+\t* tree-ssa-pre.c (remove_dead_inserted_code): Likewise.\n+\t* tree-sra.c (sra_replace): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Likewise.\n+\t(forward_propagate_single_use_vars): Likewise.\n+\t* tree-ssa-dce.c (remove_dead_stmt): Likewise.\n+\t* tree-inline.c (expand_call_inline): Likewise.\n+\t* tree-vect-transform.c (vect_transform_loop): Likewise.\n+\t* tree-outof-ssa.c (rewrite_trees): Likewise.\n+\t* tree-cfg.c (make_goto_expr_edges): Likewise.\n+\t(cleanup_dead_labels): Likewise.\n+\t(tree_merge_blocks, remove_bb, disband_implicit_edges): Likewise.\n+\t(bsi_move_before, bsi_move_after): Likewise.\n+\t(bsi_move_to_bb_end, try_redirect_by_replacing_jump): Likewise\n+\t(tree_redirect_edge_and_branch, tree_split_block): Likewise.\n+\n 2006-01-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/25528"}, {"sha": "2b2115a09da20bcb91c24b471381ba7a0ecba0f6", "filename": "gcc/except.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -173,3 +173,7 @@ struct throw_stmt_node GTY(())\n \n extern struct htab *get_eh_throw_stmt_table (struct function *);\n extern void set_eh_throw_stmt_table (struct function *, struct htab *);\n+\n+#ifdef ENABLE_CHECKING\n+extern void verify_eh_throw_table_statements (void);\n+#endif"}, {"sha": "342b9d2fdb1fce02e9ca77f50f4d5377714ca729", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -843,7 +843,7 @@ make_goto_expr_edges (basic_block bb)\n #else\n \t  e->goto_locus = EXPR_LOCUS (goto_t);\n #endif\n-\t  bsi_remove (&last);\n+\t  bsi_remove (&last, true);\n \t  return;\n \t}\n \n@@ -1064,7 +1064,7 @@ cleanup_dead_labels (void)\n \t      || DECL_NONLOCAL (label))\n \t    bsi_next (&i);\n \t  else\n-\t    bsi_remove (&i);\n+\t    bsi_remove (&i, true);\n \t}\n     }\n \n@@ -1362,7 +1362,7 @@ tree_merge_blocks (basic_block a, basic_block b)\n \t{\n \t  tree label = bsi_stmt (bsi);\n \n-\t  bsi_remove (&bsi);\n+\t  bsi_remove (&bsi, false);\n \t  /* Now that we can thread computed gotos, we might have\n \t     a situation where we have a forced label in block B\n \t     However, the label at the start of block B might still be\n@@ -2024,7 +2024,7 @@ remove_bb (basic_block bb)\n \t  \t  \n \t  new_bb = bb->prev_bb;\n \t  new_bsi = bsi_start (new_bb);\n-\t  bsi_remove (&i);\n+\t  bsi_remove (&i, false);\n \t  bsi_insert_before (&new_bsi, stmt, BSI_NEW_STMT);\n \t}\n       else\n@@ -2036,7 +2036,7 @@ remove_bb (basic_block bb)\n \t  if (in_ssa_p)\n \t    release_defs (stmt);\n \n-\t  bsi_remove (&i);\n+\t  bsi_remove (&i, true);\n \t}\n \n       /* Don't warn for removed gotos.  Gotos are often removed due to\n@@ -2584,7 +2584,7 @@ disband_implicit_edges (void)\n \t  if (bb->next_bb == EXIT_BLOCK_PTR\n \t      && !TREE_OPERAND (stmt, 0))\n \t    {\n-\t      bsi_remove (&last);\n+\t      bsi_remove (&last, true);\n \t      single_succ_edge (bb)->flags |= EDGE_FALLTHRU;\n \t    }\n \t  continue;\n@@ -2800,16 +2800,25 @@ bsi_insert_after (block_stmt_iterator *i, tree t, enum bsi_iterator_update m)\n \n \n /* Remove the statement pointed to by iterator I.  The iterator is updated\n-   to the next statement.  */\n+   to the next statement. \n+\n+   When REMOVE_EH_INFO is true we remove the statement pointed to by\n+   iterator I from the EH tables.  Otherwise we do not modify the EH\n+   tables.\n+\n+   Generally, REMOVE_EH_INFO should be true when the statement is going to\n+   be removed from the IL and not reinserted elsewhere.  */\n \n void\n-bsi_remove (block_stmt_iterator *i)\n+bsi_remove (block_stmt_iterator *i, bool remove_eh_info)\n {\n   tree t = bsi_stmt (*i);\n   set_bb_for_stmt (t, NULL);\n   delink_stmt_imm_use (t);\n   tsi_delink (&i->tsi);\n   mark_stmt_modified (t);\n+  if (remove_eh_info)\n+    remove_stmt_from_eh_region (t);\n }\n \n \n@@ -2819,7 +2828,7 @@ void\n bsi_move_after (block_stmt_iterator *from, block_stmt_iterator *to)\n {\n   tree stmt = bsi_stmt (*from);\n-  bsi_remove (from);\n+  bsi_remove (from, false);\n   bsi_insert_after (to, stmt, BSI_SAME_STMT);\n } \n \n@@ -2830,7 +2839,7 @@ void\n bsi_move_before (block_stmt_iterator *from, block_stmt_iterator *to)\n {\n   tree stmt = bsi_stmt (*from);\n-  bsi_remove (from);\n+  bsi_remove (from, false);\n   bsi_insert_before (to, stmt, BSI_SAME_STMT);\n }\n \n@@ -2851,11 +2860,12 @@ bsi_move_to_bb_end (block_stmt_iterator *from, basic_block bb)\n \n \n /* Replace the contents of the statement pointed to by iterator BSI\n-   with STMT.  If PRESERVE_EH_INFO is true, the exception handling\n-   information of the original statement is preserved.  */\n+   with STMT.  If UPDATE_EH_INFO is true, the exception handling\n+   information of the original statement is moved to the new statement.  */\n+  \n \n void\n-bsi_replace (const block_stmt_iterator *bsi, tree stmt, bool preserve_eh_info)\n+bsi_replace (const block_stmt_iterator *bsi, tree stmt, bool update_eh_info)\n {\n   int eh_region;\n   tree orig_stmt = bsi_stmt (*bsi);\n@@ -2865,12 +2875,12 @@ bsi_replace (const block_stmt_iterator *bsi, tree stmt, bool preserve_eh_info)\n \n   /* Preserve EH region information from the original statement, if\n      requested by the caller.  */\n-  if (preserve_eh_info)\n+  if (update_eh_info)\n     {\n       eh_region = lookup_stmt_eh_region (orig_stmt);\n       if (eh_region >= 0)\n \t{\n-\t  remove_stmt_from_eh_region (stmt);\n+\t  remove_stmt_from_eh_region (orig_stmt);\n \t  add_stmt_to_eh_region (stmt, eh_region);\n \t}\n     }\n@@ -3969,7 +3979,7 @@ tree_try_redirect_by_replacing_jump (edge e, basic_block target)\n   if (TREE_CODE (stmt) == COND_EXPR\n       || TREE_CODE (stmt) == SWITCH_EXPR)\n     {\n-      bsi_remove (&b);\n+      bsi_remove (&b, true);\n       e = ssa_redirect_edge (e, target);\n       e->flags = EDGE_FALLTHRU;\n       return e;\n@@ -4066,7 +4076,7 @@ tree_redirect_edge_and_branch (edge e, basic_block dest)\n       }\n \n     case RETURN_EXPR:\n-      bsi_remove (&bsi);\n+      bsi_remove (&bsi, true);\n       e->flags |= EDGE_FALLTHRU;\n       break;\n \n@@ -4142,7 +4152,7 @@ tree_split_block (basic_block bb, void *stmt)\n   while (!bsi_end_p (bsi))\n     {\n       act = bsi_stmt (bsi);\n-      bsi_remove (&bsi);\n+      bsi_remove (&bsi, false);\n       bsi_insert_after (&bsi_tgt, act, BSI_NEW_STMT);\n     }\n "}, {"sha": "96b95f18ed9d57848c6e257c687481411721f085", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -117,7 +117,7 @@ cleanup_control_expr_graph (basic_block bb, block_stmt_iterator bsi)\n   else\n     taken_edge = single_succ_edge (bb);\n \n-  bsi_remove (&bsi);\n+  bsi_remove (&bsi, true);\n   taken_edge->flags = EDGE_FALLTHRU;\n \n   /* We removed some paths from the cfg.  */\n@@ -207,7 +207,7 @@ cleanup_control_flow (void)\n \n \t  /* Remove the GOTO_EXPR as it is not needed.  The CFG has all the\n \t     relevant information we need.  */\n-\t  bsi_remove (&bsi);\n+\t  bsi_remove (&bsi, true);\n \t  retval = true;\n \t}\n \n@@ -433,7 +433,7 @@ remove_forwarder_block (basic_block bb, basic_block **worklist)\n \t{\n \t  label = bsi_stmt (bsi);\n \t  gcc_assert (TREE_CODE (label) == LABEL_EXPR);\n-\t  bsi_remove (&bsi);\n+\t  bsi_remove (&bsi, false);\n \t  bsi_insert_before (&bsi_to, label, BSI_CONTINUE_LINKING);\n \t}\n     }"}, {"sha": "35a85fca16cab779a8beb99056f0844a879c7df3", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -1124,7 +1124,7 @@ expand_complex_div_wide (block_stmt_iterator *bsi, tree inner_type,\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n \t t1 = build2 (MODIFY_EXPR, inner_type, ri, ti);\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n-\t bsi_remove (bsi);\n+\t bsi_remove (bsi, true);\n        }\n     }\n \n@@ -1163,7 +1163,7 @@ expand_complex_div_wide (block_stmt_iterator *bsi, tree inner_type,\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n \t t1 = build2 (MODIFY_EXPR, inner_type, ri, ti);\n \t bsi_insert_before (bsi, t1, BSI_SAME_STMT);\n-\t bsi_remove (bsi);\n+\t bsi_remove (bsi, true);\n        }\n     }\n "}, {"sha": "dfb3a278895f4fd79f7a61d63fede42d9b5664a4", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -2075,3 +2075,25 @@ maybe_clean_or_replace_eh_stmt (tree old_stmt, tree new_stmt)\n \n   return false;\n }\n+\n+#ifdef ENABLE_CHECKING\n+static int\n+verify_eh_throw_stmt_node (void **slot, void *data ATTRIBUTE_UNUSED)\n+{\n+  struct throw_stmt_node *node = (struct throw_stmt_node *)*slot;\n+\n+  gcc_assert (node->stmt->common.ann == NULL);\n+  return 1;\n+}\n+\n+void\n+verify_eh_throw_table_statements (void)\n+{\n+  if (!get_eh_throw_stmt_table (cfun))\n+    return;\n+  htab_traverse (get_eh_throw_stmt_table (cfun),\n+\t\t verify_eh_throw_stmt_node,\n+\t\t NULL);\n+}\n+\n+#endif"}, {"sha": "afdd14379135b9c1730aabf4fabf826aaec64f4c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -449,7 +449,7 @@ static inline void bsi_prev (block_stmt_iterator *);\n static inline tree bsi_stmt (block_stmt_iterator);\n static inline tree * bsi_stmt_ptr (block_stmt_iterator);\n \n-extern void bsi_remove (block_stmt_iterator *);\n+extern void bsi_remove (block_stmt_iterator *, bool);\n extern void bsi_move_before (block_stmt_iterator *, block_stmt_iterator *);\n extern void bsi_move_after (block_stmt_iterator *, block_stmt_iterator *);\n extern void bsi_move_to_bb_end (block_stmt_iterator *, basic_block);"}, {"sha": "2356f912b0595275cc91b26ad4e853d8d7e32793", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -287,7 +287,7 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n      using new condition.  */\n   if (!bb_with_exit_edge_p (loop, bb_for_stmt (stmt)))\n     {\n-      bsi_remove (bsi);\n+      bsi_remove (bsi, true);\n       cond = NULL_TREE;\n     }\n   return;\n@@ -934,7 +934,7 @@ combine_blocks (struct loop *loop)\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); )\n \t{\n \t  if (TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR)\n-\t    bsi_remove (&bsi);\n+\t    bsi_remove (&bsi, true);\n \t  else\n \t    {\n \t      set_bb_for_stmt (bsi_stmt (bsi), merge_target_bb);"}, {"sha": "0dafbc244c9ef23781832816ccb04292c8c02f84", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -2067,7 +2067,7 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n   else\n     {\n       tree stmt = bsi_stmt (stmt_bsi);\n-      bsi_remove (&stmt_bsi);\n+      bsi_remove (&stmt_bsi, false);\n       bsi_insert_after (&bsi, stmt, BSI_NEW_STMT);\n     }\n   stmt_bsi = bsi_start (return_block);\n@@ -2182,7 +2182,7 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n   else\n     /* We're modifying a TSI owned by gimple_expand_calls_inline();\n        tsi_delink() will leave the iterator in a sane state.  */\n-    bsi_remove (&stmt_bsi);\n+    bsi_remove (&stmt_bsi, true);\n \n   bsi_next (&bsi);\n   if (bsi_end_p (bsi))"}, {"sha": "761e6a0ab46cf5f3cb065a96d2dc3a9e3e1b8fa8", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -200,7 +200,7 @@ tree_nrv (void)\n \t  if (TREE_CODE (*tp) == MODIFY_EXPR\n \t      && TREE_OPERAND (*tp, 0) == result\n \t      && TREE_OPERAND (*tp, 1) == found)\n-\t    bsi_remove (&bsi);\n+\t    bsi_remove (&bsi, true);\n \t  else\n \t    {\n \t      walk_tree (tp, finalize_nrv_r, &data, 0);"}, {"sha": "8bed9154d9045f24657533296a840c0265102a3f", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -209,6 +209,12 @@ execute_free_cfg_annotations (void)\n \n   /* And get rid of annotations we no longer need.  */\n   delete_tree_cfg_annotations ();\n+\n+#ifdef ENABLE_CHECKING\n+  /* Once the statement annotations have been removed, we can verify\n+     the integrity of statements in the EH throw table.  */\n+  verify_eh_throw_table_statements ();\n+#endif\n }\n \n struct tree_opt_pass pass_free_cfg_annotations ="}, {"sha": "553f7a1f1fcbf5c9aab561a68123ce8bd53e5f63", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -1940,7 +1940,7 @@ rewrite_trees (var_map map, tree *values)\n \n \t  /* Remove any stmts marked for removal.  */\n \t  if (remove)\n-\t    bsi_remove (&si);\n+\t    bsi_remove (&si, true);\n \t  else\n \t    bsi_next (&si);\n \t}"}, {"sha": "6b7e991333f11c6821d3e4b6c53cad441b27a893", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -1825,7 +1825,7 @@ static void\n sra_replace (block_stmt_iterator *bsi, tree list)\n {\n   sra_insert_before (bsi, list);\n-  bsi_remove (bsi);\n+  bsi_remove (bsi, false);\n   if (bsi_end_p (*bsi))\n     *bsi = bsi_last (bsi->bb);\n   else"}, {"sha": "7a463676da731340f8e2ad772c13a8eb8608b236", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -799,7 +799,7 @@ remove_dead_stmt (block_stmt_iterator *i, basic_block bb)\n       tree def = DEF_FROM_PTR (def_p);\n       mark_sym_for_renaming (SSA_NAME_VAR (def));\n     }\n-  bsi_remove (i);  \n+  bsi_remove (i, true);  \n   release_defs (t); \n }\n \f"}, {"sha": "9bfce5a359938d0bd91b2452f4aa6336ee6604cb", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -351,7 +351,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t      SET_USE (use_p, USE_FROM_PTR (var2));\n \t    }\n \t  /* Remove the dead store.  */\n-\t  bsi_remove (&bsi);\n+\t  bsi_remove (&bsi, true);\n \n \t  /* And release any SSA_NAMEs set in this statement back to the\n \t     SSA_NAME manager.  */"}, {"sha": "979f2b44c4add9397c45acafa8c00e962e22b430", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -433,7 +433,7 @@ forward_propagate_into_cond (tree cond_expr)\n \t{\n \t  tree def = SSA_NAME_DEF_STMT (test_var);\n \t  block_stmt_iterator bsi = bsi_for_stmt (def);\n-\t  bsi_remove (&bsi);\n+\t  bsi_remove (&bsi, true);\n \t}\n     }\n }\n@@ -827,7 +827,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t      if (TREE_CODE (rhs) == ADDR_EXPR)\n \t\t{\n \t\t  if (forward_propagate_addr_expr (stmt))\n-\t\t    bsi_remove (&bsi);\n+\t\t    bsi_remove (&bsi, true);\n \t\t  else\n \t\t    bsi_next (&bsi);\n \t\t}"}, {"sha": "ab73671af1174d10b1495b631823c0181ca7ffd6", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -759,7 +759,7 @@ move_computations_stmt (struct dom_walk_data *dw_data ATTRIBUTE_UNUSED,\n \t\t   cost, level->num);\n \t}\n       bsi_insert_on_edge (loop_preheader_edge (level), stmt);\n-      bsi_remove (&bsi);\n+      bsi_remove (&bsi, false);\n     }\n }\n "}, {"sha": "1e6d17ed6a0d98d4fb678d577420c08b477fdd11", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -5326,7 +5326,7 @@ remove_statement (tree stmt, bool including_defined_name)\n     {\n       block_stmt_iterator bsi = bsi_for_stmt (stmt);\n \n-      bsi_remove (&bsi);\n+      bsi_remove (&bsi, true);\n     }\n }\n "}, {"sha": "2b772db6873653476777b400ed56cab7a974e983", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -351,7 +351,7 @@ replace_phi_edge_with_variable (basic_block cond_block,\n \n   /* Eliminate the COND_EXPR at the end of COND_BLOCK.  */\n   bsi = bsi_last (cond_block);\n-  bsi_remove (&bsi);\n+  bsi_remove (&bsi, true);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file,"}, {"sha": "bf3e5249b77bbe354940b0dad0a68a42bedcf079", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -3407,7 +3407,7 @@ remove_dead_inserted_code (void)\n \t  else\n \t    {\n \t      bsi = bsi_for_stmt (t);\n-\t      bsi_remove (&bsi);\n+\t      bsi_remove (&bsi, true);\n \t      release_defs (t);\n \t    }\n \t}"}, {"sha": "8c21ac2aa16c6c818477b6d1799b0795095d9e90", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -180,7 +180,7 @@ remove_ctrl_stmt_and_useless_edges (basic_block bb, basic_block dest_bb)\n       && (TREE_CODE (bsi_stmt (bsi)) == COND_EXPR\n \t  || TREE_CODE (bsi_stmt (bsi)) == GOTO_EXPR\n \t  || TREE_CODE (bsi_stmt (bsi)) == SWITCH_EXPR))\n-    bsi_remove (&bsi);\n+    bsi_remove (&bsi, true);\n \n   for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n     {"}, {"sha": "1a3116effad6f4668528eeec02eedb034dcb9fd3", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -735,7 +735,7 @@ eliminate_tail_call (struct tailcall *t)\n       if (TREE_CODE (t) == RETURN_EXPR)\n \tbreak;\n \n-      bsi_remove (&bsi);\n+      bsi_remove (&bsi, true);\n       release_defs (t);\n     }\n \n@@ -825,7 +825,7 @@ eliminate_tail_call (struct tailcall *t)\n       SSA_NAME_DEF_STMT (rslt) = build_empty_stmt ();\n     }\n \n-  bsi_remove (&t->call_bsi);\n+  bsi_remove (&t->call_bsi, true);\n   release_defs (call);\n }\n "}, {"sha": "42090f7a20ef77fbfa57f2fb5e5eb4a6d9e87125", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -2944,7 +2944,7 @@ vect_transform_loop (loop_vec_info loop_vinfo,\n \t      stmt_ann_t ann = stmt_ann (stmt);\n \t      free (stmt_info);\n \t      set_stmt_info ((tree_ann_t)ann, NULL);\n-\t      bsi_remove (&si);\n+\t      bsi_remove (&si, true);\n \t      continue;\n \t    }\n "}, {"sha": "d4c6989fdc384032ba2a2981f9cf20ade31436d1", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -805,7 +805,7 @@ slpeel_make_loop_iterate_ntimes (struct loop *loop, tree niters)\n   bsi_insert_before (&loop_cond_bsi, cond_stmt, BSI_SAME_STMT);\n \n   /* Remove old loop exit test:  */\n-  bsi_remove (&loop_cond_bsi);\n+  bsi_remove (&loop_cond_bsi, true);\n \n   loop_loc = find_loop_location (loop);\n   if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "daa459f1f2bb4a6fe044b44e26602b7f328a6818", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736432eedbab9ede68c755437ae8228a95e89871/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=736432eedbab9ede68c755437ae8228a95e89871", "patch": "@@ -3026,7 +3026,7 @@ remove_range_assertions (void)\n \t      }\n \n \t    /* And finally, remove the copy, it is not needed.  */\n-\t    bsi_remove (&si);\n+\t    bsi_remove (&si, true);\n \t  }\n \telse\n \t  bsi_next (&si);"}]}