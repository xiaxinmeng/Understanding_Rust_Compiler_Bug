{"sha": "eceea3010ff9d19a48d650e5dccb7105d66adbd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlZWEzMDEwZmY5ZDE5YTQ4ZDY1MGU1ZGNjYjcxMDVkNjZhZGJkMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-25T11:24:27Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-25T11:24:27Z"}, "message": "Checkbox.java, [...]: New versions from classpath.\n\n2003-05-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/Checkbox.java,\n\tjava/awt/Dialog.java,\n\tjava/awt/Font.java,\n\tjava/awt/Frame.java,\n\tjava/awt/ScrollPaneAdjustable.java,\n\tjava/awt/Scrollbar.java,\n\tjava/awt/Window.java:\n\tNew versions from classpath.\n\nFrom-SVN: r67164", "tree": {"sha": "2e2b4385c6d0944dde3daf07a226888715d75aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e2b4385c6d0944dde3daf07a226888715d75aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eceea3010ff9d19a48d650e5dccb7105d66adbd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eceea3010ff9d19a48d650e5dccb7105d66adbd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eceea3010ff9d19a48d650e5dccb7105d66adbd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eceea3010ff9d19a48d650e5dccb7105d66adbd2/comments", "author": null, "committer": null, "parents": [{"sha": "ef8855d7a019355492cdd8989add15393b01ac86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8855d7a019355492cdd8989add15393b01ac86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8855d7a019355492cdd8989add15393b01ac86"}], "stats": {"total": 248, "additions": 232, "deletions": 16}, "files": [{"sha": "a44d88f62710f4a2423fd46263ed5bbf84363bd7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -1,3 +1,14 @@\n+2003-05-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/Checkbox.java,\n+\tjava/awt/Dialog.java,\n+\tjava/awt/Font.java,\n+\tjava/awt/Frame.java,\n+\tjava/awt/ScrollPaneAdjustable.java,\n+\tjava/awt/Scrollbar.java,\n+\tjava/awt/Window.java:\n+\tNew versions from classpath.\n+\n 2003-05-22\tJeff Sturm\t<jsturm@one-point.com>\n \n \tPR libgcj/10838:"}, {"sha": "9c7f994e39ce257034f46c9efb6b5471914cb416", "filename": "libjava/java/awt/Checkbox.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FCheckbox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FCheckbox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckbox.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -307,7 +307,11 @@ public class Checkbox extends Component implements ItemSelectable, Serializable\n   super.addNotify ();\n }\n \n-/*************************************************************************/\n+  public ItemListener[] getItemListeners ()\n+  {\n+    return (ItemListener[])\n+      AWTEventMulticaster.getListeners (item_listeners, ItemListener.class);\n+  }\n \n /**\n   * Adds a new listeners to the list of registered listeners for this object."}, {"sha": "5c64dc97a87e8d9a05afa1630063541f0d5c85fc", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -44,11 +44,11 @@\n import java.awt.peer.ComponentPeer;\n \n /**\n-  * A dialog box widget class.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Tom Tromey <tromey@redhat.com>\n-  */\n+ * A dialog box widget class.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@redhat.com>\n+ */\n public class Dialog extends Window\n {\n \n@@ -81,6 +81,11 @@ public class Dialog extends Window\n   */\n private String title;\n \n+  /**\n+   * This field indicates whether the dialog is undecorated or not.\n+   */\n+  private boolean undecorated = false;\n+\n /*************************************************************************/\n \n /*\n@@ -395,5 +400,30 @@ public class Dialog extends Window\n \t  \",resizable=\" + resizable + \",\" + super.paramString());\n }\n \n+  /**\n+   * Returns whether this frame is undecorated or not.\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isUndecorated ()\n+  {\n+    return undecorated;\n+  }\n+\n+  /**\n+   * Disables or enables decorations for this frame. This method can only be\n+   * called while the frame is not displayable.\n+   * \n+   * @exception IllegalComponentStateException If this frame is displayable.\n+   * \n+   * @since 1.4\n+   */\n+  public void setUndecorated (boolean undecorated)\n+  {\n+    if (isDisplayable ())\n+      throw new IllegalComponentStateException ();\n+\n+    this.undecorated = undecorated;\n+  }\n } // class Dialog\n "}, {"sha": "d1b2b463d7517d4a74383f0d8c734cbc7bcad9bd", "filename": "libjava/java/awt/Font.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FFont.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FFont.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFont.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -406,6 +406,8 @@ public class Font implements Serializable\n   * Returns a native peer object for this font.\n   *\n   * @return A native peer object for this font.\n+  *\n+  * @deprecated\n   */\n public FontPeer\n getPeer()"}, {"sha": "5aab5ef49a99ec737944f01c4937d6ced702cabb", "filename": "libjava/java/awt/Frame.java", "status": "modified", "additions": 91, "deletions": 8, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFrame.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -201,6 +201,16 @@ public class Frame extends Window implements MenuContainer\n   */\n private String title = \"\";\n \n+  /**\n+   * Maximized bounds for this frame.\n+   */\n+  private Rectangle maximizedBounds;\n+\n+  /**\n+   * This field indicates whether the frame is undecorated or not.\n+   */\n+  private boolean undecorated = false;\n+\n /*************************************************************************/\n \n /*\n@@ -456,14 +466,6 @@ public class Frame extends Window implements MenuContainer\n   return(getClass().getName());\n }\n \n-public int\n-getState()\n-{\n-  /* FIXME: State might have changed in the peer... Must check. */\n-    \n-  return state;\n-}\n-\n public static Frame[]\n getFrames()\n {\n@@ -475,5 +477,86 @@ public class Frame extends Window implements MenuContainer\n   throw new UnsupportedOperationException(msg);\n }\n \n+  public void setState (int state)\n+  {\n+    int current_state = getExtendedState ();\n+\n+    if (state == NORMAL\n+        && (current_state & ICONIFIED) != 0)\n+      setExtendedState (current_state | ICONIFIED);\n+    \n+    if (state == ICONIFIED\n+        && (current_state & ~ICONIFIED) == 0)\n+      setExtendedState (current_state & ~ICONIFIED);\n+  }\n+\n+  public int getState ()\n+  {\n+    /* FIXME: State might have changed in the peer... Must check. */\n+  \n+    return (state & ICONIFIED) != 0 ? ICONIFIED : NORMAL;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setExtendedState (int state)\n+  {\n+    this.state = state;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getExtendedState ()\n+  {\n+    return state;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setMaximizedBounds (Rectangle maximizedBounds)\n+  {\n+    throw new Error (\"not implemented\");\n+  }\n+\n+  /**\n+   * Returns the maximized bounds of this frame.\n+   *\n+   * @return the maximized rectangle, may be null.\n+   *\n+   * @since 1.4\n+   */\n+  public Rectangle getMaximizedBounds ()\n+  {\n+    return maximizedBounds;\n+  }\n+\n+  /**\n+   * Returns whether this frame is undecorated or not.\n+   * \n+   * @since 1.4\n+   */\n+  public boolean isUndecorated ()\n+  {\n+    return undecorated;\n+  }\n+\n+  /**\n+   * Disables or enables decorations for this frame. This method can only be\n+   * called while the frame is not displayable.\n+   * \n+   * @exception IllegalComponentStateException If this frame is displayable.\n+   * \n+   * @since 1.4\n+   */\n+  public void setUndecorated (boolean undecorated)\n+  {\n+    if (!isDisplayable ())\n+      throw new IllegalComponentStateException ();\n+\n+    this.undecorated = undecorated;\n+  }\n } // class Frame \n "}, {"sha": "700d060a0aef00ee30cc361677d039467933e211", "filename": "libjava/java/awt/ScrollPaneAdjustable.java", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FScrollPaneAdjustable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FScrollPaneAdjustable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPaneAdjustable.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -63,6 +63,8 @@\n   int blockIncrement = 1;\n   AdjustmentListener adjustmentListener;\n \n+  private transient boolean valueIsAdjusting = false;\n+\n   ScrollPaneAdjustable (ScrollPane sp, int orientation)\n   {\n     this.sp = sp;\n@@ -175,5 +177,24 @@ public String paramString ()\n     throw new Error (\"not implemented\");\n   }\n \n+  /**\n+   * Returns true if the value is in the process of changing.\n+   *\n+   * @since 1.4\n+   */\n+  public boolean getValueIsAdjusting ()\n+  {\n+    return valueIsAdjusting;\n+  }\n+\n+  /**\n+   * Sets the value of valueIsAdjusting.\n+   *\n+   * @since 1.4\n+   */\n+  public void setValueIsAdjusting (boolean valueIsAdjusting)\n+  {\n+    this.valueIsAdjusting = valueIsAdjusting;\n+  }\n } // class ScrollPaneAdjustable\n "}, {"sha": "e8d408e5d262ccc1153006f5f7bcbf1a14f91ccc", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -119,6 +119,8 @@ public class Scrollbar extends Component implements Accessible,\n // List of AdjustmentListener's.\n private AdjustmentListener adjustment_listeners;\n \n+private transient boolean valueIsAdjusting = false;\n+\n /*************************************************************************/\n \n /*\n@@ -725,5 +727,25 @@ public AdjustmentListener[] getAdjustmentListeners ()\n   {\n     return (AdjustmentListener[]) getListeners (AdjustmentListener.class);\n   }\n+\n+  /**\n+   * Returns true if the value is in the process of changing.\n+   *\n+   * @since 1.4\n+   */\n+  public boolean getValueIsAdjusting ()\n+  {\n+    return valueIsAdjusting;\n+  }\n+\n+  /**\n+   * Sets the value of valueIsAdjusting.\n+   *\n+   * @since 1.4\n+   */\n+  public void setValueIsAdjusting (boolean valueIsAdjusting)\n+  {\n+    this.valueIsAdjusting = valueIsAdjusting;\n+  }\n } // class Scrollbar \n "}, {"sha": "fcb9c1aefdb834202cd8e324dd5cf75fed754ab5", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eceea3010ff9d19a48d650e5dccb7105d66adbd2/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=eceea3010ff9d19a48d650e5dccb7105d66adbd2", "patch": "@@ -57,10 +57,14 @@\n public class Window extends Container\n {\n   // Serialized fields, from Sun's serialization spec.\n-  // private FocusManager focusMgr;  // FIXME: what is this?  \n   private String warningString = null;\n-  private int state = 0;\n   private int windowSerializedDataVersion = 0; // FIXME\n+  /** @since 1.2 */\n+  // private FocusManager focusMgr;  // FIXME: what is this?  \n+  /** @since 1.2 */\n+  private int state = 0;\n+  /** @since 1.4 */\n+  private boolean focusableWindowState = true;\n \n   private transient WindowListener windowListener;\n   private transient WindowFocusListener windowFocusListener;\n@@ -645,4 +649,43 @@ protected void processWindowStateEvent(WindowEvent event)\n         && event.getID () == WindowEvent.WINDOW_STATE_CHANGED)\n       windowStateListener.windowStateChanged (event);\n   }\n+\n+  /**\n+   * Returns whether this <code>Window</code> can get the focus or not.\n+   *\n+   * @since 1.4\n+   */\n+  public boolean isFocusableWindow ()\n+  {\n+    if (getFocusableWindowState () == false)\n+      return false;\n+\n+    if (this instanceof Dialog\n+        || this instanceof Frame)\n+      return true;\n+\n+    // FIXME: Implement more possible cases for returning true.\n+\n+    return false;\n+  }\n+  \n+  /**\n+   * Returns the value of the focusableWindowState property.\n+   * \n+   * @since 1.4\n+   */\n+  public boolean getFocusableWindowState ()\n+  {\n+    return focusableWindowState;\n+  }\n+\n+  /**\n+   * Sets the value of the focusableWindowState property.\n+   * \n+   * @since 1.4\n+   */\n+  public void setFocusableWindowState (boolean focusableWindowState)\n+  {\n+    this.focusableWindowState = focusableWindowState;\n+  }\n }"}]}