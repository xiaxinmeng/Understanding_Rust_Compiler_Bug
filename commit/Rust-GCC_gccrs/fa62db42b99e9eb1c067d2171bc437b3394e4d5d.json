{"sha": "fa62db42b99e9eb1c067d2171bc437b3394e4d5d", "node_id": "C_kwDOANBUbNoAKGZhNjJkYjQyYjk5ZTllYjFjMDY3ZDIxNzFiYzQzN2IzMzk0ZTRkNWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-03T14:01:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-04T09:15:36Z"}, "message": "VN/PRE TLC\n\nThis removes an always true parameter of vn_nary_op_insert_into and moves\nvalueization to the two callers of vn_nary_op_compute_hash instead of doing it\ntherein where this function name does not suggest such thing.\nAlso remove extra valueization from PRE phi-translation.\n\n2021-11-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_nary_op_insert_into): Remove always\n\ttrue parameter and inline valueization.\n\t(vn_nary_op_lookup_1): Inline valueization from ...\n\t(vn_nary_op_compute_hash): ... here and remove it here.\n\t* tree-ssa-pre.c (phi_translate_1): Do not valueize\n\tbefore vn_nary_lookup_pieces.\n\t(get_representative_for): Mark created SSA representatives\n\tas visited.", "tree": {"sha": "9238392768cfb1737bd6c68c086396043a42d3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9238392768cfb1737bd6c68c086396043a42d3cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa62db42b99e9eb1c067d2171bc437b3394e4d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa62db42b99e9eb1c067d2171bc437b3394e4d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa62db42b99e9eb1c067d2171bc437b3394e4d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa62db42b99e9eb1c067d2171bc437b3394e4d5d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75e56f46d45cfb2fc9bc80ffc627ccfb41ffca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75e56f46d45cfb2fc9bc80ffc627ccfb41ffca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75e56f46d45cfb2fc9bc80ffc627ccfb41ffca6"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "0669aaaac473c16084740029a0dd56391f485e88", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa62db42b99e9eb1c067d2171bc437b3394e4d5d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa62db42b99e9eb1c067d2171bc437b3394e4d5d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=fa62db42b99e9eb1c067d2171bc437b3394e4d5d", "patch": "@@ -1391,6 +1391,7 @@ get_representative_for (const pre_expr e, basic_block b = NULL)\n   vn_ssa_aux_t vn_info = VN_INFO (name);\n   vn_info->value_id = value_id;\n   vn_info->valnum = valnum ? valnum : name;\n+  vn_info->visited = true;\n   /* ???  For now mark this SSA name for release by VN.  */\n   vn_info->needs_insertion = true;\n   add_to_value (value_id, get_or_alloc_expr_for_name (name));\n@@ -1508,10 +1509,6 @@ phi_translate_1 (bitmap_set_t dest,\n \t\t  return constant;\n \t      }\n \n-\t    /* vn_nary_* do not valueize operands.  */\n-\t    for (i = 0; i < newnary->length; ++i)\n-\t      if (TREE_CODE (newnary->op[i]) == SSA_NAME)\n-\t\tnewnary->op[i] = VN_INFO (newnary->op[i])->valnum;\n \t    tree result = vn_nary_op_lookup_pieces (newnary->length,\n \t\t\t\t\t\t    newnary->opcode,\n \t\t\t\t\t\t    newnary->type,"}, {"sha": "7be5d4e406f9769cf645cffbec53fc67b6f7d26f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa62db42b99e9eb1c067d2171bc437b3394e4d5d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa62db42b99e9eb1c067d2171bc437b3394e4d5d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=fa62db42b99e9eb1c067d2171bc437b3394e4d5d", "patch": "@@ -427,7 +427,7 @@ static vn_nary_op_t vn_nary_op_insert_stmt (gimple *, tree);\n static unsigned int vn_nary_length_from_stmt (gimple *);\n static vn_nary_op_t alloc_vn_nary_op_noinit (unsigned int, obstack *);\n static vn_nary_op_t vn_nary_op_insert_into (vn_nary_op_t,\n-\t\t\t\t\t    vn_nary_op_table_type *, bool);\n+\t\t\t\t\t    vn_nary_op_table_type *);\n static void init_vn_nary_op_from_stmt (vn_nary_op_t, gassign *);\n static void init_vn_nary_op_from_pieces (vn_nary_op_t, unsigned int,\n \t\t\t\t\t enum tree_code, tree, tree *);\n@@ -490,7 +490,7 @@ VN_INFO (tree name)\n \t\t\t\t\t boolean_type_node, ops);\n \t    nary->predicated_values = 0;\n \t    nary->u.result = boolean_true_node;\n-\t    vn_nary_op_insert_into (nary, valid_info->nary, true);\n+\t    vn_nary_op_insert_into (nary, valid_info->nary);\n \t    gcc_assert (nary->unwind_to == NULL);\n \t    /* Also do not link it into the undo chain.  */\n \t    last_inserted_nary = nary->next;\n@@ -500,7 +500,7 @@ VN_INFO (tree name)\n \t\t\t\t\t boolean_type_node, ops);\n \t    nary->predicated_values = 0;\n \t    nary->u.result = boolean_false_node;\n-\t    vn_nary_op_insert_into (nary, valid_info->nary, true);\n+\t    vn_nary_op_insert_into (nary, valid_info->nary);\n \t    gcc_assert (nary->unwind_to == NULL);\n \t    last_inserted_nary = nary->next;\n \t    nary->next = (vn_nary_op_t)(void *)-1;\n@@ -2440,7 +2440,7 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert,\n \t  vno1->predicated_values = 0;\n \t  vno1->u.result = result;\n \t  init_vn_nary_op_from_stmt (vno1, as_a <gassign *> (new_stmt));\n-\t  vn_nary_op_insert_into (vno1, valid_info->nary, true);\n+\t  vn_nary_op_insert_into (vno1, valid_info->nary);\n \t  /* Also do not link it into the undo chain.  */\n \t  last_inserted_nary = vno1->next;\n \t  vno1->next = (vn_nary_op_t)(void *)-1;\n@@ -3855,10 +3855,6 @@ vn_nary_op_compute_hash (const vn_nary_op_t vno1)\n   inchash::hash hstate;\n   unsigned i;\n \n-  for (i = 0; i < vno1->length; ++i)\n-    if (TREE_CODE (vno1->op[i]) == SSA_NAME)\n-      vno1->op[i] = SSA_VAL (vno1->op[i]);\n-\n   if (((vno1->length == 2\n \t&& commutative_tree_code (vno1->opcode))\n        || (vno1->length == 3\n@@ -4000,6 +3996,10 @@ vn_nary_op_lookup_1 (vn_nary_op_t vno, vn_nary_op_t *vnresult)\n   if (vnresult)\n     *vnresult = NULL;\n \n+  for (unsigned i = 0; i < vno->length; ++i)\n+    if (TREE_CODE (vno->op[i]) == SSA_NAME)\n+      vno->op[i] = SSA_VAL (vno->op[i]);\n+\n   vno->hashcode = vn_nary_op_compute_hash (vno);\n   slot = valid_info->nary->find_slot_with_hash (vno, vno->hashcode, NO_INSERT);\n   if (!slot)\n@@ -4064,23 +4064,22 @@ alloc_vn_nary_op (unsigned int length, tree result, unsigned int value_id)\n   return vno1;\n }\n \n-/* Insert VNO into TABLE.  If COMPUTE_HASH is true, then compute\n-   VNO->HASHCODE first.  */\n+/* Insert VNO into TABLE.  */\n \n static vn_nary_op_t\n-vn_nary_op_insert_into (vn_nary_op_t vno, vn_nary_op_table_type *table,\n-\t\t\tbool compute_hash)\n+vn_nary_op_insert_into (vn_nary_op_t vno, vn_nary_op_table_type *table)\n {\n   vn_nary_op_s **slot;\n \n-  if (compute_hash)\n-    {\n-      vno->hashcode = vn_nary_op_compute_hash (vno);\n-      gcc_assert (! vno->predicated_values\n-\t\t  || (! vno->u.values->next\n-\t\t      && vno->u.values->n == 1));\n-    }\n+  gcc_assert (! vno->predicated_values\n+\t      || (! vno->u.values->next\n+\t\t  && vno->u.values->n == 1));\n+\n+  for (unsigned i = 0; i < vno->length; ++i)\n+    if (TREE_CODE (vno->op[i]) == SSA_NAME)\n+      vno->op[i] = SSA_VAL (vno->op[i]);\n \n+  vno->hashcode = vn_nary_op_compute_hash (vno);\n   slot = table->find_slot_with_hash (vno, vno->hashcode, INSERT);\n   vno->unwind_to = *slot;\n   if (*slot)\n@@ -4211,7 +4210,7 @@ vn_nary_op_insert_pieces (unsigned int length, enum tree_code code,\n {\n   vn_nary_op_t vno1 = alloc_vn_nary_op (length, result, value_id);\n   init_vn_nary_op_from_pieces (vno1, length, code, type, ops);\n-  return vn_nary_op_insert_into (vno1, valid_info->nary, true);\n+  return vn_nary_op_insert_into (vno1, valid_info->nary);\n }\n \n static vn_nary_op_t\n@@ -4257,7 +4256,7 @@ vn_nary_op_insert_pieces_predicated (unsigned int length, enum tree_code code,\n   vno1->u.values->result = result;\n   vno1->u.values->n = 1;\n   vno1->u.values->valid_dominated_by_p[0] = pred_e->dest->index;\n-  return vn_nary_op_insert_into (vno1, valid_info->nary, true);\n+  return vn_nary_op_insert_into (vno1, valid_info->nary);\n }\n \n static bool\n@@ -4290,7 +4289,7 @@ vn_nary_op_insert_stmt (gimple *stmt, tree result)\n     = alloc_vn_nary_op (vn_nary_length_from_stmt (stmt),\n \t\t\tresult, VN_INFO (result)->value_id);\n   init_vn_nary_op_from_stmt (vno1, as_a <gassign *> (stmt));\n-  return vn_nary_op_insert_into (vno1, valid_info->nary, true);\n+  return vn_nary_op_insert_into (vno1, valid_info->nary);\n }\n \n /* Compute a hashcode for PHI operation VP1 and return it.  */"}]}