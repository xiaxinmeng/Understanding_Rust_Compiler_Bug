{"sha": "75776c6d256cf2db9cd470484445bff01c7e30fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3NzZjNmQyNTZjZjJkYjljZDQ3MDQ4NDQ0NWJmZjAxYzdlMzBmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-14T08:55:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-14T08:55:34Z"}, "message": "expmed.c (expand_shift_1): Canonicalize rotates by constant bitsize / 2 to bitsize - 1.\n\n\t* expmed.c (expand_shift_1): Canonicalize rotates by\n\tconstant bitsize / 2 to bitsize - 1.\n\t* simplify-rt.x (simplify_binary_operation_1) <case ROTATE,\n\tcase ROTATERT>: Likewise.\n\n\tRevert:\n\t2013-05-10  Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/i386/i386.md (rotateinv): New code attr.\n\t(*<rotate_insn><mode>3_1, *<rotate_insn>si3_1_zext,\n\t*<rotate_insn>qi3_1_slp): Emit rorl %eax instead of\n\troll $31, %eax, etc.\n\nFrom-SVN: r198864", "tree": {"sha": "cf62bd2045ab3fa40d75cb48379cb1295898c3a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf62bd2045ab3fa40d75cb48379cb1295898c3a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75776c6d256cf2db9cd470484445bff01c7e30fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75776c6d256cf2db9cd470484445bff01c7e30fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75776c6d256cf2db9cd470484445bff01c7e30fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75776c6d256cf2db9cd470484445bff01c7e30fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df35498ae56e297e0de7279127cab265e71fc2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df35498ae56e297e0de7279127cab265e71fc2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df35498ae56e297e0de7279127cab265e71fc2d2"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "a751b29d99fa42e43b47b90d9bc3c349a51f7c0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75776c6d256cf2db9cd470484445bff01c7e30fa", "patch": "@@ -1,3 +1,18 @@\n+2013-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* expmed.c (expand_shift_1): Canonicalize rotates by\n+\tconstant bitsize / 2 to bitsize - 1.\n+\t* simplify-rt.x (simplify_binary_operation_1) <case ROTATE,\n+\tcase ROTATERT>: Likewise.\n+\n+\tRevert:\n+\t2013-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (rotateinv): New code attr.\n+\t(*<rotate_insn><mode>3_1, *<rotate_insn>si3_1_zext,\n+\t*<rotate_insn>qi3_1_slp): Emit rorl %eax instead of\n+\troll $31, %eax, etc.\n+\n 2013-05-14  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57235"}, {"sha": "417d784aff2180772eb702de60ea9b91a56593b3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 37, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=75776c6d256cf2db9cd470484445bff01c7e30fa", "patch": "@@ -762,9 +762,6 @@\n ;; Base name for insn mnemonic.\n (define_code_attr rotate [(rotate \"rol\") (rotatert \"ror\")])\n \n-;; Base name for insn mnemonic of rotation in the other direction.\n-(define_code_attr rotateinv [(rotate \"ror\") (rotatert \"rol\")])\n-\n ;; Mapping of abs neg operators\n (define_code_iterator absneg [abs neg])\n \n@@ -9755,15 +9752,11 @@\n       return \"#\";\n \n     default:\n-      if (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n-\t{\n-\t  if (operands[2] == const1_rtx)\n-\t    return \"<rotate>{<imodesuffix>}\\t%0\";\n-\t  if (CONST_INT_P (operands[2])\n-\t      && INTVAL (operands[2]) == GET_MODE_BITSIZE (<MODE>mode) - 1)\n-\t    return \"<rotateinv>{<imodesuffix>}\\t%0\";\n-\t}\n-      return \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"<rotate>{<imodesuffix>}\\t%0\";\n+      else\n+\treturn \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n     }\n }\n   [(set_attr \"isa\" \"*,bmi2\")\n@@ -9825,14 +9818,11 @@\n       return \"#\";\n \n     default:\n-      if (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n-\t{\n-\t  if (operands[2] == const1_rtx)\n-\t    return \"<rotate>{l}\\t%k0\";\n-\t  if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) == 31)\n-\t    return \"<rotateinv>{l}\\t%k0\";\n-\t}\n-      return \"<rotate>{l}\\t{%2, %k0|%k0, %2}\";\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"<rotate>{l}\\t%k0\";\n+      else\n+\treturn \"<rotate>{l}\\t{%2, %k0|%k0, %2}\";\n     }\n }\n   [(set_attr \"isa\" \"*,bmi2\")\n@@ -9879,15 +9869,11 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  if (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n-    {\n-      if (operands[2] == const1_rtx)\n-\treturn \"<rotate>{<imodesuffix>}\\t%0\";\n-      if (CONST_INT_P (operands[2])\n-\t  && INTVAL (operands[2]) == GET_MODE_BITSIZE (<MODE>mode) - 1)\n-\treturn \"<rotateinv>{<imodesuffix>}\\t%0\";\n-    }\n-  return \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+  if (operands[2] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+    return \"<rotate>{<imodesuffix>}\\t%0\";\n+  else\n+    return \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length_immediate\")\n@@ -9909,14 +9895,11 @@\n     || (operands[1] == const1_rtx\n \t&& TARGET_SHIFT1))\"\n {\n-  if (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n-    {\n-      if (operands[2] == const1_rtx)\n-\treturn \"<rotate>{b}\\t%0\";\n-      if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) == 7)\n-\treturn \"<rotateinv>{b}\\t%0\";\n-    }\n-  return \"<rotate>{b}\\t{%1, %0|%0, %1}\";\n+  if (operands[1] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+    return \"<rotate>{b}\\t%0\";\n+  else\n+    return \"<rotate>{b}\\t{%1, %0|%0, %1}\";\n }\n   [(set_attr \"type\" \"rotate1\")\n    (set (attr \"length_immediate\")"}, {"sha": "c85e68cf617a1dce88c7477f3b67a75088650b6a", "filename": "gcc/expmed.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=75776c6d256cf2db9cd470484445bff01c7e30fa", "patch": "@@ -2122,6 +2122,20 @@ expand_shift_1 (enum tree_code code, enum machine_mode mode, rtx shifted,\n \top1 = SUBREG_REG (op1);\n     }\n \n+  /* Canonicalize rotates by constant amount.  If op1 is bitsize / 2,\n+     prefer left rotation, if op1 is from bitsize / 2 + 1 to\n+     bitsize - 1, use other direction of rotate with 1 .. bitsize / 2 - 1\n+     amount instead.  */\n+  if (rotate\n+      && CONST_INT_P (op1)\n+      && IN_RANGE (INTVAL (op1), GET_MODE_BITSIZE (mode) / 2 + left,\n+\t\t   GET_MODE_BITSIZE (mode) - 1))\n+    {\n+      op1 = GEN_INT (GET_MODE_BITSIZE (mode) - INTVAL (op1));\n+      left = !left;\n+      code = left ? LROTATE_EXPR : RROTATE_EXPR;\n+    }\n+\n   if (op1 == const0_rtx)\n     return shifted;\n "}, {"sha": "865d37d49c31a572eb9bf6f6c74821a1fca8875f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75776c6d256cf2db9cd470484445bff01c7e30fa/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=75776c6d256cf2db9cd470484445bff01c7e30fa", "patch": "@@ -3250,6 +3250,18 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n     case ROTATERT:\n     case ROTATE:\n+      /* Canonicalize rotates by constant amount.  If op1 is bitsize / 2,\n+\t prefer left rotation, if op1 is from bitsize / 2 + 1 to\n+\t bitsize - 1, use other direction of rotate with 1 .. bitsize / 2 - 1\n+\t amount instead.  */\n+      if (CONST_INT_P (trueop1)\n+\t  && IN_RANGE (INTVAL (trueop1),\n+\t\t       GET_MODE_BITSIZE (mode) / 2 + (code == ROTATE),\n+\t\t       GET_MODE_BITSIZE (mode) - 1))\n+\treturn simplify_gen_binary (code == ROTATE ? ROTATERT : ROTATE,\n+\t\t\t\t    mode, op0, GEN_INT (GET_MODE_BITSIZE (mode)\n+\t\t\t\t\t\t\t- INTVAL (trueop1)));\n+      /* FALLTHRU */\n     case ASHIFTRT:\n       if (trueop1 == CONST0_RTX (mode))\n \treturn op0;"}]}