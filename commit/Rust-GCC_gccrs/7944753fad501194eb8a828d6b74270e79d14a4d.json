{"sha": "7944753fad501194eb8a828d6b74270e79d14a4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0NDc1M2ZhZDUwMTE5NGViOGE4MjhkNmI3NDI3MGU3OWQxNGE0ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-21T18:37:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-21T18:41:35Z"}, "message": "c++: Fix null this pointer [PR 98624]\n\nOne may not use a null this pointer to invoke a static member\nfunction.  This fixes the remaining ubsan errors found with an\nubsan bootstrap.\n\n\tPR c++/98624\n\tgcc/cp/\n\t* module.cc (depset::hash::find_dependencies): Add\n\tmodule arg.\n\t(trees_out::core_vals): Check state before calling\n\twrite_location.\n\t(sort_cluster, module_state::write): Adjust\n\tfind_dependencies call.", "tree": {"sha": "9647dba777aff2103672565f22337af0ff37d769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9647dba777aff2103672565f22337af0ff37d769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7944753fad501194eb8a828d6b74270e79d14a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7944753fad501194eb8a828d6b74270e79d14a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7944753fad501194eb8a828d6b74270e79d14a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7944753fad501194eb8a828d6b74270e79d14a4d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb7aa205afebe178c06683037ccd4c41104337a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb7aa205afebe178c06683037ccd4c41104337a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb7aa205afebe178c06683037ccd4c41104337a"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "18f5de8724b5d92b277e6630f5d2bb3faa156a97", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7944753fad501194eb8a828d6b74270e79d14a4d/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7944753fad501194eb8a828d6b74270e79d14a4d/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=7944753fad501194eb8a828d6b74270e79d14a4d", "patch": "@@ -2564,7 +2564,7 @@ class depset {\n     void add_class_entities (vec<tree, va_gc> *);\n \n   public:    \n-    void find_dependencies ();\n+    void find_dependencies (module_state *);\n     bool finalize_dependencies ();\n     vec<depset *> connect ();\n   };\n@@ -5895,7 +5895,8 @@ trees_out::core_vals (tree t)\n       if (!DECL_TEMPLATE_PARM_P (t))\n \tWT (t->decl_minimal.context);\n \n-      state->write_location (*this, t->decl_minimal.locus);\n+      if (state)\n+\tstate->write_location (*this, t->decl_minimal.locus);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n@@ -5998,7 +5999,8 @@ trees_out::core_vals (tree t)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n     {\n-      state->write_location (*this, t->exp.locus);\n+      if (state)\n+\tstate->write_location (*this, t->exp.locus);\n \n       /* Walk in forward order, as (for instance) REQUIRES_EXPR has a\n          bunch of unscoped parms on its first operand.  It's safer to\n@@ -6137,9 +6139,12 @@ trees_out::core_vals (tree t)\n \n       /* Miscellaneous common nodes.  */\n     case BLOCK:\n-      state->write_location (*this, t->block.locus);\n-      state->write_location (*this, t->block.end_locus);\n-      \n+      if (state)\n+\t{\n+\t  state->write_location (*this, t->block.locus);\n+\t  state->write_location (*this, t->block.end_locus);\n+\t}\n+\n       /* DECL_LOCAL_DECL_P decls are first encountered here and\n          streamed by value.  */\n       chained_decls (t->block.vars);\n@@ -6180,7 +6185,8 @@ trees_out::core_vals (tree t)\n \t/* The ompcode is serialized in start.  */\n \tif (streaming_p ())\n \t  WU (t->omp_clause.subcode.map_kind);\n-\tstate->write_location (*this, t->omp_clause.locus);\n+\tif (state)\n+\t  state->write_location (*this, t->omp_clause.locus);\n \n \tunsigned len = omp_clause_num_ops[OMP_CLAUSE_CODE (t)];\n \tfor (unsigned ix = 0; ix != len; ix++)\n@@ -6267,8 +6273,9 @@ trees_out::core_vals (tree t)\n       WT (((lang_tree_node *)t)->lambda_expression.extra_scope);\n       /* pending_proxies is a parse-time thing.  */\n       gcc_assert (!((lang_tree_node *)t)->lambda_expression.pending_proxies);\n-      state->write_location\n-\t(*this, ((lang_tree_node *)t)->lambda_expression.locus);\n+      if (state)\n+\tstate->write_location\n+\t  (*this, ((lang_tree_node *)t)->lambda_expression.locus);\n       if (streaming_p ())\n \t{\n \t  WU (((lang_tree_node *)t)->lambda_expression.default_capture_mode);\n@@ -6288,8 +6295,9 @@ trees_out::core_vals (tree t)\n     case STATIC_ASSERT:\n       WT (((lang_tree_node *)t)->static_assertion.condition);\n       WT (((lang_tree_node *)t)->static_assertion.message);\n-      state->write_location\n-\t(*this, ((lang_tree_node *)t)->static_assertion.location);\n+      if (state)\n+\tstate->write_location\n+\t  (*this, ((lang_tree_node *)t)->static_assertion.location);\n       break;\n \n     case TEMPLATE_DECL:\n@@ -6321,7 +6329,8 @@ trees_out::core_vals (tree t)\n \t\tWT (m.binfo);\n \t\tWT (m.decl);\n \t\tWT (m.diag_decl);\n-\t\tstate->write_location (*this, m.loc);\n+\t\tif (state)\n+\t\t  state->write_location (*this, m.loc);\n \t      }\n \t  }\n       }\n@@ -13156,9 +13165,9 @@ depset::hash::add_mergeable (depset *mergeable)\n    entries on the same binding that need walking.  */\n \n void\n-depset::hash::find_dependencies ()\n+depset::hash::find_dependencies (module_state *module)\n {\n-  trees_out walker (NULL, NULL, *this);\n+  trees_out walker (NULL, module, *this);\n   vec<depset *> unreached;\n   unreached.create (worklist.length ());\n \n@@ -13544,7 +13553,7 @@ sort_cluster (depset::hash *original, depset *scc[], unsigned size)\n   gcc_checking_assert (use_lwm <= bind_lwm);\n   dump (dumper::MERGE) && dump (\"Ordering %u/%u depsets\", use_lwm, size);\n \n-  table.find_dependencies ();\n+  table.find_dependencies (nullptr);\n \n   vec<depset *> order = table.connect ();\n   gcc_checking_assert (order.length () == use_lwm);\n@@ -17568,7 +17577,7 @@ module_state::write (elf_out *to, cpp_reader *reader)\n     }\n \n   /* Now join everything up.  */\n-  table.find_dependencies ();\n+  table.find_dependencies (this);\n \n   if (!table.finalize_dependencies ())\n     {"}]}