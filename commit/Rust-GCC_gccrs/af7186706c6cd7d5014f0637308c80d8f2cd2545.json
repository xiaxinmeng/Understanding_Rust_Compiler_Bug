{"sha": "af7186706c6cd7d5014f0637308c80d8f2cd2545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3MTg2NzA2YzZjZDdkNTAxNGYwNjM3MzA4YzgwZDhmMmNkMjU0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-07-26T09:17:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-07-26T09:17:03Z"}, "message": "decl.c (poplevel): Use Use DECL_SOURCE_LOCATION and \"%qD\" in warning_at instead of \"%q+D\" in warning.\n\n2015-07-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (poplevel): Use Use DECL_SOURCE_LOCATION and \"%qD\"\n\tin warning_at instead of \"%q+D\" in warning.\n\t(warn_extern_redeclared_static): Likewise for inform.\n\t(check_redeclaration_no_default_args): Likewise for permerror.\n\t(duplicate_decls): Likewise.\n\t(check_previous_goto_1): Likewise for inform.\n\t(check_goto, start_decl, check_for_uninitialized_const_var,\n\tstart_preparsed_function, finish_function\u00a7): Likewise.\n\t* decl2.c (build_anon_union_vars, c_parse_final_cleanups): Likewise.\n\t* init.c (sort_mem_initializers): Likewise.\n\t* typeck.c (convert_for_initialization): Likewise for inform.\n\t(maybe_warn_about_returning_address_of_local): Likewise.\n\t* typeck2.c (abstract_virtuals_error_sfinae): Likewise for inform.\n\t(cxx_incomplete_type_diagnostic): Likewise for emit_diagnostic.\n\nFrom-SVN: r226234", "tree": {"sha": "b7ab001b0c5bd31c765363f46e1f620d51806fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ab001b0c5bd31c765363f46e1f620d51806fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af7186706c6cd7d5014f0637308c80d8f2cd2545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7186706c6cd7d5014f0637308c80d8f2cd2545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7186706c6cd7d5014f0637308c80d8f2cd2545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7186706c6cd7d5014f0637308c80d8f2cd2545/comments", "author": null, "committer": null, "parents": [{"sha": "6e07a52e7795822f4953aa6b5016ad17e5df34b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e07a52e7795822f4953aa6b5016ad17e5df34b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e07a52e7795822f4953aa6b5016ad17e5df34b7"}], "stats": {"total": 149, "additions": 96, "deletions": 53}, "files": [{"sha": "94955195c4ac1263477b07034efba3b69d9f6cce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af7186706c6cd7d5014f0637308c80d8f2cd2545", "patch": "@@ -1,3 +1,20 @@\n+2015-07-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (poplevel): Use Use DECL_SOURCE_LOCATION and \"%qD\"\n+\tin warning_at instead of \"%q+D\" in warning.\n+\t(warn_extern_redeclared_static): Likewise for inform.\n+\t(check_redeclaration_no_default_args): Likewise for permerror.\n+\t(duplicate_decls): Likewise.\n+\t(check_previous_goto_1): Likewise for inform.\n+\t(check_goto, start_decl, check_for_uninitialized_const_var,\n+\tstart_preparsed_function, finish_function\u00a7): Likewise.\n+\t* decl2.c (build_anon_union_vars, c_parse_final_cleanups): Likewise.\n+\t* init.c (sort_mem_initializers): Likewise.\n+\t* typeck.c (convert_for_initialization): Likewise for inform.\n+\t(maybe_warn_about_returning_address_of_local): Likewise.\n+\t* typeck2.c (abstract_virtuals_error_sfinae): Likewise for inform.\n+\t(cxx_incomplete_type_diagnostic): Likewise for emit_diagnostic.\n+\n 2015-07-25  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/66857"}, {"sha": "b7fe8ef1e7b18ebfc6c4e1a80dc9c8743c10b254", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 51, "deletions": 35, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=af7186706c6cd7d5014f0637308c80d8f2cd2545", "patch": "@@ -640,14 +640,16 @@ poplevel (int keep, int reverse, int functionbody)\n \t\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (decl)))))\n \t  {\n \t    if (! TREE_USED (decl))\n-\t      warning (OPT_Wunused_variable, \"unused variable %q+D\", decl);\n+\t      warning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t  OPT_Wunused_variable, \"unused variable %qD\", decl);\n \t    else if (DECL_CONTEXT (decl) == current_function_decl\n \t\t     // For -Wunused-but-set-variable leave references alone.\n \t\t     && TREE_CODE (TREE_TYPE (decl)) != REFERENCE_TYPE\n \t\t     && errorcount == unused_but_set_errorcount)\n \t      {\n-\t\twarning (OPT_Wunused_but_set_variable,\n-\t\t\t \"variable %q+D set but not used\", decl);\n+\t\twarning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t    OPT_Wunused_but_set_variable,\n+\t\t\t    \"variable %qD set but not used\", decl);\n \t\tunused_but_set_errorcount = errorcount;\n \t      }\n \t  }\n@@ -1157,7 +1159,8 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n \n   if (permerror (DECL_SOURCE_LOCATION (newdecl),\n \t\t \"%qD was declared %<extern%> and later %<static%>\", newdecl))\n-    inform (input_location, \"previous declaration of %q+D\", olddecl);\n+    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t    \"previous declaration of %qD\", olddecl);\n }\n \n /* NEW_DECL is a redeclaration of OLD_DECL; both are functions or\n@@ -1254,8 +1257,8 @@ check_redeclaration_no_default_args (tree decl)\n        t && t != void_list_node; t = TREE_CHAIN (t))\n     if (TREE_PURPOSE (t))\n       {\n-\tpermerror (input_location,\n-\t\t   \"redeclaration of %q+#D may not have default \"\n+\tpermerror (DECL_SOURCE_LOCATION (decl),\n+\t\t   \"redeclaration of %q#D may not have default \"\n \t\t   \"arguments\", decl);\n \treturn;\n       }\n@@ -1328,8 +1331,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t       && DECL_UNINLINABLE (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  if (warning (OPT_Wattributes, \"function %q+D redeclared as inline\",\n-\t\t       newdecl))\n+\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t  OPT_Wattributes, \"function %qD redeclared as inline\",\n+\t\t\t  newdecl))\n \t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    \"previous declaration of %qD with attribute noinline\",\n \t\t    olddecl);\n@@ -1338,8 +1342,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t       && DECL_UNINLINABLE (newdecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  if (warning (OPT_Wattributes, \"function %q+D redeclared with \"\n-\t\t       \"attribute noinline\", newdecl))\n+\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t  OPT_Wattributes, \"function %qD redeclared with \"\n+\t\t\t  \"attribute noinline\", newdecl))\n \t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    \"previous declaration of %qD was inline\",\n \t\t    olddecl);\n@@ -1436,8 +1441,9 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      /* A near match; override the builtin.  */\n \n \t      if (TREE_PUBLIC (newdecl))\n-\t\twarning (0, \"new declaration %q+#D ambiguates built-in \"\n-\t\t\t \"declaration %q#D\", newdecl, olddecl);\n+\t\twarning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t\t\t    \"new declaration %q#D ambiguates built-in \"\n+\t\t\t    \"declaration %q#D\", newdecl, olddecl);\n \t      else\n \t\twarning (OPT_Wshadow, \n                          DECL_BUILT_IN (olddecl)\n@@ -1665,10 +1671,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  error_at (DECL_SOURCE_LOCATION (newdecl), errmsg, newdecl);\n \t  if (DECL_NAME (olddecl) != NULL_TREE)\n-\t    inform (input_location,\n+\t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    (DECL_INITIAL (olddecl) && namespace_bindings_p ())\n-\t\t    ? G_(\"%q+#D previously defined here\")\n-\t\t    : G_(\"%q+#D previously declared here\"), olddecl);\n+\t\t    ? G_(\"%q#D previously defined here\")\n+\t\t    : G_(\"%q#D previously declared here\"), olddecl);\n \t  return error_mark_node;\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n@@ -1678,7 +1684,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n \t  if (warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n-\t\t\t  \"prototype specified for %q+#D\", newdecl))\n+\t\t\t  \"prototype specified for %q#D\", newdecl))\n \t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    \"previous non-prototype definition here\");\n \t}\n@@ -1831,9 +1837,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  && (! DECL_TEMPLATE_SPECIALIZATION (newdecl)\n \t      || DECL_TEMPLATE_SPECIALIZATION (olddecl)))\n \t{\n-\t  if (warning (OPT_Wredundant_decls,\n-\t\t       \"redundant redeclaration of %q+D in same scope\",\n-\t\t       newdecl))\n+\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t  OPT_Wredundant_decls,\n+\t\t\t  \"redundant redeclaration of %qD in same scope\",\n+\t\t\t  newdecl))\n \t    inform (DECL_SOURCE_LOCATION (olddecl),\n \t\t    \"previous declaration of %qD\", olddecl);\n \t}\n@@ -2946,10 +2953,11 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t  if (complained)\n \t    {\n \t      if (problem > 1)\n-\t\tinform (input_location,\n-\t\t\t\"  crosses initialization of %q+#D\", new_decls);\n+\t\tinform (DECL_SOURCE_LOCATION (new_decls),\n+\t\t\t\"  crosses initialization of %q#D\", new_decls);\n \t      else\n-\t\tinform (input_location, \"  enters scope of %q+#D which has \"\n+\t\tinform (DECL_SOURCE_LOCATION (new_decls),\n+\t\t\t\"  enters scope of %q#D which has \"\n \t\t\t\"non-trivial destructor\", new_decls);\n \t    }\n \t}\n@@ -3052,7 +3060,8 @@ check_goto (tree decl)\n   if (ent->in_try_scope || ent->in_catch_scope\n       || ent->in_omp_scope || !vec_safe_is_empty (ent->bad_decls))\n     {\n-      complained = permerror (input_location, \"jump to label %q+D\", decl);\n+      complained = permerror (DECL_SOURCE_LOCATION (decl),\n+\t\t\t      \"jump to label %qD\", decl);\n       if (complained)\n \tinform (input_location, \"  from here\");\n       identified = true;\n@@ -3072,9 +3081,11 @@ check_goto (tree decl)\n       else if (complained)\n \t{\n \t  if (u > 1)\n-\t    inform (input_location, \"  skips initialization of %q+#D\", bad);\n+\t    inform (DECL_SOURCE_LOCATION (bad),\n+\t\t    \"  skips initialization of %q#D\", bad);\n \t  else\n-\t    inform (input_location, \"  enters scope of %q+#D which has \"\n+\t    inform (DECL_SOURCE_LOCATION (bad),\n+\t\t    \"  enters scope of %q#D which has \"\n \t\t    \"non-trivial destructor\", bad);\n \t}\n     }\n@@ -3103,8 +3114,8 @@ check_goto (tree decl)\n \t    {\n \t      if (!identified)\n \t\t{\n-\t\t  complained = permerror (input_location,\n-\t\t\t\t\t  \"jump to label %q+D\", decl);\n+\t\t  complained = permerror (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\t\t  \"jump to label %qD\", decl);\n \t\t  if (complained)\n \t\t    inform (input_location, \"  from here\");\n \t\t  identified = true;\n@@ -4738,7 +4749,8 @@ start_decl (const cp_declarator *declarator,\n       && DECL_DECLARED_INLINE_P (decl)\n       && DECL_UNINLINABLE (decl)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n-    warning (0, \"inline function %q+D given attribute noinline\", decl);\n+    warning_at (DECL_SOURCE_LOCATION (decl), 0,\n+\t\t\"inline function %qD given attribute noinline\", decl);\n \n   if (TYPE_P (context) && COMPLETE_TYPE_P (complete_type (context)))\n     {\n@@ -5291,8 +5303,9 @@ check_for_uninitialized_const_var (tree decl)\n \t    inform (DECL_SOURCE_LOCATION (defaulted_ctor),\n \t\t    \"constructor is not user-provided because it is \"\n \t\t    \"explicitly defaulted in the class body\");\n-\t  inform (0, \"and the implicitly-defined constructor does not \"\n-\t\t  \"initialize %q+#D\", field);\n+\t  inform (DECL_SOURCE_LOCATION (field),\n+\t\t  \"and the implicitly-defined constructor does not \"\n+\t\t  \"initialize %q#D\", field);\n \t}\n     }\n }\n@@ -13375,7 +13388,8 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   if (DECL_DECLARED_INLINE_P (decl1)\n       && lookup_attribute (\"noinline\", attrs))\n-    warning (0, \"inline function %q+D given attribute noinline\", decl1);\n+    warning_at (DECL_SOURCE_LOCATION (decl1), 0,\n+\t\t\"inline function %qD given attribute noinline\", decl1);\n \n   /* Handle gnu_inline attribute.  */\n   if (GNU_INLINE_P (decl1))\n@@ -13516,8 +13530,9 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \t\t    }\n \n \t\t  if (context == NULL)\n-\t\t    warning (OPT_Wmissing_declarations,\n-\t\t\t     \"no previous declaration for %q+D\", decl1);\n+\t\t    warning_at (DECL_SOURCE_LOCATION (decl1),\n+\t\t\t\tOPT_Wmissing_declarations,\n+\t\t\t\t\"no previous declaration for %qD\", decl1);\n \t\t}\n \n \t      decl1 = olddecl;\n@@ -14327,8 +14342,9 @@ finish_function (int flags)\n \t    && TREE_CODE (TREE_TYPE (decl)) != REFERENCE_TYPE\n \t    && (!CLASS_TYPE_P (TREE_TYPE (decl))\n \t        || !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (decl))))\n-\t  warning (OPT_Wunused_but_set_parameter,\n-\t\t   \"parameter %q+D set but not used\", decl);\n+\t  warning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t      OPT_Wunused_but_set_parameter,\n+\t\t      \"parameter %qD set but not used\", decl);\n       unused_but_set_errorcount = errorcount;\n     }\n "}, {"sha": "a45755ec8def91a08f779462d2f1a058b15143d9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=af7186706c6cd7d5014f0637308c80d8f2cd2545", "patch": "@@ -1531,15 +1531,18 @@ build_anon_union_vars (tree type, tree object)\n \tcontinue;\n       if (TREE_CODE (field) != FIELD_DECL)\n \t{\n-\t  permerror (input_location, \"%q+#D invalid; an anonymous union can only \"\n+\t  permerror (DECL_SOURCE_LOCATION (field),\n+\t\t     \"%q#D invalid; an anonymous union can only \"\n \t\t     \"have non-static data members\", field);\n \t  continue;\n \t}\n \n       if (TREE_PRIVATE (field))\n-\tpermerror (input_location, \"private member %q+#D in anonymous union\", field);\n+\tpermerror (DECL_SOURCE_LOCATION (field),\n+\t\t   \"private member %q#D in anonymous union\", field);\n       else if (TREE_PROTECTED (field))\n-\tpermerror (input_location, \"protected member %q+#D in anonymous union\", field);\n+\tpermerror (DECL_SOURCE_LOCATION (field),\n+\t\t   \"protected member %q#D in anonymous union\", field);\n \n       if (processing_template_decl)\n \tref = build_min_nt_loc (UNKNOWN_LOCATION, COMPONENT_REF, object,\n@@ -4764,7 +4767,8 @@ c_parse_final_cleanups (void)\n \t       && DECL_INITIAL (DECL_TEMPLATE_RESULT\n \t\t\t\t(template_for_substitution (decl)))))\n \t{\n-\t  warning (0, \"inline function %q+D used but never defined\", decl);\n+\t  warning_at (DECL_SOURCE_LOCATION (decl), 0,\n+\t\t      \"inline function %qD used but never defined\", decl);\n \t  /* Avoid a duplicate warning from check_global_declaration.  */\n \t  TREE_NO_WARNING (decl) = 1;\n \t}"}, {"sha": "1ed8f6c625e38f6dc51438b218a75d7bc4041cbb", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=af7186706c6cd7d5014f0637308c80d8f2cd2545", "patch": "@@ -936,13 +936,15 @@ sort_mem_initializers (tree t, tree mem_inits)\n       if (warn_reorder && !subobject_init)\n \t{\n \t  if (TREE_CODE (TREE_PURPOSE (next_subobject)) == FIELD_DECL)\n-\t    warning (OPT_Wreorder, \"%q+D will be initialized after\",\n-\t\t     TREE_PURPOSE (next_subobject));\n+\t    warning_at (DECL_SOURCE_LOCATION (TREE_PURPOSE (next_subobject)),\n+\t\t\tOPT_Wreorder, \"%qD will be initialized after\",\n+\t\t\tTREE_PURPOSE (next_subobject));\n \t  else\n \t    warning (OPT_Wreorder, \"base %qT will be initialized after\",\n \t\t     TREE_PURPOSE (next_subobject));\n \t  if (TREE_CODE (subobject) == FIELD_DECL)\n-\t    warning (OPT_Wreorder, \"  %q+#D\", subobject);\n+\t    warning_at (DECL_SOURCE_LOCATION (subobject),\n+\t\t\tOPT_Wreorder, \"  %q#D\", subobject);\n \t  else\n \t    warning (OPT_Wreorder, \"  base %qT\", subobject);\n \t  warning_at (DECL_SOURCE_LOCATION (current_function_decl),"}, {"sha": "86cf0866ce138a5df1fe84b41081c8de8ee25af6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=af7186706c6cd7d5014f0637308c80d8f2cd2545", "patch": "@@ -8368,8 +8368,8 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n \n       if (fndecl\n \t  && (warningcount + werrorcount > savew || errorcount > savee))\n-\tinform (input_location,\n-\t\t\"in passing argument %P of %q+D\", parmnum, fndecl);\n+\tinform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t\"in passing argument %P of %qD\", parmnum, fndecl);\n \n       return rhs;\n     }\n@@ -8448,14 +8448,18 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t   || TREE_PUBLIC (whats_returned)))\n     {\n       if (TREE_CODE (valtype) == REFERENCE_TYPE)\n-\twarning (OPT_Wreturn_local_addr, \"reference to local variable %q+D returned\",\n-\t\t whats_returned);\n+\twarning_at (DECL_SOURCE_LOCATION (whats_returned),\n+\t\t    OPT_Wreturn_local_addr,\n+\t\t    \"reference to local variable %qD returned\",\n+\t\t    whats_returned);\n       else if (TREE_CODE (whats_returned) == LABEL_DECL)\n-\twarning (OPT_Wreturn_local_addr, \"address of label %q+D returned\",\n-\t\t whats_returned);\n+\twarning_at (DECL_SOURCE_LOCATION (whats_returned),\n+\t\t    OPT_Wreturn_local_addr, \"address of label %qD returned\",\n+\t\t    whats_returned);\n       else\n-\twarning (OPT_Wreturn_local_addr, \"address of local variable %q+D \"\n-\t\t \"returned\", whats_returned);\n+\twarning_at (DECL_SOURCE_LOCATION (whats_returned),\n+\t\t    OPT_Wreturn_local_addr, \"address of local variable %qD \"\n+\t\t    \"returned\", whats_returned);\n       return true;\n     }\n "}, {"sha": "8a3a53720a4257e97d47c0c143ace7c022530caf", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7186706c6cd7d5014f0637308c80d8f2cd2545/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=af7186706c6cd7d5014f0637308c80d8f2cd2545", "patch": "@@ -389,7 +389,7 @@ abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n       FOR_EACH_VEC_ELT (*pure, ix, fn)\n \tif (! DECL_CLONED_FUNCTION_P (fn)\n \t    || DECL_COMPLETE_DESTRUCTOR_P (fn))\n-\t  inform (input_location, \"\\t%+#D\", fn);\n+\t  inform (DECL_SOURCE_LOCATION (fn), \"\\t%#D\", fn);\n \n       /* Now truncate the vector.  This leaves it non-null, so we know\n \t there are pure virtuals, but empty so we don't list them out\n@@ -473,8 +473,8 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t\t     || TREE_CODE (value) == PARM_DECL\n \t\t     || TREE_CODE (value) == FIELD_DECL))\n     {\n-      complained = emit_diagnostic (diag_kind, input_location, 0,\n-\t\t\t\t    \"%q+D has incomplete type\", value);\n+      complained = emit_diagnostic (diag_kind, DECL_SOURCE_LOCATION (value), 0,\n+\t\t\t\t    \"%qD has incomplete type\", value);\n       is_decl = true;\n     } \n  retry:"}]}