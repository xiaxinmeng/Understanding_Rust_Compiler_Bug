{"sha": "71205d170c59ae70323aa7d0b93ff5c13044fd57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyMDVkMTcwYzU5YWU3MDMyM2FhN2QwYjkzZmY1YzEzMDQ0ZmQ1Nw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-08T23:57:19Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-08T23:57:19Z"}, "message": "re PR other/36901 (pedwarn() + -pedantic-errors + -w (inhibit_warnings) should not emit errors)\n\n2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 36901\n\t* diagnostic.def (DK_PEDWARN, DK_PERMERROR): New.  \n\t* diagnostic.c (pedantic_warning_kind, permissive_error_kind):\n\tMoved from diagnostic.h\n\t(diagnostic_report_diagnostic): Return bool. Handle DK_PEDWARN and\n\tDK_PERMERROR.\n\t(emit_diagnostic): New.\n\t(warning0, pedwarn0): Delete.\n\t(warning, warning_at, pedwarn, permerror): Return bool.  \n\t* diagnostic.h (pedantic_warning_kind, permissive_error_kind):\n\tMoved to diagnostic.c.\n\t(struct diagnostic_context): Use correct type for\n\tclassify_diagnostic.\n\t(diagnostic_report_diagnostic): Update declaration.\n\t(emit_diagnostic): Declare.\n\t* errors.c (warning): Return bool.  \n\t* errors.h (warning): Update declaration.\n\t* toplev.h (warning0, pedwarn0): Delete.\n\t(warning, warning_at, pedwarn, permerror): Return bool.\n\t* c-errors.c (pedwarn_c99, pedwarn_c90): Use DK_PEDWARN.\n\t* c-decl.c (locate_old_decl): Delete 'diag' argument. Always use\n\tinform. Update all calls.\n\t(diagnose_mismatched_decls): Check return value of warning/pedwarn\n\tbefore giving informative note.\n\t(implicit_decl_warning): Likewise.  \n\t* c-typeck.c (build_function_call): Likewise.  \n\t* tree-sssa.c (warn_uninit): Likewise.  \n\t* builtins.c (gimplify_va_arg_expr): Likewise.\nfortran/\n\t* f95-lang.c (gfc_mark_addressable): Use \"pedwarn (0,\" instead of\n\t'pedwarn0'.\ncp/\n\t* cp-tree.h (struct diagnostic_context, struct diagnostic_info):\n\tDelete forward declarations. Check that toplev.h has not been\n\tincluded before this file. Include toplev.h and diagnostic.h.\n\t* error.c (cp_cpp_error): Use DK_PEDWARN.\n\t(cxx_incomplete_type_diagnostic): Update declaration.\n\t(cxx_incomplete_type_error): Use DK_ERROR.\n\t* typeck2.c (cxx_incomplete_type_diagnostic): Take a diagnostic_t\n\tas argument. Use emit_diagnostic.\n\t(cxx_incomplete_type_error): Use DK_ERROR.\n\t(add_exception_specifier): Use diagnostic_t instead of custom\n\tcodes.  \n\t* typeck.c (complete_type_or_else): Update call to\n\tcxx_incomplete_type_diagnostic.\n\t* init.c (build_delete): Likewise.  \n\t* call.c (diagnostic_fn_t): Remove unused typedef.\n\t(build_temp): Pass a pointer to diagnostic_t.\n\t(convert_like_real): Use emit_diagnostic.\n\t(joust): Check return value of warning before giving informative\n\tnote.  \n\t* friend.c (do_friend): Check return value of warning\n\tbefore giving informative note.\n\t* parser.c (cp_parser_template_id): Likewise.\n\ntestsuite/\n\t* gcc.dg/pr36901-1.c: New.\n\t* gcc.dg/pr36901-3.c: New.\n\t* gcc.dg/pr36901-2.c: New.\n\t* gcc.dg/pr36901-4.c: New.\n\t* gcc.dg/pr36901-system.h: New.\n\t* gcc.dg/pr36901.h: New.\n\t* gcc.target/powerpc/altivec-macros.c: Update.\n\t* gcc.target/i386/regparm.c: Update.\n\t* gcc.dg/funcdef-var-1.c: Update.\n\t* gcc.dg/parm-mismatch-1.c: Update.\n\t* gcc.dg/attr-noinline.c: Update.\n\t* gcc.dg/wtr-static-1.c: Update.\n\t* gcc.dg/redecl-11.c: Update.\n\t* gcc.dg/pr27953.c: Update.\n\t* gcc.dg/proto-1.c: Update.\n\t* gcc.dg/decl-3.c: Update.\n\t* gcc.dg/redecl-13.c: Update.\n\t* gcc.dg/pr15360-1.c: Update.\n\t* gcc.dg/redecl-15.c: Update.\n\t* gcc.dg/enum-compat-1.c: Update.\n\t* gcc.dg/dll-3.c: Update.\n\t* gcc.dg/array-5.c: Update.\n\t* gcc.dg/Wredundant-decls-2.c: Update.\n\t* gcc.dg/inline4.c: Update.\n\t* gcc.dg/redecl-2.c: Update.\n\t* gcc.dg/inline-14.c: Update.\n\t* gcc.dg/tls/diag-3.c: Update.\n\t* gcc.dg/funcdef-var-2.c: Update.\n\t* gcc.dg/20041213-1.c: Update.\n\t* gcc.dg/old-style-then-proto-1.c: Update.\n\t* gcc.dg/decl-2.c: Update.\n\t* gcc.dg/redecl-12.c: Update.\n\t* gcc.dg/decl-4.c: Update.\n\t* gcc.dg/Wshadow-1.c: Update.\n\t* gcc.dg/transparent-union-2.c: Update.\n\t* gcc.dg/visibility-7.c: Update.\n\t* gcc.dg/dll-2.c: Update.\n\t* gcc.dg/redecl-16.c: Update.\n\t* gcc.dg/inline1.c: Update.\n\t* gcc.dg/decl-8.c: Update.\n\t* gcc.dg/nested-redef-1.c: Update.\n\t* gcc.dg/inline3.c: Update.\n\t* gcc.dg/redecl-1.c: Update.\n\t* gcc.dg/inline5.c: Update.\n\t* gcc.dg/pr35899.c: Update.\n\t* gcc.dg/noncompile/label-lineno-1.c: Update.\n\t* gcc.dg/noncompile/label-1.c: Update.\n\t* gcc.dg/noncompile/20020220-1.c: Update.\n\t* gcc.dg/noncompile/redecl-1.c: Update.\n\t* gcc.dg/redecl-5.c: Update.\n\t* gcc.dg/qual-return-3.c: Update.\n\t* gcc.dg/label-decl-4.c: Update.\n\nFrom-SVN: r138893", "tree": {"sha": "1c66246c77f4b33adec6eca15965b1e2f0bfa4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c66246c77f4b33adec6eca15965b1e2f0bfa4bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71205d170c59ae70323aa7d0b93ff5c13044fd57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71205d170c59ae70323aa7d0b93ff5c13044fd57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71205d170c59ae70323aa7d0b93ff5c13044fd57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71205d170c59ae70323aa7d0b93ff5c13044fd57/comments", "author": null, "committer": null, "parents": [{"sha": "c73d5dd948d68fb2550f7d178d1483aebcfbcaea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73d5dd948d68fb2550f7d178d1483aebcfbcaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73d5dd948d68fb2550f7d178d1483aebcfbcaea"}], "stats": {"total": 851, "additions": 521, "deletions": 330}, "files": [{"sha": "9bc8214a9cda73ffaa480e4b37642e05bc116578", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,3 +1,34 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 36901\n+\t* diagnostic.def (DK_PEDWARN, DK_PERMERROR): New.  \n+\t* diagnostic.c (pedantic_warning_kind, permissive_error_kind):\n+\tMoved from diagnostic.h\n+\t(diagnostic_report_diagnostic): Return bool. Handle DK_PEDWARN and\n+\tDK_PERMERROR.\n+\t(emit_diagnostic): New.\n+\t(warning0, pedwarn0): Delete.\n+\t(warning, warning_at, pedwarn, permerror): Return bool.  \n+\t* diagnostic.h (pedantic_warning_kind, permissive_error_kind):\n+\tMoved to diagnostic.c.\n+\t(struct diagnostic_context): Use correct type for\n+\tclassify_diagnostic.\n+\t(diagnostic_report_diagnostic): Update declaration.\n+\t(emit_diagnostic): Declare.\n+\t* errors.c (warning): Return bool.  \n+\t* errors.h (warning): Update declaration.\n+\t* toplev.h (warning0, pedwarn0): Delete.\n+\t(warning, warning_at, pedwarn, permerror): Return bool.\n+\t* c-errors.c (pedwarn_c99, pedwarn_c90): Use DK_PEDWARN.\n+\t* c-decl.c (locate_old_decl): Delete 'diag' argument. Always use\n+\tinform. Update all calls.\n+\t(diagnose_mismatched_decls): Check return value of warning/pedwarn\n+\tbefore giving informative note.\n+\t(implicit_decl_warning): Likewise.  \n+\t* c-typeck.c (build_function_call): Likewise.  \n+\t* tree-sssa.c (warn_uninit): Likewise.  \n+\t* builtins.c (gimplify_va_arg_expr): Likewise.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 7651"}, {"sha": "a5c55ad0ba737af8d7190e417ccac2e14ff928ce", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -4923,13 +4923,14 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t   != type)\n     {\n       static bool gave_help;\n+      bool warned;\n \n       /* Unfortunately, this is merely undefined, rather than a constraint\n \t violation, so we cannot make this an error.  If this call is never\n \t executed, the program is still strictly conforming.  */\n-      warning (0, \"%qT is promoted to %qT when passed through %<...%>\",\n-\t       type, promoted_type);\n-      if (! gave_help)\n+      warned = warning (0, \"%qT is promoted to %qT when passed through %<...%>\",\n+\t\t\ttype, promoted_type);\n+      if (!gave_help && warned)\n \t{\n \t  gave_help = true;\n \t  inform (\"(so you should pass %qT not %qT to %<va_arg%>)\",\n@@ -4938,7 +4939,8 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n       /* We can, however, treat \"undefined\" any way we please.\n \t Call abort to encourage the user to fix the program.  */\n-      inform (\"if this code is reached, the program will abort\");\n+      if (warned)\n+\tinform (\"if this code is reached, the program will abort\");\n       t = build_call_expr (implicit_built_in_decls[BUILT_IN_TRAP], 0);\n       gimplify_and_add (t, pre_p);\n "}, {"sha": "e30defdd0e8102dd367fcb0a85b0599d48e5550b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 50, "deletions": 52, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1115,16 +1115,16 @@ validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n    first in a pair of mismatched declarations, using the diagnostic\n    function DIAG.  */\n static void\n-locate_old_decl (tree decl, void (*diag)(const char *, ...) ATTRIBUTE_GCC_CDIAG(1,2))\n+locate_old_decl (tree decl)\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n     ;\n   else if (DECL_INITIAL (decl))\n-    diag (G_(\"previous definition of %q+D was here\"), decl);\n+    inform (\"previous definition of %q+D was here\", decl);\n   else if (C_DECL_IMPLICIT (decl))\n-    diag (G_(\"previous implicit declaration of %q+D was here\"), decl);\n+    inform (\"previous implicit declaration of %q+D was here\", decl);\n   else\n-    diag (G_(\"previous declaration of %q+D was here\"), decl);\n+    inform (\"previous declaration of %q+D was here\", decl);\n }\n \n /* Subroutine of duplicate_decls.  Compare NEWDECL to OLDDECL.\n@@ -1165,7 +1165,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    && !C_DECL_DECLARED_BUILTIN (olddecl)))\n \t{\n \t  error (\"%q+D redeclared as different kind of symbol\", newdecl);\n-\t  locate_old_decl (olddecl, error);\n+\t  locate_old_decl (olddecl);\n \t}\n       else if (TREE_PUBLIC (newdecl))\n \twarning (0, \"built-in function %q+D declared as non-function\",\n@@ -1181,7 +1181,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n   if (TREE_CODE (olddecl) == CONST_DECL)\n     {\n       error (\"redeclaration of enumerator %q+D\", newdecl);\n-      locate_old_decl (olddecl, error);\n+      locate_old_decl (olddecl);\n       return false;\n     }\n \n@@ -1225,11 +1225,10 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t       && TYPE_MAIN_VARIANT (TREE_TYPE (newtype)) == integer_type_node\n \t       && C_FUNCTION_IMPLICIT_INT (newdecl) && !DECL_INITIAL (olddecl))\n \t{\n-\t  pedwarn (0, \"conflicting types for %q+D\", newdecl);\n+\t  pedwarned = pedwarn (0, \"conflicting types for %q+D\", newdecl);\n \t  /* Make sure we keep void as the return type.  */\n \t  TREE_TYPE (newdecl) = *newtypep = newtype = oldtype;\n \t  C_FUNCTION_IMPLICIT_INT (newdecl) = 0;\n-\t  pedwarned = true;\n \t}\n       /* Permit void foo (...) to match an earlier call to foo (...) with\n \t no declared type (thus, implicitly int).  */\n@@ -1238,10 +1237,9 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t       && TYPE_MAIN_VARIANT (TREE_TYPE (oldtype)) == integer_type_node\n \t       && C_DECL_IMPLICIT (olddecl) && !DECL_INITIAL (olddecl))\n \t{\n-\t  pedwarn (0, \"conflicting types for %q+D\", newdecl);\n+\t  pedwarned = pedwarn (0, \"conflicting types for %q+D\", newdecl);\n \t  /* Make sure we keep void as the return type.  */\n \t  TREE_TYPE (olddecl) = *oldtypep = oldtype = newtype;\n-\t  pedwarned = true;\n \t}\n       else\n \t{\n@@ -1250,7 +1248,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  else\n \t    error (\"conflicting types for %q+D\", newdecl);\n \t  diagnose_arglist_conflict (newdecl, olddecl, newtype, oldtype);\n-\t  locate_old_decl (olddecl, error);\n+\t  locate_old_decl (olddecl);\n \t  return false;\n \t}\n     }\n@@ -1267,7 +1265,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \treturn true;  /* Allow OLDDECL to continue in use.  */\n \n       error (\"redefinition of typedef %q+D\", newdecl);\n-      locate_old_decl (olddecl, error);\n+      locate_old_decl (olddecl);\n       return false;\n     }\n \n@@ -1318,7 +1316,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t  && same_translation_unit_p (newdecl, olddecl))\n \t\t{\n \t\t  error (\"redefinition of %q+D\", newdecl);\n-\t\t  locate_old_decl (olddecl, error);\n+\t\t  locate_old_decl (olddecl);\n \t\t  return false;\n \t\t}\n \t    }\n@@ -1330,7 +1328,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t       && TYPE_ACTUAL_ARG_TYPES (oldtype)\n \t       && !validate_proto_after_old_defn (newdecl, newtype, oldtype))\n \t{\n-\t  locate_old_decl (olddecl, error);\n+\t  locate_old_decl (olddecl);\n \t  return false;\n \t}\n       /* A non-static declaration (even an \"extern\") followed by a\n@@ -1354,7 +1352,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    {\n \t      error (\"static declaration of %q+D follows \"\n \t\t     \"non-static declaration\", newdecl);\n-\t      locate_old_decl (olddecl, error);\n+\t      locate_old_decl (olddecl);\n \t    }\n \t  return false;\n \t}\n@@ -1364,14 +1362,14 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    {\n \t      error (\"non-static declaration of %q+D follows \"\n \t\t     \"static declaration\", newdecl);\n-\t      locate_old_decl (olddecl, error);\n+\t      locate_old_decl (olddecl);\n \t      return false;\n \t    }\n \t  else if (warn_traditional)\n \t    {\n-\t      warning (OPT_Wtraditional, \"non-static declaration of %q+D \"\n-\t\t       \"follows static declaration\", newdecl);\n-\t      warned = true;\n+\t      warned |= warning (OPT_Wtraditional, \n+\t\t\t\t \"non-static declaration of %q+D \"\n+\t\t\t\t \"follows static declaration\", newdecl);\n \t    }\n \t}\n \n@@ -1412,15 +1410,15 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    error (\"non-thread-local declaration of %q+D follows \"\n \t\t   \"thread-local declaration\", newdecl);\n \n-\t  locate_old_decl (olddecl, error);\n+\t  locate_old_decl (olddecl);\n \t  return false;\n \t}\n \n       /* Multiple initialized definitions are not allowed (6.9p3,5).  */\n       if (DECL_INITIAL (newdecl) && DECL_INITIAL (olddecl))\n \t{\n \t  error (\"redefinition of %q+D\", newdecl);\n-\t  locate_old_decl (olddecl, error);\n+\t  locate_old_decl (olddecl);\n \t  return false;\n \t}\n \n@@ -1441,14 +1439,14 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t{\n \t\t  error (\"extern declaration of %q+D follows \"\n \t\t\t \"declaration with no linkage\", newdecl);\n-\t\t  locate_old_decl (olddecl, error);\n+\t\t  locate_old_decl (olddecl);\n \t\t  return false;\n \t\t}\n \t      else if (warn_traditional)\n \t\t{\n-\t\t  warning (OPT_Wtraditional, \"non-static declaration of %q+D \"\n-\t\t\t   \"follows static declaration\", newdecl);\n-\t\t  warned = true;\n+\t\t  warned |= warning (OPT_Wtraditional, \n+\t\t\t\t     \"non-static declaration of %q+D \"\n+\t\t\t\t     \"follows static declaration\", newdecl);\n \t\t}\n \t    }\n \t  else\n@@ -1460,7 +1458,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\terror (\"static declaration of %q+D follows \"\n \t\t       \"non-static declaration\", newdecl);\n \n-\t      locate_old_decl (olddecl, error);\n+\t      locate_old_decl (olddecl);\n \t      return false;\n \t    }\n \t}\n@@ -1477,12 +1475,12 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t    {\n \t      error (\"declaration of %q+D with no linkage follows \"\n \t\t     \"extern declaration\", newdecl);\n-\t      locate_old_decl (olddecl, error);\n+\t      locate_old_decl (olddecl);\n \t    }\n \t  else\n \t    {\n \t      error (\"redeclaration of %q+D with no linkage\", newdecl);\n-\t      locate_old_decl (olddecl, error);\n+\t      locate_old_decl (olddecl);\n \t    }\n \n \t  return false;\n@@ -1495,9 +1493,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       && DECL_VISIBILITY_SPECIFIED (newdecl) && DECL_VISIBILITY_SPECIFIED (olddecl)\n       && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n     {\n-      warning (0, \"redeclaration of %q+D with different visibility \"\n-\t       \"(old visibility preserved)\", newdecl);\n-      warned = true;\n+      warned |= warning (0, \"redeclaration of %q+D with different visibility \"\n+\t\t\t \"(old visibility preserved)\", newdecl);\n     }\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n@@ -1506,16 +1503,16 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       if (DECL_DECLARED_INLINE_P (newdecl)\n \t  && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  warning (OPT_Wattributes, \"inline declaration of %qD follows \"\n-\t\t   \"declaration with attribute noinline\", newdecl);\n-\t  warned = true;\n+\t  warned |= warning (OPT_Wattributes, \n+\t\t\t     \"inline declaration of %qD follows \"\n+\t\t\t     \"declaration with attribute noinline\", newdecl);\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  warning (OPT_Wattributes, \"declaration of %q+D with attribute \"\n-\t\t   \"noinline follows inline declaration \", newdecl);\n-\t  warned = true;\n+\t  warned |= warning (OPT_Wattributes, \n+\t\t\t     \"declaration of %q+D with attribute \"\n+\t\t\t     \"noinline follows inline declaration \", newdecl);\n \t}\n     }\n   else /* PARM_DECL, VAR_DECL */\n@@ -1533,7 +1530,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t  && (!TREE_ASM_WRITTEN (olddecl) || TREE_ASM_WRITTEN (newdecl)))\n \t{\n \t  error (\"redefinition of parameter %q+D\", newdecl);\n-\t  locate_old_decl (olddecl, error);\n+\t  locate_old_decl (olddecl);\n \t  return false;\n \t}\n     }\n@@ -1559,14 +1556,13 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       && !(TREE_CODE (newdecl) == VAR_DECL\n \t   && DECL_INITIAL (newdecl) && !DECL_INITIAL (olddecl)))\n     {\n-      warning (OPT_Wredundant_decls, \"redundant redeclaration of %q+D\",\n-\t       newdecl);\n-      warned = true;\n+      warned = warning (OPT_Wredundant_decls, \"redundant redeclaration of %q+D\",\n+\t\t\tnewdecl);\n     }\n \n-  /* Report location of previous decl/defn in a consistent manner.  */\n+  /* Report location of previous decl/defn.  */\n   if (warned || pedwarned)\n-    locate_old_decl (olddecl, pedwarned ? pedwarn0 : warning0);\n+    locate_old_decl (olddecl);\n \n #undef DECL_EXTERN_INLINE\n \n@@ -2330,14 +2326,16 @@ implicit_decl_warning (tree id, tree olddecl)\n {\n   if (warn_implicit_function_declaration)\n     {\n+      bool warned;\n+\n       if (flag_isoc99)\n-\tpedwarn (OPT_Wimplicit_function_declaration, \n-\t\t G_(\"implicit declaration of function %qE\"), id);\n+\twarned = pedwarn (OPT_Wimplicit_function_declaration, \n+\t\t\t  G_(\"implicit declaration of function %qE\"), id);\n       else \n-\twarning (OPT_Wimplicit_function_declaration, \n-\t\t G_(\"implicit declaration of function %qE\"), id);\n-      if (olddecl)\n-\tlocate_old_decl (olddecl, inform);\n+\twarned = warning (OPT_Wimplicit_function_declaration, \n+\t\t\t  G_(\"implicit declaration of function %qE\"), id);\n+      if (olddecl && warned)\n+\tlocate_old_decl (olddecl);\n     }\n }\n \n@@ -2408,7 +2406,7 @@ implicitly_declare (tree functionid)\n \t\t{\n \t\t  error (\"incompatible implicit declaration of function %qD\",\n \t\t\t decl);\n-\t\t  locate_old_decl (decl, error);\n+\t\t  locate_old_decl (decl);\n \t\t}\n \t    }\n \t  b->type = TREE_TYPE (decl);\n@@ -2550,7 +2548,7 @@ declare_label (tree name)\n   if (b && B_IN_CURRENT_SCOPE (b))\n     {\n       error (\"duplicate label declaration %qE\", name);\n-      locate_old_decl (b->decl, error);\n+      locate_old_decl (b->decl);\n \n       /* Just use the previous declaration.  */\n       return b->decl;\n@@ -2586,7 +2584,7 @@ define_label (location_t location, tree name)\n \t      && C_DECLARED_LABEL_FLAG (label))))\n     {\n       error (\"%Hduplicate label %qD\", &location, label);\n-      locate_old_decl (label, error);\n+      locate_old_decl (label);\n       return 0;\n     }\n   else if (label && DECL_CONTEXT (label) == current_function_decl)"}, {"sha": "999743259f1c1d6848e9848856020c376d56e601", "filename": "gcc/c-errors.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fc-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fc-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-errors.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -38,7 +38,7 @@ pedwarn_c99 (int opt, const char *gmsgid, ...)\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-\t\t       flag_isoc99 ? pedantic_warning_kind () : DK_WARNING);\n+\t\t       flag_isoc99 ? DK_PEDWARN : DK_WARNING);\n   diagnostic.option_index = opt;\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n@@ -57,7 +57,7 @@ pedwarn_c90 (int opt, const char *gmsgid, ...)\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-\t\t       flag_isoc99 ? DK_WARNING : pedantic_warning_kind ());\n+\t\t       flag_isoc99 ? DK_WARNING : DK_PEDWARN);\n   diagnostic.option_index = opt;\n   report_diagnostic (&diagnostic);\n   va_end (ap);"}, {"sha": "61f385da25cf7f717603ef88e861081cfd4f9bc1", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -2408,11 +2408,10 @@ build_function_call (tree function, tree params)\n       /* This situation leads to run-time undefined behavior.  We can't,\n \t therefore, simply error unless we can prove that all possible\n \t executions of the program must execute the code.  */\n-      warning (0, \"function called through a non-compatible type\");\n-\n-      /* We can, however, treat \"undefined\" any way we please.\n-\t Call abort to encourage the user to fix the program.  */\n-      inform (\"if this code is reached, the program will abort\");\n+      if (warning (0, \"function called through a non-compatible type\"))\n+\t/* We can, however, treat \"undefined\" any way we please.\n+\t   Call abort to encourage the user to fix the program.  */\n+\tinform (\"if this code is reached, the program will abort\");\n \n       if (VOID_TYPE_P (return_type))\n \treturn trap;"}, {"sha": "8fd884285670a2f7f08986cd130bf16220ddad54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,3 +1,29 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 36901\n+\t* cp-tree.h (struct diagnostic_context, struct diagnostic_info):\n+\tDelete forward declarations. Check that toplev.h has not been\n+\tincluded before this file. Include toplev.h and diagnostic.h.\n+\t* error.c (cp_cpp_error): Use DK_PEDWARN.\n+\t(cxx_incomplete_type_diagnostic): Update declaration.\n+\t(cxx_incomplete_type_error): Use DK_ERROR.\n+\t* typeck2.c (cxx_incomplete_type_diagnostic): Take a diagnostic_t\n+\tas argument. Use emit_diagnostic.\n+\t(cxx_incomplete_type_error): Use DK_ERROR.\n+\t(add_exception_specifier): Use diagnostic_t instead of custom\n+\tcodes.  \n+\t* typeck.c (complete_type_or_else): Update call to\n+\tcxx_incomplete_type_diagnostic.\n+\t* init.c (build_delete): Likewise.  \n+\t* call.c (diagnostic_fn_t): Remove unused typedef.\n+\t(build_temp): Pass a pointer to diagnostic_t.\n+\t(convert_like_real): Use emit_diagnostic.\n+\t(joust): Check return value of warning before giving informative\n+\tnote.  \n+\t* friend.c (do_friend): Check return value of warning\n+\tbefore giving informative note.\n+\t* parser.c (cp_parser_template_id): Likewise.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 7651"}, {"sha": "2f6767388dafe43b93b7e5086a6ed96fb0939d6c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -201,8 +201,7 @@ static void add_candidates (tree, tree, tree, bool, tree, tree,\n \t\t\t    int, struct z_candidate **);\n static conversion *merge_conversion_sequences (conversion *, conversion *);\n static bool magic_varargs_p (tree);\n-typedef void (*diagnostic_fn_t) (const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1,2);\n-static tree build_temp (tree, tree, int, diagnostic_fn_t *);\n+static tree build_temp (tree, tree, int, diagnostic_t *);\n \n /* Returns nonzero iff the destructor name specified in NAME matches BASETYPE.\n    NAME can take many forms...  */\n@@ -4445,7 +4444,7 @@ enforce_access (tree basetype_path, tree decl, tree diag_decl)\n \n static tree\n build_temp (tree expr, tree type, int flags,\n-\t    diagnostic_fn_t *diagnostic_fn)\n+\t    diagnostic_t *diagnostic_kind)\n {\n   int savew, savee;\n \n@@ -4455,11 +4454,11 @@ build_temp (tree expr, tree type, int flags,\n \t\t\t\t    build_tree_list (NULL_TREE, expr),\n \t\t\t\t    type, flags, tf_warning_or_error);\n   if (warningcount > savew)\n-    *diagnostic_fn = warning0;\n+    *diagnostic_kind = DK_WARNING;\n   else if (errorcount > savee)\n-    *diagnostic_fn = error;\n+    *diagnostic_kind = DK_ERROR;\n   else\n-    *diagnostic_fn = NULL;\n+    *diagnostic_kind = 0;\n   return expr;\n }\n \n@@ -4505,7 +4504,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t   bool c_cast_p, tsubst_flags_t complain)\n {\n   tree totype = convs->type;\n-  diagnostic_fn_t diagnostic_fn;\n+  diagnostic_t diag_kind;\n   int flags;\n \n   if (convs->bad_p\n@@ -4682,12 +4681,13 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t   conversion (i.e. the second step of copy-initialization), so\n \t   don't allow any more.  */\n \tflags |= LOOKUP_NO_CONVERSION;\n-      expr = build_temp (expr, totype, flags, &diagnostic_fn);\n-      if (diagnostic_fn && fn)\n+      expr = build_temp (expr, totype, flags, &diag_kind);\n+      if (diag_kind && fn)\n \t{\n \t  if ((complain & tf_error))\n-\t    diagnostic_fn (\"  initializing argument %P of %qD\", argnum, fn);\n-\t  else if (diagnostic_fn == error)\n+\t    emit_diagnostic (diag_kind, input_location, 0, \n+\t\t\t     \"  initializing argument %P of %qD\", argnum, fn);\n+\t  else if (diag_kind == DK_ERROR)\n \t    return error_mark_node;\n \t}\n       return build_cplus_new (totype, expr);\n@@ -6647,10 +6647,12 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn)\n \t  tree source = source_type (w->convs[0]);\n \t  if (! DECL_CONSTRUCTOR_P (w->fn))\n \t    source = TREE_TYPE (source);\n-\t  warning (OPT_Wconversion, \"choosing %qD over %qD\", w->fn, l->fn);\n-\t  warning (OPT_Wconversion, \"  for conversion from %qT to %qT\",\n-\t\t   source, w->second_conv->type);\n-\t  inform (\"  because conversion sequence for the argument is better\");\n+\t  if (warning (OPT_Wconversion, \"choosing %qD over %qD\", w->fn, l->fn)\n+\t      && warning (OPT_Wconversion, \"  for conversion from %qT to %qT\",\n+\t\t\t  source, w->second_conv->type)) \n+\t    {\n+\t      inform (\"  because conversion sequence for the argument is better\");\n+\t    }\n \t}\n       else\n \tadd_warning (w, l);"}, {"sha": "4b4bf335836f6b0be3be8e7ece63e286012b53f6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -31,8 +31,28 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varray.h\"\n #include \"c-common.h\"\n #include \"name-lookup.h\"\n-struct diagnostic_context;\n-struct diagnostic_info;\n+\n+/* In order for the format checking to accept the C++ front end\n+   diagnostic framework extensions, you must include this file before\n+   toplev.h, not after.  We override the definition of GCC_DIAG_STYLE\n+   in c-common.h.  */\n+#undef GCC_DIAG_STYLE\n+#define GCC_DIAG_STYLE __gcc_cxxdiag__\n+#if GCC_VERSION >= 4001\n+#define ATTRIBUTE_GCC_CXXDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n+#else\n+#define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)\n+#endif\n+extern void cp_cpp_error\t\t\t(cpp_reader *, int,\n+\t\t\t\t\t\t const char *, va_list *)\n+     ATTRIBUTE_GCC_CXXDIAG(3,0);\n+#ifdef GCC_TOPLEV_H\n+#error \\\n+\"In order for the format checking to accept the C++ front end diagnostic\\n\"\n+\"framework extensions, you must include this file before toplev.h, not after.\"\n+#endif\n+#include \"toplev.h\"\n+#include \"diagnostic.h\"\n \n /* Usage of TREE_LANG_FLAG_?:\n    0: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n@@ -4887,11 +4907,11 @@ extern int lvalue_p\t\t\t\t(const_tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);\n-extern void cxx_incomplete_type_diagnostic\t(const_tree, const_tree, int);\n+extern void cxx_incomplete_type_diagnostic\t(const_tree, const_tree, diagnostic_t);\n #undef cxx_incomplete_type_error\n extern void cxx_incomplete_type_error\t\t(const_tree, const_tree);\n #define cxx_incomplete_type_error(V,T) \\\n-  (cxx_incomplete_type_diagnostic ((V), (T), 0))\n+  (cxx_incomplete_type_diagnostic ((V), (T), DK_ERROR))\n extern tree error_not_base_type\t\t\t(tree, tree);\n extern tree binfo_or_else\t\t\t(tree, tree);\n extern void readonly_error\t\t\t(tree, const char *);\n@@ -4945,19 +4965,4 @@ extern void cp_genericize\t\t\t(tree);\n \n /* -- end of C++ */\n \n-/* In order for the format checking to accept the C++ front end\n-   diagnostic framework extensions, you must include this file before\n-   toplev.h, not after.  We override the definition of GCC_DIAG_STYLE\n-   in c-common.h.  */\n-#undef GCC_DIAG_STYLE\n-#define GCC_DIAG_STYLE __gcc_cxxdiag__\n-#if GCC_VERSION >= 4001\n-#define ATTRIBUTE_GCC_CXXDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n-#else\n-#define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)\n-#endif\n-extern void cp_cpp_error\t\t\t(cpp_reader *, int,\n-\t\t\t\t\t\t const char *, va_list *)\n-     ATTRIBUTE_GCC_CXXDIAG(3,0);\n-\n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "03ceddffb78b5ffafab25a550f267af2a08ddcab", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -2661,7 +2661,7 @@ cp_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n       dlevel = DK_WARNING;\n       break;\n     case CPP_DL_PEDWARN:\n-      dlevel = pedantic_warning_kind ();\n+      dlevel = DK_PEDWARN;\n       break;\n     case CPP_DL_ERROR:\n       dlevel = DK_ERROR;"}, {"sha": "4d9a14ce88e5575ff2326aba2fa785d8021e5bd1", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -568,9 +568,11 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t  if (warn)\n \t    {\n \t      static int explained;\n-\t      warning (OPT_Wnon_template_friend, \"friend declaration \"\n-\t\t       \"%q#D declares a non-template function\", decl);\n-\t      if (! explained)\n+\t      bool warned;\n+\n+\t      warned = warning (OPT_Wnon_template_friend, \"friend declaration \"\n+\t\t\t\t\"%q#D declares a non-template function\", decl);\n+\t      if (! explained && warned)\n \t\t{\n \t\t  inform (\"(if this is not what you intended, make sure \"\n \t\t\t  \"the function template has already been declared \""}, {"sha": "df36c5e829f785873552f65065996a6757c3687b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -3035,12 +3035,14 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \t  complete_type (type);\n \t  if (!COMPLETE_TYPE_P (type))\n \t    {\n-\t      warning (0, \"possible problem detected in invocation of \"\n-\t\t       \"delete operator:\");\n-\t      cxx_incomplete_type_diagnostic (addr, type, 1);\n-\t      inform (\"neither the destructor nor the class-specific \"\n-\t\t      \"operator delete will be called, even if they are \"\n-\t\t      \"declared when the class is defined.\");\n+\t      if (warning (0, \"possible problem detected in invocation of \"\n+\t\t\t   \"delete operator:\"))\n+\t\t{\n+\t\t  cxx_incomplete_type_diagnostic (addr, type, DK_WARNING);\n+\t\t  inform (\"neither the destructor nor the class-specific \"\n+\t\t\t  \"operator delete will be called, even if they are \"\n+\t\t\t  \"declared when the class is defined.\");\n+\t\t}\n \t      complete_p = false;\n \t    }\n \t}"}, {"sha": "1bb52e5e01c4c81950cf31f786a0530589fd921a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -9980,15 +9980,14 @@ cp_parser_template_id (cp_parser *parser,\n \t}\n       /* Otherwise, emit an error about the invalid digraph, but continue\n \t parsing because we got our argument list.  */\n-      permerror (\"%H%<<::%> cannot begin a template-argument list\",\n-\t\t &next_token->location);\n-      inform (\"%H%<<:%> is an alternate spelling for %<[%>. Insert whitespace \"\n+      if (permerror (\"%H%<<::%> cannot begin a template-argument list\",\n+\t\t     &next_token->location))\n+\t{\n+\t  static bool hint = false;\n+\t  inform (\"%H%<<:%> is an alternate spelling for %<[%>. Insert whitespace \"\n \t      \"between %<<%> and %<::%>\",\n \t      &next_token->location);\n-      if (!flag_permissive)\n-\t{\n-\t  static bool hint;\n-\t  if (!hint)\n+\t  if (!hint && !flag_permissive)\n \t    {\n \t      inform (\"%H(if you use %<-fpermissive%> G++ will accept your code)\",\n                       &next_token->location);"}, {"sha": "a99526f13181444d1b7dfc7acd03386671c895e2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -145,7 +145,7 @@ complete_type_or_else (tree type, tree value)\n     return NULL_TREE;\n   else if (!COMPLETE_TYPE_P (type))\n     {\n-      cxx_incomplete_type_diagnostic (value, type, 0);\n+      cxx_incomplete_type_diagnostic (value, type, DK_ERROR);\n       return NULL_TREE;\n     }\n   else"}, {"sha": "bca95e970f16011e9469c1857d35dfd7173e82ed", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -332,22 +332,18 @@ abstract_virtuals_error (tree decl, tree type)\n \n /* Print an error message for invalid use of an incomplete type.\n    VALUE is the expression that was used (or 0 if that isn't known)\n-   and TYPE is the type that was invalid.  DIAG_TYPE indicates the\n-   type of diagnostic:  0 for an error, 1 for a warning, 2 for a\n-   pedwarn.  */\n+   and TYPE is the type that was invalid.  DIAG_KIND indicates the\n+   type of diagnostic (see diagnostic.def).  */\n \n void\n-cxx_incomplete_type_diagnostic (const_tree value, const_tree type, int diag_type)\n+cxx_incomplete_type_diagnostic (const_tree value, const_tree type, \n+\t\t\t\tdiagnostic_t diag_kind)\n {\n   int decl = 0;\n-  void (*p_msg) (const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1,2);\n \n-  if (diag_type == 1)\n-    p_msg = warning0;\n-  else if (diag_type == 2)\n-    p_msg = pedwarn0;\n-  else\n-    p_msg = error;\n+  gcc_assert (diag_kind == DK_WARNING \n+\t      || diag_kind == DK_PEDWARN \n+\t      || diag_kind == DK_ERROR);\n \n   /* Avoid duplicate error message.  */\n   if (TREE_CODE (type) == ERROR_MARK)\n@@ -357,7 +353,8 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type, int diag_type\n \t\t     || TREE_CODE (value) == PARM_DECL\n \t\t     || TREE_CODE (value) == FIELD_DECL))\n     {\n-      p_msg (\"%q+D has incomplete type\", value);\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"%q+D has incomplete type\", value);\n       decl = 1;\n     }\n  retry:\n@@ -369,15 +366,19 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type, int diag_type\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:\n       if (!decl)\n-\tp_msg (\"invalid use of incomplete type %q#T\", type);\n+\temit_diagnostic (diag_kind, input_location, 0,\n+\t\t\t \"invalid use of incomplete type %q#T\", type);\n       if (!TYPE_TEMPLATE_INFO (type))\n-\tp_msg (\"forward declaration of %q+#T\", type);\n+\temit_diagnostic (diag_kind, input_location, 0,\n+\t\t\t \"forward declaration of %q+#T\", type);\n       else\n-\tp_msg (\"declaration of %q+#T\", type);\n+\temit_diagnostic (diag_kind, input_location, 0,\n+\t\t\t \"declaration of %q+#T\", type);\n       break;\n \n     case VOID_TYPE:\n-      p_msg (\"invalid use of %qT\", type);\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"invalid use of %qT\", type);\n       break;\n \n     case ARRAY_TYPE:\n@@ -386,37 +387,45 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type, int diag_type\n \t  type = TREE_TYPE (type);\n \t  goto retry;\n \t}\n-      p_msg (\"invalid use of array with unspecified bounds\");\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"invalid use of array with unspecified bounds\");\n       break;\n \n     case OFFSET_TYPE:\n     bad_member:\n-      p_msg (\"invalid use of member (did you forget the %<&%> ?)\");\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"invalid use of member (did you forget the %<&%> ?)\");\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n-      p_msg (\"invalid use of template type parameter %qT\", type);\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"invalid use of template type parameter %qT\", type);\n       break;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n-      p_msg (\"invalid use of template template parameter %qT\",\n-            TYPE_NAME (type));\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"invalid use of template template parameter %qT\",\n+\t\t       TYPE_NAME (type));\n       break;\n \n     case TYPENAME_TYPE:\n-      p_msg (\"invalid use of dependent type %qT\", type);\n+      emit_diagnostic (diag_kind, input_location, 0,\n+\t\t       \"invalid use of dependent type %qT\", type);\n       break;\n \n     case UNKNOWN_TYPE:\n       if (value && TREE_CODE (value) == COMPONENT_REF)\n \tgoto bad_member;\n       else if (value && TREE_CODE (value) == ADDR_EXPR)\n-\tp_msg (\"address of overloaded function with no contextual \"\n-\t       \"type information\");\n+\temit_diagnostic (diag_kind, input_location, 0,\n+\t\t\t \"address of overloaded function with no contextual \"\n+\t\t\t \"type information\");\n       else if (value && TREE_CODE (value) == OVERLOAD)\n-\tp_msg (\"overloaded function with no contextual type information\");\n+\temit_diagnostic (diag_kind, input_location, 0,\n+\t\t\t \"overloaded function with no contextual type information\");\n       else\n-\tp_msg (\"insufficient contextual information to determine type\");\n+\temit_diagnostic (diag_kind, input_location, 0,\n+\t\t\t \"insufficient contextual information to determine type\");\n       break;\n \n     default:\n@@ -430,7 +439,7 @@ cxx_incomplete_type_diagnostic (const_tree value, const_tree type, int diag_type\n void\n cxx_incomplete_type_error (const_tree value, const_tree type)\n {\n-  cxx_incomplete_type_diagnostic (value, type, 0);\n+  cxx_incomplete_type_diagnostic (value, type, DK_ERROR);\n }\n \n \f\n@@ -1483,7 +1492,7 @@ add_exception_specifier (tree list, tree spec, int complain)\n   bool ok;\n   tree core = spec;\n   bool is_ptr;\n-  int diag_type = -1; /* none */\n+  diagnostic_t diag_type = DK_UNSPECIFIED; /* none */\n \n   if (spec == error_mark_node)\n     return list;\n@@ -1512,7 +1521,7 @@ add_exception_specifier (tree list, tree spec, int complain)\n \t and calls.  So just give a pedwarn at this point; we will give an\n \t error later if we hit one of those two cases.  */\n       if (!COMPLETE_TYPE_P (complete_type (core)))\n-\tdiag_type = 2; /* pedwarn */\n+\tdiag_type = DK_PEDWARN; /* pedwarn */\n     }\n \n   if (ok)\n@@ -1526,9 +1535,9 @@ add_exception_specifier (tree list, tree spec, int complain)\n \tlist = tree_cons (NULL_TREE, spec, list);\n     }\n   else\n-    diag_type = 0; /* error */\n+    diag_type = DK_ERROR; /* error */\n \n-  if (diag_type >= 0 && complain)\n+  if (diag_type != DK_UNSPECIFIED && complain)\n     cxx_incomplete_type_diagnostic (NULL_TREE, core, diag_type);\n \n   return list;"}, {"sha": "cb4c67adca2ad2ae9300b12dfb2022ea827e7402", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 61, "deletions": 50, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -41,6 +41,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks-def.h\"\n #include \"opts.h\"\n \n+#define pedantic_warning_kind() (flag_pedantic_errors ? DK_ERROR : DK_WARNING)\n+#define permissive_error_kind() (flag_permissive ? DK_WARNING : DK_ERROR)\n \n /* Prototypes.  */\n static char *build_message_string (const char *, ...) ATTRIBUTE_PRINTF_1;\n@@ -293,9 +295,10 @@ diagnostic_classify_diagnostic (diagnostic_context *context,\n    DC.  This function is *the* subroutine in terms of which front-ends\n    should implement their specific diagnostic handling modules.  The\n    front-end independent format specifiers are exactly those described\n-   in the documentation of output_format.  */\n+   in the documentation of output_format.  \n+   Return true if a diagnostic was printed, false otherwise.  */\n \n-void\n+bool\n diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n@@ -305,9 +308,12 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n   /* Give preference to being able to inhibit warnings, before they\n      get reclassified to something else.  */\n-  if (diagnostic->kind == DK_WARNING \n+  if ((diagnostic->kind == DK_WARNING || diagnostic->kind == DK_PEDWARN)\n       && !diagnostic_report_warnings_p (location))\n-    return;\n+    return false;\n+\n+  if (diagnostic->kind == DK_PEDWARN) \n+    diagnostic->kind = pedantic_warning_kind ();\n   \n   if (context->lock > 0)\n     {\n@@ -336,7 +342,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       /* This tests if the user provided the appropriate -Wfoo or\n \t -Wno-foo option.  */\n       if (! option_enabled (diagnostic->option_index))\n-\treturn;\n+\treturn false;\n       /* This tests if the user provided the appropriate -Werror=foo\n \t option.  */\n       if (context->classify_diagnostic[diagnostic->option_index] != DK_UNSPECIFIED)\n@@ -347,7 +353,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       /* This allows for future extensions, like temporarily disabling\n \t warnings for ranges of source code.  */\n       if (diagnostic->kind == DK_IGNORED)\n-\treturn;\n+\treturn false;\n     }\n \n   /* If we changed the kind due to -Werror, and didn't override it, we\n@@ -403,6 +409,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   diagnostic->abstract_origin = NULL;\n \n   context->lock--;\n+\n+  return true;\n }\n \n /* Given a partial pathname as input, return another pathname that\n@@ -457,51 +465,66 @@ verbatim (const char *gmsgid, ...)\n   va_end (ap);\n }\n \n-/* An informative note.  Use this for additional details on an error\n-   message.  */\n-void\n-inform (const char *gmsgid, ...)\n+bool\n+emit_diagnostic (diagnostic_t kind, location_t location, int opt, \n+\t\t const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n   va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_NOTE);\n-  report_diagnostic (&diagnostic);\n+  if (kind == DK_PERMERROR)\n+    {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n+\t\t\t   permissive_error_kind ());\n+      diagnostic.option_index = OPT_fpermissive;\n+    }\n+  else {\n+      diagnostic_set_info (&diagnostic, gmsgid, &ap, location, kind);\n+      if (kind == DK_WARNING || kind == DK_PEDWARN)\n+\tdiagnostic.option_index = opt;\n+  }\n   va_end (ap);\n+\n+  return report_diagnostic (&diagnostic);\n }\n \n-/* A warning at INPUT_LOCATION.  Use this for code which is correct according\n-   to the relevant language specification but is likely to be buggy anyway.  */\n+/* An informative note.  Use this for additional details on an error\n+   message.  */\n void\n-warning (int opt, const char *gmsgid, ...)\n+inform (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n   va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_WARNING);\n-  diagnostic.option_index = opt;\n-\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_NOTE);\n   report_diagnostic (&diagnostic);\n   va_end (ap);\n }\n \n-void\n-warning0 (const char *gmsgid, ...)\n+/* A warning at INPUT_LOCATION.  Use this for code which is correct according\n+   to the relevant language specification but is likely to be buggy anyway.  \n+   Returns true if the warning was printed, false if it was inhibited.  */\n+bool\n+warning (int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_WARNING);\n-  report_diagnostic (&diagnostic);\n+  diagnostic.option_index = opt;\n+\n   va_end (ap);\n+  return report_diagnostic (&diagnostic);\n }\n \n /* A warning at LOCATION.  Use this for code which is correct according to the\n-   relevant language specification but is likely to be buggy anyway.  */\n-void\n+   relevant language specification but is likely to be buggy anyway.\n+   Returns true if the warning was printed, false if it was inhibited.  */\n+\n+bool\n warning_at (location_t location, int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n@@ -510,9 +533,8 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, location, DK_WARNING);\n   diagnostic.option_index = opt;\n-\n-  report_diagnostic (&diagnostic);\n   va_end (ap);\n+  return report_diagnostic (&diagnostic);\n }\n \n /* A \"pedantic\" warning: issues a warning unless -pedantic-errors was\n@@ -524,58 +546,47 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n    of the -pedantic command-line switch.  To get a warning enabled\n    only with that switch, use either \"if (pedantic) pedwarn\n    (OPT_pedantic,...)\" or just \"pedwarn (OPT_pedantic,..)\".  To get a\n-   pedwarn independently of the -pedantic switch use \"pedwarn (0,...)\".  */\n+   pedwarn independently of the -pedantic switch use \"pedwarn (0,...)\".\n \n-void\n+   Returns true if the warning was printed, false if it was inhibited.  */\n+\n+bool\n pedwarn (int opt, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n   va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-                      pedantic_warning_kind ());\n+  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location, DK_PEDWARN);\n   diagnostic.option_index = opt;\n-\n-  report_diagnostic (&diagnostic);\n-  va_end (ap);\n-}\n-\n-void\n-pedwarn0 (const char *gmsgid, ...)\n-{\n-  diagnostic_info diagnostic;\n-  va_list ap;\n-\n-  va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n-                      pedantic_warning_kind ());\n-  report_diagnostic (&diagnostic);\n   va_end (ap);\n+  return report_diagnostic (&diagnostic);\n }\n \n /* A \"permissive\" error at LOCATION: issues an error unless\n    -fpermissive was given on the command line, in which case it issues\n    a warning.  Use this for things that really should be errors but we\n-   want to support legacy code.  */\n+   want to support legacy code.\n \n-void\n+   Returns true if the warning was printed, false if it was inhibited.  */\n+\n+bool\n permerror_at (location_t location, const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n \n   va_start (ap, gmsgid);\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, location,\n-\t\t       permissive_error_kind ());\n+                       permissive_error_kind ());\n   diagnostic.option_index = OPT_fpermissive;\n-  report_diagnostic (&diagnostic);\n   va_end (ap);\n+  return report_diagnostic (&diagnostic);\n }\n \n /* Equivalent to permerror_at (input_location, ...).  */\n \n-void\n+bool\n permerror (const char *gmsgid, ...)\n {\n   diagnostic_info diagnostic;\n@@ -585,8 +596,8 @@ permerror (const char *gmsgid, ...)\n   diagnostic_set_info (&diagnostic, gmsgid, &ap, input_location,\n \t\t       permissive_error_kind ());\n   diagnostic.option_index = OPT_fpermissive;\n-  report_diagnostic (&diagnostic);\n   va_end (ap);\n+  return report_diagnostic (&diagnostic);\n }\n \n "}, {"sha": "39064198eaeacbef9a602c8bcacd8ce14a474a3a", "filename": "gcc/diagnostic.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fdiagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fdiagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.def?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -20,4 +20,8 @@ DEFINE_DIAGNOSTIC_KIND (DK_WARNING, \"warning: \")\n DEFINE_DIAGNOSTIC_KIND (DK_ANACHRONISM, \"anachronism: \")\n DEFINE_DIAGNOSTIC_KIND (DK_NOTE, \"note: \")\n DEFINE_DIAGNOSTIC_KIND (DK_DEBUG, \"debug: \")\n+/* These two would be re-classified as DK_WARNING or DK_ERROR, so the\n+prefix does not matter.  */\n+DEFINE_DIAGNOSTIC_KIND (DK_PEDWARN, \"pedwarn: \")\n+DEFINE_DIAGNOSTIC_KIND (DK_PERMERROR, \"permerror: \")\n "}, {"sha": "19bc5e9c8d067afcdcf4c9c78bad0d727fbe4b1f", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -50,10 +50,6 @@ typedef struct diagnostic_info\n   int option_index;\n } diagnostic_info;\n \n-#define pedantic_warning_kind() (flag_pedantic_errors ? DK_ERROR : DK_WARNING)\n-#define permissive_error_kind() (flag_permissive ? DK_WARNING : DK_ERROR)\n-\n-\n /*  Forward declarations.  */\n typedef struct diagnostic_context diagnostic_context;\n typedef void (*diagnostic_starter_fn) (diagnostic_context *,\n@@ -82,7 +78,7 @@ struct diagnostic_context\n      the diagnostic should be changed to before reporting, or\n      DK_UNSPECIFIED to leave it as the reported kind, or DK_IGNORED to\n      not report it at all.  N_OPTS is from <options.h>.  */\n-  char classify_diagnostic[N_OPTS];\n+  diagnostic_t classify_diagnostic[N_OPTS];\n \n   /* True if we should print the command line option which controls\n      each diagnostic, if known.  */\n@@ -199,7 +195,7 @@ extern void diagnostic_report_current_function (diagnostic_context *,\n extern diagnostic_t diagnostic_classify_diagnostic (diagnostic_context *,\n \t\t\t\t\t\t    int /* optidx */,\n \t\t\t\t\t\t    diagnostic_t /* kind */);\n-extern void diagnostic_report_diagnostic (diagnostic_context *,\n+extern bool diagnostic_report_diagnostic (diagnostic_context *,\n \t\t\t\t\t  diagnostic_info *);\n #ifdef ATTRIBUTE_GCC_DIAG\n extern void diagnostic_set_info (diagnostic_info *, const char *, va_list *,\n@@ -208,6 +204,8 @@ extern void diagnostic_set_info_translated (diagnostic_info *, const char *,\n \t\t\t\t\t    va_list *, location_t,\n \t\t\t\t\t    diagnostic_t)\n      ATTRIBUTE_GCC_DIAG(2,0);\n+extern bool emit_diagnostic (diagnostic_t, location_t, int,\n+\t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n #endif\n extern char *diagnostic_build_prefix (diagnostic_info *);\n "}, {"sha": "a1ccfeff43d2cf3e5e74d695f4acce4fc4658b64", "filename": "gcc/errors.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -40,7 +40,7 @@ int have_error = 0;\n \n /* Print a warning message - output produced, but there may be problems.  */\n \n-void\n+bool\n warning (int opt ATTRIBUTE_UNUSED, const char *format, ...)\n {\n   va_list ap;\n@@ -50,6 +50,7 @@ warning (int opt ATTRIBUTE_UNUSED, const char *format, ...)\n   vfprintf (stderr, format, ap);\n   va_end (ap);\n   fputc('\\n', stderr);\n+  return true;\n }\n \n "}, {"sha": "ec080da03d411e749d6f9f94d83287d3f47c0516", "filename": "gcc/errors.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -33,7 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n    version of warning().  For those, you'd pass an OPT_W* value from\n    options.h, but in generator programs it has no effect, so it's OK\n    to just pass zero for calls from generator-only files.  */\n-extern void warning (int, const char *, ...) ATTRIBUTE_PRINTF_2 ATTRIBUTE_COLD;\n+extern bool warning (int, const char *, ...) ATTRIBUTE_PRINTF_2 ATTRIBUTE_COLD;\n extern void error (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n extern void fatal (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n extern void internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;"}, {"sha": "3bdfb527f6b6f91b49fa9e21944c402c279da445", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,3 +1,9 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 36901\n+\t* f95-lang.c (gfc_mark_addressable): Use \"pedwarn (0,\" instead of\n+\t'pedwarn0'.\n+\n 2008-08-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37011"}, {"sha": "5f39593efd8b753aba2b43d83c4e7eee7728131c", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -604,8 +604,8 @@ gfc_mark_addressable (tree exp)\n \t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n \t\treturn false;\n \t      }\n-\t    pedwarn0 (\"register variable %qs used in nested function\",\n-\t\t      IDENTIFIER_POINTER (DECL_NAME (x)));\n+\t    pedwarn (0, \"register variable %qs used in nested function\",\n+\t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }\n \telse if (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x))\n \t  {\n@@ -629,7 +629,7 @@ gfc_mark_addressable (tree exp)\n \t      }\n #endif\n \n-\t    pedwarn0 (\"address of register variable %qs requested\",\n+\t    pedwarn (0, \"address of register variable %qs requested\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }\n "}, {"sha": "2603ac27521928095f46f4506ae6f7e22392a412", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,3 +1,59 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 36901\n+\t* gcc.dg/pr36901-1.c: New.\n+\t* gcc.dg/pr36901-3.c: New.\n+\t* gcc.dg/pr36901-2.c: New.\n+\t* gcc.dg/pr36901-4.c: New.\n+\t* gcc.dg/pr36901-system.h: New.\n+\t* gcc.dg/pr36901.h: New.\n+\t* gcc.target/powerpc/altivec-macros.c: Update.\n+\t* gcc.target/i386/regparm.c: Update.\n+\t* gcc.dg/funcdef-var-1.c: Update.\n+\t* gcc.dg/parm-mismatch-1.c: Update.\n+\t* gcc.dg/attr-noinline.c: Update.\n+\t* gcc.dg/wtr-static-1.c: Update.\n+\t* gcc.dg/redecl-11.c: Update.\n+\t* gcc.dg/pr27953.c: Update.\n+\t* gcc.dg/proto-1.c: Update.\n+\t* gcc.dg/decl-3.c: Update.\n+\t* gcc.dg/redecl-13.c: Update.\n+\t* gcc.dg/pr15360-1.c: Update.\n+\t* gcc.dg/redecl-15.c: Update.\n+\t* gcc.dg/enum-compat-1.c: Update.\n+\t* gcc.dg/dll-3.c: Update.\n+\t* gcc.dg/array-5.c: Update.\n+\t* gcc.dg/Wredundant-decls-2.c: Update.\n+\t* gcc.dg/inline4.c: Update.\n+\t* gcc.dg/redecl-2.c: Update.\n+\t* gcc.dg/inline-14.c: Update.\n+\t* gcc.dg/tls/diag-3.c: Update.\n+\t* gcc.dg/funcdef-var-2.c: Update.\n+\t* gcc.dg/20041213-1.c: Update.\n+\t* gcc.dg/old-style-then-proto-1.c: Update.\n+\t* gcc.dg/decl-2.c: Update.\n+\t* gcc.dg/redecl-12.c: Update.\n+\t* gcc.dg/decl-4.c: Update.\n+\t* gcc.dg/Wshadow-1.c: Update.\n+\t* gcc.dg/transparent-union-2.c: Update.\n+\t* gcc.dg/visibility-7.c: Update.\n+\t* gcc.dg/dll-2.c: Update.\n+\t* gcc.dg/redecl-16.c: Update.\n+\t* gcc.dg/inline1.c: Update.\n+\t* gcc.dg/decl-8.c: Update.\n+\t* gcc.dg/nested-redef-1.c: Update.\n+\t* gcc.dg/inline3.c: Update.\n+\t* gcc.dg/redecl-1.c: Update.\n+\t* gcc.dg/inline5.c: Update.\n+\t* gcc.dg/pr35899.c: Update.\n+\t* gcc.dg/noncompile/label-lineno-1.c: Update.\n+\t* gcc.dg/noncompile/label-1.c: Update.\n+\t* gcc.dg/noncompile/20020220-1.c: Update.\n+\t* gcc.dg/noncompile/redecl-1.c: Update.\n+\t* gcc.dg/redecl-5.c: Update.\n+\t* gcc.dg/qual-return-3.c: Update.\n+\t* gcc.dg/label-decl-4.c: Update.\n+\t\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 7651"}, {"sha": "be1ab00241cf7b7ac3ac21314557443bd662d5ff", "filename": "gcc/testsuite/gcc.dg/20041213-1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041213-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,33 +1,33 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n /* test redeclarations with void and implicit int */\n-extern foo1(); /* { dg-error \"previous declaration\" } */\n+extern foo1(); /* { dg-message \"note: previous declaration\" } */\n extern void foo1(); /* { dg-error \"conflicting types\" } */\n \n-extern void foo2(); /* { dg-error \"previous declaration\" } */\n+extern void foo2(); /* { dg-message \"note: previous declaration\" } */\n extern foo2(); /* { dg-error \"conflicting types\" } */\n \n-void foo3() {} /* { dg-error \"previous definition\" } */\n+void foo3() {} /* { dg-message \"note: previous definition\" } */\n extern foo3(); /* { dg-error \"conflicting types\" } */\n \n-extern foo4(); /* { dg-error \"previous declaration\" } */\n+extern foo4(); /* { dg-message \"note: previous declaration\" } */\n void foo4() {} /* { dg-error \"conflicting types\" } */\n \n-extern void foo5(); /* { dg-warning \"previous declaration\" } */\n+extern void foo5(); /* { dg-message \"note: previous declaration\" } */\n foo5() {} /* { dg-warning \"conflicting types\" } */\n \n-foo6() {} /* { dg-error \"previous definition\" } */\n+foo6() {} /* { dg-message \"note: previous definition\" } */\n extern void foo6(); /* { dg-error \"conflicting types\" } */\n \n-foo7() {} /* { dg-error \"previous definition\" } */\n+foo7() {} /* { dg-message \"note: previous definition\" } */\n void foo7() {} /* { dg-error \"conflicting types\" } */\n \n-void foo8() {} /* { dg-error \"previous definition\" } */\n+void foo8() {} /* { dg-message \"note: previous definition\" } */\n foo8() {} /* { dg-error \"conflicting types\" } */\n \n-int use9() { foo9(); } /* { dg-warning \"previous implicit declaration\" } */\n+int use9() { foo9(); } /* { dg-message \"note: previous implicit declaration\" } */\n extern void foo9(); /* { dg-warning \"conflicting types\" } */\n \n-int use10() { foo10(); } /* { dg-warning \"previous implicit declaration\" } */\n+int use10() { foo10(); } /* { dg-message \"note: previous implicit declaration\" } */\n void foo10() {} /* { dg-warning \"conflicting types\" } */\n "}, {"sha": "89f57b427c65a9ffc3861f3d99bb96beb892db2a", "filename": "gcc/testsuite/gcc.dg/Wredundant-decls-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2FWredundant-decls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2FWredundant-decls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWredundant-decls-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -2,21 +2,21 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wredundant-decls\" } */\n \n-int j = 5; /* { dg-warning \"previous\" } */\n+int j = 5; /* { dg-message \"note: previous\" } */\n int j;     /* { dg-warning \"redundant\" } */\n \n static int k;\n-static int k = 5; /* { dg-warning \"previous\" } */\n+static int k = 5; /* { dg-message \"note: previous\" } */\n static int k;     /* { dg-warning \"redundant\" } */\n \n-static int l = 5; /* { dg-warning \"previous\" } */\n+static int l = 5; /* { dg-message \"note: previous\" } */\n static int l;     /* { dg-warning \"redundant\" } */\n \n-static int m;     /* { dg-warning \"previous\" } */\n+static int m;     /* { dg-message \"note: previous\" } */\n static int m;     /* { dg-warning \"redundant\" } */\n static int m = 5;\n \n-int n;           /* { dg-warning \"previous\" } */\n+int n;           /* { dg-message \"note: previous\" } */\n int n;           /* { dg-warning \"redundant\" } */\n int n = 5; \n "}, {"sha": "40073f337b49c01af5133b21a71f90c2cea53aa6", "filename": "gcc/testsuite/gcc.dg/Wshadow-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -10,7 +10,7 @@ void foo (double decl1)\t\t/* { dg-warning \"shadows a global decl\" } */\n {\t\t\t\t\n }\n \n-void foo1 (int d)\t\t/* { dg-error \"previous definition\" } */\n+void foo1 (int d)\t\t/* { dg-message \"note: previous definition\" } */\n {\n   double d;\t /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"redeclared as different\" \"\" { target *-*-* } 15 } */"}, {"sha": "4083c92ffc9ef9adebc725e6fc746a9ad29edc73", "filename": "gcc/testsuite/gcc.dg/array-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Farray-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Farray-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-5.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -13,7 +13,7 @@ extern char arr1[1];\n char arr1[1];\n extern char arr2[0];\n char arr2[0];\n-extern char arr3[0];            /* { dg-error \"previous declaration\" } */\n+extern char arr3[0];            /* { dg-message \"note: previous declaration\" } */\n char arr3[1];                   /* { dg-error \"conflicting types\" } */\n \n /* Variable size matches.  */"}, {"sha": "9f7abcd07e894a485a06a6419e1531b253b04268", "filename": "gcc/testsuite/gcc.dg/attr-noinline.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noinline.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -13,31 +13,31 @@ static inline void __attribute__((__noinline__)) function_declaration_both_after\n \n static void function_declaration_both_after(void) {}\n \n-static void function_declaration_noinline_before(void) __attribute__((__noinline__)); /* { dg-warning \"previous declaration\" \"\" } */\n+static void function_declaration_noinline_before(void) __attribute__((__noinline__)); /* { dg-message \"note: previous declaration\" \"\" } */\n \n static inline void function_declaration_noinline_before(void) {} /* { dg-warning \"follows declaration with attribute noinline\" \"\" } */\n \n-static inline void function_declaration_noinline_after(void) {} /* { dg-warning \"previous definition\" \"\" } */\n+static inline void function_declaration_noinline_after(void) {} /* { dg-message \"note: previous definition\" \"\" } */\n \n static void function_declaration_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" \"\" } */\n \n-static inline void function_declaration_inline_before(void); /* { dg-warning \"previous declaration\" \"\" } */\n+static inline void function_declaration_inline_before(void); /* { dg-message \"note: previous declaration\" \"\" } */\n \n static void __attribute__((__noinline__)) function_declaration_inline_before(void) {} /* { dg-warning \"follows inline declaration\" \"\" } */\n \n-static inline void function_declaration_inline_noinline_before(void); /* { dg-warning \"previous declaration\" \"\" } */\n+static inline void function_declaration_inline_noinline_before(void); /* { dg-message \"note: previous declaration\" \"\" } */\n \n static void function_declaration_inline_noinline_before(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" \"\" } */\n \n static void function_declaration_inline_noinline_before(void) {}\n \n static inline void function_declaration_inline_noinline_after(void);\n \n-static void function_declaration_inline_noinline_after(void) {} /* { dg-warning \"previous definition\" \"\" } */\n+static void function_declaration_inline_noinline_after(void) {} /* { dg-message \"note: previous definition\" \"\" } */\n \n static void function_declaration_inline_noinline_after(void) __attribute__((__noinline__)); /* { dg-warning \"follows inline declaration\" \"\" } */\n \n-static void function_declaration_noinline_inline_before(void) __attribute__((__noinline__)); /* { dg-warning \"previous declaration\" \"\" } */\n+static void function_declaration_noinline_inline_before(void) __attribute__((__noinline__)); /* { dg-message \"note: previous declaration\" \"\" } */\n \n static inline void function_declaration_noinline_inline_before(void); /* { dg-warning \"follows declaration with attribute noinline\" \"\" } */\n "}, {"sha": "40d744c926b809305d3b41496536a2363f6afcc3", "filename": "gcc/testsuite/gcc.dg/decl-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -7,7 +7,7 @@\n void foo(void)\n {\n   char\n-    c\t/* { dg-error \"previous declaration\" } */\n+    c\t/* { dg-message \"note: previous declaration\" } */\n     ;\n   int i;\n   int"}, {"sha": "cba0b906db3ef17e8bb57de62abb37191ca93592", "filename": "gcc/testsuite/gcc.dg/decl-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-3.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,5 +1,5 @@\n /* PR c/9928 */\n /* { dg-do compile } */\n \n-enum { CODES }; /* { dg-error \"previous definition\" } */\n+enum { CODES }; /* { dg-message \"note: previous definition\" } */\n enum { CODES }; /* { dg-error \"conflicting types|redeclaration of enumerator\" } */"}, {"sha": "ce640c99c16a88efdad5017008836c6ba9610094", "filename": "gcc/testsuite/gcc.dg/decl-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-4.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,10 +1,10 @@\n /* Redeclaration of parameters is an error.  PR 13728.  */\n /* { dg-do compile } */\n \n-void f (int fred,\t/* { dg-error \"previous definition\" \"\" } */\n+void f (int fred,\t/* { dg-message \"note: previous definition\" \"\" } */\n \tint fred);\t/* { dg-error \"redefinition of parameter\" \"\" } */\n \n-void f2 (int fred,\t/* { dg-error \"previous definition\" \"\" } */\n+void f2 (int fred,\t/* { dg-message \"note: previous definition\" \"\" } */\n \t int fred)\t/* { dg-error \"redefinition of parameter\" \"\" } */\n {\n }"}, {"sha": "d0da48f7b596da2fb101c0bca6064053c0583a8d", "filename": "gcc/testsuite/gcc.dg/decl-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-8.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -3,8 +3,8 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-typedef int I; /* { dg-error \"previous declaration of 'I' was here\" } */\n+typedef int I; /* { dg-message \"note: previous declaration of 'I' was here\" } */\n typedef int I; /* { dg-error \"redefinition of typedef 'I'\" } */\n \n-typedef int I1; /* { dg-error \"previous declaration of 'I1' was here\" } */\n+typedef int I1; /* { dg-message \"note: previous declaration of 'I1' was here\" } */\n typedef long I1; /* { dg-error \"conflicting types for 'I1'\" } */"}, {"sha": "334299f3a274b2c15221cd32e62b1e24005798f5", "filename": "gcc/testsuite/gcc.dg/dll-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -11,12 +11,12 @@\n /* { dg-require-dll \"\" } */\n \n __declspec (dllimport) int foo1 ();\n-__declspec (dllexport) int foo1 ();\t/* { dg-warning \"previous dllimport ignored\" } */\n+__declspec (dllexport) int foo1 ();\t/* { dg-message \"note: previous dllimport ignored\" } */\n __declspec (dllexport) int foo2 ();\n __declspec (dllimport) int foo2 ();\t/* { dg-warning \"dllimport ignored\" } */\n \n __declspec (dllimport) int bar1;\n-__declspec (dllexport) int bar1;\t/* { dg-warning \"previous dllimport ignored\" } */\n+__declspec (dllexport) int bar1;\t/* { dg-message \"note: previous dllimport ignored\" } */\n \n __declspec (dllexport) int bar2;\n __declspec (dllimport) int bar2;\t/* { dg-warning \"dllimport ignored\" } */"}, {"sha": "4272891a848c1065a95cde3cd583f3337f804ee6", "filename": "gcc/testsuite/gcc.dg/dll-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-3.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile { target i?86-pc-mingw* } } */\n \n __declspec (dllimport) int foo1 ();\n-__declspec (dllexport) int foo1 ();\t/* { dg-warning \"previous dllimport ignored\" } */\n+__declspec (dllexport) int foo1 ();\t/* { dg-message \"note: previous dllimport ignored\" } */\n \n __declspec (dllexport) int foo2 ();\n __declspec (dllimport) int foo2 ();\t/* { dg-warning \"dllimport ignored\" } */"}, {"sha": "18d1f7fe715df89ea38d42055e1319f0bc9469d1", "filename": "gcc/testsuite/gcc.dg/enum-compat-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-compat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-compat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-compat-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -25,7 +25,7 @@ enum e3 v3;\n enum e4 *p = &v3; /* { dg-warning \"incompatible\" \"incompatible pointer\" } */\n enum e3 *q = &v3;\n \n-void g(enum e3); /* { dg-error \"declaration\" \"error at first decl\" } */\n+void g(enum e3); /* { dg-message \"note: previous declaration\" \"error at first decl\" } */\n void g(enum e4); /* { dg-error \"conflicting types\" \"error at second decl\" } */\n \n void h(enum e3);"}, {"sha": "63a56838afe9dad5a65a91603b172391e2d3a74a", "filename": "gcc/testsuite/gcc.dg/funcdef-var-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-var-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-var-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-var-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,6 +5,6 @@\n /* { dg-options \"-Wmissing-prototypes\" } */\n \n extern __typeof(foo) foo __asm__(\"\"); /* { dg-error \"undeclared\" } */\n-/* { dg-error \"previous declaration\" \"previous declaration\" { target *-*-* } 7 } */\n+/* { dg-message \"note: previous declaration\" \"previous declaration\" { target *-*-* } 7 } */\n void *foo (void) {} /* { dg-error \"redeclared as different kind of symbol\" } */\n /* { dg-warning \"no previous prototype\" \"no previous prototype\" { target *-*-* } 9 } */"}, {"sha": "b3eb2ce6a014d7821ba348b5e0865b1952d8c64a", "filename": "gcc/testsuite/gcc.dg/funcdef-var-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-var-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-var-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffuncdef-var-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -6,6 +6,6 @@\n /* { dg-options \"-Wmissing-prototypes\" } */\n \n int foo;\n-/* { dg-error \"previous declaration\" \"previous declaration\" { target *-*-* } 8 } */\n+/* { dg-message \"note: previous declaration\" \"previous declaration\" { target *-*-* } 8 } */\n void foo () {} /* { dg-error \"redeclared as different kind of symbol\" } */\n /* { dg-warning \"no previous prototype\" \"no previous prototype\" { target *-*-* } 10 } */"}, {"sha": "15b2d404c1157d0685b6e3ea02649603ebc9efa7", "filename": "gcc/testsuite/gcc.dg/inline-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-14.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-std=c99\" } */\n \n extern inline int func1 (void)\n-{ /* { dg-error \"previous definition\" } */\n+{ /* { dg-message \"note: previous definition\" } */\n   return 1;\n }\n \n@@ -13,7 +13,7 @@ inline int func1 (void) /* { dg-error \"redefinition\" } */\n }\n \n inline int func2 (void)\n-{ /* { dg-error \"previous definition\" } */\n+{ /* { dg-message \"note: previous definition\" } */\n   return 2;\n }\n "}, {"sha": "c660fe3146b089dced8b0fb83a891deb333c27e4", "filename": "gcc/testsuite/gcc.dg/inline1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -3,6 +3,6 @@\n /* This test is expected to fail with an error for the redefinition of foo.\n    This violates the constraint of 6.9#3 (no more than one external definition\n    of an identifier with internal linkage in the same translation unit).  */\n-static inline int foo(void) { return 1; } /* { dg-error \"previous definition of\" } */\n+static inline int foo(void) { return 1; } /* { dg-message \"note: previous definition of\" } */\n static inline int foo(void) { return 0; } /* { dg-error \"redefinition of\" } */\n "}, {"sha": "d7fd8dba60ca9057c279bdd75e2c3a84ca13f0b8", "filename": "gcc/testsuite/gcc.dg/inline3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline3.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -3,5 +3,5 @@\n /* This testcase should fail since we're redefining foo in the same\n    translation unit.  */\n extern inline int foo(void) { return 0; }\n-inline int foo (void) { return 1; } /* { dg-error \"previous definition of\" } */\n+inline int foo (void) { return 1; } /* { dg-message \"note: previous definition of\" } */\n int foo (void) { return 2; } /* { dg-error \"redefinition of\" } */"}, {"sha": "64cea7515abd448d15e9a0f9afcb63664b9d69bb", "filename": "gcc/testsuite/gcc.dg/inline4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline4.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-Wall -std=gnu89\" } */\n /* This testcase should fail since we're redefining foo in the same\n    translation unit.  */\n-int foo (void) { return 2; } /* { dg-error \"previous definition of\" } */\n+int foo (void) { return 2; } /* { dg-message \"note: previous definition of\" } */\n extern inline int foo (void) { return 1; } /* { dg-error \"redefinition of\" } */"}, {"sha": "40fb7cd910bf3c5a560d7c2f0d10155ff39e110a", "filename": "gcc/testsuite/gcc.dg/inline5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Finline5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline5.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -2,5 +2,5 @@\n /* { dg-options \"-Wall -std=gnu89\" } */\n /* This testcase should fail since we're redefining foo in the same\n    translation unit.  */\n-extern inline int foo (void) { return 2; } /* { dg-error \"previous definition of\" } */\n+extern inline int foo (void) { return 2; } /* { dg-message \"note: previous definition of\" } */\n extern inline int foo (void) { return 1; } /* { dg-error \"redefinition of\" } */"}, {"sha": "3cfe965fd5d78fe14612387bf8f04e82925f7463", "filename": "gcc/testsuite/gcc.dg/label-decl-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flabel-decl-4.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -7,8 +7,8 @@ void\n f (void)\n {\n   __label__ a, b, a; /* { dg-error \"duplicate label declaration 'a'\" } */\n-  /* { dg-error \"previous declaration of 'a' was here\" \"previous\" { target *-*-* } 9 } */\n-  __label__ c; /* { dg-error \"previous declaration of 'c' was here\" } */\n+  /* { dg-message \"note: previous declaration of 'a' was here\" \"previous\" { target *-*-* } 9 } */\n+  __label__ c; /* { dg-message \"note: previous declaration of 'c' was here\" } */\n   __label__ c; /* { dg-error \"duplicate label declaration 'c'\" } */\n   return;\n }"}, {"sha": "a3786b0c302fcdf4078286d031212bb56e7487b3", "filename": "gcc/testsuite/gcc.dg/nested-redef-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-redef-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-redef-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-redef-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -36,7 +36,7 @@ enum e0 {\n \n enum e1 {\n   E2 = sizeof(enum e2 { E2 }), /* { dg-error \"redeclaration of enumerator 'E2'\" } */\n-  /* { dg-error \"previous definition\" \"previous E2\" { target *-*-* } 38 } */\n+  /* { dg-message \"note: previous definition\" \"previous E2\" { target *-*-* } 38 } */\n   E3\n };\n "}, {"sha": "3063f422c9ba86a8cfeb172fe6987223a6de2afd", "filename": "gcc/testsuite/gcc.dg/noncompile/20020220-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020220-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020220-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20020220-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -6,7 +6,7 @@ int foo (const char*, const char*);\n void bar (void)\n {\n   const char *s = \"bar\";\n-  int i;\t\t\t/* { dg-error \"previous declaration\" } */\n+  int i;\t\t\t/* { dg-message \"note: previous declaration\" } */\n   int size = 2;\n   int i = foo (s, s + size);\t/* { dg-error \"redeclaration of\" } */\n }"}, {"sha": "58d212f967516b1f50ce344402d8cbede35691b7", "filename": "gcc/testsuite/gcc.dg/noncompile/label-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -28,15 +28,15 @@ void c(void)\n /* can't have two labels with the same name in the same function */\n void d(void)\n {\n- l: dummy();  /* { dg-error \"previous definition\" \"prev def same scope\" } */\n+ l: dummy();  /* { dg-message \"note: previous definition\" \"prev def same scope\" } */\n  l: dummy();  /* { dg-error \"duplicate label\" \"dup label same scope\" } */\n  goto l;\n }\n \n /* even at different scopes */\n void e(void)\n {\n- l: dummy();\t/* { dg-error \"previous definition\"  \"prev def diff scope\" } */\n+ l: dummy();\t/* { dg-message \"note: previous definition\"  \"prev def diff scope\" } */\n   {\n   l: dummy();\t/* { dg-error \"duplicate label\" \"dup label diff scope\" } */\n   }\n@@ -150,7 +150,7 @@ void m(void)\n \n void n(void)\n {\n-  __label__ l; /* { dg-error \"previous declaration\" \"outer label decl\" } */\n+  __label__ l; /* { dg-message \"note: previous declaration\" \"outer label decl\" } */\n   void nest(void)\n     {\n     l: goto l;  /* { dg-error \"duplicate label\" \"inner label defn\" } */"}, {"sha": "6d4def7ea192e213ceb10ed1cd589b1c2dec9b4c", "filename": "gcc/testsuite/gcc.dg/noncompile/label-lineno-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-lineno-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-lineno-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-lineno-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -4,7 +4,7 @@\n void\n foo(int i)\n {\n- my_label: /* { dg-error \"previous definition\" \"prev label\" } */\n+ my_label: /* { dg-message \"note: previous definition\" \"prev label\" } */\n \n   i++;\n "}, {"sha": "732db0098dbbec7e8570b58cab3b3af6a656ec58", "filename": "gcc/testsuite/gcc.dg/noncompile/redecl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fredecl-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -4,6 +4,6 @@\n int\n foo ()\n {\n-  int bar; /* { dg-error \"previous.*decl\" \"previous.*decl\" } */\n+  int bar; /* { dg-message \"note: previous.*decl\" \"previous.*decl\" } */\n   volatile int bar; /* { dg-error \"conflicting type qualifiers\" \"conflicting type qualifiers\" } */\n }"}, {"sha": "7d76287b0d187736d3293786a8eb21e5d8d6c91f", "filename": "gcc/testsuite/gcc.dg/old-style-then-proto-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -7,38 +7,38 @@\n void f1() {}\n void f1(void); /* { dg-warning \"prototype for 'f1' follows non-prototype definition\" } */\n \n-void f2() {} /* { dg-error \"previous definition of 'f2' was here\" } */\n+void f2() {} /* { dg-message \"note: previous definition of 'f2' was here\" } */\n void f2(int); /* { dg-error \"prototype for 'f2' declares more arguments than previous old-style definition\" } */\n \n-void f3(a) int a; {} /* { dg-error \"previous definition of 'f3' was here\" } */\n+void f3(a) int a; {} /* { dg-message \"note: previous definition of 'f3' was here\" } */\n void f3(void); /* { dg-error \"prototype for 'f3' declares fewer arguments than previous old-style definition\" } */\n \n void f4(a) int a; {}\n void f4(int); /* { dg-warning \"prototype for 'f4' follows non-prototype definition\" } */\n \n-void f5(a) int a; {} /* { dg-error \"previous definition of 'f5' was here\" } */\n+void f5(a) int a; {} /* { dg-message \"note: previous definition of 'f5' was here\" } */\n void f5(int, int); /* { dg-error \"prototype for 'f5' declares more arguments than previous old-style definition\" } */\n \n-void f6(a) int a; {} /* { dg-error \"previous definition of 'f6' was here\" } */\n+void f6(a) int a; {} /* { dg-message \"note: previous definition of 'f6' was here\" } */\n void f6(int, ...); /* { dg-error \"conflicting types for 'f6'\" } */\n \n-void f7(a, b) int a, b; {} /* { dg-error \"previous definition of 'f7' was here\" } */\n+void f7(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f7' was here\" } */\n void f7(int); /* { dg-error \"prototype for 'f7' declares fewer arguments than previous old-style definition\" } */\n \n-void f8(a, b) int a, b; {} /* { dg-error \"previous definition of 'f8' was here\" } */\n+void f8(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f8' was here\" } */\n void f8(int, ...); /* { dg-error \"conflicting types for 'f8'\" } */\n \n void f9(a, b) int a, b; {}\n void f9(int, int); /* { dg-warning \"prototype for 'f9' follows non-prototype definition\" } */\n \n-void f10(a, b) int a, b; {} /* { dg-error \"previous definition of 'f10' was here\" } */\n+void f10(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f10' was here\" } */\n void f10(int, long); /* { dg-error \"prototype for 'f10' declares argument 2 with incompatible type\" } */\n \n-void f11(a, b) int a, b; {} /* { dg-error \"previous definition of 'f11' was here\" } */\n+void f11(a, b) int a, b; {} /* { dg-message \"note: previous definition of 'f11' was here\" } */\n void f11(long, int); /* { dg-error \"prototype for 'f11' declares argument 1 with incompatible type\" } */\n \n void f12(a, b) const int a; volatile int b; {}\n void f12(volatile int, const int); /* { dg-warning \"prototype for 'f12' follows non-prototype definition\" } */\n \n-void f13(a) const int a[2][2]; {} /* { dg-error \"previous definition of 'f13' was here\" } */\n+void f13(a) const int a[2][2]; {} /* { dg-message \"note: previous definition of 'f13' was here\" } */\n void f13(volatile int [2][2]); /* { dg-error \"prototype for 'f13' declares argument 1 with incompatible type\" } */"}, {"sha": "8f62e122b8a0fe4075aae8ec01e5e4f317b6f0b2", "filename": "gcc/testsuite/gcc.dg/parm-mismatch-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparm-mismatch-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -4,15 +4,15 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void f0(); /* { dg-error \"previous declaration of 'f0' was here\" } */\n+void f0(); /* { dg-message \"note: previous declaration of 'f0' was here\" } */\n void f0(int, ...); /* { dg-error \"conflicting types for 'f0'\" } */\n /* { dg-message \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 8 } */\n-void f1(int, ...); /* { dg-error \"previous declaration of 'f1' was here\" } */\n+void f1(int, ...); /* { dg-message \"note: previous declaration of 'f1' was here\" } */\n void f1(); /* { dg-error \"conflicting types for 'f1'\" } */\n /* { dg-message \"note: a parameter list with an ellipsis can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 11 } */\n-void f2(); /* { dg-error \"previous declaration of 'f2' was here\" } */\n+void f2(); /* { dg-message \"note: previous declaration of 'f2' was here\" } */\n void f2(char); /* { dg-error \"conflicting types for 'f2'\" } */\n /* { dg-message \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 14 } */\n-void f3(char); /* { dg-error \"previous declaration of 'f3' was here\" } */\n+void f3(char); /* { dg-message \"note: previous declaration of 'f3' was here\" } */\n void f3(); /* { dg-error \"conflicting types for 'f3'\" } */\n /* { dg-message \"note: an argument type that has a default promotion can't match an empty parameter name list declaration\" \"note\" { target *-*-* } 17 } */"}, {"sha": "4f900d7ea195816e4d2179bb0d23c49109a7b412", "filename": "gcc/testsuite/gcc.dg/pr15360-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15360-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -15,10 +15,10 @@ extern int b = 1; /* { dg-warning \"initialized and declared\" \"extern init warnin\n static int b;\n static int b;\n \n-static int c; /* { dg-error \"previous declaration\" \"\" } */\n+static int c; /* { dg-message \"note: previous declaration\" \"\" } */\n int c; /* { dg-error \"non-static\" \"correct error\" } */\n \n-static int d; /* { dg-error \"previous declaration\" \"\" } */\n+static int d; /* { dg-message \"note: previous declaration\" \"\" } */\n int d = 1; /* { dg-error \"non-static\" \"correct error\" } */\n \n void foo (void) { extern int e = 1; } /* { dg-error \"has both\" \"extern init in function\" } */"}, {"sha": "245b59e0ba8710141a420885aa6b43e75f6e1f20", "filename": "gcc/testsuite/gcc.dg/pr27953.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,4 +5,4 @@ void foo(struct A a) {}  /* { dg-warning \"declared inside parameter list\" } */\n /* { dg-error \"incomplete type\" \"\" { target *-*-* } 3 } */\n \n void foo() {}            /* { dg-error \"redefinition\" } */\n-/* { dg-error \"previous definition\" \"\" { target *-*-* } 3 } */\n+/* { dg-message \"note: previous definition\" \"\" { target *-*-* } 3 } */"}, {"sha": "4ce4ac589f1be8b44998e2efd357c17128d0b34f", "filename": "gcc/testsuite/gcc.dg/pr35899.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,7 +5,7 @@\n int\n foo (void)\n {\n-  int a = bar ();\t/* { dg-warning \"previous implicit declaration\" } */\n+  int a = bar ();\t/* { dg-message \"note: previous implicit declaration\" } */\n   return a;\n }\n "}, {"sha": "63438307ed3f5129700f46becef0c4bef255a6e0", "filename": "gcc/testsuite/gcc.dg/pr36901-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+#include \"pr36901-system.h\"\n+void foo(void)\n+{\n+  int s = sc;\n+}"}, {"sha": "cee367d778dca2dc00d53d0673d592b1f30a3731", "filename": "gcc/testsuite/gcc.dg/pr36901-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors -w\" } */\n+#include \"pr36901.h\"\n+void foo(void)\n+{\n+  int s = sc;\n+}"}, {"sha": "50e0d7207a1fbb4c482f71fad7223006beaf5f00", "filename": "gcc/testsuite/gcc.dg/pr36901-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-3.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+#include \"pr36901.h\"\n+void foo(void)\n+{\n+  int s = sc;\n+}\n+/* { dg-message \"file included\" \"In file included\" { target *-*-* } 0 } */\n+/* { dg-warning \"overflow\" \"overflow\" { target *-*-* } 0 } */\n+/* { dg-error \"overflow\" \"overflow\" { target *-*-* } 0 } */"}, {"sha": "319c2c241035f49d0f6d664375783152138cc6d9", "filename": "gcc/testsuite/gcc.dg/pr36901-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-4.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors -Wsystem-headers\" } */\n+#include \"pr36901-system.h\"\n+void foo(void)\n+{\n+  int s = sc;\n+}\n+/* { dg-message \"from \" \"In file included\" { target *-*-* } 0 } */\n+/* { dg-warning \"overflow\" \"overflow\" { target *-*-* } 0 } */\n+/* { dg-error \"overflow\" \"overflow\" { target *-*-* } 0 } */\n+/* { dg-error \"#include_next is a GCC extension\" \"#include_next\" { target *-*-* } 0 } */"}, {"sha": "6cc1e803d0ab81d1f6dbb16f82180cb3ff945dad", "filename": "gcc/testsuite/gcc.dg/pr36901-system.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-system.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-system.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901-system.h?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -0,0 +1,3 @@\n+#pragma GCC system_header\n+#include \"pr36901.h\"\n+"}, {"sha": "aff2cb39c6f534cd3984ab3d5841256916ecbdaa", "filename": "gcc/testsuite/gcc.dg/pr36901.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr36901.h?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -0,0 +1,2 @@\n+#include <limits.h>\n+static int sc = INT_MAX + 1; "}, {"sha": "62d0209b08f946c6f434cdedaa3a029ac344355c", "filename": "gcc/testsuite/gcc.dg/proto-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fproto-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,5 +1,5 @@\n /* PR c/28502 */\n /* { dg-do compile } */\n \n-void foo() {}      /* { dg-error \"previous\" } */\n+void foo() {}      /* { dg-message \"note: previous\" } */\n void foo(void[]);  /* { dg-error \"array of voids\" } */"}, {"sha": "e65f86d547d42e986d8c8bac30e91566f28b251f", "filename": "gcc/testsuite/gcc.dg/qual-return-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-3.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -6,7 +6,7 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-int foo (); /* { dg-error \"previous declaration\" \"different qualifiers\" } */\n+int foo (); /* { dg-message \"note: previous declaration\" \"different qualifiers\" } */\n const int foo () { return 0; } /* { dg-error \"conflicting types\" \"different qualifiers\" } */\n \n void bar (void);"}, {"sha": "6a7d8faecafcfe319c9c7274681ea5a7c45c1c67", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -9,8 +9,8 @@\n \n /* Extern at function scope, clashing with extern at file scope */\n \n-extern int foo1;\t\t/* { dg-error \"previous\" } */\n-extern int bar1(int);\t\t/* { dg-error \"previous\" } */\n+extern int foo1;\t\t/* { dg-message \"note: previous\" } */\n+extern int bar1(int);\t\t/* { dg-message \"note: previous\" } */\n \n void test1(void)\n {\n@@ -22,8 +22,8 @@ void test1(void)\n \n void test2(void)\n {\n-  extern double foo2;\t\t/* { dg-error \"previous\" } */\n-  extern double bar2(double);\t/* { dg-error \"previous\" } */\n+  extern double foo2;\t\t/* { dg-message \"note: previous\" } */\n+  extern double bar2(double);\t/* { dg-message \"note: previous\" } */\n }\n \n extern int foo2;\t\t/* { dg-error \"conflict\" } */\n@@ -36,9 +36,9 @@ typedef float baz3;\t\t/* { dg-bogus } */\n \n void prime3(void)\n {\n-  extern int foo3;\t\t/* { dg-error \"previous\" } */\n-  extern int bar3(int);\t\t/* { dg-error \"previous\" } */\n-  extern int baz3;\t\t/* { dg-error \"previous\" } */\n+  extern int foo3;\t\t/* { dg-message \"note: previous\" } */\n+  extern int bar3(int);\t\t/* { dg-message \"note: previous\" } */\n+  extern int baz3;\t\t/* { dg-message \"note: previous\" } */\n }\n \n void test3(void)\n@@ -58,15 +58,15 @@ void prime4(void)\n void test4(void)\n {\n   extern double bar4(double);\t/* { dg-error \"conflict\" } */\n-/* { dg-error \"previous implicit declaration\" \"\" { target *-*-* } 55 } */\n+/* { dg-message \"note: previous implicit declaration\" \"\" { target *-*-* } 55 } */\n }\n \n /* Implicit decl, clashing with extern at previous function scope.  */\n \n void prime5(void)\n {\n   extern double bar5(double);\t/* { dg-message \"note: previous declaration\" \"\" } */\n-} /* { dg-error \"previous implicit declaration\" \"\" { target *-*-* } 68 } */\n+} /* { dg-message \"note: previous implicit declaration\" \"\" { target *-*-* } 68 } */\n \n void test5(void)\n {\n@@ -75,7 +75,7 @@ void test5(void)\n \n /* Extern then static, both at file scope.  */\n \n-extern int test6(int);\t\t/* { dg-error \"previous\" \"\" } */\n+extern int test6(int);\t\t/* { dg-message \"note: previous\" \"\" } */\n static int test6(int x)\t\t/* { dg-error \"follows non-static\" } */\n { return x; }\n \n@@ -84,7 +84,7 @@ static int test6(int x)\t\t/* { dg-error \"follows non-static\" } */\n \n void prime7(void)\n {\n-  extern int test7(int);\t/* { dg-error \"previous\" \"\" } */\n+  extern int test7(int);\t/* { dg-message \"note: previous\" \"\" } */\n }\n \n static int test7(int x)\t\t/* { dg-error \"follows non-static\" } */\n@@ -94,7 +94,7 @@ static int test7(int x)\t\t/* { dg-error \"follows non-static\" } */\n \n void prime8(void)\n {\n-  test8();\t\t\t/* { dg-error \"previous\" \"\" } */\n+  test8();\t\t\t/* { dg-message \"note: previous\" \"\" } */\n                                 /* { dg-warning \"implicit\" \"implicit\" { target *-*-* } 97 } */\n }\n "}, {"sha": "5540e40503cd908f11d355a5c6a8275056f4113d", "filename": "gcc/testsuite/gcc.dg/redecl-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-11.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n int f(int (*)[]);\n-void g() { int f(int (*)[2]); } /* { dg-error \"previous declaration of 'f' was here\" } */\n+void g() { int f(int (*)[2]); } /* { dg-message \"note: previous declaration of 'f' was here\" } */\n int f(int (*)[3]); /* { dg-error \"conflicting types for 'f'\" } */"}, {"sha": "711b8a3fcaed01ce22cdff7208cf5b3670577e85", "filename": "gcc/testsuite/gcc.dg/redecl-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-12.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n extern int a[];\n-void f(void) { extern int a[]; extern int a[10]; } /* { dg-error \"previous declaration of 'a' was here\" } */\n+void f(void) { extern int a[]; extern int a[10]; } /* { dg-message \"note: previous declaration of 'a' was here\" } */\n extern int a[5]; /* { dg-error \"conflicting types for 'a'\" } */"}, {"sha": "3f05d0fb168c5aed95e75f4e0138f39f4dd3b708", "filename": "gcc/testsuite/gcc.dg/redecl-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-13.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,5 +5,5 @@\n /* { dg-options \"\" } */\n \n extern int a[];\n-void f(void) { extern int a[10]; } /* { dg-error \"previous declaration of 'a' was here\" } */\n+void f(void) { extern int a[10]; } /* { dg-message \"note: previous declaration of 'a' was here\" } */\n extern int a[5]; /* { dg-error \"conflicting types for 'a'\" } */"}, {"sha": "d2f48bd79b2df42b336b2fd45d672ce7ad03ac8b", "filename": "gcc/testsuite/gcc.dg/redecl-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-15.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -7,7 +7,7 @@\n void\n f (void)\n {\n-  g(); /* { dg-warning \"previous implicit declaration of 'g' was here\" } */\n+  g(); /* { dg-message \"note: previous implicit declaration of 'g' was here\" } */\n   {\n     void g(); /* { dg-warning \"conflicting types for 'g'\" } */\n   }"}, {"sha": "560b373fb3f1643727ca52842be4eb1fe0d71b70", "filename": "gcc/testsuite/gcc.dg/redecl-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-16.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -14,5 +14,5 @@ f (void)\n {\n   extern IA5P a[];\n }\n-IAP a[] = { 0 };\t/* { dg-error \"previous definition\" } */\n+IAP a[] = { 0 };\t/* { dg-message \"note: previous definition\" } */\n extern IA10P a[];\t/* { dg-error \"conflicting types\" } */"}, {"sha": "fa0d5e447858dab51abe6dbc15913a4aee08243a", "filename": "gcc/testsuite/gcc.dg/redecl-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -7,56 +7,56 @@\n void\n fa0 (void)\n {\n-  int a0; /* { dg-error \"previous declaration\" } */\n+  int a0; /* { dg-message \"note: previous declaration\" } */\n   int a0; /* { dg-error \"redeclaration\" } */\n }\n \n void\n fa1 (void)\n {\n-  int a1; /* { dg-error \"previous declaration\" } */\n+  int a1; /* { dg-message \"note: previous declaration\" } */\n   static int a1; /* { dg-error \"redeclaration\" } */\n }\n \n void\n fa2 (void)\n {\n-  int a2; /* { dg-error \"previous declaration\" } */\n+  int a2; /* { dg-message \"note: previous declaration\" } */\n   extern int a2; /* { dg-error \"follows declaration with no linkage\" } */\n }\n \n void\n fa3 (void)\n {\n-  static int a3; /* { dg-error \"previous declaration\" } */\n+  static int a3; /* { dg-message \"note: previous declaration\" } */\n   int a3; /* { dg-error \"redeclaration\" } */\n }\n \n void\n fa4 (void)\n {\n-  static int a4; /* { dg-error \"previous declaration\" } */\n+  static int a4; /* { dg-message \"note: previous declaration\" } */\n   static int a4; /* { dg-error \"redeclaration\" } */\n }\n \n void\n fa5 (void)\n {\n-  static int a5; /* { dg-error \"previous declaration\" } */\n+  static int a5; /* { dg-message \"note: previous declaration\" } */\n   extern int a5; /* { dg-error \"follows declaration with no linkage\" } */\n }\n \n void\n fa6 (void)\n {\n-  extern int a6; /* { dg-error \"previous declaration\" } */\n+  extern int a6; /* { dg-message \"note: previous declaration\" } */\n   int a6; /* { dg-error \"follows extern declaration\" } */\n }\n \n void\n fa7 (void)\n {\n-  extern int a7; /* { dg-error \"previous declaration\" } */\n+  extern int a7; /* { dg-message \"note: previous declaration\" } */\n   static int a7; /* { dg-error \"follows extern declaration\" } */\n }\n "}, {"sha": "15b1f8c8ec4b9ed8d6fe2caeab021915f555ca1f", "filename": "gcc/testsuite/gcc.dg/redecl-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-5.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -7,7 +7,7 @@\n void\n f (void)\n {\n-  long z(); /* { dg-error \"previous implicit declaration\" } */\n+  long z(); /* { dg-message \"note: previous implicit declaration\" } */\n }\n \n void"}, {"sha": "1a7994c69e77012b0464265d37be17416b270de2", "filename": "gcc/testsuite/gcc.dg/tls/diag-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-3.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1,10 +1,10 @@\n /* Report invalid extern and __thread combinations.  */\n /* { dg-require-effective-target tls } */\n \n-extern int j;\t\t/* { dg-error \"previous declaration\" } */\n+extern int j;\t\t/* { dg-message \"note: previous declaration\" } */\n __thread int j;\t\t/* { dg-error \"follows non-thread-local\" } */\n \n-extern __thread int i;\t/* { dg-error \"previous declaration\" } */\n+extern __thread int i;\t/* { dg-message \"note: previous declaration\" } */\n int i;\t\t\t/* { dg-error \"follows thread-local\" } */\n \n extern __thread int k;\t/* This is fine.  */"}, {"sha": "09fbb4d9722c36d218749320bf032a76e73bd250", "filename": "gcc/testsuite/gcc.dg/transparent-union-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-2.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,14 +5,14 @@\n typedef union { int *i; long *l; } U\n   __attribute__((transparent_union));\n \n-extern void f0 (U);\t\t/* { dg-error \"previous declaration\" } */\n+extern void f0 (U);\t\t/* { dg-message \"note: previous declaration\" } */\n extern void f0 (void *);\t/* { dg-error \"conflicting types\" } */\n \n-extern void f1 (U);\t\t/* { dg-error \"previous declaration\" } */\n+extern void f1 (U);\t\t/* { dg-message \"note: previous declaration\" } */\n extern void f1 (unsigned long);\t/* { dg-error \"conflicting types\" } */\n \n-extern void f2 (void *);\t/* { dg-error \"previous declaration\" } */\n+extern void f2 (void *);\t/* { dg-message \"note: previous declaration\" } */\n extern void f2 (U);\t\t/* { dg-error \"conflicting types\" } */\n \n-extern void f3 (unsigned long);\t/* { dg-error \"previous declaration\" } */\n+extern void f3 (unsigned long);\t/* { dg-message \"note: previous declaration\" } */\n extern void f3 (U);\t\t/* { dg-error \"conflicting types\" } */"}, {"sha": "016f3dda6f329999c25fa4ff955d870a651ff149", "filename": "gcc/testsuite/gcc.dg/visibility-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvisibility-7.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -5,7 +5,7 @@\n \n extern int \n __attribute__((visibility (\"hidden\")))\n-xyzzy; /* { dg-warning \"previous declaration\" \"\" } */\n+xyzzy; /* { dg-message \"note: previous declaration\" \"\" } */\n \n int \n __attribute__((visibility (\"protected\")))"}, {"sha": "318b2f32ca22d1f00aff26a8a2b6f7701d09c1e9", "filename": "gcc/testsuite/gcc.dg/wtr-static-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wtraditional\" } */\n \n-static void testfunc1(void); /* { dg-warning \"previous declaration\" } */\n+static void testfunc1(void); /* { dg-message \"note: previous declaration\" } */\n void testfunc1() {} /* { dg-warning \"non-static.*follows static\" \"non-static follows static\" } */\n \n # 11 \"sys-header.h\" 3"}, {"sha": "9db191c7275129b2ad29c4081f64ac4bb6646400", "filename": "gcc/testsuite/gcc.target/i386/regparm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fregparm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fregparm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fregparm.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-W -Wall\" } */\n \n /* Verify that GCC correctly detects non-matching regparm attributes.  */\n-int __attribute__((regparm(3))) f (void);  /* { dg-error \"previous\" } */\n+int __attribute__((regparm(3))) f (void);  /* { dg-message \"note: previous\" } */\n \n int __attribute__((regparm(2))) f (void) { /* { dg-error \"conflicting\" } */\n   return 0;"}, {"sha": "ef497a4416147810fe67443795a1d536a6eb2600", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-macros.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-macros.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -55,9 +55,9 @@ _Pragma (\"__vector\")\n /* { dg-warning \"redefined\" \"pixel redefined\"     { target *-*-* } 48 } */\n /* { dg-warning \"redefined\" \"bool redefined\"      { target *-*-* } 49 } */\n \n-/* { dg-warning \"previous\"  \"prev __vector defn\"  { target *-*-* } 24 } */\n-/* { dg-warning \"previous\"  \"prev __pixel defn\"   { target *-*-* } 27 } */\n-/* { dg-warning \"previous\"  \"prev __bool defn\"    { target *-*-* } 30 } */\n-/* { dg-warning \"previous\"  \"prev vector defn\"    { target *-*-* } 33 } */\n-/* { dg-warning \"previous\"  \"prev pixel defn\"     { target *-*-* } 36 } */\n-/* { dg-warning \"previous\"  \"prev bool defn\"      { target *-*-* } 39 } */\n+/* { dg-message \"note: previous\"  \"prev __vector defn\"  { target *-*-* } 24 } */\n+/* { dg-message \"note: previous\"  \"prev __pixel defn\"   { target *-*-* } 27 } */\n+/* { dg-message \"note: previous\"  \"prev __bool defn\"    { target *-*-* } 30 } */\n+/* { dg-message \"note: previous\"  \"prev vector defn\"    { target *-*-* } 33 } */\n+/* { dg-message \"note: previous\"  \"prev pixel defn\"     { target *-*-* } 36 } */\n+/* { dg-message \"note: previous\"  \"prev bool defn\"      { target *-*-* } 39 } */"}, {"sha": "76718a1eeeff75ac112835f6142f096d8a3675ee", "filename": "gcc/toplev.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -56,19 +56,17 @@ extern void _fatal_insn (const char *, const_rtx, const char *, int, const char\n #endif\n extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void warning0 (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n-extern void warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void warning_at (location_t, int, const char *, ...)\n+extern bool warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern bool warning_at (location_t, int, const char *, ...)\n     ATTRIBUTE_GCC_DIAG(3,4);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void pedwarn0 (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n /* Pass one of the OPT_W* from options.h as the first parameter.  */\n-extern void pedwarn (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void permerror (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void permerror_at (location_t, const char *, ...)\n+extern bool pedwarn (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern bool permerror (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern bool permerror_at (location_t, const char *, ...)\n      ATTRIBUTE_GCC_DIAG(2,3);\n extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);"}, {"sha": "4c7592e6f184fe941beed6a7f28b152a542ffed8", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71205d170c59ae70323aa7d0b93ff5c13044fd57/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=71205d170c59ae70323aa7d0b93ff5c13044fd57", "patch": "@@ -1414,15 +1414,17 @@ warn_uninit (tree t, const char *gmsgid, void *data)\n   location = (context != NULL && gimple_has_location (context))\n \t     ? gimple_location (context)\n \t     : DECL_SOURCE_LOCATION (var);\n-  warning_at (location, OPT_Wuninitialized, gmsgid, var);\n   xloc = expand_location (location);\n   floc = expand_location (DECL_SOURCE_LOCATION (cfun->decl));\n-  if (xloc.file != floc.file\n-      || xloc.line < floc.line\n-      || xloc.line > LOCATION_LINE (cfun->function_end_locus))\n-    inform (\"%J%qD was declared here\", var, var);\n+  if (warning_at (location, OPT_Wuninitialized, gmsgid, var))\n+    {\n+      TREE_NO_WARNING (var) = 1;\n \n-  TREE_NO_WARNING (var) = 1;\n+      if (xloc.file != floc.file\n+\t  || xloc.line < floc.line\n+\t  || xloc.line > LOCATION_LINE (cfun->function_end_locus))\n+\tinform (\"%J%qD was declared here\", var, var);\n+    }\n }\n \n struct walk_data {"}]}