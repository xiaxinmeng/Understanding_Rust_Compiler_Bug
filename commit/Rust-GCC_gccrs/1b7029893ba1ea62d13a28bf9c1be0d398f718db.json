{"sha": "1b7029893ba1ea62d13a28bf9c1be0d398f718db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3MDI5ODkzYmExZWE2MmQxM2EyOGJmOWMxYmUwZDM5OGY3MThkYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T18:16:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T18:16:17Z"}, "message": "Fix building recover thunks which return multiple values.\n\nFrom-SVN: r168476", "tree": {"sha": "c4c70746e46a77bfc8fe0917866cc26477dbdaab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4c70746e46a77bfc8fe0917866cc26477dbdaab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b7029893ba1ea62d13a28bf9c1be0d398f718db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7029893ba1ea62d13a28bf9c1be0d398f718db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7029893ba1ea62d13a28bf9c1be0d398f718db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7029893ba1ea62d13a28bf9c1be0d398f718db/comments", "author": null, "committer": null, "parents": [{"sha": "d996ef705ad98d967f6dae3d6198a09b3ba61c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d996ef705ad98d967f6dae3d6198a09b3ba61c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d996ef705ad98d967f6dae3d6198a09b3ba61c6e"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "1b005497c8bd800d108558bf4a24660b6dc1abb2", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7029893ba1ea62d13a28bf9c1be0d398f718db/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7029893ba1ea62d13a28bf9c1be0d398f718db/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=1b7029893ba1ea62d13a28bf9c1be0d398f718db", "patch": "@@ -2062,7 +2062,7 @@ Build_recover_thunks::function(Named_object* orig_no)\n       for (Typed_identifier_list::const_iterator p = orig_results->begin();\n \t   p != orig_results->end();\n \t   ++p)\n-\tnew_results->push_back(*p);\n+\tnew_results->push_back(Typed_identifier(\"\", p->type(), p->location()));\n     }\n \n   Function_type *new_fntype = Type::make_function_type(NULL, new_params,\n@@ -2120,15 +2120,22 @@ Build_recover_thunks::function(Named_object* orig_no)\n     }\n   args->push_back(this->can_recover_arg(location));\n \n-  Expression* call = Expression::make_call(fn, args, false, location);\n+  Call_expression* call = Expression::make_call(fn, args, false, location);\n \n   Statement* s;\n   if (orig_fntype->results() == NULL || orig_fntype->results()->empty())\n     s = Statement::make_statement(call);\n   else\n     {\n       Expression_list* vals = new Expression_list();\n-      vals->push_back(call);\n+      size_t rc = orig_fntype->results()->size();\n+      if (rc == 1)\n+\tvals->push_back(call);\n+      else\n+\t{\n+\t  for (size_t i = 0; i < rc; ++i)\n+\t    vals->push_back(Expression::make_call_result(call, i));\n+\t}\n       s = Statement::make_return_statement(new_func->type()->results(),\n \t\t\t\t\t   vals, location);\n     }"}]}