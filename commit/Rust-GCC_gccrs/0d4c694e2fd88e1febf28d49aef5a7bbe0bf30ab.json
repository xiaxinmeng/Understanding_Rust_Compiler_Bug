{"sha": "0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0YzY5NGUyZmQ4OGUxZmViZjI4ZDQ5YWVmNWE3YmJlMGJmMzBhYg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-01-28T06:29:10Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-01-28T06:29:10Z"}, "message": "pr67989.C: Remove ARM-specific option.\n\n2016-01-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/testsuite/\n    * g++.dg/pr67989.C: Remove ARM-specific option.\n    * gcc.target/arm/pr67989.C: New file.\n\nFrom-SVN: r232913", "tree": {"sha": "b4b5ec570e7d7f1d2bd6153e673a0af285caf925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b5ec570e7d7f1d2bd6153e673a0af285caf925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b4f7b944d1f1a45948b10d4d9ba1169cc187016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4f7b944d1f1a45948b10d4d9ba1169cc187016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4f7b944d1f1a45948b10d4d9ba1169cc187016"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "c51ea9288c63344760b5c79dc43db9d1ea7ad122", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "patch": "@@ -1,3 +1,8 @@\n+2016-01-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* g++.dg/pr67989.C: Remove ARM-specific option.\n+\t* gcc.target/arm/pr67989.C: New file.\n+\n 2016-01-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/torture/pr68264.c: Disable log1p test for glibc < 2.22"}, {"sha": "c3023557d31a21aead717fd58483c82e3e74da95", "filename": "gcc/testsuite/g++.dg/pr67989.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67989.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67989.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67989.C?ref=0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n /* { dg-options \"-std=c++11 -O2\" } */\n-/* { dg-additional-options \"-marm -march=armv4t\" { target arm*-*-* } } */\n \n __extension__ typedef unsigned long long int uint64_t;\n namespace std __attribute__ ((__visibility__ (\"default\")))"}, {"sha": "0006924e24f698711e1e501d09b5098049522ad6", "filename": "gcc/testsuite/gcc.target/arm/pr67989.C", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr67989.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr67989.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr67989.C?ref=0d4c694e2fd88e1febf28d49aef5a7bbe0bf30ab", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11 -O2\" } */\n+/* { dg-require-effective-target arm_arch_v4t_ok } */\n+/* { dg-add-options arm_arch_v4t } */\n+/* { dg-additional-options \"-marm\" } */\n+\n+/* Duplicate version of the test in g++.dg to be able to run this test only if\n+   ARMv4t in ARM execution state can be targetted.  Newer architecture don't\n+   expose the bug this testcase was written for.  */\n+\n+\n+__extension__ typedef unsigned long long int uint64_t;\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+  typedef enum memory_order\n+  {\n+    memory_order_seq_cst\n+  } memory_order;\n+}\n+\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+  template < typename _Tp > struct atomic\n+  {\n+    static constexpr int _S_min_alignment\n+      = (sizeof (_Tp) & (sizeof (_Tp) - 1)) || sizeof (_Tp) > 16\n+      ? 0 : sizeof (_Tp);\n+    static constexpr int _S_alignment\n+      = _S_min_alignment > alignof (_Tp) ? _S_min_alignment : alignof (_Tp);\n+      alignas (_S_alignment) _Tp _M_i;\n+    operator  _Tp () const noexcept\n+    {\n+      return load ();\n+    }\n+    _Tp load (memory_order __m = memory_order_seq_cst) const noexcept\n+    {\n+      _Tp tmp;\n+        __atomic_load (&_M_i, &tmp, __m);\n+    }\n+  };\n+}\n+\n+namespace lldb_private\n+{\n+  namespace imp\n+  {\n+  }\n+  class Address;\n+}\n+namespace lldb\n+{\n+  typedef uint64_t addr_t;\n+  class SBSection\n+  {\n+  };\n+  class SBAddress\n+  {\n+    void SetAddress (lldb::SBSection section, lldb::addr_t offset);\n+      lldb_private::Address & ref ();\n+  };\n+}\n+namespace lldb_private\n+{\n+  class Address\n+  {\n+  public:\n+    const Address & SetOffset (lldb::addr_t offset)\n+    {\n+      bool changed = m_offset != offset;\n+    }\n+    std::atomic < lldb::addr_t > m_offset;\n+  };\n+}\n+\n+using namespace lldb;\n+using namespace lldb_private;\n+void\n+SBAddress::SetAddress (lldb::SBSection section, lldb::addr_t offset)\n+{\n+  Address & addr = ref ();\n+  addr.SetOffset (offset);\n+}"}]}