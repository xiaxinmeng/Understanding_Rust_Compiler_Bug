{"sha": "1d3d8fff365549b74d58dde19588759953346920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzZDhmZmYzNjU1NDliNzRkNThkZGUxOTU4ODc1OTk1MzM0NjkyMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-05-05T17:22:02Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-05-05T17:22:02Z"}, "message": "testsuite_visualization.h: Move contents into...\n\n\n2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/testsuite_visualization.h: Move contents into...\n\t* testsuite/util/testsuite_performance.h: ...here.\n\t* testsuite/util/testsuite_common_types.h: Move\n\tperformance-related test infrastructure into\n\ttestsuite_performance.\n\t* testsuite/performance/25_algorithms/search_n.cc: Fix includes.\n\t* testsuite/performance/23_containers/find/map.cc: Same.\n\t* testsuite/performance/23_containers/create/map.cc: Same.\n\t* testsuite/performance/23_containers/insert_erase/associative.cc: Same.\n\t* testsuite/performance/23_containers/insert/sequence.cc: Same.\n\t* testsuite/performance/23_containers/insert/associative.cc: Same.\n\t* testsuite/performance/23_containers/create_from_sorted/set.cc: Same.\n\t* testsuite/performance/23_containers/index/map.cc: Same.\n\t* testsuite/performance/23_containers/insert_from_sorted/set.cc: Same.\n\t* testsuite/performance/23_containers/create_sort/list.cc: Same.\n\t* testsuite/performance/23_containers/sort_search/list.cc: Same.\n\t* testsuite/performance/23_containers/producer_consumer/sequence.cc:\n\tSame.\n\t* testsuite/performance/23_containers/producer_consumer/associative.cc:\n\tSame.\n\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n\nFrom-SVN: r134949", "tree": {"sha": "746ae84ebe415264b227c9df47decae6356f1fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/746ae84ebe415264b227c9df47decae6356f1fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3d8fff365549b74d58dde19588759953346920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3d8fff365549b74d58dde19588759953346920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3d8fff365549b74d58dde19588759953346920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3d8fff365549b74d58dde19588759953346920/comments", "author": null, "committer": null, "parents": [{"sha": "ce72d1aa87e92f05b076bbfe57024918380904cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce72d1aa87e92f05b076bbfe57024918380904cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce72d1aa87e92f05b076bbfe57024918380904cc"}], "stats": {"total": 558, "additions": 272, "deletions": 286}, "files": [{"sha": "ff9ac66e3949addba89eaeffb5662903f3ccfe18", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -1,3 +1,29 @@\n+2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/testsuite_visualization.h: Move contents into...\n+\t* testsuite/util/testsuite_performance.h: ...here.\n+\t* testsuite/util/testsuite_common_types.h: Move\n+\tperformance-related test infrastructure into\n+\ttestsuite_performance.\n+\t* testsuite/performance/25_algorithms/search_n.cc: Fix includes.\n+\t* testsuite/performance/23_containers/find/map.cc: Same.\n+\t* testsuite/performance/23_containers/create/map.cc: Same.\n+\t* testsuite/performance/23_containers/insert_erase/associative.cc: Same.\n+\t* testsuite/performance/23_containers/insert/sequence.cc: Same.\n+\t* testsuite/performance/23_containers/insert/associative.cc: Same.\n+\t* testsuite/performance/23_containers/create_from_sorted/set.cc: Same.\n+\t* testsuite/performance/23_containers/index/map.cc: Same.\n+\t* testsuite/performance/23_containers/insert_from_sorted/set.cc: Same.\n+\t* testsuite/performance/23_containers/create_sort/list.cc: Same.\n+\t* testsuite/performance/23_containers/sort_search/list.cc: Same.\n+\t* testsuite/performance/23_containers/producer_consumer/sequence.cc:\n+\tSame.\n+\t* testsuite/performance/23_containers/producer_consumer/associative.cc:\n+\tSame.\n+\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n+\t\n 2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* 20_util/make_signed/requirements/typedefs-1.cc: Correct requirements."}, {"sha": "a22a558f26e90d63508a73cebc88bd748b7c988d", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -38,7 +38,7 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"within this context\" \"\" { target *-*-* } 310 } \n+// { dg-error \"within this context\" \"\" { target *-*-* } 309 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1750 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1782 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1799 }"}, {"sha": "49125182ebb4a71bc20d69e8ce7e578058e0f5ee", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -38,7 +38,7 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"within this context\" \"\" { target *-*-* } 333 } \n+// { dg-error \"within this context\" \"\" { target *-*-* } 332 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1749 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1781 } \n // { dg-error \"is private\" \"\" { target *-*-* } 1798 }"}, {"sha": "1ec20613a3a08a072b60eceb25897dfdb4d33367", "filename": "libstdc++-v3/testsuite/performance/23_containers/create/map.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -27,7 +27,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "c9259c0919cc586f6ab1037a89a3c3520cee8e21", "filename": "libstdc++-v3/testsuite/performance/23_containers/create_from_sorted/set.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "063075f3a97600df0b597919ccb4d731f21e1453", "filename": "libstdc++-v3/testsuite/performance/23_containers/create_sort/list.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "6d09d030a762c75c5a22b79c93a58a078e434904", "filename": "libstdc++-v3/testsuite/performance/23_containers/find/map.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -27,7 +27,7 @@\n \n // 2004-03-11  Dhruv Matani  <dhruvbird@HotPOP.com>\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "e08b7d8d4c57bf3f1898c3934b9e52e74f454af6", "filename": "libstdc++-v3/testsuite/performance/23_containers/index/map.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n // libstdc++/13823 recast for this testing framework\n template<typename Container, int Iter>"}, {"sha": "a047f9933ae70382f2625a2832a51acc37710edf", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/associative.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "41faac12eb9345bc01fde90d00d8798f1cabef69", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/sequence.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "f3a29d07a02dd8628762f9da575edfffded97f0f", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert_erase/associative.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "201edd9d189e29cd33b6ead26c06d8dcf0aecf77", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert_from_sorted/set.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "d0e1f2c6a8ed29aee62f1dabe4949920172f8d8e", "filename": "libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n typedef int test_type;\n "}, {"sha": "80c200f0df4e51a7707a55b96de14ecdcaad4bfb", "filename": "libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n typedef int test_type;\n "}, {"sha": "71f66fde76ab57560a5756b8d57b153c956fcd92", "filename": "libstdc++-v3/testsuite/performance/23_containers/sort_search/list.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -25,7 +25,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <testsuite_common_types.h>\n+#include <testsuite_performance.h>\n \n template<typename Container, int Iter>\n   void"}, {"sha": "814de7067993aed54d9f455bafed930ebb032882", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/search_n.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsearch_n.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsearch_n.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsearch_n.cc?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -53,15 +53,15 @@ main(void)\n       array[i] = (match != 0) ? 1 : 0;\n       if(--match < 0) match = rand() % (match_length - 1);\n     }\n-  test_container<int, forward_iterator_wrapper> fcon(array, array + length);\n+  __gnu_test::test_container<int, forward_iterator_wrapper> fcon(array, array + length);\n   start_counters(time, resource);\n   for(int i = 0; i < 100; i++)\n     search_n(fcon.begin(), fcon.end(), 10, 1);\n   stop_counters(time, resource);\n   report_performance(__FILE__, \"forward iterator\", time, resource);\n   clear_counters(time, resource);\n \n-  test_container<int, random_access_iterator_wrapper> rcon(array, array + length);\n+  __gnu_test::test_container<int, random_access_iterator_wrapper> rcon(array, array + length);\n   start_counters(time, resource);\n   for(int i = 0; i < 100; i++)\n     search_n(rcon.begin(), rcon.end(), 10, 1);"}, {"sha": "35bd907d8da46c95537bd53290056724c9b59713", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -31,7 +31,6 @@\n #ifndef _TESTSUITE_COMMON_TYPES_H\n #define _TESTSUITE_COMMON_TYPES_H 1\n \n-#include <testsuite_visualization.h>\n #include <ext/typelist.h>\n \n #include <ext/new_allocator.h>\n@@ -347,122 +346,4 @@ namespace __gnu_test\n   };\n \n } // namespace __gnu_test\n-\n-\n-// Function template, function objects for the tests.\n-template<typename TestType>\n-  struct value_type : public std::pair<const TestType, TestType>\n-  {\n-    inline value_type& operator++() \n-    { \n-      ++this->second;\n-      return *this; \n-    }\n-    \n-    inline operator TestType() const { return this->second; }\n-  };\n-\n-template<typename Container, int Iter>\n-  void\n-  do_loop();\n-\n-template<typename Container, int Iter>\n-  void*\n-  do_thread(void* p = NULL)\n-  {\n-    do_loop<Container, Iter>();\n-    return p;\n-  }\n-\n-template<typename Container, int Iter, bool Thread>\n-  void\n-  test_container(const char* filename)\n-  {\n-    using namespace __gnu_test;\n-    time_counter time;\n-    resource_counter resource;\n-    {\n-      start_counters(time, resource);\n-      if (!Thread)\n-\t{\n-\t  // No threads, so run 4x.\n-\t  do_loop<Container, Iter * 4>();\n-\t}\n-      else\n-\t{\n-#if defined (_GLIBCXX_GCC_GTHR_POSIX_H) && !defined (NOTHREAD)\n-\t  pthread_t  t1, t2, t3, t4;\n-\t  pthread_create(&t1, 0, &do_thread<Container, Iter>, 0);\n-\t  pthread_create(&t2, 0, &do_thread<Container, Iter>, 0);\n-\t  pthread_create(&t3, 0, &do_thread<Container, Iter>, 0);\n-\t  pthread_create(&t4, 0, &do_thread<Container, Iter>, 0);\n-\t  \n-\t  pthread_join(t1, NULL);\n-\t  pthread_join(t2, NULL);\n-\t  pthread_join(t3, NULL);\n-\t  pthread_join(t4, NULL);\n-#endif\n-\t}\n-      stop_counters(time, resource);\n-\n-      // Detailed text data.\n-      Container obj;\n-      int status;\n-      std::ostringstream comment;\n-      comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n-                                                 0, 0, &status);\n-      report_header(filename, comment.str());\n-      report_performance(\"\", \"\", time, resource);\n-\n-      // Detailed data for visualization.\n-      std::string vizfilename(filename);\n-      vizfilename += \".dat\";\n-      write_viz_data(time, vizfilename.c_str());\n-    }\n-  }\n-\n-template<bool Thread>\n-  struct test_sequence\n-  {\n-    test_sequence(const char* filename) : _M_filename(filename) { }\n-\n-    template<class Container>\n-      void\n-      operator()(Container)\n-      {\n-\tconst int i = 20000;\n-\ttest_container<Container, i, Thread>(_M_filename); \n-      }\n-\n-  private:\n-    const char* _M_filename;\n-  };\n-\n-\n-inline std::string::size_type\n-sequence_find_container(std::string& type)\n-{\n-  const std::string::size_type npos = std::string::npos;\n-  std::string::size_type n1 = type.find(\"vector\");\n-  std::string::size_type n2 = type.find(\"list\");\n-  std::string::size_type n3 = type.find(\"deque\");\n-  std::string::size_type n4 = type.find(\"string\");\n-  \n-  if (n1 != npos || n2 != npos || n3 != npos || n4 != npos)\n-    return std::min(std::min(n1, n2), std::min(n3, n4));\n-  else\n-    throw std::runtime_error(\"sequence_find_container not found\");\n-}\n-\n-inline std::string::size_type\n-associative_find_container(std::string& type)\n-{\n-  using std::string;\n-  string::size_type n1 = type.find(\"map\");\n-  string::size_type n2 = type.find(\"set\");\n-  if (n1 != string::npos || n2 != string::npos)\n-    return std::min(n1, n2);\n-  else\n-    throw std::runtime_error(\"associative_find_container not found\");\n-}\n #endif"}, {"sha": "246651812d854a6b64c32c5158b9f43c50ac5316", "filename": "libstdc++-v3/testsuite/util/testsuite_performance.h", "status": "modified", "additions": 230, "deletions": 1, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_performance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3d8fff365549b74d58dde19588759953346920/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_performance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_performance.h?ref=1d3d8fff365549b74d58dde19588759953346920", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing performance utilities for the C++ library testsuite.\n //\n-// Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,6 +38,11 @@\n #include <string>\n #include <fstream>\n #include <iomanip>\n+#include <typeinfo>\n+#include <stdexcept>\n+#include <sstream>\n+#include <cxxabi.h>\n+#include <testsuite_common_types.h>\n \n #ifdef __linux__\n #include <malloc.h>\n@@ -260,5 +265,229 @@ namespace __gnu_test\n   }\n } // namespace __gnu_test\n \n+\n+// Ah, we wish it wasn't so...\n+bool first_container = false;\n+extern const char* filename;\n+\n+typedef std::string::size_type (*callback_type) (std::string&);\n+\n+template<typename Container, int Iter, bool Thread>\n+  void\n+  write_viz_container(callback_type find_container, const char* filename)\n+  {\n+    typedef std::string string;\n+\n+    // Create title.\n+    {\n+      const char ws(' ');\n+      std::ostringstream title;\n+\t\n+      std::string titlename(filename);\n+      std::string::size_type n = titlename.find('.');\n+      if (n != string::npos)\n+\ttitlename = std::string(titlename.begin(), titlename.begin() + n);\n+\n+      title << titlename;\n+      title << ws;\n+      title << Iter;\n+      title << ws;\n+#if 0\n+      title << \"thread<\";\n+      std::boolalpha(title);\n+      title << Thread;\n+      title << '>';\n+#endif\n+      \n+      titlename += \".title\";\n+      std::ofstream titlefile(titlename.c_str());\n+      if (!titlefile.good())\n+\tthrow std::runtime_error(\"write_viz_data cannot open titlename\");\n+      titlefile << title.str() << std::endl;\n+    }\n+\n+    // Create compressed type name.\n+    Container obj;\n+    int status;\n+    std::string type(abi::__cxa_demangle(typeid(obj).name(), 0, 0, &status));\n+    \n+    // Extract fully-qualified typename.\n+    // Assumes \"set\" or \"map\" are uniquely determinate.\n+    string::iterator beg = type.begin();\n+    string::iterator end;\n+    string::size_type n = (*find_container)(type);\n+\n+    // Find start of fully-qualified name.\n+    // Assume map, find end.\n+    string::size_type nend = type.find('<', n);\n+    if (nend != string::npos)\n+      end = type.begin() + nend;\n+    \n+    string compressed_type;\n+    compressed_type += '\"';\n+    compressed_type += string(beg, end);\n+    compressed_type += '<';\n+#if 0\n+    typename Container::key_type v;\n+    compressed_type += typeid(v).name();\n+#else\n+    compressed_type += \"int\";\n+#endif\n+    compressed_type += \", A>\";\n+\n+    // XXX\n+    if (Thread == true)\n+      compressed_type += \" thread\";\n+    compressed_type += '\"';\n+\n+    std::ofstream file(filename, std::ios_base::app);\n+    if (!file.good())\n+      throw std::runtime_error(\"write_viz_data cannot open filename\");\n+    \n+    file << compressed_type;\n+    first_container = false;\n+  }\n+\n+\n+void\n+write_viz_data(__gnu_test::time_counter& time, const char* filename)\n+{\n+  std::ofstream file(filename, std::ios_base::app);  \n+  if (!file.good())\n+    throw std::runtime_error(\"write_viz_data cannot open filename\");\n+  \n+  // Print out score in appropriate column.\n+  const char tab('\\t');\n+  int score = time.real_time();\n+  file << tab << score;\n+}\n+\n+void\n+write_viz_endl(const char* filename)\n+{\n+  std::ofstream file(filename, std::ios_base::app);\n+  if (!file.good())\n+    throw std::runtime_error(\"write_viz_endl cannot open filename\");\n+  file << std::endl;\n+}\n+\n+\n+// Function template, function objects for the tests.\n+template<typename TestType>\n+  struct value_type : public std::pair<const TestType, TestType>\n+  {\n+    inline value_type& operator++() \n+    { \n+      ++this->second;\n+      return *this; \n+    }\n+    \n+    inline operator TestType() const { return this->second; }\n+  };\n+\n+template<typename Container, int Iter>\n+  void\n+  do_loop();\n+\n+template<typename Container, int Iter>\n+  void*\n+  do_thread(void* p = NULL)\n+  {\n+    do_loop<Container, Iter>();\n+    return p;\n+  }\n+\n+template<typename Container, int Iter, bool Thread>\n+  void\n+  test_container(const char* filename)\n+  {\n+    using namespace __gnu_test;\n+    time_counter time;\n+    resource_counter resource;\n+    {\n+      start_counters(time, resource);\n+      if (!Thread)\n+\t{\n+\t  // No threads, so run 4x.\n+\t  do_loop<Container, Iter * 4>();\n+\t}\n+      else\n+\t{\n+#if defined (_GLIBCXX_GCC_GTHR_POSIX_H) && !defined (NOTHREAD)\n+\t  pthread_t  t1, t2, t3, t4;\n+\t  pthread_create(&t1, 0, &do_thread<Container, Iter>, 0);\n+\t  pthread_create(&t2, 0, &do_thread<Container, Iter>, 0);\n+\t  pthread_create(&t3, 0, &do_thread<Container, Iter>, 0);\n+\t  pthread_create(&t4, 0, &do_thread<Container, Iter>, 0);\n+\t  \n+\t  pthread_join(t1, NULL);\n+\t  pthread_join(t2, NULL);\n+\t  pthread_join(t3, NULL);\n+\t  pthread_join(t4, NULL);\n+#endif\n+\t}\n+      stop_counters(time, resource);\n+\n+      // Detailed text data.\n+      Container obj;\n+      int status;\n+      std::ostringstream comment;\n+      comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n+                                                 0, 0, &status);\n+      report_header(filename, comment.str());\n+      report_performance(\"\", \"\", time, resource);\n+\n+      // Detailed data for visualization.\n+      std::string vizfilename(filename);\n+      vizfilename += \".dat\";\n+      write_viz_data(time, vizfilename.c_str());\n+    }\n+  }\n+\n+template<bool Thread>\n+  struct test_sequence\n+  {\n+    test_sequence(const char* filename) : _M_filename(filename) { }\n+\n+    template<class Container>\n+      void\n+      operator()(Container)\n+      {\n+\tconst int i = 20000;\n+\ttest_container<Container, i, Thread>(_M_filename); \n+      }\n+\n+  private:\n+    const char* _M_filename;\n+  };\n+\n+\n+inline std::string::size_type\n+sequence_find_container(std::string& type)\n+{\n+  const std::string::size_type npos = std::string::npos;\n+  std::string::size_type n1 = type.find(\"vector\");\n+  std::string::size_type n2 = type.find(\"list\");\n+  std::string::size_type n3 = type.find(\"deque\");\n+  std::string::size_type n4 = type.find(\"string\");\n+  \n+  if (n1 != npos || n2 != npos || n3 != npos || n4 != npos)\n+    return std::min(std::min(n1, n2), std::min(n3, n4));\n+  else\n+    throw std::runtime_error(\"sequence_find_container not found\");\n+}\n+\n+inline std::string::size_type\n+associative_find_container(std::string& type)\n+{\n+  using std::string;\n+  string::size_type n1 = type.find(\"map\");\n+  string::size_type n2 = type.find(\"set\");\n+  if (n1 != string::npos || n2 != string::npos)\n+    return std::min(n1, n2);\n+  else\n+    throw std::runtime_error(\"associative_find_container not found\");\n+}\n+\n #endif // _GLIBCXX_PERFORMANCE_H\n "}, {"sha": "0e2757666a41a1c8da5d1b13f7845778cf9efba6", "filename": "libstdc++-v3/testsuite/util/testsuite_visualization.h", "status": "removed", "additions": 0, "deletions": 150, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce72d1aa87e92f05b076bbfe57024918380904cc/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_visualization.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce72d1aa87e92f05b076bbfe57024918380904cc/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_visualization.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_visualization.h?ref=ce72d1aa87e92f05b076bbfe57024918380904cc", "patch": "@@ -1,150 +0,0 @@\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#include <typeinfo>\n-#include <stdexcept>\n-#include <sstream>\n-#include <fstream>\n-#include <cxxabi.h>\n-#include <testsuite_performance.h>\n-\n-// Ah, we wish it wasn't so...\n-bool first_container = false;\n-extern const char* filename;\n-\n-typedef std::string::size_type (*callback_type) (std::string&);\n-\n-template<typename Container, int Iter, bool Thread>\n-  void\n-  write_viz_container(callback_type find_container, const char* filename)\n-  {\n-    typedef std::string string;\n-\n-    // Create title.\n-    {\n-      const char ws(' ');\n-      std::ostringstream title;\n-\t\n-      std::string titlename(filename);\n-      std::string::size_type n = titlename.find('.');\n-      if (n != string::npos)\n-\ttitlename = std::string(titlename.begin(), titlename.begin() + n);\n-\n-      title << titlename;\n-      title << ws;\n-      title << Iter;\n-      title << ws;\n-#if 0\n-      title << \"thread<\";\n-      std::boolalpha(title);\n-      title << Thread;\n-      title << '>';\n-#endif\n-      \n-      titlename += \".title\";\n-      std::ofstream titlefile(titlename.c_str());\n-      if (!titlefile.good())\n-\tthrow std::runtime_error(\"write_viz_data cannot open titlename\");\n-      titlefile << title.str() << std::endl;\n-    }\n-\n-    // Create compressed type name.\n-    Container obj;\n-    int status;\n-    std::string type(abi::__cxa_demangle(typeid(obj).name(), 0, 0, &status));\n-    \n-    // Extract fully-qualified typename.\n-    // Assumes \"set\" or \"map\" are uniquely determinate.\n-    string::iterator beg = type.begin();\n-    string::iterator end;\n-    string::size_type n = (*find_container)(type);\n-\n-    // Find start of fully-qualified name.\n-    // Assume map, find end.\n-    string::size_type nend = type.find('<', n);\n-    if (nend != string::npos)\n-      end = type.begin() + nend;\n-    \n-    string compressed_type;\n-    compressed_type += '\"';\n-    compressed_type += string(beg, end);\n-    compressed_type += '<';\n-#if 0\n-    typename Container::key_type v;\n-    compressed_type += typeid(v).name();\n-#else\n-    compressed_type += \"int\";\n-#endif\n-    compressed_type += \", A>\";\n-\n-    // XXX\n-    if (Thread == true)\n-      compressed_type += \" thread\";\n-    compressed_type += '\"';\n-\n-    std::ofstream file(filename, std::ios_base::app);\n-    if (!file.good())\n-      throw std::runtime_error(\"write_viz_data cannot open filename\");\n-    \n-    file << compressed_type;\n-    first_container = false;\n-  }\n-\n-\n-void\n-write_viz_data(__gnu_test::time_counter& time, const char* filename)\n-{\n-  std::ofstream file(filename, std::ios_base::app);  \n-  if (!file.good())\n-    throw std::runtime_error(\"write_viz_data cannot open filename\");\n-  \n-  // Print out score in appropriate column.\n-  const char tab('\\t');\n-  int score = time.real_time();\n-  file << tab << score;\n-}\n-\n-void\n-write_viz_endl(const char* filename)\n-{\n-  std::ofstream file(filename, std::ios_base::app);\n-  if (!file.good())\n-    throw std::runtime_error(\"write_viz_endl cannot open filename\");\n-  file << std::endl;\n-}\n-\n-\n-#if 0\n-// cons\n-write_viz_container<container_type, Iter, Thread>(&sequence_find_container, \n-\t\t\t\t\t\t  filename);\n-#endif\n-\n-#if 0\n-// dtor\n-write_viz_endl(filename)\n-#endif"}]}