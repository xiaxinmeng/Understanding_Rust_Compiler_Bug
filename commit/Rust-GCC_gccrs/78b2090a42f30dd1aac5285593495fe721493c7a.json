{"sha": "78b2090a42f30dd1aac5285593495fe721493c7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiMjA5MGE0MmYzMGRkMWFhYzUyODU1OTM0OTVmZTcyMTQ5M2M3YQ==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-05-01T22:36:32Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-05-01T22:36:32Z"}, "message": "test more libU77 routines and interfaces\n\nFrom-SVN: r26720", "tree": {"sha": "fbcfdf836b34f70b63e1a0d10c0cb93eceb0d4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbcfdf836b34f70b63e1a0d10c0cb93eceb0d4ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b2090a42f30dd1aac5285593495fe721493c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b2090a42f30dd1aac5285593495fe721493c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b2090a42f30dd1aac5285593495fe721493c7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b2090a42f30dd1aac5285593495fe721493c7a/comments", "author": null, "committer": null, "parents": [{"sha": "f9f2ac3f2c219bf189e2e0210624e5cc14a8b63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f2ac3f2c219bf189e2e0210624e5cc14a8b63f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f2ac3f2c219bf189e2e0210624e5cc14a8b63f"}], "stats": {"total": 248, "additions": 226, "deletions": 22}, "files": [{"sha": "95c270b981af1757f8ac8295a3c7e0d79c6e7ae1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b2090a42f30dd1aac5285593495fe721493c7a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b2090a42f30dd1aac5285593495fe721493c7a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78b2090a42f30dd1aac5285593495fe721493c7a", "patch": "@@ -1,3 +1,12 @@\n+Sun May  2 01:13:37 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.f-torture/execute/u77-test.f (main): List libU77\n+\tintrinsics not currently tested.\n+\tAdd tests for TIME8, CTIME_subr, IARGC, TTYNAM_subr,\n+\tGETENV, FDATE_subr, DTIME_subr, ETIME_subr, DATE, ITIME,\n+\tFTELL_subr, MCLOCK, MCLOCK8, and CPU_TIME.\n+\tTrim blanks off the ends of some printed strings.\n+\n Sun May  2 00:06:45 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.f-torture/execute/u77-test.f (main): Just warn about"}, {"sha": "edbcf2f9b5479507440f887ca5fd9fafc7b01e0a", "filename": "gcc/testsuite/g77.f-torture/execute/u77-test.f", "status": "modified", "additions": 104, "deletions": 11, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b2090a42f30dd1aac5285593495fe721493c7a/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fu77-test.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b2090a42f30dd1aac5285593495fe721493c7a/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fu77-test.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fu77-test.f?ref=78b2090a42f30dd1aac5285593495fe721493c7a", "patch": "@@ -3,6 +3,29 @@\n *     good squint at what it prints, though detected errors will cause \n *     starred messages.\n *\n+* Currently not tested:\n+*   ALARM\n+*   CHDIR (func)\n+*   CHMOD (func)\n+*   FGET (func/subr)\n+*   FGETC (func)\n+*   FPUT (func/subr)\n+*   FPUTC (func)\n+*   FSTAT (subr)\n+*   GETCWD (subr)\n+*   HOSTNM (subr)\n+*   IRAND\n+*   KILL\n+*   LINK (func)\n+*   LSTAT (subr)\n+*   RENAME (func/subr)\n+*   SIGNAL (subr)\n+*   SRAND\n+*   STAT (subr)\n+*   SYMLNK (func/subr)\n+*   UMASK (func)\n+*   UNLINK (func)\n+*\n * NOTE! This is the testsuite version, so it should compile and\n * execute on all targets, and either run to completion (with\n * success status) or fail (by calling abort).  The *other* version,\n@@ -19,32 +42,59 @@\n       integer i, j, k, ltarray (9), idat (3), count, rate, count_max,\n      +     pid, mask\n       real tarray1(2), tarray2(2), r1, r2\n+      double precision d1\n+      integer(kind=2) bigi\n       logical issum\n-      intrinsic getpid, getuid, getgid, ierrno, gerror,\n-     +     fnum, isatty, getarg, access, unlink, fstat,\n-     +     stat, lstat, getcwd, gmtime, etime, chmod,\n+      intrinsic getpid, getuid, getgid, ierrno, gerror, time8,\n+     +     fnum, isatty, getarg, access, unlink, fstat, iargc,\n+     +     stat, lstat, getcwd, gmtime, etime, chmod, itime, date,\n      +     chdir, fgetc, fputc, system_clock, second, idate, secnds,\n-     +     time, ctime, fdate, ttynam, date_and_time\n+     +     time, ctime, fdate, ttynam, date_and_time, mclock, mclock8,\n+     +     cpu_time, dtime\n       external lenstr, ctrlc\n       integer lenstr\n       logical l\n       character gerr*80, c*1\n       character ctim*25, line*80, lognam*20, wd*100, line2*80, ddate*8,\n-     +     ttime*10, zone*5\n+     +     ttime*10, zone*5, ctim2*25\n       integer fstatb (13), statb (13)\n       integer *2 i2zero\n       integer values(8)\n       integer(kind=7) sigret\n \n-      ctim = ctime(time())\n-      WRITE (6,'(A/)') '1 GNU libU77 test at: ' // ctim\n+      i = time ()\n+      ctim = ctime (i)\n+      WRITE (6,'(A/)') '1 GNU libU77 test at: ' // ctim(:lenstr (ctim))\n       write (6,'(A,I3,'', '',I3)')\n      +     ' Logical units 5 and 6 correspond (FNUM) to'\n      +     // ' Unix i/o units ', fnum(5), fnum(6)\n       if (lnblnk('foo ').ne.3 .or. len_trim('foo ').ne.3) then\n         print *, 'LNBLNK or LEN_TRIM failed'\n         call abort\n       end if\n+\n+      bigi = time8 ()\n+\n+      call ctime (ctim2, i)\n+      if (ctim .ne. ctim2) then\n+        write (6, *) '*** CALL CTIME disagrees with CTIME(): ',\n+     +    ctim2(:lenstr (ctim2)), ' vs. ', ctim(:lenstr (ctim))\n+        call doabort\n+      end if\n+\n+      j = time ()\n+      if (i .gt. bigi .or. bigi .gt. j) then\n+        write (6, *) '*** TIME/TIME8/TIME sequence failures: ',\n+     +    i, bigi, j\n+        call doabort\n+      end if\n+\n+      print *, 'Command-line arguments: ', iargc ()\n+      do i = 0, iargc ()\n+         call getarg (i, line)\n+         print *, 'Arg ', i, ' is: ', line(:lenstr (line))\n+      end do\n+\n       l= isatty(6)\n       line2 = ttynam(6)\n       if (l) then\n@@ -53,6 +103,12 @@\n         line = 'and 6 isn''t a tty device (ISATTY)'\n       end if\n       write (6,'(1X,A)') line(:lenstr(line))\n+      call ttynam (line, 6)\n+      if (line .ne. line2) then\n+        print *, '*** CALL TTYNAM disagrees with TTYNAM: ',\n+     +    line(:lenstr (line))\n+        call doabort\n+      end if\n \n *     regression test for compiler crash fixed by JCB 1998-08-04 com.c\n       sigret = signal(2, ctrlc)\n@@ -66,23 +122,34 @@\n       call flush(6)\n       CALL SYSTEM ('echo \" \" `id`')\n       call flush\n+\n       lognam = 'blahblahblah'\n       call getlog (lognam)\n-      write (6,*) 'Login name (GETLOG): ', lognam\n+      write (6,*) 'Login name (GETLOG): ', lognam(:lenstr (lognam))\n+\n+      wd = 'blahblahblah'\n+      call getenv ('LOGNAME', wd)\n+      write (6,*) 'Login name (GETENV of LOGNAME): ', wd(:lenstr (wd))\n+\n       call umask(0, mask)\n       write(6,*) 'UMASK returns', mask\n       call umask(mask)\n \n       ctim = fdate()\n-      write (6,*) 'FDATE returns: ', ctim\n+      write (6,*) 'FDATE returns: ', ctim(:lenstr (ctim))\n+      call fdate (ctim)\n+      write (6,*) 'CALL FDATE returns: ', ctim(:lenstr (ctim))\n+\n       j=time()\n       call ltime (j, ltarray)\n       write (6,'(1x,a,9i4)') 'LTIME returns:', ltarray\n       call gmtime (j, ltarray)\n       write (6,'(1x,a,9i4)') 'GMTIME returns:', ltarray\n+\n       call system_clock(count)  ! omitting optional args\n       call system_clock(count, rate, count_max)\n       write(6,*) 'SYSTEM_CLOCK returns: ', count, rate, count_max\n+\n       call date_and_time(ddate)  ! omitting optional args\n       call date_and_time(ddate, ttime, zone, values)\n       write(6, *) 'DATE_AND_TIME returns: ', ddate, ' ', ttime, ' ',\n@@ -119,10 +186,10 @@\n       do i = 1,1000\n       do j = 1,1000\n       end do\n-      r2 = dtime (tarray2)\n+      call dtime (r2, tarray2)\n       if (tarray2(1) .ne. 0. .or. tarray2(2) .ne. 0.) exit\n       end do\n-      r1 = etime (tarray1)\n+      call etime (r1, tarray1)\n       if (.not. issum (r1, tarray1(1), tarray1(2))) then\n         write (6,*) '*** ETIME didn''t return sum of the array: ',\n      +       r1, ' /= ', tarray1(1), '+', tarray1(2)\n@@ -149,18 +216,29 @@\n         print *, '*** VXT and U77 versions don''t agree'\n         call doabort\n       end if\n+\n+      call date (ctim)\n+      write (6,*) 'DATE (dd-mmm-yy): ', ctim(:lenstr (ctim))\n+\n+      call itime (idat)\n+      write (6,*) 'ITIME (hour,minutes,seconds): ', idat\n+\n       call time(line(:8))\n       print *, 'TIME: ', line(:8)\n+\n       write (6,*) 'SECNDS(0.0) returns: ',secnds(0.0)\n+\n       write (6,*) 'SECOND returns: ', second()\n       call dumdum(r1)\n       call second(r1)\n       write (6,*) 'CALL SECOND returns: ', r1\n+\n *     compiler crash fixed by 1998-10-01 com.c change\n       if (rand(0).lt.0.0 .or. rand(0).gt.1.0) then\n         write (6,*) '*** rand(0) error'\n         call doabort()\n       end if\n+\n       i = getcwd(wd)\n       if (i.ne.0) then\n         call perror ('*** getcwd')\n@@ -173,13 +251,15 @@\n         write (6,*) '***CHDIR to \".\": ', i\n         call doabort\n       end if\n+\n       i=hostnm(wd)\n       if(i.ne.0) then\n         call perror ('*** hostnm')\n         call doabort\n       else\n         write (6,*) 'Host name is ', wd(:lenstr(wd))\n       end if\n+\n       i = access('/dev/null ', 'rw')\n       if (i.ne.0) write (6,*) '***Read/write ACCESS to /dev/null: ', i\n       write (6,*) 'Creating file \"foo\" for testing...'\n@@ -210,6 +290,11 @@\n         write(6,*) '***FTELL offset: ', i\n         call doabort\n       end if\n+      call ftell(3, i)\n+      if (i.ne.1) then\n+        write(6,*) '***CALL FTELL offset: ', i\n+        call doabort\n+      end if\n       call chmod ('foo', 'a+w',i)\n       if (i.ne.0) then\n         write (6,*) '***CHMOD of \"foo\": ', i\n@@ -266,6 +351,7 @@\n         write (6,*) '***UNLINK \"foo\" again: ', i\n         call doabort\n       end if\n+\n       call gerror (gerr)\n       i = ierrno()\n       write (6,'(A,I3,A/1X,A)') ' The current error number is: ',\n@@ -275,6 +361,13 @@\n       call getarg (0, line)\n       call perror (line (:lenstr (line)))\n       call unlink ('bar')\n+\n+      print *, 'MCLOCK returns ', mclock ()\n+      print *, 'MCLOCK8 returns ', mclock8 ()\n+\n+      call cpu_time (d1)\n+      print *, 'CPU_TIME returns ', d1\n+\n C     WRITE (6,*) 'You should see exit status 1'\n       CALL EXIT(0)\n  99   END"}, {"sha": "c79e62431534a7e61f498536f91e479a7ec642c5", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b2090a42f30dd1aac5285593495fe721493c7a/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b2090a42f30dd1aac5285593495fe721493c7a/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=78b2090a42f30dd1aac5285593495fe721493c7a", "patch": "@@ -1,3 +1,12 @@\n+Sun May  2 01:13:37 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* libU77/u77-test.f (main): List libU77 intrinsics\n+\tnot currently tested.\n+\tAdd tests for TIME8, CTIME_subr, IARGC, TTYNAM_subr,\n+\tGETENV, FDATE_subr, DTIME_subr, ETIME_subr, DATE, ITIME,\n+\tFTELL_subr, MCLOCK, MCLOCK8, and CPU_TIME.\n+\tTrim blanks off the ends of some printed strings.\n+\n Sun May  2 00:06:45 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* libU77/u77-test.f (main): Just warn about FSTAT gid"}, {"sha": "f338b814991557452d938556edd3f78fbc7c0504", "filename": "libf2c/libU77/u77-test.f", "status": "modified", "additions": 104, "deletions": 11, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b2090a42f30dd1aac5285593495fe721493c7a/libf2c%2FlibU77%2Fu77-test.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b2090a42f30dd1aac5285593495fe721493c7a/libf2c%2FlibU77%2Fu77-test.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fu77-test.f?ref=78b2090a42f30dd1aac5285593495fe721493c7a", "patch": "@@ -3,6 +3,29 @@\n *     good squint at what it prints, though detected errors will cause \n *     starred messages.\n *\n+* Currently not tested:\n+*   ALARM\n+*   CHDIR (func)\n+*   CHMOD (func)\n+*   FGET (func/subr)\n+*   FGETC (func)\n+*   FPUT (func/subr)\n+*   FPUTC (func)\n+*   FSTAT (subr)\n+*   GETCWD (subr)\n+*   HOSTNM (subr)\n+*   IRAND\n+*   KILL\n+*   LINK (func)\n+*   LSTAT (subr)\n+*   RENAME (func/subr)\n+*   SIGNAL (subr)\n+*   SRAND\n+*   STAT (subr)\n+*   SYMLNK (func/subr)\n+*   UMASK (func)\n+*   UNLINK (func)\n+*\n * NOTE! This is the libU77 version, so it should be a bit more\n * \"interactive\" than the testsuite version, which is in\n * gcc/testsuite/g77.f-torture/execute/u77-test.f.\n@@ -22,32 +45,59 @@\n       integer i, j, k, ltarray (9), idat (3), count, rate, count_max,\n      +     pid, mask\n       real tarray1(2), tarray2(2), r1, r2\n+      double precision d1\n+      integer(kind=2) bigi\n       logical issum\n-      intrinsic getpid, getuid, getgid, ierrno, gerror,\n-     +     fnum, isatty, getarg, access, unlink, fstat,\n-     +     stat, lstat, getcwd, gmtime, etime, chmod,\n+      intrinsic getpid, getuid, getgid, ierrno, gerror, time8,\n+     +     fnum, isatty, getarg, access, unlink, fstat, iargc,\n+     +     stat, lstat, getcwd, gmtime, etime, chmod, itime, date,\n      +     chdir, fgetc, fputc, system_clock, second, idate, secnds,\n-     +     time, ctime, fdate, ttynam, date_and_time\n+     +     time, ctime, fdate, ttynam, date_and_time, mclock, mclock8,\n+     +     cpu_time, dtime\n       external lenstr, ctrlc\n       integer lenstr\n       logical l\n       character gerr*80, c*1\n       character ctim*25, line*80, lognam*20, wd*100, line2*80, ddate*8,\n-     +     ttime*10, zone*5\n+     +     ttime*10, zone*5, ctim2*25\n       integer fstatb (13), statb (13)\n       integer *2 i2zero\n       integer values(8)\n       integer(kind=7) sigret\n \n-      ctim = ctime(time())\n-      WRITE (6,'(A/)') '1 GNU libU77 test at: ' // ctim\n+      i = time ()\n+      ctim = ctime (i)\n+      WRITE (6,'(A/)') '1 GNU libU77 test at: ' // ctim(:lenstr (ctim))\n       write (6,'(A,I3,'', '',I3)')\n      +     ' Logical units 5 and 6 correspond (FNUM) to'\n      +     // ' Unix i/o units ', fnum(5), fnum(6)\n       if (lnblnk('foo ').ne.3 .or. len_trim('foo ').ne.3) then\n         print *, 'LNBLNK or LEN_TRIM failed'\n         call abort\n       end if\n+\n+      bigi = time8 ()\n+\n+      call ctime (ctim2, i)\n+      if (ctim .ne. ctim2) then\n+        write (6, *) '*** CALL CTIME disagrees with CTIME(): ',\n+     +    ctim2(:lenstr (ctim2)), ' vs. ', ctim(:lenstr (ctim))\n+        call doabort\n+      end if\n+\n+      j = time ()\n+      if (i .gt. bigi .or. bigi .gt. j) then\n+        write (6, *) '*** TIME/TIME8/TIME sequence failures: ',\n+     +    i, bigi, j\n+        call doabort\n+      end if\n+\n+      print *, 'Command-line arguments: ', iargc ()\n+      do i = 0, iargc ()\n+         call getarg (i, line)\n+         print *, 'Arg ', i, ' is: ', line(:lenstr (line))\n+      end do\n+\n       l= isatty(6)\n       line2 = ttynam(6)\n       if (l) then\n@@ -56,6 +106,12 @@\n         line = 'and 6 isn''t a tty device (ISATTY)'\n       end if\n       write (6,'(1X,A)') line(:lenstr(line))\n+      call ttynam (line, 6)\n+      if (line .ne. line2) then\n+        print *, '*** CALL TTYNAM disagrees with TTYNAM: ',\n+     +    line(:lenstr (line))\n+        call doabort\n+      end if\n \n *     regression test for compiler crash fixed by JCB 1998-08-04 com.c\n       sigret = signal(2, ctrlc)\n@@ -69,23 +125,34 @@\n       call flush(6)\n       CALL SYSTEM ('echo \" \" `id`')\n       call flush\n+\n       lognam = 'blahblahblah'\n       call getlog (lognam)\n-      write (6,*) 'Login name (GETLOG): ', lognam\n+      write (6,*) 'Login name (GETLOG): ', lognam(:lenstr (lognam))\n+\n+      wd = 'blahblahblah'\n+      call getenv ('LOGNAME', wd)\n+      write (6,*) 'Login name (GETENV of LOGNAME): ', wd(:lenstr (wd))\n+\n       call umask(0, mask)\n       write(6,*) 'UMASK returns', mask\n       call umask(mask)\n \n       ctim = fdate()\n-      write (6,*) 'FDATE returns: ', ctim\n+      write (6,*) 'FDATE returns: ', ctim(:lenstr (ctim))\n+      call fdate (ctim)\n+      write (6,*) 'CALL FDATE returns: ', ctim(:lenstr (ctim))\n+\n       j=time()\n       call ltime (j, ltarray)\n       write (6,'(1x,a,9i4)') 'LTIME returns:', ltarray\n       call gmtime (j, ltarray)\n       write (6,'(1x,a,9i4)') 'GMTIME returns:', ltarray\n+\n       call system_clock(count)  ! omitting optional args\n       call system_clock(count, rate, count_max)\n       write(6,*) 'SYSTEM_CLOCK returns: ', count, rate, count_max\n+\n       call date_and_time(ddate)  ! omitting optional args\n       call date_and_time(ddate, ttime, zone, values)\n       write(6, *) 'DATE_AND_TIME returns: ', ddate, ' ', ttime, ' ',\n@@ -122,10 +189,10 @@\n       do i = 1,1000\n       do j = 1,1000\n       end do\n-      r2 = dtime (tarray2)\n+      call dtime (r2, tarray2)\n       if (tarray2(1) .ne. 0. .or. tarray2(2) .ne. 0.) exit\n       end do\n-      r1 = etime (tarray1)\n+      call etime (r1, tarray1)\n       if (.not. issum (r1, tarray1(1), tarray1(2))) then\n         write (6,*) '*** ETIME didn''t return sum of the array: ',\n      +       r1, ' /= ', tarray1(1), '+', tarray1(2)\n@@ -152,18 +219,29 @@\n         print *, '*** VXT and U77 versions don''t agree'\n         call doabort\n       end if\n+\n+      call date (ctim)\n+      write (6,*) 'DATE (dd-mmm-yy): ', ctim(:lenstr (ctim))\n+\n+      call itime (idat)\n+      write (6,*) 'ITIME (hour,minutes,seconds): ', idat\n+\n       call time(line(:8))\n       print *, 'TIME: ', line(:8)\n+\n       write (6,*) 'SECNDS(0.0) returns: ',secnds(0.0)\n+\n       write (6,*) 'SECOND returns: ', second()\n       call dumdum(r1)\n       call second(r1)\n       write (6,*) 'CALL SECOND returns: ', r1\n+\n *     compiler crash fixed by 1998-10-01 com.c change\n       if (rand(0).lt.0.0 .or. rand(0).gt.1.0) then\n         write (6,*) '*** rand(0) error'\n         call doabort()\n       end if\n+\n       i = getcwd(wd)\n       if (i.ne.0) then\n         call perror ('*** getcwd')\n@@ -176,13 +254,15 @@\n         write (6,*) '***CHDIR to \".\": ', i\n         call doabort\n       end if\n+\n       i=hostnm(wd)\n       if(i.ne.0) then\n         call perror ('*** hostnm')\n         call doabort\n       else\n         write (6,*) 'Host name is ', wd(:lenstr(wd))\n       end if\n+\n       i = access('/dev/null ', 'rw')\n       if (i.ne.0) write (6,*) '***Read/write ACCESS to /dev/null: ', i\n       write (6,*) 'Creating file \"foo\" for testing...'\n@@ -213,6 +293,11 @@\n         write(6,*) '***FTELL offset: ', i\n         call doabort\n       end if\n+      call ftell(3, i)\n+      if (i.ne.1) then\n+        write(6,*) '***CALL FTELL offset: ', i\n+        call doabort\n+      end if\n       call chmod ('foo', 'a+w',i)\n       if (i.ne.0) then\n         write (6,*) '***CHMOD of \"foo\": ', i\n@@ -269,6 +354,7 @@\n         write (6,*) '***UNLINK \"foo\" again: ', i\n         call doabort\n       end if\n+\n       call gerror (gerr)\n       i = ierrno()\n       write (6,'(A,I3,A/1X,A)') ' The current error number is: ',\n@@ -278,6 +364,13 @@\n       call getarg (0, line)\n       call perror (line (:lenstr (line)))\n       call unlink ('bar')\n+\n+      print *, 'MCLOCK returns ', mclock ()\n+      print *, 'MCLOCK8 returns ', mclock8 ()\n+\n+      call cpu_time (d1)\n+      print *, 'CPU_TIME returns ', d1\n+\n       WRITE (6,*) 'You should see exit status 1'\n       CALL EXIT(1)\n  99   END"}]}