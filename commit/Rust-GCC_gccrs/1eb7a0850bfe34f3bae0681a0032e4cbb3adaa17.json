{"sha": "1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViN2EwODUwYmZlMzRmM2JhZTA2ODFhMDAzMmU0Y2JiM2FkYWExNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-01T00:08:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-01T00:08:21Z"}, "message": "PR c++/86969 - ICE with constexpr if and recursive generic lambdas.\n\n\t* class.c, lambda.c, pt.c: Revert earlier change.\n\t* lambda.c (add_capture): Don't special-case capture of dependent\n\tVLA.\n\nFrom-SVN: r269292", "tree": {"sha": "a957a50236f95718097159817b065bac51847875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a957a50236f95718097159817b065bac51847875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbfef5060f5dd9ae2b23435f60e3101dfe8f7012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfef5060f5dd9ae2b23435f60e3101dfe8f7012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfef5060f5dd9ae2b23435f60e3101dfe8f7012"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "30cc1ce46b3a315c58d8afc247085731b4bb5198", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "patch": "@@ -1,5 +1,10 @@\n 2019-02-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/86969 - ICE with constexpr if and recursive generic lambdas.\n+\t* class.c, lambda.c, pt.c: Revert earlier change.\n+\t* lambda.c (add_capture): Don't special-case capture of dependent\n+\tVLA.\n+\n \t* name-lookup.c (print_binding_level): Print this_entity.\n \n 2019-02-27  Marek Polacek  <polacek@redhat.com>"}, {"sha": "f44acfd62b5eaaaf230173d1fc020360a78bb748", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "patch": "@@ -7246,7 +7246,6 @@ finish_struct (tree t, tree attributes)\n     error (\"trying to finish struct, but kicked out due to previous parse errors\");\n \n   if (processing_template_decl && at_function_scope_p ()\n-      && TYPE_CONTEXT (t) == current_function_decl\n       /* Lambdas are defined by the LAMBDA_EXPR.  */\n       && !LAMBDA_TYPE_P (t))\n     add_stmt (build_min (TAG_DEFN, t));"}, {"sha": "e7f0fda65be6c45f86d7a8db9b82a3e4d5352cce", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "patch": "@@ -479,31 +479,9 @@ static GTY(()) tree max_id;\n    an array of runtime length.  */\n \n static tree\n-vla_capture_type (tree array_type, tree lambda)\n+vla_capture_type (tree array_type)\n {\n-  tree closure = LAMBDA_EXPR_CLOSURE (lambda);\n-  tree type = make_class_type (RECORD_TYPE);\n-  cp_binding_level *slev = current_binding_level;\n-  if (closure)\n-    {\n-      /* If we're already inside the lambda body, force the capture type out\n-\t into the enclosing context, so we don't crash trying to instantiate\n-\t the capture field in tsubst_lambda_expr.  We won't have a TAG_DEFN\n-\t from finish_struct in the enclosing context, which we work around in\n-\t tsubst_lambda_expr.  */\n-      TYPE_CONTEXT (type) = TYPE_CONTEXT (closure);\n-      cp_binding_level *b = current_binding_level;\n-      for (;; b = b->level_chain)\n-\tif (b->this_entity == closure)\n-\t  {\n-\t    while (b->this_entity == closure)\n-\t      b = b->level_chain;\n-\t    break;\n-\t  }\n-      current_binding_level = b;\n-    }\n-  type = pushtag (make_anon_name (), type, ts_current);\n-  current_binding_level = slev;\n+  tree type = xref_tag (record_type, make_anon_name (), ts_current, false);\n   xref_basetypes (type, NULL_TREE);\n   type = begin_class_definition (type);\n   if (!ptr_id)\n@@ -549,7 +527,7 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  if (array_of_runtime_bound_p (type))\n+  if (!dependent_type_p (type) && array_of_runtime_bound_p (type))\n     {\n       vla = true;\n       if (!by_reference_p)\n@@ -563,7 +541,7 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n       initializer = build_constructor_va (init_list_type_node, 2,\n \t\t\t\t\t  NULL_TREE, build_address (elt),\n \t\t\t\t\t  NULL_TREE, array_type_nelts (type));\n-      type = vla_capture_type (type, lambda);\n+      type = vla_capture_type (type);\n     }\n   else if (!dependent_type_p (type)\n \t   && variably_modified_type_p (type, NULL_TREE))"}, {"sha": "d678e27807810a2353a6f3ebdbc60ff79a953025", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1eb7a0850bfe34f3bae0681a0032e4cbb3adaa17", "patch": "@@ -17989,10 +17989,6 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       if (PACK_EXPANSION_P (ofield))\n \tofield = PACK_EXPANSION_PATTERN (ofield);\n       tree field = tsubst_decl (ofield, args, complain);\n-      if (DECL_VLA_CAPTURE_P (ofield))\n-\t/* The type of a VLA capture might not have a TAG_DEFN in the enclosing\n-\t   context, so complete it here.  */\n-\tcomplete_type (TREE_TYPE (field));\n \n       if (DECL_PACK_P (ofield) && !DECL_NORMAL_CAPTURE_P (ofield))\n \t{"}]}