{"sha": "a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyOWJjMjg3OGIxYjE5ZmM0ZmI0NWJjYmNjZjNhZjc5YmM4YzI0YQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-03-27T10:04:08Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-03-27T10:04:08Z"}, "message": "config.cc (m68hc11, [...]): Add usegas.h, rename tmake_file to m68hc11/t-m68hc11.\n\n2008-03-27  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config.cc (m68hc11, m6811, m68hc12, m6812): Add usegas.h,\n\trename tmake_file to m68hc11/t-m68hc11.\n\t(mcore): Set inhibit_libc to true.\n\t* config.host (alpha*-dec-*vms*): Set extra_programs.\n\t(interix3*): Don't use host_xmake_file.\n\t* configure.ac: Let config.gcc override inhibit_libc.\n\t* configure: Regenerate.\n\n\t* config/alpha/x-vms (EXTRA_PROGRAMS): Remove.\n\t* config/x-interix: Remove.\n\n\t* config/t-openbsd-thread: Remove commented out lines.\n\n\t* config/m68hc11/t-m68hc11-gas: Rename to...\n\t* config/m68hc11/t-m68hc11: ... this.  Remove T_CPPFLAGS.\n\n\t* config/mcore/t-mcore: Remove T_CFLAGS.\n\t* config/mcore/t-mcore-pe: Likewise.\n\nFrom-SVN: r133636", "tree": {"sha": "a8afd0c8919d27547a242f0135603b447a1ca499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8afd0c8919d27547a242f0135603b447a1ca499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60d2695833eb71a194c6dda412deaa676a98de30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d2695833eb71a194c6dda412deaa676a98de30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d2695833eb71a194c6dda412deaa676a98de30"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "d04b4ac583093c4ed35016ece402a903e87508e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -1,3 +1,24 @@\n+2008-03-27  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config.cc (m68hc11, m6811, m68hc12, m6812): Add usegas.h,\n+\trename tmake_file to m68hc11/t-m68hc11.\n+\t(mcore): Set inhibit_libc to true.\n+\t* config.host (alpha*-dec-*vms*): Set extra_programs.\n+\t(interix3*): Don't use host_xmake_file.\n+\t* configure.ac: Let config.gcc override inhibit_libc.\n+\t* configure: Regenerate.\n+\n+\t* config/alpha/x-vms (EXTRA_PROGRAMS): Remove.\n+\t* config/t-openbsd-thread: Remove commented out lines.\n+\t\n+\t* config/x-interix: Remove.\n+\n+\t* config/m68hc11/t-m68hc11-gas: Rename to...\n+\t* config/m68hc11/t-m68hc11: ... this.  Remove T_CPPFLAGS.\n+\n+\t* config/mcore/t-mcore: Remove T_CFLAGS.\n+\t* config/mcore/t-mcore-pe: Likewise.\n+\n 2008-03-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.ac: Replace custom __GNU_SOURCE test with"}, {"sha": "f9f2fa4aa72ce95a3146e4f4f76930fa8b5cf963", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -1516,19 +1516,19 @@ m32rle-*-linux*)\n \t;;\n # m68hc11 and m68hc12 share the same machine description.\n m68hc11-*-*|m6811-*-*)\n-\ttm_file=\"dbxelf.h elfos.h m68hc11/m68hc11.h\"\n+\ttm_file=\"dbxelf.h elfos.h usegas.h m68hc11/m68hc11.h\"\n \ttm_p_file=\"m68hc11/m68hc11-protos.h\"\n \tmd_file=\"m68hc11/m68hc11.md\"\n \tout_file=\"m68hc11/m68hc11.c\"\n-\ttmake_file=\"m68hc11/t-m68hc11-gas\"\n+\ttmake_file=\"m68hc11/t-m68hc11\"\n \tuse_fixproto=yes\n         ;;\n m68hc12-*-*|m6812-*-*)\n-\ttm_file=\"m68hc11/m68hc12.h dbxelf.h elfos.h m68hc11/m68hc11.h\"\n+\ttm_file=\"m68hc11/m68hc12.h dbxelf.h elfos.h usegas.h m68hc11/m68hc11.h\"\n \ttm_p_file=\"m68hc11/m68hc11-protos.h\"\n \tmd_file=\"m68hc11/m68hc11.md\"\n \tout_file=\"m68hc11/m68hc11.c\"\n-\ttmake_file=\"m68hc11/t-m68hc11-gas\"\n+\ttmake_file=\"m68hc11/t-m68hc11\"\n \textra_options=\"${extra_options} m68hc11/m68hc11.opt\"\n \tuse_fixproto=yes\n         ;;\n@@ -1641,11 +1641,13 @@ mcore-*-elf)\n \ttm_file=\"dbxelf.h elfos.h svr4.h ${tm_file} mcore/mcore-elf.h\"\n \ttmake_file=mcore/t-mcore\n \tuse_fixproto=yes\n+\tinhibit_libc=true\n \t;;\n mcore-*-pe*)\n \ttm_file=\"svr3.h dbxcoff.h ${tm_file} mcore/mcore-pe.h\"\n \ttmake_file=mcore/t-mcore-pe\n \tuse_fixproto=yes\n+\tinhibit_libc=true\n \t;;\n mips-sgi-irix[56]*)\n \ttm_file=\"elfos.h ${tm_file} mips/iris.h\""}, {"sha": "965288a29f4d9e7a3853f450b13da5f4d53efab0", "filename": "gcc/config.host", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -124,6 +124,7 @@ case ${host} in\n   alpha*-dec-*vms*)\n     host_xm_file=alpha/xm-vms.h\n     host_xmake_file=\"${host_xmake_file} alpha/x-vms\"\n+    extra_programs=\"ld.exe decc.exe\"\n     host_exeext=.exe\n     host_can_use_collect2=no\n     # This removes the cpu type and manufacturer components and\n@@ -191,9 +192,6 @@ case ${host} in\n     echo \"*** linking with posix.dll is not allowed by the GNU GPL.\"\n     exit 1\n     ;;\n-  i[34567]86-*-interix3*)\n-    host_xmake_file=\"${host_xmake_file} x-interix\"\n-    ;;\n   i[34567]86-*-darwin* | x86_64-*-darwin*)\n     out_host_hook_obj=\"${out_host_hook_obj} host-i386-darwin.o\"\n     host_xmake_file=\"${host_xmake_file} i386/x-darwin\""}, {"sha": "3b47bebe6364a77d71fb79cd1789c7507e8482fa", "filename": "gcc/config/alpha/x-vms", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Falpha%2Fx-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Falpha%2Fx-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fx-vms?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -5,7 +5,6 @@ libsubdir=$(libdir)/gcc-lib\n \n # Rules for linker and compiler wrappers.  These are only useful on\n # a VMS host.\n-EXTRA_PROGRAMS=ld.exe decc.exe\n vms-ld.o : $(srcdir)/config/alpha/vms-ld.c\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n ld.exe : vms-ld.o"}, {"sha": "7978641f9040c45e2078f0657e35170c9e7af56d", "filename": "gcc/config/m68hc11/t-m68hc11", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Ft-m68hc11?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -13,8 +13,6 @@ RANLIB_FOR_TARGET = ` \\\n     fi; \\\n   fi`\n \n-T_CPPFLAGS = -DUSE_GAS\n-\n LIB1ASMSRC = m68hc11/larith.asm\n LIB1ASMFUNCS = _mulsi3 \\\n \t_mulqi3 _ashlsi3 _ashrsi3 _lshrsi3 \\", "previous_filename": "gcc/config/m68hc11/t-m68hc11-gas"}, {"sha": "9480bd0ffd88ce53de26beafdabae2a8e7dafb3d", "filename": "gcc/config/mcore/t-mcore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Fmcore%2Ft-mcore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Fmcore%2Ft-mcore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -27,7 +27,6 @@ fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/mcore/t-mcore\n \techo '#define FLOAT' > fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n-T_CFLAGS = -DDONT_HAVE_STDIO -DDONT_HAVE_SETJMP  -Dinhibit_libc \n # could use -msifilter to be safe from interrupt/jmp interactions and others.\n TARGET_LIBGCC2_CFLAGS=-O3 -DNO_FLOATLIB_FIXUNSDFSI #-msifilter\n "}, {"sha": "745006e2e2a5314b102bb373d11700d6ba645ec7", "filename": "gcc/config/mcore/t-mcore-pe", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore-pe?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -17,7 +17,6 @@ fp-bit.c: $(srcdir)/config/fp-bit.c $(srcdir)/config/mcore/t-mcore\n \techo '#define FLOAT' > fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n-T_CFLAGS = -DDONT_HAVE_STDIO -DDONT_HAVE_SETJMP  -Dinhibit_libc \n # could use -msifilter to be safe from interrupt/jmp interactions and others.\n TARGET_LIBGCC2_CFLAGS=-O3 -DNO_FLOATLIB_FIXUNSDFSI #-msifilter\n "}, {"sha": "5f4edf567c50d60fa3d3c9ffc1560f8a68a1d597", "filename": "gcc/config/t-openbsd-thread", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Ft-openbsd-thread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfig%2Ft-openbsd-thread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-openbsd-thread?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -1,5 +1,3 @@\n # This is currently needed to compile libgcc2 for threads support\n TARGET_LIBGCC2_CFLAGS=-pthread\n-#T_CFLAGS=-pthread\n-#T_CPPFLAGS=-pthread\n "}, {"sha": "e5393316dc010eeb3bc22145da5220166476d2d7", "filename": "gcc/config/x-interix", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d2695833eb71a194c6dda412deaa676a98de30/gcc%2Fconfig%2Fx-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d2695833eb71a194c6dda412deaa676a98de30/gcc%2Fconfig%2Fx-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fx-interix?ref=60d2695833eb71a194c6dda412deaa676a98de30", "patch": "@@ -1,3 +0,0 @@\n-# Existing CC/GCC may not define -D__INTERIX, so need this here.\n-# Since we want to configure with _ALL_SOURCE, we need to build that way too\n-X_CFLAGS= -D__INTERIX -D_ALL_SOURCE"}, {"sha": "04104ccf29b1d91892b29b5a44867a33f9ab2ab0", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -13683,7 +13683,7 @@ fi\n # then define inhibit_libc in LIBGCC2_CFLAGS.\n # This prevents libgcc2 from containing any code which requires libc\n # support.\n-inhibit_libc=false\n+: ${inhibit_libc=false}\n if { { test x$host != x$target && test \"x$with_sysroot\" = x ; } ||\n        test x$with_newlib = xyes ; } &&\n      { test \"x$with_headers\" = x || test \"x$with_headers\" = xno ; } ; then"}, {"sha": "202a1c4d03ed68c9d4d9cc071dd9c8155f6c72c8", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a929bc2878b1b19fc4fb45bcbccf3af79bc8c24a", "patch": "@@ -1738,7 +1738,7 @@ fi\n # then define inhibit_libc in LIBGCC2_CFLAGS.\n # This prevents libgcc2 from containing any code which requires libc\n # support.\n-inhibit_libc=false\n+: ${inhibit_libc=false}\n if { { test x$host != x$target && test \"x$with_sysroot\" = x ; } ||\n        test x$with_newlib = xyes ; } &&\n      { test \"x$with_headers\" = x || test \"x$with_headers\" = xno ; } ; then"}]}