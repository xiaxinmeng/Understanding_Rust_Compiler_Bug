{"sha": "3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzM2JlZDVkMDMyN2U4YTljZDBhNjAxYjdlY2RiOWRlNGZjODI1ZA==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-02-23T21:20:05Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-02-23T21:20:05Z"}, "message": "Changing cost propagation and ordering colorable bucket heuristics for PR93564.\n\n2020-02-23  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/93564\n\t* ira-color.c (struct update_cost_queue_elem): New member start.\n\t(queue_update_cost, get_next_update_cost): Add new arg start.\n\t(allocnos_conflict_p): New function.\n\t(update_costs_from_allocno): Add new arg conflict_cost_update_p.\n\tAdd checking conflicts with allocnos_conflict_p.\n\t(update_costs_from_prefs, restore_costs_from_copies): Adjust\n\tupdate_costs_from_allocno calls.\n\t(update_conflict_hard_regno_costs): Add checking conflicts with\n\tallocnos_conflict_p.  Adjust calls of queue_update_cost and\n\tget_next_update_cost.\n\t(assign_hard_reg): Adjust calls of queue_update_cost.  Add\n\tdebugging print.\n\t(bucket_allocno_compare_func): Restore previous version.", "tree": {"sha": "b0434eceda0c0dfab4c07700ce68ae7e6f4ba19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0434eceda0c0dfab4c07700ce68ae7e6f4ba19a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e8508edaccca6f33098972ce29679375c07cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e8508edaccca6f33098972ce29679375c07cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e8508edaccca6f33098972ce29679375c07cd6"}], "stats": {"total": 114, "additions": 81, "deletions": 33}, "files": [{"sha": "b3b9d92a1ec3ae5cecc876363f31f4ae355a4800", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d", "patch": "@@ -1,3 +1,20 @@\n+2020-02-23  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/93564\n+\t* ira-color.c (struct update_cost_queue_elem): New member start.\n+\t(queue_update_cost, get_next_update_cost): Add new arg start.\n+\t(allocnos_conflict_p): New function.\n+\t(update_costs_from_allocno): Add new arg conflict_cost_update_p.\n+\tAdd checking conflicts with allocnos_conflict_p.\n+\t(update_costs_from_prefs, restore_costs_from_copies): Adjust\n+\tupdate_costs_from_allocno calls.\n+\t(update_conflict_hard_regno_costs): Add checking conflicts with\n+\tallocnos_conflict_p.  Adjust calls of queue_update_cost and\n+\tget_next_update_cost.\n+\t(assign_hard_reg): Adjust calls of queue_update_cost.  Add\n+\tdebugging print.\n+\t(bucket_allocno_compare_func): Restore previous version.\n+\n 2020-02-21  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* gcc/config/pa/pa.c (pa_function_value): Fix check for word and"}, {"sha": "0ffdd1920204ce6bc4c41497a5bb25a4040ecb21", "filename": "gcc/ira-color.c", "status": "modified", "additions": 64, "deletions": 33, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=3133bed5d0327e8a9cd0a601b7ecdb9de4fc825d", "patch": "@@ -1199,6 +1199,10 @@ struct update_cost_queue_elem\n      connecting this allocno to the one being allocated.  */\n   int divisor;\n \n+  /* Allocno from which we started chaining costs of connected\n+     allocnos. */\n+  ira_allocno_t start;\n+\n   /* Allocno from which we are chaining costs of connected allocnos.\n      It is used not go back in graph of allocnos connected by\n      copies.  */\n@@ -1258,10 +1262,11 @@ start_update_cost (void)\n   update_cost_queue = NULL;\n }\n \n-/* Add (ALLOCNO, FROM, DIVISOR) to the end of update_cost_queue, unless\n+/* Add (ALLOCNO, START, FROM, DIVISOR) to the end of update_cost_queue, unless\n    ALLOCNO is already in the queue, or has NO_REGS class.  */\n static inline void\n-queue_update_cost (ira_allocno_t allocno, ira_allocno_t from, int divisor)\n+queue_update_cost (ira_allocno_t allocno, ira_allocno_t start,\n+\t\t   ira_allocno_t from, int divisor)\n {\n   struct update_cost_queue_elem *elem;\n \n@@ -1270,6 +1275,7 @@ queue_update_cost (ira_allocno_t allocno, ira_allocno_t from, int divisor)\n       && ALLOCNO_CLASS (allocno) != NO_REGS)\n     {\n       elem->check = update_cost_check;\n+      elem->start = start;\n       elem->from = from;\n       elem->divisor = divisor;\n       elem->next = NULL;\n@@ -1282,10 +1288,11 @@ queue_update_cost (ira_allocno_t allocno, ira_allocno_t from, int divisor)\n }\n \n /* Try to remove the first element from update_cost_queue.  Return\n-   false if the queue was empty, otherwise make (*ALLOCNO, *FROM,\n-   *DIVISOR) describe the removed element.  */\n+   false if the queue was empty, otherwise make (*ALLOCNO, *START,\n+   *FROM, *DIVISOR) describe the removed element.  */\n static inline bool\n-get_next_update_cost (ira_allocno_t *allocno, ira_allocno_t *from, int *divisor)\n+get_next_update_cost (ira_allocno_t *allocno, ira_allocno_t *start,\n+\t\t      ira_allocno_t *from, int *divisor)\n {\n   struct update_cost_queue_elem *elem;\n \n@@ -1294,6 +1301,7 @@ get_next_update_cost (ira_allocno_t *allocno, ira_allocno_t *from, int *divisor)\n \n   *allocno = update_cost_queue;\n   elem = &update_cost_queue_elems[ALLOCNO_NUM (*allocno)];\n+  *start = elem->start;\n   *from = elem->from;\n   *divisor = elem->divisor;\n   update_cost_queue = elem->next;\n@@ -1325,18 +1333,41 @@ update_allocno_cost (ira_allocno_t allocno, int hard_regno,\n   return true;\n }\n \n+/* Return TRUE if allocnos A1 and A2 conflicts. Here we are\n+   interesting only in conflicts of allocnos with intersected allocno\n+   classes. */\n+static bool\n+allocnos_conflict_p (ira_allocno_t a1, ira_allocno_t a2)\n+{\n+  ira_object_t obj, conflict_obj;\n+  ira_object_conflict_iterator oci;\n+  int word, nwords = ALLOCNO_NUM_OBJECTS (a1);\n+  \n+  for (word = 0; word < nwords; word++)\n+    {\n+      obj = ALLOCNO_OBJECT (a1, word);\n+      /* Take preferences of conflicting allocnos into account.  */\n+      FOR_EACH_OBJECT_CONFLICT (obj, conflict_obj, oci)\n+\tif (OBJECT_ALLOCNO (conflict_obj) == a2)\n+\t  return true;\n+    }\n+  return false;\n+}  \n+\n /* Update (decrease if DECR_P) HARD_REGNO cost of allocnos connected\n    by copies to ALLOCNO to increase chances to remove some copies as\n-   the result of subsequent assignment.  Record cost updates if\n-   RECORD_P is true.  */\n+   the result of subsequent assignment.  Update conflict costs only\n+   for true CONFLICT_COST_UPDATE_P.  Record cost updates if RECORD_P is\n+   true.  */\n static void\n update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n-\t\t\t   int divisor, bool decr_p, bool record_p)\n+\t\t\t   int divisor, bool decr_p, bool record_p,\n+\t\t\t   bool conflict_cost_update_p)\n {\n   int cost, update_cost, update_conflict_cost;\n   machine_mode mode;\n   enum reg_class rclass, aclass;\n-  ira_allocno_t another_allocno, from = NULL;\n+  ira_allocno_t another_allocno, start = allocno, from = NULL;\n   ira_copy_t cp, next_cp;\n \n   rclass = REGNO_REG_CLASS (hard_regno);\n@@ -1359,7 +1390,8 @@ update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n \t  else\n \t    gcc_unreachable ();\n \n-\t  if (another_allocno == from)\n+\t  if (another_allocno == from\n+\t      || allocnos_conflict_p (another_allocno, start))\n \t    continue;\n \n \t  aclass = ALLOCNO_CLASS (another_allocno);\n@@ -1384,7 +1416,8 @@ update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n \t  if (decr_p)\n \t    cost = -cost;\n \n-\t  update_conflict_cost = update_cost = cp->freq * cost / divisor;\n+\t  update_cost = cp->freq * cost / divisor;\n+\t  update_conflict_cost = conflict_cost_update_p ? update_cost : 0;\n \n \t  if (ALLOCNO_COLOR_DATA (another_allocno) != NULL\n \t      && (ALLOCNO_COLOR_DATA (allocno)->first_thread_allocno\n@@ -1399,15 +1432,16 @@ update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n \t  if (! update_allocno_cost (another_allocno, hard_regno,\n \t\t\t\t     update_cost, update_conflict_cost))\n \t    continue;\n-\t  queue_update_cost (another_allocno, allocno, divisor * COST_HOP_DIVISOR);\n+\t  queue_update_cost (another_allocno, start, allocno,\n+\t\t\t     divisor * COST_HOP_DIVISOR);\n \t  if (record_p && ALLOCNO_COLOR_DATA (another_allocno) != NULL)\n \t    ALLOCNO_COLOR_DATA (another_allocno)->update_cost_records\n \t      = get_update_cost_record (hard_regno, divisor,\n \t\t\t\t\tALLOCNO_COLOR_DATA (another_allocno)\n \t\t\t\t\t->update_cost_records);\n \t}\n     }\n-  while (get_next_update_cost (&allocno, &from, &divisor));\n+  while (get_next_update_cost (&allocno, &start, &from, &divisor));\n }\n \n /* Decrease preferred ALLOCNO hard register costs and costs of\n@@ -1420,7 +1454,7 @@ update_costs_from_prefs (ira_allocno_t allocno)\n   start_update_cost ();\n   for (pref = ALLOCNO_PREFS (allocno); pref != NULL; pref = pref->next_pref)\n     update_costs_from_allocno (allocno, pref->hard_regno,\n-\t\t\t       COST_HOP_DIVISOR, true, true);\n+\t\t\t       COST_HOP_DIVISOR, true, true, false);\n }\n \n /* Update (decrease if DECR_P) the cost of allocnos connected to\n@@ -1435,7 +1469,7 @@ update_costs_from_copies (ira_allocno_t allocno, bool decr_p, bool record_p)\n   hard_regno = ALLOCNO_HARD_REGNO (allocno);\n   ira_assert (hard_regno >= 0 && ALLOCNO_CLASS (allocno) != NO_REGS);\n   start_update_cost ();\n-  update_costs_from_allocno (allocno, hard_regno, 1, decr_p, record_p);\n+  update_costs_from_allocno (allocno, hard_regno, 1, decr_p, record_p, true);\n }\n \n /* Update conflict_allocno_hard_prefs of allocnos conflicting with\n@@ -1485,7 +1519,7 @@ restore_costs_from_copies (ira_allocno_t allocno)\n   start_update_cost ();\n   for (curr = records; curr != NULL; curr = curr->next)\n     update_costs_from_allocno (allocno, curr->hard_regno,\n-\t\t\t       curr->divisor, true, false);\n+\t\t\t       curr->divisor, true, false, true);\n   free_update_cost_record_list (records);\n   ALLOCNO_COLOR_DATA (allocno)->update_cost_records = NULL;\n }\n@@ -1503,10 +1537,10 @@ update_conflict_hard_regno_costs (int *costs, enum reg_class aclass,\n   int *conflict_costs;\n   bool cont_p;\n   enum reg_class another_aclass;\n-  ira_allocno_t allocno, another_allocno, from;\n+  ira_allocno_t allocno, another_allocno, start, from;\n   ira_copy_t cp, next_cp;\n \n-  while (get_next_update_cost (&allocno, &from, &divisor))\n+  while (get_next_update_cost (&allocno, &start, &from, &divisor))\n     for (cp = ALLOCNO_COPIES (allocno); cp != NULL; cp = next_cp)\n       {\n \tif (cp->first == allocno)\n@@ -1522,7 +1556,8 @@ update_conflict_hard_regno_costs (int *costs, enum reg_class aclass,\n \telse\n \t  gcc_unreachable ();\n \n-\tif (another_allocno == from)\n+\tif (another_allocno == from\n+\t    || allocnos_conflict_p (another_allocno, start))\n \t  continue;\n \n  \tanother_aclass = ALLOCNO_CLASS (another_allocno);\n@@ -1568,7 +1603,7 @@ update_conflict_hard_regno_costs (int *costs, enum reg_class aclass,\n \t\t\t   * COST_HOP_DIVISOR\n \t\t\t   * COST_HOP_DIVISOR\n \t\t\t   * COST_HOP_DIVISOR))\n-\t  queue_update_cost (another_allocno, allocno, divisor * COST_HOP_DIVISOR);\n+\t  queue_update_cost (another_allocno, start, from, divisor * COST_HOP_DIVISOR);\n       }\n }\n \n@@ -1837,8 +1872,7 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n \t\t      continue;\n \t\t    full_costs[j] -= conflict_costs[k];\n \t\t  }\n-\t      queue_update_cost (conflict_a, NULL, COST_HOP_DIVISOR);\n-\n+\t      queue_update_cost (conflict_a, conflict_a, NULL, COST_HOP_DIVISOR);\n \t    }\n \t}\n     }\n@@ -1852,7 +1886,7 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n   if (! retry_p)\n     {\n       start_update_cost ();\n-      queue_update_cost (a, NULL,  COST_HOP_DIVISOR);\n+      queue_update_cost (a, a, NULL, COST_HOP_DIVISOR);\n       update_conflict_hard_regno_costs (full_costs, aclass, false);\n     }\n   min_cost = min_full_cost = INT_MAX;\n@@ -1897,6 +1931,8 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n \t  best_hard_regno = hard_regno;\n \t  ira_assert (hard_regno >= 0);\n \t}\n+      if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n+\tfprintf (ira_dump_file, \"(%d=%d,%d) \", hard_regno, cost, full_cost);\n     }\n   if (min_full_cost > mem_cost\n       /* Do not spill static chain pointer pseudo when non-local goto\n@@ -2259,16 +2295,6 @@ bucket_allocno_compare_func (const void *v1p, const void *v2p)\n   ira_allocno_t t2 = ALLOCNO_COLOR_DATA (a2)->first_thread_allocno;\n   int cl1 = ALLOCNO_CLASS (a1), cl2 = ALLOCNO_CLASS (a2);\n \n-  /* Push allocnos with minimal hard_reg_prefs first.  */\n-  pref1 = ALLOCNO_COLOR_DATA (a1)->hard_reg_prefs;\n-  pref2 = ALLOCNO_COLOR_DATA (a2)->hard_reg_prefs;\n-  if ((diff = pref1 - pref2) != 0)\n-    return diff;\n-  /* Push allocnos with minimal conflict_allocno_hard_prefs first.  */\n-  pref1 = ALLOCNO_COLOR_DATA (a1)->conflict_allocno_hard_prefs;\n-  pref2 = ALLOCNO_COLOR_DATA (a2)->conflict_allocno_hard_prefs;\n-  if ((diff = pref1 - pref2) != 0)\n-    return diff;\n   freq1 = ALLOCNO_COLOR_DATA (t1)->thread_freq;\n   freq2 = ALLOCNO_COLOR_DATA (t2)->thread_freq;\n   if ((diff = freq1 - freq2) != 0)\n@@ -2294,6 +2320,11 @@ bucket_allocno_compare_func (const void *v1p, const void *v2p)\n   a2_num = ALLOCNO_COLOR_DATA (a2)->available_regs_num;\n   if ((diff = a2_num - a1_num) != 0)\n     return diff;\n+  /* Push allocnos with minimal conflict_allocno_hard_prefs first.  */\n+  pref1 = ALLOCNO_COLOR_DATA (a1)->conflict_allocno_hard_prefs;\n+  pref2 = ALLOCNO_COLOR_DATA (a2)->conflict_allocno_hard_prefs;\n+  if ((diff = pref1 - pref2) != 0)\n+    return diff;\n   return ALLOCNO_NUM (a2) - ALLOCNO_NUM (a1);\n }\n "}]}