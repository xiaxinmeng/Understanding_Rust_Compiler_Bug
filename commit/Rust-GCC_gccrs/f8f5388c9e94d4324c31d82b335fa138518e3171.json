{"sha": "f8f5388c9e94d4324c31d82b335fa138518e3171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmNTM4OGM5ZTk0ZDQzMjRjMzFkODJiMzM1ZmExMzg1MThlMzE3MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-29T03:18:32Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-29T04:29:35Z"}, "message": "c++: Fix infinite looping with invalid operator [PR96137]\n\nMy r11-86 adjusted cp_parser_class_name to do\n\n-  scope = parser->scope;\n+  scope = parser->scope ? parser->scope : parser->context->object_type;\n   if (scope == error_mark_node)\n     return error_mark_node;\n\nbut that caused endless looping in cp_parser_type_specifier_seq (the\nwhile (true) loop) in this invalid test, because we never set a parser\nerror, therefore cp_parser_type_specifier returned error_mark_node\ninstead of NULL_TREE, and we never issued the \"expected type-specifier\"\nerror.\n\nAt first I thought I'd just add cp_parser_simulate_error right before\nthe return, but that regresses crash81.C -- we'd emit multiple errors\nfor \"T::X\".  So the next best thing seemed to revert to pre-r11-86\nbehavior: return early when parser->scope is bad, otherwise proceed to\nget the parser error.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96137\n\t* parser.c (cp_parser_class_name): If parser->scope is\n\terror_mark_node, return it, otherwise continue.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96137\n\t* g++.dg/parse/error63.C: New test.", "tree": {"sha": "747ad1787e1b30432c63d55b245abb2cac5e06aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/747ad1787e1b30432c63d55b245abb2cac5e06aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f5388c9e94d4324c31d82b335fa138518e3171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f5388c9e94d4324c31d82b335fa138518e3171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f5388c9e94d4324c31d82b335fa138518e3171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f5388c9e94d4324c31d82b335fa138518e3171/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "5c1d880c9fc8fb20b6f702f0c7fc712b3737e192", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f5388c9e94d4324c31d82b335fa138518e3171/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f5388c9e94d4324c31d82b335fa138518e3171/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f8f5388c9e94d4324c31d82b335fa138518e3171", "patch": "@@ -24559,7 +24559,9 @@ cp_parser_class_name (cp_parser *parser,\n       where we first want to look up A<T>::a in the class of the object\n       expression, as per [basic.lookup.classref].  */\n   tree scope = parser->scope ? parser->scope : parser->context->object_type;\n-  if (scope == error_mark_node)\n+  /* This only checks parser->scope to avoid duplicate errors; if\n+     ->object_type is erroneous, go on to give a parse error.  */\n+  if (parser->scope == error_mark_node)\n     return error_mark_node;\n \n   /* Any name names a type if we're following the `typename' keyword"}, {"sha": "5472ef05a64ea946a972a8cdc840b52a381a7d26", "filename": "gcc/testsuite/g++.dg/parse/error63.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f5388c9e94d4324c31d82b335fa138518e3171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f5388c9e94d4324c31d82b335fa138518e3171/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror63.C?ref=f8f5388c9e94d4324c31d82b335fa138518e3171", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/96137\n+// { dg-do compile }\n+\n+void\n+fn ()\n+{\n+  X.operator T(); // { dg-error \".X. was not declared in this scope|expected\" }\n+}"}]}