{"sha": "1957bedf29a1b2cc231972aba680fe80199d5498", "node_id": "C_kwDOANBUbNoAKDE5NTdiZWRmMjlhMWIyY2MyMzE5NzJhYmE2ODBmZTgwMTk5ZDU0OTg", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2021-11-09T17:54:54Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-17T15:20:56Z"}, "message": "RISC-V: bitmanip: add splitter to use bexti for \"(a & (1 << BIT_NO)) ? 0 : -1\"\n\nConsider creating a polarity-reversed mask from a set-bit (i.e., if\nthe bit is set, produce all-ones; otherwise: all-zeros).  Using Zbb,\nthis can be expressed as bexti, followed by an addi of minus-one.  To\nenable the combiner to discover this opportunity, we need to split the\ncanonical expression for \"(a & (1 << BIT_NO)) ? 0 : -1\" into a form\ncombinable into bexti.\n\nConsider the function:\n    long f(long a)\n    {\n      return (a & (1 << BIT_NO)) ? 0 : -1;\n    }\nThis produces the following sequence prior to this change:\n\tandi\ta0,a0,16\n\tseqz\ta0,a0\n\tneg\ta0,a0\n\tret\nFollowing this change, it results in:\n\tbexti\ta0,a0,4\n\taddi\ta0,a0,-1\n\tret\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: Add a splitter to generate\n\t  polarity-reversed masks from a set bit using bexti + addi.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-bexti.c: New test.", "tree": {"sha": "144a389ad8f20ad201f6de9932a2fd0392565fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/144a389ad8f20ad201f6de9932a2fd0392565fca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1957bedf29a1b2cc231972aba680fe80199d5498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1957bedf29a1b2cc231972aba680fe80199d5498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1957bedf29a1b2cc231972aba680fe80199d5498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1957bedf29a1b2cc231972aba680fe80199d5498/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "705bae2351a870dc3ff59db47fa0de6baaf829c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705bae2351a870dc3ff59db47fa0de6baaf829c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705bae2351a870dc3ff59db47fa0de6baaf829c8"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "0dd6ebbdd0bc05d483a1ba197ce803245a58030b", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1957bedf29a1b2cc231972aba680fe80199d5498/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1957bedf29a1b2cc231972aba680fe80199d5498/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=1957bedf29a1b2cc231972aba680fe80199d5498", "patch": "@@ -429,3 +429,16 @@\n \t\t\t\t      (const_int 1)\n \t\t\t\t      (match_dup 2)))\n    (set (match_dup 0) (xor:X (match_dup 0) (const_int 1)))])\n+\n+;; We can create a polarity-reversed mask (i.e. bit N -> { set = 0, clear = -1 })\n+;; using a bext(i) followed by an addi instruction.\n+;; This splits the canonical representation of \"(a & (1 << BIT_NO)) ? 0 : -1\".\n+(define_split\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+       (neg:GPR (eq:GPR (zero_extract:GPR (match_operand:GPR 1 \"register_operand\")\n+                                          (const_int 1)\n+                                          (match_operand 2))\n+                        (const_int 0))))]\n+  \"TARGET_ZBS\"\n+  [(set (match_dup 0) (zero_extract:GPR (match_dup 1) (const_int 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:GPR (match_dup 0) (const_int -1)))])"}, {"sha": "d7a89638f46c462f95e0d7931082d269cf269e45", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bexti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1957bedf29a1b2cc231972aba680fe80199d5498/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1957bedf29a1b2cc231972aba680fe80199d5498/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c?ref=1957bedf29a1b2cc231972aba680fe80199d5498", "patch": "@@ -26,6 +26,6 @@ long bexti64_4(long a, char bitno)\n }\n \n /* { dg-final { scan-assembler-times \"bexti\\t\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xori\\t|snez\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xori\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"addi\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"neg\\t\" 1 } } */"}]}