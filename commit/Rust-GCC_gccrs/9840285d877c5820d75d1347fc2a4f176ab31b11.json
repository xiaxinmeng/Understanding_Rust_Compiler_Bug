{"sha": "9840285d877c5820d75d1347fc2a4f176ab31b11", "node_id": "C_kwDOANBUbNoAKDk4NDAyODVkODc3YzU4MjBkNzVkMTM0N2ZjMmE0ZjE3NmFiMzFiMTE", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2022-01-09T15:35:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:49:52Z"}, "message": "Implement CONVERT specifier for OPEN.\n\nThis patch, based on Jakub's work, implements the CONVERT\nspecifier for the power-ieee128 brach.  It allows specifying\nthe conversion as r16_ieee,big_endian and the other way around,\nbased on a table.  Setting the conversion via environment\nvariable and via program option does not yet work.\n\ngcc/ChangeLog:\n\n\t* flag-types.h (enum gfc_convert): Add flags for\n\tconversion.\n\ngcc/fortran/ChangeLog:\n\n\t* libgfortran.h (unit_convert): Add flags.\n\nlibgfortran/ChangeLog:\n\n\t* Makefile.in: Regenerate.\n\t* io/file_pos.c (unformatted_backspace): Mask off\n\tR16 parts for convert.\n\t* io/inquire.c (inquire_via_unit): Add cases for\n\tR16 parts.\n\t* io/open.c (st_open): Add cases for R16 conversion.\n\t* io/transfer.c (unformatted_read): Adjust for R16 conversions.\n\t(unformatted_write): Likewise.\n\t(us_read): Mask of R16 bits.\n\t(data_transfer_init): Likewiese.\n\t(write_us_marker): Likewise.", "tree": {"sha": "d26cdaba1d95d45635a068634a0b4285e3c1c813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d26cdaba1d95d45635a068634a0b4285e3c1c813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9840285d877c5820d75d1347fc2a4f176ab31b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9840285d877c5820d75d1347fc2a4f176ab31b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9840285d877c5820d75d1347fc2a4f176ab31b11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9840285d877c5820d75d1347fc2a4f176ab31b11/comments", "author": null, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79f6e61d5849408c3137dbfa5d49e7066f9df7b"}], "stats": {"total": 208, "additions": 193, "deletions": 15}, "files": [{"sha": "d92c167d274a9733ee8991fbae844730a13b4b27", "filename": "gcc/flag-types.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -424,7 +424,15 @@ enum gfc_convert\n   GFC_FLAG_CONVERT_NATIVE = 0,\n   GFC_FLAG_CONVERT_SWAP,\n   GFC_FLAG_CONVERT_BIG,\n-  GFC_FLAG_CONVERT_LITTLE\n+  GFC_FLAG_CONVERT_LITTLE,\n+  GFC_FLAG_CONVERT_R16_IEEE = 4,\n+  GFC_FLAG_CONVERT_R16_IEEE_SWAP,\n+  GFC_FLAG_CONVERT_R16_IEEE_BIG,\n+  GFC_FLAG_CONVERT_R16_IEEE_LITTLE,\n+  GFC_FLAG_CONVERT_R16_IBM = 8,\n+  GFC_FLAG_CONVERT_R16_IBM_SWAP,\n+  GFC_FLAG_CONVERT_R16_IBM_BIG,\n+  GFC_FLAG_CONVERT_R16_IBM_LITTLE,\n };\n \n "}, {"sha": "ddba41c04f343197011976c3a5d87e5e2f00cf08", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -86,14 +86,22 @@ along with GCC; see the file COPYING3.  If not see\n #define GFC_INVALID_UNIT   -3\n \n /* Possible values for the CONVERT I/O specifier.  */\n-/* Keep in sync with GFC_FLAG_CONVERT_* in gcc/flags.h.  */\n+/* Keep in sync with GFC_FLAG_CONVERT_* in gcc/flag-types.h.  */\n typedef enum\n {\n   GFC_CONVERT_NONE = -1,\n   GFC_CONVERT_NATIVE = 0,\n   GFC_CONVERT_SWAP,\n   GFC_CONVERT_BIG,\n-  GFC_CONVERT_LITTLE\n+  GFC_CONVERT_LITTLE,\n+  GFC_CONVERT_R16_IEEE = 4,\n+  GFC_CONVERT_R16_IEEE_SWAP,\n+  GFC_CONVERT_R16_IEEE_BIG,\n+  GFC_CONVERT_R16_IEEE_LITTLE,\n+  GFC_CONVERT_R16_IBM = 8,\n+  GFC_CONVERT_R16_IBM_SWAP,\n+  GFC_CONVERT_R16_IBM_BIG,\n+  GFC_CONVERT_R16_IBM_LITTLE,\n }\n unit_convert;\n "}, {"sha": "cf500a002e8478789aa5471321c76987d2d4db04", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -719,6 +719,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@"}, {"sha": "18b1feaefc48622c8878820dd0bb88c1a89f21e2", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -104,6 +104,11 @@ unformatted_backspace (st_parameter_filepos *fpp, gfc_unit *u)\n   ssize_t length;\n   int continued;\n   char p[sizeof (GFC_INTEGER_8)];\n+  int convert = u->flags.convert;\n+\n+#ifdef HAVE_GFC_REAL_17\n+  convert &= ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+#endif\n \n   if (compile_options.record_marker == 0)\n     length = sizeof (GFC_INTEGER_4);\n@@ -119,7 +124,7 @@ unformatted_backspace (st_parameter_filepos *fpp, gfc_unit *u)\n         goto io_error;\n \n       /* Only GFC_CONVERT_NATIVE and GFC_CONVERT_SWAP are valid here.  */\n-      if (likely (u->flags.convert == GFC_CONVERT_NATIVE))\n+      if (likely (convert == GFC_CONVERT_NATIVE))\n \t{\n \t  switch (length)\n \t    {"}, {"sha": "e42f2eb6628e6f4b3b414504e3d4cc7be7cd9231", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -642,6 +642,24 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit *u)\n \t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"LITTLE_ENDIAN\" : \"BIG_ENDIAN\";\n \t    break;\n \n+#ifdef HAVE_GFC_REAL_17\n+\t  case GFC_CONVERT_NATIVE | GFC_CONVERT_R16_IEEE:\n+\t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"BIG_ENDIAN,R16_IEEE\" : \"LITTLE_ENDIAN,R16_IEEE\";\n+\t    break;\n+\n+\t  case GFC_CONVERT_SWAP | GFC_CONVERT_R16_IEEE:\n+\t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"LITTLE_ENDIAN,R16_IEEE\" : \"BIG_ENDIAN,R16_IEEE\";\n+\t    break;\n+\n+\t  case GFC_CONVERT_NATIVE | GFC_CONVERT_R16_IBM:\n+\t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"BIG_ENDIAN,R16_IBM\" : \"LITTLE_ENDIAN,R16_IBM\";\n+\t    break;\n+\n+\t  case GFC_CONVERT_SWAP | GFC_CONVERT_R16_IBM:\n+\t    p = __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? \"LITTLE_ENDIAN,R16_IBM\" : \"BIG_ENDIAN,R16_IBM\";\n+\t    break;\n+#endif\n+\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad convert\");\n \t  }"}, {"sha": "c9276c7274886240c32fd8922da092d06b358966", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -153,6 +153,28 @@ static const st_option convert_opt[] =\n   { \"swap\", GFC_CONVERT_SWAP},\n   { \"big_endian\", GFC_CONVERT_BIG},\n   { \"little_endian\", GFC_CONVERT_LITTLE},\n+#ifdef HAVE_GFC_REAL_17\n+  /* Rather than write a special parsing routine, enumerate all the\n+     possibilities here.  */\n+  { \"r16_ieee\", GFC_CONVERT_R16_IEEE},\n+  { \"r16_ibm\", GFC_CONVERT_R16_IBM},\n+  { \"native,r16_ieee\", GFC_CONVERT_R16_IEEE},\n+  { \"native,r16_ibm\", GFC_CONVERT_R16_IBM},\n+  { \"r16_ieee,native\", GFC_CONVERT_R16_IEEE},\n+  { \"r16_ibm,native\", GFC_CONVERT_R16_IBM},\n+  { \"swap,r16_ieee\", GFC_CONVERT_R16_IEEE_SWAP},\n+  { \"swap,r16_ibm\", GFC_CONVERT_R16_IBM_SWAP},\n+  { \"r16_ieee,swap\", GFC_CONVERT_R16_IEEE_SWAP},\n+  { \"r16_ibm,swap\", GFC_CONVERT_R16_IBM_SWAP},\n+  { \"big_endian,r16_ieee\", GFC_CONVERT_R16_IEEE_BIG},\n+  { \"big_endian,r16_ibm\", GFC_CONVERT_R16_IBM_BIG},\n+  { \"r16_ieee,big_endian\", GFC_CONVERT_R16_IEEE_BIG},\n+  { \"r16_ibm,big_endian\", GFC_CONVERT_R16_IBM_BIG},\n+  { \"little_endian,r16_ieee\", GFC_CONVERT_R16_IEEE_LITTLE},\n+  { \"little_endian,r16_ibm\", GFC_CONVERT_R16_IBM_LITTLE},\n+  { \"r16_ieee,little_endian\", GFC_CONVERT_R16_IEEE_LITTLE},\n+  { \"r16_ibm,little_endian\",  GFC_CONVERT_R16_IBM_LITTLE},\n+#endif\n   { NULL, 0}\n };\n \n@@ -820,7 +842,14 @@ st_open (st_parameter_open *opp)\n       else\n \tconv = compile_options.convert;\n     }\n-  \n+\n+  flags.convert = 0;\n+\n+#ifdef HAVE_GFC_REAL_17\n+  flags.convert = conv & (GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+  conv &= ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+#endif\n+\n   switch (conv)\n     {\n     case GFC_CONVERT_NATIVE:\n@@ -840,7 +869,7 @@ st_open (st_parameter_open *opp)\n       break;\n     }\n \n-  flags.convert = conv;\n+  flags.convert |= conv;\n \n   if (flags.position != POSITION_UNSPECIFIED\n       && flags.access == ACCESS_DIRECT)"}, {"sha": "8e4f64db17793f8c0cb525250416d80afafb4cf6", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 118, "deletions": 9, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9840285d877c5820d75d1347fc2a4f176ab31b11/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=9840285d877c5820d75d1347fc2a4f176ab31b11", "patch": "@@ -1088,6 +1088,8 @@ static void\n unformatted_read (st_parameter_dt *dtp, bt type,\n \t\t  void *dest, int kind, size_t size, size_t nelems)\n {\n+  unit_convert convert;\n+\n   if (type == BT_CLASS)\n     {\n \t  int unit = dtp->u.p.current_unit->unit_number;\n@@ -1126,8 +1128,8 @@ unformatted_read (st_parameter_dt *dtp, bt type,\n     size *= GFC_SIZE_OF_CHAR_KIND(kind);\n   read_block_direct (dtp, dest, size * nelems);\n \n-  if (unlikely (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_SWAP)\n-      && kind != 1)\n+  convert = dtp->u.p.current_unit->flags.convert;\n+  if (unlikely (convert != GFC_CONVERT_NATIVE) && kind != 1)\n     {\n       /* Handle wide chracters.  */\n       if (type == BT_CHARACTER)\n@@ -1142,7 +1144,50 @@ unformatted_read (st_parameter_dt *dtp, bt type,\n   \t  nelems *= 2;\n   \t  size /= 2;\n   \t}\n+#ifndef HAVE_GFC_REAL_17\n       bswap_array (dest, dest, size, nelems);\n+#else\n+      unit_convert bswap = convert & ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+      if (bswap == GFC_CONVERT_SWAP)\n+\tbswap_array (dest, dest, size, nelems);\n+\n+      if ((convert & GFC_CONVERT_R16_IEEE)\n+\t  && kind == 16\n+\t  && (type == BT_REAL || type == BT_COMPLEX))\n+\t{\n+\t  char *pd = dest;\n+\t  for (size_t i = 0; i < nelems; i++)\n+\t    {\n+\t      GFC_REAL_16 r16;\n+\t      GFC_REAL_17 r17;\n+\t      memcpy (&r17, pd, 16);\n+\t      r16 = r17;\n+\t      memcpy (pd, &r16, 16);\n+\t      pd += size;\n+\t    }\n+\t}\n+      else if ((dtp->u.p.current_unit->flags.convert & GFC_CONVERT_R16_IBM)\n+\t       && kind == 17\n+\t       && (type == BT_REAL || type == BT_COMPLEX))\n+\t{\n+\t  if (type == BT_COMPLEX && size == 32)\n+\t    {\n+\t      nelems *= 2;\n+\t      size /= 2;\n+\t    }\n+\n+\t  char *pd = dest;\n+\t  for (size_t i = 0; i < nelems; i++)\n+\t    {\n+\t      GFC_REAL_16 r16;\n+\t      GFC_REAL_17 r17;\n+\t      memcpy (&r16, pd, 16);\n+\t      r17 = r16;\n+\t      memcpy (pd, &r17, 16);\n+\t      pd += size;\n+\t    }\n+\t}\n+#endif /* HAVE_GFC_REAL_17.  */\n     }\n }\n \n@@ -1156,6 +1201,8 @@ static void\n unformatted_write (st_parameter_dt *dtp, bt type,\n \t\t   void *source, int kind, size_t size, size_t nelems)\n {\n+  unit_convert convert;\n+\n   if (type == BT_CLASS)\n     {\n \t  int unit = dtp->u.p.current_unit->unit_number;\n@@ -1190,8 +1237,14 @@ unformatted_write (st_parameter_dt *dtp, bt type,\n \t  return;\n     }\n \n-  if (likely (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE)\n-      || kind == 1)\n+  convert = dtp->u.p.current_unit->flags.convert;\n+  if (likely (convert == GFC_CONVERT_NATIVE) || kind == 1\n+#ifdef HAVE_GFC_REAL_17\n+      || ((type == BT_REAL || type == BT_COMPLEX)\n+\t  && ((kind == 16 && convert == GFC_CONVERT_R16_IBM)\n+\t      || (kind == 17 && convert == GFC_CONVERT_R16_IEEE)))\n+#endif\n+      )\n     {\n       size_t stride = type == BT_CHARACTER ?\n \t\t  size * GFC_SIZE_OF_CHAR_KIND(kind) : size;\n@@ -1233,9 +1286,50 @@ unformatted_write (st_parameter_dt *dtp, bt type,\n \t  else\n \t    nc = nrem;\n \n-\t  bswap_array (buffer, p, size, nc);\n+#ifdef HAVE_GFC_REAL_17\n+\t  if ((dtp->u.p.current_unit->flags.convert & GFC_CONVERT_R16_IEEE)\n+\t      && kind == 16\n+\t      && (type == BT_REAL || type == BT_COMPLEX))\n+\t    {\n+\t      for (size_t i = 0; i < nc; i++)\n+\t\t{\n+\t\t  GFC_REAL_16 r16;\n+\t\t  GFC_REAL_17 r17;\n+\t\t  memcpy (&r16, p, 16);\n+\t\t  r17 = r16;\n+\t\t  memcpy (&buffer[i * 16], &r17, 16);\n+\t\t  p += 16;\n+\t\t}\n+\t      if ((dtp->u.p.current_unit->flags.convert\n+\t\t   & ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM))\n+\t\t  == GFC_CONVERT_SWAP)\n+\t\tbswap_array (buffer, buffer, size, nc);\n+\t    }\n+\t  else if ((dtp->u.p.current_unit->flags.convert & GFC_CONVERT_R16_IBM)\n+\t\t   && kind == 17\n+\t\t   && (type == BT_REAL || type == BT_COMPLEX))\n+\t    {\n+\t      for (size_t i = 0; i < nc; i++)\n+\t\t{\n+\t\t  GFC_REAL_16 r16;\n+\t\t  GFC_REAL_17 r17;\n+\t\t  memcpy (&r17, p, 16);\n+\t\t  r16 = r17;\n+\t\t  memcpy (&buffer[i * 16], &r16, 16);\n+\t\t  p += 16;\n+\t\t}\n+\t      if ((dtp->u.p.current_unit->flags.convert\n+\t\t   & ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM))\n+\t\t  == GFC_CONVERT_SWAP)\n+\t\tbswap_array (buffer, buffer, size, nc);\n+\t    }\n+\t  else\n+#endif\n+\t    {\n+\t      bswap_array (buffer, p, size, nc);\n+\t      p += size * nc;\n+\t    }\n \t  write_buf (dtp, buffer, size * nc);\n-\t  p += size * nc;\n \t  nrem -= nc;\n \t}\n       while (nrem > 0);\n@@ -2691,8 +2785,12 @@ us_read (st_parameter_dt *dtp, int continued)\n       return;\n     }\n \n+  int convert = dtp->u.p.current_unit->flags.convert;\n+#ifdef HAVE_GFC_REAL_17\n+  convert &= ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+#endif\n   /* Only GFC_CONVERT_NATIVE and GFC_CONVERT_SWAP are valid here.  */\n-  if (likely (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE))\n+  if (likely (convert == GFC_CONVERT_NATIVE))\n     {\n       switch (nr)\n \t{\n@@ -2894,6 +2992,13 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n       if (conv == GFC_CONVERT_NONE)\n \tconv = compile_options.convert;\n \n+      u_flags.convert = 0;\n+\n+#ifdef HAVE_GFC_REAL_17\n+      u_flags.convert = conv & (GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+      conv &= ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+#endif\n+\n       switch (conv)\n \t{\n \tcase GFC_CONVERT_NATIVE:\n@@ -2913,7 +3018,7 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n \t  break;\n \t}\n \n-      u_flags.convert = conv;\n+      u_flags.convert |= conv;\n \n       opp.common = dtp->common;\n       opp.common.flags &= IOPARM_COMMON_MASK;\n@@ -3710,8 +3815,12 @@ write_us_marker (st_parameter_dt *dtp, const gfc_offset buf)\n   else\n     len = compile_options.record_marker;\n \n+  int convert = dtp->u.p.current_unit->flags.convert;\n+#ifdef HAVE_GFC_REAL_17\n+  convert &= ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n+#endif\n   /* Only GFC_CONVERT_NATIVE and GFC_CONVERT_SWAP are valid here.  */\n-  if (likely (dtp->u.p.current_unit->flags.convert == GFC_CONVERT_NATIVE))\n+  if (likely (convert == GFC_CONVERT_NATIVE))\n     {\n       switch (len)\n \t{"}]}