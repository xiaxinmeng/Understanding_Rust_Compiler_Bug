{"sha": "613061fdd04360cdc6575c1dc057d465b30dc6d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzMDYxZmRkMDQzNjBjZGM2NTc1YzFkYzA1N2Q0NjViMzBkYzZkMw==", "commit": {"author": {"name": "Mark Kettenis", "email": "kettenis@openbsd.org", "date": "2012-09-02T14:13:21Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2012-09-02T14:13:21Z"}, "message": "config.host (x86_64-*-openbsd*): New target.\n\nlibgcc/\n\n\t* config.host (x86_64-*-openbsd*): New target.\n\ngcc/\n\n\t* config.gcc (x86_64-*-openbsd*): New target.\n\t* config.host (*-*-openbsd*): New target.\n\t* config/openbsd.h (TARGET_C99_FUNCTIONS): Define.\n\t* config/i386/openbsdelf.h: Remove some superfluous defines and\n\tgroup things together in a more logical fashion.\n\t(DBX_REGISTER_NUMBER): Provide a\n\tdefinition that works on both 32-bit and 64-bit targets.\n\t(WCHAR_TYPE_SIZE): Hardcode as 32.\n\t(NO_DOLLAR_IN_LABEL): Remove undef.\n\t(TARGET_DEFAULT): Remove.\n\t(SET_ASM_OP): Remove.\n\t(DEFAULT_PCC_STRUCT_RETURN): Undef first to prevent warning.\n\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Synch with x86-64.h\n\t(DWARF2_UNWIND_INFO): Remove define.\n\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n\t* config/host-openbsd.c: New file.\n\t* config/t-openbsd (USER_H): Add EXTRA_HEADERS.\n\t* config/x-openbsd: New file.\n\nFrom-SVN: r190863", "tree": {"sha": "e75b69f83399d75daa03596421f6de996d8c137b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e75b69f83399d75daa03596421f6de996d8c137b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/613061fdd04360cdc6575c1dc057d465b30dc6d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613061fdd04360cdc6575c1dc057d465b30dc6d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613061fdd04360cdc6575c1dc057d465b30dc6d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613061fdd04360cdc6575c1dc057d465b30dc6d3/comments", "author": {"login": "kettenis", "id": 19817229, "node_id": "MDQ6VXNlcjE5ODE3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/19817229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kettenis", "html_url": "https://github.com/kettenis", "followers_url": "https://api.github.com/users/kettenis/followers", "following_url": "https://api.github.com/users/kettenis/following{/other_user}", "gists_url": "https://api.github.com/users/kettenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kettenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kettenis/subscriptions", "organizations_url": "https://api.github.com/users/kettenis/orgs", "repos_url": "https://api.github.com/users/kettenis/repos", "events_url": "https://api.github.com/users/kettenis/events{/privacy}", "received_events_url": "https://api.github.com/users/kettenis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee86a05fd0280deb393058ae2dec7b47b70b7987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee86a05fd0280deb393058ae2dec7b47b70b7987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee86a05fd0280deb393058ae2dec7b47b70b7987"}], "stats": {"total": 240, "additions": 174, "deletions": 66}, "files": [{"sha": "b1f8c50131667b1e82eb0d081f8c95e4ff6351c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -1,3 +1,24 @@\n+2012-09-02  Mark Kettenis  <kettenis@openbsd.org>\n+\n+\t* config.gcc (x86_64-*-openbsd*): New target.\n+\t* config.host (*-*-openbsd*): New target.\n+\t* config/openbsd.h (TARGET_C99_FUNCTIONS): Define.\n+\t* config/i386/openbsdelf.h: Remove some superfluous defines and\n+\tgroup things together in a more logical fashion.\n+\t(DBX_REGISTER_NUMBER): Provide a\n+\tdefinition that works on both 32-bit and 64-bit targets.\n+\t(WCHAR_TYPE_SIZE): Hardcode as 32.\n+\t(NO_DOLLAR_IN_LABEL): Remove undef.\n+\t(TARGET_DEFAULT): Remove.\n+\t(SET_ASM_OP): Remove.\n+\t(DEFAULT_PCC_STRUCT_RETURN): Undef first to prevent warning.\n+\t(ASM_OUTPUT_MAX_SKIP_ALIGN): Synch with x86-64.h\n+\t(DWARF2_UNWIND_INFO): Remove define.\n+\t(HAVE_ENABLE_EXECUTE_STACK): Define.\n+\t* config/host-openbsd.c: New file.\n+\t* config/t-openbsd (USER_H): Add EXTRA_HEADERS.\n+\t* config/x-openbsd: New file.\n+\n 2012-09-02  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (*extend<mode>si2_compact_mem_disp): Pass iterated"}, {"sha": "514f672a97aed06b0d8e6493e1b8253a8086ff9b", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -1183,6 +1183,13 @@ i[34567]86-*-openbsd*)\n \tgas=yes\n \tgnu_ld=yes\n \t;;\n+x86_64-*-openbsd*)\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h\"\n+\ttm_file=\"${tm_file} openbsd.h openbsd-stdint.h openbsd-libpthread.h i386/x86-64.h i386/openbsdelf.h\"\n+\textra_options=\"${extra_options} openbsd.opt\"\n+\tgas=yes\n+\tgnu_ld=yes\n+\t;;\n i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* | i[34567]86-*-kopensolaris*-gnu)\n \t\t\t# Intel 80386's running GNU/*\n \t\t\t# with ELF format using glibc 2"}, {"sha": "dfc5ac89bc09ab58f65ae898e45dd55d5eea79fd", "filename": "gcc/config.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -268,6 +268,10 @@ case ${host} in\n     out_host_hook_obj=host-linux.o\n     host_xmake_file=\"${host_xmake_file} x-linux\"\n     ;;\n+  *-*-openbsd*)\n+    out_host_hook_obj=host-openbsd.o\n+    host_xmake_file=\"${host_xmake_file} x-openbsd\"\n+    ;;\n   ia64-*-hpux*)\n     use_long_long_for_widest_fast_int=yes\n     out_host_hook_obj=host-hpux.o"}, {"sha": "955deddc8b5113f1d480c48d79cdf19106cadc4a", "filename": "gcc/config/host-openbsd.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fhost-openbsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fhost-openbsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fhost-openbsd.c?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -0,0 +1,83 @@\n+/* OpenBSD host-specific hook definitions.\n+   Copyright (C) 2004, 2007, 2008, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"hosthooks.h\"\n+#include \"hosthooks-def.h\"\n+\n+\n+#undef HOST_HOOKS_GT_PCH_GET_ADDRESS\n+#define HOST_HOOKS_GT_PCH_GET_ADDRESS openbsd_gt_pch_get_address\n+#undef HOST_HOOKS_GT_PCH_USE_ADDRESS\n+#define HOST_HOOKS_GT_PCH_USE_ADDRESS openbsd_gt_pch_use_address\n+\n+/* For various ports, try to guess a fixed spot in the vm space\n+   that's probably free.  */\n+#if defined(__amd64__)\n+# define TRY_EMPTY_VM_SPACE\t0x400000000000\n+#elif defined(__i386__)\n+# define TRY_EMPTY_VM_SPACE\t0xb0000000\n+#else\n+# define TRY_EMPTY_VM_SPACE\t0\n+#endif\n+\n+/* Determine a location where we might be able to reliably allocate\n+   SIZE bytes.  FD is the PCH file, though we should return with the\n+   file unmapped.  */\n+\n+static void *\n+openbsd_gt_pch_get_address (size_t size, int fd)\n+{\n+  void *addr;\n+\n+  addr = mmap ((void *) TRY_EMPTY_VM_SPACE, size, PROT_READ | PROT_WRITE,\n+\t       MAP_PRIVATE, fd, 0);\n+\n+  /* If we failed the map, that means there's *no* free space.  */\n+  if (addr == (void *) MAP_FAILED)\n+    return NULL;\n+  /* Unmap the area before returning.  */\n+  munmap (addr, size);\n+\n+  return addr;\n+}\n+\n+/* Map SIZE bytes of FD+OFFSET at BASE.  Return 1 if we succeeded at \n+   mapping the data at BASE, -1 if we couldn't.  */\n+\n+static int\n+openbsd_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n+{\n+  void *addr;\n+\n+  /* We're called with size == 0 if we're not planning to load a PCH\n+     file at all.  This allows the hook to free any static space that\n+     we might have allocated at link time.  */\n+  if (size == 0)\n+    return -1;\n+\n+  addr = mmap (base, size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, offset);\n+\n+  return addr == base ? 1 : -1;\n+}\n+\n+\f\n+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "6ea473dd4ee46f78dd63d4bbb2464514cbb35a4d", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 44, "deletions": 65, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -18,42 +18,18 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* This keeps us from using libraries compiled with the native cc, so\n-   undef it. */\n-#undef NO_DOLLAR_IN_LABEL\n-\n-/* Override the default comment-starter of \"/\".  */\n-#undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \"#\"\n-\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n-\n-/* This goes away when the math-emulator is fixed */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n-\n-/* Run-time target specifications */\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n     \tOPENBSD_OS_CPP_BUILTINS();\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* As an elf system, we need crtbegin/crtend stuff.  */\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"\\\n-\t%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \\\n-\tcrtbegin%O%s} %{shared:crtbeginS%O%s}\"\n-#undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n-\n-/* Layout of source language data types.  */\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n) \\\n+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n-/* This must agree with <machine/ansi.h> */\n+/* This must agree with <machine/_types.h>.  */\n #undef SIZE_TYPE\n #define SIZE_TYPE \"long unsigned int\"\n \n@@ -64,64 +40,57 @@ along with GCC; see the file COPYING3.  If not see\n #define WCHAR_TYPE \"int\"\n \n #undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+#define WCHAR_TYPE_SIZE 32\n \n #undef WINT_TYPE\n #define WINT_TYPE \"int\"\n \n-/* Assembler format: overall framework.  */\n+/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n+   we want to retain compatibility with older gcc versions.  */\n+\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Override the default comment-starter of \"/\".  */\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n \n #undef ASM_APP_ON\n #define ASM_APP_ON \"#APP\\n\"\n \n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#undef SET_ASM_OP\n-#define SET_ASM_OP\t\"\\t.set\\t\"\n-\n-/* The following macros were originally stolen from i386v4.h.\n-   These have to be defined to get PIC code correct.  */\n-\n-/* Assembler format: dispatch tables.  */\n-\n-/* Assembler format: sections.  */\n-\n-/* Stack & calling: aggregate returns.  */\n-\n-/* Don't default to pcc-struct-return, because gcc is the only compiler, and\n-   we want to retain compatibility with older gcc versions.  */\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n \n-/* Assembler format: alignment output.  */\n+   This is used to align code labels according to Intel recommendations.  */\n \n #ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n-#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \\\n-  if ((LOG) != 0) {\\\n-    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG)); \\\n-    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP)); \\\n-  }\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if ((LOG) != 0) {\t\t\t\t\t\t\t\\\n+      if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+      else {\t\t\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n+\t/* Make sure that we have at least 8 byte alignment if > 8 byte \\\n+\t   alignment is preferred.  */\t\t\t\t\t\\\n+\tif ((LOG) > 3\t\t\t\t\t\t\t\\\n+\t    && (1 << (LOG)) > ((MAX_SKIP) + 1)\t\t\t\t\\\n+\t    && (MAX_SKIP) >= 7)\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.p2align 3\\n\", (FILE));\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n #endif\n \n-/* Stack & calling: profiling.  */\n-\n /* OpenBSD's profiler recovers all information from the stack pointer.\n-   The icky part is not here, but in machine/profile.h.  */\n+   The icky part is not here, but in <machine/profile.h>.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n   fputs (flag_pic ? \"\\tcall __mcount@PLT\\n\": \"\\tcall __mcount\\n\", FILE);\n \n-/* Assembler format: exception region output.  */\n-\n-/* our configuration still doesn't handle dwarf2 correctly */\n-#define DWARF2_UNWIND_INFO 0\n-\n-/* Assembler format: alignment output.  */\n-\n-/* Note that we pick up ASM_OUTPUT_MAX_SKIP_ALIGN from i386/gas.h */\n-\n-/* Note that we pick up ASM_OUTPUT_MI_THUNK from unix.h.  */\n-\n #undef LINK_SPEC\n #define LINK_SPEC \\\n   \"%{!shared:%{!nostdlib:%{!r:%{!e*:-e __start}}}} \\\n@@ -131,4 +100,14 @@ along with GCC; see the file COPYING3.  If not see\n    %{assert*} \\\n    -dynamic-linker /usr/libexec/ld.so\"\n \n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\\\n+\t%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \\\n+\tcrtbegin%O%s} %{shared:crtbeginS%O%s}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+\n #define OBSD_HAS_CORRECT_SPECS\n+\n+#define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "87c4ce24b3b8bb5245c589fd102ce18bed8797fb", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -145,6 +145,10 @@ while (0)\n #endif\n \n #define TARGET_POSIX_IO\n+\n+/* All new versions of OpenBSD have C99 functions.  */\n+#define TARGET_C99_FUNCTIONS 1\n+\n \f\n /* Runtime target specification.  */\n "}, {"sha": "7637da073b2ad00573ceb10e4642a90d7fa61ea1", "filename": "gcc/config/t-openbsd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Ft-openbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Ft-openbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-openbsd?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -1,2 +1,2 @@\n # We don't need GCC's own include files.\n-USER_H =\n+USER_H = $(EXTRA_HEADERS)"}, {"sha": "18e3f659a15e0d6562f56aa60f626fb55cb64738", "filename": "gcc/config/x-openbsd", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fx-openbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/gcc%2Fconfig%2Fx-openbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fx-openbsd?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -0,0 +1,4 @@\n+host-openbsd.o : $(srcdir)/config/host-openbsd.c $(CONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h hosthooks.h hosthooks-def.h $(HOOKS_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/host-openbsd.c"}, {"sha": "463b87289c6e4b51ac1d8cc6da059346a8da490c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -1,3 +1,7 @@\n+2012-09-01  Mark Kettenis  <kettenis@openbsd.org>\n+\n+\t* config.host (x86_64-*-openbsd*): New target.\n+\t\n 2012-08-29  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config/mips/crtfastmath.c (set_fast_math): Add 'nomips16'"}, {"sha": "f9bab01c094b33a2af6643f827f805e3fe3fa64e", "filename": "libgcc/config.host", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/613061fdd04360cdc6575c1dc057d465b30dc6d3/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/613061fdd04360cdc6575c1dc057d465b30dc6d3/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=613061fdd04360cdc6575c1dc057d465b30dc6d3", "patch": "@@ -527,6 +527,8 @@ i[34567]86-*-openbsd2.*|i[34567]86-*openbsd3.[0123])\n \t;;\n i[34567]86-*-openbsd*)\n \t;;\n+x86_64-*-openbsd*)\n+\t;;\n i[34567]86-*-linux*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\""}]}