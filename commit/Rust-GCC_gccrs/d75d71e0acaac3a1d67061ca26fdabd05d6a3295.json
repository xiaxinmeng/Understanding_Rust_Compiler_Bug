{"sha": "d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1ZDcxZTBhY2FhYzNhMWQ2NzA2MWNhMjZmZGFiZDA1ZDZhMzI5NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2008-06-22T14:56:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2008-06-22T14:56:08Z"}, "message": "c-lex.c (narrowest_unsigned_type): Change itk to int.\n\n\t* c-lex.c (narrowest_unsigned_type): Change itk to int.\n\t(narrowest_signed_type): Likewise.\n\t* c-typeck.c (c_common_type): Change local variable mclass to enum\n\tmode_class, twice.\n\t(parser_build_binary_op): Compare the TREE_CODE_CLASS with\n\ttcc_comparison, not the tree code itself.\n\t* c-common.c (def_fn_type): Pass int, not an enum, to va_arg.\n\t(c_expand_expr): Cast modifier to enum expand_modifier.\n\t* c-common.h (C_RID_CODE): Add casts.\n\t(C_SET_RID_CODE): Define.\n\t* c-parser.c (c_parse_init): Use C_SET_RID_CODE.\n\t(c_lex_one_token): Add cast to avoid warning.\n\t(c_parser_objc_type_name): Rename local typename to type_name.\n\t(check_no_duplicate_clause): Change code parameter to enum\n\tomp_clause_code.\n\t(c_parser_omp_var_list_parens): Change kind parameter to enum\n\tomp_clause_code.\n\t(c_parser_omp_flush): Pass OMP_CLAUSE_ERROR, not 0, to\n\tc_parser_omp_list_var_parens.\n\t(c_parser_omp_threadprivate): Likewise.\n\t* cp/lex.c (init_reswords): Use C_SET_RID_CODE.\n\t* cp/parser.c (cp_lexer_get_preprocessor_token): Likewise.\n\t* c-format.c (NO_FMT): Define.\n\t(printf_length_specs): Use NO_FMT.\n\t(asm_fprintf_length_specs): Likewise.\n\t(gcc_diag_length_specs): Likewise.\n\t(scanf_length_specs): Likewise.\n\t(strfmon_length_specs): Likewise.\n\t(gcc_gfc_length_specs): Likewise.\n\t(printf_flag_specs): Change 0 to STD_C89.\n\t(asm_fprintf_flag_specs): Likewise.\n\t(gcc_diag_flag_specs): Likewise.\n\t(gcc_cxxdiag_flag_specs): Likewise.\n\t(scanf_flag_specs): Likewise.\n\t(strftime_flag_specs): Likewise.\n\t(strfmon_flag_specs): Likewise.\n\t(print_char_table): Likewise.\n\t(asm_fprintf_char_table): Likewise.\n\t(gcc_diag_char_table): Likewise.\n\t(gcc_tdiag_char_table): Likewise.\n\t(gcc_cdiag_char_table): Likewise.\n\t(gcc_cxxdiag_char_table): Likewise.\n\t(gcc_gfc_char_table): Likewise.\n\t(scan_char_table): Likewise.\n\t(time_char_table): Likewis.\n\t(monetary_char_table): Likewise.\n\t* c-format.h (BADLEN): Likewise.\n\nFrom-SVN: r137019", "tree": {"sha": "3254f9eb50a8e43a9e66b45353bc14f5b46d8dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3254f9eb50a8e43a9e66b45353bc14f5b46d8dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/comments", "author": null, "committer": null, "parents": [{"sha": "caa8b3c687ebe2959c5499894986e0df3d07fdb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa8b3c687ebe2959c5499894986e0df3d07fdb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa8b3c687ebe2959c5499894986e0df3d07fdb7"}], "stats": {"total": 184, "additions": 121, "deletions": 63}, "files": [{"sha": "7f86169333207954358222a8c1e47750fabcb6fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -1,3 +1,53 @@\n+2008-06-22  Ian Lance Taylor  <iant@google.com>\n+\n+\t* c-lex.c (narrowest_unsigned_type): Change itk to int.\n+\t(narrowest_signed_type): Likewise.\n+\t* c-typeck.c (c_common_type): Change local variable mclass to enum\n+\tmode_class, twice.\n+\t(parser_build_binary_op): Compare the TREE_CODE_CLASS with\n+\ttcc_comparison, not the tree code itself.\n+\t* c-common.c (def_fn_type): Pass int, not an enum, to va_arg.\n+\t(c_expand_expr): Cast modifier to enum expand_modifier.\n+\t* c-common.h (C_RID_CODE): Add casts.\n+\t(C_SET_RID_CODE): Define.\n+\t* c-parser.c (c_parse_init): Use C_SET_RID_CODE.\n+\t(c_lex_one_token): Add cast to avoid warning.\n+\t(c_parser_objc_type_name): Rename local typename to type_name.\n+\t(check_no_duplicate_clause): Change code parameter to enum\n+\tomp_clause_code.\n+\t(c_parser_omp_var_list_parens): Change kind parameter to enum\n+\tomp_clause_code.\n+\t(c_parser_omp_flush): Pass OMP_CLAUSE_ERROR, not 0, to\n+\tc_parser_omp_list_var_parens.\n+\t(c_parser_omp_threadprivate): Likewise.\n+\t* cp/lex.c (init_reswords): Use C_SET_RID_CODE.\n+\t* cp/parser.c (cp_lexer_get_preprocessor_token): Likewise.\n+\t* c-format.c (NO_FMT): Define.\n+\t(printf_length_specs): Use NO_FMT.\n+\t(asm_fprintf_length_specs): Likewise.\n+\t(gcc_diag_length_specs): Likewise.\n+\t(scanf_length_specs): Likewise.\n+\t(strfmon_length_specs): Likewise.\n+\t(gcc_gfc_length_specs): Likewise.\n+\t(printf_flag_specs): Change 0 to STD_C89.\n+\t(asm_fprintf_flag_specs): Likewise.\n+\t(gcc_diag_flag_specs): Likewise.\n+\t(gcc_cxxdiag_flag_specs): Likewise.\n+\t(scanf_flag_specs): Likewise.\n+\t(strftime_flag_specs): Likewise.\n+\t(strfmon_flag_specs): Likewise.\n+\t(print_char_table): Likewise.\n+\t(asm_fprintf_char_table): Likewise.\n+\t(gcc_diag_char_table): Likewise.\n+\t(gcc_tdiag_char_table): Likewise.\n+\t(gcc_cdiag_char_table): Likewise.\n+\t(gcc_cxxdiag_char_table): Likewise.\n+\t(gcc_gfc_char_table): Likewise.\n+\t(scan_char_table): Likewise.\n+\t(time_char_table): Likewis.\n+\t(monetary_char_table): Likewise.\n+\t* c-format.h (BADLEN): Likewise.\n+\n 2008-06-21  Ian Lance Taylor  <iant@google.com>\n \n \t* tree.h (enum tree_code): Include all-tree.def, not tree.def."}, {"sha": "7bb614971d77c098cfd7181b20757ec318fb8033", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -3558,7 +3558,7 @@ def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)\n   va_start (list, n);\n   for (i = 0; i < n; ++i)\n     {\n-      builtin_type a = va_arg (list, builtin_type);\n+      builtin_type a = (builtin_type) va_arg (list, int);\n       t = builtin_types[a];\n       if (t == error_mark_node)\n \tgoto egress;\n@@ -4588,9 +4588,10 @@ finish_label_address_expr (tree label)\n \n rtx\n c_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n-\t       int modifier /* Actually enum_modifier.  */,\n+\t       int modifiera /* Actually enum expand_modifier.  */,\n \t       rtx *alt_rtl)\n {\n+  enum expand_modifier modifier = (enum expand_modifier) modifiera;\n   switch (TREE_CODE (exp))\n     {\n     case COMPOUND_LITERAL_EXPR:"}, {"sha": "3ddb44bd8d665d7ea59984d4317494261515e28e", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -184,7 +184,10 @@ enum c_tree_index\n     CTI_MAX\n };\n \n-#define C_RID_CODE(id)\t(((struct c_common_identifier *) (id))->node.rid_code)\n+#define C_RID_CODE(id) \\\n+  ((enum rid) (((struct c_common_identifier *) (id))->node.rid_code))\n+#define C_SET_RID_CODE(id, code) \\\n+  (((struct c_common_identifier *) (id))->node.rid_code = (unsigned char) code)\n \n /* Identifier part common to the C front ends.  Inherits from\n    tree_identifier, despite appearances.  */"}, {"sha": "6fb96a38ddd67e1c1f5872dfceb42369b118b62b", "filename": "gcc/c-format.c", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -283,36 +283,38 @@ typedef struct format_wanted_type\n   struct format_wanted_type *next;\n } format_wanted_type;\n \n+/* Convenience macro for format_length_info meaning unused.  */\n+#define NO_FMT NULL, FMT_LEN_none, STD_C89\n \n static const format_length_info printf_length_specs[] =\n {\n   { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99 },\n   { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L },\n-  { \"q\", FMT_LEN_ll, STD_EXT, NULL, 0, 0 },\n-  { \"L\", FMT_LEN_L, STD_C89, NULL, 0, 0 },\n-  { \"z\", FMT_LEN_z, STD_C99, NULL, 0, 0 },\n-  { \"Z\", FMT_LEN_z, STD_EXT, NULL, 0, 0 },\n-  { \"t\", FMT_LEN_t, STD_C99, NULL, 0, 0 },\n-  { \"j\", FMT_LEN_j, STD_C99, NULL, 0, 0 },\n-  { \"H\", FMT_LEN_H, STD_EXT, NULL, 0, 0 },\n+  { \"q\", FMT_LEN_ll, STD_EXT, NO_FMT },\n+  { \"L\", FMT_LEN_L, STD_C89, NO_FMT },\n+  { \"z\", FMT_LEN_z, STD_C99, NO_FMT },\n+  { \"Z\", FMT_LEN_z, STD_EXT, NO_FMT },\n+  { \"t\", FMT_LEN_t, STD_C99, NO_FMT },\n+  { \"j\", FMT_LEN_j, STD_C99, NO_FMT },\n+  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT },\n   { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { NO_FMT, NO_FMT }\n };\n \n /* Length specifiers valid for asm_fprintf.  */\n static const format_length_info asm_fprintf_length_specs[] =\n {\n   { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89 },\n-  { \"w\", FMT_LEN_none, STD_C89, NULL, 0, 0 },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { \"w\", FMT_LEN_none, STD_C89, NO_FMT },\n+  { NO_FMT, NO_FMT }\n };\n \n /* Length specifiers valid for GCC diagnostics.  */\n static const format_length_info gcc_diag_length_specs[] =\n {\n   { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89 },\n-  { \"w\", FMT_LEN_none, STD_C89, NULL, 0, 0 },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { \"w\", FMT_LEN_none, STD_C89, NO_FMT },\n+  { NO_FMT, NO_FMT }\n };\n \n /* The custom diagnostics all accept the same length specifiers.  */\n@@ -325,14 +327,14 @@ static const format_length_info scanf_length_specs[] =\n {\n   { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99 },\n   { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L },\n-  { \"q\", FMT_LEN_ll, STD_EXT, NULL, 0, 0 },\n-  { \"L\", FMT_LEN_L, STD_C89, NULL, 0, 0 },\n-  { \"z\", FMT_LEN_z, STD_C99, NULL, 0, 0 },\n-  { \"t\", FMT_LEN_t, STD_C99, NULL, 0, 0 },\n-  { \"j\", FMT_LEN_j, STD_C99, NULL, 0, 0 },\n-  { \"H\", FMT_LEN_H, STD_EXT, NULL, 0, 0 },\n+  { \"q\", FMT_LEN_ll, STD_EXT, NO_FMT },\n+  { \"L\", FMT_LEN_L, STD_C89, NO_FMT },\n+  { \"z\", FMT_LEN_z, STD_C99, NO_FMT },\n+  { \"t\", FMT_LEN_t, STD_C99, NO_FMT },\n+  { \"j\", FMT_LEN_j, STD_C99, NO_FMT },\n+  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT },\n   { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { NO_FMT, NO_FMT }\n };\n \n \n@@ -341,16 +343,16 @@ static const format_length_info scanf_length_specs[] =\n static const format_length_info strfmon_length_specs[] =\n {\n   /* A GNU extension.  */\n-  { \"L\", FMT_LEN_L, STD_C89, NULL, 0, 0 },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { \"L\", FMT_LEN_L, STD_C89, NO_FMT },\n+  { NO_FMT, NO_FMT }\n };\n \n \n /* For now, the Fortran front-end routines only use l as length modifier.  */\n static const format_length_info gcc_gfc_length_specs[] =\n {\n-  { \"l\", FMT_LEN_l, STD_C89, NULL, 0, 0 },\n-  { NULL, 0, 0, NULL, 0, 0 }\n+  { \"l\", FMT_LEN_l, STD_C89, NO_FMT },\n+  { NO_FMT, NO_FMT }\n };\n \n \n@@ -366,7 +368,7 @@ static const format_flag_spec printf_flag_specs[] =\n   { 'w',  0, 0, N_(\"field width\"),     N_(\"field width in printf format\"),     STD_C89 },\n   { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n \n@@ -388,7 +390,7 @@ static const format_flag_spec asm_fprintf_flag_specs[] =\n   { 'w',  0, 0, N_(\"field width\"),     N_(\"field width in printf format\"),     STD_C89 },\n   { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n static const format_flag_pair asm_fprintf_flag_pairs[] =\n@@ -419,7 +421,7 @@ static const format_flag_spec gcc_diag_flag_specs[] =\n   { 'q',  0, 0, N_(\"'q' flag\"),        N_(\"the 'q' diagnostic flag\"),          STD_C89 },\n   { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n #define gcc_tdiag_flag_specs gcc_diag_flag_specs\n@@ -432,7 +434,7 @@ static const format_flag_spec gcc_cxxdiag_flag_specs[] =\n   { 'q',  0, 0, N_(\"'q' flag\"),        N_(\"the 'q' diagnostic flag\"),          STD_C89 },\n   { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n static const format_flag_spec scanf_flag_specs[] =\n@@ -444,7 +446,7 @@ static const format_flag_spec scanf_flag_specs[] =\n   { 'L',  0, 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"),          STD_C89 },\n   { '\\'', 0, 0, N_(\"''' flag\"),               N_(\"the ''' scanf flag\"),                       STD_EXT },\n   { 'I',  0, 0, N_(\"'I' flag\"),               N_(\"the 'I' scanf flag\"),                       STD_EXT },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n \n@@ -467,7 +469,7 @@ static const format_flag_spec strftime_flag_specs[] =\n   { 'E', 0,   0, N_(\"'E' modifier\"), N_(\"the 'E' strftime modifier\"),      STD_C99 },\n   { 'O', 0,   0, N_(\"'O' modifier\"), N_(\"the 'O' strftime modifier\"),      STD_C99 },\n   { 'O', 'o', 0, NULL,               N_(\"the 'O' modifier\"),               STD_EXT },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n \n@@ -494,7 +496,7 @@ static const format_flag_spec strfmon_flag_specs[] =\n   { '#',  0, 0, N_(\"left precision\"),  N_(\"left precision in strfmon format\"),  STD_C89 },\n   { 'p',  0, 0, N_(\"right precision\"), N_(\"right precision in strfmon format\"), STD_C89 },\n   { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in strfmon format\"), STD_C89 },\n-  { 0, 0, 0, NULL, NULL, 0 }\n+  { 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n static const format_flag_pair strfmon_flag_pairs[] =\n@@ -524,7 +526,7 @@ static const format_char_info print_char_table[] =\n   { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"R\",  NULL },\n   /* GNU conversion specifiers.  */\n   { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"-wp\",       \"\",   NULL },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info asm_fprintf_char_table[] =\n@@ -544,7 +546,7 @@ static const format_char_info asm_fprintf_char_table[] =\n   { \"U\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"r\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",  \"\", NULL },\n   { \"@\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_diag_char_table[] =\n@@ -567,7 +569,7 @@ static const format_char_info gcc_diag_char_table[] =\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_tdiag_char_table[] =\n@@ -590,7 +592,7 @@ static const format_char_info gcc_tdiag_char_table[] =\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_cdiag_char_table[] =\n@@ -613,7 +615,7 @@ static const format_char_info gcc_cdiag_char_table[] =\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_cxxdiag_char_table[] =\n@@ -639,7 +641,7 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n \n   { \"<>'\", 0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n   { \"m\",   0, STD_C89, NOARGUMENTS, \"q\",     \"\",   NULL },\n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info gcc_gfc_char_table[] =\n@@ -657,7 +659,7 @@ static const format_char_info gcc_gfc_char_table[] =\n   /* This will require a \"locus\" at runtime.  */\n   { \"L\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"R\", NULL },\n \n-  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info scan_char_table[] =\n@@ -678,7 +680,7 @@ static const format_char_info scan_char_table[] =\n   /* X/Open conversion specifiers.  */\n   { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*mw\",   \"W\",   NULL },\n   { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, \"*amw\",  \"W\",   NULL },\n-  { NULL, 0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL, 0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info time_char_table[] =\n@@ -705,13 +707,13 @@ static const format_char_info time_char_table[] =\n   /* GNU conversion specifiers.  */\n   { \"kls\",\t\t0, STD_EXT, NOLENGTHS, \"-_0Ow\",  \"\",   NULL },\n   { \"P\",\t\t0, STD_EXT, NOLENGTHS, \"\",       \"\",   NULL },\n-  { NULL,\t\t0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL,\t\t0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n static const format_char_info monetary_char_table[] =\n {\n   { \"in\", 0, STD_C89, { T89_D, BADLEN, BADLEN, BADLEN, BADLEN, T89_LD, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }, \"=^+(!-w#p\", \"\", NULL },\n-  { NULL, 0, 0, NOLENGTHS, NULL, NULL, NULL }\n+  { NULL, 0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n \n /* This must be in the same order as enum format_type.  */"}, {"sha": "2b5b50dd738c55f393b65ae743a8eaa9f624f4a3", "filename": "gcc/c-format.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.h?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -117,7 +117,7 @@ typedef struct\n \n /* Macros to fill out tables of these.  */\n #define NOARGUMENTS\t{ T89_V, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }\n-#define BADLEN\t{ 0, NULL, NULL }\n+#define BADLEN\t{ STD_C89, NULL, NULL }\n #define NOLENGTHS\t{ BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN, BADLEN }\n \n "}, {"sha": "73834ef413ad5595644fc87ba18378748d4bd81c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -471,7 +471,7 @@ narrowest_unsigned_type (unsigned HOST_WIDE_INT low,\n \t\t\t unsigned HOST_WIDE_INT high,\n \t\t\t unsigned int flags)\n {\n-  enum integer_type_kind itk;\n+  int itk;\n \n   if ((flags & CPP_N_WIDTH) == CPP_N_SMALL)\n     itk = itk_unsigned_int;\n@@ -487,7 +487,7 @@ narrowest_unsigned_type (unsigned HOST_WIDE_INT low,\n       if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) > high\n \t  || ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) == high\n \t      && TREE_INT_CST_LOW (upper) >= low))\n-\treturn itk;\n+\treturn (enum integer_type_kind) itk;\n     }\n \n   return itk_none;\n@@ -498,7 +498,7 @@ static enum integer_type_kind\n narrowest_signed_type (unsigned HOST_WIDE_INT low,\n \t\t       unsigned HOST_WIDE_INT high, unsigned int flags)\n {\n-  enum integer_type_kind itk;\n+  int itk;\n \n   if ((flags & CPP_N_WIDTH) == CPP_N_SMALL)\n     itk = itk_int;\n@@ -515,7 +515,7 @@ narrowest_signed_type (unsigned HOST_WIDE_INT low,\n       if ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) > high\n \t  || ((unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (upper) == high\n \t      && TREE_INT_CST_LOW (upper) >= low))\n-\treturn itk;\n+\treturn (enum integer_type_kind) itk;\n     }\n \n   return itk_none;"}, {"sha": "45aff80d6c04929bbe88d7b542e45ee2987ce156", "filename": "gcc/c-parser.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -208,7 +208,7 @@ c_parse_init (void)\n \tcontinue;\n \n       id = get_identifier (reswords[i].word);\n-      C_RID_CODE (id) = reswords[i].rid;\n+      C_SET_RID_CODE (id, reswords[i].rid);\n       C_IS_RESERVED_WORD (id) = 1;\n       ridpointers [(int) reswords[i].rid] = id;\n     }\n@@ -396,7 +396,7 @@ c_lex_one_token (c_parser *parser, c_token *token)\n       break;\n     case CPP_PRAGMA:\n       /* We smuggled the cpp_token->u.pragma value in an INTEGER_CST.  */\n-      token->pragma_kind = TREE_INT_CST_LOW (token->value);\n+      token->pragma_kind = (enum pragma_kind) TREE_INT_CST_LOW (token->value);\n       token->value = NULL;\n       break;\n     default:\n@@ -6312,7 +6312,7 @@ static tree\n c_parser_objc_type_name (c_parser *parser)\n {\n   tree quals = NULL_TREE;\n-  struct c_type_name *typename = NULL;\n+  struct c_type_name *type_name = NULL;\n   tree type = NULL_TREE;\n   while (true)\n     {\n@@ -6332,9 +6332,9 @@ c_parser_objc_type_name (c_parser *parser)\n \tbreak;\n     }\n   if (c_parser_next_token_starts_typename (parser))\n-    typename = c_parser_type_name (parser);\n-  if (typename)\n-    type = groktypename (typename);\n+    type_name = c_parser_type_name (parser);\n+  if (type_name)\n+    type = groktypename (type_name);\n   return build_tree_list (quals, type);\n }\n \n@@ -6848,7 +6848,8 @@ c_parser_omp_clause_name (c_parser *parser)\n /* Validate that a clause of the given type does not already exist.  */\n \n static void\n-check_no_duplicate_clause (tree clauses, enum tree_code code, const char *name)\n+check_no_duplicate_clause (tree clauses, enum omp_clause_code code,\n+\t\t\t   const char *name)\n {\n   tree c;\n \n@@ -6914,7 +6915,8 @@ c_parser_omp_variable_list (c_parser *parser, enum omp_clause_code kind,\n    common case for omp clauses.  */\n \n static tree\n-c_parser_omp_var_list_parens (c_parser *parser, enum tree_code kind, tree list)\n+c_parser_omp_var_list_parens (c_parser *parser, enum omp_clause_code kind,\n+\t\t\t      tree list)\n {\n   if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n     {\n@@ -7596,7 +7598,7 @@ c_parser_omp_flush (c_parser *parser)\n {\n   c_parser_consume_pragma (parser);\n   if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n-    c_parser_omp_var_list_parens (parser, 0, NULL);\n+    c_parser_omp_var_list_parens (parser, OMP_CLAUSE_ERROR, NULL);\n   else if (c_parser_next_token_is_not (parser, CPP_PRAGMA_EOL))\n     c_parser_error (parser, \"expected %<(%> or end of line\");\n   c_parser_skip_to_pragma_eol (parser);\n@@ -8231,7 +8233,7 @@ c_parser_omp_threadprivate (c_parser *parser)\n   tree vars, t;\n \n   c_parser_consume_pragma (parser);\n-  vars = c_parser_omp_var_list_parens (parser, 0, NULL);\n+  vars = c_parser_omp_var_list_parens (parser, OMP_CLAUSE_ERROR, NULL);\n \n   /* Mark every variable in VARS to be assigned thread local storage.  */\n   for (t = vars; t; t = TREE_CHAIN (t))"}, {"sha": "d5a549c94782a1ec6674fb34647f19bcd2e6a37e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -722,7 +722,7 @@ c_common_type (tree t1, tree t2)\n \t     signed type.  */\n \t  if (code1 == FIXED_POINT_TYPE && TYPE_UNSIGNED (t1))\n \t    {\n-\t      unsigned char mclass = 0;\n+\t      enum mode_class mclass = (enum mode_class) 0;\n \t      if (GET_MODE_CLASS (m1) == MODE_UFRACT)\n \t\tmclass = MODE_FRACT;\n \t      else if (GET_MODE_CLASS (m1) == MODE_UACCUM)\n@@ -733,7 +733,7 @@ c_common_type (tree t1, tree t2)\n \t    }\n \t  if (code2 == FIXED_POINT_TYPE && TYPE_UNSIGNED (t2))\n \t    {\n-\t      unsigned char mclass = 0;\n+\t      enum mode_class mclass = (enum mode_class) 0;\n \t      if (GET_MODE_CLASS (m2) == MODE_UFRACT)\n \t\tmclass = MODE_FRACT;\n \t      else if (GET_MODE_CLASS (m2) == MODE_UACCUM)\n@@ -2767,7 +2767,7 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n   if (warn_parentheses)\n     warn_about_parentheses (code, code1, code2);\n \n-  if (code1 != tcc_comparison)\n+  if (TREE_CODE_CLASS (code1) != tcc_comparison)\n     warn_logical_operator (code, arg1.value, arg2.value);\n \n   /* Warn about comparisons against string literals, with the exception"}, {"sha": "233011b85d9e84107aee4b7e62b092b077d6a828", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -344,7 +344,7 @@ init_reswords (void)\n   for (i = 0; i < ARRAY_SIZE (reswords); i++)\n     {\n       id = get_identifier (reswords[i].word);\n-      C_RID_CODE (id) = reswords[i].rid;\n+      C_SET_RID_CODE (id, reswords[i].rid);\n       ridpointers [(int) reswords[i].rid] = id;\n       if (! (reswords[i].disable & mask))\n \tC_IS_RESERVED_WORD (id) = 1;"}, {"sha": "7d530f50714c552ed8139917a39a1589da1eabb6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d75d71e0acaac3a1d67061ca26fdabd05d6a3295/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d75d71e0acaac3a1d67061ca26fdabd05d6a3295", "patch": "@@ -446,7 +446,7 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer, cp_token *token)\n \n               /* Clear out the C_RID_CODE so we don't warn about this\n                  particular identifier-turned-keyword again.  */\n-              C_RID_CODE (token->u.value) = RID_MAX;\n+              C_SET_RID_CODE (token->u.value, RID_MAX);\n             }\n \n \t  token->ambiguous_p = false;"}]}