{"sha": "ea9982a840bcc10454e59f431bfded4e42e5a436", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE5OTgyYTg0MGJjYzEwNDU0ZTU5ZjQzMWJmZGVkNGU0MmU1YTQzNg==", "commit": {"author": {"name": "Tom Rix", "email": "trix@redhat.com", "date": "2001-12-17T16:25:12Z"}, "committer": {"name": "Tom Rix", "email": "trix@gcc.gnu.org", "date": "2001-12-17T16:25:12Z"}, "message": "Fix for -maix64 and medium sized struct passing.\n\nFrom-SVN: r48102", "tree": {"sha": "03b872a1710f2ee1a99c3dd61f58585446eb9746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b872a1710f2ee1a99c3dd61f58585446eb9746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea9982a840bcc10454e59f431bfded4e42e5a436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9982a840bcc10454e59f431bfded4e42e5a436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9982a840bcc10454e59f431bfded4e42e5a436", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9982a840bcc10454e59f431bfded4e42e5a436/comments", "author": {"login": "trixirt", "id": 7824193, "node_id": "MDQ6VXNlcjc4MjQxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7824193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trixirt", "html_url": "https://github.com/trixirt", "followers_url": "https://api.github.com/users/trixirt/followers", "following_url": "https://api.github.com/users/trixirt/following{/other_user}", "gists_url": "https://api.github.com/users/trixirt/gists{/gist_id}", "starred_url": "https://api.github.com/users/trixirt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trixirt/subscriptions", "organizations_url": "https://api.github.com/users/trixirt/orgs", "repos_url": "https://api.github.com/users/trixirt/repos", "events_url": "https://api.github.com/users/trixirt/events{/privacy}", "received_events_url": "https://api.github.com/users/trixirt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "301d03af8a3cbf51e79ff35c1aa71a6f353709c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301d03af8a3cbf51e79ff35c1aa71a6f353709c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301d03af8a3cbf51e79ff35c1aa71a6f353709c5"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "e2fcf6c8ed63d20e0fff096646ea0b4f42a33d31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9982a840bcc10454e59f431bfded4e42e5a436/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9982a840bcc10454e59f431bfded4e42e5a436/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea9982a840bcc10454e59f431bfded4e42e5a436", "patch": "@@ -1,3 +1,8 @@\n+2001-12-17  Tom Rix  <trix@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (expand_block_move): Fix limits on max size \n+ \tof bytes.\n+\n 2001-12-17  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* target.h (asm_out.byte_op, asm_out.aligned_op, asm_out.unaligned_op,"}, {"sha": "3bf85d4601a8a632f77557fba177fd08c2e2889f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9982a840bcc10454e59f431bfded4e42e5a436/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9982a840bcc10454e59f431bfded4e42e5a436/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ea9982a840bcc10454e59f431bfded4e42e5a436", "patch": "@@ -4075,25 +4075,9 @@ expand_block_move (operands)\n   if (bytes <= 0)\n     return 1;\n \n-  /* Don't support real large moves.  If string instructions are not used,\n-     then don't generate more than 8 loads.  */\n-  if (TARGET_STRING)\n-    {\n-      if (bytes > 8*4)\n-\treturn 0;\n-    }\n-  else if (! STRICT_ALIGNMENT)\n-    {\n-      if (TARGET_POWERPC64 && align >= 4)\n-\t{\n-\t  if (bytes > 8*8)\n-\t    return 0;\n-\t}\n-      else\n-\tif (bytes > 8*4)\n-\t  return 0;\n-    }\n-  else if (bytes > 8*align)\n+  /* store_one_arg depends on expand_block_move to handle at least the size of\n+     reg_parm_stack_space. */\t\n+  if (bytes > (TARGET_POWERPC64 ? 64 : 32))\n     return 0;\n \n   /* Move the address into scratch registers.  */"}]}