{"sha": "6923255e35a3d54f2083ad0f67edebb3f1b86506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkyMzI1NWUzNWEzZDU0ZjIwODNhZDBmNjdlZGViYjNmMWI4NjUwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-07T08:55:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-07T08:55:35Z"}, "message": "debug: Pass --gdwarf-N to assembler if fixed gas is detected during configure\n\n> > As for the test assembly, I'd say we should take\n> > #define F void foo (void) {}\n> > F\n> > compile it with\n> > gcc -S -O2 -g1 -dA -gno-as-loc-support -fno-merge-debug-strings\n> > remove .cfi_* directives, remove the ret instruction, change @function\n> > and @progbits to %function and %progbits, change .uleb128 to just .byte,\n> > I think all the values should be small enough, maybe change .value to\n> > .2byte and .long to .4byte (whatever is most portable across different\n> > arches and gas versions), simplify (shorten) strings and adjust\n> > sizes, and do something with the .quad directives, that is dependent on\n> > the address size, perhaps just take those attributes out and adjust\n> > .debug_abbrev?  Finally, remove all comments (emit them in the first case\n> > just to better understand the debug info).\n>\n> I'm afraid it is hard to avoid the .quad or .8byte.\n> Here is a 64-bit address version that assembles fine by both x86_64 and\n> aarch64 as.\n> Unfortunately doesn't fail with broken gas versions with -gdwarf-2 without\n> the nop, so we'll need at least a nop in there.\n> Fortunately gcc/configure.ac already determines the right nop insn for the\n> target, in $insn.\n> So I guess what we want next is have the 32-bit version of this with .4byte\n> instead of .8byte and just let's try to assemble both versions, first\n> without -gdwarf-2 and the one that succeeds assemble again with -gdwarf-2\n> and check for the duplicate .debug_line sections error.\n\nOk, here it is in patch form.\nI've briefly tested it, with the older binutils I have around (no --gdwarf-N\nsupport), with latest gas (--gdwarf-N that can be passed to as even when\ncompiling C/C++ etc. code and emitting .debug_line) and latest gas with Mark's fix\nreverted (--gdwarf-N support, but can only pass it to as when assembling\nuser .s/.S files, not when compiling C/C++ etc.).\n\n2020-10-07  Jakub Jelinek  <jakub@redhat.com>\n\n\t* configure.ac (HAVE_AS_GDWARF_5_DEBUG_FLAG,\n\tHAVE_AS_WORKING_DWARF_4_FLAG): New tests.\n\t* gcc.c (ASM_DEBUG_DWARF_OPTION): Define.\n\t(ASM_DEBUG_SPEC): Use ASM_DEBUG_DWARF_OPTION instead of\n\t\"--gdwarf2\".  Use %{cond:opt1;:opt2} style.\n\t(ASM_DEBUG_OPTION_DWARF_OPT): Define.\n\t(ASM_DEBUG_OPTION_SPEC): Define.\n\t(asm_debug_option): New variable.\n\t(asm_options): Add \"%(asm_debug_option)\".\n\t(static_specs): Add asm_debug_option entry.\n\t(static_spec_functions): Add dwarf-version-gt.\n\t(debug_level_greater_than_spec_func): New function.\n\t* config/darwin.h (ASM_DEBUG_OPTION_SPEC): Define.\n\t* config/darwin9.h (ASM_DEBUG_OPTION_SPEC): Redefine.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.", "tree": {"sha": "1213c32f42648ba528ade8ab2e1c02e71ed72c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1213c32f42648ba528ade8ab2e1c02e71ed72c14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6923255e35a3d54f2083ad0f67edebb3f1b86506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6923255e35a3d54f2083ad0f67edebb3f1b86506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6923255e35a3d54f2083ad0f67edebb3f1b86506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6923255e35a3d54f2083ad0f67edebb3f1b86506/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91c34262d2dd06da4b9436744bff89007dee2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91c34262d2dd06da4b9436744bff89007dee2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91c34262d2dd06da4b9436744bff89007dee2c9"}], "stats": {"total": 592, "additions": 588, "deletions": 4}, "files": [{"sha": "3657c46f349ba48445d07221fdd241fd5bb6385c", "filename": "gcc/config.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6923255e35a3d54f2083ad0f67edebb3f1b86506", "patch": "@@ -394,6 +394,12 @@\n #endif\n \n \n+/* Define if your assembler supports the --gdwarf-5 option. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_GDWARF_5_DEBUG_FLAG\n+#endif\n+\n+\n /* Define if your assembler supports .gnu_attribute. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_GNU_ATTRIBUTE\n@@ -713,6 +719,13 @@\n #endif\n \n \n+/* Define if your assembler supports --gdwarf-4 even with compiler generated\n+   .debug_line */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_WORKING_DWARF_4_FLAG\n+#endif\n+\n+\n /* Define if your assembler supports -xbrace_comment option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_XBRACE_COMMENT_OPTION"}, {"sha": "7843add984a5e2027d5585a324359c5553c59c6f", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=6923255e35a3d54f2083ad0f67edebb3f1b86506", "patch": "@@ -476,6 +476,7 @@ extern GTY(()) int darwin_ms_struct;\n    debugging data.  */\n \n #define ASM_DEBUG_SPEC  \"%{g*:%{%:debug-level-gt(0):%{!gdwarf*:--gstabs}}}\"\n+#define ASM_DEBUG_OPTION_SPEC \"\"\n #define ASM_FINAL_SPEC \\\n   \"%{gsplit-dwarf:%ngsplit-dwarf is not supported on this platform} %<gsplit-dwarf\"\n "}, {"sha": "787aca7243556c68f8195423faf44c5bd84dd96c", "filename": "gcc/config/darwin9.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfig%2Fdarwin9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfig%2Fdarwin9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin9.h?ref=6923255e35a3d54f2083ad0f67edebb3f1b86506", "patch": "@@ -41,6 +41,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef  ASM_DEBUG_SPEC\n #define ASM_DEBUG_SPEC  \"%{g*:%{%:debug-level-gt(0):%{gstabs:--gstabs}}}\"\n \n+#undef  ASM_DEBUG_OPTION_SPEC\n+#define ASM_DEBUG_OPTION_SPEC\t\"\"\n+\n #undef  ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "abff47d30eb947ccc86c6b6497fbe68432e89a75", "filename": "gcc/configure", "status": "modified", "additions": 310, "deletions": 0, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6923255e35a3d54f2083ad0f67edebb3f1b86506", "patch": "@@ -28475,6 +28475,316 @@ $as_echo \"#define HAVE_AS_GDWARF2_DEBUG_FLAG 1\" >>confdefs.h\n fi\n \n \n+ { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --gdwarf-5 option\" >&5\n+$as_echo_n \"checking assembler for --gdwarf-5 option... \" >&6; }\n+if ${gcc_cv_as_gdwarf_5_flag+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_gdwarf_5_flag=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 36 \\) \\* 1000 + 0`\n+  then gcc_cv_as_gdwarf_5_flag=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo \"$insn\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --gdwarf-5 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_gdwarf_5_flag=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gdwarf_5_flag\" >&5\n+$as_echo \"$gcc_cv_as_gdwarf_5_flag\" >&6; }\n+if test $gcc_cv_as_gdwarf_5_flag = yes; then\n+\n+$as_echo \"#define HAVE_AS_GDWARF_5_DEBUG_FLAG 1\" >>confdefs.h\n+\n+fi\n+\n+\n+ dwarf4_debug_info_size=0x46\n+ dwarf4_high_pc_form=7\n+ dwarf4_debug_aranges_size=0x2c\n+ dwarf4_line_sz=9\n+ for dwarf4_addr_size in 8 4; do\n+   conftest_s=\"\\\n+\t.file\t\\\"a.c\\\"\n+\t.text\n+.Ltext0:\n+\t.p2align 4\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+foo:\n+.LFB0:\n+.LM1:\n+\t$insn\n+.LM2:\n+.LFE0:\n+\t.size\tfoo, .-foo\n+.Letext0:\n+\t.section\t.debug_info,\\\"\\\",%progbits\n+.Ldebug_info0:\n+\t.4byte\t$dwarf4_debug_info_size\n+\t.2byte\t0x4\n+\t.4byte\t.Ldebug_abbrev0\n+\t.byte\t0x$dwarf4_addr_size\n+\t.byte\t0x1\n+\t.ascii \\\"GNU C17\\\\0\\\"\n+\t.byte\t0xc\n+\t.ascii \\\"a.c\\\\0\\\"\n+\t.ascii \\\"/\\\\0\\\"\n+\t.${dwarf4_addr_size}byte\t.Ltext0\n+\t.${dwarf4_addr_size}byte\t.Letext0-.Ltext0\n+\t.4byte\t.Ldebug_line0\n+\t.byte\t0x2\n+\t.ascii \\\"foo\\\\0\\\"\n+\t.byte\t0x1\n+\t.byte\t0x2\n+\t.byte\t0x1\n+\t.${dwarf4_addr_size}byte\t.LFB0\n+\t.${dwarf4_addr_size}byte\t.LFE0-.LFB0\n+\t.byte\t0x1\n+\t.byte\t0x9c\n+\t.byte\t0\n+\t.section\t.debug_abbrev,\\\"\\\",%progbits\n+.Ldebug_abbrev0:\n+\t.byte\t0x1\n+\t.byte\t0x11\n+\t.byte\t0x1\n+\t.byte\t0x25\n+\t.byte\t0x8\n+\t.byte\t0x13\n+\t.byte\t0xb\n+\t.byte\t0x3\n+\t.byte\t0x8\n+\t.byte\t0x1b\n+\t.byte\t0x8\n+\t.byte\t0x11\n+\t.byte\t0x1\n+\t.byte\t0x12\n+\t.byte\t0x$dwarf4_high_pc_form\n+\t.byte\t0x10\n+\t.byte\t0x17\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0x2\n+\t.byte\t0x2e\n+\t.byte\t0\n+\t.byte\t0x3f\n+\t.byte\t0x19\n+\t.byte\t0x3\n+\t.byte\t0x8\n+\t.byte\t0x3a\n+\t.byte\t0xb\n+\t.byte\t0x3b\n+\t.byte\t0xb\n+\t.byte\t0x39\n+\t.byte\t0xb\n+\t.byte\t0x11\n+\t.byte\t0x1\n+\t.byte\t0x12\n+\t.byte\t0x$dwarf4_high_pc_form\n+\t.byte\t0x40\n+\t.byte\t0x18\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+\t.section\t.debug_aranges,\\\"\\\",%progbits\n+\t.4byte\t$dwarf4_debug_aranges_size\n+\t.2byte\t0x2\n+\t.4byte\t.Ldebug_info0\n+\t.byte\t0x8\n+\t.byte\t0\n+\t.2byte\t0\n+\t.2byte\t0\n+\t.${dwarf4_addr_size}byte\t.Ltext0\n+\t.${dwarf4_addr_size}byte\t.Letext0-.Ltext0\n+\t.${dwarf4_addr_size}byte\t0\n+\t.${dwarf4_addr_size}byte\t0\n+\t.section\t.debug_line,\\\"\\\",%progbits\n+.Ldebug_line0:\n+\t.4byte\t.LELT0-.LSLT0\n+.LSLT0:\n+\t.2byte\t0x4\n+\t.4byte\t.LELTP0-.LASLTP0\n+.LASLTP0:\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0xf6\n+\t.byte\t0xf2\n+\t.byte\t0xd\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.ascii \\\"a.c\\\\0\\\"\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+.LELTP0:\n+\t.byte\t0\n+\t.byte\t0x$dwarf4_line_sz\n+\t.byte\t0x2\n+\t.${dwarf4_addr_size}byte\t.LM1\n+\t.byte\t0x18\n+\t.byte\t0x5\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0x$dwarf4_line_sz\n+\t.byte\t0x2\n+\t.${dwarf4_addr_size}byte\t.LM2\n+\t.byte\t0x1\n+\t.byte\t0x5\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0x$dwarf4_line_sz\n+\t.byte\t0x2\n+\t.${dwarf4_addr_size}byte\t.Letext0\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0x1\n+.LELT0:\n+\t.section\t.debug_str,\\\"\\\",%progbits\n+\t.ident\t\\\"GCC\\\"\n+\"\n+   dwarf4_success=no\n+   if test $dwarf4_addr_size = 4; then\n+     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembly of compiler generated 32-bit .debug_line\" >&5\n+$as_echo_n \"checking assembler for assembly of compiler generated 32-bit .debug_line... \" >&6; }\n+if ${gcc_cv_as_debug_line_32_flag+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_debug_line_32_flag=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 36 \\) \\* 1000 + 0`\n+  then gcc_cv_as_debug_line_32_flag=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_debug_line_32_flag=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_debug_line_32_flag\" >&5\n+$as_echo \"$gcc_cv_as_debug_line_32_flag\" >&6; }\n+if test $gcc_cv_as_debug_line_32_flag = yes; then\n+  success=yes\n+fi\n+\n+   else\n+     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembly of compiler generated 64-bit .debug_line\" >&5\n+$as_echo_n \"checking assembler for assembly of compiler generated 64-bit .debug_line... \" >&6; }\n+if ${gcc_cv_as_debug_line_64_flag+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_debug_line_64_flag=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 36 \\) \\* 1000 + 0`\n+  then gcc_cv_as_debug_line_64_flag=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_debug_line_64_flag=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_debug_line_64_flag\" >&5\n+$as_echo \"$gcc_cv_as_debug_line_64_flag\" >&6; }\n+if test $gcc_cv_as_debug_line_64_flag = yes; then\n+  dwarf4_success=yes\n+fi\n+\n+   fi\n+   if test $dwarf4_success = yes; then\n+     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --gdwarf-4 not refusing compiler generated .debug_line\" >&5\n+$as_echo_n \"checking assembler for --gdwarf-4 not refusing compiler generated .debug_line... \" >&6; }\n+if ${gcc_cv_as_dwarf_4_debug_line_flag+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_dwarf_4_debug_line_flag=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 36 \\) \\* 1000 + 0`\n+  then gcc_cv_as_dwarf_4_debug_line_flag=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --gdwarf-4 -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_dwarf_4_debug_line_flag=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_dwarf_4_debug_line_flag\" >&5\n+$as_echo \"$gcc_cv_as_dwarf_4_debug_line_flag\" >&6; }\n+if test $gcc_cv_as_dwarf_4_debug_line_flag = yes; then\n+\n+$as_echo \"#define HAVE_AS_WORKING_DWARF_4_FLAG 1\" >>confdefs.h\n+\n+fi\n+\n+     break\n+   fi\n+   dwarf4_debug_info_size=0x36\n+   dwarf4_high_pc_form=6\n+   dwarf4_debug_aranges_size=0x1c\n+   dwarf4_line_sz=5\n+ done\n+\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for --gstabs option\" >&5\n $as_echo_n \"checking assembler for --gstabs option... \" >&6; }\n if ${gcc_cv_as_gstabs_flag+:} false; then :"}, {"sha": "26a5d8e3619672362233600c84ab71a87551e1d6", "filename": "gcc/configure.ac", "status": "modified", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6923255e35a3d54f2083ad0f67edebb3f1b86506", "patch": "@@ -5197,6 +5197,194 @@ if test x\"$insn\" != x; then\n   [AC_DEFINE(HAVE_AS_GDWARF2_DEBUG_FLAG, 1,\n [Define if your assembler supports the --gdwarf2 option.])])\n \n+ gcc_GAS_CHECK_FEATURE([--gdwarf-5 option],\n+  gcc_cv_as_gdwarf_5_flag,\n+  [elf,2,36,0], [--gdwarf-5], [$insn],,\n+  [AC_DEFINE(HAVE_AS_GDWARF_5_DEBUG_FLAG, 1,\n+[Define if your assembler supports the --gdwarf-5 option.])])\n+\n+ dwarf4_debug_info_size=0x46\n+ dwarf4_high_pc_form=7\n+ dwarf4_debug_aranges_size=0x2c\n+ dwarf4_line_sz=9\n+ for dwarf4_addr_size in 8 4; do\n+   conftest_s=\"\\\n+\t.file\t\\\"a.c\\\"\n+\t.text\n+.Ltext0:\n+\t.p2align 4\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+foo:\n+.LFB0:\n+.LM1:\n+\t$insn\n+.LM2:\n+.LFE0:\n+\t.size\tfoo, .-foo\n+.Letext0:\n+\t.section\t.debug_info,\\\"\\\",%progbits\n+.Ldebug_info0:\n+\t.4byte\t$dwarf4_debug_info_size\n+\t.2byte\t0x4\n+\t.4byte\t.Ldebug_abbrev0\n+\t.byte\t0x$dwarf4_addr_size\n+\t.byte\t0x1\n+\t.ascii \\\"GNU C17\\\\0\\\"\n+\t.byte\t0xc\n+\t.ascii \\\"a.c\\\\0\\\"\n+\t.ascii \\\"/\\\\0\\\"\n+\t.${dwarf4_addr_size}byte\t.Ltext0\n+\t.${dwarf4_addr_size}byte\t.Letext0-.Ltext0\n+\t.4byte\t.Ldebug_line0\n+\t.byte\t0x2\n+\t.ascii \\\"foo\\\\0\\\"\n+\t.byte\t0x1\n+\t.byte\t0x2\n+\t.byte\t0x1\n+\t.${dwarf4_addr_size}byte\t.LFB0\n+\t.${dwarf4_addr_size}byte\t.LFE0-.LFB0\n+\t.byte\t0x1\n+\t.byte\t0x9c\n+\t.byte\t0\n+\t.section\t.debug_abbrev,\\\"\\\",%progbits\n+.Ldebug_abbrev0:\n+\t.byte\t0x1\n+\t.byte\t0x11\n+\t.byte\t0x1\n+\t.byte\t0x25\n+\t.byte\t0x8\n+\t.byte\t0x13\n+\t.byte\t0xb\n+\t.byte\t0x3\n+\t.byte\t0x8\n+\t.byte\t0x1b\n+\t.byte\t0x8\n+\t.byte\t0x11\n+\t.byte\t0x1\n+\t.byte\t0x12\n+\t.byte\t0x$dwarf4_high_pc_form\n+\t.byte\t0x10\n+\t.byte\t0x17\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0x2\n+\t.byte\t0x2e\n+\t.byte\t0\n+\t.byte\t0x3f\n+\t.byte\t0x19\n+\t.byte\t0x3\n+\t.byte\t0x8\n+\t.byte\t0x3a\n+\t.byte\t0xb\n+\t.byte\t0x3b\n+\t.byte\t0xb\n+\t.byte\t0x39\n+\t.byte\t0xb\n+\t.byte\t0x11\n+\t.byte\t0x1\n+\t.byte\t0x12\n+\t.byte\t0x$dwarf4_high_pc_form\n+\t.byte\t0x40\n+\t.byte\t0x18\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+\t.section\t.debug_aranges,\\\"\\\",%progbits\n+\t.4byte\t$dwarf4_debug_aranges_size\n+\t.2byte\t0x2\n+\t.4byte\t.Ldebug_info0\n+\t.byte\t0x8\n+\t.byte\t0\n+\t.2byte\t0\n+\t.2byte\t0\n+\t.${dwarf4_addr_size}byte\t.Ltext0\n+\t.${dwarf4_addr_size}byte\t.Letext0-.Ltext0\n+\t.${dwarf4_addr_size}byte\t0\n+\t.${dwarf4_addr_size}byte\t0\n+\t.section\t.debug_line,\\\"\\\",%progbits\n+.Ldebug_line0:\n+\t.4byte\t.LELT0-.LSLT0\n+.LSLT0:\n+\t.2byte\t0x4\n+\t.4byte\t.LELTP0-.LASLTP0\n+.LASLTP0:\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0xf6\n+\t.byte\t0xf2\n+\t.byte\t0xd\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.ascii \\\"a.c\\\\0\\\"\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+\t.byte\t0\n+.LELTP0:\n+\t.byte\t0\n+\t.byte\t0x$dwarf4_line_sz\n+\t.byte\t0x2\n+\t.${dwarf4_addr_size}byte\t.LM1\n+\t.byte\t0x18\n+\t.byte\t0x5\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0x$dwarf4_line_sz\n+\t.byte\t0x2\n+\t.${dwarf4_addr_size}byte\t.LM2\n+\t.byte\t0x1\n+\t.byte\t0x5\n+\t.byte\t0x1\n+\t.byte\t0\n+\t.byte\t0x$dwarf4_line_sz\n+\t.byte\t0x2\n+\t.${dwarf4_addr_size}byte\t.Letext0\n+\t.byte\t0\n+\t.byte\t0x1\n+\t.byte\t0x1\n+.LELT0:\n+\t.section\t.debug_str,\\\"\\\",%progbits\n+\t.ident\t\\\"GCC\\\"\n+\"\n+   dwarf4_success=no\n+   if test $dwarf4_addr_size = 4; then\n+     gcc_GAS_CHECK_FEATURE([assembly of compiler generated 32-bit .debug_line],\n+      gcc_cv_as_debug_line_32_flag,\n+      [elf,2,36,0], [], [$conftest_s],,\n+      [success=yes])\n+   else\n+     gcc_GAS_CHECK_FEATURE([assembly of compiler generated 64-bit .debug_line],\n+      gcc_cv_as_debug_line_64_flag,\n+      [elf,2,36,0], [], [$conftest_s],,\n+      [dwarf4_success=yes])\n+   fi\n+   if test $dwarf4_success = yes; then\n+     gcc_GAS_CHECK_FEATURE([--gdwarf-4 not refusing compiler generated .debug_line],\n+      gcc_cv_as_dwarf_4_debug_line_flag,\n+      [elf,2,36,0], [--gdwarf-4], [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_WORKING_DWARF_4_FLAG, 1,\n+[Define if your assembler supports --gdwarf-4 even with compiler generated .debug_line])])\n+     break\n+   fi\n+   dwarf4_debug_info_size=0x36\n+   dwarf4_high_pc_form=6\n+   dwarf4_debug_aranges_size=0x1c\n+   dwarf4_line_sz=5\n+ done\n+\n  gcc_GAS_CHECK_FEATURE([--gstabs option],\n   gcc_cv_as_gstabs_flag,\n   [elf,2,11,0], [--gstabs], [$insn],,"}, {"sha": "ff7b6c4a32055d37f4b78a9ff0a1b74063d6c5a9", "filename": "gcc/gcc.c", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6923255e35a3d54f2083ad0f67edebb3f1b86506/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6923255e35a3d54f2083ad0f67edebb3f1b86506", "patch": "@@ -430,6 +430,7 @@ static const char *pass_through_libs_spec_func (int, const char **);\n static const char *dumps_spec_func (int, const char **);\n static const char *greater_than_spec_func (int, const char **);\n static const char *debug_level_greater_than_spec_func (int, const char **);\n+static const char *dwarf_version_greater_than_spec_func (int, const char **);\n static const char *find_fortran_preinclude_file (int, const char **);\n static char *convert_white_space (char *);\n static char *quote_spec (char *);\n@@ -876,29 +877,72 @@ proper position among the other output files.  */\n #endif /* HAVE_LD_COMPRESS_DEBUG >= 2 */\n \n /* Define ASM_DEBUG_SPEC to be a spec suitable for translating '-g'\n-   to the assembler.  */\n+   to the assembler, when compiling assembly sources only.  */\n #ifndef ASM_DEBUG_SPEC\n+# if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_4_FLAG)\n+/* If --gdwarf-N is supported and as can handle even compiler generated\n+   .debug_line with it, supply --gdwarf-N in ASM_DEBUG_OPTION_SPEC rather\n+   than in ASM_DEBUG_SPEC, so that it applies to both .s and .c etc.\n+   compilations.  */\n+#  define ASM_DEBUG_DWARF_OPTION \"\"\n+# elif defined(HAVE_AS_GDWARF_5_DEBUG_FLAG)\n+#  define ASM_DEBUG_DWARF_OPTION \"%{%:dwarf-version-gt(4):--gdwarf-5;\" \\\n+\t\"%:dwarf-version-gt(3):--gdwarf-4;\"\t\t\t\t\\\n+\t\"%:dwarf-version-gt(2):--gdwarf-3;\"\t\t\t\t\\\n+\t\":--gdwarf2}\"\n+# else\n+#  define ASM_DEBUG_DWARF_OPTION \"--gdwarf2\"\n+# endif\n # if defined(DBX_DEBUGGING_INFO) && defined(DWARF2_DEBUGGING_INFO) \\\n      && defined(HAVE_AS_GDWARF2_DEBUG_FLAG) && defined(HAVE_AS_GSTABS_DEBUG_FLAG)\n #  define ASM_DEBUG_SPEC\t\t\t\t\t\t\\\n       (PREFERRED_DEBUGGING_TYPE == DBX_DEBUG\t\t\t\t\\\n        ? \"%{%:debug-level-gt(0):\"\t\t\t\t\t\\\n-\t \"%{gdwarf*:--gdwarf2}%{!gdwarf*:%{g*:--gstabs}}}\" ASM_MAP\t\\\n+\t \"%{gdwarf*:\" ASM_DEBUG_DWARF_OPTION \"};\"\t\t\t\\\n+\t \":%{g*:--gstabs}}\" ASM_MAP\t\t\t\t\t\\\n        : \"%{%:debug-level-gt(0):\"\t\t\t\t\t\\\n-\t \"%{gstabs*:--gstabs}%{!gstabs*:%{g*:--gdwarf2}}}\" ASM_MAP)\n+\t \"%{gstabs*:--gstabs;\"\t\t\t\t\t\t\\\n+\t \":%{g*:\" ASM_DEBUG_DWARF_OPTION \"}}}\" ASM_MAP)\n # else\n #  if defined(DBX_DEBUGGING_INFO) && defined(HAVE_AS_GSTABS_DEBUG_FLAG)\n #   define ASM_DEBUG_SPEC \"%{g*:%{%:debug-level-gt(0):--gstabs}}\" ASM_MAP\n #  endif\n #  if defined(DWARF2_DEBUGGING_INFO) && defined(HAVE_AS_GDWARF2_DEBUG_FLAG)\n-#   define ASM_DEBUG_SPEC \"%{g*:%{%:debug-level-gt(0):--gdwarf2}}\" ASM_MAP\n+#   define ASM_DEBUG_SPEC \"%{g*:%{%:debug-level-gt(0):\" \\\n+\tASM_DEBUG_DWARF_OPTION \"}}\" ASM_MAP\n #  endif\n # endif\n #endif\n #ifndef ASM_DEBUG_SPEC\n # define ASM_DEBUG_SPEC \"\"\n #endif\n \n+/* Define ASM_DEBUG_OPTION_SPEC to be a spec suitable for translating '-g'\n+   to the assembler when compiling all sources.  */\n+#ifndef ASM_DEBUG_OPTION_SPEC\n+# if defined(HAVE_AS_GDWARF_5_DEBUG_FLAG) && defined(HAVE_AS_WORKING_DWARF_4_FLAG)\n+#  define ASM_DEBUG_OPTION_DWARF_OPT\t\t\t\t\t\\\n+\t\"%{%:dwarf-version-gt(4):--gdwarf-5 ;\"\t\t\t\t\\\n+\t\"%:dwarf-version-gt(3):--gdwarf-4 ;\"\t\t\t\t\\\n+\t\"%:dwarf-version-gt(2):--gdwarf-3 ;\"\t\t\t\t\\\n+\t\":--gdwarf2 }\"\n+#  if defined(DBX_DEBUGGING_INFO) && defined(DWARF2_DEBUGGING_INFO)\n+#  define ASM_DEBUG_OPTION_SPEC\t\t\t\t\t\t\\\n+      (PREFERRED_DEBUGGING_TYPE == DBX_DEBUG\t\t\t\t\\\n+       ? \"%{%:debug-level-gt(0):\"\t\t\t\t\t\\\n+\t \"%{gdwarf*:\" ASM_DEBUG_OPTION_DWARF_OPT \"}}\" \t\t\t\\\n+       : \"%{%:debug-level-gt(0):\"\t\t\t\t\t\\\n+\t \"%{!gstabs*:%{g*:\" ASM_DEBUG_OPTION_DWARF_OPT \"}}}\")\n+# elif defined(DWARF2_DEBUGGING_INFO)\n+#   define ASM_DEBUG_OPTION_SPEC \"%{g*:%{%:debug-level-gt(0):\" \\\n+\tASM_DEBUG_OPTION_DWARF_OPT \"}}\"\n+#  endif\n+# endif\n+#endif\n+#ifndef ASM_DEBUG_OPTION_SPEC\n+# define ASM_DEBUG_OPTION_SPEC \"\"\n+#endif\n+\n /* Here is the spec for running the linker, after compiling all files.  */\n \n /* This is overridable by the target in case they need to specify the\n@@ -1113,6 +1157,7 @@ proper position among the other output files.  */\n #endif\n \n static const char *asm_debug = ASM_DEBUG_SPEC;\n+static const char *asm_debug_option = ASM_DEBUG_OPTION_SPEC;\n static const char *cpp_spec = CPP_SPEC;\n static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n@@ -1212,6 +1257,7 @@ static const char *asm_options =\n    to the assembler equivalents.  */\n \"%{v} %{w:-W} %{I*} \"\n #endif\n+\"%(asm_debug_option)\"\n ASM_COMPRESS_DEBUG_SPEC\n \"%a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\";\n \n@@ -1608,6 +1654,7 @@ static struct spec_list static_specs[] =\n {\n   INIT_STATIC_SPEC (\"asm\",\t\t\t&asm_spec),\n   INIT_STATIC_SPEC (\"asm_debug\",\t\t&asm_debug),\n+  INIT_STATIC_SPEC (\"asm_debug_option\",\t\t&asm_debug_option),\n   INIT_STATIC_SPEC (\"asm_final\",\t\t&asm_final_spec),\n   INIT_STATIC_SPEC (\"asm_options\",\t\t&asm_options),\n   INIT_STATIC_SPEC (\"invoke_as\",\t\t&invoke_as),\n@@ -1690,6 +1737,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"dumps\",                    dumps_spec_func },\n   { \"gt\",\t\t\tgreater_than_spec_func },\n   { \"debug-level-gt\",\t\tdebug_level_greater_than_spec_func },\n+  { \"dwarf-version-gt\",\t\tdwarf_version_greater_than_spec_func },\n   { \"fortran-preinclude-file\",\tfind_fortran_preinclude_file},\n #ifdef EXTRA_SPEC_FUNCTIONS\n   EXTRA_SPEC_FUNCTIONS\n@@ -10614,6 +10662,27 @@ debug_level_greater_than_spec_func (int argc, const char **argv)\n   return NULL;\n }\n \n+/* Returns \"\" if dwarf_version is greater than ARGV[ARGC-1].\n+   Otherwise, return NULL.  */\n+\n+static const char *\n+dwarf_version_greater_than_spec_func (int argc, const char **argv)\n+{\n+  char *converted;\n+\n+  if (argc != 1)\n+    fatal_error (input_location,\n+\t\t \"wrong number of arguments to %%:dwarf-version-gt\");\n+\n+  long arg = strtol (argv[0], &converted, 10);\n+  gcc_assert (converted != argv[0]);\n+\n+  if (dwarf_version > arg)\n+    return \"\";\n+\n+  return NULL;\n+}\n+\n static void\n path_prefix_reset (path_prefix *prefix)\n {"}]}