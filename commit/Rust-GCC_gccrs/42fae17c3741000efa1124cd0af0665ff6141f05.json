{"sha": "42fae17c3741000efa1124cd0af0665ff6141f05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmYWUxN2MzNzQxMDAwZWZhMTEyNGNkMGFmMDY2NWZmNjE0MWYwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-04-16T09:25:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-04-16T09:25:52Z"}, "message": "re PR tree-optimization/60844 (ICE in reassoc_stmt_dominates_stmt_p)\n\n\tPR tree-optimization/60844\n\t* tree-ssa-reassoc.c (reassoc_remove_stmt): New function.\n\t(propagate_op_to_single_use, remove_visited_stmt_chain,\n\tlinearize_expr, repropagate_negates, reassociate_bb): Use it\n\tinstead of gsi_remove.\n\n\t* gcc.dg/pr60844.c: New test.\n\nFrom-SVN: r209442", "tree": {"sha": "27bd5878d32902b3bbd4720ca51dfb9f9e3bca48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27bd5878d32902b3bbd4720ca51dfb9f9e3bca48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42fae17c3741000efa1124cd0af0665ff6141f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fae17c3741000efa1124cd0af0665ff6141f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42fae17c3741000efa1124cd0af0665ff6141f05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42fae17c3741000efa1124cd0af0665ff6141f05/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca860d0367382f466936e1da3a46d6258efec822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca860d0367382f466936e1da3a46d6258efec822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca860d0367382f466936e1da3a46d6258efec822"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "96e24ea41c5cd1d660ab58eecb22633818c17868", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42fae17c3741000efa1124cd0af0665ff6141f05", "patch": "@@ -1,3 +1,11 @@\n+2014-04-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/60844\n+\t* tree-ssa-reassoc.c (reassoc_remove_stmt): New function.\n+\t(propagate_op_to_single_use, remove_visited_stmt_chain,\n+\tlinearize_expr, repropagate_negates, reassociate_bb): Use it\n+\tinstead of gsi_remove.\n+\n 2014-04-16  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraphclones.c (cgraph_create_virtual_clone): Duplicate"}, {"sha": "ef1964e02d9d33c405f5aa1ff8161a646930cfe8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42fae17c3741000efa1124cd0af0665ff6141f05", "patch": "@@ -1,3 +1,8 @@\n+2014-04-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/60844\n+\t* gcc.dg/pr60844.c: New test.\n+\n 2014-04-15  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/56965"}, {"sha": "16ed243d74ceea22149cf0559a64421b34cab39d", "filename": "gcc/testsuite/gcc.dg/pr60844.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60844.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60844.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60844.c?ref=42fae17c3741000efa1124cd0af0665ff6141f05", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/60844 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+/* { dg-additional-options \"-mtune=atom\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+void\n+foo (int *x, int y, int z)\n+{\n+  int b, c = x[0], d = x[1];\n+  for (b = 0; b < 1; b++)\n+    {\n+      int e = (y ? 1 : 0) | (d ? 2 : 0) | (z ? 1 : 0);\n+      e |= (c ? 2 : 0) | ((1 >> b) ? 1 : 0);\n+      x[2 + b] = e;\n+    }\n+}"}, {"sha": "fce2a6e20f62d75a2eb0ac48107466dca0776d04", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42fae17c3741000efa1124cd0af0665ff6141f05/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=42fae17c3741000efa1124cd0af0665ff6141f05", "patch": "@@ -221,6 +221,35 @@ static struct pointer_map_t *operand_rank;\n static long get_rank (tree);\n static bool reassoc_stmt_dominates_stmt_p (gimple, gimple);\n \n+/* Wrapper around gsi_remove, which adjusts gimple_uid of debug stmts\n+   possibly added by gsi_remove.  */\n+\n+bool\n+reassoc_remove_stmt (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+\n+  if (!MAY_HAVE_DEBUG_STMTS || gimple_code (stmt) == GIMPLE_PHI)\n+    return gsi_remove (gsi, true);\n+\n+  gimple_stmt_iterator prev = *gsi;\n+  gsi_prev (&prev);\n+  unsigned uid = gimple_uid (stmt);\n+  basic_block bb = gimple_bb (stmt);\n+  bool ret = gsi_remove (gsi, true);\n+  if (!gsi_end_p (prev))\n+    gsi_next (&prev);\n+  else\n+    prev = gsi_start_bb (bb);\n+  gimple end_stmt = gsi_stmt (*gsi);\n+  while ((stmt = gsi_stmt (prev)) != end_stmt)\n+    {\n+      gcc_assert (stmt && is_gimple_debug (stmt) && gimple_uid (stmt) == 0);\n+      gimple_set_uid (stmt, uid);\n+      gsi_next (&prev);\n+    }\n+  return ret;\n+}\n \n /* Bias amount for loop-carried phis.  We want this to be larger than\n    the depth of any reassociation tree we can see, but not larger than\n@@ -1123,7 +1152,7 @@ propagate_op_to_single_use (tree op, gimple stmt, tree *def)\n     update_stmt (use_stmt);\n   gsi = gsi_for_stmt (stmt);\n   unlink_stmt_vdef (stmt);\n-  gsi_remove (&gsi, true);\n+  reassoc_remove_stmt (&gsi);\n   release_defs (stmt);\n }\n \n@@ -3072,7 +3101,7 @@ remove_visited_stmt_chain (tree var)\n \t{\n \t  var = gimple_assign_rhs1 (stmt);\n \t  gsi = gsi_for_stmt (stmt);\n-\t  gsi_remove (&gsi, true);\n+\t  reassoc_remove_stmt (&gsi);\n \t  release_defs (stmt);\n \t}\n       else\n@@ -3494,7 +3523,7 @@ linearize_expr (gimple stmt)\n   update_stmt (stmt);\n \n   gsi = gsi_for_stmt (oldbinrhs);\n-  gsi_remove (&gsi, true);\n+  reassoc_remove_stmt (&gsi);\n   release_defs (oldbinrhs);\n \n   gimple_set_visited (stmt, true);\n@@ -3896,7 +3925,7 @@ repropagate_negates (void)\n \t      gimple_assign_set_rhs_with_ops (&gsi2, NEGATE_EXPR, x, NULL);\n \t      user = gsi_stmt (gsi2);\n \t      update_stmt (user);\n-\t      gsi_remove (&gsi, true);\n+\t      reassoc_remove_stmt (&gsi);\n \t      release_defs (feed);\n \t      plus_negates.safe_push (gimple_assign_lhs (user));\n \t    }\n@@ -4413,7 +4442,7 @@ reassociate_bb (basic_block bb)\n \t\t reassociations.  */\n \t      if (has_zero_uses (gimple_get_lhs (stmt)))\n \t\t{\n-\t\t  gsi_remove (&gsi, true);\n+\t\t  reassoc_remove_stmt (&gsi);\n \t\t  release_defs (stmt);\n \t\t  /* We might end up removing the last stmt above which\n \t\t     places the iterator to the end of the sequence."}]}