{"sha": "ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxZjhlZTY3ZDQxNjg5ZGRkM2I2YmFiZjhmYWI2YjRkZWM2MGMxMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-19T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-19T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "7036bff390ccf066e0a1ee1c5a254f3adddb73cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7036bff390ccf066e0a1ee1c5a254f3adddb73cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/comments", "author": null, "committer": null, "parents": [{"sha": "9a3ab93ceb23fbe45bfbc597d88f208fe092ea14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3ab93ceb23fbe45bfbc597d88f208fe092ea14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3ab93ceb23fbe45bfbc597d88f208fe092ea14"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "e9456b524ef752b0ce5a20a1862a4a015d132fd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1,3 +1,30 @@\n+2021-01-18  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/97847\n+\t* ira.c (ira): Skip abnormal critical edge splitting.\n+\n+2021-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98727\n+\t* tree-ssa-math-opts.c (match_arith_overflow): Fix up computation of\n+\tsecond .MUL_OVERFLOW operand for signed multiplication with overflow\n+\tchecking if the second operand of multiplication is not constant.\n+\n+2021-01-18  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* doc/invoke.texi (-gdwarf): TPF defaults to version 2 and AIX\n+\tdefaults to version 4.\n+\n+2021-01-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* attribs.h (fndecl_dealloc_argno): New decl.\n+\t* builtins.c (call_dealloc_argno): Split out second half of\n+\tfunction into...\n+\t(fndecl_dealloc_argno): New.\n+\t* doc/extend.texi (Common Function Attributes): Document the\n+\tinteraction between the analyzer and the malloc attribute.\n+\t* doc/invoke.texi (Static Analyzer Options): Likewise.\n+\n 2021-01-17  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix71.h (SUBTARGET_OVERRIDE_OPTIONS): Override"}, {"sha": "7bcaa6e32557da648d4de21ec5cf6332d990ed15", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1 +1 @@\n-20210118\n+20210119"}, {"sha": "d1e88460640897c2122530e660276ee754631263", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1,3 +1,98 @@\n+2021-01-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (is_std_named_call_p): New decl.\n+\t* diagnostic-manager.cc (path_builder::get_sm): New.\n+\t(state_change_event_creator::state_change_event_creator): Add \"pb\"\n+\tparam.\n+\t(state_change_event_creator::on_global_state_change): Don't consider\n+\tstate changes affecting other state_machines.\n+\t(state_change_event_creator::on_state_change): Likewise.\n+\t(state_change_event_creator::m_pb): New field.\n+\t(diagnostic_manager::add_events_for_eedge): Pass pb to visitor\n+\tctor.\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_deallocation_call): New.\n+\t* region-model.cc: Include \"attribs.h\".\n+\t(region_model::on_call_post): Handle fndecls referenced by\n+\t__attribute__((deallocated_by(FOO))).\n+\t* region-model.h (region_model::impl_deallocation_call): New decl.\n+\t* sm-malloc.cc: Include \"stringpool.h\" and \"attribs.h\".  Add\n+\tleading comment.\n+\t(class api): Delete.\n+\t(enum resource_state): Update comment for change from api to\n+\tdeallocator and deallocator_set.\n+\t(allocation_state::allocation_state): Drop api param.  Add\n+\t\"deallocators\" and \"deallocator\".\n+\t(allocation_state::m_api): Drop field in favor of...\n+\t(allocation_state::m_deallocators): New field.\n+\t(allocation_state::m_deallocator): New field.\n+\t(enum wording): Add WORDING_DEALLOCATED.\n+\t(struct deallocator): New.\n+\t(struct standard_deallocator): New.\n+\t(struct custom_deallocator): New.\n+\t(struct deallocator_set): New.\n+\t(struct custom_deallocator_set): New.\n+\t(struct standard_deallocator_set): New.\n+\t(struct deallocator_set_map_traits): New.\n+\t(malloc_state_machine::m_malloc): Drop field\n+\t(malloc_state_machine::m_scalar_new): Likewise.\n+\t(malloc_state_machine::m_vector_new): Likewise.\n+\t(malloc_state_machine::m_free): New field\n+\t(malloc_state_machine::m_scalar_delete): Likewise.\n+\t(malloc_state_machine::m_vector_delete): Likewise.\n+\t(malloc_state_machine::deallocator_map_t): New typedef.\n+\t(malloc_state_machine::m_deallocator_map): New field.\n+\t(malloc_state_machine::deallocator_set_cache_t): New typedef.\n+\t(malloc_state_machine::m_custom_deallocator_set_cache): New field.\n+\t(malloc_state_machine::custom_deallocator_set_map_t): New typedef.\n+\t(malloc_state_machine::m_custom_deallocator_set_map): New field.\n+\t(malloc_state_machine::m_dynamic_sets): New field.\n+\t(malloc_state_machine::m_dynamic_deallocators): New field.\n+\t(api::api): Delete.\n+\t(deallocator::deallocator): New ctor.\n+\t(deallocator::hash): New.\n+\t(deallocator::dump_to_pp): New.\n+\t(deallocator::cmp): New.\n+\t(deallocator::cmp_ptr_ptr): New.\n+\t(standard_deallocator::standard_deallocator): New ctor.\n+\t(deallocator_set::deallocator_set): New ctor.\n+\t(deallocator_set::dump): New.\n+\t(custom_deallocator_set::custom_deallocator_set): New ctor.\n+\t(custom_deallocator_set::contains_p): New.\n+\t(custom_deallocator_set::maybe_get_single): New.\n+\t(custom_deallocator_set::dump_to_pp): New.\n+\t(standard_deallocator_set::standard_deallocator_set): New ctor.\n+\t(standard_deallocator_set::contains_p): New.\n+\t(standard_deallocator_set::maybe_get_single): New.\n+\t(standard_deallocator_set::dump_to_pp): New.\n+\t(start_p): New.\n+\t(class mismatching_deallocation): Update for conversion from api\n+\tto deallocator_set and deallocator.\n+\t(double_free::emit): Use %qs.\n+\t(class use_after_free): Update for conversion from api to\n+\tdeallocator_set and deallocator.\n+\t(malloc_leak::describe_state_change): Only emit \"allocated here\" on\n+\ta start->nonnull transition, rather than on other transitions to\n+\tnonnull.\n+\t(allocation_state::dump_to_pp): Update for conversion from api to\n+\tdeallocator_set.\n+\t(allocation_state::get_nonnull): Likewise.\n+\t(malloc_state_machine::malloc_state_machine): Likewise.\n+\t(malloc_state_machine::~malloc_state_machine): New.\n+\t(malloc_state_machine::add_state): Update for conversion from api\n+\tto deallocator_set.\n+\t(malloc_state_machine::get_or_create_custom_deallocator_set): New.\n+\t(malloc_state_machine::maybe_create_custom_deallocator_set): New.\n+\t(malloc_state_machine::get_or_create_deallocator): New.\n+\t(malloc_state_machine::on_stmt): Update for conversion from api\n+\tto deallocator_set.  Handle \"__attribute__((malloc(FOO)))\", and\n+\tthe special attribute set on FOO.\n+\t(malloc_state_machine::on_allocator_call): Update for conversion\n+\tfrom api to deallocator_set.  Add \"returns_nonnull\" param and use\n+\tit to affect which state to transition to.\n+\t(malloc_state_machine::on_deallocator_call): Update for conversion\n+\tfrom api to deallocator_set.\n+\n 2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (strongly_connected_components::to_json): New."}, {"sha": "7e0da945a5ee936b8f3f11f060b678d275cfb2d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1,3 +1,68 @@\n+2021-01-18  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/debug/dwarf2/pr41445-7.c: Fix expected output.\n+\n+2021-01-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp1z/class-deduction77.C: New test.\n+\n+2021-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98727\n+\t* gcc.c-torture/execute/pr98727.c: New test.\n+\n+2021-01-18  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR testsuite/97987\n+\t* gcc.c-torture/compile/asmgoto-2.c: Skip on hppa.\n+\t* gcc.c-torture/compile/asmgoto-5.c: Likewise.\n+\n+2021-01-18  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* g++.dg/no-stack-protector-attr-3.C: Don't compile on hppa*-*-*.\n+\t* g++.dg/no-stack-protector-attr.C: Likewise.\n+\n+2021-01-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/attr-malloc-1.c: New test.\n+\t* gcc.dg/analyzer/attr-malloc-2.c: New test.\n+\t* gcc.dg/analyzer/attr-malloc-4.c: New test.\n+\t* gcc.dg/analyzer/attr-malloc-5.c: New test.\n+\t* gcc.dg/analyzer/attr-malloc-6.c: New test.\n+\t* gcc.dg/analyzer/attr-malloc-CVE-2019-19078-usb-leak.c: New test.\n+\t* gcc.dg/analyzer/attr-malloc-misuses.c: New test.\n+\n+2021-01-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97494\n+\t* gcc.dg/vect/slp-11b.c: Adjust.\n+\n+2021-01-18  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* gcc.target/arm/simd/vceqz_p64.c: Use arm_crypto options.\n+\t* gcc.target/arm/simd/vceqzq_p64.c: Likewise.\n+\n+2021-01-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97299\n+\t* gcc.dg/vect/slp-reduc-3.c: Guard VEC_PERM_EXPR scan.\n+\n+2021-01-18  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/fold-vec-extract-char.p7.c: Adjust addi count.\n+\t* gcc.target/powerpc/fold-vec-extract-double.p7.c: Same.\n+\t* gcc.target/powerpc/fold-vec-extract-float.p7.c: Same.\n+\t* gcc.target/powerpc/fold-vec-extract-float.p8.c: Same.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p7.c: Same.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p8.c: Same.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p7.c: Same.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p8.c: Same.\n+\t* gcc.target/powerpc/sse-andnps-1.c: Restrict to LE.\n+\t* gcc.target/powerpc/sse-movhps-1.c: Restrict to LE.\n+\t* gcc.target/powerpc/sse-movlps-1.c: Restrict to LE.\n+\t* gcc.target/powerpc/sse2-andnpd-1.c: Restrict to LE.\n+\n 2021-01-17  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/debug/dwarf2/inline-ns-2.C: Skip on AIX."}, {"sha": "d12f657606236babde790468359649b1a7ddb792", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1,3 +1,18 @@\n+2021-01-18  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Makefile.am (%_dwz): If dwz fails, use uncompressed debug info.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2021-01-18  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR debug/98716\n+\t* dwarf.c (read_v2_paths): Allocate zero entry for dirs and\n+\tfilenames.\n+\t(read_line_program): Remove parameter u, change caller.  Don't\n+\tsubtract one from dirs and filenames index.\n+\t(read_function_entry): Don't subtract one from filenames index.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "b0f912844ccb4be183ca8d59789201ff9b603e99", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1,3 +1,20 @@\n+2021-01-18  Andreas Schwab  <schwab@suse.de>\n+\n+\t* configure.tgt (riscv64*-*-linux*): Add linux to config_path.\n+\n+2021-01-18  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/rtems/sem.h (gomp_sem_getcount): New function.\n+\n+2021-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/linux/sem.h (gomp_sem_getcount): New function.\n+\t* config/posix/sem.h (gomp_sem_getcount): New function.\n+\t* config/posix/sem.c (gomp_sem_getcount): New function.\n+\t* config/accel/sem.h (gomp_sem_getcount): New function.\n+\t* task.c (task_fulfilled_p): Use gomp_sem_getcount.\n+\t(omp_fulfill_event): Likewise.\n+\n 2021-01-16  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* fortran.c (omp_fulfill_event_): New."}, {"sha": "f9b7125618d2f0ab698bc2fc2cea7ed07d8734b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef1f8ee67d41689ddd3b6babf8fab6b4dec60c10", "patch": "@@ -1,3 +1,22 @@\n+2021-01-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98725\n+\t* testsuite/20_util/unique_ptr/io/lwg2948.cc:  Do not try to\n+\twrite to a wide character stream if wide character support is\n+\tdisabled in the library.\n+\n+2021-01-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_stringstream/cons/char/1.cc: Use\n+\tstringbuf not wstringbuf.\n+\n+2021-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/98708\n+\t* src/c++11/Makefile.am (cxx11-ios_failure-lt.s, cxx11-ios_failure.s):\n+\tCompile with -gno-as-loc-support.\n+\t* src/c++11/Makefile.in: Regenerated.\n+\n 2021-01-16  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* testsuite/29_atomics/atomic_flag/test_and_set/explicit-hle.cc:"}]}