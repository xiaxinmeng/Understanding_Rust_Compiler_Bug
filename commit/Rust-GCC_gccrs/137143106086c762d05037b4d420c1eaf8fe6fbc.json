{"sha": "137143106086c762d05037b4d420c1eaf8fe6fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM3MTQzMTA2MDg2Yzc2MmQwNTAzN2I0ZDQyMGMxZWFmOGZlNmZiYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-01T11:48:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-01T11:48:04Z"}, "message": "tree-flow.h (struct gimple_df): Remove syms_to_rename member, add ssa_renaming_needed and rename_vops flags.\n\n2012-08-01  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (struct gimple_df): Remove syms_to_rename member,\n\tadd ssa_renaming_needed and rename_vops flags.\n\t(SYMS_TO_RENAME): Remove.\n\t(symbol_marked_for_renaming): Likewise.\n\t(mark_virtual_ops_for_renaming): Likewise.\n\t* tree-into-ssa.c (symbols_to_rename_set, symbols_to_rename):\n\tNew globals.\n\t(mark_for_renaming, marked_for_renaming): New functions.\n\t(symbol_marked_for_renaming): Remove.\n\t(dump_currdefs): Adjust.\n\t(maybe_replace_use): Likewise.\n\t(maybe_replace_use_in_debug_stmt): Likewise.\n\t(maybe_register_def): Likewise.\n\t(rewrite_update_phi_arguments): Likewise.\n\t(rewrite_update_enter_block): Likewise.\n\t(fini_ssa_renamer): Clear update SSA status here ...\n\t(delete_update_ssa): ... not here.  Free rename set.\n\t(prepare_block_for_update): Compute which decls need renaming.\n\t(dump_update_ssa): Adjust.\n\t(mark_sym_for_renaming): Adjust update SSA status for virtuals.\n\t(need_ssa_update_p): Adjust.\n\t(insert_updated_phi_nodes_for): Likewise.\n\t(update_ssa): Likewise.\n\t* tree-ssa-operands.c (finalize_ssa_defs): Adjust update SSA status\n\tfor virtual and real operands.\n\t(finalize_ssa_uses): Likewise.\n\t* tree-ssanames.c (init_ssanames): Adjust.\n\t* tree-ssa.c (maybe_rewrite_mem_ref_base, maybe_optimize_var,\n\texecute_update_addresses_taken): Add bitmap to keep track of which\n\tcandidates are suitable for rewriting and later renaming by SSA\n\tupdate.\n\t* matrix-reorg.c (transform_access_sites): Do not rename all defs.\n\t* tree-dfa.c (make_rename_temp): Do not mark real operands for renaming.\n\t* cgraphunit.c (assemble_thunk): Likewise.\n\t* gimplify.c (gimple_regimplify_operands): Likewise.\n\t(force_gimple_operand_1): Likewise.\n\t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n\t* tree-inline.c (declare_return_variable): Likewise.\n\t* tree-parloops.c (separate_decls_in_region_stmt): Do not call\n\tmark_virtual_ops_for_renaming.\n\t(create_stores_for_reduction): Likewise.\n\t(create_loads_and_stores_for_name): Likewise.\n\t* tree-predcom.c (mark_virtual_ops_for_renaming): Remove.\n\t(initialize_root_vars_lm): Do not call mark_virtual_ops_for_renaming.\n\t(execute_load_motion): Likewise.\n\t(remove_stmt): Likewise.\n\t(execute_pred_commoning_chain): Likewise.\n\t* tree-sra.c (create_access_replacement): Do not rename real\n\toperands.\n\t(get_unrenamed_access_replacement): Unify with ...\n\t(get_access_replacement): ... this.\n\t(get_repl_default_def_ssa_name): Adjust.\n\t* tree-ssa-loop-im.c (move_computations_stmt): Manually update\n\tvirtual SSA form.\n\t(rewrite_mem_ref_loc): Do not call mark_virtual_ops_for_renaming.\n\t* tree-ssa-loop-prefetch.c (emit_mfence_after_loop): Likewise.\n\nFrom-SVN: r190033", "tree": {"sha": "103b768984c681c0e66bf0bd7b06f89dbdc9cce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/103b768984c681c0e66bf0bd7b06f89dbdc9cce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/137143106086c762d05037b4d420c1eaf8fe6fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137143106086c762d05037b4d420c1eaf8fe6fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137143106086c762d05037b4d420c1eaf8fe6fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137143106086c762d05037b4d420c1eaf8fe6fbc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d04aacfc87503addc886a6a0ee9e69d73ffc280f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04aacfc87503addc886a6a0ee9e69d73ffc280f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04aacfc87503addc886a6a0ee9e69d73ffc280f"}], "stats": {"total": 449, "additions": 243, "deletions": 206}, "files": [{"sha": "1d7faf0a0b4b9b9ab28e9fff680f0b1d9bbdc627", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1,3 +1,62 @@\n+2012-08-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (struct gimple_df): Remove syms_to_rename member,\n+\tadd ssa_renaming_needed and rename_vops flags.\n+\t(SYMS_TO_RENAME): Remove.\n+\t(symbol_marked_for_renaming): Likewise.\n+\t(mark_virtual_ops_for_renaming): Likewise.\n+\t* tree-into-ssa.c (symbols_to_rename_set, symbols_to_rename):\n+\tNew globals.\n+\t(mark_for_renaming, marked_for_renaming): New functions.\n+\t(symbol_marked_for_renaming): Remove.\n+\t(dump_currdefs): Adjust.\n+\t(maybe_replace_use): Likewise.\n+\t(maybe_replace_use_in_debug_stmt): Likewise.\n+\t(maybe_register_def): Likewise.\n+\t(rewrite_update_phi_arguments): Likewise.\n+\t(rewrite_update_enter_block): Likewise.\n+\t(fini_ssa_renamer): Clear update SSA status here ...\n+\t(delete_update_ssa): ... not here.  Free rename set.\n+\t(prepare_block_for_update): Compute which decls need renaming.\n+\t(dump_update_ssa): Adjust.\n+\t(mark_sym_for_renaming): Adjust update SSA status for virtuals.\n+\t(need_ssa_update_p): Adjust.\n+\t(insert_updated_phi_nodes_for): Likewise.\n+\t(update_ssa): Likewise.\n+\t* tree-ssa-operands.c (finalize_ssa_defs): Adjust update SSA status\n+\tfor virtual and real operands.\n+\t(finalize_ssa_uses): Likewise.\n+\t* tree-ssanames.c (init_ssanames): Adjust.\n+\t* tree-ssa.c (maybe_rewrite_mem_ref_base, maybe_optimize_var,\n+\texecute_update_addresses_taken): Add bitmap to keep track of which\n+\tcandidates are suitable for rewriting and later renaming by SSA\n+\tupdate.\n+\t* matrix-reorg.c (transform_access_sites): Do not rename all defs.\n+\t* tree-dfa.c (make_rename_temp): Do not mark real operands for renaming.\n+\t* cgraphunit.c (assemble_thunk): Likewise.\n+\t* gimplify.c (gimple_regimplify_operands): Likewise.\n+\t(force_gimple_operand_1): Likewise.\n+\t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n+\t* tree-inline.c (declare_return_variable): Likewise.\n+\t* tree-parloops.c (separate_decls_in_region_stmt): Do not call\n+\tmark_virtual_ops_for_renaming.\n+\t(create_stores_for_reduction): Likewise.\n+\t(create_loads_and_stores_for_name): Likewise.\n+\t* tree-predcom.c (mark_virtual_ops_for_renaming): Remove.\n+\t(initialize_root_vars_lm): Do not call mark_virtual_ops_for_renaming.\n+\t(execute_load_motion): Likewise.\n+\t(remove_stmt): Likewise.\n+\t(execute_pred_commoning_chain): Likewise.\n+\t* tree-sra.c (create_access_replacement): Do not rename real\n+\toperands.\n+\t(get_unrenamed_access_replacement): Unify with ...\n+\t(get_access_replacement): ... this.\n+\t(get_repl_default_def_ssa_name): Adjust.\n+\t* tree-ssa-loop-im.c (move_computations_stmt): Manually update\n+\tvirtual SSA form.\n+\t(rewrite_mem_ref_loc): Do not call mark_virtual_ops_for_renaming.\n+\t* tree-ssa-loop-prefetch.c (emit_mfence_after_loop): Likewise.\n+\n 2012-07-31  DJ Delorie  <dj@redhat.com>\n \n \t* config/s390/s390.c (s390_option_override): Disable DWARF 3/4"}, {"sha": "1e17fdfff629e1a0e05b8a3ae33a5861a1b8255c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1455,13 +1455,9 @@ assemble_thunk (struct cgraph_node *node)\n       else\n         VEC_quick_push (tree, vargs, a);\n       add_referenced_var (a);\n-      if (is_gimple_reg (a))\n-\tmark_sym_for_renaming (a);\n       for (i = 1, arg = DECL_CHAIN (a); i < nargs; i++, arg = DECL_CHAIN (arg))\n \t{\n \t  add_referenced_var (arg);\n-\t  if (is_gimple_reg (arg))\n-\t    mark_sym_for_renaming (arg);\n \t  VEC_quick_push (tree, vargs, arg);\n \t}\n       call = gimple_build_call_vec (build_fold_addr_expr_loc (0, alias), vargs);"}, {"sha": "0c6ea1ce2bef3b12d4b04d1ebd48bde7e7551095", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -8527,22 +8527,7 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n       add_referenced_var (t);\n \n   if (!gimple_seq_empty_p (pre))\n-    {\n-      if (gimple_in_ssa_p (cfun))\n-\t{\n-\t  gimple_stmt_iterator i;\n-\n-\t  for (i = gsi_start (pre); !gsi_end_p (i); gsi_next (&i))\n-\t    {\n-\t      tree lhs = gimple_get_lhs (gsi_stmt (i));\n-\t      if (lhs\n-\t\t  && TREE_CODE (lhs) != SSA_NAME\n-\t\t  && is_gimple_reg (lhs))\n-\t\tmark_sym_for_renaming (lhs);\n-\t    }\n-\t}\n-      gsi_insert_seq_before (gsi_p, pre, GSI_SAME_STMT);\n-    }\n+    gsi_insert_seq_before (gsi_p, pre, GSI_SAME_STMT);\n   if (post_stmt)\n     gsi_insert_after (gsi_p, post_stmt, GSI_NEW_STMT);\n \n@@ -8593,21 +8578,6 @@ force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n     for (t = gimplify_ctxp->temps; t ; t = DECL_CHAIN (t))\n       add_referenced_var (t);\n \n-  if (!gimple_seq_empty_p (*stmts)\n-      && gimplify_ctxp->into_ssa)\n-    {\n-      gimple_stmt_iterator i;\n-\n-      for (i = gsi_start (*stmts); !gsi_end_p (i); gsi_next (&i))\n-\t{\n-\t  tree lhs = gimple_get_lhs (gsi_stmt (i));\n-\t  if (lhs\n-\t      && TREE_CODE (lhs) != SSA_NAME\n-\t      && is_gimple_reg (lhs))\n-\t    mark_sym_for_renaming (lhs);\n-\t}\n-    }\n-\n   pop_gimplify_context (NULL);\n \n   return expr;"}, {"sha": "214b2de3521d84a8a597d8b33611b78a8b6a0f08", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -2356,7 +2356,6 @@ ipa_modify_formal_parameters (tree fndecl, ipa_parm_adjustment_vec adjustments,\n \t  layout_decl (new_parm, 0);\n \n \t  add_referenced_var (new_parm);\n-\t  mark_sym_for_renaming (new_parm);\n \t  adj->base = parm;\n \t  adj->reduction = new_parm;\n "}, {"sha": "966ab0c254d192a552a0016090d68094403d8378", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1810,13 +1810,9 @@ transform_access_sites (void **slot, void *data ATTRIBUTE_UNUSED)\n \t{\n \t  if (acc_info->level >= 0 && gimple_bb (acc_info->stmt))\n \t    {\n-\t      ssa_op_iter iter;\n-\t      tree def;\n \t      gimple stmt = acc_info->stmt;\n \t      tree lhs;\n \n-\t      FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_DEF)\n-\t\tmark_sym_for_renaming (SSA_NAME_VAR (def));\n \t      gsi = gsi_for_stmt (stmt);\n \t      gcc_assert (is_gimple_assign (acc_info->stmt));\n \t      lhs = gimple_assign_lhs (acc_info->stmt);"}, {"sha": "8989a5b869e8fa4c2c57ad2edf066ba856b4833f", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -174,8 +174,6 @@ make_rename_temp (tree type, const char *prefix)\n \n   if (gimple_referenced_vars (cfun))\n     add_referenced_var (t);\n-  if (gimple_in_ssa_p (cfun))\n-    mark_sym_for_renaming (t);\n \n   return t;\n }"}, {"sha": "553f22e321e09895e7674203b5755a51c007db9f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -77,9 +77,11 @@ struct GTY(()) gimple_df {\n      for this variable with an empty defining statement.  */\n   htab_t GTY((param_is (union tree_node))) default_defs;\n \n-  /* Symbols whose SSA form needs to be updated or created for the first\n-     time.  */\n-  bitmap syms_to_rename;\n+  /* True if there are any symbols that need to be renamed.  */\n+  unsigned int ssa_renaming_needed : 1;\n+\n+  /* True if all virtual operands need to be renamed.  */\n+  unsigned int rename_vops : 1;\n \n   /* True if the code is in ssa form.  */\n   unsigned int in_ssa_p : 1;\n@@ -100,7 +102,6 @@ struct GTY(()) gimple_df {\n #define SSANAMES(fun) (fun)->gimple_df->ssa_names\n #define MODIFIED_NORETURN_CALLS(fun) (fun)->gimple_df->modified_noreturn_calls\n #define DEFAULT_DEFS(fun) (fun)->gimple_df->default_defs\n-#define SYMS_TO_RENAME(fun) (fun)->gimple_df->syms_to_rename\n \n typedef struct\n {\n@@ -565,7 +566,6 @@ bool name_registered_for_update_p (tree);\n void release_ssa_name_after_update_ssa (tree);\n void compute_global_livein (bitmap, bitmap);\n void mark_sym_for_renaming (tree);\n-bool symbol_marked_for_renaming (tree);\n tree get_current_def (tree);\n void set_current_def (tree, tree);\n \n@@ -715,7 +715,6 @@ void tree_transform_and_unroll_loop (struct loop *, unsigned,\n \t\t\t\t     transform_callback, void *);\n bool contains_abnormal_ssa_name_p (tree);\n bool stmt_dominates_stmt_p (gimple, gimple);\n-void mark_virtual_ops_for_renaming (gimple);\n \n /* In tree-ssa-dce.c */\n void mark_virtual_operand_for_renaming (tree);"}, {"sha": "4088e755a8a9ade872207cbf80e265c804bc2c4e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -2969,11 +2969,6 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n       TREE_ADDRESSABLE (var) = 1;\n       var = build_fold_addr_expr (var);\n     }\n-  else if (gimple_in_ssa_p (cfun)\n-\t   && is_gimple_reg (var))\n-    /* ???  Re-org id->retval and its special handling so that we can\n-       record an SSA name directly and not need to invoke the SSA renamer.  */\n-    mark_sym_for_renaming (var);\n \n  done:\n   /* Register the VAR_DECL as the equivalent for the RESULT_DECL; that"}, {"sha": "0971d01f295da92203901c41dd0c819a57f6d174", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 105, "deletions": 54, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -227,6 +227,33 @@ extern void debug_defs_stack (int);\n extern void dump_currdefs (FILE *);\n extern void debug_currdefs (void);\n \n+\n+/* The set of symbols we ought to re-write into SSA form in update_ssa.  */\n+static bitmap symbols_to_rename_set;\n+static VEC(tree,heap) *symbols_to_rename;\n+\n+/* Mark SYM for renaming.  */\n+\n+static void\n+mark_for_renaming (tree sym)\n+{\n+  if (!symbols_to_rename_set)\n+    symbols_to_rename_set = BITMAP_ALLOC (NULL);\n+  if (bitmap_set_bit (symbols_to_rename_set, DECL_UID (sym)))\n+    VEC_safe_push (tree, heap, symbols_to_rename, sym);\n+}\n+\n+/* Return true if SYM is marked for renaming.  */\n+\n+static bool\n+marked_for_renaming (tree sym)\n+{\n+  if (!symbols_to_rename_set)\n+    return false;\n+  return bitmap_bit_p (symbols_to_rename_set, DECL_UID (sym));\n+}\n+\n+\n /* Return true if STMT needs to be rewritten.  When renaming a subset\n    of the variables, not all statements will be processed.  This is\n    decided in mark_def_sites.  */\n@@ -574,15 +601,6 @@ set_livein_block (tree var, basic_block bb)\n }\n \n \n-/* Return true if symbol SYM is marked for renaming.  */\n-\n-bool\n-symbol_marked_for_renaming (tree sym)\n-{\n-  return bitmap_bit_p (SYMS_TO_RENAME (cfun), DECL_UID (sym));\n-}\n-\n-\n /* Return true if NAME is in OLD_SSA_NAMES.  */\n \n static inline bool\n@@ -1636,23 +1654,24 @@ debug_defs_stack (int n)\n void\n dump_currdefs (FILE *file)\n {\n-  referenced_var_iterator i;\n+  unsigned i;\n   tree var;\n \n+  if (VEC_empty (tree, symbols_to_rename))\n+    return;\n+\n   fprintf (file, \"\\n\\nCurrent reaching definitions\\n\\n\");\n-  FOR_EACH_REFERENCED_VAR (cfun, var, i)\n-    if (SYMS_TO_RENAME (cfun) == NULL\n-\t|| bitmap_bit_p (SYMS_TO_RENAME (cfun), DECL_UID (var)))\n-      {\n-\tfprintf (file, \"CURRDEF (\");\n-\tprint_generic_expr (file, var, 0);\n-\tfprintf (file, \") = \");\n-\tif (get_current_def (var))\n-\t  print_generic_expr (file, get_current_def (var), 0);\n-\telse\n-\t  fprintf (file, \"<NIL>\");\n-\tfprintf (file, \"\\n\");\n-      }\n+  FOR_EACH_VEC_ELT (tree, symbols_to_rename, i, var)\n+    {\n+      fprintf (file, \"CURRDEF (\");\n+      print_generic_expr (file, var, 0);\n+      fprintf (file, \") = \");\n+      if (get_current_def (var))\n+\tprint_generic_expr (file, get_current_def (var), 0);\n+      else\n+\tfprintf (file, \"<NIL>\");\n+      fprintf (file, \"\\n\");\n+    }\n }\n \n \n@@ -1830,7 +1849,7 @@ maybe_replace_use (use_operand_p use_p)\n   tree use = USE_FROM_PTR (use_p);\n   tree sym = DECL_P (use) ? use : SSA_NAME_VAR (use);\n \n-  if (symbol_marked_for_renaming (sym))\n+  if (marked_for_renaming (sym))\n     rdef = get_reaching_def (sym);\n   else if (is_old_name (use))\n     rdef = get_reaching_def (use);\n@@ -1850,7 +1869,7 @@ maybe_replace_use_in_debug_stmt (use_operand_p use_p)\n   tree use = USE_FROM_PTR (use_p);\n   tree sym = DECL_P (use) ? use : SSA_NAME_VAR (use);\n \n-  if (symbol_marked_for_renaming (sym))\n+  if (marked_for_renaming (sym))\n     rdef = get_current_def (sym);\n   else if (is_old_name (use))\n     {\n@@ -1886,7 +1905,7 @@ maybe_register_def (def_operand_p def_p, gimple stmt,\n \n   /* If DEF is a naked symbol that needs renaming, create a new\n      name for it.  */\n-  if (symbol_marked_for_renaming (sym))\n+  if (marked_for_renaming (sym))\n     {\n       if (DECL_P (def))\n \t{\n@@ -2077,7 +2096,7 @@ rewrite_update_phi_arguments (basic_block bb)\n \t    {\n \t      tree sym = DECL_P (arg) ? arg : SSA_NAME_VAR (arg);\n \n-\t      if (symbol_marked_for_renaming (sym))\n+\t      if (marked_for_renaming (sym))\n \t\treaching_def = get_reaching_def (sym);\n \t      else if (is_old_name (arg))\n \t\treaching_def = get_reaching_def (arg);\n@@ -2154,7 +2173,7 @@ rewrite_update_enter_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n       lhs = gimple_phi_result (phi);\n       lhs_sym = SSA_NAME_VAR (lhs);\n \n-      if (symbol_marked_for_renaming (lhs_sym))\n+      if (marked_for_renaming (lhs_sym))\n \tregister_new_update_single (lhs, lhs_sym);\n       else\n \t{\n@@ -2369,6 +2388,8 @@ fini_ssa_renamer (void)\n \n   bitmap_obstack_release (&update_ssa_obstack);\n \n+  cfun->gimple_df->ssa_renaming_needed = 0;\n+  cfun->gimple_df->rename_vops = 0;\n   cfun->gimple_df->in_ssa_p = true;\n }\n \n@@ -2526,7 +2547,7 @@ mark_use_interesting (tree var, gimple stmt, basic_block bb, bool insert_phi_p)\n \n \n /* Do a dominator walk starting at BB processing statements that\n-   reference symbols in SYMS_TO_RENAME.  This is very similar to\n+   reference symbols in SSA operands.  This is very similar to\n    mark_def_sites, but the scan handles statements whose operands may\n    already be SSA names.\n \n@@ -2559,9 +2580,13 @@ prepare_block_for_update (basic_block bb, bool insert_phi_p)\n \n       lhs_sym = DECL_P (lhs) ? lhs : SSA_NAME_VAR (lhs);\n \n-      if (!symbol_marked_for_renaming (lhs_sym))\n+      if (TREE_CODE (lhs) == SSA_NAME\n+\t  && (TREE_CODE (lhs_sym) != VAR_DECL\n+\t      || !VAR_DECL_IS_VIRTUAL_OPERAND (lhs_sym)\n+\t      || !cfun->gimple_df->rename_vops))\n \tcontinue;\n \n+      mark_for_renaming (lhs_sym);\n       mark_def_interesting (lhs_sym, phi, bb, insert_phi_p);\n \n       /* Mark the uses in phi nodes as interesting.  It would be more correct\n@@ -2585,20 +2610,40 @@ prepare_block_for_update (basic_block bb, bool insert_phi_p)\n \n       stmt = gsi_stmt (si);\n \n-      FOR_EACH_SSA_USE_OPERAND (use_p, stmt, i, SSA_OP_ALL_USES)\n+      if (cfun->gimple_df->rename_vops\n+\t  && gimple_vuse (stmt))\n \t{\n-\t  tree use = USE_FROM_PTR (use_p);\n+\t  tree use = gimple_vuse (stmt);\n \t  tree sym = DECL_P (use) ? use : SSA_NAME_VAR (use);\n-\t  if (symbol_marked_for_renaming (sym))\n-\t    mark_use_interesting (sym, stmt, bb, insert_phi_p);\n+\t  mark_for_renaming (sym);\n+\t  mark_use_interesting (sym, stmt, bb, insert_phi_p);\n \t}\n \n-      FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, i, SSA_OP_ALL_DEFS)\n+      FOR_EACH_SSA_USE_OPERAND (use_p, stmt, i, SSA_OP_USE)\n \t{\n-\t  tree def = DEF_FROM_PTR (def_p);\n+\t  tree use = USE_FROM_PTR (use_p);\n+\t  if (!DECL_P (use))\n+\t    continue;\n+\t  mark_for_renaming (use);\n+\t  mark_use_interesting (use, stmt, bb, insert_phi_p);\n+\t}\n+\n+      if (cfun->gimple_df->rename_vops\n+\t  && gimple_vdef (stmt))\n+\t{\n+\t  tree def = gimple_vdef (stmt);\n \t  tree sym = DECL_P (def) ? def : SSA_NAME_VAR (def);\n-\t  if (symbol_marked_for_renaming (sym))\n-\t    mark_def_interesting (sym, stmt, bb, insert_phi_p);\n+\t  mark_for_renaming (sym);\n+\t  mark_def_interesting (sym, stmt, bb, insert_phi_p);\n+\t}\n+\n+      FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, i, SSA_OP_DEF)\n+\t{\n+\t  tree def = DEF_FROM_PTR (def_p);\n+\t  if (!DECL_P (def))\n+\t    continue;\n+\t  mark_for_renaming (def);\n+\t  mark_def_interesting (def, stmt, bb, insert_phi_p);\n \t}\n     }\n \n@@ -2757,10 +2802,10 @@ dump_update_ssa (FILE *file)\n \tdump_names_replaced_by (file, ssa_name (i));\n     }\n \n-  if (!bitmap_empty_p (SYMS_TO_RENAME (cfun)))\n+  if (symbols_to_rename_set && !bitmap_empty_p (symbols_to_rename_set))\n     {\n       fprintf (file, \"\\nSymbols to be put in SSA form\\n\");\n-      dump_decl_set (file, SYMS_TO_RENAME (cfun));\n+      dump_decl_set (file, symbols_to_rename_set);\n       fprintf (file, \"\\n\");\n     }\n \n@@ -2821,7 +2866,9 @@ delete_update_ssa (void)\n   sbitmap_free (new_ssa_names);\n   new_ssa_names = NULL;\n \n-  bitmap_clear (SYMS_TO_RENAME (update_ssa_initialized_fn));\n+  BITMAP_FREE (symbols_to_rename_set);\n+  symbols_to_rename_set = NULL;\n+  VEC_free (tree, heap, symbols_to_rename);\n \n   if (names_to_release)\n     {\n@@ -2902,8 +2949,12 @@ register_new_name_mapping (tree new_tree, tree old)\n void\n mark_sym_for_renaming (tree sym)\n {\n-  if (cfun->gimple_df->in_ssa_p)\n-    bitmap_set_bit (SYMS_TO_RENAME (cfun), DECL_UID (sym));\n+  if (TREE_CODE (sym) == VAR_DECL\n+      && VAR_DECL_IS_VIRTUAL_OPERAND (sym))\n+    {\n+      cfun->gimple_df->ssa_renaming_needed = 1;\n+      cfun->gimple_df->rename_vops = 1;\n+    }\n }\n \n \n@@ -2915,8 +2966,7 @@ need_ssa_update_p (struct function *fn)\n {\n   gcc_assert (fn != NULL);\n   return (update_ssa_initialized_fn == fn\n-\t  || (fn->gimple_df\n-\t      && !bitmap_empty_p (SYMS_TO_RENAME (fn))));\n+\t  || (fn->gimple_df && fn->gimple_df->ssa_renaming_needed));\n }\n \n /* Return true if name N has been registered in the replacement table.  */\n@@ -2983,7 +3033,7 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n   if (TREE_CODE (var) == SSA_NAME)\n     gcc_checking_assert (is_old_name (var));\n   else\n-    gcc_checking_assert (symbol_marked_for_renaming (var));\n+    gcc_checking_assert (marked_for_renaming (var));\n \n   /* Get all the definition sites for VAR.  */\n   db = find_def_blocks_for (var);\n@@ -3127,6 +3177,7 @@ update_ssa (unsigned update_flags)\n   unsigned i = 0;\n   bool insert_phi_p;\n   sbitmap_iterator sbi;\n+  tree sym;\n \n   if (!need_ssa_update_p (cfun))\n     return;\n@@ -3176,12 +3227,12 @@ update_ssa (unsigned update_flags)\n \t removal, and there are no symbols to rename, then there's\n \t nothing else to do.  */\n       if (sbitmap_first_set_bit (new_ssa_names) < 0\n-\t  && bitmap_empty_p (SYMS_TO_RENAME (cfun)))\n+\t  && !cfun->gimple_df->ssa_renaming_needed)\n \tgoto done;\n     }\n \n   /* Next, determine the block at which to start the renaming process.  */\n-  if (!bitmap_empty_p (SYMS_TO_RENAME (cfun)))\n+  if (cfun->gimple_df->ssa_renaming_needed)\n     {\n       /* If we rename bare symbols initialize the mapping to\n          auxiliar info we need to keep track of.  */\n@@ -3195,7 +3246,7 @@ update_ssa (unsigned update_flags)\n       start_bb = ENTRY_BLOCK_PTR;\n \n       /* Traverse the CFG looking for existing definitions and uses of\n-\t symbols in SYMS_TO_RENAME.  Mark interesting blocks and\n+\t symbols in SSA operands.  Mark interesting blocks and\n \t statements and set local live-in information for the PHI\n \t placement heuristics.  */\n       prepare_block_for_update (start_bb, insert_phi_p);\n@@ -3210,7 +3261,7 @@ update_ssa (unsigned update_flags)\n \n   /* If requested, insert PHI nodes at the iterated dominance frontier\n      of every block, creating new definitions for names in OLD_SSA_NAMES\n-     and for symbols in SYMS_TO_RENAME.  */\n+     and for symbols found.  */\n   if (insert_phi_p)\n     {\n       bitmap_head *dfs;\n@@ -3239,8 +3290,8 @@ update_ssa (unsigned update_flags)\n \t  sbitmap_free (tmp);\n \t}\n \n-      EXECUTE_IF_SET_IN_BITMAP (SYMS_TO_RENAME (cfun), 0, i, bi)\n-\tinsert_updated_phi_nodes_for (referenced_var (i), dfs, blocks_to_update,\n+      FOR_EACH_VEC_ELT (tree, symbols_to_rename, i, sym)\n+\tinsert_updated_phi_nodes_for (sym, dfs, blocks_to_update,\n \t                              update_flags);\n \n       FOR_EACH_BB (bb)\n@@ -3260,8 +3311,8 @@ update_ssa (unsigned update_flags)\n   EXECUTE_IF_SET_IN_SBITMAP (old_ssa_names, 0, i, sbi)\n     set_current_def (ssa_name (i), NULL_TREE);\n \n-  EXECUTE_IF_SET_IN_BITMAP (SYMS_TO_RENAME (cfun), 0, i, bi)\n-    set_current_def (referenced_var (i), NULL_TREE);\n+  FOR_EACH_VEC_ELT (tree, symbols_to_rename, i, sym)\n+    set_current_def (sym, NULL_TREE);\n \n   /* Now start the renaming process at START_BB.  */\n   interesting_blocks = sbitmap_alloc (last_basic_block);"}, {"sha": "92faa996a8c0764a133875d15bb5dfc10e4acb54", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -861,8 +861,6 @@ separate_decls_in_region_stmt (edge entry, edge exit, gimple stmt,\n   tree name, copy;\n   bool copy_name_p;\n \n-  mark_virtual_ops_for_renaming (stmt);\n-\n   FOR_EACH_PHI_OR_STMT_DEF (def, stmt, oi, SSA_OP_DEF)\n   {\n     name = DEF_FROM_PTR (def);\n@@ -1182,7 +1180,6 @@ create_stores_for_reduction (void **slot, void *data)\n   gsi = gsi_last_bb (clsn_data->store_bb);\n   t = build3 (COMPONENT_REF, type, clsn_data->store, red->field, NULL_TREE);\n   stmt = gimple_build_assign (t, red->initial_value);\n-  mark_virtual_ops_for_renaming (stmt);\n   gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n \n   return 1;\n@@ -1206,7 +1203,6 @@ create_loads_and_stores_for_name (void **slot, void *data)\n   gsi = gsi_last_bb (clsn_data->store_bb);\n   t = build3 (COMPONENT_REF, type, clsn_data->store, elt->field, NULL_TREE);\n   stmt = gimple_build_assign (t, ssa_name (elt->version));\n-  mark_virtual_ops_for_renaming (stmt);\n   gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n \n   gsi = gsi_last_bb (clsn_data->load_bb);"}, {"sha": "cb7d0883222586cbc45729c6f18eb90736e4cf92", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1440,30 +1440,6 @@ get_init_expr (chain_p chain, unsigned index)\n     return VEC_index (tree, chain->inits, index);\n }\n \n-/* Marks all virtual operands of statement STMT for renaming.  */\n-\n-void\n-mark_virtual_ops_for_renaming (gimple stmt)\n-{\n-  tree var;\n-\n-  if (gimple_code (stmt) == GIMPLE_PHI)\n-    {\n-      var = PHI_RESULT (stmt);\n-      if (is_gimple_reg (var))\n-\treturn;\n-\n-      if (TREE_CODE (var) == SSA_NAME)\n-\tvar = SSA_NAME_VAR (var);\n-      mark_sym_for_renaming (var);\n-      return;\n-    }\n-\n-  update_stmt (stmt);\n-  if (gimple_vuse (stmt))\n-    mark_sym_for_renaming (gimple_vop (cfun));\n-}\n-\n /* Returns a new temporary variable used for the I-th variable carrying\n    value of REF.  The variable's uid is marked in TMP_VARS.  */\n \n@@ -1600,7 +1576,6 @@ initialize_root_vars_lm (struct loop *loop, dref root, bool written,\n   else\n     {\n       gimple init_stmt = gimple_build_assign (var, init);\n-      mark_virtual_ops_for_renaming (init_stmt);\n       gsi_insert_on_edge_immediate (entry, init_stmt);\n     }\n }\n@@ -1634,7 +1609,6 @@ execute_load_motion (struct loop *loop, chain_p chain, bitmap tmp_vars)\n   FOR_EACH_VEC_ELT (dref, chain->refs, i, a)\n     {\n       bool is_read = DR_IS_READ (a->ref);\n-      mark_virtual_ops_for_renaming (a->stmt);\n \n       if (DR_IS_WRITE (a->ref))\n \t{\n@@ -1730,7 +1704,7 @@ remove_stmt (gimple stmt)\n       next = single_nonlooparound_use (name);\n       reset_debug_uses (stmt);\n \n-      mark_virtual_ops_for_renaming (stmt);\n+      unlink_stmt_vdef (stmt);\n       gsi_remove (&bsi, true);\n       release_defs (stmt);\n \n@@ -1751,7 +1725,7 @@ execute_pred_commoning_chain (struct loop *loop, chain_p chain,\n \t\t\t     bitmap tmp_vars)\n {\n   unsigned i;\n-  dref a, root;\n+  dref a;\n   tree var;\n \n   if (chain->combined)\n@@ -1766,13 +1740,9 @@ execute_pred_commoning_chain (struct loop *loop, chain_p chain,\n       /* For non-combined chains, set up the variables that hold its value,\n \t and replace the uses of the original references by these\n \t variables.  */\n-      root = get_chain_root (chain);\n-      mark_virtual_ops_for_renaming (root->stmt);\n-\n       initialize_root (loop, chain, tmp_vars);\n       for (i = 1; VEC_iterate (dref, chain->refs, i, a); i++)\n \t{\n-\t  mark_virtual_ops_for_renaming (a->stmt);\n \t  var = VEC_index (tree, chain->vars, chain->length - a->distance);\n \t  replace_ref_with (a->stmt, var, false, false);\n \t}"}, {"sha": "45d9f02350241c1abe3c14fa79f04f1bccd31a00", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1828,15 +1828,12 @@ sort_and_splice_var_accesses (tree var)\n    ACCESS->replacement.  */\n \n static tree\n-create_access_replacement (struct access *access, bool rename)\n+create_access_replacement (struct access *access)\n {\n   tree repl;\n \n   repl = create_tmp_var (access->type, \"SR\");\n   add_referenced_var (repl);\n-  if (!access->grp_partial_lhs\n-      && rename)\n-    mark_sym_for_renaming (repl);\n \n   if (TREE_CODE (access->type) == COMPLEX_TYPE\n       || TREE_CODE (access->type) == VECTOR_TYPE)\n@@ -1917,23 +1914,8 @@ create_access_replacement (struct access *access, bool rename)\n static inline tree\n get_access_replacement (struct access *access)\n {\n-  gcc_assert (access->grp_to_be_replaced);\n-\n-  if (!access->replacement_decl)\n-    access->replacement_decl = create_access_replacement (access, true);\n-  return access->replacement_decl;\n-}\n-\n-/* Return ACCESS scalar replacement, create it if it does not exist yet but do\n-   not mark it for renaming.  */\n-\n-static inline tree\n-get_unrenamed_access_replacement (struct access *access)\n-{\n-  gcc_assert (!access->grp_to_be_replaced);\n-\n   if (!access->replacement_decl)\n-    access->replacement_decl = create_access_replacement (access, false);\n+    access->replacement_decl = create_access_replacement (access);\n   return access->replacement_decl;\n }\n \n@@ -2832,7 +2814,7 @@ get_repl_default_def_ssa_name (struct access *racc)\n {\n   tree repl, decl;\n \n-  decl = get_unrenamed_access_replacement (racc);\n+  decl = get_access_replacement (racc);\n \n   repl = gimple_default_def (cfun, decl);\n   if (!repl)"}, {"sha": "558df409cd31ca915523ea6ef1c9f7909da0b075", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1291,6 +1291,8 @@ move_computations_stmt (struct dom_walk_data *dw_data,\n \n   for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); )\n     {\n+      edge e;\n+\n       stmt = gsi_stmt (bsi);\n \n       lim_data = get_lim_data (stmt);\n@@ -1323,9 +1325,26 @@ move_computations_stmt (struct dom_walk_data *dw_data,\n \t\t   cost, level->num);\n \t}\n \n-      mark_virtual_ops_for_renaming (stmt);\n+      e = loop_preheader_edge (level);\n+      gcc_assert (!gimple_vdef (stmt));\n+      if (gimple_vuse (stmt))\n+\t{\n+\t  /* The new VUSE is the one from the virtual PHI in the loop\n+\t     header or the one already present.  */\n+\t  gimple_stmt_iterator gsi2;\n+\t  for (gsi2 = gsi_start_phis (e->dest);\n+\t       !gsi_end_p (gsi2); gsi_next (&gsi2))\n+\t    {\n+\t      gimple phi = gsi_stmt (gsi2);\n+\t      if (!is_gimple_reg (gimple_phi_result (phi)))\n+\t\t{\n+\t\t  gimple_set_vuse (stmt, PHI_ARG_DEF_FROM_EDGE (phi, e));\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n       gsi_remove (&bsi, false);\n-      gsi_insert_on_edge (loop_preheader_edge (level), stmt);\n+      gsi_insert_on_edge (e, stmt);\n     }\n }\n \n@@ -1783,7 +1802,6 @@ mem_refs_may_alias_p (tree mem1, tree mem2, struct pointer_map_t **ttae_cache)\n static void\n rewrite_mem_ref_loc (mem_ref_loc_p loc, tree tmp_var)\n {\n-  mark_virtual_ops_for_renaming (loc->stmt);\n   *loc->ref = tmp_var;\n   update_stmt (loc->stmt);\n }"}, {"sha": "fe4df9a06f7f2e83ef8b70bb62f0b749c4153924", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1204,7 +1204,6 @@ emit_mfence_after_loop (struct loop *loop)\n       bsi = gsi_after_labels (exit->dest);\n \n       gsi_insert_before (&bsi, call, GSI_NEW_STMT);\n-      mark_virtual_ops_for_renaming (call);\n     }\n \n   VEC_free (edge, heap, exits);"}, {"sha": "7eea53717ab421dfb94bd3157cf98bfd1e0c1726", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -416,7 +416,10 @@ finalize_ssa_defs (gimple stmt)\n   /* If we have a non-SSA_NAME VDEF, mark it for renaming.  */\n   if (gimple_vdef (stmt)\n       && TREE_CODE (gimple_vdef (stmt)) != SSA_NAME)\n-    mark_sym_for_renaming (gimple_vdef (stmt));\n+    {\n+      cfun->gimple_df->rename_vops = 1;\n+      cfun->gimple_df->ssa_renaming_needed = 1;\n+    }\n \n   /* Check for the common case of 1 def that hasn't changed.  */\n   if (old_ops && old_ops->next == NULL && num == 1\n@@ -432,7 +435,12 @@ finalize_ssa_defs (gimple stmt)\n \n   /* If there is anything remaining in the build_defs list, simply emit it.  */\n   for ( ; new_i < num; new_i++)\n-    last = add_def_op ((tree *) VEC_index (tree, build_defs, new_i), last);\n+    {\n+      tree *op = (tree *) VEC_index (tree, build_defs, new_i);\n+      if (DECL_P (*op))\n+\tcfun->gimple_df->ssa_renaming_needed = 1;\n+      last = add_def_op (op, last);\n+    }\n \n   /* Now set the stmt's operands.  */\n   gimple_set_def_ops (stmt, new_list.next);\n@@ -487,14 +495,18 @@ finalize_ssa_uses (gimple stmt)\n       && gimple_vuse (stmt) == NULL_TREE)\n     {\n       gimple_set_vuse (stmt, gimple_vop (cfun));\n-      mark_sym_for_renaming (gimple_vop (cfun));\n+      cfun->gimple_df->rename_vops = 1;\n+      cfun->gimple_df->ssa_renaming_needed = 1;\n     }\n \n   /* Now create nodes for all the new nodes.  */\n   for (new_i = 0; new_i < VEC_length (tree, build_uses); new_i++)\n-    last = add_use_op (stmt,\n-\t\t       (tree *) VEC_index (tree, build_uses, new_i),\n-\t\t       last);\n+    {\n+      tree *op = (tree *) VEC_index (tree, build_uses, new_i);\n+      if (DECL_P (*op))\n+\tcfun->gimple_df->ssa_renaming_needed = 1;\n+      last = add_use_op (stmt, op, last);\n+    }\n \n   /* Now set the stmt's operands.  */\n   gimple_set_use_ops (stmt, new_list.next);"}, {"sha": "b8712eb094c54b219ff740b9f768c572d4712571", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -1771,7 +1771,7 @@ struct gimple_opt_pass pass_early_warn_uninitialized =\n    a MEM_REF to a plain or converted symbol.  */\n \n static void\n-maybe_rewrite_mem_ref_base (tree *tp)\n+maybe_rewrite_mem_ref_base (tree *tp, bitmap suitable_for_renaming)\n {\n   tree sym;\n \n@@ -1782,7 +1782,7 @@ maybe_rewrite_mem_ref_base (tree *tp)\n       && (sym = TREE_OPERAND (TREE_OPERAND (*tp, 0), 0))\n       && DECL_P (sym)\n       && !TREE_ADDRESSABLE (sym)\n-      && symbol_marked_for_renaming (sym))\n+      && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym)))\n     {\n       if (TREE_CODE (TREE_TYPE (sym)) == VECTOR_TYPE\n \t  && useless_type_conversion_p (TREE_TYPE (*tp),\n@@ -1891,21 +1891,15 @@ non_rewritable_lvalue_p (tree lhs)\n    mark the variable VAR for conversion into SSA.  Return true when updating\n    stmts is required.  */\n \n-static bool\n-maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n+static void\n+maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs,\n+\t\t    bitmap suitable_for_renaming)\n {\n-  bool update_vops = false;\n-\n   /* Global Variables, result decls cannot be changed.  */\n   if (is_global_var (var)\n       || TREE_CODE (var) == RESULT_DECL\n       || bitmap_bit_p (addresses_taken, DECL_UID (var)))\n-    return false;\n-\n-  /* If the variable is not in the list of referenced vars then we\n-     do not need to touch it nor can we rename it.  */\n-  if (!referenced_var_lookup (cfun, DECL_UID (var)))\n-    return false;\n+    return;\n \n   if (TREE_ADDRESSABLE (var)\n       /* Do not change TREE_ADDRESSABLE if we need to preserve var as\n@@ -1918,8 +1912,7 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n     {\n       TREE_ADDRESSABLE (var) = 0;\n       if (is_gimple_reg (var))\n-\tmark_sym_for_renaming (var);\n-      update_vops = true;\n+\tbitmap_set_bit (suitable_for_renaming, DECL_UID (var));\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"No longer having address taken: \");\n@@ -1936,17 +1929,14 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n       && (TREE_CODE (var) != VAR_DECL || !DECL_HARD_REGISTER (var)))\n     {\n       DECL_GIMPLE_REG_P (var) = 1;\n-      mark_sym_for_renaming (var);\n-      update_vops = true;\n+      bitmap_set_bit (suitable_for_renaming, DECL_UID (var));\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"Now a gimple register: \");\n \t  print_generic_expr (dump_file, var, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n-\n-  return update_vops;\n }\n \n /* Compute TREE_ADDRESSABLE and DECL_GIMPLE_REG_P for local variables.  */\n@@ -1958,7 +1948,7 @@ execute_update_addresses_taken (void)\n   basic_block bb;\n   bitmap addresses_taken = BITMAP_ALLOC (NULL);\n   bitmap not_reg_needs = BITMAP_ALLOC (NULL);\n-  bool update_vops = false;\n+  bitmap suitable_for_renaming = BITMAP_ALLOC (NULL);\n   tree var;\n   unsigned i;\n \n@@ -2057,14 +2047,16 @@ execute_update_addresses_taken (void)\n      unused vars from BLOCK trees, which causes code generation differences\n      for -g vs. -g0.  */\n   for (var = DECL_ARGUMENTS (cfun->decl); var; var = DECL_CHAIN (var))\n-    update_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n+    maybe_optimize_var (var, addresses_taken, not_reg_needs,\n+\t\t\tsuitable_for_renaming);\n \n   FOR_EACH_VEC_ELT (tree, cfun->local_decls, i, var)\n-    update_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n+    maybe_optimize_var (var, addresses_taken, not_reg_needs,\n+\t\t\tsuitable_for_renaming);\n \n   /* Operand caches need to be recomputed for operands referencing the updated\n-     variables.  */\n-  if (update_vops)\n+     variables and operands need to be rewritten to expose bare symbols.  */\n+  if (!bitmap_empty_p (suitable_for_renaming))\n     {\n       FOR_EACH_BB (bb)\n \tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n@@ -2090,14 +2082,14 @@ execute_update_addresses_taken (void)\n \t\t    && (sym = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0))\n \t\t    && DECL_P (sym)\n \t\t    && !TREE_ADDRESSABLE (sym)\n-\t\t    && symbol_marked_for_renaming (sym))\n+\t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (sym)))\n \t\t  lhs = sym;\n \t\telse\n \t\t  lhs = gimple_assign_lhs (stmt);\n \n \t\t/* Rewrite the RHS and make sure the resulting assignment\n \t\t   is validly typed.  */\n-\t\tmaybe_rewrite_mem_ref_base (rhsp);\n+\t\tmaybe_rewrite_mem_ref_base (rhsp, suitable_for_renaming);\n \t\trhs = gimple_assign_rhs1 (stmt);\n \t\tif (gimple_assign_lhs (stmt) != lhs\n \t\t    && !useless_type_conversion_p (TREE_TYPE (lhs),\n@@ -2112,7 +2104,7 @@ execute_update_addresses_taken (void)\n \t\t   TREE_ADDRESSABLE just remove the stmt.  */\n \t\tif (DECL_P (lhs)\n \t\t    && TREE_CLOBBER_P (rhs)\n-\t\t    && symbol_marked_for_renaming (lhs))\n+\t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (lhs)))\n \t\t  {\n \t\t    unlink_stmt_vdef (stmt);\n       \t\t    gsi_remove (&gsi, true);\n@@ -2133,7 +2125,7 @@ execute_update_addresses_taken (void)\n \t\tfor (i = 0; i < gimple_call_num_args (stmt); ++i)\n \t\t  {\n \t\t    tree *argp = gimple_call_arg_ptr (stmt, i);\n-\t\t    maybe_rewrite_mem_ref_base (argp);\n+\t\t    maybe_rewrite_mem_ref_base (argp, suitable_for_renaming);\n \t\t  }\n \t      }\n \n@@ -2143,12 +2135,14 @@ execute_update_addresses_taken (void)\n \t\tfor (i = 0; i < gimple_asm_noutputs (stmt); ++i)\n \t\t  {\n \t\t    tree link = gimple_asm_output_op (stmt, i);\n-\t\t    maybe_rewrite_mem_ref_base (&TREE_VALUE (link));\n+\t\t    maybe_rewrite_mem_ref_base (&TREE_VALUE (link),\n+\t\t\t\t\t\tsuitable_for_renaming);\n \t\t  }\n \t\tfor (i = 0; i < gimple_asm_ninputs (stmt); ++i)\n \t\t  {\n \t\t    tree link = gimple_asm_input_op (stmt, i);\n-\t\t    maybe_rewrite_mem_ref_base (&TREE_VALUE (link));\n+\t\t    maybe_rewrite_mem_ref_base (&TREE_VALUE (link),\n+\t\t\t\t\t\tsuitable_for_renaming);\n \t\t  }\n \t      }\n \n@@ -2157,9 +2151,10 @@ execute_update_addresses_taken (void)\n \t      {\n \t\ttree *valuep = gimple_debug_bind_get_value_ptr (stmt);\n \t\ttree decl;\n-\t\tmaybe_rewrite_mem_ref_base (valuep);\n+\t\tmaybe_rewrite_mem_ref_base (valuep, suitable_for_renaming);\n \t\tdecl = non_rewritable_mem_ref_base (*valuep);\n-\t\tif (decl && symbol_marked_for_renaming (decl))\n+\t\tif (decl\n+\t\t    && bitmap_bit_p (suitable_for_renaming, DECL_UID (decl)))\n \t\t  gimple_debug_bind_reset_value (stmt);\n \t      }\n \n@@ -2179,6 +2174,7 @@ execute_update_addresses_taken (void)\n \n   BITMAP_FREE (not_reg_needs);\n   BITMAP_FREE (addresses_taken);\n+  BITMAP_FREE (suitable_for_renaming);\n   timevar_pop (TV_ADDRESS_TAKEN);\n }\n "}, {"sha": "f2b434a4d6553f9cb359afc5577c334c904fb167", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137143106086c762d05037b4d420c1eaf8fe6fbc/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=137143106086c762d05037b4d420c1eaf8fe6fbc", "patch": "@@ -85,7 +85,8 @@ init_ssanames (struct function *fn, int size)\n   VEC_quick_push (tree, SSANAMES (fn), NULL_TREE);\n   FREE_SSANAMES (fn) = NULL;\n \n-  SYMS_TO_RENAME (fn) = BITMAP_GGC_ALLOC ();\n+  fn->gimple_df->ssa_renaming_needed = 0;\n+  fn->gimple_df->rename_vops = 0;\n }\n \n /* Finalize management of SSA_NAMEs.  */"}]}