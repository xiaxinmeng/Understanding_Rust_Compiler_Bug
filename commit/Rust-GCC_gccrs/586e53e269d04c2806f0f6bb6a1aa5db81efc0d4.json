{"sha": "586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2ZTUzZTI2OWQwNGMyODA2ZjBmNmJiNmExYWE1ZGI4MWVmYzBkNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-05-22T18:40:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-22T18:40:58Z"}, "message": "sse.md (sse_cvtpi2ps): Use TARGET_MMX in insn condition.\n\n\t* config/i386/sse.md (sse_cvtpi2ps): Use TARGET_MMX in insn condition.\n\nFrom-SVN: r271515", "tree": {"sha": "d0ce45234592e48339791a82fc5dcd9b7bba9c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ce45234592e48339791a82fc5dcd9b7bba9c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28108a5341653568e9ebc49ea755ff93cc1e1711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28108a5341653568e9ebc49ea755ff93cc1e1711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28108a5341653568e9ebc49ea755ff93cc1e1711"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "446c2d458caf81e578b8c094e0027d1d97b2110e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "patch": "@@ -1,3 +1,7 @@\n+2019-05-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (sse_cvtpi2ps): Use TARGET_MMX in insn condition.\n+\n 2019-05-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* common/config/aarch64/aarch64-common.c"}, {"sha": "dc8dabfafc85330eee5cdc23b238f8711403cc57", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "patch": "@@ -1521,8 +1521,7 @@\n \n       op = gen_rtx_VEC_SELECT (V8HImode, operands[1], mask);\n     }\n-  rtx insn = gen_rtx_SET (operands[0], op);\n-  emit_insn (insn);\n+  emit_insn (gen_rtx_SET (operands[0], op));\n   DONE;\n }\n   [(set_attr \"mmx_isa\" \"native,x64,x64_avx\")"}, {"sha": "7d48402ee9d9cc42c3f39f6ca870899b0c4fe689", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586e53e269d04c2806f0f6bb6a1aa5db81efc0d4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=586e53e269d04c2806f0f6bb6a1aa5db81efc0d4", "patch": "@@ -5012,7 +5012,7 @@\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,Yv\")\n \t  (const_int 3)))\n    (clobber (match_scratch:V4SF 3 \"=X,x,Yv\"))]\n-  \"TARGET_SSE || TARGET_MMX_WITH_SSE\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n   \"@\n    cvtpi2ps\\t{%2, %0|%0, %2}\n    #\n@@ -5023,8 +5023,7 @@\n   rtx op2 = lowpart_subreg (V4SImode, operands[2],\n \t\t\t    GET_MODE (operands[2]));\n   /* Generate SSE2 cvtdq2ps.  */\n-  rtx insn = gen_floatv4siv4sf2 (operands[3], op2);\n-  emit_insn (insn);\n+  emit_insn (gen_floatv4siv4sf2 (operands[3], op2));\n \n   /* Merge operands[3] with operands[0].  */\n   rtx mask, op1;\n@@ -5035,7 +5034,7 @@\n \t\t\t\t\t  GEN_INT (6), GEN_INT (7)));\n       op1 = gen_rtx_VEC_CONCAT (V8SFmode, operands[3], operands[1]);\n       op2 = gen_rtx_VEC_SELECT (V4SFmode, op1, mask);\n-      insn = gen_rtx_SET (operands[0], op2);\n+      emit_insn (gen_rtx_SET (operands[0], op2));\n     }\n   else\n     {\n@@ -5045,8 +5044,7 @@\n \t\t\t\t\t  GEN_INT (4), GEN_INT (5)));\n       op1 = gen_rtx_VEC_CONCAT (V8SFmode, operands[0], operands[3]);\n       op2 = gen_rtx_VEC_SELECT (V4SFmode, op1, mask);\n-      insn = gen_rtx_SET (operands[0], op2);\n-      emit_insn (insn);\n+      emit_insn (gen_rtx_SET (operands[0], op2));\n \n       /* Swap bits 0:63 with bits 64:127.  */\n       mask = gen_rtx_PARALLEL (VOIDmode,\n@@ -5055,9 +5053,8 @@\n       rtx dest = lowpart_subreg (V4SImode, operands[0],\n \t\t\t\t GET_MODE (operands[0]));\n       op1 = gen_rtx_VEC_SELECT (V4SImode, dest, mask);\n-      insn = gen_rtx_SET (dest, op1);\n+      emit_insn (gen_rtx_SET (dest, op1));\n     }\n-  emit_insn (insn);\n   DONE;\n }\n   [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n@@ -16356,14 +16353,12 @@\n   /* Emulate MMX palignrdi with SSE psrldq.  */\n   rtx op0 = lowpart_subreg (V2DImode, operands[0],\n \t\t\t    GET_MODE (operands[0]));\n-  rtx insn;\n   if (TARGET_AVX)\n-    insn = gen_vec_concatv2di (op0, operands[2], operands[1]);\n+    emit_insn (gen_vec_concatv2di (op0, operands[2], operands[1]));\n   else\n     {\n       /* NB: SSE can only concatenate OP0 and OP1 to OP0.  */\n-      insn = gen_vec_concatv2di (op0, operands[1], operands[2]);\n-      emit_insn (insn);\n+      emit_insn (gen_vec_concatv2di (op0, operands[1], operands[2]));\n       /* Swap bits 0:63 with bits 64:127.  */\n       rtx mask = gen_rtx_PARALLEL (VOIDmode,\n \t\t\t\t   gen_rtvec (4, GEN_INT (2),\n@@ -16372,9 +16367,8 @@\n \t\t\t\t\t      GEN_INT (1)));\n       rtx op1 = lowpart_subreg (V4SImode, op0, GET_MODE (op0));\n       rtx op2 = gen_rtx_VEC_SELECT (V4SImode, op1, mask);\n-      insn = gen_rtx_SET (op1, op2);\n+      emit_insn (gen_rtx_SET (op1, op2));\n     }\n-  emit_insn (insn);\n   operands[0] = lowpart_subreg (V1TImode, op0, GET_MODE (op0));\n }\n   [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")"}]}