{"sha": "a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhY2ExZWRhZjM3ZDQzYjJiN2U5MTExODI1ODM3YTdhMzE3YjFiMA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-05T18:50:52Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-07-13T06:08:39Z"}, "message": "PR94600: fix volatile access to the whole of a compound object.\n\nThe store to the whole of each volatile object was picked apart\nlike there had been an individual assignment to each of the\nfields.  Reads were added as part of that; see PR for details.\nThe reads from volatile memory were a clear bug; individual\nstores questionable.  A separate patch clarifies the docs.\n\ngcc:\n\n2020-07-09  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/94600\n\t* expr.c (expand_constructor): Make a temporary also if we're\n\tstoring to volatile memory.\n\ngcc/testsuite:\n\n2020-07-09  Hans-Peter Nilsson  <hp@axis.com>\n\n\tPR middle-end/94600\n\t* gcc.dg/pr94600-1.c, gcc.dg/pr94600-2.c, gcc.dg/pr94600-3.c,\n\tgcc.dg/pr94600-4.c, gcc.dg/pr94600-5.c, gcc.dg/pr94600-6.c,\n\tgcc.dg/pr94600-7.c, gcc.dg/pr94600-8.c: New tests.", "tree": {"sha": "cc00c01e5050a71797365b84d0b943b1baec2f40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc00c01e5050a71797365b84d0b943b1baec2f40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d78c58c233a358c780571ad6fecbabdcff2407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56d78c58c233a358c780571ad6fecbabdcff2407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56d78c58c233a358c780571ad6fecbabdcff2407"}], "stats": {"total": 277, "additions": 276, "deletions": 1}, "files": [{"sha": "3d205ad3506e4de5763974da9cf5ee97c837c059", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -8379,7 +8379,10 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n   /* Handle calls that pass values in multiple non-contiguous\n      locations.  The Irix 6 ABI has examples of this.  */\n   if (target == 0 || ! safe_from_p (target, exp, 1)\n-      || GET_CODE (target) == PARALLEL || modifier == EXPAND_STACK_PARM)\n+      || GET_CODE (target) == PARALLEL || modifier == EXPAND_STACK_PARM\n+      /* Also make a temporary if the store is to volatile memory, to\n+\t avoid individual accesses to aggregate members.  */\n+      || (GET_CODE (target) == MEM && MEM_VOLATILE_P (target)))\n     {\n       if (avoid_temp_mem)\n \treturn NULL_RTX;"}, {"sha": "b5913a0939ceb37d971dee69ffa710aeec2001a2", "filename": "gcc/testsuite/gcc.dg/pr94600-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-1.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2\" } */\n+\n+/* Assignments to a whole struct of suitable size (32 bytes) must not be\n+   picked apart into field accesses. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+static t0 a0[] = {\n+ { .f0 = 7, .f1 = 99, .f3 = 1, },\n+ { .f0 = 7, .f1 = 251, .f3 = 1, },\n+ { .f0 = 8, .f1 = 127, .f3 = 5, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+};\n+\n+void\n+foo(void)\n+{\n+  __SIZE_TYPE__ i;\n+  __SIZE_TYPE__ base = 0x000a0000;\n+  for (i = 0; i < (sizeof (a0) / sizeof ((a0)[0])); i++) {\n+    *(volatile t0 *) (base + 44 + i * 4) = a0[i];\n+  }\n+}\n+\n+/* The only volatile accesses should be the obvious writes.  */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" } } */"}, {"sha": "cb96cc98a2d3ed3b7e437c59f8d38b576dab93a6", "filename": "gcc/testsuite/gcc.dg/pr94600-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-2.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2\" } */\n+\n+/* Unrolled version of pr94600-1.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+void\n+bar(void)\n+{\n+  t0 a00 = { .f0 = 7, .f1 = 99, .f3 = 1, };\n+  t0 a01 = { .f0 = 7, .f1 = 251, .f3 = 1, };\n+  t0 a02 = { .f0 = 8, .f1 = 127, .f3 = 5, };\n+  t0 a03 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a04 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a05 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  __SIZE_TYPE__ base = 0x000a0000;\n+\n+  *(volatile t0 *) ((base) + 44 + (0) * 4) = a00;\n+  *(volatile t0 *) ((base) + 44 + (1) * 4) = a01;\n+  *(volatile t0 *) ((base) + 44 + (2) * 4) = a02;\n+  *(volatile t0 *) ((base) + 44 + (3) * 4) = a03;\n+  *(volatile t0 *) ((base) + 44 + (4) * 4) = a04;\n+  *(volatile t0 *) ((base) + 44 + (5) * 4) = a05;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" } } */"}, {"sha": "7537f6cb797fa26dd8e1708409141c06245d9817", "filename": "gcc/testsuite/gcc.dg/pr94600-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-3.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2 -fno-unroll-loops\" } */\n+\n+/* Same-address version of pr94600-1.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+static t0 a0[] = {\n+ { .f0 = 7, .f1 = 99, .f3 = 1, },\n+ { .f0 = 7, .f1 = 251, .f3 = 1, },\n+ { .f0 = 8, .f1 = 127, .f3 = 5, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+};\n+\n+void\n+foo(void)\n+{\n+  __SIZE_TYPE__ i;\n+  __SIZE_TYPE__ base = 0x000a0000;\n+  for (i = 0; i < (sizeof (a0) / sizeof ((a0)[0])); i++) {\n+    *(volatile t0 *) (base + 44) = a0[i];\n+  }\n+}\n+\n+/* The loop isn't unrolled. */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" } } */"}, {"sha": "c2901abb327e14cc8128aa326284ea0ffda327cc", "filename": "gcc/testsuite/gcc.dg/pr94600-4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-4.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2\" } */\n+\n+/* Unrolled version of pr94600-2.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+void\n+bar(void)\n+{\n+  t0 a00 = { .f0 = 7, .f1 = 99, .f3 = 1, };\n+  t0 a01 = { .f0 = 7, .f1 = 251, .f3 = 1, };\n+  t0 a02 = { .f0 = 8, .f1 = 127, .f3 = 5, };\n+  t0 a03 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a04 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a05 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  __SIZE_TYPE__ base = 0x000a0000;\n+\n+  *(volatile t0 *) ((base) + 44) = a00;\n+  *(volatile t0 *) ((base) + 44) = a01;\n+  *(volatile t0 *) ((base) + 44) = a02;\n+  *(volatile t0 *) ((base) + 44) = a03;\n+  *(volatile t0 *) ((base) + 44) = a04;\n+  *(volatile t0 *) ((base) + 44) = a05;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" } } */"}, {"sha": "90085b3b1df72070bb4606260f68e00da1032b68", "filename": "gcc/testsuite/gcc.dg/pr94600-5.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-5.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2 -fno-unroll-loops\" } */\n+\n+/* Target-as-parameter version of pr94600-1.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+static t0 a0[] = {\n+ { .f0 = 7, .f1 = 99, .f3 = 1, },\n+ { .f0 = 7, .f1 = 251, .f3 = 1, },\n+ { .f0 = 8, .f1 = 127, .f3 = 5, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+};\n+\n+void\n+foo(volatile t0 *b)\n+{\n+  __SIZE_TYPE__ i;\n+  for (i = 0; i < (sizeof (a0) / sizeof ((a0)[0])); i++) {\n+    b[i+11] = a0[i];\n+  }\n+}\n+\n+/* The loop isn't unrolled.  */\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" } } */"}, {"sha": "23a81a01f491f241b872750f5e4f124d691fb76c", "filename": "gcc/testsuite/gcc.dg/pr94600-6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-6.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2\" } */\n+\n+/* Target-as-parameter version of pr94600-2.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+void\n+bar(volatile t0 *b)\n+{\n+  t0 a00 = { .f0 = 7, .f1 = 99, .f3 = 1, };\n+  t0 a01 = { .f0 = 7, .f1 = 251, .f3 = 1, };\n+  t0 a02 = { .f0 = 8, .f1 = 127, .f3 = 5, };\n+  t0 a03 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a04 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a05 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+\n+  b[11+0] = a00;\n+  b[11+1] = a01;\n+  b[11+2] = a02;\n+  b[11+3] = a03;\n+  b[11+4] = a04;\n+  b[11+5] = a05;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" } } */"}, {"sha": "2f5c759d3a1015b3b21f1523f87851c1bd007d2b", "filename": "gcc/testsuite/gcc.dg/pr94600-7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-7.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2 -fno-unroll-loops\" } */\n+\n+/* Target-as-parameter version of pr94600-3.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+static t0 a0[] = {\n+ { .f0 = 7, .f1 = 99, .f3 = 1, },\n+ { .f0 = 7, .f1 = 251, .f3 = 1, },\n+ { .f0 = 8, .f1 = 127, .f3 = 5, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+ { .f0 = 5, .f1 = 1, .f3 = 1, },\n+};\n+\n+void\n+foo(volatile t0 *b)\n+{\n+  __SIZE_TYPE__ i;\n+  for (i = 0; i < (sizeof (a0) / sizeof ((a0)[0])); i++) {\n+    b[11] = a0[i];\n+  }\n+}\n+\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 1 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 1 \"final\" } } */"}, {"sha": "ded814b3b95d1f82471a6d341a635388a54e8a6e", "filename": "gcc/testsuite/gcc.dg/pr94600-8.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4aca1edaf37d43b2b7e9111825837a7a317b1b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94600-8.c?ref=a4aca1edaf37d43b2b7e9111825837a7a317b1b0", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-options \"-fdump-rtl-final -O2\" } */\n+\n+/* Unrolled version of pr94600-2.c. */\n+\n+typedef struct {\n+  unsigned int f0 : 4;\n+  unsigned int f1 : 11;\n+  unsigned int f2 : 10;\n+  unsigned int f3 : 7;\n+} t0;\n+\n+void\n+bar(volatile t0 *b)\n+{\n+  t0 a00 = { .f0 = 7, .f1 = 99, .f3 = 1, };\n+  t0 a01 = { .f0 = 7, .f1 = 251, .f3 = 1, };\n+  t0 a02 = { .f0 = 8, .f1 = 127, .f3 = 5, };\n+  t0 a03 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a04 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+  t0 a05 = { .f0 = 5, .f1 = 1, .f3 = 1, };\n+\n+  b[11] = a00;\n+  b[11] = a01;\n+  b[11] = a02;\n+  b[11] = a03;\n+  b[11] = a04;\n+  b[11] = a05;\n+}\n+\n+/* { dg-final { scan-rtl-dump-times {\\(mem/v} 6 \"final\" } } */\n+/* { dg-final { scan-rtl-dump-times {\\(set \\(mem/v} 6 \"final\" } } */"}]}