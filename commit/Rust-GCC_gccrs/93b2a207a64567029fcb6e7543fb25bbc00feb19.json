{"sha": "93b2a207a64567029fcb6e7543fb25bbc00feb19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiMmEyMDdhNjQ1NjcwMjlmY2I2ZTc1NDNmYjI1YmJjMDBmZWIxOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-18T11:34:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-18T11:34:43Z"}, "message": "gimple.c (gimple_register_type_1): New function, split out from ...\n\n2011-05-18  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_register_type_1): New function, split out from ...\n\t(gimple_register_type): ... here.  Avoid infinite recursion.\n\nFrom-SVN: r173857", "tree": {"sha": "4711be9af9684d364c3aa4a8585a6e1d8bfc11e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4711be9af9684d364c3aa4a8585a6e1d8bfc11e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b2a207a64567029fcb6e7543fb25bbc00feb19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b2a207a64567029fcb6e7543fb25bbc00feb19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b2a207a64567029fcb6e7543fb25bbc00feb19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b2a207a64567029fcb6e7543fb25bbc00feb19/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b010117a6c6ee5bc80e0b7d57df2533d2c813763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b010117a6c6ee5bc80e0b7d57df2533d2c813763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b010117a6c6ee5bc80e0b7d57df2533d2c813763"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "a8e1c3c4814ab872996a7c729f657f0e6f43bfe0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b2a207a64567029fcb6e7543fb25bbc00feb19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b2a207a64567029fcb6e7543fb25bbc00feb19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93b2a207a64567029fcb6e7543fb25bbc00feb19", "patch": "@@ -1,3 +1,8 @@\n+2011-05-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_register_type_1): New function, split out from ...\n+\t(gimple_register_type): ... here.  Avoid infinite recursion.\n+\n 2011-05-18  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/41881"}, {"sha": "cd57d5b47c05d553bc4f0ff035435c9c4023372d", "filename": "gcc/gimple.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b2a207a64567029fcb6e7543fb25bbc00feb19/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b2a207a64567029fcb6e7543fb25bbc00feb19/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=93b2a207a64567029fcb6e7543fb25bbc00feb19", "patch": "@@ -4487,36 +4487,32 @@ gimple_type_eq (const void *p1, const void *p2)\n }\n \n \n-/* Register type T in the global type table gimple_types.\n-   If another type T', compatible with T, already existed in\n-   gimple_types then return T', otherwise return T.  This is used by\n-   LTO to merge identical types read from different TUs.  */\n+/* Worker for gimple_register_type.\n+   Register type T in the global type table gimple_types.\n+   When REGISTERING_MV is false first recurse for the main variant of T.  */\n \n-tree\n-gimple_register_type (tree t)\n+static tree\n+gimple_register_type_1 (tree t, bool registering_mv)\n {\n   void **slot;\n   gimple_type_leader_entry *leader;\n   tree mv_leader = NULL_TREE;\n \n-  gcc_assert (TYPE_P (t));\n-\n-  if (!gimple_type_leader)\n-    gimple_type_leader = ggc_alloc_cleared_vec_gimple_type_leader_entry_s\n-\t\t\t\t(GIMPLE_TYPE_LEADER_SIZE);\n   /* If we registered this type before return the cached result.  */\n   leader = &gimple_type_leader[TYPE_UID (t) % GIMPLE_TYPE_LEADER_SIZE];\n   if (leader->type == t)\n     return leader->leader;\n \n   /* Always register the main variant first.  This is important so we\n      pick up the non-typedef variants as canonical, otherwise we'll end\n-     up taking typedef ids for structure tags during comparison.  */\n-  if (TYPE_MAIN_VARIANT (t) != t)\n-    mv_leader = gimple_register_type (TYPE_MAIN_VARIANT (t));\n-\n-  if (gimple_types == NULL)\n-    gimple_types = htab_create_ggc (16381, gimple_type_hash, gimple_type_eq, 0);\n+     up taking typedef ids for structure tags during comparison.\n+     It also makes sure that main variants will be merged to main variants.\n+     As we are operating on a possibly partially fixed up type graph\n+     do not bother to recurse more than once, otherwise we may end up\n+     walking in circles.  */\n+  if (!registering_mv\n+      && TYPE_MAIN_VARIANT (t) != t)\n+    mv_leader = gimple_register_type_1 (TYPE_MAIN_VARIANT (t), true);\n \n   slot = htab_find_slot (gimple_types, t, INSERT);\n   if (*slot\n@@ -4602,6 +4598,25 @@ gimple_register_type (tree t)\n   return t;\n }\n \n+/* Register type T in the global type table gimple_types.\n+   If another type T', compatible with T, already existed in\n+   gimple_types then return T', otherwise return T.  This is used by\n+   LTO to merge identical types read from different TUs.  */\n+\n+tree\n+gimple_register_type (tree t)\n+{\n+  gcc_assert (TYPE_P (t));\n+\n+  if (!gimple_type_leader)\n+    gimple_type_leader = ggc_alloc_cleared_vec_gimple_type_leader_entry_s\n+\t\t\t\t(GIMPLE_TYPE_LEADER_SIZE);\n+\n+  if (gimple_types == NULL)\n+    gimple_types = htab_create_ggc (16381, gimple_type_hash, gimple_type_eq, 0);\n+\n+  return gimple_register_type_1 (t, false);\n+}\n \n /* The TYPE_CANONICAL merging machinery.  It should closely resemble\n    the middle-end types_compatible_p function.  It needs to avoid"}]}