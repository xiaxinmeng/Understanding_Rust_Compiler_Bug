{"sha": "09877e133f3ca9c11a4334707d780a7b1a018bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4NzdlMTMzZjNjYTljMTFhNDMzNDcwN2Q3ODBhN2IxYTAxOGJjYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-21T20:41:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-21T20:41:37Z"}, "message": "re PR tree-optimization/64006 (__builtin_mul_overflow fails to signal overflow)\n\n\tPR tree-optimization/64006\n\t* tree-vrp.c (stmt_interesting_for_vrp): Return true\n\tfor {ADD,SUB,MUL}_OVERFLOW internal calls.\n\t(vrp_visit_assignment_or_call): For {ADD,SUB,MUL}_OVERFLOW\n\tinternal calls, check if any REALPART_EXPR/IMAGPART_EXPR\n\timmediate uses would change their value ranges and return\n\tSSA_PROP_INTERESTING if so, or SSA_PROP_NOT_INTERESTING\n\tif there are some REALPART_EXPR/IMAGPART_EXPR immediate uses\n\tinteresting for vrp.\n\n\t* gcc.c-torture/execute/pr64006.c: New test.\n\nFrom-SVN: r217945", "tree": {"sha": "77c4e0749d73de62a9cf49723dd7c628028194a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c4e0749d73de62a9cf49723dd7c628028194a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09877e133f3ca9c11a4334707d780a7b1a018bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09877e133f3ca9c11a4334707d780a7b1a018bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09877e133f3ca9c11a4334707d780a7b1a018bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09877e133f3ca9c11a4334707d780a7b1a018bca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb23df59649fc1e64937f9fd630cdc3e89fa6181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb23df59649fc1e64937f9fd630cdc3e89fa6181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb23df59649fc1e64937f9fd630cdc3e89fa6181"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "1254751c63a872cbb4c2d8459de1b8362454f737", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09877e133f3ca9c11a4334707d780a7b1a018bca", "patch": "@@ -1,3 +1,15 @@\n+2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/64006\n+\t* tree-vrp.c (stmt_interesting_for_vrp): Return true\n+\tfor {ADD,SUB,MUL}_OVERFLOW internal calls.\n+\t(vrp_visit_assignment_or_call): For {ADD,SUB,MUL}_OVERFLOW\n+\tinternal calls, check if any REALPART_EXPR/IMAGPART_EXPR\n+\timmediate uses would change their value ranges and return\n+\tSSA_PROP_INTERESTING if so, or SSA_PROP_NOT_INTERESTING\n+\tif there are some REALPART_EXPR/IMAGPART_EXPR immediate uses\n+\tinteresting for vrp.\n+\n 2014-11-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/63965"}, {"sha": "cfb8c5f4c984eefe83dbca5a21b919fcfa98c6ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09877e133f3ca9c11a4334707d780a7b1a018bca", "patch": "@@ -1,3 +1,8 @@\n+2014-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/64006\n+\t* gcc.c-torture/execute/pr64006.c: New test.\n+\n 2014-11-21  Lynn Boger  <laboger@linux.vnet.ibm.com>\n \n \t* go.test/go-test.exp (go-set-goarch): Add case for ppc64le goarch"}, {"sha": "ddf9207d95baca178ec3ad1ccc0042d940079ae8", "filename": "gcc/testsuite/gcc.c-torture/execute/pr64006.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64006.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64006.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64006.c?ref=09877e133f3ca9c11a4334707d780a7b1a018bca", "patch": "@@ -0,0 +1,26 @@\n+/* PR tree-optimization/64006 */\n+\n+int v;\n+\n+long __attribute__ ((noinline, noclone))\n+test (long *x, int y)\n+{\n+  int i;\n+  long s = 1;\n+  for (i = 0; i < y; i++)\n+    if (__builtin_mul_overflow (s, x[i], &s))\n+      v++;\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  long d[7] = { 975, 975, 975, 975, 975, 975, 975 };\n+  long r = test (d, 7);\n+  if (sizeof (long) * __CHAR_BIT__ == 64 && v != 1)\n+    __builtin_abort ();\n+  else if (sizeof (long) * __CHAR_BIT__ == 32 && v != 4)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "27ec29bef4ada1099c0838fd9b668d0dd3a8477a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09877e133f3ca9c11a4334707d780a7b1a018bca/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=09877e133f3ca9c11a4334707d780a7b1a018bca", "patch": "@@ -6949,6 +6949,20 @@ stmt_interesting_for_vrp (gimple stmt)\n \t  && (is_gimple_call (stmt)\n \t      || !gimple_vuse (stmt)))\n \treturn true;\n+      else if (is_gimple_call (stmt) && gimple_call_internal_p (stmt))\n+\tswitch (gimple_call_internal_fn (stmt))\n+\t  {\n+\t  case IFN_ADD_OVERFLOW:\n+\t  case IFN_SUB_OVERFLOW:\n+\t  case IFN_MUL_OVERFLOW:\n+\t    /* These internal calls return _Complex integer type,\n+\t       but are interesting to VRP nevertheless.  */\n+\t    if (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t      return true;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n     }\n   else if (gimple_code (stmt) == GIMPLE_COND\n \t   || gimple_code (stmt) == GIMPLE_SWITCH)\n@@ -7101,6 +7115,74 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)\n \n       return SSA_PROP_NOT_INTERESTING;\n     }\n+  else if (is_gimple_call (stmt) && gimple_call_internal_p (stmt))\n+    switch (gimple_call_internal_fn (stmt))\n+      {\n+      case IFN_ADD_OVERFLOW:\n+      case IFN_SUB_OVERFLOW:\n+      case IFN_MUL_OVERFLOW:\n+\t/* These internal calls return _Complex integer type,\n+\t   which VRP does not track, but the immediate uses\n+\t   thereof might be interesting.  */\n+\tif (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t  {\n+\t    imm_use_iterator iter;\n+\t    use_operand_p use_p;\n+\t    enum ssa_prop_result res = SSA_PROP_VARYING;\n+\n+\t    set_value_range_to_varying (get_value_range (lhs));\n+\n+\t    FOR_EACH_IMM_USE_FAST (use_p, iter, lhs)\n+\t      {\n+\t\tgimple use_stmt = USE_STMT (use_p);\n+\t\tif (!is_gimple_assign (use_stmt))\n+\t\t  continue;\n+\t\tenum tree_code rhs_code = gimple_assign_rhs_code (use_stmt);\n+\t\tif (rhs_code != REALPART_EXPR && rhs_code != IMAGPART_EXPR)\n+\t\t  continue;\n+\t\ttree rhs1 = gimple_assign_rhs1 (use_stmt);\n+\t\ttree use_lhs = gimple_assign_lhs (use_stmt);\n+\t\tif (TREE_CODE (rhs1) != rhs_code\n+\t\t    || TREE_OPERAND (rhs1, 0) != lhs\n+\t\t    || TREE_CODE (use_lhs) != SSA_NAME\n+\t\t    || !stmt_interesting_for_vrp (use_stmt)\n+\t\t    || (!INTEGRAL_TYPE_P (TREE_TYPE (use_lhs))\n+\t\t\t|| !TYPE_MIN_VALUE (TREE_TYPE (use_lhs))\n+\t\t\t|| !TYPE_MAX_VALUE (TREE_TYPE (use_lhs))))\n+\t\t  continue;\n+\n+\t\t/* If there is a change in the value range for any of the\n+\t\t   REALPART_EXPR/IMAGPART_EXPR immediate uses, return\n+\t\t   SSA_PROP_INTERESTING.  If there are any REALPART_EXPR\n+\t\t   or IMAGPART_EXPR immediate uses, but none of them have\n+\t\t   a change in their value ranges, return\n+\t\t   SSA_PROP_NOT_INTERESTING.  If there are no\n+\t\t   {REAL,IMAG}PART_EXPR uses at all,\n+\t\t   return SSA_PROP_VARYING.  */\n+\t\tvalue_range_t new_vr = VR_INITIALIZER;\n+\t\textract_range_basic (&new_vr, use_stmt);\n+\t\tvalue_range_t *old_vr = get_value_range (use_lhs);\n+\t\tif (old_vr->type != new_vr.type\n+\t\t    || !vrp_operand_equal_p (old_vr->min, new_vr.min)\n+\t\t    || !vrp_operand_equal_p (old_vr->max, new_vr.max)\n+\t\t    || !vrp_bitmap_equal_p (old_vr->equiv, new_vr.equiv))\n+\t\t  res = SSA_PROP_INTERESTING;\n+\t\telse\n+\t\t  res = SSA_PROP_NOT_INTERESTING;\n+\t\tBITMAP_FREE (new_vr.equiv);\n+\t\tif (res == SSA_PROP_INTERESTING)\n+\t\t  {\n+\t\t    *output_p = lhs;\n+\t\t    return res;\n+\t\t  }\n+\t      }\n+\n+\t    return res;\n+\t  }\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n \n   /* Every other statement produces no useful ranges.  */\n   FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_DEF)"}]}