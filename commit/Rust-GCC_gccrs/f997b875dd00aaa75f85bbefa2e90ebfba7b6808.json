{"sha": "f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5N2I4NzVkZDAwYWFhNzVmODViYmVmYTJlOTBlYmZiYTdiNjgwOA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-09-21T17:58:32Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-09-21T17:58:32Z"}, "message": "re PR target/45694 ([MinGW64] fortran host associated variables+optimization==failure?)\n\n2010-09-21  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR target/45694\n        * config/i386/i386.c (ix86_expand_prologue): Save r10 in case that\n        static chain-register is used for 64-bit.\n\nFrom-SVN: r164489", "tree": {"sha": "3599c78b46a003a8baea2161bd8ba3af0dc92129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3599c78b46a003a8baea2161bd8ba3af0dc92129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f997b875dd00aaa75f85bbefa2e90ebfba7b6808/comments", "author": null, "committer": null, "parents": [{"sha": "54394f4d8db10c44648966a3d243aea627d668a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54394f4d8db10c44648966a3d243aea627d668a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54394f4d8db10c44648966a3d243aea627d668a5"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "07cea556aa2a772a4fa9e76284477c960e99edc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f997b875dd00aaa75f85bbefa2e90ebfba7b6808/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f997b875dd00aaa75f85bbefa2e90ebfba7b6808/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "patch": "@@ -1,3 +1,9 @@\n+2010-09-21  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR target/45694\n+\t* config/i386/i386.c (ix86_expand_prologue): Save r10 in case that\n+\tstatic chain-register is used for 64-bit.\n+\n 2010-09-21  Richard Guenther  <rguenther@suse.de>\n \n \t* dwarf2out.c (is_cu_die): New function."}, {"sha": "4501efb047ba1a297d61652628fc7a76f56bc6a1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f997b875dd00aaa75f85bbefa2e90ebfba7b6808/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f997b875dd00aaa75f85bbefa2e90ebfba7b6808/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "patch": "@@ -9692,19 +9692,27 @@ ix86_expand_prologue (void)\n     }\n   else\n     {\n-      rtx eax = gen_rtx_REG (Pmode, AX_REG);\n-      bool eax_live;\n+      rtx eax = gen_rtx_REG (Pmode, AX_REG);;\n+      rtx r10 = NULL;\n+      bool eax_live = false;\n+      bool r10_live = false;\n \n-      if (cfun->machine->call_abi == MS_ABI)\n-\teax_live = false;\n-      else\n-\teax_live = ix86_eax_live_at_start_p ();\n+      if (TARGET_64BIT)\n+        r10_live = (DECL_STATIC_CHAIN (current_function_decl) != 0);\n+      if (!TARGET_64BIT_MS_ABI)\n+        eax_live = ix86_eax_live_at_start_p ();\n \n       if (eax_live)\n \t{\n \t  emit_insn (gen_push (eax));\n \t  allocate -= UNITS_PER_WORD;\n \t}\n+      if (r10_live)\n+\t{\n+\t  r10 = gen_rtx_REG (Pmode, R10_REG);\n+\t  emit_insn (gen_push (r10));\n+\t  allocate -= UNITS_PER_WORD;\n+\t}\n \n       emit_move_insn (eax, GEN_INT (allocate));\n \n@@ -9720,11 +9728,18 @@ ix86_expand_prologue (void)\n \t}\n       m->fs.sp_offset += allocate;\n \n-      if (eax_live)\n-\t{\n+      if (r10_live && eax_live)\n+        {\n \t  t = choose_baseaddr (m->fs.sp_offset - allocate);\n+\t  emit_move_insn (r10, gen_frame_mem (Pmode, t));\n+\t  t = choose_baseaddr (m->fs.sp_offset - allocate - UNITS_PER_WORD);\n \t  emit_move_insn (eax, gen_frame_mem (Pmode, t));\n \t}\n+      else if (eax_live || r10_live)\n+\t{\n+\t  t = choose_baseaddr (m->fs.sp_offset - allocate);\n+\t  emit_move_insn ((eax_live ? eax : r10), gen_frame_mem (Pmode, t));\n+\t}\n     }\n   gcc_assert (m->fs.sp_offset == frame.stack_pointer_offset);\n "}]}