{"sha": "695c3817fa94bc982394baa46a46f00609ba4c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1YzM4MTdmYTk0YmM5ODIzOTRiYWE0NmE0NmYwMDYwOWJhNGMwYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-10-15T15:31:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-10-15T15:31:39Z"}, "message": "lto-streamer-out.c (write_symbol): Use pointer set of seen objects instead of bitmap.\n\n\n\t* lto-streamer-out.c (write_symbol): Use pointer set of seen\n\tobjects instead of bitmap.\n\t(produce_symtab): Likewise; output defined symbols first.\n\nFrom-SVN: r165513", "tree": {"sha": "d29d92f59abc4938a0c4ebbb897809b03a998eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29d92f59abc4938a0c4ebbb897809b03a998eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/695c3817fa94bc982394baa46a46f00609ba4c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695c3817fa94bc982394baa46a46f00609ba4c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695c3817fa94bc982394baa46a46f00609ba4c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695c3817fa94bc982394baa46a46f00609ba4c0b/comments", "author": null, "committer": null, "parents": [{"sha": "c1721efbbbebb1dec2fa36d7ee7f4043714308fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1721efbbbebb1dec2fa36d7ee7f4043714308fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1721efbbbebb1dec2fa36d7ee7f4043714308fe"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "989a5f2fda132c8b95d4373dd328ee3fd9dd9bec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695c3817fa94bc982394baa46a46f00609ba4c0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695c3817fa94bc982394baa46a46f00609ba4c0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=695c3817fa94bc982394baa46a46f00609ba4c0b", "patch": "@@ -1,3 +1,9 @@\n+2010-10-15  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-out.c (write_symbol): Use pointer set of seen\n+\tobjects instead of bitmap.\n+\t(produce_symtab): Likewise; output defined symbols first.\n+\n 2010-10-15  Jie Zhang  <jie@codesourcery.com>\n \n \t* doc/invoke.texi: Add -fstrict-volatile-bitfields to"}, {"sha": "03b4f39dc8b9e4e881319ba5c51776febcf80af6", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695c3817fa94bc982394baa46a46f00609ba4c0b/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695c3817fa94bc982394baa46a46f00609ba4c0b/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=695c3817fa94bc982394baa46a46f00609ba4c0b", "patch": "@@ -2340,13 +2340,13 @@ lto_out_decl_state_written_size (struct lto_out_decl_state *state)\n }\n \n \n-/* Write symbol T into STREAM in CACHE. SEEN specify symbols we wrote so\n-   far.  */\n+/* Write symbol T into STREAM in CACHE. SEEN specifies symbols we wrote\n+   so far.  */\n \n static void\n write_symbol (struct lto_streamer_cache_d *cache,\n \t      struct lto_output_stream *stream,\n-\t      tree t, bitmap seen, bool alias)\n+\t      tree t, struct pointer_set_t *seen, bool alias)\n {\n   const char *name;\n   enum gcc_plugin_symbol_kind kind;\n@@ -2368,6 +2368,10 @@ write_symbol (struct lto_streamer_cache_d *cache,\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (t));\n \n+  if (pointer_set_contains (seen, name))\n+    return;\n+  pointer_set_insert (seen, name);\n+\n   /* FIXME lto: this is from assemble_name_raw in varasm.c. For some\n      architectures we might have to do the same name manipulations that\n      ASM_OUTPUT_LABELREF does. */\n@@ -2377,10 +2381,6 @@ write_symbol (struct lto_streamer_cache_d *cache,\n   lto_streamer_cache_lookup (cache, t, &slot_num);\n   gcc_assert (slot_num >= 0);\n \n-  /* Avoid duplicate symbols. */\n-  if (!bitmap_set_bit (seen, slot_num))\n-    return;\n-\n   if (DECL_EXTERNAL (t))\n     {\n       if (DECL_WEAK (t))\n@@ -2397,9 +2397,9 @@ write_symbol (struct lto_streamer_cache_d *cache,\n       else\n \tkind = GCCPK_DEF;\n \n-      /* When something is defined, it should have a node attached.\n-\t FIXME: For fortran this is still not the case since wrapup global\n-\t decls is done after streaming.  */\n+      /* When something is defined, it should have node attached.  */\n+      gcc_assert (alias || TREE_CODE (t) != VAR_DECL\n+\t\t  || varpool_get_node (t)->finalized);\n       gcc_assert (alias || TREE_CODE (t) != FUNCTION_DECL\n \t\t  || (cgraph_get_node (t)\n \t\t      && cgraph_get_node (t)->analyzed));\n@@ -2463,7 +2463,7 @@ produce_symtab (struct output_block *ob,\n {\n   struct lto_streamer_cache_d *cache = ob->writer_cache;\n   char *section_name = lto_get_section_name (LTO_section_symtab, NULL, NULL);\n-  bitmap seen;\n+  struct pointer_set_t *seen;\n   struct cgraph_node *node, *alias;\n   struct varpool_node *vnode, *valias;\n   struct lto_output_stream stream;\n@@ -2475,14 +2475,35 @@ produce_symtab (struct output_block *ob,\n   lto_begin_section (section_name, false);\n   free (section_name);\n \n-  seen = lto_bitmap_alloc ();\n+  seen = pointer_set_create ();\n   memset (&stream, 0, sizeof (stream));\n \n-  /* Write all functions.  */\n+  /* Write all functions. \n+     First write all defined functions and the write all used functions.\n+     This is done so only to handle duplicated symbols in cgraph.  */\n   for (i = 0; i < lto_cgraph_encoder_size (encoder); i++)\n     {\n       node = lto_cgraph_encoder_deref (encoder, i);\n-      if (node->alias)\n+      if (DECL_EXTERNAL (node->decl))\n+\tcontinue;\n+      if (DECL_COMDAT (node->decl)\n+\t  && cgraph_can_remove_if_no_direct_calls_p (node))\n+\tcontinue;\n+      if (node->alias || node->global.inlined_to)\n+\tcontinue;\n+      write_symbol (cache, &stream, node->decl, seen, false);\n+      for (alias = node->same_body; alias; alias = alias->next)\n+        write_symbol (cache, &stream, alias->decl, seen, true);\n+    }\n+  for (i = 0; i < lto_cgraph_encoder_size (encoder); i++)\n+    {\n+      node = lto_cgraph_encoder_deref (encoder, i);\n+      if (!DECL_EXTERNAL (node->decl))\n+\tcontinue;\n+      if (DECL_COMDAT (node->decl)\n+\t  && cgraph_can_remove_if_no_direct_calls_p (node))\n+\tcontinue;\n+      if (node->alias || node->global.inlined_to)\n \tcontinue;\n       write_symbol (cache, &stream, node->decl, seen, false);\n       for (alias = node->same_body; alias; alias = alias->next)\n@@ -2493,6 +2514,19 @@ produce_symtab (struct output_block *ob,\n   for (i = 0; i < lto_varpool_encoder_size (varpool_encoder); i++)\n     {\n       vnode = lto_varpool_encoder_deref (varpool_encoder, i);\n+      if (DECL_EXTERNAL (vnode->decl))\n+\tcontinue;\n+      if (vnode->alias)\n+\tcontinue;\n+      write_symbol (cache, &stream, vnode->decl, seen, false);\n+      for (valias = vnode->extra_name; valias; valias = valias->next)\n+        write_symbol (cache, &stream, valias->decl, seen, true);\n+    }\n+  for (i = 0; i < lto_varpool_encoder_size (varpool_encoder); i++)\n+    {\n+      vnode = lto_varpool_encoder_deref (varpool_encoder, i);\n+      if (!DECL_EXTERNAL (vnode->decl))\n+\tcontinue;\n       if (vnode->alias)\n \tcontinue;\n       write_symbol (cache, &stream, vnode->decl, seen, false);\n@@ -2506,7 +2540,7 @@ produce_symtab (struct output_block *ob,\n       write_symbol (cache, &stream, p->decl, seen, true);\n \n   lto_write_stream (&stream);\n-  lto_bitmap_free (seen);\n+  pointer_set_destroy (seen);\n \n   lto_end_section ();\n }"}]}