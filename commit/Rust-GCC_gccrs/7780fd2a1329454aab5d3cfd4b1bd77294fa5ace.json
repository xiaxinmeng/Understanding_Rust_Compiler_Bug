{"sha": "7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4MGZkMmExMzI5NDU0YWFiNWQzY2ZkNGIxYmQ3NzI5NGZhNWFjZQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-10-24T15:23:25Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-10-24T15:23:25Z"}, "message": "re PR fortran/55037 ([OOP] ICE with local allocatable variable of abstract type)\n\n2012-10-24  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/55037\n\t* trans-expr.c (gfc_conv_procedure_call): Move a piece of code and\n\tremove an assert.\n\n2012-10-24  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/55037\n\t* gfortran.dg/class_dummy_4.f03: New.\n\nFrom-SVN: r192768", "tree": {"sha": "05b82f7d04e95db5d37e6b184f6e4dfb555dd2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05b82f7d04e95db5d37e6b184f6e4dfb555dd2f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d9083df222456f5d0f15d5a6ceca7a97ded8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d9083df222456f5d0f15d5a6ceca7a97ded8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d9083df222456f5d0f15d5a6ceca7a97ded8b9"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "25928e18c38dc48eb5fa8b5ec6eb11f5a8ab7a9b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "patch": "@@ -1,3 +1,9 @@\n+2012-10-24  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55037\n+\t* trans-expr.c (gfc_conv_procedure_call): Move a piece of code and\n+\tremove an assert.\n+\n 2012-10-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54725"}, {"sha": "b0bd7f57004a18ddec16fb1f67a9991516a846eb", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "patch": "@@ -4180,13 +4180,6 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\t     CLASS_DATA (fsym)->attr.class_pointer\n \t\t\t\t     || CLASS_DATA (fsym)->attr.allocatable);\n \n-\t\t  if (fsym && (fsym->ts.type == BT_DERIVED\n-\t\t\t       || fsym->ts.type == BT_ASSUMED)\n-\t\t      && e->ts.type == BT_CLASS\n-\t\t      && !CLASS_DATA (e)->attr.dimension\n-\t\t      && !CLASS_DATA (e)->attr.codimension)\n-\t\t    parmse.expr = gfc_class_data_get (parmse.expr);\n-\n \t\t  /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is \n \t\t     allocated on entry, it must be deallocated.  */\n \t\t  if (fsym && fsym->attr.intent == INTENT_OUT\n@@ -4215,7 +4208,6 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t      if (fsym->ts.type == BT_CLASS)\n \t\t\t{\n \t\t\t  gfc_symbol *vtab;\n-\t\t\t  gcc_assert (fsym->ts.u.derived == e->ts.u.derived);\n \t\t\t  vtab = gfc_find_derived_vtab (fsym->ts.u.derived);\n \t\t\t  tmp = gfc_get_symbol_decl (vtab);\n \t\t\t  tmp = gfc_build_addr_expr (NULL_TREE, tmp);\n@@ -4241,6 +4233,13 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t      gfc_add_expr_to_block (&se->pre, tmp);\n \t\t    }\n \n+\t\t  if (fsym && (fsym->ts.type == BT_DERIVED\n+\t\t\t       || fsym->ts.type == BT_ASSUMED)\n+\t\t      && e->ts.type == BT_CLASS\n+\t\t      && !CLASS_DATA (e)->attr.dimension\n+\t\t      && !CLASS_DATA (e)->attr.codimension)\n+\t\t    parmse.expr = gfc_class_data_get (parmse.expr);\n+\n \t\t  /* Wrap scalar variable in a descriptor. We need to convert\n \t\t     the address of a pointer back to the pointer itself before,\n \t\t     we can assign it to the data field.  */"}, {"sha": "5d588ca590c4ed552be0281aca8e9e0cdde83ff7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "patch": "@@ -1,3 +1,8 @@\n+2012-10-24  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55037\n+\t* gfortran.dg/class_dummy_4.f03: New.\n+\n 2012-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/55010"}, {"sha": "fa302bf1ada058e4fb45f4ac66c6d6daa7cabfdb", "filename": "gcc/testsuite/gfortran.dg/class_dummy_4.f03", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7780fd2a1329454aab5d3cfd4b1bd77294fa5ace/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_dummy_4.f03?ref=7780fd2a1329454aab5d3cfd4b1bd77294fa5ace", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+!\n+! PR 55037: [4.8 Regression] [OOP] ICE with local allocatable variable of abstract type\n+!\n+! Contributed by <mrestelli@gmail.com>\n+\n+module m1\n+ implicit none\n+ type, abstract :: c_stv\n+ contains\n+  procedure, pass(x) :: source\n+ end type c_stv\n+contains\n+ pure subroutine source(y,x)\n+  class(c_stv), intent(in)               :: x\n+  class(c_stv), allocatable, intent(out) :: y\n+ end subroutine source\n+end module m1\n+\n+module m2\n+ use m1, only : c_stv\n+ implicit none\n+contains\n+ subroutine sub(u0)\n+  class(c_stv), intent(inout) :: u0\n+  class(c_stv), allocatable :: tmp\n+   call u0%source(tmp)\n+ end subroutine sub\n+end module m2 \n+\n+\n+program p\n+ implicit none\n+ type :: c_stv\n+ end type\n+ class(c_stv), allocatable :: tmp\n+ call source(tmp)\n+contains\n+ subroutine source(y)\n+  type(c_stv), allocatable, intent(out) :: y\n+ end subroutine\n+end\n+\n+! { dg-final { cleanup-modules \"m1 m2\" } }"}]}