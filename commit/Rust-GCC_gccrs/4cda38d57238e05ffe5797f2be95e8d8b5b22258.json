{"sha": "4cda38d57238e05ffe5797f2be95e8d8b5b22258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkYTM4ZDU3MjM4ZTA1ZmZlNTc5N2YyYmU5NWU4ZDhiNWIyMjI1OA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2008-09-04T23:35:03Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2008-09-04T23:35:03Z"}, "message": "ira-conflicts.c (process_regs_for_copy): Check insn to check that the cost is already taken into account in ira-costs.c\n\n2008-09-04  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* ira-conflicts.c (process_regs_for_copy): Check insn to check\n\tthat the cost is already taken into account in ira-costs.c\n\n\t* ira-int.h (ira_debug_copy, ira_debug_copies): New.\n\n\t* ira-build.c (print_copy, print_copies, ira_debug_copy,\n\tira_debug_copies): New.\n\t(ira_bulid): Call print_copies.\n\t\n\t* doc/tm.texi (IRA_COVER_CLASSES): Fix the description.\n\nFrom-SVN: r140014", "tree": {"sha": "bdecaa024ed96b5a8c8718f2822578302345a9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdecaa024ed96b5a8c8718f2822578302345a9d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cda38d57238e05ffe5797f2be95e8d8b5b22258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cda38d57238e05ffe5797f2be95e8d8b5b22258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cda38d57238e05ffe5797f2be95e8d8b5b22258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cda38d57238e05ffe5797f2be95e8d8b5b22258/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f3b0d4ad6781d67bfc8d1f225916e596dc89419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f3b0d4ad6781d67bfc8d1f225916e596dc89419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f3b0d4ad6781d67bfc8d1f225916e596dc89419"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "fc5515b310cf0e04524f971b691ba5ed5dd67099", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cda38d57238e05ffe5797f2be95e8d8b5b22258", "patch": "@@ -1,3 +1,16 @@\n+2008-09-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* ira-conflicts.c (process_regs_for_copy): Check insn to check\n+\tthat the cost is already taken into account in ira-costs.c\n+\n+\t* ira-int.h (ira_debug_copy, ira_debug_copies): New.\n+\n+\t* ira-build.c (print_copy, print_copies, ira_debug_copy,\n+\tira_debug_copies): New.\n+\t(ira_bulid): Call print_copies.\n+\t\n+\t* doc/tm.texi (IRA_COVER_CLASSES): Fix the description.\n+\t\n 2008-09-04  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR target/32783"}, {"sha": "d6cdc5a679f502ae8c4b679427058f6496de3e53", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4cda38d57238e05ffe5797f2be95e8d8b5b22258", "patch": "@@ -2830,10 +2830,10 @@ as below:\n The macro defines cover classes for the Integrated Register Allocator\n (@acronym{IRA}).  Cover classes are a set of non-intersecting register\n classes covering all hard registers used for register allocation\n-purposes.  Any move between two registers in the same cover class\n-should be cheaper than load or store of the registers.  The macro\n-value should be the initializer for an array of register class values,\n-with @code{LIM_REG_CLASSES} used as the end marker.\n+purposes.  If a move between two registers in the same cover class are\n+possible, it should be cheaper than a load or store of the registers.\n+The macro value should be the initializer for an array of register\n+class values, with @code{LIM_REG_CLASSES} used as the end marker.\n \n You must define this macro in order to use the integrated register\n allocator for the target."}, {"sha": "b1f496c41dfa4c75ce24dadbb9f69e79f5bd3cd5", "filename": "gcc/ira-build.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=4cda38d57238e05ffe5797f2be95e8d8b5b22258", "patch": "@@ -1097,6 +1097,40 @@ ira_add_allocno_copy (ira_allocno_t first, ira_allocno_t second, int freq,\n   return cp;\n }\n \n+/* Print info about copy CP into file F.  */\n+static void\n+print_copy (FILE *f, ira_copy_t cp)\n+{\n+  fprintf (f, \"  cp%d:a%d(r%d)<->a%d(r%d)@%d\\n\", cp->num,\n+\t   ALLOCNO_NUM (cp->first), ALLOCNO_REGNO (cp->first),\n+\t   ALLOCNO_NUM (cp->second), ALLOCNO_REGNO (cp->second), cp->freq);\n+}\n+\n+/* Print info about copy CP into stderr.  */\n+void\n+ira_debug_copy (ira_copy_t cp)\n+{\n+  print_copy (stderr, cp);\n+}\n+\n+/* Print info about all copies into file F.  */\n+static void\n+print_copies (FILE *f)\n+{\n+  ira_copy_t cp;\n+  ira_copy_iterator ci;\n+\n+  FOR_EACH_COPY (cp, ci)\n+    print_copy (f, cp);\n+}\n+\n+/* Print info about all copies into stderr.  */\n+void\n+ira_debug_copies (void)\n+{\n+  print_copies (stderr);\n+}\n+\n /* Print info about copies involving allocno A into file F.  */\n static void\n print_allocno_copies (FILE *f, ira_allocno_t a)\n@@ -2409,6 +2443,8 @@ ira_build (bool loops_p)\n   sort_conflict_id_allocno_map ();\n   setup_min_max_conflict_allocno_ids ();\n   ira_build_conflicts ();\n+  if (internal_flag_ira_verbose > 2 && ira_dump_file != NULL)\n+    print_copies (ira_dump_file);\n   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL)\n     {\n       int n, nr;"}, {"sha": "8b8c48582eae7c056800aa41918f5f705d754fb9", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=4cda38d57238e05ffe5797f2be95e8d8b5b22258", "patch": "@@ -371,8 +371,8 @@ process_regs_for_copy (rtx reg1, rtx reg2, rtx insn, int freq)\n   cover_class = ALLOCNO_COVER_CLASS (a);\n   if (! ira_class_subset_p[rclass][cover_class])\n     return false;\n-  if (reg_class_size[rclass] <= (unsigned) CLASS_MAX_NREGS (rclass, mode)\n-      && only_regs_p)\n+  if (only_regs_p && insn != NULL_RTX\n+      && reg_class_size[rclass] <= (unsigned) CLASS_MAX_NREGS (rclass, mode))\n     /* It is already taken into account in ira-costs.c.  */\n     return false;\n   index = ira_class_hard_reg_index[cover_class][hard_regno];"}, {"sha": "727eeae905cdbedae051174db11440f69f45e6c4", "filename": "gcc/ira-int.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda38d57238e05ffe5797f2be95e8d8b5b22258/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=4cda38d57238e05ffe5797f2be95e8d8b5b22258", "patch": "@@ -838,6 +838,8 @@ extern rtx *ira_reg_equiv_const;\n extern ira_loop_tree_node_t ira_curr_loop_tree_node;\n extern ira_allocno_t *ira_curr_regno_allocno_map;\n \n+extern void ira_debug_copy (ira_copy_t);\n+extern void ira_debug_copies (void);\n extern void ira_debug_allocno_copies (ira_allocno_t);\n \n extern void ira_traverse_loop_tree (bool, ira_loop_tree_node_t,"}]}