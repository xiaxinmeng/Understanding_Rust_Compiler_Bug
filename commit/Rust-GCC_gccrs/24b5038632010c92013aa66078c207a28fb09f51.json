{"sha": "24b5038632010c92013aa66078c207a28fb09f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiNTAzODYzMjAxMGM5MjAxM2FhNjYwNzhjMjA3YTI4ZmIwOWY1MQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-11-16T08:01:09Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2014-11-16T08:01:09Z"}, "message": "memset-4.c: New test.\n\n2014-11-16  Andrew Pinski  <apinski@cavium.com>\n\n\t* gcc.c-torture/execute/memset-4.c: New test.\n\t* gcc.c-torture/execute/20110418-1.c: New test.\n\t* gcc.c-torture/execute/20141022-1.c: New test.\n\t* gcc.c-torture/execute/strcpy-2.c: New test.\n\t* gcc.c-torture/execute/20140212-2.c: New test.\n\t* gcc.c-torture/compile/20120913-1.c: New test.\n\t* gcc.c-torture/compile/20121010-1.c: New test.\n\t* gcc.c-torture/compile/20120917-1.c: New test.\n\t* gcc.c-torture/compile/20140110-1.c: New test.\n\t* gcc.c-torture/compile/20121220-1.c: New test.\n\t* gcc.c-torture/compile/20120822-1.c: New test.\n\t* gcc.c-torture/compile/20121027-1.c: New test.\n\t* gcc.c-torture/compile/20120830-2.c: New test.\n\nFrom-SVN: r217625", "tree": {"sha": "ec742abbbae958a18c4378f3abb2b6dbc71a0cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec742abbbae958a18c4378f3abb2b6dbc71a0cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24b5038632010c92013aa66078c207a28fb09f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b5038632010c92013aa66078c207a28fb09f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b5038632010c92013aa66078c207a28fb09f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b5038632010c92013aa66078c207a28fb09f51/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f607c5c4b7720bdc62998ebb2b64d4d093690d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f607c5c4b7720bdc62998ebb2b64d4d093690d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f607c5c4b7720bdc62998ebb2b64d4d093690d5c"}], "stats": {"total": 239, "additions": 239, "deletions": 0}, "files": [{"sha": "87cb8d8c1914de4c523cc7baf91b2aba8e7b4f72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -1,3 +1,19 @@\n+2014-11-16  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.c-torture/execute/memset-4.c: New test.\n+\t* gcc.c-torture/execute/20110418-1.c: New test.\n+\t* gcc.c-torture/execute/20141022-1.c: New test.\n+\t* gcc.c-torture/execute/strcpy-2.c: New test.\n+\t* gcc.c-torture/execute/20140212-2.c: New test.\n+\t* gcc.c-torture/compile/20120913-1.c: New test.\n+\t* gcc.c-torture/compile/20121010-1.c: New test.\n+\t* gcc.c-torture/compile/20120917-1.c: New test.\n+\t* gcc.c-torture/compile/20140110-1.c: New test.\n+\t* gcc.c-torture/compile/20121220-1.c: New test.\n+\t* gcc.c-torture/compile/20120822-1.c: New test.\n+\t* gcc.c-torture/compile/20121027-1.c: New test.\n+\t* gcc.c-torture/compile/20120830-2.c: New test.\n+\n 2014-11-15  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* g++.dg/guality/guality.exp (check_guality): Fix `test_counts'"}, {"sha": "0298c606b318f7edd25418034901a11eace39cfd", "filename": "gcc/testsuite/gcc.c-torture/compile/20120822-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120822-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120822-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120822-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,11 @@\n+int a;\n+int c;\n+int b;\n+void shr_long(int d, unsigned char s)\n+{\n+ long long dvd, div, mod;\n+ dvd = b;\n+ mod = dvd % s;\n+ if (((c >> ((mod & 0xff) % 32)) & 1) == 0)\n+  a = 1;\n+}"}, {"sha": "27479b687a7730337072b9c9f426c1049ccb180d", "filename": "gcc/testsuite/gcc.c-torture/compile/20120830-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120830-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120830-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120830-2.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,5 @@\n+ubidi_writeReordered_49( int *dest, const unsigned char *dirProps) \n+{\n+    if (!(1&(1UL<<*dirProps)))\n+      *dest=1;\n+}"}, {"sha": "f63babd9758722434beb4ec8507826f3de506398", "filename": "gcc/testsuite/gcc.c-torture/compile/20120913-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120913-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120913-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120913-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,17 @@\n+struct list_head {\n+  struct list_head *next, *prev;\n+};\n+struct dm_exception {\n+  struct list_head hash_list;\n+  unsigned long long old_chunk;\n+  unsigned long long new_chunk;\n+};\n+struct dm_exception *dm_lookup_exception(struct list_head *table, unsigned long long chunk) {\n+  struct list_head *slot;\n+  struct dm_exception *e;\n+  slot = &table[0];\n+  e = (struct dm_exception *)slot->next;\n+  for (; &e->hash_list != (slot);)\n+    if (chunk <= (e->new_chunk>>56))\n+      return e;\n+}"}, {"sha": "b469514fa09cb94f0b547ae8474b3ea20d431929", "filename": "gcc/testsuite/gcc.c-torture/compile/20120917-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120917-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120917-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120917-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,13 @@\n+typedef long long curl_off_t;\n+int tool_seek_cb(void *userdata, curl_off_t offset, int whence)\n+{\n+  if(offset > 0x7FFFFFFFLL - 0x1LL) \n+{\n+    curl_off_t left = offset;\n+    while(left) \n+{\n+      long step = (left > 0x7FFFFFFFLL - 0x1LL) ? 2147483647L - 1L : (long)left;\n+      left -= step;\n+    }\n+  }\n+}"}, {"sha": "9fac9b820e37bd4ef4954ff80b0088a8315d34da", "filename": "gcc/testsuite/gcc.c-torture/compile/20121010-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121010-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121010-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121010-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,10 @@\n+int _IO_getc(int*);\n+read_long(int *fp)\n+{\n+  unsigned char b0, b1, b2, b3;\n+  b0 = _IO_getc (fp);\n+  b1 = _IO_getc (fp);\n+  b2 = _IO_getc (fp);\n+  b3 = _IO_getc (fp);\n+  return ((int)(((((b3 << 8) | b2) << 8) | b1) << 8) | b0);\n+}"}, {"sha": "3d3ff31f69b24dac63ec8e39a92c6cd669728ec2", "filename": "gcc/testsuite/gcc.c-torture/compile/20121027-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121027-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121027-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121027-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,13 @@\n+extern int nc;\n+void f(void)\n+{\n+    unsigned char resp[1024];\n+    int c;\n+    int bl = 0;\n+    unsigned long long *dwords = (unsigned long long *)(resp + 5);\n+    for (c=0; c<nc; c++)\n+    {\n+        ff(dwords[bl/64]);\n+        bl++;\n+    }\n+}"}, {"sha": "05edb992919faf136617009628308090008d5f67", "filename": "gcc/testsuite/gcc.c-torture/compile/20121220-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121220-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121220-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20121220-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,14 @@\n+typedef unsigned char uint8_t;\n+typedef unsigned int uint32_t;\n+static __attribute__ (( always_inline )) __inline__\n+void rop_8_notsrc_or_dst(uint8_t *dst, uint8_t src)\n+{\n+  *dst = (~(src)) | (*dst);\n+}\n+void cirrus_colorexpand_notsrc_or_dst_8 (uint8_t * dst, int bits)\n+{\n+  uint8_t src;\n+  uint32_t colors[2];\n+  src = colors[bits];\n+  rop_8_notsrc_or_dst(dst, src);\n+}"}, {"sha": "c1bd7990e04d79952c8932fdec9d518e58a4485a", "filename": "gcc/testsuite/gcc.c-torture/compile/20140110-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20140110-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20140110-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20140110-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,14 @@\n+typedef long unsigned int size_t;\n+struct RangeMapRange {\n+  unsigned fromMin;\n+  unsigned fromMax;\n+  unsigned toMin;\n+};\n+void reserve1(void);\n+void f(struct RangeMapRange *q1, size_t t)\n+{\n+  const struct RangeMapRange *q2 = q1 + t;\n+  size_t n = q2 - q1;\n+  if (n > 0)\n+    reserve1();\n+}"}, {"sha": "df2636080e35f6b8146273f898b8082675dd8f6c", "filename": "gcc/testsuite/gcc.c-torture/execute/20110418-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20110418-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20110418-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20110418-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,29 @@\n+typedef unsigned long long uint64_t;\n+void f(uint64_t *a, uint64_t aa) __attribute__((noinline));\n+void f(uint64_t *a, uint64_t aa)\n+{\n+  uint64_t new_value = aa;\n+  uint64_t old_value = *a;\n+  int bit_size = 32;\n+    uint64_t mask = (uint64_t)(unsigned)(-1);\n+    uint64_t tmp = old_value & mask;\n+    new_value &= mask;\n+    /* On overflow we need to add 1 in the upper bits */\n+    if (tmp > new_value)\n+        new_value += 1ull<<bit_size;\n+    /* Add in the upper bits from the old value */\n+    new_value += old_value & ~mask;\n+    *a = new_value;\n+}\n+int main(void)\n+{\n+  uint64_t value, new_value, old_value;\n+  value = 0x100000001;\n+  old_value = value;\n+  new_value = (value+1)&(uint64_t)(unsigned)(-1);\n+  f(&value, new_value);\n+  if (value != old_value+1)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}, {"sha": "93385ecae56c3ec85ae27f4ef27f065597a0a265", "filename": "gcc/testsuite/gcc.c-torture/execute/20140212-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20140212-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20140212-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20140212-2.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,21 @@\n+/* This used to fail as we would convert f into just return (unsigned int)usVlanID\n+   which is wrong. */\n+\n+int f(unsigned short usVlanID) __attribute__((noinline,noclone));\n+int f(unsigned short usVlanID)\n+{\n+  unsigned int uiVlanID = 0xffffffff;\n+  int i;\n+  if ((unsigned short)0xffff != usVlanID)\n+    uiVlanID = (unsigned int)usVlanID;\n+  return uiVlanID;\n+}\n+\n+int main(void)\n+{\n+  if (f(1) != 1)\n+    __builtin_abort ();\n+  if (f(0xffff) != -1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "ab71877fb551b268fd6371ef4237d69fb7762385", "filename": "gcc/testsuite/gcc.c-torture/execute/20141022-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20141022-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20141022-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20141022-1.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,25 @@\n+#define ABORT() do { __builtin_printf(\"assert.\\n\");  __builtin_abort (); }while(0)\n+int f(int a) __attribute__((noinline));\n+int f(int a)\n+{\n+  int fem_key_src;\n+  int D2930 = a & 4294967291;\n+  fem_key_src = a == 6 ? 0 : 15;\n+  fem_key_src = D2930 != 1 ? fem_key_src : 0;\n+  return fem_key_src;\n+}\n+\n+int main(void)\n+{\n+  if (f(0) != 15)\n+    ABORT ();\n+  if (f(1) != 0)\n+    ABORT ();\n+  if (f(6) != 0)\n+    ABORT ();\n+  if (f(5) != 0)\n+    ABORT ();\n+  if (f(15) != 15)\n+    ABORT ();\n+  return 0;\n+}"}, {"sha": "2ac445cfb7df1dbdd0ca8636486738b0d7caa149", "filename": "gcc/testsuite/gcc.c-torture/execute/memset-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemset-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemset-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemset-4.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,27 @@\n+/* Test to make sure memset of small old size works\n+   correctly. */\n+#define SIZE 15\n+\n+void f(char *a) __attribute__((noinline));\n+void f(char *a)\n+{\n+  __builtin_memset (a, 0, SIZE);\n+}\n+\n+\n+int main(void)\n+{\n+  int i;\n+  char b[SIZE];\n+  for(i = 0; i < sizeof(b); i++)\n+    {\n+      b[i] = i;\n+    }\n+  f(b);\n+  for(i = 0; i < sizeof(b); i++)\n+    {\n+      if (0 != b[i])\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "78a00c3814888666e230aeb8936a04c393dc3936", "filename": "gcc/testsuite/gcc.c-torture/execute/strcpy-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b5038632010c92013aa66078c207a28fb09f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrcpy-2.c?ref=24b5038632010c92013aa66078c207a28fb09f51", "patch": "@@ -0,0 +1,24 @@\n+/* Test to make sure strcpy works correctly. */\n+#define STRING \"Hi!THE\"\n+\n+const char a[] = STRING;\n+\n+void f(char *a) __attribute__((noinline));\n+void f(char *a)\n+{\n+  __builtin_strcpy (a, STRING);\n+}\n+\n+\n+int main(void)\n+{\n+  int i;\n+  char b[sizeof(a)] = {};\n+  f(b);\n+  for(i = 0; i < sizeof(b); i++)\n+    {\n+      if (a[i] != b[i])\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}]}