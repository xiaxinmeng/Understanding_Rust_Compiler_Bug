{"sha": "fce687f8769fbad7fba74cf9adb985dd5369df01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlNjg3Zjg3NjlmYmFkN2ZiYTc0Y2Y5YWRiOTg1ZGQ1MzY5ZGYwMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-23T21:17:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-23T21:17:06Z"}, "message": "diagnostic.c (trim_filename): No longer static.\n\n\t* diagnostic.c (trim_filename): No longer static.\n\t* toplev.h (trim_filename): Declare.\n\t* rtl.c (rtl_check_failed_bounds): Call internal_error.\n\t(rtl_check_failed_type1, rtl_check_failed_type2): Likewise.\n\t(rtl_check_failed_code1, rtl_check_failed_code2): Likewise.\n\t(rtvec_check_failed_bounds): Likewise.\n\t* tree.c (tree_check_failed, tree_class_check_failed): Likewise.\n\nFrom-SVN: r40016", "tree": {"sha": "08218de6e8087c64395c199b03e38311bb54c54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08218de6e8087c64395c199b03e38311bb54c54d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fce687f8769fbad7fba74cf9adb985dd5369df01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce687f8769fbad7fba74cf9adb985dd5369df01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce687f8769fbad7fba74cf9adb985dd5369df01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce687f8769fbad7fba74cf9adb985dd5369df01/comments", "author": null, "committer": null, "parents": [{"sha": "3cc247a81a4e4ed0abb83a096333671f882d15ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc247a81a4e4ed0abb83a096333671f882d15ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc247a81a4e4ed0abb83a096333671f882d15ff"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "43ce072896da906177816f30691319e088abe832", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fce687f8769fbad7fba74cf9adb985dd5369df01", "patch": "@@ -1,5 +1,13 @@\n Fri Feb 23 15:28:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* diagnostic.c (trim_filename): No longer static.\n+\t* toplev.h (trim_filename): Declare.\n+\t* rtl.c (rtl_check_failed_bounds): Call internal_error.\n+\t(rtl_check_failed_type1, rtl_check_failed_type2): Likewise.\n+\t(rtl_check_failed_code1, rtl_check_failed_code2): Likewise.\n+\t(rtvec_check_failed_bounds): Likewise.\n+\t* tree.c (tree_check_failed, tree_class_check_failed): Likewise.\n+\n \t* convert.c (convert_to_integer): Don't do unsigned unless result or\n \tboth inputs are unsigned.\n "}, {"sha": "1863a2c39045e0b218ec55c5c9e95e0a70287d6e", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=fce687f8769fbad7fba74cf9adb985dd5369df01", "patch": "@@ -104,7 +104,6 @@ static void default_diagnostic_finalizer PARAMS ((output_buffer *,\n                                                   diagnostic_context *));\n \n static void error_recursion PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static const char *trim_filename PARAMS ((const char *));\n \n extern int rtl_dump_and_exit;\n extern int inhibit_warnings;\n@@ -1716,7 +1715,7 @@ error_recursion ()\n    is used by fancy_abort() to print `Internal compiler error in expr.c'\n    instead of `Internal compiler error in ../../GCC/gcc/expr.c'.  */\n \n-static const char *\n+const char *\n trim_filename (name)\n      const char *name;\n {"}, {"sha": "37f58d779ecd60dce9365199a64b347c573cd60a", "filename": "gcc/rtl.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=fce687f8769fbad7fba74cf9adb985dd5369df01", "patch": "@@ -1285,9 +1285,10 @@ rtl_check_failed_bounds (r, n, file, line, func)\n     int line;\n     const char *func;\n {\n-  error (\"RTL check: access of elt %d of `%s' with last elt %d\",\n-\t n, GET_RTX_NAME (GET_CODE (r)), GET_RTX_LENGTH (GET_CODE (r))-1);\n-  fancy_abort (file, line, func);\n+  internal_error\n+    (\"RTL check: access of elt %d of `%s' with last elt %d in %s, at %s:%d\",\n+     n, GET_RTX_NAME (GET_CODE (r)), GET_RTX_LENGTH (GET_CODE (r)) - 1,\n+     func, trim_filename (file), line);\n }\n \n void\n@@ -1299,9 +1300,10 @@ rtl_check_failed_type1 (r, n, c1, file, line, func)\n     int line;\n     const char *func;\n {\n-  error (\"RTL check: expected elt %d type '%c', have '%c' (rtx %s)\",\n-\t n, c1, GET_RTX_FORMAT (GET_CODE (r))[n], GET_RTX_NAME (GET_CODE (r)));\n-  fancy_abort (file, line, func);\n+  internal_error\n+    (\"RTL check: expected elt %d type '%c', have '%c' (rtx %s) in %s, at %s:%d\",\n+     n, c1, GET_RTX_FORMAT (GET_CODE (r))[n], GET_RTX_NAME (GET_CODE (r)),\n+     func, trim_filename (file), line);\n }\n \n void\n@@ -1314,10 +1316,10 @@ rtl_check_failed_type2 (r, n, c1, c2, file, line, func)\n     int line;\n     const char *func;\n {\n-  error (\"RTL check: expected elt %d type '%c' or '%c', have '%c' (rtx %s)\",\n-\t n, c1, c2,\n-\t GET_RTX_FORMAT (GET_CODE (r))[n], GET_RTX_NAME (GET_CODE(r)));\n-  fancy_abort (file, line, func);\n+  internal_error\n+    (\"RTL check: expected elt %d type '%c' or '%c', have '%c' (rtx %s) in %s, at %s:%d\",\n+     n, c1, c2, GET_RTX_FORMAT (GET_CODE (r))[n], GET_RTX_NAME (GET_CODE (r)),\n+     func, trim_filename (file), line);\n }\n \n void\n@@ -1328,9 +1330,9 @@ rtl_check_failed_code1 (r, code, file, line, func)\n     int line;\n     const char *func;\n {\n-  error (\"RTL check: expected code `%s', have `%s'\",\n- \t GET_RTX_NAME (code), GET_RTX_NAME (GET_CODE (r)));\n-  fancy_abort (file, line, func);\n+  internal_error (\"RTL check: expected code `%s', have `%s' in %s, at %s:%d\",\n+\t\t  GET_RTX_NAME (code), GET_RTX_NAME (GET_CODE (r)), func,\n+\t\t  trim_filename (file), line);\n }\n \n void\n@@ -1341,10 +1343,10 @@ rtl_check_failed_code2 (r, code1, code2, file, line, func)\n     int line;\n     const char *func;\n {\n-  error (\"RTL check: expected code `%s' or `%s', have `%s'\",\n- \t GET_RTX_NAME (code1), GET_RTX_NAME (code2),\n-\t GET_RTX_NAME (GET_CODE (r)));\n-  fancy_abort (file, line, func);\n+  internal_error\n+    (\"RTL check: expected code `%s' or `%s', have `%s' in %s, at %s:%d\",\n+     GET_RTX_NAME (code1), GET_RTX_NAME (code2), GET_RTX_NAME (GET_CODE (r)),\n+     ffunc, trim_filename (file), line);\n }\n \n /* XXX Maybe print the vector?  */\n@@ -1356,8 +1358,8 @@ rtvec_check_failed_bounds (r, n, file, line, func)\n     int line;\n     const char *func;\n {\n-  error (\"RTL check: access of elt %d of vector with last elt %d\",\n-\t n, GET_NUM_ELEM (r)-1);\n-  fancy_abort (file, line, func);\n+  internal_error\n+    (\"RTL check: access of elt %d of vector with last elt %d in %s, at %s:%d\",\n+     n, GET_NUM_ELEM (r) - 1, func, trim_filename (file), line);\n }\n #endif /* ENABLE_RTL_CHECKING */"}, {"sha": "44772f35a44bec7101f501e24858b67a4c5f9e45", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=fce687f8769fbad7fba74cf9adb985dd5369df01", "patch": "@@ -42,6 +42,7 @@ extern void debug_end_source_file\tPARAMS ((unsigned));\n extern void debug_define\t\tPARAMS ((unsigned, const char *));\n extern void debug_undef\t\t\tPARAMS ((unsigned, const char *));\n extern int debug_ignore_block\t\tPARAMS ((union tree_node *));\n+extern const char *trim_filename\tPARAMS ((const char *));\n extern void internal_error\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t       ATTRIBUTE_PRINTF_1\n \t\t\t\t\t       ATTRIBUTE_NORETURN;"}, {"sha": "012574ed2445ec9d59ebb9ebab97ebe528728dfa", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce687f8769fbad7fba74cf9adb985dd5369df01/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fce687f8769fbad7fba74cf9adb985dd5369df01", "patch": "@@ -4663,9 +4663,9 @@ tree_check_failed (node, code, file, line, function)\n      int line;\n      const char *function;\n {\n-  error (\"Tree check: expected %s, have %s\",\n-\t tree_code_name[code], tree_code_name[TREE_CODE (node)]);\n-  fancy_abort (file, line, function);\n+  internal_error (\"Tree check: expected %s, have %s in %s, at %s:%d\",\n+\t\t  tree_code_name[code], tree_code_name[TREE_CODE (node)],\n+\t\t  function, trim_filename (file), line);\n }\n \n /* Similar to above, except that we check for a class of tree\n@@ -4679,10 +4679,10 @@ tree_class_check_failed (node, cl, file, line, function)\n      int line;\n      const char *function;\n {\n-  error (\"Tree check: expected class '%c', have '%c' (%s)\",\n-\t cl, TREE_CODE_CLASS (TREE_CODE (node)),\n-\t tree_code_name[TREE_CODE (node)]);\n-  fancy_abort (file, line, function);\n+  internal_error\n+    (\"Tree check: expected class '%c', have '%c' (%s) in %s, at %s:%d\",\n+     cl, TREE_CODE_CLASS (TREE_CODE (node)),\n+     tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n }\n \n #endif /* ENABLE_TREE_CHECKING */"}]}