{"sha": "d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiY2Y0NmNkMDNiY2MzZWJkZDkxMDJlNTMwMjJiNmZiMDMyMDJmNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-11-21T08:03:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-21T08:03:01Z"}, "message": "Incremental updating of inline summaries.\n\n        * ipa-fnsummary.c (ipa_fn_summary::account_size_time): Allow\n\tnegative time in calls summary; correct roundoff errors\n\tleading to negative times.\n\t(ipa_merge_fn_summary_after_inlining): Update calls size time table\n\tif present.\n\t(ipa_update_overall_fn_summary): Add RESET parameter.\n\t* ipa-fnsummary.h (ipa_update_overall_fn_summary): Update prototype.\n\t* ipa-inline-transform.c (inline_call): Enable incremental updates.\n\nFrom-SVN: r278541", "tree": {"sha": "92ffeae1886e53d112d01b1c55ba6c8ba4cdfcc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ffeae1886e53d112d01b1c55ba6c8ba4cdfcc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/comments", "author": null, "committer": null, "parents": [{"sha": "b4b7464b57190287cb1bfc5eb56f63148a508f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b7464b57190287cb1bfc5eb56f63148a508f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b7464b57190287cb1bfc5eb56f63148a508f0c"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "cab81d5e9100879d7c536ddf5f5d660b6e962a01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "patch": "@@ -1,3 +1,14 @@\n+2019-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-fnsummary.c (ipa_fn_summary::account_size_time): Allow\n+\tnegative time in calls summary; correct roundoff errors\n+\tleading to negative times.\n+\t(ipa_merge_fn_summary_after_inlining): Update calls size time table\n+\tif present.\n+\t(ipa_update_overall_fn_summary): Add RESET parameter.\n+\t* ipa-fnsummary.h (ipa_update_overall_fn_summary): Update prototype.\n+\t* ipa-inline-transform.c (inline_call): Enable incremental updates.\n+\t\n 2019-11-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-slp.c (vect_schedule_slp_instance): Restore stmt"}, {"sha": "d0bbe71c979066040857d9658f4f12c63201d4e4", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "patch": "@@ -176,7 +176,8 @@ ipa_fn_summary::account_size_time (int size, sreal time,\n   if (!size && time == 0 && table)\n     return;\n \n-  gcc_assert (time >= 0);\n+  /* Only for calls we are unaccounting what we previously recoreded.  */\n+  gcc_checking_assert (time >= 0 || call);\n \n   for (i = 0; vec_safe_iterate (table, i, &e); i++)\n     if (e->exec_predicate == exec_pred\n@@ -226,6 +227,10 @@ ipa_fn_summary::account_size_time (int size, sreal time,\n     {\n       e->size += size;\n       e->time += time;\n+      gcc_checking_assert (e->time >= -1);\n+      /* Tolerate small roundoff issues.  */\n+      if (e->time < 0)\n+\te->time = 0;\n     }\n }\n \n@@ -3897,6 +3902,21 @@ ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge)\n     info->estimated_stack_size = peak;\n \n   inline_update_callee_summaries (edge->callee, es->loop_depth);\n+  if (info->call_size_time_table)\n+    {\n+      int edge_size = 0;\n+      sreal edge_time = 0;\n+\n+      estimate_edge_size_and_time (edge, &edge_size, NULL, &edge_time, vNULL,\n+\t\t      \t\t   vNULL, vNULL, 0);\n+      /* Unaccount size and time of the optimized out call.  */\n+      info->account_size_time (-edge_size, -edge_time,\n+\t \t\t       es->predicate ? *es->predicate : true,\n+\t \t\t       es->predicate ? *es->predicate : true,\n+\t\t\t       true);\n+      /* Account new calls.  */\n+      summarize_calls_size_and_time (edge->callee, info);\n+    }\n \n   /* Free summaries that are not maintained for inline clones/edges.  */\n   ipa_call_summaries->remove (edge);\n@@ -3905,10 +3925,11 @@ ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge)\n }\n \n /* For performance reasons ipa_merge_fn_summary_after_inlining is not updating\n-   overall size and time.  Recompute it.  */\n+   overall size and time.  Recompute it.\n+   If RESET is true also recompute call_time_size_table.  */\n \n void\n-ipa_update_overall_fn_summary (struct cgraph_node *node)\n+ipa_update_overall_fn_summary (struct cgraph_node *node, bool reset)\n {\n   class ipa_fn_summary *info = ipa_fn_summaries->get (node);\n   class ipa_size_summary *size_info = ipa_size_summaries->get (node);\n@@ -3923,7 +3944,8 @@ ipa_update_overall_fn_summary (struct cgraph_node *node)\n       info->time += e->time;\n     }\n   info->min_size = (*info->size_time_table)[0].size;\n-  vec_free (info->call_size_time_table);\n+  if (reset)\n+    vec_free (info->call_size_time_table);\n   if (node->callees || node->indirect_calls)\n     estimate_calls_size_and_time (node, &size_info->size, &info->min_size,\n \t\t\t\t  &info->time, NULL,"}, {"sha": "a50978aacb8914e4c2e3bbc224055c452a7b71c9", "filename": "gcc/ipa-fnsummary.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2Fipa-fnsummary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2Fipa-fnsummary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.h?ref=d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "patch": "@@ -358,7 +358,7 @@ void estimate_ipcp_clone_size_and_time (struct cgraph_node *,\n \t\t\t\t\tint *, sreal *, sreal *,\n \t\t\t\t        ipa_hints *);\n void ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge);\n-void ipa_update_overall_fn_summary (struct cgraph_node *node);\n+void ipa_update_overall_fn_summary (struct cgraph_node *node, bool reset = true);\n void compute_fn_summary (struct cgraph_node *, bool);\n \n "}, {"sha": "e54752191b738ab4db93e4cb4d44c15aa1e70b69", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=d2bcf46cd03bcc3ebdd9102e53022b6fb03202f7", "patch": "@@ -489,9 +489,9 @@ inline_call (struct cgraph_edge *e, bool update_original,\n     mark_all_inlined_calls_cdtor (e->callee);\n   if (opt_for_fn (e->caller->decl, optimize))\n     new_edges_found = ipa_propagate_indirect_call_infos (curr, new_edges);\n-  check_speculations (e->callee, new_edges);\n+  bool removed_p = check_speculations (e->callee, new_edges);\n   if (update_overall_summary)\n-    ipa_update_overall_fn_summary (to);\n+    ipa_update_overall_fn_summary (to, new_edges_found || removed_p);\n   else\n     /* Update self size by the estimate so overall function growth limits\n        work for further inlining into this function.  Before inlining"}]}