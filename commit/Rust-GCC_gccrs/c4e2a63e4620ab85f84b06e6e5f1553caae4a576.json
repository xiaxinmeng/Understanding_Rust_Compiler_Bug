{"sha": "c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "node_id": "C_kwDOANBUbNoAKGM0ZTJhNjNlNDYyMGFiODVmODRiMDZlNmU1ZjE1NTNjYWFlNGE1NzY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T14:12:36Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:42:07Z"}, "message": "RISC-V: Add vwmacc vx C++ api tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vwmacc_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmacc_vx_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccsu_vx_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccu_vx_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vwmaccus_vx_tumu-3.C: New test.", "tree": {"sha": "a5f05fb197071a1bc9f0c3ee3224f3c880cfcd84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f05fb197071a1bc9f0c3ee3224f3c880cfcd84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9"}], "stats": {"total": 7920, "additions": 7920, "deletions": 0}, "files": [{"sha": "8c96d8193148ef4072df7939d6db451b4c885186", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc(vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc(vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc(vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc(vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc(vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc(vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc(vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc(vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc(vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc(vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc(vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc(vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc(vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc(vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc(vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmacc(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6ca77e5f4534a8efd246b078d6ec66ad8b74c3cf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc(vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc(vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc(vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc(vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc(vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc(vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc(vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc(vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc(vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc(vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc(vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc(vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc(vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc(vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc(vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmacc(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "31929a5e57380e46f6e1c6b62123db2e6e514d9e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc(vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc(vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc(vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc(vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc(vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc(vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc(vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc(vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc(vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc(vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc(vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc(vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc(vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc(vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc(vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmacc(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "63b38f8f54176bbab3d4eb438f124bde1154580a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_mu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_mu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_mu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_mu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_mu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_mu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_mu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_mu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_mu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_mu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_mu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_mu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_mu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_mu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_mu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4d10cfbef27c025fc9034aaaeb10e283a04e8e63", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_mu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_mu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_mu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_mu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_mu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_mu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_mu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_mu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_mu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_mu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_mu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_mu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_mu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_mu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_mu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9b623754656fc2dc7c0f7e0f360cf79ec23ecd2f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_mu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_mu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_mu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_mu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_mu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_mu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_mu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_mu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_mu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_mu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_mu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_mu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_mu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_mu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_mu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_mu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "613840a27e89fbe067c323099c14972208cf1a3a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tu(vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tu(vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tu(vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tu(vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tu(vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tu(vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tu(vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tu(vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tu(vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tu(vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tu(vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tu(vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tu(vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tu(vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tu(vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "919b0affc6eef67abec5c6925ffb4132a966be40", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tu(vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tu(vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tu(vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tu(vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tu(vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tu(vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tu(vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tu(vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tu(vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tu(vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tu(vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tu(vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tu(vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tu(vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tu(vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "19bd8064893a5c33bc3269b4fb484b7219240d6a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tu(vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tu(vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tu(vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tu(vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tu(vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tu(vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tu(vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tu(vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tu(vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tu(vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tu(vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tu(vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tu(vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tu(vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tu(vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "09268e0c59d35fb7189b17c4f50c62d384019ff9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tum(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tum(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tum(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tum(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tum(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tum(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tum(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tum(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tum(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tum(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tum(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tum(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tum(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tum(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tum(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4de53bf55610997b873a06629b1468753543ad7f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tum(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tum(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tum(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tum(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tum(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tum(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tum(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tum(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tum(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tum(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tum(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tum(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tum(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tum(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tum(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "27d9ce744df01c02ea0d2826b8d607b23ea85d3a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tum-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tum(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tum(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tum(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tum(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tum(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tum(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tum(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tum(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tum(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tum(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tum(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tum(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tum(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tum(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tum(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a15c82a898681f30983a35ae61ff894e984852a7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tumu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tumu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tumu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tumu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tumu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tumu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tumu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tumu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tumu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tumu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tumu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tumu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tumu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tumu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tumu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6970d619d865a9a91e35d2707fbb0b117e4a6d06", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tumu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tumu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tumu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tumu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tumu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tumu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tumu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tumu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tumu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tumu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tumu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tumu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tumu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tumu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tumu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "20ed158a857adf56bb5d78328a4293e2400b0ec0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmacc_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmacc_vx_tumu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmacc_tumu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmacc_tumu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmacc_tumu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmacc_tumu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmacc_tumu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmacc_tumu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmacc_tumu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmacc_tumu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmacc_tumu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmacc_tumu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmacc_tumu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmacc_tumu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmacc_tumu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmacc_tumu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmacc_tumu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmacc_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmacc\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1028a72e121a1d159b77f1b8d3cea9202045c46f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu(vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu(vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu(vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu(vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu(vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu(vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu(vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu(vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu(vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu(vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu(vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu(vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu(vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu(vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu(vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmaccsu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f0d4bac54840648c20d7962198fda46c429bd62d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu(vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu(vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu(vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu(vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu(vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu(vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu(vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu(vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu(vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu(vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu(vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu(vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu(vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu(vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu(vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmaccsu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "e5a64b1e16dd4d796b9286a3cd7600f628737ca4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu(vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu(vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu(vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu(vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu(vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu(vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu(vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu(vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu(vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu(vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu(vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu(vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu(vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu(vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu(vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmaccsu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "728a8ff9a78262723c1cd8f3af3327d6c1ab72a1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_mu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_mu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_mu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9f07454ae6e2cccc3bbdf6ba4cb2cde9f7b85820", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_mu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_mu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_mu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "51c777ec70fc37347fc0705f0a4cfc8f3185d17c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_mu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_mu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_mu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_mu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_mu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_mu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_mu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_mu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d77c6101bf6e5e753b40cefeace8dcf3342a38cf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tu(vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tu(vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tu(vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tu(vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tu(vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tu(vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tu(vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tu(vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tu(vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tu(vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tu(vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tu(vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tu(vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tu(vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tu(vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "d51692e23cfbacef3050d9aef8df387da64ced21", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tu(vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tu(vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tu(vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tu(vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tu(vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tu(vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tu(vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tu(vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tu(vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tu(vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tu(vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tu(vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tu(vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tu(vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tu(vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "b31e241e7c140571f574353c427b88cc38205ede", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tu(vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tu(vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tu(vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tu(vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tu(vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tu(vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tu(vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tu(vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tu(vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tu(vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tu(vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tu(vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tu(vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tu(vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tu(vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "913f0ec80000ed919d52d6277fca2996ad14c87e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tum(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tum(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tum(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "fe917e2fdabb83400bcaa6c7da8173b6af744564", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tum(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tum(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tum(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4d6c43fbd76b5e40d3c8f66b4095c0f4202114cf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tum-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tum(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tum(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tum(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tum(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tum(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tum(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tum(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "48dc6573ce82f09c0aa0141388259c25424d0413", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tumu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tumu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tumu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "18fc47b3663b6011024e45836b87e819d92821b7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tumu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tumu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tumu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "940cbdde5339e5214115a3dc3a8a43e22ea2fd07", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccsu_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccsu_vx_tumu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint16mf4_t vd,int8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint16mf2_t vd,int8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint16m1_t vd,int8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint16m2_t vd,int8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccsu_tumu(vbool4_t mask,vint16m4_t vd,int8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccsu_tumu(vbool2_t mask,vint16m8_t vd,int8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint32mf2_t vd,int16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint32m1_t vd,int16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint32m2_t vd,int16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint32m4_t vd,int16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccsu_tumu(vbool4_t mask,vint32m8_t vd,int16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccsu_tumu(vbool64_t mask,vint64m1_t vd,int32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccsu_tumu(vbool32_t mask,vint64m2_t vd,int32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccsu_tumu(vbool16_t mask,vint64m4_t vd,int32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccsu_tumu(vbool8_t mask,vint64m8_t vd,int32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccsu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccsu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9cd1cb7b96a4f3d381cc190915ea57aa28818534", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu(vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu(vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu(vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu(vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu(vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu(vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu(vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu(vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu(vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu(vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu(vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu(vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu(vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu(vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu(vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vwmaccu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3b89d1a68ecdd1a4007dd0072847107c004ad293", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu(vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu(vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu(vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu(vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu(vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu(vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu(vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu(vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu(vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu(vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu(vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu(vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu(vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu(vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu(vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vwmaccu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "94bdb41f252e1b43cd0f181c4fb08a03987d3e15", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu(vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu(vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu(vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu(vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu(vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu(vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu(vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu(vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu(vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu(vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu(vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu(vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu(vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu(vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu(vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vwmaccu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2bf0a549d56ff5e1ccb3dde5d4191ed0a30deb16", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_mu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_mu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_mu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "7fd17efb4fe255142b9d2c8ec7fd2da491975c02", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_mu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_mu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_mu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b3cce20e5b937c76662f43b0fa0d59fb49eaf2db", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_mu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_mu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_mu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_mu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_mu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_mu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_mu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_mu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "525dfb87f819b547d37577d0ed92fce38f3e42c1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tu(vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tu(vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tu(vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tu(vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tu(vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tu(vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tu(vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tu(vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tu(vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tu(vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tu(vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tu(vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tu(vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tu(vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tu(vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "8534cfa933acc8bf4858f4e6fe641f3dbee43b8c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tu(vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tu(vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tu(vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tu(vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tu(vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tu(vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tu(vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tu(vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tu(vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tu(vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tu(vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tu(vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tu(vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tu(vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tu(vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "aa660c7c73bfe58cc7c2800bb25630402ad29a2f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tu(vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tu(vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tu(vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tu(vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tu(vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tu(vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tu(vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tu(vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tu(vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tu(vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tu(vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tu(vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tu(vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tu(vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tu(vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "6baf5f20c48888f00964f524c881a5e6069cffe8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tum(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tum(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tum(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "45a0b45e7bd2d9a8b8c193cea182eb80e4fdb087", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tum(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tum(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tum(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "09ba59f8130460d5b87b181fea5beb3e23916d06", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tum-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tum(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tum(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tum(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tum(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tum(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tum(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tum(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c6d88e015e4b95e35d5f440fb01212ad7e099eea", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tumu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tumu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tumu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "aed3750645e26b4fa8646bc773656ad2f81c9898", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tumu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tumu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tumu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "e4c23403f444f62ad99d4e6b4e28213da7890f40", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccu_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccu_vx_tumu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint16mf4_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint16mf4_t vd,uint8_t rs1,vuint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint16mf2_t vd,uint8_t rs1,vuint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint16m1_t vd,uint8_t rs1,vuint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint16m2_t vd,uint8_t rs1,vuint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vwmaccu_tumu(vbool4_t mask,vuint16m4_t vd,uint8_t rs1,vuint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vwmaccu_tumu(vbool2_t mask,vuint16m8_t vd,uint8_t rs1,vuint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint32mf2_t vd,uint16_t rs1,vuint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint32m1_t vd,uint16_t rs1,vuint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint32m2_t vd,uint16_t rs1,vuint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint32m4_t vd,uint16_t rs1,vuint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vwmaccu_tumu(vbool4_t mask,vuint32m8_t vd,uint16_t rs1,vuint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vwmaccu_tumu(vbool64_t mask,vuint64m1_t vd,uint32_t rs1,vuint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vwmaccu_tumu(vbool32_t mask,vuint64m2_t vd,uint32_t rs1,vuint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vwmaccu_tumu(vbool16_t mask,vuint64m4_t vd,uint32_t rs1,vuint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vwmaccu_tumu(vbool8_t mask,vuint64m8_t vd,uint32_t rs1,vuint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccu_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccu\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "cb72cc3cca4f262e75b82e514435dcb88f8f4a78", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus(vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus(vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus(vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus(vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus(vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus(vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus(vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus(vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus(vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus(vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus(vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus(vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus(vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus(vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus(vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmaccus(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4ec61a1dd5b1aa3a689ec117fd37ccdcc78fd92c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus(vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus(vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus(vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus(vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus(vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus(vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus(vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus(vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus(vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus(vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus(vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus(vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus(vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus(vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus(vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmaccus(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1bb984c022aef994e6c26b6f82f8bd1ecdfe736b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus(vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus(vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus(vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus(vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus(vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus(vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus(vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus(vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus(vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus(vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus(vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus(vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus(vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus(vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus(vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vwmaccus(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ed3dd6151ed575f93ab484562be4bfc28958746e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_mu(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_mu(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_mu(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_mu(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_mu(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_mu(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_mu(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_mu(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_mu(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_mu(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_mu(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_mu(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_mu(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_mu(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_mu(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1a40d8819268cb5736017fe0e92ee05c39ea1e97", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_mu(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_mu(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_mu(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_mu(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_mu(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_mu(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_mu(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_mu(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_mu(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_mu(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_mu(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_mu(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_mu(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_mu(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_mu(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "739bafc51e90778633dc30a7c499af4d0b4544fa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_mu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_mu(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_mu(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_mu(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_mu(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_mu(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_mu(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_mu(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_mu(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_mu(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_mu(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_mu(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_mu(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_mu(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_mu(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_mu(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_mu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3b660db523acbc5430d89e8d16f9e06d6e9b9e05", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tu(vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tu(vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tu(vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tu(vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tu(vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tu(vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tu(vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tu(vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tu(vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tu(vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tu(vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tu(vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tu(vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tu(vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tu(vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "a22fe1f788aa31a821380eded772ef8288c78bc9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tu(vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tu(vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tu(vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tu(vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tu(vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tu(vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tu(vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tu(vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tu(vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tu(vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tu(vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tu(vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tu(vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tu(vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tu(vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "4f5b873bd8f3b919d6c8ab1904b18e9f84a80508", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tu(vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tu(vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tu(vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tu(vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tu(vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tu(vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tu(vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tu(vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tu(vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tu(vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tu(vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tu(vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tu(vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tu(vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tu(vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tu(vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "c244edc0964066a869f594684f593250f59f9219", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tum(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tum(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tum(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tum(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tum(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tum(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tum(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tum(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tum(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tum(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tum(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tum(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tum(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tum(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tum(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "51ba824f6202f47a8bc6ec2215bcba95f5c43d9b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tum(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tum(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tum(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tum(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tum(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tum(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tum(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tum(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tum(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tum(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tum(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tum(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tum(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tum(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tum(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "95829b58a594d617e1c1533524f060c517047bbe", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tum-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tum(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tum(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tum(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tum(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tum(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tum(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tum(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tum(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tum(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tum(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tum(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tum(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tum(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tum(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tum(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tum(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f3f1281c741b810bb0a93a6d0d7c4a6d1662ac7d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-1.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tumu(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tumu(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tumu(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "5caced7117ad0c3aadbaec5f25b969442dd0f97f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-2.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tumu(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tumu(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tumu(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "29b7610df851cfbb682868f48ecbd82fe9503ef8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vwmaccus_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e2a63e4620ab85f84b06e6e5f1553caae4a576/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvwmaccus_vx_tumu-3.C?ref=c4e2a63e4620ab85f84b06e6e5f1553caae4a576", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint16mf4_t vd,uint8_t rs1,vint8mf8_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint16mf2_t vd,uint8_t rs1,vint8mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint16m1_t vd,uint8_t rs1,vint8mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint16m2_t vd,uint8_t rs1,vint8m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmaccus_tumu(vbool4_t mask,vint16m4_t vd,uint8_t rs1,vint8m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmaccus_tumu(vbool2_t mask,vint16m8_t vd,uint8_t rs1,vint8m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint32mf2_t vd,uint16_t rs1,vint16mf4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint32m1_t vd,uint16_t rs1,vint16mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint32m2_t vd,uint16_t rs1,vint16m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint32m4_t vd,uint16_t rs1,vint16m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmaccus_tumu(vbool4_t mask,vint32m8_t vd,uint16_t rs1,vint16m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmaccus_tumu(vbool64_t mask,vint64m1_t vd,uint32_t rs1,vint32mf2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmaccus_tumu(vbool32_t mask,vint64m2_t vd,uint32_t rs1,vint32m1_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmaccus_tumu(vbool16_t mask,vint64m4_t vd,uint32_t rs1,vint32m2_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmaccus_tumu(vbool8_t mask,vint64m8_t vd,uint32_t rs1,vint32m4_t vs2,size_t vl)\n+{\n+    return __riscv_vwmaccus_tumu(mask,vd,rs1,vs2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmaccus\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}]}