{"sha": "d154f92719efa355bef3c2a19b62e8c8dd720172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1NGY5MjcxOWVmYTM1NWJlZjNjMmExOWI2MmU4YzhkZDcyMDE3Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-02-28T16:46:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-02-28T16:46:23Z"}, "message": "[multiple changes]\n\n2011-02-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/20_util/ratio/comparisons/comp3.cc: New.\n\n2011-02-28  Marc Glisse  <marc.glisse@normalesup.org>\n\n\tPR libstdc++/42622\n\t* include/std/ratio (ratio_less): Reimplement to never overflow.\n\t* testsuite/20_util/ratio/comparisons/comp2.cc: Extend.\n\nFrom-SVN: r170567", "tree": {"sha": "ba6b532c4a17ae79857e84f545a7642e9b761144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6b532c4a17ae79857e84f545a7642e9b761144"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d154f92719efa355bef3c2a19b62e8c8dd720172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d154f92719efa355bef3c2a19b62e8c8dd720172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d154f92719efa355bef3c2a19b62e8c8dd720172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d154f92719efa355bef3c2a19b62e8c8dd720172/comments", "author": null, "committer": null, "parents": [{"sha": "f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84"}], "stats": {"total": 134, "additions": 128, "deletions": 6}, "files": [{"sha": "91706ad8a6c1c4d9dc17f5851ef6503d98e064fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d154f92719efa355bef3c2a19b62e8c8dd720172", "patch": "@@ -1,3 +1,13 @@\n+2011-02-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/20_util/ratio/comparisons/comp3.cc: New.\n+\n+2011-02-28  Marc Glisse  <marc.glisse@normalesup.org>\n+\n+\tPR libstdc++/42622\n+\t* include/std/ratio (ratio_less): Reimplement to never overflow.\n+\t* testsuite/20_util/ratio/comparisons/comp2.cc: Extend.\n+\n 2011-02-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/18_support/type_info/fundamental.cc: New."}, {"sha": "2b10da7c68886f157a19cec9d9e429bc2c8f0f6f", "filename": "libstdc++-v3/include/std/ratio", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fratio?ref=d154f92719efa355bef3c2a19b62e8c8dd720172", "patch": "@@ -1,6 +1,6 @@\n // ratio -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the \n@@ -274,9 +274,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : integral_constant<bool, !ratio_equal<_R1, _R2>::value>\n     { };\n \n-  template<typename _R1>\n+  // 0 <= _Ri < 1\n+  template<typename _R1, typename _R2>\n+    struct __ratio_less_impl_2;\n+\n+  // _Ri > 0\n+  template<typename _R1, typename _R2, intmax_t __q1 = _R1::num / _R1::den,\n+           intmax_t __q2 = _R2::num / _R2::den, bool __eq = (__q1 == __q2)>\n     struct __ratio_less_impl_1\n-    : integral_constant<bool, _R1::num < _R1::den>\n+    : __ratio_less_impl_2<ratio<_R1::num % _R1::den, _R1::den>,\n+           ratio<_R2::num % _R2::den, _R2::den> >::type\n+    { }; \n+\n+  template<typename _R1, typename _R2, intmax_t __q1, intmax_t __q2>\n+    struct __ratio_less_impl_1<_R1, _R2, __q1, __q2, false>\n+    : integral_constant<bool, (__q1 < __q2) >\n+    { };\n+\n+  template<typename _R1, typename _R2>\n+    struct __ratio_less_impl_2\n+    : __ratio_less_impl_1<ratio<_R2::den, _R2::num>,\n+           ratio<_R1::den, _R1::num> >::type\n+    { }; \n+\n+  template<intmax_t __d1, typename _R2>\n+    struct __ratio_less_impl_2<ratio<0, __d1>, _R2>\n+    : integral_constant<bool, true>\n+    { }; \n+\n+  template<typename _R1, intmax_t __d2>\n+    struct __ratio_less_impl_2<_R1, ratio<0, __d2> >\n+    : integral_constant<bool, false>\n+    { }; \n+\n+  template<intmax_t __d1, intmax_t __d2>\n+    struct __ratio_less_impl_2<ratio<0, __d1>, ratio<0, __d2> >\n+    : integral_constant<bool, false>\n     { }; \n \n   template<typename _R1, typename _R2,\n@@ -286,7 +319,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   bool = (__static_sign<_R1::num>::value == -1\n \t\t   && __static_sign<_R2::num>::value == -1)>\n     struct __ratio_less_impl\n-    : __ratio_less_impl_1<typename ratio_divide<_R1, _R2>::type>::type\n+    : __ratio_less_impl_1<_R1, _R2>::type\n     { };\n \n   template<typename _R1, typename _R2>\n@@ -296,7 +329,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _R1, typename _R2>\n     struct __ratio_less_impl<_R1, _R2, false, true>\n-    : __ratio_less_impl_1<typename ratio_divide<_R2, _R1>::type>::type\n+    : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>,\n+           ratio<-_R1::num, _R1::den> >::type\n     { };\n \n   /// ratio_less"}, {"sha": "20da30cbe253997d413f6eaf0f61e80d9ab03d4c", "filename": "libstdc++-v3/testsuite/20_util/ratio/comparisons/comp2.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp2.cc?ref=d154f92719efa355bef3c2a19b62e8c8dd720172", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,6 +48,9 @@ test01()\n \n   VERIFY( (std::ratio_less<std::ratio<-M, M - 1>,\n            std::ratio<-M, M - 2>>::value == 0) );\n+\n+  VERIFY( (std::ratio_less<std::ratio<M - 2, M - 1>,\n+           std::ratio<M - 1, M>>::value == 1) );\n }\n \n int main()"}, {"sha": "f8c0c486b4a2d2f03c11e40da32a5d60516ee559", "filename": "libstdc++-v3/testsuite/20_util/ratio/comparisons/comp3.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d154f92719efa355bef3c2a19b62e8c8dd720172/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcomparisons%2Fcomp3.cc?ref=d154f92719efa355bef3c2a19b62e8c8dd720172", "patch": "@@ -0,0 +1,75 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+\n+// 2011-02-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ratio>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( (std::ratio_less<std::ratio<59, 29131>,\n+\t                   std::ratio<59, 29129>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<4733, 13>,\n+\t                   std::ratio<4751, 13>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<25703, 25717>,\n+\t                   std::ratio<25733, 25741>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<631, 769>,\n+\t                   std::ratio<673, 773>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<8353, 16903>,\n+\t                   std::ratio<17891, 32099>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<2311, 18701>,\n+\t                   std::ratio<18457, 19571>>::value == 1) );\n+\n+  VERIFY( (std::ratio_less<std::ratio<60, 29132>,\n+\t                   std::ratio<60, 29130>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<4734, 14>,\n+\t                   std::ratio<4752, 14>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<25704, 25718>,\n+\t                   std::ratio<25732, 25742>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<632, 770>,\n+\t                   std::ratio<674, 774>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<8352, 16904>,\n+\t                   std::ratio<17892, 32100>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<2312, 18702>,\n+\t                   std::ratio<18458, 19572>>::value == 1) );\n+\n+  VERIFY( (std::ratio_less<std::ratio<58, 29130>,\n+\t                   std::ratio<58, 29128>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<4732, 12>,\n+\t                   std::ratio<4750, 12>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<25702, 25716>,\n+\t                   std::ratio<25734, 25740>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<630, 768>,\n+\t                   std::ratio<672, 772>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<8354, 16902>,\n+\t                   std::ratio<17890, 32102>>::value == 1) );\n+  VERIFY( (std::ratio_less<std::ratio<2310, 18700>,\n+\t                   std::ratio<18456, 19570>>::value == 1) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}