{"sha": "8a8c2573568aa17ada6163f90991701bc4470976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4YzI1NzM1NjhhYTE3YWRhNjE2M2Y5MDk5MTcwMWJjNDQ3MDk3Ng==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-07-18T02:06:30Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-07-18T02:11:23Z"}, "message": "rs6000: Generate _Decimal128 to _Decimal32 hardware conversion instructions\n\nWe do not currently generate hardware conversion instructions when\nconverting from _Decimal128 to _Decimal32.  There is no one instruction\nthat does the conversion, so we currently call the __dpd_trunctdsd2\nlib function to do the conversion for us.  However, there is a short\nsequence of dfp hardware instructions that will do the conversion\ncorrectly.\n\n2020-07-17  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/92488\n\t* config/rs6000/dfp.md (trunctdsd2): New define_insn.\n\t* config/rs6000/rs6000.md (define_attr \"isa\"): Add p9.\n\t(define_attr \"enabled\"): Handle p9.\n\ngcc/testsuite/\n\tPR target/92488\n\t* gcc.target/powerpc/convert-fp-128.c (bl, drsp, drdpq): Update counts.\n\t(__dpd_trunctdsd2): Make conditional on !hard_dfp.\n\t(__dpd_extendsddd2, __dpd_extendsdtd2, __dpd_truncddsd2,\n\t__dpd_extendddtd2, __dpd_trunctddd2): Use !hard_dfp.\n\t* gcc.target/powerpc/pr92488.c: New test.", "tree": {"sha": "48fc8c8aa8f3469c9d424545ac2345184d52865b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fc8c8aa8f3469c9d424545ac2345184d52865b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8c2573568aa17ada6163f90991701bc4470976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8c2573568aa17ada6163f90991701bc4470976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8c2573568aa17ada6163f90991701bc4470976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8c2573568aa17ada6163f90991701bc4470976/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab660b01c33ece8d73445c26ed2e7ba2471c70db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab660b01c33ece8d73445c26ed2e7ba2471c70db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab660b01c33ece8d73445c26ed2e7ba2471c70db"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "8f822732bacea6effc3e8df6c9146351fdf74d04", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=8a8c2573568aa17ada6163f90991701bc4470976", "patch": "@@ -155,6 +155,19 @@\n   [(set_attr \"type\" \"dfp\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"trunctdsd2\"\n+  [(set (match_operand:SD 0 \"gpc_reg_operand\" \"=d,d\")\n+\t(float_truncate:SD (match_operand:TD 1 \"gpc_reg_operand\" \"d,d\")))\n+   (clobber (match_scratch:TD 2 \"=&d,&d\"))\n+   (clobber (match_scratch:DF 3 \"=&d,&d\"))]\n+  \"TARGET_DFP\"\n+  \"@\n+   mffscdrni %3,7\\;drdpq %2,%1\\;mffscdrn %3,%3\\;drsp %0,%2\n+   mffs %3\\;mtfsfi 7,7,1\\;drdpq %2,%1\\;mtfsf 0xff,%3,1,0\\;drsp %0,%2\"\n+  [(set_attr \"type\" \"dfp\")\n+   (set_attr \"isa\" \"p9,*\")\n+   (set_attr \"length\" \"16,20\")])\n+\n (define_insn \"add<mode>3\"\n   [(set (match_operand:DDTD 0 \"gpc_reg_operand\" \"=d\")\n \t(plus:DDTD (match_operand:DDTD 1 \"gpc_reg_operand\" \"%d\")"}, {"sha": "b3fcb845a389bf827798fb8b97f42148979204be", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8a8c2573568aa17ada6163f90991701bc4470976", "patch": "@@ -322,7 +322,7 @@\n   (const (symbol_ref \"(enum attr_cpu) rs6000_tune\")))\n \n ;; The ISA we implement.\n-(define_attr \"isa\" \"any,p5,p6,p7,p7v,p8v,p9v,p9kf,p9tf,p10\"\n+(define_attr \"isa\" \"any,p5,p6,p7,p7v,p8v,p9,p9v,p9kf,p9tf,p10\"\n   (const_string \"any\"))\n \n ;; Is this alternative enabled for the current CPU/ISA/etc.?\n@@ -351,6 +351,10 @@\n \t  (match_test \"TARGET_P8_VECTOR\"))\n      (const_int 1)\n \n+     (and (eq_attr \"isa\" \"p9\")\n+\t  (match_test \"TARGET_MODULO\"))\n+     (const_int 1)\n+\n      (and (eq_attr \"isa\" \"p9v\")\n \t  (match_test \"TARGET_P9_VECTOR\"))\n      (const_int 1)"}, {"sha": "5b0ef3b0d4923109e5fbd2e5407144c67e211b28", "filename": "gcc/testsuite/gcc.target/powerpc/convert-fp-128.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fconvert-fp-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fconvert-fp-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fconvert-fp-128.c?ref=8a8c2573568aa17ada6163f90991701bc4470976", "patch": "@@ -34,7 +34,7 @@ conv2\n \n /* { dg-final { scan-assembler-times {\\mbl\\M} 24 { target { ! hard_dfp } } } } */\n /* { dg-final { scan-assembler-times {\\mbl\\M} 19 { target { hard_dfp && { ! ppc_float128 } } } } } */\n-/* { dg-final { scan-assembler-times {\\mbl\\M} 31 { target { hard_dfp && { ppc_float128 && { ! ppc_float128_insns } } } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl\\M} 30 { target { hard_dfp && { ppc_float128 && { ! ppc_float128_insns } } } } } } */\n /* { dg-final { scan-assembler-times {\\mbl\\M} 27 { target { hard_dfp && { ppc_float128 && { ppc_float128_insns } } } } } } */\n \n \n@@ -60,20 +60,20 @@ conv2\n /* { dg-final { scan-assembler-times {\\mbl __dpd_extendsddf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_extendsdtf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_extendsdkf\\M} 1 { target { ppc_float128 } } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __dpd_extendsddd2\\M} 1 { target { ! dfp } } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __dpd_extendsdtd2\\M} 1 { target { ! dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl __dpd_extendsddd2\\M} 1 { target { ! hard_dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl __dpd_extendsdtd2\\M} 1 { target { ! hard_dfp } } } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_truncddsf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_truncdddf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_extendddtf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_extendddkf\\M} 1 { target { ppc_float128 } } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __dpd_truncddsd2\\M} 1 { target { ! dfp } } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __dpd_extendddtd2\\M} 1 { target { ! dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl __dpd_truncddsd2\\M} 1 { target { ! hard_dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl __dpd_extendddtd2\\M} 1 { target { ! hard_dfp } } } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_trunctdsf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_trunctddf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_trunctdtf\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mbl __dpd_trunctdkf\\M} 1 { target { ppc_float128 } } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __dpd_trunctdsd2\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mbl __dpd_trunctddd2\\M} 1 { target { ! dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl __dpd_trunctdsd2\\M} 1 { target { ! hard_dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mbl __dpd_trunctddd2\\M} 1 { target { ! hard_dfp } } } } */\n \n \n /* { dg-final { scan-assembler-times {\\mfrsp|xsrsp\\M} 2 { target { ! ppc_float128_insns } } } } */\n@@ -88,8 +88,8 @@ conv2\n /* { dg-final { scan-assembler-times {\\mxxlor|xscpsgndp\\M} 3 { target { ppc_float128_insns } } } } */\n \n \n-/* { dg-final { scan-assembler-times {\\mdrsp\\M} 1 { target { hard_dfp } } } } */\n-/* { dg-final { scan-assembler-times {\\mdrdpq\\M} 1 { target { hard_dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mdrsp\\M} 2 { target { hard_dfp } } } } */\n+/* { dg-final { scan-assembler-times {\\mdrdpq\\M} 2 { target { hard_dfp } } } } */\n /* { dg-final { scan-assembler-times {\\mdctdp\\M} 2 { target { hard_dfp } } } } */\n /* { dg-final { scan-assembler-times {\\mdctqpq\\M} 2 { target { hard_dfp } } } } */\n "}, {"sha": "3ca575531ca398bdbdb5d62c3fd43d571fc3365d", "filename": "gcc/testsuite/gcc.target/powerpc/pr92488.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92488.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8c2573568aa17ada6163f90991701bc4470976/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92488.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr92488.c?ref=8a8c2573568aa17ada6163f90991701bc4470976", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfprt } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+/* Runnable test case for testing _Decimal128 to _Decimal32 rounding.\n+   The value below when rounded to _Decimal64 would result in the value\n+   1.2345675e+00, which if it were rounded to _Decimal32 would result in\n+   the value 1.234568e+00.  However, the correct value when rounding from\n+   _Decimal128  directly to _Decimal32 is 1.234567e+00.  */\n+\n+_Decimal128 td = 1.23456749999999999999e+00dl;\n+_Decimal32 sd_expected = 1.234567e+00df;\n+\n+_Decimal32 __attribute__((noinline))\n+td2sd (_Decimal128 td)\n+{\n+  return td;\n+}\n+\n+int\n+main (void)\n+{\n+  _Decimal32 sd = td2sd (td);\n+  if (sd != sd_expected)\n+    {\n+      union {\n+\t_Decimal32 sd;\n+\tunsigned int i;\n+      } u;\n+\n+      printf (\"cast to _Decimal32 failed:\\n\");\n+      u.sd = sd;\n+      printf (\"  actual   = 0x%x\\n\", u.i);\n+      u.sd = sd_expected;\n+      printf (\"  expected = 0x%x\\n\", u.i);\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}]}