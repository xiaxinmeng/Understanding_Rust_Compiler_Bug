{"sha": "6191e212520651b7e7d3102be7a735677989ad19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5MWUyMTI1MjA2NTFiN2U3ZDMxMDJiZTdhNzM1Njc3OTg5YWQxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T13:58:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-18T13:58:25Z"}, "message": "[multiple changes]\n\n2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): If subprogram is at the\n\tlibrary level, the pre/postconditions must be treated as global\n\tdeclarations, i.e. placed on the Aux_Decl nodes of the compilation unit.\n\t* freeze.adb (Freeze_Expression): If the expression is at library level\n\tthere is no enclosing record to check.\n\n2010-10-18  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.ads (Find_Type_Name): Add documentation.\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Code cleanup because the\n\tpropagation of the class-wide entity is now done by routine\n\tFind_Type_Name to factorize this code.\n\t(Analyze_Private_Extension_Declaration): Handle private type that\n\tcompletes an incomplete type.\n\t(Tag_Mismatch): Add error message for tag mismatch in a private type\n\tdeclaration that completes an incomplete type.\n\t(Find_Type_Name): Handle completion of incomplete type by means of\n\ta private declaration. Generate an error if a tagged incomplete type\n\tis completed by an untagged private type.\n\t* sem_ch7.adb (New_Private_Type): Handle private type that completes an\n\tincomplete type.\n\t* einfo.ads (Full_View): Add documentation.\n\n2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): If the package is\n\ta renaming, generate a reference for it before analyzing the renamed\n\tentity, to prevent spurious warnings.\n\nFrom-SVN: r165636", "tree": {"sha": "49324add06c331189976e682c92938d0ed04c8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49324add06c331189976e682c92938d0ed04c8ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6191e212520651b7e7d3102be7a735677989ad19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6191e212520651b7e7d3102be7a735677989ad19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6191e212520651b7e7d3102be7a735677989ad19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6191e212520651b7e7d3102be7a735677989ad19/comments", "author": null, "committer": null, "parents": [{"sha": "0ae44446c2b6cd370e212fd94fcb8c261f3ef231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae44446c2b6cd370e212fd94fcb8c261f3ef231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae44446c2b6cd370e212fd94fcb8c261f3ef231"}], "stats": {"total": 226, "additions": 187, "deletions": 39}, "files": [{"sha": "057e3d1f2a2549a85c7c1b85bd0f65165aa17dfc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -1,3 +1,34 @@\n+2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): If subprogram is at the\n+\tlibrary level, the pre/postconditions must be treated as global\n+\tdeclarations, i.e. placed on the Aux_Decl nodes of the compilation unit.\n+\t* freeze.adb (Freeze_Expression): If the expression is at library level\n+\tthere is no enclosing record to check.\n+\n+2010-10-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.ads (Find_Type_Name): Add documentation.\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Code cleanup because the\n+\tpropagation of the class-wide entity is now done by routine\n+\tFind_Type_Name to factorize this code.\n+\t(Analyze_Private_Extension_Declaration): Handle private type that\n+\tcompletes an incomplete type.\n+\t(Tag_Mismatch): Add error message for tag mismatch in a private type\n+\tdeclaration that completes an incomplete type.\n+\t(Find_Type_Name): Handle completion of incomplete type by means of\n+\ta private declaration. Generate an error if a tagged incomplete type\n+\tis completed by an untagged private type.\n+\t* sem_ch7.adb (New_Private_Type): Handle private type that completes an\n+\tincomplete type.\n+\t* einfo.ads (Full_View): Add documentation.\n+\n+2010-10-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): If the package is\n+\ta renaming, generate a reference for it before analyzing the renamed\n+\tentity, to prevent spurious warnings.\n+\n 2010-10-18  Jose Ruiz  <ruiz@adacore.com>\n \n \t* adaint.c (__gnat_pthread_setaffinity_np,"}, {"sha": "7a39892bc8426d3f34fbd9c74af897e1efc2eb46", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -1283,7 +1283,10 @@ package Einfo is\n --       Present in all type and subtype entities and in deferred constants.\n --       References the entity for the corresponding full type declaration.\n --       For all types other than private and incomplete types, this field\n---       always contains Empty. See also Underlying_Type.\n+--       always contains Empty. If an incomplete type E1 is completed by a\n+--       private type E2 whose full type declaration entity is E3 then the\n+--       full view of E1 is E2, and the full view of E2 is E3. See also\n+--       Underlying_Type.\n \n --    Generic_Homonym (Node11)\n --       Present in generic packages. The generic homonym is the entity of"}, {"sha": "ca73e8674f15285d1e696f13e2ad38d09cdfd2a9", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -4570,8 +4570,12 @@ package body Freeze is\n             --  The current scope may be that of a constrained component of\n             --  an enclosing record declaration, which is above the current\n             --  scope in the scope stack.\n+            --  If the expression is within a top-level pragma, as for a pre-\n+            --  condition on a library-level subprogram, nothing to do.\n \n-            if Is_Record_Type (Scope (Current_Scope)) then\n+            if not Is_Compilation_Unit (Current_Scope)\n+              and then Is_Record_Type (Scope (Current_Scope))\n+            then\n                Pos := Pos - 1;\n             end if;\n "}, {"sha": "45b61bbb0e4cd496fb0cb1a2a64673927d40c603", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -2112,6 +2112,15 @@ package body Sem_Ch12 is\n       --  Check for a formal package that is a package renaming\n \n       if Present (Renamed_Object (Gen_Unit)) then\n+\n+         --  Indicate that unit is used, before replacing it with renamed\n+         --  entity for use below.\n+\n+         if In_Extended_Main_Source_Unit (N) then\n+            Set_Is_Instantiated (Gen_Unit);\n+            Generate_Reference  (Gen_Unit, N);\n+         end if;\n+\n          Gen_Unit := Renamed_Object (Gen_Unit);\n       end if;\n "}, {"sha": "2132e3c3259222aadc48102c8ed095c73fcb2e24", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -995,11 +995,19 @@ package body Sem_Ch13 is\n                   --  about delay issues, since the pragmas themselves deal\n                   --  with delay of visibility for the expression analysis.\n \n-                  Insert_After (N, Aitem);\n+                  --  If the entity is a library-level subprogram, the pre/\n+                  --  postconditions must be treated as late pragmas.\n+\n+                  if Nkind (Parent (N)) = N_Compilation_Unit then\n+                     Add_Global_Declaration (Aitem);\n+                  else\n+                     Insert_After (N, Aitem);\n+                  end if;\n+\n                   goto Continue;\n                end;\n \n-               --  Aspects currently unimplemented\n+                  --  Aspects currently unimplemented\n \n                when Aspect_Invariant |\n                     Aspect_Predicate =>"}, {"sha": "a54393ac9154b5741e2a1b398b6556f4605dc080", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 105, "deletions": 33, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -2171,24 +2171,10 @@ package body Sem_Ch3 is\n       --  imported through a LIMITED WITH clause, it appears as incomplete\n       --  but has no full view.\n \n-      --  If the incomplete view is tagged, a class_wide type has been\n-      --  created already. Use it for the full view as well, to prevent\n-      --  multiple incompatible class-wide types that may be  created for\n-      --  self-referential anonymous access components.\n-\n       if Ekind (Prev) = E_Incomplete_Type\n         and then Present (Full_View (Prev))\n       then\n          T := Full_View (Prev);\n-\n-         if Is_Tagged_Type (Prev)\n-           and then Present (Class_Wide_Type (Prev))\n-         then\n-            Set_Ekind (T, Ekind (Prev));         --  will be reset later\n-            Set_Class_Wide_Type (T, Class_Wide_Type (Prev));\n-            Set_Etype (Class_Wide_Type (T), T);\n-         end if;\n-\n       else\n          T := Prev;\n       end if;\n@@ -3605,7 +3591,26 @@ package body Sem_Ch3 is\n       end if;\n \n       Generate_Definition (T);\n-      Enter_Name (T);\n+\n+      if Ada_Version < Ada_2012 then\n+         Enter_Name (T);\n+\n+      --  Ada 2012 (AI05-0162): Enter the name in the current scope handling\n+      --  case of private type that completes an incomplete type.\n+\n+      else\n+         declare\n+            Prev : Entity_Id;\n+\n+         begin\n+            Prev := Find_Type_Name (N);\n+\n+            pragma Assert (Prev = T\n+              or else (Ekind (Prev) = E_Incomplete_Type\n+                         and then Present (Full_View (Prev))\n+                         and then Full_View (Prev) = T));\n+         end;\n+      end if;\n \n       Parent_Type := Find_Type_Of_Subtype_Indic (Indic);\n       Parent_Base := Base_Type (Parent_Type);\n@@ -14085,11 +14090,25 @@ package body Sem_Ch3 is\n       procedure Tag_Mismatch is\n       begin\n          if Sloc (Prev) < Sloc (Id) then\n-            Error_Msg_NE\n-              (\"full declaration of } must be a tagged type \", Id, Prev);\n+            if Ada_Version >= Ada_2012\n+              and then Nkind (N) = N_Private_Type_Declaration\n+            then\n+               Error_Msg_NE\n+                 (\"declaration of private } must be a tagged type \", Id, Prev);\n+            else\n+               Error_Msg_NE\n+                 (\"full declaration of } must be a tagged type \", Id, Prev);\n+            end if;\n          else\n-            Error_Msg_NE\n-              (\"full declaration of } must be a tagged type \", Prev, Id);\n+            if Ada_Version >= Ada_2012\n+              and then Nkind (N) = N_Private_Type_Declaration\n+            then\n+               Error_Msg_NE\n+                 (\"declaration of private } must be a tagged type \", Prev, Id);\n+            else\n+               Error_Msg_NE\n+                 (\"full declaration of } must be a tagged type \", Prev, Id);\n+            end if;\n          end if;\n       end Tag_Mismatch;\n \n@@ -14100,21 +14119,35 @@ package body Sem_Ch3 is\n \n       Prev := Current_Entity_In_Scope (Id);\n \n-      if Present (Prev) then\n+      --  New type declaration\n+\n+      if No (Prev) then\n+         Enter_Name (Id);\n+         return Id;\n \n-         --  Previous declaration exists. Error if not incomplete/private case\n-         --  except if previous declaration is implicit, etc. Enter_Name will\n-         --  emit error if appropriate.\n+      --  Previous declaration exists\n \n+      else\n          Prev_Par := Parent (Prev);\n \n+         --  Error if not incomplete/private case except if previous\n+         --  declaration is implicit, etc. Enter_Name will emit error if\n+         --  appropriate.\n+\n          if not Is_Incomplete_Or_Private_Type (Prev) then\n             Enter_Name (Id);\n             New_Id := Id;\n \n+         --  Check invalid completion of private or incomplete type\n+\n          elsif not Nkind_In (N, N_Full_Type_Declaration,\n                                 N_Task_Type_Declaration,\n                                 N_Protected_Type_Declaration)\n+           and then\n+             (Ada_Version < Ada_2012\n+                or else not Is_Incomplete_Type (Prev)\n+                or else not Nkind_In (N, N_Private_Type_Declaration,\n+                                         N_Private_Extension_Declaration))\n          then\n             --  Completion must be a full type declarations (RM 7.3(4))\n \n@@ -14136,7 +14169,11 @@ package body Sem_Ch3 is\n \n          --  Case of full declaration of incomplete type\n \n-         elsif Ekind (Prev) = E_Incomplete_Type then\n+         elsif Ekind (Prev) = E_Incomplete_Type\n+           and then (Ada_Version < Ada_2012\n+                       or else No (Full_View (Prev))\n+                       or else not Is_Private_Type (Full_View (Prev)))\n+         then\n \n             --  Indicate that the incomplete declaration has a matching full\n             --  declaration. The defining occurrence of the incomplete\n@@ -14153,9 +14190,34 @@ package body Sem_Ch3 is\n             Set_Is_Internal (Id);\n             New_Id := Prev;\n \n+            --  If the incomplete view is tagged, a class_wide type has been\n+            --  created already. Use it for the private type as well, in order\n+            --  to prevent multiple incompatible class-wide types that may be\n+            --  created for self-referential anonymous access components.\n+\n+            if Is_Tagged_Type (Prev)\n+              and then Present (Class_Wide_Type (Prev))\n+            then\n+               Set_Ekind (Id, Ekind (Prev));         --  will be reset later\n+               Set_Class_Wide_Type (Id, Class_Wide_Type (Prev));\n+               Set_Etype (Class_Wide_Type (Id), Id);\n+            end if;\n+\n          --  Case of full declaration of private type\n \n          else\n+            --  If the private type was a completion of an incomplete type then\n+            --  update Prev to reference the private type\n+\n+            if Ada_Version >= Ada_2012\n+              and then Ekind (Prev) = E_Incomplete_Type\n+              and then Present (Full_View (Prev))\n+              and then Is_Private_Type (Full_View (Prev))\n+            then\n+               Prev := Full_View (Prev);\n+               Prev_Par := Parent (Prev);\n+            end if;\n+\n             if Nkind (Parent (Prev)) /= N_Private_Extension_Declaration then\n                if Etype (Prev) /= Prev then\n \n@@ -14273,14 +14335,30 @@ package body Sem_Ch3 is\n \n          if Is_Type (Prev)\n            and then (Is_Tagged_Type (Prev)\n-                      or else Present (Class_Wide_Type (Prev)))\n+                       or else Present (Class_Wide_Type (Prev)))\n          then\n+            --  Ada 2012 (AI05-0162): A private type may be the completion of\n+            --  an incomplete type\n+\n+            if Ada_Version >= Ada_2012\n+              and then Is_Incomplete_Type (Prev)\n+              and then Nkind_In (N, N_Private_Type_Declaration,\n+                                    N_Private_Extension_Declaration)\n+            then\n+               --  No need to check private extensions since they are tagged\n+\n+               if Nkind (N) = N_Private_Type_Declaration\n+                 and then not Tagged_Present (N)\n+               then\n+                  Tag_Mismatch;\n+               end if;\n+\n             --  The full declaration is either a tagged type (including\n             --  a synchronized type that implements interfaces) or a\n             --  type extension, otherwise this is an error.\n \n-            if Nkind_In (N, N_Task_Type_Declaration,\n-                            N_Protected_Type_Declaration)\n+            elsif Nkind_In (N, N_Task_Type_Declaration,\n+                               N_Protected_Type_Declaration)\n             then\n                if No (Interface_List (N))\n                  and then not Error_Posted (N)\n@@ -14315,12 +14393,6 @@ package body Sem_Ch3 is\n          end if;\n \n          return New_Id;\n-\n-      else\n-         --  New type declaration\n-\n-         Enter_Name (Id);\n-         return Id;\n       end if;\n    end Find_Type_Name;\n "}, {"sha": "57da53272faff03555c76a5271aeb7420d27358c", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -157,7 +157,10 @@ package Sem_Ch3 is\n    function Find_Type_Name (N : Node_Id) return Entity_Id;\n    --  Enter the identifier in a type definition, or find the entity already\n    --  declared, in the case of the full declaration of an incomplete or\n-   --  private type.\n+   --  private type. If the previous declaration is tagged then the class-wide\n+   --  entity is propagated to the identifier to prevent multiple incompatible\n+   --  class-wide types that may be created for self-referential anonymous\n+   --  access components.\n \n    function Get_Discriminant_Value\n      (Discriminant       : Entity_Id;"}, {"sha": "108b15819c2613c293b558cbdc954c7b1b992f5e", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6191e212520651b7e7d3102be7a735677989ad19/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=6191e212520651b7e7d3102be7a735677989ad19", "patch": "@@ -1919,7 +1919,25 @@ package body Sem_Ch7 is\n \n    procedure New_Private_Type (N : Node_Id; Id : Entity_Id; Def : Node_Id) is\n    begin\n-      Enter_Name (Id);\n+      if Ada_Version < Ada_2012 then\n+         Enter_Name (Id);\n+\n+      --  Ada 2012 (AI05-0162): Enter the name in the current scope handling\n+      --  private type that completes an incomplete type.\n+\n+      else\n+         declare\n+            Prev : Entity_Id;\n+\n+         begin\n+            Prev := Find_Type_Name (N);\n+\n+            pragma Assert (Prev = Id\n+              or else (Ekind (Prev) = E_Incomplete_Type\n+                         and then Present (Full_View (Prev))\n+                         and then Full_View (Prev) = Id));\n+         end;\n+      end if;\n \n       if Limited_Present (Def) then\n          Set_Ekind (Id, E_Limited_Private_Type);"}]}