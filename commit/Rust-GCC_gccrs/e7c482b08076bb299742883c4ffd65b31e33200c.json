{"sha": "e7c482b08076bb299742883c4ffd65b31e33200c", "node_id": "C_kwDOANBUbNoAKGU3YzQ4MmIwODA3NmJiMjk5NzQyODgzYzRmZmQ2NWIzMWUzMzIwMGM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-25T09:49:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-27T09:42:31Z"}, "message": "tree-optimization/105726 - adjust array bound heuristic\n\nThere's heuristic to detect ptr[1].a[...] out of bound accesses\nreasoning that if ptr points to an array of aggregates a trailing\nincomplete array has to have size zero.  The following more\nthoroughly constrains the cases this applies to avoid false\npositive diagnostics.\n\n2022-05-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105726\n\t* gimple-ssa-warn-restrict.cc (builtin_memref::set_base_and_offset):\n\tConstrain array-of-flexarray case more.\n\n\t* g++.dg/warn/Warray-bounds-27.C: New testcase.", "tree": {"sha": "976b5fa154ef456031e361eb4f0645d9c4050da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976b5fa154ef456031e361eb4f0645d9c4050da9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c482b08076bb299742883c4ffd65b31e33200c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c482b08076bb299742883c4ffd65b31e33200c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c482b08076bb299742883c4ffd65b31e33200c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c482b08076bb299742883c4ffd65b31e33200c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f014fcefcd2ad56b31995329820bbd99072eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f014fcefcd2ad56b31995329820bbd99072eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f014fcefcd2ad56b31995329820bbd99072eae"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "734cdd7f5b478588143068b6d0e125e6de1dc531", "filename": "gcc/gimple-ssa-warn-restrict.cc", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c482b08076bb299742883c4ffd65b31e33200c/gcc%2Fgimple-ssa-warn-restrict.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c482b08076bb299742883c4ffd65b31e33200c/gcc%2Fgimple-ssa-warn-restrict.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.cc?ref=e7c482b08076bb299742883c4ffd65b31e33200c", "patch": "@@ -525,7 +525,6 @@ builtin_memref::set_base_and_offset (tree expr)\n     {\n       tree memrefoff = fold_convert (ptrdiff_type_node, TREE_OPERAND (base, 1));\n       extend_offset_range (memrefoff);\n-      base = TREE_OPERAND (base, 0);\n \n       if (refoff != HOST_WIDE_INT_MIN\n       \t  && TREE_CODE (expr) == COMPONENT_REF)\n@@ -538,14 +537,19 @@ builtin_memref::set_base_and_offset (tree expr)\n \t     REFOFF is set to s[1].b - (char*)s.  */\n \t  offset_int off = tree_to_shwi (memrefoff);\n \t  refoff += off;\n-      \t}\n-\n-      if (!integer_zerop (memrefoff))\n-\t/* A non-zero offset into an array of struct with flexible array\n-\t   members implies that the array is empty because there is no\n-\t   way to initialize such a member when it belongs to an array.\n-\t   This must be some sort of a bug.  */\n-\trefsize = 0;\n+\n+\t  if (!integer_zerop (memrefoff)\n+\t      && !COMPLETE_TYPE_P (TREE_TYPE (expr))\n+\t      && multiple_of_p (sizetype, memrefoff,\n+\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (base)), true))\n+\t    /* A non-zero offset into an array of struct with flexible array\n+\t       members implies that the array is empty because there is no\n+\t       way to initialize such a member when it belongs to an array.\n+\t       This must be some sort of a bug.  */\n+\t    refsize = 0;\n+\t}\n+\n+      base = TREE_OPERAND (base, 0);\n     }\n \n   if (TREE_CODE (ref) == COMPONENT_REF)"}, {"sha": "06ce089c4b0e09be50a3dcd3697b56461d75010f", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-27.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c482b08076bb299742883c4ffd65b31e33200c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c482b08076bb299742883c4ffd65b31e33200c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-27.C?ref=e7c482b08076bb299742883c4ffd65b31e33200c", "patch": "@@ -0,0 +1,16 @@\n+// PR105726\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O2 -Warray-bounds\" }\n+\n+#include <array>\n+#include <cstring>\n+\n+struct X {\n+    char pad[4];\n+    std::array<char, 1> mField;\n+};\n+\n+void encode(char* aBuffer, const X& aMessage) {\n+    strncpy(aBuffer, aMessage.mField.data(), 1); // { dg-bogus \"bounds\" }\n+}"}]}