{"sha": "be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzOTk2OTE4ZmE2YWIxMWRhOGUxYTlhNzhlMmZhNTRhZjQyOGYxYQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-28T21:57:47Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-12-28T21:57:47Z"}, "message": "re PR libstdc++/2054 (g++-3 rejects legal code, accepted by g++-2.95.2 (functors))\n\n2001-12-28  Phil Edwards  <pme@gcc.gnu.org>\n\n\tPR libstdc++/2054\n\t* include/bits/stl_algo.h (lower_bound):  Relax concept checks.\n\t* testsuite/ext/concept_checks.cc:  New file.\n\nFrom-SVN: r48351", "tree": {"sha": "33b63e742c51998d4df55546c992e8e6a7b9287a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33b63e742c51998d4df55546c992e8e6a7b9287a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/comments", "author": null, "committer": null, "parents": [{"sha": "2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1bc4ebc98009ceac7a6df0bdafd63ce5cf0d13"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "1b9449dbc71c381a652ea8655160811562dd72da", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "patch": "@@ -1,3 +1,9 @@\n+2001-12-28  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\tPR libstdc++/2054\n+\t* include/bits/stl_algo.h (lower_bound):  Relax concept checks.\n+\t* testsuite/ext/concept_checks.cc:  New file.\n+\n 2001-12-28  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/stl_algo.h (count returning void,"}, {"sha": "d5694b26f19ed2e831856ff688758e7a10d8ef22", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "patch": "@@ -1982,8 +1982,7 @@ __result, __binary_pred, _IterType());\n       \n       // concept requirements\n       __glibcpp_function_requires(_ForwardIteratorConcept<_ForwardIter>)\n-      __glibcpp_function_requires(_SameTypeConcept<_Tp, _ValueType>)\n-      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _Tp, _Tp>)\n+      __glibcpp_function_requires(_BinaryPredicateConcept<_Compare, _ValueType, _Tp>)\n     \n       _DistanceType __len = distance(__first, __last);\n       _DistanceType __half;"}, {"sha": "d07beba32877c23f9198ef040a5941e4912629d3", "filename": "libstdc++-v3/testsuite/ext/concept_checks.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fconcept_checks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3996918fa6ab11da8e1a9a78e2fa54af428f1a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fconcept_checks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fconcept_checks.cc?ref=be3996918fa6ab11da8e1a9a78e2fa54af428f1a", "patch": "@@ -0,0 +1,76 @@\n+// 2001-12-28  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// Concept checking must remain sane.\n+\n+// { dg-options \"-D_GLIBCPP_CONCEPT_CHECKS\" }\n+\n+#include <vector>\n+#include <string>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+\n+// PR libstdc++/2054\n+struct indirectCompare\n+{\n+  indirectCompare(const vector<string>& v) : V(v) {}\n+\n+  bool operator()( int x,  int y) const\n+  {\n+       return V[x] < V[y];\n+  }\n+\n+  bool operator()( int x, const string& a) const\n+  {\n+       return V[x] < a;\n+  }\n+\n+  const vector<string>& V;\n+};\n+\n+void\n+test2054( )\n+{\n+  const int Maxi = 1022;\n+\n+  vector<string> Words(Maxi);\n+  vector<int> Index(Maxi);\n+\n+  for(size_t i = 0; i < Index.size(); i++)\n+     Index[i] = i;\n+\n+  indirectCompare aComparison(Words);\n+\n+  sort(Index.begin(), Index.end(), aComparison);\n+\n+  string SearchTerm;\n+\n+  lower_bound(Index.begin(), Index.end(), SearchTerm, aComparison);\n+}\n+\n+int main()\n+{\n+  test2054();\n+\n+  return 0;\n+}"}]}