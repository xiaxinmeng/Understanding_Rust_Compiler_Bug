{"sha": "05e0971bcf94a481cbfa2731484f024a67dbd4a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlMDk3MWJjZjk0YTQ4MWNiZmEyNzMxNDg0ZjAyNGE2N2RiZDRhNQ==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dhumieres.dominique@free.fr", "date": "2020-07-24T18:07:12Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-07-24T18:47:30Z"}, "message": "PR 93592 - Invalid UP/DOWN rounding with EN descriptor.\n\nThe fix is obvious (I have added a comment). The tests are probably\nan overkill, but it does not hurt.\n\nlibgfortran/ChangeLog:\n\n\tPR fortran/93592\n\t* io/write_float.def (build_float_string): Do not reset\n\t  nbefore for FMT_F and FMT_EN.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/93592\n\t* gfortran.dg/fmt_en.f90: Adjust test.\n\t* gfortran.dg/fmt_en_rd.f90: New test.\n\t* gfortran.dg/fmt_en_rn.f90: New test.\n\t* gfortran.dg/fmt_en_ru.f90: New test.\n\t* gfortran.dg/fmt_en_rz.f90: New test.", "tree": {"sha": "da424021adbb7e0e14a969f638ee6cb42b02cfd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da424021adbb7e0e14a969f638ee6cb42b02cfd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05e0971bcf94a481cbfa2731484f024a67dbd4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e0971bcf94a481cbfa2731484f024a67dbd4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e0971bcf94a481cbfa2731484f024a67dbd4a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e0971bcf94a481cbfa2731484f024a67dbd4a5/comments", "author": null, "committer": null, "parents": [{"sha": "048ba9c02db7ee461abe86a37544fcd4e0cf8858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048ba9c02db7ee461abe86a37544fcd4e0cf8858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048ba9c02db7ee461abe86a37544fcd4e0cf8858"}], "stats": {"total": 749, "additions": 744, "deletions": 5}, "files": [{"sha": "d7e51b3fa2123f62172d5bfdbca1f5bd4b982f0f", "filename": "gcc/testsuite/gfortran.dg/fmt_en.f90", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90?ref=05e0971bcf94a481cbfa2731484f024a67dbd4a5", "patch": "@@ -10,7 +10,6 @@ program pr60128\n     integer :: n_tst = 0, n_cnt = 0, n_skip = 0\n     character(len=20) :: s, s1\n \n-    open (unit = 10, file = 'fmt_en.res')\n !   Check that the default rounding mode is to nearest and to even on tie.\n     do i=1,size(real_kinds)\n       if (i == 1) then\n@@ -149,8 +148,7 @@ program pr60128\n \n     ! print *, n_tst, n_cnt, n_skip\n     if (n_cnt /= 0) STOP 1\n-    if (all(.not. l_skip)) write (10, *) \"All kinds rounded to nearest\"\n-    close (10)\n+    if (all(.not. l_skip)) print *, \"All kinds rounded to nearest\"\n \n contains\n     subroutine checkfmt(fmt, x, cmp)\n@@ -182,4 +180,4 @@ subroutine checkfmt(fmt, x, cmp)\n         \n     end subroutine\n end program\n-! { dg-final { scan-file fmt_en.res \"All kinds rounded to nearest\" { xfail hppa*-*-hpux* } } }\n+! { dg-output \"All kinds rounded to nearest\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } }"}, {"sha": "ea914e0901cb914a77f2957e7e29d05c1d27f9e6", "filename": "gcc/testsuite/gfortran.dg/fmt_en_rd.f90", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rd.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rd.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rd.f90?ref=05e0971bcf94a481cbfa2731484f024a67dbd4a5", "patch": "@@ -0,0 +1,185 @@\n+! { dg-do run }\n+! PR60128 Invalid outputs with EN descriptors\n+! Test case provided by Walt Brainerd.\n+program pr60128\n+use ISO_FORTRAN_ENV\n+    implicit none\n+    integer, parameter :: j(size(real_kinds)+4)=[REAL_KINDS, [4, 4, 4, 4]]\n+    logical :: l_skip(4) = .false.\n+    integer :: i\n+    integer :: n_tst = 0, n_cnt = 0, n_skip = 0\n+    character(len=20,kind=4) :: s, s1\n+\n+!   Check that the default rounding mode is to nearest and to even on tie.\n+    do i=1,size(real_kinds)\n+      if (i == 1) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(1)), &\n+                                  real(9.49999905,kind=j(1)),  &\n+                                  real(9.5,kind=j(1)), real(8.5,kind=j(1))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(1)), &\n+                                       real(98765.0,kind=j(1))\n+      else if (i == 2) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(2)), &\n+                                  real(9.49999905,kind=j(2)),  &\n+                                  real(9.5,kind=j(2)), real(8.5,kind=j(2))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(2)), &\n+                                       real(98765.0,kind=j(2))\n+      else if (i == 3) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(3)), &\n+                                  real(9.49999905,kind=j(3)),  &\n+                                  real(9.5,kind=j(3)), real(8.5,kind=j(3))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(3)), &\n+                                       real(98765.0,kind=j(3))\n+      else if (i == 4) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(4)), &\n+                                  real(9.49999905,kind=j(4)),  &\n+                                  real(9.5,kind=j(4)), real(8.5,kind=j(4))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(4)), &\n+                                       real(98765.0,kind=j(4))\n+      end if\n+      if (s /= 4_'-9.5 9.5 10.  8.' .or. s1 /= 4_' 987.4E+03 98.76E+03') then\n+        l_skip(i) = .true.\n+        print \"('Unsupported rounding for real(',i0,')')\", j(i)\n+      end if\n+    end do\n+        \n+\n+! Original test.\n+    call checkfmt(\"(en15.2)\", -.44444,    4_\"    -444.44E-03\")\n+\n+! Test for the bug in comment 6.\n+    call checkfmt(\"(rd,en15.0)\", 1.0,        4_\"         1.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 1.00000012, 4_\"         1.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 0.99999994, 4_\"       999.E-03\")\n+    call checkfmt(\"(rd,en15.0)\", 10.0,       4_\"        10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 10.0000010, 4_\"        10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 9.99999905, 4_\"         9.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 100.0,      4_\"       100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 100.000008, 4_\"       100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 99.9999924, 4_\"        99.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 1000.0,     4_\"         1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", 1000.00006, 4_\"         1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", 999.999939, 4_\"       999.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 9.5,        4_\"         9.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 9.50000095, 4_\"         9.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 9.49999905, 4_\"         9.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 99.5,       4_\"        99.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 99.5000076, 4_\"        99.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 99.4999924, 4_\"        99.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 999.5,      4_\"       999.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 999.500061, 4_\"       999.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 999.499939, 4_\"       999.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", 9500.0,     4_\"         9.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", 9500.00098, 4_\"         9.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", 9499.99902, 4_\"         9.E+03\")\n+    call checkfmt(\"(rd,en15.1)\", 9950.0,     4_\"        9.9E+03\")\n+    call checkfmt(\"(rd,en15.2)\", 9995.0,     4_\"       9.99E+03\")\n+    call checkfmt(\"(rd,en15.3)\", 9999.5,     4_\"      9.999E+03\")\n+    call checkfmt(\"(rd,en15.1)\", 9.5,        4_\"        9.5E+00\")\n+    call checkfmt(\"(rd,en15.1)\", 9.50000095, 4_\"        9.5E+00\")\n+    call checkfmt(\"(rd,en15.1)\", 9.49999905, 4_\"        9.4E+00\")\n+    call checkfmt(\"(rd,en15.1)\", 0.099951,   4_\"       99.9E-03\")\n+    call checkfmt(\"(rd,en15.1)\", 0.009951,   4_\"        9.9E-03\")\n+    call checkfmt(\"(rd,en15.1)\", 0.000999951,4_\"      999.9E-06\")\n+\n+    call checkfmt(\"(rd,en15.0)\", -1.0,        4_\"        -1.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -1.00000012, 4_\"        -2.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -0.99999994, 4_\"        -1.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -10.0,       4_\"       -10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -10.0000010, 4_\"       -11.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -9.99999905, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -100.0,      4_\"      -100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -100.000008, 4_\"      -101.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -99.9999924, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -1000.0,     4_\"        -1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -1000.00006, 4_\"        -2.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -999.999939, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -9.5,        4_\"       -10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -9.50000095, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -9.49999905, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -99.5,       4_\"      -100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -99.5000076, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -99.4999924, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rd,en15.0)\", -999.5,      4_\"        -1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -999.500061, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -999.499939, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -9500.0,     4_\"       -10.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -9500.00098, 4_\"       -10.E+03\")\n+    call checkfmt(\"(rd,en15.0)\", -9499.99902, 4_\"       -10.E+03\")\n+    call checkfmt(\"(rd,en15.1)\", -9950.0,     4_\"      -10.0E+03\")\n+    call checkfmt(\"(rd,en15.2)\", -9995.0,     4_\"     -10.00E+03\")\n+    call checkfmt(\"(rd,en15.3)\", -9999.5,     4_\"    -10.000E+03\")\n+    call checkfmt(\"(rd,en15.1)\", -9.5,        4_\"       -9.5E+00\")\n+    call checkfmt(\"(rd,en15.1)\", -9.50000095, 4_\"       -9.6E+00\")\n+    call checkfmt(\"(rd,en15.1)\", -9.49999905, 4_\"       -9.5E+00\")\n+    call checkfmt(\"(rd,en15.1)\", -0.099951,   4_\"     -100.0E-03\")\n+    call checkfmt(\"(rd,en15.1)\", -0.009951,   4_\"      -10.0E-03\")\n+    call checkfmt(\"(rd,en15.1)\", -0.000999951,4_\"       -1.0E-03\")\n+\n+    call checkfmt(\"(rd,en15.1)\", 987350.,     4_\"      987.3E+03\")\n+    call checkfmt(\"(rd,en15.2)\", 98735.,      4_\"      98.73E+03\")\n+    call checkfmt(\"(rd,en15.3)\", 9873.5,      4_\"      9.873E+03\")\n+    call checkfmt(\"(rd,en15.1)\", 987650.,     4_\"      987.6E+03\")\n+    call checkfmt(\"(rd,en15.2)\", 98765.,      4_\"      98.76E+03\")\n+    call checkfmt(\"(rd,en15.3)\", 9876.5,      4_\"      9.876E+03\")\n+    call checkfmt(\"(rd,en15.1)\", 3.125E-02,   4_\"       31.2E-03\")\n+    call checkfmt(\"(rd,en15.1)\", 9.375E-02,   4_\"       93.7E-03\")\n+    call checkfmt(\"(rd,en15.2)\", 1.5625E-02,  4_\"      15.62E-03\")\n+    call checkfmt(\"(rd,en15.2)\", 4.6875E-02,  4_\"      46.87E-03\")\n+    call checkfmt(\"(rd,en15.3)\", 7.8125E-03,  4_\"      7.812E-03\")\n+    call checkfmt(\"(rd,en15.3)\", 2.34375E-02, 4_\"     23.437E-03\")\n+    call checkfmt(\"(rd,en15.3)\", 9.765625E-04,4_\"    976.562E-06\")\n+    call checkfmt(\"(rd,en15.6)\", 2.9296875E-03,4_\"   2.929687E-03\")\n+\n+    call checkfmt(\"(rd,en15.1)\", -987350.,     4_\"     -987.4E+03\")\n+    call checkfmt(\"(rd,en15.2)\", -98735.,      4_\"     -98.74E+03\")\n+    call checkfmt(\"(rd,en15.3)\", -9873.5,      4_\"     -9.874E+03\")\n+    call checkfmt(\"(rd,en15.1)\", -987650.,     4_\"     -987.7E+03\")\n+    call checkfmt(\"(rd,en15.2)\", -98765.,      4_\"     -98.77E+03\")\n+    call checkfmt(\"(rd,en15.3)\", -9876.5,      4_\"     -9.877E+03\")\n+    call checkfmt(\"(rd,en15.1)\", -3.125E-02,   4_\"      -31.3E-03\")\n+    call checkfmt(\"(rd,en15.1)\", -9.375E-02,   4_\"      -93.8E-03\")\n+    call checkfmt(\"(rd,en15.2)\", -1.5625E-02,  4_\"     -15.63E-03\")\n+    call checkfmt(\"(rd,en15.2)\", -4.6875E-02,  4_\"     -46.88E-03\")\n+    call checkfmt(\"(rd,en15.3)\", -7.8125E-03,  4_\"     -7.813E-03\")\n+    call checkfmt(\"(rd,en15.3)\", -2.34375E-02, 4_\"    -23.438E-03\")\n+    call checkfmt(\"(rd,en15.3)\", -9.765625E-04,4_\"   -976.563E-06\")\n+    call checkfmt(\"(rd,en15.6)\", -2.9296875E-03,4_\"  -2.929688E-03\")\n+\n+    print *, n_tst, n_cnt, n_skip\n+    if (n_cnt /= 0) stop n_cnt\n+    if (all(.not. l_skip)) print *, \"All kinds rounded down\"\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        implicit none\n+        integer :: i\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*, kind=4), intent(in) :: cmp\n+        do i=1,size(real_kinds)\n+          if (l_skip(i)) cycle\n+          if (i == 1) then\n+            write(s, fmt) real(x,kind=j(1))\n+          else if (i == 2) then\n+            write(s, fmt) real(x,kind=j(2))\n+          else if (i == 3) then\n+            write(s, fmt) real(x,kind=j(3))\n+          else if (i == 4) then\n+            write(s, fmt) real(x,kind=j(4))\n+          end if\n+          n_tst = n_tst + 1\n+          if (s /= cmp) then\n+            if (l_skip(i)) then\n+              n_skip = n_skip + 1\n+            else\n+              print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n+              n_cnt = n_cnt + 1\n+            end if\n+          end if\n+        end do\n+        \n+    end subroutine\n+end program\n+! { dg-output \"All kinds rounded down\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } }\n+! { dg-final { cleanup-saved-temps } }"}, {"sha": "b0ada5c672d2e4f7b93a82c2cb5ffce3dbd34d7d", "filename": "gcc/testsuite/gfortran.dg/fmt_en_rn.f90", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rn.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rn.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rn.f90?ref=05e0971bcf94a481cbfa2731484f024a67dbd4a5", "patch": "@@ -0,0 +1,185 @@\n+! { dg-do run }\n+! PR60128 Invalid outputs with EN descriptors\n+! Test case provided by Walt Brainerd.\n+program pr60128\n+use ISO_FORTRAN_ENV\n+    implicit none\n+    integer, parameter :: j(size(real_kinds)+4)=[REAL_KINDS, [4, 4, 4, 4]]\n+    logical :: l_skip(4) = .false.\n+    integer :: i\n+    integer :: n_tst = 0, n_cnt = 0, n_skip = 0\n+    character(len=20,kind=4) :: s, s1\n+\n+!   Check that the default rounding mode is to nearest and to even on tie.\n+    do i=1,size(real_kinds)\n+      if (i == 1) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(1)), &\n+                                  real(9.49999905,kind=j(1)),  &\n+                                  real(9.5,kind=j(1)), real(8.5,kind=j(1))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(1)), &\n+                                       real(98765.0,kind=j(1))\n+      else if (i == 2) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(2)), &\n+                                  real(9.49999905,kind=j(2)),  &\n+                                  real(9.5,kind=j(2)), real(8.5,kind=j(2))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(2)), &\n+                                       real(98765.0,kind=j(2))\n+      else if (i == 3) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(3)), &\n+                                  real(9.49999905,kind=j(3)),  &\n+                                  real(9.5,kind=j(3)), real(8.5,kind=j(3))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(3)), &\n+                                       real(98765.0,kind=j(3))\n+      else if (i == 4) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(4)), &\n+                                  real(9.49999905,kind=j(4)),  &\n+                                  real(9.5,kind=j(4)), real(8.5,kind=j(4))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(4)), &\n+                                       real(98765.0,kind=j(4))\n+      end if\n+      if (s /= 4_'-9.5 9.5 10.  8.' .or. s1 /= 4_' 987.4E+03 98.76E+03') then\n+        l_skip(i) = .true.\n+        print \"('Unsupported rounding for real(',i0,')')\", j(i)\n+      end if\n+    end do\n+        \n+\n+! Original test.\n+    call checkfmt(\"(en15.2)\", -.44444,    4_\"    -444.44E-03\")\n+\n+! Test for the bug in comment 6.\n+    call checkfmt(\"(rn,en15.0)\", 1.0,        4_\"         1.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 1.00000012, 4_\"         1.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 0.99999994, 4_\"         1.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 10.0,       4_\"        10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 10.0000010, 4_\"        10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 9.99999905, 4_\"        10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 100.0,      4_\"       100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 100.000008, 4_\"       100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 99.9999924, 4_\"       100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 1000.0,     4_\"         1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 1000.00006, 4_\"         1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 999.999939, 4_\"         1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 9.5,        4_\"        10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 9.50000095, 4_\"        10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 9.49999905, 4_\"         9.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 99.5,       4_\"       100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 99.5000076, 4_\"       100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 99.4999924, 4_\"        99.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 999.5,      4_\"         1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 999.500061, 4_\"         1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 999.499939, 4_\"       999.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", 9500.0,     4_\"        10.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 9500.00098, 4_\"        10.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", 9499.99902, 4_\"         9.E+03\")\n+    call checkfmt(\"(rn,en15.1)\", 9950.0,     4_\"       10.0E+03\")\n+    call checkfmt(\"(rn,en15.2)\", 9995.0,     4_\"      10.00E+03\")\n+    call checkfmt(\"(rn,en15.3)\", 9999.5,     4_\"     10.000E+03\")\n+    call checkfmt(\"(rn,en15.1)\", 9.5,        4_\"        9.5E+00\")\n+    call checkfmt(\"(rn,en15.1)\", 9.50000095, 4_\"        9.5E+00\")\n+    call checkfmt(\"(rn,en15.1)\", 9.49999905, 4_\"        9.5E+00\")\n+    call checkfmt(\"(rn,en15.1)\", 0.099951,   4_\"      100.0E-03\")\n+    call checkfmt(\"(rn,en15.1)\", 0.009951,   4_\"       10.0E-03\")\n+    call checkfmt(\"(rn,en15.1)\", 0.000999951,4_\"        1.0E-03\")\n+\n+    call checkfmt(\"(rn,en15.0)\", -1.0,        4_\"        -1.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -1.00000012, 4_\"        -1.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -0.99999994, 4_\"        -1.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -10.0,       4_\"       -10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -10.0000010, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -9.99999905, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -100.0,      4_\"      -100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -100.000008, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -99.9999924, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -1000.0,     4_\"        -1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -1000.00006, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -999.999939, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -9.5,        4_\"       -10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -9.50000095, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -9.49999905, 4_\"        -9.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -99.5,       4_\"      -100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -99.5000076, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -99.4999924, 4_\"       -99.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -999.5,      4_\"        -1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -999.500061, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -999.499939, 4_\"      -999.E+00\")\n+    call checkfmt(\"(rn,en15.0)\", -9500.0,     4_\"       -10.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -9500.00098, 4_\"       -10.E+03\")\n+    call checkfmt(\"(rn,en15.0)\", -9499.99902, 4_\"        -9.E+03\")\n+    call checkfmt(\"(rn,en15.1)\", -9950.0,     4_\"      -10.0E+03\")\n+    call checkfmt(\"(rn,en15.2)\", -9995.0,     4_\"     -10.00E+03\")\n+    call checkfmt(\"(rn,en15.3)\", -9999.5,     4_\"    -10.000E+03\")\n+    call checkfmt(\"(rn,en15.1)\", -9.5,        4_\"       -9.5E+00\")\n+    call checkfmt(\"(rn,en15.1)\", -9.50000095, 4_\"       -9.5E+00\")\n+    call checkfmt(\"(rn,en15.1)\", -9.49999905, 4_\"       -9.5E+00\")\n+    call checkfmt(\"(rn,en15.1)\", -0.099951,   4_\"     -100.0E-03\")\n+    call checkfmt(\"(rn,en15.1)\", -0.009951,   4_\"      -10.0E-03\")\n+    call checkfmt(\"(rn,en15.1)\", -0.000999951,4_\"       -1.0E-03\")\n+\n+    call checkfmt(\"(rn,en15.1)\", 987350.,     4_\"      987.4E+03\")\n+    call checkfmt(\"(rn,en15.2)\", 98735.,      4_\"      98.74E+03\")\n+    call checkfmt(\"(rn,en15.3)\", 9873.5,      4_\"      9.874E+03\")\n+    call checkfmt(\"(rn,en15.1)\", 987650.,     4_\"      987.6E+03\")\n+    call checkfmt(\"(rn,en15.2)\", 98765.,      4_\"      98.76E+03\")\n+    call checkfmt(\"(rn,en15.3)\", 9876.5,      4_\"      9.876E+03\")\n+    call checkfmt(\"(rn,en15.1)\", 3.125E-02,   4_\"       31.2E-03\")\n+    call checkfmt(\"(rn,en15.1)\", 9.375E-02,   4_\"       93.8E-03\")\n+    call checkfmt(\"(rn,en15.2)\", 1.5625E-02,  4_\"      15.62E-03\")\n+    call checkfmt(\"(rn,en15.2)\", 4.6875E-02,  4_\"      46.88E-03\")\n+    call checkfmt(\"(rn,en15.3)\", 7.8125E-03,  4_\"      7.812E-03\")\n+    call checkfmt(\"(rn,en15.3)\", 2.34375E-02, 4_\"     23.438E-03\")\n+    call checkfmt(\"(rn,en15.3)\", 9.765625E-04,4_\"    976.562E-06\")\n+    call checkfmt(\"(rn,en15.6)\", 2.9296875E-03,4_\"   2.929688E-03\")\n+\n+    call checkfmt(\"(rn,en15.1)\", -987350.,     4_\"     -987.4E+03\")\n+    call checkfmt(\"(rn,en15.2)\", -98735.,      4_\"     -98.74E+03\")\n+    call checkfmt(\"(rn,en15.3)\", -9873.5,      4_\"     -9.874E+03\")\n+    call checkfmt(\"(rn,en15.1)\", -987650.,     4_\"     -987.6E+03\")\n+    call checkfmt(\"(rn,en15.2)\", -98765.,      4_\"     -98.76E+03\")\n+    call checkfmt(\"(rn,en15.3)\", -9876.5,      4_\"     -9.876E+03\")\n+    call checkfmt(\"(rn,en15.1)\", -3.125E-02,   4_\"      -31.2E-03\")\n+    call checkfmt(\"(rn,en15.1)\", -9.375E-02,   4_\"      -93.8E-03\")\n+    call checkfmt(\"(rn,en15.2)\", -1.5625E-02,  4_\"     -15.62E-03\")\n+    call checkfmt(\"(rn,en15.2)\", -4.6875E-02,  4_\"     -46.88E-03\")\n+    call checkfmt(\"(rn,en15.3)\", -7.8125E-03,  4_\"     -7.812E-03\")\n+    call checkfmt(\"(rn,en15.3)\", -2.34375E-02, 4_\"    -23.438E-03\")\n+    call checkfmt(\"(rn,en15.3)\", -9.765625E-04,4_\"   -976.562E-06\")\n+    call checkfmt(\"(rn,en15.6)\", -2.9296875E-03,4_\"  -2.929688E-03\")\n+\n+    print *, n_tst, n_cnt, n_skip\n+    if (n_cnt /= 0) stop n_cnt\n+    if (all(.not. l_skip)) print *, \"All kinds rounded to nearest\"\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        implicit none\n+        integer :: i\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*, kind=4), intent(in) :: cmp\n+        do i=1,size(real_kinds)\n+          if (l_skip(i)) cycle\n+          if (i == 1) then\n+            write(s, fmt) real(x,kind=j(1))\n+          else if (i == 2) then\n+            write(s, fmt) real(x,kind=j(2))\n+          else if (i == 3) then\n+            write(s, fmt) real(x,kind=j(3))\n+          else if (i == 4) then\n+            write(s, fmt) real(x,kind=j(4))\n+          end if\n+          n_tst = n_tst + 1\n+          if (s /= cmp) then\n+            if (l_skip(i)) then\n+              n_skip = n_skip + 1\n+            else\n+              print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n+              n_cnt = n_cnt + 1\n+            end if\n+          end if\n+        end do\n+        \n+    end subroutine\n+end program\n+! { dg-output \"All kinds rounded to nearest\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } }\n+! { dg-final { cleanup-saved-temps } }"}, {"sha": "7834e2880bd407ea7719a163851b807201ee66ed", "filename": "gcc/testsuite/gfortran.dg/fmt_en_ru.f90", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_ru.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_ru.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_ru.f90?ref=05e0971bcf94a481cbfa2731484f024a67dbd4a5", "patch": "@@ -0,0 +1,185 @@\n+! { dg-do run }\n+! PR60128 Invalid outputs with EN descriptors\n+! Test case provided by Walt Brainerd.\n+program pr60128\n+use ISO_FORTRAN_ENV\n+    implicit none\n+    integer, parameter :: j(size(real_kinds)+4)=[REAL_KINDS, [4, 4, 4, 4]]\n+    logical :: l_skip(4) = .false.\n+    integer :: i\n+    integer :: n_tst = 0, n_cnt = 0, n_skip = 0\n+    character(len=20,kind=4) :: s, s1\n+\n+!   Check that the default rounding mode is to nearest and to even on tie.\n+    do i=1,size(real_kinds)\n+      if (i == 1) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(1)), &\n+                                  real(9.49999905,kind=j(1)),  &\n+                                  real(9.5,kind=j(1)), real(8.5,kind=j(1))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(1)), &\n+                                       real(98765.0,kind=j(1))\n+      else if (i == 2) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(2)), &\n+                                  real(9.49999905,kind=j(2)),  &\n+                                  real(9.5,kind=j(2)), real(8.5,kind=j(2))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(2)), &\n+                                       real(98765.0,kind=j(2))\n+      else if (i == 3) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(3)), &\n+                                  real(9.49999905,kind=j(3)),  &\n+                                  real(9.5,kind=j(3)), real(8.5,kind=j(3))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(3)), &\n+                                       real(98765.0,kind=j(3))\n+      else if (i == 4) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(4)), &\n+                                  real(9.49999905,kind=j(4)),  &\n+                                  real(9.5,kind=j(4)), real(8.5,kind=j(4))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(4)), &\n+                                       real(98765.0,kind=j(4))\n+      end if\n+      if (s /= 4_'-9.5 9.5 10.  8.' .or. s1 /= 4_' 987.4E+03 98.76E+03') then\n+        l_skip(i) = .true.\n+        print \"('Unsupported rounding for real(',i0,')')\", j(i)\n+      end if\n+    end do\n+        \n+\n+! Original test.\n+    call checkfmt(\"(en15.2)\", -.44444,    4_\"    -444.44E-03\")\n+\n+! Test for the bug in comment 6.\n+    call checkfmt(\"(ru,en15.0)\", 1.0,        4_\"         1.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 1.00000012, 4_\"         2.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 0.99999994, 4_\"         1.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 10.0,       4_\"        10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 10.0000010, 4_\"        11.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 9.99999905, 4_\"        10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 100.0,      4_\"       100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 100.000008, 4_\"       101.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 99.9999924, 4_\"       100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 1000.0,     4_\"         1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 1000.00006, 4_\"         2.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 999.999939, 4_\"         1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 9.5,        4_\"        10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 9.50000095, 4_\"        10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 9.49999905, 4_\"        10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 99.5,       4_\"       100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 99.5000076, 4_\"       100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 99.4999924, 4_\"       100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", 999.5,      4_\"         1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 999.500061, 4_\"         1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 999.499939, 4_\"         1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 9500.0,     4_\"        10.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 9500.00098, 4_\"        10.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", 9499.99902, 4_\"        10.E+03\")\n+    call checkfmt(\"(ru,en15.1)\", 9950.0,     4_\"       10.0E+03\")\n+    call checkfmt(\"(ru,en15.2)\", 9995.0,     4_\"      10.00E+03\")\n+    call checkfmt(\"(ru,en15.3)\", 9999.5,     4_\"     10.000E+03\")\n+    call checkfmt(\"(ru,en15.1)\", 9.5,        4_\"        9.5E+00\")\n+    call checkfmt(\"(ru,en15.1)\", 9.50000095, 4_\"        9.6E+00\")\n+    call checkfmt(\"(ru,en15.1)\", 9.49999905, 4_\"        9.5E+00\")\n+    call checkfmt(\"(ru,en15.1)\", 0.099951,   4_\"      100.0E-03\")\n+    call checkfmt(\"(ru,en15.1)\", 0.009951,   4_\"       10.0E-03\")\n+    call checkfmt(\"(ru,en15.1)\", 0.000999951,4_\"        1.0E-03\")\n+\n+    call checkfmt(\"(ru,en15.0)\", -1.0,        4_\"        -1.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -1.00000012, 4_\"        -1.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -0.99999994, 4_\"      -999.E-03\")\n+    call checkfmt(\"(ru,en15.0)\", -10.0,       4_\"       -10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -10.0000010, 4_\"       -10.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -9.99999905, 4_\"        -9.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -100.0,      4_\"      -100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -100.000008, 4_\"      -100.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -99.9999924, 4_\"       -99.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -1000.0,     4_\"        -1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", -1000.00006, 4_\"        -1.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", -999.999939, 4_\"      -999.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -9.5,        4_\"        -9.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -9.50000095, 4_\"        -9.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -9.49999905, 4_\"        -9.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -99.5,       4_\"       -99.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -99.5000076, 4_\"       -99.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -99.4999924, 4_\"       -99.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -999.5,      4_\"      -999.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -999.500061, 4_\"      -999.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -999.499939, 4_\"      -999.E+00\")\n+    call checkfmt(\"(ru,en15.0)\", -9500.0,     4_\"        -9.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", -9500.00098, 4_\"        -9.E+03\")\n+    call checkfmt(\"(ru,en15.0)\", -9499.99902, 4_\"        -9.E+03\")\n+    call checkfmt(\"(ru,en15.1)\", -9950.0,     4_\"       -9.9E+03\")\n+    call checkfmt(\"(ru,en15.2)\", -9995.0,     4_\"      -9.99E+03\")\n+    call checkfmt(\"(ru,en15.3)\", -9999.5,     4_\"     -9.999E+03\")\n+    call checkfmt(\"(ru,en15.1)\", -9.5,        4_\"       -9.5E+00\")\n+    call checkfmt(\"(ru,en15.1)\", -9.50000095, 4_\"       -9.5E+00\")\n+    call checkfmt(\"(ru,en15.1)\", -9.49999905, 4_\"       -9.4E+00\")\n+    call checkfmt(\"(ru,en15.1)\", -0.099951,   4_\"      -99.9E-03\")\n+    call checkfmt(\"(ru,en15.1)\", -0.009951,   4_\"       -9.9E-03\")\n+    call checkfmt(\"(ru,en15.1)\", -0.000999951,4_\"     -999.9E-06\")\n+\n+    call checkfmt(\"(ru,en15.1)\", 987350.,     4_\"      987.4E+03\")\n+    call checkfmt(\"(ru,en15.2)\", 98735.,      4_\"      98.74E+03\")\n+    call checkfmt(\"(ru,en15.3)\", 9873.5,      4_\"      9.874E+03\")\n+    call checkfmt(\"(ru,en15.1)\", 987650.,     4_\"      987.7E+03\")\n+    call checkfmt(\"(ru,en15.2)\", 98765.,      4_\"      98.77E+03\")\n+    call checkfmt(\"(ru,en15.3)\", 9876.5,      4_\"      9.877E+03\")\n+    call checkfmt(\"(ru,en15.1)\", 3.125E-02,   4_\"       31.3E-03\")\n+    call checkfmt(\"(ru,en15.1)\", 9.375E-02,   4_\"       93.8E-03\")\n+    call checkfmt(\"(ru,en15.2)\", 1.5625E-02,  4_\"      15.63E-03\")\n+    call checkfmt(\"(ru,en15.2)\", 4.6875E-02,  4_\"      46.88E-03\")\n+    call checkfmt(\"(ru,en15.3)\", 7.8125E-03,  4_\"      7.813E-03\")\n+    call checkfmt(\"(ru,en15.3)\", 2.34375E-02, 4_\"     23.438E-03\")\n+    call checkfmt(\"(ru,en15.3)\", 9.765625E-04,4_\"    976.563E-06\")\n+    call checkfmt(\"(ru,en15.6)\", 2.9296875E-03,4_\"   2.929688E-03\")\n+\n+    call checkfmt(\"(ru,en15.1)\", -987350.,     4_\"     -987.3E+03\")\n+    call checkfmt(\"(ru,en15.2)\", -98735.,      4_\"     -98.73E+03\")\n+    call checkfmt(\"(ru,en15.3)\", -9873.5,      4_\"     -9.873E+03\")\n+    call checkfmt(\"(ru,en15.1)\", -987650.,     4_\"     -987.6E+03\")\n+    call checkfmt(\"(ru,en15.2)\", -98765.,      4_\"     -98.76E+03\")\n+    call checkfmt(\"(ru,en15.3)\", -9876.5,      4_\"     -9.876E+03\")\n+    call checkfmt(\"(ru,en15.1)\", -3.125E-02,   4_\"      -31.2E-03\")\n+    call checkfmt(\"(ru,en15.1)\", -9.375E-02,   4_\"      -93.7E-03\")\n+    call checkfmt(\"(ru,en15.2)\", -1.5625E-02,  4_\"     -15.62E-03\")\n+    call checkfmt(\"(ru,en15.2)\", -4.6875E-02,  4_\"     -46.87E-03\")\n+    call checkfmt(\"(ru,en15.3)\", -7.8125E-03,  4_\"     -7.812E-03\")\n+    call checkfmt(\"(ru,en15.3)\", -2.34375E-02, 4_\"    -23.437E-03\")\n+    call checkfmt(\"(ru,en15.3)\", -9.765625E-04,4_\"   -976.562E-06\")\n+    call checkfmt(\"(ru,en15.6)\", -2.9296875E-03,4_\"  -2.929687E-03\")\n+\n+    print *, n_tst, n_cnt, n_skip\n+    if (n_cnt /= 0) stop n_cnt\n+    if (all(.not. l_skip)) print *, \"All kinds rounded up\"\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        implicit none\n+        integer :: i\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*, kind=4), intent(in) :: cmp\n+        do i=1,size(real_kinds)\n+          if (l_skip(i)) cycle\n+          if (i == 1) then\n+            write(s, fmt) real(x,kind=j(1))\n+          else if (i == 2) then\n+            write(s, fmt) real(x,kind=j(2))\n+          else if (i == 3) then\n+            write(s, fmt) real(x,kind=j(3))\n+          else if (i == 4) then\n+            write(s, fmt) real(x,kind=j(4))\n+          end if\n+          n_tst = n_tst + 1\n+          if (s /= cmp) then\n+            if (l_skip(i)) then\n+              n_skip = n_skip + 1\n+            else\n+              print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n+              n_cnt = n_cnt + 1\n+            end if\n+          end if\n+        end do\n+        \n+    end subroutine\n+end program\n+! { dg-output \"All kinds rounded up\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } }\n+! { dg-final { cleanup-saved-temps } }"}, {"sha": "c07847cad6d6ce0046a32e0323d66f983736b032", "filename": "gcc/testsuite/gfortran.dg/fmt_en_rz.f90", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rz.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0971bcf94a481cbfa2731484f024a67dbd4a5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rz.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en_rz.f90?ref=05e0971bcf94a481cbfa2731484f024a67dbd4a5", "patch": "@@ -0,0 +1,185 @@\n+! { dg-do run }\n+! PR60128 Invalid outputs with EN descriptors\n+! Test case provided by Walt Brainerd.\n+program pr60128\n+use ISO_FORTRAN_ENV\n+    implicit none\n+    integer, parameter :: j(size(real_kinds)+4)=[REAL_KINDS, [4, 4, 4, 4]]\n+    logical :: l_skip(4) = .false.\n+    integer :: i\n+    integer :: n_tst = 0, n_cnt = 0, n_skip = 0\n+    character(len=20,kind=4) :: s, s1\n+\n+!   Check that the default rounding mode is to nearest and to even on tie.\n+    do i=1,size(real_kinds)\n+      if (i == 1) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(1)), &\n+                                  real(9.49999905,kind=j(1)),  &\n+                                  real(9.5,kind=j(1)), real(8.5,kind=j(1))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(1)), &\n+                                       real(98765.0,kind=j(1))\n+      else if (i == 2) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(2)), &\n+                                  real(9.49999905,kind=j(2)),  &\n+                                  real(9.5,kind=j(2)), real(8.5,kind=j(2))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(2)), &\n+                                       real(98765.0,kind=j(2))\n+      else if (i == 3) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(3)), &\n+                                  real(9.49999905,kind=j(3)),  &\n+                                  real(9.5,kind=j(3)), real(8.5,kind=j(3))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(3)), &\n+                                       real(98765.0,kind=j(3))\n+      else if (i == 4) then\n+        write(s, '(2F4.1,2F4.0)') real(-9.49999905,kind=j(4)), &\n+                                  real(9.49999905,kind=j(4)),  &\n+                                  real(9.5,kind=j(4)), real(8.5,kind=j(4))\n+        write(s1, '(3PE10.3,2PE10.3)') real(987350.,kind=j(4)), &\n+                                       real(98765.0,kind=j(4))\n+      end if\n+      if (s /= 4_'-9.5 9.5 10.  8.' .or. s1 /= 4_' 987.4E+03 98.76E+03') then\n+        l_skip(i) = .true.\n+        print \"('Unsupported rounding for real(',i0,')')\", j(i)\n+      end if\n+    end do\n+        \n+\n+! Original test.\n+    call checkfmt(\"(en15.2)\", -.44444,    4_\"    -444.44E-03\")\n+\n+! Test for the bug in comment 6.\n+    call checkfmt(\"(rz,en15.0)\", 1.0,        4_\"         1.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 1.00000012, 4_\"         1.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 0.99999994, 4_\"       999.E-03\")\n+    call checkfmt(\"(rz,en15.0)\", 10.0,       4_\"        10.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 10.0000010, 4_\"        10.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 9.99999905, 4_\"         9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 100.0,      4_\"       100.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 100.000008, 4_\"       100.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 99.9999924, 4_\"        99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 1000.0,     4_\"         1.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", 1000.00006, 4_\"         1.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", 999.999939, 4_\"       999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 9.5,        4_\"         9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 9.50000095, 4_\"         9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 9.49999905, 4_\"         9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 99.5,       4_\"        99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 99.5000076, 4_\"        99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 99.4999924, 4_\"        99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 999.5,      4_\"       999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 999.500061, 4_\"       999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 999.499939, 4_\"       999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", 9500.0,     4_\"         9.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", 9500.00098, 4_\"         9.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", 9499.99902, 4_\"         9.E+03\")\n+    call checkfmt(\"(rz,en15.1)\", 9950.0,     4_\"        9.9E+03\")\n+    call checkfmt(\"(rz,en15.2)\", 9995.0,     4_\"       9.99E+03\")\n+    call checkfmt(\"(rz,en15.3)\", 9999.5,     4_\"      9.999E+03\")\n+    call checkfmt(\"(rz,en15.1)\", 9.5,        4_\"        9.5E+00\")\n+    call checkfmt(\"(rz,en15.1)\", 9.50000095, 4_\"        9.5E+00\")\n+    call checkfmt(\"(rz,en15.1)\", 9.49999905, 4_\"        9.4E+00\")\n+    call checkfmt(\"(rz,en15.1)\", 0.099951,   4_\"       99.9E-03\")\n+    call checkfmt(\"(rz,en15.1)\", 0.009951,   4_\"        9.9E-03\")\n+    call checkfmt(\"(rz,en15.1)\", 0.000999951,4_\"      999.9E-06\")\n+\n+    call checkfmt(\"(rz,en15.0)\", -1.0,        4_\"        -1.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -1.00000012, 4_\"        -1.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -0.99999994, 4_\"      -999.E-03\")\n+    call checkfmt(\"(rz,en15.0)\", -10.0,       4_\"       -10.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -10.0000010, 4_\"       -10.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -9.99999905, 4_\"        -9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -100.0,      4_\"      -100.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -100.000008, 4_\"      -100.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -99.9999924, 4_\"       -99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -1000.0,     4_\"        -1.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", -1000.00006, 4_\"        -1.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", -999.999939, 4_\"      -999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -9.5,        4_\"        -9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -9.50000095, 4_\"        -9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -9.49999905, 4_\"        -9.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -99.5,       4_\"       -99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -99.5000076, 4_\"       -99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -99.4999924, 4_\"       -99.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -999.5,      4_\"      -999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -999.500061, 4_\"      -999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -999.499939, 4_\"      -999.E+00\")\n+    call checkfmt(\"(rz,en15.0)\", -9500.0,     4_\"        -9.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", -9500.00098, 4_\"        -9.E+03\")\n+    call checkfmt(\"(rz,en15.0)\", -9499.99902, 4_\"        -9.E+03\")\n+    call checkfmt(\"(rz,en15.1)\", -9950.0,     4_\"       -9.9E+03\")\n+    call checkfmt(\"(rz,en15.2)\", -9995.0,     4_\"      -9.99E+03\")\n+    call checkfmt(\"(rz,en15.3)\", -9999.5,     4_\"     -9.999E+03\")\n+    call checkfmt(\"(rz,en15.1)\", -9.5,        4_\"       -9.5E+00\")\n+    call checkfmt(\"(rz,en15.1)\", -9.50000095, 4_\"       -9.5E+00\")\n+    call checkfmt(\"(rz,en15.1)\", -9.49999905, 4_\"       -9.4E+00\")\n+    call checkfmt(\"(rz,en15.1)\", -0.099951,   4_\"      -99.9E-03\")\n+    call checkfmt(\"(rz,en15.1)\", -0.009951,   4_\"       -9.9E-03\")\n+    call checkfmt(\"(rz,en15.1)\", -0.000999951,4_\"     -999.9E-06\")\n+\n+    call checkfmt(\"(rz,en15.1)\", 987350.,     4_\"      987.3E+03\")\n+    call checkfmt(\"(rz,en15.2)\", 98735.,      4_\"      98.73E+03\")\n+    call checkfmt(\"(rz,en15.3)\", 9873.5,      4_\"      9.873E+03\")\n+    call checkfmt(\"(rz,en15.1)\", 987650.,     4_\"      987.6E+03\")\n+    call checkfmt(\"(rz,en15.2)\", 98765.,      4_\"      98.76E+03\")\n+    call checkfmt(\"(rz,en15.3)\", 9876.5,      4_\"      9.876E+03\")\n+    call checkfmt(\"(rz,en15.1)\", 3.125E-02,   4_\"       31.2E-03\")\n+    call checkfmt(\"(rz,en15.1)\", 9.375E-02,   4_\"       93.7E-03\")\n+    call checkfmt(\"(rz,en15.2)\", 1.5625E-02,  4_\"      15.62E-03\")\n+    call checkfmt(\"(rz,en15.2)\", 4.6875E-02,  4_\"      46.87E-03\")\n+    call checkfmt(\"(rz,en15.3)\", 7.8125E-03,  4_\"      7.812E-03\")\n+    call checkfmt(\"(rz,en15.3)\", 2.34375E-02, 4_\"     23.437E-03\")\n+    call checkfmt(\"(rz,en15.3)\", 9.765625E-04,4_\"    976.562E-06\")\n+    call checkfmt(\"(rz,en15.6)\", 2.9296875E-03,4_\"   2.929687E-03\")\n+\n+    call checkfmt(\"(rz,en15.1)\", -987350.,     4_\"     -987.3E+03\")\n+    call checkfmt(\"(rz,en15.2)\", -98735.,      4_\"     -98.73E+03\")\n+    call checkfmt(\"(rz,en15.3)\", -9873.5,      4_\"     -9.873E+03\")\n+    call checkfmt(\"(rz,en15.1)\", -987650.,     4_\"     -987.6E+03\")\n+    call checkfmt(\"(rz,en15.2)\", -98765.,      4_\"     -98.76E+03\")\n+    call checkfmt(\"(rz,en15.3)\", -9876.5,      4_\"     -9.876E+03\")\n+    call checkfmt(\"(rz,en15.1)\", -3.125E-02,   4_\"      -31.2E-03\")\n+    call checkfmt(\"(rz,en15.1)\", -9.375E-02,   4_\"      -93.7E-03\")\n+    call checkfmt(\"(rz,en15.2)\", -1.5625E-02,  4_\"     -15.62E-03\")\n+    call checkfmt(\"(rz,en15.2)\", -4.6875E-02,  4_\"     -46.87E-03\")\n+    call checkfmt(\"(rz,en15.3)\", -7.8125E-03,  4_\"     -7.812E-03\")\n+    call checkfmt(\"(rz,en15.3)\", -2.34375E-02, 4_\"    -23.437E-03\")\n+    call checkfmt(\"(rz,en15.3)\", -9.765625E-04,4_\"   -976.562E-06\")\n+    call checkfmt(\"(rz,en15.6)\", -2.9296875E-03,4_\"  -2.929687E-03\")\n+\n+    print *, n_tst, n_cnt, n_skip\n+    if (n_cnt /= 0) stop n_cnt\n+    if (all(.not. l_skip)) print *, \"All kinds rounded to zero\"\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        implicit none\n+        integer :: i\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*, kind=4), intent(in) :: cmp\n+        do i=1,size(real_kinds)\n+          if (l_skip(i)) cycle\n+          if (i == 1) then\n+            write(s, fmt) real(x,kind=j(1))\n+          else if (i == 2) then\n+            write(s, fmt) real(x,kind=j(2))\n+          else if (i == 3) then\n+            write(s, fmt) real(x,kind=j(3))\n+          else if (i == 4) then\n+            write(s, fmt) real(x,kind=j(4))\n+          end if\n+          n_tst = n_tst + 1\n+          if (s /= cmp) then\n+            if (l_skip(i)) then\n+              n_skip = n_skip + 1\n+            else\n+              print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n+              n_cnt = n_cnt + 1\n+            end if\n+          end if\n+        end do\n+        \n+    end subroutine\n+end program\n+! { dg-output \"All kinds rounded to zero\" { xfail { i?86-*-solaris2.9* hppa*-*-hpux* } } }\n+! { dg-final { cleanup-saved-temps } }"}, {"sha": "3311db3120919383e4cc127745a9ce446860ac29", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e0971bcf94a481cbfa2731484f024a67dbd4a5/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e0971bcf94a481cbfa2731484f024a67dbd4a5/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=05e0971bcf94a481cbfa2731484f024a67dbd4a5", "patch": "@@ -399,7 +399,8 @@ build_float_string (st_parameter_dt *dtp, const fnode *f, char *buffer,\n   updown:\n \n   rchar = '0';\n-  if (ft != FMT_F && w > 0 && d == 0 && p == 0)\n+  /* Do not reset nbefore for FMT_F and FMT_EN.  */\n+  if (ft != FMT_F && ft !=FMT_EN && w > 0 && d == 0 && p == 0)\n     nbefore = 1;\n   /* Scan for trailing zeros to see if we really need to round it.  */\n   for(i = nbefore + nafter; i < ndigits; i++)"}]}