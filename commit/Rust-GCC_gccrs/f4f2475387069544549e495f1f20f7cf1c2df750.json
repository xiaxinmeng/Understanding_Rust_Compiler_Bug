{"sha": "f4f2475387069544549e495f1f20f7cf1c2df750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRmMjQ3NTM4NzA2OTU0NDU0OWU0OTVmMWYyMGY3Y2YxYzJkZjc1MA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-04-28T05:07:47Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-04-28T05:07:47Z"}, "message": "(*): Update calls to start_decl, finish_struct (pass NULLs for attributes).\n\nFrom-SVN: r9528", "tree": {"sha": "d5a87189146bec5837684f7b4e075b53ebdd6f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a87189146bec5837684f7b4e075b53ebdd6f35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4f2475387069544549e495f1f20f7cf1c2df750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f2475387069544549e495f1f20f7cf1c2df750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f2475387069544549e495f1f20f7cf1c2df750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f2475387069544549e495f1f20f7cf1c2df750/comments", "author": null, "committer": null, "parents": [{"sha": "5406e08aa9ff7471dc3f7c3edff7fbb9d6bdac19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5406e08aa9ff7471dc3f7c3edff7fbb9d6bdac19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5406e08aa9ff7471dc3f7c3edff7fbb9d6bdac19"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "f9785f1f3e3e6efad414598b06bb4b1e00a9b57c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4f2475387069544549e495f1f20f7cf1c2df750/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4f2475387069544549e495f1f20f7cf1c2df750/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f4f2475387069544549e495f1f20f7cf1c2df750", "patch": "@@ -601,7 +601,7 @@ define_decl (declarator, declspecs)\n      tree declarator;\n      tree declspecs;\n {\n-  tree decl = start_decl (declarator, declspecs, 0);\n+  tree decl = start_decl (declarator, declspecs, 0, NULLT, NULLT);\n   finish_decl (decl, NULLT, NULLT);\n   return decl;\n }\n@@ -1256,7 +1256,7 @@ objc_add_static_instance (constructor, class_decl)\n   decl_spec = tree_cons (NULLT, class_decl,\n \t\t\t build_tree_list (NULLT,\n \t\t\t\t\t  ridpointers[(int) RID_STATIC]));\n-  decl = start_decl (decl_expr, decl_spec, 1);\n+  decl = start_decl (decl_expr, decl_spec, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n \n   /* Barf!  Make sure this decl will end up at the global binding level.  */\n@@ -1344,7 +1344,7 @@ build_objc_symtab_template ()\n \t\t\t\t    \"defs\");\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_symtab_template, field_decl_chain);\n+  finish_struct (objc_symtab_template, field_decl_chain, NULLT);\n }\n \n /* Create the initial value for the `defs' field of _objc_symtab.\n@@ -1466,7 +1466,8 @@ generate_objc_symtab_decl ()\n   sc_spec = build_tree_list (NULLT, ridpointers[(int) RID_STATIC]);\n \n   UOBJC_SYMBOLS_decl = start_decl (get_identifier (\"_OBJC_SYMBOLS\"),\n-\t\t\t\t   tree_cons (NULLT, objc_symtab_template, sc_spec), 1);\n+\t\t\t\t   tree_cons (NULLT, objc_symtab_template, sc_spec), 1,\n+\t\t\t\t   NULLT, NULLT);\n \n   end_temporary_allocation ();\t/* start_decl trying to be smart about inits */\n   TREE_USED (UOBJC_SYMBOLS_decl) = 1;\n@@ -1580,15 +1581,15 @@ build_module_descriptor ()\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_module_template, field_decl_chain);\n+  finish_struct (objc_module_template, field_decl_chain, NULLT);\n \n   /* create an instance of \"objc_module\" */\n \n   decl_specs = tree_cons (NULLT, objc_module_template,\n \t\t\t  build_tree_list (NULLT, ridpointers[(int) RID_STATIC]));\n \n   UOBJC_MODULES_decl = start_decl (get_identifier (\"_OBJC_MODULES\"),\n-\t\t\t\t   decl_specs, 1);\n+\t\t\t\t   decl_specs, 1, NULLT, NULLT);\n \n   end_temporary_allocation ();\t/* start_decl trying to be smart about inits */\n   DECL_IGNORED_P (UOBJC_MODULES_decl) = 1;\n@@ -1736,7 +1737,7 @@ generate_static_references ()\n       decl_spec = tree_cons (NULLT, build_pointer_type (void_type_node),\n \t\t\t     build_tree_list (NULLT,\n \t\t\t\t\t      ridpointers[(int) RID_STATIC]));\n-      decl = start_decl (expr_decl, decl_spec, 1);\n+      decl = start_decl (expr_decl, decl_spec, 1, NULLT, NULLT);\n       end_temporary_allocation ();\n \n       /* Output {class_name, ...}.  */\n@@ -1772,7 +1773,7 @@ generate_static_references ()\n   decl_spec = tree_cons (NULLT, build_pointer_type (void_type_node),\n \t\t\t build_tree_list (NULLT,\n \t\t\t\t\t  ridpointers[(int) RID_STATIC]));\n-  static_instances_decl = start_decl (expr_decl, decl_spec, 1);\n+  static_instances_decl = start_decl (expr_decl, decl_spec, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n   expr = build_constructor (TREE_TYPE (static_instances_decl),\n \t\t\t    nreverse (decls));\n@@ -1795,7 +1796,7 @@ generate_strings ()\n       sc_spec = tree_cons (NULLT, ridpointers[(int) RID_STATIC], NULLT);\n       decl_specs = tree_cons (NULLT, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULLT);\n-      decl = start_decl (expr_decl, decl_specs, 1);\n+      decl = start_decl (expr_decl, decl_specs, 1, NULLT, NULLT);\n       end_temporary_allocation ();\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\tIDENTIFIER_POINTER (string));\n@@ -1809,7 +1810,7 @@ generate_strings ()\n       sc_spec = tree_cons (NULLT, ridpointers[(int) RID_STATIC], NULLT);\n       decl_specs = tree_cons (NULLT, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULLT);\n-      decl = start_decl (expr_decl, decl_specs, 1);\n+      decl = start_decl (expr_decl, decl_specs, 1, NULLT, NULLT);\n       end_temporary_allocation ();\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\tIDENTIFIER_POINTER (string));\n@@ -1823,7 +1824,7 @@ generate_strings ()\n       sc_spec = tree_cons (NULLT, ridpointers[(int) RID_STATIC], NULLT);\n       decl_specs = tree_cons (NULLT, ridpointers[(int) RID_CHAR], sc_spec);\n       expr_decl = build_nt (ARRAY_REF, DECL_NAME (decl), NULLT);\n-      decl = start_decl (expr_decl, decl_specs, 1);\n+      decl = start_decl (expr_decl, decl_specs, 1, NULLT, NULLT);\n       end_temporary_allocation ();\n       string_expr = my_build_string (IDENTIFIER_LENGTH (string) + 1,\n \t\t\t\tIDENTIFIER_POINTER (string));\n@@ -1937,7 +1938,7 @@ build_selector_translation_table ()\n \n \t  /* the `decl' that is returned from start_decl is the one that we\n \t     forward declared in `build_selector_reference'  */\n-\t  decl = start_decl (var_decl, decl_specs, 1);\n+\t  decl = start_decl (var_decl, decl_specs, 1, NULLT, NULLT);\n \t}\n \n       /* add one for the '\\0' character */\n@@ -2433,7 +2434,7 @@ build_private_template (class)\n \n       ivar_context = build_ivar_chain (class, 0);\n \n-      finish_struct (uprivate_record, ivar_context);\n+      finish_struct (uprivate_record, ivar_context, NULLT);\n \n       CLASS_STATIC_TEMPLATE (class) = uprivate_record;\n \n@@ -2501,7 +2502,7 @@ build_protocol_template ()\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  return finish_struct (template, field_decl_chain);\n+  return finish_struct (template, field_decl_chain, NULLT);\n }\n \n static tree\n@@ -2564,7 +2565,7 @@ build_method_prototype_list_template (list_type, size)\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_ivar_list_record, field_decl_chain);\n+  finish_struct (objc_ivar_list_record, field_decl_chain, NULLT);\n \n   return objc_ivar_list_record;\n }\n@@ -2597,7 +2598,7 @@ build_method_prototype_template ()\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (proto_record, field_decl_chain);\n+  finish_struct (proto_record, field_decl_chain, NULLT);\n \n   return proto_record;\n }\n@@ -2735,7 +2736,7 @@ generate_descriptor_table (type, name, size, list, proto)\n   decl_specs = tree_cons (NULLT, type, sc_spec);\n \n   decl = start_decl (synth_id_with_class_suffix (name, proto),\n-\t\t\t\tdecl_specs, 1);\n+\t\t\t\tdecl_specs, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n \n   initlist = build_tree_list (NULLT, build_int_2 (size, 0));\n@@ -2970,7 +2971,7 @@ generate_protocols ()\n       decl_specs = tree_cons (NULLT, objc_protocol_template, sc_spec);\n \n       decl = start_decl (synth_id_with_class_suffix (\"_OBJC_PROTOCOL\", p),\n-\t\t\t decl_specs, 1);\n+\t\t\t decl_specs, 1, NULLT, NULLT);\n       end_temporary_allocation ();\n \n       protocol_name_expr = add_objc_string (PROTOCOL_NAME (p), class_names);\n@@ -3104,7 +3105,7 @@ build_category_template ()\n ;\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_category_template, field_decl_chain);\n+  finish_struct (objc_category_template, field_decl_chain, NULLT);\n }\n \n /* struct objc_selector {\n@@ -3135,7 +3136,7 @@ build_selector_template ()\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_selector_template, field_decl_chain);\n+  finish_struct (objc_selector_template, field_decl_chain, NULLT);\n }\n \n /* struct objc_class {\n@@ -3267,7 +3268,7 @@ build_class_template ()\n   chainon (field_decl_chain, field_decl);\n \n \n-  finish_struct (objc_class_template, field_decl_chain);\n+  finish_struct (objc_class_template, field_decl_chain, NULLT);\n }\n \n /* Generate appropriate forward declarations for an implementation.  */\n@@ -3403,7 +3404,7 @@ build_super_template ()\n \t\t\t  field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (record, field_decl_chain);\n+  finish_struct (record, field_decl_chain, NULLT);\n \n   /* `struct objc_super *' */\n   super_type = groktypename (build_tree_list (build_tree_list (NULLT, record),\n@@ -3454,7 +3455,7 @@ build_ivar_template ()\n \t\t\t  decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_ivar_record, field_decl_chain);\n+  finish_struct (objc_ivar_record, field_decl_chain, NULLT);\n \n   return objc_ivar_record;\n }\n@@ -3493,7 +3494,7 @@ build_ivar_list_template (list_type, size)\n \t\t\t  field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_ivar_list_record, field_decl_chain);\n+  finish_struct (objc_ivar_list_record, field_decl_chain, NULLT);\n \n   return objc_ivar_list_record;\n }\n@@ -3542,7 +3543,7 @@ build_method_list_template (list_type, size)\n \t\t\t  field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (objc_ivar_list_record, field_decl_chain);\n+  finish_struct (objc_ivar_list_record, field_decl_chain, NULLT);\n \n   return objc_ivar_list_record;\n }\n@@ -3614,7 +3615,7 @@ generate_ivars_list (type, name, size, list)\n   decl_specs = tree_cons (NULLT, type, sc_spec);\n \n   decl = start_decl (synth_id_with_class_suffix (name, implementation_context),\n-\t\t     decl_specs, 1);\n+\t\t     decl_specs, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n \n   initlist = build_tree_list (NULLT, build_int_2 (size, 0));\n@@ -3763,7 +3764,7 @@ build_method_template ()\n   field_decl = grokfield (input_filename, lineno, field_decl, decl_specs, NULLT);\n   chainon (field_decl_chain, field_decl);\n \n-  finish_struct (_SLT_record, field_decl_chain);\n+  finish_struct (_SLT_record, field_decl_chain, NULLT);\n \n   return _SLT_record;\n }\n@@ -3782,7 +3783,7 @@ generate_dispatch_table (type, name, size, list)\n   decl_specs = tree_cons (NULLT, type, sc_spec);\n \n   decl = start_decl (synth_id_with_class_suffix (name, implementation_context),\n-\t\t     decl_specs, 1);\n+\t\t     decl_specs, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n \n   initlist = build_tree_list (NULLT, build_int_2 (0, 0));\n@@ -3936,7 +3937,7 @@ generate_protocol_list (i_or_p)\n \n   expr_decl = build1 (INDIRECT_REF, NULLT, expr_decl);\n \n-  refs_decl = start_decl (expr_decl, decl_specs, 1);\n+  refs_decl = start_decl (expr_decl, decl_specs, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n \n   finish_decl (refs_decl, build_constructor (TREE_TYPE (refs_decl),\n@@ -4148,7 +4149,7 @@ generate_category (cat)\n \n   decl = start_decl (synth_id_with_class_suffix (\"_OBJC_CATEGORY\",\n \t\t\t\t\t\t implementation_context),\n-\t\t     decl_specs, 1);\n+\t\t     decl_specs, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n \n   initlist = build_category_initializer (TREE_TYPE (decl),\n@@ -4230,7 +4231,8 @@ generate_shared_structures ()\n   sc_spec = build_tree_list (NULLT, ridpointers[(int) RID_STATIC]);\n   decl_specs = tree_cons (NULLT, objc_class_template, sc_spec);\n \n-  decl = start_decl (DECL_NAME (UOBJC_METACLASS_decl), decl_specs, 1);\n+  decl = start_decl (DECL_NAME (UOBJC_METACLASS_decl), decl_specs, 1,\n+\t\t     NULLT, NULLT);\n   end_temporary_allocation ();\n \n   initlist\n@@ -4249,7 +4251,8 @@ generate_shared_structures ()\n \n   /* static struct objc_class _OBJC_CLASS_Foo={ ... }; */\n \n-  decl = start_decl (DECL_NAME (UOBJC_CLASS_decl), decl_specs, 1);\n+  decl = start_decl (DECL_NAME (UOBJC_CLASS_decl), decl_specs, 1,\n+\t\t     NULLT, NULLT);\n   end_temporary_allocation ();\n \n   initlist\n@@ -6004,7 +6007,7 @@ continue_class (class)\n \n       if (!TYPE_FIELDS (record))\n \t{\n-\t  finish_struct (record, build_ivar_chain (class, 0));\n+\t  finish_struct (record, build_ivar_chain (class, 0), NULLT);\n \t  CLASS_STATIC_TEMPLATE (class) = record;\n \n \t  /* mark this record as a class template - for static typing */\n@@ -6827,7 +6830,7 @@ add_objc_decls ()\n       UOBJC_SUPER_decl = start_decl (get_identifier (UTAG_SUPER),\n \t\t\t\t     build_tree_list (NULLT,\n \t\t\t\t\t\t      objc_super_template),\n-\t\t\t\t     0);\n+\t\t\t\t     0, NULLT, NULLT);\n \n       finish_decl (UOBJC_SUPER_decl, NULLT, NULLT);\n \n@@ -7815,7 +7818,7 @@ generate_classref_translation_entry (chain)\n \n   /* the `decl' that is returned from start_decl is the one that we\n      forward declared in `build_class_reference'.  */\n-  decl = start_decl (name, decl_specs, 1);\n+  decl = start_decl (name, decl_specs, 1, NULLT, NULLT);\n   end_temporary_allocation ();\n   finish_decl (decl, expr, NULLT);\n   return;"}]}