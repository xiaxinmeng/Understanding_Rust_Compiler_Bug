{"sha": "3fc602a055c3442625a6238df059928681605033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjNjAyYTA1NWMzNDQyNjI1YTYyMzhkZjA1OTkyODY4MTYwNTAzMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-12T23:02:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-12T23:02:45Z"}, "message": "config.gcc (sparcv9-*-solaris2): Default to 32-bit code.\n\n        * config.gcc (sparcv9-*-solaris2): Default to 32-bit code.\n        (sparc*-*-solaris): Clean up header files.\n        * configure.in (AS_SPARC64_FLAG): Error out if can't find it\n        and plan on generating 64-bit code.\n        * toplev.c (decode_g_option): Remove LINKER_DOES_NOT_WORK_WITH_DWARF2.\n        * config/sparc/sol2-64.h: Delete and reuse for default 64-bit code.\n        * config/sparc/sol2-sld-64.h: Rename ...\n        * config/sparc/sol2-bi.h: ... here.  Remove the bits that checked\n        for AS_SPARC64_FLAG not defined.\n        * config/sparc/sol2-gld-bi.h: New.\n        * config/sparc/sol2-sld.h: Remove.\n        * config/sparc/sol26-sld.h: New.\n        * config/sparc/sol2.h: Tidy comments.\n        * doc/install.texi: Document sparc-solaris configury changes.\n\nFrom-SVN: r52251", "tree": {"sha": "382d6ed5de207c7f602d15756e5d3615dc26d066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/382d6ed5de207c7f602d15756e5d3615dc26d066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc602a055c3442625a6238df059928681605033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc602a055c3442625a6238df059928681605033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc602a055c3442625a6238df059928681605033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc602a055c3442625a6238df059928681605033/comments", "author": null, "committer": null, "parents": [{"sha": "2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5"}], "stats": {"total": 244, "additions": 95, "deletions": 149}, "files": [{"sha": "25d865e4fc8de34646c2005fb4dec45bbb5d944d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -1,3 +1,20 @@\n+2002-04-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* config.gcc (sparcv9-*-solaris2): Default to 32-bit code.\n+\t(sparc*-*-solaris): Clean up header files.\n+\t* configure.in (AS_SPARC64_FLAG): Error out if can't find it\n+\tand plan on generating 64-bit code.\n+\t* toplev.c (decode_g_option): Remove LINKER_DOES_NOT_WORK_WITH_DWARF2.\n+\t* config/sparc/sol2-64.h: Delete and reuse for default 64-bit code.\n+\t* config/sparc/sol2-sld-64.h: Rename ...\n+\t* config/sparc/sol2-bi.h: ... here.  Remove the bits that checked\n+\tfor AS_SPARC64_FLAG not defined.\n+\t* config/sparc/sol2-gld-bi.h: New.\n+\t* config/sparc/sol2-sld.h: Remove.\n+\t* config/sparc/sol26-sld.h: New.\n+\t* config/sparc/sol2.h: Tidy comments.\n+\t* doc/install.texi: Document sparc-solaris configury changes.\n+\n 2002-04-12  Richard Henderson  <rth@redhat.com>\n \n \t* recog.c (offsettable_address_p): Match the logic in adjust_address."}, {"sha": "844e79b713a4fc87e268a44067776c39434f4d61", "filename": "gcc/config.gcc", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -3070,12 +3070,10 @@ sparc-*-rtems*|sparc-*-rtemself*)\n \t  thread_file='rtems'\n \tfi\n \t;;\n-sparcv9-*-solaris2* | sparc64-*-solaris2*)\n-\tif test x$gnu_ld = xyes\n-\tthen\n-\t\ttm_file=\"sparc/sol2-sld-64.h sparc/sol2-64.h sparc/sol2-gld.h\"\n-\telse\n-\t\ttm_file=sparc/sol2-sld-64.h\n+sparc64-*-solaris2*)\n+\ttm_file=\"sparc/biarch64.h sparc/sol2-64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-bi.h\"\n+\tif test x$gnu_ld = xyes; then\n+\t\ttm_file=\"${tm_file} sparc/sol2-gld.h sparc/sol2-gld-bi.h\"\n \tfi\n \txm_defines=POSIX\n \ttmake_file=\"sparc/t-sol2 sparc/t-sol2-64 sparc/t-crtfm\"\n@@ -3121,33 +3119,32 @@ sparc-hal-solaris2*)\n         esac\n \tthread_file='solaris'\n         ;;\n-sparc-*-solaris2*)\n-\tif test x$gnu_ld = xyes\n-\tthen\n-\t\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-gld.h\"\n-\telse\n-\t\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-sld.h\"\n+sparc-*-solaris2* | sparcv9-*-solaris2*)\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h\"\n+\tif test x$gnu_ld = xyes; then\n+\t\ttm_file=\"${tm_file} sparc/sol2-gld.h\"\n \tfi\n-\txm_defines=POSIX\n \ttmake_file=\"sparc/t-sol2 sparc/t-crtfm\"\n \tif test x$gnu_ld = xyes; then\n \t\ttmake_file=\"$tmake_file t-slibgcc-elf-ver\"\n \telse\n \t\ttmake_file=\"$tmake_file t-slibgcc-sld\"\n \tfi\n-\textra_parts=\"crt1.o crti.o crtn.o gcrt1.o gmon.o crtbegin.o crtend.o\"\n \tcase $machine in\n-\t*-*-solaris2.[0-6] | *-*-solaris2.[0-6].*) ;;\n-\t*-*-solaris2*)\n-\t\tif test x$gnu_ld = xyes\n-\t\tthen\n-\t\t\ttm_file=\"sparc/sol2-sld-64.h sparc/sol2-64.h sparc/sol2-gld.h\"\n-\t\telse\n-\t\t\ttm_file=\"sparc/sol2-sld-64.h\"\n+\tsparcv9-*)\n+\t\ttm_file=\"sparc/biarch64.h ${tm_file} sparc/sol2-bi.h\"\n+\t\tif test x$gnu_ld = xyes; then\n+\t\t\ttm_file=\"${tm_file} sparc/sol2-gld-bi.h\"\n \t\tfi\n \t\ttmake_file=\"$tmake_file sparc/t-sol2-64\"\n \t\t;;\n+\t*-*-solaris2.[0-6] | *-*-solaris2.[0-6].*)\n+\t\tif test x$gnu_ld = xno; then\n+\t\t\ttm_file=\"${tm_file} sparc/sol26-sld.h\"\n+\t\tfi\n \tesac\n+\txm_defines=POSIX\n+\textra_parts=\"crt1.o crti.o crtn.o gcrt1.o gmon.o crtbegin.o crtend.o\"\n \tcase $machine in\n \t*-*-solaris2.[0-4])\n \t\tfloat_format=i128"}, {"sha": "ccdc8f3f800cc834063ad022b9b1fd17ec885b70", "filename": "gcc/config/sparc/sol2-64.h", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-64.h?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -1,20 +1,7 @@\n-/* Definitions of target machine for GNU compiler, for 64-bit SPARC\n-   running Solaris 2 using the GNU linker.  */\n+/* Definitions of target machine for GNU compiler, for bi-arch SPARC\n+   running Solaris 2, defaulting to 64-bit code generation.  */\n \n-#ifdef LINKER_DOES_NOT_WORK_WITH_DWARF2\n-#undef LINKER_DOES_NOT_WORK_WITH_DWARF2\n-#endif\n-\n-#ifdef AS_SPARC64_FLAG\n-\n-#ifdef LINK_ARCH_SPEC\n-#undef LINK_ARCH_SPEC\n-#endif\n-\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:-m elf32_sparc %(link_arch32)} \\\n-%{m64:-m elf64_sparc %(link_arch64)} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-\n-#endif\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ + \\\n+   MASK_STACK_BIAS + MASK_FPU + MASK_LONG_DOUBLE_128)"}, {"sha": "63a4d667f7fc450b13b270d5bb3c6dab05803222", "filename": "gcc/config/sparc/sol2-bi.h", "status": "renamed", "additions": 6, "deletions": 75, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -1,35 +1,6 @@\n-/* Definitions of target machine for GNU compiler, for 64-bit SPARC\n+/* Definitions of target machine for GNU compiler, for bi-arch SPARC\n    running Solaris 2 using the system linker.  */\n \n-#ifdef AS_SPARC64_FLAG\n-#include \"sparc/biarch64.h\"\n-#endif\n-\n-#include \"sparc/sparc.h\"\n-#include \"dbxelf.h\"\n-#include \"elfos.h\"\n-#include \"svr4.h\"\n-#include \"sparc/sysv4.h\"\n-#include \"sparc/sol2.h\"\n-\n-#ifdef AS_SPARC64_FLAG\n-\n-/* At least up through Solaris 2.6,\n-   the system linker does not work with DWARF or DWARF2,\n-   since it does not have working support for relocations\n-   to unaligned data.  */\n-\n-#define LINKER_DOES_NOT_WORK_WITH_DWARF2\n-\n-/* A 64 bit v9 compiler with stack-bias */\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_v9 || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_V9 + MASK_PTR64 + MASK_64BIT /* + MASK_HARD_QUAD */ + \\\n-   MASK_STACK_BIAS + MASK_FPU + MASK_LONG_DOUBLE_128)\n-#endif\n-\n /* The default code model.  */\n #undef SPARC_DEFAULT_CMODEL\n #define SPARC_DEFAULT_CMODEL CM_MEDANY\n@@ -107,8 +78,6 @@\n %{ansi:/usr/lib/sparcv9/values-Xc.o%s} \\\n %{!ansi:/usr/lib/sparcv9/values-Xa.o%s}\"\n  \n-#ifdef SPARC_BI_ARCH\n-\n #if DEFAULT_ARCH32_P\n #define STARTFILE_ARCH_SPEC \"\\\n %{m32:\" STARTFILE_SPEC32 \"} \\\n@@ -121,13 +90,6 @@\n %{!m32:%{!m64:\" STARTFILE_SPEC64 \"}}\"\n #endif\n \n-#else /* !SPARC_BI_ARCH */\n-\n-/* In this case we define MD_STARTFILE_PREFIX to /usr/lib/sparcv9/ */\n-#define STARTFILE_ARCH_SPEC STARTFILE_SPEC32\n-\n-#endif /* !SPARC_BI_ARCH */\n-\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared: \\\n \t\t\t %{!symbolic: \\\n@@ -138,8 +100,6 @@\n \t\t\tcrti.o%s \" STARTFILE_ARCH_SPEC \" \\\n \t\t\tcrtbegin.o%s\"\n \n-#ifdef SPARC_BI_ARCH\n-\n #undef CPP_CPU_DEFAULT_SPEC\n #define CPP_CPU_DEFAULT_SPEC \\\n (DEFAULT_ARCH32_P ? \"\\\n@@ -295,37 +255,8 @@\n #define MULTILIB_DEFAULTS { \"m64\" }\n #endif\n \n-#else /* !SPARC_BI_ARCH */\n-\n-/*\n- * This should be the same as in sol2-sld.h, except with \"/sparcv9\"\n- * appended to the paths and /usr/ccs/lib is no longer necessary\n- */\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{h*} %{v:-V} \\\n-   %{b} %{Wl,*:%*} \\\n-   %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy %{!mimpure-text:-z text}} \\\n-   %{symbolic:-Bsymbolic -G -dy -z text} \\\n-   %{mcmodel=medlow:-M /usr/lib/ld/sparcv9/map.below4G} \\\n-   %{G:-G} \\\n-   %{YP,*} \\\n-   %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{p:-Y P,/usr/ucblib/sparcv9:/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n-       %{pg:-Y P,/usr/ucblib/sparcv9:/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n-       %{!p:%{!pg:-Y P,/usr/ucblib/sparcv9:/usr/lib/sparcv9}}} \\\n-     -R /usr/ucblib} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{p:-Y P,/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n-       %{pg:-Y P,/usr/lib/libp/sparcv9:/usr/lib/sparcv9} \\\n-       %{!p:%{!pg:-Y P,/usr/lib/sparcv9}}}} \\\n-   %{Qy:} %{!Qn:-Qy}\"\n-   \n-#undef MD_STARTFILE_PREFIX\n-#define MD_STARTFILE_PREFIX \"/usr/lib/sparcv9/\"\n- \n-#endif /* ! SPARC_BI_ARCH */\n-\n-#endif\n+/* We use stabs-in-elf in 32-bit mode, because that is what the native\n+   toolchain uses.  But gdb can't handle truncated 32-bit stabs so we\n+   use dwarf2 in 64-bit mode.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE (TARGET_ARCH32 ? DBX_DEBUG : DWARF2_DEBUG)", "previous_filename": "gcc/config/sparc/sol2-sld-64.h"}, {"sha": "81a1ff2395d16a939a360369abf7c310cac6b838", "filename": "gcc/config/sparc/sol2-gld-bi.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2-gld-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2-gld-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gld-bi.h?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -0,0 +1,9 @@\n+/* Definitions of target machine for GNU compiler, for bi-arch SPARC\n+   running Solaris 2 using the GNU linker.  */\n+\n+#undef LINK_ARCH_SPEC\n+#define LINK_ARCH_SPEC \"\\\n+%{m32:-m elf32_sparc %(link_arch32)} \\\n+%{m64:-m elf64_sparc %(link_arch64)} \\\n+%{!m32:%{!m64:%(link_arch_default)}} \\\n+\""}, {"sha": "3847fae1506042362806b1ac9d8835fb5c823d28", "filename": "gcc/config/sparc/sol2-sld.h", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2Fconfig%2Fsparc%2Fsol2-sld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2Fconfig%2Fsparc%2Fsol2-sld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld.h?ref=2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "patch": "@@ -1,9 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for SPARC running Solaris 2\n-   using the system linker.  */\n-\n-/* At least up through Solaris 2.6,\n-   the system linker does not work with DWARF or DWARF2,\n-   since it does not have working support for relocations\n-   to unaligned data.  */\n-\n-#define LINKER_DOES_NOT_WORK_WITH_DWARF2"}, {"sha": "69ba9f5fc6011552623b3e4bf14bff02c818a5ea", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for SPARC running Solaris 2\n-   Copyright 1992, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001 Free Software Foundation, Inc.\n+   Copyright 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@netcom.com).\n    Additional changes by David V. Henkel-Wallace (gumby@cygnus.com).\n \n@@ -89,12 +89,12 @@ Boston, MA 02111-1307, USA.  */\n /* However it appears that Solaris 2.0 uses the same reg numbering as\n    the old BSD-style system did.  */\n \n-#undef DBX_REGISTER_NUMBER\n /* Same as sparc.h */\n+#undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(REGNO) \\\n   (TARGET_FLAT && (REGNO) == HARD_FRAME_POINTER_REGNUM ? 31 : REGNO)\n \n-/* We use stabs-in-elf for debugging, because that is what the native\n+/* We use stabs-in-elf by default, because that is what the native\n    toolchain uses.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG"}, {"sha": "74b54335011cdd8677a90b8ad4f88f769cccddb8", "filename": "gcc/config/sparc/sol26-sld.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol26-sld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfig%2Fsparc%2Fsol26-sld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol26-sld.h?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -0,0 +1,6 @@\n+/* Up through Solaris 2.6, the system linker does not work with DWARF\n+   or DWARF2, since it does not have working support for relocations\n+   to unaligned data.  */\n+\n+#undef DWARF_DEBUGGING_INFO\n+#undef DWARF2_DEBUGGING_INFO"}, {"sha": "c2c9423dd684f46b5deec6f04d93e3622dbaf902", "filename": "gcc/configure", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -7515,8 +7515,8 @@ EOF\n \n     fi\n \n-    case \"$tm_file\" in\n-    *64*)\n+    case \"$target\" in\n+    sparcv9-* | sparc64-*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n echo \"configure:7522: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n@@ -7546,10 +7546,8 @@ fi\n \n echo \"$ac_t\"\"$gcc_cv_as_flags64\" 1>&6\n \tif test \"x$gcc_cv_as_flags64\" = xno; then\n-\n-\t    tmake_file=`echo \" $tmake_file \" | sed -e 's, sparc/t-sol2-64 , ,' -e 's,^ ,,' -e 's, $,,'`\n-\t    dep_tmake_file=`echo \" $dep_tmake_file \" | sed -e 's, [^ ]*/config/sparc/t-sol2-64 , ,' -e 's,^ ,,' -e 's, $,,'`\n-\n+\t    { echo \"configure: error: Assembler does not support 64-bit compilation.\" 1>&2; exit 1; }\n+\t    exit 1\n \telse\n \t    cat >> confdefs.h <<EOF\n #define AS_SPARC64_FLAG \"$gcc_cv_as_flags64\"\n@@ -7563,7 +7561,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7567: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7565: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7603,7 +7601,7 @@ EOF\n \n   i[34567]86-*-* | x86_64-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7607: checking assembler instructions\" >&5\n+echo \"configure:7605: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7630,7 +7628,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n \n     echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n-echo \"configure:7634: checking assembler GOTOFF in data directives\" >&5\n+echo \"configure:7632: checking assembler GOTOFF in data directives\" >&5\n     gcc_cv_as_gotoff_in_data=no\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n     then\n@@ -7660,7 +7658,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7664: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7662: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7716,7 +7714,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7720: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:7718: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7745,7 +7743,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:7749: checking assembler --gstabs support\" >&5\n+echo \"configure:7747: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7773,7 +7771,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n-echo \"configure:7777: checking linker PT_GNU_EH_FRAME support\" >&5\n+echo \"configure:7775: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -7936,7 +7934,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7940: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7938: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "1a3377377211c17d519bae5c099cc990a5e6f1c1", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -1794,8 +1794,8 @@ EOF\n \t\t[Define if your assembler and linker support unaligned PC relative relocs against hidden symbols.])\n     fi\n \n-    case \"$tm_file\" in\n-    *64*)\n+    case \"$target\" in\n+    sparcv9-* | sparc64-*)\n \tAC_CACHE_CHECK([for 64 bit support in assembler ($gcc_cv_as)],\n \t    gcc_cv_as_flags64, [\n \t\tif test -n \"$gcc_cv_as\"; then\n@@ -1818,10 +1818,8 @@ EOF\n \t\tfi\n \t])\n \tif test \"x$gcc_cv_as_flags64\" = xno; then\n-changequote(, )\n-\t    tmake_file=`echo \" $tmake_file \" | sed -e 's, sparc/t-sol2-64 , ,' -e 's,^ ,,' -e 's, $,,'`\n-\t    dep_tmake_file=`echo \" $dep_tmake_file \" | sed -e 's, [^ ]*/config/sparc/t-sol2-64 , ,' -e 's,^ ,,' -e 's, $,,'`\n-changequote([, ])\n+\t    AC_MSG_ERROR([Assembler does not support 64-bit compilation.])\n+\t    exit 1\n \telse\n \t    AC_DEFINE_UNQUOTED(AS_SPARC64_FLAG, \"$gcc_cv_as_flags64\",\n \t\t\t[Define if the assembler supports 64bit sparc.])"}, {"sha": "990db06af8cf5873df72020b11505f2cb4d5e644", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -3464,6 +3464,18 @@ option instead, which should be safe from those bugs and produce code\n that, unlike full 64-bit code, can still run on non-UltraSPARC\n machines.\n \n+The target tuple @code{sparc-sun-solaris} will be used for \n+configurations in which only 32-bit SPARC binaries may be executed;\n+@code{sparcv9-sun-solaris} will be used when either 32-bit or 64-bit\n+binaries may be executed, but the compiler will produce 32-bit \n+binaries unless the @option{-m64} switch is used; @code{sparc64-sun-solaris}\n+should be used when the compiler should produce 64-bit binaries\n+by default.\n+\n+Unless otherwise specified, @command{configure} will select either\n+@code{sparc} or @code{sparcv9} based on the output of @command{isalist}.\n+It will never select @code{sparc64} by default.\n+\n @html\n </p>\n <hr>"}, {"sha": "3fe01db5b8771b661e4297e362b843cbf45584cb", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc602a055c3442625a6238df059928681605033/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc602a055c3442625a6238df059928681605033/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3fc602a055c3442625a6238df059928681605033", "patch": "@@ -3972,7 +3972,7 @@ ignoring option `%s' due to invalid debug level specification\",\n \n \t      if (da_len > 1 && strncmp (arg, \"gdb\", da_len) == 0)\n \t\t{\n-#if defined (DWARF2_DEBUGGING_INFO) && !defined (LINKER_DOES_NOT_WORK_WITH_DWARF2)\n+#ifdef DWARF2_DEBUGGING_INFO\n \t\t  type = DWARF2_DEBUG;\n #else\n #ifdef DBX_DEBUGGING_INFO"}]}