{"sha": "12fb875f0d6550156c4dfc881edb422a7bd97818", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmYjg3NWYwZDY1NTAxNTZjNGRmYzg4MWVkYjQyMmE3YmQ5NzgxOA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-13T06:53:16Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-13T06:53:16Z"}, "message": "md.texi (vec_cmp@var{m}@var{n}): New item.\n\ngcc/\n\n\t* doc/md.texi (vec_cmp@var{m}@var{n}): New item.\n\t(vec_cmpu@var{m}@var{n}): New item.\n\t(vcond@var{m}@var{n}): Specify comparison is signed.\n\t(vcondu@var{m}@var{n}): New item.\n\t(vcond_mask_@var{m}@var{n}): New item.\n\t(maskload@var{m}@var{n}): New item.\n\t(maskstore@var{m}@var{n}): New item.\n\nFrom-SVN: r230290", "tree": {"sha": "b51d86945765239d7ae96fa8f3b8a95ba8957f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b51d86945765239d7ae96fa8f3b8a95ba8957f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12fb875f0d6550156c4dfc881edb422a7bd97818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12fb875f0d6550156c4dfc881edb422a7bd97818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12fb875f0d6550156c4dfc881edb422a7bd97818", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12fb875f0d6550156c4dfc881edb422a7bd97818/comments", "author": null, "committer": null, "parents": [{"sha": "57e2f6ad9f1af35a539be51006a00436e34923f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e2f6ad9f1af35a539be51006a00436e34923f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e2f6ad9f1af35a539be51006a00436e34923f0"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "915d84355f7208de065dba9261783c1d8851f56f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12fb875f0d6550156c4dfc881edb422a7bd97818/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12fb875f0d6550156c4dfc881edb422a7bd97818/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12fb875f0d6550156c4dfc881edb422a7bd97818", "patch": "@@ -1,3 +1,13 @@\n+2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\t* doc/md.texi (vec_cmp@var{m}@var{n}): New item.\n+\t(vec_cmpu@var{m}@var{n}): New item.\n+\t(vcond@var{m}@var{n}): Specify comparison is signed.\n+\t(vcondu@var{m}@var{n}): New item.\n+\t(vcond_mask_@var{m}@var{n}): New item.\n+\t(maskload@var{m}@var{n}): New item.\n+\t(maskstore@var{m}@var{n}): New item.\n+\n 2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* tree-vect-stmts.c (vectorizable_mask_load_store): Check"}, {"sha": "7fdc9353bfbc721e4ce98855923443dc22403f3d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12fb875f0d6550156c4dfc881edb422a7bd97818/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12fb875f0d6550156c4dfc881edb422a7bd97818/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=12fb875f0d6550156c4dfc881edb422a7bd97818", "patch": "@@ -4749,17 +4749,51 @@ specify field index and operand 0 place to store value into.\n Initialize the vector to given values.  Operand 0 is the vector to initialize\n and operand 1 is parallel containing values for individual fields.\n \n+@cindex @code{vec_cmp@var{m}@var{n}} instruction pattern\n+@item @samp{vec_cmp@var{m}@var{n}}\n+Output a vector comparison.  Operand 0 of mode @var{n} is the destination for\n+predicate in operand 1 which is a signed vector comparison with operands of\n+mode @var{m} in operands 2 and 3.  Predicate is computed by element-wise\n+evaluation of the vector comparison with a truth value of all-ones and a false\n+value of all-zeros.\n+\n+@cindex @code{vec_cmpu@var{m}@var{n}} instruction pattern\n+@item @samp{vec_cmpu@var{m}@var{n}}\n+Similar to @code{vec_cmp@var{m}@var{n}} but perform unsigned vector comparison.\n+\n @cindex @code{vcond@var{m}@var{n}} instruction pattern\n @item @samp{vcond@var{m}@var{n}}\n Output a conditional vector move.  Operand 0 is the destination to\n receive a combination of operand 1 and operand 2, which are of mode @var{m},\n-dependent on the outcome of the predicate in operand 3 which is a\n+dependent on the outcome of the predicate in operand 3 which is a signed\n vector comparison with operands of mode @var{n} in operands 4 and 5.  The\n modes @var{m} and @var{n} should have the same size.  Operand 0\n will be set to the value @var{op1} & @var{msk} | @var{op2} & ~@var{msk}\n where @var{msk} is computed by element-wise evaluation of the vector\n comparison with a truth value of all-ones and a false value of all-zeros.\n \n+@cindex @code{vcondu@var{m}@var{n}} instruction pattern\n+@item @samp{vcondu@var{m}@var{n}}\n+Similar to @code{vcond@var{m}@var{n}} but performs unsigned vector\n+comparison.\n+\n+@cindex @code{vcond_mask_@var{m}@var{n}} instruction pattern\n+@item @samp{vcond_mask_@var{m}@var{n}}\n+Similar to @code{vcond@var{m}@var{n}} but operand 3 holds a pre-computed\n+result of vector comparison.\n+\n+@cindex @code{maskload@var{m}@var{n}} instruction pattern\n+@item @samp{maskload@var{m}@var{n}}\n+Perform a masked load of vector from memory operand 1 of mode @var{m}\n+into register operand 0.  Mask is provided in register operand 2 of\n+mode @var{n}.\n+\n+@cindex @code{maskstore@var{m}@var{n}} instruction pattern\n+@item @samp{maskload@var{m}@var{n}}\n+Perform a masked store of vector from register operand 1 of mode @var{m}\n+into memory operand 0.  Mask is provided in register operand 2 of\n+mode @var{n}.\n+\n @cindex @code{vec_perm@var{m}} instruction pattern\n @item @samp{vec_perm@var{m}}\n Output a (variable) vector permutation.  Operand 0 is the destination"}]}