{"sha": "8d8e205b922741ad452fbe0750d2d8af8515c967", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ4ZTIwNWI5MjI3NDFhZDQ1MmZiZTA3NTBkMmQ4YWY4NTE1Yzk2Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:24:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:24:36Z"}, "message": "rtl.h (for_each_inc_dec_fn): Remove special case for -1.\n\ngcc/\n\t* rtl.h (for_each_inc_dec_fn): Remove special case for -1.\n\t(for_each_inc_dec): Take an rtx rather than an rtx *.\n\t* cselib.c (cselib_record_autoinc_cb): Update accordingly.\n\t(cselib_record_sets): Likewise.\n\t* dse.c (emit_inc_dec_insn_before, check_for_inc_dec_1)\n\t(check_for_inc_dec): Likewise.\n\t* rtlanal.c (for_each_inc_dec_ops): Delete.\n\t(for_each_inc_dec_find_inc_dec): Take the MEM as argument,\n\trather than a pointer to the memory address.  Replace\n\tfor_each_inc_dec_ops argument with separate function and data\n\targuments.  Abort on non-autoinc addresses.\n\t(for_each_inc_dec_find_mem): Delete.\n\t(for_each_inc_dec): Take an rtx rather than an rtx *.  Use\n\tFOR_EACH_SUBRTX_VAR to visit every autoinc MEM.\n\nFrom-SVN: r214657", "tree": {"sha": "db4367ff6bcb7499b02a7ff3447bdf9b75a3d5e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db4367ff6bcb7499b02a7ff3447bdf9b75a3d5e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d8e205b922741ad452fbe0750d2d8af8515c967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e205b922741ad452fbe0750d2d8af8515c967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8e205b922741ad452fbe0750d2d8af8515c967", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8e205b922741ad452fbe0750d2d8af8515c967/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7d0b0fc77b26e5fa6872678099576e875d87ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d0b0fc77b26e5fa6872678099576e875d87ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d0b0fc77b26e5fa6872678099576e875d87ed5"}], "stats": {"total": 143, "additions": 59, "deletions": 84}, "files": [{"sha": "00e4bcecb4a0dcac6aaa8c9a2da03a180ce4c3a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d8e205b922741ad452fbe0750d2d8af8515c967", "patch": "@@ -1,3 +1,20 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.h (for_each_inc_dec_fn): Remove special case for -1.\n+\t(for_each_inc_dec): Take an rtx rather than an rtx *.\n+\t* cselib.c (cselib_record_autoinc_cb): Update accordingly.\n+\t(cselib_record_sets): Likewise.\n+\t* dse.c (emit_inc_dec_insn_before, check_for_inc_dec_1)\n+\t(check_for_inc_dec): Likewise.\n+\t* rtlanal.c (for_each_inc_dec_ops): Delete.\n+\t(for_each_inc_dec_find_inc_dec): Take the MEM as argument,\n+\trather than a pointer to the memory address.  Replace\n+\tfor_each_inc_dec_ops argument with separate function and data\n+\targuments.  Abort on non-autoinc addresses.\n+\t(for_each_inc_dec_find_mem): Delete.\n+\t(for_each_inc_dec): Take an rtx rather than an rtx *.  Use\n+\tFOR_EACH_SUBRTX_VAR to visit every autoinc MEM.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.h (find_all_hard_regs): Declare."}, {"sha": "68d428446c692df930a17536577eae01bc6dc1dc", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=8d8e205b922741ad452fbe0750d2d8af8515c967", "patch": "@@ -2464,7 +2464,7 @@ cselib_record_autoinc_cb (rtx mem ATTRIBUTE_UNUSED, rtx op ATTRIBUTE_UNUSED,\n \n   data->n_sets++;\n \n-  return -1;\n+  return 0;\n }\n \n /* Record the effects of any sets and autoincs in INSN.  */\n@@ -2523,7 +2523,7 @@ cselib_record_sets (rtx_insn *insn)\n \n   data.sets = sets;\n   data.n_sets = n_sets_before_autoinc = n_sets;\n-  for_each_inc_dec (&insn, cselib_record_autoinc_cb, &data);\n+  for_each_inc_dec (PATTERN (insn), cselib_record_autoinc_cb, &data);\n   n_sets = data.n_sets;\n \n   /* Look up the values that are read.  Do this before invalidating the"}, {"sha": "4c4a2a4e6f127654732ab74dbf5ba4632cce37d1", "filename": "gcc/dse.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=8d8e205b922741ad452fbe0750d2d8af8515c967", "patch": "@@ -894,7 +894,7 @@ emit_inc_dec_insn_before (rtx mem ATTRIBUTE_UNUSED,\n \n   emit_insn_before (new_insn, insn);\n \n-  return -1;\n+  return 0;\n }\n \n /* Before we delete INSN_INFO->INSN, make sure that the auto inc/dec, if it\n@@ -907,7 +907,8 @@ check_for_inc_dec_1 (insn_info_t insn_info)\n   rtx_insn *insn = insn_info->insn;\n   rtx note = find_reg_note (insn, REG_INC, NULL_RTX);\n   if (note)\n-    return for_each_inc_dec (&insn, emit_inc_dec_insn_before, insn_info) == 0;\n+    return for_each_inc_dec (PATTERN (insn), emit_inc_dec_insn_before,\n+\t\t\t     insn_info) == 0;\n   return true;\n }\n \n@@ -926,7 +927,8 @@ check_for_inc_dec (rtx_insn *insn)\n   insn_info.fixed_regs_live = NULL;\n   note = find_reg_note (insn, REG_INC, NULL_RTX);\n   if (note)\n-    return for_each_inc_dec (&insn, emit_inc_dec_insn_before, &insn_info) == 0;\n+    return for_each_inc_dec (PATTERN (insn), emit_inc_dec_insn_before,\n+\t\t\t     &insn_info) == 0;\n   return true;\n }\n "}, {"sha": "b18f2e1583555321297d18cb1d28969055c73cd7", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8d8e205b922741ad452fbe0750d2d8af8515c967", "patch": "@@ -2807,12 +2807,11 @@ extern int for_each_rtx_in_insn (rtx_insn **, rtx_function, void *);\n    within MEM that sets DEST to SRC + SRCOFF, or SRC if SRCOFF is\n    NULL.  The callback is passed the same opaque ARG passed to\n    for_each_inc_dec.  Return zero to continue looking for other\n-   autoinc operations, -1 to skip OP's operands, and any other value\n-   to interrupt the traversal and return that value to the caller of\n-   for_each_inc_dec.  */\n+   autoinc operations or any other value to interrupt the traversal and\n+   return that value to the caller of for_each_inc_dec.  */\n typedef int (*for_each_inc_dec_fn) (rtx mem, rtx op, rtx dest, rtx src,\n \t\t\t\t    rtx srcoff, void *arg);\n-extern int for_each_inc_dec (rtx_insn **, for_each_inc_dec_fn, void *arg);\n+extern int for_each_inc_dec (rtx, for_each_inc_dec_fn, void *arg);\n \n typedef int (*rtx_equal_p_callback_function) (const_rtx *, const_rtx *,\n                                               rtx *, rtx *);"}, {"sha": "3e3af7285d0ecba33a7a2206af57eb4e163cb8aa", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 32, "deletions": 75, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8e205b922741ad452fbe0750d2d8af8515c967/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=8d8e205b922741ad452fbe0750d2d8af8515c967", "patch": "@@ -3130,119 +3130,76 @@ for_each_rtx_in_insn (rtx_insn **insn, rtx_function f, void *data)\n \n \f\n \n-/* Data structure that holds the internal state communicated between\n-   for_each_inc_dec, for_each_inc_dec_find_mem and\n-   for_each_inc_dec_find_inc_dec.  */\n-\n-struct for_each_inc_dec_ops {\n-  /* The function to be called for each autoinc operation found.  */\n-  for_each_inc_dec_fn fn;\n-  /* The opaque argument to be passed to it.  */\n-  void *arg;\n-  /* The MEM we're visiting, if any.  */\n-  rtx mem;\n-};\n-\n-static int for_each_inc_dec_find_mem (rtx *r, void *d);\n-\n-/* Find PRE/POST-INC/DEC/MODIFY operations within *R, extract the\n-   operands of the equivalent add insn and pass the result to the\n-   operator specified by *D.  */\n+/* MEM has a PRE/POST-INC/DEC/MODIFY address X.  Extract the operands of\n+   the equivalent add insn and pass the result to FN, using DATA as the\n+   final argument.  */\n \n static int\n-for_each_inc_dec_find_inc_dec (rtx *r, void *d)\n+for_each_inc_dec_find_inc_dec (rtx mem, for_each_inc_dec_fn fn, void *data)\n {\n-  rtx x = *r;\n-  struct for_each_inc_dec_ops *data = (struct for_each_inc_dec_ops *)d;\n-\n+  rtx x = XEXP (mem, 0);\n   switch (GET_CODE (x))\n     {\n     case PRE_INC:\n     case POST_INC:\n       {\n-\tint size = GET_MODE_SIZE (GET_MODE (data->mem));\n+\tint size = GET_MODE_SIZE (GET_MODE (mem));\n \trtx r1 = XEXP (x, 0);\n \trtx c = gen_int_mode (size, GET_MODE (r1));\n-\treturn data->fn (data->mem, x, r1, r1, c, data->arg);\n+\treturn fn (mem, x, r1, r1, c, data);\n       }\n \n     case PRE_DEC:\n     case POST_DEC:\n       {\n-\tint size = GET_MODE_SIZE (GET_MODE (data->mem));\n+\tint size = GET_MODE_SIZE (GET_MODE (mem));\n \trtx r1 = XEXP (x, 0);\n \trtx c = gen_int_mode (-size, GET_MODE (r1));\n-\treturn data->fn (data->mem, x, r1, r1, c, data->arg);\n+\treturn fn (mem, x, r1, r1, c, data);\n       }\n \n     case PRE_MODIFY:\n     case POST_MODIFY:\n       {\n \trtx r1 = XEXP (x, 0);\n \trtx add = XEXP (x, 1);\n-\treturn data->fn (data->mem, x, r1, add, NULL, data->arg);\n-      }\n-\n-    case MEM:\n-      {\n-\trtx save = data->mem;\n-\tint ret = for_each_inc_dec_find_mem (r, d);\n-\tdata->mem = save;\n-\treturn ret;\n+\treturn fn (mem, x, r1, add, NULL, data);\n       }\n \n     default:\n-      return 0;\n+      gcc_unreachable ();\n     }\n }\n \n-/* If *R is a MEM, find PRE/POST-INC/DEC/MODIFY operations within its\n-   address, extract the operands of the equivalent add insn and pass\n-   the result to the operator specified by *D.  */\n-\n-static int\n-for_each_inc_dec_find_mem (rtx *r, void *d)\n-{\n-  rtx x = *r;\n-  if (x != NULL_RTX && MEM_P (x))\n-    {\n-      struct for_each_inc_dec_ops *data = (struct for_each_inc_dec_ops *) d;\n-      int result;\n-\n-      data->mem = x;\n-\n-      result = for_each_rtx (&XEXP (x, 0), for_each_inc_dec_find_inc_dec,\n-\t\t\t     data);\n-      if (result)\n-\treturn result;\n-\n-      return -1;\n-    }\n-  return 0;\n-}\n-\n-/* Traverse *INSN looking for MEMs, and for autoinc operations within\n-   them.  For each such autoinc operation found, call FN, passing it\n+/* Traverse *LOC looking for MEMs that have autoinc addresses.\n+   For each such autoinc operation found, call FN, passing it\n    the innermost enclosing MEM, the operation itself, the RTX modified\n    by the operation, two RTXs (the second may be NULL) that, once\n    added, represent the value to be held by the modified RTX\n-   afterwards, and ARG.  FN is to return -1 to skip looking for other\n-   autoinc operations within the visited operation, 0 to continue the\n-   traversal, or any other value to have it returned to the caller of\n+   afterwards, and DATA.  FN is to return 0 to continue the\n+   traversal or any other value to have it returned to the caller of\n    for_each_inc_dec.  */\n \n int\n-for_each_inc_dec (rtx_insn **insn,\n+for_each_inc_dec (rtx x,\n \t\t  for_each_inc_dec_fn fn,\n-\t\t  void *arg)\n+\t\t  void *data)\n {\n-  struct for_each_inc_dec_ops data;\n-\n-  data.fn = fn;\n-  data.arg = arg;\n-  data.mem = NULL;\n-\n-  return for_each_rtx_in_insn (insn, for_each_inc_dec_find_mem, &data);\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, x, NONCONST)\n+    {\n+      rtx mem = *iter;\n+      if (mem\n+\t  && MEM_P (mem)\n+\t  && GET_RTX_CLASS (GET_CODE (XEXP (mem, 0))) == RTX_AUTOINC)\n+\t{\n+\t  int res = for_each_inc_dec_find_inc_dec (mem, fn, data);\n+\t  if (res != 0)\n+\t    return res;\n+\t  iter.skip_subrtxes ();\n+\t}\n+    }\n+  return 0;\n }\n \n \f"}]}