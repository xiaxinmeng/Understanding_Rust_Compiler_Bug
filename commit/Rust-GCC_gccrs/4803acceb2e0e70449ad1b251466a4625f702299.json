{"sha": "4803acceb2e0e70449ad1b251466a4625f702299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwM2FjY2ViMmUwZTcwNDQ5YWQxYjI1MTQ2NmE0NjI1ZjcwMjI5OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-04-15T15:25:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-04-15T15:25:52Z"}, "message": "re PR libstdc++/60594 (std::function of a type with a declared (but not defined) return type fails to compile)\n\n\tPR libstdc++/60594\n\t* include/std/functional (function::_Callable): Exclude own type\n\tfrom the callable checks.\n\t* testsuite/20_util/function/60594.cc: New.\n\nFrom-SVN: r209422", "tree": {"sha": "08ba9afc60e42d4430bd3418282fa5e572e7c5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ba9afc60e42d4430bd3418282fa5e572e7c5d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4803acceb2e0e70449ad1b251466a4625f702299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4803acceb2e0e70449ad1b251466a4625f702299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4803acceb2e0e70449ad1b251466a4625f702299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4803acceb2e0e70449ad1b251466a4625f702299/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00e4baae7c2518ebe24cfc8536b52354096d562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00e4baae7c2518ebe24cfc8536b52354096d562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00e4baae7c2518ebe24cfc8536b52354096d562"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "e9b4a7c183501e47d2b5cc50fe6fdba29442346d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803acceb2e0e70449ad1b251466a4625f702299/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803acceb2e0e70449ad1b251466a4625f702299/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4803acceb2e0e70449ad1b251466a4625f702299", "patch": "@@ -7,6 +7,11 @@\n \t* include/std/atomic (atomic<_Tp>): Add static assertion.\n \t* testsuite/29_atomics/atomic/60695.cc: New.\n \n+\tPR libstdc++/60594\n+\t* include/std/functional (function::_Callable): Exclude own type\n+\tfrom the callable checks.\n+\t* testsuite/20_util/function/60594.cc: New.\n+\n 2014-04-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_vector.h (_Vector_base::_Vector_impl,"}, {"sha": "0e80fa37cf4c8bea20d9ece70f3c5e58009dccd0", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803acceb2e0e70449ad1b251466a4625f702299/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803acceb2e0e70449ad1b251466a4625f702299/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=4803acceb2e0e70449ad1b251466a4625f702299", "patch": "@@ -2149,8 +2149,15 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \tusing _Invoke = decltype(__callable_functor(std::declval<_Functor&>())\n \t\t\t\t (std::declval<_ArgTypes>()...) );\n \n+      // Used so the return type convertibility checks aren't done when\n+      // performing overload resolution for copy construction/assignment.\n+      template<typename _Tp>\n+\tusing _NotSelf = __not_<is_same<_Tp, function>>;\n+\n       template<typename _Functor>\n-\tusing _Callable = __check_func_return_type<_Invoke<_Functor>, _Res>;\n+\tusing _Callable\n+\t  = __and_<_NotSelf<_Functor>,\n+\t\t   __check_func_return_type<_Invoke<_Functor>, _Res>>;\n \n       template<typename _Cond, typename _Tp>\n \tusing _Requires = typename enable_if<_Cond::value, _Tp>::type;\n@@ -2291,7 +2298,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n        *  reference_wrapper<F>, this function will not throw.\n        */\n       template<typename _Functor>\n-\t_Requires<_Callable<_Functor>, function&>\n+\t_Requires<_Callable<typename decay<_Functor>::type>, function&>\n \toperator=(_Functor&& __f)\n \t{\n \t  function(std::forward<_Functor>(__f)).swap(*this);"}, {"sha": "be80b3f44d008f312698716b9c2eb965d3d0cc03", "filename": "libstdc++-v3/testsuite/20_util/function/60594.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803acceb2e0e70449ad1b251466a4625f702299/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F60594.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803acceb2e0e70449ad1b251466a4625f702299/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F60594.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F60594.cc?ref=4803acceb2e0e70449ad1b251466a4625f702299", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// libstdc++/60594\n+\n+#include <functional>\n+#include <type_traits>\n+struct bar;\n+using F = std::function<bar()>;\n+// check for copy constructible and assignable while 'bar' is incomplete\n+constexpr int c = std::is_copy_constructible<F>::value;\n+constexpr int a = std::is_copy_assignable<F>::value;\n+struct bar { };\n+bar func();\n+void test()\n+{\n+  F g{ &func };\n+  g = func;\n+}"}]}