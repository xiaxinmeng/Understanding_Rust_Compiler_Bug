{"sha": "410b8f6f41920dad200cd709f9f3de8b840a995c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwYjhmNmY0MTkyMGRhZDIwMGNkNzA5ZjlmM2RlOGI4NDBhOTk1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-20T11:26:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-20T11:26:58Z"}, "message": "arm: Fix up neon_vector_mem_operand [PR97528]\n\nThe documentation for POST_MODIFY says:\n   Currently, the compiler can only handle second operands of the\n   form (plus (reg) (reg)) and (plus (reg) (const_int)), where\n   the first operand of the PLUS has to be the same register as\n   the first operand of the *_MODIFY.\nThe following testcase ICEs, because combine just attempts to simplify\nthings and ends up with\n(post_modify (reg1) (plus (mult (reg2) (const_int 4)) (reg1))\nbut the target predicates accept it, because they only verify\nthat POST_MODIFY's second operand is PLUS and the second operand\nof the PLUS is a REG.\n\nThe following patch fixes this by performing further verification that\nthe POST_MODIFY is in the form it should be.\n\n2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/97528\n\t* config/arm/arm.c (neon_vector_mem_operand): For POST_MODIFY, require\n\tfirst POST_MODIFY operand is a REG and is equal to the first operand\n\tof PLUS.\n\n\t* gcc.target/arm/pr97528.c: New test.", "tree": {"sha": "9db559784eb47ef5d13d670c0c0c0a3a53cb6f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db559784eb47ef5d13d670c0c0c0a3a53cb6f25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410b8f6f41920dad200cd709f9f3de8b840a995c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410b8f6f41920dad200cd709f9f3de8b840a995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410b8f6f41920dad200cd709f9f3de8b840a995c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410b8f6f41920dad200cd709f9f3de8b840a995c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "568e1530f24d2045fa80b91103556a86825aa148", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b8f6f41920dad200cd709f9f3de8b840a995c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b8f6f41920dad200cd709f9f3de8b840a995c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=410b8f6f41920dad200cd709f9f3de8b840a995c", "patch": "@@ -13429,7 +13429,9 @@ neon_vector_mem_operand (rtx op, int type, bool strict)\n   /* Allow post-increment by register for VLDn */\n   if (type == 2 && GET_CODE (ind) == POST_MODIFY\n       && GET_CODE (XEXP (ind, 1)) == PLUS\n-      && REG_P (XEXP (XEXP (ind, 1), 1)))\n+      && REG_P (XEXP (XEXP (ind, 1), 1))\n+      && REG_P (XEXP (ind, 0))\n+      && rtx_equal_p (XEXP (ind, 0), XEXP (XEXP (ind, 1), 0)))\n      return true;\n \n   /* Match:"}, {"sha": "6cc59f2158c5f8c8dd78e5083ca7ebc4e5f63a44", "filename": "gcc/testsuite/gcc.target/arm/pr97528.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410b8f6f41920dad200cd709f9f3de8b840a995c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr97528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410b8f6f41920dad200cd709f9f3de8b840a995c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr97528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr97528.c?ref=410b8f6f41920dad200cd709f9f3de8b840a995c", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/97528 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O1\" }  */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+typedef __simd64_int16_t T;\n+typedef __simd64_uint16_t U;\n+unsigned short c;\n+int d;\n+U e;\n+\n+void\n+foo (void)\n+{\n+  unsigned short *dst = &c;\n+  int g = d, b = 4;\n+  U dc = e;\n+  for (int h = 0; h < b; h++)\n+    {\n+      unsigned short *i = dst;\n+      U j = dc;\n+      vst1_s16 ((int16_t *) i, (T) j);\n+      dst += g;\n+    }\n+}"}]}