{"sha": "4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkwNGI2NGJmN2RjNTUzOGIwNmQyYmEwMWZjMWM1NTIzMWMwOWJiOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-11T18:52:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-11T18:52:12Z"}, "message": "re PR c++/44609 (Invalid template code causes infinite loop of error messages)\n\n\tPR c++/44609\n\t* cp-tree.h (struct tinst_level): Add errors field.\n\t* pt.c (neglectable_inst_p, limit_bad_template_recurson): New.\n\t(push_tinst_level): Don't start another decl in that case.\n\t(reopen_tinst_level): Adjust errors field.\n\t* decl2.c (cp_write_global_declarations): Don't complain about\n\tundefined inline if its template was defined.\n\t* mangle.c (mangle_decl_string): Handle failure from push_tinst_level.\n\nFrom-SVN: r176176", "tree": {"sha": "3256896a64479248e6b7bfbaeb3af03b35d3636e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3256896a64479248e6b7bfbaeb3af03b35d3636e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "848ca96f30746fc6972105de156656ce8c5ee586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848ca96f30746fc6972105de156656ce8c5ee586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848ca96f30746fc6972105de156656ce8c5ee586"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "d95650f3db43adcc4b314efdbabef42d0ab79c74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -1,3 +1,14 @@\n+2011-07-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44609\n+\t* cp-tree.h (struct tinst_level): Add errors field.\n+\t* pt.c (neglectable_inst_p, limit_bad_template_recurson): New.\n+\t(push_tinst_level): Don't start another decl in that case.\n+\t(reopen_tinst_level): Adjust errors field.\n+\t* decl2.c (cp_write_global_declarations): Don't complain about\n+\tundefined inline if its template was defined.\n+\t* mangle.c (mangle_decl_string): Handle failure from push_tinst_level.\n+\n 2011-07-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49691"}, {"sha": "cc086404cc95fb2a1c9502f1251f465c4816a855", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -4679,6 +4679,9 @@ struct GTY((chain_next (\"%h.next\"))) tinst_level {\n   /* The location where the template is instantiated.  */\n   location_t locus;\n \n+  /* errorcount+sorrycount when we pushed this level.  */\n+  int errors;\n+\n   /* True if the location is in a system header.  */\n   bool in_system_header_p;\n };"}, {"sha": "d90d4b5d8640138f684a06faaffd1d0d5e5076cb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -3950,10 +3950,10 @@ cp_write_global_declarations (void)\n \t     #pragma interface, etc.) we decided not to emit the\n \t     definition here.  */\n \t  && !DECL_INITIAL (decl)\n-\t  /* An explicit instantiation can be used to specify\n-\t     that the body is in another unit. It will have\n-\t     already verified there was a definition.  */\n-\t  && !DECL_EXPLICIT_INSTANTIATION (decl))\n+\t  /* Don't complain if the template was defined.  */\n+\t  && !(DECL_TEMPLATE_INSTANTIATION (decl)\n+\t       && DECL_INITIAL (DECL_TEMPLATE_RESULT\n+\t\t\t\t(template_for_substitution (decl)))))\n \t{\n \t  warning (0, \"inline function %q+D used but never defined\", decl);\n \t  /* Avoid a duplicate warning from check_global_declaration_1.  */"}, {"sha": "4a83c9adb2e091758df43e25496ad757b1b3e745", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -3106,11 +3106,11 @@ mangle_decl_string (const tree decl)\n   if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n     {\n       struct tinst_level *tl = current_instantiation ();\n-      if (!tl || tl->decl != decl)\n+      if ((!tl || tl->decl != decl)\n+\t  && push_tinst_level (decl))\n \t{\n \t  template_p = true;\n \t  saved_fn = current_function_decl;\n-\t  push_tinst_level (decl);\n \t  current_function_decl = NULL_TREE;\n \t}\n     }"}, {"sha": "7c735ef75b7771004ea670ab133c413dc9e7c70d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -7499,6 +7499,36 @@ uses_template_parms_level (tree t, int level)\n \t\t\t\t /*include_nondeduced_p=*/true);\n }\n \n+/* Returns TRUE iff INST is an instantiation we don't need to do in an\n+   ill-formed translation unit, i.e. a variable or function that isn't\n+   usable in a constant expression.  */\n+\n+static inline bool\n+neglectable_inst_p (tree d)\n+{\n+  return (DECL_P (d)\n+\t  && !(TREE_CODE (d) == FUNCTION_DECL ? DECL_DECLARED_CONSTEXPR_P (d)\n+\t       : decl_maybe_constant_var_p (d)));\n+}\n+\n+/* Returns TRUE iff we should refuse to instantiate DECL because it's\n+   neglectable and instantiated from within an erroneous instantiation.  */\n+\n+static bool\n+limit_bad_template_recurson (tree decl)\n+{\n+  struct tinst_level *lev = current_tinst_level;\n+  int errs = errorcount + sorrycount;\n+  if (lev == NULL || errs == 0 || !neglectable_inst_p (decl))\n+    return false;\n+\n+  for (; lev; lev = lev->next)\n+    if (neglectable_inst_p (lev->decl))\n+      break;\n+\n+  return (lev && errs > lev->errors);\n+}\n+\n static int tinst_depth;\n extern int max_tinst_depth;\n #ifdef GATHER_STATISTICS\n@@ -7532,9 +7562,16 @@ push_tinst_level (tree d)\n       return 0;\n     }\n \n+  /* If the current instantiation caused problems, don't let it instantiate\n+     anything else.  Do allow deduction substitution and decls usable in\n+     constant expressions.  */\n+  if (limit_bad_template_recurson (d))\n+    return 0;\n+\n   new_level = ggc_alloc_tinst_level ();\n   new_level->decl = d;\n   new_level->locus = input_location;\n+  new_level->errors = errorcount+sorrycount;\n   new_level->in_system_header_p = in_system_header;\n   new_level->next = current_tinst_level;\n   current_tinst_level = new_level;\n@@ -7578,6 +7615,8 @@ reopen_tinst_level (struct tinst_level *level)\n \n   current_tinst_level = level;\n   pop_tinst_level ();\n+  if (current_tinst_level)\n+    current_tinst_level->errors = errorcount+sorrycount;\n   return level->decl;\n }\n "}, {"sha": "7d50bd12f6a8cbfe6076d6131973ee3b5740d98b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -1,3 +1,8 @@\n+2011-07-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44609\n+\t* g++.dg/template/recurse3.C: New.\n+\n 2011-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/49676"}, {"sha": "f1db7c5cbca04d33c72a8bdff9635d8f59c9fce4", "filename": "gcc/testsuite/g++.dg/template/recurse3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4904b64bf7dc5538b06d2ba01fc1c55231c09bb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse3.C?ref=4904b64bf7dc5538b06d2ba01fc1c55231c09bb8", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/44609\n+// { dg-options -ftemplate-depth=10 }\n+\n+template<int N>\n+void f()\n+{\n+  0 = 0;\t\t\t// { dg-error \"lvalue required\" }\n+  f<N+1>();\t\t\t// { dg-bogus \"instantiation depth\" }\n+}\n+\n+int main()\n+{\n+  f<0>();\n+}"}]}