{"sha": "6894579f1447dc6c18560804bd1b1e9e293aa9b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg5NDU3OWYxNDQ3ZGM2YzE4NTYwODA0YmQxYjFlOWUyOTNhYTliNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-19T19:37:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-19T19:37:09Z"}, "message": "calls.c (emit_call_1): Mark parameter with ATTRIBUTE_UNUSED.\n\n\t* calls.c (emit_call_1): Mark parameter with ATTRIBUTE_UNUSED.\n\t* 1750a.c (print_operand): Fix format specifier warning.\n\t* 1750a.h (ASM_FILE_START): Don't discard pointer qualifier.\n\t* 1750a.md: Likewise.\n\t* gcc.c (init_gcc_specs): Wrap with ENABLE_SHARED_LIBGCC.\n\t* genemit.c (output_add_clobbers): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\t* genrecog.c (write_subroutine): Likewise.\n\t* integrate.c (expand_inline_function): Delete unused variable.\n\t* varasm.c (remove_from_pending_weak_list): Wrap with\n\tASM_WEAKEN_LABEL.\n\nFrom-SVN: r46358", "tree": {"sha": "f1097dc96a2df41737fb22b6cdea43f07d8cc9cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1097dc96a2df41737fb22b6cdea43f07d8cc9cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6894579f1447dc6c18560804bd1b1e9e293aa9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6894579f1447dc6c18560804bd1b1e9e293aa9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6894579f1447dc6c18560804bd1b1e9e293aa9b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6894579f1447dc6c18560804bd1b1e9e293aa9b7/comments", "author": null, "committer": null, "parents": [{"sha": "368a164799eb94baa3711e1982a74018471e1a16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/368a164799eb94baa3711e1982a74018471e1a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/368a164799eb94baa3711e1982a74018471e1a16"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "4404282ddf468233d9e515e197a9f84d39ee3a4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -1,3 +1,17 @@\n+2001-10-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* calls.c (emit_call_1): Mark parameter with ATTRIBUTE_UNUSED.\n+\t* 1750a.c (print_operand): Fix format specifier warning.\n+\t* 1750a.h (ASM_FILE_START): Don't discard pointer qualifier.\n+\t* 1750a.md: Likewise.\n+\t* gcc.c (init_gcc_specs): Wrap with ENABLE_SHARED_LIBGCC.\n+\t* genemit.c (output_add_clobbers): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t* genrecog.c (write_subroutine): Likewise.\n+\t* integrate.c (expand_inline_function): Delete unused variable.\n+\t* varasm.c (remove_from_pending_weak_list): Wrap with\n+\tASM_WEAKEN_LABEL.\n+\n 2001-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* simplify-rtx.c (simplify_plus_minus): Negate constant iff its neg"}, {"sha": "5a4850242bc9cc4df0f152123b8dd81b9545d942", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -449,7 +449,7 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n      HOST_WIDE_INT stack_size ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT rounded_stack_size;\n      HOST_WIDE_INT struct_value_size ATTRIBUTE_UNUSED;\n-     rtx next_arg_reg;\n+     rtx next_arg_reg ATTRIBUTE_UNUSED;\n      rtx valreg;\n      int old_inhibit_defer_pop;\n      rtx call_fusage;"}, {"sha": "8f2ba21b5e630fb7f3e7efdb827b208d3c1a7b06", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -652,7 +652,7 @@ print_operand (file, x, letter)\n \n     case CALL:\n       fprintf (file, \"CALL nargs=\");\n-      fprintf (file, HOST_PTR_PRINTF, XEXP (x, 1));\n+      fprintf (file, HOST_PTR_PRINTF, (PTR) XEXP (x, 1));\n       fprintf (file, \", func is either '%s' or '%s'\",\n \t       XSTR (XEXP (XEXP (x, 0), 1), 0), XSTR (XEXP (x, 0), 1));\n       break;"}, {"sha": "07af4798b15c536df1159eaad6a65861ae2fd753", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -857,15 +857,16 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n /* Output at beginning of assembler file.  */\n \n #define ASM_FILE_START(FILE)   {\t\t\t\t\t\\\n-   char *p, name[40];\t\t\t\t\t\t\t\\\n-   if ((p = (char *)strrchr(main_input_filename,'/')) != NULL ? 1 :\t\\\n-       (p = (char *)strrchr(main_input_filename,']')) != NULL)\t\t\\\n+   char *p2, name[40];\t\t\t\t\t\t\t\\\n+   const char *p;\t\t\t\t\t\t\t\\\n+   if ((p = strrchr(main_input_filename,'/')) != NULL ? 1 :\t\t\\\n+       (p = strrchr(main_input_filename,']')) != NULL)\t\t\t\\\n \tp++;\t\t\t\t\t\t\t\t\\\n    else\t\t\t\t\t\t\t\t\t\\\n \tp = main_input_filename;\t\t\t\t\t\\\n    strcpy(name,p);\t\t\t\t\t\t\t\\\n-   if ((p = (char *)strchr(name,'.')))\t\t\t\t\t\\\n-\t*p = '\\0';\t\t\t\t\t\t\t\\\n+   if ((p2 = strchr(name,'.')))\t\t\t\t\t\t\\\n+\t*p2 = '\\0';\t\t\t\t\t\t\t\\\n    fprintf(FILE,\"\\tname %s\\n\",name); \t\t\t\t\t\\\n    fprintf(FILE,\"\\tnolist\\n\\tinclude \\\"ms1750.inc\\\"\\n\\tlist\\n\\n\");\t\\\n    fprintf(FILE,\"\\tglobal\\t__main\\n\\n\");  }"}, {"sha": "1f4098f0f803b552c3fa3094cd935e980b2a33a5", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -667,7 +667,7 @@\n   \"\"\n   \"*\n    {\n-     char *istr;\n+     const char *istr;\n      switch(which_alternative)\n        {\n        case 0:"}, {"sha": "504bba275eebd66d4df6e4ebb0d0f7b90d00e5c2", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -313,9 +313,11 @@ static int execute\t\t\tPARAMS ((void));\n static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n static void set_input\t\t\tPARAMS ((const char *));\n+#ifdef ENABLE_SHARED_LIBGCC\n static void init_gcc_specs              PARAMS ((struct obstack *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t const char *));\n+#endif\n \f\n /* The Specs Language\n \n@@ -1376,6 +1378,7 @@ static struct spec_list *specs = (struct spec_list *) 0;\n /* Add appropriate libgcc specs to OBSTACK, taking into account\n    various permutations of -shared-libgcc, -shared, and such.  */\n \n+#ifdef ENABLE_SHARED_LIBGCC\n static void\n init_gcc_specs (obstack, shared_name, static_name)\n      struct obstack *obstack;\n@@ -1401,6 +1404,7 @@ init_gcc_specs (obstack, shared_name, static_name)\n \t   static_name);\n   obstack_grow (obstack, buffer, strlen (buffer));\n }\n+#endif /* ENABLE_SHARED_LIBGCC */\n \n /* Initialize the specs lookup routines.  */\n "}, {"sha": "34d671164cd1a523e578e0737fcd467d7f7bd789", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -672,7 +672,7 @@ output_add_clobbers ()\n   int i;\n \n   printf (\"\\n\\nvoid\\nadd_clobbers (pattern, insn_code_number)\\n\");\n-  printf (\"     rtx pattern;\\n     int insn_code_number;\\n\");\n+  printf (\"     rtx pattern ATTRIBUTE_UNUSED;\\n     int insn_code_number;\\n\");\n   printf (\"{\\n\");\n   printf (\"  switch (insn_code_number)\\n\");\n   printf (\"    {\\n\");"}, {"sha": "4a3198b7ff28748786d2515ebbce6b519be2e512", "filename": "gcc/genrecog.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -2349,23 +2349,23 @@ write_subroutine (head, type)\n       printf (\"%sint recog%s PARAMS ((rtx, rtx, int *));\\n\", s_or_e, extension);\n       printf (\"%sint\\n\\\n recog%s (x0, insn, pnum_clobbers)\\n\\\n-     rtx x0;\\n\\\n+     rtx x0 ATTRIBUTE_UNUSED;\\n\\\n      rtx insn ATTRIBUTE_UNUSED;\\n\\\n      int *pnum_clobbers ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n       break;\n     case SPLIT:\n       printf (\"%srtx split%s PARAMS ((rtx, rtx));\\n\", s_or_e, extension);\n       printf (\"%srtx\\n\\\n split%s (x0, insn)\\n\\\n-     rtx x0;\\n\\\n+     rtx x0 ATTRIBUTE_UNUSED;\\n\\\n      rtx insn ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n       break;\n     case PEEPHOLE2:\n       printf (\"%srtx peephole2%s PARAMS ((rtx, rtx, int *));\\n\",\n \t      s_or_e, extension);\n       printf (\"%srtx\\n\\\n peephole2%s (x0, insn, _pmatch_len)\\n\\\n-     rtx x0;\\n\\\n+     rtx x0 ATTRIBUTE_UNUSED;\\n\\\n      rtx insn ATTRIBUTE_UNUSED;\\n\\\n      int *_pmatch_len ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n       break;"}, {"sha": "874029fbb9cd965bf21d8061a2f9455e594fc963", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -663,9 +663,6 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   rtx stack_save = 0;\n   rtx temp;\n   struct inline_remap *map = 0;\n-#ifdef HAVE_cc0\n-  rtx cc0_insn = 0;\n-#endif\n   rtvec arg_vector = (rtvec) inl_f->original_arg_vector;\n   rtx static_chain_value = 0;\n   int inl_max_uid;"}, {"sha": "525d9c3e4b26c6fe50ca99163f4840b094a8185b", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6894579f1447dc6c18560804bd1b1e9e293aa9b7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6894579f1447dc6c18560804bd1b1e9e293aa9b7", "patch": "@@ -163,7 +163,9 @@ static void output_after_function_constants PARAMS ((void));\n static unsigned HOST_WIDE_INT array_size_for_constructor PARAMS ((tree));\n static unsigned min_align\t\tPARAMS ((unsigned, unsigned));\n static void output_constructor\t\tPARAMS ((tree, int, unsigned));\n+#ifdef ASM_WEAKEN_LABEL\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n+#endif\n static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n #ifdef ASM_OUTPUT_BSS\n@@ -5047,6 +5049,7 @@ weak_finish ()\n /* Remove NAME from the pending list of weak symbols.  This prevents\n    the compiler from emitting multiple .weak directives which confuses\n    some assemblers.  */\n+#ifdef ASM_WEAKEN_LABEL\n static void\n remove_from_pending_weak_list (name)\n      const char *name;\n@@ -5066,6 +5069,7 @@ remove_from_pending_weak_list (name)\n         p = &(t->next);\n     }\n }\n+#endif /* ASM_WEAKEN_LABEL */\n \n /* Emit an assembler directive to make the symbol for DECL an alias to\n    the symbol for TARGET.  */"}]}