{"sha": "bc7fe95200214ce70419fde6f965dc88bbd645a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3ZmU5NTIwMDIxNGNlNzA0MTlmZGU2Zjk2NWRjODhiYmQ2NDVhNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-09-04T14:05:01Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-09-04T14:05:01Z"}, "message": "re PR c/81783 (-Wtautological-compare could do better)\n\n\tPR c/81783\n\t* c-warn.c (warn_tautological_bitwise_comparison): New function.\n\t(warn_tautological_cmp): Call it.\n\n\t* doc/invoke.texi: Update -Wtautological-compare documentation.\n\n\t* c-c++-common/Wtautological-compare-5.c: New test.\n\nFrom-SVN: r251660", "tree": {"sha": "ece5a8c4fb2b7d91d89c483d88f20c4058b89390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece5a8c4fb2b7d91d89c483d88f20c4058b89390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc7fe95200214ce70419fde6f965dc88bbd645a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7fe95200214ce70419fde6f965dc88bbd645a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7fe95200214ce70419fde6f965dc88bbd645a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7fe95200214ce70419fde6f965dc88bbd645a6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8713d0f1c46f81107ea61781e2f4dc918d0fb67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8713d0f1c46f81107ea61781e2f4dc918d0fb67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8713d0f1c46f81107ea61781e2f4dc918d0fb67d"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "721b0b96f4a5451d52f94ed8ec594b8dd32c99fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc7fe95200214ce70419fde6f965dc88bbd645a6", "patch": "@@ -1,3 +1,8 @@\n+2017-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81783\n+\t* doc/invoke.texi: Update -Wtautological-compare documentation.\n+\n 2017-09-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/64910"}, {"sha": "9886dcd86b29f06a6b76d726a93e088c90087885", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bc7fe95200214ce70419fde6f965dc88bbd645a6", "patch": "@@ -1,3 +1,9 @@\n+2017-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81783\n+\t* c-warn.c (warn_tautological_bitwise_comparison): New function.\n+\t(warn_tautological_cmp): Call it.\n+\n 2017-09-01  Boris Kolpackov <boris@codesynthesis.com>\n \n \t* c-opts.c (c_common_finish): Write dependency information even if"}, {"sha": "0749d16a50fb0fa022196640a01afcdab3187edb", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=bc7fe95200214ce70419fde6f965dc88bbd645a6", "patch": "@@ -321,6 +321,59 @@ find_array_ref_with_const_idx_r (tree *expr_p, int *, void *)\n   return NULL_TREE;\n }\n \n+/* Subroutine of warn_tautological_cmp.  Warn about bitwise comparison\n+   that always evaluate to true or false.  LOC is the location of the\n+   ==/!= comparison specified by CODE; LHS and RHS are the usual operands\n+   of this comparison.  */\n+\n+static void\n+warn_tautological_bitwise_comparison (location_t loc, tree_code code,\n+\t\t\t\t      tree lhs, tree rhs)\n+{\n+  if (code != EQ_EXPR && code != NE_EXPR)\n+    return;\n+\n+  /* Extract the operands from e.g. (x & 8) == 4.  */\n+  tree bitop;\n+  tree cst;\n+  if ((TREE_CODE (lhs) == BIT_AND_EXPR\n+       || TREE_CODE (lhs) == BIT_IOR_EXPR)\n+      && TREE_CODE (rhs) == INTEGER_CST)\n+    bitop = lhs, cst = rhs;\n+  else if ((TREE_CODE (rhs) == BIT_AND_EXPR\n+\t    || TREE_CODE (rhs) == BIT_IOR_EXPR)\n+\t   && TREE_CODE (lhs) == INTEGER_CST)\n+    bitop = rhs, cst = lhs;\n+  else\n+    return;\n+\n+  tree bitopcst;\n+  if (TREE_CODE (TREE_OPERAND (bitop, 0)) == INTEGER_CST)\n+    bitopcst = TREE_OPERAND (bitop, 0);\n+  else if (TREE_CODE (TREE_OPERAND (bitop, 1)) == INTEGER_CST)\n+    bitopcst = TREE_OPERAND (bitop, 1);\n+  else\n+    return;\n+\n+  wide_int res;\n+  if (TREE_CODE (bitop) == BIT_AND_EXPR)\n+    res = wi::bit_and (bitopcst, cst);\n+  else\n+    res = wi::bit_or (bitopcst, cst);\n+\n+  /* For BIT_AND only warn if (CST2 & CST1) != CST1, and\n+     for BIT_OR only if (CST2 | CST1) != CST1.  */\n+  if (res == cst)\n+    return;\n+\n+  if (code == EQ_EXPR)\n+    warning_at (loc, OPT_Wtautological_compare,\n+\t\t\"bitwise comparison always evaluates to false\");\n+  else\n+    warning_at (loc, OPT_Wtautological_compare,\n+\t\t\"bitwise comparison always evaluates to true\");\n+}\n+\n /* Warn if a self-comparison always evaluates to true or false.  LOC\n    is the location of the comparison with code CODE, LHS and RHS are\n    operands of the comparison.  */\n@@ -337,6 +390,8 @@ warn_tautological_cmp (location_t loc, enum tree_code code, tree lhs, tree rhs)\n       || from_macro_expansion_at (EXPR_LOCATION (rhs)))\n     return;\n \n+  warn_tautological_bitwise_comparison (loc, code, lhs, rhs);\n+\n   /* We do not warn for constants because they are typical of macro\n      expansions that test for features, sizeof, and similar.  */\n   if (CONSTANT_CLASS_P (fold_for_warn (lhs))"}, {"sha": "ed438d4bfc8058616c3278c426f3ce4e02052ebc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bc7fe95200214ce70419fde6f965dc88bbd645a6", "patch": "@@ -5492,6 +5492,14 @@ int i = 1;\n @dots{}\n if (i > i) @{ @dots{} @}\n @end smallexample\n+\n+This warning also warns about bitwise comparisons that always evaluate\n+to true or false, for instance:\n+@smallexample\n+if ((a & 16) == 10) @{ @dots{} @}\n+@end smallexample\n+will always be false.\n+\n This warning is enabled by @option{-Wall}.\n \n @item -Wtrampolines"}, {"sha": "04a95f91b6529c8f08be31910eb658353ff0d006", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc7fe95200214ce70419fde6f965dc88bbd645a6", "patch": "@@ -1,3 +1,8 @@\n+2017-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/81783\n+\t* c-c++-common/Wtautological-compare-5.c: New test.\n+\n 2017-09-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/64910"}, {"sha": "4664bfdeae63af2fba4fc8c17d9c56d6aec2935b", "filename": "gcc/testsuite/c-c++-common/Wtautological-compare-5.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWtautological-compare-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7fe95200214ce70419fde6f965dc88bbd645a6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWtautological-compare-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWtautological-compare-5.c?ref=bc7fe95200214ce70419fde6f965dc88bbd645a6", "patch": "@@ -0,0 +1,106 @@\n+/* PR c/81783 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtautological-compare\" } */\n+\n+enum E { FOO = 128 };\n+\n+int\n+f (int a)\n+{\n+  if ((a & 16) == 10) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if ((16 & a) == 10) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if (10 == (a & 16)) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if (10 == (16 & a)) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+\n+  if ((a & 16) != 10) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((16 & a) != 10) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if (10 != (a & 16)) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if (10 != (16 & a)) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+\n+  if ((a & 9) == 8)\n+    return 1;\n+  if ((9 & a) == 8)\n+    return 1;\n+  if (8 == (a & 9))\n+    return 1;\n+  if (8 == (9 & a))\n+    return 1;\n+\n+  if ((a & 9) != 8)\n+    return 1;\n+  if ((9 & a) != 8)\n+    return 1;\n+  if (8 != (a & 9))\n+    return 1;\n+  if (8 != (9 & a))\n+    return 1;\n+\n+  if ((a | 16) == 10) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if ((16 | a) == 10) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if (10 == (a | 16)) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if (10 == (16 | a)) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+\n+  if ((a | 16) != 10) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((16 | a) != 10) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if (10 != (a | 16)) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if (10 != (16 | a)) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+\n+  if ((a | 9) == 8) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if ((9 | a) == 8) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if (8 == (a | 9)) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if (8 == (9 | a)) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+\n+  if ((a | 9) != 8) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((9 | a) != 8) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if (8 != (a | 9)) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if (8 != (9 | a)) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+\n+  if ((a & 128) != 1) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((128 & a) != 1) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((a & FOO) != 1) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((FOO & a) != 1) /* { dg-warning \"bitwise comparison always evaluates to true\" } */\n+    return 1;\n+  if ((a & 128) == 1) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if ((128 & a) == 1) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if ((a & FOO) == 1) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+  if ((FOO & a) == 1) /* { dg-warning \"bitwise comparison always evaluates to false\" } */\n+    return 1;\n+\n+#define N 0x10\n+  if ((a & N) == 10) /* { dg-bogus \"bitwise comparison always evaluates to false\" \"\" { xfail *-*-* } } */\n+    return 1;\n+  if ((a | N) == 10) /* { dg-bogus \"bitwise comparison always evaluates to false\" \"\" { xfail *-*-* } } */\n+    return 1;\n+\n+  return 0;\n+}"}]}