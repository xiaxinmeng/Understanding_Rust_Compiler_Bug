{"sha": "2d411f1d8e3529a97c9b607a88034d83fb341df0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0MTFmMWQ4ZTM1MjlhOTdjOWI2MDdhODgwMzRkODNmYjM0MWRmMA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-09-23T19:58:28Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-09-23T19:58:28Z"}, "message": "expr.c (do_store_flag): Remove duplicated code.\n\n2012-09-23  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* expr.c (do_store_flag): Remove duplicated code.\n\nFrom-SVN: r191653", "tree": {"sha": "fa3649f5923acb2757d0c7855b0d1571f63ec1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa3649f5923acb2757d0c7855b0d1571f63ec1a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d411f1d8e3529a97c9b607a88034d83fb341df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d411f1d8e3529a97c9b607a88034d83fb341df0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d411f1d8e3529a97c9b607a88034d83fb341df0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d411f1d8e3529a97c9b607a88034d83fb341df0/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "9aa6e8e5079e78d7e8b1d9ca6017f654281199fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d411f1d8e3529a97c9b607a88034d83fb341df0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d411f1d8e3529a97c9b607a88034d83fb341df0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d411f1d8e3529a97c9b607a88034d83fb341df0", "patch": "@@ -1,3 +1,7 @@\n+2012-09-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* expr.c (do_store_flag): Remove duplicated code.\n+\n 2012-09-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/predicates.md (altivec_register_operand,"}, {"sha": "9158b9f43955fe24ee94f4dfcb8cd82e2986a28e", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d411f1d8e3529a97c9b607a88034d83fb341df0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d411f1d8e3529a97c9b607a88034d83fb341df0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2d411f1d8e3529a97c9b607a88034d83fb341df0", "patch": "@@ -10676,17 +10676,6 @@ do_store_flag (sepops ops, rtx target, enum machine_mode mode)\n   STRIP_NOPS (arg0);\n   STRIP_NOPS (arg1);\n   \n-  /* For vector typed comparisons emit code to generate the desired\n-     all-ones or all-zeros mask.  Conveniently use the VEC_COND_EXPR\n-     expander for this.  */\n-  if (TREE_CODE (ops->type) == VECTOR_TYPE)\n-    {\n-      tree ifexp = build2 (ops->code, ops->type, arg0, arg1);\n-      tree if_true = constant_boolean_node (true, ops->type);\n-      tree if_false = constant_boolean_node (false, ops->type);\n-      return expand_vec_cond_expr (ops->type, ifexp, if_true, if_false, target);\n-    }\n-\n   /* For vector typed comparisons emit code to generate the desired\n      all-ones or all-zeros mask.  Conveniently use the VEC_COND_EXPR\n      expander for this.  */"}]}