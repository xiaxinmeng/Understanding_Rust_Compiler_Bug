{"sha": "a07189f4555b29f44945e548461ef26246a917f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA3MTg5ZjQ1NTViMjlmNDQ5NDVlNTQ4NDYxZWYyNjI0NmE5MTdmMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-07-06T07:05:11Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-07-06T07:05:11Z"}, "message": "S/390: Fix vecinit expansion.\n\nThe fallback routine in the S/390 vecinit expander did not check\nwhether each of the initializer elements is a proper general_operand.\nSince revision r236582 the expander is invoked also with e.g. symbol\nrefs with an odd addend resulting in invalid insns.\n\nFixed by forcing the element into a register in such cases.\n\ngcc/ChangeLog:\n\n2016-07-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_vec_init): Force initializer\n\telement to register if it doesn't match general_operand.\n\nFrom-SVN: r238032", "tree": {"sha": "4ce928c72b6002b2185dd631e970595770f79e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce928c72b6002b2185dd631e970595770f79e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a07189f4555b29f44945e548461ef26246a917f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07189f4555b29f44945e548461ef26246a917f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a07189f4555b29f44945e548461ef26246a917f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a07189f4555b29f44945e548461ef26246a917f2/comments", "author": null, "committer": null, "parents": [{"sha": "8070763a2cd6d84f8614890a9a7bfae57b44c047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8070763a2cd6d84f8614890a9a7bfae57b44c047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8070763a2cd6d84f8614890a9a7bfae57b44c047"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "b248acd1f0042d7618b9eea8a6de23bcdfcede08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07189f4555b29f44945e548461ef26246a917f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07189f4555b29f44945e548461ef26246a917f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a07189f4555b29f44945e548461ef26246a917f2", "patch": "@@ -1,3 +1,8 @@\n+2016-07-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_vec_init): Force initializer\n+\telement to register if it doesn't match general_operand.\n+\n 2016-07-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "9d2b2c0cadd721e25e1fb5be007657a29d04d47d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a07189f4555b29f44945e548461ef26246a917f2/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a07189f4555b29f44945e548461ef26246a917f2/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a07189f4555b29f44945e548461ef26246a917f2", "patch": "@@ -6443,11 +6443,17 @@ s390_expand_vec_init (rtx target, rtx vals)\n   /* Unfortunately the vec_init expander is not allowed to fail.  So\n      we have to implement the fallback ourselves.  */\n   for (i = 0; i < n_elts; i++)\n-    emit_insn (gen_rtx_SET (target,\n-\t\t\t    gen_rtx_UNSPEC (mode,\n-\t\t\t\t\t    gen_rtvec (3, XVECEXP (vals, 0, i),\n-\t\t\t\t\t\t       GEN_INT (i), target),\n-\t\t\t\t\t    UNSPEC_VEC_SET)));\n+    {\n+      rtx elem = XVECEXP (vals, 0, i);\n+      if (!general_operand (elem, GET_MODE (elem)))\n+\telem = force_reg (inner_mode, elem);\n+\n+      emit_insn (gen_rtx_SET (target,\n+\t\t\t      gen_rtx_UNSPEC (mode,\n+\t\t\t\t\t      gen_rtvec (3, elem,\n+\t\t\t\t\t\t\t GEN_INT (i), target),\n+\t\t\t\t\t      UNSPEC_VEC_SET)));\n+    }\n }\n \n /* Structure to hold the initial parameters for a compare_and_swap operation"}]}