{"sha": "fef96d8e2a370e826acdf914d51c88aa2657340a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmOTZkOGUyYTM3MGU4MjZhY2RmOTE0ZDUxYzg4YWEyNjU3MzQwYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:22:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:22:01Z"}, "message": "[11/46] Pass back a stmt_vec_info from vect_is_simple_use\n\nThis patch makes vect_is_simple_use pass back a stmt_vec_info to\nthose callers that want it.  Most users only need the stmt_vec_info\nbut some need the gimple stmt too.\n\nIt's probably high time we added a class to represent \"simple operands\"\ninstead, but I have a separate series that tries to clean up how\noperands are handled (with a view to allowing mixed vector sizes).\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vect_is_simple_use): Add an optional\n\tstmt_vec_info * parameter before the optional gimple **.\n\t* tree-vect-stmts.c (vect_is_simple_use): Likewise.\n\t(process_use, vect_get_vec_def_for_operand_1): Update callers.\n\t(vect_get_vec_def_for_operand, vectorizable_shift): Likewise.\n\t* tree-vect-loop.c (vectorizable_reduction): Likewise.\n\t(vectorizable_live_operation): Likewise.\n\t* tree-vect-patterns.c (type_conversion_p): Likewise.\n\t(vect_look_through_possible_promotion): Likewise.\n\t(vect_recog_rotate_pattern): Likewise.\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Likewise.\n\nFrom-SVN: r263126", "tree": {"sha": "1f0d6677d4d581b174517778c0b522f98005c80f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f0d6677d4d581b174517778c0b522f98005c80f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef96d8e2a370e826acdf914d51c88aa2657340a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef96d8e2a370e826acdf914d51c88aa2657340a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef96d8e2a370e826acdf914d51c88aa2657340a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef96d8e2a370e826acdf914d51c88aa2657340a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbe1b846648fad29d105e2e503120a4279a32593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe1b846648fad29d105e2e503120a4279a32593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe1b846648fad29d105e2e503120a4279a32593"}], "stats": {"total": 165, "additions": 90, "deletions": 75}, "files": [{"sha": "873b298d31474281f1df60e89beb972ece6b3f59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fef96d8e2a370e826acdf914d51c88aa2657340a", "patch": "@@ -1,3 +1,17 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_is_simple_use): Add an optional\n+\tstmt_vec_info * parameter before the optional gimple **.\n+\t* tree-vect-stmts.c (vect_is_simple_use): Likewise.\n+\t(process_use, vect_get_vec_def_for_operand_1): Update callers.\n+\t(vect_get_vec_def_for_operand, vectorizable_shift): Likewise.\n+\t* tree-vect-loop.c (vectorizable_reduction): Likewise.\n+\t(vectorizable_live_operation): Likewise.\n+\t* tree-vect-patterns.c (type_conversion_p): Likewise.\n+\t(vect_look_through_possible_promotion): Likewise.\n+\t(vect_recog_rotate_pattern): Likewise.\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Likewise.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (stmt_vec_info): Temporarily change from"}, {"sha": "1f8847f529f2f6aaca7db9e0e04f60238f96456f", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=fef96d8e2a370e826acdf914d51c88aa2657340a", "patch": "@@ -6090,7 +6090,6 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   int op_type;\n   optab optab;\n   tree new_temp = NULL_TREE;\n-  gimple *def_stmt;\n   enum vect_def_type dt, cond_reduc_dt = vect_unknown_def_type;\n   gimple *cond_reduc_def_stmt = NULL;\n   enum tree_code cond_reduc_op_code = ERROR_MARK;\n@@ -6324,13 +6323,14 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       if (i == 0 && code == COND_EXPR)\n         continue;\n \n-      is_simple_use = vect_is_simple_use (ops[i], loop_vinfo,\n-\t\t\t\t\t  &dts[i], &tem, &def_stmt);\n+      stmt_vec_info def_stmt_info;\n+      is_simple_use = vect_is_simple_use (ops[i], loop_vinfo, &dts[i], &tem,\n+\t\t\t\t\t  &def_stmt_info);\n       dt = dts[i];\n       gcc_assert (is_simple_use);\n       if (dt == vect_reduction_def)\n \t{\n-          reduc_def_stmt = def_stmt;\n+\t  reduc_def_stmt = def_stmt_info;\n \t  reduc_index = i;\n \t  continue;\n \t}\n@@ -6352,11 +6352,11 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \treturn false;\n \n       if (dt == vect_nested_cycle)\n-        {\n-          found_nested_cycle_def = true;\n-          reduc_def_stmt = def_stmt;\n-          reduc_index = i;\n-        }\n+\t{\n+\t  found_nested_cycle_def = true;\n+\t  reduc_def_stmt = def_stmt_info;\n+\t  reduc_index = i;\n+\t}\n \n       if (i == 1 && code == COND_EXPR)\n \t{\n@@ -6367,11 +6367,11 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t      cond_reduc_val = ops[i];\n \t    }\n \t  if (dt == vect_induction_def\n-\t      && def_stmt != NULL\n-\t      && is_nonwrapping_integer_induction (def_stmt, loop))\n+\t      && def_stmt_info\n+\t      && is_nonwrapping_integer_induction (def_stmt_info, loop))\n \t    {\n \t      cond_reduc_dt = dt;\n-\t      cond_reduc_def_stmt = def_stmt;\n+\t      cond_reduc_def_stmt = def_stmt_info;\n \t    }\n \t}\n     }\n@@ -7958,7 +7958,7 @@ vectorizable_live_operation (gimple *stmt,\n   else\n     {\n       enum vect_def_type dt = STMT_VINFO_DEF_TYPE (stmt_info);\n-      vec_lhs = vect_get_vec_def_for_operand_1 (stmt, dt);\n+      vec_lhs = vect_get_vec_def_for_operand_1 (stmt_info, dt);\n       gcc_checking_assert (ncopies == 1\n \t\t\t   || !LOOP_VINFO_FULLY_MASKED_P (loop_vinfo));\n "}, {"sha": "4ac8f9b4b39649ea2b41bc58eef2e84b197910e0", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=fef96d8e2a370e826acdf914d51c88aa2657340a", "patch": "@@ -250,7 +250,9 @@ type_conversion_p (tree name, gimple *use_stmt, bool check_sign,\n   enum vect_def_type dt;\n \n   stmt_vinfo = vinfo_for_stmt (use_stmt);\n-  if (!vect_is_simple_use (name, stmt_vinfo->vinfo, &dt, def_stmt))\n+  stmt_vec_info def_stmt_info;\n+  if (!vect_is_simple_use (name, stmt_vinfo->vinfo, &dt, &def_stmt_info,\n+\t\t\t   def_stmt))\n     return false;\n \n   if (dt != vect_internal_def\n@@ -371,9 +373,10 @@ vect_look_through_possible_promotion (vec_info *vinfo, tree op,\n   while (TREE_CODE (op) == SSA_NAME && INTEGRAL_TYPE_P (op_type))\n     {\n       /* See whether OP is simple enough to vectorize.  */\n+      stmt_vec_info def_stmt_info;\n       gimple *def_stmt;\n       vect_def_type dt;\n-      if (!vect_is_simple_use (op, vinfo, &dt, &def_stmt))\n+      if (!vect_is_simple_use (op, vinfo, &dt, &def_stmt_info, &def_stmt))\n \tbreak;\n \n       /* If OP is the input of a demotion, skip over it to see whether\n@@ -407,17 +410,15 @@ vect_look_through_possible_promotion (vec_info *vinfo, tree op,\n \t the cast is potentially vectorizable.  */\n       if (!def_stmt)\n \tbreak;\n-      if (dt == vect_internal_def)\n-\t{\n-\t  caster = vinfo_for_stmt (def_stmt);\n-\t  /* Ignore pattern statements, since we don't link uses for them.  */\n-\t  if (single_use_p\n-\t      && !STMT_VINFO_RELATED_STMT (caster)\n-\t      && !has_single_use (res))\n-\t    *single_use_p = false;\n-\t}\n-      else\n-\tcaster = NULL;\n+      caster = def_stmt_info;\n+\n+      /* Ignore pattern statements, since we don't link uses for them.  */\n+      if (caster\n+\t  && single_use_p\n+\t  && !STMT_VINFO_RELATED_STMT (caster)\n+\t  && !has_single_use (res))\n+\t*single_use_p = false;\n+\n       gassign *assign = dyn_cast <gassign *> (def_stmt);\n       if (!assign || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n \tbreak;\n@@ -1988,7 +1989,8 @@ vect_recog_rotate_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n       || !TYPE_UNSIGNED (type))\n     return NULL;\n \n-  if (!vect_is_simple_use (oprnd1, vinfo, &dt, &def_stmt))\n+  stmt_vec_info def_stmt_info;\n+  if (!vect_is_simple_use (oprnd1, vinfo, &dt, &def_stmt_info, &def_stmt))\n     return NULL;\n \n   if (dt != vect_internal_def"}, {"sha": "fbb419f3ee8f47240899284f2810dac8c5866572", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=fef96d8e2a370e826acdf914d51c88aa2657340a", "patch": "@@ -303,7 +303,6 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n   gimple *stmt = stmts[stmt_num];\n   tree oprnd;\n   unsigned int i, number_of_oprnds;\n-  gimple *def_stmt;\n   enum vect_def_type dt = vect_uninitialized_def;\n   bool pattern = false;\n   slp_oprnd_info oprnd_info;\n@@ -357,7 +356,8 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \n       oprnd_info = (*oprnds_info)[i];\n \n-      if (!vect_is_simple_use (oprnd, vinfo, &dt, &def_stmt))\n+      stmt_vec_info def_stmt_info;\n+      if (!vect_is_simple_use (oprnd, vinfo, &dt, &def_stmt_info))\n \t{\n \t  if (dump_enabled_p ())\n \t    {\n@@ -370,13 +370,10 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t  return -1;\n \t}\n \n-      /* Check if DEF_STMT is a part of a pattern in LOOP and get the def stmt\n-         from the pattern.  Check that all the stmts of the node are in the\n-         pattern.  */\n-      if (def_stmt && gimple_bb (def_stmt)\n-\t  && vect_stmt_in_region_p (vinfo, def_stmt)\n-\t  && vinfo_for_stmt (def_stmt)\n-\t  && is_pattern_stmt_p (vinfo_for_stmt (def_stmt)))\n+      /* Check if DEF_STMT_INFO is a part of a pattern in LOOP and get\n+\t the def stmt from the pattern.  Check that all the stmts of the\n+\t node are in the pattern.  */\n+      if (def_stmt_info && is_pattern_stmt_p (def_stmt_info))\n         {\n           pattern = true;\n           if (!first && !oprnd_info->first_pattern\n@@ -405,7 +402,7 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t      return 1;\n             }\n \n-          dt = STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt));\n+\t  dt = STMT_VINFO_DEF_TYPE (def_stmt_info);\n \n           if (dt == vect_unknown_def_type)\n             {\n@@ -415,7 +412,7 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n               return -1;\n             }\n \n-          switch (gimple_code (def_stmt))\n+\t  switch (gimple_code (def_stmt_info->stmt))\n             {\n             case GIMPLE_PHI:\n             case GIMPLE_ASSIGN:\n@@ -499,7 +496,7 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \tcase vect_reduction_def:\n \tcase vect_induction_def:\n \tcase vect_internal_def:\n-\t  oprnd_info->def_stmts.quick_push (def_stmt);\n+\t  oprnd_info->def_stmts.quick_push (def_stmt_info);\n \t  break;\n \n \tdefault:"}, {"sha": "c5524dd82f310bab9fb505f8f1c7fc7bdcbac559", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=fef96d8e2a370e826acdf914d51c88aa2657340a", "patch": "@@ -459,47 +459,38 @@ process_use (gimple *stmt, tree use, loop_vec_info loop_vinfo,\n \t     enum vect_relevant relevant, vec<gimple *> *worklist,\n \t     bool force)\n {\n-  struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n   stmt_vec_info dstmt_vinfo;\n   basic_block bb, def_bb;\n-  gimple *def_stmt;\n   enum vect_def_type dt;\n \n   /* case 1: we are only interested in uses that need to be vectorized.  Uses\n      that are used for address computation are not considered relevant.  */\n   if (!force && !exist_non_indexing_operands_for_use_p (use, stmt))\n      return true;\n \n-  if (!vect_is_simple_use (use, loop_vinfo, &dt, &def_stmt))\n+  if (!vect_is_simple_use (use, loop_vinfo, &dt, &dstmt_vinfo))\n     {\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n                          \"not vectorized: unsupported use in stmt.\\n\");\n       return false;\n     }\n \n-  if (!def_stmt || gimple_nop_p (def_stmt))\n+  if (!dstmt_vinfo)\n     return true;\n \n-  def_bb = gimple_bb (def_stmt);\n-  if (!flow_bb_inside_loop_p (loop, def_bb))\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location, \"def_stmt is out of loop.\\n\");\n-      return true;\n-    }\n+  def_bb = gimple_bb (dstmt_vinfo->stmt);\n \n-  /* case 2: A reduction phi (STMT) defined by a reduction stmt (DEF_STMT).\n-     DEF_STMT must have already been processed, because this should be the\n+  /* case 2: A reduction phi (STMT) defined by a reduction stmt (DSTMT_VINFO).\n+     DSTMT_VINFO must have already been processed, because this should be the\n      only way that STMT, which is a reduction-phi, was put in the worklist,\n-     as there should be no other uses for DEF_STMT in the loop.  So we just\n+     as there should be no other uses for DSTMT_VINFO in the loop.  So we just\n      check that everything is as expected, and we are done.  */\n-  dstmt_vinfo = vinfo_for_stmt (def_stmt);\n   bb = gimple_bb (stmt);\n   if (gimple_code (stmt) == GIMPLE_PHI\n       && STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_reduction_def\n-      && gimple_code (def_stmt) != GIMPLE_PHI\n+      && gimple_code (dstmt_vinfo->stmt) != GIMPLE_PHI\n       && STMT_VINFO_DEF_TYPE (dstmt_vinfo) == vect_reduction_def\n       && bb->loop_father == def_bb->loop_father)\n     {\n@@ -514,7 +505,7 @@ process_use (gimple *stmt, tree use, loop_vec_info loop_vinfo,\n \n   /* case 3a: outer-loop stmt defining an inner-loop stmt:\n \touter-loop-header-bb:\n-\t\td = def_stmt\n+\t\td = dstmt_vinfo\n \tinner-loop:\n \t\tstmt # use (d)\n \touter-loop-tail-bb:\n@@ -554,7 +545,7 @@ process_use (gimple *stmt, tree use, loop_vec_info loop_vinfo,\n \touter-loop-header-bb:\n \t\t...\n \tinner-loop:\n-\t\td = def_stmt\n+\t\td = dstmt_vinfo\n \touter-loop-tail-bb (or outer-loop-exit-bb in double reduction):\n \t\tstmt # use (d)\t\t*/\n   else if (flow_loop_nested_p (bb->loop_father, def_bb->loop_father))\n@@ -601,7 +592,7 @@ process_use (gimple *stmt, tree use, loop_vec_info loop_vinfo,\n     }\n \n \n-  vect_mark_relevant (worklist, def_stmt, relevant, false);\n+  vect_mark_relevant (worklist, dstmt_vinfo, relevant, false);\n   return true;\n }\n \n@@ -1563,7 +1554,9 @@ vect_get_vec_def_for_operand (tree op, gimple *stmt, tree vectype)\n       dump_printf (MSG_NOTE, \"\\n\");\n     }\n \n-  is_simple_use = vect_is_simple_use (op, loop_vinfo, &dt, &def_stmt);\n+  stmt_vec_info def_stmt_info;\n+  is_simple_use = vect_is_simple_use (op, loop_vinfo, &dt,\n+\t\t\t\t      &def_stmt_info, &def_stmt);\n   gcc_assert (is_simple_use);\n   if (def_stmt && dump_enabled_p ())\n     {\n@@ -1588,7 +1581,7 @@ vect_get_vec_def_for_operand (tree op, gimple *stmt, tree vectype)\n       return vect_init_vector (stmt, op, vector_type, NULL);\n     }\n   else\n-    return vect_get_vec_def_for_operand_1 (def_stmt, dt);\n+    return vect_get_vec_def_for_operand_1 (def_stmt_info, dt);\n }\n \n \n@@ -5479,7 +5472,9 @@ vectorizable_shift (gimple *stmt, gimple_stmt_iterator *gsi,\n     return false;\n \n   op1 = gimple_assign_rhs2 (stmt);\n-  if (!vect_is_simple_use (op1, vinfo, &dt[1], &op1_vectype))\n+  stmt_vec_info op1_def_stmt_info;\n+  if (!vect_is_simple_use (op1, vinfo, &dt[1], &op1_vectype,\n+\t\t\t   &op1_def_stmt_info))\n     {\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5524,12 +5519,8 @@ vectorizable_shift (gimple *stmt, gimple_stmt_iterator *gsi,\n       /* If the shift amount is computed by a pattern stmt we cannot\n          use the scalar amount directly thus give up and use a vector\n \t shift.  */\n-      if (dt[1] == vect_internal_def)\n-\t{\n-\t  gimple *def = SSA_NAME_DEF_STMT (op1);\n-\t  if (is_pattern_stmt_p (vinfo_for_stmt (def)))\n-\t    scalar_shift_arg = false;\n-\t}\n+      if (op1_def_stmt_info && is_pattern_stmt_p (op1_def_stmt_info))\n+\tscalar_shift_arg = false;\n     }\n   else\n     {\n@@ -10051,7 +10042,10 @@ get_same_sized_vectype (tree scalar_type, tree vector_type)\n    VINFO - the vect info of the loop or basic block that is being vectorized.\n    OPERAND - operand in the loop or bb.\n    Output:\n-   DEF_STMT_OUT (optional) - the defining stmt in case OPERAND is an SSA_NAME.\n+   DEF_STMT_INFO_OUT (optional) - information about the defining stmt in\n+     case OPERAND is an SSA_NAME that is defined in the vectorizable region\n+   DEF_STMT_OUT (optional) - the defining stmt in case OPERAND is an SSA_NAME;\n+     the definition could be anywhere in the function\n    DT - the type of definition\n \n    Returns whether a stmt with OPERAND can be vectorized.\n@@ -10064,8 +10058,10 @@ get_same_sized_vectype (tree scalar_type, tree vector_type)\n \n bool\n vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n-\t\t    gimple **def_stmt_out)\n+\t\t    stmt_vec_info *def_stmt_info_out, gimple **def_stmt_out)\n {\n+  if (def_stmt_info_out)\n+    *def_stmt_info_out = NULL;\n   if (def_stmt_out)\n     *def_stmt_out = NULL;\n   *dt = vect_unknown_def_type;\n@@ -10113,6 +10109,8 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n \t      *dt = vect_unknown_def_type;\n \t      break;\n \t    }\n+\t  if (def_stmt_info_out)\n+\t    *def_stmt_info_out = stmt_vinfo;\n \t}\n       if (def_stmt_out)\n \t*def_stmt_out = def_stmt;\n@@ -10175,14 +10173,18 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n \n bool\n vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n-\t\t    tree *vectype, gimple **def_stmt_out)\n+\t\t    tree *vectype, stmt_vec_info *def_stmt_info_out,\n+\t\t    gimple **def_stmt_out)\n {\n+  stmt_vec_info def_stmt_info;\n   gimple *def_stmt;\n-  if (!vect_is_simple_use (operand, vinfo, dt, &def_stmt))\n+  if (!vect_is_simple_use (operand, vinfo, dt, &def_stmt_info, &def_stmt))\n     return false;\n \n   if (def_stmt_out)\n     *def_stmt_out = def_stmt;\n+  if (def_stmt_info_out)\n+    *def_stmt_info_out = def_stmt_info;\n \n   /* Now get a vector type if the def is internal, otherwise supply\n      NULL_TREE and leave it up to the caller to figure out a proper\n@@ -10193,8 +10195,7 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n       || *dt == vect_double_reduction_def\n       || *dt == vect_nested_cycle)\n     {\n-      stmt_vec_info stmt_info = vinfo_for_stmt (def_stmt);\n-      *vectype = STMT_VINFO_VECTYPE (stmt_info);\n+      *vectype = STMT_VINFO_VECTYPE (def_stmt_info);\n       gcc_assert (*vectype != NULL_TREE);\n       if (dump_enabled_p ())\n \t{"}, {"sha": "e302d3524a2898ca27fe3492693f489f5a46047a", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef96d8e2a370e826acdf914d51c88aa2657340a/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=fef96d8e2a370e826acdf914d51c88aa2657340a", "patch": "@@ -1532,9 +1532,10 @@ extern tree get_mask_type_for_scalar_type (tree);\n extern tree get_same_sized_vectype (tree, tree);\n extern bool vect_get_loop_mask_type (loop_vec_info);\n extern bool vect_is_simple_use (tree, vec_info *, enum vect_def_type *,\n-\t\t\t\tgimple ** = NULL);\n+\t\t\t\tstmt_vec_info * = NULL, gimple ** = NULL);\n extern bool vect_is_simple_use (tree, vec_info *, enum vect_def_type *,\n-\t\t\t\ttree *, gimple ** = NULL);\n+\t\t\t\ttree *, stmt_vec_info * = NULL,\n+\t\t\t\tgimple ** = NULL);\n extern bool supportable_widening_operation (enum tree_code, gimple *, tree,\n \t\t\t\t\t    tree, enum tree_code *,\n \t\t\t\t\t    enum tree_code *, int *,"}]}