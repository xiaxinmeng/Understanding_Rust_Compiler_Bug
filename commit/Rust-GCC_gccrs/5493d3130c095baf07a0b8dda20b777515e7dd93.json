{"sha": "5493d3130c095baf07a0b8dda20b777515e7dd93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5M2QzMTMwYzA5NWJhZjA3YTBiOGRkYTIwYjc3NzUxNWU3ZGQ5Mw==", "commit": {"author": {"name": "Roman Gareev", "email": "gareevroman@gmail.com", "date": "2014-07-22T06:59:34Z"}, "committer": {"name": "Roman Gareev", "email": "romangareev@gcc.gnu.org", "date": "2014-07-22T06:59:34Z"}, "message": "graphite-isl-ast-to-gimple.c: Add inclusion of gimple-ssa.h, tree-into-ssa.h.\n\n\n\tgcc/\n\t* graphite-isl-ast-to-gimple.c:\n\tAdd inclusion of gimple-ssa.h, tree-into-ssa.h.\n\t(ivs_params_clear):\n\t(build_iv_mapping): New function.\n\t(translate_isl_ast_node_user): Likewise.\n\t(translate_isl_ast): Add calling of translate_isl_ast_node_user.\n\n\tgcc/testsuite/gcc.dg/graphite/\n\t* isl-ast-gen-single-loop-1.c: New testcase.\n\t* isl-ast-gen-single-loop-2.c: New testcase.\n\t* isl-ast-gen-single-loop-3.c: New testcase.\n\nFrom-SVN: r212904", "tree": {"sha": "4b1fcde9114e66c39ad83b66893bd666f6e0e942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b1fcde9114e66c39ad83b66893bd666f6e0e942"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5493d3130c095baf07a0b8dda20b777515e7dd93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5493d3130c095baf07a0b8dda20b777515e7dd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5493d3130c095baf07a0b8dda20b777515e7dd93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5493d3130c095baf07a0b8dda20b777515e7dd93/comments", "author": {"login": "gareevroman", "id": 6114710, "node_id": "MDQ6VXNlcjYxMTQ3MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6114710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gareevroman", "html_url": "https://github.com/gareevroman", "followers_url": "https://api.github.com/users/gareevroman/followers", "following_url": "https://api.github.com/users/gareevroman/following{/other_user}", "gists_url": "https://api.github.com/users/gareevroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/gareevroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gareevroman/subscriptions", "organizations_url": "https://api.github.com/users/gareevroman/orgs", "repos_url": "https://api.github.com/users/gareevroman/repos", "events_url": "https://api.github.com/users/gareevroman/events{/privacy}", "received_events_url": "https://api.github.com/users/gareevroman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff9fdab693d9398898fe8ec4e442a528537e5d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9fdab693d9398898fe8ec4e442a528537e5d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9fdab693d9398898fe8ec4e442a528537e5d1e"}], "stats": {"total": 179, "additions": 178, "deletions": 1}, "files": [{"sha": "8a6219e435e895e9b54da49eda88adce8701fa91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5493d3130c095baf07a0b8dda20b777515e7dd93", "patch": "@@ -1,3 +1,17 @@\n+2014-07-22  Roman Gareev  <gareevroman@gmail.com>\n+\n+\t* graphite-isl-ast-to-gimple.c:\n+\tAdd inclusion of gimple-ssa.h, tree-into-ssa.h.\n+\t(ivs_params_clear):\n+\t(build_iv_mapping): New function.\n+\t(translate_isl_ast_node_user): Likewise.\n+\t(translate_isl_ast): Add calling of translate_isl_ast_node_user.\n+\n+\ttestsuite/gcc.dg/graphite/\n+\t* isl-ast-gen-single-loop-1.c: New testcase.\n+\t* isl-ast-gen-single-loop-2.c: New testcase.\n+\t* isl-ast-gen-single-loop-3.c: New testcase.\n+\n 2014-07-21  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR target/55701"}, {"sha": "e567cc6756336e57fbec5bb1ac985d7938bab8bc", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=5493d3130c095baf07a0b8dda20b777515e7dd93", "patch": "@@ -51,6 +51,8 @@ extern \"C\" {\n #include \"sese.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"gimple-ssa.h\"\n+#include \"tree-into-ssa.h\"\n #include <map>\n \n #ifdef HAVE_cloog\n@@ -547,6 +549,73 @@ translate_isl_ast_node_for (loop_p context_loop, __isl_keep isl_ast_node *node,\n   return last_e;\n }\n \n+/* Inserts in iv_map a tuple (OLD_LOOP->num, NEW_NAME) for the induction\n+   variables of the loops around GBB in SESE.\n+ \n+   FIXME: Instead of using a vec<tree> that maps each loop id to a possible\n+   chrec, we could consider using a map<int, tree> that maps loop ids to the\n+   corresponding tree expressions.  */\n+\n+static void\n+build_iv_mapping (vec<tree> iv_map, gimple_bb_p gbb,\n+\t\t  __isl_keep isl_ast_expr *user_expr, ivs_params &ip,\n+\t\t  sese region)\n+{\n+  gcc_assert (isl_ast_expr_get_type (user_expr) == isl_ast_expr_op &&\n+              isl_ast_expr_get_op_type (user_expr) == isl_ast_op_call);\n+  int i;\n+  isl_ast_expr *arg_expr;\n+  for (i = 1; i < isl_ast_expr_get_op_n_arg (user_expr); i++)\n+    {\n+      arg_expr = isl_ast_expr_get_op_arg (user_expr, i);\n+      tree type =\n+        build_nonstandard_integer_type (graphite_expression_type_precision, 0);\n+      tree t = gcc_expression_from_isl_expression (type, arg_expr, ip);\n+      loop_p old_loop = gbb_loop_at_index (gbb, region, i - 1);\n+      iv_map[old_loop->num] = t;\n+    }\n+\n+}\n+\n+/* Translates an isl_ast_node_user to Gimple.\n+\n+   FIXME: We should remove iv_map.create (loop->num + 1), if it is possible.  */\n+\n+static edge\n+translate_isl_ast_node_user (__isl_keep isl_ast_node *node,\n+\t\t\t     edge next_e, ivs_params &ip)\n+{\n+  gcc_assert (isl_ast_node_get_type (node) == isl_ast_node_user);\n+  isl_ast_expr *user_expr = isl_ast_node_user_get_expr (node);\n+  isl_ast_expr *name_expr = isl_ast_expr_get_op_arg (user_expr, 0);\n+  gcc_assert (isl_ast_expr_get_type (name_expr) == isl_ast_expr_id);\n+  isl_id *name_id = isl_ast_expr_get_id (name_expr);\n+  poly_bb_p pbb = (poly_bb_p) isl_id_get_user (name_id);\n+  gcc_assert (pbb);\n+  gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n+  vec<tree> iv_map;\n+  isl_ast_expr_free (name_expr);\n+  isl_id_free (name_id);\n+\n+  gcc_assert (GBB_BB (gbb) != ENTRY_BLOCK_PTR_FOR_FN (cfun) &&\n+\t      \"The entry block should not even appear within a scop\");\n+\n+  loop_p loop = gbb_loop (gbb);\n+  iv_map.create (loop->num + 1);\n+  iv_map.safe_grow_cleared (loop->num + 1);\n+\n+  build_iv_mapping (iv_map, gbb, user_expr, ip, SCOP_REGION (pbb->scop));\n+  isl_ast_expr_free (user_expr);\n+  next_e = copy_bb_and_scalar_dependences (GBB_BB (gbb),\n+\t\t\t\t\t   SCOP_REGION (pbb->scop), next_e,\n+\t\t\t\t\t   iv_map,\n+\t\t\t\t\t   &graphite_regenerate_error);\n+  iv_map.release ();\n+  mark_virtual_operands_for_renaming (cfun);\n+  update_ssa (TODO_update_ssa);\n+  return next_e;\n+}\n+\n /* Translates an ISL AST node NODE to GCC representation in the\n    context of a SESE.  */\n \n@@ -567,7 +636,7 @@ translate_isl_ast (loop_p context_loop, __isl_keep isl_ast_node *node,\n       return next_e;\n \n     case isl_ast_node_user:\n-      return next_e;\n+      return translate_isl_ast_node_user (node, next_e, ip);\n \n     case isl_ast_node_block:\n       return next_e;"}, {"sha": "c1387ce0328b214f4bc5205b592bfbcfa53d93f8", "filename": "gcc/testsuite/gcc.dg/graphite/isl-ast-gen-single-loop-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-1.c?ref=5493d3130c095baf07a0b8dda20b777515e7dd93", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fgraphite-identity -fgraphite-code-generator=isl\" } */\n+\n+int\n+foo ()\n+{\n+  int i, res;\n+\n+  for (i = 0, res = 0; i < 50; i++)\n+      res += i;\n+\n+  return res;\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{ \n+  int res = foo ();\n+\n+  if (res != 1225)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "13efdfedd5828766f4136cfb91a714d4019d799f", "filename": "gcc/testsuite/gcc.dg/graphite/isl-ast-gen-single-loop-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-2.c?ref=5493d3130c095baf07a0b8dda20b777515e7dd93", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fgraphite-identity -fgraphite-code-generator=isl\" } */\n+int n = 50;\n+\n+void\n+foo (int a[])\n+{\n+  int i;\n+  for (i = n - 20; i < 50; i++)\n+    a[i] = i;\n+}\n+\n+int\n+array_sum (int a[])\n+{\n+  int i;\n+  int res = 0;\n+  for(i = n - 20; i < n; i *= 2)\n+    res += a[i];\n+  return res;\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int a[50];\n+  foo (a);\n+  int res = array_sum (a);\n+  if (res != 30)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "50b51e64fcd391e1955e4a549e0fd68365cfcf4e", "filename": "gcc/testsuite/gcc.dg/graphite/isl-ast-gen-single-loop-3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5493d3130c095baf07a0b8dda20b777515e7dd93/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fisl-ast-gen-single-loop-3.c?ref=5493d3130c095baf07a0b8dda20b777515e7dd93", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fgraphite-identity -fgraphite-code-generator=isl\" } */\n+int n = 50;\n+\n+void\n+foo (int a[])\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    a[i] = i;\n+}\n+\n+int\n+array_sum (int a[])\n+{\n+  int i;\n+  int res = 0;\n+  for(i = 1; i < n; i *= 2)\n+    res += a[i];\n+  return res;\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int a[50];\n+  foo (a);\n+  int res = array_sum (a);\n+  if (res != 63)\n+    abort ();\n+  return 0;\n+}"}]}