{"sha": "b2b2f160ae25c1479e83ed8a783239b929b93e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiMmYxNjBhZTI1YzE0NzllODNlZDhhNzgzMjM5YjkyOWI5M2UzYw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-04-14T05:49:15Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-04-14T05:49:15Z"}, "message": "tree-ssa-tail-merge.c (stmt_local_def): New function, factored out of same_succ_hash, with local_def inlined.\n\n2012-04-14  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-ssa-tail-merge.c (stmt_local_def): New function, factored out of\n\tsame_succ_hash, with local_def inlined.  Use SINGLE_SSA_DEF_OPERAND.\n\tUse FOR_EACH_IMM_USE_FAST instead of FOR_EACH_IMM_USE_STMT.  Remove use\n\tof find_edge.\n\t(gsi_advance_fw_nondebug_nonlocal): New function.\n\t(local_def): Removed function.\n\t(same_succ_hash): Use stmt_local_def.\n\t(same_succ_equal): Use gsi_advance_fw_nondebug_nonlocal.\n\t(gsi_advance_bw_nondebug_nonlocal): Use stmt_local_def.\n\nFrom-SVN: r186447", "tree": {"sha": "fb5f61942d6c4ae6928b3fb23dadeda02b007b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb5f61942d6c4ae6928b3fb23dadeda02b007b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b2f160ae25c1479e83ed8a783239b929b93e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b2f160ae25c1479e83ed8a783239b929b93e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b2f160ae25c1479e83ed8a783239b929b93e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b2f160ae25c1479e83ed8a783239b929b93e3c/comments", "author": null, "committer": null, "parents": [{"sha": "6a9218cc9ce4bbf00fb8cd6b9dbdca8f59476d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9218cc9ce4bbf00fb8cd6b9dbdca8f59476d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9218cc9ce4bbf00fb8cd6b9dbdca8f59476d11"}], "stats": {"total": 116, "additions": 79, "deletions": 37}, "files": [{"sha": "9d64865d88df421a0357659c65d2d3ff8f01a166", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b2f160ae25c1479e83ed8a783239b929b93e3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b2f160ae25c1479e83ed8a783239b929b93e3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2b2f160ae25c1479e83ed8a783239b929b93e3c", "patch": "@@ -1,3 +1,15 @@\n+2012-04-14  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-ssa-tail-merge.c (stmt_local_def): New function, factored out of\n+\tsame_succ_hash, with local_def inlined.  Use SINGLE_SSA_DEF_OPERAND.\n+\tUse FOR_EACH_IMM_USE_FAST instead of FOR_EACH_IMM_USE_STMT.  Remove use\n+\tof find_edge.\n+\t(gsi_advance_fw_nondebug_nonlocal): New function.\n+\t(local_def): Removed function.\n+\t(same_succ_hash): Use stmt_local_def.\n+\t(same_succ_equal): Use gsi_advance_fw_nondebug_nonlocal.\n+\t(gsi_advance_bw_nondebug_nonlocal): Use stmt_local_def.\n+\n 2012-04-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386-c.c (ix86_target_macros): Define _ILP32"}, {"sha": "210cb1346242f79e1fa7fcc99bfe7ac93bc56786", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 67, "deletions": 37, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b2f160ae25c1479e83ed8a783239b929b93e3c/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b2f160ae25c1479e83ed8a783239b929b93e3c/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=b2b2f160ae25c1479e83ed8a783239b929b93e3c", "patch": "@@ -269,6 +269,67 @@ struct aux_bb_info\n #define BB_VOP_AT_EXIT(bb) (((struct aux_bb_info *)bb->aux)->vop_at_exit)\n #define BB_DEP_BB(bb) (((struct aux_bb_info *)bb->aux)->dep_bb)\n \n+/* Returns true if the only effect a statement STMT has, is to define locally\n+   used SSA_NAMEs.  */\n+\n+static bool\n+stmt_local_def (gimple stmt)\n+{\n+  basic_block bb, def_bb;\n+  imm_use_iterator iter;\n+  use_operand_p use_p;\n+  tree val;\n+  def_operand_p def_p;\n+\n+  if (gimple_has_side_effects (stmt))\n+    return false;\n+\n+  def_p = SINGLE_SSA_DEF_OPERAND (stmt, SSA_OP_DEF);\n+  if (def_p == NULL)\n+    return false;\n+\n+  val = DEF_FROM_PTR (def_p);\n+  if (val == NULL_TREE || TREE_CODE (val) != SSA_NAME)\n+    return false;\n+\n+  def_bb = gimple_bb (stmt);\n+\n+  FOR_EACH_IMM_USE_FAST (use_p, iter, val)\n+    {\n+      if (is_gimple_debug (USE_STMT (use_p)))\n+\tcontinue;\n+      bb = gimple_bb (USE_STMT (use_p));\n+      if (bb == def_bb)\n+\tcontinue;\n+\n+      if (gimple_code (USE_STMT (use_p)) == GIMPLE_PHI\n+\t  && EDGE_PRED (bb, PHI_ARG_INDEX_FROM_USE (use_p))->src == def_bb)\n+\tcontinue;\n+\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+/* Let GSI skip forwards over local defs.  */\n+\n+static void\n+gsi_advance_fw_nondebug_nonlocal (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt;\n+\n+  while (true)\n+    {\n+      if (gsi_end_p (*gsi))\n+\treturn;\n+      stmt = gsi_stmt (*gsi);\n+      if (!stmt_local_def (stmt))\n+\treturn;\n+\tgsi_next_nondebug (gsi);\n+    }\n+}\n+\n /* VAL1 and VAL2 are either:\n    - uses in BB1 and BB2, or\n    - phi alternatives for BB1 and BB2.\n@@ -352,39 +413,6 @@ stmt_update_dep_bb (gimple stmt)\n     update_dep_bb (gimple_bb (stmt), USE_FROM_PTR (use));\n }\n \n-/* Returns whether VAL is used in the same bb as in which it is defined, or\n-   in the phi of a successor bb.  */\n-\n-static bool\n-local_def (tree val)\n-{\n-  gimple stmt, def_stmt;\n-  basic_block bb, def_bb;\n-  imm_use_iterator iter;\n-  bool res;\n-\n-  if (TREE_CODE (val) != SSA_NAME)\n-    return false;\n-  def_stmt = SSA_NAME_DEF_STMT (val);\n-  def_bb = gimple_bb (def_stmt);\n-\n-  res = true;\n-  FOR_EACH_IMM_USE_STMT (stmt, iter, val)\n-    {\n-      if (is_gimple_debug (stmt))\n-\tcontinue;\n-      bb = gimple_bb (stmt);\n-      if (bb == def_bb)\n-\tcontinue;\n-      if (gimple_code (stmt) == GIMPLE_PHI\n-\t  && find_edge (def_bb, bb))\n-\tcontinue;\n-      res = false;\n-      BREAK_FROM_IMM_USE_STMT (iter);\n-    }\n-  return res;\n-}\n-\n /* Calculates hash value for same_succ VE.  */\n \n static hashval_t\n@@ -408,8 +436,7 @@ same_succ_hash (const void *ve)\n     {\n       stmt = gsi_stmt (gsi);\n       stmt_update_dep_bb (stmt);\n-      if (is_gimple_assign (stmt) && local_def (gimple_get_lhs (stmt))\n-\t  && !gimple_has_side_effects (stmt))\n+      if (stmt_local_def (stmt))\n \tcontinue;\n       size++;\n \n@@ -525,6 +552,8 @@ same_succ_equal (const void *ve1, const void *ve2)\n \n   gsi1 = gsi_start_nondebug_bb (bb1);\n   gsi2 = gsi_start_nondebug_bb (bb2);\n+  gsi_advance_fw_nondebug_nonlocal (&gsi1);\n+  gsi_advance_fw_nondebug_nonlocal (&gsi2);\n   while (!(gsi_end_p (gsi1) || gsi_end_p (gsi2)))\n     {\n       s1 = gsi_stmt (gsi1);\n@@ -535,6 +564,8 @@ same_succ_equal (const void *ve1, const void *ve2)\n \treturn 0;\n       gsi_next_nondebug (&gsi1);\n       gsi_next_nondebug (&gsi2);\n+      gsi_advance_fw_nondebug_nonlocal (&gsi1);\n+      gsi_advance_fw_nondebug_nonlocal (&gsi2);\n     }\n \n   return 1;\n@@ -1148,8 +1179,7 @@ gsi_advance_bw_nondebug_nonlocal (gimple_stmt_iterator *gsi, tree *vuse,\n \t    *vuse_escaped = true;\n \t}\n \n-      if (!(is_gimple_assign (stmt) && local_def (gimple_get_lhs (stmt))\n-\t    && !gimple_has_side_effects (stmt)))\n+      if (!stmt_local_def (stmt))\n \treturn;\n       gsi_prev_nondebug (gsi);\n     }"}]}