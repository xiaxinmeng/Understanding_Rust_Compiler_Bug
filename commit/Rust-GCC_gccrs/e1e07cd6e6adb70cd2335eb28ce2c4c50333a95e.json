{"sha": "e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFlMDdjZDZlNmFkYjcwY2QyMzM1ZWIyOGNlMmM0YzUwMzMzYTk1ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2014-03-19T03:38:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-03-19T03:38:21Z"}, "message": "re PR target/60563 (FAIL: g++.dg/ext/sync-4.C on *-apple-darwin*)\n\n\tPR target/60563\n\t* g++.dg/ext/sync-4.C (int32_t): Remove typedef.\n\t(ditype): Rename typedef from int64_t.\n\nFrom-SVN: r208674", "tree": {"sha": "e7923df52d3cb8a11db7f1bd0ea588fadfa757d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7923df52d3cb8a11db7f1bd0ea588fadfa757d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e/comments", "author": null, "committer": null, "parents": [{"sha": "54b4a2231c5d8bba31d7b89489ba49f098310f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b4a2231c5d8bba31d7b89489ba49f098310f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b4a2231c5d8bba31d7b89489ba49f098310f24"}], "stats": {"total": 105, "additions": 55, "deletions": 50}, "files": [{"sha": "d41d926f858d987caba17467be66c78ebf6c1840", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e", "patch": "@@ -1,3 +1,9 @@\n+2014-03-18  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR target/60563\n+\t* g++.dg/ext/sync-4.C (int32_t): Remove typedef.\n+\t(ditype): Rename typedef from int64_t.\n+\n 2014-03-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/55383"}, {"sha": "24bc663999186031e097b914afdf4df23b7d1b3b", "filename": "gcc/testsuite/g++.dg/ext/sync-4.C", "status": "modified", "additions": 49, "deletions": 50, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsync-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsync-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsync-4.C?ref=e1e07cd6e6adb70cd2335eb28ce2c4c50333a95e", "patch": "@@ -8,8 +8,7 @@\n #include <stdlib.h>\n #include <signal.h>\n \n-typedef int int32_t __attribute__ ((mode (SI)));\n-typedef int int64_t __attribute__ ((mode (DI)));\n+typedef int ditype __attribute__ ((mode (DI)));\n \n #define FN(IDX, RET, CALL)\t\t\t\t\t\\\n static RET f ## IDX (void *p) __attribute__ ((noinline));\t\\\n@@ -32,54 +31,54 @@ t ## IDX ()\t\t\t\t\t\t\t\\\n   abort();\t\t\t\t\t\t\t\\\n }\n \n-FN(1, int64_t, (__sync_fetch_and_add((int64_t*)p, 1)))\n-FN(2, int64_t, (__sync_fetch_and_sub((int64_t*)p, 1)))\n-FN(3, int64_t, (__sync_fetch_and_or((int64_t*)p, 1)))\n-FN(4, int64_t, (__sync_fetch_and_and((int64_t*)p, 1)))\n-FN(5, int64_t, (__sync_fetch_and_xor((int64_t*)p, 1)))\n-FN(6, int64_t, (__sync_fetch_and_nand((int64_t*)p, 1)))\n-\n-FN( 7, int64_t, (__sync_add_and_fetch((int64_t*)p, 1)))\n-FN( 8, int64_t, (__sync_sub_and_fetch((int64_t*)p, 1)))\n-FN( 9, int64_t, (__sync_or_and_fetch((int64_t*)p, 1)))\n-FN(10, int64_t, (__sync_and_and_fetch((int64_t*)p, 1)))\n-FN(11, int64_t, (__sync_xor_and_fetch((int64_t*)p, 1)))\n-FN(12, int64_t, (__sync_nand_and_fetch((int64_t*)p, 1)))\n-\n-FN(13, bool, (__sync_bool_compare_and_swap((int64_t*)p, 1, 2)))\n-FN(14, int64_t, (__sync_val_compare_and_swap((int64_t*)p, 1, 2)))\n-\n-FN(15, int64_t, (__sync_lock_test_and_set((int64_t*)p, 1)))\n-FN(16, void, (__sync_lock_release((int64_t*)p)))\n-\n-FN(17, bool, (__atomic_test_and_set((int64_t*)p, __ATOMIC_SEQ_CST)))\n-FN(18, void, (__atomic_clear((int64_t*)p, __ATOMIC_SEQ_CST)))\n-\n-FN(19, void, (__atomic_exchange((int64_t*)p, (int64_t*)0, (int64_t*)0, __ATOMIC_SEQ_CST)))\n-FN(20, int64_t, (__atomic_exchange_n((int64_t*)p, 1, 2)))\n-\n-FN(21, void, (__atomic_load((int64_t*)p, (int64_t*)0, __ATOMIC_SEQ_CST)))\n-FN(22, int64_t, (__atomic_load_n((int64_t*)p, __ATOMIC_SEQ_CST)))\n-\n-FN(23, bool, (__atomic_compare_exchange((int64_t*)p, (int64_t*)0, (int64_t*)0, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)))\n-FN(24, bool, (__atomic_compare_exchange_n((int64_t*)p, (int64_t*)0, 1, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)))\n-\n-FN(25, void, (__atomic_store((int64_t*)p, (int64_t*)0, __ATOMIC_SEQ_CST)))\n-FN(26, void, (__atomic_store_n((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-\n-FN(27, int64_t, (__atomic_add_fetch((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(28, int64_t, (__atomic_sub_fetch((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(29, int64_t, (__atomic_and_fetch((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(30, int64_t, (__atomic_nand_fetch((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(31, int64_t, (__atomic_xor_fetch((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(32, int64_t, (__atomic_or_fetch((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-\n-FN(33, int64_t, (__atomic_fetch_add((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(34, int64_t, (__atomic_fetch_sub((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(35, int64_t, (__atomic_fetch_and((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(36, int64_t, (__atomic_fetch_nand((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(37, int64_t, (__atomic_fetch_xor((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n-FN(38, int64_t, (__atomic_fetch_or((int64_t*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(1, ditype, (__sync_fetch_and_add((ditype*)p, 1)))\n+FN(2, ditype, (__sync_fetch_and_sub((ditype*)p, 1)))\n+FN(3, ditype, (__sync_fetch_and_or((ditype*)p, 1)))\n+FN(4, ditype, (__sync_fetch_and_and((ditype*)p, 1)))\n+FN(5, ditype, (__sync_fetch_and_xor((ditype*)p, 1)))\n+FN(6, ditype, (__sync_fetch_and_nand((ditype*)p, 1)))\n+\n+FN( 7, ditype, (__sync_add_and_fetch((ditype*)p, 1)))\n+FN( 8, ditype, (__sync_sub_and_fetch((ditype*)p, 1)))\n+FN( 9, ditype, (__sync_or_and_fetch((ditype*)p, 1)))\n+FN(10, ditype, (__sync_and_and_fetch((ditype*)p, 1)))\n+FN(11, ditype, (__sync_xor_and_fetch((ditype*)p, 1)))\n+FN(12, ditype, (__sync_nand_and_fetch((ditype*)p, 1)))\n+\n+FN(13, bool, (__sync_bool_compare_and_swap((ditype*)p, 1, 2)))\n+FN(14, ditype, (__sync_val_compare_and_swap((ditype*)p, 1, 2)))\n+\n+FN(15, ditype, (__sync_lock_test_and_set((ditype*)p, 1)))\n+FN(16, void, (__sync_lock_release((ditype*)p)))\n+\n+FN(17, bool, (__atomic_test_and_set((ditype*)p, __ATOMIC_SEQ_CST)))\n+FN(18, void, (__atomic_clear((ditype*)p, __ATOMIC_SEQ_CST)))\n+\n+FN(19, void, (__atomic_exchange((ditype*)p, (ditype*)0, (ditype*)0, __ATOMIC_SEQ_CST)))\n+FN(20, ditype, (__atomic_exchange_n((ditype*)p, 1, 2)))\n+\n+FN(21, void, (__atomic_load((ditype*)p, (ditype*)0, __ATOMIC_SEQ_CST)))\n+FN(22, ditype, (__atomic_load_n((ditype*)p, __ATOMIC_SEQ_CST)))\n+\n+FN(23, bool, (__atomic_compare_exchange((ditype*)p, (ditype*)0, (ditype*)0, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)))\n+FN(24, bool, (__atomic_compare_exchange_n((ditype*)p, (ditype*)0, 1, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)))\n+\n+FN(25, void, (__atomic_store((ditype*)p, (ditype*)0, __ATOMIC_SEQ_CST)))\n+FN(26, void, (__atomic_store_n((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+\n+FN(27, ditype, (__atomic_add_fetch((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(28, ditype, (__atomic_sub_fetch((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(29, ditype, (__atomic_and_fetch((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(30, ditype, (__atomic_nand_fetch((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(31, ditype, (__atomic_xor_fetch((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(32, ditype, (__atomic_or_fetch((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+\n+FN(33, ditype, (__atomic_fetch_add((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(34, ditype, (__atomic_fetch_sub((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(35, ditype, (__atomic_fetch_and((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(36, ditype, (__atomic_fetch_nand((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(37, ditype, (__atomic_fetch_xor((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n+FN(38, ditype, (__atomic_fetch_or((ditype*)p, 1, __ATOMIC_SEQ_CST)))\n \n static void\n handler(int)"}]}