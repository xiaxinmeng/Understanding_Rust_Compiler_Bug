{"sha": "9480716c80167f17226d9bd9d70883c6bf7bda5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4MDcxNmM4MDE2N2YxNzIyNmQ5YmQ5ZDcwODgzYzZiZjdiZGE1Zg==", "commit": {"author": {"name": "Daniel Krugler", "email": "daniel.kruegler@googlemail.com", "date": "2011-09-13T00:06:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-13T00:06:25Z"}, "message": "tuple (_Head_base<>::_M_head, [...]): Change to static constexpr functions; adjust everywhere.\n\n2011-09-12  Daniel Krugler  <daniel.kruegler@googlemail.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (_Head_base<>::_M_head, _Head_base<>::_M_tail,\n\t_Tuple_impl<>::_M_head, _Tuple_impl<>::_M_tail): Change to static\n\tconstexpr functions; adjust everywhere.\n\t(__get_helper, get): Declare constexpr all three overloads.\n\t(tuple_cat): Declare constexpr; use late return type to improve\n\terror messages.\n\t* include/std/utility (__pair_get<>::__get, __pair_get<>::__move_get,\n\t__pair_get<>::__const_get, get): Declare all constexpr.\n\t* include/std/array (get): Likewise.\n\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Re-enable\n\ttuple_cat test.\n\t* testsuite/23_containers/array/constexpr_get.cc: New.\n\t* testsuite/20_util/tuple/element_access/constexpr_get.cc: Likewise.\n\t* testsuite/20_util/pair/constexpr_get.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n\tline number.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r178799", "tree": {"sha": "1d1b473cbd14f8d7eee60c283785998a696c87cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d1b473cbd14f8d7eee60c283785998a696c87cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9480716c80167f17226d9bd9d70883c6bf7bda5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9480716c80167f17226d9bd9d70883c6bf7bda5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9480716c80167f17226d9bd9d70883c6bf7bda5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9480716c80167f17226d9bd9d70883c6bf7bda5f/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e739761805ab2640063cd0be81662ff7b41daaea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e739761805ab2640063cd0be81662ff7b41daaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e739761805ab2640063cd0be81662ff7b41daaea"}], "stats": {"total": 274, "additions": 193, "deletions": 81}, "files": [{"sha": "265fcf23d451ee3c731b3b37e7d83ef0d6a85465", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -1,3 +1,23 @@\n+2011-09-12  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (_Head_base<>::_M_head, _Head_base<>::_M_tail,\n+\t_Tuple_impl<>::_M_head, _Tuple_impl<>::_M_tail): Change to static\n+\tconstexpr functions; adjust everywhere.\n+\t(__get_helper, get): Declare constexpr all three overloads.\n+\t(tuple_cat): Declare constexpr; use late return type to improve\n+\terror messages.\n+\t* include/std/utility (__pair_get<>::__get, __pair_get<>::__move_get,\n+\t__pair_get<>::__const_get, get): Declare all constexpr.\n+\t* include/std/array (get): Likewise.\n+\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Re-enable\n+\ttuple_cat test.\n+\t* testsuite/23_containers/array/constexpr_get.cc: New.\n+\t* testsuite/20_util/tuple/element_access/constexpr_get.cc: Likewise.\n+\t* testsuite/20_util/pair/constexpr_get.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2011-09-12  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/20_util/is_constructible/value-2.cc: Adjust"}, {"sha": "ae7445d0b2139b8b2ac9d76cea9d7fc0857a6bb5", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -264,19 +264,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef _Tp type; };\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    inline _Tp&\n+    constexpr _Tp&\n     get(array<_Tp, _Nm>& __arr) noexcept\n-    { return __arr[_Int]; }\n+    { return __arr._M_instance[_Int]; }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    inline _Tp&&\n+    constexpr _Tp&&\n     get(array<_Tp, _Nm>&& __arr) noexcept\n     { return std::move(get<_Int>(__arr)); }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    inline const _Tp&\n+    constexpr const _Tp&\n     get(const array<_Tp, _Nm>& __arr) noexcept\n-    { return __arr[_Int]; }\n+    { return __arr._M_instance[_Int]; }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1eec951fd15b8ffae75ee4b59307b5e4dd594de6", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 70, "deletions": 61, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -140,11 +140,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n-      _Head&       \n-      _M_head() noexcept { return *this; }\n+      static constexpr _Head&\n+      _M_head(_Head_base& __b) noexcept { return __b; }\n \n-      constexpr const _Head& \n-      _M_head() const noexcept { return *this; }\n+      static constexpr const _Head&\n+      _M_head(const _Head_base& __b) noexcept { return __b; }\n     };\n \n   template<std::size_t _Idx, typename _Head>\n@@ -186,13 +186,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n-      _Head&       \n-      _M_head() noexcept { return _M_head_impl; }\n+      static constexpr _Head&\n+      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }\n \n-      constexpr const _Head& \n-      _M_head() const noexcept { return _M_head_impl; }        \n+      static constexpr const _Head&\n+      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }\n \n-      _Head _M_head_impl; \n+      _Head _M_head_impl;\n     };\n \n   /**\n@@ -245,17 +245,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\n       typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;\n \n-      _Head&            \n-      _M_head() noexcept { return _Base::_M_head(); }\n+      static constexpr _Head&  \n+      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n \n-      constexpr const _Head&      \n-      _M_head() const noexcept { return _Base::_M_head(); }\n+      static constexpr const _Head&\n+      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n \n-      _Inherited&       \n-      _M_tail() noexcept { return *this; }\n+      static constexpr _Inherited&\n+      _M_tail(_Tuple_impl& __t) noexcept { return __t; }\n \n-      constexpr const _Inherited& \n-      _M_tail() const noexcept { return *this; }\n+      static constexpr const _Inherited&\n+      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }\n \n       constexpr _Tuple_impl()\n       : _Inherited(), _Base() { }\n@@ -276,17 +276,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Tuple_impl(_Tuple_impl&& __in)\n       noexcept(__and_<is_nothrow_move_constructible<_Head>,\n \t              is_nothrow_move_constructible<_Inherited>>::value)\n-      : _Inherited(std::move(__in._M_tail())), \n-\t_Base(std::forward<_Head>(__in._M_head())) { }\n+      : _Inherited(std::move(_M_tail(__in))), \n+\t_Base(std::forward<_Head>(_M_head(__in))) { }\n \n       template<typename... _UElements>\n         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n-\t: _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n+\t: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),\n+\t  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }\n \n       template<typename _UHead, typename... _UTails>\n         _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n-\t: _Inherited(std::move(__in._M_tail())),\n-\t  _Base(std::forward<_UHead>(__in._M_head())) { }\n+\t  : _Inherited(std::move\n+\t\t       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\n+\t  _Base(std::forward<_UHead>\n+\t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n@@ -311,34 +314,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Alloc>\n         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl& __in)\n-\t: _Inherited(__tag, __a, __in._M_tail()), \n-          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __in._M_head()) { }\n+\t: _Inherited(__tag, __a, _M_tail(__in)), \n+          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n \n       template<typename _Alloc>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl&& __in)\n-\t: _Inherited(__tag, __a, std::move(__in._M_tail())), \n+\t: _Inherited(__tag, __a, std::move(_M_tail(__in))), \n \t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n-\t        std::forward<_Head>(__in._M_head())) { }\n+\t        std::forward<_Head>(_M_head(__in))) { }\n \n       template<typename _Alloc, typename... _UElements>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            const _Tuple_impl<_Idx, _UElements...>& __in)\n-\t: _Inherited(__tag, __a, __in._M_tail()),\n-\t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __in._M_head()) { }\n+\t: _Inherited(__tag, __a,\n+\t\t     _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),\n+\t  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n+\t\t_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }\n \n       template<typename _Alloc, typename _UHead, typename... _UTails>\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n-\t: _Inherited(__tag, __a, std::move(__in._M_tail())),\n+\t: _Inherited(__tag, __a, std::move\n+\t\t     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),\n \t  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n-                std::forward<_UHead>(__in._M_head())) { }\n+                std::forward<_UHead>\n+\t\t(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }\n \n       _Tuple_impl&\n       operator=(const _Tuple_impl& __in)\n       {\n-\t_M_head() = __in._M_head();\n-\t_M_tail() = __in._M_tail();\n+\t_M_head(*this) = _M_head(__in);\n+\t_M_tail(*this) = _M_tail(__in);\n \treturn *this;\n       }\n \n@@ -347,26 +354,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       noexcept(__and_<is_nothrow_move_assignable<_Head>,\n \t              is_nothrow_move_assignable<_Inherited>>::value)\n       {\n-\t_M_head() = std::forward<_Head>(__in._M_head());\n-\t_M_tail() = std::move(__in._M_tail());\n+\t_M_head(*this) = std::forward<_Head>(_M_head(__in));\n+\t_M_tail(*this) = std::move(_M_tail(__in));\n \treturn *this;\n       }\n \n       template<typename... _UElements>\n         _Tuple_impl&\n         operator=(const _Tuple_impl<_Idx, _UElements...>& __in)\n         {\n-\t  _M_head() = __in._M_head();\n-\t  _M_tail() = __in._M_tail();\n+\t  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);\n+\t  _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);\n \t  return *this;\n \t}\n \n       template<typename _UHead, typename... _UTails>\n         _Tuple_impl&\n         operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)\n         {\n-\t  _M_head() = std::forward<_UHead>(__in._M_head());\n-\t  _M_tail() = std::move(__in._M_tail());\n+\t  _M_head(*this) = std::forward<_UHead>\n+\t    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));\n+\t  _M_tail(*this) = std::move\n+\t    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));\n \t  return *this;\n \t}\n \n@@ -375,11 +384,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_swap(_Tuple_impl& __in)\n       noexcept(noexcept(swap(std::declval<_Head&>(),\n \t\t\t     std::declval<_Head&>()))\n-\t       && noexcept(__in._M_tail()._M_swap(__in._M_tail())))\n+\t       && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))\n       {\n \tusing std::swap;\n-\tswap(this->_M_head(), __in._M_head());\n-\t_Inherited::_M_swap(__in._M_tail());\n+\tswap(_M_head(*this), _M_head(__in));\n+\t_Inherited::_M_swap(_M_tail(__in));\n       }\n     };\n \n@@ -656,17 +665,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         tuple&\n         operator=(const pair<_U1, _U2>& __in)\n         {\n-\t  this->_M_head() = __in.first;\n-\t  this->_M_tail()._M_head() = __in.second;\n+\t  this->_M_head(*this) = __in.first;\n+\t  this->_M_tail(*this)._M_head(*this) = __in.second;\n \t  return *this;\n \t}\n \n       template<typename _U1, typename _U2>\n         tuple&\n         operator=(pair<_U1, _U2>&& __in)\n         {\n-\t  this->_M_head() = std::forward<_U1>(__in.first);\n-\t  this->_M_tail()._M_head() = std::forward<_U2>(__in.second);\n+\t  this->_M_head(*this) = std::forward<_U1>(__in.first);\n+\t  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);\n \t  return *this;\n \t}\n \n@@ -747,34 +756,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<std::size_t, sizeof...(_Elements)> { };\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n-    inline typename __add_ref<_Head>::type\n+    constexpr typename __add_ref<_Head>::type\n     __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n-    { return __t._M_head(); }\n+    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n-    inline constexpr typename __add_c_ref<_Head>::type\n+    constexpr typename __add_c_ref<_Head>::type\n     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n-    { return __t._M_head(); }\n+    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n   // Return a reference (const reference, rvalue reference) to the ith element\n   // of a tuple.  Any const or non-const ref elements are returned with their\n   // original type.\n   template<std::size_t __i, typename... _Elements>\n-    inline typename __add_ref<\n+    constexpr typename __add_ref<\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n     get(tuple<_Elements...>& __t) noexcept\n     { return __get_helper<__i>(__t); }\n \n   template<std::size_t __i, typename... _Elements>\n-    inline constexpr typename __add_c_ref<\n+    constexpr typename __add_c_ref<\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n     get(const tuple<_Elements...>& __t) noexcept\n     { return __get_helper<__i>(__t); }\n \n   template<std::size_t __i, typename... _Elements>\n-    inline typename __add_r_ref<\n+    constexpr typename __add_r_ref<\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n     get(tuple<_Elements...>&& __t) noexcept\n@@ -880,13 +889,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename, std::size_t> struct array;\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    _Tp& get(array<_Tp, _Nm>&) noexcept;\n+    constexpr _Tp& get(array<_Tp, _Nm>&) noexcept;\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    _Tp&& get(array<_Tp, _Nm>&&) noexcept;\n+    constexpr _Tp&& get(array<_Tp, _Nm>&&) noexcept;\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    const _Tp& get(const array<_Tp, _Nm>&) noexcept;\n+    constexpr const _Tp& get(const array<_Tp, _Nm>&) noexcept;\n \n   template<typename>\n     struct __is_tuple_like_impl : false_type\n@@ -1022,7 +1031,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>\n     {\n       template<typename... _Us>\n-        static _Ret\n+        static constexpr _Ret\n         _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)\n         {\n \t  typedef typename __make_1st_indices<_Tpls...>::__type __idx;\n@@ -1037,18 +1046,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __tuple_concater<_Ret, std::_Index_tuple<>>\n     {\n       template<typename... _Us>\n-\tstatic _Ret\n+\tstatic constexpr _Ret\n \t_S_do(_Us&&... __us)\n         {\n \t  return _Ret(std::forward<_Us>(__us)...);\n \t}\n     };\n \n-  template<typename... _Tpls>\n-    inline typename\n-    std::enable_if<__and_<__is_tuple_like<_Tpls>...>::value,\n-                   typename __tuple_cat_result<_Tpls...>::__type>::type\n+  template<typename... _Tpls, typename = typename\n+           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>\n+    constexpr auto\n     tuple_cat(_Tpls&&... __tpls)\n+    -> typename __tuple_cat_result<_Tpls...>::__type\n     {\n       typedef typename __tuple_cat_result<_Tpls...>::__type __ret;\n       typedef typename __make_1st_indices<_Tpls...>::__type __idx;"}, {"sha": "11efd74335b7623964949100252619ce23e6b3a9", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -105,17 +105,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __pair_get<0>\n     {\n       template<typename _Tp1, typename _Tp2>\n-        static _Tp1&\n+        static constexpr _Tp1&\n         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.first; }\n \n       template<typename _Tp1, typename _Tp2>\n-        static _Tp1&&\n+        static constexpr _Tp1&&\n         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept\n         { return std::forward<_Tp1>(__pair.first); }\n \n       template<typename _Tp1, typename _Tp2>\n-        static const _Tp1&\n+        static constexpr const _Tp1&\n         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.first; }\n     };\n@@ -124,33 +124,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __pair_get<1>\n     {\n       template<typename _Tp1, typename _Tp2>\n-        static _Tp2&\n+        static constexpr _Tp2&\n         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.second; }\n \n       template<typename _Tp1, typename _Tp2>\n-        static _Tp2&&\n+        static constexpr _Tp2&&\n         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept\n         { return std::forward<_Tp2>(__pair.second); }\n \n       template<typename _Tp1, typename _Tp2>\n-        static const _Tp2&\n+        static constexpr const _Tp2&\n         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.second; }\n     };\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n-    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&\n+    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&\n     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     { return __pair_get<_Int>::__get(__in); }\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n-    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&\n+    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&\n     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n     { return __pair_get<_Int>::__move_get(std::move(__in)); }\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n-    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&\n+    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&\n     get(const std::pair<_Tp1, _Tp2>& __in) noexcept\n     { return __pair_get<_Int>::__const_get(__in); }\n "}, {"sha": "c72f049ac6eeab9d06e99f5d5864f75caf5de535", "filename": "libstdc++-v3/testsuite/20_util/pair/constexpr_get.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_get.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_get.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fconstexpr_get.cc?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+\n+std::pair<int, int> pi;\n+const std::pair<int, int> cpi;\n+\n+constexpr const int& cri = std::get<0>(cpi);\n+constexpr int&  ri = std::get<0>(pi);\n+constexpr int&& rri = std::get<0>(std::move(pi));"}, {"sha": "5b816a59bbb8ad54604ebfff39d9123bfd303066", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -63,7 +63,6 @@ test_get()\n }\n \n // tuple_cat\n-#if 0\n void\n test_tuple_cat()\n {\n@@ -74,7 +73,6 @@ test_tuple_cat()\n   constexpr tuple_type2 t2 { 55, 99, 77.77 };\n   constexpr auto cat1 = std::tuple_cat(t1, t2);\n }\n-#endif\n \n int\n main()\n@@ -84,10 +82,7 @@ main()\n #endif\n \n   test_get();\n-\n-#if 0\n   test_tuple_cat();\n-#endif\n \n   return 0;\n }"}, {"sha": "4dfad5333e415a4e441f06ab28769aab9398f70d", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/constexpr_get.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fconstexpr_get.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fconstexpr_get.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fconstexpr_get.cc?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+\n+std::tuple<int> ti;\n+const std::tuple<int> cti;\n+\n+constexpr const int& cri = std::get<0>(cti);\n+constexpr int&  ri = std::get<0>(ti);\n+constexpr int&& rri = std::get<0>(std::move(ti));"}, {"sha": "cb4b4a9bbd9703c5ce5c7c085fe6981e8cc1d8cc", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 468 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 831 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 840 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }"}, {"sha": "3346ffd34487a68be0cc773acaa0f70941f084b6", "filename": "libstdc++-v3/testsuite/23_containers/array/constexpr_get.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fconstexpr_get.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9480716c80167f17226d9bd9d70883c6bf7bda5f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fconstexpr_get.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fconstexpr_get.cc?ref=9480716c80167f17226d9bd9d70883c6bf7bda5f", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <array>\n+\n+std::array<int, 5> ai;\n+const std::array<int, 5> cai(ai);\n+\n+constexpr const int& cri = std::get<0>(cai);\n+constexpr int&  ri = std::get<0>(ai);\n+constexpr int&& rri = std::get<0>(std::move(ai));"}]}