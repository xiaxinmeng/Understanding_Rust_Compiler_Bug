{"sha": "f1b62c9f96d31dac273e1dfa0e389e240b420c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiNjJjOWY5NmQzMWRhYzI3M2UxZGZhMGUzODllMjQwYjQyMGM2OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-19T15:55:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-19T15:55:01Z"}, "message": "i386.md (*lea_1): Use P mode iterator.\n\n2010-08-19  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (*lea_1): Use P mode iterator.\n\t(lea add splitter): Also handle DImode operands.\n\t(DImode lea add splitter): Use x86_64_immediate_operand for operand 2\n\tpredicate.  Do not use ix86_lea_for_add_ok.\n\t(zext DImode lea add splitter): Use ix86_lea_for_add_ok.\n\t(lea ashift splitter): Also handle DImode operands.\n\t(DImode lea ashift splitter): Remove splitter.\n\n2010-08-19  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (*add<SWI:mode>3_cconly_overflow): Do not use\n\tix86_binary_operator_ok.\n\nFrom-SVN: r163375", "tree": {"sha": "2dabb29097c1f8407069ab25d96f5b91fe08626e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dabb29097c1f8407069ab25d96f5b91fe08626e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1b62c9f96d31dac273e1dfa0e389e240b420c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b62c9f96d31dac273e1dfa0e389e240b420c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b62c9f96d31dac273e1dfa0e389e240b420c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b62c9f96d31dac273e1dfa0e389e240b420c69/comments", "author": null, "committer": null, "parents": [{"sha": "68152b200c143e4f7bf265ea762b1c2edbab2ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68152b200c143e4f7bf265ea762b1c2edbab2ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68152b200c143e4f7bf265ea762b1c2edbab2ad7"}], "stats": {"total": 196, "additions": 104, "deletions": 92}, "files": [{"sha": "a677a12a180fd3d1bd843e8fc548c347890778fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b62c9f96d31dac273e1dfa0e389e240b420c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b62c9f96d31dac273e1dfa0e389e240b420c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1b62c9f96d31dac273e1dfa0e389e240b420c69", "patch": "@@ -1,8 +1,23 @@\n+2010-08-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*lea_1): Use P mode iterator.\n+\t(lea add splitter): Also handle DImode operands.\n+\t(DImode lea add splitter): Use x86_64_immediate_operand for operand 2\n+\tpredicate.  Do not use ix86_lea_for_add_ok.\n+\t(zext DImode lea add splitter): Use ix86_lea_for_add_ok.\n+\t(lea ashift splitter): Also handle DImode operands.\n+\t(DImode lea ashift splitter): Remove splitter.\n+\n+2010-08-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<SWI:mode>3_cconly_overflow): Do not use\n+\tix86_binary_operator_ok.\n+\n 2010-08-19  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/44691\n \t* sel-sched.c (count_occurrences_1): Also punt when SUBREG_REG\n-\tis not a register. \n+\tis not a register.\n \n 2010-08-19  Ian Bolton  <ian.bolton@arm.com>\n "}, {"sha": "e5de3b9ce00f42ff9ee2a04f2c2bc55510e36f15", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 88, "deletions": 91, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b62c9f96d31dac273e1dfa0e389e240b420c69/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b62c9f96d31dac273e1dfa0e389e240b420c69/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f1b62c9f96d31dac273e1dfa0e389e240b420c69", "patch": "@@ -5764,8 +5764,8 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*lea_1\"\n-  [(set (match_operand:DWIH 0 \"register_operand\" \"=r\")\n-\t(match_operand:DWIH 1 \"no_seg_address_operand\" \"p\"))]\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(match_operand:P 1 \"no_seg_address_operand\" \"p\"))]\n   \"\"\n   \"lea{<imodesuffix>}\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n@@ -6137,6 +6137,68 @@\n         (const_string \"none\")))\n    (set_attr \"mode\" \"QI\")])\n \n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(plus (match_operand 1 \"register_operand\" \"\")\n+              (match_operand 2 \"nonmemory_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n+  [(const_int 0)]\n+{\n+  rtx pat;\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  /* In -fPIC mode the constructs like (const (unspec [symbol_ref]))\n+     may confuse gen_lowpart.  */\n+  if (mode != Pmode)\n+    {\n+      operands[1] = gen_lowpart (Pmode, operands[1]);\n+      operands[2] = gen_lowpart (Pmode, operands[2]);\n+    }\n+\n+  pat = gen_rtx_PLUS (Pmode, operands[1], operands[2]);\n+\n+  if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+\n+  if (TARGET_64BIT && mode != Pmode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+})\n+\n+;; Convert lea to the lea pattern to avoid flags dependency.\n+;; ??? This pattern handles immediate operands that do not satisfy immediate\n+;; operand predicate (LEGITIMATE_CONSTANT_P) in the previous pattern.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t (match_operand:DI 2 \"x86_64_immediate_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && reload_completed \n+   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+  [(set (match_dup 0)\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"\")\n+\n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && reload_completed\n+   && ix86_lea_for_add_ok (insn, operands)\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (plus:DI (match_dup 1) (match_dup 2)) 0)))]\n+{\n+  operands[1] = gen_lowpart (DImode, operands[1]);\n+  operands[2] = gen_lowpart (DImode, operands[2]);\n+})\n+\n (define_insn \"*add<mode>_2\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -6678,60 +6740,6 @@\n }\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n-\n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"x86_64_nonmemory_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed \n-   && ix86_lea_for_add_ok (insn, operands)\"\n-  [(set (match_dup 0)\n-\t(plus:DI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"\")\n-\n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(plus (match_operand 1 \"register_operand\" \"\")\n-              (match_operand 2 \"nonmemory_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n-  [(const_int 0)]\n-{\n-  rtx pat;\n-  /* In -fPIC mode the constructs like (const (unspec [symbol_ref]))\n-     may confuse gen_lowpart.  */\n-  if (GET_MODE (operands[0]) != Pmode)\n-    {\n-      operands[1] = gen_lowpart (Pmode, operands[1]);\n-      operands[2] = gen_lowpart (Pmode, operands[2]);\n-    }\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  pat = gen_rtx_PLUS (Pmode, operands[1], operands[2]);\n-  if (Pmode != SImode)\n-    pat = gen_rtx_SUBREG (SImode, pat, 0);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n-  DONE;\n-})\n-\n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI\n-\t  (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (plus:DI (match_dup 1) (match_dup 2)) 0)))]\n-{\n-  operands[1] = gen_lowpart (Pmode, operands[1]);\n-  operands[2] = gen_lowpart (Pmode, operands[2]);\n-})\n \f\n ;; Subtract instructions\n \n@@ -6924,7 +6932,7 @@\n \t    (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n \t  (match_dup 1)))\n    (clobber (match_scratch:SWI 0 \"=<r>\"))]\n-  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9584,46 +9592,51 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n \n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"index_register_operand\" \"\")\n-\t\t   (match_operand:QI 2 \"const_int_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(mult:DI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"operands[2] = gen_int_mode (1 << INTVAL (operands[2]), DImode);\")\n-\n ;; Convert lea to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(ashift (match_operand 1 \"index_register_operand\" \"\")\n                 (match_operand:QI 2 \"const_int_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\n-   && GET_MODE_SIZE (GET_MODE (operands[0])) <= 4\"\n+   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n   [(const_int 0)]\n {\n   rtx pat;\n   enum machine_mode mode = GET_MODE (operands[0]);\n \n-  if (GET_MODE_SIZE (mode) < 4)\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n   if (mode != Pmode)\n     operands[1] = gen_lowpart (Pmode, operands[1]);\n   operands[2] = gen_int_mode (1 << INTVAL (operands[2]), Pmode);\n \n   pat = gen_rtx_MULT (Pmode, operands[1], operands[2]);\n-  if (Pmode != SImode)\n+\n+  if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+\n+  if (TARGET_64BIT && mode != Pmode)\n     pat = gen_rtx_SUBREG (SImode, pat, 0);\n+\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n   DONE;\n })\n \n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (ashift:SI (match_operand:SI 1 \"index_register_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && reload_completed\n+   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (mult:DI (match_dup 1) (match_dup 2)) 0)))]\n+{\n+  operands[1] = gen_lowpart (DImode, operands[1]);\n+  operands[2] = gen_int_mode (1 << INTVAL (operands[2]), DImode);\n+})\n+\n ;; Rare case of shifting RSP is handled by generating move and shift\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n@@ -9644,22 +9657,6 @@\n   DONE;\n })\n \n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI\n-\t  (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\" \"\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (mult:DI (match_dup 1) (match_dup 2)) 0)))]\n-{\n-  operands[1] = gen_lowpart (Pmode, operands[1]);\n-  operands[2] = gen_int_mode (1 << INTVAL (operands[2]), Pmode);\n-})\n-\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away."}]}