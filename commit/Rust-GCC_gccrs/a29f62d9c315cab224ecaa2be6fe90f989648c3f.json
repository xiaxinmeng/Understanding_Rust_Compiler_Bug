{"sha": "a29f62d9c315cab224ecaa2be6fe90f989648c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5ZjYyZDljMzE1Y2FiMjI0ZWNhYTJiZTZmZTkwZjk4OTY0OGMzZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-09-18T00:56:19Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-09-18T00:56:19Z"}, "message": "* charset.c (_cpp_destroy_iconv, emit_numeric_escape)\n\t(_cpp_convert_input, _cpp_default_encoding): Add comments.\n\tSome other comments in this file also tweaked.\n\nFrom-SVN: r87688", "tree": {"sha": "0eb836956c030e1321958bbc152d0c45c3366d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb836956c030e1321958bbc152d0c45c3366d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a29f62d9c315cab224ecaa2be6fe90f989648c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29f62d9c315cab224ecaa2be6fe90f989648c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a29f62d9c315cab224ecaa2be6fe90f989648c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a29f62d9c315cab224ecaa2be6fe90f989648c3f/comments", "author": null, "committer": null, "parents": [{"sha": "8f8e9aa5c1b48a6a6a40839fec7ce986cfb6b303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8e9aa5c1b48a6a6a40839fec7ce986cfb6b303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8e9aa5c1b48a6a6a40839fec7ce986cfb6b303"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "b3a86087d44987a4f2f122060824a3e276f7d25a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29f62d9c315cab224ecaa2be6fe90f989648c3f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29f62d9c315cab224ecaa2be6fe90f989648c3f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a29f62d9c315cab224ecaa2be6fe90f989648c3f", "patch": "@@ -1,5 +1,9 @@\n 2004-09-17  Zack Weinberg  <zack@codesourcery.com>\n \n+\t* charset.c (_cpp_destroy_iconv, emit_numeric_escape)\n+\t(_cpp_convert_input, _cpp_default_encoding): Add comments.\n+\tSome other comments in this file also tweaked.\n+\n \t* directives.c (do_pragma): Save current buffer position\n \tbefore lexing the pragma keywords; don't call\n \t_cpp_backup_tokens in the defer_pragmas case."}, {"sha": "7a88a708e6c43ea4e7e348c1e2597fe194bb7656", "filename": "libcpp/charset.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a29f62d9c315cab224ecaa2be6fe90f989648c3f/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a29f62d9c315cab224ecaa2be6fe90f989648c3f/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=a29f62d9c315cab224ecaa2be6fe90f989648c3f", "patch": "@@ -701,6 +701,7 @@ cpp_init_iconv (cpp_reader *pfile)\n   pfile->wide_cset_desc = init_iconv_desc (pfile, wcset, SOURCE_CHARSET);\n }\n \n+/* Destroy iconv(3) descriptors set up by cpp_init_iconv, if necessary.  */\n void\n _cpp_destroy_iconv (cpp_reader *pfile)\n {\n@@ -791,8 +792,7 @@ ucn_valid_in_identifier (cpp_reader *pfile, cppchar_t c)\n    invalid character.\n \n    IDENTIFIER_POS is 0 when not in an identifier, 1 for the start of\n-   an identifier, or 2 otherwise.\n-*/\n+   an identifier, or 2 otherwise.  */\n \n cppchar_t\n _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n@@ -873,8 +873,6 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n /* Convert an UCN, pointed to by FROM, to UTF-8 encoding, then translate\n    it to the execution character set and write the result into TBUF.\n    An advanced pointer is returned.  Issues all relevant diagnostics.  */\n-\n-\n static const uchar *\n convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n \t     struct _cpp_strbuf *tbuf, bool wide)\n@@ -904,6 +902,11 @@ convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   return from;\n }\n \n+/* Subroutine of convert_hex and convert_oct.  N is the representation\n+   in the execution character set of a numeric escape; write it into the\n+   string buffer TBUF and update the end-of-string pointer therein.  WIDE\n+   is true if it's a wide string that's being assembled in TBUF.  This\n+   function issues no diagnostics and never fails.  */\n static void\n emit_numeric_escape (cpp_reader *pfile, cppchar_t n,\n \t\t     struct _cpp_strbuf *tbuf, bool wide)\n@@ -937,6 +940,8 @@ emit_numeric_escape (cpp_reader *pfile, cppchar_t n,\n     }\n   else\n     {\n+      /* Note: this code does not handle the case where the target\n+\t and host have a different number of bits in a byte.  */\n       if (tbuf->len + 1 > tbuf->asize)\n \t{\n \t  tbuf->asize += OUTBUF_BLOCK_SIZE;\n@@ -1353,7 +1358,17 @@ cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,\n   return result;\n }\n \n-uchar *\n+/* Convert an input buffer (containing the complete contents of one\n+   source file) from INPUT_CHARSET to the source character set.  INPUT\n+   points to the input buffer, SIZE is its allocated size, and LEN is\n+   the length of the meaningful data within the buffer.  The\n+   translated buffer is returned, and *ST_SIZE is set to the length of\n+   the meaningful data within the translated buffer.\n+\n+   INPUT is expected to have been allocated with xmalloc.  This function\n+   will either return INPUT, or free it and return a pointer to another\n+   xmalloc-allocated block of memory.  */\n+uchar * \n _cpp_convert_input (cpp_reader *pfile, const char *input_charset,\n \t\t    uchar *input, size_t size, size_t len, off_t *st_size)\n {\n@@ -1395,6 +1410,7 @@ _cpp_convert_input (cpp_reader *pfile, const char *input_charset,\n   return to.text;\n }\n \n+/* Decide on the default encoding to assume for input files.  */\n const char *\n _cpp_default_encoding (void)\n {\n@@ -1414,7 +1430,7 @@ _cpp_default_encoding (void)\n      - now we can parse something like \"#pragma GCC encoding <xyz>\n        on the first line, or even Emacs/VIM's mode line tags (there's\n        a problem here in that VIM uses the last line, and Emacs has\n-       its more elaborate \"Local variables:\" convention).\n+       its more elaborate \"local variables\" convention).\n      - investigate whether Java has another common convention, which\n        would be friendly to support.\n      (Zack Weinberg and Paolo Bonzini, May 20th 2004)  */"}]}