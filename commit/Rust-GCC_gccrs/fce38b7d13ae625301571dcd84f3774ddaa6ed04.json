{"sha": "fce38b7d13ae625301571dcd84f3774ddaa6ed04", "node_id": "C_kwDOANBUbNoAKGZjZTM4YjdkMTNhZTYyNTMwMTU3MWRjZDg0ZjM3NzRkZGFhNmVkMDQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-15T02:28:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-15T02:28:58Z"}, "message": "c++: init_priority and SUPPORTS_INIT_PRIORITY [PR107638]\n\nThe commit r13-3706-gd0a492faa6478c for fixing the result of\n__has_attribute(init_priority) causes a bootstrap failure on hppa64-hpux\ndue to assuming the macro SUPPORTS_INIT_PRIORITY expands to a simple\nconstant, but on this target the macro is defined as\n\n  #define SUPPORTS_INIT_PRIORITY (TARGET_GNU_LD ? 1 : 0)\n\n(where TARGET_GNU_LD expands to something in terms of global_options)\nwhich means we can't use the macro to conditionally exclude the entry\nfor init_priority when defining the cxx_attribute_table.\n\nSo instead of trying to exclude init_priority from the attribute table,\nthis patch just makes __has_attribute handle init_priority specially.\n\n\tPR c++/107638\n\ngcc/c-family/ChangeLog:\n\n\t* c-lex.cc (c_common_has_attribute): Return 1 for init_priority\n\tiff SUPPORTS_INIT_PRIORITY.\n\ngcc/cp/ChangeLog:\n\n\t* tree.cc (cxx_attribute_table): Don't conditionally exclude\n\tthe init_priority entry.\n\t(handle_init_priority_attribute): Remove ATTRIBUTE_UNUSED.\n\tReturn error_mark_node if !SUPPORTS_INIT_PRIORITY.", "tree": {"sha": "f82f76f38c1615ac1d8bed0da24dea4b3993e996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f82f76f38c1615ac1d8bed0da24dea4b3993e996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fce38b7d13ae625301571dcd84f3774ddaa6ed04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce38b7d13ae625301571dcd84f3774ddaa6ed04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce38b7d13ae625301571dcd84f3774ddaa6ed04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce38b7d13ae625301571dcd84f3774ddaa6ed04/comments", "author": null, "committer": null, "parents": [{"sha": "080b4cf6bd8622c7dff6299f9103184d518ca93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080b4cf6bd8622c7dff6299f9103184d518ca93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080b4cf6bd8622c7dff6299f9103184d518ca93f"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "2fe562c7ccfbacbfebd1db13ead3c968b619e996", "filename": "gcc/c-family/c-lex.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce38b7d13ae625301571dcd84f3774ddaa6ed04/gcc%2Fc-family%2Fc-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce38b7d13ae625301571dcd84f3774ddaa6ed04/gcc%2Fc-family%2Fc-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.cc?ref=fce38b7d13ae625301571dcd84f3774ddaa6ed04", "patch": "@@ -380,6 +380,15 @@ c_common_has_attribute (cpp_reader *pfile, bool std_syntax)\n \t\tresult = 201907;\n \t      else if (is_attribute_p (\"assume\", attr_name))\n \t\tresult = 202207;\n+\t      else if (is_attribute_p (\"init_priority\", attr_name))\n+\t\t{\n+\t\t  /* The (non-standard) init_priority attribute is always\n+\t\t     included in the attribute table, but we don't want to\n+\t\t     advertise the attribute unless the target actually\n+\t\t     supports init priorities.  */\n+\t\t  result = SUPPORTS_INIT_PRIORITY ? 1 : 0;\n+\t\t  attr_name = NULL_TREE;\n+\t\t}\n \t    }\n \t  else\n \t    {"}, {"sha": "e352cf8021374301df778e6e82e2cca69985815f", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fce38b7d13ae625301571dcd84f3774ddaa6ed04/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fce38b7d13ae625301571dcd84f3774ddaa6ed04/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=fce38b7d13ae625301571dcd84f3774ddaa6ed04", "patch": "@@ -5036,10 +5036,8 @@ const struct attribute_spec cxx_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n        affects_type_identity, handler, exclude } */\n-#if SUPPORTS_INIT_PRIORITY\n   { \"init_priority\",  1, 1, true,  false, false, false,\n     handle_init_priority_attribute, NULL },\n-#endif\n   { \"abi_tag\", 1, -1, false, false, false, true,\n     handle_abi_tag_attribute, NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n@@ -5069,13 +5067,18 @@ const struct attribute_spec std_attribute_table[] =\n \n /* Handle an \"init_priority\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n-ATTRIBUTE_UNUSED static tree\n+static tree\n handle_init_priority_attribute (tree* node,\n \t\t\t\ttree name,\n \t\t\t\ttree args,\n \t\t\t\tint /*flags*/,\n \t\t\t\tbool* no_add_attrs)\n {\n+  if (!SUPPORTS_INIT_PRIORITY)\n+    /* Treat init_priority as an unrecognized attribute (mirroring\n+       __has_attribute) if the target doesn't support init priorities.  */\n+    return error_mark_node;\n+\n   tree initp_expr = TREE_VALUE (args);\n   tree decl = *node;\n   tree type = TREE_TYPE (decl);\n@@ -5133,7 +5136,6 @@ handle_init_priority_attribute (tree* node,\n \t pri);\n     }\n \n-  gcc_assert (SUPPORTS_INIT_PRIORITY);\n   SET_DECL_INIT_PRIORITY (decl, pri);\n   DECL_HAS_INIT_PRIORITY_P (decl) = 1;\n   return NULL_TREE;"}]}