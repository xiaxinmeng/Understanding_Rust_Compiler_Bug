{"sha": "0304bbad379d530d08ca2aa11289875e71a44aa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMwNGJiYWQzNzlkNTMwZDA4Y2EyYWExMTI4OTg3NWU3MWE0NGFhNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-02T18:59:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-02T18:59:16Z"}, "message": "c-common.c (get_flag_spec, [...]): Use strchr () instead of index ().\n\n\t* c-common.c (get_flag_spec, check_format_info_main,\n\tcheck_format_types): Use strchr () instead of index ().  Compare\n\tagainst error_mark_node instead of comparing the TREE_CODE against\n\tERROR_MARK.\n\nFrom-SVN: r37205", "tree": {"sha": "fc9135b52de3f1b54b681cae69ddde68883c4b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc9135b52de3f1b54b681cae69ddde68883c4b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0304bbad379d530d08ca2aa11289875e71a44aa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0304bbad379d530d08ca2aa11289875e71a44aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0304bbad379d530d08ca2aa11289875e71a44aa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0304bbad379d530d08ca2aa11289875e71a44aa6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad35392f46ddaba1057e59b5790c237afca9bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad35392f46ddaba1057e59b5790c237afca9bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad35392f46ddaba1057e59b5790c237afca9bfd"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "e6c21f72fb9d74125fca1faf7860d69d08e4b4ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0304bbad379d530d08ca2aa11289875e71a44aa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0304bbad379d530d08ca2aa11289875e71a44aa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0304bbad379d530d08ca2aa11289875e71a44aa6", "patch": "@@ -1,3 +1,10 @@\n+2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (get_flag_spec, check_format_info_main,\n+\tcheck_format_types): Use strchr () instead of index ().  Compare\n+\tagainst error_mark_node instead of comparing the TREE_CODE against\n+\tERROR_MARK.\n+\n 2000-11-02  Zack Weinberg <zackw@Stanford.EDU>\n \n         Integrated CPP."}, {"sha": "1b7b028e92dc69f7c100bbf6b56bee85f49a14c1", "filename": "gcc/c-common.c", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0304bbad379d530d08ca2aa11289875e71a44aa6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0304bbad379d530d08ca2aa11289875e71a44aa6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0304bbad379d530d08ca2aa11289875e71a44aa6", "patch": "@@ -2243,7 +2243,7 @@ get_flag_spec (spec, flag, predicates)\n       if (predicates != NULL)\n \t{\n \t  if (spec[i].predicate != 0\n-\t      && index (predicates, spec[i].predicate) != 0)\n+\t      && strchr (predicates, spec[i].predicate) != 0)\n \t    return &spec[i];\n \t}\n       else if (spec[i].predicate == 0)\n@@ -2612,9 +2612,10 @@ check_format_info_main (status, res, info, format_chars, format_length,\n       /* Read any format flags, but do not yet validate them beyond removing\n \t duplicates, since in general validation depends on the rest of\n \t the format.  */\n-      while (*format_chars != 0 && index (fki->flag_chars, *format_chars) != 0)\n+      while (*format_chars != 0\n+\t     && strchr (fki->flag_chars, *format_chars) != 0)\n \t{\n-\t  if (index (flag_chars, *format_chars) != 0)\n+\t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n \t      const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t *format_chars, NULL);\n@@ -2821,9 +2822,9 @@ check_format_info_main (status, res, info, format_chars, format_length,\n       if (fki->modifier_chars != NULL)\n \t{\n \t  while (*format_chars != 0\n-\t\t && index (fki->modifier_chars, *format_chars) != 0)\n+\t\t && strchr (fki->modifier_chars, *format_chars) != 0)\n \t    {\n-\t      if (index (flag_chars, *format_chars) != 0)\n+\t      if (strchr (flag_chars, *format_chars) != 0)\n \t\t{\n \t\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t     *format_chars, NULL);\n@@ -2866,7 +2867,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n       format_chars++;\n       fci = fki->conversion_specs;\n       while (fci->format_chars != 0\n-\t     && index (fci->format_chars, format_char) == 0)\n+\t     && strchr (fci->format_chars, format_char) == 0)\n \t  ++fci;\n       if (fci->format_chars == 0)\n \t{\n@@ -2895,7 +2896,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t    flag_chars[i - d] = flag_chars[i];\n \t    if (flag_chars[i] == fki->length_code_char)\n \t      continue;\n-\t    if (index (fci->flag_chars, flag_chars[i]) == 0)\n+\t    if (strchr (fci->flag_chars, flag_chars[i]) == 0)\n \t      {\n \t\tstatus_warning (status, \"%s used with `%%%c' %s format\",\n \t\t\t\t_(s->name), format_char, fki->name);\n@@ -2925,23 +2926,23 @@ check_format_info_main (status, res, info, format_chars, format_length,\n       }\n \n       if ((fki->flags & FMT_FLAG_SCANF_A_KLUDGE)\n-\t  && index (flag_chars, 'a') != 0)\n+\t  && strchr (flag_chars, 'a') != 0)\n \taflag = 1;\n \n       if (fki->suppression_char\n-\t  && index (flag_chars, fki->suppression_char) != 0)\n+\t  && strchr (flag_chars, fki->suppression_char) != 0)\n \tsuppressed = 1;\n \n       /* Validate the pairs of flags used.  */\n       for (i = 0; bad_flag_pairs[i].flag_char1 != 0; i++)\n \t{\n \t  const format_flag_spec *s, *t;\n-\t  if (index (flag_chars, bad_flag_pairs[i].flag_char1) == 0)\n+\t  if (strchr (flag_chars, bad_flag_pairs[i].flag_char1) == 0)\n \t    continue;\n-\t  if (index (flag_chars, bad_flag_pairs[i].flag_char2) == 0)\n+\t  if (strchr (flag_chars, bad_flag_pairs[i].flag_char2) == 0)\n \t    continue;\n \t  if (bad_flag_pairs[i].predicate != 0\n-\t      && index (fci->flags2, bad_flag_pairs[i].predicate) == 0)\n+\t      && strchr (fci->flags2, bad_flag_pairs[i].predicate) == 0)\n \t    continue;\n \t  s = get_flag_spec (flag_specs, bad_flag_pairs[i].flag_char1, NULL);\n \t  t = get_flag_spec (flag_specs, bad_flag_pairs[i].flag_char2, NULL);\n@@ -2970,14 +2971,14 @@ check_format_info_main (status, res, info, format_chars, format_length,\n       /* Give Y2K warnings.  */\n       {\n \tint y2k_level = 0;\n-\tif (index (fci->flags2, '4') != 0)\n-\t  if (index (flag_chars, 'E') != 0)\n+\tif (strchr (fci->flags2, '4') != 0)\n+\t  if (strchr (flag_chars, 'E') != 0)\n \t    y2k_level = 3;\n \t  else\n \t    y2k_level = 2;\n-\telse if (index (fci->flags2, '3') != 0)\n+\telse if (strchr (fci->flags2, '3') != 0)\n \t  y2k_level = 3;\n-\telse if (index (fci->flags2, '2') != 0)\n+\telse if (strchr (fci->flags2, '2') != 0)\n \t  y2k_level = 2;\n \tif (y2k_level == 3)\n \t  status_warning (status, \"`%%%c' yields only last 2 digits of year in some locales\",\n@@ -2986,7 +2987,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  status_warning (status, \"`%%%c' yields only last 2 digits of year\", format_char);\n       }\n \n-      if (index (fci->flags2, '[') != 0)\n+      if (strchr (fci->flags2, '[') != 0)\n \t{\n \t  /* Skip over scan set, in case it happens to have '%' in it.  */\n \t  if (*format_chars == '^')\n@@ -3082,10 +3083,10 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  main_wanted_type.wanted_type_name = wanted_type_name;\n \t  main_wanted_type.pointer_count = fci->pointer_count + aflag;\n \t  main_wanted_type.char_lenient_flag = 0;\n-\t  if (index (fci->flags2, 'c') != 0)\n+\t  if (strchr (fci->flags2, 'c') != 0)\n \t    main_wanted_type.char_lenient_flag = 1;\n \t  main_wanted_type.writing_in_flag = 0;\n-\t  if (index (fci->flags2, 'W') != 0)\n+\t  if (strchr (fci->flags2, 'W') != 0)\n \t    main_wanted_type.writing_in_flag = 1;\n \t  main_wanted_type.name = NULL;\n \t  main_wanted_type.param = cur_param;\n@@ -3124,7 +3125,7 @@ check_format_types (status, types)\n       int char_type_flag;\n       cur_param = types->param;\n       cur_type = TREE_TYPE (cur_param);\n-      if (TREE_CODE (cur_type) == ERROR_MARK)\n+      if (cur_type == error_mark_node)\n \tcontinue;\n       char_type_flag = 0;\n       wanted_type = types->wanted_type;\n@@ -3152,7 +3153,7 @@ check_format_types (status, types)\n \t  if (TREE_CODE (cur_type) == POINTER_TYPE)\n \t    {\n \t      cur_type = TREE_TYPE (cur_type);\n-\t      if (TREE_CODE (cur_type) == ERROR_MARK)\n+\t      if (cur_type == error_mark_node)\n \t\tbreak;\n \n \t      /* Check for writing through a NULL pointer.  */"}]}