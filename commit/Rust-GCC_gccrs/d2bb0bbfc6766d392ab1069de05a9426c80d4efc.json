{"sha": "d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiYjBiYmZjNjc2NmQzOTJhYjEwNjlkZTA1YTk0MjZjODBkNGVmYw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-24T13:05:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-24T13:05:03Z"}, "message": "[Ada] Spurious error on pragma Independent_Components\n\nThis patch modifies the analysis of pragma Independent_Components to account\nfor a side effect from handling of self-referential records which render the\npragma illegal.\n\n------------\n-- Source --\n------------\n\n--  pack.ads\n\npackage Pack is\n   type OK is record\n      Comp_1 : Integer;\n      Comp_2 : access OK;\n   end record;\n   pragma Independent_Components (OK);\n\n   type Error;\n   pragma Independent_Components (Error);\n   type Error is record\n      Comp : Integer;\n   end record;\nend Pack;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c pack.ads\npack.ads:9:04: representation item must be after full type declaration\n\n2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Analyze_Pragma): Use the full view of an internally\n\tgenerated incomplete type.\n\nFrom-SVN: r260649", "tree": {"sha": "aaeae4ced82d1149aab5745122803687ba0c9800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaeae4ced82d1149aab5745122803687ba0c9800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2bb0bbfc6766d392ab1069de05a9426c80d4efc/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9057bd6af94f176dd904b476534cc42158799ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9057bd6af94f176dd904b476534cc42158799ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9057bd6af94f176dd904b476534cc42158799ae5"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "efe7559504d61c3462a25641112b81f9c8e19b20", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bb0bbfc6766d392ab1069de05a9426c80d4efc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bb0bbfc6766d392ab1069de05a9426c80d4efc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "patch": "@@ -1,3 +1,8 @@\n+2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Use the full view of an internally\n+\tgenerated incomplete type.\n+\n 2018-05-24  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* expander.adb (Expand): Update the save and restore of the Ghost"}, {"sha": "c85d26f6c43d72ddb533e4e19b1eb5b8e0783291", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2bb0bbfc6766d392ab1069de05a9426c80d4efc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2bb0bbfc6766d392ab1069de05a9426c80d4efc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d2bb0bbfc6766d392ab1069de05a9426c80d4efc", "patch": "@@ -16999,6 +16999,38 @@ package body Sem_Prag is\n \n             E := Entity (E_Id);\n \n+            --  A record type with a self-referential component of anonymous\n+            --  access type is given an incomplete view in order to handle the\n+            --  self reference:\n+            --\n+            --    type Rec is record\n+            --       Self : access Rec;\n+            --    end record;\n+            --\n+            --  becomes\n+            --\n+            --    type Rec;\n+            --    type Ptr is access Rec;\n+            --    type Rec is record\n+            --       Self : Ptr;\n+            --    end record;\n+            --\n+            --  Since the incomplete view is now the initial view of the type,\n+            --  the argument of the pragma will reference the incomplete view,\n+            --  but this view is illegal according to the semantics of the\n+            --  pragma.\n+            --\n+            --  Obtain the full view of an internally-generated incomplete type\n+            --  only. This way an attempt to associate the pragma with a source\n+            --  incomplete type is still caught.\n+\n+            if Ekind (E) = E_Incomplete_Type\n+              and then not Comes_From_Source (E)\n+              and then Present (Full_View (E))\n+            then\n+               E := Full_View (E);\n+            end if;\n+\n             --  A pragma that applies to a Ghost entity becomes Ghost for the\n             --  purposes of legality checks and removal of ignored Ghost code.\n "}]}