{"sha": "b576b3a7fda3f914807f1296124f15fe791b5a60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3NmIzYTdmZGEzZjkxNDgwN2YxMjk2MTI0ZjE1ZmU3OTFiNWE2MA==", "commit": {"author": {"name": "Simon Martin", "email": "simartin@users.sourceforge.net", "date": "2006-08-10T19:35:07Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-08-10T19:35:07Z"}, "message": "re PR java/8923 (ICE when modifying a variable decleared \"final static\")\n\n2006-08-10  Simon Martin  <simartin@users.sourceforge.net>\n\n        PR java/8923\n        * parse.y (build_incdec): Emit an error instead of an ICE if '++'\n        or '--' is used with a constant operand.\n        (java_complete_lhs): When processing a '++' or '--' expression,\n        don't call java_complete_tree but java_complete_lhs, so that a\n        static final variable operand is never replaced by its value. This\n        avoids an ICE later on.\n        (patch_unaryop): Fixed typo in comment.\n\nFrom-SVN: r116069", "tree": {"sha": "4e3fd929ca16b78eae9a77bedcc19795582766e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e3fd929ca16b78eae9a77bedcc19795582766e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b576b3a7fda3f914807f1296124f15fe791b5a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b576b3a7fda3f914807f1296124f15fe791b5a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b576b3a7fda3f914807f1296124f15fe791b5a60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b576b3a7fda3f914807f1296124f15fe791b5a60/comments", "author": {"login": "simartin", "id": 935202, "node_id": "MDQ6VXNlcjkzNTIwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/935202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simartin", "html_url": "https://github.com/simartin", "followers_url": "https://api.github.com/users/simartin/followers", "following_url": "https://api.github.com/users/simartin/following{/other_user}", "gists_url": "https://api.github.com/users/simartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/simartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simartin/subscriptions", "organizations_url": "https://api.github.com/users/simartin/orgs", "repos_url": "https://api.github.com/users/simartin/repos", "events_url": "https://api.github.com/users/simartin/events{/privacy}", "received_events_url": "https://api.github.com/users/simartin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a1a473756a215d445473ffa9cd74d6bce177480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1a473756a215d445473ffa9cd74d6bce177480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1a473756a215d445473ffa9cd74d6bce177480"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "d1728f82b502cb2297540875fe69b11aea00fbd7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b576b3a7fda3f914807f1296124f15fe791b5a60/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b576b3a7fda3f914807f1296124f15fe791b5a60/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b576b3a7fda3f914807f1296124f15fe791b5a60", "patch": "@@ -1,3 +1,14 @@\n+2006-08-10  Simon Martin  <simartin@users.sourceforge.net>\n+\n+\tPR java/8923\n+\t* parse.y (build_incdec): Emit an error instead of an ICE if '++'\n+\tor '--' is used with a constant operand.\n+\t(java_complete_lhs): When processing a '++' or '--' expression,\n+\tdon't call java_complete_tree but java_complete_lhs, so that a\n+\tstatic final variable operand is never replaced by its value. This\n+\tavoids an ICE later on.\n+\t(patch_unaryop): Fixed typo in comment.\n+\n 2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies."}, {"sha": "4b6521ca2434ac715b608756545984b47b46d16d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b576b3a7fda3f914807f1296124f15fe791b5a60/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b576b3a7fda3f914807f1296124f15fe791b5a60/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=b576b3a7fda3f914807f1296124f15fe791b5a60", "patch": "@@ -12404,7 +12404,18 @@ java_complete_lhs (tree node)\n \t how to handle those cases. */\n       wfl_op1 = TREE_OPERAND (node, 0);\n       CAN_COMPLETE_NORMALLY (node) = 1;\n-      TREE_OPERAND (node, 0) = java_complete_tree (wfl_op1);\n+      if (TREE_CODE (node) == PREDECREMENT_EXPR\n+\t  || TREE_CODE (node) == PREINCREMENT_EXPR\n+\t  || TREE_CODE (node) == POSTDECREMENT_EXPR\n+\t  || TREE_CODE (node) == POSTINCREMENT_EXPR)\n+\t{ /* We don't want static finals to be resolved to their value\n+\t     to avoid ICEing later. It solves PR8923. */\n+\t  TREE_OPERAND (node, 0) = java_complete_lhs (wfl_op1);\n+\t}\n+      else\n+\t{\n+\t  TREE_OPERAND (node, 0) = java_complete_tree (wfl_op1);\n+\t}\n       if (TREE_OPERAND (node, 0) == error_mark_node)\n \treturn error_mark_node;\n       node = patch_unaryop (node, wfl_op1);\n@@ -14223,6 +14234,14 @@ build_incdec (int op_token, int op_location, tree op1, int is_post_p)\n   /* Store the location of the operator, for better error report. The\n      string of the operator will be rebuild based on the OP value. */\n   EXPR_WFL_LINECOL (node) = op_location;\n+\n+  /* Report an error if the operand is a constant. */\n+  if (TREE_CONSTANT (op1)) {\n+    parse_error_context (node, \"%qs cannot be used with a constant\",\n+                         operator_string (node));\n+    return error_mark_node;\n+  }\n+\n   return node;\n }\n \n@@ -14377,7 +14396,7 @@ patch_unaryop (tree node, tree wfl_op)\n \t  error_found = 1;\n \t}\n \n-      /* From now on, we know that op if a variable and that it has a\n+      /* From now on, we know that op is a variable and that it has a\n          valid wfl. We use wfl_op to locate errors related to the\n          ++/-- operand. */\n       if (!JNUMERIC_TYPE_P (op_type))"}]}