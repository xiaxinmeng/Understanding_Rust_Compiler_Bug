{"sha": "61943f94a0acfe2f61ed9c320a45a654d6baa780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5NDNmOTRhMGFjZmUyZjYxZWQ5YzMyMGE0NWE2NTRkNmJhYTc4MA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-04-17T09:45:57Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-04-17T09:45:57Z"}, "message": "rs6000: Improve the load/store-with-update patterns (PR17108)\n\nMany of these patterns only worked in 32-bit mode, and some only worked\nin 64-bit mode.  This patch makes these use Pmode, fixing the PR.  On\nthe other hand, the stack updates have to use the same mode for the\nstack pointer as for the value stored, so let's simplify that a bit.\n\nMany of these patterns pass the wrong mode to\navoiding_indexed_address_p (it should be the mode of the datum\naccessed, not the mode of the pointer).\n\nFinally, I merge some patterns into one (using iterators).\n\n\n\tPR target/17108\n\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Adjust pattern\n\tname.\n\t(rs6000_emit_allocate_stack_1): Simplify condition.  Adjust pattern\n\tname.\n\t* config/rs6000/rs6000.md (bits): Add entries for SF and DF.\n\t(*movdi_update1): Use Pmode.\n\t(movdi_<mode>_update): Fix argument to avoiding_indexed_address_p.\n\t(movdi_<mode>_update_stack): Rename to ...\n\t(movdi_update_stack): ... this.  Fix comment.  Change condition. Don't\n\tuse Pmode.\n\t(*movsi_update1): Use Pmode.\n\t(*movsi_update2): Use Pmode.\n\t(movsi_update): Rename to ...\n\t(movsi_<mode>_update): ... this.  Use Pmode.\n\t(movsi_update_stack): Fix condition.\n\t(*movhi_update1): Use Pmode.  Fix argument to\n\tavoiding_indexed_address_p.\n\t(*movhi_update2): Ditto.\n\t(*movhi_update3): Ditto.\n\t(*movhi_update4): Ditto.\n\t(*movqi_update1): Ditto.\n\t(*movqi_update2): Ditto.\n\t(*movqi_update3): Ditto.\n\t(*movsf_update1, *movdf_update1): Merge, rename to...\n\t(*mov<mode>_update1): This.  Use Pmode.  Fix argument to\n\tavoiding_indexed_address_p.  Add \"size\" attribute.\n\t(*movsf_update2, *movdf_update2): Merge, rename to...\n\t(*mov<mode>_update2): This.  Ditto.\n\t(*movsf_update3): Use Pmode.  Fix argument to\n\tavoiding_indexed_address_p.\n\t(*movsf_update4): Ditto.\n\t(allocate_stack): Simplify condition.  Adjust pattern names.\n\nFrom-SVN: r270407", "tree": {"sha": "78fa9ea521ddb3c87af89fbb058e052ec1039a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fa9ea521ddb3c87af89fbb058e052ec1039a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61943f94a0acfe2f61ed9c320a45a654d6baa780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61943f94a0acfe2f61ed9c320a45a654d6baa780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61943f94a0acfe2f61ed9c320a45a654d6baa780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61943f94a0acfe2f61ed9c320a45a654d6baa780/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b39c686b82ddfa60efe55d437121e0029644e509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39c686b82ddfa60efe55d437121e0029644e509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39c686b82ddfa60efe55d437121e0029644e509"}], "stats": {"total": 322, "additions": 164, "deletions": 158}, "files": [{"sha": "9480e693c086a711d4162f8eb4872f7d8d6015a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61943f94a0acfe2f61ed9c320a45a654d6baa780/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61943f94a0acfe2f61ed9c320a45a654d6baa780/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61943f94a0acfe2f61ed9c320a45a654d6baa780", "patch": "@@ -1,3 +1,39 @@\n+2019-04-17  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/17108\n+\t* config/rs6000/rs6000.c (rs6000_split_multireg_move): Adjust pattern\n+\tname.\n+\t(rs6000_emit_allocate_stack_1): Simplify condition.  Adjust pattern\n+\tname.\n+\t* config/rs6000/rs6000.md (bits): Add entries for SF and DF.\n+\t(*movdi_update1): Use Pmode.\n+\t(movdi_<mode>_update): Fix argument to avoiding_indexed_address_p.\n+\t(movdi_<mode>_update_stack): Rename to ...\n+\t(movdi_update_stack): ... this.  Fix comment.  Change condition. Don't\n+\tuse Pmode.\n+\t(*movsi_update1): Use Pmode.\n+\t(*movsi_update2): Use Pmode.\n+\t(movsi_update): Rename to ...\n+\t(movsi_<mode>_update): ... this.  Use Pmode.\n+\t(movsi_update_stack): Fix condition.\n+\t(*movhi_update1): Use Pmode.  Fix argument to\n+\tavoiding_indexed_address_p.\n+\t(*movhi_update2): Ditto.\n+\t(*movhi_update3): Ditto.\n+\t(*movhi_update4): Ditto.\n+\t(*movqi_update1): Ditto.\n+\t(*movqi_update2): Ditto.\n+\t(*movqi_update3): Ditto.\n+\t(*movsf_update1, *movdf_update1): Merge, rename to...\n+\t(*mov<mode>_update1): This.  Use Pmode.  Fix argument to\n+\tavoiding_indexed_address_p.  Add \"size\" attribute.\n+\t(*movsf_update2, *movdf_update2): Merge, rename to...\n+\t(*mov<mode>_update2): This.  Ditto.\n+\t(*movsf_update3): Use Pmode.  Fix argument to\n+\tavoiding_indexed_address_p.\n+\t(*movsf_update4): Ditto.\n+\t(allocate_stack): Simplify condition.  Adjust pattern names.\n+\n 2019-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89093"}, {"sha": "ae2249b7d5a7f0abac2513984b8b75d26ff375b4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61943f94a0acfe2f61ed9c320a45a654d6baa780/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61943f94a0acfe2f61ed9c320a45a654d6baa780/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=61943f94a0acfe2f61ed9c320a45a654d6baa780", "patch": "@@ -24010,7 +24010,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t\t  emit_insn (TARGET_32BIT\n \t\t\t     ? (TARGET_POWERPC64\n \t\t\t\t? gen_movdi_si_update (breg, breg, delta_rtx, nsrc)\n-\t\t\t\t: gen_movsi_update (breg, breg, delta_rtx, nsrc))\n+\t\t\t\t: gen_movsi_si_update (breg, breg, delta_rtx, nsrc))\n \t\t\t     : gen_movdi_di_update (breg, breg, delta_rtx, nsrc));\n \t\t  used_update = true;\n \t\t}\n@@ -25486,16 +25486,16 @@ rs6000_emit_allocate_stack_1 (HOST_WIDE_INT size_int, rtx orig_sp)\n       size_rtx = tmp_reg;\n     }\n   \n-  if (Pmode == SImode)\n+  if (TARGET_32BIT)\n     insn = emit_insn (gen_movsi_update_stack (stack_pointer_rtx,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      size_rtx,\n \t\t\t\t\t      orig_sp));\n   else\n-    insn = emit_insn (gen_movdi_di_update_stack (stack_pointer_rtx,\n-\t\t\t\t\t\t stack_pointer_rtx,\n-\t\t\t\t\t\t size_rtx,\n-\t\t\t\t\t\t orig_sp));\n+    insn = emit_insn (gen_movdi_update_stack (stack_pointer_rtx,\n+\t\t\t\t\t      stack_pointer_rtx,\n+\t\t\t\t\t      size_rtx,\n+\t\t\t\t\t      orig_sp));\n   rtx par = PATTERN (insn);\n   gcc_assert (GET_CODE (par) == PARALLEL);\n   rtx set = XVECEXP (par, 0, 0);"}, {"sha": "6feaa10c15573425a0656b28fd8ba23d882ec293", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 122, "deletions": 152, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61943f94a0acfe2f61ed9c320a45a654d6baa780/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61943f94a0acfe2f61ed9c320a45a654d6baa780/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=61943f94a0acfe2f61ed9c320a45a654d6baa780", "patch": "@@ -563,7 +563,8 @@\n \t\t      (TI    \"q\")])\n \n ;; How many bits in this mode?\n-(define_mode_attr bits [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")])\n+(define_mode_attr bits [(QI \"8\") (HI \"16\") (SI \"32\") (DI \"64\")\n+\t\t\t\t\t   (SF \"32\") (DF \"64\")])\n \n ; DImode bits\n (define_mode_attr dbits [(QI \"56\") (HI \"48\") (SI \"32\")])\n@@ -9083,13 +9084,13 @@\n \n (define_insn \"*movdi_update1\"\n   [(set (match_operand:DI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(mem:DI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:DI 2 \"reg_or_aligned_short_operand\" \"r,I\"))))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:DI (match_dup 1) (match_dup 2)))]\n+\t(mem:DI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_aligned_short_operand\" \"r,I\"))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_POWERPC64 && TARGET_UPDATE\n    && (!avoiding_indexed_address_p (DImode)\n-       || !gpc_reg_operand (operands[2], DImode))\"\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    ldux %3,%0,%2\n    ldu %3,%2(%0)\"\n@@ -9099,12 +9100,12 @@\n \n (define_insn \"movdi_<mode>_update\"\n   [(set (mem:DI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:P 2 \"reg_or_aligned_short_operand\" \"r,I\")))\n+\t\t\t(match_operand:P 2 \"reg_or_aligned_short_operand\" \"r,I\")))\n \t(match_operand:DI 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_POWERPC64 && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (Pmode)\n+   && (!avoiding_indexed_address_p (DImode)\n        || !gpc_reg_operand (operands[2], Pmode)\n        || (REG_P (operands[0])\n \t   && REGNO (operands[0]) == STACK_POINTER_REGNUM))\"\n@@ -9115,15 +9116,15 @@\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes,no\")])\n \n-;; This pattern is only conditional on TARGET_POWERPC64, as it is\n+;; This pattern is only conditional on TARGET_64BIT, as it is\n ;; needed for stack allocation, even if the user passes -mno-update.\n-(define_insn \"movdi_<mode>_update_stack\"\n-  [(set (mem:DI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:P 2 \"reg_or_aligned_short_operand\" \"r,I\")))\n+(define_insn \"movdi_update_stack\"\n+  [(set (mem:DI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t (match_operand:DI 2 \"reg_or_aligned_short_operand\" \"r,I\")))\n \t(match_operand:DI 3 \"gpc_reg_operand\" \"r,r\"))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:P (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_64BIT\"\n   \"@\n    stdux %3,%0,%2\n    stdu %3,%2(%0)\"\n@@ -9133,13 +9134,13 @@\n \n (define_insn \"*movsi_update1\"\n   [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+\t(mem:SI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n    && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lwzux %3,%0,%2\n    lwzu %3,%2(%0)\"\n@@ -9148,28 +9149,28 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsi_update2\"\n-  [(set (match_operand:DI 3 \"gpc_reg_operand\" \"=r\")\n-\t(sign_extend:DI\n-\t (mem:SI (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"0\")\n-\t\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n-\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  [(set (match_operand:EXTSI 3 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:EXTSI\n+\t (mem:SI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0\")\n+\t\t\t (match_operand:P 2 \"gpc_reg_operand\" \"r\")))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_POWERPC64 && !avoiding_indexed_address_p (DImode)\"\n   \"lwaux %3,%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"sign_extend\" \"yes\")\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes\")])\n \n-(define_insn \"movsi_update\"\n-  [(set (mem:SI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n+(define_insn \"movsi_<mode>_update\"\n+  [(set (mem:SI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))\n \t(match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n    && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode)\n+       || !gpc_reg_operand (operands[2], Pmode)\n        || (REG_P (operands[0])\n \t   && REGNO (operands[0]) == STACK_POINTER_REGNUM))\"\n   \"@\n@@ -9187,7 +9188,7 @@\n \t(match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"TARGET_32BIT\"\n   \"@\n    stwux %3,%0,%2\n    stwu %3,%2(%0)\"\n@@ -9197,12 +9198,12 @@\n \n (define_insn \"*movhi_update1\"\n   [(set (match_operand:HI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+\t(mem:HI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n+   && (!avoiding_indexed_address_p (HImode)\n        || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lhzux %3,%0,%2\n@@ -9212,15 +9213,15 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update2\"\n-  [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI\n-\t (mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  [(set (match_operand:EXTHI 3 \"gpc_reg_operand\" \"=r,r\")\n+\t(zero_extend:EXTHI\n+\t (mem:HI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t (match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (HImode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n@@ -9229,15 +9230,15 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update3\"\n-  [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI\n-\t (mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  [(set (match_operand:EXTHI 3 \"gpc_reg_operand\" \"=r,r\")\n+\t(sign_extend:EXTHI\n+\t (mem:HI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t (match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && !(avoiding_indexed_address_p (SImode)\n-\t&& gpc_reg_operand (operands[2], SImode))\"\n+   && !(avoiding_indexed_address_p (HImode)\n+\t&& gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lhaux %3,%0,%2\n    lhau %3,%2(%0)\"\n@@ -9247,14 +9248,14 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movhi_update4\"\n-  [(set (mem:HI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n+  [(set (mem:HI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))\n \t(match_operand:HI 3 \"gpc_reg_operand\" \"r,r\"))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (HImode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    sthux %3,%0,%2\n    sthu %3,%2(%0)\"\n@@ -9264,13 +9265,13 @@\n \n (define_insn \"*movqi_update1\"\n   [(set (match_operand:QI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(mem:QI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+\t(mem:QI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (QImode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n@@ -9279,15 +9280,15 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movqi_update2\"\n-  [(set (match_operand:SI 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI\n-\t (mem:QI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  [(set (match_operand:EXTQI 3 \"gpc_reg_operand\" \"=r,r\")\n+\t(zero_extend:EXTQI\n+\t (mem:QI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t (match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (QImode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n@@ -9296,62 +9297,64 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movqi_update3\"\n-  [(set (mem:QI (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n+  [(set (mem:QI (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))\n \t(match_operand:QI 3 \"gpc_reg_operand\" \"r,r\"))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (QImode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    stbux %3,%0,%2\n    stbu %3,%2(%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes,no\")])\n \n-(define_insn \"*movsf_update1\"\n-  [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=f,f\")\n-\t(mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+(define_insn \"*mov<mode>_update1\"\n+  [(set (match_operand:SFDF 3 \"gpc_reg_operand\" \"=<Ff>,<Ff>\")\n+\t(mem:SFDF (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t  (match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_HARD_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (<MODE>mode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n-   lfsux %3,%0,%2\n-   lfsu %3,%2(%0)\"\n+   lf<Fs>ux %3,%0,%2\n+   lf<Fs>u %3,%2(%0)\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"update\" \"yes\")\n-   (set_attr \"indexed\" \"yes,no\")])\n+   (set_attr \"indexed\" \"yes,no\")\n+   (set_attr \"size\" \"<bits>\")])\n \n-(define_insn \"*movsf_update2\"\n-  [(set (mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n-\t(match_operand:SF 3 \"gpc_reg_operand\" \"f,f\"))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+(define_insn \"*mov<mode>_update2\"\n+  [(set (mem:SFDF (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t  (match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))\n+\t(match_operand:SFDF 3 \"gpc_reg_operand\" \"<Ff>,<Ff>\"))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_HARD_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (<MODE>mode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n-   stfsux %3,%0,%2\n-   stfsu %3,%2(%0)\"\n+   stf<Fs>ux %3,%0,%2\n+   stf<Fs>u %3,%2(%0)\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"update\" \"yes\")\n-   (set_attr \"indexed\" \"yes,no\")])\n+   (set_attr \"indexed\" \"yes,no\")\n+   (set_attr \"size\" \"<bits>\")])\n \n (define_insn \"*movsf_update3\"\n   [(set (match_operand:SF 3 \"gpc_reg_operand\" \"=r,r\")\n-\t(mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+\t(mem:SF (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_SOFT_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (SFmode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    lwzux %3,%0,%2\n    lwzu %3,%2(%0)\"\n@@ -9360,54 +9363,21 @@\n    (set_attr \"indexed\" \"yes,no\")])\n \n (define_insn \"*movsf_update4\"\n-  [(set (mem:SF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n+  [(set (mem:SF (plus:P (match_operand:P 1 \"gpc_reg_operand\" \"0,0\")\n+\t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"r,I\")))\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"r,r\"))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n+   (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n+\t(plus:P (match_dup 1) (match_dup 2)))]\n   \"TARGET_SOFT_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+   && (!avoiding_indexed_address_p (SFmode)\n+       || !gpc_reg_operand (operands[2], Pmode))\"\n   \"@\n    stwux %3,%0,%2\n    stwu %3,%2(%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"update\" \"yes\")\n    (set_attr \"indexed\" \"yes,no\")])\n \n-(define_insn \"*movdf_update1\"\n-  [(set (match_operand:DF 3 \"gpc_reg_operand\" \"=d,d\")\n-\t(mem:DF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n-  \"@\n-   lfdux %3,%0,%2\n-   lfdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpload\")\n-   (set_attr \"update\" \"yes\")\n-   (set_attr \"indexed\" \"yes,no\")\n-   (set_attr \"size\" \"64\")])\n-\n-(define_insn \"*movdf_update2\"\n-  [(set (mem:DF (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n-\t(match_operand:DF 3 \"gpc_reg_operand\" \"d,d\"))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_UPDATE\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n-  \"@\n-   stfdux %3,%0,%2\n-   stfdu %3,%2(%0)\"\n-  [(set_attr \"type\" \"fpstore\")\n-   (set_attr \"update\" \"yes\")\n-   (set_attr \"indexed\" \"yes,no\")])\n-\n \n ;; After inserting conditional returns we can sometimes have\n ;; unnecessary register moves.  Unfortunately we cannot have a\n@@ -9771,14 +9741,14 @@\n \t  emit_stack_clash_protection_probe_loop_start (&loop_lab, &end_loop,\n \t\t\t\t\t\t\tlast_addr, rotated);\n \n-\t  if (Pmode == SImode)\n+\t  if (TARGET_32BIT)\n \t    emit_insn (gen_movsi_update_stack (stack_pointer_rtx,\n \t\t\t\t\t       stack_pointer_rtx,\n \t\t\t\t\t       update, chain));\n \t  else\n-\t    emit_insn (gen_movdi_di_update_stack (stack_pointer_rtx,\n-\t\t\t\t\t          stack_pointer_rtx,\n-\t\t\t\t\t          update, chain));\n+\t    emit_insn (gen_movdi_update_stack (stack_pointer_rtx,\n+\t\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t\t       update, chain));\n \t  emit_stack_clash_protection_probe_loop_end (loop_lab, end_loop,\n \t\t\t\t\t\t      last_addr, rotated);\n \t}\n@@ -9802,7 +9772,7 @@\n     neg_op0 = GEN_INT (-INTVAL (operands[1]));\n \n   insn = emit_insn ((* ((TARGET_32BIT) ? gen_movsi_update_stack\n-\t\t\t\t       : gen_movdi_di_update_stack))\n+\t\t\t\t       : gen_movdi_update_stack))\n \t\t\t(stack_pointer_rtx, stack_pointer_rtx, neg_op0,\n \t\t\t chain));\n   /* Since we didn't use gen_frame_mem to generate the MEM, grab"}]}