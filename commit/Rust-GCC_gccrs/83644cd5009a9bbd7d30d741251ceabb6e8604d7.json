{"sha": "83644cd5009a9bbd7d30d741251ceabb6e8604d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2NDRjZDUwMDlhOWJiZDdkMzBkNzQxMjUxY2VhYmI2ZTg2MDRkNw==", "commit": {"author": {"name": "Peter O'Gorman", "email": "pogma@thewrittenword.com", "date": "2008-03-07T06:53:59Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-03-07T06:53:59Z"}, "message": "re PR target/20366 (AIX g++ -D_LARGE_FILES fails to compile #include <iostream>)\n\nfixincludes/\n2008-03-07  Peter O'Gorman  <pogma@thewrittenword.com>\n\n\tPR c++/20366\n\t* inclhack.def (AAB_aix_stdio): Hack stdio.h for -D_LARGE_FILES.\n\t* fixincl.x: Regenerate.\n\t* tests/base/stdio.h: Add test.\n\ngcc/testsuite/\n2008-03-07  Peter O'Gorman  <pogma@thewrittenword.com>\n\n\tPR c++/20366\n\t* g++.dg/other/pr20366.C: New test.\n\nFrom-SVN: r133001", "tree": {"sha": "072652d60f8a677c86c43e463b9022934574a6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/072652d60f8a677c86c43e463b9022934574a6d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83644cd5009a9bbd7d30d741251ceabb6e8604d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83644cd5009a9bbd7d30d741251ceabb6e8604d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83644cd5009a9bbd7d30d741251ceabb6e8604d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83644cd5009a9bbd7d30d741251ceabb6e8604d7/comments", "author": null, "committer": null, "parents": [{"sha": "cb6f415f34f831b7f84be0f64879eca01ab74051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6f415f34f831b7f84be0f64879eca01ab74051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6f415f34f831b7f84be0f64879eca01ab74051"}], "stats": {"total": 233, "additions": 215, "deletions": 18}, "files": [{"sha": "49afc5ece9bdedc19df0ea36e6904c5f7638ef87", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=83644cd5009a9bbd7d30d741251ceabb6e8604d7", "patch": "@@ -1,3 +1,10 @@\n+2008-03-07  Peter O'Gorman  <pogma@thewrittenword.com>\n+\n+\tPR c++/20366\n+\t* inclhack.def (AAB_aix_stdio): Hack stdio.h for -D_LARGE_FILES.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/stdio.h: Add test.\n+\n 2008-02-25  Ben Elliston  <bje@au.ibm.com>\n \n \tPR other/32948"}, {"sha": "4338150135cf0c96ace00dea228fef1975079cec", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 77, "deletions": 18, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=83644cd5009a9bbd7d30d741251ceabb6e8604d7", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Wednesday February 20, 2008 at 05:10:00 AM CET\n+ * It has been AutoGen-ed  Friday March  7, 2008 at 07:37:21 AM CET\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Feb 20 05:10:00 CET 2008\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Fr 7. M\u00e4r 07:37:22 CET 2008\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,31 +15,84 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 212 fixup descriptions.\n+ * This file contains 213 fixup descriptions.\n  *\n  * See README for more information.\n  *\n  *  inclhack copyright (c) 1998, 1999, 2000, 2001\n  *  The Free Software Foundation, Inc.\n  *\n-  *  inclhack is free software.\n+  *  inclhack is free software: you can redistribute it and/or modify it\n+ *  under the terms of the GNU General Public License as published by the\n+ *  Free Software Foundation, either version 3 of the License, or\n+ *  (at your option) any later version.\n  *  \n- *  You may redistribute it and/or modify it under the terms of the\n- *  GNU General Public License, as published by the Free Software\n- *  Foundation; either version 2 of the License, or (at your option)\n- *  any later version.\n- *  \n- *  inclhack is distributed in the hope that it will be useful,\n- *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  inclhack is distributed in the hope that it will be useful, but\n+ *  WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  *  See the GNU General Public License for more details.\n  *  \n- *  You should have received a copy of the GNU General Public License\n- *  along with inclhack.  If not, write to:\n- *  \tThe Free Software Foundation, Inc.,\n- *  \t51 Franklin Street, Fifth Floor\n- *  \tBoston, MA  02110-1301, USA.\n+ *  You should have received a copy of the GNU General Public License along\n+ *  with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aab_Aix_Stdio fix\n+ */\n+tSCC zAab_Aix_StdioName[] =\n+     \"AAB_aix_stdio\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAab_Aix_StdioList[] =\n+  \"stdio.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAab_Aix_StdioMachs[] = {\n+        \"*-*-aix*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n  */\n+tSCC zAab_Aix_StdioSelect0[] =\n+       \"define fopen fopen64\";\n+\n+#define    AAB_AIX_STDIO_TEST_CT  1\n+static tTestDesc aAab_Aix_StdioTests[] = {\n+  { TT_EGREP,    zAab_Aix_StdioSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aab_Aix_Stdio\n+ */\n+static const char* apzAab_Aix_StdioPatch[] = {\n+    \"wrap\",\n+    \"\",\n+    \"\\n\\\n+#if defined __GNUG__ && defined _LARGE_FILES && defined __cplusplus\\n\\\n+#define __need__aix_stdio_h_fix\\n\\\n+#ifdef __need__aix_stdio_h_fix\\n\\\n+#undef fseeko\\n\\\n+#undef ftello\\n\\\n+#undef fgetpos\\n\\\n+#undef fsetpos\\n\\\n+#undef fopen\\n\\\n+#undef freopen\\n\\\n+/* Alias the symbols using asm */\\n\\\n+extern \\\"C\\\" {\\n\\\n+extern int fgetpos(FILE *, fpos64_t *) __asm__(\\\"fgetpos64\\\");\\n\\\n+extern FILE *fopen(const char *, const char *) __asm__(\\\"fopen64\\\");\\n\\\n+extern FILE *freopen(const char *, const char *, FILE *) __asm__(\\\"freopen64\\\");\\n\\\n+extern int fseeko(FILE *, off64_t, int) __asm__(\\\"fseeko64\\\");\\n\\\n+extern int fsetpos(FILE *, const fpos64_t *) __asm__(\\\"fsetpos64\\\");\\n\\\n+extern off64_t ftello(FILE *) __asm__(\\\"ftello64\\\");\\n\\\n+}\\n\\\n+#endif\\n\\\n+#endif\\n\",\n+    (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n@@ -8611,14 +8664,15 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          255\n+#define REGEX_COUNT          256\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            212\n+#define FIX_COUNT            213\n \n /*\n  *  Enumerate the fixes\n  */\n typedef enum {\n+    AAB_AIX_STDIO_FIXIDX,\n     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_FIXIDX,\n     AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_2_FIXIDX,\n     AAB_FD_ZERO_ASM_POSIX_TYPES_H_FIXIDX,\n@@ -8834,6 +8888,11 @@ typedef enum {\n } t_fixinc_idx;\n \n tFixDesc fixDescList[ FIX_COUNT ] = {\n+  {  zAab_Aix_StdioName,    zAab_Aix_StdioList,\n+     apzAab_Aix_StdioMachs,\n+     AAB_AIX_STDIO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAab_Aix_StdioTests,   apzAab_Aix_StdioPatch, 0 },\n+\n   {  zAab_Darwin7_9_Long_Double_FuncsName,    zAab_Darwin7_9_Long_Double_FuncsList,\n      apzAab_Darwin7_9_Long_Double_FuncsMachs,\n      AAB_DARWIN7_9_LONG_DOUBLE_FUNCS_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,"}, {"sha": "04b0c82ed6c1a13c6d9b6bfb83a21dc2689949b5", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=83644cd5009a9bbd7d30d741251ceabb6e8604d7", "patch": "@@ -20,6 +20,47 @@ autogen definitions fixincl;\n FIXINC_DEBUG = yes;\n #endif\n \n+/* On AIX when _LARGE_FILES is defined stdio.h defines fopen to\n+ * fopen64 etc. and this causes problems when building with g++\n+ * because cstdio udefs everything from stdio.h, leaving us with\n+ * ::fopen has not been declared errors. This fixes stdio.h to\n+ * undef those defines and use __asm__ to alias the symbols if\n+ * building with g++ and -D_LARGE_FILES\n+ */\n+fix = {\n+\thackname  = AAB_aix_stdio;\n+\tfiles     = stdio.h;\n+\tselect    = \"define fopen fopen64\";\n+\tmach      = \"*-*-aix*\";\n+\n+\tc_fix\t  = wrap;\n+\n+\tc_fix_arg = \"\";\n+\n+\tc_fix_arg = \"\\n\" \n+\t\"#if defined __GNUG__ && defined _LARGE_FILES && defined __cplusplus\\n\"\n+\t\"#define __need__aix_stdio_h_fix\\n\"\n+\t\"#ifdef __need__aix_stdio_h_fix\\n\"\n+\t\"#undef fseeko\\n\"\n+\t\"#undef ftello\\n\"\n+\t\"#undef fgetpos\\n\"\n+\t\"#undef fsetpos\\n\"\n+\t\"#undef fopen\\n\"\n+\t\"#undef freopen\\n\"\n+\t\"/* Alias the symbols using asm */\\n\"\n+\t\"extern \\\"C\\\" {\\n\"\n+\t\"extern int fgetpos(FILE *, fpos64_t *) __asm__(\\\"fgetpos64\\\");\\n\"\n+\t\"extern FILE *fopen(const char *, const char *) __asm__(\\\"fopen64\\\");\\n\"\n+\t\"extern FILE *freopen(const char *, const char *, FILE *) __asm__(\\\"freopen64\\\");\\n\"\n+\t\"extern int fseeko(FILE *, off64_t, int) __asm__(\\\"fseeko64\\\");\\n\"\n+\t\"extern int fsetpos(FILE *, const fpos64_t *) __asm__(\\\"fsetpos64\\\");\\n\"\n+\t\"extern off64_t ftello(FILE *) __asm__(\\\"ftello64\\\");\\n\"\n+\t\"}\\n\"\n+\t\"#endif\\n\"\n+\t\"#endif\\n\";\n+\ttest_text = \"\";\n+};\n+\n \n /*\n  *  On Mac OS 10.3.9, the 'long double' functions are available in"}, {"sha": "b6a8a9b7e1ce8193b4a01a2fa0c9e44a81af2012", "filename": "fixincludes/tests/base/stdio.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2Ftests%2Fbase%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83644cd5009a9bbd7d30d741251ceabb6e8604d7/fixincludes%2Ftests%2Fbase%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdio.h?ref=83644cd5009a9bbd7d30d741251ceabb6e8604d7", "patch": "@@ -14,6 +14,11 @@\n #include <stdarg.h>\n \n \n+#if defined( AAB_AIX_STDIO_CHECK )\n+\n+#endif  /* AAB_AIX_STDIO_CHECK */\n+\n+\n #if defined( ALPHA_GETOPT_CHECK )\n extern int getopt(int, char *const[], const char *);\n #endif  /* ALPHA_GETOPT_CHECK */"}, {"sha": "d9566e9c5c5f67492c1b85ce19c80ddf21e1dd3c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83644cd5009a9bbd7d30d741251ceabb6e8604d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83644cd5009a9bbd7d30d741251ceabb6e8604d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83644cd5009a9bbd7d30d741251ceabb6e8604d7", "patch": "@@ -1,3 +1,8 @@\n+2008-03-07  Peter O'Gorman  <pogma@thewrittenword.com>\n+\n+\tPR c++/20366\n+\t* g++.dg/other/pr20366.C: New test.\n+\n 2008-03-06  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/35402"}, {"sha": "36a689ebf42de4a9109d209aeeb8f9631e5e9683", "filename": "gcc/testsuite/g++.dg/other/pr20366.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83644cd5009a9bbd7d30d741251ceabb6e8604d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr20366.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83644cd5009a9bbd7d30d741251ceabb6e8604d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr20366.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr20366.C?ref=83644cd5009a9bbd7d30d741251ceabb6e8604d7", "patch": "@@ -0,0 +1,80 @@\n+// Test fix for PR20366\n+// \n+// { dg-do compile  { target *-*-aix* } }\n+// { dg-options \"-D_LARGE_FILES\" }\n+//\n+// cstdio includes stdio.h and undefs most of the functions declared\n+// therein, unfortunately this means that #define fopen fopen64 goes\n+// away. This tests the fix, and ensures that with -D_LARGE_FILES\n+// fopen et. al. are indeed aliased to the large file equivalents.\n+//\n+// There are many other #define foo foo64 in the AIX headers, but\n+// these all work out fine as they are not undefined in libstdc++.\n+// This list is probably incomplete:\n+//\n+// Symbol          Return type     Large file declaration.\n+// \n+// aio.h                      (different for different AIX versions)\n+// =====\n+// aio_read        int        aio_read64(int, struct aiocb64 *);\n+// aio_write       int        aio_write64(int, struct aiocb64 *);\n+// lio_listio      int        lio_listio64(int, struct liocb64 *[], int, void *);\n+// aio_cancel      int        aio_cancel64(int, struct aiocb64 *);\n+// aio_suspend     int        aio_suspend64(int, struct aiocb64 *[]);\n+// \n+// stdio.h\n+// =======\n+// fgetpos         int        fgetpos64(FILE *, fpos64_t *);\n+// fopen           FILE      *fopen64(const char *, const char *);\n+// freopen         FILE      *freopen64(const char *, const char *, FILE *);\n+// fseeko          int        fseeko64(FILE *, off64_t, int);\n+// fsetpos         int        fsetpos64(FILE *, const fpos64_t *);\n+// ftello          off64_t    ftello64(FILE *);\n+// \n+// unistd.h\n+// ========\n+// fclear          off64_t    fclear64(int, off64_t);\n+// fsync_range     int        fsync_range64(int, int, off64_t, off64_t);\n+// ftruncate       int        ftruncate64(int, off64_t);\n+// truncate        int        truncate64(const char *, off64_t);\n+// lseek           off64_t    lseek64(int, off64_t, int);\n+// pread           ssize_t    pread64(int, void *, size_t, off64_t);\n+// pwrite          ssize_t    pwrite64(int, const void *, size_t, off64_t);\n+// \n+// fcntl.h\n+// =======\n+// open            int        open64(const char *, int, ...);\n+// creat           int        creat64(const char *, mode_t);\n+// \n+// sys/stat.h\n+// ==========\n+// stat            int        stat64(const char *, struct stat64 *);\n+// fstat           int        fstat64(int, struct stat64 *);\n+// lstat           int        lstat64(const char *, struct stat64 *);\n+// \n+// stdlib.h\n+// ========\n+// mkstemp         int        mkstemp64(char *);\n+// \n+// ftw.h\n+// =====\n+// ftw             int        ftw64(const char *, int (*)(const char *,const struct stat64 *, int), int);\n+// nftw            int        nftw64(const char *, int (*)(const char *, const struct stat64 *, int, struct FTW*), int, int);\n+//\n+// It seems unlikely that any of these will be used (and #undef'ed) by\n+// libstdc++ in the future, if they are then this test and its\n+// associated patch to fixincludes will have to be revisited.\n+\n+#include <cstdio>\n+\n+extern \"C\" {\n+int        fgetpos(FILE *, fpos64_t *);\n+FILE      *fopen(const char *, const char *);\n+FILE      *freopen(const char *, const char *, FILE *);\n+int        fseeko(FILE *, off64_t, int);\n+int        fsetpos(FILE *, const fpos64_t *);\n+off64_t    ftello(FILE *);\n+}\n+int main() { \n+  return 0;\n+}"}]}