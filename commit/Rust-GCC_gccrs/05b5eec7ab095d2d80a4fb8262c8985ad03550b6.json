{"sha": "05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDViNWVlYzdhYjA5NWQyZDgwYTRmYjgyNjJjODk4NWFkMDM1NTBiNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-14T17:32:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-14T19:18:09Z"}, "message": "Add check for missing items in impl of trait\n\nIf an impl block does not implement all trait-items it is an error. This\nalso takes into account that functions and constants may actually have\nvalues and may not need to be implemented by the impl block.\n\nAddresses #542", "tree": {"sha": "29194600c60c434f6af98f7ac96fea8863830d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29194600c60c434f6af98f7ac96fea8863830d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0c46b86aaa38f18e2c0af2a4711bfeaa242498"}], "stats": {"total": 193, "additions": 133, "deletions": 60}, "files": [{"sha": "35c0fefd849a5a951dccef736fa45829250f4f76", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "patch": "@@ -236,6 +236,13 @@ class TraitReference\n     return TraitItemReference::error_node ();\n   }\n \n+  size_t size () const { return item_refs.size (); }\n+\n+  const std::vector<TraitItemReference> &get_trait_items () const\n+  {\n+    return item_refs;\n+  }\n+\n private:\n   const HIR::Trait *hir_trait_ref;\n   std::vector<TraitItemReference> item_refs;"}, {"sha": "d6c3aed386e0698c876c3bee6108c6083519a0a1", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 46, "deletions": 57, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "patch": "@@ -214,117 +214,109 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n \n   void visit (HIR::ConstantItem &constant) override\n   {\n-    TypeCheckImplItem::visit (constant);\n-\n-    // we get the error checking from the base method here\n-    TyTy::BaseType *lookup;\n-    if (!context->lookup_type (constant.get_mappings ().get_hirid (), &lookup))\n-      return;\n-\n-    const TraitItemReference &trait_item_ref\n-      = trait_reference.lookup_trait_item (\n-\tconstant.get_identifier (), TraitItemReference::TraitItemType::CONST);\n+    resolved_trait_item = trait_reference.lookup_trait_item (\n+      constant.get_identifier (), TraitItemReference::TraitItemType::CONST);\n \n     // unknown trait item\n-    if (trait_item_ref.is_error ())\n+    if (resolved_trait_item.is_error ())\n       {\n \tRichLocation r (constant.get_locus ());\n \tr.add_range (trait_reference.get_locus ());\n \trust_error_at (r, \"constant %<%s%> is not a member of trait %<%s%>\",\n \t\t       constant.get_identifier ().c_str (),\n \t\t       trait_reference.get_name ().c_str ());\n-\treturn;\n       }\n \n+    // normal resolution of the item\n+    TypeCheckImplItem::visit (constant);\n+    TyTy::BaseType *lookup;\n+    if (!context->lookup_type (constant.get_mappings ().get_hirid (), &lookup))\n+      return;\n+    if (resolved_trait_item.is_error ())\n+      return;\n+\n     // check the types are compatible\n-    if (!trait_item_ref.get_tyty ()->can_eq (lookup, true))\n+    if (!resolved_trait_item.get_tyty ()->can_eq (lookup, true))\n       {\n \tRichLocation r (constant.get_locus ());\n-\tr.add_range (trait_item_ref.get_locus ());\n+\tr.add_range (resolved_trait_item.get_locus ());\n \n \trust_error_at (\n \t  r, \"constant %<%s%> has an incompatible type for trait %<%s%>\",\n \t  constant.get_identifier ().c_str (),\n \t  trait_reference.get_name ().c_str ());\n-\treturn;\n       }\n-\n-    resolved_trait_item = trait_item_ref;\n   }\n \n   void visit (HIR::TypeAlias &type) override\n   {\n-    TypeCheckImplItem::visit (type);\n-\n-    // we get the error checking from the base method here\n-    TyTy::BaseType *lookup;\n-    if (!context->lookup_type (type.get_mappings ().get_hirid (), &lookup))\n-      return;\n-\n-    const TraitItemReference &trait_item_ref\n-      = trait_reference.lookup_trait_item (\n-\ttype.get_new_type_name (), TraitItemReference::TraitItemType::TYPE);\n+    resolved_trait_item = trait_reference.lookup_trait_item (\n+      type.get_new_type_name (), TraitItemReference::TraitItemType::TYPE);\n \n     // unknown trait item\n-    if (trait_item_ref.is_error ())\n+    if (resolved_trait_item.is_error ())\n       {\n \tRichLocation r (type.get_locus ());\n \tr.add_range (trait_reference.get_locus ());\n \trust_error_at (r, \"type alias %<%s%> is not a member of trait %<%s%>\",\n \t\t       type.get_new_type_name ().c_str (),\n \t\t       trait_reference.get_name ().c_str ());\n-\treturn;\n       }\n \n+    // normal resolution of the item\n+    TypeCheckImplItem::visit (type);\n+    TyTy::BaseType *lookup;\n+    if (!context->lookup_type (type.get_mappings ().get_hirid (), &lookup))\n+      return;\n+    if (resolved_trait_item.is_error ())\n+      return;\n+\n     // check the types are compatible\n-    if (!trait_item_ref.get_tyty ()->can_eq (lookup, true))\n+    if (!resolved_trait_item.get_tyty ()->can_eq (lookup, true))\n       {\n \tRichLocation r (type.get_locus ());\n-\tr.add_range (trait_item_ref.get_locus ());\n+\tr.add_range (resolved_trait_item.get_locus ());\n \n \trust_error_at (\n \t  r, \"type alias %<%s%> has an incompatible type for trait %<%s%>\",\n \t  type.get_new_type_name ().c_str (),\n \t  trait_reference.get_name ().c_str ());\n-\treturn;\n       }\n \n-    context->insert_type (trait_item_ref.get_mappings (), lookup->clone ());\n-    resolved_trait_item = trait_item_ref;\n+    context->insert_type (resolved_trait_item.get_mappings (),\n+\t\t\t  lookup->clone ());\n   }\n \n   void visit (HIR::Function &function) override\n   {\n-    TypeCheckImplItem::visit (function);\n-\n-    // we get the error checking from the base method here\n-    TyTy::BaseType *lookup;\n-    if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))\n-      return;\n-\n-    if (lookup->get_kind () != TyTy::TypeKind::FNDEF)\n-      return;\n-\n-    TyTy::FnType *fntype = static_cast<TyTy::FnType *> (lookup);\n-    const TraitItemReference &trait_item_ref\n-      = trait_reference.lookup_trait_item (\n-\tfntype->get_identifier (), TraitItemReference::TraitItemType::FN);\n+    resolved_trait_item = trait_reference.lookup_trait_item (\n+      function.get_function_name (), TraitItemReference::TraitItemType::FN);\n \n     // unknown trait item\n-    if (trait_item_ref.is_error ())\n+    if (resolved_trait_item.is_error ())\n       {\n \tRichLocation r (function.get_locus ());\n \tr.add_range (trait_reference.get_locus ());\n \trust_error_at (r, \"method %<%s%> is not a member of trait %<%s%>\",\n-\t\t       fntype->get_identifier ().c_str (),\n+\t\t       function.get_function_name ().c_str (),\n \t\t       trait_reference.get_name ().c_str ());\n-\treturn;\n       }\n \n-    rust_assert (trait_item_ref.get_tyty ()->get_kind ()\n+    // we get the error checking from the base method here\n+    TypeCheckImplItem::visit (function);\n+    TyTy::BaseType *lookup;\n+    if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))\n+      return;\n+    if (resolved_trait_item.is_error ())\n+      return;\n+\n+    rust_assert (lookup->get_kind () == TyTy::TypeKind::FNDEF);\n+    rust_assert (resolved_trait_item.get_tyty ()->get_kind ()\n \t\t == TyTy::TypeKind::FNDEF);\n+\n+    TyTy::FnType *fntype = static_cast<TyTy::FnType *> (lookup);\n     TyTy::FnType *trait_item_fntype\n-      = static_cast<TyTy::FnType *> (trait_item_ref.get_tyty ());\n+      = static_cast<TyTy::FnType *> (resolved_trait_item.get_tyty ());\n \n     // sets substitute self into the trait_item_ref->tyty\n     TyTy::SubstitutionParamMapping *self_mapping = nullptr;\n@@ -351,16 +343,13 @@ class TypeCheckImplItemWithTrait : public TypeCheckImplItem\n     if (!trait_item_fntype->can_eq (fntype, true))\n       {\n \tRichLocation r (function.get_locus ());\n-\tr.add_range (trait_item_ref.get_locus ());\n+\tr.add_range (resolved_trait_item.get_locus ());\n \n \trust_error_at (\n \t  r, \"method %<%s%> has an incompatible type for trait %<%s%>\",\n \t  fntype->get_identifier ().c_str (),\n \t  trait_reference.get_name ().c_str ());\n-\treturn;\n       }\n-\n-    resolved_trait_item = trait_item_ref;\n   }\n \n private:"}, {"sha": "f1ae82dde7cf12895859f33a7b1896f3011a341b", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "patch": "@@ -60,13 +60,65 @@ class TypeCheckItem : public TypeCheckBase\n \treturn;\n       }\n \n+    bool is_trait_impl_block = !trait_reference.is_error ();\n+\n+    std::vector<std::reference_wrapper<const TraitItemReference>>\n+      trait_item_refs;\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n-\tif (trait_reference.is_error ())\n+\tif (!is_trait_impl_block)\n \t  TypeCheckImplItem::Resolve (impl_item.get (), self);\n \telse\n-\t  TypeCheckImplItemWithTrait::Resolve (impl_item.get (), self,\n-\t\t\t\t\t       trait_reference);\n+\t  {\n+\t    auto &trait_item_ref\n+\t      = TypeCheckImplItemWithTrait::Resolve (impl_item.get (), self,\n+\t\t\t\t\t\t     trait_reference);\n+\t    trait_item_refs.push_back (trait_item_ref);\n+\t  }\n+      }\n+\n+    bool impl_block_missing_trait_items\n+      = is_trait_impl_block\n+\t&& trait_reference.size () != trait_item_refs.size ();\n+    if (impl_block_missing_trait_items)\n+      {\n+\t// filter the missing impl_items\n+\tstd::vector<std::reference_wrapper<const TraitItemReference>>\n+\t  missing_trait_items;\n+\tfor (auto &trait_item_ref : trait_reference.get_trait_items ())\n+\t  {\n+\t    bool found = false;\n+\t    for (const TraitItemReference &implemented_trait_item :\n+\t\t trait_item_refs)\n+\t      {\n+\t\tstd::string trait_item_name = trait_item_ref.get_identifier ();\n+\t\tstd::string impl_item_name\n+\t\t  = implemented_trait_item.get_identifier ();\n+\t\tfound = trait_item_name.compare (impl_item_name) == 0;\n+\t\tif (found)\n+\t\t  break;\n+\t      }\n+\n+\t    bool is_required_trait_item = !trait_item_ref.is_optional ();\n+\t    if (!found && is_required_trait_item)\n+\t      missing_trait_items.push_back (trait_item_ref);\n+\t  }\n+\n+\tstd::string missing_items_buf;\n+\tRichLocation r (impl_block.get_locus ());\n+\tfor (size_t i = 0; i < missing_trait_items.size (); i++)\n+\t  {\n+\t    bool has_more = (i + 1) < missing_trait_items.size ();\n+\t    const TraitItemReference &missing_trait_item\n+\t      = missing_trait_items.at (i);\n+\t    missing_items_buf\n+\t      += missing_trait_item.get_identifier () + (has_more ? \", \" : \"\");\n+\t    r.add_range (missing_trait_item.get_locus ());\n+\t  }\n+\n+\trust_error_at (r, \"missing %s in implementation of trait %<%s%>\",\n+\t\t       missing_items_buf.c_str (),\n+\t\t       trait_reference.get_name ().c_str ());\n       }\n   }\n "}, {"sha": "486301d61369820d1ee7872e26d80439632383ad", "filename": "gcc/testsuite/rust/compile/traits4.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits4.rs?ref=05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "patch": "@@ -0,0 +1,16 @@\n+trait Foo {\n+    const A: i32;\n+\n+    fn test(self);\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    // { dg-error \"missing A in implementation of trait .Foo.\" \"\" { target *-*-* } .-1 }\n+    fn test(self) {}\n+}\n+\n+fn main() {\n+    let a = Bar;\n+    a.test();\n+}"}, {"sha": "8b2fb9bc10d4da1b864b689b776fa603105886ef", "filename": "gcc/testsuite/rust/compile/traits5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05b5eec7ab095d2d80a4fb8262c8985ad03550b6/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits5.rs?ref=05b5eec7ab095d2d80a4fb8262c8985ad03550b6", "patch": "@@ -0,0 +1,9 @@\n+trait Foo {\n+    const A: i32;\n+\n+    fn test(self);\n+}\n+\n+struct Bar;\n+impl Foo for Bar {}\n+// { dg-error \"missing A, test in implementation of trait .Foo.\" \"\" { target *-*-* } .-1 }"}]}