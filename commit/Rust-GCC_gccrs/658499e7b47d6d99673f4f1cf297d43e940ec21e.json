{"sha": "658499e7b47d6d99673f4f1cf297d43e940ec21e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU4NDk5ZTdiNDdkNmQ5OTY3M2Y0ZjFjZjI5N2Q0M2U5NDBlYzIxZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-03-02T21:32:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-03-02T21:32:56Z"}, "message": "num_get_members_char.cc (test04): Use a named locale expecting grouping (de_DE).\n\n2002-03-02  Paolo Carlini  <pcarlini@unitus.it>\n\n        * testsuite/22_locale/num_get_members_char.cc (test04):\n\tUse a named locale expecting grouping (de_DE).\n        * testsuite/22_locale/num_get_members_wchar_t.cc (test04):\n\tDitto.\n        * testsuite/27_io/ios_manip_basefield.cc (test01):\n\tExtend coverage, uniform treatment of hexs and octs.\n\nFrom-SVN: r50234", "tree": {"sha": "627c4acf284029105808f6bf1b9f0207ff44534f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/627c4acf284029105808f6bf1b9f0207ff44534f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/658499e7b47d6d99673f4f1cf297d43e940ec21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658499e7b47d6d99673f4f1cf297d43e940ec21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658499e7b47d6d99673f4f1cf297d43e940ec21e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658499e7b47d6d99673f4f1cf297d43e940ec21e/comments", "author": null, "committer": null, "parents": [{"sha": "fd87b7a7099bc82b2542b169c592c0dfc997029e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd87b7a7099bc82b2542b169c592c0dfc997029e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd87b7a7099bc82b2542b169c592c0dfc997029e"}], "stats": {"total": 119, "additions": 66, "deletions": 53}, "files": [{"sha": "d8ccc58523deb815940f3ca6cbc79c1cbaef95ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=658499e7b47d6d99673f4f1cf297d43e940ec21e", "patch": "@@ -1,3 +1,12 @@\n+2002-03-02  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* testsuite/22_locale/num_get_members_char.cc (test04):\n+\tUse a named locale expecting grouping (de_DE).\n+\t* testsuite/22_locale/num_get_members_wchar_t.cc (test04):\n+\tDitto.\n+\t* testsuite/27_io/ios_manip_basefield.cc (test01):\n+\tExtend coverage, uniform treatment of hexs and octs.\n+\n 2002-02-28  Richard Henderson  <rth@redhat.com>\n \n \t* config/linker-map.gnu: Export operator new with unsigned long,"}, {"sha": "e8f2219543c88bd1cdfedf921f9bd0fed48d7477", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=658499e7b47d6d99673f4f1cf297d43e940ec21e", "patch": "@@ -332,15 +332,6 @@ void test03()\n #endif\n }\n \n-struct MyNP : std::numpunct<char>\n-{\n-  std::string do_grouping() const;\n-  char   do_thousands_sep() const;\n-};\n-\n-std::string MyNP::do_grouping() const { std::string s(\"\\3\"); return s; }\n-char   MyNP::do_thousands_sep() const { return ' '; }\n-\n // Testing the correct parsing of grouped hexadecimals and octals.\n void test04()\n {\n@@ -351,49 +342,52 @@ void test04()\n   unsigned long ul;\n \n   istringstream iss;\n-  iss.imbue(locale(locale(), new MyNP));\n+\n+  // A locale that expects grouping\n+  locale loc_de(\"de_DE\");\n+  iss.imbue(loc_de);\n \n   const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n   const ios_base::iostate goodbit = ios_base::goodbit;\n   ios_base::iostate err = ios_base::goodbit;\n \n   iss.setf(ios::hex, ios::basefield);\n-  iss.str(\"0xbf fff 74c.\");\n+  iss.str(\"0xbf.fff.74c \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 0xbffff74c );\n \n-  iss.str(\"0Xf fff.\");\n+  iss.str(\"0Xf.fff \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 0xffff );\n \n-  iss.str(\"f ffe.\");\n+  iss.str(\"ffe \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n-  VERIFY( ul == 0xfffe );\n+  VERIFY( ul == 0xffe );\n \n   iss.setf(ios::oct, ios::basefield);\n-  iss.str(\"07 654 321.\");\n+  iss.str(\"07.654.321 \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 07654321 );\n \n-  iss.str(\"07 777.\");\n+  iss.str(\"07.777 \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 07777 );\n \n-  iss.str(\"7 776.\");\n+  iss.str(\"776 \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n-  VERIFY( ul == 07776 );\n+  VERIFY( ul == 0776 );\n }\n \n int main()"}, {"sha": "807fb5b14749a02e083757e3d7451444589b6008", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=658499e7b47d6d99673f4f1cf297d43e940ec21e", "patch": "@@ -334,15 +334,6 @@ void test03()\n #endif\n }\n \n-struct MyNP : std::numpunct<wchar_t>\n-{\n-  std::string do_grouping() const;\n-  wchar_t   do_thousands_sep() const;\n-};\n-\n-std::string MyNP::do_grouping() const { std::string s(\"\\3\"); return s; }\n-wchar_t   MyNP::do_thousands_sep() const { return L' '; }\n-\n // Testing the correct parsing of grouped hexadecimals and octals.\n void test04()\n {\n@@ -353,49 +344,52 @@ void test04()\n   unsigned long ul;\n \n   wistringstream iss;\n-  iss.imbue(locale(locale(), new MyNP));\n+\n+  // A locale that expects grouping\n+  locale loc_de(\"de_DE\");\n+  iss.imbue(loc_de);\n \n   const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n   const ios_base::iostate goodbit = ios_base::goodbit;\n   ios_base::iostate err = ios_base::goodbit;\n \n   iss.setf(ios::hex, ios::basefield);\n-  iss.str(L\"0xbf fff 74c.\");\n+  iss.str(L\"0xbf.fff.74c \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 0xbffff74c );\n \n-  iss.str(L\"0Xf fff.\");\n+  iss.str(L\"0Xf.fff \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 0xffff );\n \n-  iss.str(L\"f ffe.\");\n+  iss.str(L\"ffe \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n-  VERIFY( ul == 0xfffe );\n+  VERIFY( ul == 0xffe );\n \n   iss.setf(ios::oct, ios::basefield);\n-  iss.str(L\"07 654 321.\");\n+  iss.str(L\"07.654.321 \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 07654321 );\n \n-  iss.str(L\"07 777.\");\n+  iss.str(L\"07.777 \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n   VERIFY( ul == 07777 );\n \n-  iss.str(L\"7 776.\");\n+  iss.str(L\"776 \");\n   err = goodbit;\n   ng.get(iss.rdbuf(), 0, iss, err, ul);\n   VERIFY( err == goodbit );\n-  VERIFY( ul == 07776 );\n+  VERIFY( ul == 0776 );\n }\n #endif\n "}, {"sha": "82aeeaa0c7440063170a0c5b364b5aee93961cc6", "filename": "libstdc++-v3/testsuite/27_io/ios_manip_basefield.cc", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_basefield.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658499e7b47d6d99673f4f1cf297d43e940ec21e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_basefield.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_basefield.cc?ref=658499e7b47d6d99673f4f1cf297d43e940ec21e", "patch": "@@ -47,12 +47,15 @@ test01()\n   bool test = true;\n \n   const char lit[] = \"0123 456\\n: 01 234 567:\\n:0123 456   :\\n\"\n-                     \":    012 345:\\n:     01 234:\\n: 04 553 207:\\n\"\n-                     \":0361 100   :\\n:    030 071:\\n:     02 322:\\n\"\n-                     \"0x000012 345 678\\n\";\n+                     \":    012 345:\\n:     01 234:\\n:0726 746 425:\\n\"\n+                     \":04 553 207 :\\n:   0361 100:\\n:       0173:\\n\"\n+                     \"0x12 345 678\\n|0x000012 345 678|\\n|0x12 345 6780000|\\n\"\n+                     \"|00000x12 345 678|\\n|0x000012 345 678|\\n\";\n \n   std::ostringstream oss;\n   oss.imbue(std::locale(std::locale(), new MyNP));\n+\n+  // Octals\n   oss << std::oct << std::showbase;\n   oss << 0123456l << std::endl;\n \n@@ -69,24 +72,33 @@ test01()\n   oss << 01234l << \":\" << std::endl;\n \n   oss << \":\" << std::setw(11);\n-  oss << 1234567l << \":\" << std::endl;\n+  oss << 123456789l << \":\" << std::endl;\n \n   oss << \":\" << std::setw(11) << std::left;\n-  oss << 123456l << \":\" << std::endl;\n+  oss << 1234567l << \":\" << std::endl;\n \n   oss << \":\" << std::setw(11) << std::right;\n-  oss << 12345l << \":\" << std::endl;\n+  oss << 123456l << \":\" << std::endl;\n \n   oss << \":\" << std::setw(11) << std::internal;\n-  oss << 1234l << \":\" << std::endl;\n+  oss << 123l << \":\" << std::endl;\n \n-  oss << std::hex;\n-  oss << std::setfill('0');\n-  oss << std::internal;\n-  oss << std::showbase;\n-  oss << std::setw(16);\n+  // Hexadecimals\n+  oss << std::hex << std::setfill('0');\n   oss << 0x12345678l << std::endl;\n \n+  oss << \"|\" << std::setw(16);\n+  oss << 0x12345678l << \"|\" << std::endl;\n+\n+  oss << \"|\" << std::setw(16) << std::left;\n+  oss << 0x12345678l << \"|\" << std::endl;\n+\n+  oss << \"|\" << std::setw(16) << std::right;\n+  oss << 0x12345678l << \"|\" << std::endl;\n+\n+  oss << \"|\" << std::setw(16) << std::internal;\n+  oss << 0x12345678l << \"|\" << std::endl;\n+\n   VERIFY( oss.good() );\n   VERIFY( oss.str() == lit );\n \n@@ -133,9 +145,13 @@ main()\n :0123 456   :\n :    012 345:\n :     01 234:\n-: 04 553 207:\n-:0361 100   :\n-:    030 071:\n-:     02 322:\n-0x000012 345 678\n+:0726 746 425:\n+:04 553 207 :\n+:   0361 100:\n+:       0173:\n+0x12 345 678\n+|0x000012 345 678|\n+|0x12 345 6780000|\n+|00000x12 345 678|\n+|0x000012 345 678|\n */"}]}