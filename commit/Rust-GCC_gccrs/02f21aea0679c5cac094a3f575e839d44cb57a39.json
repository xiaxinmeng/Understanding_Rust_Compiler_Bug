{"sha": "02f21aea0679c5cac094a3f575e839d44cb57a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJmMjFhZWEwNjc5YzVjYWMwOTRhM2Y1NzVlODM5ZDQ0Y2I1N2EzOQ==", "commit": {"author": {"name": "Qian Jianhua", "email": "qianjh@cn.fujitsu.com", "date": "2020-08-03T13:01:40Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-08-03T13:01:40Z"}, "message": "aarch64: Add A64FX machine model\n\nThis patch add support for Fujitsu A64FX, as the first step of adding\nA64FX machine model.\n\nA64FX is used in FUJITSU Supercomputer PRIMEHPC FX1000,\nPRIMEHPC FX700, and supercomputer Fugaku.\nThe official microarchitecture information of A64FX can be read at\nhttps://github.com/fujitsu/A64FX.\n\n2020-08-03  Qian jianhua  <qianjh@cn.fujitsu.com>\n\ngcc/\n\t* config/aarch64/aarch64-cores.def (a64fx): New core.\n\t* config/aarch64/aarch64-tune.md: Regenerated.\n\t* config/aarch64/aarch64.c (a64fx_prefetch_tune, a64fx_tunings): New.\n\t* doc/invoke.texi: Add a64fx to the list.", "tree": {"sha": "171098a9eec1a31598a2e5e7cd0b10aa0cb149e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171098a9eec1a31598a2e5e7cd0b10aa0cb149e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f21aea0679c5cac094a3f575e839d44cb57a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f21aea0679c5cac094a3f575e839d44cb57a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f21aea0679c5cac094a3f575e839d44cb57a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f21aea0679c5cac094a3f575e839d44cb57a39/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919c9d4bd3db7da09061af3b6f2a9193bf7bae45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919c9d4bd3db7da09061af3b6f2a9193bf7bae45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/919c9d4bd3db7da09061af3b6f2a9193bf7bae45"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "a7dde38d7687049825aec4eb9446e76db84cd9c0", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=02f21aea0679c5cac094a3f575e839d44cb57a39", "patch": "@@ -119,6 +119,9 @@ AARCH64_CORE(\"octeontx2f95\",   octeontx2f95,   cortexa57, 8_2A,  AARCH64_FL_FOR_\n AARCH64_CORE(\"octeontx2f95n\",  octeontx2f95n,  cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b4, -1)\n AARCH64_CORE(\"octeontx2f95mm\", octeontx2f95mm, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_CRYPTO | AARCH64_FL_PROFILE, cortexa57, 0x43, 0x0b5, -1)\n \n+/* Fujitsu ('F') cores. */\n+AARCH64_CORE(\"a64fx\", a64fx, a64fx, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_SVE, a64fx, 0x46, 0x001, -1)\n+\n /* HiSilicon ('H') cores. */\n AARCH64_CORE(\"tsv110\",  tsv110, tsv110, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n "}, {"sha": "ebf97c38fbda447ac004bc98573f8353301d2004", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=02f21aea0679c5cac094a3f575e839d44cb57a39", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa65,cortexa65ae,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,tsv110,thunderx3t110,zeus,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n+\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa65,cortexa65ae,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "7c3ab3eeb1f44e4908a49f4b5aa60bfa9545254d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=02f21aea0679c5cac094a3f575e839d44cb57a39", "patch": "@@ -868,6 +868,17 @@ static const cpu_prefetch_tune xgene1_prefetch_tune =\n   -1\t\t\t/* default_opt_level  */\n };\n \n+static const cpu_prefetch_tune a64fx_prefetch_tune =\n+{\n+  8,\t\t\t/* num_slots  */\n+  64,\t\t\t/* l1_cache_size  */\n+  256,\t\t\t/* l1_cache_line_size  */\n+  32768,\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n+  -1,\t\t\t/* minimum_stride */\n+  -1\t\t\t/* default_opt_level  */\n+};\n+\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n@@ -1325,6 +1336,32 @@ static const struct tune_params neoversen1_tunings =\n   &generic_prefetch_tune\n };\n \n+static const struct tune_params a64fx_tunings =\n+{\n+  &generic_extra_costs,\n+  &generic_addrcost_table,\n+  &generic_regmove_cost,\n+  &generic_vector_cost,\n+  &generic_branch_cost,\n+  &generic_approx_modes,\n+  SVE_512, /* sve_width  */\n+  4, /* memmov_cost  */\n+  7, /* issue_rate  */\n+  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_CMP_BRANCH), /* fusible_ops  */\n+  \"32\",\t/* function_align.  */\n+  \"16\",\t/* jump_align.  */\n+  \"32\",\t/* loop_align.  */\n+  4,\t/* int_reassoc_width.  */\n+  2,\t/* fp_reassoc_width.  */\n+  2,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &a64fx_prefetch_tune\n+};\n+\n /* Support for fine-grained override of the tuning structures.  */\n struct aarch64_tuning_override_function\n {"}, {"sha": "afe09a93b1d2cb30197100a881dce17b02190a0a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f21aea0679c5cac094a3f575e839d44cb57a39/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=02f21aea0679c5cac094a3f575e839d44cb57a39", "patch": "@@ -17354,6 +17354,7 @@ performance of the code.  Permissible values for this option are:\n @samp{octeontx2}, @samp{octeontx2t98}, @samp{octeontx2t96}\n @samp{octeontx2t93}, @samp{octeontx2f95}, @samp{octeontx2f95n},\n @samp{octeontx2f95mm}\n+@samp{a64fx},\n @samp{thunderx}, @samp{thunderxt88},\n @samp{thunderxt88p1}, @samp{thunderxt81}, @samp{tsv110},\n @samp{thunderxt83}, @samp{thunderx2t99}, @samp{thunderx3t110}, @samp{zeus},"}]}