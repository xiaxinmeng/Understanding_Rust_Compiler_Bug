{"sha": "070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwYTc5NTZhYTgzODI1ZDhjZGNjMGQxYjczYWE2NGEwMzgzY2U4NA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-09-20T21:48:36Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-09-20T21:48:36Z"}, "message": "re PR rtl-optimization/23898 (basic block reordering excessively increases code size; get_uncond_jump_length pessimistic)\n\n\tPR rtl-optimization/23898\n\t* output.h (get_attr_min_length): Declare.\n\t* final.c (get_attr_length_1): New function, broken out of:\n\t(get_attr_length).\n\t(get_attr_min_length): New function.\n\t* bb-reorder.c (copy_bb_p, get_uncond_jump_length): Use it.\n\t(duplicate_computed_gotos): Likewise.\n\t* genattr.c (insn_min_length): Generate declaration.\n\t* genattrtab.c (min_fn, min_attr_value): New functions.\n\t(make_length_attrs): Generate insn_min_length.\n\nFrom-SVN: r104468", "tree": {"sha": "b5aed08c2aba5538d50f0915cdd9050b95ec600d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5aed08c2aba5538d50f0915cdd9050b95ec600d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/comments", "author": null, "committer": null, "parents": [{"sha": "9972f30d1c2b29cdfc35421bbb5f4902ff0a1879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9972f30d1c2b29cdfc35421bbb5f4902ff0a1879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9972f30d1c2b29cdfc35421bbb5f4902ff0a1879"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "a4e0484bc5ff13724a215608ff0038d464b706f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "patch": "@@ -1,3 +1,16 @@\n+2005-09-20  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR rtl-optimization/23898\n+\t* output.h (get_attr_min_length): Declare.\n+\t* final.c (get_attr_length_1): New function, broken out of:\n+\t(get_attr_length).\n+\t(get_attr_min_length): New function.\n+\t* bb-reorder.c (copy_bb_p, get_uncond_jump_length): Use it.\n+\t(duplicate_computed_gotos): Likewise.\n+\t* genattr.c (insn_min_length): Generate declaration.\n+\t* genattrtab.c (min_fn, min_attr_value): New functions.\n+\t(make_length_attrs): Generate insn_min_length.\n+\n 2005-09-20  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/pa/pa.c (output_cbranch): Check for zero in operands[2]."}, {"sha": "68d2cd88205df94188be428b0c7aeda493ecec9b", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "patch": "@@ -1178,7 +1178,7 @@ copy_bb_p (basic_block bb, int code_may_grow)\n   FOR_BB_INSNS (bb, insn)\n     {\n       if (INSN_P (insn))\n-\tsize += get_attr_length (insn);\n+\tsize += get_attr_min_length (insn);\n     }\n \n   if (size <= max_size)\n@@ -1205,7 +1205,7 @@ get_uncond_jump_length (void)\n   label = emit_label_before (gen_label_rtx (), get_insns ());\n   jump = emit_jump_insn (gen_jump (label));\n \n-  length = get_attr_length (jump);\n+  length = get_attr_min_length (jump);\n \n   delete_insn (jump);\n   delete_insn (label);\n@@ -2030,7 +2030,7 @@ duplicate_computed_gotos (void)\n       FOR_BB_INSNS (bb, insn)\n \tif (INSN_P (insn))\n \t  {\n-\t    size += get_attr_length (insn);\n+\t    size += get_attr_min_length (insn);\n \t    if (size > max_size)\n \t       break;\n \t  }"}, {"sha": "f8270698ecb6d84ee7ae6292f693db91d048ee4f", "filename": "gcc/final.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "patch": "@@ -383,10 +383,11 @@ init_insn_lengths (void)\n }\n \n /* Obtain the current length of an insn.  If branch shortening has been done,\n-   get its actual length.  Otherwise, get its maximum length.  */\n-\n-int\n-get_attr_length (rtx insn ATTRIBUTE_UNUSED)\n+   get its actual length.  Otherwise, use FALLBACK_FN to calcualte the\n+   length.  */\n+static inline int\n+get_attr_length_1 (rtx insn ATTRIBUTE_UNUSED,\n+\t\t   int (*fallback_fn) (rtx) ATTRIBUTE_UNUSED)\n {\n #ifdef HAVE_ATTR_length\n   rtx body;\n@@ -404,7 +405,7 @@ get_attr_length (rtx insn ATTRIBUTE_UNUSED)\n \treturn 0;\n \n       case CALL_INSN:\n-\tlength = insn_default_length (insn);\n+\tlength = fallback_fn (insn);\n \tbreak;\n \n       case JUMP_INSN:\n@@ -415,7 +416,7 @@ get_attr_length (rtx insn ATTRIBUTE_UNUSED)\n \t       ADDR_VEC_ALIGN.  */\n \t  }\n \telse\n-\t  length = insn_default_length (insn);\n+\t  length = fallback_fn (insn);\n \tbreak;\n \n       case INSN:\n@@ -424,12 +425,12 @@ get_attr_length (rtx insn ATTRIBUTE_UNUSED)\n \t  return 0;\n \n \telse if (GET_CODE (body) == ASM_INPUT || asm_noperands (body) >= 0)\n-\t  length = asm_insn_count (body) * insn_default_length (insn);\n+\t  length = asm_insn_count (body) * fallback_fn (insn);\n \telse if (GET_CODE (body) == SEQUENCE)\n \t  for (i = 0; i < XVECLEN (body, 0); i++)\n \t    length += get_attr_length (XVECEXP (body, 0, i));\n \telse\n-\t  length = insn_default_length (insn);\n+\t  length = fallback_fn (insn);\n \tbreak;\n \n       default:\n@@ -444,6 +445,22 @@ get_attr_length (rtx insn ATTRIBUTE_UNUSED)\n   return 0;\n #endif /* not HAVE_ATTR_length */\n }\n+\n+/* Obtain the current length of an insn.  If branch shortening has been done,\n+   get its actual length.  Otherwise, get its maximum length.  */\n+int\n+get_attr_length (rtx insn)\n+{\n+  return get_attr_length_1 (insn, insn_default_length);\n+}\n+\n+/* Obtain the current length of an insn.  If branch shortening has been done,\n+   get its actual length.  Otherwise, get its minimum length.  */\n+int\n+get_attr_min_length (rtx insn)\n+{\n+  return get_attr_length_1 (insn, insn_min_length);\n+}\n \f\n /* Code to handle alignment inside shorten_branches.  */\n "}, {"sha": "0e039e7a4b2e2dc5da582a7beacd6dd12e217988", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "patch": "@@ -79,6 +79,7 @@ gen_attr (rtx attr)\n       puts (\"\\\n extern void shorten_branches (rtx);\\n\\\n extern int insn_default_length (rtx);\\n\\\n+extern int insn_min_length (rtx);\\n\\\n extern int insn_variable_length_p (rtx);\\n\\\n extern int insn_current_length (rtx);\\n\\n\\\n #include \\\"insn-addr.h\\\"\\n\");"}, {"sha": "359ddddae107a456aef70d1bc89f58fd6f2d174f", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "patch": "@@ -285,6 +285,7 @@ static rtx identity_fn\t\t(rtx);\n static rtx zero_fn\t\t(rtx);\n static rtx one_fn\t\t(rtx);\n static rtx max_fn\t\t(rtx);\n+static rtx min_fn\t\t(rtx);\n static void write_length_unit_log (void);\n static rtx simplify_cond\t(rtx, int, int);\n static void clear_struct_flag (rtx);\n@@ -307,6 +308,7 @@ static void gen_insn\t\t(rtx, int);\n static void gen_delay\t\t(rtx, int);\n static void write_test_expr\t(rtx, int);\n static int max_attr_value\t(rtx, int*);\n+static int min_attr_value\t(rtx, int*);\n static int or_attr_value\t(rtx, int*);\n static void walk_attr_value\t(rtx);\n static void write_attr_get\t(struct attr_desc *);\n@@ -1583,11 +1585,14 @@ make_length_attrs (void)\n   static const char *new_names[] =\n     {\n       \"*insn_default_length\",\n+      \"*insn_min_length\",\n       \"*insn_variable_length_p\",\n       \"*insn_current_length\"\n     };\n-  static rtx (*const no_address_fn[]) (rtx) = {identity_fn, zero_fn, zero_fn};\n-  static rtx (*const address_fn[]) (rtx) = {max_fn, one_fn, identity_fn};\n+  static rtx (*const no_address_fn[]) (rtx)\n+    = {identity_fn,identity_fn, zero_fn, zero_fn};\n+  static rtx (*const address_fn[]) (rtx)\n+    = {max_fn, min_fn, one_fn, identity_fn};\n   size_t i;\n   struct attr_desc *length_attr, *new_attr;\n   struct attr_value *av, *new_av;\n@@ -1654,6 +1659,13 @@ max_fn (rtx exp)\n   return make_numeric_value (max_attr_value (exp, &unknown));\n }\n \n+static rtx\n+min_fn (rtx exp)\n+{\n+  int unknown;\n+  return make_numeric_value (min_attr_value (exp, &unknown));\n+}\n+\n static void\n write_length_unit_log (void)\n {\n@@ -3531,6 +3543,47 @@ max_attr_value (rtx exp, int *unknownp)\n   return current_max;\n }\n \n+/* Given an attribute value, return the minimum CONST_STRING argument\n+   encountered.  Set *UNKNOWNP and return 0 if the value is unknown.  */\n+\n+static int\n+min_attr_value (rtx exp, int *unknownp)\n+{\n+  int current_min;\n+  int i, n;\n+\n+  switch (GET_CODE (exp))\n+    {\n+    case CONST_STRING:\n+      current_min = atoi (XSTR (exp, 0));\n+      break;\n+\n+    case COND:\n+      current_min = min_attr_value (XEXP (exp, 1), unknownp);\n+      for (i = 0; i < XVECLEN (exp, 0); i += 2)\n+\t{\n+\t  n = min_attr_value (XVECEXP (exp, 0, i + 1), unknownp);\n+\t  if (n < current_min)\n+\t    current_min = n;\n+\t}\n+      break;\n+\n+    case IF_THEN_ELSE:\n+      current_min = min_attr_value (XEXP (exp, 1), unknownp);\n+      n = min_attr_value (XEXP (exp, 2), unknownp);\n+      if (n < current_min)\n+\tcurrent_min = n;\n+      break;\n+\n+    default:\n+      *unknownp = 1;\n+      current_min = INT_MAX;\n+      break;\n+    }\n+\n+  return current_min;\n+}\n+\n /* Given an attribute value, return the result of ORing together all\n    CONST_STRING arguments encountered.  Set *UNKNOWNP and return -1\n    if the numeric value is not known.  */"}, {"sha": "cb8d8c04f7d60e48d0087ade586203107aa8d90d", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070a7956aa83825d8cdcc0d1b73aa64a0383ce84/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=070a7956aa83825d8cdcc0d1b73aa64a0383ce84", "patch": "@@ -49,6 +49,10 @@ extern void init_insn_lengths (void);\n    get its actual length.  Otherwise, get its maximum length.  */\n extern int get_attr_length (rtx);\n \n+/* Obtain the current length of an insn.  If branch shortening has been done,\n+   get its actual length.  Otherwise, get its minimum length.  */\n+extern int get_attr_min_length (rtx);\n+\n /* Make a pass over all insns and compute their actual lengths by shortening\n    any branches of variable length if possible.  */\n extern void shorten_branches (rtx);"}]}