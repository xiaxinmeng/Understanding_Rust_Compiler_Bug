{"sha": "1e5f79b61994f8ffccad62a58031f5937aa16ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU1Zjc5YjYxOTk0ZjhmZmNjYWQ2MmE1ODAzMWY1OTM3YWExNmFlMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-28T19:41:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-28T19:41:36Z"}, "message": "PR c++/54769 - wrong lookup of dependent template-name.\n\n\t* parser.c (cp_parser_template_name): Handle dependent object type.\n\t(cp_parser_nested_name_specifier_opt): Make template_keyword_p a\n\tparameter.\n\t(cp_parser_id_expression): Pass it.\n\t(cp_parser_diagnose_invalid_type_name): Handle TEMPLATE_ID_EXPR.\n\nFrom-SVN: r249752", "tree": {"sha": "1e5d3318974175db33c79d031a615b55c79ef74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5d3318974175db33c79d031a615b55c79ef74d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e5f79b61994f8ffccad62a58031f5937aa16ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5f79b61994f8ffccad62a58031f5937aa16ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5f79b61994f8ffccad62a58031f5937aa16ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5f79b61994f8ffccad62a58031f5937aa16ae3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc3b932e33b703b0163fd6383f26e6c44fe68c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3b932e33b703b0163fd6383f26e6c44fe68c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3b932e33b703b0163fd6383f26e6c44fe68c6a"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "3b3bb6d51fef61343afae508444883ce9f2d6403", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5f79b61994f8ffccad62a58031f5937aa16ae3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5f79b61994f8ffccad62a58031f5937aa16ae3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e5f79b61994f8ffccad62a58031f5937aa16ae3", "patch": "@@ -1,5 +1,12 @@\n 2017-06-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/54769 - wrong lookup of dependent template-name.\n+\t* parser.c (cp_parser_template_name): Handle dependent object type.\n+\t(cp_parser_nested_name_specifier_opt): Make template_keyword_p a\n+\tparameter.\n+\t(cp_parser_id_expression): Pass it.\n+\t(cp_parser_diagnose_invalid_type_name): Handle TEMPLATE_ID_EXPR.\n+\n \t* parser.c (cp_parser_template_id): Use the range location on the\n \tTEMPLATE_ID_EXPR.\n "}, {"sha": "c9fc2844b7fa1cfd62ecf991231bd27160962a18", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5f79b61994f8ffccad62a58031f5937aa16ae3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5f79b61994f8ffccad62a58031f5937aa16ae3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1e5f79b61994f8ffccad62a58031f5937aa16ae3", "patch": "@@ -2039,7 +2039,7 @@ static cp_expr cp_parser_id_expression\n static cp_expr cp_parser_unqualified_id\n   (cp_parser *, bool, bool, bool, bool);\n static tree cp_parser_nested_name_specifier_opt\n-  (cp_parser *, bool, bool, bool, bool);\n+  (cp_parser *, bool, bool, bool, bool, bool = false);\n static tree cp_parser_nested_name_specifier\n   (cp_parser *, bool, bool, bool, bool);\n static tree cp_parser_qualifying_entity\n@@ -3253,6 +3253,10 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t    error_at (location_of (id),\n \t\t      \"%qE in namespace %qE does not name a template type\",\n \t\t      id, parser->scope);\n+\t  else if (TREE_CODE (id) == TEMPLATE_ID_EXPR)\n+\t    error_at (location_of (id),\n+\t\t      \"%qE in namespace %qE does not name a template type\",\n+\t\t      TREE_OPERAND (id, 0), parser->scope);\n \t  else\n \t    error_at (location_of (id),\n \t\t      \"%qE in namespace %qE does not name a type\",\n@@ -3296,6 +3300,10 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \t    error_at (location_of (id),\n \t\t      \"%qE in %q#T does not name a template type\",\n \t\t      id, parser->scope);\n+\t  else if (TREE_CODE (id) == TEMPLATE_ID_EXPR)\n+\t    error_at (location_of (id),\n+\t\t      \"%qE in %q#T does not name a template type\",\n+\t\t      TREE_OPERAND (id, 0), parser->scope);\n \t  else\n \t    error_at (location_of (id),\n \t\t      \"%qE in %q#T does not name a type\",\n@@ -5420,16 +5428,21 @@ cp_parser_id_expression (cp_parser *parser,\n \n   /* Look for the optional `::' operator.  */\n   global_scope_p\n-    = (cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false)\n-       != NULL_TREE);\n+    = (!template_keyword_p\n+       && (cp_parser_global_scope_opt (parser,\n+\t\t\t\t       /*current_scope_valid_p=*/false)\n+\t   != NULL_TREE));\n+\n   /* Look for the optional nested-name-specifier.  */\n   nested_name_specifier_p\n     = (cp_parser_nested_name_specifier_opt (parser,\n \t\t\t\t\t    /*typename_keyword_p=*/false,\n \t\t\t\t\t    check_dependency_p,\n \t\t\t\t\t    /*type_p=*/false,\n-\t\t\t\t\t    declarator_p)\n+\t\t\t\t\t    declarator_p,\n+\t\t\t\t\t    template_keyword_p)\n        != NULL_TREE);\n+\n   /* If there is a nested-name-specifier, then we are looking at\n      the first qualified-id production.  */\n   if (nested_name_specifier_p)\n@@ -5874,7 +5887,8 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t\t\t\t     bool typename_keyword_p,\n \t\t\t\t     bool check_dependency_p,\n \t\t\t\t     bool type_p,\n-\t\t\t\t     bool is_declaration)\n+\t\t\t\t     bool is_declaration,\n+\t\t\t\t     bool template_keyword_p /* = false */)\n {\n   bool success = false;\n   cp_token_position start = 0;\n@@ -5892,7 +5906,6 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n       tree new_scope;\n       tree old_scope;\n       tree saved_qualifying_scope;\n-      bool template_keyword_p;\n \n       /* Spot cases that cannot be the beginning of a\n \t nested-name-specifier.  */\n@@ -5967,8 +5980,6 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t first time through the loop.  */\n       if (success)\n \ttemplate_keyword_p = cp_parser_optional_template_keyword (parser);\n-      else\n-\ttemplate_keyword_p = false;\n \n       /* Save the old scope since the name lookup we are about to do\n \t might destroy it.  */\n@@ -15861,15 +15872,19 @@ cp_parser_template_name (cp_parser* parser,\n \t no point in doing name-lookup, so we just return IDENTIFIER.\n \t But, if the qualifying scope is non-dependent then we can\n \t (and must) do name-lookup normally.  */\n-      if (template_keyword_p\n-\t  && (!parser->scope\n-\t      || (TYPE_P (parser->scope)\n-\t\t  && dependent_type_p (parser->scope))))\n+      if (template_keyword_p)\n \t{\n-\t  /* We're optimizing away the call to cp_parser_lookup_name, but we\n-\t     still need to do this.  */\n-\t  parser->context->object_type = NULL_TREE;\n-\t  return identifier;\n+\t  tree scope = (parser->scope ? parser->scope\n+\t\t\t: parser->context->object_type);\n+\t  if (scope && TYPE_P (scope)\n+\t      && (!CLASS_TYPE_P (scope)\n+\t\t  || (check_dependency_p && dependent_type_p (scope))))\n+\t    {\n+\t      /* We're optimizing away the call to cp_parser_lookup_name, but\n+\t\t we still need to do this.  */\n+\t      parser->context->object_type = NULL_TREE;\n+\t      return identifier;\n+\t    }\n \t}\n     }\n \n@@ -15882,6 +15897,11 @@ cp_parser_template_name (cp_parser* parser,\n \t\t\t\t/*ambiguous_decls=*/NULL,\n \t\t\t\ttoken->location);\n \n+  /* If the lookup failed and we got the 'template' keyword, believe it.  */\n+  if (decl == error_mark_node && template_keyword_p\n+      && processing_template_decl)\n+    return identifier;\n+\n   decl = strip_using_decl (decl);\n \n   /* If DECL is a template, then the name was a template-name.  */"}, {"sha": "203460eda73100149329fc06a3269bc830fe14b4", "filename": "gcc/testsuite/g++.dg/template/lookup11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5f79b61994f8ffccad62a58031f5937aa16ae3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5f79b61994f8ffccad62a58031f5937aa16ae3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flookup11.C?ref=1e5f79b61994f8ffccad62a58031f5937aa16ae3", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/81026\n+\n+namespace std {\n+  template<class> struct extent;\n+}\n+using namespace std;\n+\n+template <class T>\n+struct S {\n+  void f() { T().template extent<42>(); }\n+};"}]}