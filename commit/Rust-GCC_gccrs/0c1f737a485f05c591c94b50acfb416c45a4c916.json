{"sha": "0c1f737a485f05c591c94b50acfb416c45a4c916", "node_id": "C_kwDOANBUbNoAKDBjMWY3MzdhNDg1ZjA1YzU5MWM5NGI1MGFjZmI0MTZjNDVhNGM5MTY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-22T21:55:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-22T22:09:54Z"}, "message": "libstdc++: Constrain std::make_any [PR102894]\n\nstd::make_any should be constrained so it can only be called if the\nconstruction of the return value would be valid.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/102894\n\t* include/std/any (make_any): Add SFINAE constraint.\n\t* testsuite/20_util/any/102894.cc: New test.", "tree": {"sha": "463bf48d61f97dd80200b8d9c6bcba8a95f5551e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/463bf48d61f97dd80200b8d9c6bcba8a95f5551e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c1f737a485f05c591c94b50acfb416c45a4c916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1f737a485f05c591c94b50acfb416c45a4c916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1f737a485f05c591c94b50acfb416c45a4c916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1f737a485f05c591c94b50acfb416c45a4c916/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "030875c197e339542ddfcbad90cfc01263151bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/030875c197e339542ddfcbad90cfc01263151bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/030875c197e339542ddfcbad90cfc01263151bec"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "f75dddf6d920772135e333029bf2f4654374516c", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1f737a485f05c591c94b50acfb416c45a4c916/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1f737a485f05c591c94b50acfb416c45a4c916/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=0c1f737a485f05c591c94b50acfb416c45a4c916", "patch": "@@ -428,16 +428,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Exchange the states of two @c any objects.\n   inline void swap(any& __x, any& __y) noexcept { __x.swap(__y); }\n \n-  /// Create an any holding a @c _Tp constructed from @c __args.\n+  /// Create an `any` holding a `_Tp` constructed from `__args...`.\n   template <typename _Tp, typename... _Args>\n-    any make_any(_Args&&... __args)\n+    inline\n+    enable_if_t<is_constructible_v<any, in_place_type_t<_Tp>, _Args...>, any>\n+    make_any(_Args&&... __args)\n     {\n       return any(in_place_type<_Tp>, std::forward<_Args>(__args)...);\n     }\n \n-  /// Create an any holding a @c _Tp constructed from @c __il and @c __args.\n+  /// Create an `any` holding a `_Tp` constructed from `__il` and `__args...`.\n   template <typename _Tp, typename _Up, typename... _Args>\n-    any make_any(initializer_list<_Up> __il, _Args&&... __args)\n+    inline\n+    enable_if_t<is_constructible_v<any, in_place_type_t<_Tp>,\n+\t\t\t\t   initializer_list<_Up>&, _Args...>, any>\n+    make_any(initializer_list<_Up> __il, _Args&&... __args)\n     {\n       return any(in_place_type<_Tp>, __il, std::forward<_Args>(__args)...);\n     }"}, {"sha": "66ea9a03fea11ccfbafe0285c5b87ee3c1db758b", "filename": "libstdc++-v3/testsuite/20_util/any/102894.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1f737a485f05c591c94b50acfb416c45a4c916/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2F102894.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1f737a485f05c591c94b50acfb416c45a4c916/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2F102894.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2F102894.cc?ref=0c1f737a485f05c591c94b50acfb416c45a4c916", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++17 } }\n+#include <any>\n+\n+template<typename T, typename = void>\n+struct can_make_any\n+: std::false_type\n+{ };\n+\n+template<typename T>\n+struct can_make_any<T, std::void_t<decltype(std::make_any<T>())>>\n+: std::true_type\n+{ };\n+\n+struct move_only\n+{\n+  move_only() = default;\n+  move_only(move_only&&) = default;\n+};\n+\n+static_assert( ! can_make_any<move_only>::value ); // PR libstdc++/102894"}]}