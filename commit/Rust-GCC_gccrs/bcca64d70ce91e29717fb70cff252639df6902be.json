{"sha": "bcca64d70ce91e29717fb70cff252639df6902be", "node_id": "C_kwDOANBUbNoAKGJjY2E2NGQ3MGNlOTFlMjk3MTdmYjcwY2ZmMjUyNjM5ZGY2OTAyYmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-09T15:07:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-09T15:07:40Z"}, "message": "match.pd: Simplify BFR of insert when extracting exactly all inserted bits [PR108688]\n\nOn Thu, Feb 09, 2023 at 09:16:17AM +0100, Richard Biener via Gcc-patches wrote:\n> Hmm.  Can we handle the case of the extraction exactly covering the\n> insertion separately then and simplify to plain @1?\n\nI was suggesting that in the PR.  Here it is as an incremental patch\non top of Andrew's patch.\n\nOn the newly added testcase the ifcvt-folding difference without/with the\nincremental patch is:\n--- pr108688.c.171t.ifcvt_      2023-02-09 10:47:30.169916845 +0100\n+++ pr108688.c.171t.ifcvt       2023-02-09 10:48:44.942793453 +0100\n@@ -25,6 +25,8 @@ Number of blocks in CFG: 11\n Number of blocks to update: 5 ( 45%)\n\n+Applying pattern match.pd:7487, gimple-match.cc:243200\n+Applying pattern match.pd:3987, gimple-match.cc:75423\n Matching expression match.pd:1677, gimple-match.cc:209\n Applying pattern match.pd:1733, gimple-match.cc:109481\n Matching expression match.pd:2393, gimple-match.cc:852\n@@ -70,7 +72,6 @@ void foo ()\n   signed char _29;\n   <unnamed-signed:7> _30;\n   unsigned int ivtmp_33;\n-  <unnamed-signed:7> _ifc__35;\n   unsigned char _ifc__37;\n   unsigned char _ifc__38;\n   unsigned char _ifc__39;\n@@ -91,8 +92,7 @@ void foo ()\n   _2 = (<unnamed-signed:7>) a.0_1;\n   _ifc__38 = u.D.2741;\n   _ifc__39 = BIT_INSERT_EXPR <_ifc__38, _2, 0 (7 bits)>;\n-  _ifc__35 = BIT_FIELD_REF <_ifc__39, 7, 0>;\n-  _4 = (signed char) _ifc__35;\n+  _4 = (signed char) _2;\n   b.1_5 = b;\n   _6 = (signed char) b.1_5;\n   _7 = _4 ^ _6;\n\n2023-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108688\n\t* match.pd (bit_field_ref [bit_insert]): Simplify BIT_FIELD_REF\n\tof BIT_INSERT_EXPR extracting exactly all inserted bits even\n\twhen without mode precision.  Formatting fixes.\n\n\t* gcc.c-torture/compile/pr108688-1.c: Add PR number as comment.\n\t* gcc.dg/pr108688.c: New test.", "tree": {"sha": "46f7de247dc146a15ec4949b9a00bd5c26f1a49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46f7de247dc146a15ec4949b9a00bd5c26f1a49b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcca64d70ce91e29717fb70cff252639df6902be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcca64d70ce91e29717fb70cff252639df6902be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcca64d70ce91e29717fb70cff252639df6902be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcca64d70ce91e29717fb70cff252639df6902be/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f308e59bfa0f93ae05b17e257d8563c12399fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f308e59bfa0f93ae05b17e257d8563c12399fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f308e59bfa0f93ae05b17e257d8563c12399fd"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "821630d1d4928c12cebc636bdb931e7e8a58d225", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcca64d70ce91e29717fb70cff252639df6902be/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcca64d70ce91e29717fb70cff252639df6902be/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=bcca64d70ce91e29717fb70cff252639df6902be", "patch": "@@ -7475,13 +7475,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   }\n   (switch\n    (if ((!INTEGRAL_TYPE_P (TREE_TYPE (@1))\n-         || type_has_mode_precision_p (TREE_TYPE (@1)))\n-        && wi::leu_p (wi::to_wide (@ipos), wi::to_wide (@rpos))\n+\t || type_has_mode_precision_p (TREE_TYPE (@1)))\n+\t&& wi::leu_p (wi::to_wide (@ipos), wi::to_wide (@rpos))\n \t&& wi::leu_p (wi::to_wide (@rpos) + wi::to_wide (@rsize),\n \t\t      wi::to_wide (@ipos) + isize))\n     (BIT_FIELD_REF @1 @rsize { wide_int_to_tree (bitsizetype,\n-                                                 wi::to_wide (@rpos)\n+\t\t\t\t\t\t wi::to_wide (@rpos)\n \t\t\t\t\t\t - wi::to_wide (@ipos)); }))\n+   (if (wi::eq_p (wi::to_wide (@ipos), wi::to_wide (@rpos))\n+        && compare_tree_int (@rsize, isize) == 0)\n+    (convert @1))\n    (if (wi::geu_p (wi::to_wide (@ipos),\n \t\t   wi::to_wide (@rpos) + wi::to_wide (@rsize))\n \t|| wi::geu_p (wi::to_wide (@rpos),"}, {"sha": "c300dcb923e8b2dd77e6a84bd9288f0df46c4d4e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108688-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcca64d70ce91e29717fb70cff252639df6902be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108688-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcca64d70ce91e29717fb70cff252639df6902be/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108688-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108688-1.c?ref=bcca64d70ce91e29717fb70cff252639df6902be", "patch": "@@ -1,4 +1,4 @@\n-\n+/* PR tree-optimization/108688 */\n \n union U { signed int d : 7; signed int e : 2; } u;\n int a, b;\n@@ -12,4 +12,3 @@ foo (void)\n       u.e ^= b;\n     }\n }\n-"}, {"sha": "5f76f0ba83b0b38ac398eb376464a31e6bbb671c", "filename": "gcc/testsuite/gcc.dg/pr108688.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcca64d70ce91e29717fb70cff252639df6902be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108688.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcca64d70ce91e29717fb70cff252639df6902be/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108688.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108688.c?ref=bcca64d70ce91e29717fb70cff252639df6902be", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/108688 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-pre -fno-tree-fre -fno-tree-dominator-opts -fno-tree-loop-im -fno-code-hoisting\" } */\n+\n+union U { signed int d : 7; signed int e : 2; } u;\n+int a, b;\n+\n+void\n+foo (void)\n+{\n+  for (int i = 0; i < 64; i++)\n+    {\n+      u.d = a;\n+      u.d ^= b;\n+    }\n+}"}]}