{"sha": "25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzNTdkMWVlMGNlNjlhNWIxYzE5NGU3ZTFjN2I2NDM3YzE4OWIwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-12T19:19:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-12T19:19:03Z"}, "message": "re PR c++/40689 ([C++0x]: error with initializer list in N2672)\n\n\tPR c++/40689\n\t* init.c (build_new_1): Handle initializer list as array initializer.\n\t(build_vec_init): Likewise.\n\t* typeck.c (cp_build_modify_expr): Likewise.\n\t* typeck2.c (process_init_constructor_array): Error rather than abort\n\tif too many initializers.\n\nFrom-SVN: r149533", "tree": {"sha": "43c0739a8937332d11e29f2a24b12fe31e9a6a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43c0739a8937332d11e29f2a24b12fe31e9a6a6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f345f84ae69406344bbc74ff0c72904e317ad4fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f345f84ae69406344bbc74ff0c72904e317ad4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f345f84ae69406344bbc74ff0c72904e317ad4fe"}], "stats": {"total": 106, "additions": 93, "deletions": 13}, "files": [{"sha": "cff424f55dcc5aa220659ab754b29fb805631edd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -1,3 +1,12 @@\n+2009-07-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40689\n+\t* init.c (build_new_1): Handle initializer list as array initializer.\n+\t(build_vec_init): Likewise.\n+\t* typeck.c (cp_build_modify_expr): Likewise.\n+\t* typeck2.c (process_init_constructor_array): Error rather than abort\n+\tif too many initializers.\n+\n 2009-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/40502"}, {"sha": "19b24895e55bb3b46d9ac87e2ff1cd4234806aeb", "filename": "gcc/cp/init.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -1773,6 +1773,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n   /* The type of the new-expression.  (This type is always a pointer\n      type.)  */\n   tree pointer_type;\n+  tree non_const_pointer_type;\n   tree outer_nelts = NULL_TREE;\n   tree alloc_call, alloc_expr;\n   /* The address returned by the call to \"operator new\".  This node is\n@@ -2076,9 +2077,15 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n     }\n \n   /* Now use a pointer to the type we've actually allocated.  */\n-  data_addr = fold_convert (pointer_type, data_addr);\n+\n+  /* But we want to operate on a non-const version to start with,\n+     since we'll be modifying the elements.  */\n+  non_const_pointer_type = build_pointer_type\n+    (cp_build_qualified_type (type, TYPE_QUALS (type) & ~TYPE_QUAL_CONST));\n+\n+  data_addr = fold_convert (non_const_pointer_type, data_addr);\n   /* Any further uses of alloc_node will want this type, too.  */\n-  alloc_node = fold_convert (pointer_type, alloc_node);\n+  alloc_node = fold_convert (non_const_pointer_type, alloc_node);\n \n   /* Now initialize the allocated object.  Note that we preevaluate the\n      initialization expression, apart from the actual constructor call or\n@@ -2098,20 +2105,40 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \n       if (array_p)\n \t{\n-\t  if (*init)\n+\t  tree vecinit = NULL_TREE;\n+\t  if (*init && VEC_length (tree, *init) == 1\n+\t      && BRACE_ENCLOSED_INITIALIZER_P (VEC_index (tree, *init, 0))\n+\t      && CONSTRUCTOR_IS_DIRECT_INIT (VEC_index (tree, *init, 0)))\n+\t    {\n+\t      tree arraytype, domain;\n+\t      vecinit = VEC_index (tree, *init, 0);\n+\t      if (TREE_CONSTANT (nelts))\n+\t\tdomain = compute_array_index_type (NULL_TREE, nelts);\n+\t      else\n+\t\t{\n+\t\t  domain = NULL_TREE;\n+\t\t  if (CONSTRUCTOR_NELTS (vecinit) > 0)\n+\t\t    warning (0, \"non-constant array size in new, unable to \"\n+\t\t\t     \"verify length of initializer-list\");\n+\t\t}\n+\t      arraytype = build_cplus_array_type (type, domain);\n+\t      vecinit = digest_init (arraytype, vecinit);\n+\t    }\n+\t  else if (*init)\n             {\n               if (complain & tf_error)\n                 permerror (input_location, \"ISO C++ forbids initialization in array new\");\n               else\n                 return error_mark_node;\n+\t      vecinit = build_tree_list_vec (*init);\n             }\n \t  init_expr\n \t    = build_vec_init (data_addr,\n \t\t\t      cp_build_binary_op (input_location,\n \t\t\t\t\t\t  MINUS_EXPR, outer_nelts,\n \t\t\t\t\t\t  integer_one_node,\n \t\t\t\t\t\t  complain),\n-\t\t\t      build_tree_list_vec (*init),\n+\t\t\t      vecinit,\n \t\t\t      explicit_value_init_p,\n \t\t\t      /*from_array=*/0,\n                               complain);\n@@ -2270,7 +2297,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n   /* A new-expression is never an lvalue.  */\n   gcc_assert (!lvalue_p (rval));\n \n-  return rval;\n+  return convert (pointer_type, rval);\n }\n \n /* Generate a representation for a C++ \"new\" expression.  *PLACEMENT\n@@ -2664,6 +2691,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n   inner_elt_type = strip_array_types (type);\n   if (init\n+      && TREE_CODE (atype) == ARRAY_TYPE\n       && (from_array == 2\n \t  ? (!CLASS_TYPE_P (inner_elt_type)\n \t     || !TYPE_HAS_COMPLEX_ASSIGN_REF (inner_elt_type))\n@@ -2679,7 +2707,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t brace-enclosed initializers.  In this case, digest_init and\n \t store_constructor will handle the semantics for us.  */\n \n-      gcc_assert (TREE_CODE (atype) == ARRAY_TYPE);\n       stmt_expr = build2 (INIT_EXPR, atype, base, init);\n       return stmt_expr;\n     }"}, {"sha": "6a4802e3375d5d44d6084e7d1dbbb0e5f4b49784", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -6202,8 +6202,11 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n     {\n       int from_array;\n \n-      if (!same_or_base_type_p (TYPE_MAIN_VARIANT (lhstype),\n-\t\t\t\tTYPE_MAIN_VARIANT (TREE_TYPE (rhs))))\n+      if (BRACE_ENCLOSED_INITIALIZER_P (rhs))\n+\trhs = digest_init (lhstype, rhs);\n+\n+      else if (!same_or_base_type_p (TYPE_MAIN_VARIANT (lhstype),\n+\t\t\t\t     TYPE_MAIN_VARIANT (TREE_TYPE (rhs))))\n \t{\n \t  if (complain & tf_error)\n \t    error (\"incompatible types in assignment of %qT to %qT\",\n@@ -6212,7 +6215,8 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t}\n \n       /* Allow array assignment in compiler-generated code.  */\n-      if (!current_function_decl || !DECL_ARTIFICIAL (current_function_decl))\n+      else if (!current_function_decl\n+\t       || !DECL_ARTIFICIAL (current_function_decl))\n \t{\n           /* This routine is used for both initialization and assignment.\n              Make sure the diagnostic message differentiates the context.  */"}, {"sha": "d68383e380a34a20e84e51da31f86e44595d07f1", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -913,10 +913,9 @@ process_init_constructor_array (tree type, tree init)\n     /* Vectors are like simple fixed-size arrays.  */\n     len = TYPE_VECTOR_SUBPARTS (type);\n \n-  /* There cannot be more initializers than needed as otherwise\n-     reshape_init would have already rejected the initializer.  */\n-  if (!unbounded)\n-    gcc_assert (VEC_length (constructor_elt, v) <= len);\n+  /* There must not be more initializers than needed.  */\n+  if (!unbounded && VEC_length (constructor_elt, v)  > len)\n+    error (\"too many initializers for %qT\", type);\n \n   for (i = 0; VEC_iterate (constructor_elt, v, i, ce); ++i)\n     {"}, {"sha": "a12a5d206985a9a0aea187183ff33c097fd0213f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -1,3 +1,9 @@\n+2009-07-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/40689\n+\t* g++.dg/cpp0x/initlist20.C: New.\n+\t* g++.dg/cpp0x/initlist21.C: New.\n+\n 2009-07-12  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/no-scevccp-outer-2.c: Expect to vectorize."}, {"sha": "fcdb73f190c6e8f49213ef5ee85353a0a5b4ecd8", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist20.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist20.C?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/40689\n+// { dg-options \"-std=c++0x\" }\n+\n+class X\n+{\n+ public:\n+  X(): data {1,2,3,4,5} {}\n+ private:\n+  const short data[5];\n+};\n+\n+int main()\n+{\n+  const float * pData = new const float[4] { 1.5, 2.5, 3.5, 4.5 };\n+\n+  return 0;\n+}"}, {"sha": "9412a0851708d308c7fdb30b76d7869731a5b595", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist21.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist21.C?ref=25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/40689\n+// { dg-options \"-std=c++0x\" }\n+\n+class X\n+{\n+ public:\n+  X(): data {1,2} {} // { dg-error \"too many initializers\" }\n+ private:\n+  const short data[1];\n+};\n+\n+int f(int n)\n+{\n+  const float * pData = new const float[1] { 1.5, 2.5 }; // { dg-error \"too many initializers\" }\n+  pData = new const float[n] { 1.5, 2.5 }; // { dg-warning \"array size\" }\n+\n+  return 0;\n+}"}]}