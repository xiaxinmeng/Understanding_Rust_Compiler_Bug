{"sha": "9a7ab578fb581fd0885c7841706876315b1bbc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE3YWI1NzhmYjU4MWZkMDg4NWM3ODQxNzA2ODc2MzE1YjFiYmM0Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-03-10T13:24:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-03-10T13:24:57Z"}, "message": "cmath: Add atan2 and pow bits; add using declarations.\n\n2006-03-10  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cmath: Add atan2 and pow bits; add using declarations.\t\n\t* include/tr1/math.h: Add using declarations.\n\t* include/tr1/complex: Add using declarations.\n\t* testsuite/tr1/8_c_compatibility/cmath/functions.cc: Fully\n\tqualify calls.\n\t* testsuite/tr1/8_c_compatibility/cmath/overloads.cc: Likewise;\n\tadd atan2 and pow bits.\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_float.cc: Likewise.\n\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc: Likewise;\n\tadjust polar bits.\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add checks for double_t\n\tand float_t typedefs.\n\t* include/tr1/cmath: Add double_t and float_t.\n\t* testsuite/tr1/8_c_compatibility/cmath/types.cc: New.\n\n\t* include/tr1/ctgmath: New.\n\t* include/tr1/tgmath.h: Likewise.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/headers.cc: Update.\n\n\t* include/Makefile.in: Regenerate.\n\t* configure: Likewise.\n\n\t* docs/html/ext/tr1.html: Update.\n\nFrom-SVN: r111931", "tree": {"sha": "6115e2c2f2b494731a1f82cf33bdde9825984c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6115e2c2f2b494731a1f82cf33bdde9825984c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a7ab578fb581fd0885c7841706876315b1bbc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7ab578fb581fd0885c7841706876315b1bbc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7ab578fb581fd0885c7841706876315b1bbc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7ab578fb581fd0885c7841706876315b1bbc4b/comments", "author": null, "committer": null, "parents": [{"sha": "7a6164d4fe7e5b85de6fe9f469b34e630c9589da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6164d4fe7e5b85de6fe9f469b34e630c9589da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6164d4fe7e5b85de6fe9f469b34e630c9589da"}], "stats": {"total": 1147, "additions": 730, "deletions": 417}, "files": [{"sha": "218b2257b644badb51598686762d1607f90e1088", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -1,3 +1,31 @@\n+2006-03-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cmath: Add atan2 and pow bits; add using declarations.\t\n+\t* include/tr1/math.h: Add using declarations.\n+\t* include/tr1/complex: Add using declarations.\n+\t* testsuite/tr1/8_c_compatibility/cmath/functions.cc: Fully\n+\tqualify calls.\n+\t* testsuite/tr1/8_c_compatibility/cmath/overloads.cc: Likewise;\n+\tadd atan2 and pow bits.\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_float.cc: Likewise.\n+\t* testsuite/tr1/8_c_compatibility/complex/overloads_int.cc: Likewise;\n+\tadjust polar bits.\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add checks for double_t\n+\tand float_t typedefs.\n+\t* include/tr1/cmath: Add double_t and float_t.\n+\t* testsuite/tr1/8_c_compatibility/cmath/types.cc: New.\n+\n+\t* include/tr1/ctgmath: New.\n+\t* include/tr1/tgmath.h: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/headers.cc: Update.\n+\n+\t* include/Makefile.in: Regenerate.\n+\t* configure: Likewise.\n+\n+\t* docs/html/ext/tr1.html: Update.\n+\n 2006-03-08  Paolo Carlini  <pcarlini@suse.de>\n \n \tImplement the resolution of DR 455, [DR]."}, {"sha": "fbfb3f79c16546b3442732dfb6c9f59b61917138", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -1194,7 +1194,9 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   AC_MSG_CHECKING([for ISO C99 support to TR1 in <math.h>])\n   AC_CACHE_VAL(ac_c99_math_tr1, [\n   AC_TRY_COMPILE([#include <math.h>],\n-\t         [acosh(0.0);\n+\t         [typedef double_t  my_double_t;\n+\t          typedef float_t   my_float_t;\n+\t          acosh(0.0);\n \t          acoshf(0.0f);\n \t          acoshl(0.0l);\n \t          asinh(0.0);"}, {"sha": "fd588134f416f71216b9427b8aae8af7d9bfb196", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -30651,7 +30651,9 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-acosh(0.0);\n+typedef double_t  my_double_t;\n+\t          typedef float_t   my_float_t;\n+\t          acosh(0.0);\n \t          acoshf(0.0f);\n \t          acoshl(0.0l);\n \t          asinh(0.0);"}, {"sha": "d416e3f24998b3c53b0f4f11252efa5346a8f8c4", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -1790,15 +1790,15 @@ <h1 align=\"center\">\n       <td></td>\n       <td></td>\n       <td>missing</td>\n-      <td></td>\n+      <td>DR 551</td>\n     </tr>\n     <tr>\n       <td>8.3</td>\n       <td>Header <code>&lt;complex.h&gt;</code></td>\n       <td></td>\n       <td></td>\n       <td>missing</td>\n-      <td></td>\n+      <td>DR 551</td>\n     </tr>\n     <tr>\n       <td>8.4</td>\n@@ -1918,7 +1918,7 @@ <h1 align=\"center\">\n       <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>abs, div: issue with _Longlong</td>\n+      <td>DR 557</td>\n     </tr>\n     <tr>\n       <td>8.11.2</td>\n@@ -1963,9 +1963,9 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.16</td>\n       <td>Additions to header <code>&lt;cmath&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -1995,17 +1995,17 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.16.4</td>\n       <td>Additional overloads</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n-      <td></td>\n+      <td>DR 568; DR 550</td>\n     </tr>\n     <tr>\n       <td>8.17</td>\n       <td>Additions to header <code>&lt;math.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -2163,18 +2163,18 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.27</td>\n       <td>Header <code>&lt;ctgmath&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n-      <td></td>\n+      <td>DR 551</td>\n     </tr>\n     <tr>\n       <td>8.28</td>\n       <td>Header <code>&lt;tgmath.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n-      <td></td>\n+      <td>DR 551</td>\n     </tr>\n     <tr>\n       <td>8.29</td>\n@@ -2307,7 +2307,7 @@ <h3>Footnotes</h3>\n <table width=\"100%\" border=\"0\">\n <tr>\n   <td>\n-    <!-- IGNORE DIFF -->Last modified 2006-02-26\n+    <!-- IGNORE DIFF -->Last modified 2006-03-10\n   </td>\n   <td align=\"right\" valign=\"bottom\">\n     <a href=\"http://validator.w3.org/check/referer\">"}, {"sha": "37538b47cba46e0e05a4331d946e22a1602516fd", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -497,6 +497,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/cstdio \\\n \t${tr1_srcdir}/cstdlib \\\n+\t${tr1_srcdir}/ctgmath \\\n \t${tr1_srcdir}/ctime \\\n \t${tr1_srcdir}/ctype.h \\\n \t${tr1_srcdir}/cwchar \\\n@@ -519,6 +520,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/stdint.h \\\n \t${tr1_srcdir}/stdio.h \\\n \t${tr1_srcdir}/stdlib.h \\\n+\t${tr1_srcdir}/tgmath.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "7e2f744002a8d8926e848a3c812943f11d348f3a", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -716,6 +716,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/cstdio \\\n \t${tr1_srcdir}/cstdlib \\\n+\t${tr1_srcdir}/ctgmath \\\n \t${tr1_srcdir}/ctime \\\n \t${tr1_srcdir}/ctype.h \\\n \t${tr1_srcdir}/cwchar \\\n@@ -738,6 +739,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/stdint.h \\\n \t${tr1_srcdir}/stdio.h \\\n \t${tr1_srcdir}/stdlib.h \\\n+\t${tr1_srcdir}/tgmath.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "74b407127fb418bdfecd4bb18b6e6f0be04fe366", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 74, "deletions": 8, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -146,11 +146,35 @@\n #undef truncf\n #undef truncl\n \n+// Workaround for c++/21682.\n+namespace __gnu_internal\n+{\n+  template<typename _Tp, typename _Up>\n+    inline typename\n+    std::__enable_if<typename std::tr1::__promote_2<_Tp, _Up>::__type,\n+\t\t     (std::__is_floating<_Tp>::__value\n+\t\t      || std::__is_floating<_Up>::__value)>::__type\n+    atan2(_Tp __y, _Up __x)\n+    {\n+      typedef typename std::tr1::__promote_2<_Tp, _Up>::__type __type;\n+      return std::atan2(__type(__y), __type(__x));\n+    }\n+}\n+\n+#endif\n+\n // namespace std::tr1\n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+  // types\n+  using ::double_t;\n+  using ::float_t;\n+\n+  // functions\n   using ::acosh;\n   using ::acoshf;\n   using ::acoshl;\n@@ -291,18 +315,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   using ::truncf;\n   using ::truncl;\n \n-_GLIBCXX_END_NAMESPACE\n-}\n-\n #endif\n \n-// namespace std::tr1\n-namespace std\n-{\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n-\n #if _GLIBCXX_USE_C99_MATH\n #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n+\n+  /// @brief Function template definitions [8.16.3].\n+  //\n   using std::signbit;\n   \n   using std::fpclassify;\n@@ -325,6 +344,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   /// @brief Additional overloads [8.16.4].\n   //\n+  using std::acos;\n+\n   inline float\n   acosh(float __x)\n   { return __builtin_acoshf(__x); }\n@@ -341,6 +362,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return acosh(__type(__x));\n     }\n \n+  using std::asin;\n+\n   inline float\n   asinh(float __x)\n   { return __builtin_asinhf(__x); }\n@@ -357,6 +380,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return asinh(__type(__x));\n     }\n \n+  using std::atan;\n+  using std::atan2;\n+\n+  // Workaround for c++/21682.\n+  using __gnu_internal::atan2;\n+\n   inline float\n   atanh(float __x)\n   { return __builtin_atanhf(__x); }\n@@ -389,6 +418,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return cbrt(__type(__x));\n     }\n \n+  using std::ceil;\n+\n   inline float\n   copysign(float __x, float __y)\n   { return __builtin_copysignf(__x, __y); }\n@@ -405,6 +436,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return copysign(__type(__x), __type(__y));\n     }\n \n+  using std::cos;\n+  using std::cosh;  \n+\n   inline float\n   erf(float __x)\n   { return __builtin_erff(__x); }\n@@ -437,6 +471,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return erfc(__type(__x));\n     }\n \n+  using std::exp;\n+\n   inline float\n   exp2(float __x)\n   { return __builtin_exp2f(__x); }\n@@ -469,6 +505,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return expm1(__type(__x));\n     }\n \n+  using std::fabs;\n+\n   inline float\n   fdim(float __x, float __y)\n   { return __builtin_fdimf(__x, __y); }\n@@ -485,6 +523,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return fdim(__type(__x), __type(__y));\n     }\n \n+  using std::floor;\n+\n   inline float\n   fma(float __x, float __y, float __z)\n   { return __builtin_fmaf(__x, __y, __z); }\n@@ -533,6 +573,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return fmin(__type(__x), __type(__y));\n     }\n \n+  using std::fmod;\n+  using std::frexp;\n+\n   inline float\n   hypot(float __x, float __y)\n   { return __builtin_hypotf(__x, __y); }\n@@ -565,6 +608,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return ilogb(__type(__x));\n     }\n \n+  using std::ldexp;\n+\n   inline float\n   lgamma(float __x)\n   { return __builtin_lgammaf(__x); }\n@@ -613,6 +658,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return llround(__type(__x));\n     }\n \n+  using std::log;\n+  using std::log10;\n+\n   inline float\n   log1p(float __x)\n   { return __builtin_log1pf(__x); }\n@@ -629,6 +677,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return log1p(__type(__x));\n     }\n \n+  // DR 568.\n   inline float\n   log2(float __x)\n   { return __builtin_log2f(__x); }\n@@ -741,6 +790,17 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return nexttoward(__type(__x), __y);\n     }\n \n+  using std::pow;\n+\n+  // DR 550.\n+  template<typename _Tp, typename _Up>\n+    inline typename __promote_2<_Tp, _Up>::__type\n+    pow(_Tp __x, _Up __y)\n+    {\n+      typedef typename __promote_2<_Tp, _Up>::__type __type;\n+      return pow(__type(__x), __type(__y));\n+    }\n+\n   inline float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n@@ -837,6 +897,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return scalbn(__type(__x), __ex);\n     }\n \n+  using std::sin;\n+  using std::sinh;\n+  using std::sqrt;\n+  using std::tan;\n+  using std::tanh;\n+\n   inline float\n   tgamma(float __x)\n   { return __builtin_tgammaf(__x); }"}, {"sha": "4192b531c85185143403fe420701daa3b9699c81", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -325,6 +325,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     };\n \n \n+  using std::arg;\n+\n   template<typename _Tp>\n     inline typename __promote<_Tp>::__type\n     arg(_Tp __x)\n@@ -333,16 +335,22 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return std::arg(std::complex<__type>(__x));\n     }\n \n+  using std::conj;\n+\n   template<typename _Tp>\n     inline std::complex<typename __promote<_Tp>::__type>\n     conj(_Tp __x)\n     { return __x; }\n \n+  using std::imag;\n+\n   template<typename _Tp>\n     inline typename __promote<_Tp>::__type\n     imag(_Tp)\n     { return _Tp(); }\n \n+  using std::norm;\n+\n   template<typename _Tp>\n     inline typename __promote<_Tp>::__type\n     norm(_Tp __x)\n@@ -351,6 +359,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return __type(__x) * __type(__x);\n     }\n \n+  using std::polar;\n+\n   template<typename _Tp, typename _Up>\n     inline std::complex<typename __promote_2<_Tp, _Up>::__type>\n     polar(const _Tp& __rho, const _Up& __theta)\n@@ -359,6 +369,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return std::polar(__type(__rho), __type(__theta));\n     }\n   \n+  using std::pow;\n+  \n   template<typename _Tp, typename _Up>\n     inline std::complex<typename __promote_2<_Tp, _Up>::__type>\n     pow(const std::complex<_Tp>& __x, const _Up& __y)\n@@ -384,6 +396,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t      std::complex<__type>(__y));\n     }\n \n+  using std::real;\n+\n   template<typename _Tp>\n     inline typename __promote<_Tp>::__type\n     real(_Tp __x)"}, {"sha": "9f9132fb5b1d9f6942cb08bd08c5eaf36285fa14", "filename": "libstdc++-v3/include/tr1/ctgmath", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fctgmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fctgmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fctgmath?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -0,0 +1,39 @@\n+// TR1 ctgmath -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CTGMATH\n+#define _TR1_CTGMATH 1\n+\n+#include <tr1/cmath>\n+\n+#endif"}, {"sha": "0a3e08bbc4e23fadffb041398dbc4373a572a89e", "filename": "libstdc++-v3/include/tr1/math.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -36,4 +36,64 @@\n \n #include <tr1/cmath>\n \n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+using std::tr1::acos;\n+using std::tr1::acosh;\n+using std::tr1::asin;\n+using std::tr1::asinh;\n+using std::tr1::atan;\n+using std::tr1::atan2;\n+using std::tr1::atanh;\n+using std::tr1::cbrt;\n+using std::tr1::ceil;\n+using std::tr1::copysign;\n+using std::tr1::cos;\n+using std::tr1::cosh;\n+using std::tr1::erf;\n+using std::tr1::erfc;\n+using std::tr1::exp;\n+using std::tr1::exp2;\n+using std::tr1::expm1;\n+using std::tr1::fabs;\n+using std::tr1::fdim;\n+using std::tr1::floor;\n+using std::tr1::fma;\n+using std::tr1::fmax;\n+using std::tr1::fmin;\n+using std::tr1::fmod;\n+using std::tr1::frexp;\n+using std::tr1::hypot;\n+using std::tr1::ilogb;\n+using std::tr1::ldexp;\n+using std::tr1::lgamma;\n+using std::tr1::llrint;\n+using std::tr1::llround;\n+using std::tr1::log;\n+using std::tr1::log10;\n+using std::tr1::log1p;\n+using std::tr1::log2;\n+using std::tr1::logb;\n+using std::tr1::lrint;\n+using std::tr1::lround;\n+using std::tr1::nearbyint;\n+using std::tr1::nextafter;\n+using std::tr1::nexttoward;\n+using std::tr1::pow;\n+using std::tr1::remainder;\n+using std::tr1::remquo;\n+using std::tr1::rint;\n+using std::tr1::round;\n+using std::tr1::scalbln;\n+using std::tr1::scalbn;\n+using std::tr1::sin;\n+using std::tr1::sinh;\n+using std::tr1::sqrt;\n+using std::tr1::tan;\n+using std::tr1::tanh;\n+using std::tr1::tgamma;\n+using std::tr1::trunc;\n+\n+#endif\n+\n #endif"}, {"sha": "cfc0d58693640c8d3d15d6d713b28a24b955c2a7", "filename": "libstdc++-v3/include/tr1/tgmath.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftgmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftgmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftgmath.h?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -0,0 +1,39 @@\n+// TR1 tgmath.h -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_TGMATH_H\n+#define _TR1_TGMATH_H 1\n+\n+#include <tr1/ctgmath>\n+\n+#endif"}, {"sha": "3bb6d9d8bf91cd803acf14ec1c7a38817f6667d0", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/functions.cc", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ffunctions.cc?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -43,145 +43,145 @@ void test01()\n   long lret;\n   long long llret;\n \n-  ret = acosh(d0);\n-  fret = acoshf(f0);\n-  ldret = acoshl(ld0);\n+  ret = std::tr1::acosh(d0);\n+  fret = std::tr1::acoshf(f0);\n+  ldret = std::tr1::acoshl(ld0);\n \n-  ret = asinh(d0);\n-  fret = asinhf(f0);\n-  ldret = asinhl(ld0);\n+  ret = std::tr1::asinh(d0);\n+  fret = std::tr1::asinhf(f0);\n+  ldret = std::tr1::asinhl(ld0);\n \n-  ret = atanh(d0);\n-  fret = atanhf(f0);\n-  ldret = atanhl(ld0);\n+  ret = std::tr1::atanh(d0);\n+  fret = std::tr1::atanhf(f0);\n+  ldret = std::tr1::atanhl(ld0);\n \n-  ret = cbrt(d0);\n-  fret = cbrtf(f0);\n-  ldret = cbrtl(ld0);\n+  ret = std::tr1::cbrt(d0);\n+  fret = std::tr1::cbrtf(f0);\n+  ldret = std::tr1::cbrtl(ld0);\n \n-  ret = copysign(d0, d0);\n-  fret = copysignf(f0, f0);\n-  ldret = copysignl(ld0, ld0);\n+  ret = std::tr1::copysign(d0, d0);\n+  fret = std::tr1::copysignf(f0, f0);\n+  ldret = std::tr1::copysignl(ld0, ld0);\n \n-  ret = erf(d0);\n-  fret = erff(f0);\n-  ldret = erfl(ld0);\n+  ret = std::tr1::erf(d0);\n+  fret = std::tr1::erff(f0);\n+  ldret = std::tr1::erfl(ld0);\n \n-  ret = erfc(d0);\n-  fret = erfcf(f0);\n-  ldret = erfcl(ld0);\n+  ret = std::tr1::erfc(d0);\n+  fret = std::tr1::erfcf(f0);\n+  ldret = std::tr1::erfcl(ld0);\n \n-  ret = exp2(d0);\n-  fret = exp2f(f0);\n-  ldret = exp2l(ld0);\n+  ret = std::tr1::exp2(d0);\n+  fret = std::tr1::exp2f(f0);\n+  ldret = std::tr1::exp2l(ld0);\n \n-  ret = expm1(d0);\n-  fret = expm1f(f0);\n-  ldret = expm1l(ld0);\n+  ret = std::tr1::expm1(d0);\n+  fret = std::tr1::expm1f(f0);\n+  ldret = std::tr1::expm1l(ld0);\n \n-  ret = fdim(d0, d0);\n-  fret = fdimf(f0, f0);\n-  ldret = fdiml(ld0, ld0);\n+  ret = std::tr1::fdim(d0, d0);\n+  fret = std::tr1::fdimf(f0, f0);\n+  ldret = std::tr1::fdiml(ld0, ld0);\n \n-  ret = fma(d0, d0, d0);\n-  fret = fmaf(f0, f0, f0);\n-  ldret = fmal(ld0, ld0, ld0);\n+  ret = std::tr1::fma(d0, d0, d0);\n+  fret = std::tr1::fmaf(f0, f0, f0);\n+  ldret = std::tr1::fmal(ld0, ld0, ld0);\n \n-  ret = fmax(d0, d0);\n-  fret = fmaxf(f0, f0);\n-  ldret = fmaxl(ld0, ld0);\n+  ret = std::tr1::fmax(d0, d0);\n+  fret = std::tr1::fmaxf(f0, f0);\n+  ldret = std::tr1::fmaxl(ld0, ld0);\n \n-  ret = fmin(d0, d0);\n-  fret = fminf(f0, f0);\n-  ldret = fminl(ld0, ld0);\n+  ret = std::tr1::fmin(d0, d0);\n+  fret = std::tr1::fminf(f0, f0);\n+  ldret = std::tr1::fminl(ld0, ld0);\n \n-  ret = hypot(d0, d0);\n-  fret = hypotf(f0, f0);\n-  ldret = hypotl(ld0, ld0);\n+  ret = std::tr1::hypot(d0, d0);\n+  fret = std::tr1::hypotf(f0, f0);\n+  ldret = std::tr1::hypotl(ld0, ld0);\n \n-  iret = ilogb(d0);\n-  iret = ilogbf(f0);\n-  iret = ilogbl(ld0);\n+  iret = std::tr1::ilogb(d0);\n+  iret = std::tr1::ilogbf(f0);\n+  iret = std::tr1::ilogbl(ld0);\n \n-  ret = lgamma(d0);\n-  fret = lgammaf(f0);\n-  ldret = lgammal(ld0);\n+  ret = std::tr1::lgamma(d0);\n+  fret = std::tr1::lgammaf(f0);\n+  ldret = std::tr1::lgammal(ld0);\n \n-  llret = llrint(d0);\n-  llret = llrintf(f0);\n-  llret = llrintl(ld0);\n+  llret = std::tr1::llrint(d0);\n+  llret = std::tr1::llrintf(f0);\n+  llret = std::tr1::llrintl(ld0);\n \n-  llret = llround(d0);\n-  llret = llroundf(f0);\n-  llret = llroundl(ld0);\n+  llret = std::tr1::llround(d0);\n+  llret = std::tr1::llroundf(f0);\n+  llret = std::tr1::llroundl(ld0);\n \n-  ret = log1p(d0);\n-  fret = log1pf(f0);\n-  ldret = log1pl(ld0);\n+  ret = std::tr1::log1p(d0);\n+  fret = std::tr1::log1pf(f0);\n+  ldret = std::tr1::log1pl(ld0);\n \n-  ret = log2(d0);\n-  fret = log2f(f0);\n-  ldret = log2l(ld0);\n+  ret = std::tr1::log2(d0);\n+  fret = std::tr1::log2f(f0);\n+  ldret = std::tr1::log2l(ld0);\n \n-  ret = logb(d0);\n-  fret = logbf(f0);\n-  ldret = logbl(ld0);\n+  ret = std::tr1::logb(d0);\n+  fret = std::tr1::logbf(f0);\n+  ldret = std::tr1::logbl(ld0);\n \n-  lret = lrint(d0);\n-  lret = lrintf(f0);\n-  lret = lrintl(ld0);\n+  lret = std::tr1::lrint(d0);\n+  lret = std::tr1::lrintf(f0);\n+  lret = std::tr1::lrintl(ld0);\n \n-  lret = lround(d0);\n-  lret = lroundf(f0);\n-  lret = lroundl(ld0);\n+  lret = std::tr1::lround(d0);\n+  lret = std::tr1::lroundf(f0);\n+  lret = std::tr1::lroundl(ld0);\n \n-  ret = nan(str);\n-  fret = nanf(str);\n-  ldret = nanl(str);\n+  ret = std::tr1::nan(str);\n+  fret = std::tr1::nanf(str);\n+  ldret = std::tr1::nanl(str);\n \n-  ret = nearbyint(d0);\n-  fret = nearbyintf(f0);\n-  ldret = nearbyintl(ld0);\n+  ret = std::tr1::nearbyint(d0);\n+  fret = std::tr1::nearbyintf(f0);\n+  ldret = std::tr1::nearbyintl(ld0);\n \n-  ret = nextafter(d0, d0);\n-  fret = nextafterf(f0, f0);\n-  ldret = nextafterl(ld0, ld0);\n+  ret = std::tr1::nextafter(d0, d0);\n+  fret = std::tr1::nextafterf(f0, f0);\n+  ldret = std::tr1::nextafterl(ld0, ld0);\n \n-  ret = nexttoward(d0, ld0);\n-  fret = nexttowardf(f0, ld0);\n-  ldret = nexttowardl(ld0, ld0);\n+  ret = std::tr1::nexttoward(d0, ld0);\n+  fret = std::tr1::nexttowardf(f0, ld0);\n+  ldret = std::tr1::nexttowardl(ld0, ld0);\n \n-  ret = remainder(d0, d0);\n-  fret = remainderf(f0, f0);\n-  ldret = remainderl(ld0, ld0);\n+  ret = std::tr1::remainder(d0, d0);\n+  fret = std::tr1::remainderf(f0, f0);\n+  ldret = std::tr1::remainderl(ld0, ld0);\n \n-  ret = remquo(d0, d0, pquo);\n-  fret = remquo(f0, f0, pquo);\n-  ldret = remquo(ld0, ld0, pquo);\n+  ret = std::tr1::remquo(d0, d0, pquo);\n+  fret = std::tr1::remquo(f0, f0, pquo);\n+  ldret = std::tr1::remquo(ld0, ld0, pquo);\n \n-  ret = rint(d0);\n-  fret = rintf(f0);\n-  ldret = rintl(ld0);\n+  ret = std::tr1::rint(d0);\n+  fret = std::tr1::rintf(f0);\n+  ldret = std::tr1::rintl(ld0);\n \n-  ret = round(d0);\n-  fret = roundf(f0);\n-  ldret = roundl(ld0);\n+  ret = std::tr1::round(d0);\n+  fret = std::tr1::roundf(f0);\n+  ldret = std::tr1::roundl(ld0);\n \n-  ret = scalbln(d0, lex);\n-  fret = scalblnf(f0, lex);\n-  ldret = scalblnl(ld0, lex);\n+  ret = std::tr1::scalbln(d0, lex);\n+  fret = std::tr1::scalblnf(f0, lex);\n+  ldret = std::tr1::scalblnl(ld0, lex);\n \n-  ret = scalbn(d0, ex);\n-  fret = scalbnf(f0, ex);\n-  ldret = scalbnl(ld0, ex);\n+  ret = std::tr1::scalbn(d0, ex);\n+  fret = std::tr1::scalbnf(f0, ex);\n+  ldret = std::tr1::scalbnl(ld0, ex);\n \n-  ret = tgamma(d0);\n-  fret = tgammaf(f0);\n-  ldret = tgammal(ld0);\n+  ret = std::tr1::tgamma(d0);\n+  fret = std::tr1::tgammaf(f0);\n+  ldret = std::tr1::tgammal(ld0);\n \n-  ret = trunc(d0);\n-  fret = truncf(f0);\n-  ldret = truncl(ld0);\n+  ret = std::tr1::trunc(d0);\n+  fret = std::tr1::truncf(f0);\n+  ldret = std::tr1::truncl(ld0);\n   \n #endif\n }"}, {"sha": "e925340081e43eff239673294b4559f5643067d4", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/overloads.cc", "status": "modified", "additions": 216, "deletions": 197, "changes": 413, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads.cc?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -29,7 +29,6 @@ void test01()\n {\n #if _GLIBCXX_USE_C99_MATH_TR1\n \n-  using namespace std::tr1;\n   using namespace __gnu_test;\n \n   double d0 = 0.0;\n@@ -40,202 +39,222 @@ void test01()\n   long lex = 0l;\n   int ex = 0;\n \n-  check_ret_type<double>(acosh(d0));\n-  check_ret_type<float>(acosh(f0));\n-  check_ret_type<long double>(acosh(ld0));\n-  check_ret_type<double>(acosh(i0));\n-\n-  check_ret_type<double>(asinh(d0));\n-  check_ret_type<float>(asinh(f0));\n-  check_ret_type<long double>(asinh(ld0));\n-  check_ret_type<double>(asinh(i0));\n-\n-  check_ret_type<double>(atanh(d0));\n-  check_ret_type<float>(atanh(f0));\n-  check_ret_type<long double>(atanh(ld0));\n-  check_ret_type<double>(atanh(i0));\n-\n-  check_ret_type<double>(cbrt(d0));\n-  check_ret_type<float>(cbrt(f0));\n-  check_ret_type<long double>(cbrt(ld0));\n-  check_ret_type<double>(cbrt(i0));\n-\n-  check_ret_type<double>(copysign(d0, d0));\n-  check_ret_type<double>(copysign(d0, f0));\n-  check_ret_type<float>(copysign(f0, f0));\n-  check_ret_type<long double>(copysign(ld0, ld0));\n-  check_ret_type<long double>(copysign(ld0, d0));\n-  check_ret_type<double>(copysign(i0, i0));  \n-  check_ret_type<double>(copysign(d0, i0));\n-\n-  check_ret_type<double>(erf(d0));\n-  check_ret_type<float>(erf(f0));\n-  check_ret_type<long double>(erf(ld0));\n-  check_ret_type<double>(erf(i0));\n-\n-  check_ret_type<double>(erfc(d0));\n-  check_ret_type<float>(erfc(f0));\n-  check_ret_type<long double>(erfc(ld0));\n-  check_ret_type<double>(erfc(i0));\n-\n-  check_ret_type<double>(exp2(d0));\n-  check_ret_type<float>(exp2(f0));\n-  check_ret_type<long double>(exp2(ld0));\n-  check_ret_type<double>(exp2(i0));\n-\n-  check_ret_type<double>(expm1(d0));\n-  check_ret_type<float>(expm1(f0));\n-  check_ret_type<long double>(expm1(ld0));\n-  check_ret_type<double>(expm1(i0));\n-\n-  check_ret_type<double>(fdim(d0, d0));\n-  check_ret_type<double>(fdim(d0, f0));\n-  check_ret_type<float>(fdim(f0, f0));\n-  check_ret_type<long double>(fdim(ld0, ld0));\n-  check_ret_type<long double>(fdim(ld0, d0));\n-  check_ret_type<double>(fdim(i0, i0));\n-  check_ret_type<double>(fdim(d0, i0));\n-\n-  check_ret_type<double>(fma(d0, d0, d0));\n-  check_ret_type<double>(fma(d0, f0, d0));\n-  check_ret_type<float>(fma(f0, f0, f0));\n-  check_ret_type<long double>(fma(ld0, ld0, ld0));\n-  check_ret_type<long double>(fma(ld0, d0, f0));\n-  check_ret_type<double>(fma(i0, i0, i0));\n-  check_ret_type<double>(fma(d0, i0, f0));\n-\n-  check_ret_type<double>(fmax(d0, d0));\n-  check_ret_type<double>(fmax(d0, f0));\n-  check_ret_type<float>(fmax(f0, f0));\n-  check_ret_type<long double>(fmax(ld0, ld0));\n-  check_ret_type<long double>(fmax(ld0, d0));\n-  check_ret_type<double>(fmax(i0, i0));\n-  check_ret_type<double>(fmax(d0, i0));\n-\n-  check_ret_type<double>(fmin(d0, d0));\n-  check_ret_type<double>(fmin(d0, f0));\n-  check_ret_type<float>(fmin(f0, f0));\n-  check_ret_type<long double>(fmin(ld0, ld0));\n-  check_ret_type<long double>(fmin(ld0, d0));\n-  check_ret_type<double>(fmin(i0, i0));\n-  check_ret_type<double>(fmin(d0, i0));\n-\n-  check_ret_type<double>(hypot(d0, d0));\n-  check_ret_type<double>(hypot(d0, f0));\n-  check_ret_type<float>(hypot(f0, f0));\n-  check_ret_type<long double>(hypot(ld0, ld0));\n-  check_ret_type<long double>(hypot(ld0, d0));\n-  check_ret_type<double>(hypot(i0, i0));\n-  check_ret_type<double>(hypot(d0, i0));\n-\n-  check_ret_type<int>(ilogb(d0));\n-  check_ret_type<int>(ilogb(f0));\n-  check_ret_type<int>(ilogb(ld0));\n-  check_ret_type<int>(ilogb(i0));\n-\n-  check_ret_type<double>(lgamma(d0));\n-  check_ret_type<float>(lgamma(f0));\n-  check_ret_type<long double>(lgamma(ld0));\n-  check_ret_type<double>(lgamma(i0));\n-\n-  check_ret_type<long long>(llrint(d0));\n-  check_ret_type<long long>(llrint(f0));\n-  check_ret_type<long long>(llrint(ld0));\n-  check_ret_type<long long>(llrint(i0));\n-\n-  check_ret_type<long long>(llround(d0));\n-  check_ret_type<long long>(llround(f0));\n-  check_ret_type<long long>(llround(ld0));\n-  check_ret_type<long long>(llround(i0));\n-\n-  check_ret_type<double>(log1p(d0));\n-  check_ret_type<float>(log1p(f0));\n-  check_ret_type<long double>(log1p(ld0));\n-  check_ret_type<double>(log1p(i0));\n-\n-  check_ret_type<double>(log2(d0));\n-  check_ret_type<float>(log2(f0));\n-  check_ret_type<long double>(log2(ld0));\n-  check_ret_type<double>(log2(i0));\n-\n-  check_ret_type<double>(logb(d0));\n-  check_ret_type<float>(logb(f0));\n-  check_ret_type<long double>(logb(ld0));\n-  check_ret_type<double>(logb(i0));\n-\n-  check_ret_type<long>(lrint(d0));\n-  check_ret_type<long>(lrint(f0));\n-  check_ret_type<long>(lrint(ld0));\n-  check_ret_type<long>(lrint(i0));\n-\n-  check_ret_type<long>(lround(d0));\n-  check_ret_type<long>(lround(f0));\n-  check_ret_type<long>(lround(ld0));\n-  check_ret_type<long>(lround(i0));\n-\n-  check_ret_type<double>(nearbyint(d0));\n-  check_ret_type<float>(nearbyint(f0));\n-  check_ret_type<long double>(nearbyint(ld0));\n-  check_ret_type<double>(nearbyint(i0));\n-\n-  check_ret_type<double>(nextafter(d0, d0));\n-  check_ret_type<double>(nextafter(d0, f0));\n-  check_ret_type<float>(nextafter(f0, f0));\n-  check_ret_type<long double>(nextafter(ld0, ld0));\n-  check_ret_type<long double>(nextafter(ld0, d0));\n-  check_ret_type<double>(nextafter(i0, i0));\n-  check_ret_type<double>(nextafter(d0, i0));\n-\n-  check_ret_type<double>(nexttoward(d0, ld0));\n-  check_ret_type<float>(nexttoward(f0, ld0));\n-  check_ret_type<long double>(nexttoward(ld0, ld0));\n-  check_ret_type<double>(nexttoward(i0, ld0));\n-\n-  check_ret_type<double>(remainder(d0, d0));\n-  check_ret_type<double>(remainder(d0, f0));\n-  check_ret_type<float>(remainder(f0, f0));\n-  check_ret_type<long double>(remainder(ld0, ld0));\n-  check_ret_type<long double>(remainder(ld0, d0));\n-  check_ret_type<double>(remainder(i0, i0));\n-  check_ret_type<double>(remainder(d0, i0));\n-\n-  check_ret_type<double>(remquo(d0, d0, pquo));\n-  check_ret_type<double>(remquo(d0, f0, pquo));\n-  check_ret_type<float>(remquo(f0, f0, pquo));\n-  check_ret_type<long double>(remquo(ld0, ld0, pquo));\n-  check_ret_type<long double>(remquo(ld0, d0, pquo));\n-  check_ret_type<double>(remquo(i0, i0, pquo));\n-  check_ret_type<double>(remquo(d0, i0, pquo));\n-\n-  check_ret_type<double>(rint(d0));\n-  check_ret_type<float>(rint(f0));\n-  check_ret_type<long double>(rint(ld0));\n-  check_ret_type<double>(rint(i0));\n-\n-  check_ret_type<double>(round(d0));\n-  check_ret_type<float>(round(f0));\n-  check_ret_type<long double>(round(ld0));\n-  check_ret_type<double>(round(i0));\n-\n-  check_ret_type<double>(scalbln(d0, lex));\n-  check_ret_type<float>(scalbln(f0, lex));\n-  check_ret_type<long double>(scalbln(ld0, lex));\n-  check_ret_type<double>(scalbln(i0, lex));\n-\n-  check_ret_type<double>(scalbn(d0, ex));\n-  check_ret_type<float>(scalbn(f0, ex));\n-  check_ret_type<long double>(scalbn(ld0, ex));\n-  check_ret_type<double>(scalbn(i0, ex));\n-\n-  check_ret_type<double>(tgamma(d0));\n-  check_ret_type<float>(tgamma(f0));\n-  check_ret_type<long double>(tgamma(ld0));\n-  check_ret_type<double>(tgamma(i0));\n-\n-  check_ret_type<double>(trunc(d0));\n-  check_ret_type<float>(trunc(f0));\n-  check_ret_type<long double>(trunc(ld0));\n-  check_ret_type<double>(trunc(i0));\n+  check_ret_type<double>(std::tr1::atan2(d0, d0));\n+  check_ret_type<double>(std::tr1::atan2(d0, f0));\n+  check_ret_type<float>(std::tr1::atan2(f0, f0));\n+  check_ret_type<long double>(std::tr1::atan2(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::atan2(ld0, d0));\n+  check_ret_type<double>(std::tr1::atan2(i0, i0));\n+  check_ret_type<double>(std::tr1::atan2(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::acosh(d0));\n+  check_ret_type<float>(std::tr1::acosh(f0));\n+  check_ret_type<long double>(std::tr1::acosh(ld0));\n+  check_ret_type<double>(std::tr1::acosh(i0));\n+\n+  check_ret_type<double>(std::tr1::asinh(d0));\n+  check_ret_type<float>(std::tr1::asinh(f0));\n+  check_ret_type<long double>(std::tr1::asinh(ld0));\n+  check_ret_type<double>(std::tr1::asinh(i0));\n+\n+  check_ret_type<double>(std::tr1::atanh(d0));\n+  check_ret_type<float>(std::tr1::atanh(f0));\n+  check_ret_type<long double>(std::tr1::atanh(ld0));\n+  check_ret_type<double>(std::tr1::atanh(i0));\n+\n+  check_ret_type<double>(std::tr1::cbrt(d0));\n+  check_ret_type<float>(std::tr1::cbrt(f0));\n+  check_ret_type<long double>(std::tr1::cbrt(ld0));\n+  check_ret_type<double>(std::tr1::cbrt(i0));\n+\n+  check_ret_type<double>(std::tr1::copysign(d0, d0));\n+  check_ret_type<double>(std::tr1::copysign(d0, f0));\n+  check_ret_type<float>(std::tr1::copysign(f0, f0));\n+  check_ret_type<long double>(std::tr1::copysign(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::copysign(ld0, d0));\n+  check_ret_type<double>(std::tr1::copysign(i0, i0));  \n+  check_ret_type<double>(std::tr1::copysign(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::erf(d0));\n+  check_ret_type<float>(std::tr1::erf(f0));\n+  check_ret_type<long double>(std::tr1::erf(ld0));\n+  check_ret_type<double>(std::tr1::erf(i0));\n+\n+  check_ret_type<double>(std::tr1::erfc(d0));\n+  check_ret_type<float>(std::tr1::erfc(f0));\n+  check_ret_type<long double>(std::tr1::erfc(ld0));\n+  check_ret_type<double>(std::tr1::erfc(i0));\n+\n+  check_ret_type<double>(std::tr1::exp2(d0));\n+  check_ret_type<float>(std::tr1::exp2(f0));\n+  check_ret_type<long double>(std::tr1::exp2(ld0));\n+  check_ret_type<double>(std::tr1::exp2(i0));\n+\n+  check_ret_type<double>(std::tr1::expm1(d0));\n+  check_ret_type<float>(std::tr1::expm1(f0));\n+  check_ret_type<long double>(std::tr1::expm1(ld0));\n+  check_ret_type<double>(std::tr1::expm1(i0));\n+\n+  check_ret_type<double>(std::tr1::fdim(d0, d0));\n+  check_ret_type<double>(std::tr1::fdim(d0, f0));\n+  check_ret_type<float>(std::tr1::fdim(f0, f0));\n+  check_ret_type<long double>(std::tr1::fdim(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::fdim(ld0, d0));\n+  check_ret_type<double>(std::tr1::fdim(i0, i0));\n+  check_ret_type<double>(std::tr1::fdim(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::fma(d0, d0, d0));\n+  check_ret_type<double>(std::tr1::fma(d0, f0, d0));\n+  check_ret_type<float>(std::tr1::fma(f0, f0, f0));\n+  check_ret_type<long double>(std::tr1::fma(ld0, ld0, ld0));\n+  check_ret_type<long double>(std::tr1::fma(ld0, d0, f0));\n+  check_ret_type<double>(std::tr1::fma(i0, i0, i0));\n+  check_ret_type<double>(std::tr1::fma(d0, i0, f0));\n+\n+  check_ret_type<double>(std::tr1::fmax(d0, d0));\n+  check_ret_type<double>(std::tr1::fmax(d0, f0));\n+  check_ret_type<float>(std::tr1::fmax(f0, f0));\n+  check_ret_type<long double>(std::tr1::fmax(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::fmax(ld0, d0));\n+  check_ret_type<double>(std::tr1::fmax(i0, i0));\n+  check_ret_type<double>(std::tr1::fmax(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::fmin(d0, d0));\n+  check_ret_type<double>(std::tr1::fmin(d0, f0));\n+  check_ret_type<float>(std::tr1::fmin(f0, f0));\n+  check_ret_type<long double>(std::tr1::fmin(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::fmin(ld0, d0));\n+  check_ret_type<double>(std::tr1::fmin(i0, i0));\n+  check_ret_type<double>(std::tr1::fmin(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::hypot(d0, d0));\n+  check_ret_type<double>(std::tr1::hypot(d0, f0));\n+  check_ret_type<float>(std::tr1::hypot(f0, f0));\n+  check_ret_type<long double>(std::tr1::hypot(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::hypot(ld0, d0));\n+  check_ret_type<double>(std::tr1::hypot(i0, i0));\n+  check_ret_type<double>(std::tr1::hypot(d0, i0));\n+\n+  check_ret_type<int>(std::tr1::ilogb(d0));\n+  check_ret_type<int>(std::tr1::ilogb(f0));\n+  check_ret_type<int>(std::tr1::ilogb(ld0));\n+  check_ret_type<int>(std::tr1::ilogb(i0));\n+\n+  check_ret_type<double>(std::tr1::lgamma(d0));\n+  check_ret_type<float>(std::tr1::lgamma(f0));\n+  check_ret_type<long double>(std::tr1::lgamma(ld0));\n+  check_ret_type<double>(std::tr1::lgamma(i0));\n+\n+  check_ret_type<long long>(std::tr1::llrint(d0));\n+  check_ret_type<long long>(std::tr1::llrint(f0));\n+  check_ret_type<long long>(std::tr1::llrint(ld0));\n+  check_ret_type<long long>(std::tr1::llrint(i0));\n+\n+  check_ret_type<long long>(std::tr1::llround(d0));\n+  check_ret_type<long long>(std::tr1::llround(f0));\n+  check_ret_type<long long>(std::tr1::llround(ld0));\n+  check_ret_type<long long>(std::tr1::llround(i0));\n+\n+  check_ret_type<double>(std::tr1::log1p(d0));\n+  check_ret_type<float>(std::tr1::log1p(f0));\n+  check_ret_type<long double>(std::tr1::log1p(ld0));\n+  check_ret_type<double>(std::tr1::log1p(i0));\n+\n+  // DR 568.\n+  check_ret_type<double>(std::tr1::log2(d0));\n+  check_ret_type<float>(std::tr1::log2(f0));\n+  check_ret_type<long double>(std::tr1::log2(ld0));\n+  check_ret_type<double>(std::tr1::log2(i0));\n+\n+  check_ret_type<double>(std::tr1::logb(d0));\n+  check_ret_type<float>(std::tr1::logb(f0));\n+  check_ret_type<long double>(std::tr1::logb(ld0));\n+  check_ret_type<double>(std::tr1::logb(i0));\n+\n+  check_ret_type<long>(std::tr1::lrint(d0));\n+  check_ret_type<long>(std::tr1::lrint(f0));\n+  check_ret_type<long>(std::tr1::lrint(ld0));\n+  check_ret_type<long>(std::tr1::lrint(i0));\n+\n+  check_ret_type<long>(std::tr1::lround(d0));\n+  check_ret_type<long>(std::tr1::lround(f0));\n+  check_ret_type<long>(std::tr1::lround(ld0));\n+  check_ret_type<long>(std::tr1::lround(i0));\n+\n+  check_ret_type<double>(std::tr1::nearbyint(d0));\n+  check_ret_type<float>(std::tr1::nearbyint(f0));\n+  check_ret_type<long double>(std::tr1::nearbyint(ld0));\n+  check_ret_type<double>(std::tr1::nearbyint(i0));\n+\n+  check_ret_type<double>(std::tr1::nextafter(d0, d0));\n+  check_ret_type<double>(std::tr1::nextafter(d0, f0));\n+  check_ret_type<float>(std::tr1::nextafter(f0, f0));\n+  check_ret_type<long double>(std::tr1::nextafter(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::nextafter(ld0, d0));\n+  check_ret_type<double>(std::tr1::nextafter(i0, i0));\n+  check_ret_type<double>(std::tr1::nextafter(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::nexttoward(d0, ld0));\n+  check_ret_type<float>(std::tr1::nexttoward(f0, ld0));\n+  check_ret_type<long double>(std::tr1::nexttoward(ld0, ld0));\n+  check_ret_type<double>(std::tr1::nexttoward(i0, ld0));\n+\n+  check_ret_type<double>(std::tr1::pow(d0, d0));\n+  check_ret_type<double>(std::tr1::pow(d0, f0));\n+  check_ret_type<float>(std::tr1::pow(f0, f0));\n+  check_ret_type<long double>(std::tr1::pow(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::pow(ld0, d0));\n+  check_ret_type<double>(std::tr1::pow(i0, i0));\n+  check_ret_type<double>(std::tr1::pow(d0, i0));\n+  // DR 550.\n+  // check_ret_type<double>(std::tr1::pow(f0, i0));\n+  check_ret_type<float>(std::tr1::pow(f0, i0));\n+\n+  check_ret_type<double>(std::tr1::remainder(d0, d0));\n+  check_ret_type<double>(std::tr1::remainder(d0, f0));\n+  check_ret_type<float>(std::tr1::remainder(f0, f0));\n+  check_ret_type<long double>(std::tr1::remainder(ld0, ld0));\n+  check_ret_type<long double>(std::tr1::remainder(ld0, d0));\n+  check_ret_type<double>(std::tr1::remainder(i0, i0));\n+  check_ret_type<double>(std::tr1::remainder(d0, i0));\n+\n+  check_ret_type<double>(std::tr1::remquo(d0, d0, pquo));\n+  check_ret_type<double>(std::tr1::remquo(d0, f0, pquo));\n+  check_ret_type<float>(std::tr1::remquo(f0, f0, pquo));\n+  check_ret_type<long double>(std::tr1::remquo(ld0, ld0, pquo));\n+  check_ret_type<long double>(std::tr1::remquo(ld0, d0, pquo));\n+  check_ret_type<double>(std::tr1::remquo(i0, i0, pquo));\n+  check_ret_type<double>(std::tr1::remquo(d0, i0, pquo));\n+\n+  check_ret_type<double>(std::tr1::rint(d0));\n+  check_ret_type<float>(std::tr1::rint(f0));\n+  check_ret_type<long double>(std::tr1::rint(ld0));\n+  check_ret_type<double>(std::tr1::rint(i0));\n+\n+  check_ret_type<double>(std::tr1::round(d0));\n+  check_ret_type<float>(std::tr1::round(f0));\n+  check_ret_type<long double>(std::tr1::round(ld0));\n+  check_ret_type<double>(std::tr1::round(i0));\n+\n+  check_ret_type<double>(std::tr1::scalbln(d0, lex));\n+  check_ret_type<float>(std::tr1::scalbln(f0, lex));\n+  check_ret_type<long double>(std::tr1::scalbln(ld0, lex));\n+  check_ret_type<double>(std::tr1::scalbln(i0, lex));\n+\n+  check_ret_type<double>(std::tr1::scalbn(d0, ex));\n+  check_ret_type<float>(std::tr1::scalbn(f0, ex));\n+  check_ret_type<long double>(std::tr1::scalbn(ld0, ex));\n+  check_ret_type<double>(std::tr1::scalbn(i0, ex));\n+\n+  check_ret_type<double>(std::tr1::tgamma(d0));\n+  check_ret_type<float>(std::tr1::tgamma(f0));\n+  check_ret_type<long double>(std::tr1::tgamma(ld0));\n+  check_ret_type<double>(std::tr1::tgamma(i0));\n+\n+  check_ret_type<double>(std::tr1::trunc(d0));\n+  check_ret_type<float>(std::tr1::trunc(f0));\n+  check_ret_type<long double>(std::tr1::trunc(ld0));\n+  check_ret_type<double>(std::tr1::trunc(i0));\n   \n #endif\n }"}, {"sha": "dff4b9d2f4c14535a4c68830e356c7cdefbc48c4", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/types.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftypes.cc?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+\n+// 2006-03-10  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.16 Additions to header <cmath>\n+\n+#include <tr1/cmath>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+  typedef std::tr1::double_t  my_double_t;\n+  typedef std::tr1::float_t   my_float_t;\n+  \n+#endif\n+}"}, {"sha": "389f36423608cd8fc6f978311e65e69ea661fa28", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_float.cc", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_float.cc?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -23,13 +23,11 @@\n // 8.1 Additions to header <complex>\n \n #include <tr1/complex>\n-#include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n void test01()\n {\n-  using namespace std::tr1;\n-  using namespace __gnu_test;\n+  using __gnu_test::check_ret_type;\n \n   typedef std::complex<float>       cmplx_f_type;\n   typedef std::complex<double>      cmplx_d_type;\n@@ -43,63 +41,63 @@ void test01()\n   const cmplx_d_type  c_d1(d1, d1);\n   const cmplx_ld_type c_ld1(ld1, ld1);\n \n-  check_ret_type<float>(arg(f1));\n-  check_ret_type<double>(arg(d1));\n-  check_ret_type<long double>(arg(ld1));\n+  check_ret_type<float>(std::tr1::arg(f1));\n+  check_ret_type<double>(std::tr1::arg(d1));\n+  check_ret_type<long double>(std::tr1::arg(ld1));\n \n-  check_ret_type<cmplx_f_type>(conj(f1));\n-  check_ret_type<cmplx_d_type>(conj(d1));\n-  check_ret_type<cmplx_ld_type>(conj(ld1));\n+  check_ret_type<cmplx_f_type>(std::tr1::conj(f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::conj(d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::conj(ld1));\n   \n-  check_ret_type<float>(imag(f1));\n-  check_ret_type<double>(imag(d1));\n-  check_ret_type<long double>(imag(ld1));\n+  check_ret_type<float>(std::tr1::imag(f1));\n+  check_ret_type<double>(std::tr1::imag(d1));\n+  check_ret_type<long double>(std::tr1::imag(ld1));\n   \n-  check_ret_type<float>(norm(f1));\n-  check_ret_type<double>(norm(d1));\n-  check_ret_type<long double>(norm(ld1));\n+  check_ret_type<float>(std::tr1::norm(f1));\n+  check_ret_type<double>(std::tr1::norm(d1));\n+  check_ret_type<long double>(std::tr1::norm(ld1));\n \n-  check_ret_type<cmplx_f_type>(polar(f1, f1));\n-  check_ret_type<cmplx_d_type>(polar(d1, f1));\n-  check_ret_type<cmplx_d_type>(polar(f1, d1));\n-  check_ret_type<cmplx_d_type>(polar(d1, d1));\n-  check_ret_type<cmplx_ld_type>(polar(ld1, d1));\n-  check_ret_type<cmplx_ld_type>(polar(d1, ld1));\n-  check_ret_type<cmplx_ld_type>(polar(ld1, f1));\n-  check_ret_type<cmplx_ld_type>(polar(f1, ld1));\n-  check_ret_type<cmplx_ld_type>(polar(ld1, ld1));\n+  check_ret_type<cmplx_f_type>(std::tr1::polar(f1, f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::polar(d1, f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::polar(f1, d1));\n+  check_ret_type<cmplx_d_type>(std::tr1::polar(d1, d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::polar(ld1, d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::polar(d1, ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::polar(ld1, f1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::polar(f1, ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::polar(ld1, ld1));\n \n-  check_ret_type<cmplx_f_type>(pow(c_f1, f1));\n-  check_ret_type<cmplx_d_type>(pow(c_d1, f1));\n-  check_ret_type<cmplx_d_type>(pow(c_f1, d1));\n-  check_ret_type<cmplx_d_type>(pow(c_d1, d1));\n-  check_ret_type<cmplx_ld_type>(pow(c_ld1, d1));\n-  check_ret_type<cmplx_ld_type>(pow(c_d1, ld1));\n-  check_ret_type<cmplx_ld_type>(pow(c_ld1, f1));\n-  check_ret_type<cmplx_ld_type>(pow(c_f1, ld1));\n-  check_ret_type<cmplx_ld_type>(pow(c_ld1, ld1));\n+  check_ret_type<cmplx_f_type>(std::tr1::pow(c_f1, f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(c_d1, f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(c_f1, d1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(c_d1, d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_ld1, d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_d1, ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_ld1, f1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_f1, ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_ld1, ld1));\n \n-  check_ret_type<cmplx_f_type>(pow(f1, c_f1));\n-  check_ret_type<cmplx_d_type>(pow(d1, c_f1));\n-  check_ret_type<cmplx_d_type>(pow(f1, c_d1));\n-  check_ret_type<cmplx_d_type>(pow(d1, c_d1));\n-  check_ret_type<cmplx_ld_type>(pow(ld1, c_d1));\n-  check_ret_type<cmplx_ld_type>(pow(d1, c_ld1));\n-  check_ret_type<cmplx_ld_type>(pow(ld1, c_f1));\n-  check_ret_type<cmplx_ld_type>(pow(f1, c_ld1));\n-  check_ret_type<cmplx_ld_type>(pow(ld1, c_ld1));\n+  check_ret_type<cmplx_f_type>(std::tr1::pow(f1, c_f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(d1, c_f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(f1, c_d1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(d1, c_d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(ld1, c_d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(d1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(ld1, c_f1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(f1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(ld1, c_ld1));\n \n-  check_ret_type<cmplx_f_type>(pow(c_f1, c_f1));\n-  check_ret_type<cmplx_d_type>(pow(c_d1, c_f1));\n-  check_ret_type<cmplx_d_type>(pow(c_f1, c_d1));\n-  check_ret_type<cmplx_d_type>(pow(c_d1, c_d1));\n-  check_ret_type<cmplx_ld_type>(pow(c_ld1, c_d1));\n-  check_ret_type<cmplx_ld_type>(pow(c_d1, c_ld1));\n-  check_ret_type<cmplx_ld_type>(pow(c_ld1, c_f1));\n-  check_ret_type<cmplx_ld_type>(pow(c_f1, c_ld1));\n-  check_ret_type<cmplx_ld_type>(pow(c_ld1, c_ld1));\n+  check_ret_type<cmplx_f_type>(std::tr1::pow(c_f1, c_f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(c_d1, c_f1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(c_f1, c_d1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(c_d1, c_d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_ld1, c_d1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_d1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_ld1, c_f1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_f1, c_ld1));\n+  check_ret_type<cmplx_ld_type>(std::tr1::pow(c_ld1, c_ld1));\n \n-  check_ret_type<float>(real(f1));\n-  check_ret_type<double>(real(d1));\n-  check_ret_type<long double>(real(ld1));\n+  check_ret_type<float>(std::tr1::real(f1));\n+  check_ret_type<double>(std::tr1::real(d1));\n+  check_ret_type<long double>(std::tr1::real(ld1));\n }"}, {"sha": "b018351453788daeeee43fcc3a944f9f87b39881", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/overloads_int.cc", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Foverloads_int.cc?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -27,8 +27,7 @@\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n-  using namespace std::tr1;\n-  using namespace __gnu_test;\n+  using __gnu_test::check_ret_type;\n \n   typedef std::complex<float>  cmplx_f_type;\n   typedef std::complex<double> cmplx_d_type;\n@@ -39,57 +38,63 @@ void test01()\n   const double    f1 = 1.0f;\n   const double    d1 = 1.0;\n     \n-  check_ret_type<double>(arg(i1));\n-  VERIFY( arg(i1) == arg(double(i1)) );\n-  VERIFY( arg(i1) == arg(cmplx_d_type(double(i1))) );\n+  check_ret_type<double>(std::tr1::arg(i1));\n+  VERIFY( std::tr1::arg(i1) == std::tr1::arg(double(i1)) );\n+  VERIFY( std::tr1::arg(i1) == std::tr1::arg(cmplx_d_type(double(i1))) );\n \n-  check_ret_type<cmplx_d_type>(conj(i1));\n-  VERIFY( conj(i1) == conj(double(i1)) );\n-  VERIFY( conj(i1) == conj(cmplx_d_type(double(i1))) );\n+  check_ret_type<cmplx_d_type>(std::tr1::conj(i1));\n+  VERIFY( std::tr1::conj(i1) == std::tr1::conj(double(i1)) );\n+  VERIFY( std::tr1::conj(i1) == std::tr1::conj(cmplx_d_type(double(i1))) );\n \n-  check_ret_type<double>(imag(i1));\n-  VERIFY( imag(i1) == imag(double(i1)) );\n-  VERIFY( imag(i1) == imag(cmplx_d_type(double(i1))) );\n+  check_ret_type<double>(std::tr1::imag(i1));\n+  VERIFY( std::tr1::imag(i1) == std::tr1::imag(double(i1)) );\n+  VERIFY( std::tr1::imag(i1) == std::tr1::imag(cmplx_d_type(double(i1))) );\n \n-  check_ret_type<double>(norm(i1));\n-  VERIFY( norm(i1) == norm(double(i1)) );\n+  check_ret_type<double>(std::tr1::norm(i1));\n+  VERIFY( std::tr1::norm(i1) == std::tr1::norm(double(i1)) );\n   // std::norm<const complex<>&) is mathematically equivalent to just\n   // this for a real, but the general algorithm goes through std::abs\n   // and a multiplication.\n-  VERIFY( norm(i1) == double(i1) * double(i1) );\n+  VERIFY( std::tr1::norm(i1) == double(i1) * double(i1) );\n+\n+  // NB: The existing std::polar wins and a cmplx_i_type is returned.\n+  // check_ret_type<cmplx_d_type>(std::tr1::polar(i1, i1));\n+  // VERIFY( std::tr1::polar(i1, i1)\n+  //         == std::tr1::polar(double(i1), double(i1)) );\n+  typedef std::complex<int> cmplx_i_type;\n+  check_ret_type<cmplx_i_type>(std::tr1::polar(i1, i1));\n \n-  check_ret_type<cmplx_d_type>(polar(i1, i1));\n-  VERIFY( polar(i1, i1) == polar(double(i1), double(i1)) );\n   // NB: According to the letter of 8.1.9/3 the return type should be a\n   // cmplx_d_type, but the existing std::pow(const complex<>&, int) wins.\n-  check_ret_type<cmplx_f_type>(pow(cmplx_f_type(f1, f1), i1));\n+  // check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), i1));\n+  check_ret_type<cmplx_f_type>(std::tr1::pow(cmplx_f_type(f1, f1), i1));\n \n-  check_ret_type<cmplx_d_type>(pow(cmplx_f_type(f1, f1), u1));\n-  check_ret_type<cmplx_d_type>(pow(cmplx_f_type(f1, f1), l1));\n-  check_ret_type<cmplx_d_type>(pow(cmplx_d_type(d1, d1), i1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), u1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_f_type(f1, f1), l1));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(cmplx_d_type(d1, d1), i1));\n \n   // See last comment.\n-  // VERIFY( pow(cmplx_d_type(d1, d1), i1)\n-  //         == pow(cmplx_d_type(d1, d1), double(i1)) );\n-  VERIFY( pow(cmplx_d_type(d1, d1), u1)\n-\t  == pow(cmplx_d_type(d1, d1), double(u1)) );\n-  VERIFY( pow(cmplx_d_type(d1, d1), l1)\n-\t  == pow(cmplx_d_type(d1, d1), double(l1)) );\n+  // VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), i1)\n+  //         == std::tr1::pow(cmplx_d_type(d1, d1), double(i1)) );\n+  VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), u1)\n+\t  == std::tr1::pow(cmplx_d_type(d1, d1), double(u1)) );\n+  VERIFY( std::tr1::pow(cmplx_d_type(d1, d1), l1)\n+\t  == std::tr1::pow(cmplx_d_type(d1, d1), double(l1)) );\n \n-  check_ret_type<cmplx_d_type>(pow(i1, cmplx_f_type(f1, f1)));\n-  check_ret_type<cmplx_d_type>(pow(u1, cmplx_f_type(f1, f1)));\n-  check_ret_type<cmplx_d_type>(pow(l1, cmplx_f_type(f1, f1)));\n-  check_ret_type<cmplx_d_type>(pow(i1, cmplx_d_type(d1, d1)));\n-  VERIFY( pow(i1, cmplx_d_type(d1, d1))\n-\t  == pow(double(i1), cmplx_d_type(d1, d1)) );\n-  VERIFY( pow(u1, cmplx_d_type(d1, d1))\n-\t  == pow(double(u1), cmplx_d_type(d1, d1)) );\n-  VERIFY( pow(l1, cmplx_d_type(d1, d1))\n-\t  == pow(double(l1), cmplx_d_type(d1, d1)) );\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(i1, cmplx_f_type(f1, f1)));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(u1, cmplx_f_type(f1, f1)));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(l1, cmplx_f_type(f1, f1)));\n+  check_ret_type<cmplx_d_type>(std::tr1::pow(i1, cmplx_d_type(d1, d1)));\n+  VERIFY( std::tr1::pow(i1, cmplx_d_type(d1, d1))\n+\t  == std::tr1::pow(double(i1), cmplx_d_type(d1, d1)) );\n+  VERIFY( std::tr1::pow(u1, cmplx_d_type(d1, d1))\n+\t  == std::tr1::pow(double(u1), cmplx_d_type(d1, d1)) );\n+  VERIFY( std::tr1::pow(l1, cmplx_d_type(d1, d1))\n+\t  == std::tr1::pow(double(l1), cmplx_d_type(d1, d1)) );\n \n-  check_ret_type<double>(real(i1));\n-  VERIFY( real(i1) == real(double(i1)) );\n-  VERIFY( real(i1) == real(cmplx_d_type(double(i1))) );\n+  check_ret_type<double>(std::tr1::real(i1));\n+  VERIFY( std::tr1::real(i1) == std::tr1::real(double(i1)) );\n+  VERIFY( std::tr1::real(i1) == std::tr1::real(cmplx_d_type(double(i1))) );\n }\n \n int main()"}, {"sha": "0650f53efdaf135ba2155dd19d828ee2ff920b17", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7ab578fb581fd0885c7841706876315b1bbc4b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=9a7ab578fb581fd0885c7841706876315b1bbc4b", "patch": "@@ -33,6 +33,7 @@\n #include <tr1/cstdint>\n #include <tr1/cstdio>\n #include <tr1/cstdlib>\n+#include <tr1/ctgmath>\n #include <tr1/ctime>\n #include <tr1/ctype.h>\n #include <tr1/cwchar>\n@@ -49,6 +50,7 @@\n #include <tr1/stdint.h>\n #include <tr1/stdio.h>\n #include <tr1/stdlib.h>\n+#include <tr1/tgmath.h>\n #include <tr1/tuple>\n #include <tr1/type_traits>\n #include <tr1/unordered_set>"}]}