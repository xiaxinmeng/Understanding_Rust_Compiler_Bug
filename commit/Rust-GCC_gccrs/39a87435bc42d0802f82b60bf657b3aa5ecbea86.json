{"sha": "39a87435bc42d0802f82b60bf657b3aa5ecbea86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhODc0MzViYzQyZDA4MDJmODJiNjBiZjY1N2IzYWE1ZWNiZWE4Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-02-15T19:37:13Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-02-15T19:37:13Z"}, "message": "decl2.c (mark_used): Set the source location of the used decl to the current input location here...\n\n* decl2.c (mark_used): Set the source location of the used decl to\nthe current input location here...\n* method.c (synthesize_method): ... not here.  Set input_location\nfrom the decl instead.\n\nFrom-SVN: r95070", "tree": {"sha": "8822a8644e32fc77102ecb5cd7a2e7c116ba4707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8822a8644e32fc77102ecb5cd7a2e7c116ba4707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39a87435bc42d0802f82b60bf657b3aa5ecbea86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a87435bc42d0802f82b60bf657b3aa5ecbea86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a87435bc42d0802f82b60bf657b3aa5ecbea86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a87435bc42d0802f82b60bf657b3aa5ecbea86/comments", "author": null, "committer": null, "parents": [{"sha": "83cc36c8268ff644059eb99f0e2e4670e3fff841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83cc36c8268ff644059eb99f0e2e4670e3fff841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83cc36c8268ff644059eb99f0e2e4670e3fff841"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "3375ed0d4b968e5abb5b529a1167f9f0b085945f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a87435bc42d0802f82b60bf657b3aa5ecbea86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a87435bc42d0802f82b60bf657b3aa5ecbea86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39a87435bc42d0802f82b60bf657b3aa5ecbea86", "patch": "@@ -1,3 +1,10 @@\n+2005-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* decl2.c (mark_used): Set the source location of the used decl to\n+\tthe current input location here...\n+\t* method.c (synthesize_method): ... not here.  Set input_location\n+\tfrom the decl instead.\n+\n 2005-02-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/19608"}, {"sha": "c7b04150e8f11beb9f1780e8526ade10699b691b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a87435bc42d0802f82b60bf657b3aa5ecbea86/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a87435bc42d0802f82b60bf657b3aa5ecbea86/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=39a87435bc42d0802f82b60bf657b3aa5ecbea86", "patch": "@@ -3161,9 +3161,20 @@ mark_used (tree decl)\n       && DECL_ARTIFICIAL (decl) \n       && !DECL_THUNK_P (decl)\n       && ! DECL_INITIAL (decl)\n-      /* Kludge: don't synthesize for default args.  */\n+      /* Kludge: don't synthesize for default args.  Unfortunately this\n+\t rules out initializers of namespace-scoped objects too, but\n+\t it's sort-of ok if the implicit ctor or dtor decl keeps\n+\t pointing to the class location.  */\n       && current_function_decl)\n     {\n+      /* Put the function definition at the position where it is needed,\n+\t rather than within the body of the class.  That way, an error\n+\t during the generation of the implicit body points at the place\n+\t where the attempt to generate the function occurs, giving the\n+\t user a hint as to why we are attempting to generate the\n+\t function.  */\n+      DECL_SOURCE_LOCATION (decl) = input_location;\n+\n       synthesize_method (decl);\n       /* If we've already synthesized the method we don't need to\n \t instantiate it, so we can return right away.  */"}, {"sha": "85e2b3f8787d05eb2ef011cab22e0d882e2bf949", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39a87435bc42d0802f82b60bf657b3aa5ecbea86/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39a87435bc42d0802f82b60bf657b3aa5ecbea86/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=39a87435bc42d0802f82b60bf657b3aa5ecbea86", "patch": "@@ -705,12 +705,15 @@ synthesize_method (tree fndecl)\n   tree context = decl_function_context (fndecl);\n   bool need_body = true;\n   tree stmt;\n+  location_t save_input_location = input_location;\n \n   /* If we've been asked to synthesize a clone, just synthesize the\n      cloned function instead.  Doing so will automatically fill in the\n      body for the clone.  */\n   if (DECL_CLONED_FUNCTION_P (fndecl))\n     {\n+      DECL_SOURCE_LOCATION (DECL_CLONED_FUNCTION (fndecl)) =\n+\tDECL_SOURCE_LOCATION (fndecl);\n       synthesize_method (DECL_CLONED_FUNCTION (fndecl));\n       return;\n     }\n@@ -724,13 +727,7 @@ synthesize_method (tree fndecl)\n   else if (nested)\n     push_function_context_to (context);\n \n-  /* Put the function definition at the position where it is needed,\n-     rather than within the body of the class.  That way, an error\n-     during the generation of the implicit body points at the place\n-     where the attempt to generate the function occurs, giving the\n-     user a hint as to why we are attempting to generate the\n-     function.  */\n-  DECL_SOURCE_LOCATION (fndecl) = input_location;\n+  input_location = DECL_SOURCE_LOCATION (fndecl);\n \n   start_preparsed_function (fndecl, NULL_TREE, SF_DEFAULT | SF_PRE_PARSED);\n   stmt = begin_function_body ();\n@@ -761,6 +758,8 @@ synthesize_method (tree fndecl)\n   finish_function_body (stmt);\n   expand_or_defer_fn (finish_function (0));\n \n+  input_location = save_input_location;\n+\n   if (! context)\n     pop_from_top_level ();\n   else if (nested)"}]}