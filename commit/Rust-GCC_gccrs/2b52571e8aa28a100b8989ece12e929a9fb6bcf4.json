{"sha": "2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "node_id": "C_kwDOANBUbNoAKDJiNTI1NzFlOGFhMjhhMTAwYjg5ODllY2UxMmU5MjlhOWZiNmJjZjQ", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-02T13:41:54Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-25T08:47:34Z"}, "message": "lowering: Add lowering of exported macros\n\nMacros marked with #[macro_export] need to be lowered to HIR in order\nto get exported to the relevant metadata files.\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-base.cc (ASTLoweringBase::lower_macro_definition):\n\tNew function.\n\t* hir/rust-ast-lower-base.h: Declare `lower_macro_definition`.\n\t* hir/rust-ast-lower-item.cc (ASTLoweringItem::visit): Lower public\n\tmacro definitions.\n\t* hir/rust-ast-lower-stmt.cc (ASTLoweringStmt::visit): Likewise.\n\t* hir/rust-ast-lower-stmt.h: Add visitor for `AST::MacroRulesDefinition`.\n\t* hir/rust-ast-lower.cc (ASTLowering::go): Formatting.\n\t(ASTLoweringBlock::visit): Visit `AST::MacroRulesDefinition`\n\t(ASTLoweringIfLetBlock::visit): Formatting.\n\t(ASTLoweringExprWithBlock::visit): Formatting.", "tree": {"sha": "efb9e0e3262ada92e75fce9b1fd3b1c284572643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efb9e0e3262ada92e75fce9b1fd3b1c284572643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3e7bde5b0ab530b10483818d52504f7942ecdd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e7bde5b0ab530b10483818d52504f7942ecdd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e7bde5b0ab530b10483818d52504f7942ecdd5"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "972d34c7a386bbafe3018e44a6a972cc530e076c", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "patch": "@@ -970,5 +970,21 @@ ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n   return hir_extern_block;\n }\n \n+void\n+ASTLoweringBase::lower_macro_definition (AST::MacroRulesDefinition &def)\n+{\n+  auto is_export = false;\n+  for (const auto &attr : def.get_outer_attrs ())\n+    if (attr.get_path ().as_string () == \"macro_export\")\n+      is_export = true;\n+\n+  if (is_export)\n+    {\n+      mappings->insert_exported_macro (def);\n+      mappings->insert_ast_item (&def);\n+      mappings->insert_location (def.get_node_id (), def.get_locus ());\n+    }\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "eb95435cbec35591bc1290fa19956d1b48db1ee3", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "patch": "@@ -318,6 +318,9 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::ExternBlock *lower_extern_block (AST::ExternBlock &extern_block);\n \n   HIR::ClosureParam lower_closure_param (AST::ClosureParam &param);\n+\n+  /* Lower a macro definition if it should be exported */\n+  void lower_macro_definition (AST::MacroRulesDefinition &def);\n };\n \n } // namespace HIR"}, {"sha": "5e36f6404b536e9371011834ac3f902b798baffd", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "patch": "@@ -708,9 +708,7 @@ ASTLoweringItem::visit (AST::ExternBlock &extern_block)\n void\n ASTLoweringItem::visit (AST::MacroRulesDefinition &def)\n {\n-  for (const auto &attr : def.get_outer_attrs ())\n-    if (attr.get_path ().as_string () == \"macro_export\")\n-      mappings->insert_exported_macro (def);\n+  lower_macro_definition (def);\n }\n \n HIR::SimplePath"}, {"sha": "6f34181c6299b49eb009007dde62f6ecbee38be6", "filename": "gcc/rust/hir/rust-ast-lower-stmt.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.cc?ref=2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "patch": "@@ -32,7 +32,9 @@ ASTLoweringStmt::translate (AST::Stmt *stmt, bool *terminated)\n   ASTLoweringStmt resolver;\n   stmt->accept_vis (resolver);\n \n-  rust_assert (resolver.translated != nullptr);\n+  if (!resolver.translated)\n+    return nullptr;\n+\n   *terminated = resolver.terminated;\n   resolver.mappings->insert_location (\n     resolver.translated->get_mappings ().get_hirid (),\n@@ -406,5 +408,11 @@ ASTLoweringStmt::visit (AST::ExternBlock &extern_block)\n   translated = lower_extern_block (extern_block);\n }\n \n+void\n+ASTLoweringStmt::visit (AST::MacroRulesDefinition &def)\n+{\n+  lower_macro_definition (def);\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "814425c4f2993477562d938afd46278a0414744e", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "patch": "@@ -42,6 +42,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n   void visit (AST::EmptyStmt &empty) override;\n   void visit (AST::Function &function) override;\n   void visit (AST::ExternBlock &extern_block) override;\n+  void visit (AST::MacroRulesDefinition &extern_block) override;\n \n private:\n   ASTLoweringStmt () : translated (nullptr), terminated (false) {}"}, {"sha": "9b6227c5055ce6d33b6e808dc93e0433948de68c", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b52571e8aa28a100b8989ece12e929a9fb6bcf4/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "patch": "@@ -72,7 +72,7 @@ ASTLowering::Resolve (AST::Crate &astCrate)\n std::unique_ptr<HIR::Crate>\n ASTLowering::go ()\n {\n-  std::vector<std::unique_ptr<HIR::Item> > items;\n+  std::vector<std::unique_ptr<HIR::Item>> items;\n \n   for (auto it = astCrate.items.begin (); it != astCrate.items.end (); it++)\n     {\n@@ -95,14 +95,11 @@ ASTLowering::go ()\n void\n ASTLoweringBlock::visit (AST::BlockExpr &expr)\n {\n-  std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n+  std::vector<std::unique_ptr<HIR::Stmt>> block_stmts;\n   bool block_did_terminate = false;\n \n   for (auto &s : expr.get_statements ())\n     {\n-      if (s->get_ast_kind () == AST::Kind::MACRO_RULES_DEFINITION)\n-\tcontinue;\n-\n       if (s->get_ast_kind () == AST::Kind::MACRO_INVOCATION)\n \trust_fatal_error (\n \t  s->get_locus (),\n@@ -115,8 +112,10 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n \n       bool terminated = false;\n       auto translated_stmt = ASTLoweringStmt::translate (s.get (), &terminated);\n-      block_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n       block_did_terminate |= terminated;\n+\n+      if (translated_stmt)\n+\tblock_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n     }\n \n   if (expr.has_tail_expr () && block_did_terminate)\n@@ -230,7 +229,7 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n void\n ASTLoweringIfLetBlock::visit (AST::IfLetExpr &expr)\n {\n-  std::vector<std::unique_ptr<HIR::Pattern> > patterns;\n+  std::vector<std::unique_ptr<HIR::Pattern>> patterns;\n   for (auto &pattern : expr.get_patterns ())\n     {\n       HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());\n@@ -372,7 +371,7 @@ ASTLoweringExprWithBlock::visit (AST::MatchExpr &expr)\n \t    match_case.get_arm ().get_guard_expr ().get ());\n \t}\n \n-      std::vector<std::unique_ptr<HIR::Pattern> > match_arm_patterns;\n+      std::vector<std::unique_ptr<HIR::Pattern>> match_arm_patterns;\n       for (auto &pattern : match_case.get_arm ().get_patterns ())\n \t{\n \t  HIR::Pattern *ptrn = ASTLoweringPattern::translate (pattern.get ());"}]}