{"sha": "3b31afe1a56cfb7b92f563b53686b378bdbead54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzMWFmZTFhNTZjZmI3YjkyZjU2M2I1MzY4NmIzNzhiZGJlYWQ1NA==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2018-11-29T23:11:47Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2018-11-29T23:11:47Z"}, "message": "Support instrumenting returns of instrumented functions\n\nWhen instrumenting programs using __fentry__ it is often useful\nto instrument the function return too. Traditionally this\nhas been done by patching the return address on the stack\nframe on entry. However this is fairly complicated (trace\nfunction has to emulate a stack) and also slow because\nit causes a branch misprediction on every return.\n\nAdd an option to generate call or nop instrumentation for\nevery return instead, including patch sections.\n\nThis will increase the program size slightly, but can be a\nlot faster and simpler.\n\nThis version only instruments true returns, not sibling\ncalls or tail recursion. This matches the semantics of the\noriginal stack.\n\ngcc/:\n\n2018-11-29  Andi Kleen  <ak@linux.intel.com>\n\n\t* config/i386/i386-opts.h (enum instrument_return): Add.\n\t* config/i386/i386.c (output_return_instrumentation): Add.\n\t(ix86_output_function_return): Call output_return_instrumentation.\n\t(ix86_output_call_insn): Call output_return_instrumentation.\n\t* config/i386/i386.opt: Add -minstrument-return=.\n\t* doc/invoke.texi (-minstrument-return): Document.\n\ngcc/testsuite/:\n\n2018-11-29  Andi Kleen  <ak@linux.intel.com>\n\n\t* gcc.target/i386/returninst1.c: New test.\n\t* gcc.target/i386/returninst2.c: New test.\n\t* gcc.target/i386/returninst3.c: New test.\n\nFrom-SVN: r266652", "tree": {"sha": "4a9b821db915c6d93e7d73e2d80b79bb5637517e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9b821db915c6d93e7d73e2d80b79bb5637517e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b31afe1a56cfb7b92f563b53686b378bdbead54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b31afe1a56cfb7b92f563b53686b378bdbead54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b31afe1a56cfb7b92f563b53686b378bdbead54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b31afe1a56cfb7b92f563b53686b378bdbead54/comments", "author": null, "committer": null, "parents": [{"sha": "856f4c6a9cfac1471c323b1783130879e2bbc15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856f4c6a9cfac1471c323b1783130879e2bbc15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856f4c6a9cfac1471c323b1783130879e2bbc15f"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "9f19bc685ed8d0bbc02acd567e6fec20a0b9fabc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -1,3 +1,12 @@\n+2018-11-29  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* config/i386/i386-opts.h (enum instrument_return): Add.\n+\t* config/i386/i386.c (output_return_instrumentation): Add.\n+\t(ix86_output_function_return): Call output_return_instrumentation.\n+\t(ix86_output_call_insn): Call output_return_instrumentation.\n+\t* config/i386/i386.opt: Add -minstrument-return=.\n+\t* doc/invoke.texi (-minstrument-return): Document.\n+\n 2018-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/87807"}, {"sha": "35e9413100e2585c098e321357ce348b7e67f64b", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -119,4 +119,10 @@ enum indirect_branch {\n   indirect_branch_thunk_extern\n };\n \n+enum instrument_return {\n+  instrument_return_none = 0,\n+  instrument_return_call,\n+  instrument_return_nop5\n+};\n+\n #endif"}, {"sha": "98928d99265d0f7cd2519a2988eb36bc2a2208c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -28385,12 +28385,47 @@ ix86_output_indirect_jmp (rtx call_op)\n     return \"%!jmp\\t%A0\";\n }\n \n+/* Output return instrumentation for current function if needed.  */\n+\n+static void\n+output_return_instrumentation (void)\n+{\n+  if (ix86_instrument_return != instrument_return_none\n+      && flag_fentry\n+      && !DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (cfun->decl))\n+    {\n+      if (ix86_flag_record_return)\n+\tfprintf (asm_out_file, \"1:\\n\");\n+      switch (ix86_instrument_return)\n+\t{\n+\tcase instrument_return_call:\n+\t  fprintf (asm_out_file, \"\\tcall\\t__return__\\n\");\n+\t  break;\n+\tcase instrument_return_nop5:\n+\t  /* 5 byte nop: nopl 0(%[re]ax,%[re]ax,1)  */\n+\t  fprintf (asm_out_file, ASM_BYTE \"0x0f, 0x1f, 0x44, 0x00, 0x00\\n\");\n+\t  break;\n+\tcase instrument_return_none:\n+\t  break;\n+\t}\n+\n+      if (ix86_flag_record_return)\n+\t{\n+\t  fprintf (asm_out_file, \"\\t.section __return_loc, \\\"a\\\",@progbits\\n\");\n+\t  fprintf (asm_out_file, \"\\t.%s 1b\\n\", TARGET_64BIT ? \"quad\" : \"long\");\n+\t  fprintf (asm_out_file, \"\\t.previous\\n\");\n+\t}\n+    }\n+}\n+\n /* Output function return.  CALL_OP is the jump target.  Add a REP\n    prefix to RET if LONG_P is true and function return is kept.  */\n \n const char *\n ix86_output_function_return (bool long_p)\n {\n+  output_return_instrumentation ();\n+\n   if (cfun->machine->function_return_type != indirect_branch_keep)\n     {\n       char thunk_name[32];\n@@ -28503,6 +28538,7 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n \n   if (SIBLING_CALL_P (insn))\n     {\n+      output_return_instrumentation ();\n       if (direct_p)\n \t{\n \t  if (ix86_nopic_noplt_attribute_p (call_op))"}, {"sha": "bacfabe378edcd0710dd2b3958b534fe486cc84f", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -1067,3 +1067,24 @@ Support WAITPKG built-in functions and code generation.\n mcldemote\n Target Report Mask(ISA_CLDEMOTE) Var(ix86_isa_flags2) Save\n Support CLDEMOTE built-in functions and code generation.\n+\n+minstrument-return=\n+Target Report RejectNegative Joined Enum(instrument_return) Var(ix86_instrument_return) Init(instrument_return_none)\n+Instrument function exit in instrumented functions with __fentry__.\n+\n+Enum\n+Name(instrument_return) Type(enum instrument_return)\n+Known choices for return instrumentation with -minstrument-return=\n+\n+EnumValue\n+Enum(instrument_return) String(none) Value(instrument_return_none)\n+\n+EnumValue\n+Enum(instrument_return) String(call) Value(instrument_return_call)\n+\n+EnumValue\n+Enum(instrument_return) String(nop5) Value(instrument_return_nop5)\n+\n+mrecord-return\n+Target Report Var(ix86_flag_record_return) Init(0)\n+Generate a __return_loc section pointing to all return instrumentation code."}, {"sha": "d457980dbf74378364eb2f2736cb8435176b95ab", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -1316,6 +1316,7 @@ See RS/6000 and PowerPC Options.\n -mcmodel=@var{code-model}  -mabi=@var{name}  -maddress-mode=@var{mode} @gol\n -m32  -m64  -mx32  -m16  -miamcu  -mlarge-data-threshold=@var{num} @gol\n -msse2avx  -mfentry  -mrecord-mcount  -mnop-mcount  -m8bit-idiv @gol\n+-minstrument-return=@var{type} @gol\n -mavx256-split-unaligned-load  -mavx256-split-unaligned-store @gol\n -malign-data=@var{type}  -mstack-protector-guard=@var{guard} @gol\n -mstack-protector-guard-reg=@var{reg} @gol\n@@ -29077,6 +29078,19 @@ the profiling functions as NOPs. This is useful when they\n should be patched in later dynamically. This is likely only\n useful together with @option{-mrecord-mcount}.\n \n+@item -minstrument-return=@var{type}\n+@opindex minstrument-return\n+Instrument function exit in -pg -mfentry instrumented functions with\n+call to specified function. This only instruments true returns ending\n+with ret, but not sibling calls ending with jump. Valid types\n+are @var{none} to not instrument, @var{call} to generate a call to __return__,\n+or @var{nop5} to generate a 5 byte nop.\n+\n+@item -mrecord-return\n+@itemx -mno-record-return\n+@opindex mrecord-return\n+Generate a __return_loc section pointing to all return instrumentation code.\n+\n @item -mskip-rax-setup\n @itemx -mno-skip-rax-setup\n @opindex mskip-rax-setup"}, {"sha": "ebe2813c93fb45faa00959b4b392d6a56f9334d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -1,3 +1,9 @@\n+2018-11-29  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* gcc.target/i386/returninst1.c: New test.\n+\t* gcc.target/i386/returninst2.c: New test.\n+\t* gcc.target/i386/returninst3.c: New test.\n+\n 2018-11-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/20181129-1.c: New test."}, {"sha": "f970e75a774deafa4d1bfddacacd410143e4a20b", "filename": "gcc/testsuite/gcc.target/i386/returninst1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst1.c?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pg -mfentry -minstrument-return=call -mrecord-return\" } */\n+/* { dg-final { scan-assembler \"call.*__return__\" } } */\n+/* { dg-final { scan-assembler \"section.*return_loc\" } } */\n+\n+int func(int a)\n+{\n+  return a+1;\n+}\n+\n+int func2(int a)\n+{\n+  return a+1;\n+}"}, {"sha": "716b38556dd9977f5a33baf51ae9bb4400bb9d1d", "filename": "gcc/testsuite/gcc.target/i386/returninst2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst2.c?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pg -mfentry -minstrument-return=nop5 -mrecord-return\" } */\n+/* { dg-final { scan-assembler-times \"0x0f, 0x1f, 0x44, 0x00, 0x00\" 3 } } */\n+/* { dg-final { scan-assembler \"section.*return_loc\" } } */\n+\n+int func(int a)\n+{\n+  return a+1;\n+}\n+\n+int func2(int a)\n+{\n+  return a+1;\n+}\n+\n+extern void func4(int);\n+\n+int func3(int a)\n+{\n+  func4(a + 1);\n+}"}, {"sha": "5bbc60e8bd46bc21abbfa7746a60ecf3ccdbab9f", "filename": "gcc/testsuite/gcc.target/i386/returninst3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31afe1a56cfb7b92f563b53686b378bdbead54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freturninst3.c?ref=3b31afe1a56cfb7b92f563b53686b378bdbead54", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-pg -mfentry -minstrument-return=call\" } */\n+/* { dg-final { scan-assembler-not \"call.*__return__\" } } */\n+\n+__attribute__((no_instrument_function))\n+int func(int a)\n+{\n+  return a+1;\n+}"}]}