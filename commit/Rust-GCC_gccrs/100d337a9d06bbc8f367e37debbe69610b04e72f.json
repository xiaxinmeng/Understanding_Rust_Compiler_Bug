{"sha": "100d337a9d06bbc8f367e37debbe69610b04e72f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwZDMzN2E5ZDA2YmJjOGYzNjdlMzdkZWJiZTY5NjEwYjA0ZTcyZg==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2005-02-03T00:02:10Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2005-02-03T00:02:10Z"}, "message": "re PR c++/19628 (g++ no longer accepts __builtin_constant_p in constant-expressions)\n\nPR c++/19628\n\n* cp-tree.h (builtin_valid_in_constant_expr_p): Declare.\n* parser.c (cp_parser_postfix_expression): Accept function call in constant expression if builtin_valid_in_constant_expr_p is true for that function.\n* pt.c (value_dependent_expression_p): Handle CALL_EXPRs properly.\n* semantics.c (finish_id_expression): Accept function call in constant expression if builtin_valid_in_constant_expr_p is true for that function.\n* tree.c (builtin_valid_in_constant_expr_p): New.\n\n* g++/ext/builtin7.C: New.\n* g++/ext/builtin8.C: New.\n\nFrom-SVN: r94635", "tree": {"sha": "54f1d79812354b990fbbfe75895aedd5f2372e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f1d79812354b990fbbfe75895aedd5f2372e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100d337a9d06bbc8f367e37debbe69610b04e72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100d337a9d06bbc8f367e37debbe69610b04e72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100d337a9d06bbc8f367e37debbe69610b04e72f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100d337a9d06bbc8f367e37debbe69610b04e72f/comments", "author": null, "committer": null, "parents": [{"sha": "89d12f5d49829d3dbf9a78040b88df833923c0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d12f5d49829d3dbf9a78040b88df833923c0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d12f5d49829d3dbf9a78040b88df833923c0df"}], "stats": {"total": 101, "additions": 98, "deletions": 3}, "files": [{"sha": "230e710f5916bff730862fc6c7c7adbea89deb0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -1,3 +1,16 @@\n+2005-02-02  Matt Austern  <austern@apple.com>\n+\n+\tPR c++/19628\n+\t* cp-tree.h (builtin_valid_in_constant_expr_p): Declare.\n+\t* parser.c (cp_parser_postfix_expression): Accept function call in\n+\tconstant expression if builtin_valid_in_constant_expr_p is true\n+\tfor that function. \n+\t* pt.c (value_dependent_expression_p): Handle CALL_EXPRs properly.\n+\t* semantics.c (finish_id_expression): Accept function call in constant\n+\texpression if builtin_valid_in_constant_expr_p is true for that\n+\tfunction. \n+\t* tree.c (builtin_valid_in_constant_expr_p): New.\n+\t\n 2005-02-02  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/17413"}, {"sha": "58e0fa8066c34db31e3757c0f9ec6207a8379d73", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -4205,6 +4205,7 @@ extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n extern int member_p\t\t\t\t(tree);\n extern cp_lvalue_kind real_lvalue_p             (tree);\n+extern bool builtin_valid_in_constant_expr_p    (tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);"}, {"sha": "e89fd85c03469a91ae30a07c41b121f4843da31d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -4037,8 +4037,9 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p)\n \n \t    /* Function calls are not permitted in\n \t       constant-expressions.  */\n-\t    if (cp_parser_non_integral_constant_expression (parser,\n-\t\t\t\t\t\t\t    \"a function call\"))\n+\t    if (! builtin_valid_in_constant_expr_p (postfix_expression)\n+\t\t&& cp_parser_non_integral_constant_expression (parser,\n+\t\t\t\t\t\t\t       \"a function call\"))\n \t      {\n \t\tpostfix_expression = error_mark_node;\n \t\tbreak;"}, {"sha": "d0cd2297db38720d38d936e0e74e5a99cfe5c4ab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -12020,6 +12020,36 @@ value_dependent_expression_p (tree expression)\n   if (TREE_CODE (expression) == COMPONENT_REF)\n     return (value_dependent_expression_p (TREE_OPERAND (expression, 0))\n \t    || value_dependent_expression_p (TREE_OPERAND (expression, 1)));\n+\n+  /* A CALL_EXPR is value-dependent if any argument is\n+     value-dependent.  Why do we have to handle CALL_EXPRs in this\n+     function at all?  First, some function calls, those for which\n+     value_dependent_expression_p is true, man appear in constant\n+     expressions.  Second, there appear to be bugs which result in\n+     other CALL_EXPRs reaching this point. */\n+  if (TREE_CODE (expression) == CALL_EXPR)\n+    {\n+      tree function = TREE_OPERAND (expression, 0);\n+      tree args = TREE_OPERAND (expression, 1);\n+\n+      if (value_dependent_expression_p (function))\n+\treturn true;\n+      else if (! args)\n+\treturn false;\n+      else if (TREE_CODE (args) == TREE_LIST)\n+\t{\n+\t  do\n+\t    {\n+\t      if (value_dependent_expression_p (TREE_VALUE (args)))\n+\t\treturn true;\n+\t      args = TREE_CHAIN (args);\n+\t    }\n+\t  while (args);\n+\t  return false;\n+\t}\n+      else\n+\treturn value_dependent_expression_p (args);\n+    }\n   /* A constant expression is value-dependent if any subexpression is\n      value-dependent.  */\n   if (EXPR_P (expression))"}, {"sha": "ebc213d7812c7ce917bc716b55bb6f536b42014b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -2663,7 +2663,8 @@ finish_id_expression (tree id_expression,\n          expression.  Enumerators and template parameters have already\n          been handled above.  */\n       if (integral_constant_expression_p\n-\t  && !DECL_INTEGRAL_CONSTANT_VAR_P (decl))\n+\t  && ! DECL_INTEGRAL_CONSTANT_VAR_P (decl)\n+\t  && ! builtin_valid_in_constant_expr_p (decl))\n \t{\n \t  if (!allow_non_integral_constant_expression_p)\n \t    {"}, {"sha": "8a264d7afa94e5b0bbe82ebd0bce3a79babe577e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -215,6 +215,19 @@ lvalue_p (tree ref)\n     (lvalue_p_1 (ref, /*class rvalue ok*/ 1) != clk_none);\n }\n \n+/* Test whether DECL is a builtin that may appear in a\n+   constant-expression. */\n+\n+bool\n+builtin_valid_in_constant_expr_p (tree decl)\n+{\n+  /* At present BUILT_IN_CONSTANT_P is the only builtin we're allowing\n+     in constant-expressions.  We may want to add other builtins later. */\n+  return TREE_CODE (decl) == FUNCTION_DECL\n+    && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n+    && DECL_FUNCTION_CODE (decl) == BUILT_IN_CONSTANT_P;\n+}\n+\n /* Build a TARGET_EXPR, initializing the DECL with the VALUE.  */\n \n static tree"}, {"sha": "68c973ace7d6c0f95a2b12640b9ab379677c3674", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -1,3 +1,9 @@\n+2005-02-02  Matt Austern  <austern@apple.com>\n+\n+\tPR c++/19628\n+\t* g++/ext/builtin7.C: New.\n+\t* g++/ext/builtin8.C: New.\n+\t\n 2005-02-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/18502"}, {"sha": "dae658abc4a5f2e67993535516c92bae83f11326", "filename": "gcc/testsuite/g++.dg/ext/builtin7.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin7.C?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/19628\n+// Verify that __builtin_constant_p may appear in a constant-expression.\n+\n+// { dg-do run }\n+\n+int main()\n+{\n+  switch (3) {\n+  case (__builtin_constant_p(7) ? 3 : 8):\n+    return 0;\n+  default:\n+    return 1;\n+  }\n+}"}, {"sha": "dd49977255da86caa8258955d3a982aab346827f", "filename": "gcc/testsuite/g++.dg/ext/builtin8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d337a9d06bbc8f367e37debbe69610b04e72f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin8.C?ref=100d337a9d06bbc8f367e37debbe69610b04e72f", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/19628\n+// Verify that __builtin_constant_p may appear in a constant-expression.\n+\n+// { dg-do compile }\n+\n+template <int I>\n+int f(int x[__builtin_constant_p(I)])\n+{\n+  return x[0];\n+}\n+\n+int g()\n+{\n+  int a[1] = { 7 };\n+  return f<32>(a);\n+}"}]}