{"sha": "0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0Y2Y4ODcyYTdmMmU3NGM5OTA1ZjJhZWVmNzViOTE4ZjVjOGQ4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-03-07T20:00:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-03-07T20:00:20Z"}, "message": "cp-tree.h (REF_PARENTHESIZED_P): New.\n\n\t* cp-tree.h (REF_PARENTHESIZED_P): New.\n\t* semantics.c (force_paren_expr): Set it.\n\t* pt.c (do_auto_deduction): Check it.\n\t(tsubst) [COMPONENT_REF]: Copy it.\n\t* typeck.c (maybe_warn_about_useless_cast): Don't strip dereference.\n\nFrom-SVN: r208412", "tree": {"sha": "12b4e7db363291a4574f33cb1200796e8fe4b0f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12b4e7db363291a4574f33cb1200796e8fe4b0f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b75bf8b188f71f129f1b97da93e3246637c384e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75bf8b188f71f129f1b97da93e3246637c384e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75bf8b188f71f129f1b97da93e3246637c384e8"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "f617c622fc14679548a66b1c14d458243a0a2cfc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "patch": "@@ -1,5 +1,11 @@\n 2014-03-07  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (REF_PARENTHESIZED_P): New.\n+\t* semantics.c (force_paren_expr): Set it.\n+\t* pt.c (do_auto_deduction): Check it.\n+\t(tsubst) [COMPONENT_REF]: Copy it.\n+\t* typeck.c (maybe_warn_about_useless_cast): Don't strip dereference.\n+\n \t* decl.c (create_array_type_for_decl): Only warn about invalid\n \tC++1y VLA if flag_iso or warn_vla>0.\n \t(grokdeclarator): Likewise."}, {"sha": "45e4d8217460f02ac02a41dc9f37ceb318284757", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "patch": "@@ -100,6 +100,7 @@ c-common.h, not after.\n       TARGET_EXPR_DIRECT_INIT_P (in TARGET_EXPR)\n       FNDECL_USED_AUTO (in FUNCTION_DECL)\n       DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n+      REF_PARENTHESIZED_P (in COMPONENT_REF, SCOPE_REF)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -3031,6 +3032,12 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define PAREN_STRING_LITERAL_P(NODE) \\\n   TREE_LANG_FLAG_0 (STRING_CST_CHECK (NODE))\n \n+/* Indicates whether a COMPONENT_REF has been parenthesized.  Currently\n+   only set some of the time in C++14 mode.  */\n+\n+#define REF_PARENTHESIZED_P(NODE) \\\n+  TREE_LANG_FLAG_2 (COMPONENT_REF_CHECK (NODE))\n+\n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */\n #define AGGR_INIT_VIA_CTOR_P(NODE) \\"}, {"sha": "d4d54b8984d858bd9079e06e891f539839d9919b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "patch": "@@ -14915,6 +14915,7 @@ tsubst_copy_and_build (tree t,\n \ttree object;\n \ttree object_type;\n \ttree member;\n+\ttree r;\n \n \tobject = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\t     args, complain, in_decl);\n@@ -14999,11 +15000,19 @@ tsubst_copy_and_build (tree t,\n \t    RETURN (error_mark_node);\n \t  }\n \telse if (TREE_CODE (member) == FIELD_DECL)\n-\t  RETURN (finish_non_static_data_member (member, object, NULL_TREE));\n+\t  {\n+\t    r = finish_non_static_data_member (member, object, NULL_TREE);\n+\t    if (TREE_CODE (r) == COMPONENT_REF)\n+\t      REF_PARENTHESIZED_P (r) = REF_PARENTHESIZED_P (t);\n+\t    RETURN (r);\n+\t  }\n \n-\tRETURN (finish_class_member_access_expr (object, member,\n-\t\t\t\t\t\t/*template_p=*/false,\n-\t\t\t\t\t\tcomplain));\n+\tr = finish_class_member_access_expr (object, member,\n+\t\t\t\t\t     /*template_p=*/false,\n+\t\t\t\t\t     complain);\n+\tif (TREE_CODE (r) == COMPONENT_REF)\n+\t  REF_PARENTHESIZED_P (r) = REF_PARENTHESIZED_P (t);\n+\tRETURN (r);\n       }\n \n     case THROW_EXPR:\n@@ -21619,7 +21628,8 @@ do_auto_deduction (tree type, tree init, tree auto_node)\n   targs = make_tree_vec (1);\n   if (AUTO_IS_DECLTYPE (auto_node))\n     {\n-      bool id = (DECL_P (init) || TREE_CODE (init) == COMPONENT_REF);\n+      bool id = (DECL_P (init) || (TREE_CODE (init) == COMPONENT_REF\n+\t\t\t\t   && !REF_PARENTHESIZED_P (init)));\n       TREE_VEC_ELT (targs, 0)\n \t= finish_decltype_type (init, id, tf_warning_or_error);\n       if (type != auto_node)"}, {"sha": "fcd840956572b403e643fb4f057d2bc8abb31dfa", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "patch": "@@ -1605,11 +1605,18 @@ force_paren_expr (tree expr)\n   if (cxx_dialect < cxx1y)\n     return expr;\n \n+  /* If we're in unevaluated context, we can't be deducing a\n+     return/initializer type, so we don't need to mess with this.  */\n+  if (cp_unevaluated_operand)\n+    return expr;\n+\n   if (!DECL_P (expr) && TREE_CODE (expr) != COMPONENT_REF\n       && TREE_CODE (expr) != SCOPE_REF)\n     return expr;\n \n-  if (type_dependent_expression_p (expr))\n+  if (TREE_CODE (expr) == COMPONENT_REF)\n+    REF_PARENTHESIZED_P (expr) = true;\n+  else if (type_dependent_expression_p (expr))\n     expr = build1 (PAREN_EXPR, TREE_TYPE (expr), expr);\n   else\n     {\n@@ -1619,7 +1626,7 @@ force_paren_expr (tree expr)\n \t  tree type = unlowered_expr_type (expr);\n \t  bool rval = !!(kind & clk_rvalueref);\n \t  type = cp_build_reference_type (type, rval);\n-\t  expr = build_static_cast (type, expr, tf_warning_or_error);\n+\t  expr = build_static_cast (type, expr, tf_error);\n \t}\n     }\n "}, {"sha": "d8374d9b0b4efb7194368abcc1e56aef7eae2198", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0e4cf8872a7f2e74c9905f2aeef75b918f5c8d80", "patch": "@@ -6291,7 +6291,10 @@ maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n   if (warn_useless_cast\n       && complain & tf_warning)\n     {\n-      if (REFERENCE_REF_P (expr))\n+      /* In C++14 mode, this interacts badly with force_paren_expr.  And it\n+\t isn't necessary in any mode, because the code below handles\n+\t glvalues properly.  For 4.9, just skip it in C++14 mode.  */\n+      if (cxx_dialect < cxx1y && REFERENCE_REF_P (expr))\n \texpr = TREE_OPERAND (expr, 0);\n \n       if ((TREE_CODE (type) == REFERENCE_TYPE"}]}