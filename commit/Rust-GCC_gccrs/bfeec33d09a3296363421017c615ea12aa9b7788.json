{"sha": "bfeec33d09a3296363421017c615ea12aa9b7788", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlZWMzM2QwOWEzMjk2MzYzNDIxMDE3YzYxNWVhMTJhYTliNzc4OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-16T13:49:27Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-16T13:49:27Z"}, "message": "Remove 3.4 change list, point to gcc-3.4/changes.html\n\nFrom-SVN: r70506", "tree": {"sha": "2efe0f169615081ff4e39f38279fc3a970b8a1db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2efe0f169615081ff4e39f38279fc3a970b8a1db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfeec33d09a3296363421017c615ea12aa9b7788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfeec33d09a3296363421017c615ea12aa9b7788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfeec33d09a3296363421017c615ea12aa9b7788", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfeec33d09a3296363421017c615ea12aa9b7788/comments", "author": null, "committer": null, "parents": [{"sha": "e895113a67a061c20fbb16be60c2d90eb6ba084a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e895113a67a061c20fbb16be60c2d90eb6ba084a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e895113a67a061c20fbb16be60c2d90eb6ba084a"}], "stats": {"total": 89, "additions": 1, "deletions": 88}, "files": [{"sha": "75a5823fc96bb7801897a4c2c1e726dfae52c321", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 1, "deletions": 88, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfeec33d09a3296363421017c615ea12aa9b7788/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfeec33d09a3296363421017c615ea12aa9b7788/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=bfeec33d09a3296363421017c615ea12aa9b7788", "patch": "@@ -1,93 +1,6 @@\n *** Changes in GCC 3.4:\n \n-* The C++ parser in G++ has been rewritten from scratch.  As a result, G++ \n-  is considerably more compliant to the C++ standard.  As a result, it \n-  accepts more valid programs, and rejects more invalid programs.  \n-\n-  Many of the changes below are a consequence of the new parser.\n-\n-* Friend declarations that refer to template specializations are rejected\n-  if the template has not already been declared.\n-\n-  For example:\n-\n-    template <typename T>\n-    class C {\n-      friend void f<>(C&);\n-    };\n-\n-  is rejected; you must first declare `f' as a template:\n-\n-    template <typename T>\n-    void f(T);\n-\n-* You must use \"template <>\" to introduce template specializations, as \n-  required by the standard.  For example:\n-\n-    template <typename T>\n-    struct S;\n-    \n-    struct S<int> { };\n-\n-  is rejected; you must write:\n-\n-    template <> struct S<int> {};\n-\n-* You must now use the `typename' and `template' keywords to disambiguate\n-  dependent names, as required by the C++ standard.\n-\n-* The \"named return value\" extension has been removed.\n-\n-* The \"implicit typename\" extension has been removed.\n-\n-* Default arguments in function types have been deprecated and will be\n-removed.\n-\n-* G++ used to accept code like this:\n-\n-    struct S {\n-      int h();\n-      void f(int i = g());\n-      int g(int i = h());\n-    };\n-\n-  This behavior is not mandated by the standard. \n-\n-  Now G++ issues an error about this code.  To avoid the error, you must\n-  move the declaration of `g' before the declaration of `f'.  The \n-  default arguments for `g' must be visible at the point where it is\n-  called.\n-\n-* When -pedantic is used, G++ now issues errors about spurious semicolons;\n-  for example:\n-\n-    namespace N {}; // Invalid semicolon.\n-    void f() {}; // Invalid semicolon.\n-  \n-* G++ no longer accepts attributes for a declarator after the\n-  initializer associated with that declarator.  For example:\n-\n-    X x(1) __attribute__((...));\n-\n-  is no longer accepted.  Instead, use:\n-\n-    X x __attribute__((...)) (1);\n-\n-* Covariant returns are implemented for all but varadic functions that\n-  require an adjustment.\n-\n-* Inside the scope of a template class, the name of the class itself\n-  is no longer a valid template template argument.  Instead, you now have\n-  to qualify the name by its scope.  For example:\n-\n-    template <template <class> class TT> class X {};\n-    template <class T> class Y {\n-      X<Y> x; // Invalid.\n-    };\n-\n-  The valid code for the above example is:\n-\n-      X< ::Y> x; // Valid.  Note that `<:' is a digraph and means `['.\n+* Changes in GCC 3.4 are described in 'gcc-3.4/changes.html'\n \n *** Changes in GCC 3.3:\n "}]}