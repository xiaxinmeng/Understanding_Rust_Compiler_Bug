{"sha": "ebebc928d8b0d17676e751848892f927373b1fe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlYmM5MjhkOGIwZDE3Njc2ZTc1MTg0ODg5MmY5MjczNzNiMWZlNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-07-04T15:00:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-07-04T15:00:00Z"}, "message": "introduce EH_ELSE_EXPR tree and gimplifier\n\nI found GIMPLE_EH_ELSE offered exactly the semantics I needed for some\nAda changes yet to be contributed, but GIMPLE_EH_ELSE was only built\nby GIMPLE passes, and I needed to build earlier something that\neventually became GIMPLE_EH_ELSE.\n\nThis patch does that, introducing an EH_ELSE_EXPR tree, and logic to\ndump it and to gimplify it.\n\n\nfor  gcc/ChangeLog\n\n\t* doc/generic.texi (Cleanups): Document EH_ELSE_EXPR.\n\t* except.c: Likewise.\n\t* expr.c (expand_expr_real_1): Reject it.\n\t* gimplify.c (gimplify_expr): Gimplify it, within\n\tTRY_FINALLY_EXPR.\n\t* tree-dump.c (dequeue_and_dump): Dump it.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree.c (block_may_fallthru): Handle it.\n\t* tree.def (EH_ELSE_EXPR): Introduce it.\n\t* gimple-pretty-print.c (dump_gimple_try): Dump TRY_FINALLY\n\twith GIMPLE_EH_ELSE as try/finally/else.\n\nFrom-SVN: r273084", "tree": {"sha": "5b00c4867b3d58dc4865627ffab29da1e0baa2d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b00c4867b3d58dc4865627ffab29da1e0baa2d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebebc928d8b0d17676e751848892f927373b1fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebebc928d8b0d17676e751848892f927373b1fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebebc928d8b0d17676e751848892f927373b1fe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebebc928d8b0d17676e751848892f927373b1fe5/comments", "author": null, "committer": null, "parents": [{"sha": "e57c896e86c4257741b574d99d7cacbfda219755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57c896e86c4257741b574d99d7cacbfda219755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57c896e86c4257741b574d99d7cacbfda219755"}], "stats": {"total": 111, "additions": 99, "deletions": 12}, "files": [{"sha": "41b8b14400ae2f98f797daee397889bef7b309e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -1,3 +1,17 @@\n+2019-07-04  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* doc/generic.texi (Cleanups): Document EH_ELSE_EXPR.\n+\t* except.c: Likewise.\n+\t* expr.c (expand_expr_real_1): Reject it.\n+\t* gimplify.c (gimplify_expr): Gimplify it, within\n+\tTRY_FINALLY_EXPR.\n+\t* tree-dump.c (dequeue_and_dump): Dump it.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree.c (block_may_fallthru): Handle it.\n+\t* tree.def (EH_ELSE_EXPR): Introduce it.\n+\t* gimple-pretty-print.c (dump_gimple_try): Dump TRY_FINALLY\n+\twith GIMPLE_EH_ELSE as try/finally/else.\n+\n 2019-07-04  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/91062"}, {"sha": "8901d5f357e2cc98fea02f36a48639155e8f9ba4", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -2180,6 +2180,11 @@ After the second sequence is executed, if it completes normally by\n falling off the end, execution continues wherever the first sequence\n would have continued, by falling off the end, or doing a goto, etc.\n \n+If the second sequence is an @code{EH_ELSE_EXPR} selector, then the\n+sequence in its first operand is used when the first sequence completes\n+normally, and that in its second operand is used for exceptional\n+cleanups, i.e., when an exception propagates out of the first sequence.\n+\n @code{TRY_FINALLY_EXPR} complicates the flow graph, since the cleanup\n needs to appear on every edge out of the controlled block; this\n reduces the freedom to move code across these edges.  Therefore, the"}, {"sha": "29f333912d15ae6f7dd85342675c87f23e68278e", "filename": "gcc/except.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -27,14 +27,14 @@ along with GCC; see the file COPYING3.  If not see\n    the compilation process:\n \n    In the beginning, in the front end, we have the GENERIC trees\n-   TRY_CATCH_EXPR, TRY_FINALLY_EXPR, WITH_CLEANUP_EXPR,\n+   TRY_CATCH_EXPR, TRY_FINALLY_EXPR, EH_ELSE_EXPR, WITH_CLEANUP_EXPR,\n    CLEANUP_POINT_EXPR, CATCH_EXPR, and EH_FILTER_EXPR.\n \n-   During initial gimplification (gimplify.c) these are lowered\n-   to the GIMPLE_TRY, GIMPLE_CATCH, and GIMPLE_EH_FILTER nodes.\n-   The WITH_CLEANUP_EXPR and CLEANUP_POINT_EXPR nodes are converted\n-   into GIMPLE_TRY_FINALLY nodes; the others are a more direct 1-1\n-   conversion.\n+   During initial gimplification (gimplify.c) these are lowered to the\n+   GIMPLE_TRY, GIMPLE_CATCH, GIMPLE_EH_ELSE, and GIMPLE_EH_FILTER\n+   nodes.  The WITH_CLEANUP_EXPR and CLEANUP_POINT_EXPR nodes are\n+   converted into GIMPLE_TRY_FINALLY nodes; the others are a more\n+   direct 1-1 conversion.\n \n    During pass_lower_eh (tree-eh.c) we record the nested structure\n    of the TRY nodes in EH_REGION nodes in CFUN->EH->REGION_TREE."}, {"sha": "c922aaa45b9bc1aa2e5e6e319352616428683faf", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -11292,6 +11292,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n     case CATCH_EXPR:\n     case EH_FILTER_EXPR:\n     case TRY_FINALLY_EXPR:\n+    case EH_ELSE_EXPR:\n       /* Lowered by tree-eh.c.  */\n       gcc_unreachable ();\n "}, {"sha": "ce339eeddac40806b3d2c7d5d6c4b5e3bf35b104", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -1232,6 +1232,8 @@ dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc,\n       newline_and_indent (buffer, spc + 2);\n       pp_right_brace (buffer);\n \n+      gimple_seq seq = gimple_try_cleanup (gs);\n+\n       if (gimple_try_kind (gs) == GIMPLE_TRY_CATCH)\n \t{\n \t  newline_and_indent (buffer, spc);\n@@ -1245,12 +1247,28 @@ dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc,\n \t  pp_string (buffer, \"finally\");\n \t  newline_and_indent (buffer, spc + 2);\n \t  pp_left_brace (buffer);\n+\n+\t  if (seq && is_a <geh_else *> (gimple_seq_first_stmt (seq))\n+\t      && gimple_seq_nondebug_singleton_p (seq))\n+\t    {\n+\t      geh_else *stmt = as_a <geh_else *> (gimple_seq_first_stmt (seq));\n+\t      seq = gimple_eh_else_n_body (stmt);\n+\t      pp_newline (buffer);\n+\t      dump_gimple_seq (buffer, seq, spc + 4, flags);\n+\t      newline_and_indent (buffer, spc + 2);\n+\t      pp_right_brace (buffer);\n+\t      seq = gimple_eh_else_e_body (stmt);\n+\t      newline_and_indent (buffer, spc);\n+\t      pp_string (buffer, \"else\");\n+\t      newline_and_indent (buffer, spc + 2);\n+\t      pp_left_brace (buffer);\n+\t    }\n \t}\n       else\n \tpp_string (buffer, \" <UNKNOWN GIMPLE_TRY> {\");\n \n       pp_newline (buffer);\n-      dump_gimple_seq (buffer, gimple_try_cleanup (gs), spc + 4, flags);\n+      dump_gimple_seq (buffer, seq, spc + 4, flags);\n       newline_and_indent (buffer, spc + 2);\n       pp_right_brace (buffer);\n     }"}, {"sha": "a3792d16742ecb2389229a07b341697bfa81736d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -13079,7 +13079,22 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    input_location = UNKNOWN_LOCATION;\n \t    eval = cleanup = NULL;\n \t    gimplify_and_add (TREE_OPERAND (*expr_p, 0), &eval);\n-\t    gimplify_and_add (TREE_OPERAND (*expr_p, 1), &cleanup);\n+\t    if (TREE_CODE (*expr_p) == TRY_FINALLY_EXPR\n+\t\t&& TREE_CODE (TREE_OPERAND (*expr_p, 1)) == EH_ELSE_EXPR)\n+\t      {\n+\t\tgimple_seq n = NULL, e = NULL;\n+\t\tgimplify_and_add (TREE_OPERAND (TREE_OPERAND (*expr_p, 1),\n+\t\t\t\t\t\t0), &n);\n+\t\tgimplify_and_add (TREE_OPERAND (TREE_OPERAND (*expr_p, 1),\n+\t\t\t\t\t\t1), &e);\n+\t\tif (!gimple_seq_empty_p (n) && !gimple_seq_empty_p (e))\n+\t\t  {\n+\t\t    geh_else *stmt = gimple_build_eh_else (n, e);\n+\t\t    gimple_seq_add_stmt (&cleanup, stmt);\n+\t\t  }\n+\t      }\n+\t    else\n+\t      gimplify_and_add (TREE_OPERAND (*expr_p, 1), &cleanup);\n \t    /* Don't create bogus GIMPLE_TRY with empty cleanup.  */\n \t    if (gimple_seq_empty_p (cleanup))\n \t      {\n@@ -13637,6 +13652,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  && code != LOOP_EXPR\n \t\t  && code != SWITCH_EXPR\n \t\t  && code != TRY_FINALLY_EXPR\n+\t\t  && code != EH_ELSE_EXPR\n \t\t  && code != OACC_PARALLEL\n \t\t  && code != OACC_KERNELS\n \t\t  && code != OACC_DATA"}, {"sha": "51c0965861f81a720c23dfc0495a0b742e42f613", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -604,6 +604,7 @@ dequeue_and_dump (dump_info_p di)\n       break;\n \n     case TRY_FINALLY_EXPR:\n+    case EH_ELSE_EXPR:\n       dump_child (\"op 0\", TREE_OPERAND (t, 0));\n       dump_child (\"op 1\", TREE_OPERAND (t, 1));\n       break;"}, {"sha": "742c2840cd530551af26fd4345317f22d7787aee", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -2815,12 +2815,34 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       newline_and_indent (pp, spc+2);\n       pp_right_brace (pp);\n       newline_and_indent (pp, spc);\n-      pp_string (pp,\n-\t\t\t (TREE_CODE (node) == TRY_CATCH_EXPR) ? \"catch\" : \"finally\");\n+      if (TREE_CODE (node) == TRY_CATCH_EXPR)\n+\t{\n+\t  node = TREE_OPERAND (node, 1);\n+\t  pp_string (pp, \"catch\");\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (TREE_CODE (node) == TRY_FINALLY_EXPR);\n+\t  node = TREE_OPERAND (node, 1);\n+\t  pp_string (pp, \"finally\");\n+\t  if (TREE_CODE (node) == EH_ELSE_EXPR)\n+\t    {\n+\t      newline_and_indent (pp, spc+2);\n+\t      pp_left_brace (pp);\n+\t      newline_and_indent (pp, spc+4);\n+\t      dump_generic_node (pp, TREE_OPERAND (node, 0), spc+4,\n+\t\t\t\t flags, true);\n+\t      newline_and_indent (pp, spc+2);\n+\t      pp_right_brace (pp);\n+\t      newline_and_indent (pp, spc);\n+\t      node = TREE_OPERAND (node, 1);\n+\t      pp_string (pp, \"else\");\n+\t    }\n+\t}\n       newline_and_indent (pp, spc+2);\n       pp_left_brace (pp);\n       newline_and_indent (pp, spc+4);\n-      dump_generic_node (pp, TREE_OPERAND (node, 1), spc+4, flags, true);\n+      dump_generic_node (pp, node, spc+4, flags, true);\n       newline_and_indent (pp, spc+2);\n       pp_right_brace (pp);\n       is_expr = false;"}, {"sha": "563af6fbdda66d92be47bc9a8efa3b5e0cb8e7c1", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -13415,6 +13415,9 @@ block_may_fallthru (const_tree block)\n       return (block_may_fallthru (TREE_OPERAND (stmt, 0))\n \t      && block_may_fallthru (TREE_OPERAND (stmt, 1)));\n \n+    case EH_ELSE_EXPR:\n+      return block_may_fallthru (TREE_OPERAND (stmt, 0));\n+\n     case MODIFY_EXPR:\n       if (TREE_CODE (TREE_OPERAND (stmt, 1)) == CALL_EXPR)\n \tstmt = TREE_OPERAND (stmt, 1);"}, {"sha": "d2e693892cd6792a55e4b6dd1d1e1176d35c87be", "filename": "gcc/tree.def", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebebc928d8b0d17676e751848892f927373b1fe5/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=ebebc928d8b0d17676e751848892f927373b1fe5", "patch": "@@ -908,7 +908,14 @@ DEFTREECODE (TRY_CATCH_EXPR, \"try_catch_expr\", tcc_statement, 2)\n /* Evaluate the first operand.\n    The second operand is a cleanup expression which is evaluated\n    on any exit (normal, exception, or jump out) from this expression.  */\n-DEFTREECODE (TRY_FINALLY_EXPR, \"try_finally\", tcc_statement, 2)\n+DEFTREECODE (TRY_FINALLY_EXPR, \"try_finally_expr\", tcc_statement, 2)\n+\n+/* Evaluate either the normal or the exceptional cleanup.  This must\n+   only be present as the cleanup expression in a TRY_FINALLY_EXPR.\n+   If the TRY_FINALLY_EXPR completes normally, the first operand of\n+   EH_ELSE_EXPR is used as a cleanup, otherwise the second operand is\n+   used.  */\n+DEFTREECODE (EH_ELSE_EXPR, \"eh_else_expr\", tcc_statement, 2)\n \f\n /* These types of expressions have no useful value,\n    and always have side effects.  */"}]}