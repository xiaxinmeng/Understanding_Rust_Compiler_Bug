{"sha": "9bae89924afc811bd10e249856bf78dd19f20df2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhZTg5OTI0YWZjODExYmQxMGUyNDk4NTZiZjc4ZGQxOWYyMGRmMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-11-05T13:31:02Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-11-05T13:31:02Z"}, "message": "IBM Z: gen-vect-26/28: Vectorizing without peeling is ok for Z\n\nThese tests check if loop peeling has been applied to avoid\nhaving to vectorize unaligned loops.  On Z we do not have any\nalignment requirements for vectorization so we also don't need want\nthe loop peeling here.\n\n2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.dg/tree-ssa/gen-vect-26.c: Disable loop peeling check for\n\tIBM Z.\n\t* gcc.dg/tree-ssa/gen-vect-28.c: Likewise.\n\nFrom-SVN: r277833", "tree": {"sha": "7947a866fd1bf448847341b7fa295818af42060b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7947a866fd1bf448847341b7fa295818af42060b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bae89924afc811bd10e249856bf78dd19f20df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bae89924afc811bd10e249856bf78dd19f20df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bae89924afc811bd10e249856bf78dd19f20df2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bae89924afc811bd10e249856bf78dd19f20df2/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c265dfbf748e9fc3006a0f844294ef2cea145d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c265dfbf748e9fc3006a0f844294ef2cea145d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c265dfbf748e9fc3006a0f844294ef2cea145d71"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "5a1eacdc0b18221e5b77dc0c92912bd3cc9f8ba4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bae89924afc811bd10e249856bf78dd19f20df2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bae89924afc811bd10e249856bf78dd19f20df2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bae89924afc811bd10e249856bf78dd19f20df2", "patch": "@@ -1,3 +1,9 @@\n+2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/gen-vect-26.c: Disable loop peeling check for\n+\tIBM Z.\n+\t* gcc.dg/tree-ssa/gen-vect-28.c: Likewise.\n+\n 2019-11-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.dg/tree-ssa/gen-vect-11.c: Add --param min-vect-loop-bound=0"}, {"sha": "6f3c2b7d88aaff60b4520a12a080bbea8bd36703", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-26.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bae89924afc811bd10e249856bf78dd19f20df2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bae89924afc811bd10e249856bf78dd19f20df2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c?ref=9bae89924afc811bd10e249856bf78dd19f20df2", "patch": "@@ -30,5 +30,6 @@ int main ()\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* IBM Z does not require special alignment for vectorization.  */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! { avr-*-* s390*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { ! { avr-*-* s390*-*-* } } } } } */"}, {"sha": "7b26bbdc70ca3403251dca9af78fbb15a224e296", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-28.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bae89924afc811bd10e249856bf78dd19f20df2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bae89924afc811bd10e249856bf78dd19f20df2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c?ref=9bae89924afc811bd10e249856bf78dd19f20df2", "patch": "@@ -38,5 +38,6 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* IBM Z does not require special alignment for vectorization.  */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! { avr-*-* s390*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { ! { avr-*-* s390*-*-* } } } } } */"}]}