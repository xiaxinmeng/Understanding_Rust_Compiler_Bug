{"sha": "5114f3ff9a90572c042601ce8b4164cdd8561e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExNGYzZmY5YTkwNTcyYzA0MjYwMWNlOGI0MTY0Y2RkODU2MWUxZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:32:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:32:09Z"}, "message": "[multiple changes]\n\n2013-10-17  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch8.adb (Find_Direct_Name): Keep track of assignments for\n\trenamings in SPARK mode.\n\n2013-10-17  Yannick Moy  <moy@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK): Remove special case for NOT IN\n\toperation.\n\t* sinfo.ads: Add special comment section to describe SPARK mode\n\teffect on tree.\n\t* exp_spark.ads: Remove comments, moved to sinfo.ads.\n\n2013-10-17  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type,\n\tExpand_Freeze_Class_Wide_Type, Expand_Freeze_Class_Wide_Type):\n\tRemove useless special cases.\n\t* exp_ch4.adb (Expand_Allocator_Expression, Expand_N_Allocator,\n\tExpand_N_Op_Expon): Remove useless special cases.\n\t* exp_ch6.adb (Is_Build_In_Place_Function_Call): Disable build-in-place\n\tin SPARK mode by testing Full_Expander_Active instead of\n\tExpander_Active.\n\t(Make_Build_In_Place_Call_In_Allocator): Remove useless special case.\n\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Remove\n\tuseless special case.\n\t* sem_eval.adb (Compile_Time_Known_Value): Remove special handling of\n\tdeferred constant.\n\n2013-10-17  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_ugn.texi: Document -gnateT and target file format.\n\n2013-10-17  Vincent Celier  <celier@adacore.com>\n\n\t* prep.adb (Check_Command_Line_Symbol_Definition): Is_A_String is\n\talways False, even when the value starts and ends with double quotes.\n\nFrom-SVN: r203747", "tree": {"sha": "56b471b884b85fa68166f8c2e627e95dec6bb904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56b471b884b85fa68166f8c2e627e95dec6bb904"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5114f3ff9a90572c042601ce8b4164cdd8561e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5114f3ff9a90572c042601ce8b4164cdd8561e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5114f3ff9a90572c042601ce8b4164cdd8561e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5114f3ff9a90572c042601ce8b4164cdd8561e1d/comments", "author": null, "committer": null, "parents": [{"sha": "13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2"}], "stats": {"total": 359, "additions": 224, "deletions": 135}, "files": [{"sha": "f7e351b801619cd329a445f6b67e8716b23a4829", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -1,3 +1,41 @@\n+2013-10-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Direct_Name): Keep track of assignments for\n+\trenamings in SPARK mode.\n+\n+2013-10-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK): Remove special case for NOT IN\n+\toperation.\n+\t* sinfo.ads: Add special comment section to describe SPARK mode\n+\teffect on tree.\n+\t* exp_spark.ads: Remove comments, moved to sinfo.ads.\n+\n+2013-10-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type,\n+\tExpand_Freeze_Class_Wide_Type, Expand_Freeze_Class_Wide_Type):\n+\tRemove useless special cases.\n+\t* exp_ch4.adb (Expand_Allocator_Expression, Expand_N_Allocator,\n+\tExpand_N_Op_Expon): Remove useless special cases.\n+\t* exp_ch6.adb (Is_Build_In_Place_Function_Call): Disable build-in-place\n+\tin SPARK mode by testing Full_Expander_Active instead of\n+\tExpander_Active.\n+\t(Make_Build_In_Place_Call_In_Allocator): Remove useless special case.\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Remove\n+\tuseless special case.\n+\t* sem_eval.adb (Compile_Time_Known_Value): Remove special handling of\n+\tdeferred constant.\n+\n+2013-10-17  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_ugn.texi: Document -gnateT and target file format.\n+\n+2013-10-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* prep.adb (Check_Command_Line_Symbol_Definition): Is_A_String is\n+\talways False, even when the value starts and ends with double quotes.\n+\n 2013-10-17  Tristan Gingold  <gingold@adacore.com>\n \n \t* a-exexpr-gcc.adb: Synchronize declarations of other/all others."}, {"sha": "e7d0cb0ac219222b518f1d15276451dc9a3f17e3", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -6151,12 +6151,6 @@ package body Exp_Ch3 is\n \n       elsif CodePeer_Mode then\n          return;\n-\n-      --  Do not create TSS routine Finalize_Address when compiling in SPARK\n-      --  mode because it is not necessary and results in useless expansion.\n-\n-      elsif SPARK_Mode then\n-         return;\n       end if;\n \n       --  Create the body of TSS primitive Finalize_Address. This automatically\n@@ -6903,13 +6897,9 @@ package body Exp_Ch3 is\n             --  be done before the bodies of all predefined primitives are\n             --  created. If Def_Id is limited, Stream_Input and Stream_Read\n             --  may produce build-in-place allocations and for those the\n-            --  expander needs Finalize_Address. Do not create the body of\n-            --  Finalize_Address in SPARK mode since it is not needed.\n-\n-            if not SPARK_Mode then\n-               Make_Finalize_Address_Body (Def_Id);\n-            end if;\n+            --  expander needs Finalize_Address.\n \n+            Make_Finalize_Address_Body (Def_Id);\n             Predef_List := Predefined_Primitive_Bodies (Def_Id, Renamed_Eq);\n             Append_Freeze_Actions (Def_Id, Predef_List);\n          end if;"}, {"sha": "8df4576e1ef9161027541c5344f2cf98b1ffc1fb", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -1268,14 +1268,10 @@ package body Exp_Ch4 is\n             --    * .NET/JVM - these targets do not support address arithmetic\n             --    and unchecked conversion, key elements of Finalize_Address.\n \n-            --    * SPARK mode - the call is useless and results in unwanted\n-            --    expansion.\n-\n             --    * CodePeer mode - TSS primitive Finalize_Address is not\n             --    created in this mode.\n \n             if VM_Target = No_VM\n-              and then not SPARK_Mode\n               and then not CodePeer_Mode\n               and then Present (Finalization_Master (PtrT))\n               and then Present (Temp_Decl)\n@@ -4295,16 +4291,13 @@ package body Exp_Ch4 is\n          end if;\n \n          --  The finalization master must be inserted and analyzed as part of\n-         --  the current semantic unit. This form of expansion is not carried\n-         --  out in SPARK mode because it is useless. Note that the master is\n-         --  updated when analysis changes current units.\n+         --  the current semantic unit. Note that the master is updated when\n+         --  analysis changes current units.\n \n-         if not SPARK_Mode then\n-            if Present (Rel_Typ) then\n-               Set_Finalization_Master (PtrT, Finalization_Master (Rel_Typ));\n-            else\n-               Set_Finalization_Master (PtrT, Current_Anonymous_Master);\n-            end if;\n+         if Present (Rel_Typ) then\n+            Set_Finalization_Master (PtrT, Finalization_Master (Rel_Typ));\n+         else\n+            Set_Finalization_Master (PtrT, Current_Anonymous_Master);\n          end if;\n       end if;\n \n@@ -4839,15 +4832,11 @@ package body Exp_Ch4 is\n                      --    Set_Finalize_Address\n                      --      (<PtrT>FM, <T>FD'Unrestricted_Access);\n \n-                     --  Do not generate this call in the following cases:\n-                     --\n-                     --    * SPARK mode - the call is useless and results in\n-                     --    unwanted expansion.\n-                     --\n-                     --    * CodePeer mode - TSS primitive Finalize_Address is\n-                     --    not created in this mode.\n+                     --  Do not generate this call in CodePeer mode, as TSS\n+                     --  primitive Finalize_Address is not created in this\n+                     --  mode.\n \n-                     elsif not (SPARK_Mode or CodePeer_Mode) then\n+                     elsif not CodePeer_Mode then\n                         Insert_Action (N,\n                           Make_Set_Finalize_Address_Call\n                             (Loc     => Loc,\n@@ -7321,9 +7310,9 @@ package body Exp_Ch4 is\n    begin\n       Binary_Op_Validity_Checks (N);\n \n-      --  CodePeer and GNATprove want to see the unexpanded N_Op_Expon node\n+      --  CodePeer wants to see the unexpanded N_Op_Expon node\n \n-      if CodePeer_Mode or SPARK_Mode then\n+      if CodePeer_Mode then\n          return;\n       end if;\n "}, {"sha": "542126773a32be27407b8427bd9495b70624aa9a", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -9599,7 +9599,11 @@ package body Exp_Ch6 is\n       --  disabled (such as with -gnatc) since those would trip over the raise\n       --  of Program_Error below.\n \n-      if not Expander_Active then\n+      --  In SPARK mode, build-in-place calls are not expanded, so that we\n+      --  may end up with a call that is neither resolved to an entity, nor\n+      --  an indirect call.\n+\n+      if not Full_Expander_Active then\n          return False;\n       end if;\n \n@@ -9616,14 +9620,7 @@ package body Exp_Ch6 is\n          return False;\n \n       else\n-         --  In SPARK mode, build-in-place calls are not expanded, so that we\n-         --  may end up with a call that is neither resolved to an entity, nor\n-         --  an indirect call.\n-\n-         if SPARK_Mode then\n-            return False;\n-\n-         elsif Is_Entity_Name (Name (Exp_Node)) then\n+         if Is_Entity_Name (Name (Exp_Node)) then\n             Function_Id := Entity (Name (Exp_Node));\n \n          --  In the case of an explicitly dereferenced call, use the subprogram\n@@ -10092,14 +10089,10 @@ package body Exp_Ch6 is\n          then\n             null;\n \n-         --  Do not generate the call to Set_Finalize_Address in SPARK mode\n-         --  because it is not necessary and results in unwanted expansion.\n-         --  This expansion is also not carried out in CodePeer mode because\n-         --  Finalize_Address is never built.\n+         --  Do not generate the call to Set_Finalize_Address in CodePeer mode\n+         --  because Finalize_Address is never built.\n \n-         elsif not SPARK_Mode\n-           and then not CodePeer_Mode\n-         then\n+         elsif not CodePeer_Mode then\n             Insert_Action (Allocator,\n               Make_Set_Finalize_Address_Call (Loc,\n                 Typ     => Etype (Function_Id),"}, {"sha": "a4415e837e721e6e343cf6815d7e18679a24d10c", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -25,7 +25,6 @@\n \n with Atree;    use Atree;\n with Einfo;    use Einfo;\n-with Exp_Ch4;  use Exp_Ch4;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n with Sem_Aux;  use Sem_Aux;\n@@ -80,12 +79,6 @@ package body Exp_SPARK is\n               N_Identifier    =>\n             Expand_Potential_Renaming (N);\n \n-         --  A NOT IN B gets transformed to NOT (A IN B). This is the same\n-         --  expansion used in the normal case, so shared the code.\n-\n-         when N_Not_In =>\n-            Expand_N_Not_In (N);\n-\n          when N_Object_Renaming_Declaration =>\n             Expand_SPARK_N_Object_Renaming_Declaration (N);\n "}, {"sha": "c422bc73e521e5cda3dbdfdef90bc5bb3881623e", "filename": "gcc/ada/exp_spark.ads", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.ads?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -30,54 +30,6 @@\n \n --  Expand_SPARK is called directly by Expander.Expand.\n \n---  SPARK expansion has three main objectives:\n-\n---    1. Perform limited expansion to explicit some Ada rules and constructs\n---       (translate 'Old and 'Result, replace renamings by renamed, insert\n---        conversions, expand actuals in calls to introduce temporaries, expand\n---        generics instantiations)\n-\n---    2. Facilitate treatment for the formal verification back-end (fully\n---       qualify names, expand set membership, compute data dependences)\n-\n---    3. Avoid the introduction of low-level code that is difficult to analyze\n---       formally, as typically done in the full expansion for high-level\n---       constructs (tasking, dispatching)\n-\n---  To fulfill objective 1, Expand_SPARK selectively expands some constructs.\n-\n---  To fulfill objective 2, the tree after SPARK expansion should be fully\n---  analyzed semantically. In particular, all expression must have their proper\n---  type, and semantic links should be set between tree nodes (partial to full\n---  view, etc.) Some kinds of nodes should be either absent, or can be ignored\n---  by the formal verification backend:\n-\n---      N_Object_Renaming_Declaration: can be ignored safely\n---      N_Expression_Function:         absent (rewitten)\n---      N_Expression_With_Actions:     absent (not generated)\n-\n---  SPARK cross-references are generated from the regular cross-references\n---  (used for browsing and code understanding) and additional references\n---  collected during semantic analysis, in particular on all\n---  dereferences. These SPARK cross-references are output in a separate section\n---  of ALI files, as described in spark_xrefs.adb. They are the basis for the\n---  computation of data dependences in the formal verification backend. This\n---  implies that all cross-references should be generated in this mode, even\n---  those that would not make sense from a user point-of-view, and that\n---  cross-references that do not lead to data dependences for subprograms can\n---  be safely ignored.\n-\n---  To support the formal verification of units parameterized by data, the\n---  value of deferred constants should not be considered as a compile-time\n---  constant at program locations where the full view is not visible.\n-\n---  To fulfill objective 3, Expand_SPARK does not expand features that are not\n---  formally analyzed (tasking), or for which formal analysis relies on the\n---  source level representation (dispatching, aspects, pragmas). However, these\n---  should be semantically analyzed, which sometimes requires the insertion of\n---  semantic pre-analysis, for example for subprogram contracts and pragma\n---  check/assert.\n-\n with Types; use Types;\n \n package Exp_SPARK is"}, {"sha": "1d8df6b2c66b8beeacede106f30f6e92a030c6e4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -560,13 +560,6 @@ package body Exp_Util is\n    --  Start of processing for Build_Allocate_Deallocate_Proc\n \n    begin\n-      --  Do not perform this expansion in SPARK mode because it is not\n-      --  necessary.\n-\n-      if SPARK_Mode then\n-         return;\n-      end if;\n-\n       --  Obtain the attributes of the allocation / deallocation\n \n       if Nkind (N) = N_Free_Statement then"}, {"sha": "1920c40b989efcbdec99d656bad9985f1e42e480", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 106, "deletions": 3, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -3825,9 +3825,112 @@ temporary use of special test software.\n @cindex @option{-gnateS} (@command{gcc})\n Synonym of @option{-fdump-scos}, kept for backards compatibility.\n \n-@item ^-gnatet^/TARGET_DEPENDENT_INFO^\n-@cindex @option{-gnatet} (@command{gcc})\n-Generate target dependent information.\n+@item ^-gnatet^/TARGET_DEPENDENT_INFO^=@var{path}\n+@cindex @option{-gnatet=file} (@command{gcc})\n+Generate target dependent information. The format of the output file is\n+described in the section about switch @option{-gnateT}.\n+\n+@item ^-gnateT^/TARGET_DEPENDENT_INFO^=@var{path}\n+@cindex @option{-gnateT} (@command{gcc})\n+Read target dependent information, such as endianness or sizes and alignments\n+of base type. If this switch is passed, the default target dependent\n+information of the compiler is replaced by the one read from the input file.\n+This is used by tools other than the compiler, e.g. to do\n+semantic analysis of programs that will run on some other target than\n+the machine on which the tool is run.\n+\n+The following target dependent values should be defined,\n+where @code{Nat} denotes a natural integer value, @code{Pos} denotes a\n+positive integer value, and fields marked with a question mark are\n+boolean fields, where a value of 0 is False, and a value of 1 is True:\n+\n+@smallexample\n+Bits_BE                    : Nat; -- Bits stored big-endian?\n+Bits_Per_Unit              : Pos; -- Bits in a storage unit\n+Bits_Per_Word              : Pos; -- Bits in a word\n+Bytes_BE                   : Nat; -- Bytes stored big-endian?\n+Char_Size                  : Pos; -- Standard.Character'Size\n+Double_Float_Alignment     : Nat; -- Alignment of double float\n+Double_Scalar_Alignment    : Nat; -- Alignment of double length scalar\n+Double_Size                : Pos; -- Standard.Long_Float'Size\n+Float_Size                 : Pos; -- Standard.Float'Size\n+Float_Words_BE             : Nat; -- Float words stored big-endian?\n+Int_Size                   : Pos; -- Standard.Integer'Size\n+Long_Double_Size           : Pos; -- Standard.Long_Long_Float'Size\n+Long_Long_Size             : Pos; -- Standard.Long_Long_Integer'Size\n+Long_Size                  : Pos; -- Standard.Long_Integer'Size\n+Maximum_Alignment          : Pos; -- Maximum permitted alignment\n+Max_Unaligned_Field        : Pos; -- Maximum size for unaligned bit field\n+Pointer_Size               : Pos; -- System.Address'Size\n+Short_Size                 : Pos; -- Standard.Short_Integer'Size\n+Strict_Alignment           : Nat; -- Strict alignment?\n+System_Allocator_Alignment : Nat; -- Alignment for malloc calls\n+Wchar_T_Size               : Pos; -- Interfaces.C.wchar_t'Size\n+Words_BE                   : Nat; -- Words stored big-endian?\n+@end smallexample\n+\n+The format of the input file is as follows. First come the values of\n+the variables defined above, with one line per value:\n+\n+@smallexample\n+name  value\n+@end smallexample\n+\n+where @code{name} is the name of the parameter, spelled out in full,\n+and cased as in the above list, and @code{value} is an unsigned decimal\n+integer. Two or more blanks separates the name from the value.\n+\n+All the variables must be present, in alphabetical order (i.e. the\n+same order as the list above).\n+\n+Then there is a blank line to separate the two parts of the file. Then\n+come the lines showing the floating-point types to be registered, with\n+one line per registered mode:\n+\n+@smallexample\n+name  digs float_rep size alignment\n+@end smallexample\n+\n+where @code{name} is the string name of the type (which can have\n+single spaces embedded in the name (e.g. long double), @code{digs} is\n+the number of digits for the floating-point type, @code{float_rep} is\n+the float representation (I/V/A for IEEE-754-Binary, Vax_Native,\n+AAMP), @code{size} is the size in bits, @code{alignment} is the\n+alignment in bits. The name is followed by at least two blanks, fields\n+are separated by at least one blank, and a LF character immediately\n+follows the alignment field.\n+\n+Here is an example of target parametrization file:\n+\n+@smallexample\n+Bits_BE                       0\n+Bits_Per_Unit                 8\n+Bits_Per_Word                64\n+Bytes_BE                      0\n+Char_Size                     8\n+Double_Float_Alignment        0\n+Double_Scalar_Alignment       0\n+Double_Size                  64\n+Float_Size                   32\n+Float_Words_BE                0\n+Int_Size                     64\n+Long_Double_Size            128\n+Long_Long_Size               64\n+Long_Size                    64\n+Maximum_Alignment            16\n+Max_Unaligned_Field          64\n+Pointer_Size                 64\n+Short_Size                   16\n+Strict_Alignment              0\n+System_Allocator_Alignment   16\n+Wchar_T_Size                 32\n+Words_BE                      0\n+\n+float         15  I  64  64\n+double        15  I  64  64\n+long double   18  I  80 128\n+TF            33  I 128 128\n+@end smallexample\n \n @item -gnateu\n @cindex @option{-gnateu} (@command{gcc})"}, {"sha": "7a5565d6b6da7bd3a1c1a890c46a99082b9e952f", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -268,14 +268,9 @@ package body Prep is\n \n          --  Check the syntax of the value\n \n-         if Definition (Index + 1) = '\"'\n-           and then Definition (Definition'Last) = '\"'\n+         if Definition (Index + 1) /= '\"'\n+           or else Definition (Definition'Last) /= '\"'\n          then\n-            Result.Is_A_String := True;\n-\n-         else\n-            Result.Is_A_String := False;\n-\n             for J in Index + 1 .. Definition'Last loop\n                case Definition (J) is\n                   when '_' | '.' | '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' =>\n@@ -291,6 +286,11 @@ package body Prep is\n \n          --  And put the value in the result\n \n+         Result.Is_A_String := False;\n+         --  Even if the value is a string, we still set Is_A_String to False,\n+         --  to avoid adding additional quotes in the preprocessed sources when\n+         --  replacing $<symbol>.\n+\n          Start_String;\n          Store_String_Chars (Definition (Index + 1 .. Definition'Last));\n          Result.Value := End_String;"}, {"sha": "c82f6491a00f65c7f5af69962ff26a7f45cc7b63", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -5073,9 +5073,14 @@ package body Sem_Ch8 is\n             --  Entity is unambiguous, indicate that it is referenced here\n \n             --  For a renaming of an object, always generate simple reference,\n-            --  we don't try to keep track of assignments in this case.\n+            --  we don't try to keep track of assignments in this case, except\n+            --  in SPARK mode where renamings are traversed for generating\n+            --  local effects of subprograms.\n \n-            if Is_Object (E) and then Present (Renamed_Object (E)) then\n+            if Is_Object (E)\n+              and then Present (Renamed_Object (E))\n+              and then not SPARK_Mode\n+            then\n                Generate_Reference (E, N);\n \n                --  If the renamed entity is a private protected component,"}, {"sha": "99b6e775218b38f753726967da0ddc441ea5081d", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -1353,16 +1353,7 @@ package body Sem_Eval is\n             if Ekind (E) = E_Enumeration_Literal then\n                return True;\n \n-            --  In SPARK mode, the value of deferred constants should be\n-            --  ignored outside the scope of their full view. This allows\n-            --  parameterized formal verification, in which a deferred constant\n-            --  value if not known from client units.\n-\n-            elsif Ekind (E) = E_Constant\n-              and then not (SPARK_Mode\n-                             and then Present (Full_View (E))\n-                             and then not In_Open_Scopes (Scope (E)))\n-            then\n+            elsif Ekind (E) = E_Constant then\n                V := Constant_Value (E);\n                return Present (V) and then Compile_Time_Known_Value (V);\n             end if;"}, {"sha": "a54ef6afa8800da1f9b767e8a43b524c7f10590a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5114f3ff9a90572c042601ce8b4164cdd8561e1d/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=5114f3ff9a90572c042601ce8b4164cdd8561e1d", "patch": "@@ -508,6 +508,48 @@ package Sinfo is\n    --      simply ignore these nodes, since they are not relevant to the task\n    --      of back annotating representation information.\n \n+   ----------------\n+   -- SPARK Mode --\n+   ----------------\n+\n+   --  When a file is compiled in SPARK mode (-gnatd.F), a very light expansion\n+   --  is performed and the analysis must generate a tree in a form that meets\n+   --  additional requirements.\n+\n+   --  The SPARK expansion does two transformations of the tree, that cannot be\n+   --  postponed after the frontend semantic analysis:\n+\n+   --    1. Replace renamings by renamed (object/subprogram). This requires\n+   --       introducing temporaries at the point of the renaming, which must be\n+   --       properly analyzed.\n+\n+   --    2. Fully qualify entity names. This is needed to generate suitable\n+   --       local effects/call-graphs in ALI files, with the completely\n+   --       qualified names (in particular the suffix to distinguish homonyms).\n+\n+   --  The tree after SPARK expansion should be fully analyzed semantically,\n+   --  which sometimes requires the insertion of semantic pre-analysis, for\n+   --  example for subprogram contracts and pragma check/assert. In particular,\n+   --  all expression must have their proper type, and semantic links should be\n+   --  set between tree nodes (partial to full view, etc.) Some kinds of nodes\n+   --  should be either absent, or can be ignored by the formal verification\n+   --  backend:\n+\n+   --      N_Object_Renaming_Declaration: can be ignored safely\n+   --      N_Expression_Function:         absent (rewitten)\n+   --      N_Expression_With_Actions:     absent (not generated)\n+\n+   --  SPARK cross-references are generated from the regular cross-references\n+   --  (used for browsing and code understanding) and additional references\n+   --  collected during semantic analysis, in particular on all dereferences.\n+   --  These SPARK cross-references are output in a separate section of ALI\n+   --  files, as described in spark_xrefs.adb. They are the basis for the\n+   --  computation of data dependences in the formal verification backend.\n+   --  This implies that all cross-references should be generated in this mode,\n+   --  even those that would not make sense from a user point-of-view, and that\n+   --  cross-references that do not lead to data dependences for subprograms\n+   --  can be safely ignored.\n+\n    ------------------------\n    -- Common Flag Fields --\n    ------------------------"}]}