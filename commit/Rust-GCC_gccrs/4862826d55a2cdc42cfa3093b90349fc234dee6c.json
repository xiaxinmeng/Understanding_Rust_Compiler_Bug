{"sha": "4862826d55a2cdc42cfa3093b90349fc234dee6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2MjgyNmQ1NWEyY2RjNDJjZmEzMDkzYjkwMzQ5ZmMyMzRkZWU2Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-08-11T17:21:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-08-11T17:21:56Z"}, "message": "alias.h (alias_set_type): Define new type.\n\n./:\t* alias.h (alias_set_type): Define new type.\n\t(ALIAS_SET_MEMORY_BARRIER): Use it.\n\t* rtl.h: Include alias.h.\n\t(struct mem_attrs): Use alias_set_type.\n\t* tree.h: Include alias.h\n\t(struct tree_type): Use alias_set_type.\n\t(struct tree_struct_field_tag): Likewise.\n\t(struct tree_decl_common): Likewise.\n\t* alias.c (struct alias_set_entry): Use alias_set_type.\n\t(get_alias_set_entry, alias_set_subset_of): Likewise.\n\t(alias_sets_conflict_p): Likewise.\n\t(alias_sets_must_conflict_p): Likewise.\n\t(objects_must_conflict_p): Likewise.\n\t(get_alias_set, new_alias_set): Likewise.\n\t(record_alias_subset, record_component_aliases): Likewise.\n\t(varargs_set, frame_set): Change to alias_set_type.\n\t(get_varargs_alias_set): Use alias_set_type.\n\t(get_frame_alias_set): Likewise.\n\t* builtins.c (setjmp_alias_set): Change to alias_set_type.\n\t* dse.c (struct store_info): Use alias_set_type.\n\t(struct read_info, struct clear_alias_mode_holder): Likewise.\n\t(clear_alias_set_lookup, canon_address): Likewise.\n\t(record_store, check_mem_read_rtx): Likewise.\n\t(dse_record_singleton_alias_set): Likewise.\n\t(dse_invalidate_singleton_alias_set): Likewise.\n\t* emit-rtl.c (get_mem_attrs): Likewise.\n\t(set_mem_attributes_minus_bitpos): Likewise.\n\t(set_mem_alias_set): Likewise.\n\t* expr.c (store_constructor_field, store_field): Likewise.\n\t* gimplify.c (struct gimplify_init_ctor_preeval_data): Likewise.\n\t* langhooks.c (lhd_get_alias_set): Likewise.\n\t* langhooks-def.h (lhd_get_alias_set): Likewise.\n\t* reload1.c (alter_reg): Likewise.\n\t* tree-flow.h (struct fieldoff): Likewise.\n\t* tree-ssa-alias.c (struct alias_map_d): Likewise.\n\t(may_alias_p, get_smt_for, create_sft): Likewise.\n\t* tree-ssa-alias-warnings.c (nonstandard_alias_types_p): Likewise.\n\t* tree-ssa-structalias.c (set_uids_in_ptset): Likewise.\n\t(merge_smts_into): Likewise.\n\t* varasm.c (const_alias_set): Likewise.\n\t* c-common.c (strict_aliasing_warning): Likewise.\n\t(c_common_get_alias_set): Likewise.\n\t* dse.h (dse_record_singleton_alias_set): Update declaration.\n\t(dse_invalidate_singleton_alias_set): Likewise.\n\t* emit-rtl.h (set_mem_alias_set): Likewise.\n\t* c-common.h (c_common_get_alias_set): Likewise.\n\t* print-rtl.c (print_rtx): Cast MEM_ALIAS_SET when printing it.\n\t* print-tree.c (print_node): Likewise.\n\t* config/alpha/alpha.c (alpha_sr_alias_set): Change to\n\talias_set_type.\n\t(alpha_setup_incoming_varargs): Use alias_set_type.\n\t* config/i386/i386.c (setup_incoming_varargs_64): Use\n\talias_set_type.\n\t(setup_incoming_varargs_ms_64): Likewise.\n\t(ix86_GOT_alias_set): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_builtin_saveregs): Likewise.\n\t* config/rs6000/rs6000.c (setup_incoming_varargs): Likewise.\n\t(set): Change to alias_set_type.\n\t(get_TOC_alias_set): Use alias_set_type.\n\t* config/rs6000/rs6000-protos.h (get_TOC_alias_set): Update\n\tdeclaration.\n\t* config/sh/sh.c (sh_builtin_saveregs): Use alias_set_type.\n\t* config/sparc/sparc.c (sparc_sr_alias_set): Change to\n\talias_set_type.\n\t(struct_value_alias_set): Likewise.\n\t* Makefile.in (GTFILES): Add $(srcdir)/alias.h.\nada/:\n\t* misc.c (gnat_get_alias_set): Change return type to\n\talias_set_type.\ncp/:\n\t* cp-objcp-common.c (cxx_get_alias_set): Change return type to\n\talias_set_type.\n\t* cp/cp-tree.h (cxx_get_alias_set): Update declaration.\nfortran:/\n\t* f95-lang.c (gfc_get_alias_set): Change return type to\n\talias_set_type.\n\nFrom-SVN: r127362", "tree": {"sha": "d0f0bb94d35f0f3656fa880c6a29ffe6bde7aa38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f0bb94d35f0f3656fa880c6a29ffe6bde7aa38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4862826d55a2cdc42cfa3093b90349fc234dee6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4862826d55a2cdc42cfa3093b90349fc234dee6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4862826d55a2cdc42cfa3093b90349fc234dee6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4862826d55a2cdc42cfa3093b90349fc234dee6c/comments", "author": null, "committer": null, "parents": [{"sha": "a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f051fe0bc3638c7f289b8d34e022cbb7f8228d"}], "stats": {"total": 316, "additions": 205, "deletions": 111}, "files": [{"sha": "a61667ba13158e2872646ce53ca11ba5263420aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1,3 +1,72 @@\n+2007-08-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* alias.h (alias_set_type): Define new type.\n+\t(ALIAS_SET_MEMORY_BARRIER): Use it.\n+\t* rtl.h: Include alias.h.\n+\t(struct mem_attrs): Use alias_set_type.\n+\t* tree.h: Include alias.h\n+\t(struct tree_type): Use alias_set_type.\n+\t(struct tree_struct_field_tag): Likewise.\n+\t(struct tree_decl_common): Likewise.\n+\t* alias.c (struct alias_set_entry): Use alias_set_type.\n+\t(get_alias_set_entry, alias_set_subset_of): Likewise.\n+\t(alias_sets_conflict_p): Likewise.\n+\t(alias_sets_must_conflict_p): Likewise.\n+\t(objects_must_conflict_p): Likewise.\n+\t(get_alias_set, new_alias_set): Likewise.\n+\t(record_alias_subset, record_component_aliases): Likewise.\n+\t(varargs_set, frame_set): Change to alias_set_type.\n+\t(get_varargs_alias_set): Use alias_set_type.\n+\t(get_frame_alias_set): Likewise.\n+\t* builtins.c (setjmp_alias_set): Change to alias_set_type.\n+\t* dse.c (struct store_info): Use alias_set_type.\n+\t(struct read_info, struct clear_alias_mode_holder): Likewise.\n+\t(clear_alias_set_lookup, canon_address): Likewise.\n+\t(record_store, check_mem_read_rtx): Likewise.\n+\t(dse_record_singleton_alias_set): Likewise.\n+\t(dse_invalidate_singleton_alias_set): Likewise.\n+\t* emit-rtl.c (get_mem_attrs): Likewise.\n+\t(set_mem_attributes_minus_bitpos): Likewise.\n+\t(set_mem_alias_set): Likewise.\n+\t* expr.c (store_constructor_field, store_field): Likewise.\n+\t* gimplify.c (struct gimplify_init_ctor_preeval_data): Likewise.\n+\t* langhooks.c (lhd_get_alias_set): Likewise.\n+\t* langhooks-def.h (lhd_get_alias_set): Likewise.\n+\t* reload1.c (alter_reg): Likewise.\n+\t* tree-flow.h (struct fieldoff): Likewise.\n+\t* tree-ssa-alias.c (struct alias_map_d): Likewise.\n+\t(may_alias_p, get_smt_for, create_sft): Likewise.\n+\t* tree-ssa-alias-warnings.c (nonstandard_alias_types_p): Likewise.\n+\t* tree-ssa-structalias.c (set_uids_in_ptset): Likewise.\n+\t(merge_smts_into): Likewise.\n+\t* varasm.c (const_alias_set): Likewise.\n+\t* c-common.c (strict_aliasing_warning): Likewise.\n+\t(c_common_get_alias_set): Likewise.\n+\t* dse.h (dse_record_singleton_alias_set): Update declaration.\n+\t(dse_invalidate_singleton_alias_set): Likewise.\n+\t* emit-rtl.h (set_mem_alias_set): Likewise.\n+\t* c-common.h (c_common_get_alias_set): Likewise.\n+\t* print-rtl.c (print_rtx): Cast MEM_ALIAS_SET when printing it.\n+\t* print-tree.c (print_node): Likewise.\n+\t* config/alpha/alpha.c (alpha_sr_alias_set): Change to\n+\talias_set_type.\n+\t(alpha_setup_incoming_varargs): Use alias_set_type.\n+\t* config/i386/i386.c (setup_incoming_varargs_64): Use\n+\talias_set_type.\n+\t(setup_incoming_varargs_ms_64): Likewise.\n+\t(ix86_GOT_alias_set): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_builtin_saveregs): Likewise.\n+\t* config/rs6000/rs6000.c (setup_incoming_varargs): Likewise.\n+\t(set): Change to alias_set_type.\n+\t(get_TOC_alias_set): Use alias_set_type.\n+\t* config/rs6000/rs6000-protos.h (get_TOC_alias_set): Update\n+\tdeclaration.\n+\t* config/sh/sh.c (sh_builtin_saveregs): Use alias_set_type.\n+\t* config/sparc/sparc.c (sparc_sr_alias_set): Change to\n+\talias_set_type.\n+\t(struct_value_alias_set): Likewise.\n+\t* Makefile.in (GTFILES): Add $(srcdir)/alias.h.\n+\n 2007-08-11  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/vxworks-dummy.h (TARGET_VXWORKS): Define."}, {"sha": "de3a9e3d00249ee8c272b1251e76af97b5d703ee", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -3038,7 +3038,7 @@ s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)\n GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(CPP_ID_DATA_H) $(host_xm_file_list) \\\n   $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \\\n-  $(srcdir)/coverage.c $(srcdir)/rtl.h \\\n+  $(srcdir)/alias.h $(srcdir)/coverage.c $(srcdir)/rtl.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/function.h $(srcdir)/libfuncs.h $(SYMTAB_H) \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \\\n   $(srcdir)/fixed-value.h \\"}, {"sha": "e27901c2934caef1b63dc74c594e1b6514ccaa10", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1,3 +1,8 @@\n+2007-08-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* misc.c (gnat_get_alias_set): Change return type to\n+\talias_set_type.\n+\n 2007-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl.c, utils2.c: Fix whitespace in last change."}, {"sha": "5f1ae85e5c7b1889d9ab5dd3c9bc3fdded91856b", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -90,7 +90,7 @@ static void gnat_finish_incomplete_decl\t(tree);\n static unsigned int gnat_init_options\t(unsigned int, const char **);\n static int gnat_handle_option\t\t(size_t, const char *, int);\n static bool gnat_post_options\t\t(const char **);\n-static HOST_WIDE_INT gnat_get_alias_set\t(tree);\n+static alias_set_type gnat_get_alias_set (tree);\n static void gnat_print_decl\t\t(FILE *, tree, int);\n static void gnat_print_type\t\t(FILE *, tree, int);\n static const char *gnat_printable_name\t(tree, int);\n@@ -739,7 +739,7 @@ gnat_eh_type_covers (tree a, tree b)\n \f\n /* Get the alias set corresponding to a type or expression.  */\n \n-static HOST_WIDE_INT\n+static alias_set_type\n gnat_get_alias_set (tree type)\n {\n   /* If this is a padding type, use the type of the first field.  */"}, {"sha": "518164e4dcd6052985ca6df05da8e09938989430", "filename": "gcc/alias.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -131,7 +131,7 @@ along with GCC; see the file COPYING3.  If not see\n struct alias_set_entry GTY(())\n {\n   /* The alias set number, as stored in MEM_ALIAS_SET.  */\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n \n   /* The children of the alias set.  These are not just the immediate\n      children, but, in fact, all descendants.  So, if we have:\n@@ -157,7 +157,7 @@ static rtx find_base_value (rtx);\n static int mems_in_disjoint_alias_sets_p (const_rtx, const_rtx);\n static int insert_subset_children (splay_tree_node, void*);\n static tree find_base_decl (tree);\n-static alias_set_entry get_alias_set_entry (HOST_WIDE_INT);\n+static alias_set_entry get_alias_set_entry (alias_set_type);\n static const_rtx fixed_scalar_and_varying_struct_p (const_rtx, const_rtx, rtx, rtx,\n \t\t\t\t\t\t    bool (*) (const_rtx, bool));\n static int aliases_everything_p (const_rtx);\n@@ -168,7 +168,7 @@ static int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n static int write_dependence_p (const_rtx, const_rtx, int);\n \n static void memory_modified_1 (rtx, const_rtx, void *);\n-static void record_alias_subset (HOST_WIDE_INT, HOST_WIDE_INT);\n+static void record_alias_subset (alias_set_type, alias_set_type);\n \n /* Set up all info needed to perform alias analysis on memory references.  */\n \n@@ -257,7 +257,7 @@ static GTY (()) VEC(alias_set_entry,gc) *alias_sets;\n    such an entry, or NULL otherwise.  */\n \n static inline alias_set_entry\n-get_alias_set_entry (HOST_WIDE_INT alias_set)\n+get_alias_set_entry (alias_set_type alias_set)\n {\n   return VEC_index (alias_set_entry, alias_sets, alias_set);\n }\n@@ -295,7 +295,7 @@ insert_subset_children (splay_tree_node node, void *data)\n /* Return true if the first alias set is a subset of the second.  */\n \n bool\n-alias_set_subset_of (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n+alias_set_subset_of (alias_set_type set1, alias_set_type set2)\n {\n   alias_set_entry ase;\n \n@@ -315,7 +315,7 @@ alias_set_subset_of (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n /* Return 1 if the two specified alias sets may conflict.  */\n \n int\n-alias_sets_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n+alias_sets_conflict_p (alias_set_type set1, alias_set_type set2)\n {\n   alias_set_entry ase;\n \n@@ -347,7 +347,7 @@ alias_sets_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n /* Return 1 if the two specified alias sets will always conflict.  */\n \n int\n-alias_sets_must_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n+alias_sets_must_conflict_p (alias_set_type set1, alias_set_type set2)\n {\n   if (set1 == 0 || set2 == 0 || set1 == set2)\n     return 1;\n@@ -363,7 +363,7 @@ alias_sets_must_conflict_p (HOST_WIDE_INT set1, HOST_WIDE_INT set2)\n int\n objects_must_conflict_p (tree t1, tree t2)\n {\n-  HOST_WIDE_INT set1, set2;\n+  alias_set_type set1, set2;\n \n   /* If neither has a type specified, we don't know if they'll conflict\n      because we may be using them to store objects of various types, for\n@@ -485,10 +485,10 @@ component_uses_parent_alias_set (tree t)\n /* Return the alias set for T, which may be either a type or an\n    expression.  Call language-specific routine for help, if needed.  */\n \n-HOST_WIDE_INT\n+alias_set_type\n get_alias_set (tree t)\n {\n-  HOST_WIDE_INT set;\n+  alias_set_type set;\n \n   /* If we're not doing any alias analysis, just assume everything\n      aliases everything else.  Also return 0 if this or its type is\n@@ -541,7 +541,7 @@ get_alias_set (tree t)\n \t\t     alias set for the restricted pointer a subset of the\n \t\t     alias set for the type pointed to by the type of the\n \t\t     decl.  */\n-\t\t  HOST_WIDE_INT pointed_to_alias_set\n+\t\t  alias_set_type pointed_to_alias_set\n \t\t    = get_alias_set (pointed_to_type);\n \n \t\t  if (pointed_to_alias_set == 0)\n@@ -646,7 +646,7 @@ get_alias_set (tree t)\n \n /* Return a brand-new alias set.  */\n \n-HOST_WIDE_INT\n+alias_set_type\n new_alias_set (void)\n {\n   if (flag_strict_aliasing)\n@@ -674,7 +674,7 @@ new_alias_set (void)\n    subset of alias set zero.  */\n \n static void\n-record_alias_subset (HOST_WIDE_INT superset, HOST_WIDE_INT subset)\n+record_alias_subset (alias_set_type superset, alias_set_type subset)\n {\n   alias_set_entry superset_entry;\n   alias_set_entry subset_entry;\n@@ -730,7 +730,7 @@ record_alias_subset (HOST_WIDE_INT superset, HOST_WIDE_INT subset)\n void\n record_component_aliases (tree type)\n {\n-  HOST_WIDE_INT superset = get_alias_set (type);\n+  alias_set_type superset = get_alias_set (type);\n   tree field;\n \n   if (superset == 0)\n@@ -774,9 +774,9 @@ record_component_aliases (tree type)\n /* Allocate an alias set for use in storing and reading from the varargs\n    spill area.  */\n \n-static GTY(()) HOST_WIDE_INT varargs_set = -1;\n+static GTY(()) alias_set_type varargs_set = -1;\n \n-HOST_WIDE_INT\n+alias_set_type\n get_varargs_alias_set (void)\n {\n #if 1\n@@ -796,9 +796,9 @@ get_varargs_alias_set (void)\n /* Likewise, but used for the fixed portions of the frame, e.g., register\n    save areas.  */\n \n-static GTY(()) HOST_WIDE_INT frame_set = -1;\n+static GTY(()) alias_set_type frame_set = -1;\n \n-HOST_WIDE_INT\n+alias_set_type\n get_frame_alias_set (void)\n {\n   if (frame_set == -1)"}, {"sha": "a0511c14a46efe1c66345e07d9947f0322eb4545", "filename": "gcc/alias.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -20,16 +20,19 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ALIAS_H\n #define GCC_ALIAS_H\n \n-extern HOST_WIDE_INT new_alias_set (void);\n-extern HOST_WIDE_INT get_varargs_alias_set (void);\n-extern HOST_WIDE_INT get_frame_alias_set (void);\n+/* The type of an alias set.  */\n+typedef HOST_WIDE_INT alias_set_type;\n+\n+extern alias_set_type new_alias_set (void);\n+extern alias_set_type get_varargs_alias_set (void);\n+extern alias_set_type get_frame_alias_set (void);\n extern bool component_uses_parent_alias_set (tree);\n-extern bool alias_set_subset_of (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern bool alias_set_subset_of (alias_set_type, alias_set_type);\n \n /* This alias set can be used to force a memory to conflict with all\n    other memories, creating a barrier across which no memory reference\n    can move.  Note that there are other legacy ways to create such\n    memory barriers, including an address of SCRATCH.  */\n-#define ALIAS_SET_MEMORY_BARRIER\t((HOST_WIDE_INT) -1)\n+#define ALIAS_SET_MEMORY_BARRIER\t((alias_set_type) -1)\n \n #endif /* GCC_ALIAS_H */"}, {"sha": "cbe00c7dd3bb9c56ab36fb5a95e7447caa6ef96f", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -644,7 +644,7 @@ expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n }\n \n /* Alias set used for setjmp buffer.  */\n-static HOST_WIDE_INT setjmp_alias_set = -1;\n+static alias_set_type setjmp_alias_set = -1;\n \n /* Construct the leading half of a __builtin_setjmp call.  Control will\n    return to RECEIVER_LABEL.  This is also called directly by the SJLJ"}, {"sha": "f3bfb3d9f3b93c8141a41c8113eac8fbfc66ab0c", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1043,9 +1043,9 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n         {\n           /* warn_strict_aliasing >= 3.   This includes the default (3).  \n              Only warn if the cast is dereferenced immediately.  */\n-          HOST_WIDE_INT set1 =\n+          alias_set_type set1 =\n \t    get_alias_set (TREE_TYPE (TREE_OPERAND (expr, 0)));\n-          HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n+          alias_set_type set2 = get_alias_set (TREE_TYPE (type));\n \n           if (!alias_sets_conflict_p (set1, set2))\n \t    {\n@@ -1069,9 +1069,9 @@ strict_aliasing_warning (tree otype, tree type, tree expr)\n            not taken in the same statement.  This will likely produce many\n            false positives, but could be useful to pinpoint problems that\n            are not revealed at higher levels.  */\n-        HOST_WIDE_INT set1 = get_alias_set (TREE_TYPE (otype));\n-        HOST_WIDE_INT set2 = get_alias_set (TREE_TYPE (type));\n-        if (!COMPLETE_TYPE_P(type)\n+        alias_set_type set1 = get_alias_set (TREE_TYPE (otype));\n+        alias_set_type set2 = get_alias_set (TREE_TYPE (type));\n+        if (!COMPLETE_TYPE_P (type)\n             || !alias_sets_must_conflict_p (set1, set2))\n \t  {\n             warning (OPT_Wstrict_aliasing, \"dereferencing type-punned \"\n@@ -3048,7 +3048,7 @@ static GTY((param_is (union tree_node))) htab_t type_hash_table;\n /* Return the typed-based alias set for T, which may be an expression\n    or a type.  Return -1 if we don't do anything special.  */\n \n-HOST_WIDE_INT\n+alias_set_type\n c_common_get_alias_set (tree t)\n {\n   tree u;"}, {"sha": "8908327698fa38f8b17257e5a17c673656da4268", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -730,7 +730,7 @@ extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);\n extern void c_common_parse_file (int);\n-extern HOST_WIDE_INT c_common_get_alias_set (tree);\n+extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (tree);\n extern int self_promoting_args_p (tree);"}, {"sha": "e699fcf28a489cdb508ec5def3e5aecdc9785f0b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -100,7 +100,7 @@ static int alpha_function_needs_gp;\n \n /* The alias set for prologue/epilogue register save/restore.  */\n \n-static GTY(()) int alpha_sr_alias_set;\n+static GTY(()) alias_set_type alpha_sr_alias_set;\n \n /* The assembler name of the current function.  */\n \n@@ -6022,7 +6022,8 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n \n   if (!no_rtl)\n     {\n-      int count, set = get_varargs_alias_set ();\n+      int count;\n+      alias_set_type set = get_varargs_alias_set ();\n       rtx tmp;\n \n       count = cfun->va_list_gpr_size / UNITS_PER_WORD;"}, {"sha": "602b555c521c2159abf186a824ef6ee4bbf61b95", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -4686,7 +4686,7 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n   rtx label_ref;\n   rtx tmp_reg;\n   rtx nsse_reg;\n-  int set;\n+  alias_set_type set;\n   int i;\n \n   if (! cfun->va_list_gpr_size && ! cfun->va_list_fpr_size)\n@@ -4769,7 +4769,7 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n static void\n setup_incoming_varargs_ms_64 (CUMULATIVE_ARGS *cum)\n {\n-  int set = get_varargs_alias_set ();\n+  alias_set_type set = get_varargs_alias_set ();\n   int i;\n \n   for (i = cum->regno; i < REGPARM_MAX; i++)\n@@ -7180,10 +7180,10 @@ legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \f\n /* Return a unique alias set for the GOT.  */\n \n-static HOST_WIDE_INT\n+static alias_set_type\n ix86_GOT_alias_set (void)\n {\n-  static HOST_WIDE_INT set = -1;\n+  static alias_set_type set = -1;\n   if (set == -1)\n     set = new_alias_set ();\n   return set;"}, {"sha": "5e20edff3522fa1bd6dbf76ac5c386563e791e45", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1450,7 +1450,7 @@ mn10300_builtin_saveregs (void)\n                    && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n                        != void_type_node)))\n                 ? UNITS_PER_WORD : 0);\n-  int set = get_varargs_alias_set ();\n+  alias_set_type set = get_varargs_alias_set ();\n \n   if (argadj)\n     offset = plus_constant (current_function_arg_offset_rtx, argadj);"}, {"sha": "d759c367c98d0007377bf10a139fef2f7c9280fa", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -146,7 +146,7 @@ extern void rs6000_gen_section_name (char **, const char *, const char *);\n extern void output_function_profiler (FILE *, int);\n extern void output_profile_hook  (int);\n extern int rs6000_trampoline_size (void);\n-extern int get_TOC_alias_set (void);\n+extern alias_set_type get_TOC_alias_set (void);\n extern void rs6000_emit_prologue (void);\n extern void rs6000_emit_load_toc_table (int);\n extern void rs6000_aix_emit_builtin_unwind_init (void);"}, {"sha": "40104e1f86e6c3ff7277ec651be776cceb722aa4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -6092,7 +6092,8 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   CUMULATIVE_ARGS next_cum;\n   int reg_size = TARGET_32BIT ? 4 : 8;\n   rtx save_area = NULL_RTX, mem;\n-  int first_reg_offset, set;\n+  int first_reg_offset;\n+  alias_set_type set;\n \n   /* Skip the last named argument.  */\n   next_cum = *cum;\n@@ -14293,9 +14294,9 @@ rs6000_emit_eh_reg_restore (rtx source, rtx scratch)\n     emit_move_insn (gen_rtx_REG (Pmode, LR_REGNO), operands[0]);\n }\n \n-static GTY(()) int set = -1;\n+static GTY(()) alias_set_type set = -1;\n \n-int\n+alias_set_type\n get_TOC_alias_set (void)\n {\n   if (set == -1)"}, {"sha": "f5e0f6a1c1473b0a25734c6f3a3b93c4fc5ee5d8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -6853,7 +6853,7 @@ sh_builtin_saveregs (void)\n   int n_floatregs = MAX (0, NPARM_REGS (SFmode) - first_floatreg);\n   rtx regbuf, fpregs;\n   int bufsize, regno;\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n \n   if (TARGET_SH5)\n     {"}, {"sha": "0b27b87a2e21cbc7a4d7abe29219ebca41d76fa6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -251,10 +251,10 @@ static HOST_WIDE_INT actual_fsize;\n static int num_gfregs;\n \n /* The alias set for prologue/epilogue register save/restore.  */\n-static GTY(()) int sparc_sr_alias_set;\n+static GTY(()) alias_set_type sparc_sr_alias_set;\n \n /* The alias set for the structure return value.  */\n-static GTY(()) int struct_value_alias_set;\n+static GTY(()) alias_set_type struct_value_alias_set;\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */"}, {"sha": "f7587f915d36647a772a09eb17ff386bd8f9af12", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1,3 +1,9 @@\n+2007-08-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* cp-objcp-common.c (cxx_get_alias_set): Change return type to\n+\talias_set_type.\n+\t* cp/cp-tree.h (cxx_get_alias_set): Update declaration.\n+\n 2007-08-10  Ollie Wild  <aaw@google.com>\n \n \t* name-lookup.c (do_nonmember_using_decl): Print an error for ambiguous"}, {"sha": "a4c63f1407a5b15becda8801902bf62ded4741ef", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -35,7 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Special routine to get the alias set for C++.  */\n \n-HOST_WIDE_INT\n+alias_set_type\n cxx_get_alias_set (tree t)\n {\n   if (IS_FAKE_BASE_TYPE (t))"}, {"sha": "9a28ac17cd212a797b8f9f64e30e2ed43d7e21ef", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -4858,7 +4858,7 @@ extern bool cp_dump_tree\t\t\t(void *, tree);\n \n /* In cp/cp-objcp-common.c.  */\n \n-extern HOST_WIDE_INT cxx_get_alias_set\t\t(tree);\n+extern alias_set_type cxx_get_alias_set\t\t(tree);\n extern bool cxx_warn_unused_global_decl\t\t(tree);\n extern tree cp_expr_size\t\t\t(tree);\n extern size_t cp_tree_size\t\t\t(enum tree_code);"}, {"sha": "f8859f6c91d10b13be0182292a771f3c60960e62", "filename": "gcc/dse.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -218,7 +218,7 @@ struct store_info\n   rtx mem_addr;\n \n   /* If this is non-zero, it is the alias set of a spill location.  */\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n \n   /* The offset of the first and byte before the last byte associated\n      with the operation.  */\n@@ -250,7 +250,7 @@ struct read_info\n   int group_id;\n \n   /* If this is non-zero, it is the alias set of a spill location.  */\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n \n   /* The offset of the first and byte after the last byte associated\n      with the operation.  If begin == end == 0, the read did not have\n@@ -497,7 +497,7 @@ static htab_t clear_alias_mode_table;\n /* Hash table element to look up the mode for an alias set.  */\n struct clear_alias_mode_holder\n {\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n   enum machine_mode mode;\n };\n \n@@ -556,7 +556,7 @@ clear_alias_mode_hash (const void *p)\n /* Find the entry associated with ALIAS_SET.  */\n \n static struct clear_alias_mode_holder *\n-clear_alias_set_lookup (HOST_WIDE_INT alias_set)\n+clear_alias_set_lookup (alias_set_type alias_set)\n {\n   struct clear_alias_mode_holder tmp_holder;\n   void **slot;\n@@ -845,7 +845,7 @@ delete_dead_store_insn (insn_info_t insn_info)\n \t       INSN_UID (insn_info->insn));\n       if (insn_info->store_rec->alias_set)\n \tfprintf (dump_file, \"alias set %d\\n\", \n-\t\t (int)insn_info->store_rec->alias_set);\n+\t\t (int) insn_info->store_rec->alias_set);\n       else\n \tfprintf (dump_file, \"\\n\");\n     }\n@@ -927,7 +927,7 @@ add_wild_read (bb_info_t bb_info)\n   while (*ptr)\n     {\n       read_info_t next = (*ptr)->next;\n-      if ( (*ptr)->alias_set == 0 )\n+      if ((*ptr)->alias_set == 0)\n         {\n           pool_free (read_info_pool, *ptr);\n           *ptr = next;\n@@ -996,7 +996,7 @@ const_or_frame_p (rtx x)\n \n static bool\n canon_address (rtx mem,\n-\t       HOST_WIDE_INT *alias_set_out,\n+\t       alias_set_type *alias_set_out,\n \t       int *group_id,\n \t       HOST_WIDE_INT *offset, \n \t       cselib_val **base)\n@@ -1009,9 +1009,9 @@ canon_address (rtx mem,\n   if (clear_alias_sets)\n     {\n       /* If this is a spill, do not do any further processing.  */\n-      HOST_WIDE_INT alias_set = MEM_ALIAS_SET (mem);\n+      alias_set_type alias_set = MEM_ALIAS_SET (mem);\n       if (dump_file)\n-\tfprintf (dump_file, \"found alias set %d\\n\", (int)alias_set);\n+\tfprintf (dump_file, \"found alias set %d\\n\", (int) alias_set);\n       if (bitmap_bit_p (clear_alias_sets, alias_set))\n \t{\n \t  struct clear_alias_mode_holder *entry \n@@ -1023,7 +1023,7 @@ canon_address (rtx mem,\n \t      if (dump_file)\n \t\tfprintf (dump_file, \n \t\t\t \"disqualifying alias set %d, (%s) != (%s)\\n\", \n-\t\t\t (int)alias_set, GET_MODE_NAME (entry->mode), \n+\t\t\t (int) alias_set, GET_MODE_NAME (entry->mode), \n \t\t\t GET_MODE_NAME (GET_MODE (mem)));\n \t      \n \t      bitmap_set_bit (disqualified_clear_alias_sets, alias_set);\n@@ -1148,7 +1148,7 @@ record_store (rtx body, bb_info_t bb_info)\n   rtx mem;\n   HOST_WIDE_INT offset = 0;\n   HOST_WIDE_INT width = 0;\n-  HOST_WIDE_INT spill_alias_set;\n+  alias_set_type spill_alias_set;\n   insn_info_t insn_info = bb_info->last_insn;\n   store_info_t store_info = NULL;\n   int group_id;\n@@ -1225,7 +1225,7 @@ record_store (rtx body, bb_info_t bb_info)\n \n       if (dump_file)\n \tfprintf (dump_file, \" processing spill store %d(%s)\\n\",\n-\t\t (int)spill_alias_set, GET_MODE_NAME (GET_MODE (mem)));\n+\t\t (int) spill_alias_set, GET_MODE_NAME (GET_MODE (mem)));\n     }\n   else if (group_id >= 0)\n     {\n@@ -1289,7 +1289,7 @@ record_store (rtx body, bb_info_t bb_info)\n \t    }\n \t  if (dump_file)\n \t    fprintf (dump_file, \"    trying spill store in insn=%d alias_set=%d\\n\",\n-\t\t     INSN_UID (ptr->insn), (int)s_info->alias_set);\n+\t\t     INSN_UID (ptr->insn), (int) s_info->alias_set);\n \t}\n       else if ((s_info->group_id == group_id) \n \t       && (s_info->cse_base == base))\n@@ -1488,7 +1488,7 @@ check_mem_read_rtx (rtx *loc, void *data)\n   insn_info_t insn_info;\n   HOST_WIDE_INT offset = 0;\n   HOST_WIDE_INT width = 0;\n-  HOST_WIDE_INT spill_alias_set = 0;\n+  alias_set_type spill_alias_set = 0;\n   cselib_val *base = NULL;  \n   int group_id;\n   read_info_t read_info;\n@@ -1546,7 +1546,7 @@ check_mem_read_rtx (rtx *loc, void *data)\n \n       if (dump_file)\n \tfprintf (dump_file, \" processing spill load %d\\n\",\n-\t\t (int)spill_alias_set);\n+\t\t (int) spill_alias_set);\n \n       while (i_ptr)\n \t{\n@@ -2187,7 +2187,7 @@ dse_step2_spill (void)\n \n \n void \n-dse_record_singleton_alias_set (HOST_WIDE_INT alias_set, \n+dse_record_singleton_alias_set (alias_set_type alias_set, \n \t\t\t\tenum machine_mode mode)\n {\n   struct clear_alias_mode_holder tmp_holder;\n@@ -2225,7 +2225,7 @@ dse_record_singleton_alias_set (HOST_WIDE_INT alias_set,\n /* Remove ALIAS_SET from the sets of stack slots being considered.  */\n \n void \n-dse_invalidate_singleton_alias_set (HOST_WIDE_INT alias_set)\n+dse_invalidate_singleton_alias_set (alias_set_type alias_set)\n {\n   if ((!gate_dse()) || !alias_set)\n     return;"}, {"sha": "862eacadc1eb75ef612d9f3e8cea1ef723fa2700", "filename": "gcc/dse.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fdse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fdse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -25,8 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n \n struct df;\n \n-extern void dse_record_singleton_alias_set (HOST_WIDE_INT, enum machine_mode);\n-extern void dse_invalidate_singleton_alias_set (HOST_WIDE_INT);\n+extern void dse_record_singleton_alias_set (alias_set_type, enum machine_mode);\n+extern void dse_invalidate_singleton_alias_set (alias_set_type);\n \n #endif /* GCC_DSE_H */\n "}, {"sha": "f1b1990eeacabb04fc356a622f84f64d626ebb59", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -181,7 +181,7 @@ static int const_double_htab_eq (const void *, const void *);\n static rtx lookup_const_double (rtx);\n static hashval_t mem_attrs_htab_hash (const void *);\n static int mem_attrs_htab_eq (const void *, const void *);\n-static mem_attrs *get_mem_attrs (HOST_WIDE_INT, tree, rtx, rtx, unsigned int,\n+static mem_attrs *get_mem_attrs (alias_set_type, tree, rtx, rtx, unsigned int,\n \t\t\t\t enum machine_mode);\n static hashval_t reg_attrs_htab_hash (const void *);\n static int reg_attrs_htab_eq (const void *, const void *);\n@@ -282,7 +282,7 @@ mem_attrs_htab_eq (const void *x, const void *y)\n    MEM of mode MODE.  */\n \n static mem_attrs *\n-get_mem_attrs (HOST_WIDE_INT alias, tree expr, rtx offset, rtx size,\n+get_mem_attrs (alias_set_type alias, tree expr, rtx offset, rtx size,\n \t       unsigned int align, enum machine_mode mode)\n {\n   mem_attrs attrs;\n@@ -1469,7 +1469,7 @@ void\n set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t\t\t\t HOST_WIDE_INT bitpos)\n {\n-  HOST_WIDE_INT alias = MEM_ALIAS_SET (ref);\n+  alias_set_type alias = MEM_ALIAS_SET (ref);\n   tree expr = MEM_EXPR (ref);\n   rtx offset = MEM_OFFSET (ref);\n   rtx size = MEM_SIZE (ref);\n@@ -1748,7 +1748,7 @@ set_mem_attrs_from_reg (rtx mem, rtx reg)\n /* Set the alias set of MEM to SET.  */\n \n void\n-set_mem_alias_set (rtx mem, HOST_WIDE_INT set)\n+set_mem_alias_set (rtx mem, alias_set_type set)\n {\n #ifdef ENABLE_CHECKING\n   /* If the new and old alias sets don't conflict, something is wrong.  */"}, {"sha": "32f5c91d6307d6295c3bfa63622aa21b83ae09bf", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -21,7 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_EMIT_RTL_H\n \n /* Set the alias set of MEM to SET.  */\n-extern void set_mem_alias_set (rtx, HOST_WIDE_INT);\n+extern void set_mem_alias_set (rtx, alias_set_type);\n \n /* Set the alignment of MEM to ALIGN bits.  */\n extern void set_mem_align (rtx, unsigned int);"}, {"sha": "04a96633f61afc6f8fa297bf061bebcb9898844f", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -139,10 +139,10 @@ static rtx compress_float_constant (rtx, rtx);\n static rtx get_subtarget (rtx);\n static void store_constructor_field (rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t     HOST_WIDE_INT, enum machine_mode,\n-\t\t\t\t     tree, tree, int, int);\n+\t\t\t\t     tree, tree, int, alias_set_type);\n static void store_constructor (tree, rtx, int, HOST_WIDE_INT);\n static rtx store_field (rtx, HOST_WIDE_INT, HOST_WIDE_INT, enum machine_mode,\n-\t\t\ttree, tree, int, bool);\n+\t\t\ttree, tree, alias_set_type, bool);\n \n static unsigned HOST_WIDE_INT highest_pow2_factor_for_target (const_tree, const_tree);\n \n@@ -4960,7 +4960,8 @@ all_zeros_p (tree exp)\n static void\n store_constructor_field (rtx target, unsigned HOST_WIDE_INT bitsize,\n \t\t\t HOST_WIDE_INT bitpos, enum machine_mode mode,\n-\t\t\t tree exp, tree type, int cleared, int alias_set)\n+\t\t\t tree exp, tree type, int cleared,\n+\t\t\t alias_set_type alias_set)\n {\n   if (TREE_CODE (exp) == CONSTRUCTOR\n       /* We can only call store_constructor recursively if the size and\n@@ -5580,8 +5581,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \n static rtx\n store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n-\t     enum machine_mode mode, tree exp, tree type, int alias_set,\n-\t     bool nontemporal)\n+\t     enum machine_mode mode, tree exp, tree type,\n+\t     alias_set_type alias_set, bool nontemporal)\n {\n   HOST_WIDE_INT width_mask = 0;\n "}, {"sha": "51b047b528d02c791ba92b3cd40d4d320c5a3334", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1,3 +1,8 @@\n+2007-08-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* f95-lang.c (gfc_get_alias_set): Change return type to\n+\talias_set_type.\n+\n 2007-08-10  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31270"}, {"sha": "cc660fb9e474f7017236df2286287b3aefe99b64", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -99,7 +99,7 @@ void insert_block (tree);\n static void gfc_clear_binding_stack (void);\n static void gfc_be_parse_file (int);\n static void gfc_expand_function (tree);\n-static HOST_WIDE_INT gfc_get_alias_set (tree);\n+static alias_set_type gfc_get_alias_set (tree);\n \n #undef LANG_HOOKS_NAME\n #undef LANG_HOOKS_INIT\n@@ -706,7 +706,7 @@ gfc_mark_addressable (tree exp)\n /* Return the typed-based alias set for T, which may be an expression\n    or a type.  Return -1 if we don't do anything special.  */\n \n-static HOST_WIDE_INT\n+static alias_set_type\n gfc_get_alias_set (tree t)\n {\n   tree u;"}, {"sha": "15c9b91ceb509c27408d78530f20273ccc9012d9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -2691,7 +2691,7 @@ struct gimplify_init_ctor_preeval_data\n   tree lhs_base_decl;\n \n   /* The alias set of the lhs object.  */\n-  int lhs_alias_set;\n+  alias_set_type lhs_alias_set;\n };\n \n static tree"}, {"sha": "0866a4c9bdaded3f1a24d1daabe6a447c952da7f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -39,7 +39,7 @@ extern void lhd_do_nothing_t (tree);\n extern void lhd_do_nothing_i (int);\n extern void lhd_do_nothing_f (struct function *);\n extern bool lhd_post_options (const char **);\n-extern HOST_WIDE_INT lhd_get_alias_set (tree);\n+extern alias_set_type lhd_get_alias_set (tree);\n extern tree lhd_return_tree (tree);\n extern tree lhd_return_null_tree_v (void);\n extern tree lhd_return_null_tree (tree);"}, {"sha": "1c9a6132c5edcc1b5dfea0952b13fef9ec75b9dd", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -218,7 +218,7 @@ lhd_incomplete_type_error (tree ARG_UNUSED (value), tree type)\n /* Provide a default routine for alias sets that always returns -1.  This\n    is used by languages that don't need to do anything special.  */\n \n-HOST_WIDE_INT\n+alias_set_type\n lhd_get_alias_set (tree ARG_UNUSED (t))\n {\n   return -1;"}, {"sha": "ed036474bda71432a44f1af5f3b9ed6a73b09d83", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -284,7 +284,7 @@ struct lang_hooks\n \n   /* Called to obtain the alias set to be used for an expression or type.\n      Returns -1 if the language does nothing special for it.  */\n-  HOST_WIDE_INT (*get_alias_set) (tree);\n+  alias_set_type (*get_alias_set) (tree);\n \n   /* Called with an expression that is to be processed as a constant.\n      Returns either the same expression or a language-independent"}, {"sha": "2891967390e0651faf045aeea6409dda0f357d51", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -536,7 +536,8 @@ print_rtx (const_rtx in_rtx)\n     {\n #ifndef GENERATOR_FILE\n     case MEM:\n-      fprintf (outfile, \" [\" HOST_WIDE_INT_PRINT_DEC, MEM_ALIAS_SET (in_rtx));\n+      fprintf (outfile, \" [\" HOST_WIDE_INT_PRINT_DEC,\n+\t       (HOST_WIDE_INT) MEM_ALIAS_SET (in_rtx));\n \n       if (MEM_EXPR (in_rtx))\n \tprint_mem_expr (outfile, MEM_EXPR (in_rtx));"}, {"sha": "22a1e2e820431725413cfd44ddd222a1f35bfd7b", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -473,7 +473,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  \n \t  if (DECL_POINTER_ALIAS_SET_KNOWN_P (node))\n \t    fprintf (file, \" alias set \" HOST_WIDE_INT_PRINT_DEC,\n-\t\t     DECL_POINTER_ALIAS_SET (node));\n+\t\t     (HOST_WIDE_INT) DECL_POINTER_ALIAS_SET (node));\n \t}\n       if (TREE_CODE (node) == FIELD_DECL)\n \t{\n@@ -614,7 +614,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       fprintf (file, \" align %d symtab %d alias set \" HOST_WIDE_INT_PRINT_DEC,\n \t       TYPE_ALIGN (node), TYPE_SYMTAB_ADDRESS (node),\n-\t       TYPE_ALIAS_SET (node));\n+\t       (HOST_WIDE_INT) TYPE_ALIAS_SET (node));\n \n       if (TYPE_STRUCTURAL_EQUALITY_P (node))\n \tfprintf (file, \" structural equality\");"}, {"sha": "319ba13f1f789f520afcce81245a2f37ce8bfeca", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -2076,7 +2076,7 @@ alter_reg (int i, int from_reg)\n \t inherent space, and no less total space, then the previous slot.  */\n       if (from_reg == -1)\n \t{\n-\t  HOST_WIDE_INT alias_set = new_alias_set ();\n+\t  alias_set_type alias_set = new_alias_set ();\n \n \t  /* No known place to spill from => no slot to reuse.  */\n \t  x = assign_stack_local (mode, total_size,\n@@ -2128,14 +2128,14 @@ alter_reg (int i, int from_reg)\n \t  /* All pseudos mapped to this slot can alias each other.  */\n \t  if (spill_stack_slot[from_reg])\n \t    {\n-\t      HOST_WIDE_INT alias_set \n+\t      alias_set_type alias_set \n \t\t= MEM_ALIAS_SET (spill_stack_slot[from_reg]);\n \t      set_mem_alias_set (x, alias_set);\n \t      dse_invalidate_singleton_alias_set (alias_set);\n \t    }\n \t  else\n \t    {\n-\t      HOST_WIDE_INT alias_set = new_alias_set ();\n+\t      alias_set_type alias_set = new_alias_set ();\n \t      set_mem_alias_set (x, alias_set);\n \t      dse_record_singleton_alias_set (alias_set, mode);\n \t    }"}, {"sha": "a7b5f337e217633c99d6d6b2b9d2a102f5a8c5d2", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"real.h\"\n #include \"vec.h\"\n+#include \"alias.h\"\n \n #undef FFS  /* Some systems predefine this symbol; don't let it interfere.  */\n #undef FLOAT /* Likewise.  */\n@@ -139,7 +140,7 @@ typedef struct\n    stricter alignment; OFFSET is the offset of the MEM within that object.  */\n typedef struct mem_attrs GTY(())\n {\n-  HOST_WIDE_INT alias;\t\t/* Memory alias set.  */\n+  alias_set_type alias;\t\t/* Memory alias set.  */\n   tree expr;\t\t\t/* expr corresponding to MEM.  */\n   rtx offset;\t\t\t/* Offset from start of DECL, as CONST_INT.  */\n   rtx size;\t\t\t/* Size in bytes, as a CONST_INT.  */"}, {"sha": "d7e7bf5cb12dfa4deead27a427e9f4e4d40800a2", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -1159,7 +1159,7 @@ struct fieldoff\n   tree size;\n   tree decl;\n   HOST_WIDE_INT offset;  \n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n };\n typedef struct fieldoff fieldoff_s;\n "}, {"sha": "05d215c0f28d48198aa8d90dad945ef91000abc6", "filename": "gcc/tree-ssa-alias-warnings.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-ssa-alias-warnings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-ssa-alias-warnings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias-warnings.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -835,8 +835,8 @@ strict_aliasing_warn (tree alias_site,\n static bool\n nonstandard_alias_types_p (tree type1, tree type2)\n {\n-  HOST_WIDE_INT set1;\n-  HOST_WIDE_INT set2;\n+  alias_set_type set1;\n+  alias_set_type set2;\n \n   if (VOID_TYPE_P (type1) || VOID_TYPE_P (type2))\n     return false;"}, {"sha": "b1dcf44f803b32c000d41bcafe7ecd78d278bec3", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -171,7 +171,7 @@ struct alias_map_d\n {\n   /* Variable and its alias set.  */\n   tree var;\n-  HOST_WIDE_INT set;\n+  alias_set_type set;\n };\n \n \n@@ -198,7 +198,7 @@ static bitmap_obstack alias_bitmap_obstack;\n static void compute_flow_insensitive_aliasing (struct alias_info *);\n static void finalize_ref_all_pointers (struct alias_info *);\n static void dump_alias_stats (FILE *);\n-static bool may_alias_p (tree, HOST_WIDE_INT, tree, HOST_WIDE_INT, bool);\n+static bool may_alias_p (tree, alias_set_type, tree, alias_set_type, bool);\n static tree create_memory_tag (tree type, bool is_type_tag);\n static tree get_smt_for (tree, struct alias_info *);\n static tree get_nmt_for (tree);\n@@ -2669,8 +2669,8 @@ maybe_create_global_var (void)\n    VAR_ALIAS_SET is the alias set for VAR.  */\n \n static bool\n-may_alias_p (tree ptr, HOST_WIDE_INT mem_alias_set,\n-\t     tree var, HOST_WIDE_INT var_alias_set,\n+may_alias_p (tree ptr, alias_set_type mem_alias_set,\n+\t     tree var, alias_set_type var_alias_set,\n \t     bool alias_set_only)\n {\n   tree mem;\n@@ -2998,7 +2998,7 @@ get_smt_for (tree ptr, struct alias_info *ai)\n   size_t i;\n   tree tag;\n   tree tag_type = TREE_TYPE (TREE_TYPE (ptr));\n-  HOST_WIDE_INT tag_set = get_alias_set (tag_type);\n+  alias_set_type tag_set = get_alias_set (tag_type);\n \n   /* We use a unique memory tag for all the ref-all pointers.  */\n   if (PTR_IS_REF_ALL (ptr))\n@@ -3644,7 +3644,7 @@ get_or_create_used_part_for (size_t uid)\n \n static tree\n create_sft (tree var, tree field, unsigned HOST_WIDE_INT offset,\n-\t    unsigned HOST_WIDE_INT size, HOST_WIDE_INT alias_set)\n+\t    unsigned HOST_WIDE_INT size, alias_set_type alias_set)\n {\n   tree subvar = create_tag_raw (STRUCT_FIELD_TAG, field, \"SFT\");\n "}, {"sha": "069c876e265c1689183de1ffba162500770f1c75", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -4343,12 +4343,12 @@ set_uids_in_ptset (tree ptr, bitmap into, bitmap from, bool is_derefed,\n   unsigned int i;\n   bitmap_iterator bi;\n   subvar_t sv;\n-  HOST_WIDE_INT ptr_alias_set = get_alias_set (TREE_TYPE (ptr));\n+  alias_set_type ptr_alias_set = get_alias_set (TREE_TYPE (ptr));\n \n   EXECUTE_IF_SET_IN_BITMAP (from, 0, i, bi)\n     {\n       varinfo_t vi = get_varinfo (i);\n-      unsigned HOST_WIDE_INT var_alias_set;\n+      alias_set_type var_alias_set;\n \n       /* The only artificial variables that are allowed in a may-alias\n \t set are heap variables.  */\n@@ -4477,7 +4477,7 @@ merge_smts_into (tree p, bitmap solution)\n   smt = var_ann (var)->symbol_mem_tag;\n   if (smt)\n     {\n-      HOST_WIDE_INT smtset = get_alias_set (TREE_TYPE (smt));\n+      alias_set_type smtset = get_alias_set (TREE_TYPE (smt));\n \n       /* Need to set the SMT subsets first before this\n \t will work properly.  */"}, {"sha": "6f6c53564b41f5a7df0dc9ec8177917ef2d2d470", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"statistics.h\"\n #include \"vec.h\"\n #include \"double-int.h\"\n+#include \"alias.h\"\n \n /* Codes of tree nodes */\n \n@@ -2322,7 +2323,7 @@ struct tree_type GTY(())\n   tree binfo;\n   tree context;\n   tree canonical;\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n   /* Points to a structure whose details depend on the language in use.  */\n   struct lang_type *lang_specific;\n };\n@@ -2562,7 +2563,7 @@ struct tree_struct_field_tag GTY(())\n   unsigned HOST_WIDE_INT size;\n \n   /* Alias set for a DECL_NONADDRESSABLE_P field.  Otherwise -1.  */\n-  HOST_WIDE_INT alias_set;\n+  alias_set_type alias_set;\n };\n #define SFT_PARENT_VAR(NODE) (STRUCT_FIELD_TAG_CHECK (NODE)->sft.parent_var)\n #define SFT_OFFSET(NODE) (STRUCT_FIELD_TAG_CHECK (NODE)->sft.offset)\n@@ -2785,7 +2786,7 @@ struct tree_decl_common GTY(())\n   tree attributes;\n   tree abstract_origin;\n \n-  HOST_WIDE_INT pointer_alias_set;\n+  alias_set_type pointer_alias_set;\n   /* Points to a structure whose details depend on the language in use.  */\n   struct lang_decl *lang_specific;\n };\n@@ -4780,9 +4781,9 @@ extern tree strip_float_extensions (tree);\n \n /* In alias.c */\n extern void record_component_aliases (tree);\n-extern HOST_WIDE_INT get_alias_set (tree);\n-extern int alias_sets_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n-extern int alias_sets_must_conflict_p (HOST_WIDE_INT, HOST_WIDE_INT);\n+extern alias_set_type get_alias_set (tree);\n+extern int alias_sets_conflict_p (alias_set_type, alias_set_type);\n+extern int alias_sets_must_conflict_p (alias_set_type, alias_set_type);\n extern int objects_must_conflict_p (tree, tree);\n \n /* In tree.c */"}, {"sha": "2ec4f2b876ace37fb9a3c5b8d1122726ae6249fe", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4862826d55a2cdc42cfa3093b90349fc234dee6c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4862826d55a2cdc42cfa3093b90349fc234dee6c", "patch": "@@ -107,7 +107,7 @@ bool first_function_block_is_cold;\n /* We give all constants their own alias set.  Perhaps redundant with\n    MEM_READONLY_P, but pre-dates it.  */\n \n-static HOST_WIDE_INT const_alias_set;\n+static alias_set_type const_alias_set;\n \n static const char *strip_reg_name (const char *);\n static int contains_pointers_p (tree);"}]}