{"sha": "1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1NjBjM2E0OGRlOWY1YTcxMTNkYmIwY2UzNzg1NDJjYWIyZTE2ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-05-07T18:03:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-07T18:03:52Z"}, "message": "op2.C: Don't use `glob' as a variable.\n\n\t* g++.old-deja/g++.other/op2.C: Don't use `glob' as a variable.\n\t* g++.old-deja/g++.other/op3.C: Likewise.\n\nFrom-SVN: r41901", "tree": {"sha": "dfaeb131d6f6a297ca5b820cb3e21d8e2ac80b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfaeb131d6f6a297ca5b820cb3e21d8e2ac80b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/comments", "author": null, "committer": null, "parents": [{"sha": "1a02aff4998ca1573c9431b81fcd44c2966b23f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a02aff4998ca1573c9431b81fcd44c2966b23f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a02aff4998ca1573c9431b81fcd44c2966b23f5"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "f4a0c70f5e4bbc7c547cbbf352b143f131653bf0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "patch": "@@ -1,3 +1,8 @@\n+2001-05-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/op2.C: Don't use `glob' as a variable.\n+\t* g++.old-deja/g++.other/op3.C: Likewise.\n+\n 2001-05-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/syshdr.h: New file."}, {"sha": "4e5528f9583211df464b463015f380143524d0a0", "filename": "gcc/testsuite/g++.old-deja/g++.other/op2.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop2.C?ref=1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "patch": "@@ -1,28 +1,28 @@\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 28 Nov 2000 <nathan@codesourcery.com>\n \n // Bug 91. We'd not preserve constness looking for a base classes assignment\n // operator.\n \n #include <stdio.h>\n \n-int glob = 0;\n+int value = 0;\n \n struct A\n {\n   A() {}\n \n   A( A& arg) \n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 1;}\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 1;}\n \n   A( const A& arg)\n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 2;}\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 2;}\n \n   A& operator=( A& ) \n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 3; return *this; }\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 3; return *this; }\n \n   A& operator=( const A& ) \n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 4; return *this; }\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 4; return *this; }\n };\n \n struct B : A\n@@ -32,32 +32,32 @@ struct B : A\n \n void foo( A& )\n {\n-  printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 5;\n+  printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 5;\n }\n \n void foo( const A& )\n {\n- printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 6;\n+ printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 6;\n }\n \n \n int main()\n {\n   const A a0;\n-  glob = 0; printf (\"A(cA) : \");  A a1(a0); if (glob != 2) return 1;\n-  glob = 0; printf (\"A(A ) : \");  A a2(a1); if (glob != 1) return 2;\n+  value = 0; printf (\"A(cA) : \");  A a1(a0); if (value != 2) return 1;\n+  value = 0; printf (\"A(A ) : \");  A a2(a1); if (value != 1) return 2;\n   \n   const B b0;\n-  glob = 0; printf (\"B(cB) : \");  B b1(b0); if (glob != 2) return 3;\n-  glob = 0; printf (\"B(B ) : \");  B b2(b1); if (glob != 2) return 4;\n+  value = 0; printf (\"B(cB) : \");  B b1(b0); if (value != 2) return 3;\n+  value = 0; printf (\"B(B ) : \");  B b2(b1); if (value != 2) return 4;\n \n-  glob = 0; printf (\"A= cA : \");  a1 = a0; if (glob != 4) return 5;\n-  glob = 0; printf (\"A= A : \");   a1 = a2; if (glob != 3) return 6;\n-  glob = 0; printf (\"B= cB : \");  b1 = b0; if (glob != 4) return 7;\n-  glob = 0; printf (\"B= B : \");   b1 = b2; if (glob != 4) return 8;\n+  value = 0; printf (\"A= cA : \");  a1 = a0; if (value != 4) return 5;\n+  value = 0; printf (\"A= A : \");   a1 = a2; if (value != 3) return 6;\n+  value = 0; printf (\"B= cB : \");  b1 = b0; if (value != 4) return 7;\n+  value = 0; printf (\"B= B : \");   b1 = b2; if (value != 4) return 8;\n \n-  glob = 0; printf (\"foo(cB): \"); foo(b0); if (glob != 6) return 9;\n-  glob = 0; printf (\"foo(B ): \"); foo(b2); if (glob != 5) return 10;\n+  value = 0; printf (\"foo(cB): \"); foo(b0); if (value != 6) return 9;\n+  value = 0; printf (\"foo(B ): \"); foo(b2); if (value != 5) return 10;\n \n   return 0;\n }"}, {"sha": "08833c49104cd678ea68e1f1cc79ba84cecd51a1", "filename": "gcc/testsuite/g++.old-deja/g++.other/op3.C", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a560c3a48de9f5a7113dbb0ce378542cab2e16e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fop3.C?ref=1a560c3a48de9f5a7113dbb0ce378542cab2e16e", "patch": "@@ -1,28 +1,28 @@\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 28 Nov 2000 <nathan@codesourcery.com>\n \n // Related to bug 91. We'd not preserve constness accessing a member of the\n // source type in copy ctor and assignment op.\n \n #include <stdio.h>\n \n-int glob = 0;\n+int value = 0;\n \n struct A\n {\n   A() {}\n \n   A( A& arg) \n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 1;}\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 1;}\n \n   A( const A& arg)\n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 2;}\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 2;}\n \n   A& operator=( A& ) \n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 3; return *this; }\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 3; return *this; }\n \n   A& operator=( const A& ) \n-  { printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 4; return *this; }\n+  { printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 4; return *this; }\n };\n \n struct B\n@@ -33,31 +33,31 @@ struct B\n \n void foo( A& )\n {\n-  printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 5;\n+  printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 5;\n }\n \n void foo( const A& )\n {\n- printf (\"%s\\n\", __PRETTY_FUNCTION__); glob = 6;\n+ printf (\"%s\\n\", __PRETTY_FUNCTION__); value = 6;\n }\n \n int main()\n {\n   const A a0;\n-  glob = 0; printf (\"A(cA) : \");  A a1(a0); if (glob != 2) return 1;\n-  glob = 0; printf (\"A(A ) : \");  A a2(a1); if (glob != 1) return 2;\n+  value = 0; printf (\"A(cA) : \");  A a1(a0); if (value != 2) return 1;\n+  value = 0; printf (\"A(A ) : \");  A a2(a1); if (value != 1) return 2;\n   \n   const B b0;\n-  glob = 0; printf (\"B(cB) : \");  B b1(b0); if (glob != 2) return 3;\n-  glob = 0; printf (\"B(B ) : \");  B b2(b1); if (glob != 2) return 4;\n+  value = 0; printf (\"B(cB) : \");  B b1(b0); if (value != 2) return 3;\n+  value = 0; printf (\"B(B ) : \");  B b2(b1); if (value != 2) return 4;\n \n-  glob = 0; printf (\"A= cA : \");  a1 = a0; if (glob != 4) return 5;\n-  glob = 0; printf (\"A= A : \");   a1 = a2; if (glob != 3) return 6;\n-  glob = 0; printf (\"B= cB : \");  b1 = b0; if (glob != 4) return 7;\n-  glob = 0; printf (\"B= B : \");   b1 = b2; if (glob != 4) return 8;\n+  value = 0; printf (\"A= cA : \");  a1 = a0; if (value != 4) return 5;\n+  value = 0; printf (\"A= A : \");   a1 = a2; if (value != 3) return 6;\n+  value = 0; printf (\"B= cB : \");  b1 = b0; if (value != 4) return 7;\n+  value = 0; printf (\"B= B : \");   b1 = b2; if (value != 4) return 8;\n \n-  glob = 0; printf (\"foo(cB): \"); foo(b0.a); if (glob != 6) return 9;\n-  glob = 0; printf (\"foo(B ): \"); foo(b2.a); if (glob != 5) return 10;\n+  value = 0; printf (\"foo(cB): \"); foo(b0.a); if (value != 6) return 9;\n+  value = 0; printf (\"foo(B ): \"); foo(b2.a); if (value != 5) return 10;\n \n   return 0;\n }"}]}