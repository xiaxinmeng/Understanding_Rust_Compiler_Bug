{"sha": "387113816fdaa179abf1b9babfb11a421217dc10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3MTEzODE2ZmRhYTE3OWFiZjFiOWJhYmZiMTFhNDIxMjE3ZGMxMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-09-14T16:18:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-09-14T16:18:10Z"}, "message": "c-common.c (check_cxx_fundamental_alignment_constraints): Don't limit FIELD_DECL, either.\n\n\t* c-common.c (check_cxx_fundamental_alignment_constraints): Don't\n\tlimit FIELD_DECL, either.\n\nFrom-SVN: r240139", "tree": {"sha": "5409da7b5fa61940cc41b5b9169dea98c639c58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5409da7b5fa61940cc41b5b9169dea98c639c58f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387113816fdaa179abf1b9babfb11a421217dc10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387113816fdaa179abf1b9babfb11a421217dc10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387113816fdaa179abf1b9babfb11a421217dc10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387113816fdaa179abf1b9babfb11a421217dc10/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0761f6bfb315e6dd471ac62024e0703345c7ab47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0761f6bfb315e6dd471ac62024e0703345c7ab47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0761f6bfb315e6dd471ac62024e0703345c7ab47"}], "stats": {"total": 60, "additions": 23, "deletions": 37}, "files": [{"sha": "3258816e3ed8a783f4bebebddfc7a257e88cde00", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387113816fdaa179abf1b9babfb11a421217dc10/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387113816fdaa179abf1b9babfb11a421217dc10/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=387113816fdaa179abf1b9babfb11a421217dc10", "patch": "@@ -1,3 +1,8 @@\n+2016-09-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (check_cxx_fundamental_alignment_constraints): Don't\n+\tlimit FIELD_DECL, either.\n+\n 2016-09-14  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (c_common_truthvalue_conversion): Use false instead of 0."}, {"sha": "57b66712e3fdd955123cb7f0927fc7bb3d683d80", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387113816fdaa179abf1b9babfb11a421217dc10/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387113816fdaa179abf1b9babfb11a421217dc10/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=387113816fdaa179abf1b9babfb11a421217dc10", "patch": "@@ -7868,43 +7868,21 @@ check_cxx_fundamental_alignment_constraints (tree node,\n   if (cxx_fundamental_alignment_p (requested_alignment))\n     return true;\n \n-  if (DECL_P (node))\n+  if (VAR_P (node))\n     {\n       if (TREE_STATIC (node))\n-\t{\n-\t  /* For file scope variables and static members, the target\n-\t     supports alignments that are at most\n-\t     MAX_OFILE_ALIGNMENT.  */\n-\t  if (requested_alignment > (max_align = MAX_OFILE_ALIGNMENT))\n-\t    alignment_too_large_p = true;\n-\t}\n+\t/* For file scope variables and static members, the target supports\n+\t   alignments that are at most MAX_OFILE_ALIGNMENT.  */\n+\tmax_align = MAX_OFILE_ALIGNMENT;\n       else\n-\t{\n-#ifdef BIGGEST_FIELD_ALIGNMENT\n-#define MAX_TARGET_FIELD_ALIGNMENT BIGGEST_FIELD_ALIGNMENT\n-#else\n-#define MAX_TARGET_FIELD_ALIGNMENT BIGGEST_ALIGNMENT\n-#endif\n-\t  /* For non-static members, the target supports either\n-\t     alignments that at most either BIGGEST_FIELD_ALIGNMENT\n-\t     if it is defined or BIGGEST_ALIGNMENT.  */\n-\t  max_align = MAX_TARGET_FIELD_ALIGNMENT;\n-\t  if (TREE_CODE (node) == FIELD_DECL\n-\t      && requested_alignment > (max_align = MAX_TARGET_FIELD_ALIGNMENT))\n-\t    alignment_too_large_p = true;\n-#undef MAX_TARGET_FIELD_ALIGNMENT\n-\t  /* For stack variables, the target supports at most\n-\t     MAX_STACK_ALIGNMENT.  */\n-\t  else if (decl_function_context (node) != NULL\n-\t\t   && requested_alignment > (max_align = MAX_STACK_ALIGNMENT))\n-\t    alignment_too_large_p = true;\n-\t}\n-    }\n-  else if (TYPE_P (node))\n-    {\n-      /* Let's be liberal for types; don't limit their alignment any more than\n-\t check_user_alignment already did.  */\n-    }\n+\t/* For stack variables, the target supports at most\n+\t   MAX_STACK_ALIGNMENT.  */\n+\tmax_align = MAX_STACK_ALIGNMENT;\n+      if (requested_alignment > max_align)\n+\talignment_too_large_p = true;\n+    }\n+  /* Let's be liberal for types and fields; don't limit their alignment any\n+     more than check_user_alignment already did.  */\n \n   if (alignment_too_large_p)\n     pedwarn (input_location, OPT_Wattributes,"}, {"sha": "ad7cffc6b994741c607ab9e2068b61e3ef59299e", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-52.C", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387113816fdaa179abf1b9babfb11a421217dc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387113816fdaa179abf1b9babfb11a421217dc10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-52.C?ref=387113816fdaa179abf1b9babfb11a421217dc10", "patch": "@@ -3,19 +3,22 @@\n struct A {int i;}  a [[gnu::aligned(16)]];\n struct B {int i;} __attribute__((aligned(16))) b;\n \n+constexpr unsigned si = sizeof(int);\n+constexpr unsigned ai = alignof(int);\n+\n int\n main ()\n {\n  A aa;\n  B bb;\n \n- static_assert (sizeof (a) == 4, \"sizeof (a) should be 4\");\n+ static_assert (sizeof (a) == si, \"sizeof (a) should be 4\");\n  static_assert (sizeof (b) == 16, \"sizeof (b) should be 16\");\n- static_assert (sizeof (aa) == 4, \"sizeof (aa) should be 4\");\n+ static_assert (sizeof (aa) == si, \"sizeof (aa) should be 4\");\n  static_assert (sizeof (bb) == 16, \"sizeof (bb) should be 16\");\n \n  static_assert (__alignof__  (a) == 16, \"alignof (a) should be 16\");\n  static_assert (__alignof__  (b) == 16, \"alignof (b) should be 16\");\n- static_assert (__alignof__  (aa) == 4, \"alignof (aa) should be 4\");\n+ static_assert (__alignof__  (aa) == ai, \"alignof (aa) should be 4\");\n  static_assert (__alignof__  (bb) == 16, \"alignof (bb) should be 16\");\n }"}]}