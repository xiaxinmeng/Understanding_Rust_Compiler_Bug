{"sha": "e6110fa622ff495f5a8d492fcad4cdab5259de0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxMTBmYTYyMmZmNDk1ZjVhOGQ0OTJmY2FkNGNkYWI1MjU5ZGUwZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-13T18:59:34Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-10-13T18:59:34Z"}, "message": "re PR fortran/81048 (incorrect derived type initialization)\n\n2017-10-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81048\n\t* resolve.c (resolve_symbol): Ensure that derived type array\n\tresults get default initialization.\n\n2017-10-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/81048\n\t* gfortran.dg/derived_init_4.f90 : New test.\n\nFrom-SVN: r253738", "tree": {"sha": "51a55bcddf372a34e18e9f42a421cf2ce2dca2cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a55bcddf372a34e18e9f42a421cf2ce2dca2cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6110fa622ff495f5a8d492fcad4cdab5259de0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6110fa622ff495f5a8d492fcad4cdab5259de0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6110fa622ff495f5a8d492fcad4cdab5259de0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6110fa622ff495f5a8d492fcad4cdab5259de0f/comments", "author": null, "committer": null, "parents": [{"sha": "d7327979fe8bcfdee1a3bfa77068072dc6073991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7327979fe8bcfdee1a3bfa77068072dc6073991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7327979fe8bcfdee1a3bfa77068072dc6073991"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "ba9621fc8d5aa4464da67dfdac0105c5741e3890", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e6110fa622ff495f5a8d492fcad4cdab5259de0f", "patch": "@@ -1,3 +1,9 @@\n+2017-10-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81048\n+\t* resolve.c (resolve_symbol): Ensure that derived type array\n+\tresults get default initialization.\n+\n 2017-10-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* cpp.c (gfc_cpp_add_include_path): Update incpath_e names."}, {"sha": "5e4988e694510b6c3261e7cafa3efeb15d908194", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e6110fa622ff495f5a8d492fcad4cdab5259de0f", "patch": "@@ -14967,7 +14967,12 @@ resolve_symbol (gfc_symbol *sym)\n \n       if ((!a->save && !a->dummy && !a->pointer\n \t   && !a->in_common && !a->use_assoc\n-\t   && !a->result && !a->function)\n+\t   && a->referenced\n+\t   && !((a->function || a->result)\n+\t\t&& (!a->dimension\n+\t\t    || sym->ts.u.derived->attr.alloc_comp\n+\t\t    || sym->ts.u.derived->attr.pointer_comp))\n+\t   && !(a->function && sym != sym->result))\n \t  || (a->dummy && a->intent == INTENT_OUT && !a->pointer))\n \tapply_default_init (sym);\n       else if (a->function && sym->result && a->access != ACCESS_PRIVATE"}, {"sha": "1a6ad0d7660475a1b8e1e55569009bf77a0dd77b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6110fa622ff495f5a8d492fcad4cdab5259de0f", "patch": "@@ -1,3 +1,8 @@\n+2017-10-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/81048\n+\t* gfortran.dg/derived_init_4.f90 : New test.\n+\n 2017-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/69078"}, {"sha": "114975150aa62ab25a199ea5859b17e68d0e2450", "filename": "gcc/testsuite/gfortran.dg/derived_init_4.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6110fa622ff495f5a8d492fcad4cdab5259de0f/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_4.f90?ref=e6110fa622ff495f5a8d492fcad4cdab5259de0f", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR81048, where in the second call to 'g2' the\n+! default initialization was \"forgotten\". 'g1', 'g1a' and 'g3' check\n+! that this does not occur for scalars and explicit results.\n+!\n+! Contributed by David Smith  <dm577216smith@gmail.com>\n+!\n+program test\n+   type f\n+       integer :: f = -1\n+   end type\n+   type(f) :: a, b(3)\n+   type(f), allocatable :: ans\n+   b = g2(a)\n+   b = g2(a)\n+   ans = g1(a)\n+   if (ans%f .ne. -1) call abort\n+   ans = g1(a)\n+   if (ans%f .ne. -1) call abort\n+   ans = g1a(a)\n+   if (ans%f .ne. -1) call abort\n+   ans = g1a(a)\n+   if (ans%f .ne. -1) call abort\n+   b = g3(a)\n+   b = g3(a)\n+contains\n+   function g3(a) result(res)\n+      type(f) :: a, res(3)\n+      do j = 1, 3\n+         if (res(j)%f == -1) then\n+             res(j)%f = a%f - 1\n+         else\n+             call abort\n+         endif\n+      enddo\n+   end function g3\n+\n+   function g2(a)\n+      type(f) :: a, g2(3)\n+      do j = 1, 3\n+         if (g2(j)%f == -1) then\n+             g2(j)%f = a%f - 1\n+         else\n+             call abort\n+         endif\n+      enddo\n+   end function g2\n+\n+   function g1(a)\n+     type(f) :: g1, a\n+     if (g1%f .ne. -1 ) call abort\n+   end function\n+\n+   function g1a(a) result(res)\n+     type(f) :: res, a\n+     if (res%f .ne. -1 ) call abort\n+   end function\n+end program test\n+"}]}