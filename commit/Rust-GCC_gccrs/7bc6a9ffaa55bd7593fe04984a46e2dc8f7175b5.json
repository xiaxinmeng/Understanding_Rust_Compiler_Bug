{"sha": "7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjNmE5ZmZhYTU1YmQ3NTkzZmUwNDk4NGE0NmUyZGM4ZjcxNzViNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-05-12T07:27:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-12T07:27:15Z"}, "message": "cp-tree.h (CANONICAL_TYPE_VARIANT): New macro.\n\n\t* cp-tree.h (CANONICAL_TYPE_VARIANT): New macro.\n\t* method.c (build_mangled_name): Use it.\n\t(build_decl_overload_real): Likewise.\n\nFrom-SVN: r19695", "tree": {"sha": "9613899c96d081c84ed98644d28a9d3859a3f9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9613899c96d081c84ed98644d28a9d3859a3f9e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/comments", "author": null, "committer": null, "parents": [{"sha": "07389efeea3381d2a710e0a8e4454a99d0f157cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07389efeea3381d2a710e0a8e4454a99d0f157cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07389efeea3381d2a710e0a8e4454a99d0f157cd"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "b58f01e66e5ba44c23c1efaec47be64d2981155d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "patch": "@@ -1,5 +1,9 @@\n Tue May 12 07:24:18 1998  Mark Mitchell  <mmitchell@usa.net>\n \n+\t* cp-tree.h (CANONICAL_TYPE_VARIANT): New macro.\n+\t* method.c (build_mangled_name): Use it.\n+\t(build_decl_overload_real): Likewise.\n+\n \t* error.c (dump_simple_decl): New function, broken out from ...\n \t(dump_decl): Use it.\n "}, {"sha": "d02c7e74a1c6bd4a708b558621235a40311aa7a6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "patch": "@@ -596,6 +596,14 @@ struct lang_type\n #define TYPE_HAS_ASSIGNMENT(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.has_assignment)\n #define TYPE_HAS_REAL_ASSIGNMENT(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.has_real_assignment)\n \n+/* Returns the canonical version of TYPE.  In other words, if TYPE is\n+   a typedef, returns the underlying type.  The cv-qualification of\n+   the type returned matches the type input; they will always be\n+   compatible types.  */\n+#define CANONICAL_TYPE_VARIANT(NODE) \t\t\t\t\t\\\n+  (cp_build_type_variant (TYPE_MAIN_VARIANT (NODE), \t\t\t\\\n+\t\t\t  TYPE_READONLY (NODE), TYPE_VOLATILE (NODE)))\n+\n /* Nonzero for _CLASSTYPE means that operator new and delete are defined,\n    respectively.  */\n #define TYPE_GETS_NEW(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.gets_new)"}, {"sha": "5ebcac9e65f3585e7beb3b75a0c673f61e6d186a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7bc6a9ffaa55bd7593fe04984a46e2dc8f7175b5", "patch": "@@ -1004,15 +1004,14 @@ build_mangled_name (parmtypes, begin, end)\n     {\n       if (TYPE_PTRMEMFUNC_P (parmtypes))\n         parmtypes = TYPE_PTRMEMFUNC_FN_TYPE (parmtypes);\n+      parmtypes = CANONICAL_TYPE_VARIANT (parmtypes);\n       process_modifiers (parmtypes);\n       process_overload_item (parmtypes, FALSE);\n     }\n   else  {\n     for ( ; parmtypes!=NULL; parmtypes = TREE_CHAIN (parmtypes))\n       {\n-        parmtype = TREE_VALUE (parmtypes);\n-        parmtype = build_type_variant (TYPE_MAIN_VARIANT (parmtype), \n-                      TYPE_READONLY (parmtype), TYPE_VOLATILE (parmtype));\n+        parmtype = CANONICAL_TYPE_VARIANT (TREE_VALUE (parmtypes));\n         if (flag_do_squangling)       /* squangling style repeats */\n           {\n             if (parmtype == lasttype) \n@@ -1612,8 +1611,7 @@ build_decl_overload_real (dname, parms, ret_type, tparms, targs,\n               tree temp = TREE_VALUE (t);\n               TREE_USED (temp) = 0;\n               /* clear out the type variant in case we used it */\n-              temp = build_type_variant (TYPE_MAIN_VARIANT (temp),\n-                    TYPE_READONLY (temp), TYPE_VOLATILE (temp));\n+              temp = CANONICAL_TYPE_VARIANT (temp);\n               TREE_USED (temp) = 0;\n               t = TREE_CHAIN (t);\n             }"}]}