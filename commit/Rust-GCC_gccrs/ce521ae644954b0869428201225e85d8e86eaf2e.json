{"sha": "ce521ae644954b0869428201225e85d8e86eaf2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1MjFhZTY0NDk1NGIwODY5NDI4MjAxMjI1ZTg1ZDhlODZlYWYyZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-23T12:23:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-23T12:23:59Z"}, "message": "re PR tree-optimization/57380 (GCC 4.9.0 will not vectorize std::max and similar functions)\n\n2013-05-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57380\n\t* tree-ssa-phiprop.c (propagate_with_phi): Do not require at\n\tleast one invariant or re-used load.\n\t* passes.c (init_optimization_passes): Move pass_phiprop before\n\tpass_forwprop.\n\n\t* g++.dg/tree-ssa/pr57380.C: New testcase.\n\nFrom-SVN: r199246", "tree": {"sha": "817c953d76e27cedecd6b9e444751bfe1da13db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817c953d76e27cedecd6b9e444751bfe1da13db0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce521ae644954b0869428201225e85d8e86eaf2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce521ae644954b0869428201225e85d8e86eaf2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce521ae644954b0869428201225e85d8e86eaf2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce521ae644954b0869428201225e85d8e86eaf2e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75c7257f75227e3db09120e38562cf3a3c136ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c7257f75227e3db09120e38562cf3a3c136ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c7257f75227e3db09120e38562cf3a3c136ced"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "0c46d03ee9f145e6f20d57c19ceffc0b92caa145", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce521ae644954b0869428201225e85d8e86eaf2e", "patch": "@@ -1,3 +1,11 @@\n+2013-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57380\n+\t* tree-ssa-phiprop.c (propagate_with_phi): Do not require at\n+\tleast one invariant or re-used load.\n+\t* passes.c (init_optimization_passes): Move pass_phiprop before\n+\tpass_forwprop.\n+\n 2013-05-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "02f2022cea5200f8535c95921cba7de605733606", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=ce521ae644954b0869428201225e85d8e86eaf2e", "patch": "@@ -1402,12 +1402,12 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_ccp);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n+      NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_forwprop);\n       /* pass_build_alias is a dummy pass that ensures that we\n \t execute TODO_rebuild_alias at this point.  */\n       NEXT_PASS (pass_build_alias);\n       NEXT_PASS (pass_return_slot);\n-      NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_fre);\n       NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_merge_phi);"}, {"sha": "0a22b4a92bc30fe29683492c4f8bf795384377a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce521ae644954b0869428201225e85d8e86eaf2e", "patch": "@@ -1,3 +1,8 @@\n+2013-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57380\n+\t* g++.dg/tree-ssa/pr57380.C: New testcase.\n+\n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57381"}, {"sha": "0a2b2ad5f5534d6a492a364adf69be2fd948c93f", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr57380.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr57380.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr57380.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr57380.C?ref=ce521ae644954b0869428201225e85d8e86eaf2e", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt1\" } */\n+\n+struct my_array {\n+    int data[4];\n+};\n+\n+const int& my_max(const int& a, const int& b) {\n+    return a < b ? b : a;\n+}\n+\n+int f(my_array a, my_array b) {\n+    int res = 0;\n+    for (int i = 0; i < 4; ++i) {\n+\tres += my_max(a.data[i], b.data[i]);\n+    }\n+    return res;\n+}\n+\n+/* { dg-final { scan-tree-dump \"MAX_EXPR\" \"phiopt1\" } } */\n+/* { dg-final { cleanup-tree-dump \"phiopt1\" } } */"}, {"sha": "96d7ba6a9356d9d147a94d38e125e317aadda463", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce521ae644954b0869428201225e85d8e86eaf2e/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=ce521ae644954b0869428201225e85d8e86eaf2e", "patch": "@@ -247,7 +247,6 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n   ssa_op_iter i;\n   bool phi_inserted;\n   tree type = NULL_TREE;\n-  bool one_invariant = false;\n \n   if (!POINTER_TYPE_P (TREE_TYPE (ptr))\n       || !is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr))))\n@@ -282,17 +281,8 @@ propagate_with_phi (basic_block bb, gimple phi, struct phiprop_d *phivn,\n       if (!type\n \t  && TREE_CODE (arg) == SSA_NAME)\n \ttype = TREE_TYPE (phivn[SSA_NAME_VERSION (arg)].value);\n-      if (TREE_CODE (arg) == ADDR_EXPR\n-\t  && is_gimple_min_invariant (arg))\n-\tone_invariant = true;\n     }\n \n-  /* If we neither have an address of a decl nor can reuse a previously\n-     inserted load, do not hoist anything.  */\n-  if (!one_invariant\n-      && !type)\n-    return false;\n-\n   /* Find a dereferencing use.  First follow (single use) ssa\n      copy chains for ptr.  */\n   while (single_imm_use (ptr, &use, &use_stmt)"}]}