{"sha": "9339bda82ddf23889e540d6560ea56db8e9b85ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMzOWJkYTgyZGRmMjM4ODllNTQwZDY1NjBlYTU2ZGI4ZTliODVlYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-05-19T23:56:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-05-19T23:56:12Z"}, "message": "9661-1.cc: Avoid leaking the semaphores if a VERIFY fails.\n\n2006-05-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/objects/wchar_t/9661-1.cc: Avoid leaking the\n\tsemaphores if a VERIFY fails.\n\t* testsuite/27_io/objects/wchar_t/7.cc: Likewise.\n\t* testsuite/27_io/objects/char/9661-1.cc: Likewise.\n\t* testsuite/27_io/objects/char/7.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/seekoff/char/26777.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/char/13171-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/char/4879.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/close/char/9964.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/underflow/char/10097.cc: Likewise.\n\nFrom-SVN: r113916", "tree": {"sha": "9f50082ad9eef099320e0353073f66c05b6a7c02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f50082ad9eef099320e0353073f66c05b6a7c02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9339bda82ddf23889e540d6560ea56db8e9b85ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9339bda82ddf23889e540d6560ea56db8e9b85ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9339bda82ddf23889e540d6560ea56db8e9b85ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9339bda82ddf23889e540d6560ea56db8e9b85ec/comments", "author": null, "committer": null, "parents": [{"sha": "23249ac43c6d4d9dde16347bc44dc757e41f1d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23249ac43c6d4d9dde16347bc44dc757e41f1d8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23249ac43c6d4d9dde16347bc44dc757e41f1d8d"}], "stats": {"total": 184, "additions": 121, "deletions": 63}, "files": [{"sha": "dc26e705130ce5e3ad6ccf49fd22d3b1e346502d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -1,3 +1,17 @@\n+2006-05-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/27_io/objects/wchar_t/9661-1.cc: Avoid leaking the\n+\tsemaphores if a VERIFY fails.\n+\t* testsuite/27_io/objects/wchar_t/7.cc: Likewise.\n+\t* testsuite/27_io/objects/char/9661-1.cc: Likewise.\n+\t* testsuite/27_io/objects/char/7.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/seekoff/char/26777.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/char/13171-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/char/4879.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/close/char/9964.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/underflow/char/10097.cc: Likewise.\n+\n 2006-05-17  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/hashtable (hashtable<>::m_find): Remove; update callers."}, {"sha": "e976c370f8d40a086e8ccf4618bccd6819aa3940", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/4879.cc", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -1,7 +1,8 @@\n // { dg-require-fork \"\" }\n // { dg-require-mkfifo \"\" }\n  \n-// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,11 +34,15 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+\n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n // libstdc++/2913, libstdc++/4879\n // John Fardo  <jfardo@laurelnetworks.com>, Brad Garcia <garsh@attbi.com>\n-void\n+bool\n test_04()\n {\n   using namespace __gnu_test;\n@@ -60,20 +65,20 @@ test_04()\n     {\n       std::cerr << \"failed to fork\" << std::endl;\n       unlink(name);\n-      exit(-1);\n+      return false;\n     }\n   else if (fval == 0)\n     {\n       std::ifstream ifs(name);\n-      s1.wait ();\n+      s1.wait();\n       ifs.close();\n-      s2.signal ();\n+      s2.signal();\n       exit(0);\n     }\n \n   std::ofstream ofs(name);\n-  s1.signal ();\n-  s2.wait ();\n+  s1.signal();\n+  s2.wait();\n   ofs.put('t');\n \n   /*\n@@ -89,18 +94,15 @@ test_04()\n     {\n       test = false;\n       VERIFY( test );\n-      unlink(name);\n-      exit(-1);\n     }\n \n   unlink(name);\n+\n+  return test;\n }\n \n int\n main()\n {\n-  test_04();\n-  return 0;\n+  return !test_04();\n }\n-\n-"}, {"sha": "1b9c3ff90ecbf392fc340e91ebcea7ddfdc297ac", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/9964.cc", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -1,7 +1,8 @@\n // { dg-require-fork \"\" }\n // { dg-require-mkfifo \"\" }\n \n-// Copyright (C) 2001, 2002, 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,10 +33,14 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+\n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n // libstdc++/9964\n-void test_07()\n+bool test_07()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -56,28 +61,29 @@ void test_07()\n     {\n       filebuf fbin;\n       fbin.open(name, ios_base::in);\n-      s1.wait ();\n+      s1.wait();\n       fbin.close();\n-      s2.signal ();\n+      s2.signal();\n       exit(0);\n     }\n   \n   filebuf fb;\n   filebuf* ret = fb.open(name, ios_base::in | ios_base::out);\n   VERIFY( ret != NULL );\n   VERIFY( fb.is_open() );\n-  s1.signal ();\n-  s2.wait ();\n+  s1.signal();\n+  s2.wait();\n   fb.sputc('a');\n \n   ret = fb.close();\n   VERIFY( ret != NULL );\n   VERIFY( !fb.is_open() );\n+\n+  return test;\n }\n \n int\n main()\n {\n-  test_07();\n-  return 0;\n+  return !test_07();\n }"}, {"sha": "f1649580fec87b3de6a767234fa6b2e8515134b8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/13171-2.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13171-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13171-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13171-2.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -2,7 +2,7 @@\n // { dg-require-fork \"\" }\n // { dg-require-mkfifo \"\" }\n \n-// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,10 +28,13 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n \n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n // libstdc++/13171\n-void test01()\n+bool test01()\n {\n   bool test __attribute__((unused)) = true;\n   using namespace std;\n@@ -52,26 +55,27 @@ void test01()\n       fb.open(name, ios_base::out);\n       fb.sputc('S');\n       fb.pubsync();\n-      s1.signal ();\n-      s2.wait ();\n+      s1.signal();\n+      s2.wait();\n       fb.close();\n       exit(0);\n     }\n \n   filebuf fb;\n   fb.pubimbue(loc_fr);\n   fb.open(name, ios_base::in);\n-  s1.wait ();\n+  s1.wait();\n   VERIFY( fb.is_open() );\n   fb.pubimbue(loc_en);\n   filebuf::int_type c = fb.sgetc();\n   fb.close();\n   VERIFY( c == 'S' );\n-  s2.signal ();\n+  s2.signal();\n+\n+  return test;\n }\n \n int main()\n {\n-  test01();\n-  return 0;\n+  return !test01();\n }"}, {"sha": "14cfde77fbd51fd7549de5f1065065ccb492683c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -4,7 +4,7 @@\n \n // 2004-04-16  Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,10 +29,14 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+\n+// No asserts, avoid leaking the semaphore if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n // libstdc++/14975\n-void test01()\n+bool test01()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -57,7 +61,7 @@ void test01()\n \tfilebuf fbin;\n \tfbin.open(name, ios_base::in);\n       }\n-      s1.signal ();\n+      s1.signal();\n       exit(0);\n     }\n   \n@@ -67,7 +71,7 @@ void test01()\n   VERIFY( ret != NULL );\n   VERIFY( fb.is_open() );\n \n-  s1.wait ();\n+  s1.wait();\n \n   try\n     {\n@@ -80,10 +84,11 @@ void test01()\n   catch (std::exception&)\n     {\n     }\n+\n+  return test;\n }\n \n int main()\n {\n-  test01();\n-  return 0;\n+  return !test01();\n }"}, {"sha": "9cc973315a560409853d7a22fd5d4c58c4966a85", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/26777.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F26777.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F26777.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F26777.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -21,6 +21,9 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n #include <fstream>\n #include <sstream>\n@@ -31,7 +34,7 @@\n #include <sys/stat.h>\n \n // libstdc++/26777\n-void test01()\n+bool test01()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -77,10 +80,11 @@ void test01()\n   fbin.close();\n \n   VERIFY( oss.str() == \"Whatever\" );\n+\n+  return test;\n }\n \n int main()\n {\n-  test01();\n-  return 0;\n+  return !test01();\n }"}, {"sha": "ffc36a3fc0791b753ee156f4e07d033e41920dc8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/10097.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -30,6 +30,10 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+\n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n class UnderBuf : public std::filebuf\n@@ -46,7 +50,7 @@ class UnderBuf : public std::filebuf\n \n // libstdc++/10097\n // filebuf::underflow drops characters.\n-void test16()\n+bool test16()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -84,7 +88,7 @@ void test16()\n \n   UnderBuf fb;\n   fb.open(name, ios_base::in);\n-  \n+\n   fb.sgetc();\n   streamsize n = fb.pub_showmanyc();\n \n@@ -101,10 +105,11 @@ void test16()\n   fb.close();\n   s1.signal();\n   s2.wait();\n+\n+  return test;\n }\n \n int main() \n {\n-  test16();\n-  return 0;\n+  return !test16();\n }"}, {"sha": "a90fa03a5b5cf5035cae92cc763a13432f08a2da", "filename": "libstdc++-v3/testsuite/27_io/objects/char/7.cc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -3,7 +3,7 @@\n \n // 2003-04-26 Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,10 +30,14 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+\n+// No asserts, avoid leaking the semaphore if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n // Check that cout.flush() is called when last ios_base::Init is destroyed.\n-void test07()\n+bool test07()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -54,8 +58,8 @@ void test07()\n     {\n       filebuf fbout;\n       fbout.open(name, ios_base::in|ios_base::out);\n-      s1.wait ();\n-      VERIFY ( fbout.is_open() );\n+      VERIFY( fbout.is_open() );\n+      s1.wait();\n       cout.rdbuf(&fbout);\n       fbout.sputc('a');\n       // NB: fbout is *not* destroyed here!\n@@ -64,17 +68,18 @@ void test07()\n   \n   filebuf fbin;\n   fbin.open(name, ios_base::in);\n-  s1.signal ();\n+  s1.signal();\n   filebuf::int_type c = fbin.sbumpc();\n   VERIFY( c != filebuf::traits_type::eof() );\n   VERIFY( c == filebuf::traits_type::to_int_type('a') );\n \n   fbin.close();\n+\n+  return test;\n }\n \n int\n main()\n {\n-  test07();\n-  return 0;\n+  return !test07();\n }"}, {"sha": "4723282650361a73b07fa1a4e438b0791ecdd5e8", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9661-1.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -21,6 +21,9 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n #include <cstdio>\n #include <iostream>\n@@ -33,7 +36,7 @@\n // Check that cin.rdbuf()->sputbackc() puts characters back to stdin.\n // If cin.rdbuf() is a filebuf, this succeeds when stdin is a regular\n // file, but fails otherwise, hence the named fifo.\n-void test01()\n+bool test01()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -54,7 +57,7 @@ void test01()\n   if (child == 0)\n     {\n       FILE* file = fopen(name, \"r+\");\n-      VERIFY (file != NULL);\n+      VERIFY( file != NULL );\n       fputs(\"Whatever\\n\", file);\n       fflush(file);\n       s1.signal();\n@@ -85,10 +88,11 @@ void test01()\n   VERIFY( c5 == c4 );\n   s2.signal();\n   s1.wait();\n+\n+  return test;\n }\n \n int main()\n {\n-  test01();\n-  return 0;\n+  return !test01();\n }"}, {"sha": "1e962d7eda467bfbdd9416f43b64dc9663c00092", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/7.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -3,7 +3,7 @@\n \n // 2003-05-01 Petur Runolfsson  <peturr02@ru.is>\n \n-// Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,10 +30,14 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+\n+// No asserts, avoid leaking the semaphore if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n \n // Check that wcout.flush() is called when last ios_base::Init is destroyed.\n-void test07()\n+bool test07()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -46,7 +50,7 @@ void test07()\n   unlink(name);  \n   mkfifo(name, S_IRWXU);\n   semaphore s1;\n-  \n+\n   int child = fork();\n   VERIFY( child != -1 );\n \n@@ -63,17 +67,18 @@ void test07()\n   \n   wfilebuf fbin;\n   fbin.open(name, ios_base::in);\n-  s1.signal ();\n+  s1.signal();\n   wfilebuf::int_type c = fbin.sbumpc();\n   VERIFY( c != wfilebuf::traits_type::eof() );\n   VERIFY( c == wfilebuf::traits_type::to_int_type(L'a') );\n \n   fbin.close();\n+\n+  return test;\n }\n \n int\n main()\n {\n-  test07();\n-  return 0;\n+  return !test07();\n }"}, {"sha": "beee4046a216f5fc9dc1d3f3be5f4cf12d091761", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9661-1.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9339bda82ddf23889e540d6560ea56db8e9b85ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc?ref=9339bda82ddf23889e540d6560ea56db8e9b85ec", "patch": "@@ -21,6 +21,9 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n+// No asserts, avoid leaking the semaphores if a VERIFY fails.\n+#undef _GLIBCXX_ASSERT\n+\n #include <testsuite_hooks.h>\n #include <cstdio>\n #include <iostream>\n@@ -33,7 +36,7 @@\n // Check that wcin.rdbuf()->sputbackc() puts characters back to stdin.\n // If wcin.rdbuf() is a filebuf, this succeeds when stdin is a regular\n // file, but fails otherwise, hence the named fifo.\n-void test01()\n+bool test01()\n {\n   using namespace std;\n   using namespace __gnu_test;\n@@ -83,11 +86,12 @@ void test01()\n   VERIFY( c5 != WEOF );\n   VERIFY( c5 == c4 );\n   s2.signal();\n-  s1.wait(); \n+  s1.wait();\n+\n+  return test;\n }\n \n int main()\n {\n-  test01();\n-  return 0;\n+  return !test01();\n }"}]}