{"sha": "f2a79152758d093db319e0e87acee11f87796ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhNzkxNTI3NThkMDkzZGIzMTllMGU4N2FjZWUxMWY4Nzc5NmNlNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-03-17T14:37:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-03-17T14:37:04Z"}, "message": "re PR c++/19966 (Misleading message \"must take exactly one argument\")\n\n2005-03-17  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/19966\n\t* cp-tree.h (grok_op_properties): Change return type to void.\n\t* decl.c (grok_op_properties): Return early - don't check the\n\tarity - in case of a static member or an operator that cannot\n\tbe non-member; tidy a bit.\n\nFrom-SVN: r96609", "tree": {"sha": "698a20e4c2288d95d8b23329b6e8d3f3b13ced8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/698a20e4c2288d95d8b23329b6e8d3f3b13ced8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2a79152758d093db319e0e87acee11f87796ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a79152758d093db319e0e87acee11f87796ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a79152758d093db319e0e87acee11f87796ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a79152758d093db319e0e87acee11f87796ce6/comments", "author": null, "committer": null, "parents": [{"sha": "3bd62c453dbd6b0b17a431d9f1231017c25ca3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd62c453dbd6b0b17a431d9f1231017c25ca3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd62c453dbd6b0b17a431d9f1231017c25ca3a3"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "85ce155906e06de82327da9fd5cb35aa2036bb88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a79152758d093db319e0e87acee11f87796ce6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a79152758d093db319e0e87acee11f87796ce6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2a79152758d093db319e0e87acee11f87796ce6", "patch": "@@ -1,3 +1,11 @@\n+2005-03-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/19966\n+\t* cp-tree.h (grok_op_properties): Change return type to void.\n+\t* decl.c (grok_op_properties): Return early - don't check the\n+\tarity - in case of a static member or an operator that cannot\n+\tbe non-member; tidy a bit.\n+\n 2005-03-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20186"}, {"sha": "466d4dd8e8c21dadf32e63549db1994d3240bb6d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a79152758d093db319e0e87acee11f87796ce6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a79152758d093db319e0e87acee11f87796ce6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f2a79152758d093db319e0e87acee11f87796ce6", "patch": "@@ -3795,7 +3795,7 @@ extern int copy_fn_p\t\t\t\t(tree);\n extern tree get_scope_of_declarator             (const cp_declarator *);\n extern void grok_special_member_properties\t(tree);\n extern int grok_ctor_properties\t\t\t(tree, tree);\n-extern bool grok_op_properties\t\t\t(tree, int, bool);\n+extern void grok_op_properties\t\t\t(tree, int, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n extern void xref_basetypes\t\t\t(tree, tree);"}, {"sha": "d91b6ff302c4447879d82497f6fb374c314e2fee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a79152758d093db319e0e87acee11f87796ce6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a79152758d093db319e0e87acee11f87796ce6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f2a79152758d093db319e0e87acee11f87796ce6", "patch": "@@ -8648,11 +8648,10 @@ unary_op_p (enum tree_code code)\n \t  || code == TYPE_EXPR);\n }\n \n-/* DECL is a declaration for an overloaded operator.  Returns true if\n-   the declaration is valid; false otherwise.  If COMPLAIN is true,\n+/* DECL is a declaration for an overloaded operator.  If COMPLAIN is true,\n    errors are issued for invalid declarations.  */\n \n-bool\n+void\n grok_op_properties (tree decl, int friendp, bool complain)\n {\n   tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (decl));\n@@ -8661,10 +8660,6 @@ grok_op_properties (tree decl, int friendp, bool complain)\n   tree name = DECL_NAME (decl);\n   enum tree_code operator_code;\n   int arity;\n-  bool ok;\n-\n-  /* Assume that the declaration is valid.  */\n-  ok = true;\n \n   /* Count the number of arguments.  */\n   for (argtype = argtypes, arity = 0;\n@@ -8762,14 +8757,20 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t      || operator_code == COMPONENT_REF\n \t      || operator_code == ARRAY_REF\n \t      || operator_code == NOP_EXPR)\n-\t    error (\"%qD must be a nonstatic member function\", decl);\n+\t    {\n+\t      error (\"%qD must be a nonstatic member function\", decl);\n+\t      return;\n+\t    }\n \t  else\n \t    {\n \t      tree p;\n \n \t      if (DECL_STATIC_FUNCTION_P (decl))\n-\t\terror (\"%qD must be either a non-static member \"\n-                       \"function or a non-member function\", decl);\n+\t\t{\n+\t\t  error (\"%qD must be either a non-static member \"\n+\t\t\t \"function or a non-member function\", decl);\n+\t\t  return;\n+\t\t}\n \n \t      for (p = argtypes; p && p != void_list_node; p = TREE_CHAIN (p))\n \t\t{\n@@ -8784,20 +8785,19 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \t      if (!p || p == void_list_node)\n \t\t{\n \t\t  if (!complain)\n-\t\t    return false;\n+\t\t    return;\n \n \t\t  error (\"%qD must have an argument of class or \"\n \t\t\t \"enumerated type\",\n \t\t\t decl);\n-\t\t  ok = false;\n \t\t}\n \t    }\n \t}\n \n       /* There are no restrictions on the arguments to an overloaded\n \t \"operator ()\".  */\n       if (operator_code == CALL_EXPR)\n-\treturn ok;\n+\treturn;\n \n       if (IDENTIFIER_TYPENAME_P (name) && ! DECL_TEMPLATE_INFO (decl))\n \t{\n@@ -8982,7 +8982,6 @@ grok_op_properties (tree decl, int friendp, bool complain)\n \n     }\n \n-  return ok;\n }\n \f\n /* Return a string giving the keyword associate with CODE.  */"}]}