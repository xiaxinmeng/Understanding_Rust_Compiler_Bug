{"sha": "f497e36ae56f0f22b1d60171509c75f7b11f8663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ5N2UzNmFlNTZmMGYyMmIxZDYwMTcxNTA5Yzc1ZjdiMTFmODY2Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-14T14:33:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-14T14:33:13Z"}, "message": "c++: Simplify tsubst_template_decl\n\ntsubst_template_decl's control flow was also confusing.  This reorders\nand flattens some of the conditionals.\n\n\t* pt.c (tsubst_template_decl): Reorder and commonize some control\n\tpaths.", "tree": {"sha": "b7aeb392fc50b3e5dd27823374d7cab4166888a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7aeb392fc50b3e5dd27823374d7cab4166888a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f497e36ae56f0f22b1d60171509c75f7b11f8663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f497e36ae56f0f22b1d60171509c75f7b11f8663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f497e36ae56f0f22b1d60171509c75f7b11f8663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f497e36ae56f0f22b1d60171509c75f7b11f8663/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbaab134ca4603f7d4ac0d1646f40f9c13405ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbaab134ca4603f7d4ac0d1646f40f9c13405ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbaab134ca4603f7d4ac0d1646f40f9c13405ff"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "bcae21c0d390ad5fc49f9be43e1efd830c33b0fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f497e36ae56f0f22b1d60171509c75f7b11f8663/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f497e36ae56f0f22b1d60171509c75f7b11f8663/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f497e36ae56f0f22b1d60171509c75f7b11f8663", "patch": "@@ -1,5 +1,8 @@\n 2020-05-14  Nathan Sidwell  <nathan@acm.org>\n \n+\t* pt.c (tsubst_template_decl): Reorder and commonize some control\n+\tpaths.\n+\n \t* pt.c (tsubst_friend_function): Simplify control flow.\n \n \t* pt.c (lookup_template_class_1): Remove unnecessary else by"}, {"sha": "5ca659e9f288b40198cb185451f1122451001e38", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f497e36ae56f0f22b1d60171509c75f7b11f8663/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f497e36ae56f0f22b1d60171509c75f7b11f8663/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f497e36ae56f0f22b1d60171509c75f7b11f8663", "patch": "@@ -14031,52 +14031,50 @@ tsubst_template_decl (tree t, tree args, tsubst_flags_t complain,\n     = tsubst_template_parms (DECL_TEMPLATE_PARMS (t), args,\n \t\t\t     complain);\n \n-  if (TREE_CODE (decl) == TYPE_DECL\n-      && !TYPE_DECL_ALIAS_P (decl))\n+  bool class_p = false;\n+  tree inner = decl;\n+  ++processing_template_decl;\n+  if (TREE_CODE (inner) == FUNCTION_DECL)\n+    inner = tsubst_function_decl (inner, args, complain, lambda_fntype);\n+  else\n     {\n-      tree new_type;\n-      ++processing_template_decl;\n-      new_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n-      --processing_template_decl;\n-      if (new_type == error_mark_node)\n-\treturn error_mark_node;\n+      if (TREE_CODE (inner) == TYPE_DECL && !TYPE_DECL_ALIAS_P (inner))\n+\t{\n+\t  class_p = true;\n+\t  inner = TREE_TYPE (inner);\n+\t}\n+      inner = tsubst (inner, args, complain, in_decl);\n+    }\n+  --processing_template_decl;\n+  if (inner == error_mark_node)\n+    return error_mark_node;\n \n-      TREE_TYPE (r) = new_type;\n+  if (class_p)\n+    {\n       /* For a partial specialization, we need to keep pointing to\n \t the primary template.  */\n       if (!DECL_TEMPLATE_SPECIALIZATION (t))\n-\tCLASSTYPE_TI_TEMPLATE (new_type) = r;\n-      DECL_TEMPLATE_RESULT (r) = TYPE_MAIN_DECL (new_type);\n-      DECL_TI_ARGS (r) = CLASSTYPE_TI_ARGS (new_type);\n-      DECL_CONTEXT (r) = TYPE_CONTEXT (new_type);\n+\tCLASSTYPE_TI_TEMPLATE (inner) = r;\n+\n+      DECL_TI_ARGS (r) = CLASSTYPE_TI_ARGS (inner);\n+      inner = TYPE_MAIN_DECL (inner);\n+    }\n+  else if (lambda_fntype)\n+    {\n+      tree args = template_parms_to_args (DECL_TEMPLATE_PARMS (r));\n+      DECL_TEMPLATE_INFO (inner) = build_template_info (r, args);\n     }\n   else\n     {\n-      tree new_decl;\n-      ++processing_template_decl;\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tnew_decl = tsubst_function_decl (decl, args, complain, lambda_fntype);\n-      else\n-\tnew_decl = tsubst (decl, args, complain, in_decl);\n-      --processing_template_decl;\n-      if (new_decl == error_mark_node)\n-\treturn error_mark_node;\n-\n-      DECL_TEMPLATE_RESULT (r) = new_decl;\n-      TREE_TYPE (r) = TREE_TYPE (new_decl);\n-      DECL_CONTEXT (r) = DECL_CONTEXT (new_decl);\n-      if (lambda_fntype)\n-\t{\n-\t  tree args = template_parms_to_args (DECL_TEMPLATE_PARMS (r));\n-\t  DECL_TEMPLATE_INFO (new_decl) = build_template_info (r, args);\n-\t}\n-      else\n-\t{\n-\t  DECL_TI_TEMPLATE (new_decl) = r;\n-\t  DECL_TI_ARGS (r) = DECL_TI_ARGS (new_decl);\n-\t}\n+      if (TREE_CODE (decl) != TYPE_DECL || !TYPE_DECL_ALIAS_P (decl))\n+\tDECL_TI_TEMPLATE (inner) = r;\n+      DECL_TI_ARGS (r) = DECL_TI_ARGS (inner);\n     }\n \n+  DECL_TEMPLATE_RESULT (r) = inner;\n+  TREE_TYPE (r) = TREE_TYPE (inner);\n+  DECL_CONTEXT (r) = DECL_CONTEXT (inner);\n+\n   DECL_TEMPLATE_INSTANTIATIONS (r) = NULL_TREE;\n   DECL_TEMPLATE_SPECIALIZATIONS (r) = NULL_TREE;\n "}]}