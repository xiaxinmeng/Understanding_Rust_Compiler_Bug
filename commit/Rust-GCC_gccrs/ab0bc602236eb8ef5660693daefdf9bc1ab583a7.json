{"sha": "ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwYmM2MDIyMzZlYjhlZjU2NjA2OTNkYWVmZGY5YmMxYWI1ODNhNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-08-02T07:59:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-08-02T07:59:14Z"}, "message": "cp-tree.h (finish_stmt): Do not declare.\n\n2013-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (finish_stmt): Do not declare.\n\t* decl.c (finish_stmt): Do not define.\n\t* parser.c (cp_parser_expression_statement,\n\tcp_parser_declaration_statement,\n\tcp_parser_transaction_cancel): Don't call finish_stmt.\n\t* semantics.c (finish_expr_stmt, finish_if_stmt,\n\tfinish_while_stmt, finish_do_stmt, finish_return_stmt,\n\tfinish_for_stmt, finish_switch_stmt, finish_compound_stmt,\n\tfinish_transaction_stmt): Likewise.\n\nFrom-SVN: r201427", "tree": {"sha": "2d0311de95b7c0a9bf0f0a5d079d2ce65ad5c23b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d0311de95b7c0a9bf0f0a5d079d2ce65ad5c23b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/comments", "author": null, "committer": null, "parents": [{"sha": "7dec245a8c70c71449ce4fc09a4cb854596f9a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dec245a8c70c71449ce4fc09a4cb854596f9a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dec245a8c70c71449ce4fc09a4cb854596f9a2b"}], "stats": {"total": 37, "additions": 12, "deletions": 25}, "files": [{"sha": "95cfb1beb4987ab2eedb18d22103a425293b16e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "patch": "@@ -1,3 +1,15 @@\n+2013-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.h (finish_stmt): Do not declare.\n+\t* decl.c (finish_stmt): Do not define.\n+\t* parser.c (cp_parser_expression_statement,\n+\tcp_parser_declaration_statement,\n+\tcp_parser_transaction_cancel): Don't call finish_stmt.\n+\t* semantics.c (finish_expr_stmt, finish_if_stmt,\n+\tfinish_while_stmt, finish_do_stmt, finish_return_stmt,\n+\tfinish_for_stmt, finish_switch_stmt, finish_compound_stmt,\n+\tfinish_transaction_stmt): Likewise.\n+\n 2013-08-01  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \tPR c++/54537"}, {"sha": "e4363903c153227ff69def231d54853ffe88aed2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "patch": "@@ -5217,7 +5217,6 @@ extern tree grokmethod\t\t\t\t(cp_decl_specifier_seq *, const cp_declarator *, tree)\n extern void maybe_register_incomplete_var\t(tree);\n extern void maybe_commonize_var\t\t\t(tree);\n extern void complete_vars\t\t\t(tree);\n-extern void finish_stmt\t\t\t\t(void);\n extern tree static_fn_type\t\t\t(tree);\n extern void revert_static_member_fn\t\t(tree);\n extern void fixup_anonymous_aggr\t\t(tree);"}, {"sha": "d49ed2903bf6fe989f7b37b8926e63c12402c58a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "patch": "@@ -14266,13 +14266,6 @@ cxx_maybe_build_cleanup (tree decl, tsubst_flags_t complain)\n }\n \n \f\n-/* When a stmt has been parsed, this function is called.  */\n-\n-void\n-finish_stmt (void)\n-{\n-}\n-\n /* Return the FUNCTION_TYPE that corresponds to MEMFNTYPE, which can be a\n    FUNCTION_DECL, METHOD_TYPE, FUNCTION_TYPE, pointer or reference to\n    METHOD_TYPE or FUNCTION_TYPE, or pointer to member function.  */"}, {"sha": "c5d398a5bafdec58b94a0cdeac31d1306e68ad07", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "patch": "@@ -9419,8 +9419,6 @@ cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)\n     statement = finish_stmt_expr_expr (statement, in_statement_expr);\n   else if (statement)\n     statement = finish_expr_stmt (statement);\n-  else\n-    finish_stmt ();\n \n   return statement;\n }\n@@ -10472,9 +10470,6 @@ cp_parser_declaration_statement (cp_parser* parser)\n \n   /* Free any declarators allocated.  */\n   obstack_free (&declarator_obstack, p);\n-\n-  /* Finish off the statement.  */\n-  finish_stmt ();\n }\n \n /* Some dependent statements (like `if (cond) statement'), are\n@@ -28609,7 +28604,6 @@ cp_parser_transaction_cancel (cp_parser *parser)\n \n   stmt = build_tm_abort_call (token->location, is_outer);\n   add_stmt (stmt);\n-  finish_stmt ();\n \n   return stmt;\n }"}, {"sha": "3bc09b9ef3f44eebd5667ce607b4855854cae86a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0bc602236eb8ef5660693daefdf9bc1ab583a7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ab0bc602236eb8ef5660693daefdf9bc1ab583a7", "patch": "@@ -641,8 +641,6 @@ finish_expr_stmt (tree expr)\n       r = add_stmt (expr);\n     }\n \n-  finish_stmt ();\n-\n   return r;\n }\n \n@@ -707,7 +705,6 @@ finish_if_stmt (tree if_stmt)\n   tree scope = IF_SCOPE (if_stmt);\n   IF_SCOPE (if_stmt) = NULL;\n   add_stmt (do_poplevel (scope));\n-  finish_stmt ();\n }\n \n /* Begin a while-statement.  Returns a newly created WHILE_STMT if\n@@ -740,7 +737,6 @@ void\n finish_while_stmt (tree while_stmt)\n {\n   WHILE_BODY (while_stmt) = do_poplevel (WHILE_BODY (while_stmt));\n-  finish_stmt ();\n }\n \n /* Begin a do-statement.  Returns a newly created DO_STMT if\n@@ -778,7 +774,6 @@ finish_do_stmt (tree cond, tree do_stmt)\n {\n   cond = maybe_convert_cond (cond);\n   DO_COND (do_stmt) = cond;\n-  finish_stmt ();\n }\n \n /* Finish a return-statement.  The EXPRESSION returned, if any, is as\n@@ -815,7 +810,6 @@ finish_return_stmt (tree expr)\n   TREE_NO_WARNING (r) |= no_warning;\n   r = maybe_cleanup_point_expr_void (r);\n   r = add_stmt (r);\n-  finish_stmt ();\n \n   return r;\n }\n@@ -941,8 +935,6 @@ finish_for_stmt (tree for_stmt)\n       *scope_ptr = NULL;\n       add_stmt (do_poplevel (scope));\n     }\n-\n-  finish_stmt ();\n }\n \n /* Begin a range-for-statement.  Returns a new RANGE_FOR_STMT.\n@@ -1076,7 +1068,6 @@ finish_switch_stmt (tree switch_stmt)\n   SWITCH_STMT_BODY (switch_stmt) =\n     pop_stmt_list (SWITCH_STMT_BODY (switch_stmt));\n   pop_switch ();\n-  finish_stmt ();\n \n   scope = SWITCH_STMT_SCOPE (switch_stmt);\n   SWITCH_STMT_SCOPE (switch_stmt) = NULL;\n@@ -1298,7 +1289,6 @@ finish_compound_stmt (tree stmt)\n \n   /* ??? See c_end_compound_stmt wrt statement expressions.  */\n   add_stmt (stmt);\n-  finish_stmt ();\n }\n \n /* Finish an asm-statement, whose components are a STRING, some\n@@ -5208,7 +5198,6 @@ finish_transaction_stmt (tree stmt, tree compound_stmt, int flags, tree noex)\n \n   if (compound_stmt)\n     finish_compound_stmt (compound_stmt);\n-  finish_stmt ();\n }\n \n /* Build a __transaction_atomic or __transaction_relaxed expression.  If"}]}