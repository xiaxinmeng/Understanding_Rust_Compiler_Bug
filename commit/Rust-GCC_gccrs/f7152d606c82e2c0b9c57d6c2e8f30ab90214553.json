{"sha": "f7152d606c82e2c0b9c57d6c2e8f30ab90214553", "node_id": "C_kwDOANBUbNoAKGY3MTUyZDYwNmM4MmUyYzBiOWM1N2Q2YzJlOGYzMGFiOTAyMTQ1NTM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-13T09:01:44Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:28Z"}, "message": "libproc_macro: Add punct type interface\n\nAdd the Punct rust type interface for the libproc_macro.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add punct module.\n\t* librust/proc_macro/rust/punct.rs: Add Punct type.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "c978cc1473927b33d92b4cd3cfc2fb94a5f3e2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c978cc1473927b33d92b4cd3cfc2fb94a5f3e2d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7152d606c82e2c0b9c57d6c2e8f30ab90214553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7152d606c82e2c0b9c57d6c2e8f30ab90214553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7152d606c82e2c0b9c57d6c2e8f30ab90214553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7152d606c82e2c0b9c57d6c2e8f30ab90214553/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "570094e524d9b9205eefc42ab3cbffa52b9653c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/570094e524d9b9205eefc42ab3cbffa52b9653c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/570094e524d9b9205eefc42ab3cbffa52b9653c7"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "1bb8e2477622e49f15ab0307ec993b6c1a8bec14", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7152d606c82e2c0b9c57d6c2e8f30ab90214553/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7152d606c82e2c0b9c57d6c2e8f30ab90214553/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=f7152d606c82e2c0b9c57d6c2e8f30ab90214553", "patch": "@@ -1,11 +1,13 @@\n pub use ident::Ident;\n pub use literal::Literal;\n+pub use punct::Punct;\n pub use span::Span;\n use std::error;\n use std::fmt;\n \n mod ident;\n mod literal;\n+mod punct;\n mod span;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "1389122e299e1a9af5f2a6738bf227f6d8605a0b", "filename": "librust/proc_macro/rust/punct.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7152d606c82e2c0b9c57d6c2e8f30ab90214553/librust%2Fproc_macro%2Frust%2Fpunct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7152d606c82e2c0b9c57d6c2e8f30ab90214553/librust%2Fproc_macro%2Frust%2Fpunct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fpunct.rs?ref=f7152d606c82e2c0b9c57d6c2e8f30ab90214553", "patch": "@@ -0,0 +1,75 @@\n+use std::fmt;\n+use Spacing;\n+use Span;\n+\n+#[derive(Clone)]\n+pub struct Punct {\n+    // Internal implementation details.\n+}\n+\n+impl Punct {\n+    /// Creates a new [Punct] from a given character and spacing.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `ch` - The punctuation character.\n+    /// * `spacing` - The link between this character and the next one.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the `ch` argument is not a valid\n+    /// punctuation character allowed by the language.\n+    pub fn new(_ch: char, _spacing: Spacing) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the value for this punctuation character as `char`.\n+    pub fn as_char(&self) -> char {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the [`Spacing`] of this punctuation character, indicating whether\n+    /// the following character can be combined into a multi-character operator\n+    /// or not.\n+    pub fn spacing(&self) -> Spacing {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the [`Span`] for this punctuation character.\n+    pub fn span(&self) -> Span {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Set the span for this punctuation character.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `span` - The new span value.\n+    pub fn set_span(&mut self, _span: Span) {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Display for Punct {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Debug for Punct {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl PartialEq<char> for Punct {\n+    fn eq(&self, _rhs: &char) -> bool {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl PartialEq<Punct> for char {\n+    fn eq(&self, _rhs: &Punct) -> bool {\n+        todo!(\"Implement this function\")\n+    }\n+}"}]}