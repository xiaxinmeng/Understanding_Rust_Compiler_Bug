{"sha": "7e26828068e0242923b64942ab2f819cbaeef9ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyNjgyODA2OGUwMjQyOTIzYjY0OTQyYWIyZjgxOWNiYWVlZjljZQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-12T14:55:21Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-12T14:55:21Z"}, "message": "In libobjc/:\n\n        * Makefile.in (%_gc.lo): New pattern rules to build the\n        garbage-collected version of the library.  Removed rules for\n        specific files that are no longer needed.  Standardized all rules.\n        (C_SOURCE_FILES, OBJC_SOURCE_FILES): New variables.\n        (OBJS, OBJS_GC): Compute these from C_SOURCE_FILES and\n        OBJC_SOURCE_FILES.\n        (INCLUDES): Removed the unused include -I$(srcdir)/objc.\n\n        * memory.c (objc_calloc): Fixed call to GC_malloc when building\n        with Garbage Colletion.\n\nFrom-SVN: r164231", "tree": {"sha": "3eea0fc31fc22bc008c32ffdfb470e34e07e329e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eea0fc31fc22bc008c32ffdfb470e34e07e329e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e26828068e0242923b64942ab2f819cbaeef9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e26828068e0242923b64942ab2f819cbaeef9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e26828068e0242923b64942ab2f819cbaeef9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e26828068e0242923b64942ab2f819cbaeef9ce/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "075abad5eeda59a71431e749ff167e15f7904962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075abad5eeda59a71431e749ff167e15f7904962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075abad5eeda59a71431e749ff167e15f7904962"}], "stats": {"total": 314, "additions": 140, "deletions": 174}, "files": [{"sha": "39bcd1626cf420c7d834c04519b2dfbe20df3489", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e26828068e0242923b64942ab2f819cbaeef9ce/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e26828068e0242923b64942ab2f819cbaeef9ce/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=7e26828068e0242923b64942ab2f819cbaeef9ce", "patch": "@@ -1,3 +1,18 @@\n+2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* Makefile.in (%_gc.lo): New pattern rules to build the\n+\tgarbage-collected version of the library.  Removed rules for\n+\tspecific files that are no longer needed.  Standardized all rules.\n+\t(C_SOURCE_FILES, OBJC_SOURCE_FILES): New variables.\n+\t(OBJS, OBJS_GC): Compute these from C_SOURCE_FILES and\n+\tOBJC_SOURCE_FILES.\n+\t(INCLUDES): Removed the unused include -I$(srcdir)/objc.\n+\n+2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\t* memory.c (objc_calloc): Fixed call to GC_malloc when building\n+\twith Garbage Colletion.\n+\t\n 2010-09-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* memory.c: Do not include objc-private/runtime.h."}, {"sha": "e5116a9678010255916596a213f97c29b1801381", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 124, "deletions": 173, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e26828068e0242923b64942ab2f819cbaeef9ce/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e26828068e0242923b64942ab2f819cbaeef9ce/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=7e26828068e0242923b64942ab2f819cbaeef9ce", "patch": "@@ -97,52 +97,17 @@ OBJC_BOEHM_GC=@OBJC_BOEHM_GC@\n OBJC_BOEHM_GC_INCLUDES=@OBJC_BOEHM_GC_INCLUDES@\n OBJC_BOEHM_GC_LIBS=../boehm-gc/libgcjgc_convenience.la $(thread_libs_and_flags)\n \n-INCLUDES = -I$(srcdir)/objc  -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n+INCLUDES = -I$(srcdir)/$(MULTISRCTOP)../gcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../gcc/config \\\n   -I$(MULTIBUILDTOP)../../$(host_subdir)/gcc \\\n   -I$(srcdir)/$(MULTISRCTOP)../include \\\n   $(OBJC_BOEHM_GC_INCLUDES)\n \n-\n-.SUFFIXES:\n-.SUFFIXES: .c .m .lo\n-\n-.c.lo:\n-\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) $(INCLUDES) $<\n-\n-.m.lo:\n-\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) $(INCLUDES) $<\n-\n-# Flags to pass to a recursive make.\n-FLAGS_TO_PASS = \\\n-\t\"AR=$(AR)\" \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"EXTRA_OFILES=$(EXTRA_OFILES)\" \\\n-\t\"HDEFINES=$(HDEFINES)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBTOOL=$(LIBTOOL)\" \\\n-\t\"LOADLIBES=$(LOADLIBES)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"libsubdir=$(libsubdir)\" \\\n-\t\"tooldir=$(tooldir)\"\n-\n-all: libobjc$(libsuffix).la $(OBJC_BOEHM_GC)\n-\t: $(MAKE) ; exec $(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all\n+##\n+## The list of header/source files\n+##\n \n # User-visible header files, from the objc/ directory\n-\n OBJC_H = \\\n   objc.h \\\n   objc-exception.h \\\n@@ -158,11 +123,11 @@ OBJC_H = \\\n   objc-list.h \\\n   sarray.h \\\n   thr.h \\\n+  \\\n   typedstream.h\n \n # User-visible header files containing deprecated APIs, from the\n # objc/deprecated directory\n-\n OBJC_DEPRECATED_H = \\\n   MetaClass.h \\\n   Object.h \\\n@@ -176,165 +141,151 @@ OBJC_DEPRECATED_H = \\\n   struct_objc_selector.h \\\n   typedstream.h \n \n-# Modules that comprise the runtime library.\n-\n-OBJS =  \\\n-   NXConstStr.lo \\\n-   Object.lo \\\n-   Protocol.lo \\\n-   archive.lo \\\n-   class.lo \\\n-   encoding.lo \\\n-   error.lo \\\n-   gc.lo \\\n-   hash.lo \\\n-   init.lo \\\n-   linking.lo \\\n-   memory.lo \\\n-   nil_method.lo \\\n-   objects.lo \\\n-   sarray.lo \\\n-   selector.lo \\\n-   sendmsg.lo \\\n-   thr.lo \\\n-   exception.lo\n-\n+# Objective-C source files to compile\n+OBJC_SOURCE_FILES = \\\n+   NXConstStr.m \\\n+   Object.m \\\n+   Protocol.m \\\n+   linking.m\n+\n+# C source files to compile\n+C_SOURCE_FILES = \\\n+   archive.c \\\n+   class.c \\\n+   encoding.c \\\n+   error.c \\\n+   gc.c \\\n+   hash.c \\\n+   init.c \\\n+   memory.c \\\n+   nil_method.c \\\n+   objects.c \\\n+   sarray.c \\\n+   selector.c \\\n+   sendmsg.c \\\n+   thr.c \\\n+   exception.c\n+\n+# Object files to link (when the library is linked with no GC (Garbage Collection))\n+OBJS = \\\n+  $(patsubst %.m,%.lo,$(OBJC_SOURCE_FILES)) \\\n+  $(patsubst %.c,%.lo,$(C_SOURCE_FILES))\n+\n+# Object files to link (when the library is linked with GC (Garbage Collection))\n OBJS_GC = \\\n-   NXConstStr_gc.lo \\\n-   Object_gc.lo \\\n-   Protocol_gc.lo \\\n-   archive_gc.lo \\\n-   class_gc.lo \\\n-   encoding_gc.lo \\\n-   error_gc.lo \\\n-   gc_gc.lo \\\n-   hash_gc.lo \\\n-   init_gc.lo \\\n-   linking_gc.lo \\\n-   memory_gc.lo \\\n-   nil_method_gc.lo \\\n-   objects_gc.lo \\\n-   sarray_gc.lo \\\n-   selector_gc.lo \\\n-   sendmsg_gc.lo \\\n-   thr_gc.lo \\\n-   exception_gc.lo\n+  $(patsubst %.m,%_gc.lo,$(OBJC_SOURCE_FILES)) \\\n+  $(patsubst %.c,%_gc.lo,$(C_SOURCE_FILES))\n \n-runtime-info.h: \n-\techo \"\" > tmp-runtime.m\n-\techo \"/* This file is automatically generated */\" > $@\n-\t$(CC) $(MULTIFLAGS) -print-objc-runtime-info -S tmp-runtime.m >> $@\n-\trm -f tmp-runtime.m tmp-runtime.s\n \n-archive_gc.lo: archive.c\n-\t$(LIBTOOL_COMPILE) $(CC) -Wno-deprecated-declarations -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(OBJC_GCFLAGS) $(INCLUDES) $<\n-\n-archive.lo: archive.c\n-\t$(LIBTOOL_COMPILE) $(CC) -Wno-deprecated-declarations -c $(ALL_CFLAGS) \\\n-\t\t$(INCLUDES) $<\n+##\n+## The rules to build\n+##\n \n-class_gc.lo: class.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n-\n-encoding_gc.lo: encoding.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+# Flags to pass to a recursive make.\n+FLAGS_TO_PASS = \\\n+\t\"AR=$(AR)\" \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"EXTRA_OFILES=$(EXTRA_OFILES)\" \\\n+\t\"HDEFINES=$(HDEFINES)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBTOOL=$(LIBTOOL)\" \\\n+\t\"LOADLIBES=$(LOADLIBES)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"libsubdir=$(libsubdir)\" \\\n+\t\"tooldir=$(tooldir)\"\n \n-error_gc.lo: error.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) -o $@ $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+# The 'all' rule must be the first one so that it is executed if\n+# nothing is specified on the command-line.\n+all: libobjc$(libsuffix).la $(OBJC_BOEHM_GC)\n+\t: $(MAKE) ; exec $(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all\n \n-gc.lo: gc.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(INCLUDES) $<\n+.SUFFIXES:\n+.SUFFIXES: .c .m .lo\n \n-gc_gc.lo: gc.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+%.lo: %.c\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) \\\n+\t   -o $@\n \n-hash_gc.lo: hash.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+%_gc.lo: %.c\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) $(OBJC_GCFLAGS) \\\n+\t   -o $@\n \n-init_gc.lo: init.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+%.lo: %.m\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) -fgnu-runtime \\\n+\t   -o $@\n \n-linking.lo: linking.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(INCLUDES) $<\n+%_gc.lo: %.m\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) $(OBJC_GCFLAGS) -fgnu-runtime \\\n+\t   -o $@\n \n-linking_gc.lo: linking.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(OBJC_GCFLAGS) $(INCLUDES) $<\n+# sendmsg has a special rule because it depends on runtime-info.h.\n+runtime-info.h: \n+\techo \"\" > tmp-runtime.m\n+\techo \"/* This file is automatically generated */\" > $@\n+\t$(CC) $(MULTIFLAGS) -print-objc-runtime-info -S tmp-runtime.m >> $@\n+\trm -f tmp-runtime.m tmp-runtime.s\n \n-memory_gc.lo: memory.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) -o $@ $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+sendmsg.lo: sendmsg.c runtime-info.h\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) \\\n+\t   -o $@\n \n-nil_method_gc.lo: nil_method.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) -o $@ $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+sendmsg_gc.lo: sendmsg.c runtime-info.h\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) $(OBJC_GCFLAGS) \\\n+\t   -o $@\n \n-NXConstStr.lo: NXConstStr.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(INCLUDES) $<\n+# These files have separate rules because they require special\n+# compiler flags.\n+archive.lo: archive.c\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) -Wno-deprecated-declarations \\\n+\t   -o $@\n \n-NXConstStr_gc.lo: NXConstStr.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(OBJC_GCFLAGS) $(INCLUDES) $<\n+archive_gc.lo: archive.c\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) $(OBJC_GCFLAGS) -Wno-deprecated-declarations \\\n+\t   -o $@\n \n # -Wno-deprecated-declarations is for the objc/typedstream.h functions.\n Object.lo: Object.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -Wno-deprecated-declarations \\\n-\t\t-c -o $@ $(ALL_CFLAGS) $(INCLUDES) $<\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) -fgnu-runtime -Wno-deprecated-declarations \\\n+\t   -o $@\n \n # -Wno-deprecated-declarations is for the objc/typedstream.h functions.\n Object_gc.lo: Object.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -Wno-deprecated-declarations \\\n-\t\t-c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) $(INCLUDES) $<\n-\n-objects_gc.lo: objects.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c $(ALL_CFLAGS) -o $@ $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n-\n-Protocol.lo: Protocol.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(INCLUDES) $<\n-\n-Protocol_gc.lo: Protocol.m\n-\t$(LIBTOOL_COMPILE) $(CC) -fgnu-runtime -c -o $@ $(ALL_CFLAGS) \\\n-\t\t$(OBJC_GCFLAGS) $(INCLUDES) $<\n-\n-sarray_gc.lo: sarray.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n-\n-selector_gc.lo: selector.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n-\n-sendmsg.lo: sendmsg.c runtime-info.h\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(INCLUDES) $<\n-\n-sendmsg_gc.lo: sendmsg.c runtime-info.h\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n-\n-thr_gc.lo: thr.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t$(INCLUDES) $<\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) $(OBJC_GCFLAGS) -fgnu-runtime -Wno-deprecated-declarations \\\n+\t   -o $@\n \n # -Wno-deprecated-declarations is to silence warnings from using \n # _objc_unexpected_exception.\n exception.lo: exception.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) \\\n-\t\t-fexceptions -Wno-deprecated-declarations $(INCLUDES) $<\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) -fexceptions -Wno-deprecated-declarations \\\n+\t   -o $@\n \n exception_gc.lo: exception.c\n-\t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t-fexceptions -Wno-deprecated-declarations $(INCLUDES) $<\n+\t$(LIBTOOL_COMPILE) $(CC) $< -c \\\n+\t   $(ALL_CFLAGS) $(INCLUDES) $(OBJC_GCFLAGS) -fexceptions -Wno-deprecated-declarations \\\n+\t   -o $@\n \n doc: info dvi pdf html\n \n@@ -403,7 +354,7 @@ install-libs: installdirs\n \t$(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=\"$@\"\n \t@-$(LIBTOOL) --mode=finish $(DESTDIR)$(toolexeclibdir)\n \n-# Copy Objective C headers to installation include directory.\n+# Copy Objective-C headers to installation include directory.\n install-headers:\n \t$(SHELL) $(multi_basedir)/mkinstalldirs $(DESTDIR)$(libsubdir)/$(includedirname)/objc\n \tfor file in $(OBJC_H); do \\"}, {"sha": "19a450ad86017af11592a17451dad493aff73815", "filename": "libobjc/memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e26828068e0242923b64942ab2f819cbaeef9ce/libobjc%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e26828068e0242923b64942ab2f819cbaeef9ce/libobjc%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fmemory.c?ref=7e26828068e0242923b64942ab2f819cbaeef9ce", "patch": "@@ -78,7 +78,7 @@ objc_calloc (size_t nelem, size_t size)\n {\n   /* Note that GC_malloc returns cleared memory (see documentation) so\n      there is no need to clear it.  */\n-  void *res = (void *)(GC_malloc (nelem, size));\n+  void *res = (void *)(GC_malloc (nelem * size));\n   if (! res)\n     _objc_abort (\"Virtual memory exhausted\\n\");\n   return res;"}]}