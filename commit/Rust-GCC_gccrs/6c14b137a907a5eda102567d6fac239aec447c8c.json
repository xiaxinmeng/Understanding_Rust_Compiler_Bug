{"sha": "6c14b137a907a5eda102567d6fac239aec447c8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxNGIxMzdhOTA3YTVlZGExMDI1NjdkNmZhYzIzOWFlYzQ0N2M4Yw==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-11-11T23:23:15Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-11-11T23:23:15Z"}, "message": "gcc/\n\t* tree-ssa-dse.c (struct address_walk_data, memory_ssa_name_same)\n\t(memory_address_same): New.\n\t(dse_optimize_stmt): Call memory_address_same.\ngcc/testsuite/\n\t* gcc.c-torture/execute/20051110-1.c,\n\tgcc.c-torture/execute/20051110-2.c: New tests.\n\nFrom-SVN: r106807", "tree": {"sha": "f2c1d5283c34ae068914def3e26a1ccec575de71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2c1d5283c34ae068914def3e26a1ccec575de71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c14b137a907a5eda102567d6fac239aec447c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c14b137a907a5eda102567d6fac239aec447c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c14b137a907a5eda102567d6fac239aec447c8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c14b137a907a5eda102567d6fac239aec447c8c/comments", "author": null, "committer": null, "parents": [{"sha": "44087d555cb9baf64a5a7dde3f46653a971b8e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44087d555cb9baf64a5a7dde3f46653a971b8e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44087d555cb9baf64a5a7dde3f46653a971b8e89"}], "stats": {"total": 153, "additions": 151, "deletions": 2}, "files": [{"sha": "5a7d54f4608ac894a36fa7d2b69c601e4bec97ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c14b137a907a5eda102567d6fac239aec447c8c", "patch": "@@ -1,3 +1,9 @@\n+2005-11-11  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* tree-ssa-dse.c (struct address_walk_data, memory_ssa_name_same)\n+\t(memory_address_same): New.\n+\t(dse_optimize_stmt): Call memory_address_same.\n+\n 2005-11-12  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR middle-end/24750"}, {"sha": "aebb7a1010b29b8166fd5431282a98fefd72b513", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c14b137a907a5eda102567d6fac239aec447c8c", "patch": "@@ -1,3 +1,8 @@\n+2005-11-11  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/20051110-1.c,\n+\tgcc.c-torture/execute/20051110-2.c: New tests.\n+\n 2005-11-12  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR middle-end/24750"}, {"sha": "9fa3df8474f3195424bb3cbffd9c49dc9fe23f13", "filename": "gcc/testsuite/gcc.c-torture/execute/20051110-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051110-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051110-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051110-1.c?ref=6c14b137a907a5eda102567d6fac239aec447c8c", "patch": "@@ -0,0 +1,31 @@\n+void add_unwind_adjustsp (long);\n+void abort (void);\n+\n+unsigned char bytes[5];\n+\n+void\n+add_unwind_adjustsp (long offset)\n+{\n+  int n;\n+  unsigned long o;\n+\n+  o = (long) ((offset - 0x204) >> 2);\n+\n+  n = 0;\n+  while (o)\n+    {\n+      bytes[n] = o & 0x7f;\n+      o >>= 7;\n+      if (o)\n+\tbytes[n] |= 0x80;\n+      n++;\n+    }\n+}\n+\n+int main(void)\n+{\n+  add_unwind_adjustsp (4132);\n+  if (bytes[0] != 0x88 || bytes[1] != 0x07)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "57bfeeb03bb963de8fe9571316cc19b3fe2af26e", "filename": "gcc/testsuite/gcc.c-torture/execute/20051110-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051110-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051110-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20051110-2.c?ref=6c14b137a907a5eda102567d6fac239aec447c8c", "patch": "@@ -0,0 +1,39 @@\n+void add_unwind_adjustsp (long);\n+void abort (void);\n+\n+unsigned char bytes[5];\n+\n+int flag;\n+\n+void\n+add_unwind_adjustsp (long offset)\n+{\n+  int n;\n+  unsigned long o;\n+\n+  o = (long) ((offset - 0x204) >> 2);\n+\n+  n = 0;\n+  do\n+    {\n+a:\n+      bytes[n] = o & 0x7f;\n+      o >>= 7;\n+      if (o)\n+        {\n+\t  bytes[n] |= 0x80;\n+\t  if (flag)\n+\t    goto a;\n+\t}\n+      n++;\n+    }\n+  while (o);\n+}\n+\n+int main(void)\n+{\n+  add_unwind_adjustsp (4132);\n+  if (bytes[0] != 0x88 || bytes[1] != 0x07)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "fa3ba960a289a4f4bae5d76b60578b8942841f86", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c14b137a907a5eda102567d6fac239aec447c8c/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=6c14b137a907a5eda102567d6fac239aec447c8c", "patch": "@@ -83,6 +83,13 @@ struct dse_block_local_data\n   bitmap stores;\n };\n \n+/* Basic blocks of the potentially dead store and the following\n+   store, for memory_address_same.  */\n+struct address_walk_data\n+{\n+  basic_block store1_bb, store2_bb;\n+};\n+\n static bool gate_dse (void);\n static void tree_ssa_dse (void);\n static void dse_initialize_block_local_data (struct dom_walk_data *,\n@@ -145,6 +152,64 @@ dse_initialize_block_local_data (struct dom_walk_data *walk_data,\n     }\n }\n \n+/* Helper function for memory_address_same via walk_tree.  Returns\n+   non-NULL if it finds an SSA_NAME which is part of the address,\n+   such that the definition of the SSA_NAME post-dominates the store\n+   we want to delete but not the store that we believe makes it\n+   redundant.  This indicates that the address may change between\n+   the two stores.  */\n+\n+static tree\n+memory_ssa_name_same (tree *expr_p, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t      void *data)\n+{\n+  struct address_walk_data *walk_data = data;\n+  tree expr = *expr_p;\n+  tree def_stmt;\n+  basic_block def_bb;\n+\n+  if (TREE_CODE (expr) != SSA_NAME)\n+    return NULL_TREE;\n+\n+  /* If we've found a default definition, then there's no problem.  Both\n+     stores will post-dominate it.  And def_bb will be NULL.  */\n+  if (expr == default_def (SSA_NAME_VAR (expr)))\n+    return NULL_TREE;\n+\n+  def_stmt = SSA_NAME_DEF_STMT (expr);\n+  def_bb = bb_for_stmt (def_stmt);\n+\n+  /* DEF_STMT must dominate both stores.  So if it is in the same\n+     basic block as one, it does not post-dominate that store.  */\n+  if (walk_data->store1_bb != def_bb\n+      && dominated_by_p (CDI_POST_DOMINATORS, walk_data->store1_bb, def_bb))\n+    {\n+      if (walk_data->store2_bb == def_bb\n+\t  || !dominated_by_p (CDI_POST_DOMINATORS, walk_data->store2_bb,\n+\t\t\t      def_bb))\n+\t/* Return non-NULL to stop the walk.  */\n+\treturn def_stmt;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return TRUE if the destination memory address in STORE1 and STORE2\n+   might be modified after STORE1, before control reaches STORE2.  */\n+\n+static bool\n+memory_address_same (tree store1, tree store2)\n+{\n+  struct address_walk_data walk_data;\n+\n+  walk_data.store1_bb = bb_for_stmt (store1);\n+  walk_data.store2_bb = bb_for_stmt (store2);\n+\n+  return (walk_tree (&TREE_OPERAND (store1, 0), memory_ssa_name_same,\n+\t\t     &walk_data, NULL)\n+\t  == NULL);\n+}\n+\n /* Attempt to eliminate dead stores in the statement referenced by BSI.\n \n    A dead store is a store into a memory location which will later be\n@@ -251,11 +316,14 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t}\n \n       /* If we have precisely one immediate use at this point, then we may\n-\t have found redundant store.  */\n+\t have found redundant store.  Make sure that the stores are to\n+\t the same memory location.  This includes checking that any\n+\t SSA-form variables in the address will have the same values.  */\n       if (use_p != NULL_USE_OPERAND_P\n \t  && bitmap_bit_p (dse_gd->stores, get_stmt_uid (use_stmt))\n \t  && operand_equal_p (TREE_OPERAND (stmt, 0),\n-\t\t\t      TREE_OPERAND (use_stmt, 0), 0))\n+\t\t\t      TREE_OPERAND (use_stmt, 0), 0)\n+\t  && memory_address_same (stmt, use_stmt))\n \t{\n \t  /* Make sure we propagate the ABNORMAL bit setting.  */\n \t  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (USE_FROM_PTR (first_use_p)))"}]}