{"sha": "58ef3d309c306a09b552c035c0aa31c788eb1a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlZjNkMzA5YzMwNmEwOWI1NTJjMDM1YzBhYTMxYzc4OGViMWEzZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2015-10-20T12:16:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:16:37Z"}, "message": "sem_ch13.adb (Analyze_One_Aspect, [...]): If expander is not active...\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_One_Aspect, case\n\tAspect_Disable_Controlled): If expander is not active, pre-analyze\n\texpression anyway for ASIS and other tools use.\n\t* sem_prag.adb (Build_Generic_Class_Condition): Handle properly\n\tanonymous access types in parameter specifications. Make the\n\tformal type a formal derived type of the controlling type of\n\tthe subprogram.\n\nFrom-SVN: r229064", "tree": {"sha": "70c80e943418727dc684792adea3258f85c4189d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70c80e943418727dc684792adea3258f85c4189d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58ef3d309c306a09b552c035c0aa31c788eb1a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ef3d309c306a09b552c035c0aa31c788eb1a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ef3d309c306a09b552c035c0aa31c788eb1a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ef3d309c306a09b552c035c0aa31c788eb1a3e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bf8c157bf8121f26182fc05182ec6c0c6ecf9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf8c157bf8121f26182fc05182ec6c0c6ecf9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf8c157bf8121f26182fc05182ec6c0c6ecf9e0"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "5ee17ba0c634f336b8cd74a8576b20f78e9183f4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ef3d309c306a09b552c035c0aa31c788eb1a3e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ef3d309c306a09b552c035c0aa31c788eb1a3e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58ef3d309c306a09b552c035c0aa31c788eb1a3e", "patch": "@@ -1,3 +1,13 @@\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_One_Aspect, case\n+\tAspect_Disable_Controlled): If expander is not active, pre-analyze\n+\texpression anyway for ASIS and other tools use.\n+\t* sem_prag.adb (Build_Generic_Class_Condition): Handle properly\n+\tanonymous access types in parameter specifications. Make the\n+\tformal type a formal derived type of the controlling type of\n+\tthe subprogram.\n+\n 2015-10-20  Tristan Gingold  <gingold@adacore.com>\n \n \t* s-rident.ads: No_Task_At_Interrupt_Priority: New restriction."}, {"sha": "f3fd5f42154ca13f87846713c82a1ef2dc2e9ffc", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ef3d309c306a09b552c035c0aa31c788eb1a3e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ef3d309c306a09b552c035c0aa31c788eb1a3e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=58ef3d309c306a09b552c035c0aa31c788eb1a3e", "patch": "@@ -3273,7 +3273,8 @@ package body Sem_Ch13 is\n                      --  to disable controlled types, because typical usage is\n                      --  \"Disable_Controlled => not <some_check>'Enabled\", and\n                      --  the value of Enabled is not known until we see a\n-                     --  particular instance.\n+                     --  particular instance. In such a context, we just need\n+                     --  to preanalyze the expression for legality.\n \n                      if Expander_Active then\n                         Analyze_And_Resolve (Expr, Standard_Boolean);\n@@ -3283,6 +3284,9 @@ package body Sem_Ch13 is\n                         then\n                            Set_Disable_Controlled (E);\n                         end if;\n+\n+                     elsif Serious_Errors_Detected = 0 then\n+                        Preanalyze_And_Resolve (Expr, Standard_Boolean);\n                      end if;\n \n                      goto Continue;"}, {"sha": "149c7798bcf17493196c6c3a7b712381a60fce06", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ef3d309c306a09b552c035c0aa31c788eb1a3e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ef3d309c306a09b552c035c0aa31c788eb1a3e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=58ef3d309c306a09b552c035c0aa31c788eb1a3e", "patch": "@@ -25177,6 +25177,7 @@ package body Sem_Prag is\n       New_Form : List_Id;\n       New_Typ  : Entity_Id;\n       Par_Typ  : Entity_Id;\n+      Root_Typ : Entity_Id;\n       Spec     : Node_Id;\n \n    --  Start of processing for Build_Generic_Class_Pre\n@@ -25207,6 +25208,8 @@ package body Sem_Prag is\n          Append_Elmt (New_F, Map);\n \n          if Is_Controlling_Formal (F) then\n+            Root_Typ := Etype (F);\n+\n             if Is_Access_Type (Etype (F)) then\n                New_Typ :=\n                  Make_Defining_Identifier (Loc,\n@@ -25241,10 +25244,19 @@ package body Sem_Prag is\n                          New_Occurrence_Of (Etype (Etype (F)), Loc),\n                        Attribute_Name => Name_Class)));\n             else\n+               --  If it is an anonymous access type, create a similar type\n+               --  definition.\n+\n+               if Ekind (Etype (F)) = E_Anonymous_Access_Type then\n+                  Par_Typ := New_Copy_Tree (Parameter_Type (Parent (F)));\n+               else\n+                  Par_Typ := New_Occurrence_Of (Etype (F), Loc);\n+               end if;\n+\n                Append_To (New_Form,\n                  Make_Parameter_Specification (Loc,\n                    Defining_Identifier => New_F,\n-                   Parameter_Type      => New_Occurrence_Of (Etype (F), Loc)));\n+                   Parameter_Type      => Par_Typ));\n             end if;\n          end if;\n \n@@ -25271,7 +25283,9 @@ package body Sem_Prag is\n             Make_Formal_Type_Declaration (Loc,\n               Defining_Identifier    => New_Typ,\n               Formal_Type_Definition =>\n-                Make_Formal_Private_Type_Definition (Loc))));\n+                Make_Formal_Derived_Type_Definition (Loc,\n+                  Subtype_Mark    => New_Occurrence_Of (Root_Typ, Loc),\n+                  Private_Present => True))));\n \n       Preanalyze (New_Expr);\n       Map_Formals (New_Expr);"}]}