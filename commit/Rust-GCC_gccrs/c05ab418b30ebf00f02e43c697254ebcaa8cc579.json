{"sha": "c05ab418b30ebf00f02e43c697254ebcaa8cc579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1YWI0MThiMzBlYmYwMGYwMmU0M2M2OTcyNTRlYmNhYThjYzU3OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-02T15:45:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-02T15:45:04Z"}, "message": "Improve API docs for <memory> and <scoped_allocator>\n\n\t* config/allocator/new_allocator_base.h (__allocator_base): Add\n\tworkaround for Doxygen bug #6945.\n\t* include/std/memory: Improve docs. Define group for pointer safety.\n\t* include/std/scoped_allocator: Improve docs. Use \"undocumented\"\n\tconditional to suppress documentation for implementation details.\n\nFrom-SVN: r270807", "tree": {"sha": "05ba11086749869877a8d53ea66b96cf490d3c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05ba11086749869877a8d53ea66b96cf490d3c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05ab418b30ebf00f02e43c697254ebcaa8cc579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ab418b30ebf00f02e43c697254ebcaa8cc579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05ab418b30ebf00f02e43c697254ebcaa8cc579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05ab418b30ebf00f02e43c697254ebcaa8cc579/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d16250de4a4c8a63ebf68095dfb18581b655734c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16250de4a4c8a63ebf68095dfb18581b655734c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16250de4a4c8a63ebf68095dfb18581b655734c"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "8b15504840c2a667a21664b527dd9bd9abe84096", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c05ab418b30ebf00f02e43c697254ebcaa8cc579", "patch": "@@ -1,5 +1,11 @@\n 2019-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* config/allocator/new_allocator_base.h (__allocator_base): Add\n+\tworkaround for Doxygen bug #6945.\n+\t* include/std/memory: Improve docs. Define group for pointer safety.\n+\t* include/std/scoped_allocator: Improve docs. Use \"undocumented\"\n+\tconditional to suppress documentation for implementation details.\n+\n \t* include/bits/specfun.h: Improve docs.\n \t* include/tr1/cmath: Likewise. Fix nesting of preprocessor conditions\n \tand namespaces."}, {"sha": "a81ca96f86b2658f82f18d5f15f9615568442b4a", "filename": "libstdc++-v3/config/allocator/new_allocator_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fallocator%2Fnew_allocator_base.h?ref=c05ab418b30ebf00f02e43c697254ebcaa8cc579", "patch": "@@ -37,11 +37,11 @@ namespace std\n {\n   /**\n    *  @brief  An alias to the base class for std::allocator.\n-   *  @ingroup allocators\n    *\n    *  Used to set the std::allocator base class to\n    *  __gnu_cxx::new_allocator.\n    *\n+   *  @ingroup allocators\n    *  @tparam  _Tp  Type of allocated object.\n     */\n   template<typename _Tp>"}, {"sha": "f00e0abd0ebf835834ef77d19ac82ca5db15bb44", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=c05ab418b30ebf00f02e43c697254ebcaa8cc579", "patch": "@@ -38,6 +38,7 @@\n \n /** @file include/memory\n  *  This is a Standard C++ Library header.\n+ *  @ingroup memory\n  */\n \n #ifndef _GLIBCXX_MEMORY\n@@ -100,19 +101,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n /**\n  *  @brief Fit aligned storage in buffer.\n- *\n- *  [ptr.align]\n+ *  @ingroup memory\n  *\n  *  This function tries to fit @a __size bytes of storage with alignment\n  *  @a __align into the buffer @a __ptr of size @a __space bytes.  If such\n  *  a buffer fits then @a __ptr is changed to point to the first byte of the\n  *  aligned storage and @a __space is reduced by the bytes used for alignment.\n  *\n+ *  C++11 20.6.5 [ptr.align]\n+ *\n  *  @param __align   A fundamental or extended alignment value.\n  *  @param __size    Size of the aligned storage required.\n  *  @param __ptr     Pointer to a buffer of @a __space bytes.\n  *  @param __space   Size of the buffer pointed to by @a __ptr.\n  *  @return the updated pointer if the aligned storage fits, otherwise nullptr.\n+ *\n  */\n inline void*\n align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n@@ -136,28 +139,52 @@ align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept\n     }\n }\n \n-// 20.7.4 [util.dynamic.safety], pointer safety\n+/** @defgroup ptr_safety Pointer Safety and Garbage Collection\n+ *  @ingroup memory\n+ *\n+ * Utilities to assist with garbage collection in an implementation\n+ * that supports <em>strict pointer safety</em>.\n+ * This implementation only supports <em>relaxed pointer safety</em>\n+ * and so these functions have no effect.\n+ *\n+ * C++11 20.6.4 [util.dynamic.safety], Pointer safety\n+ *\n+ * @{\n+ */\n \n+/// Constants representing the different types of pointer safety.\n enum class pointer_safety { relaxed, preferred, strict };\n \n+/// Inform a garbage collector that an object is still in use.\n inline void\n declare_reachable(void*) { }\n \n+/// Unregister an object previously registered with declare_reachable.\n template <typename _Tp>\n   inline _Tp*\n   undeclare_reachable(_Tp* __p) { return __p; }\n \n+/// Inform a garbage collector that a region of memory need not be traced.\n inline void\n declare_no_pointers(char*, size_t) { }\n \n+/// Unregister a range previously registered with declare_no_pointers.\n inline void\n undeclare_no_pointers(char*, size_t) { }\n \n+/// The type of pointer safety supported by the implementation.\n inline pointer_safety\n get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n+// @}\n \n #if __cplusplus > 201703L\n-  /// Inform the compiler that a pointer is aligned.\n+  /** @brief Inform the compiler that a pointer is aligned.\n+   *\n+   *  @tparam _Align An alignment value (i.e. a power of two)\n+   *  @tparam _Tp    An object type\n+   *  @param  __ptr  A pointer that is aligned to _Align\n+   *  @ingroup memory\n+   */\n   template<size_t _Align, class _Tp>\n     [[nodiscard,__gnu__::__always_inline__]]\n     constexpr _Tp* assume_aligned(_Tp* __ptr)\n@@ -176,6 +203,9 @@ get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n   template<typename _Tp, typename _Up>\n     struct __is_pair<const pair<_Tp, _Up>> : true_type { };\n \n+/** @addtogroup allocators\n+ *  @{\n+ */\n   template<typename _Tp, typename __ = _Require<__not_<__is_pair<_Tp>>>,\n \t   typename _Alloc, typename... _Args>\n     constexpr auto\n@@ -358,6 +388,7 @@ get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n       return ::new(__vp) _Tp(std::make_obj_using_allocator<_Tp>(__a,\n \t    std::forward<_Args>(__args)...));\n     }\n+// @}\n \n #endif // C++2a\n "}, {"sha": "04a23ed423ae381b31911f90409c2f080ee85e74", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05ab418b30ebf00f02e43c697254ebcaa8cc579/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=c05ab418b30ebf00f02e43c697254ebcaa8cc579", "patch": "@@ -24,6 +24,7 @@\n \n /** @file include/scoped_allocator\n  *  This is a Standard C++ Library header.\n+ *  @ingroup allocators\n  */\n \n #ifndef _SCOPED_ALLOCATOR\n@@ -49,6 +50,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+  /// @cond undocumented\n+\n   template<typename _Alloc>\n     using __outer_allocator_t\n       = decltype(std::declval<_Alloc>().outer_allocator());\n@@ -75,6 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __base::_S_outermost(__a.outer_allocator()); }\n     };\n \n+  /// Implementation of the OUTERMOST pseudofunction\n   template<typename _Alloc>\n     inline typename __outermost_type<_Alloc>::type&\n     __outermost(_Alloc& __a)\n@@ -164,7 +168,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __type _M_inner;\n     };\n \n-  /// Primary class template.\n+  /// @endcond\n+\n+  /// An adaptor to recursively pass an allocator to the objects it constructs\n   template<typename _OuterAlloc, typename... _InnerAllocs>\n     class scoped_allocator_adaptor\n     : public _OuterAlloc\n@@ -484,6 +490,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++17\n     };\n \n+  /// @related std::scoped_allocator_adaptor\n   template <typename _OutA1, typename _OutA2, typename... _InA>\n     inline bool\n     operator==(const scoped_allocator_adaptor<_OutA1, _InA...>& __a,\n@@ -493,6 +500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           && __a._M_inner == __b._M_inner;\n     }\n \n+  /// @related std::scoped_allocator_adaptor\n   template <typename _OutA1, typename _OutA2, typename... _InA>\n     inline bool\n     operator!=(const scoped_allocator_adaptor<_OutA1, _InA...>& __a,"}]}