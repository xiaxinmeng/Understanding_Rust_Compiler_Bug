{"sha": "8dec72aeb54e98643c0fb3d53768cdb96cf1342a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlYzcyYWViNTRlOTg2NDNjMGZiM2Q1Mzc2OGNkYjk2Y2YxMzQyYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-05T13:01:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-05T14:16:58Z"}, "message": "libstdc++: Add [[nodiscard]] to <compare>\n\nThis adds the [[nodiscard]] attribute to all conversion operators,\ncomparison operators, call operators and non-member functions in\n<compare>. Nothing in this header except constructors has side effects.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* libsupc++/compare (partial_ordering, weak_ordering)\n\t(strong_ordering, is_eq, is_neq, is_lt, is_lteq, is_gt, is_gteq)\n\t(compare_three_way, strong_order, weak_order, partial_order)\n\t(compare_strong_order_fallback, compare_weak_order_fallback)\n\t(compare_partial_order_fallback, __detail::__synth3way): Add\n\tnodiscard attribute.\n\t* testsuite/18_support/comparisons/categories/zero_neg.cc: Add\n\t-Wno-unused-result to options.", "tree": {"sha": "1c12b23e80f0c1b273518eb4d60ce6e5ec3e1f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c12b23e80f0c1b273518eb4d60ce6e5ec3e1f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dec72aeb54e98643c0fb3d53768cdb96cf1342a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dec72aeb54e98643c0fb3d53768cdb96cf1342a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dec72aeb54e98643c0fb3d53768cdb96cf1342a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dec72aeb54e98643c0fb3d53768cdb96cf1342a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d47da7e1e91adddbde261ffefd2760df59a564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d47da7e1e91adddbde261ffefd2760df59a564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d47da7e1e91adddbde261ffefd2760df59a564"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "faeff641437026b0bfb2de2bf16d2ba0ab9d6eff", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dec72aeb54e98643c0fb3d53768cdb96cf1342a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dec72aeb54e98643c0fb3d53768cdb96cf1342a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=8dec72aeb54e98643c0fb3d53768cdb96cf1342a", "patch": "@@ -86,49 +86,61 @@ namespace std\n     static const partial_ordering unordered;\n \n     // comparisons\n+    [[nodiscard]]\n     friend constexpr bool\n     operator==(partial_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value == 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator==(partial_ordering, partial_ordering) noexcept = default;\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator< (partial_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value == -1; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator> (partial_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value == 1; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator<=(partial_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value <= 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator>=(partial_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __cmp_cat::type(__v._M_value & 1) == __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator< (__cmp_cat::__unspec, partial_ordering __v) noexcept\n     { return __v._M_value == 1; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator> (__cmp_cat::__unspec, partial_ordering __v) noexcept\n     { return __v._M_value == -1; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator<=(__cmp_cat::__unspec, partial_ordering __v) noexcept\n     { return __cmp_cat::type(__v._M_value & 1) == __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator>=(__cmp_cat::__unspec, partial_ordering __v) noexcept\n     { return 0 >= __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr partial_ordering\n     operator<=>(partial_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v; }\n \n+    [[nodiscard]]\n     friend constexpr partial_ordering\n     operator<=>(__cmp_cat::__unspec, partial_ordering __v) noexcept\n     {\n@@ -168,53 +180,66 @@ namespace std\n     static const weak_ordering equivalent;\n     static const weak_ordering greater;\n \n+    [[nodiscard]]\n     constexpr operator partial_ordering() const noexcept\n     { return partial_ordering(__cmp_cat::_Ord(_M_value)); }\n \n     // comparisons\n+    [[nodiscard]]\n     friend constexpr bool\n     operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value == 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator==(weak_ordering, weak_ordering) noexcept = default;\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value < 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator> (weak_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value > 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator<=(weak_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value <= 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator>=(weak_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value >= 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator< (__cmp_cat::__unspec, weak_ordering __v) noexcept\n     { return 0 < __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator> (__cmp_cat::__unspec, weak_ordering __v) noexcept\n     { return 0 > __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator<=(__cmp_cat::__unspec, weak_ordering __v) noexcept\n     { return 0 <= __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator>=(__cmp_cat::__unspec, weak_ordering __v) noexcept\n     { return 0 >= __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr weak_ordering\n     operator<=>(weak_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v; }\n \n+    [[nodiscard]]\n     friend constexpr weak_ordering\n     operator<=>(__cmp_cat::__unspec, weak_ordering __v) noexcept\n     { return weak_ordering(__cmp_cat::_Ord(-__v._M_value)); }\n@@ -246,56 +271,70 @@ namespace std\n     static const strong_ordering equivalent;\n     static const strong_ordering greater;\n \n+    [[nodiscard]]\n     constexpr operator partial_ordering() const noexcept\n     { return partial_ordering(__cmp_cat::_Ord(_M_value)); }\n \n+    [[nodiscard]]\n     constexpr operator weak_ordering() const noexcept\n     { return weak_ordering(__cmp_cat::_Ord(_M_value)); }\n \n     // comparisons\n+    [[nodiscard]]\n     friend constexpr bool\n     operator==(strong_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value == 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator==(strong_ordering, strong_ordering) noexcept = default;\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value < 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator> (strong_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value > 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator<=(strong_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value <= 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator>=(strong_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v._M_value >= 0; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator< (__cmp_cat::__unspec, strong_ordering __v) noexcept\n     { return 0 < __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator> (__cmp_cat::__unspec, strong_ordering __v) noexcept\n     { return 0 > __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator<=(__cmp_cat::__unspec, strong_ordering __v) noexcept\n     { return 0 <= __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr bool\n     operator>=(__cmp_cat::__unspec, strong_ordering __v) noexcept\n     { return 0 >= __v._M_value; }\n \n+    [[nodiscard]]\n     friend constexpr strong_ordering\n     operator<=>(strong_ordering __v, __cmp_cat::__unspec) noexcept\n     { return __v; }\n \n+    [[nodiscard]]\n     friend constexpr strong_ordering\n     operator<=>(__cmp_cat::__unspec, strong_ordering __v) noexcept\n     { return strong_ordering(__cmp_cat::_Ord(-__v._M_value)); }\n@@ -316,26 +355,32 @@ namespace std\n \n \n   // named comparison functions\n+  [[nodiscard]]\n   constexpr bool\n   is_eq(partial_ordering __cmp) noexcept\n   { return __cmp == 0; }\n \n+  [[nodiscard]]\n   constexpr bool\n   is_neq(partial_ordering __cmp) noexcept\n   { return __cmp != 0; }\n \n+  [[nodiscard]]\n   constexpr bool\n   is_lt  (partial_ordering __cmp) noexcept\n   { return __cmp < 0; }\n \n+  [[nodiscard]]\n   constexpr bool\n   is_lteq(partial_ordering __cmp) noexcept\n   { return __cmp <= 0; }\n \n+  [[nodiscard]]\n   constexpr bool\n   is_gt  (partial_ordering __cmp) noexcept\n   { return __cmp > 0; }\n \n+  [[nodiscard]]\n   constexpr bool\n   is_gteq(partial_ordering __cmp) noexcept\n   { return __cmp >= 0; }\n@@ -505,6 +550,7 @@ namespace std\n       constexpr auto\n       operator()(_Tp&& __t, _Up&& __u) const\n       noexcept(noexcept(std::declval<_Tp>() <=> std::declval<_Up>()))\n+      [[nodiscard]]\n       {\n \tif constexpr (__detail::__3way_builtin_ptr_cmp<_Tp, _Up>)\n \t  {\n@@ -628,6 +674,7 @@ namespace std\n \tconstexpr strong_ordering\n \toperator()(_Tp&& __e, _Up&& __f) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())\n+\t[[nodiscard]]\n \t{\n \t  /* FIXME:\n \t  if constexpr (floating_point<decay_t<_Tp>>)\n@@ -675,6 +722,7 @@ namespace std\n \tconstexpr weak_ordering\n \toperator()(_Tp&& __e, _Up&& __f) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (floating_point<decay_t<_Tp>>)\n \t    return __cmp_cust::__fp_weak_ordering(__e, __f);\n@@ -720,6 +768,7 @@ namespace std\n \tconstexpr partial_ordering\n \toperator()(_Tp&& __e, _Up&& __f) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__adl_partial<_Tp, _Up>)\n \t    return partial_ordering(partial_order(static_cast<_Tp&&>(__e),\n@@ -761,6 +810,7 @@ namespace std\n \tconstexpr strong_ordering\n \toperator()(_Tp&& __e, _Up&& __f) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__strongly_ordered<_Tp, _Up>)\n \t    return _Strong_order{}(static_cast<_Tp&&>(__e),\n@@ -793,6 +843,7 @@ namespace std\n \tconstexpr weak_ordering\n \toperator()(_Tp&& __e, _Up&& __f) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__weakly_ordered<_Tp, _Up>)\n \t    return _Weak_order{}(static_cast<_Tp&&>(__e),\n@@ -835,6 +886,7 @@ namespace std\n \tconstexpr partial_ordering\n \toperator()(_Tp&& __e, _Up&& __f) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())\n+\t[[nodiscard]]\n \t{\n \t  if constexpr (__partially_ordered<_Tp, _Up>)\n \t    return _Partial_order{}(static_cast<_Tp&&>(__e),\n@@ -886,6 +938,7 @@ namespace std\n \t}\n \n       template<typename _Tp, typename _Up>\n+\t[[nodiscard]]\n \tconstexpr auto\n \toperator()(const _Tp& __t, const _Up& __u) const\n \tnoexcept(_S_noexcept<_Tp, _Up>())"}, {"sha": "f912ad399d05d25c6fdb052a256fa0207e8889e6", "filename": "libstdc++-v3/testsuite/18_support/comparisons/categories/zero_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dec72aeb54e98643c0fb3d53768cdb96cf1342a/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcategories%2Fzero_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dec72aeb54e98643c0fb3d53768cdb96cf1342a/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcategories%2Fzero_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcategories%2Fzero_neg.cc?ref=8dec72aeb54e98643c0fb3d53768cdb96cf1342a", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a\" }\n+// { dg-options \"-std=gnu++2a -Wno-unused-result\" }\n // { dg-do compile { target c++2a } }\n \n #include <compare>"}]}