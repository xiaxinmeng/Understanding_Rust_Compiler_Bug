{"sha": "db941d7ef7b191700ad4467800dd0324365e474e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5NDFkN2VmN2IxOTE3MDBhZDQ0Njc4MDBkZDAzMjQzNjVlNDc0ZQ==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2015-11-30T19:09:33Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2015-11-30T19:09:33Z"}, "message": "tree-nested.c (convert_nonlocal_omp_clauses): Add support for OMP_CLAUSE_{NUM_GANGS,NUM_VECTORS,VECTOR_LENGTH,SEQ}.\n\n\tgcc/\n\t* tree-nested.c (convert_nonlocal_omp_clauses): Add support for\n\tOMP_CLAUSE_{NUM_GANGS,NUM_VECTORS,VECTOR_LENGTH,SEQ}.\n\t(convert_local_omp_clauses): Likewise.\n\n\tgcc/fortran/\n\t* f95-lang.c (gfc_attribute_table): Add an \"oacc function\"\n\tattribute.\n\t* gfortran.h (symbol_attribute): Add an oacc_function bit-field.\n\t(gfc_oacc_routine_name): New struct;\n\t(gfc_get_oacc_routine_name): New macro.\n\t(gfc_namespace): Add oacc_routine_clauses, oacc_routine_names and\n\toacc_routine fields.\n\t(gfc_exec_op): Add EXEC_OACC_ROUTINE.\n\t* openmp.c (OACC_ROUTINE_CLAUSES): New mask.\n\t(gfc_oacc_routine_dims): New function.\n\t(gfc_match_oacc_routine): Add support for named routines and the\n\tgang, worker vector and seq clauses.\n\t* parse.c (is_oacc): Add EXEC_OACC_ROUTINE.\n\t* resolve.c (gfc_resolve_blocks): Likewise.\n\t* st.c (gfc_free_statement): Likewise.\n\t* trans-decl.c (add_attributes_to_decl): Attach an 'oacc function'\n\tattribute and shape geometry for acc routine.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/routine-3.f90: New test.\n\t* gfortran.dg/goacc/routine-4.f90: New test.\n\t* gfortran.dg/goacc/routine-5.f90: New test.\n\t* gfortran.dg/goacc/routine-6.f90: New test.\n\t* gfortran.dg/goacc/subroutines: New test.\n\n\tlibgomp/\n\t* libgomp.oacc-fortran/routine-5.f90: New test.\n\t* libgomp.oacc-fortran/routine-7.f90: New test.\n\t* libgomp.oacc-fortran/routine-9.f90: New test.\n\nFrom-SVN: r231081", "tree": {"sha": "68145daf074ea8294cdb3c958aa8fd3af1344384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68145daf074ea8294cdb3c958aa8fd3af1344384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db941d7ef7b191700ad4467800dd0324365e474e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db941d7ef7b191700ad4467800dd0324365e474e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db941d7ef7b191700ad4467800dd0324365e474e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db941d7ef7b191700ad4467800dd0324365e474e/comments", "author": null, "committer": null, "parents": [{"sha": "522cdabdeae7c2e3374d5b1c6d780ec3506dfbfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522cdabdeae7c2e3374d5b1c6d780ec3506dfbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522cdabdeae7c2e3374d5b1c6d780ec3506dfbfd"}], "stats": {"total": 910, "additions": 865, "deletions": 45}, "files": [{"sha": "a1b4effd46af8fd3eb77e81441e1dbd23d35e2bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -1,3 +1,9 @@\n+2015-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* tree-nested.c (convert_nonlocal_omp_clauses): Add support for\n+\tOMP_CLAUSE_{NUM_GANGS,NUM_VECTORS,VECTOR_LENGTH,SEQ}.\n+\t(convert_local_omp_clauses): Likewise.\n+\n 2015-11-30  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/46032"}, {"sha": "52dcc8265385e597d05783b28c892a4f7fb07350", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -1,3 +1,25 @@\n+2015-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* f95-lang.c (gfc_attribute_table): Add an \"oacc function\"\n+\tattribute.\n+\t* gfortran.h (symbol_attribute): Add an oacc_function bit-field.\n+\t(gfc_oacc_routine_name): New struct;\n+\t(gfc_get_oacc_routine_name): New macro.\n+\t(gfc_namespace): Add oacc_routine_clauses, oacc_routine_names and\n+\toacc_routine fields.\n+\t(gfc_exec_op): Add EXEC_OACC_ROUTINE.\n+\t* openmp.c (OACC_ROUTINE_CLAUSES): New mask.\n+\t(gfc_oacc_routine_dims): New function.\n+\t(gfc_match_oacc_routine): Add support for named routines and the\n+\tgang, worker vector and seq clauses.\n+\t* parse.c (is_oacc): Add EXEC_OACC_ROUTINE.\n+\t* resolve.c (gfc_resolve_blocks): Likewise.\n+\t* st.c (gfc_free_statement): Likewise.\n+\t* trans-decl.c (add_attributes_to_decl): Attach an 'oacc function'\n+\tattribute and shape geometry for acc routine.\n+\n 2015-11-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/68534"}, {"sha": "8556b706365aa3ae33fd413d430503c95eb64c1d", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -93,6 +93,8 @@ static const struct attribute_spec gfc_attribute_table[] =\n        affects_type_identity } */\n   { \"omp declare target\", 0, 0, true,  false, false,\n     gfc_handle_omp_declare_target_attribute, false },\n+  { \"oacc function\", 0, -1, true,  false, false,\n+    gfc_handle_omp_declare_target_attribute, false },\n   { NULL,\t\t  0, 0, false, false, false, NULL, false }\n };\n "}, {"sha": "0628e8628c22b02502679063aa5f2b51ce33492b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -848,6 +848,9 @@ typedef struct\n   unsigned oacc_declare_device_resident:1;\n   unsigned oacc_declare_link:1;\n \n+  /* This is an OpenACC acclerator function at level N - 1  */\n+  unsigned oacc_function:3;\n+\n   /* Attributes set by compiler extensions (!GCC$ ATTRIBUTES).  */\n   unsigned ext_attr:EXT_ATTR_NUM;\n \n@@ -1606,6 +1609,16 @@ gfc_dt_list;\n   /* A list of all derived types.  */\n   extern gfc_dt_list *gfc_derived_types;\n \n+typedef struct gfc_oacc_routine_name\n+{\n+  struct gfc_symbol *sym;\n+  struct gfc_omp_clauses *clauses;\n+  struct gfc_oacc_routine_name *next;\n+}\n+gfc_oacc_routine_name;\n+\n+#define gfc_get_oacc_routine_name() XCNEW (gfc_oacc_routine_name)\n+\n /* A namespace describes the contents of procedure, module, interface block\n    or BLOCK construct.  */\n /* ??? Anything else use these?  */\n@@ -1672,6 +1685,12 @@ typedef struct gfc_namespace\n   /* !$ACC DECLARE.  */\n   gfc_oacc_declare *oacc_declare;\n \n+  /* !$ACC ROUTINE clauses.  */\n+  gfc_omp_clauses *oacc_routine_clauses;\n+\n+  /* !$ACC ROUTINE names.  */\n+  gfc_oacc_routine_name *oacc_routine_names;\n+\n   gfc_charlen *cl_list, *old_cl_list;\n \n   gfc_dt_list *derived_types;\n@@ -1717,6 +1736,9 @@ typedef struct gfc_namespace\n \n   /* Set to 1 for !$OMP DECLARE REDUCTION namespaces.  */\n   unsigned omp_udr_ns:1;\n+\n+  /* Set to 1 for !$ACC ROUTINE namespaces.  */\n+  unsigned oacc_routine:1;\n }\n gfc_namespace;\n \n@@ -2344,7 +2366,7 @@ enum gfc_exec_op\n   EXEC_READ, EXEC_WRITE, EXEC_IOLENGTH, EXEC_TRANSFER, EXEC_DT_END,\n   EXEC_BACKSPACE, EXEC_ENDFILE, EXEC_INQUIRE, EXEC_REWIND, EXEC_FLUSH,\n   EXEC_LOCK, EXEC_UNLOCK,\n-  EXEC_OACC_KERNELS_LOOP, EXEC_OACC_PARALLEL_LOOP,\n+  EXEC_OACC_KERNELS_LOOP, EXEC_OACC_PARALLEL_LOOP, EXEC_OACC_ROUTINE,\n   EXEC_OACC_PARALLEL, EXEC_OACC_KERNELS, EXEC_OACC_DATA, EXEC_OACC_HOST_DATA,\n   EXEC_OACC_LOOP, EXEC_OACC_UPDATE, EXEC_OACC_WAIT, EXEC_OACC_CACHE,\n   EXEC_OACC_ENTER_DATA, EXEC_OACC_EXIT_DATA, EXEC_OACC_ATOMIC,"}, {"sha": "730b7f98cd08e95035f56c6d80f983b9376241e2", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 102, "deletions": 36, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -1318,6 +1318,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n    | OMP_CLAUSE_DELETE)\n #define OACC_WAIT_CLAUSES \\\n   (OMP_CLAUSE_ASYNC)\n+#define OACC_ROUTINE_CLAUSES \\\n+  (OMP_CLAUSE_GANG | OMP_CLAUSE_WORKER | OMP_CLAUSE_VECTOR | OMP_CLAUSE_SEQ)\n \n \n match\n@@ -1619,13 +1621,44 @@ gfc_match_oacc_cache (void)\n   return MATCH_YES;\n }\n \n+/* Determine the loop level for a routine.   */\n+\n+static int\n+gfc_oacc_routine_dims (gfc_omp_clauses *clauses)\n+{\n+  int level = -1;\n+\n+  if (clauses)\n+    {\n+      unsigned mask = 0;\n+\n+      if (clauses->gang)\n+\tlevel = GOMP_DIM_GANG, mask |= GOMP_DIM_MASK (level);\n+      if (clauses->worker)\n+\tlevel = GOMP_DIM_WORKER, mask |= GOMP_DIM_MASK (level);\n+      if (clauses->vector)\n+\tlevel = GOMP_DIM_VECTOR, mask |= GOMP_DIM_MASK (level);\n+      if (clauses->seq)\n+\tlevel = GOMP_DIM_MAX, mask |= GOMP_DIM_MASK (level);\n+\n+      if (mask != (mask & -mask))\n+\tgfc_error (\"Multiple loop axes specified for routine\");\n+    }\n+\n+  if (level < 0)\n+    level = GOMP_DIM_MAX;\n+\n+  return level;\n+}\n \n match\n gfc_match_oacc_routine (void)\n {\n   locus old_loc;\n-  gfc_symbol *sym;\n+  gfc_symbol *sym = NULL;\n   match m;\n+  gfc_omp_clauses *c = NULL;\n+  gfc_oacc_routine_name *n = NULL;\n \n   old_loc = gfc_current_locus;\n \n@@ -1640,52 +1673,85 @@ gfc_match_oacc_routine (void)\n       goto cleanup;\n     }\n \n-  if (m == MATCH_NO\n-      && gfc_current_ns->proc_name\n-      && gfc_match_omp_eos () == MATCH_YES)\n+  if (m == MATCH_YES)\n     {\n-      if (!gfc_add_omp_declare_target (&gfc_current_ns->proc_name->attr,\n-\t\t\t\t       gfc_current_ns->proc_name->name,\n-\t\t\t\t       &old_loc))\n-\tgoto cleanup;\n-      return MATCH_YES;\n-    }\n+      char buffer[GFC_MAX_SYMBOL_LEN + 1];\n+      gfc_symtree *st;\n \n-  if (m != MATCH_YES)\n-    return m;\n+      m = gfc_match_name (buffer);\n+      if (m == MATCH_YES)\n+\t{\n+\t  st = gfc_find_symtree (gfc_current_ns->sym_root, buffer);\n+\t  if (st)\n+\t    {\n+\t      sym = st->n.sym;\n+\t      if (strcmp (sym->name, gfc_current_ns->proc_name->name) == 0)\n+\t        sym = NULL;\n+\t    }\n \n-  /* Scan for a function name.  */\n-  m = gfc_match_symbol (&sym, 0);\n+\t  if (st == NULL\n+\t      || (sym\n+\t\t  && !sym->attr.external\n+\t\t  && !sym->attr.function\n+\t\t  && !sym->attr.subroutine))\n+\t    {\n+\t      gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C, \"\n+\t\t\t \"invalid function name %s\",\n+\t\t\t (sym) ? sym->name : buffer);\n+\t      gfc_current_locus = old_loc;\n+\t      return MATCH_ERROR;\n+\t    }\n+\t}\n+      else\n+        {\n+\t  gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C\");\n+\t  gfc_current_locus = old_loc;\n+\t  return MATCH_ERROR;\n+\t}\n \n-  if (m != MATCH_YES)\n-    {\n-      gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C\");\n-      gfc_current_locus = old_loc;\n-      return MATCH_ERROR;\n+      if (gfc_match_char (')') != MATCH_YES)\n+\t{\n+\t  gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C, expecting\"\n+\t\t     \" ')' after NAME\");\n+\t  gfc_current_locus = old_loc;\n+\t  return MATCH_ERROR;\n+\t}\n     }\n \n-  if (!sym->attr.external && !sym->attr.function && !sym->attr.subroutine)\n-    {\n-      gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C, invalid\"\n-\t\t \" function name %qs\", sym->name);\n-      gfc_current_locus = old_loc;\n-      return MATCH_ERROR;\n-    }\n+  if (gfc_match_omp_eos () != MATCH_YES\n+      && (gfc_match_omp_clauses (&c, OACC_ROUTINE_CLAUSES, false, false, true)\n+\t  != MATCH_YES))\n+    return MATCH_ERROR;\n \n-  if (gfc_match_char (')') != MATCH_YES)\n+  if (sym != NULL)\n     {\n-      gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C, expecting\"\n-\t\t \" ')' after NAME\");\n-      gfc_current_locus = old_loc;\n-      return MATCH_ERROR;\n+      n = gfc_get_oacc_routine_name ();\n+      n->sym = sym;\n+      n->clauses = NULL;\n+      n->next = NULL;\n+      if (gfc_current_ns->oacc_routine_names != NULL)\n+\tn->next = gfc_current_ns->oacc_routine_names;\n+\n+      gfc_current_ns->oacc_routine_names = n;\n     }\n-\n-  if (gfc_match_omp_eos () != MATCH_YES)\n+  else if (gfc_current_ns->proc_name)\n     {\n-      gfc_error (\"Unexpected junk after !$ACC ROUTINE at %C\");\n-      goto cleanup;\n+      if (!gfc_add_omp_declare_target (&gfc_current_ns->proc_name->attr,\n+\t\t\t\t       gfc_current_ns->proc_name->name,\n+\t\t\t\t       &old_loc))\n+\tgoto cleanup;\n+      gfc_current_ns->proc_name->attr.oacc_function\n+\t= gfc_oacc_routine_dims (c) + 1;\n     }\n-  return MATCH_YES;\n+\n+  if (n)\n+    n->clauses = c;\n+  else if (gfc_current_ns->oacc_routine)\n+    gfc_current_ns->oacc_routine_clauses = c;\n+\n+  new_st.op = EXEC_OACC_ROUTINE;\n+  new_st.ext.omp_clauses = c;\n+  return MATCH_YES;  \n \n cleanup:\n   gfc_current_locus = old_loc;"}, {"sha": "b2d15a89aeb18d4d9be820b8cb893c555059e3f7", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -5786,6 +5786,7 @@ is_oacc (gfc_state_data *sd)\n     case EXEC_OACC_ENTER_DATA:\n     case EXEC_OACC_EXIT_DATA:\n     case EXEC_OACC_ATOMIC:\n+    case EXEC_OACC_ROUTINE:\n       return true;\n \n     default:"}, {"sha": "febf0fa28d62c8a0aee9da77889d1598a2bdc9c6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -9373,6 +9373,7 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OACC_ENTER_DATA:\n \tcase EXEC_OACC_EXIT_DATA:\n \tcase EXEC_OACC_ATOMIC:\n+\tcase EXEC_OACC_ROUTINE:\n \tcase EXEC_OMP_ATOMIC:\n \tcase EXEC_OMP_CRITICAL:\n \tcase EXEC_OMP_DISTRIBUTE:"}, {"sha": "566150b1cc2ffe03711b7967dd7d962a5c51aa87", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -202,6 +202,7 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OACC_CACHE:\n     case EXEC_OACC_ENTER_DATA:\n     case EXEC_OACC_EXIT_DATA:\n+    case EXEC_OACC_ROUTINE:\n     case EXEC_OMP_CANCEL:\n     case EXEC_OMP_CANCELLATION_POINT:\n     case EXEC_OMP_DISTRIBUTE:"}, {"sha": "331b43da4133e8c369e1ee4fc43eab26d21b232a", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-const.h\"\n /* Only for gfc_trans_code.  Shouldn't need to include this.  */\n #include \"trans-stmt.h\"\n+#include \"gomp-constants.h\"\n \n #define MAX_LABEL_VALUE 99999\n \n@@ -1304,6 +1305,20 @@ add_attributes_to_decl (symbol_attribute sym_attr, tree list)\n     list = tree_cons (get_identifier (\"omp declare target\"),\n \t\t      NULL_TREE, list);\n \n+  if (sym_attr.oacc_function)\n+    {\n+      tree dims = NULL_TREE;\n+      int ix;\n+      int level = sym_attr.oacc_function - 1;\n+\n+      for (ix = GOMP_DIM_MAX; ix--;)\n+\tdims = tree_cons (build_int_cst (boolean_type_node, ix >= level),\n+\t\t\t  integer_zero_node, dims);\n+\n+      list = tree_cons (get_identifier (\"oacc function\"),\n+\t\t\tdims, list);\n+    }\n+\n   return list;\n }\n "}, {"sha": "7cc59de9feb0c7b43f1871700069bea00cb59069", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -1,3 +1,12 @@\n+2015-11-30  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/routine-3.f90: New test.\n+\t* gfortran.dg/goacc/routine-4.f90: New test.\n+\t* gfortran.dg/goacc/routine-5.f90: New test.\n+\t* gfortran.dg/goacc/routine-6.f90: New test.\n+\t* gfortran.dg/goacc/subroutines: New test.\n+\n 2015-11-30  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/pr46032-2.c: New test."}, {"sha": "ca9b928fa02fc169aaf3d641cd32ec04e6c57514", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-3.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-3.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,13 @@\n+PROGRAM nested_gwv\n+CONTAINS\n+  SUBROUTINE gwv\n+    INTEGER  :: i\n+    REAL(KIND=8), ALLOCATABLE :: un(:),  ua(:)\n+\n+    !$acc parallel num_gangs(2) num_workers(4) vector_length(32)\n+    DO jj = 1, 100\n+       un(i) = ua(i)\n+    END DO\n+    !$acc end parallel\n+  END SUBROUTINE gwv\n+END PROGRAM nested_gwv"}, {"sha": "6714c7b8229b710b25ac406b3ada15803c6708ba", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-4.f90", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-4.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,160 @@\n+! Test invalid calls to routines.\n+\n+module param\n+  integer, parameter :: N = 32\n+end module param\n+\n+program main\n+  use param\n+  integer :: i\n+  integer :: a(N)\n+\n+  do i = 1, N\n+    a(i) = i\n+  end do\n+\n+  !\n+  ! Seq routine tests.\n+  !\n+\n+  !$acc parallel copy (a)\n+  !$acc loop\n+  do i = 1, N\n+     call seq (a)\n+  end do\n+\n+  !$acc loop gang\n+  do i = 1, N\n+     call seq (a)\n+  end do\n+\n+  !$acc loop worker\n+  do i = 1, N\n+     call seq (a)\n+  end do\n+\n+  !$acc loop vector\n+  do i = 1, N\n+     call seq (a)\n+  end do\n+  !$acc end parallel\n+\n+  !\n+  ! Gang routines loops.\n+  !\n+\n+  !$acc parallel copy (a)\n+  !$acc loop ! { dg-warning \"insufficient partitioning\" }\n+  do i = 1, N\n+     call gang (a)\n+  end do\n+\n+  !$acc loop gang ! { dg-message \"containing loop\" }\n+  do i = 1, N\n+     call gang (a) ! { dg-error \"routine call uses same\" }\n+  end do\n+\n+  !$acc loop worker ! { dg-message \"containing loop\" }\n+  do i = 1, N\n+     call gang (a)  ! { dg-error \"routine call uses same\" }\n+  end do\n+\n+  !$acc loop vector ! { dg-message \"containing loop\" }\n+  do i = 1, N\n+     call gang (a)   ! { dg-error \"routine call uses same\" }\n+  end do\n+  !$acc end parallel\n+\n+  !\n+  ! Worker routines loops.\n+  !\n+\n+  !$acc parallel copy (a)\n+  !$acc loop\n+  do i = 1, N\n+     call worker (a)\n+  end do\n+\n+  !$acc loop gang\n+  do i = 1, N\n+     call worker (a)\n+  end do\n+\n+  !$acc loop worker ! { dg-message \"containing loop\" }\n+  do i = 1, N\n+     call worker (a) ! { dg-error \"routine call uses same\" }\n+  end do\n+\n+  !$acc loop vector ! { dg-message \"containing loop\" }\n+  do i = 1, N\n+     call worker (a) ! { dg-error \"routine call uses same\" }\n+  end do\n+  !$acc end parallel\n+\n+  !\n+  ! Vector routines loops.\n+  !\n+\n+  !$acc parallel copy (a)\n+  !$acc loop\n+  do i = 1, N\n+     call vector (a)\n+  end do\n+\n+  !$acc loop gang\n+  do i = 1, N\n+     call vector (a)\n+  end do\n+\n+  !$acc loop worker\n+  do i = 1, N\n+     call vector (a)\n+  end do\n+\n+  !$acc loop vector ! { dg-message \"containing loop\" }\n+  do i = 1, N\n+     call vector (a) ! { dg-error \"routine call uses same\" }\n+  end do\n+  !$acc end parallel\n+contains\n+\n+  subroutine gang (a) ! { dg-message \"declared here\" 3 }\n+    !$acc routine gang\n+    integer, intent (inout) :: a(N)\n+    integer :: i\n+\n+    do i = 1, N\n+       a(i) = a(i) - a(i)\n+    end do\n+  end subroutine gang\n+\n+  subroutine worker (a) ! { dg-message \"declared here\" 2 }\n+    !$acc routine worker\n+    integer, intent (inout) :: a(N)\n+    integer :: i\n+\n+    do i = 1, N\n+       a(i) = a(i) - a(i)\n+    end do\n+  end subroutine worker\n+\n+  subroutine vector (a) ! { dg-message \"declared here\" }\n+    !$acc routine vector\n+    integer, intent (inout) :: a(N)\n+    integer :: i\n+\n+    do i = 1, N\n+       a(i) = a(i) - a(i)\n+    end do\n+  end subroutine vector\n+\n+  subroutine seq (a)\n+    !$acc routine seq\n+    integer, intent (inout) :: a(N)\n+    integer :: i\n+\n+    do i = 1, N\n+       a(i) = a(i) - a(i)\n+    end do\n+  end subroutine seq\n+end program main"}, {"sha": "68c5149686698a4831c7de2b76fd82976ac85278", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-5.f90", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-5.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,109 @@\n+! Test invalid intra-routine parallellism.\n+\n+module param\n+  integer, parameter :: N = 32\n+end module param\n+\n+subroutine gang (a)\n+  !$acc routine gang\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop gang\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop worker\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop vector\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+end subroutine gang\n+\n+subroutine worker (a)\n+  !$acc routine worker\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop gang ! { dg-error \"disallowed by containing routine\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop worker\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop vector\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+end subroutine worker\n+\n+subroutine vector (a)\n+  !$acc routine vector\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop gang  ! { dg-error \"disallowed by containing routine\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop worker ! { dg-error \"disallowed by containing routine\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop vector\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+end subroutine vector\n+\n+subroutine seq (a)\n+  !$acc routine seq\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop ! { dg-warning \"insufficient partitioning\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop gang ! { dg-error \"disallowed by containing routine\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop worker ! { dg-error \"disallowed by containing routine\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+\n+  !$acc loop vector ! { dg-error \"disallowed by containing routine\" }\n+  do i = 1, N\n+     a(i) = a(i) - a(i)\n+  end do\n+end subroutine seq"}, {"sha": "10951ee686eda7aaaf3ce511de41fd89f9c900b1", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-6.f90", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-6.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,89 @@\n+\n+module m\n+  integer m1int\n+contains\n+  subroutine subr5 (x) \n+  implicit none\n+  !$acc routine (subr5)\n+  !$acc routine (m1int) ! { dg-error \"invalid function name\" }\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     x = x * x - 1\n+  end if\n+  end subroutine subr5\n+end module m\n+\n+program main\n+  implicit none\n+  interface\n+    function subr6 (x) \n+    !$acc routine (subr6) ! { dg-error \"without list is allowed in interface\" }\n+    integer, intent (in) :: x\n+    integer :: subr6\n+    end function subr6\n+  end interface\n+  integer, parameter :: n = 10\n+  integer :: a(n), i\n+  !$acc routine (subr1) ! { dg-error \"invalid function name\" }\n+  external :: subr2\n+  !$acc routine (subr2)\n+  !$acc parallel\n+  !$acc loop\n+  do i = 1, n\n+     call subr1 (i)\n+     call subr2 (i)\n+  end do\n+  !$acc end parallel\n+end program main\n+\n+subroutine subr1 (x) \n+  !$acc routine\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     x = x * x - 1\n+  end if\n+end subroutine subr1\n+\n+subroutine subr2 (x) \n+  !$acc routine (subr1) ! { dg-error \"invalid function name\" }\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     x = x * x - 1\n+  end if\n+end subroutine subr2\n+\n+subroutine subr3 (x) \n+  !$acc routine (subr3)\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     call subr4 (x)\n+  end if\n+end subroutine subr3\n+\n+subroutine subr4 (x) \n+  !$acc routine (subr4)\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     x = x * x - 1\n+  end if\n+end subroutine subr4\n+\n+subroutine subr10 (x)\n+  !$acc routine (subr10) device ! { dg-error \"Unclassifiable OpenACC directive\" }\n+  integer, intent(inout) :: x\n+  if (x < 1) then\n+     x = 1\n+  else\n+     x = x * x - 1\n+  end if\n+end subroutine subr10"}, {"sha": "6cab798d4583a089a38d1adaeeeec8dd06246d76", "filename": "gcc/testsuite/gfortran.dg/goacc/subroutines.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsubroutines.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsubroutines.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsubroutines.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,73 @@\n+! Exercise how tree-nested.c handles gang, worker vector and seq.\n+\n+! { dg-do compile } \n+\n+program main\n+  integer, parameter :: N = 100\n+  integer :: nonlocal_arg\n+  integer :: nonlocal_a(N)\n+  integer :: nonlocal_i\n+  integer :: nonlocal_j\n+  \n+  nonlocal_a (:) = 5\n+  nonlocal_arg = 5\n+  \n+  call local ()\n+  call nonlocal ()\n+\n+contains\n+\n+  subroutine local ()\n+    integer :: local_i\n+    integer :: local_arg\n+    integer :: local_a(N)\n+    integer :: local_j\n+    \n+    local_a (:) = 5\n+    local_arg = 5\n+\n+    !$acc kernels loop gang(num:local_arg) worker(local_arg) vector(local_arg)\n+    do local_i = 1, N\n+       local_a(local_i) = 100\n+       !$acc loop seq\n+       do local_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+\n+    !$acc kernels loop gang(static:local_arg) worker(local_arg) &\n+    !$acc vector(local_arg)\n+    do local_i = 1, N\n+       local_a(local_i) = 100\n+       !$acc loop seq\n+       do local_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+  end subroutine local\n+\n+  subroutine nonlocal ()\n+    nonlocal_a (:) = 5\n+    nonlocal_arg = 5\n+  \n+    !$acc kernels loop gang(num:nonlocal_arg) worker(nonlocal_arg) &\n+    !$acc vector(nonlocal_arg)\n+    do nonlocal_i = 1, N\n+       nonlocal_a(nonlocal_i) = 100\n+       !$acc loop seq\n+       do nonlocal_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+\n+    !$acc kernels loop gang(static:nonlocal_arg) worker(nonlocal_arg) &\n+    !$acc vector(nonlocal_arg)\n+    do nonlocal_i = 1, N\n+       nonlocal_a(nonlocal_i) = 100\n+       !$acc loop seq\n+       do nonlocal_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+  end subroutine nonlocal\n+end program main"}, {"sha": "8b5aba20a01e0bccbd6c0380687dc63d82890e37", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -1108,10 +1108,31 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_NUM_TASKS:\n \tcase OMP_CLAUSE_HINT:\n \tcase OMP_CLAUSE__CILK_FOR_COUNT_:\n-\t  wi->val_only = true;\n-\t  wi->is_lhs = false;\n-\t  convert_nonlocal_reference_op (&OMP_CLAUSE_OPERAND (clause, 0),\n-\t\t\t\t\t &dummy, wi);\n+\tcase OMP_CLAUSE_NUM_GANGS:\n+\tcase OMP_CLAUSE_NUM_WORKERS:\n+\tcase OMP_CLAUSE_VECTOR_LENGTH:\n+\tcase OMP_CLAUSE_GANG:\n+\tcase OMP_CLAUSE_WORKER:\n+\tcase OMP_CLAUSE_VECTOR:\n+\t  /* Several OpenACC clauses have optional arguments.  Check if they\n+\t     are present.  */\n+\t  if (OMP_CLAUSE_OPERAND (clause, 0))\n+\t    {\n+\t      wi->val_only = true;\n+\t      wi->is_lhs = false;\n+\t      convert_nonlocal_reference_op (&OMP_CLAUSE_OPERAND (clause, 0),\n+\t\t\t\t\t     &dummy, wi);\n+\t    }\n+\n+\t  /* The gang clause accepts two arguments.  */\n+\t  if (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_GANG\n+\t      && OMP_CLAUSE_GANG_STATIC_EXPR (clause))\n+\t    {\n+\t\twi->val_only = true;\n+\t\twi->is_lhs = false;\n+\t\tconvert_nonlocal_reference_op\n+\t\t  (&OMP_CLAUSE_GANG_STATIC_EXPR (clause), &dummy, wi);\n+\t    }\n \t  break;\n \n \tcase OMP_CLAUSE_DIST_SCHEDULE:\n@@ -1175,6 +1196,7 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_SEQ:\n \t  break;\n \n \tdefault:\n@@ -1762,10 +1784,31 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_NUM_TASKS:\n \tcase OMP_CLAUSE_HINT:\n \tcase OMP_CLAUSE__CILK_FOR_COUNT_:\n-\t  wi->val_only = true;\n-\t  wi->is_lhs = false;\n-\t  convert_local_reference_op (&OMP_CLAUSE_OPERAND (clause, 0), &dummy,\n-\t\t\t\t      wi);\n+\tcase OMP_CLAUSE_NUM_GANGS:\n+\tcase OMP_CLAUSE_NUM_WORKERS:\n+\tcase OMP_CLAUSE_VECTOR_LENGTH:\n+\tcase OMP_CLAUSE_GANG:\n+\tcase OMP_CLAUSE_WORKER:\n+\tcase OMP_CLAUSE_VECTOR:\n+\t  /* Several OpenACC clauses have optional arguments.  Check if they\n+\t     are present.  */\n+\t  if (OMP_CLAUSE_OPERAND (clause, 0))\n+\t    {\n+\t      wi->val_only = true;\n+\t      wi->is_lhs = false;\n+\t      convert_local_reference_op (&OMP_CLAUSE_OPERAND (clause, 0),\n+\t\t\t\t\t  &dummy, wi);\n+\t    }\n+\n+\t  /* The gang clause accepts two arguments.  */\n+\t  if (OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_GANG\n+\t      && OMP_CLAUSE_GANG_STATIC_EXPR (clause))\n+\t    {\n+\t\twi->val_only = true;\n+\t\twi->is_lhs = false;\n+\t\tconvert_nonlocal_reference_op\n+\t\t  (&OMP_CLAUSE_GANG_STATIC_EXPR (clause), &dummy, wi);\n+\t    }\n \t  break;\n \n \tcase OMP_CLAUSE_DIST_SCHEDULE:\n@@ -1834,6 +1877,7 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n+\tcase OMP_CLAUSE_SEQ:\n \t  break;\n \n \tdefault:"}, {"sha": "cb8b10c9c32ae7a166549caa2140a83b68b513c1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -1,3 +1,11 @@\n+2015-11-30  James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tlibgomp/\n+\t* libgomp.oacc-fortran/routine-5.f90: New test.\n+\t* libgomp.oacc-fortran/routine-7.f90: New test.\n+\t* libgomp.oacc-fortran/routine-9.f90: New test.\n+\n 2015-11-30  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/46032"}, {"sha": "956da8ed043c2163acb0f9cf65715284c27eae74", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-5.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-5.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! { dg-options \"-fno-inline\" }\n+\n+program main\n+    integer :: n\n+\n+    n = 5\n+\n+    !$acc parallel copy (n)\n+      n = func (n)\n+    !$acc end parallel\n+\n+    if (n .ne. 6) call abort\n+\n+contains\n+\n+    function func (n) result (rc)\n+    !$acc routine\n+    integer, intent (in) :: n\n+    integer :: rc\n+\n+    rc = n\n+    rc = rc + 1\n+\n+    end function\n+\n+end program"}, {"sha": "7fc81691bfb11af474489c12c4093a42cf299314", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-7.f90", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,121 @@\n+\n+! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n+\n+#define M 8\n+#define N 32\n+\n+program main\n+  integer :: i\n+  integer :: a(N)\n+  integer :: b(M * N)\n+\n+  do i = 1, N\n+    a(i) = 0\n+  end do\n+\n+  !$acc parallel copy (a)\n+  !$acc loop seq\n+    do i = 1, N\n+      call seq (a)\n+    end do\n+  !$acc end parallel\n+\n+  do i = 1, N\n+    if (a(i) .ne.N) call abort\n+  end do\n+\n+  !$acc parallel copy (a)\n+  !$acc loop seq\n+    do i = 1, N \n+      call gang (a)\n+    end do\n+  !$acc end parallel\n+\n+  do i = 1, N\n+    if (a(i) .ne. (N + (N * (-1 * i)))) call abort\n+  end do\n+\n+  do i = 1, N\n+    b(i) = i\n+  end do\n+\n+  !$acc parallel copy (b)\n+  !$acc loop\n+    do i = 1, N\n+      call worker (b)\n+    end do\n+  !$acc end parallel\n+\n+  do i = 1, N\n+    if (b(i) .ne. N + i) call abort\n+  end do\n+\n+  do i = 1, N\n+    a(i) = i\n+  end do\n+\n+  !$acc parallel copy (a)\n+  !$acc loop\n+    do i = 1, N\n+      call vector (a)\n+    end do\n+  !$acc end parallel\n+\n+  do i = 1, N\n+    if (a(i) .ne. 0) call abort\n+  end do\n+\n+contains\n+\n+subroutine vector (a)\n+  !$acc routine vector\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop vector\n+  do i = 1, N\n+    a(i) = a(i) - a(i) \n+  end do\n+\n+end subroutine vector\n+\n+subroutine worker (b)\n+  !$acc routine worker\n+  integer, intent (inout) :: b(M*N)\n+  integer :: i, j\n+\n+  !$acc loop worker\n+  do i = 1, N\n+  !$acc loop vector\n+    do j = 1, M\n+      b(j + ((i - 1) * M)) = b(j + ((i - 1) * M)) + 1\n+    end do\n+  end do\n+\n+end subroutine worker\n+\n+subroutine gang (a)\n+  !$acc routine gang\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop gang\n+  do i = 1, N\n+    a(i) = a(i) - i \n+  end do\n+\n+end subroutine gang\n+\n+subroutine seq (a)\n+  !$acc routine seq\n+  integer, intent (inout) :: a(M)\n+  integer :: i\n+\n+  do i = 1, N\n+    a(i) = a(i) + 1\n+  end do\n+\n+end subroutine seq\n+\n+end program main"}, {"sha": "95d1a1392d842e5a2113f244db43d638b1cce0b5", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-9.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db941d7ef7b191700ad4467800dd0324365e474e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-9.f90?ref=db941d7ef7b191700ad4467800dd0324365e474e", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! { dg-options \"-fno-inline\" }\n+\n+program main\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer :: a(n), i\n+  integer, external :: fact\n+  !$acc routine (fact)\n+  !$acc parallel\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = fact (i)\n+  end do\n+  !$acc end parallel\n+  do i = 1, n\n+     if (a(i) .ne. fact(i)) call abort\n+  end do\n+end program main\n+\n+recursive function fact (x) result (res)\n+  implicit none\n+  !$acc routine (fact)\n+  integer, intent(in) :: x\n+  integer :: res\n+  if (x < 1) then\n+     res = 1\n+  else\n+     res = x * fact(x - 1)\n+  end if\n+end function fact"}]}