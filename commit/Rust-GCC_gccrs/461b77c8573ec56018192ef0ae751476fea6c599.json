{"sha": "461b77c8573ec56018192ef0ae751476fea6c599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYxYjc3Yzg1NzNlYzU2MDE4MTkyZWYwYWU3NTE0NzZmZWE2YzU5OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-19T16:22:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-19T16:22:57Z"}, "message": "If not GNUC, make `inline' null; otherwise, leave alone.\n\nAdd `static' to inline functions.\nAdd prototypes for static function.\n\nFrom-SVN: r12043", "tree": {"sha": "d97503ebf2fb54f72ecdfdfe5b162f33e2a197b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d97503ebf2fb54f72ecdfdfe5b162f33e2a197b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/461b77c8573ec56018192ef0ae751476fea6c599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461b77c8573ec56018192ef0ae751476fea6c599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/461b77c8573ec56018192ef0ae751476fea6c599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461b77c8573ec56018192ef0ae751476fea6c599/comments", "author": null, "committer": null, "parents": [{"sha": "29de0a5c2f01ef2036a4b47ccecb26189748a606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29de0a5c2f01ef2036a4b47ccecb26189748a606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29de0a5c2f01ef2036a4b47ccecb26189748a606"}], "stats": {"total": 217, "additions": 158, "deletions": 59}, "files": [{"sha": "41936044c609eadf39f64ac51092119377323d5f", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 158, "deletions": 59, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/461b77c8573ec56018192ef0ae751476fea6c599/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/461b77c8573ec56018192ef0ae751476fea6c599/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=461b77c8573ec56018192ef0ae751476fea6c599", "patch": "@@ -1,9 +1,6 @@\n /* Output Dwarf format symbol table information from the GNU C compiler.\n    Copyright (C) 1992, 1993, 1995, 1996 Free Software Foundation, Inc.\n-\n-   Written by Ron Guilmette (rfg@netcom.com) for\n-   Network Computing Devices, August, September, October, November 1990.\n-   Generously contributed by NCD to the Free Software Foundation.\n+   Contributed by Ron Guilmette (rfg@monkeys.com) of Network Computing Devices.\n \n This file is part of GNU CC.\n \n@@ -72,10 +69,8 @@ extern char *rindex ();\n /* Note that the implementation of C++ support herein is (as yet) unfinished.\n    If you want to try to complete it, more power to you.  */\n \n-#if defined(__GNUC__) && (NDEBUG == 1)\n-#define inline static inline\n-#else\n-#define inline static\n+#if !defined(__GNUC__) || (NDEBUG != 1)\n+#define inline\n #endif\n \n /* How to start an assembler comment.  */\n@@ -295,11 +290,118 @@ static tree dwarf_last_decl;\n \n /* Forward declarations for functions defined in this file.  */\n \n-static void output_type ();\n-static void type_attribute ();\n-static void output_decls_for_scope ();\n-static void output_decl ();\n-static unsigned lookup_filename ();\n+static char *dwarf_tag_name\t\tPROTO((unsigned));\n+static char *dwarf_attr_name\t\tPROTO((unsigned));\n+static char *dwarf_stack_op_name\tPROTO((unsigned));\n+static char *dwarf_typemod_name\t\tPROTO((unsigned));\n+static char *dwarf_fmt_byte_name\tPROTO((unsigned));\n+static char *dwarf_fund_type_name\tPROTO((unsigned));\n+static tree decl_ultimate_origin\tPROTO((tree));\n+static tree block_ultimate_origin\tPROTO((tree));\n+static void output_unsigned_leb128\tPROTO((unsigned long));\n+static void output_signed_leb128\tPROTO((long));\n+static inline int is_body_block\t\tPROTO((tree));\n+static int fundamental_type_code\tPROTO((tree));\n+static tree root_type\t\t\tPROTO((tree));\n+static void write_modifier_bytes\tPROTO((tree, int, int));\n+static inline int type_is_fundamental\tPROTO((tree));\n+static void equate_decl_number_to_die_number PROTO((tree));\n+static inline void equate_type_number_to_die_number PROTO((tree));\n+static void output_reg_number\t\tPROTO((rtx));\n+static void output_mem_loc_descriptor\tPROTO((rtx));\n+static void output_loc_descriptor\tPROTO((rtx));\n+static void output_bound_representation\tPROTO((tree, unsigned, char));\n+static void output_enumeral_list\tPROTO((tree));\n+static inline unsigned ceiling\t\tPROTO((unsigned, unsigned));\n+static inline tree field_type\t\tPROTO((tree));\n+static inline unsigned simple_type_align_in_bits PROTO((tree));\n+static inline unsigned simple_type_size_in_bits  PROTO((tree));\n+static unsigned field_byte_offset\tPROTO((tree));\n+static inline void sibling_attribute\tPROTO((void));\n+static void location_attribute\t\tPROTO((rtx));\n+static void data_member_location_attribute PROTO((tree));\n+static void const_value_attribute\tPROTO((rtx));\n+static void location_or_const_value_attribute PROTO((tree));\n+static inline void name_attribute\tPROTO((char *));\n+static inline void fund_type_attribute\tPROTO((unsigned));\n+static void mod_fund_type_attribute\tPROTO((tree, int, int));\n+static inline void user_def_type_attribute PROTO((tree));\n+static void mod_u_d_type_attribute\tPROTO((tree, int, int));\n+static inline void ordering_attribute\tPROTO((unsigned));\n+static void subscript_data_attribute\tPROTO((tree));\n+static void byte_size_attribute\t\tPROTO((tree));\n+static inline void bit_offset_attribute\tPROTO((tree));\n+static inline void bit_size_attribute\tPROTO((tree));\n+static inline void element_list_attribute PROTO((tree));\n+static inline void stmt_list_attribute\tPROTO((char *));\n+static inline void low_pc_attribute\tPROTO((char *));\n+static inline void high_pc_attribute\tPROTO((char *));\n+static inline void body_begin_attribute\tPROTO((char *));\n+static inline void body_end_attribute\tPROTO((char *));\n+static inline void langauge_attribute\tPROTO((unsigned));\n+static inline void member_attribute\tPROTO((tree));\n+static inline void string_length_attribute PROTO((tree));\n+static inline void comp_dir_attribute\tPROTO((char *));\n+static inline void sf_names_attribute\tPROTO((char *));\n+static inline void src_info_attribute\tPROTO((char *));\n+static inline void mac_info_attribute\tPROTO((char *));\n+static inline void prototyped_attribute\tPROTO((tree));\n+static inline void producer_attribute\tPROTO((char *));\n+static inline void inline_attribute\tPROTO((tree));\n+static inline void containing_type_attribute PROTO((tree));\n+static inline void abstract_origin_attribute PROTO((tree));\n+static inline void src_coords_attribute PROTO((unsigned, unsigned));\n+static inline void pure_or_virtual_attribute PROTO((tree));\n+static void name_and_src_coords_attributes PROTO((tree));\n+static void type_attribute\t\tPROTO((tree, int, int));\n+static char *type_tag\t\t\tPROTO((tree));\n+static inline void dienum_push\t\tPROTO((void));\n+static inline void dienum_pop\t\tPROTO((void));\n+static inline tree member_declared_type PROTO((tree));\n+static char *function_start_label\tPROTO((tree));\n+static void output_array_type_die\tPROTO((void *));\n+static void output_set_type_die\t\tPROTO((void *));\n+static void output_entry_point_die\tPROTO((void *));\n+static void output_inlined_enumeration_type_die PROTO((void *));\n+static void output_inlined_structure_type_die PROTO((void *));\n+static void output_inlined_union_type_die PROTO((void *));\n+static void output_enumeration_type_die\tPROTO((void *));\n+static void output_formal_parameter_die\tPROTO((void *));\n+static void output_global_subroutine_die PROTO((void *));\n+static void output_global_variable_die\tPROTO((void *));\n+static void output_label_die\t\tPROTO((void *));\n+static void output_lexical_block_die\tPROTO((void *));\n+static void output_inlined_subroutine_die PROTO((void *));\n+static void output_local_variable_die\tPROTO((void *));\n+static void output_member_die\t\tPROTO((void *));\n+static void output_pointer_type_die\tPROTO((void *));\n+static void output_reference_type_die\tPROTO((void *));\n+static void output_ptr_to_mbr_type_die\tPROTO((void *));\n+static void output_compile_unit_die\tPROTO((void *));\n+static void output_string_type_die\tPROTO((void *));\n+static void output_structure_type_die\tPROTO((void *));\n+static void output_local_subroutine_die PROTO((void *));\n+static void output_subroutine_type_die\tPROTO((void *));\n+static void output_typedef_die\t\tPROTO((void *));\n+static void output_union_type_die\tPROTO((void *));\n+static void output_unspecified_parameters_die PROTO((void *));\n+static void output_padded_null_die\tPROTO((void *));\n+static void output_die\t\t\tPROTO((void (*) (), void *));\n+static void end_sibling_chain\t\tPROTO((void));\n+static void output_formal_types\t\tPROTO((tree));\n+static void pend_type\t\t\tPROTO((tree));\n+static inline int type_of_for_scope\tPROTO((tree, tree));\n+static void output_pending_types_for_scope PROTO((tree));\n+static void output_type\t\t\tPROTO((tree, tree));\n+static void output_tagged_type_instantiation PROTO((tree));\n+static void output_block\t\tPROTO((tree));\n+static void output_decls_for_scope\tPROTO((tree));\n+static void output_decl\t\t\tPROTO((tree, tree));\n+static void shuffle_filename_entry\tPROTO((filename_entry *));\n+static void geneate_new_sfname_entry\tPROTO((void));\n+static unsigned lookup_filename\t\tPROTO((char *));\n+static void generate_srcinfo_entry\tPROTO((unsigned, unsigned));\n+static void generate_macinfo_entry\tPROTO((char *, char *));\n \f\n /* Definitions of defaults for assembler-dependent names of various\n    pseudo-ops and section names.\n@@ -953,6 +1055,7 @@ dwarf_fmt_byte_name (fmt)\n     default:\t\treturn \"FMT_<unknown>\";\n     }\n }\n+\n static char *\n dwarf_fund_type_name (ft)\n      register unsigned ft;\n@@ -1138,7 +1241,7 @@ output_signed_leb128 (value)\n    FUNCTION_DECL node.\n */\n \n-inline int\n+static inline int\n is_body_block (stmt)\n      register tree stmt;\n {\n@@ -1363,7 +1466,7 @@ write_modifier_bytes (type, decl_const, decl_volatile)\n /* Given a pointer to an arbitrary ..._TYPE tree node, return non-zero if the\n    given input type is a Dwarf \"fundamental\" type.  Otherwise return zero.  */\n \n-inline int\n+static inline int\n type_is_fundamental (type)\n      register tree type;\n {\n@@ -1444,7 +1547,7 @@ equate_decl_number_to_die_number (decl)\n    simply by re-generating the alternative name from the ..._TYPE node's\n    UID number.\t*/\n \n-inline void\n+static inline void\n equate_type_number_to_die_number (type)\n      register tree type;\n {\n@@ -1715,7 +1818,7 @@ output_enumeral_list (link)\n /* Given an unsigned value, round it up to the lowest multiple of `boundary'\n    which is not less than the value itself.  */\n \n-inline unsigned\n+static inline unsigned\n ceiling (value, boundary)\n      register unsigned value;\n      register unsigned boundary;\n@@ -1727,7 +1830,7 @@ ceiling (value, boundary)\n    pointer to the declared type for the relevant field variable, or return\n    `integer_type_node' if the given node turns out to be an ERROR_MARK node.  */\n \n-inline tree\n+static inline tree\n field_type (decl)\n      register tree decl;\n {\n@@ -1746,7 +1849,7 @@ field_type (decl)\n    node, return the alignment in bits for the type, or else return\n    BITS_PER_WORD if the node actually turns out to be an ERROR_MARK node.  */\n \n-inline unsigned\n+static inline unsigned\n simple_type_align_in_bits (type)\n      register tree type;\n {\n@@ -1759,7 +1862,7 @@ simple_type_align_in_bits (type)\n    constant, or else return BITS_PER_WORD if the type actually turns out\n    to be an ERROR_MARK node.  */\n \n-inline unsigned\n+static inline unsigned\n simple_type_size_in_bits (type)\n      register tree type;\n {\n@@ -1903,7 +2006,7 @@ field_byte_offset (decl)\n \n /* Generate an AT_sibling attribute.  */\n \n-inline void\n+static inline void\n sibling_attribute ()\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -2230,7 +2333,7 @@ location_or_const_value_attribute (decl)\n /* Generate an AT_name attribute given some string value to be included as\n    the value of the attribute.\t*/\n \n-inline void\n+static inline void\n name_attribute (name_string)\n      register char *name_string;\n {\n@@ -2241,7 +2344,7 @@ name_attribute (name_string)\n     }\n }\n \n-inline void\n+static inline void\n fund_type_attribute (ft_code)\n      register unsigned ft_code;\n {\n@@ -2269,7 +2372,7 @@ mod_fund_type_attribute (type, decl_const, decl_volatile)\n   ASM_OUTPUT_LABEL (asm_out_file, end_label);\n }\n \n-inline void\n+static inline void\n user_def_type_attribute (type)\n      register tree type;\n {\n@@ -2302,7 +2405,7 @@ mod_u_d_type_attribute (type, decl_const, decl_volatile)\n }\n \n #ifdef USE_ORDERING_ATTRIBUTE\n-inline void\n+static inline void\n ordering_attribute (ordering)\n      register unsigned ordering;\n {\n@@ -2473,10 +2576,9 @@ byte_size_attribute (tree_node)\n \n    Note that it is the size (in bytes) of the hypothetical \"containing\n    object\" which will be given in the AT_byte_size attribute for this\n-   bit-field.  (See `byte_size_attribute' above.)\n-*/\n+   bit-field.  (See `byte_size_attribute' above.) */\n \n-inline void\n+static inline void\n bit_offset_attribute (decl)\n     register tree decl;\n {\n@@ -2528,7 +2630,7 @@ bit_offset_attribute (decl)\n /* For a FIELD_DECL node which represents a bit field, output an attribute\n    which specifies the length in bits of the given field.  */\n \n-inline void\n+static inline void\n bit_size_attribute (decl)\n     register tree decl;\n {\n@@ -2545,7 +2647,7 @@ bit_size_attribute (decl)\n    all of the enumeration constants associated with the given enumeration\n    type.  */\n \n-inline void\n+static inline void\n element_list_attribute (element)\n      register tree element;\n {\n@@ -2571,7 +2673,7 @@ element_list_attribute (element)\n /* Generate an AT_stmt_list attribute.\tThese are normally present only in\n    DIEs with a TAG_compile_unit tag.  */\n \n-inline void\n+static inline void\n stmt_list_attribute (label)\n     register char *label;\n {\n@@ -2583,7 +2685,7 @@ stmt_list_attribute (label)\n /* Generate an AT_low_pc attribute for a label DIE, a lexical_block DIE or\n    for a subroutine DIE.  */\n \n-inline void\n+static inline void\n low_pc_attribute (asm_low_label)\n      register char *asm_low_label;\n {\n@@ -2594,7 +2696,7 @@ low_pc_attribute (asm_low_label)\n /* Generate an AT_high_pc attribute for a lexical_block DIE or for a\n    subroutine DIE.  */\n \n-inline void\n+static inline void\n high_pc_attribute (asm_high_label)\n     register char *asm_high_label;\n {\n@@ -2604,7 +2706,7 @@ high_pc_attribute (asm_high_label)\n \n /* Generate an AT_body_begin attribute for a subroutine DIE.  */\n \n-inline void\n+static inline void\n body_begin_attribute (asm_begin_label)\n      register char *asm_begin_label;\n {\n@@ -2614,7 +2716,7 @@ body_begin_attribute (asm_begin_label)\n \n /* Generate an AT_body_end attribute for a subroutine DIE.  */\n \n-inline void\n+static inline void\n body_end_attribute (asm_end_label)\n      register char *asm_end_label;\n {\n@@ -2625,15 +2727,15 @@ body_end_attribute (asm_end_label)\n /* Generate an AT_language attribute given a LANG value.  These attributes\n    are used only within TAG_compile_unit DIEs.  */\n \n-inline void\n+static inline void\n language_attribute (language_code)\n      register unsigned language_code;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_language);\n   ASM_OUTPUT_DWARF_DATA4 (asm_out_file, language_code);\n }\n \n-inline void\n+static inline void\n member_attribute (context)\n     register tree context;\n {\n@@ -2649,7 +2751,7 @@ member_attribute (context)\n     }\n }\n \n-inline void\n+static inline void\n string_length_attribute (upper_bound)\n      register tree upper_bound;\n {\n@@ -2665,15 +2767,15 @@ string_length_attribute (upper_bound)\n   ASM_OUTPUT_LABEL (asm_out_file, end_label);\n }\n \n-inline void\n+static inline void\n comp_dir_attribute (dirname)\n      register char *dirname;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_comp_dir);\n   ASM_OUTPUT_DWARF_STRING (asm_out_file, dirname);\n }\n \n-inline void\n+static inline void\n sf_names_attribute (sf_names_start_label)\n      register char *sf_names_start_label;\n {\n@@ -2682,7 +2784,7 @@ sf_names_attribute (sf_names_start_label)\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, sf_names_start_label);\n }\n \n-inline void\n+static inline void\n src_info_attribute (src_info_start_label)\n      register char *src_info_start_label;\n {\n@@ -2691,7 +2793,7 @@ src_info_attribute (src_info_start_label)\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, src_info_start_label);\n }\n \n-inline void\n+static inline void\n mac_info_attribute (mac_info_start_label)\n      register char *mac_info_start_label;\n {\n@@ -2700,7 +2802,7 @@ mac_info_attribute (mac_info_start_label)\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, mac_info_start_label);\n }\n \n-inline void\n+static inline void\n prototyped_attribute (func_type)\n      register tree func_type;\n {\n@@ -2712,15 +2814,15 @@ prototyped_attribute (func_type)\n     }\n }\n \n-inline void\n+static inline void\n producer_attribute (producer)\n      register char *producer;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_producer);\n   ASM_OUTPUT_DWARF_STRING (asm_out_file, producer);\n }\n \n-inline void\n+static inline void\n inline_attribute (decl)\n      register tree decl;\n {\n@@ -2731,7 +2833,7 @@ inline_attribute (decl)\n     }\n }\n \n-inline void\n+static inline void\n containing_type_attribute (containing_type)\n      register tree containing_type;\n {\n@@ -2742,7 +2844,7 @@ containing_type_attribute (containing_type)\n   ASM_OUTPUT_DWARF_REF (asm_out_file, label);\n }\n \n-inline void\n+static inline void\n abstract_origin_attribute (origin)\n      register tree origin;\n {\n@@ -2767,7 +2869,7 @@ abstract_origin_attribute (origin)\n }\n \n #ifdef DWARF_DECL_COORDINATES\n-inline void\n+static inline void\n src_coords_attribute (src_fileno, src_lineno)\n      register unsigned src_fileno;\n      register unsigned src_lineno;\n@@ -2778,7 +2880,7 @@ src_coords_attribute (src_fileno, src_lineno)\n }\n #endif /* defined(DWARF_DECL_COORDINATES) */\n \n-inline void\n+static inline void\n pure_or_virtual_attribute (func_decl)\n      register tree func_decl;\n {\n@@ -2925,7 +3027,7 @@ type_tag (type)\n   return (name == 0 || *name == '\\0') ? 0 : name;\n }\n \n-inline void\n+static inline void\n dienum_push ()\n {\n   /* Start by checking if the pending_sibling_stack needs to be expanded.\n@@ -2946,13 +3048,13 @@ dienum_push ()\n /* Pop the sibling stack so that the most recently pushed DIEnum becomes the\n    NEXT_DIE_NUM.  */\n \n-inline void\n+static inline void\n dienum_pop ()\n {\n   pending_siblings--;\n }\n \n-inline tree\n+static inline tree\n member_declared_type (member)\n      register tree member;\n {\n@@ -3849,10 +3951,9 @@ pend_type (type)\n    been output are instead placed onto the pending_types_list.  Later on,\n    we force these (temporarily pended) types to be output simply by calling\n    `output_pending_types_for_scope' with an actual argument equal to the\n-   true scope of the types we temporarily pended.\n-*/\n+   true scope of the types we temporarily pended.  */\n \n-inline int\n+static inline int\n type_ok_for_scope (type, scope)\n     register tree type;\n     register tree scope;\n@@ -3882,8 +3983,7 @@ type_ok_for_scope (type, scope)\n    Note that we have to process the list in beginning-to-end order,\n    because the call made here to output_type may cause yet more types\n    to be added to the end of the list, and we may have to output some\n-   of them too.\n-*/\n+   of them too. */\n \n static void\n output_pending_types_for_scope (containing_scope)\n@@ -5078,8 +5178,7 @@ generate_new_sfname_entry ()\n    calculated, and where at least one of the two symbol references is a\n    forward reference.  (This bug could be tickled by our .debug_srcinfo\n    entries if we don't output their corresponding .debug_sfnames entries\n-   before them.)\n-*/\n+   before them.) */\n \n static unsigned\n lookup_filename (file_name)"}]}