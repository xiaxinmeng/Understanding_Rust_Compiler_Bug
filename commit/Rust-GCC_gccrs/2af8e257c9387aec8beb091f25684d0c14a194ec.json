{"sha": "2af8e257c9387aec8beb091f25684d0c14a194ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmOGUyNTdjOTM4N2FlYzhiZWIwOTFmMjU2ODRkMGMxNGExOTRlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-09-29T15:03:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-29T15:03:06Z"}, "message": "arm-protos.h (arm_modes_tieable_p): Declare.\n\ngcc/\n\t* config/arm/arm-protos.h (arm_modes_tieable_p): Declare.\n\t* config/arm/arm.h (MODES_TIEABLE_P): Use it.\n\t* config/arm/arm.c (arm_modes_tieable_p): New function.  Allow\n\tNEON vector and structure modes to be tied.\n\nFrom-SVN: r179355", "tree": {"sha": "ac3987acf270e78ee728d7301549854f65d862b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac3987acf270e78ee728d7301549854f65d862b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af8e257c9387aec8beb091f25684d0c14a194ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af8e257c9387aec8beb091f25684d0c14a194ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af8e257c9387aec8beb091f25684d0c14a194ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af8e257c9387aec8beb091f25684d0c14a194ec/comments", "author": null, "committer": null, "parents": [{"sha": "99e2796b5c6ec4d6fff1b5aa0ba1fd9d19a1f1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e2796b5c6ec4d6fff1b5aa0ba1fd9d19a1f1a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e2796b5c6ec4d6fff1b5aa0ba1fd9d19a1f1a2"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "5a1d1012a2c086b799b496435535f1264f91e09d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2af8e257c9387aec8beb091f25684d0c14a194ec", "patch": "@@ -1,3 +1,10 @@\n+2011-09-29  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/arm/arm-protos.h (arm_modes_tieable_p): Declare.\n+\t* config/arm/arm.h (MODES_TIEABLE_P): Use it.\n+\t* config/arm/arm.c (arm_modes_tieable_p): New function.  Allow\n+\tNEON vector and structure modes to be tied.\n+\n 2011-09-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* graphite-scop-detection.c (make_close_phi_nodes_unique):  New"}, {"sha": "23a29c6639b376167082066738f22a2b618d6d83", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=2af8e257c9387aec8beb091f25684d0c14a194ec", "patch": "@@ -46,6 +46,7 @@ extern void arm_output_fn_unwind (FILE *, bool);\n extern bool arm_vector_mode_supported_p (enum machine_mode);\n extern bool arm_small_register_classes_for_mode_p (enum machine_mode);\n extern int arm_hard_regno_mode_ok (unsigned int, enum machine_mode);\n+extern bool arm_modes_tieable_p (enum machine_mode, enum machine_mode);\n extern int const_ok_for_arm (HOST_WIDE_INT);\n extern int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n extern int arm_split_constant (RTX_CODE, enum machine_mode, rtx,"}, {"sha": "51614396da4de4ec58b2f76a8e48627011ffca77", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2af8e257c9387aec8beb091f25684d0c14a194ec", "patch": "@@ -18260,6 +18260,29 @@ arm_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n \t  && regno <= LAST_FPA_REGNUM);\n }\n \n+/* Implement MODES_TIEABLE_P.  */\n+\n+bool\n+arm_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n+{\n+  if (GET_MODE_CLASS (mode1) == GET_MODE_CLASS (mode2))\n+    return true;\n+\n+  /* We specifically want to allow elements of \"structure\" modes to\n+     be tieable to the structure.  This more general condition allows\n+     other rarer situations too.  */\n+  if (TARGET_NEON\n+      && (VALID_NEON_DREG_MODE (mode1)\n+\t  || VALID_NEON_QREG_MODE (mode1)\n+\t  || VALID_NEON_STRUCT_MODE (mode1))\n+      && (VALID_NEON_DREG_MODE (mode2)\n+\t  || VALID_NEON_QREG_MODE (mode2)\n+\t  || VALID_NEON_STRUCT_MODE (mode2)))\n+    return true;\n+\n+  return false;\n+}\n+\n /* For efficiency and historical reasons LO_REGS, HI_REGS and CC_REGS are\n    not used in arm mode.  */\n "}, {"sha": "993e3a07874b2527997495e4c7cd8d1cc9e1d1fc", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af8e257c9387aec8beb091f25684d0c14a194ec/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2af8e257c9387aec8beb091f25684d0c14a194ec", "patch": "@@ -975,12 +975,7 @@ extern int arm_arch_thumb_hwdiv;\n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\t\t\t\\\n   arm_hard_regno_mode_ok ((REGNO), (MODE))\n \n-/* Value is 1 if it is a good idea to tie two pseudo registers\n-   when one has mode MODE1 and one has mode MODE2.\n-   If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n-   for any hard reg, then this must be 0 for correct output.  */\n-#define MODES_TIEABLE_P(MODE1, MODE2)  \\\n-  (GET_MODE_CLASS (MODE1) == GET_MODE_CLASS (MODE2))\n+#define MODES_TIEABLE_P(MODE1, MODE2) arm_modes_tieable_p (MODE1, MODE2)\n \n #define VALID_IWMMXT_REG_MODE(MODE) \\\n  (arm_vector_mode_supported_p (MODE) || (MODE) == DImode)"}]}