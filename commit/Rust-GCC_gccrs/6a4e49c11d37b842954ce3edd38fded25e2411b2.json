{"sha": "6a4e49c11d37b842954ce3edd38fded25e2411b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0ZTQ5YzExZDM3Yjg0Mjk1NGNlM2VkZDM4ZmRlZDI1ZTI0MTFiMg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-03-12T14:32:37Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-03-12T14:32:37Z"}, "message": "s390.md (reload_insi, [...]): Change mode of scratch register to DImode / TImode.\n\n\t* config/s390/s390.md (reload_insi, reload_indi): Change mode of\n\tscratch register to DImode / TImode.\n\tconfig/s390/s390.c (s390_expand_plus_operand): Make sure scratch\n\tregister used does not overlap the target.\n\nFrom-SVN: r50652", "tree": {"sha": "8e297331611a3bf8ee53a92f81d9893091a14112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e297331611a3bf8ee53a92f81d9893091a14112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4e49c11d37b842954ce3edd38fded25e2411b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4e49c11d37b842954ce3edd38fded25e2411b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4e49c11d37b842954ce3edd38fded25e2411b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4e49c11d37b842954ce3edd38fded25e2411b2/comments", "author": null, "committer": null, "parents": [{"sha": "acf8bc2567983c3faf2a5ecc6153b02ce89f57f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf8bc2567983c3faf2a5ecc6153b02ce89f57f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf8bc2567983c3faf2a5ecc6153b02ce89f57f5"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "6bbc35f9f512b7aa582b82c83016badfef000a75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4e49c11d37b842954ce3edd38fded25e2411b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4e49c11d37b842954ce3edd38fded25e2411b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a4e49c11d37b842954ce3edd38fded25e2411b2", "patch": "@@ -1,3 +1,10 @@\n+2002-03-12  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (reload_insi, reload_indi): Change mode of\n+\tscratch register to DImode / TImode.\n+\tconfig/s390/s390.c (s390_expand_plus_operand): Make sure scratch\n+\tregister used does not overlap the target.\n+\n 2002-03-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (debug.o): Depend on debug.h.\n@@ -76,8 +83,6 @@\n \t* alias.c (record_component_aliases): Record aliases for base \n \tclasses too.\n \n-2002-03-11  Ulrich Weigand  <uweigand@de.ibm.com>\n-\n \t* config/s390/s390.h (REG_ALLOC_ORDER): Add missing register.\n \n 2002-03-11  Douglas B Rupp  <rupp@gnat.com>"}, {"sha": "2881aabc65bed62eaf037c6b7b249256cdd3b67a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4e49c11d37b842954ce3edd38fded25e2411b2/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4e49c11d37b842954ce3edd38fded25e2411b2/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6a4e49c11d37b842954ce3edd38fded25e2411b2", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on IBM S/390 and zSeries\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n                   Ulrich Weigand (uweigand@de.ibm.com).\n \n@@ -1169,14 +1169,23 @@ s390_plus_operand (op, mode)\n    SCRATCH may be used as scratch register.  */\n \n void\n-s390_expand_plus_operand (target, src, scratch)\n+s390_expand_plus_operand (target, src, scratch_in)\n      register rtx target;\n      register rtx src;\n-     register rtx scratch;\n+     register rtx scratch_in;\n {\n-  /* src must be a PLUS; get its two operands.  */\n-  rtx sum1, sum2;\n+  rtx sum1, sum2, scratch;\n+\n+  /* ??? reload apparently does not ensure that the scratch register\n+     and the target do not overlap.  We absolutely require this to be\n+     the case, however.  Therefore the reload_in[sd]i patterns ask for\n+     a double-sized scratch register, and if one part happens to be\n+     equal to the target, we use the other one.  */\n+  scratch = gen_rtx_REG (Pmode, REGNO (scratch_in));\n+  if (rtx_equal_p (scratch, target))\n+    scratch = gen_rtx_REG (Pmode, REGNO (scratch_in) + 1);\n \n+  /* src must be a PLUS; get its two operands.  */\n   if (GET_CODE (src) != PLUS || GET_MODE (src) != Pmode)\n     abort ();\n "}, {"sha": "f4fbfc0a4f377dcbc8ff2557c32b3595ea05a1f5", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4e49c11d37b842954ce3edd38fded25e2411b2/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4e49c11d37b842954ce3edd38fded25e2411b2/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=6a4e49c11d37b842954ce3edd38fded25e2411b2", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler -- S/390 / zSeries version.\n-;;  Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+;;  Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n ;;  Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n ;;                 Ulrich Weigand (uweigand@de.ibm.com).\n ;; This file is part of GNU CC.\n@@ -3151,7 +3151,7 @@\n (define_expand \"reload_indi\"\n   [(parallel [(match_operand:DI 0 \"register_operand\" \"=a\")\n               (match_operand:DI 1 \"s390_plus_operand\" \"\")\n-              (match_operand:DI 2 \"register_operand\" \"=&a\")])]\n+              (match_operand:TI 2 \"register_operand\" \"=&a\")])]\n   \"TARGET_64BIT\"\n   \"\n {\n@@ -3238,7 +3238,7 @@\n (define_expand \"reload_insi\"\n   [(parallel [(match_operand:SI 0 \"register_operand\" \"=a\")\n               (match_operand:SI 1 \"s390_plus_operand\" \"\")\n-              (match_operand:SI 2 \"register_operand\" \"=&a\")])]\n+              (match_operand:DI 2 \"register_operand\" \"=&a\")])]\n   \"!TARGET_64BIT\"\n   \"\n {"}]}