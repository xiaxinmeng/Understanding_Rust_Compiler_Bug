{"sha": "6aaab5081f44b00b78e9550b5a33ba81f85c162c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhYWI1MDgxZjQ0YjAwYjc4ZTk1NTBiNWEzM2JhODFmODVjMTYyYw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-08-13T08:07:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:07:41Z"}, "message": "[Ada] Show Bit_Order and Scalar_Storage_Order in -gnatR4 output\n\nThis patch modifies the behavior of -gnatR4 so that representation\ninformation for bit and scalar storage order gets displayed in all cases\nand not just when defaults are overriden.\n\n------------\n-- Source --\n------------\n\n--  pkg.ads\n\npackage Pkg is\n   type Root is tagged record\n     Data0 : Integer;\n   end record;\n\n   type Derived is new Root with record\n      Data1 : Integer;\n   end record;\nend Pkg;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gnatmake -gnatR4 pkg.ads\n\nRepresentation information for unit Pkg (spec)\n----------------------------------------------\n\nfor Root'Size use 128;\nfor Root'Alignment use 8;\nfor Root use record\n   Data0 at 8 range  0 .. 31;\nend record;\nfor Root'Bit_Order use System.Low_Order_First;\nfor Root'Scalar_Storage_Order use System.Low_Order_First;\n\nfor Trootc'Size use 0;\nfor Trootc'Alignment use 0;\nfor Trootc use record\nend record;\nfor Trootc'Bit_Order use System.Low_Order_First;\nfor Trootc'Scalar_Storage_Order use System.Low_Order_First;\n\nfor Derived'Size use 192;\nfor Derived'Alignment use 8;\nfor Derived use record\n   Data0 at  8 range  0 .. 31;\n   Data1 at 16 range  0 .. 31;\nend record;\nfor Derived'Bit_Order use System.Low_Order_First;\nfor Derived'Scalar_Storage_Order use System.Low_Order_First;\n\nfor Tderivedc'Size use 0;\nfor Tderivedc'Alignment use 0;\nfor Tderivedc use record\n   Data0 at  8 range  0 .. 31;\n   Data1 at 16 range  0 .. 31;\nend record;\nfor Tderivedc'Bit_Order use System.Low_Order_First;\nfor Tderivedc'Scalar_Storage_Order use System.Low_Order_First;i\n\n2019-08-13  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.adb (List_Scalar_Storage_Order): Modify conditionals\n\tfor displaying ordering to always be triggered when -gnatR4 is\n\tin effect.\n\nFrom-SVN: r274347", "tree": {"sha": "fba5402adbdf304a27134e257cd2555558b74cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba5402adbdf304a27134e257cd2555558b74cf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aaab5081f44b00b78e9550b5a33ba81f85c162c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaab5081f44b00b78e9550b5a33ba81f85c162c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaab5081f44b00b78e9550b5a33ba81f85c162c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaab5081f44b00b78e9550b5a33ba81f85c162c/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4de811c54e9dc78f7bca540125fcce804a39bb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de811c54e9dc78f7bca540125fcce804a39bb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de811c54e9dc78f7bca540125fcce804a39bb7c"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "ade7e68212d7b6f996e42d2a93b21e14e4dc8d3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaab5081f44b00b78e9550b5a33ba81f85c162c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaab5081f44b00b78e9550b5a33ba81f85c162c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6aaab5081f44b00b78e9550b5a33ba81f85c162c", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* repinfo.adb (List_Scalar_Storage_Order): Modify conditionals\n+\tfor displaying ordering to always be triggered when -gnatR4 is\n+\tin effect.\n+\n 2019-08-13  Justin Squirek  <squirek@adacore.com>\n \n \t* aspects.adb, aspects.ads: Register new aspect."}, {"sha": "d168e90e0a9c92372e3c2fe18c88c27d08bf5535", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaab5081f44b00b78e9550b5a33ba81f85c162c/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaab5081f44b00b78e9550b5a33ba81f85c162c/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=6aaab5081f44b00b78e9550b5a33ba81f85c162c", "patch": "@@ -1816,16 +1816,23 @@ package body Repinfo is\n    begin\n       --  For record types, list Bit_Order if not default, or if SSO is shown\n \n+      --  Also, when -gnatR4 is in effect always list bit order and scalar\n+      --  storage order explicitly, so that you don't need to know the native\n+      --  endianness of the target for which the output was produced in order\n+      --  to interpret it.\n+\n       if Is_Record_Type (Ent)\n-        and then (List_SSO or else Reverse_Bit_Order (Ent))\n+        and then (List_SSO\n+                   or else Reverse_Bit_Order (Ent)\n+                   or else List_Representation_Info = 4)\n       then\n          List_Attr (\"Bit_Order\", Reverse_Bit_Order (Ent));\n       end if;\n \n       --  List SSO if required. If not, then storage is supposed to be in\n       --  native order.\n \n-      if List_SSO then\n+      if List_SSO or else List_Representation_Info = 4 then\n          List_Attr (\"Scalar_Storage_Order\", Reverse_Storage_Order (Ent));\n       else\n          pragma Assert (not Reverse_Storage_Order (Ent));"}]}