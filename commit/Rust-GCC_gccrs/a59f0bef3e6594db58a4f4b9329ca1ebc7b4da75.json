{"sha": "a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5ZjBiZWYzZTY1OTRkYjU4YTRmNGI5MzI5Y2ExZWJjN2I0ZGE3NQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-03-23T10:32:54Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-03-23T10:32:54Z"}, "message": "[ARM] Split out armv7ve effective target check\n\n\t* lib/target-supports.exp: Remove v7ve entry from loop\n\tcreating effective target checks.\n\t(check_effective_target_arm_arch_v7ve_ok): New procedure.\n\t(add_options_for_arm_arch_v7ve): Likewise.\n\nFrom-SVN: r234420", "tree": {"sha": "83ddff6ed21a7d83472f94a9b721cd2d30afdca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ddff6ed21a7d83472f94a9b721cd2d30afdca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b32fd17a601a76ee5d34ec86f77e87a54e88632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b32fd17a601a76ee5d34ec86f77e87a54e88632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b32fd17a601a76ee5d34ec86f77e87a54e88632"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "d0725480b01bae28f0654d89853033ff08188210", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75", "patch": "@@ -1,3 +1,10 @@\n+2016-03-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp: Remove v7ve entry from loop\n+\tcreating effective target checks.\n+\t(check_effective_target_arm_arch_v7ve_ok): New procedure.\n+\t(add_options_for_arm_arch_v7ve): Likewise.\n+\n 2016-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/70354"}, {"sha": "777bff89a0df37c8449163c7ea47188f2782b781", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a59f0bef3e6594db58a4f4b9329ca1ebc7b4da75", "patch": "@@ -3171,7 +3171,9 @@ proc check_effective_target_arm_fp16_ok { } {\n # Creates a series of routines that return 1 if the given architecture\n # can be selected and a routine to give the flags to select that architecture\n # Note: Extra flags may be added to disable options from newer compilers\n-# (Thumb in particular - but others may be added in the future)\n+# (Thumb in particular - but others may be added in the future).\n+# -march=armv7ve is special and is handled explicitly after this loop because\n+# it needs more than one predefine check to identify.\n # Usage: /* { dg-require-effective-target arm_arch_v5_ok } */\n #        /* { dg-add-options arm_arch_v5 } */\n #\t /* { dg-require-effective-target arm_arch_v5_multilib } */\n@@ -3186,7 +3188,6 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \t\t\t\t     v6z \"-march=armv6z\" __ARM_ARCH_6Z__\n \t\t\t\t     v6m \"-march=armv6-m -mthumb\" __ARM_ARCH_6M__\n \t\t\t\t     v7a \"-march=armv7-a\" __ARM_ARCH_7A__\n-\t\t\t\t     v7ve \"-march=armv7ve\" __ARM_ARCH_7A__\n \t\t\t\t     v7r \"-march=armv7-r\" __ARM_ARCH_7R__\n \t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n \t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n@@ -3221,6 +3222,26 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n     }]\n }\n \n+# Same functions as above but for -march=armv7ve.  To uniquely identify\n+# -march=armv7ve we need to check for __ARM_ARCH_7A__ as well as\n+# __ARM_FEATURE_IDIV otherwise it aliases with armv7-a.\n+\n+proc check_effective_target_arm_arch_v7ve_ok { } {\n+  if { [ string match \"*-marm*\" \"-march=armv7ve\" ] &&\n+\t![check_effective_target_arm_arm_ok] } {\n+\t\treturn 0\n+    }\n+  return [check_no_compiler_messages arm_arch_v7ve_ok assembly {\n+  #if !defined (__ARM_ARCH_7A__) || !defined (__ARM_FEATURE_IDIV)\n+  #error !armv7ve\n+  #endif\n+  } \"-march=armv7ve\" ]\n+}\n+\n+proc add_options_for_arm_arch_v7ve { flags } {\n+    return \"$flags -march=armv7ve\"\n+}\n+\n # Return 1 if this is an ARM target where -marm causes ARM to be\n # used (not Thumb)\n "}]}