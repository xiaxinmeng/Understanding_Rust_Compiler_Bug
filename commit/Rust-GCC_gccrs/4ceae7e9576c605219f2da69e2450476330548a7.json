{"sha": "4ceae7e9576c605219f2da69e2450476330548a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlYWU3ZTk1NzZjNjA1MjE5ZjJkYTY5ZTI0NTA0NzYzMzA1NDhhNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-02-27T08:37:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-02-27T08:37:51Z"}, "message": "re PR testsuite/63175 (FAIL: gcc.dg/vect/costmodel/ppc/costmodel-bb-slp-9a.c scan-tree-dump-times slp2\" basic block vectorized using SLP\" 1)\n\n2015-02-27  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/63175\n\t* builtins.c (get_object_alignment_2): Make sure to re-apply\n\tthe ANDed mask after recursing to its operand gets us a new\n\tmisalignment bit position.\n\nFrom-SVN: r221043", "tree": {"sha": "06fd165b874d97de0da7df34ee59c6359791e72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06fd165b874d97de0da7df34ee59c6359791e72a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ceae7e9576c605219f2da69e2450476330548a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceae7e9576c605219f2da69e2450476330548a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ceae7e9576c605219f2da69e2450476330548a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ceae7e9576c605219f2da69e2450476330548a7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d083ae5fae0b816b0e39018124d5dea9f824a61c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d083ae5fae0b816b0e39018124d5dea9f824a61c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d083ae5fae0b816b0e39018124d5dea9f824a61c"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "7763c88f14ffc1b3bf6a07c398f3813566debf7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceae7e9576c605219f2da69e2450476330548a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceae7e9576c605219f2da69e2450476330548a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ceae7e9576c605219f2da69e2450476330548a7", "patch": "@@ -1,3 +1,10 @@\n+2015-02-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/63175\n+\t* builtins.c (get_object_alignment_2): Make sure to re-apply\n+\tthe ANDed mask after recursing to its operand gets us a new\n+\tmisalignment bit position.\n+\n 2015-02-26  Jan Hubicka  <hubicka@ucw.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "fb871e696a0413860df79cb0c651e3851461530a", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ceae7e9576c605219f2da69e2450476330548a7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ceae7e9576c605219f2da69e2450476330548a7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4ceae7e9576c605219f2da69e2450476330548a7", "patch": "@@ -359,20 +359,25 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       tree addr = TREE_OPERAND (exp, 0);\n       unsigned ptr_align;\n       unsigned HOST_WIDE_INT ptr_bitpos;\n+      unsigned HOST_WIDE_INT ptr_bitmask = ~0;\n \n+      /* If the address is explicitely aligned, handle that.  */\n       if (TREE_CODE (addr) == BIT_AND_EXPR\n \t  && TREE_CODE (TREE_OPERAND (addr, 1)) == INTEGER_CST)\n \t{\n-\t  align = (TREE_INT_CST_LOW (TREE_OPERAND (addr, 1))\n-\t\t    & -TREE_INT_CST_LOW (TREE_OPERAND (addr, 1)));\n-\t  align *= BITS_PER_UNIT;\n+\t  ptr_bitmask = TREE_INT_CST_LOW (TREE_OPERAND (addr, 1));\n+\t  ptr_bitmask *= BITS_PER_UNIT;\n+\t  align = ptr_bitmask & -ptr_bitmask;\n \t  addr = TREE_OPERAND (addr, 0);\n \t}\n \n       known_alignment\n \t= get_pointer_alignment_1 (addr, &ptr_align, &ptr_bitpos);\n       align = MAX (ptr_align, align);\n \n+      /* Re-apply explicit alignment to the bitpos.  */\n+      ptr_bitpos &= ptr_bitmask;\n+\n       /* The alignment of the pointer operand in a TARGET_MEM_REF\n \t has to take the variable offset parts into account.  */\n       if (TREE_CODE (exp) == TARGET_MEM_REF)"}]}