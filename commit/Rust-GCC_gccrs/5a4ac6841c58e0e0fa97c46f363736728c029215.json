{"sha": "5a4ac6841c58e0e0fa97c46f363736728c029215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE0YWM2ODQxYzU4ZTBlMGZhOTdjNDZmMzYzNzM2NzI4YzAyOTIxNQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-08-20T06:53:05Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-08-20T06:53:05Z"}, "message": "re PR target/32522 (Bootstrap failure on Alpha due to pointer-plus changes)\n\n2007-08-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n           Serge Belyshev  <belyshev@depni.sinp.msu.ru>\n\n        PR target/32522\n        * config/alpha/alpha.c (va_list_skip_additions): Check for\n        POINTER_PLUS_EXPR in addition to PLUS_EXPR.\n        (alpha_stdarg_optimize_hook): Look for POINTER_PLUS_EXPR instead of\n        PLUS_EXPR when checking ap.__base.\n        (alpha_va_start): Create POINTER_PLUS_EXPR instead of PLUS_EXPR\n        when doing addition on pointer types.  Use size_int instead of\n        build_int_cst.\n        (alpha_gimplify_va_arg_1): Likewise, but use sizetype instead of\n        ptr_type in the second operand.\n\n\n\nCo-Authored-By: Serge Belyshev <belyshev@depni.sinp.msu.ru>\n\nFrom-SVN: r127637", "tree": {"sha": "fdbd8f390927699df85fbf40b365864e9d99bf4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdbd8f390927699df85fbf40b365864e9d99bf4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a4ac6841c58e0e0fa97c46f363736728c029215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4ac6841c58e0e0fa97c46f363736728c029215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a4ac6841c58e0e0fa97c46f363736728c029215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a4ac6841c58e0e0fa97c46f363736728c029215/comments", "author": null, "committer": null, "parents": [{"sha": "ba3ba492cd3434b1b05035d569d3ec5fc893b746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3ba492cd3434b1b05035d569d3ec5fc893b746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3ba492cd3434b1b05035d569d3ec5fc893b746"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "544218059e935b2966b219728b510edc6d13ecc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4ac6841c58e0e0fa97c46f363736728c029215/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4ac6841c58e0e0fa97c46f363736728c029215/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a4ac6841c58e0e0fa97c46f363736728c029215", "patch": "@@ -1,3 +1,17 @@\n+2007-08-19  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+           Serge Belyshev  <belyshev@depni.sinp.msu.ru>\n+\n+\tPR target/32522\n+\t* config/alpha/alpha.c (va_list_skip_additions): Check for\n+\tPOINTER_PLUS_EXPR in addition to PLUS_EXPR.\n+\t(alpha_stdarg_optimize_hook): Look for POINTER_PLUS_EXPR instead of\n+\tPLUS_EXPR when checking ap.__base.\n+\t(alpha_va_start): Create POINTER_PLUS_EXPR instead of PLUS_EXPR\n+\twhen doing addition on pointer types.  Use size_int instead of\n+\tbuild_int_cst.\n+\t(alpha_gimplify_va_arg_1): Likewise, but use sizetype instead of\n+\tptr_type in the second operand.\n+\n 2007-08-19  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR target/33115"}, {"sha": "de58de2bec92da3c123ec1c70d3c04a201db6c33", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a4ac6841c58e0e0fa97c46f363736728c029215/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a4ac6841c58e0e0fa97c46f363736728c029215/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5a4ac6841c58e0e0fa97c46f363736728c029215", "patch": "@@ -5834,7 +5834,8 @@ va_list_skip_additions (tree lhs)\n \n       if ((TREE_CODE (rhs) != NOP_EXPR\n \t   && TREE_CODE (rhs) != CONVERT_EXPR\n-\t   && (TREE_CODE (rhs) != PLUS_EXPR\n+\t   && ((TREE_CODE (rhs) != PLUS_EXPR\n+\t\t&& TREE_CODE (rhs) != POINTER_PLUS_EXPR)\n \t       || TREE_CODE (TREE_OPERAND (rhs, 1)) != INTEGER_CST\n \t       || !host_integerp (TREE_OPERAND (rhs, 1), 1)))\n \t  || TREE_CODE (TREE_OPERAND (rhs, 0)) != SSA_NAME)\n@@ -5876,7 +5877,7 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, tree lhs, tree rhs)\n \n   lhs = va_list_skip_additions (TREE_OPERAND (rhs, 0));\n   if (lhs == NULL_TREE\n-      || TREE_CODE (lhs) != PLUS_EXPR)\n+      || TREE_CODE (lhs) != POINTER_PLUS_EXPR)\n     return false;\n \n   base = TREE_OPERAND (lhs, 0);\n@@ -6111,8 +6112,8 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \t\t\t     valist, offset_field, NULL_TREE);\n \n       t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-      t = build2 (PLUS_EXPR, ptr_type_node, t,\n-\t\t  build_int_cst (NULL_TREE, offset));\n+      t = build2 (POINTER_PLUS_EXPR, ptr_type_node, t,\n+\t\t  size_int (offset));\n       t = build2 (GIMPLE_MODIFY_STMT, TREE_TYPE (base_field), base_field, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -6172,8 +6173,8 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n     }\n \n   /* Build the final address and force that value into a temporary.  */\n-  addr = build2 (PLUS_EXPR, ptr_type, fold_convert (ptr_type, base),\n-\t         fold_convert (ptr_type, addend));\n+  addr = build2 (POINTER_PLUS_EXPR, ptr_type, fold_convert (ptr_type, base),\n+\t         fold_convert (sizetype, addend));\n   internal_post = NULL;\n   gimplify_expr (&addr, pre_p, &internal_post, is_gimple_val, fb_rvalue);\n   append_to_statement_list (internal_post, pre_p);"}]}