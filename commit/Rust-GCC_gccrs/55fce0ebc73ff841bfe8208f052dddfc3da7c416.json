{"sha": "55fce0ebc73ff841bfe8208f052dddfc3da7c416", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmY2UwZWJjNzNmZjg0MWJmZTgyMDhmMDUyZGRkZmMzZGE3YzQxNg==", "commit": {"author": {"name": "Simon Patarin", "email": "simon.patarin@inria.fr", "date": "2001-05-28T21:03:21Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-05-28T21:03:21Z"}, "message": "ltcf-cxx.sh (osf3/osf4/osf5): Support creation of C++ shared libraries when using g++ with native linker.\n\n* ltcf-cxx.sh (osf3/osf4/osf5): Support creation of C++  shared\nlibraries when using g++ with native linker.\n\nFrom-SVN: r42680", "tree": {"sha": "d5e1ef4244be9e631211e0dde0df1eb232adc804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5e1ef4244be9e631211e0dde0df1eb232adc804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55fce0ebc73ff841bfe8208f052dddfc3da7c416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55fce0ebc73ff841bfe8208f052dddfc3da7c416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55fce0ebc73ff841bfe8208f052dddfc3da7c416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55fce0ebc73ff841bfe8208f052dddfc3da7c416/comments", "author": null, "committer": null, "parents": [{"sha": "ebb48a4de62d71fd22b020c77a952feab9dc1d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb48a4de62d71fd22b020c77a952feab9dc1d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb48a4de62d71fd22b020c77a952feab9dc1d85"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "f280358ea8452add253cad5a78b4058c81b968c0", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55fce0ebc73ff841bfe8208f052dddfc3da7c416/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55fce0ebc73ff841bfe8208f052dddfc3da7c416/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=55fce0ebc73ff841bfe8208f052dddfc3da7c416", "patch": "@@ -1,3 +1,8 @@\n+2001-05-28  Simon Patarin <simon.patarin@inria.fr>\n+\n+\t* ltcf-cxx.sh (osf3/osf4/osf5): Support creation of C++  shared\n+\tlibraries when using g++ with native linker.\n+\n 2001-05-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* ltconfig, ltmain.sh: Upgrade to libtool 1.4a 1.641.2.256."}, {"sha": "6079645c644b7f937b22d9dedcf39553e6cf8089", "filename": "ltcf-cxx.sh", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55fce0ebc73ff841bfe8208f052dddfc3da7c416/ltcf-cxx.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55fce0ebc73ff841bfe8208f052dddfc3da7c416/ltcf-cxx.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ltcf-cxx.sh?ref=55fce0ebc73ff841bfe8208f052dddfc3da7c416", "patch": "@@ -386,19 +386,6 @@ case $host_os in\n     # NetBSD uses g++ - do we need to do anything?\n     ;;\n   osf3*)\n-    if test \"$with_gcc\" = yes && test \"$with_gnu_ld\" = no; then\n-      allow_undefined_flag=' ${wl}-expect_unresolved ${wl}\\*'\n-      archive_cmds='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${objdir}/so_locations -o $lib'\n-\n-      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n-      hardcode_libdir_separator=:\n-\n-      # Commands to make compiler produce verbose output that lists\n-      # what \"hidden\" libraries, object files and flags are used when\n-      # linking a shared library.\n-      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | egrep \"\\-L\"'\n-    fi\n-\n     case $cc_basename in\n       KCC)\n         # Kuck and Associates, Inc. (KAI) C++ Compiler\n@@ -439,25 +426,25 @@ case $host_os in\n         output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\" | grep -v \"ld:\"`; templist=`echo $templist | sed \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n         ;;\n       *)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs=no\n+\tif test \"$with_gcc\" = yes && test \"$with_gnu_ld\" = no; then\n+\t  allow_undefined_flag=' ${wl}-expect_unresolved ${wl}\\*'\n+\t  archive_cmds='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${objdir}/so_locations -o $lib'\n+\n+\t  hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n+\t  hardcode_libdir_separator=:\n+\n+\t  # Commands to make compiler produce verbose output that lists\n+\t  # what \"hidden\" libraries, object files and flags are used when\n+\t  # linking a shared library.\n+\t  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | egrep \"\\-L\"'\n+    else\n+          # FIXME: insert proper C++ library support\n+          ld_shlibs=no\n+    fi\n         ;;\n     esac\n     ;;\n   osf4* | osf5*)\n-    if test \"$with_gcc\" = yes && test \"$with_gnu_ld\" = no; then\n-      allow_undefined_flag=' ${wl}-expect_unresolved ${wl}\\*'\n-      archive_cmds='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${objdir}/so_locations -o $lib'\n-\n-      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n-      hardcode_libdir_separator=:\n-\n-      # Commands to make compiler produce verbose output that lists\n-      # what \"hidden\" libraries, object files and flags are used when\n-      # linking a shared library.\n-      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | egrep \"\\-L\"'\n-    fi\n-\n     case $cc_basename in\n       KCC)\n         # Kuck and Associates, Inc. (KAI) C++ Compiler\n@@ -501,8 +488,21 @@ case $host_os in\n         output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | grep \"ld\" | grep -v \"ld:\"`; templist=`echo $templist | sed \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; echo $list'\n         ;;\n       *)\n-        # FIXME: insert proper C++ library support\n-        ld_shlibs=no\n+\tif test \"$with_gcc\" = yes && test \"$with_gnu_ld\" = no; then\n+\t  allow_undefined_flag=' ${wl}-expect_unresolved ${wl}\\*'\n+\t  archive_cmds='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && echo ${wl}-set_version ${wl}$verstring` ${wl}-update_registry ${wl}${objdir}/so_locations -o $lib'\n+\t  \n+\t  hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n+\t  hardcode_libdir_separator=:\n+\t  \n+\t  # Commands to make compiler produce verbose output that lists\n+\t  # what \"hidden\" libraries, object files and flags are used when\n+\t  # linking a shared library.\n+\t  output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | egrep \"\\-L\"'\n+    else\n+\t  # FIXME: insert proper C++ library support\n+\t  ld_shlibs=no\n+    fi\n         ;;\n     esac\n     ;;"}]}