{"sha": "676e987b850a7352ece750a8f3a1ac5dae6b3627", "node_id": "C_kwDOANBUbNoAKDY3NmU5ODdiODUwYTczNTJlY2U3NTBhOGYzYTFhYzVkYWU2YjM2Mjc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T14:11:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T14:11:31Z"}, "message": "c++: deducing only from noexcept-spec [PR80951]\n\nThe \"fail-fast\" predicate uses_deducible_template_parms used by\nunify_one_argument is neglecting to look inside the noexcept-spec of a\nfunction type.  This causes deduction to spuriously fail whenever the\nnoexcept-spec is the only part of the type which contains a deducible\ntemplate parameter.\n\n\tPR c++/80951\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (uses_deducible_template_parms): Consider the\n\tnoexcept-spec of a function type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/noexcept-type25.C: New test.", "tree": {"sha": "ffd4eb991964d6edbab7242bd62edd23cbeee7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd4eb991964d6edbab7242bd62edd23cbeee7c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676e987b850a7352ece750a8f3a1ac5dae6b3627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e987b850a7352ece750a8f3a1ac5dae6b3627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676e987b850a7352ece750a8f3a1ac5dae6b3627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676e987b850a7352ece750a8f3a1ac5dae6b3627/comments", "author": null, "committer": null, "parents": [{"sha": "7ff201d85fad11ba6365a5612124b75b385a97bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff201d85fad11ba6365a5612124b75b385a97bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff201d85fad11ba6365a5612124b75b385a97bd"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "862f337886c2b7ab5956a126735550815024d6bb", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e987b850a7352ece750a8f3a1ac5dae6b3627/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e987b850a7352ece750a8f3a1ac5dae6b3627/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=676e987b850a7352ece750a8f3a1ac5dae6b3627", "patch": "@@ -22449,6 +22449,11 @@ uses_deducible_template_parms (tree type)\n       for (; parm; parm = TREE_CHAIN (parm))\n \tif (uses_deducible_template_parms (TREE_VALUE (parm)))\n \t  return true;\n+      if (flag_noexcept_type\n+\t  && TYPE_RAISES_EXCEPTIONS (type)\n+\t  && TREE_PURPOSE (TYPE_RAISES_EXCEPTIONS (type))\n+\t  && deducible_expression (TREE_PURPOSE (TYPE_RAISES_EXCEPTIONS (type))))\n+\treturn true;\n     }\n \n   return false;"}, {"sha": "ef5c8265541b4e943096f32a04ca1fd86680fe50", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type25.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676e987b850a7352ece750a8f3a1ac5dae6b3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676e987b850a7352ece750a8f3a1ac5dae6b3627/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type25.C?ref=676e987b850a7352ece750a8f3a1ac5dae6b3627", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/80951\n+// { dg-do compile { target c++17 } }\n+\n+void f() noexcept;\n+void g();\n+\n+template<bool E>\n+constexpr bool h(void (*)() noexcept(E)) {\n+  return E;\n+}\n+\n+static_assert(h(f));\n+static_assert(!h(g));"}]}