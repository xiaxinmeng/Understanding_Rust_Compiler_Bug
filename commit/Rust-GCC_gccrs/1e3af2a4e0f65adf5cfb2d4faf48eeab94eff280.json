{"sha": "1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUzYWYyYTRlMGY2NWFkZjVjZmIyZDRmYWY0OGVlYWI5NGVmZjI4MA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2016-05-10T16:06:36Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-05-10T16:06:36Z"}, "message": "re PR middle-end/70877 ([MPX] ICE in in convert_move)\n\ngcc/\n\n\tPR middle-end/70877\n\t* tree-chkp.c (chkp_add_bounds_to_call_stmt): Handle\n\tcalls with type casted fndecl.\n\ngcc/testsuite/\n\n\tPR middle-end/70877\n\t* gcc.target/i386/pr70877.c: New test.\n\nFrom-SVN: r236088", "tree": {"sha": "1af996345d268d77408e804d789ecc0c6a911be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1af996345d268d77408e804d789ecc0c6a911be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd36c83e9bb1c8cf66082da63234925482695ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd36c83e9bb1c8cf66082da63234925482695ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd36c83e9bb1c8cf66082da63234925482695ef1"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "562d303ca6abffe4c6e033c196e62b69ad432cc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "patch": "@@ -3,6 +3,12 @@\n \t* dwarf2out.c (resolve_args_picking_1): Consider DW_OP_neg as an\n \tunary operation, not a binary one.\n \n+2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR middle-end/70877\n+\t* tree-chkp.c (chkp_add_bounds_to_call_stmt): Handle\n+\tcalls with type casted fndecl.\n+\n 2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR tree-optimization/70786"}, {"sha": "36b8e2f926d21940e39031cd703783a87bc33718", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "patch": "@@ -2,6 +2,11 @@\n \n \t* gnat.dg/debug6.adb, gnat.dg/debug6_pkg.ads: New testcase.\n \n+2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR middle-end/70877\n+\t* gcc.target/i386/pr70877.c: New test.\n+\n 2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR tree-optimization/70786"}, {"sha": "4269e84daffe7a5ea3f87a517a161e7a79c2587c", "filename": "gcc/testsuite/gcc.target/i386/pr70877.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70877.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70877.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70877.c?ref=1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+int foo(int);\n+\n+typedef struct {\n+  double d;\n+  int a;\n+} str_t;\n+\n+void bar(double d, int i, str_t s)\n+{\n+  d = ((double (*) (int)) foo) (i); /* { dg-warning \"function called through a non-compatible type\" } */\n+}"}, {"sha": "4ca2d34607c664f19a01ffdb7dacdf58d1343bc9", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "patch": "@@ -1853,7 +1853,9 @@ chkp_add_bounds_to_call_stmt (gimple_stmt_iterator *gsi)\n \n   /* If function decl is available then use it for\n      formal arguments list.  Otherwise use function type.  */\n-  if (fndecl && DECL_ARGUMENTS (fndecl))\n+  if (fndecl\n+      && DECL_ARGUMENTS (fndecl)\n+      && gimple_call_fntype (call) == TREE_TYPE (fndecl))\n     first_formal_arg = DECL_ARGUMENTS (fndecl);\n   else\n     {\n@@ -1929,7 +1931,16 @@ chkp_add_bounds_to_call_stmt (gimple_stmt_iterator *gsi)\n     {\n       tree new_decl = chkp_maybe_create_clone (fndecl)->decl;\n       gimple_call_set_fndecl (new_call, new_decl);\n-      gimple_call_set_fntype (new_call, TREE_TYPE (new_decl));\n+      /* In case of a type cast we should modify used function\n+\t type instead of using type of new fndecl.  */\n+      if (gimple_call_fntype (call) != TREE_TYPE (fndecl))\n+\t{\n+\t  tree type = gimple_call_fntype (call);\n+\t  type = chkp_copy_function_type_adding_bounds (type);\n+\t  gimple_call_set_fntype (new_call, type);\n+\t}\n+      else\n+\tgimple_call_set_fntype (new_call, TREE_TYPE (new_decl));\n     }\n   /* For indirect call we should fix function pointer type if\n      pass some bounds.  */"}]}