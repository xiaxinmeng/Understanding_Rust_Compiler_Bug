{"sha": "4089dfabe155b43b13600aa488a21b132f0b973e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4OWRmYWJlMTU1YjQzYjEzNjAwYWE0ODhhMjFiMTMyZjBiOTczZQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-07-20T23:38:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-20T23:38:58Z"}, "message": "gcc.c (do_spec): Issue a warning for '%[]' usage.\n\nTue Jul 21 00:31:01 1998  Jeffrey A Law  (law@cygnus.com)\n        * gcc.c (do_spec): Issue a warning for '%[]' usage.\n        * Undo this change.\n        * gcc.c: Delete %[spec] support.\n        (do_spec_1, case '('): Likewise.\n        (do_spec_1, case '['): Call error.\n\nFrom-SVN: r21314", "tree": {"sha": "c94fc410f69538aa48ec2c721412f3f81b4ea6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c94fc410f69538aa48ec2c721412f3f81b4ea6b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4089dfabe155b43b13600aa488a21b132f0b973e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4089dfabe155b43b13600aa488a21b132f0b973e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4089dfabe155b43b13600aa488a21b132f0b973e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4089dfabe155b43b13600aa488a21b132f0b973e/comments", "author": null, "committer": null, "parents": [{"sha": "952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952fc2ed3aa1a00c616992cc1391f0297fcc0f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952fc2ed3aa1a00c616992cc1391f0297fcc0f22"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "e8e693497dadab82fda463f4a6fad503a8892eaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089dfabe155b43b13600aa488a21b132f0b973e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089dfabe155b43b13600aa488a21b132f0b973e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4089dfabe155b43b13600aa488a21b132f0b973e", "patch": "@@ -1,3 +1,12 @@\n+Tue Jul 21 00:31:01 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c (do_spec): Issue a warning for '%[]' usage.\n+\n+\t* Undo this change.\n+\t* gcc.c: Delete %[spec] support.\n+\t(do_spec_1, case '('): Likewise.\n+\t(do_spec_1, case '['): Call error.\n+\n Mon Jul 20 22:34:17 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.h (CPP_SPEC): Tidy.  Hook to cpp_cpu and cpp_subtarget."}, {"sha": "da6425cdc3423be7df936f66cd5271e2b1ee4abe", "filename": "gcc/gcc.c", "status": "modified", "additions": 57, "deletions": 16, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4089dfabe155b43b13600aa488a21b132f0b973e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4089dfabe155b43b13600aa488a21b132f0b973e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4089dfabe155b43b13600aa488a21b132f0b973e", "patch": "@@ -365,6 +365,7 @@ or with constant text in a single argument.\n  %{S|P:X} substitutes X if either -S or -P was given to CC.  This may be\n \t  combined with ! and . as above binding stronger than the OR.\n  %(Spec) processes a specification defined in a specs file as *Spec:\n+ %[Spec] as above, but put __ around -D arguments\n \n The conditional text X in a %{S:X} or %{!S:X} construct may contain\n other nested % constructs or spaces, or even newlines.  They are\n@@ -1110,7 +1111,8 @@ skip_whitespace (p)\n }\n \f\n /* Structure to keep track of the specs that have been defined so far.\n-   These are accessed using %(specname) in a compiler or link spec.  */\n+   These are accessed using %(specname) or %[specname] in a compiler\n+   or link spec.  */\n \n struct spec_list\n {\n@@ -4033,7 +4035,11 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t    /* Process a string found as the value of a spec given by name.\n \t       This feature allows individual machine descriptions\n-\t       to add and use their own specs.  */\n+\t       to add and use their own specs.\n+\t       %[...] modifies -D options the way %P does;\n+\t       %(...) uses the spec unmodified.  */\n+\t  case '[':\n+\t    warning (\"use of obsolete %%[ operator in specs\");\n \t  case '(':\n \t    {\n \t      char *name = p;\n@@ -4042,7 +4048,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t      /* The string after the S/P is the name of a spec that is to be\n \t\t processed.  */\n-\t      while (*p && *p != ')')\n+\t      while (*p && *p != ')' && *p != ']')\n \t\tp++;\n \n \t      /* See if it's in the list */\n@@ -4051,32 +4057,67 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t  {\n \t\t    name = *(sl->ptr_spec);\n #ifdef DEBUG_SPECS\n-\t\t    fprintf (stderr, \"Processing spec %s, which is '%s'\\n\",\n-\t\t\t     sl->name, name);\n+\t\t    fprintf (stderr, \"Processing spec %c%s%c, which is '%s'\\n\",\n+\t\t\t     c, sl->name, (c == '(') ? ')' : ']', name);\n #endif\n \t\t    break;\n \t\t  }\n \n \t      if (sl)\n \t\t{\n-\t\t  value = do_spec_1 (name, 0, NULL_PTR);\n-\t\t  if (value != 0)\n-\t\t    return value;\n+\t\t  if (c == '(')\n+\t\t    {\n+\t\t      value = do_spec_1 (name, 0, NULL_PTR);\n+\t\t      if (value != 0)\n+\t\t\treturn value;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      char *x = (char *) alloca (strlen (name) * 2 + 1);\n+\t\t      char *buf = x;\n+\t\t      char *y = name;\n+\t\t      int flag = 0;\n+\n+\t\t      /* Copy all of NAME into BUF, but put __ after\n+\t\t\t every -D and at the end of each arg,  */\n+\t\t      while (1)\n+\t\t\t{\n+\t\t\t  if (! strncmp (y, \"-D\", 2))\n+\t\t\t    {\n+\t\t\t      *x++ = '-';\n+\t\t\t      *x++ = 'D';\n+\t\t\t      *x++ = '_';\n+\t\t\t      *x++ = '_';\n+\t\t\t      y += 2;\n+\t\t\t      flag = 1;\n+\t\t\t      continue;\n+\t\t\t    }\n+                          else if (flag && (*y == ' ' || *y == '\\t' || *y == '='\n+                                            || *y == '}' || *y == 0))\n+\t\t\t    {\n+\t\t\t      *x++ = '_';\n+\t\t\t      *x++ = '_';\n+\t\t\t      flag = 0;\n+\t\t\t    }\n+                          if (*y == 0)\n+\t\t\t    break;\n+\t\t\t  else\n+\t\t\t    *x++ = *y++;\n+\t\t\t}\n+\t\t      *x = 0;\n+\n+\t\t      value = do_spec_1 (buf, 0, NULL_PTR);\n+\t\t      if (value != 0)\n+\t\t\treturn value;\n+\t\t    }\n \t\t}\n \n-\t      /* Discard the closing paren.  */\n+\t      /* Discard the closing paren or bracket.  */\n \t      if (*p)\n \t\tp++;\n \t    }\n \t    break;\n \n-\t    /* This used to be like %(, except that it modified -D options\n-\t       the same way as %P.  This has been obsoleted, as it was not\n-\t       useful for obtaining correct ISO C semantics for defines.  */\n-\t  case '[':\n-\t    error (\"use of obsolete %[ operator in specs\");\n-\t    return -1;\n-\n \t  case 'v':\n \t    {\n \t      int c1 = *p++;  /* Select first or second version number.  */"}]}