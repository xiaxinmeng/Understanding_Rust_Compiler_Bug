{"sha": "8ebf4fb54ace6532b53f66405cd44fbbf8572508", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViZjRmYjU0YWNlNjUzMmI1M2Y2NjQwNWNkNDRmYmJmODU3MjUwOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-06T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-06T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "6c0a71d3219ac0293ec79c549261530ebedbbc5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c0a71d3219ac0293ec79c549261530ebedbbc5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ebf4fb54ace6532b53f66405cd44fbbf8572508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebf4fb54ace6532b53f66405cd44fbbf8572508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebf4fb54ace6532b53f66405cd44fbbf8572508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebf4fb54ace6532b53f66405cd44fbbf8572508/comments", "author": null, "committer": null, "parents": [{"sha": "582c24e9fe81f75684892de0bf580e6918695dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582c24e9fe81f75684892de0bf580e6918695dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582c24e9fe81f75684892de0bf580e6918695dd9"}], "stats": {"total": 276, "additions": 275, "deletions": 1}, "files": [{"sha": "6b7a77d7f24923ca4ea1cf3073faba695b914eb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1,3 +1,99 @@\n+2021-08-05  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99744\n+\t* config/i386/i386.c (ix86_can_inline_p): Ignore MASK_80387 if\n+\tcallee only uses GPRs.\n+\t* config/i386/ia32intrin.h: Revert commit 5463cee2770.\n+\t* config/i386/serializeintrin.h: Revert commit 71958f740f1.\n+\t* config/i386/x86gprintrin.h: Add\n+\t#pragma GCC target(\"general-regs-only\") and #pragma GCC pop_options\n+\tto disable non-GPR ISAs.\n+\n+2021-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/101787\n+\t* doc/md.texi (cond_ashl, cond_ashr, cond_lshr): Document.\n+\n+2021-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_is_store_elt_extraction, vect_is_reduction)\n+\t(vect_reduc_type, vect_embedded_comparison_type, vect_comparison_type)\n+\t(vect_is_extending_load, vect_is_integer_truncation): New functions,\n+\tmoved from aarch64.c but given different names.\n+\t* config/aarch64/aarch64.c (aarch64_is_store_elt_extraction)\n+\t(aarch64_is_reduction, aarch64_reduc_type)\n+\t(aarch64_embedded_comparison_type, aarch64_comparison_type)\n+\t(aarch64_extending_load_p, aarch64_integer_truncation_p): Delete\n+\tin favor of the above.  Update callers accordingly.\n+\n+2021-08-05  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/101723\n+\t* config/arm/arm-cpus.in (generic-armv7-a): Add quirk to suppress\n+\twriting .cpu directive in asm output.\n+\t* config/arm/arm.c (arm_identify_fpu_from_isa): New variable.\n+\t(arm_last_printed_arch_string): Delete.\n+\t(arm_last-printed_fpu_string): Delete.\n+\t(arm_configure_build_target): If use of floating-point/SIMD is\n+\tdisabled, remove all fp/simd related features from the target ISA.\n+\t(last_arm_targ_options): New variable.\n+\t(arm_print_asm_arch_directives): Add new parameters.  Change order\n+\tof emitted directives and handle all cases here.\n+\t(arm_file_start): Always call arm_print_asm_arch_directives, move\n+\tall generation of .arch/.arch_extension here.\n+\t(arm_file_end): Call arm_print_asm_arch.\n+\t(arm_declare_function_name): Call arm_print_asm_arch_directives\n+\tinstead of printing .arch/.fpu directives directly.\n+\n+2021-08-05  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.c (arm_configure_build_target): Don't call\n+\tarm_option_reconfigure_globals.\n+\t(arm_option_restore): Call arm_option_reconfigure_globals after\n+\treconfiguring the target.\n+\t* config/arm/arm-c.c (arm_pragma_target_parse): Likewise.\n+\n+2021-08-05  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.c (arm_configure_build_target): Ensure the target's\n+\tarch_name is always set.\n+\n+2021-08-05  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64.c: Traverse RTL tree to prevent cost\n+\tof vec_select high-half from being added into Neon subtract\n+\tcost.\n+\n+2021-08-05  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64.c: Traverse RTL tree to prevent cost\n+\tof vec_select high-half from being added into Neon add cost.\n+\n+2021-08-05  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* cfgloop.h (loops_list::loops_list): Add one optional argument\n+\troot and adjust accordingly, update loop tree walking and factor\n+\tout to ...\n+\t* cfgloop.c (loops_list::walk_loop_tree): ... this.  New function.\n+\n+2021-08-05  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\tPR tree-optimization/101626\n+\t* tree-sra.c (propagate_subaccesses_from_rhs): Do not set the\n+\treverse scalar storage order on a pointer or vector component.\n+\n+2021-08-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_<code><mode>): New expander.\n+\n+2021-08-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_<code><mode>): New expander.\n+\n+2021-08-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_<code><mode>): New expander.\n+\n 2021-08-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101570"}, {"sha": "891ccf65a21aaf5af223012d86c44aa35905afb3", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1 +1 @@\n-20210805\n+20210806"}, {"sha": "d4c03074f52c5ac2f254af8cf6c1030fb0a5ead8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1,3 +1,85 @@\n+2021-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.old-deja/g++.other/inline7.C: Cast nodiscard call to void.\n+\n+2021-08-05  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99744\n+\t* gcc.target/i386/pr99744-3.c: New test.\n+\t* gcc.target/i386/pr99744-4.c: Likewise.\n+\t* gcc.target/i386/pr99744-5.c: Likewise.\n+\t* gcc.target/i386/pr99744-6.c: Likewise.\n+\t* gcc.target/i386/pr99744-7.c: Likewise.\n+\t* gcc.target/i386/pr99744-8.c: Likewise.\n+\n+2021-08-05  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/101723\n+\t* gcc.target/arm/cortex-m55-nofp-flag-hard.c: Update expected output.\n+\t* gcc.target/arm/cortex-m55-nofp-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nofp-nomve-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_fpu1.c: Convert to dg-do assemble.\n+\tAdd a non-no-op function body.\n+\t* gcc.target/arm/mve/intrinsics/mve_fpu2.c: Likewise.\n+\t* gcc.target/arm/pr98636.c (dg-options): Add -mfloat-abi=softfp.\n+\t* gcc.target/arm/attr-neon.c: Tighten scan-assembler tests.\n+\t* gcc.target/arm/attr-neon2.c: Use -Ofast, convert test to use\n+\tcheck-function-bodies.\n+\t* gcc.target/arm/attr-neon3.c: Likewise.\n+\t* gcc.target/arm/pr69245.c: Tighten scan-assembler match, but allow\n+\tmultiple instances.\n+\t* gcc.target/arm/pragma_fpu_attribute.c: Likewise.\n+\t* gcc.target/arm/pragma_fpu_attribute_2.c: Likewise.\n+\n+2021-08-05  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vsubX_high_cost.c: New test.\n+\n+2021-08-05  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vaddX_high_cost.c: New test.\n+\n+2021-08-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-pr101756.c: Add -w.\n+\n+2021-08-05  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc.dg/sso-15.c: New test.\n+\n+2021-08-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_anylogic_d-1.c: New test.\n+\t* gcc.target/i386/cond_op_anylogic_d-2.c: New test.\n+\t* gcc.target/i386/cond_op_anylogic_q-1.c: New test.\n+\t* gcc.target/i386/cond_op_anylogic_q-2.c: New test.\n+\n+2021-08-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_maxmin_double-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_double-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_float-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_float-2.c: New test.\n+\n+2021-08-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_maxmin_b-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_b-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_d-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_d-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_q-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_q-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_ub-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_ub-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_ud-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_ud-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_uq-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_uq-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_uw-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_uw-2.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_w-1.c: New test.\n+\t* gcc.target/i386/cond_op_maxmin_w-2.c: New test.\n+\n 2021-08-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101570"}, {"sha": "518dbdcf0394e2ad7ab82c088a6e0d13914c4df3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1,3 +1,14 @@\n+2021-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* ucnid.h: Regenerated using Unicode 13.0.0 files.\n+\n+2021-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* makeucnid.c (write_table): Fix computation of last_combine.\n+\t* ucnid.h: Regenerated using Unicode 6.3.0 files.\n+\n 2021-06-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100796"}, {"sha": "de145fa80f46e0685a69c367e8ef6841adb6d2ae", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1,3 +1,10 @@\n+2021-08-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/t-slibgcc (SHLIB_LINK): Add $(LDFLAGS).\n+\t* config/t-slibgcc-darwin (SHLIB_LINK): Likewise.\n+\t* config/t-slibgcc-vms (SHLIB_LINK): Likewise.\n+\t* config/t-slibgcc-fuchsia (SHLIB_LDFLAGS): Remove $(LDFLAGS).\n+\n 2021-08-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/t-slibgcc-fuchsia: Undo doubly applied patch."}, {"sha": "274d238c9f94c6f2fc4ec12b2f1cce8e244af574", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1,3 +1,34 @@\n+2021-08-05  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* icv-device.c (omp_get_device_num): New API function, host side.\n+\t* fortran.c (omp_get_device_num_): New interface function.\n+\t* libgomp-plugin.h (GOMP_DEVICE_NUM_VAR): Define macro symbol.\n+\t* libgomp.map (OMP_5.0.2): New version space with omp_get_device_num,\n+\tomp_get_device_num_.\n+\t* libgomp.texi (omp_get_device_num): Add documentation for new API\n+\tfunction.\n+\t* omp.h.in (omp_get_device_num): Add declaration.\n+\t* omp_lib.f90.in (omp_get_device_num): Likewise.\n+\t* omp_lib.h.in (omp_get_device_num): Likewise.\n+\t* target.c (gomp_load_image_to_device): If additional entry for device\n+\tnumber exists at end of returned entries from 'load_image_func' hook,\n+\tcopy the assigned device number over to the device variable.\n+\t* config/gcn/icv-device.c (GOMP_DEVICE_NUM_VAR): Define static global.\n+\t(omp_get_device_num): New API function, device side.\n+\t* plugin/plugin-gcn.c (\"symcat.h\"): Add include.\n+\t(GOMP_OFFLOAD_load_image): Add addresses of device GOMP_DEVICE_NUM_VAR\n+\tat end of returned 'target_table' entries.\n+\t* config/nvptx/icv-device.c (GOMP_DEVICE_NUM_VAR): Define static global.\n+\t(omp_get_device_num): New API function, device side.\n+\t* plugin/plugin-nvptx.c (\"symcat.h\"): Add include.\n+\t(GOMP_OFFLOAD_load_image): Add addresses of device GOMP_DEVICE_NUM_VAR\n+\tat end of returned 'target_table' entries.\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_offload_target_intelmic): New function for\n+\ttesting for intelmic offloading.\n+\t* testsuite/libgomp.c-c++-common/target-45.c: New test.\n+\t* testsuite/libgomp.fortran/target10.f90: New test.\n+\n 2021-07-30  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Ulrich Drepper  <drepper@redhat.com>\n "}, {"sha": "be5daf026ce1334d4b40404384a0d9e6efa1d6b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebf4fb54ace6532b53f66405cd44fbbf8572508/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8ebf4fb54ace6532b53f66405cd44fbbf8572508", "patch": "@@ -1,3 +1,50 @@\n+2021-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101782\n+\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n+\t(ranges::rbegin, ranges::rend, ranges::size, ranges::ssize)\n+\t(ranges::empty, ranges::data): Move attribute after the\n+\tdeclarator-id instead of at the end of the declarator.\n+\t* include/bits/stl_iterator.h (__gnu_cxx::__normal_iterator):\n+\tMove attributes back to the start of the function declarator,\n+\tbut move the requires-clause to the end.\n+\t(common_iterator): Move attribute after the declarator-id.\n+\t* include/bits/stl_queue.h (queue): Remove ill-formed attributes\n+\tfrom friend declaration that are not definitions.\n+\t* include/std/ranges (views::all, views::filter)\n+\t(views::transform, views::take, views::take_while,\n+\tviews::drop) (views::drop_while, views::join,\n+\tviews::lazy_split) (views::split, views::counted,\n+\tviews::common, views::reverse) (views::elements): Move\n+\tattributes after the declarator-id.\n+\n+2021-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/compare (partial_ordering, weak_ordering)\n+\t(strong_ordering, is_eq, is_neq, is_lt, is_lteq, is_gt, is_gteq)\n+\t(compare_three_way, strong_order, weak_order, partial_order)\n+\t(compare_strong_order_fallback, compare_weak_order_fallback)\n+\t(compare_partial_order_fallback, __detail::__synth3way): Add\n+\tnodiscard attribute.\n+\t* testsuite/18_support/comparisons/categories/zero_neg.cc: Add\n+\t-Wno-unused-result to options.\n+\n+2021-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101782\n+\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n+\t(ranges::rbegin, ranges::rend, ranges::size, ranges::ssize)\n+\t(ranges::empty, ranges::data): Move attribute to the end of\n+\tthe declarator.\n+\t* include/bits/stl_iterator.h (__gnu_cxx::__normal_iterator)\n+\t(common_iterator): Likewise for non-member operator functions.\n+\t* include/std/ranges (views::all, views::filter)\n+\t(views::transform, views::take, views::take_while, views::drop)\n+\t(views::drop_while, views::join, views::lazy_split)\n+\t(views::split, views::counted, views::common, views::reverse)\n+\t(views::elements): Likewise.\n+\t* testsuite/std/ranges/access/101782.cc: New test.\n+\n 2021-08-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/forward_list.h: Add [[nodiscard]] to functions"}]}