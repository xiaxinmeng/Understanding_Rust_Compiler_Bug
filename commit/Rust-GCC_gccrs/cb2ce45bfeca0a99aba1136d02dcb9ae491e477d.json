{"sha": "cb2ce45bfeca0a99aba1136d02dcb9ae491e477d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyY2U0NWJmZWNhMGE5OWFiYTExMzZkMDJkY2I5YWU0OTFlNDc3ZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-04T08:07:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:07:00Z"}, "message": "[Ada] Spurious error on instantiation and limited_with_clause\n\nThis patch fixes a spurious error during the construction of an instance\nbody in the inlining phase of the frontend, when the package declaration\nfor the main unit has a limited_with_clause on some unit P, and the main\nunit itself does not have a corresponding regular with_clause, but some\nother unit in the context has with_clause that has compiled P.  P must\nbe removed from visibility to prevent conflicts with homonyms in the\ngeneric body to be instantiated.\n\nThe following must compile quietly:\n\n   gcc -c gpr2-project-view.adb\n\n----\npackage GNATCOLL is\nend GNATCOLL;\npackage GNATCOLL.Refcount is\n\n   generic\n      type Element_Type (<>) is private;\n   package Shared_Pointers is\n      type Ref is tagged private;\n\n      type Element_Access is access all Element_Type;\n\n      type Reference_Type (Element : access Element_Type)\n         is limited null record;\n\n      function Unchecked_Get (Self : Ref'Class) return Element_Access;\n\n      function Get (Self : Ref'Class) return Reference_Type\n         is ((Element => Unchecked_Get (Self)));\n   private\n      type Ref is tagged null record;\n   end Shared_Pointers;\n\n   type Refcounted is abstract tagged null record;\n\n   generic\n      type Encapsulated is abstract new Refcounted with private;\n   package Smart_Pointers is\n      type Encapsulated_Access is access all Encapsulated'Class;\n\n      type Ref is tagged private;\n\n      procedure Set (Self : in out Ref; Data : Encapsulated'Class);\n      procedure Set (Self : in out Ref; Data : access Encapsulated'Class);\n   private\n      type Ref is tagged null record;\n   end Smart_Pointers;\n\nend GNATCOLL.Refcount;\n----\npackage body GNATCOLL.Refcount is\n\n   package body Shared_Pointers is\n\n      function Unchecked_Get (Self : Ref'Class) return Element_Access is\n      begin\n         return null;\n      end Unchecked_Get;\n\n   end Shared_Pointers;\n\n   package body Smart_Pointers is\n\n      procedure Set (Self : in out Ref; Data : access Encapsulated'Class) is\n      begin\n         null;\n      end Set;\n\n      procedure Set (Self : in out Ref; Data : Encapsulated'Class) is\n         Tmp : constant Encapsulated_Access := new Encapsulated'Class'(Data);\n      begin\n         Set (Self, Tmp);\n      end Set;\n\n   end Smart_Pointers;\nend GNATCOLL.Refcount;\n----\npackage GPR2 is\nend GPR2;\n----\npackage GPR2.Parser is\nend GPR2.Parser;\n----\nwith GPR_Parser.Analysis;\npackage GPR2.Parser.Project is\nend GPR2.Parser.Project;\n----\npackage GPR2.Project is\nend GPR2.Project;\n----\nwith GPR2.Parser.Project;\npackage GPR2.Project.Configuration is\nend GPR2.Project.Configuration;\n----\nwith GPR2.Project.Configuration;\nwith GPR2.Unit.Set;\npackage GPR2.Project.Definition is\nend GPR2.Project.Definition;\n----\nlimited with GPR2.Unit.Set;\npackage GPR2.Project.View is\n   procedure Require_Body;\nend GPR2.Project.View;\n----\nwith GPR2.Project.Definition;\npackage body GPR2.Project.View is\n   procedure Require_Body is null;\nend GPR2.Project.View;\n----\npackage GPR2.Unit is\nend GPR2.Unit;\n\npackage GPR2.Unit.Set is\nend GPR2.Unit.Set;\n...\npackage GPR_Parser is\nend GPR_Parser;\n----\nwith GNATCOLL.Refcount;\npackage GPR_Parser.Analysis is\n\n   type Unit_Provider_Interface is null record;\n\n   package Unit_Provider_References is new GNATCOLL.Refcount.Shared_Pointers\n     (Unit_Provider_Interface);\n\nend GPR_Parser.Analysis;\n\n2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch10.adb (Remove_Context_Clauses): Handle properly the\n\tremoval of a limited_with_clause which appears in the library\n\tunit oF the main unit, when some other unit in the context has a\n\tregular with_clause on the same unit, to prevent spurious\n\tvisibility errors in the subsequent analysis of pending instance\n\tbodies.\n\nFrom-SVN: r273067", "tree": {"sha": "461648ed8fb112ace998cd91751bb9e97600b629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461648ed8fb112ace998cd91751bb9e97600b629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0839ffce2ddfe5aa3fb4b7cd8b51610f4c116bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0839ffce2ddfe5aa3fb4b7cd8b51610f4c116bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0839ffce2ddfe5aa3fb4b7cd8b51610f4c116bcb"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "be3241e09f4a5739dc44dc44a272318b4fcbd595", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cb2ce45bfeca0a99aba1136d02dcb9ae491e477d", "patch": "@@ -1,3 +1,12 @@\n+2019-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Remove_Context_Clauses): Handle properly the\n+\tremoval of a limited_with_clause which appears in the library\n+\tunit oF the main unit, when some other unit in the context has a\n+\tregular with_clause on the same unit, to prevent spurious\n+\tvisibility errors in the subsequent analysis of pending instance\n+\tbodies.\n+\n 2019-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_elab.adb: Add new type Elaboration_Phase_Status along with"}, {"sha": "b8d7c6a2f479a8d59b305be34b7e6c157d2aef3b", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2ce45bfeca0a99aba1136d02dcb9ae491e477d/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=cb2ce45bfeca0a99aba1136d02dcb9ae491e477d", "patch": "@@ -6379,22 +6379,38 @@ package body Sem_Ch10 is\n \n    begin\n       --  Ada 2005 (AI-50217): We remove the context clauses in two phases:\n-      --  limited-views first and regular-views later (to maintain the\n-      --  stack model).\n+      --  limited-views first and regular-views later (to maintain the stack\n+      --  model).\n \n       --  First Phase: Remove limited_with context clauses\n \n       Item := First (Context_Items (N));\n       while Present (Item) loop\n \n-         --  We are interested only in with clauses which got installed\n-         --  on entry.\n+         --  We are interested only in with clauses that got installed on entry\n \n          if Nkind (Item) = N_With_Clause\n            and then Limited_Present (Item)\n-           and then Limited_View_Installed (Item)\n          then\n-            Remove_Limited_With_Clause (Item);\n+            if Limited_View_Installed (Item) then\n+               Remove_Limited_With_Clause (Item);\n+\n+            --  An unusual case: If the library unit of the Main_Unit has\n+            --  a limited with_clause on some unit P and the context somewhere\n+            --  includes a with_clause on P, P has been analyzed. The entity\n+            --  for P is still visible, which in general is harmless because\n+            --  this is the end of the compilation, but it can affect pending\n+            --  instantiations that may have been generated elsewhere, so it\n+            --  it is necessary to remove U from visibility so that inlining\n+            --  and the analysis of instance bodies can proceed cleanly.\n+\n+            elsif Current_Sem_Unit = Main_Unit\n+              and then Serious_Errors_Detected = 0\n+              and then not Implicit_With (Item)\n+            then\n+               Set_Is_Immediately_Visible\n+                 (Defining_Entity  (Unit (Library_Unit (Item))), False);\n+            end if;\n          end if;\n \n          Next (Item);"}]}