{"sha": "0a60524de103288347dd193937059e4e77c64079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE2MDUyNGRlMTAzMjg4MzQ3ZGQxOTM5MzcwNTllNGU3N2M2NDA3OQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-31T20:13:01Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-09-17T14:42:10Z"}, "message": "rs6000: Move __builtin_mffsl to the [always] stanza\n\nI over-restricted use of __builtin_mffsl, since I was unaware that it\nautomatically uses mffs when mffsl is not available.  Paul Clarke pointed\nthis out in discussion of his SSE 4.1 compatibility patches.\n\n2021-08-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def (__builtin_mffsl): Move from\n\t[power9] to [always].", "tree": {"sha": "666d7588e2d6b2b824c8d21ebeecd3adf832a8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/666d7588e2d6b2b824c8d21ebeecd3adf832a8fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a60524de103288347dd193937059e4e77c64079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a60524de103288347dd193937059e4e77c64079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a60524de103288347dd193937059e4e77c64079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a60524de103288347dd193937059e4e77c64079/comments", "author": null, "committer": null, "parents": [{"sha": "654187d05376f08667c8ba88309073e0345431c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654187d05376f08667c8ba88309073e0345431c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654187d05376f08667c8ba88309073e0345431c2"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "a8c6b9e988f6bf8060ea1c5d2b19fe93fbfaccee", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a60524de103288347dd193937059e4e77c64079/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a60524de103288347dd193937059e4e77c64079/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=0a60524de103288347dd193937059e4e77c64079", "patch": "@@ -208,6 +208,12 @@\n   double __builtin_mffs ();\n     MFFS rs6000_mffs {}\n \n+; Although the mffsl instruction is only available on POWER9 and later\n+; processors, this builtin automatically falls back to mffs on older\n+; platforms.  Thus it appears here in the [always] stanza.\n+  double __builtin_mffsl ();\n+    MFFSL rs6000_mffsl {}\n+\n ; This thing really assumes long double == __ibm128, and I'm told it has\n ; been used as such within libgcc.  Given that __builtin_pack_ibm128\n ; exists for the same purpose, this should really not be used at all.\n@@ -2784,9 +2790,6 @@\n   signed long long __builtin_darn_raw ();\n     DARN_RAW darn_raw {}\n \n-  double __builtin_mffsl ();\n-    MFFSL rs6000_mffsl {}\n-\n   const signed int __builtin_dtstsfi_eq_dd (const int<6>, _Decimal64);\n     TSTSFI_EQ_DD dfptstsfi_eq_dd {}\n "}]}