{"sha": "6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYzN2M4ZDQ2NmJmMmU5MGVhNzRhNmU2ZDVlN2NiNzllMzdiYmU4ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-05T06:12:39Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-05T06:12:39Z"}, "message": "builtin-complex-1.c: Use dg-add-options ieee.\n\n\t* gcc.dg/torture/builtin-complex-1.c: Use dg-add-options ieee.\n\nFrom-SVN: r179536", "tree": {"sha": "e76951fcc3a7d80e408edd5ce10192e13cc3cfb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76951fcc3a7d80e408edd5ce10192e13cc3cfb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/comments", "author": null, "committer": null, "parents": [{"sha": "facb3fd7396177cc3848b478b9eb519a35880d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facb3fd7396177cc3848b478b9eb519a35880d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facb3fd7396177cc3848b478b9eb519a35880d17"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "1200ec55c52f7d484e31b8595324524c3484c7e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "patch": "@@ -10,8 +10,7 @@\n \tumulxhi_v8plus, xmulx_vis, *xmulx_sp64, xmulx_v8plus,\n \txmulxhi_vis, *xmulxhi_sp64, xmulxhi_v8plus): New VIS 3.0\n \tbuiltins patterns.\n-\t* config/sparc/sparc.c (sparc_vis_init_builtins): Emit new\n-\tbuiltins.\n+\t* config/sparc/sparc.c (sparc_vis_init_builtins): Emit new builtins.\n \t(output_v8plus_mult): New function.\n \t* config/sparc/sparc-protos.h: Declare it.\n \t* config/sparc/visintrin.h (__vis_fhadds, __vis_fhaddd,\n@@ -26,8 +25,7 @@\n \n 2011-10-04  Ozkan Sezer  <sezeroz@gmail.com>\n \n-\t* config/i386/mingw-w64.h (CPP_SPEC): Rename _REENTRANCE to\n-\t_REENTRANT.\n+\t* config/i386/mingw-w64.h (CPP_SPEC): Rename _REENTRANCE to _REENTRANT.\n \t* config/i386/mingw32.h (CPP_SPEC): Likewise.\n \n 2011-10-04  David S. Miller  <davem@davemloft.net>\n@@ -40,8 +38,7 @@\n \tPR tree-optimization/50604\n \t* builtins.c (fold_builtin_strcpy, fold_builtin_stpcpy,\n \tfold_builtin_strncpy, fold_builtin_stxcpy_chk): Ensure\n-\tlast argument to memcpy has size_type_node type instead of\n-\tssizetype.\n+\tlast argument to memcpy has size_type_node type instead of ssizetype.\n \t* tree-ssa-strlen.c (handle_builtin_memcpy): Use size_type_node\n \tinstead of TREE_TYPE (len) as type for newlen.\n \n@@ -59,8 +56,7 @@\n \n 2011-10-04  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* config.gcc (i[34567]86-*-elf*, x86_64-*-elf*): Use\n-\ti386/t-crtstuff.\n+\t* config.gcc (i[34567]86-*-elf*, x86_64-*-elf*): Use i386/t-crtstuff.\n \n 2011-10-04  Jan Hubicka  <jh@suse.cz>\n \n@@ -143,8 +139,8 @@\n \tRTL using zero_extract.\n \t(bshuffle<V64I:mode>_vis): Put the GSR use inside of the unspec.\n \n-\t* config/sparc/sparc.md (bshuffle<V64I:mode>_vis): Don't wrap GSR_REG in\n-\ta USE, since it's now a true arg to the UNSPEC.\n+\t* config/sparc/sparc.md (bshuffle<V64I:mode>_vis): Don't wrap\n+\tGSR_REG in a USE, since it's now a true arg to the UNSPEC.\n \n 2011-10-03  Artjoms Sinkarovs  <artyom.shinkaroff@gmail.com>\n \n@@ -265,7 +261,8 @@\n \t* lto-symtab.c (lto_symtab_resolve_symbols): Do not resolve\n \twhen resolution is already availbale from plugin.\n \t(lto_symtab_merge_decls_1): Handle LDPR_PREVAILING_DEF_IRONLY_EXP.\n-\t* cgraph.c (ld_plugin_symbol_resolution): Add prevailing_def_ironly_exp.\n+\t* cgraph.c (ld_plugin_symbol_resolution): Add\n+\tprevailing_def_ironly_exp.\n \t* lto-cgraph.c (LDPR_NUM_KNOWN): Update.\n \t* ipa.c (varpool_externally_visible_p): IRONLY variables are never\n \texternally visible.\n@@ -290,12 +287,12 @@\n \t(vis3_shift_insn, vis3_addsub_ss_insn): New code attributes.\n \t(cmask8<P:mode>_vis, cmask16<P:mode>_vis, cmask32<P:mode>_vis,\n \tfchksm16_vis, <vis3_shift_insn><vbits>_vis, pdistn<mode>_vis,\n-\tfmean16_vis, fpadd64_vis, fpsub64_vis, <vis3_addsub_ss_insn><vbits>_vis,\n-\tfucmp<code>8<P:mode>_vis): New VIS 3.0 instruction patterns.\n+\tfmean16_vis, fpadd64_vis, fpsub64_vis,\n+\t<vis3_addsub_ss_insn><vbits>_vis, fucmp<code>8<P:mode>_vis): New\n+\tVIS 3.0 instruction patterns.\n \t* config/sparc/sparc.c (sparc_option_override): Set MASK_VIS3 by\n \tdefault when targetting capable cpus.  TARGET_VIS3 implies\n-\tTARGET_VIS2 and TARGET_VIS, and clear them when TARGET_FPU is\n-\tdisabled.\n+\tTARGET_VIS2 and TARGET_VIS, and clear them when TARGET_FPU is disabled.\n \t(sparc_vis_init_builtins): Emit new VIS 3.0 builtins.\n \t(sparc_fold_builtin): Do not eliminate cmask{8,16,32} when result\n \tis ignored.\n@@ -463,7 +460,7 @@\n \n 2011-09-30  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n-        PR target/50099\n+\tPR target/50099\n \t* config/arm/iterators.md (qhs_zextenddi_cstr): New.\n \t(qhs_zextenddi_op): New.\n \t* config/arm/arm.md (\"zero_extend<mode>di2\"): Use them.\n@@ -504,8 +501,7 @@\n 2011-09-29  Nick Clifton  <nickc@redhat.com>\n \t    Bernd Schmidt  <bernds@codesourcery.com>\n \n-\t* config/frv/frvbegin.c: Fix location of unwind-dw2-fde.h header\n-\tfile.\n+\t* config/frv/frvbegin.c: Fix location of unwind-dw2-fde.h header file.\n \t* config/frv/frvend.c: Likewise.\n \t* config/frv/frv.c (frv_function_prologue): Move misplaced\n \tCALL_ARG_LOCATION notes back to their proper locations.\n@@ -539,27 +535,29 @@\n \n 2011-09-27   Andi Kleen <ak@linux.intel.com>\n \n-\t* gcc.c (get_local_tick). Rename to get_random_number.\n-        Read from /dev/urandom.\n-\tAdd getpid call.\n+\t* gcc.c (get_local_tick). Rename to get_random_number.  Read from\n+\t/dev/urandom.  Add getpid call.\n \t(compare_debug_dump_opt_spec_function): Drop getpid call.\n \n 2011-09-26   Andi Kleen <ak@linux.intel.com>\n \n-\t* toplev.c (init_local_tick): Try reading random seed from /dev/urandom\n+\t* toplev.c (init_local_tick): Try reading random seed\n+\tfrom /dev/urandom.\n \n 2011-09-26   Andi Kleen <ak@linux.intel.com>\n \n \t* hwint.h (HOST_WIDE_INT_PRINT_HEX_PURE): Add.\n \t* lto-streamer.c (lto_get_section_name): Remove crc32_string.\n  \tHandle numerical random seed.\n-\t* lto-streamer.h (lto_file_decl_data): Change id to unsigned HOST_WIDE_INT.\n+\t* lto-streamer.h (lto_file_decl_data): Change id to\n+\tunsigned HOST_WIDE_INT.\n \t* toplev.c (random_seed): Add.\n \t(init_random_seed): Change for numerical random seed.\n \t(get_random_seed): Return as HOST_WIDE_INT.\n \t(set_random_seed): Crc32 existing string.\n \t* toplev.h (get_random_seed): Change to numercal return.\n-\t* tree.c (get_file_function_name): Remove CRC. Handle numerical random seed.\n+\t* tree.c (get_file_function_name): Remove CRC. Handle\n+\tnumerical random seed.\n \n 2011-09-29  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -584,8 +582,7 @@\n \t(c_objc_common_truthvalue_conversion): Adjust.\n \t* tree-vect-generic.c (do_compare): Helper function.\n \t(expand_vector_comparison): Check if hardware supports\n-\tvector comparison of the given type or expand vector\n-\tpiecewise.\n+\tvector comparison of the given type or expand vector piecewise.\n \t(expand_vector_operation): Treat comparison as binary\n \toperation of vector type.\n \t(expand_vector_operations_1): Adjust."}, {"sha": "70deac7f63325b8ad2835fb6178ab3e000877e30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "patch": "@@ -1,3 +1,7 @@\n+2011-10-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/torture/builtin-complex-1.c: Use dg-add-options ieee.\n+\n 2011-10-04  David S. Miller  <davem@davemloft.net>\n \n \t* gcc.target/sparc/fhalve.c: New test.\n@@ -126,7 +130,7 @@\n \n 2011-09-30  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n-       * gcc.target/arm/pr42835.c: Add -fno-tree-tail-merge.\n+\t* gcc.target/arm/pr42835.c: Add -fno-tree-tail-merge.\n \n 2011-09-30  David S. Miller  <davem@davemloft.net>\n "}, {"sha": "0c2f98b832aabe3a66c9a9c00b7d5af066469a0e", "filename": "gcc/testsuite/gcc.dg/torture/builtin-complex-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-complex-1.c?ref=6f37c8d466bf2e90ea74a6e6d5e7cb79e37bbe8d", "patch": "@@ -1,6 +1,7 @@\n /* Test __builtin_complex semantics.  */\n /* { dg-do run } */\n /* { dg-options \"-std=c1x -pedantic-errors\" } */\n+/* { dg-add-options ieee } */\n \n extern void exit (int);\n extern void abort (void);"}]}