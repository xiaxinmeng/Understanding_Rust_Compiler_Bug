{"sha": "f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "node_id": "C_kwDOANBUbNoAKGY1OGNiYmI3YzkwZDhjZmVhODdkYzQ0OTBiNTc1YTM2OGUxZTJjODI", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2023-03-23T19:08:00Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@linux.ibm.com", "date": "2023-03-23T19:08:00Z"}, "message": "Don't force target of modulo into a distinct register.\n\nThe define_insns for the modulo operation currently force the target register\nto a distinct reg in preparation for a possible future peephole combining\ndiv/mod. But this can lead to cases of a needless copy being inserted. Fixed\nwith the following patch.\n\ngcc/\n\t* config/rs6000/rs6000.md (*mod<mode>3, umod<mode>3): Add\n\tnon-earlyclobber alternative.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mod-no_copy.c: New.\n\t* gcc.target/powerpc/mod-peephole.c: New.", "tree": {"sha": "86f180c1449a40adf1a978716c5702bbf027adbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f180c1449a40adf1a978716c5702bbf027adbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/comments", "author": null, "committer": null, "parents": [{"sha": "80ed2a6471a39dd95192a334789fd63d5efd2e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ed2a6471a39dd95192a334789fd63d5efd2e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ed2a6471a39dd95192a334789fd63d5efd2e8a"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "44f7dd509cb422acb33a42d35724e1827b865a54", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "patch": "@@ -3437,19 +3437,19 @@\n ;; In order to enable using a peephole2 for combining div/mod to eliminate the\n ;; mod, prefer putting the result of mod into a different register\n (define_insn \"*mod<mode>3\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n-        (mod:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n-\t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r,r\")\n+        (mod:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")))]\n   \"TARGET_MODULO\"\n   \"mods<wd> %0,%1,%2\"\n   [(set_attr \"type\" \"div\")\n    (set_attr \"size\" \"<bits>\")])\n \n \n (define_insn \"umod<mode>3\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r\")\n-        (umod:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n-\t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=&r,r\")\n+        (umod:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")))]\n   \"TARGET_MODULO\"\n   \"modu<wd> %0,%1,%2\"\n   [(set_attr \"type\" \"div\")"}, {"sha": "c55e486ee9b9544b7fd45adc03a60d1475d226bf", "filename": "gcc/testsuite/gcc.target/powerpc/mod-no_copy.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-no_copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-no_copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-no_copy.c?ref=f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n+\n+/* Verify r3 is used as source and target, no copy inserted. */\n+\n+long foo (long a, long b)\n+{\n+  return (a % b);\n+}\n+\n+unsigned long foo2 (unsigned long a, unsigned long b)\n+{\n+  return (a % b);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mmr\\M} } } */"}, {"sha": "7517fbc397c9103e3f43e10efe8c173244f5be37", "filename": "gcc/testsuite/gcc.target/powerpc/mod-peephole.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-peephole.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58cbbb7c90d8cfea87dc4490b575a368e1e2c82/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-peephole.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmod-peephole.c?ref=f58cbbb7c90d8cfea87dc4490b575a368e1e2c82", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n+\n+/* Verify peephole fires to combine div/mod using same opnds. */\n+\n+long foo (long a, long b)\n+{\n+  long x, y;\n+\n+  x = a / b;\n+  y = a % b;\n+  return (x + y);\n+}\n+\n+unsigned long foo2 (unsigned long a, unsigned long b)\n+{\n+  unsigned long x, y;\n+\n+  x = a / b;\n+  y = a % b;\n+  return (x + y);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mmodsd\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mmodud\\M} } } */"}]}