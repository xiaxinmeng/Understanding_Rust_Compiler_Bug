{"sha": "77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjNGFlMjQyZjgwNzRhN2M3ZWE0Y2M4ZDM3OTNmZDg5OTc4NmUxZQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-10-23T17:13:27Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2012-10-23T17:13:27Z"}, "message": "AArch64 [5/10]\n\n2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n\t    Jim MacArthur  <jim.macarthur@arm.com>\n\t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\t    Nigel Stephens  <nigel.stephens@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\t    Sofiane Naci  <sofiane.naci@arm.com>\n\t    Stephen Thomas  <stephen.thomas@arm.com>\n\t    Tejas Belagod  <tejas.belagod@arm.com>\n\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* gcc.target/aarch64/aapcs/aapcs64.exp: New file.\n\t* gcc.target/aarch64/aapcs/abitest-2.h: New file.\n\t* gcc.target/aarch64/aapcs/abitest-common.h: New file.\n\t* gcc.target/aarch64/aapcs/abitest.S: New file.\n\t* gcc.target/aarch64/aapcs/abitest.h: New file.\n\t* gcc.target/aarch64/aapcs/func-ret-1.c: New file.\n\t* gcc.target/aarch64/aapcs/func-ret-2.c: New file.\n\t* gcc.target/aarch64/aapcs/func-ret-3.c: New file.\n\t* gcc.target/aarch64/aapcs/func-ret-3.x: New file.\n\t* gcc.target/aarch64/aapcs/func-ret-4.c: New file.\n\t* gcc.target/aarch64/aapcs/func-ret-4.x: New file.\n\t* gcc.target/aarch64/aapcs/ice_1.c: New file.\n\t* gcc.target/aarch64/aapcs/ice_2.c: New file.\n\t* gcc.target/aarch64/aapcs/ice_3.c: New file.\n\t* gcc.target/aarch64/aapcs/ice_4.c: New file.\n\t* gcc.target/aarch64/aapcs/ice_5.c: New file.\n\t* gcc.target/aarch64/aapcs/macro-def.h: New file.\n\t* gcc.target/aarch64/aapcs/test_1.c: New file.\n\t* gcc.target/aarch64/aapcs/test_10.c: New file.\n\t* gcc.target/aarch64/aapcs/test_11.c: New file.\n\t* gcc.target/aarch64/aapcs/test_12.c: New file.\n\t* gcc.target/aarch64/aapcs/test_13.c: New file.\n\t* gcc.target/aarch64/aapcs/test_14.c: New file.\n\t* gcc.target/aarch64/aapcs/test_15.c: New file.\n\t* gcc.target/aarch64/aapcs/test_16.c: New file.\n\t* gcc.target/aarch64/aapcs/test_17.c: New file.\n\t* gcc.target/aarch64/aapcs/test_18.c: New file.\n\t* gcc.target/aarch64/aapcs/test_19.c: New file.\n\t* gcc.target/aarch64/aapcs/test_2.c: New file.\n\t* gcc.target/aarch64/aapcs/test_20.c: New file.\n\t* gcc.target/aarch64/aapcs/test_21.c: New file.\n\t* gcc.target/aarch64/aapcs/test_22.c: New file.\n\t* gcc.target/aarch64/aapcs/test_23.c: New file.\n\t* gcc.target/aarch64/aapcs/test_24.c: New file.\n\t* gcc.target/aarch64/aapcs/test_25.c: New file.\n\t* gcc.target/aarch64/aapcs/test_26.c: New file.\n\t* gcc.target/aarch64/aapcs/test_3.c: New file.\n\t* gcc.target/aarch64/aapcs/test_4.c: New file.\n\t* gcc.target/aarch64/aapcs/test_5.c: New file.\n\t* gcc.target/aarch64/aapcs/test_6.c: New file.\n\t* gcc.target/aarch64/aapcs/test_7.c: New file.\n\t* gcc.target/aarch64/aapcs/test_8.c: New file.\n\t* gcc.target/aarch64/aapcs/test_9.c: New file.\n\t* gcc.target/aarch64/aapcs/test_align-1.c: New file.\n\t* gcc.target/aarch64/aapcs/test_align-2.c: New file.\n\t* gcc.target/aarch64/aapcs/test_align-3.c: New file.\n\t* gcc.target/aarch64/aapcs/test_align-4.c: New file.\n\t* gcc.target/aarch64/aapcs/test_complex.c: New file.\n\t* gcc.target/aarch64/aapcs/test_int128.c: New file.\n\t* gcc.target/aarch64/aapcs/test_quad_double.c: New file.\n\t* gcc.target/aarch64/aapcs/type-def.h: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-1.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-10.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-11.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-12.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-2.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-3.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-4.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-5.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-6.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-7.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-8.c: New file.\n\t* gcc.target/aarch64/aapcs/va_arg-9.c: New file.\n\t* gcc.target/aarch64/aapcs/validate_memory.h: New file.\n\t* gcc.target/aarch64/aarch64.exp: New file.\n\t* gcc.target/aarch64/adc-1.c: New file.\n\t* gcc.target/aarch64/adc-2.c: New file.\n\t* gcc.target/aarch64/asm-1.c: New file.\n\t* gcc.target/aarch64/clrsb.c: New file.\n\t* gcc.target/aarch64/clz.c: New file.\n\t* gcc.target/aarch64/ctz.c: New file.\n\t* gcc.target/aarch64/csinc-1.c: New file.\n\t* gcc.target/aarch64/csinv-1.c: New file.\n\t* gcc.target/aarch64/csneg-1.c: New file.\n\t* gcc.target/aarch64/extend.c: New file.\n\t* gcc.target/aarch64/fcvt.x: New file.\n\t* gcc.target/aarch64/fcvt_double_int.c: New file.\n\t* gcc.target/aarch64/fcvt_double_long.c: New file.\n\t* gcc.target/aarch64/fcvt_double_uint.c: New file.\n\t* gcc.target/aarch64/fcvt_double_ulong.c: New file.\n\t* gcc.target/aarch64/fcvt_float_int.c: New file.\n\t* gcc.target/aarch64/fcvt_float_long.c: New file.\n\t* gcc.target/aarch64/fcvt_float_uint.c: New file.\n\t* gcc.target/aarch64/fcvt_float_ulong.c: New file.\n\t* gcc.target/aarch64/ffs.c: New file.\n\t* gcc.target/aarch64/fmadd.c: New file.\n\t* gcc.target/aarch64/fnmadd-fastmath.c: New file.\n\t* gcc.target/aarch64/frint.x: New file.\n\t* gcc.target/aarch64/frint_double.c: New file.\n\t* gcc.target/aarch64/frint_float.c: New file.\n\t* gcc.target/aarch64/index.c: New file.\n\t* gcc.target/aarch64/mneg-1.c: New file.\n\t* gcc.target/aarch64/mneg-2.c: New file.\n\t* gcc.target/aarch64/mneg-3.c: New file.\n\t* gcc.target/aarch64/mnegl-1.c: New file.\n\t* gcc.target/aarch64/mnegl-2.c: New file.\n\t* gcc.target/aarch64/narrow_high-intrinsics.c: New file.\n\t* gcc.target/aarch64/pic-constantpool1.c: New file.\n\t* gcc.target/aarch64/pic-symrefplus.c: New file.\n\t* gcc.target/aarch64/predefine_large.c: New file.\n\t* gcc.target/aarch64/predefine_small.c: New file.\n\t* gcc.target/aarch64/predefine_tiny.c: New file.\n\t* gcc.target/aarch64/reload-valid-spoff.c: New file.\n\t* gcc.target/aarch64/scalar_intrinsics.c: New file.\n\t* gcc.target/aarch64/table-intrinsics.c: New file.\n\t* gcc.target/aarch64/tst-1.c: New file.\n\t* gcc.target/aarch64/vect-abs-compile.c: New file.\n\t* gcc.target/aarch64/vect-abs.c: New file.\n\t* gcc.target/aarch64/vect-abs.x: New file.\n\t* gcc.target/aarch64/vect-compile.c: New file.\n\t* gcc.target/aarch64/vect-faddv-compile.c: New file.\n\t* gcc.target/aarch64/vect-faddv.c: New file.\n\t* gcc.target/aarch64/vect-faddv.x: New file.\n\t* gcc.target/aarch64/vect-fmax-fmin-compile.c: New file.\n\t* gcc.target/aarch64/vect-fmax-fmin.c: New file.\n\t* gcc.target/aarch64/vect-fmax-fmin.x: New file.\n\t* gcc.target/aarch64/vect-fmaxv-fminv-compile.c: New file.\n\t* gcc.target/aarch64/vect-fmaxv-fminv.x: New file.\n\t* gcc.target/aarch64/vect-fp-compile.c: New file.\n\t* gcc.target/aarch64/vect-fp.c: New file.\n\t* gcc.target/aarch64/vect-fp.x: New file.\n\t* gcc.target/aarch64/vect-mull-compile.c: New file.\n\t* gcc.target/aarch64/vect-mull.c: New file.\n\t* gcc.target/aarch64/vect-mull.x: New file.\n\t* gcc.target/aarch64/vect.c: New file.\n\t* gcc.target/aarch64/vect.x: New file.\n\t* gcc.target/aarch64/vector_intrinsics.c: New file.\n\t* gcc.target/aarch64/vfp-1.c: New file.\n\t* gcc.target/aarch64/volatile-bitfields-1.c: New file.\n\t* gcc.target/aarch64/volatile-bitfields-2.c: New file.\n\t* gcc.target/aarch64/volatile-bitfields-3.c: New file.\n\t* g++.dg/abi/aarch64_guard1.C: New file.\n\n\nCo-Authored-By: Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\nCo-Authored-By: Jim MacArthur <jim.macarthur@arm.com>\nCo-Authored-By: Marcus Shawcroft <marcus.shawcroft@arm.com>\nCo-Authored-By: Nigel Stephens <nigel.stephens@arm.com>\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\nCo-Authored-By: Sofiane Naci <sofiane.naci@arm.com>\nCo-Authored-By: Stephen Thomas <stephen.thomas@arm.com>\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\nCo-Authored-By: Yufeng Zhang <yufeng.zhang@arm.com>\n\nFrom-SVN: r192725", "tree": {"sha": "0e12c696ad89f4e4d8a8fa6c9f370d2c9da5d74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e12c696ad89f4e4d8a8fa6c9f370d2c9da5d74a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/comments", "author": null, "committer": null, "parents": [{"sha": "5c0da01859030ded4150e4bf9f1c93c7d800c863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0da01859030ded4150e4bf9f1c93c7d800c863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0da01859030ded4150e4bf9f1c93c7d800c863"}], "stats": {"total": 8822, "additions": 8822, "deletions": 0}, "files": [{"sha": "add7e49eaf67c6840dc197d6b7234df50fd37548", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -1,3 +1,148 @@\n+2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n+\t    Jim MacArthur  <jim.macarthur@arm.com>\n+\t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n+\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\t    Nigel Stephens  <nigel.stephens@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\t    Sofiane Naci  <sofiane.naci@arm.com>\n+\t    Stephen Thomas  <stephen.thomas@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/aapcs/aapcs64.exp: New file.\n+\t* gcc.target/aarch64/aapcs/abitest-2.h: New file.\n+\t* gcc.target/aarch64/aapcs/abitest-common.h: New file.\n+\t* gcc.target/aarch64/aapcs/abitest.S: New file.\n+\t* gcc.target/aarch64/aapcs/abitest.h: New file.\n+\t* gcc.target/aarch64/aapcs/func-ret-1.c: New file.\n+\t* gcc.target/aarch64/aapcs/func-ret-2.c: New file.\n+\t* gcc.target/aarch64/aapcs/func-ret-3.c: New file.\n+\t* gcc.target/aarch64/aapcs/func-ret-3.x: New file.\n+\t* gcc.target/aarch64/aapcs/func-ret-4.c: New file.\n+\t* gcc.target/aarch64/aapcs/func-ret-4.x: New file.\n+\t* gcc.target/aarch64/aapcs/ice_1.c: New file.\n+\t* gcc.target/aarch64/aapcs/ice_2.c: New file.\n+\t* gcc.target/aarch64/aapcs/ice_3.c: New file.\n+\t* gcc.target/aarch64/aapcs/ice_4.c: New file.\n+\t* gcc.target/aarch64/aapcs/ice_5.c: New file.\n+\t* gcc.target/aarch64/aapcs/macro-def.h: New file.\n+\t* gcc.target/aarch64/aapcs/test_1.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_10.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_11.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_12.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_13.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_14.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_15.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_16.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_17.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_18.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_19.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_2.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_20.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_21.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_22.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_23.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_24.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_25.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_26.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_3.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_4.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_5.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_6.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_7.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_8.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_9.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_align-1.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_align-2.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_align-3.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_align-4.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_complex.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_int128.c: New file.\n+\t* gcc.target/aarch64/aapcs/test_quad_double.c: New file.\n+\t* gcc.target/aarch64/aapcs/type-def.h: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-1.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-10.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-11.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-12.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-2.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-3.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-4.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-5.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-6.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-7.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-8.c: New file.\n+\t* gcc.target/aarch64/aapcs/va_arg-9.c: New file.\n+\t* gcc.target/aarch64/aapcs/validate_memory.h: New file.\n+\t* gcc.target/aarch64/aarch64.exp: New file.\n+\t* gcc.target/aarch64/adc-1.c: New file.\n+\t* gcc.target/aarch64/adc-2.c: New file.\n+\t* gcc.target/aarch64/asm-1.c: New file.\n+\t* gcc.target/aarch64/clrsb.c: New file.\n+\t* gcc.target/aarch64/clz.c: New file.\n+\t* gcc.target/aarch64/ctz.c: New file.\n+\t* gcc.target/aarch64/csinc-1.c: New file.\n+\t* gcc.target/aarch64/csinv-1.c: New file.\n+\t* gcc.target/aarch64/csneg-1.c: New file.\n+\t* gcc.target/aarch64/extend.c: New file.\n+\t* gcc.target/aarch64/fcvt.x: New file.\n+\t* gcc.target/aarch64/fcvt_double_int.c: New file.\n+\t* gcc.target/aarch64/fcvt_double_long.c: New file.\n+\t* gcc.target/aarch64/fcvt_double_uint.c: New file.\n+\t* gcc.target/aarch64/fcvt_double_ulong.c: New file.\n+\t* gcc.target/aarch64/fcvt_float_int.c: New file.\n+\t* gcc.target/aarch64/fcvt_float_long.c: New file.\n+\t* gcc.target/aarch64/fcvt_float_uint.c: New file.\n+\t* gcc.target/aarch64/fcvt_float_ulong.c: New file.\n+\t* gcc.target/aarch64/ffs.c: New file.\n+\t* gcc.target/aarch64/fmadd.c: New file.\n+\t* gcc.target/aarch64/fnmadd-fastmath.c: New file.\n+\t* gcc.target/aarch64/frint.x: New file.\n+\t* gcc.target/aarch64/frint_double.c: New file.\n+\t* gcc.target/aarch64/frint_float.c: New file.\n+\t* gcc.target/aarch64/index.c: New file.\n+\t* gcc.target/aarch64/mneg-1.c: New file.\n+\t* gcc.target/aarch64/mneg-2.c: New file.\n+\t* gcc.target/aarch64/mneg-3.c: New file.\n+\t* gcc.target/aarch64/mnegl-1.c: New file.\n+\t* gcc.target/aarch64/mnegl-2.c: New file.\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: New file.\n+\t* gcc.target/aarch64/pic-constantpool1.c: New file.\n+\t* gcc.target/aarch64/pic-symrefplus.c: New file.\n+\t* gcc.target/aarch64/predefine_large.c: New file.\n+\t* gcc.target/aarch64/predefine_small.c: New file.\n+\t* gcc.target/aarch64/predefine_tiny.c: New file.\n+\t* gcc.target/aarch64/reload-valid-spoff.c: New file.\n+\t* gcc.target/aarch64/scalar_intrinsics.c: New file.\n+\t* gcc.target/aarch64/table-intrinsics.c: New file.\n+\t* gcc.target/aarch64/tst-1.c: New file.\n+\t* gcc.target/aarch64/vect-abs-compile.c: New file.\n+\t* gcc.target/aarch64/vect-abs.c: New file.\n+\t* gcc.target/aarch64/vect-abs.x: New file.\n+\t* gcc.target/aarch64/vect-compile.c: New file.\n+\t* gcc.target/aarch64/vect-faddv-compile.c: New file.\n+\t* gcc.target/aarch64/vect-faddv.c: New file.\n+\t* gcc.target/aarch64/vect-faddv.x: New file.\n+\t* gcc.target/aarch64/vect-fmax-fmin-compile.c: New file.\n+\t* gcc.target/aarch64/vect-fmax-fmin.c: New file.\n+\t* gcc.target/aarch64/vect-fmax-fmin.x: New file.\n+\t* gcc.target/aarch64/vect-fmaxv-fminv-compile.c: New file.\n+\t* gcc.target/aarch64/vect-fmaxv-fminv.x: New file.\n+\t* gcc.target/aarch64/vect-fp-compile.c: New file.\n+\t* gcc.target/aarch64/vect-fp.c: New file.\n+\t* gcc.target/aarch64/vect-fp.x: New file.\n+\t* gcc.target/aarch64/vect-mull-compile.c: New file.\n+\t* gcc.target/aarch64/vect-mull.c: New file.\n+\t* gcc.target/aarch64/vect-mull.x: New file.\n+\t* gcc.target/aarch64/vect.c: New file.\n+\t* gcc.target/aarch64/vect.x: New file.\n+\t* gcc.target/aarch64/vector_intrinsics.c: New file.\n+\t* gcc.target/aarch64/vfp-1.c: New file.\n+\t* gcc.target/aarch64/volatile-bitfields-1.c: New file.\n+\t* gcc.target/aarch64/volatile-bitfields-2.c: New file.\n+\t* gcc.target/aarch64/volatile-bitfields-3.c: New file.\n+\t* g++.dg/abi/aarch64_guard1.C: New file.\n+\n 2012-10-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/54988"}, {"sha": "2ec7d3f4b155ffd4d227c42ecf0ae10a7cfcca07", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/aapcs64.exp", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Faapcs64.exp?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,67 @@\n+#  Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+#  Contributed by ARM Ltd.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+load_lib c-torture.exp\n+load_lib target-supports.exp\n+load_lib torture-options.exp\n+\n+if { ![istarget aarch64*-*-*] } then {\n+  return\n+}\n+\n+torture-init\n+set-torture-options $C_TORTURE_OPTIONS\n+set additional_flags \"-W -Wall -Wno-abi\"\n+\n+# Test parameter passing.\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\t    c-torture-execute [list $src \\\n+\t\t\t\t    $srcdir/$subdir/abitest.S] \\\n+\t\t\t\t    $additional_flags\n+    }\n+}\n+\n+# Test unnamed argument retrieval via the va_arg macro.\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/va_arg-*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\t    c-torture-execute [list $src \\\n+\t\t\t\t    $srcdir/$subdir/abitest.S] \\\n+\t\t\t\t    $additional_flags\n+    }\n+}\n+\n+# Test function return value.\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/func-ret-*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\t    c-torture-execute [list $src \\\n+\t\t\t\t    $srcdir/$subdir/abitest.S] \\\n+\t\t\t\t    $additional_flags\n+    }\n+}\n+\n+# Test no internal compiler errors.\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/ice_*.c]] {\n+    if {[runtest_file_p $runtests $src]} {\n+\t    c-torture [list $src] \\\n+\t\t\t    $additional_flags\n+    }\n+}\n+\n+torture-finish"}, {"sha": "c56e7cc678577a1da0a3fa115352d71f9c523b88", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest-2.h", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,101 @@\n+/* This header file should be included for the purpose of function return\n+   value testing.  */\n+\n+#include \"abitest-common.h\"\n+#include \"validate_memory.h\"\n+\n+void (*testfunc_ptr)(char* stack);\n+\n+/* Helper macros to generate function name.  Example of the function name:\n+   func_return_val_1.  */\n+#define FUNC_BASE_NAME func_return_val_\n+#define FUNC_NAME_COMBINE(base,suffix) base ## suffix\n+#define FUNC_NAME_1(base,suffix) FUNC_NAME_COMBINE(base,suffix)\n+#define FUNC_NAME(suffix) FUNC_NAME_1(FUNC_BASE_NAME,suffix)\n+#define TEST_FUNC_BASE_NAME testfunc_\n+#define TEST_FUNC_NAME(suffix) FUNC_NAME_1(TEST_FUNC_BASE_NAME,suffix)\n+\n+#undef DUMP_STATUS\n+#ifdef DUMP_ENABLED\n+#define DUMP_STATUS(type,val) printf (\"### Checking \"#type\" \"#val\"\\n\");\n+#else\n+#define DUMP_STATUS(type,val)\n+#endif\n+\n+/* Generate code to do memcmp to check if the returned value is in the\n+   correct location and has the expected value.\n+   Note that for value that is returned in the caller-allocated memory\n+   block, we get the address from the saved x8 register.  x8 is saved\n+   just after the callee is returned; we assume that x8 has not been\n+   clobbered at then, although there is no requirement for the callee\n+   preserve the value stored in x8.  Luckily, all test cases here are\n+   simple enough that x8 doesn't normally get clobbered (although not\n+   guaranteed).  */\n+#undef FUNC_VAL_CHECK\n+#define FUNC_VAL_CHECK(id, type, val, offset, layout)\t\t\t\\\n+void TEST_FUNC_NAME(id)(char* stack)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  type __x = val;\t\t\t\t\t\t\t\\\n+  char* addr;\t\t\t\t\t\t\t\t\\\n+  DUMP_STATUS(type,val)\t\t\t\t\t\t\t\\\n+  if (offset != X8)\t\t\t\t\t\t\t\\\n+    addr = stack + offset;\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    addr = *(char **)(stack + X8);\t\t\t\t\t\\\n+  if (validate_memory (&__x, addr, sizeof (type), layout) != 0)\t\t\\\n+    abort();\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Composite larger than 16 bytes is replaced by a pointer to a copy prepared\n+   by the caller, so here we extrat the pointer, deref it and compare the\n+   content with that of the original one.  */\n+#define PTR(type, val, offset, ...) {\t\t\t\t\t\\\n+  type * ptr;\t\t\t\t\t\t\t\t\\\n+  DUMP_ARG(type,val)\t\t\t\t\t\t\t\\\n+  ptr = *(type **)(stack + offset);\t\t\t\t\t\\\n+  if (memcmp (ptr, &val, sizeof (type)) != 0) abort ();\t\t\t\\\n+}\n+\n+#include TESTFILE\n+\n+MYFUNCTYPE myfunc () PCSATTR;\n+\n+/* Define the function to return VAL of type TYPE.  I and D in the\n+   parameter list are two dummy parameters to help improve the detection\n+   of bugs like a short vector being returned in X0 after copied from V0.  */\n+#undef FUNC_VAL_CHECK\n+#define FUNC_VAL_CHECK(id, type, var, offset, layout)\t\t\t  \\\n+__attribute__ ((noinline)) type FUNC_NAME (id) (int i, double d, type t)  \\\n+  {\t\t\t\t\t\t\t\t\t  \\\n+    asm (\"\"::\"r\" (i),\"r\" (d)); /* asm prevents function from getting      \\\n+\t\t\t\t  optimized away.  Using i and d prevents \\\n+\t\t\t\t  warnings about unused parameters.\t  \\\n+\t\t\t       */\t\t\t\t\t  \\\n+    return t;\t\t\t\t\t\t\t\t  \\\n+  }\n+#include TESTFILE\n+\n+\n+/* Call the function to return value and call the checking function\n+   to validate.  See the comment above for the reason of having 0 and 0.0\n+   in the function argument list.  */\n+#undef FUNC_VAL_CHECK\n+#define FUNC_VAL_CHECK(id, type, var, offset, layout)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    testfunc_ptr = TEST_FUNC_NAME(id);\t\t\t\t\t\\\n+    FUNC_NAME(id) (0, 0.0, var);\t\t\t\t\t\\\n+    myfunc ();\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int main()\n+{\n+  which_kind_of_test = TK_RETURN;\n+\n+#ifdef HAS_DATA_INIT_FUNC\n+  init_data ();\n+#endif\n+\n+#include TESTFILE\n+\n+  return 0;\n+}"}, {"sha": "c749a42a2e476b53d2947ce98122e7686017815e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest-common.h", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,139 @@\n+#undef __AAPCS64_BIG_ENDIAN__\n+#ifdef __GNUC__\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+#define __AAPCS64_BIG_ENDIAN__\n+#endif\n+#else\n+#error unknown compiler\n+#endif\n+\n+#define IN_FRAMEWORK\n+\n+#define D0\t0\n+#define D1\t8\n+#define D2\t16\n+#define D3\t24\n+#define D4\t32\n+#define D5\t40\n+#define D6\t48\n+#define D7\t56\n+\n+#define S0\t64\n+#define S1\t68\n+#define S2\t72\n+#define S3\t76\n+#define S4\t80\n+#define S5\t84\n+#define S6\t88\n+#define S7\t92\n+\n+#define W0      96\n+#define W1     100\n+#define W2     104\n+#define W3     108\n+#define W4     112\n+#define W5     116\n+#define W6     120\n+#define W7     124\n+\n+#define X0     128\n+#define X1     136\n+#define X2     144\n+#define X3     152\n+#define X4     160\n+#define X5     168\n+#define X6     176\n+#define X7     184\n+\n+#define Q0     192\n+#define Q1     208\n+#define Q2     224\n+#define Q3     240\n+#define Q4     256\n+#define Q5     272\n+#define Q6     288\n+#define Q7     304\n+\n+#define X8     320\n+#define X9     328\n+\n+#define STACK  336\n+\n+/* The type of test.  'myfunc' in abitest.S needs to know which kind of\n+   test it is running to decide what to do at the runtime.  Keep the\n+   related code in abitest.S synchronized if anything is changed here.  */\n+enum aapcs64_test_kind\n+{\n+  TK_PARAM = 0,\t/* Test parameter passing.  */\n+  TK_VA_ARG,\t/* Test va_arg code generation.  */\n+  TK_RETURN\t/* Test function return value.  */\n+};\n+\n+int which_kind_of_test;\n+\n+extern int printf (const char*, ...);\n+extern void abort (void);\n+extern void dumpregs () __asm(\"myfunc\");\n+\n+#ifndef MYFUNCTYPE\n+#define MYFUNCTYPE void\n+#endif\n+\n+#ifndef PCSATTR\n+#define PCSATTR\n+#endif\n+\n+\n+#ifdef RUNTIME_ENDIANNESS_CHECK\n+#ifndef RUNTIME_ENDIANNESS_CHECK_FUNCTION_DEFINED\n+/* This helper funtion defined to detect whether there is any incompatibility\n+   issue on endianness between compilation time and run-time environments.\n+   TODO: review the implementation when the work of big-endian support in A64\n+   GCC starts.\n+   */\n+static void rt_endian_check ()\n+{\n+  const char* msg_endian[2] = {\"little-endian\", \"big-endian\"};\n+  const char* msg_env[2] = {\"compile-time\", \"run-time\"};\n+  union\n+  {\n+    unsigned int ui;\n+    unsigned char ch[4];\n+  } u;\n+  int flag = -1;\n+\n+  u.ui = 0xCAFEBABE;\n+\n+  printf (\"u.ui=0x%X, u.ch[0]=0x%X\\n\", u.ui, u.ch[0]);\n+\n+  if (u.ch[0] == 0xBE)\n+    {\n+      /* Little-Endian at run-time */\n+#ifdef __AAPCS64_BIG_ENDIAN__\n+      /* Big-Endian at compile-time */\n+      flag = 1;\n+#endif\n+    }\n+  else\n+    {\n+      /* Big-Endian at run-time */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+      /* Little-Endian at compile-time */\n+      flag = 0;\n+#endif\n+    }\n+\n+  if (flag != -1)\n+    {\n+      /* Endianness conflict exists */\n+      printf (\"Error: endianness conflicts between %s and %s:\\n\\\n+\\t%s: %s\\n\\t%s: %s\\n\", msg_env[0], msg_env[1], msg_env[0], msg_endian[flag],\n+\t\t       msg_env[1], msg_endian[1-flag]);\n+      abort ();\n+    }\n+\n+  return;\n+}\n+#endif\n+#define RUNTIME_ENDIANNESS_CHECK_FUNCTION_DEFINED\n+#endif"}, {"sha": "86ce7bed77720ef2f3b86054ec722bbeff2bcd40", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest.S", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,59 @@\n+\t.global dumpregs\n+\t.global myfunc\n+\t.type dumpregs,%function\n+\t.type myfunc,%function\n+dumpregs:\n+myfunc:\n+      mov\tx16, sp\n+      mov\tx17, sp\n+      sub\tsp,  sp, 352 // 336 for registers and 16 for old sp and lr\n+\n+      stp\tx8, x9, [x17, #-16]! //320\n+\n+      stp\tq6, q7, [x17, #-32]! //288\n+      stp\tq4, q5, [x17, #-32]! //256\n+      stp\tq2, q3, [x17, #-32]! //224\n+      stp\tq0, q1, [x17, #-32]! //192\n+\n+      stp\tx6, x7, [x17, #-16]! //176\n+      stp\tx4, x5, [x17, #-16]! //160\n+      stp\tx2, x3, [x17, #-16]! //144\n+      stp\tx0, x1, [x17, #-16]! //128\n+\n+      stp\tw6, w7, [x17, #-8]!  //120\n+      stp\tw4, w5, [x17, #-8]!  //112\n+      stp\tw2, w3, [x17, #-8]!  //104\n+      stp\tw0, w1, [x17, #-8]!  // 96\n+\n+      stp\ts6, s7, [x17, #-8]!  // 88\n+      stp\ts4, s5, [x17, #-8]!  // 80\n+      stp\ts2, s3, [x17, #-8]!  // 72\n+      stp\ts0, s1, [x17, #-8]!  // 64\n+\n+      stp\td6, d7, [x17, #-16]! // 48\n+      stp\td4, d5, [x17, #-16]! // 32\n+      stp\td2, d3, [x17, #-16]! // 16\n+      stp\td0, d1, [x17, #-16]! //  0\n+\n+      add\tx0, sp,  #16\n+      stp\tx16, x30, [x17, #-16]!\n+\n+      adrp\tx9, which_kind_of_test\t\t// determine the type of test\n+      add\tx9, x9, :lo12:which_kind_of_test\n+      ldr\tw9, [x9, #0]\n+      cmp\tw9, #1\n+      bgt\tLABEL_TEST_FUNC_RETURN\n+      bl\ttestfunc\t\t\t// parameter passing test or va_arg code gen test\n+      b\t\tLABEL_RET\n+LABEL_TEST_FUNC_RETURN:\n+      adrp\tx9, testfunc_ptr\n+      add\tx9, x9, :lo12:testfunc_ptr\n+      ldr\tx9, [x9, #0]\n+      blr\tx9\t\t\t\t// function return value test\n+LABEL_RET:\n+      ldp\tx0, x30, [sp]\n+      mov\tsp, x0\n+      ret\n+\n+.weak\ttestfunc\n+.weak\ttestfunc_ptr"}, {"sha": "af70937e04779593ed8230c3241e841edc05c86e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest.h", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.h?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,159 @@\n+/* This header file should be included for the purpose of parameter passing\n+   testing and va_arg code gen testing.\n+\n+   To test va_arg code gen, #define AAPCS64_TEST_STDARG in the test case.\n+\n+   The parameter passing test is done by passing variables/constants to\n+   'myfunc', which pushes its incoming arguments to a memory block on the\n+   stack and then passes the memory block address to 'testfunc'.  It is inside\n+   'testfunc' that the real parameter passing check is carried out.\n+\n+   The function body of 'myfunc' is in abitest.S.  The declaration of 'myfunc'\n+   is constructed during the pre-processing stage.\n+\n+   The va_arg code gen test has a similar workflow, apart from an extra set-up\n+   step before calling 'myfunc'.  All arguments are passed to 'stdarg_func'\n+   first, which assigned these arguments to its local variables via either\n+   direct assignment or va_arg macro, depending on whether an argument is named\n+   or not.  Afterwards, 'stdarg_func' calls 'myfunc' with the aforementioned\n+   local variables as the arguments to finish the remaining steps.  */\n+\n+#include \"abitest-common.h\"\n+#include \"validate_memory.h\"\n+\n+#ifdef AAPCS64_TEST_STDARG\n+/* Generate va_start (ap, last_named_arg).  Note that this requires\n+   LAST_NAMED_ARG_ID to be defined/used correctly in the test file.  */\n+#ifndef LAST_NAMED_ARG_ID\n+#define LAST_NAMED_ARG_ID 65535\n+#endif\n+#ifndef VA_START\n+#undef VA_START_1\n+#define VA_START_1(ap, id) va_start (ap, _f##id);\n+#define VA_START(ap, id) VA_START_1 (ap, id);\n+#endif\n+#endif /* AAPCS64_TEST_STDARG */\n+\n+/* Some debugging facility.  */\n+#undef DUMP_ARG\n+#ifdef DUMP_ENABLED\n+#define DUMP_ARG(type,val) printf (\"### Checking ARG \"#type\" \"#val\"\\n\")\n+#else\n+#define DUMP_ARG(type,val)\n+#endif\n+\n+\n+/* Function called from myfunc (defined in abitest.S) to check the arguments\n+   passed to myfunc.  myfunc has pushed all the arguments into the memory\n+   block pointed by STACK.  */\n+void testfunc(char* stack)\n+{\n+#define AARCH64_MACRO_DEF_CHECK_INCOMING_ARGS\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_MACRO_DEF_CHECK_INCOMING_ARGS\n+  return;\n+}\n+\n+\n+#ifndef AAPCS64_TEST_STDARG\n+/* Test parameter passing.  */\n+\n+/* Function declaration of myfunc.  */\n+MYFUNCTYPE myfunc(\n+#define AARCH64_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+) PCSATTR;\n+\n+#else /* AAPCS64_TEST_STDARG */\n+/* Test stdarg macros, e.g. va_arg.  */\n+#include <stdarg.h>\n+\n+/* Dummy function to help reset parameter passing registers, i.e. X0-X7\n+   and V0-V7 (by being passed 0 in W0-W7 and 0.f in S0-S7).  */\n+__attribute__ ((noinline)) void\n+dummy_func (int w0, int w1, int w2, int w3, int w4, int w5, int w6, int w7,\n+\t    float s0, float s1, float s2, float s3, float s4, float s5,\n+\t    float s6, float s7)\n+{\n+  asm (\"\"); /* Prevent function from getting optimized away */\n+  return;\n+}\n+\n+/* Function declaration of myfunc.  */\n+MYFUNCTYPE myfunc(\n+#define AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+) PCSATTR;\n+\n+/* Function definition of stdarg_func.\n+   stdarg_func is a variadic function; it retrieves all of its arguments,\n+   both named and unnamed, and passes them to myfunc in the identical\n+   order.  myfunc will carry out the check on the passed values.  Remember\n+   that myfunc is not a variadic function.  */\n+MYFUNCTYPE stdarg_func(\n+#define AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST_WITH_IDENT\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST_WITH_IDENT\n+) PCSATTR\n+{\n+  /* Start of the function body of stdarg_func.  */\n+  va_list ap;\n+\n+  VA_START (ap, LAST_NAMED_ARG_ID)\n+  /* Zeroize the content of X0-X7 and V0-V7 to make sure that any va_arg\n+     failure will not be hidden by the old data being in these registers.  */\n+  dummy_func (0, 0, 0, 0, 0, 0, 0, 0, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f);\n+  /* A full memory barrier to ensure that compiler won't optimize away\n+     va_arg code gen.  */\n+  __sync_synchronize ();\n+    {\n+      /* Assign all the function incoming arguments to local variables. */\n+#define AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS\n+\n+      /* Call myfunc and pass in the local variables prepared above.  */\n+      myfunc (\n+#define AARCH64_VARIADIC_MACRO_DEF_GEN_ARGUMENT_LIST\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_VARIADIC_MACRO_DEF_GEN_ARGUMENT_LIST\n+);\n+    }\n+  va_end (ap);\n+}\n+\n+#endif /* AAPCS64_TEST_STDARG */\n+\n+\n+int main()\n+{\n+#ifdef RUNTIME_ENDIANNESS_CHECK\n+  rt_endian_check();\n+#endif\n+#ifdef HAS_DATA_INIT_FUNC\n+  init_data ();\n+#endif\n+\n+#ifndef AAPCS64_TEST_STDARG\n+  which_kind_of_test = TK_PARAM;\n+  myfunc(\n+#else\n+  which_kind_of_test = TK_VA_ARG;\n+  stdarg_func(\n+#endif\n+#define AARCH64_MACRO_DEF_GEN_ARGUMENT_LIST\n+#include \"macro-def.h\"\n+#include TESTFILE\n+#undef AARCH64_MACRO_DEF_GEN_ARGUMENT_LIST\n+);\n+  return 0;\n+}\n+"}, {"sha": "16b5c1efdf8ef4ba10166fc993ef3110560da93e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,44 @@\n+/* Test AAPCS64 function result return.\n+\n+   This test covers most fundamental data types as specified in\n+   AAPCS64 \\S 4.1.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+/* { dg-additional-sources \"abitest.S\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"func-ret-1.c\"\n+#include \"type-def.h\"\n+\n+vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n+vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n+union int128_t qword;\n+\n+int *int_ptr = (int *)0xabcdef0123456789ULL;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  qword.l64 = 0xfdb9753102468aceLL;\n+  qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest-2.h\"\n+#else\n+FUNC_VAL_CHECK (0, unsigned char , 0xfe      , X0, i8in64)\n+FUNC_VAL_CHECK (1,   signed char , 0xed      , X0, i8in64)\n+FUNC_VAL_CHECK (2, unsigned short, 0xdcba    , X0, i16in64)\n+FUNC_VAL_CHECK (3,   signed short, 0xcba9    , X0, i16in64)\n+FUNC_VAL_CHECK (4, unsigned int  , 0xdeadbeef, X0, i32in64)\n+FUNC_VAL_CHECK (5,   signed int  , 0xcafebabe, X0, i32in64)\n+FUNC_VAL_CHECK (6, unsigned long long, 0xba98765432101234ULL, X0, flat)\n+FUNC_VAL_CHECK (7,   signed long long, 0xa987654321012345LL, X0, flat)\n+FUNC_VAL_CHECK (8,       __int128, qword.i, X0, flat)\n+FUNC_VAL_CHECK (9,          float, 65432.12345f, S0, flat)\n+FUNC_VAL_CHECK (10,        double, 9876543.212345, D0, flat)\n+FUNC_VAL_CHECK (11,   long double, 98765432123456789.987654321L, Q0, flat)\n+FUNC_VAL_CHECK (12,         vf2_t,        vf2, D0, f32in64)\n+FUNC_VAL_CHECK (13,         vi4_t,        vi4, Q0, i32in128)\n+FUNC_VAL_CHECK (14,         int *,    int_ptr, X0, flat)\n+#endif"}, {"sha": "6b171c46fbb534244b49c216a52ff850a53b1e5a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,71 @@\n+/* Test AAPCS64 function result return.\n+\n+   This test covers most composite types as described in AAPCS64 \\S 4.3.\n+   Homogeneous floating-point aggregate types are covered in func-ret-3.c.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+/* { dg-additional-sources \"abitest.S\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"func-ret-2.c\"\n+\n+struct x0\n+{\n+  char ch;\n+  int i;\n+} ys0 = { 'a', 12345 };\n+\n+struct x1\n+{\n+  int a;\n+  unsigned int b;\n+  unsigned int c;\n+  unsigned int d;\n+} ys1 = { 0xdeadbeef, 0xcafebabe, 0x87654321, 0xbcedf975 };\n+\n+struct x2\n+{\n+  long long a;\n+  long long b;\n+  char ch;\n+} y2 = { 0x12, 0x34, 0x56 };\n+\n+union x3\n+{\n+  char ch;\n+  int i;\n+  long long ll;\n+} y3;\n+\n+union x4\n+{\n+  int i;\n+  struct x2 y2;\n+} y4;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init small union.  */\n+  y3.ll = 0xfedcba98LL;\n+\n+  /* Init big union.  */\n+  y4.y2.a = 0x78;\n+  y4.y2.b = 0x89;\n+  y4.y2.ch= 0x9a;\n+}\n+\n+\n+#include \"abitest-2.h\"\n+#else\n+  /* Composite smaller than or equal to 16 bytes returned in X0 and X1.  */\n+FUNC_VAL_CHECK ( 0, struct x0, ys0, X0, flat)\n+FUNC_VAL_CHECK ( 1, struct x1, ys1, X0, flat)\n+FUNC_VAL_CHECK ( 2, union  x3, y3, X0, flat)\n+\n+  /* Composite larger than 16 bytes returned in the caller-reserved memory\n+     block of which the address is passed as an additional argument to the\n+     function in X8.  */\n+FUNC_VAL_CHECK (10, struct x2, y2, X8, flat)\n+FUNC_VAL_CHECK (11, union  x4, y4, X8, flat)\n+#endif"}, {"sha": "ff9b7e6d4b819b085e36b8ad25f2cee0dbcd63cb", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-3.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,93 @@\n+/* Test AAPCS64 function result return.\n+\n+   This test covers homogeneous floating-point aggregate types as described\n+   in AAPCS64 \\S 4.3.5.  */\n+\n+/* { dg-do run { target aarch64-*-* } } */\n+/* { dg-additional-sources \"abitest.S\" } */\n+/* { dg-require-effective-target aarch64_big_endian } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"func-ret-3.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_fx1_t hfa_fx1 = {12.345f};\n+struct hfa_fx2_t hfa_fx2 = {123.456f, 234.456f};\n+struct hfa_dx2_t hfa_dx2 = {234.567, 345.678};\n+struct hfa_dx4_t hfa_dx4 = {1234.123, 2345.234, 3456.345, 4567.456};\n+struct hfa_ldx3_t hfa_ldx3 = {123456.7890, 234567.8901, 345678.9012};\n+struct non_hfa_fx5_t non_hfa_fx5 = {456.789f, 567.890f, 678.901f, 789.012f, 890.123f};\n+struct hfa_ffs_t hfa_ffs;\n+struct non_hfa_ffs_t non_hfa_ffs;\n+struct non_hfa_ffs_2_t non_hfa_ffs_2;\n+struct hva_vf2x1_t hva_vf2x1;\n+struct hva_vi4x1_t hva_vi4x1;\n+struct non_hfa_ffd_t non_hfa_ffd = {23.f, 24.f, 25.0};\n+struct non_hfa_ii_t non_hfa_ii = {26, 27};\n+struct non_hfa_c_t non_hfa_c = {28};\n+struct non_hfa_ffvf2_t non_hfa_ffvf2;\n+struct non_hfa_fffd_t non_hfa_fffd = {33.f, 34.f, 35.f, 36.0};\n+union hfa_union_t hfa_union;\n+union non_hfa_union_t non_hfa_union;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hva_vf2x1.a = (vf2_t){17.f, 18.f};\n+  hva_vi4x1.a = (vi4_t){19, 20, 21, 22};\n+\n+  non_hfa_ffvf2.a = 29.f;\n+  non_hfa_ffvf2.b = 30.f;\n+  non_hfa_ffvf2.c = (vf2_t){31.f, 32.f};\n+\n+  hfa_union.s.a = 37.f;\n+  hfa_union.s.b = 38.f;\n+  hfa_union.c   = 39.f;\n+\n+  non_hfa_union.a = 40.0;\n+  non_hfa_union.b = 41.f;\n+\n+  hfa_ffs.a = 42.f;\n+  hfa_ffs.b = 43.f;\n+  hfa_ffs.c.a = 44.f;\n+  hfa_ffs.c.b = 45.f;\n+\n+  non_hfa_ffs.a = 46.f;\n+  non_hfa_ffs.b = 47.f;\n+  non_hfa_ffs.c.a = 48.0;\n+  non_hfa_ffs.c.b = 49.0;\n+\n+  non_hfa_ffs_2.s.a = 50;\n+  non_hfa_ffs_2.s.b = 51;\n+  non_hfa_ffs_2.c = 52.f;\n+  non_hfa_ffs_2.d = 53.f;\n+}\n+\n+#include \"abitest-2.h\"\n+#else\n+  /* HFA returned in fp/simd registers.  */\n+\n+FUNC_VAL_CHECK ( 0, struct hfa_fx1_t , hfa_fx1  , S0, flat)\n+FUNC_VAL_CHECK ( 1, struct hfa_fx2_t , hfa_fx2  , S0, flat)\n+FUNC_VAL_CHECK ( 2, struct hfa_dx2_t , hfa_dx2  , D0, flat)\n+\n+FUNC_VAL_CHECK ( 3, struct hfa_dx4_t , hfa_dx4  , D0, flat)\n+FUNC_VAL_CHECK ( 4, struct hfa_ldx3_t, hfa_ldx3 , Q0, flat)\n+FUNC_VAL_CHECK ( 5, struct hfa_ffs_t , hfa_ffs  , S0, flat)\n+FUNC_VAL_CHECK ( 6, union hfa_union_t, hfa_union, S0, flat)\n+\n+FUNC_VAL_CHECK ( 7, struct hva_vf2x1_t, hva_vf2x1, D0, flat)\n+FUNC_VAL_CHECK ( 8, struct hva_vi4x1_t, hva_vi4x1, Q0, flat)\n+\n+  /* Non-HFA returned in general registers or via a pointer in X8.  */\n+FUNC_VAL_CHECK (10, struct non_hfa_fx5_t  , non_hfa_fx5  , X8, flat)\n+FUNC_VAL_CHECK (13, struct non_hfa_ffd_t  , non_hfa_ffd  , X0, flat)\n+FUNC_VAL_CHECK (14, struct non_hfa_ii_t   , non_hfa_ii   , X0, flat)\n+FUNC_VAL_CHECK (15, struct non_hfa_c_t    , non_hfa_c    , X0, flat)\n+FUNC_VAL_CHECK (16, struct non_hfa_ffvf2_t, non_hfa_ffvf2, X0, flat)\n+FUNC_VAL_CHECK (17, struct non_hfa_fffd_t , non_hfa_fffd , X8, flat)\n+FUNC_VAL_CHECK (18, struct non_hfa_ffs_t  , non_hfa_ffs  , X8, flat)\n+FUNC_VAL_CHECK (19, struct non_hfa_ffs_2_t, non_hfa_ffs_2, X0, flat)\n+FUNC_VAL_CHECK (20, union  non_hfa_union_t, non_hfa_union, X0, flat)\n+\n+#endif"}, {"sha": "af05fbe9fdfd2f1accb281a5b009d296e30e5069", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-4.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,27 @@\n+/* Test AAPCS64 function result return.\n+\n+   This test covers complex types.  Complex floating-point types are treated\n+   as homogeneous floating-point aggregates, while complex integral types\n+   are treated as general composite types.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+/* { dg-additional-sources \"abitest.S\" } */\n+/* { dg-require-effective-target aarch64_big_endian } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"func-ret-4.c\"\n+\n+#include \"abitest-2.h\"\n+#else\n+  /* Complex floating-point types are passed in fp/simd registers.  */\n+FUNC_VAL_CHECK ( 0, _Complex float , 12.3f + 23.4fi, S0, flat)\n+FUNC_VAL_CHECK ( 1, _Complex double, 34.56 + 45.67i, D0, flat)\n+FUNC_VAL_CHECK ( 2, _Complex long double, 56789.01234 + 67890.12345i, Q0, flat)\n+\n+  /* Complex integral types are passed in general registers or via a pointer in\n+     X8.  */\n+FUNC_VAL_CHECK (10, _Complex short , 12345 + 23456i, X0, flat)\n+FUNC_VAL_CHECK (11, _Complex int   , 34567 + 45678i, X0, flat)\n+FUNC_VAL_CHECK (12, _Complex __int128, 567890 + 678901i, X8, flat)\n+\n+#endif"}, {"sha": "906ccebf6160736f5bd597c2db7e7bf7d078fa5c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS layout\n+\n+   Empty, i.e. zero-sized, small struct passing used to cause Internal Compiler\n+   Error.  */\n+\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+struct AAAA\n+{\n+\n+} aaaa;\n+\n+\n+void named (int, struct AAAA);\n+void unnamed (int, ...);\n+\n+void foo ()\n+{\n+  name (0, aaaa);\n+  unnamed (0, aaaa);\n+}"}, {"sha": "8d34f270d486b95d3a2b9313992bb165504b249c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,13 @@\n+/* Test AAPCS layout\n+\n+   Larger than machine-supported vector size.  The behaviour is unspecified by\n+   the AAPCS64 document; the implementation opts for pass by reference.  */\n+\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+typedef char A __attribute__ ((vector_size (64)));\n+\n+void\n+foo (A a)\n+{\n+}"}, {"sha": "fb6816f4270e522b603cd0e4ba222fe5cfbbd88b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,16 @@\n+/* Test AAPCS layout\n+\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+void\n+foo(int a, ...);\n+\n+int\n+main(void)\n+{\n+  foo (1, (vector unsigned int){10,11,12,13},\n+       2, (vector unsigned int){20,21,22,23});\n+  return 0;\n+}"}, {"sha": "44af079af9c254183ffb0e5606920f6659b3be1d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_4.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,9 @@\n+/* Test AAPCS layout\n+\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+__complex__ long int\n+ctest_long_int(__complex__ long int x)\n+{\n+    return x;\n+}"}, {"sha": "da24ba8c9dea72365c725e84a0a13bc09376228e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/ice_5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fice_5.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+\n+struct S\n+{\n+  union\n+    {\n+      long double b;\n+    } a;\n+};\n+\n+struct S s;\n+\n+extern struct S a[5];\n+extern struct S check (struct S, struct S *, struct S);\n+extern void checkx (struct S);\n+\n+void test (void)\n+{\n+  checkx (check (s, &a[1], a[2]));\n+}"}, {"sha": "72a47067631b20bf21c58e5c3569bbef45932c1c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/macro-def.h", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fmacro-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fmacro-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fmacro-def.h?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,286 @@\n+/* This header file defines a set of macros to be used in the construction\n+   of parameter passing and/or va_arg code gen tests during the\n+   pre-processing stage.  It is included inside abitest.h.\n+\n+   The following macros are defined here:\n+\n+     LAST_ARG\n+     ARG\n+     DOTS\n+     ANON\n+     LAST_ANON\n+     PTR\n+     PTR_ANON\n+     LAST_ANONPTR\n+\n+  These macros are given different definitions depending on which one of\n+  the following macros is defined.\n+\n+    AARCH64_MACRO_DEF_CHECK_INCOMING_ARGS\n+    AARCH64_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+    AARCH64_MACRO_DEF_GEN_ARGUMENT_LIST\n+    AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+    AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST_WITH_IDENT\n+    AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS\n+    AARCH64_VARIADIC_MACRO_DEF_GEN_ARGUMENT_LIST\n+\n+  Do not define more than one of the above macros.  */\n+\n+\n+/* AARCH64_MACRO_DEF_CHECK_INCOMING_ARGS\n+   Define macros to check the incoming arguments.  */\n+\n+#ifdef AARCH64_MACRO_DEF_CHECK_INCOMING_ARGS\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+#undef ANON_PROMOTED\n+\n+/* Generate memcmp to check if the incoming args have the expected values.  */\n+#define LAST_ARG_NONFLAT(type, val, offset, layout, ...)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  type __x = val;\t\t\t\t\t\t\t\\\n+  DUMP_ARG(type,val);\t\t\t\t\t\t\t\\\n+  if (validate_memory (&__x, stack + offset, sizeof (type), layout) != 0) \\\n+    abort();\t\t\t\t\t\t\t\t\\\n+}\n+#define LAST_ARG(type,val,offset,...) LAST_ARG_NONFLAT (type, val, offset, \\\n+\t\t\t\t\t\t\tflat,__VA_ARGS__)\n+#define ARG_NONFLAT(type,val,offset,layout,...) LAST_ARG_NONFLAT (type, val, \\\n+\t\t\t\t\t\t\t\t  offset, \\\n+\t\t\t\t\t\t\t\t  layout, \\\n+\t\t\t\t\t\t\t\t  __VA_ARGS__)\n+#define ARG(type,val,offset,...) LAST_ARG_NONFLAT(type, val, offset, \\\n+\t\t\t\t\t\t  flat, __VA_ARGS__)\n+#define ANON(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define LAST_ANON(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ANON_PROMOTED(type,val,type_promoted, val_promoted, offset,...)\t\\\n+  ANON(type_promoted, val_promoted, offset, __VA_ARGS__)\n+/* Composite larger than 16 bytes is replaced by a pointer to a copy prepared\n+   by the caller, so here we extrat the pointer, deref it and compare the\n+   content with that of the original one.  */\n+#define PTR(type, val, offset, ...) {\t\t\t\t\t\\\n+  type * ptr;\t\t\t\t\t\t\t\t\\\n+  DUMP_ARG(type,val);\t\t\t\t\t\t\t\\\n+  ptr = *(type **)(stack + offset);\t\t\t\t\t\\\n+  if (memcmp (ptr, &val, sizeof (type)) != 0) abort ();\t\t\t\\\n+}\n+#define PTR_ANON(type, val, offset, ...) PTR(type, val, offset, __VA_ARGS__)\n+#define LAST_ANONPTR(type, val, offset, ...) PTR(type, val, offset, __VA_ARGS__)\n+#define DOTS\n+\n+#endif /* AARCH64_MACRO_DEF_CHECK_INCOMING_ARGS */\n+\n+\n+/* AARCH64_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+   Define macros to generate parameter type list.  */\n+\n+#ifdef AARCH64_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+\n+/* Generate parameter type list (without identifiers).  */\n+#define LAST_ARG(type,val,offset) type\n+#define LAST_ARG_NONFLAT(type, val, offset, layout) type\n+#define ARG(type,val,offset) LAST_ARG(type, val, offset),\n+#define ARG_NONFLAT(type, val, offset, layout) LAST_ARG (type, val, offset),\n+#define DOTS ...\n+#define ANON(type,val, offset)\n+#define LAST_ANON(type,val, offset)\n+#define PTR(type, val, offset) LAST_ARG(type, val, offset),\n+#define PTR_ANON(type, val, offset)\n+#define LAST_ANONPTR(type, val, offset)\n+\n+#endif /* AARCH64_MACRO_DEF_GEN_PARAM_TYPE_LIST */\n+\n+\n+/* AARCH64_MACRO_DEF_GEN_ARGUMENT_LIST\n+   Define macros to generate argument list.  */\n+\n+#ifdef AARCH64_MACRO_DEF_GEN_ARGUMENT_LIST\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+#undef ANON_PROMOTED\n+\n+/* Generate the argument list; use VAL as the argument name.  */\n+#define LAST_ARG(type,val,offset,...) val\n+#define LAST_ARG_NONFLAT(type,val,offset,layout,...) val\n+#define ARG(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define ARG_NONFLAT(type, val, offset, layout,...) LAST_ARG (type, val, \\\n+\t\t\t\t\t\t\t     offset, \\\n+\t\t\t\t\t\t\t     __VA_ARGS__),\n+#define DOTS\n+#define LAST_ANON(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ANON(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define PTR(type, val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define PTR_ANON(type, val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define LAST_ANONPTR(type, val, offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ANON_PROMOTED(type,val,type_promoted, val_promoted, offset,...)\t\\\n+  LAST_ARG(type, val, offset, __VA_ARGS__),\n+\n+#endif /* AARCH64_MACRO_DEF_GEN_ARGUMENT_LIST */\n+\n+\n+/* AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+   Define variadic macros to generate parameter type list.  */\n+\n+#ifdef AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+#undef ANON_PROMOTED\n+\n+/* Generate parameter type list (without identifiers).  */\n+#define LAST_ARG(type,val,offset,...) type\n+#define LAST_ARG_NONFLAT(type, val, offset, layout, ...) type\n+#define ARG(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define ARG_NONFLAT(type, val, offset, layout, ...) LAST_ARG (type, val, \\\n+\t\t\t\t\t\t\t      offset, \\\n+\t\t\t\t\t\t\t      __VA_ARGS__),\n+#define DOTS\n+#define ANON(type,val, offset,...) ARG(type,val,offset, __VA_ARGS__)\n+#define LAST_ANON(type,val, offset,...) LAST_ARG(type,val, offset, __VA_ARGS__)\n+#define PTR(type, val, offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define PTR_ANON(type, val, offset,...) PTR(type, val, offset, __VA_ARGS__)\n+#define LAST_ANONPTR(type, val, offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ANON_PROMOTED(type,val,type_promoted, val_promoted, offset,...)\t\\\n+  LAST_ARG(type_promoted, val_promoted, offset, __VA_ARGS__),\n+\n+#endif /*  AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST  */\n+\n+\n+/* AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST_WITH_IDENT\n+   Define variadic macros to generate parameter type list with\n+   identifiers.  */\n+\n+#ifdef AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST_WITH_IDENT\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+#undef ANON_PROMOTED\n+\n+/* Generate parameter type list (with identifiers).\n+   The identifiers are named with prefix _f and suffix of the value of\n+   __VA_ARGS__.  */\n+#define LAST_ARG(type,val,offset,...) type _f##__VA_ARGS__\n+#define LAST_ARG_NONFLAT(type, val, offset, layout, ...) type _f##__VA_ARGS__\n+#define ARG(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define ARG_NONFLAT(type, val, offset, layout, ...) LAST_ARG (type, val, \\\n+\t\t\t\t\t\t\t      offset, \\\n+\t\t\t\t\t\t\t      __VA_ARGS__),\n+#define DOTS ...\n+#define ANON(type,val, offset,...)\n+#define LAST_ANON(type,val, offset,...)\n+#define PTR(type, val, offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define PTR_ANON(type, val, offset,...)\n+#define LAST_ANONPTR(type, val, offset,...)\n+#define ANON_PROMOTED(type,val,type_promoted, val_promoted, offset,...)\n+\n+#endif /* AARCH64_VARIADIC_MACRO_DEF_GEN_PARAM_TYPE_LIST_WITH_IDENT */\n+\n+\n+/* AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS\n+   Define variadic macros to generate assignment from the function\n+   incoming arguments to local variables.  */\n+\n+#ifdef AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+#undef ANON_PROMOTED\n+\n+/* Generate assignment statements.  For named args, direct assignment from\n+   the formal parameter is generated; for unnamed args, va_arg is used.\n+   The names of the local variables start with _x and end with the value of\n+   __VA_ARGS__.  */\n+#define LAST_ARG(type,val,offset,...) type _x##__VA_ARGS__ = _f##__VA_ARGS__;\n+#define LAST_ARG_NONFLAT(type, val, offset, layout, ...) \\\n+  type _x##__VA_ARGS__ = _f##__VA_ARGS__;\n+#define ARG(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ARG_NONFLAT(type,val,offset,layout,...) \\\n+  LAST_ARG (type, val, offset, __VA_ARGS__)\n+#define ANON(type,val,offset,...) type _x##__VA_ARGS__ = va_arg (ap, type);\n+#define LAST_ANON(type,val,offset,...) ANON(type, val, offset, __VA_ARGS__)\n+#define PTR(type, val,offset,...)  ARG(type, val, offset, __VA_ARGS__)\n+#define PTR_ANON(type, val, offset,...) ANON(type, val,offset, __VA_ARGS__)\n+#define LAST_ANONPTR(type, val, offset,...) ANON(type, val, offset, __VA_ARGS__)\n+#define ANON_PROMOTED(type,val,type_promoted, val_promoted, offset,...)\t\\\n+  ANON(type_promoted, val_promoted, offset, __VA_ARGS__)\n+\n+#define DOTS\n+\n+#endif /* AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS */\n+\n+\n+/* AARCH64_VARIADIC_MACRO_DEF_GEN_ARGUMENT_LIST\n+   Define variadic macros to generate argument list using the variables\n+   generated during AARCH64_VARIADIC_MACRO_DEF_ASSIGN_LOCAL_VARS_WITH_ARGS.  */\n+\n+#ifdef AARCH64_VARIADIC_MACRO_DEF_GEN_ARGUMENT_LIST\n+\n+#undef LAST_ARG\n+#undef ARG\n+#undef DOTS\n+#undef ANON\n+#undef LAST_ANON\n+#undef PTR\n+#undef PTR_ANON\n+#undef LAST_ANONPTR\n+#undef ANON_PROMOTED\n+\n+/* Generate the argument list; the names start with _x and end with the value of\n+   __VA_ARGS__.  All arguments (named or unnamed) in stdarg_func are passed to\n+   myfunc as named arguments.  */\n+#define LAST_ARG(type,val,offset,...) _x##__VA_ARGS__\n+#define LAST_ARG_NONFLAT(type, val, offset, layout, ...) _x##__VA_ARGS__\n+#define ARG(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define ARG_NONFLAT(type, val, offset, layout, ...) \\\n+  LAST_ARG_NONFLAT (type, val, offset, layout, __VA_ARGS__),\n+#define DOTS\n+#define LAST_ANON(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ANON(type,val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define PTR(type, val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define PTR_ANON(type, val,offset,...) LAST_ARG(type, val, offset, __VA_ARGS__),\n+#define LAST_ANONPTR(type, val, offset,...) LAST_ARG(type, val, offset, __VA_ARGS__)\n+#define ANON_PROMOTED(type,val,type_promoted, val_promoted, offset,...)\t\\\n+  ANON(type_promoted, val_promoted, offset, __VA_ARGS__)\n+\n+#endif /* AARCH64_VARIADIC_MACRO_DEF_GEN_ARGUMENT_LIST */"}, {"sha": "545b0568512965dac467e8a2dec6002af6ecbbc4", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,31 @@\n+/* Test AAPCS64 layout */\n+\n+/* C.7  If the argument is an Integral Type, the size of the argument is\n+\tless than or equal to 8 bytes and the NGRN is less than 8, the\n+\targument is copied to the least significant bits in x[NGRN].  The\n+\tNGRN is incremented by one.  The argument has now been allocated.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_1.c\"\n+/* TODO: review if we need this */\n+#define RUNTIME_ENDIANNESS_CHECK\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 4, W0)\n+  ARG(double, 4.0, D0)\n+  ARG(int, 3, W1)\n+  /* TODO: review the way of memcpy char, short, etc.  */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(char, 0xEF, X2)\n+  ARG(short, 0xBEEF, X3)\n+  ARG(int, 0xDEADBEEF, X4)\n+#else\n+  /* TODO: need the model/qemu to be big-endian as well  */\n+  ARG(char, 0xEF, X2+7)\n+  ARG(short, 0xBEEF, X3+6)\n+  ARG(int, 0xDEADBEEF, X4+4)\n+#endif\n+  LAST_ARG(long long, 0xDEADBEEFCAFEBABELL, X5)\n+#endif"}, {"sha": "c2f48154a0a0a158ae16139b8b5ab46f06729d7e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_10.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_10.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_10.c\"\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+\n+  ARG(int, 7, W0)\n+  DOTS\n+  ANON(struct z, a, D0)\n+  ANON(struct z, b, D4)\n+  ANON(double, 0.5, STACK)\n+  LAST_ANON(double, 1.5, STACK+8)\n+#endif"}, {"sha": "34cbe0303b97a49c242c86006350c7584121d403", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_11.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_11.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,34 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_11.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(double, 11.0, D0)\n+  DOTS\n+  ANON(struct z, a, D1)\n+  ANON(struct z, b, STACK)\n+  LAST_ANON(double, 0.5, STACK+32)\n+#endif"}, {"sha": "d07bef8b8f559291b3b2ef1c91e233e04bb03f5e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_12.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_12.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,44 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_12.c\"\n+\n+\n+struct y\n+{\n+  long p;\n+  long q;\n+  long r;\n+  long s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct y1\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v1 = { 1, 2, 3, 4 };\n+\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#define MYFUNCTYPE struct y\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(struct y1, v1, X1)\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  LAST_ARG(double, 0.5, STACK)\n+#endif"}, {"sha": "c73e6f2f9fbbbd3046256a81d6785953a8797cc8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_13.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_13.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,34 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+\n+#define TESTFILE \"test_13.c\"\n+\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(struct y, v, X1)\n+  ARG(struct z, a, D0)\n+  ARG(double, 1.0, D4)\n+  ARG(struct z, b, STACK)\n+  LAST_ARG(double, 0.5, STACK+32)\n+#endif"}, {"sha": "3c22b8a045693612dc1e8d1acf7adfdca2b833c8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_14.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_14.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_14.c\"\n+\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(int, 9, W1)\n+  ARG(struct z, a, D0)\n+  ARG(double, 1.0, D4)\n+  ARG(struct z, b, STACK)\n+  ARG(int, 4, W2)\n+  LAST_ARG(double, 0.5, STACK+32)\n+#endif"}, {"sha": "1a869ad772fd38541afb4813190f561cf74e0426", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_15.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_15.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_15.c\"\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(double, 1.0, D0)\n+  ARG(double, 2.0, D1)\n+  ARG(double, 3.0, D2)\n+  ARG(double, 4.0, D3)\n+  ARG(double, 5.0, D4)\n+  ARG(double, 6.0, D5)\n+  ARG(double, 7.0, D6)\n+  ARG(double, 8.0, D7)\n+  ARG(double, 9.0, STACK)\n+  LAST_ARG(double, 10.0, STACK+8)\n+#endif"}, {"sha": "1aa9725fd64fae189c55f1893693eaedbc6c9f07", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_16.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_16.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,32 @@\n+/* Test AAPCS layout */\n+/* C.5 If the argument is a Half- or Single- precision Floating-point type,\n+   then the size of the argument is set to 8 bytes.  The effect is as if\n+   the argument had been copied to the least significant bits of a 64-bit\n+   register and the remaining bits filled with unspecified values.  */\n+/* TODO: add the check of half-precision floating-point when it is supported\n+   by the A64 GCC.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_16.c\"\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(float, 1.0, S0)\n+  ARG(float, 2.0, S1)\n+  ARG(float, 3.0, S2)\n+  ARG(float, 4.0, S3)\n+  ARG(float, 5.0, S4)\n+  ARG(float, 6.0, S5)\n+  ARG(float, 7.0, S6)\n+  ARG(float, 8.0, S7)\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(float, 9.0, STACK)\n+  LAST_ARG(float, 10.0, STACK+8)\n+#else\n+  ARG(float, 9.0, STACK+4)\n+  LAST_ARG(float, 10.0, STACK+12)\n+#endif\n+#endif"}, {"sha": "348ea284760195f00d38af66ce843824b6c68e6d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_17.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_17.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,37 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_17.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+float f1 = 25.0;\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(double, 11.0, D0)\n+  DOTS\n+  ANON(struct z, a, D1)\n+  ANON(struct z, b, STACK)\n+  ANON(int , 5, W0)\n+  ANON(double, f1, STACK+32)\n+  LAST_ANON(double, 0.5, STACK+40)\n+#endif"}, {"sha": "b611e9b27faf7295fdcf0f9c7104d0d4ac6c17cb", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_18.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_18.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,34 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+\n+#define TESTFILE \"test_18.c\"\n+\n+\n+struct y\n+{\n+  long p;\n+  long q;\n+  long r;\n+  long s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  PTR(struct y, v, X1)\n+  ARG(struct z, a, D0)\n+  ARG(double, 1.0, D4)\n+  ARG(struct z, b, STACK)\n+  LAST_ARG(double, 0.5, STACK+32)\n+#endif"}, {"sha": "1a3f873b301877b3d0d444dd1c4f45f73a483bc8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_19.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_19.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS64 layout.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_19.c\"\n+\n+struct y\n+{\n+  int p1;\n+  int p2;\n+  float q;\n+  int r1;\n+  int r2;\n+  char x;\n+} v = { -1, 1, 2.0f, 3, 18, 19, 20};\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  DOTS\n+  ANON(double, 4.0, D0)\n+  ANON(struct z, a, D1)\n+  ANON(struct z, b, STACK)\n+  PTR_ANON(struct y, v, X1)\n+  LAST_ANON(int, 10, W2)\n+#endif"}, {"sha": "94817ede3e17c3b310ee3d9d62ea1aa1994af37a", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,16 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_2.c\"\n+#include \"abitest.h\"\n+\n+#else\n+  ARG(float, 1.0f, S0)\n+  ARG(double, 4.0, D1)\n+  ARG(float, 2.0f, S2)\n+  ARG(double, 5.0, D3)\n+  LAST_ARG(int, 3, W0)\n+#endif"}, {"sha": "e4cc1a1b5dd0c5874a936eb71239475270e98ef0", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_20.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_20.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,22 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_20.c\"\n+\n+#include \"abitest.h\"\n+\n+#else\n+  ARG(int, 8, W0)\n+  ARG(double, 1.0, D0)\n+  ARG(double, 2.0, D1)\n+  ARG(double, 3.0, D2)\n+  ARG(double, 4.0, D3)\n+  ARG(double, 5.0, D4)\n+  ARG(double, 6.0, D5)\n+  ARG(double, 7.0, D6)\n+  DOTS\n+  ANON(_Complex double, 1234.0 + 567.0i, STACK)\n+  LAST_ANON(double, -987.0, STACK+16)\n+#endif"}, {"sha": "b3a75e0256b0fce278838aa9281fd4581268659f", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_21.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_21.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,21 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_21.c\"\n+\n+#include \"abitest.h\"\n+\n+#else\n+  ARG(int, 8, W0)\n+  ARG(double, 1.0, D0)\n+  ARG(double, 2.0, D1)\n+  ARG(double, 3.0, D2)\n+  ARG(double, 4.0, D3)\n+  ARG(double, 5.0, D4)\n+  ARG(double, 6.0, D5)\n+  ARG(double, 7.0, D6)\n+  ARG(_Complex double, 1234.0 + 567.0i, STACK)\n+  LAST_ARG(double, -987.0, STACK+16)\n+#endif"}, {"sha": "cb8a8abc06baef0587c87cb43f6eba5b949e23b9", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_22.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_22.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,19 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_22.c\"\n+\n+struct y\n+{\n+  float p;\n+  float q;\n+} v = { 345.0f, 678.0f };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(float, 123.0f, S0)\n+  ARG(struct y, v, S1)\n+  LAST_ARG(float, 901.0f, S3)\n+#endif"}, {"sha": "6993884c0e71cd30e3e2f080b59fe66855ccdcfa", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_23.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_23.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,42 @@\n+/* Test AAPCS64 layout.\n+\n+   Larger than machine-supported vector size.  The behaviour is unspecified by\n+   the AAPCS64 document; the implementation opts for pass by reference.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_23.c\"\n+\n+typedef char A __attribute__ ((vector_size (64)));\n+\n+struct y\n+{\n+  double df[8];\n+};\n+\n+union u\n+{\n+  struct y x;\n+  A a;\n+} u;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  u.x.df[0] = 1.0;\n+  u.x.df[1] = 2.0;\n+  u.x.df[2] = 3.0;\n+  u.x.df[3] = 4.0;\n+  u.x.df[4] = 5.0;\n+  u.x.df[5] = 6.0;\n+  u.x.df[6] = 7.0;\n+  u.x.df[7] = 8.0;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (float, 123.0f, S0)\n+PTR (A, u.a, X0)\n+LAST_ARG_NONFLAT (int, 0xdeadbeef, X1, i32in64)\n+#endif"}, {"sha": "8655f6f3efcb9ec325503d4cf4a230bc5233f8b4", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_24.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_24.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,22 @@\n+/* Test AAPCS64 layout.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_24.c\"\n+\n+typedef long double TFtype;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(TFtype, 1.0, Q0)\n+  ARG(TFtype, 2.0, Q1)\n+  ARG(TFtype, 3.0, Q2)\n+  ARG(TFtype, 4.0, Q3)\n+  ARG(TFtype, 5.0, Q4)\n+  ARG(TFtype, 6.0, Q5)\n+  ARG(TFtype, 7.0, Q6)\n+  ARG(TFtype, 8.0, Q7)\n+  ARG(double, 9.0, STACK)\n+  LAST_ARG(TFtype, 10.0, STACK+16)\n+#endif"}, {"sha": "2f942ff4d108af382c7fa3ae7a0137e8d0ad0364", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_25.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_25.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,61 @@\n+/* Test AAPCS64 layout\n+\n+   Test homogeneous floating-point aggregates and homogeneous short-vector\n+   aggregates, which should be passed in SIMD/FP registers or via the\n+   stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_25.c\"\n+\n+typedef float vf2_t __attribute__((vector_size (8)));\n+struct x0\n+{\n+  vf2_t v;\n+} s0;\n+struct x3\n+{\n+  vf2_t v[2];\n+} s3;\n+struct x4\n+{\n+  vf2_t v[3];\n+} s4;\n+\n+typedef float vf4_t __attribute__((vector_size(16)));\n+struct x1\n+{\n+  vf4_t v;\n+} s1;\n+\n+struct x2\n+{\n+  double df[3];\n+} s2;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  s0.v = (vf2_t){ 17.f, 18.f };\n+  s1.v = (vf4_t){ 567.890f, 678.901f, 789.012f, 890.123f };\n+  s2.df[0] = 123.456;\n+  s2.df[1] = 234.567;\n+  s2.df[2] = 345.678;\n+  s3.v[0] = (vf2_t){ 19.f, 20.f, 21.f, 22.f };\n+  s3.v[1] = (vf2_t){ 23.f, 24.f, 25.f, 26.f };\n+  s4.v[0] = (vf2_t){ 27.f, 28.f, 29.f, 30.f };\n+  s4.v[1] = (vf2_t){ 31.f, 32.f, 33.f, 34.f };\n+  s4.v[2] = (vf2_t){ 35.f, 36.f, 37.f, 38.f };\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG_NONFLAT (struct x0, s0, Q0, f32in64)\n+ARG (struct x2, s2, D1)\n+ARG (struct x1, s1, Q4)\n+ARG (struct x3, s3, D5)\n+ARG (struct x4, s4, STACK)\n+ARG_NONFLAT (int, 0xdeadbeef, X0, i32in64)\n+LAST_ARG (double, 456.789, STACK+24)\n+#endif"}, {"sha": "9b9a3a4804f65fee738d205cc2fea37280a7791d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_26.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_26.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,54 @@\n+/* Test AAPCS64 layout.\n+\n+   Test some small structures that should be passed in GPRs.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_26.c\"\n+\n+struct y0\n+{\n+  char ch;\n+} c0 = { 'A' };\n+\n+struct y2\n+{\n+  long long ll[2];\n+} c2 = { 0xDEADBEEF, 0xCAFEBABE };\n+\n+struct y3\n+{\n+  int i[3];\n+} c3 = { 56789, 67890, 78901 };\n+\n+typedef float vf2_t __attribute__((vector_size (8)));\n+struct x0\n+{\n+  vf2_t v;\n+} s0;\n+\n+typedef short vh4_t __attribute__((vector_size (8)));\n+\n+struct x1\n+{\n+  vh4_t v[2];\n+} s1;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  s0.v = (vf2_t){ 17.f, 18.f };\n+  s1.v[0] = (vh4_t){ 345, 456, 567, 678 };\n+  s1.v[1] = (vh4_t){ 789, 890, 901, 123 };\n+}\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct y0, c0, X0)\n+ARG (struct y2, c2, X1)\n+ARG (struct y3, c3, X3)\n+ARG_NONFLAT (struct x0, s0, D0, f32in64)\n+ARG (struct x1, s1, D1)\n+LAST_ARG_NONFLAT (int, 89012, X5, i32in64)\n+#endif"}, {"sha": "f05b8e659cb521e041be5eb51af0e8dcb05994c5", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,18 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_3.c\"\n+\n+__complex__ x = 1.0+2.0i;\n+\n+#include \"abitest.h\"\n+#else\n+ARG (float, 1.0f, S0)\n+ARG (__complex__ double, x, D1)\n+ARG (float, 2.0f, S3)\n+ARG (double, 5.0, D4)\n+LAST_ARG_NONFLAT (int, 3, X0, i32in64)\n+#endif"}, {"sha": "a37db569bc881b6c85abdaa448bad10529c24c23", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_4.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,20 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target arm*-*-eabi* } } */\n+/* { dg-require-effective-target arm_hard_vfp_ok } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O -mfpu=vfp -mfloat-abi=hard\" } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_4.c\"\n+\n+__complex__ float x = 1.0f + 2.0fi;\n+#include \"abitest.h\"\n+#else\n+ARG (float, 1.0f, S0)\n+ARG (__complex__ float, x, S1)\n+ARG (float, 2.0f, S3)\n+ARG (double, 5.0, D4)\n+LAST_ARG_NONFLAT (int, 3, X0, i32in64)\n+#endif"}, {"sha": "674efd8c25efbffcabf335c3d5865aa0a161d9a8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_5.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,24 @@\n+/* Test AAPCS64 layout */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_5.c\"\n+\n+__complex__ float x = 1.0+2.0i;\n+\n+struct y\n+{\n+  long p;\n+  long q;\n+} v = { 1, 2};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(float, 1.0f, S0)\n+  ARG(__complex__ float, x, S1)\n+  ARG(float, 2.0f, S3)\n+  ARG(double, 5.0, D4)\n+  LAST_ARG(struct y, v, X0)\n+#endif"}, {"sha": "95d44e9232eb39e4c2f63720c1fb58538d0a2033", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_6.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_6.c\"\n+\n+__complex__ double x = 1.0+2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(struct y, v, X0)\n+  ARG(float, 1.0f, S0)\n+  ARG(__complex__ double, x, D1)\n+  ARG(float, 2.0f, S3)\n+  ARG(double, 5.0, D4)\n+  LAST_ARG(int, 3, W2)\n+#endif"}, {"sha": "4fb1feeaf7ee301d90bcc54cd45abfe2c22e30de", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_7.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_7.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,30 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_7.c\"\n+\n+__complex__ float x = 1.0f + 2.0i;\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 }, v1 = {5, 6, 7, 8}, v2 = {9, 10, 11, 12};\n+\n+#include \"abitest.h\"\n+#else\n+ARG (struct y, v, X0)\n+ARG (struct y, v1, X2)\n+ARG (struct y, v2, X4)\n+ARG (int, 4, W6)\n+ARG (float, 1.0f, S0)\n+ARG (__complex__ float, x, S1)\n+ARG (float, 2.0f, S3)\n+ARG (double, 5.0, D4)\n+ARG (int, 3, W7)\n+LAST_ARG_NONFLAT (int, 5, STACK, i32in64)\n+#endif"}, {"sha": "3d67ff5084463dee1e83b6bc21e099dbdb9c54cb", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_8.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,24 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_8.c\"\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  ARG(double, 0.5, STACK)\n+  ARG(int, 7, W0)\n+  LAST_ARG(int, 8, W1) \n+#endif"}, {"sha": "fbe42456ca3d707eb4549cdc1d862aa5a3028dfb", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_9.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_9.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,32 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define VFP\n+#define TESTFILE \"test_9.c\"\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+} v = { 1, 2, 3, 4 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 7, W0)\n+  ARG(struct y, v, X1)\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  LAST_ARG(double, 0.5, STACK)\n+#endif"}, {"sha": "f22fca6deb2e0aa05d519d5534811b5cea5f9c61", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-1.c", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,126 @@\n+/* Test AAPCS64 layout.\n+\n+   Test the comformance to the alignment and padding requirements.\n+\n+   B.4  If the argument type is a Composite Type then the size of the\n+        argument is rounded up to the nearest multiple of 8 bytes.\n+   C.4  If the argument is an HFA, a Quad-precision Floating-point or Short\n+\tVector Type then the NSAA is rounded up to the larger of 8 or the\n+\tNatural Alignment of the argument's type.\n+   C.12 The NSAA is rounded up to the larger of 8 or the Natural Alignment\n+\tof the argument's type.\n+   C.14 If the size of the argument is less than 8 bytes then the size of\n+\tthe argument is set ot 8 bytes.  The effect is as if the argument\n+\twas copied to the least significant bits of a 64-bit register and\n+\tthe remaining bits filled with unspecified values.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-1.c\"\n+#include \"type-def.h\"\n+\n+struct y\n+{\n+  int p;\n+  int q;\n+  int r;\n+  int s;\n+};\n+\n+struct y v1 = { 1, 2, 3, 4 };\n+struct y v2 = { 5, 6, 7, 8 };\n+struct y v3 = { 9, 10, 11, 12 };\n+struct y v4 = { 13, 14, 15, 16 };\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+vf4_t c = { 13.f, 14.f, 15.f, 16.f };\n+\n+struct x\n+{\n+  vf4_t v;\n+} w;\n+\n+char ch='a';\n+short sh=13;\n+int i=14;\n+long long ll=15;\n+\n+struct s1\n+{\n+  short sh[3];\n+} s1;\n+\n+struct s2\n+{\n+  int i[2];\n+  char c;\n+} s2;\n+\n+struct ldx2_t\n+{\n+  long double ld[2];\n+} ldx2 = { 12345.67890L, 23456.78901L };\n+\n+union u_t\n+{\n+  long double ld;\n+  double d[2];\n+} u;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  w.v = (vf4_t){ 17.f, 18.f, 19.f, 20.f };\n+  s1.sh[0] = 16;\n+  s1.sh[1] = 17;\n+  s1.sh[2] = 18;\n+  s2.i[0] = 19;\n+  s2.i[1] = 20;\n+  s2.c = 21;\n+  u.ld = 34567.89012L;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+\n+  ARG(struct y, v1, X0)\n+  ARG(struct y, v2, X2)\n+  ARG(struct y, v3, X4)\n+  ARG(struct y, v4, X6)\n+  ARG(struct z, a, D0)\n+  ARG(struct z, b, D4)\n+  ARG(double, 12.5, STACK)\n+  ARG(vf4_t, c, STACK+16)       /* [C.4] 16-byte aligned short vector */\n+  ARG(double, 17.0, STACK+32)\n+  ARG(struct x, w, STACK+48)    /* [C.12] 16-byte aligned small struct */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(char, ch, STACK+64)       /* [C.14] char  padded to the size of 8 bytes */\n+  ARG(short, sh, STACK+72)      /* [C.14] short padded to the size of 8 bytes */\n+  ARG(int, i, STACK+80)         /* [C.14] int   padded to the size of 8 bytes */\n+#else\n+  ARG(char, ch, STACK+71)\n+  ARG(short, sh, STACK+78)\n+  ARG(int, i, STACK+84)\n+#endif\n+  ARG(long long, ll, STACK+88)\n+  ARG(struct s1, s1, STACK+96)  /* [B.4] small struct padded to the size of 8 bytes */\n+  ARG(double, 18.0, STACK+104)\n+  ARG(struct s2, s2, STACK+112) /* [B.4] small struct padded to the size of 16 bytes */\n+  ARG(double, 19.0, STACK+128)\n+  ARG(long double, 30.0L, STACK+144)  /* [C.4] 16-byte aligned quad-precision */\n+  ARG(double, 31.0, STACK+160)\n+  ARG(struct ldx2_t, ldx2, STACK+176) /* [C.4] 16-byte aligned HFA */\n+  ARG(double, 32.0, STACK+208)\n+  ARG(__int128, 33, STACK+224)  /* [C.12] 16-byte aligned 128-bit integer */\n+  ARG(double, 34.0, STACK+240)\n+  ARG(union u_t, u, STACK+256)  /* [C.12] 16-byte aligned small composite (union in this case) */\n+  LAST_ARG_NONFLAT (int, 35.0, STACK+272, i32in64)\n+#endif"}, {"sha": "6c61948b16f1589cdbbb9dbecc6ba06e9ada4d0d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,42 @@\n+/* Test AAPCS64 layout.\n+\n+   C.8  If the argument has an alignment of 16 then the NGRN is rounded up\n+\tthe next even number.\n+\n+   The case of a small struture containing only one 16-byte aligned\n+   quad-word integer is covered in this test.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-2.c\"\n+#include \"type-def.h\"\n+\n+struct y\n+{\n+  union int128_t v;\n+} w;\n+\n+struct x\n+{\n+  long long p;\n+  int q;\n+} s = {0xDEADBEEFCAFEBABELL, 0xFEEBDAED};\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  w.v.l64 = 0xfdb9753102468aceLL;\n+  w.v.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 0xAB, W0)\n+  ARG(struct y, w, X2)\n+  ARG(int, 0xCD, W4)\n+  ARG(struct x, s, X5)\n+  LAST_ARG(int, 0xFF00FF00, W7)\n+\n+#endif"}, {"sha": "bf8bc7468f785519f0e97e3b1b10231d5cecf469", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-3.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,46 @@\n+/* Test AAPCS64 layout.\n+\n+   C.8  If the argument has an alignment of 16 then the NGRN is rounded up\n+\tthe next even number.\n+   C.9  If the argument is an Integral Type, the size of the argument is\n+\tequal to 16 and the NGRN is less than 7, the argument is copied\n+\tto x[NGRN] and x[NGRN+1]. x[NGRN] shall contain the lower addressed\n+\tdouble-word of the memory representation of the argument.  The\n+\tNGRN is incremented by two.  The argument has now been allocated.\n+\n+   The case of passing a 128-bit integer in two general registers is covered\n+   in this test.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-3.c\"\n+#include \"type-def.h\"\n+\n+union int128_t qword;\n+\n+int gInt[4];\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Initialize the quadword integer via the union.  */\n+  qword.l64 = 0xDEADBEEFCAFEBABELL;\n+  qword.h64 = 0x123456789ABCDEF0LL;\n+\n+  gInt[0] = 12345;\n+  gInt[1] = 23456;\n+  gInt[2] = 34567;\n+  gInt[3] = 45678;\n+}\n+\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, gInt[0], W0)\n+  ARG(int, gInt[1], W1)\n+  ARG(int, gInt[2], W2)\n+  ARG(__int128, qword.i, X4)\n+  LAST_ARG(int, gInt[3], W6)\n+\n+#endif"}, {"sha": "7834ed87e78217d6a511d9b6e39aa3af0073f254", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_align-4.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_align-4.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,42 @@\n+/* Test AAPCS64 layout.\n+\n+   C.3 If the argument is an HFA then the NSRN is set to 8 and the size\n+   of the argument is rounded up to the nearest multiple of 8 bytes.\n+\n+   TODO: add the check of an HFA containing half-precision floating-point\n+   when __f16 is supported in A64 GCC.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_align-4.c\"\n+\n+struct z1\n+{\n+  double x[4];\n+};\n+\n+struct z1 a = { 5.0, 6.0, 7.0, 8.0 };\n+\n+struct z2\n+{\n+  float x[3];\n+};\n+\n+struct z2 b = { 13.f, 14.f, 15.f };\n+struct z2 c = { 16.f, 17.f, 18.f };\n+\n+#include \"abitest.h\"\n+#else\n+\n+  ARG(struct z1, a, D0)\n+  ARG(double, 9.0, D4)\n+  ARG(double, 10.0, D5)\n+  ARG(struct z2, b, STACK)       /* [C.3] on stack and size padded to 16 bytes */\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  ARG(float, 15.5f, STACK+16)    /* [C.3] NSRN has been set to 8 */\n+#else\n+  ARG(float, 15.5f, STACK+20)\n+#endif\n+  LAST_ARG(struct z2, c, STACK+24)\n+#endif"}, {"sha": "6bf9721cc4e70196545f04dc4be075069d9cd718", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_complex.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_complex.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,18 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_complex.c\"\n+\n+__complex__ float x = 1.0+2.0i;\n+__complex__ int y = 5 + 6i;\n+__complex__ double z = 2.0 + 3.0i;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(__complex__ float, x, S0)\n+  ARG(__complex__ int, y, X0)\n+  ARG(__complex__ double, z, D2)\n+  LAST_ARG (int, 5, W1)\n+#endif"}, {"sha": "9df344f29f7eda156092df23edb7705d61094878", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_int128.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_int128.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,17 @@\n+/* Test AAPCS layout (VFP variant) */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_int128.c\"\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+\n+TItype x = 0xcafecafecafecfeacfeacfea;\n+TItype y = 0xcfeacfeacfeacafecafecafe;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (TItype, x, X0)\n+  LAST_ARG (TItype, y, X2)\n+#endif"}, {"sha": "109cea0b5c57ce942fec7848ac2c1c397295348d", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/test_quad_double.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_quad_double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_quad_double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftest_quad_double.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,26 @@\n+/* Test AAPCS64 layout.\n+\n+   Test parameter passing of floating-point quad precision types.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define TESTFILE \"test_quad_double.c\"\n+\n+typedef long double TFtype;\n+typedef _Complex long double CTFtype;\n+\n+TFtype x = 1.0;\n+TFtype y = 2.0;\n+\n+CTFtype cx = 3.0 + 4.0i;\n+CTFtype cy = 5.0 + 6.0i;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG       ( TFtype,  x, Q0)\n+  ARG       (CTFtype, cx, Q1)\n+  DOTS\n+  ANON      (CTFtype, cy, Q3)\n+  LAST_ANON ( TFtype,  y, Q5)\n+#endif"}, {"sha": "a95d06aa2edac5428b81575e90909c37460b0e45", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/type-def.h", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,157 @@\n+/* This header file defines some types that are used in the AAPCS64 tests.  */\n+\n+\n+/* 64-bit vector of 2 floats.  */\n+typedef float vf2_t __attribute__((vector_size (8)));\n+\n+/* 128-bit vector of 4 floats.  */\n+typedef float vf4_t __attribute__((vector_size (16)));\n+\n+/* 128-bit vector of 4 ints.  */\n+typedef int vi4_t __attribute__((vector_size (16)));\n+\n+/* signed quad-word (in an union for the convenience of initialization).  */\n+union int128_t\n+{\n+  __int128 i;\n+  struct\n+    {\n+      signed long long l64;\n+      signed long long h64;\n+    };\n+};\n+\n+/* Homogeneous floating-point composite types.  */\n+\n+struct hfa_fx1_t\n+{\n+  float a;\n+};\n+\n+struct hfa_fx2_t\n+{\n+  float a;\n+  float b;\n+};\n+\n+struct hfa_dx2_t\n+{\n+  double a;\n+  double b;\n+};\n+\n+struct hfa_dx4_t\n+{\n+  double a;\n+  double b;\n+  double c;\n+  double d;\n+};\n+\n+struct hfa_ldx3_t\n+{\n+  long double a;\n+  long double b;\n+  long double c;\n+};\n+\n+struct hfa_ffs_t\n+{\n+  float a;\n+  float b;\n+  struct hfa_fx2_t c;\n+};\n+\n+union hfa_union_t\n+{\n+  struct\n+    {\n+      float a;\n+      float b;\n+    } s;\n+  float c;\n+};\n+\n+/* Non homogeneous floating-point-composite types.  */\n+\n+struct non_hfa_fx5_t\n+{\n+  float a;\n+  float b;\n+  float c;\n+  float d;\n+  float e;\n+};\n+\n+struct non_hfa_ffs_t\n+{\n+  float a;\n+  float b;\n+  struct hfa_dx2_t c;\n+};\n+\n+struct non_hfa_ffs_2_t\n+{\n+  struct\n+    {\n+      int a;\n+      int b;\n+    } s;\n+  float c;\n+  float d;\n+};\n+\n+struct hva_vf2x1_t\n+{\n+  vf2_t a;\n+};\n+\n+struct hva_vf2x2_t\n+{\n+  vf2_t a;\n+  vf2_t b;\n+};\n+\n+struct hva_vi4x1_t\n+{\n+  vi4_t a;\n+};\n+\n+struct non_hfa_ffd_t\n+{\n+  float a;\n+  float b;\n+  double c;\n+};\n+\n+struct non_hfa_ii_t\n+{\n+  int a;\n+  int b;\n+};\n+\n+struct non_hfa_c_t\n+{\n+  char a;\n+};\n+\n+struct non_hfa_ffvf2_t\n+{\n+  float a;\n+  float b;\n+  vf2_t c;\n+};\n+\n+struct non_hfa_fffd_t\n+{\n+  float a;\n+  float b;\n+  float c;\n+  double d;\n+};\n+\n+union non_hfa_union_t\n+{\n+  double a;\n+  float b;\n+};"}, {"sha": "4eb569e8c746f9e36dafb552da628e1d1ba7810c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,50 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers fundamental data types as specified in AAPCS64 \\S 4.1.\n+   It is focus on unnamed parameter passed in registers.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-1.c\"\n+#include \"type-def.h\"\n+\n+vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n+vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n+union int128_t qword;\n+signed char sc = 0xed;\n+signed int sc_promoted = 0xffffffed;\n+signed short ss = 0xcba9;\n+signed int ss_promoted = 0xffffcba9;\n+float fp = 65432.12345f;\n+double fp_promoted = (double)65432.12345f;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  qword.l64 = 0xfdb9753102468aceLL;\n+  qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG          (         int      , 0xff  ,                            X0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON_PROMOTED(unsigned char     , 0xfe  , unsigned int, 0xfe       , X1,       1)\n+  ANON_PROMOTED(  signed char     , sc    ,   signed int, sc_promoted, X2,       2)\n+  ANON_PROMOTED(unsigned short    , 0xdcba, unsigned int, 0xdcba     , X3,       3)\n+  ANON_PROMOTED(  signed short    , ss    ,   signed int, ss_promoted, X4,       4)\n+  ANON         (unsigned int      , 0xdeadbeef,                        X5,       5)\n+  ANON         (  signed int      , 0xcafebabe,                        X6,       6)\n+  ANON         (unsigned long long, 0xba98765432101234ULL,             X7,       7)\n+  ANON         (  signed long long, 0xa987654321012345LL ,             STACK,    8)\n+  ANON         (          __int128, qword.i              ,             STACK+16, 9)\n+  ANON_PROMOTED(         float    , fp    ,       double, fp_promoted, D0,      10)\n+  ANON         (         double   , 9876543.212345,                    D1,      11)\n+  ANON         (    long double   , 98765432123456789.987654321L,      Q2,      12)\n+  ANON         (             vf2_t, vf2   ,                            D3,      13)\n+  ANON         (             vi4_t, vi4   ,                            Q4,      14)\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+32,15)\n+#endif"}, {"sha": "50b77005b326a3ed3d29dae2d8205b8008466ca0", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-10.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-10.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,29 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: Anonymous arguments passed on the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-10.c\"\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+double d1 = 25.0;\n+double d2 = 103.0;\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(struct z, a, D0, 0)\n+  ARG(struct z, b, D4, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(double, d1, STACK, 2)\n+  LAST_ANON(double, d2, STACK+8, 3)\n+\n+#endif"}, {"sha": "c1f1f8f9b7e3cb9eb43c862085902730e96170e7", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-11.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-11.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,32 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: Anonymous arguments passed on the stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-11.c\"\n+\n+struct z\n+{\n+  double x[2];\n+};\n+\n+double d1 = 25.0;\n+struct z a = { 5.0, 6.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(double, 1.0, D0, 0)\n+  ARG(double, 2.0, D1, 1)\n+  ARG(double, 3.0, D2, 2)\n+  ARG(double, 4.0, D3, 3)\n+  ARG(double, 5.0, D4, 4)\n+  ARG(double, 6.0, D5, 5)\n+  ARG(double, 7.0, D6, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(struct z, a, STACK, 8)\n+  LAST_ANON(double, d1, STACK+16, 9)\n+\n+#endif"}, {"sha": "a12ccfd8b9740ece60f2cd2c270caaaf7aedc76b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-12.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-12.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,60 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Pass by reference.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-12.c\"\n+\n+struct z\n+{\n+  char c;\n+  short s;\n+  int ia[4];\n+};\n+\n+struct z a, b, c;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  a.c = 0x11;\n+  a.s = 0x2222;\n+  a.ia[0] = 0x33333333;\n+  a.ia[1] = 0x44444444;\n+  a.ia[2] = 0x55555555;\n+  a.ia[3] = 0x66666666;\n+\n+  b.c = 0x77;\n+  b.s = 0x8888;\n+  b.ia[0] = 0x99999999;\n+  b.ia[1] = 0xaaaaaaaa;\n+  b.ia[2] = 0xbbbbbbbb;\n+  b.ia[3] = 0xcccccccc;\n+\n+  c.c = 0xdd;\n+  c.s = 0xeeee;\n+  c.ia[0] = 0xffffffff;\n+  c.ia[1] = 0x12121212;\n+  c.ia[2] = 0x23232323;\n+  c.ia[3] = 0x34343434;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  PTR(struct z, a, X0, 0)\n+  ARG(int, 0xdeadbeef, X1, 1)\n+  ARG(int, 0xcafebabe, X2, 2)\n+  ARG(int, 0xdeadbabe, X3, 3)\n+  ARG(int, 0xcafebeef, X4, 4)\n+  ARG(int, 0xbeefdead, X5, 5)\n+  ARG(int, 0xbabecafe, X6, LAST_NAMED_ARG_ID)\n+  DOTS\n+  PTR_ANON(struct z, b, X7, 7)\n+  PTR_ANON(struct z, c, STACK, 8)\n+  ANON(int, 0xbabedead, STACK+8, 9)\n+  LAST_ANON(double, 123.45, D0, 10)\n+\n+#endif"}, {"sha": "b6da677c5ad5ac9b6ebcd815ea86e9bdcdd34f3b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,59 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers fundamental data types as specified in AAPCS64 \\S 4.1.\n+   It is focus on unnamed parameter passed on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-2.c\"\n+#include \"type-def.h\"\n+\n+vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n+vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n+union int128_t qword;\n+signed char sc = 0xed;\n+signed int sc_promoted = 0xffffffed;\n+signed short ss = 0xcba9;\n+signed int ss_promoted = 0xffffcba9;\n+float fp = 65432.12345f;\n+double fp_promoted = (double)65432.12345f;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  qword.l64 = 0xfdb9753102468aceLL;\n+  qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG          (         int      , 0xff  ,                            X0,        0)\n+  ARG          (         float    , 1.0f  ,                            S0,        1)\n+  ARG          (         float    , 1.0f  ,                            S1,        2)\n+  ARG          (         float    , 1.0f  ,                            S2,        3)\n+  ARG          (         float    , 1.0f  ,                            S3,        4)\n+  ARG          (         float    , 1.0f  ,                            S4,        5)\n+  ARG          (         float    , 1.0f  ,                            S5,        6)\n+  ARG          (         float    , 1.0f  ,                            S6,        7)\n+  ARG          (         float    , 1.0f  ,                            S7, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON         (          __int128, qword.i              ,             X2,        8)\n+  ANON         (  signed long long, 0xa987654321012345LL ,             X4,        9)\n+  ANON         (          __int128, qword.i              ,             X6,       10)\n+  ANON_PROMOTED(unsigned char     , 0xfe  , unsigned int, 0xfe       , STACK,    11)\n+  ANON_PROMOTED(  signed char     , sc    ,   signed int, sc_promoted, STACK+8,  12)\n+  ANON_PROMOTED(unsigned short    , 0xdcba, unsigned int, 0xdcba     , STACK+16, 13)\n+  ANON_PROMOTED(  signed short    , ss    ,   signed int, ss_promoted, STACK+24, 14)\n+  ANON         (unsigned int      , 0xdeadbeef,                        STACK+32, 15)\n+  ANON         (  signed int      , 0xcafebabe,                        STACK+40, 16)\n+  ANON         (unsigned long long, 0xba98765432101234ULL,             STACK+48, 17)\n+  ANON_PROMOTED(         float    , fp    ,       double, fp_promoted, STACK+56, 18)\n+  ANON         (         double   , 9876543.212345,                    STACK+64, 19)\n+  ANON         (    long double   , 98765432123456789.987654321L,      STACK+80, 20)\n+  ANON         (             vf2_t, vf2   ,                            STACK+96, 21)\n+  ANON         (             vi4_t, vi4   ,                            STACK+112,22)\n+  LAST_ANON    (         int      , 0xeeee,                            STACK+128,23)\n+#endif"}, {"sha": "34978c7e59d6c41a0197787ce659283b19295a09", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-3.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,86 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers most composite types as described in AAPCS64 \\S 4.3.\n+   Homogeneous floating-point aggregate types are covered in other tests.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-3.c\"\n+#include \"type-def.h\"\n+\n+struct x0\n+{\n+  char ch;\n+  int i;\n+} y0 = { 'a', 12345 };\n+\n+struct x1\n+{\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+} y1 = { 0xdeadbeef, 0xcafebabe, 0x87654321, 0xabcedf975 };\n+\n+struct x2\n+{\n+  long long a;\n+  long long b;\n+  char ch;\n+} y2 = { 0x12, 0x34, 0x56 };\n+\n+union x3\n+{\n+  char ch;\n+  int i;\n+  long long ll;\n+} y3;\n+\n+union x4\n+{\n+  int i;\n+  struct x2 y2;\n+} y4;\n+\n+struct x5\n+{\n+  union int128_t qword;\n+} y5;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  /* Init small union.  */\n+  y3.ll = 0xfedcba98LL;\n+\n+  /* Init big union.  */\n+  y4.y2.a = 0x78;\n+  y4.y2.b = 0x89;\n+  y4.y2.ch= 0x9a;\n+\n+  /* Init signed quad-word integer.  */\n+  y5.qword.l64 = 0xfdb9753102468aceLL;\n+  y5.qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (float   ,1.0f, S0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON     (struct x0, y0, X0,        1)\n+  ANON     (struct x1, y1, X1,        2)\n+  PTR_ANON (struct x2, y2, X3,        3)\n+  ANON     (union  x3, y3, X4,        4)\n+  PTR_ANON (union  x4, y4, X5,        5)\n+  ANON     (struct x5, y5, X6,        6)\n+  ANON     (struct x0, y0, STACK,     7)\n+  ANON     (struct x1, y1, STACK+8,   8)\n+  PTR_ANON (struct x2, y2, STACK+24,  9)\n+  ANON     (union  x3, y3, STACK+32, 10)\n+  PTR_ANON (union  x4, y4, STACK+40, 11)\n+  ANON     (int      ,  1, STACK+48, 12)\n+  ANON     (struct x5, y5, STACK+64, 13)\n+  LAST_ANON(int      ,  2, STACK+80, 14)\n+#endif"}, {"sha": "d0e18db54d2460bf87a9f80b885f010bca4ffa49", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-4.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-4.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,93 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers homogeneous floating-point aggregate types and homogeneous\n+   short-vector aggregate types as described in AAPCS64 \\S 4.3.5.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-4.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_fx1_t hfa_fx1 = {12.345f};\n+struct hfa_fx2_t hfa_fx2 = {123.456f, 234.456f};\n+struct hfa_dx2_t hfa_dx2 = {234.567, 345.678};\n+struct hfa_dx4_t hfa_dx4 = {1234.123, 2345.234, 3456.345, 4567.456};\n+struct hfa_ldx3_t hfa_ldx3 = {123456.7890, 234567.8901, 345678.9012};\n+struct non_hfa_fx5_t non_hfa_fx5 = {456.789f, 567.890f, 678.901f, 789.012f, 890.123f};\n+struct hfa_ffs_t hfa_ffs;\n+struct non_hfa_ffs_t non_hfa_ffs;\n+struct non_hfa_ffs_2_t non_hfa_ffs_2;\n+struct hva_vf2x1_t hva_vf2x1;\n+struct hva_vf2x2_t hva_vf2x2;\n+struct hva_vi4x1_t hva_vi4x1;\n+struct non_hfa_ffd_t non_hfa_ffd = {23.f, 24.f, 25.0};\n+struct non_hfa_ii_t non_hfa_ii = {26, 27};\n+struct non_hfa_c_t non_hfa_c = {28};\n+struct non_hfa_ffvf2_t non_hfa_ffvf2;\n+struct non_hfa_fffd_t non_hfa_fffd = {33.f, 34.f, 35.f, 36.0};\n+union hfa_union_t hfa_union;\n+union non_hfa_union_t non_hfa_union;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hva_vf2x1.a = (vf2_t){17.f, 18.f};\n+  hva_vf2x2.a = (vf2_t){19.f, 20.f};\n+  hva_vf2x2.b = (vf2_t){21.f, 22.f};\n+  hva_vi4x1.a = (vi4_t){19, 20, 21, 22};\n+\n+  non_hfa_ffvf2.a = 29.f;\n+  non_hfa_ffvf2.b = 30.f;\n+  non_hfa_ffvf2.c = (vf2_t){31.f, 32.f};\n+\n+  hfa_union.s.a = 37.f;\n+  hfa_union.s.b = 38.f;\n+  hfa_union.c   = 39.f;\n+\n+  non_hfa_union.a = 40.0;\n+  non_hfa_union.b = 41.f;\n+\n+  hfa_ffs.a = 42.f;\n+  hfa_ffs.b = 43.f;\n+  hfa_ffs.c.a = 44.f;\n+  hfa_ffs.c.b = 45.f;\n+\n+  non_hfa_ffs.a = 46.f;\n+  non_hfa_ffs.b = 47.f;\n+  non_hfa_ffs.c.a = 48.0;\n+  non_hfa_ffs.c.b = 49.0;\n+\n+  non_hfa_ffs_2.s.a = 50;\n+  non_hfa_ffs_2.s.b = 51;\n+  non_hfa_ffs_2.c = 52.f;\n+  non_hfa_ffs_2.d = 53.f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int   , 1, X0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* HFA or HVA passed in fp/simd registers or on stack.  */\n+  ANON     (struct hfa_fx1_t  , hfa_fx1 ,  S0      , 0)\n+  ANON     (struct hfa_fx2_t  , hfa_fx2 ,  S1      , 1)\n+  ANON     (struct hfa_dx2_t  , hfa_dx2 ,  D3      , 2)\n+  ANON     (struct hva_vf2x1_t, hva_vf2x1, D5      , 11)\n+  ANON     (struct hva_vi4x1_t, hva_vi4x1, Q6      , 12)\n+  ANON     (struct hfa_dx4_t  , hfa_dx4 ,  STACK   , 3)\n+  ANON     (struct hfa_ffs_t  , hfa_ffs  , STACK+32, 4)\n+  ANON     (union  hfa_union_t, hfa_union, STACK+48, 5)\n+  ANON     (struct hfa_ldx3_t , hfa_ldx3 , STACK+64, 6)\n+  /* Non-H[FV]A passed in general registers or on stack or via reference.  */\n+  PTR_ANON (struct non_hfa_fx5_t  , non_hfa_fx5  , X1       , 10)\n+  ANON     (struct non_hfa_ffd_t  , non_hfa_ffd  , X2       , 13)\n+  ANON     (struct non_hfa_ii_t   , non_hfa_ii   , X4       , 14)\n+  ANON     (struct non_hfa_c_t    , non_hfa_c    , X5       , 15)\n+  ANON     (struct non_hfa_ffvf2_t, non_hfa_ffvf2, X6       , 16)\n+  PTR_ANON (struct non_hfa_fffd_t , non_hfa_fffd , STACK+112, 17)\n+  PTR_ANON (struct non_hfa_ffs_t  , non_hfa_ffs  , STACK+120, 18)\n+  ANON     (struct non_hfa_ffs_2_t, non_hfa_ffs_2, STACK+128, 19)\n+  ANON     (union  non_hfa_union_t, non_hfa_union, STACK+144, 20)\n+  LAST_ANON(int                   , 2            , STACK+152, 30)\n+#endif"}, {"sha": "6b99a6f1e6e6b7aebd82360c8fd76ecb5b65534e", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-5.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-5.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,47 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test is focus on certain unnamed homogeneous floating-point aggregate\n+   types passed in fp/simd registers.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-5.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_fx1_t hfa_fx1 = {12.345f};\n+struct hfa_fx2_t hfa_fx2 = {123.456f, 234.456f};\n+struct hfa_dx2_t hfa_dx2 = {234.567, 345.678};\n+struct hfa_dx4_t hfa_dx4 = {1234.123, 2345.234, 3456.345, 4567.456};\n+struct hfa_ldx3_t hfa_ldx3 = {123456.7890, 234567.8901, 345678.9012};\n+struct hfa_ffs_t hfa_ffs;\n+union hfa_union_t hfa_union;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hfa_union.s.a = 37.f;\n+  hfa_union.s.b = 38.f;\n+  hfa_union.c   = 39.f;\n+\n+  hfa_ffs.a = 42.f;\n+  hfa_ffs.b = 43.f;\n+  hfa_ffs.c.a = 44.f;\n+  hfa_ffs.c.b = 45.f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, X0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* HFA passed in fp/simd registers or on stack.  */\n+  ANON     (struct hfa_dx4_t  , hfa_dx4  , D0      , 0)\n+  ANON     (struct hfa_ldx3_t , hfa_ldx3 , Q4      , 1)\n+  ANON     (struct hfa_ffs_t  , hfa_ffs  , STACK   , 2)\n+  ANON     (union  hfa_union_t, hfa_union, STACK+16, 3)\n+  ANON     (struct hfa_fx1_t  , hfa_fx1  , STACK+24, 4)\n+  ANON     (struct hfa_fx2_t  , hfa_fx2  , STACK+32, 5)\n+  ANON     (struct hfa_dx2_t  , hfa_dx2  , STACK+40, 6)\n+  LAST_ANON(double            , 1.0      , STACK+56, 7)\n+#endif"}, {"sha": "f94a54ab1b330d2e79ddd7ae82d4931b6ceadf1b", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-6.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,40 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test is focus on certain unnamed homogeneous floating-point aggregate\n+   types passed in fp/simd registers.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-6.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_fx1_t hfa_fx1 = {12.345f};\n+struct hfa_dx2_t hfa_dx2 = {234.567, 345.678};\n+struct hfa_ffs_t hfa_ffs;\n+union hfa_union_t hfa_union;\n+\n+#define HAS_DATA_INIT_FUNC\n+void init_data ()\n+{\n+  hfa_union.s.a = 37.f;\n+  hfa_union.s.b = 38.f;\n+  hfa_union.c   = 39.f;\n+\n+  hfa_ffs.a = 42.f;\n+  hfa_ffs.b = 43.f;\n+  hfa_ffs.c.a = 44.f;\n+  hfa_ffs.c.b = 45.f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, X0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON     (struct hfa_ffs_t  , hfa_ffs  , S0     , 0)\n+  ANON     (union  hfa_union_t, hfa_union, S4     , 1)\n+  ANON     (struct hfa_dx2_t  , hfa_dx2  , D6     , 2)\n+  ANON     (struct hfa_fx1_t  , hfa_fx1  , STACK  , 3)\n+  LAST_ANON(double            , 1.0      , STACK+8, 4)\n+#endif"}, {"sha": "b82e7a74217f0d64f0d7d233d6978913b9799ad8", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-7.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-7.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,31 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   This test covers complex types.  Complex floating-point types are treated\n+   as homogeneous floating-point aggregates, while complex integral types\n+   are treated as general composite types.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-7.c\"\n+#include \"type-def.h\"\n+\n+_Complex __int128 complex_qword = 567890 + 678901i;\n+\n+#include \"abitest.h\"\n+#else\n+  ARG      (int, 1, X0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* Complex floating-point types are passed in fp/simd registers.  */\n+  ANON     (_Complex float      , 12.3f + 23.4fi              , S0,  0)\n+  ANON     (_Complex double     , 34.56 + 45.67i              , D2,  1)\n+  ANON     (_Complex long double, 56789.01234L + 67890.12345Li, Q4,  2)\n+\n+  /* Complex integral types are passed in general registers or via reference.  */\n+  ANON     (_Complex short      , (short)12345 + (short)23456i, X1, 10)\n+  ANON     (_Complex int        , 34567 + 45678i              , X2, 11)\n+  PTR_ANON (_Complex __int128   , complex_qword               , X3, 12)\n+\n+  LAST_ANON(int                 , 1                           , X4, 20)\n+#endif"}, {"sha": "d148482981c2fe999818eef673c41bce965ffbe4", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-8.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,25 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: HFA anonymous parameter passed in SIMD/FP regs.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-8.c\"\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(int, 0xdeadbeef, W0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(double, 4.0, D0, 1)\n+  LAST_ANON(struct z, a, D1, 2)\n+\n+#endif"}, {"sha": "a5183bef44ef68cb145c836ebcae555bd78a8050", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-9.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-9.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,31 @@\n+/* Test AAPCS64 layout and __builtin_va_arg.\n+\n+   Miscellaneous test: HFA anonymous parameter passed in SIMD/FP regs.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-9.c\"\n+\n+struct z\n+{\n+  double x[4];\n+};\n+\n+double d1 = 25.0;\n+struct z a = { 5.0, 6.0, 7.0, 8.0 };\n+struct z b = { 9.0, 10.0, 11.0, 12.0 };\n+\n+#include \"abitest.h\"\n+#else\n+  ARG(double, 11.0, D0, LAST_NAMED_ARG_ID)\n+  DOTS\n+  ANON(int, 8, W0, 1)\n+  ANON(struct z, a, D1, 2)\n+  ANON(struct z, b, STACK, 3)\n+  ANON(int, 5, W1, 4)\n+  ANON(double, d1, STACK+32, 5)\n+  LAST_ANON(double, 0.5, STACK+40, 6)\n+\n+#endif"}, {"sha": "ac946256e7e868bc7af37519b9965d35eee2fe14", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/validate_memory.h", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fvalidate_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fvalidate_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fvalidate_memory.h?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,81 @@\n+/* Memory validation functions for AArch64 procedure call standard.\n+   Copyright (C) 2012 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef VALIDATE_MEMORY_H\n+#define VALIDATE_MEMORY_H\n+\n+enum structure_type\n+{\n+  flat = 0,\n+  i32in128,\n+  f32in64,\n+  i8in64,\n+  i16in64,\n+  i32in64,\n+};\n+\n+/* Some explicit declarations as I can't include files outside the testsuite.\n+ */\n+typedef long unsigned int size_t;\n+int memcmp (void *, void *, size_t);\n+\n+/* These two arrays contain element size and block size data for the enumeration\n+   above.  */\n+const int element_size[] =       { 1, 4,  4, 1, 2, 4 };\n+const int block_reverse_size[] = { 1, 16, 8, 8, 8, 8 };\n+\n+int\n+validate_memory (void *mem1, char *mem2, size_t size, enum structure_type type)\n+{\n+  /* In big-endian mode, the data in mem2 will have been byte-reversed in\n+     register sized groups, while the data in mem1 will have been byte-reversed\n+     according to the true structure of the data.  To compare them, we need to\n+     compare chunks of data in reverse order.\n+\n+     This is only implemented for homogeneous data layouts at the moment.  For\n+     hetrogeneous structures a custom compare case will need to be written.  */\n+\n+  unsigned int i;\n+  char *cmem1 = (char *) mem1;\n+  switch (type)\n+    {\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+    case i8in64:\n+    case i16in64:\n+    case i32in64:\n+    case f32in64:\n+    case i32in128:\n+      for (i = 0; i < size; i += element_size[type])\n+\t{\n+\t  if (memcmp (cmem1 + i,\n+\t\t      mem2 + block_reverse_size[type] - i - element_size[type],\n+\t\t      element_size[type]))\n+\t    return 1;\n+\t}\n+      return 0;\n+      break;\n+#endif\n+    default:\n+      break;\n+    }\n+  return memcmp (mem1, mem2, size);\n+}\n+\n+#endif  /* VALIDATE_MEMORY_H.  */"}, {"sha": "60ebb499ac7e6c584bbe6df542fd9fcf038debd6", "filename": "gcc/testsuite/gcc.target/aarch64/aarch64.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faarch64.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faarch64.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faarch64.exp?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,45 @@\n+#  Specific regression driver for AArch64.\n+#  Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+#  Contributed by ARM Ltd.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "c19920ce500424d50107a2e479c9fd9649f72f7a", "filename": "gcc/testsuite/gcc.target/aarch64/adc-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadc-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+volatile unsigned int w0, w1, w2, w3, w4;\n+volatile int result;\n+\n+void test_si() {\n+  /* { dg-final { scan-assembler \"adc\\tw\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  w0 = w1 + w2 + (w3 >= w4);\n+}\n+\n+volatile unsigned long long int x0, x1, x2, x3, x4;\n+\n+void test_di() {\n+  /* { dg-final { scan-assembler \"adc\\tx\\[0-9\\]*, x\\[0-9\\]*, x\\[0-9\\]*\\n\" } } */\n+  x0 = x1 + x2 + (x3 >= x4);\n+}\n+"}, {"sha": "0f13619106b7a341e200e4e3a018c821c634cd75", "filename": "gcc/testsuite/gcc.target/aarch64/adc-2.c", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadc-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,277 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+/* This series of tests looks for the optimization:\n+   x = (a >= b) + c + d\n+   =>\n+   cmp a, b\n+   adc x, c, d\n+ */\n+\n+unsigned long \n+ltu_add (unsigned long a, unsigned long b, unsigned long c, unsigned long d)\n+{\n+  return (a < b) + c + d;\n+}\n+\n+unsigned long \n+gtu_add (unsigned long a, unsigned long b, unsigned long c, unsigned long d)\n+{\n+  return (a > b) + c + d;\n+}\n+\n+unsigned long \n+leu_add (unsigned long a, unsigned long b, unsigned long c, unsigned long d)\n+{\n+  return (a <= b) + c + d;\n+}\n+\n+unsigned long \n+geu_add (unsigned long a, unsigned long b, unsigned long c, unsigned long d)\n+{\n+  return (a >= b) + c + d;\n+}\n+\n+unsigned long \n+equ_add (unsigned long a, unsigned long b, unsigned long c, unsigned long d)\n+{\n+  return (a == b) + c + d;\n+}\n+\n+unsigned long \n+neu_add (unsigned long a, unsigned long b, unsigned long c, unsigned long d)\n+{\n+  return (a != b) + c + d;\n+}\n+\n+long \n+lt_add ( long a,  long b,  long c,  long d)\n+{\n+  return (a < b) + c + d;\n+}\n+\n+long \n+gt_add ( long a,  long b,  long c,  long d)\n+{\n+  return (a > b) + c + d;\n+}\n+\n+long \n+le_add ( long a,  long b,  long c,  long d)\n+{\n+  return (a <= b) + c + d;\n+}\n+\n+long \n+ge_add ( long a,  long b,  long c,  long d)\n+{\n+  return (a >= b) + c + d;\n+}\n+\n+long \n+eq_add ( long a,  long b,  long c,  long d)\n+{\n+  return (a == b) + c + d;\n+}\n+\n+long \n+ne_add ( long a,  long b,  long c,  long d)\n+{\n+  return (a != b) + c + d;\n+}\n+\n+\n+int\n+main ()\n+{\n+  if (ltu_add(1,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (ltu_add(2,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (ltu_add(3,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (gtu_add(2,1,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (gtu_add(2,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (gtu_add(1,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (leu_add(1,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (leu_add(2,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (leu_add(3,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (leu_add(2,1,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (geu_add(2,1,3,4) != 8)\n+    {\n+      abort();\n+    }\n+  if (geu_add(2,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (geu_add(1,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (equ_add(1,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (equ_add(2,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (equ_add(3,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (neu_add(1,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (neu_add(2,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (neu_add(3,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (lt_add(1,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (lt_add(2,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (lt_add(3,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (gt_add(2,1,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (gt_add(2,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (gt_add(1,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (le_add(1,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (le_add(2,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (le_add(3,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (le_add(2,1,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (ge_add(2,1,3,4) != 8)\n+    {\n+      abort();\n+    }\n+  if (ge_add(2,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (ge_add(1,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (eq_add(1,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (eq_add(2,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (eq_add(3,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (ne_add(1,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+\n+  if (ne_add(2,2,3,4) != 7)\n+    {\n+      abort();\n+    }\n+\n+  if (ne_add(3,2,3,4) != 8)\n+    {\n+      abort();\n+    }\n+  return 0;\n+}"}, {"sha": "a0f5982522756d95eea35b5a04a89ab3ca3f71ee", "filename": "gcc/testsuite/gcc.target/aarch64/arch-diagnostics-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farch-diagnostics-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farch-diagnostics-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farch-diagnostics-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-error \"unknown\" \"\" {target \"aarch64*-*-*\" } } */\n+/* { dg-options \"-O2 -march=dummy\" } */\n+\n+void f ()\n+{\n+  return;\n+}"}, {"sha": "f1f3ea38c2aebd51a2dbb7376414d9ace52d7851", "filename": "gcc/testsuite/gcc.target/aarch64/arch-diagnostics-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farch-diagnostics-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farch-diagnostics-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farch-diagnostics-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-error \"missing\" \"\" {target \"aarch64*-*-*\" } } */\n+/* { dg-options \"-O2 -march=+dummy\" } */\n+\n+void f ()\n+{\n+  return;\n+}"}, {"sha": "55dd9f66f23cf6e6eff67bd68d875d24c0460d13", "filename": "gcc/testsuite/gcc.target/aarch64/arg-type-diagnostics-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farg-type-diagnostics-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farg-type-diagnostics-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Farg-type-diagnostics-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"arm_neon.h\"\n+\n+void foo ()\n+{\n+  int a;\n+  int32x2_t arg1;\n+  int32x2_t arg2;\n+  int32x2_t result;\n+  arg1 = vcreate_s32 (UINT64_C (0x0000ffffffffffff));\n+  arg2 = vcreate_s32 (UINT64_C (0x16497fffffffffff));\n+  result = __builtin_aarch64_srsra_nv2si (arg1, arg2, a); /* { dg-error \"incompatible type for argument\" } */\n+}"}, {"sha": "bdfa4504f612621dc4478d4f363038c844bc43d2", "filename": "gcc/testsuite/gcc.target/aarch64/asm-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef struct\n+{\n+  int i;\n+  int y;\n+} __attribute__ ((aligned (16))) struct64_t;\n+\n+void foo ()\n+{\n+  struct64_t tmp;\n+  asm volatile (\"ldr q0, %[value]\" : : [value]\"m\"(tmp));\n+}"}, {"sha": "ac8d2e0510624dc23ac9b3c5204bd3b61b10274d", "filename": "gcc/testsuite/gcc.target/aarch64/clrsb.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fclrsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fclrsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fclrsb.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int functest (unsigned int x)\n+{\n+  return __builtin_clrsb (x);\n+}\n+\n+/* { dg-final { scan-assembler \"cls\\tw\" } } */"}, {"sha": "b650b1318571845410e9b764d29b356987a99dfc", "filename": "gcc/testsuite/gcc.target/aarch64/clz.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fclz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fclz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fclz.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int functest (unsigned int x)\n+{\n+  return __builtin_clz (x);\n+}\n+\n+/* { dg-final { scan-assembler \"clz\\tw\" } } */"}, {"sha": "de6b8a7da4d4d2500e5191dbbd925fab2d0afdb8", "filename": "gcc/testsuite/gcc.target/aarch64/cpu-diagnostics-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-error \"unknown\" \"\" {target \"aarch64*-*-*\" } } */\n+/* { dg-options \"-O2 -mcpu=dummy\" } */\n+\n+void f ()\n+{\n+  return;\n+}"}, {"sha": "284971d832cdf841eeceea8b696c7061f912bb6d", "filename": "gcc/testsuite/gcc.target/aarch64/cpu-diagnostics-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-error \"missing\" \"\" {target \"aarch64*-*-*\" } } */\n+/* { dg-options \"-O2 -mcpu=example-1+no\" } */\n+\n+void f ()\n+{\n+  return;\n+}"}, {"sha": "4e5d17c3b8282943576087a4bda268d0dea768e5", "filename": "gcc/testsuite/gcc.target/aarch64/cpu-diagnostics-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-error \"unknown\" \"\" {target \"aarch64*-*-*\" } } */\n+/* { dg-options \"-O2 -mcpu=example-1+dummy\" } */\n+\n+void f ()\n+{\n+  return;\n+}"}, {"sha": "4c246eb0172b16f9bad8b914b0bd0addd44edfe4", "filename": "gcc/testsuite/gcc.target/aarch64/cpu-diagnostics-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-4.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-error \"missing\" \"\" {target \"aarch64*-*-*\" } } */\n+/* { dg-options \"-O2 -mcpu=+dummy\" } */\n+\n+void f ()\n+{\n+  return;\n+}"}, {"sha": "132a0f67939b670fe2eea26ddaf91541eb371ed7", "filename": "gcc/testsuite/gcc.target/aarch64/csinc-1.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinc-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int\n+test_csinc32_ifcvt(unsigned int w0,\n+\t\t   unsigned int w1,\n+\t\t   unsigned int w2) {\n+  /* { dg-final { scan-assembler \"csinc\\tw\\[0-9\\]*.*ne\" } } */\n+  if (w0 == w1)\n+    ++ w2;\n+\n+  return w2;\n+}\n+\n+unsigned int\n+test_csinc32_condasn1(unsigned int w0,\n+\t\t      unsigned int w1,\n+\t\t      unsigned int w2,\n+\t\t      unsigned int w3) {\n+  unsigned int w4;\n+\n+  /* { dg-final { scan-assembler \"csinc\\tw\\[0-9\\]*.*ne\" } } */\n+  w4 = (w0 == w1) ? (w3 + 1) : w2;\n+  return w4;\n+}\n+\n+unsigned int\n+test_csinc32_condasn2(unsigned int w0,\n+\t\t      unsigned int w1,\n+\t\t      unsigned int w2,\n+\t\t      unsigned int w3) {\n+  unsigned int w4;\n+\n+  /* { dg-final { scan-assembler \"csinc\\tw\\[0-9\\]*.*eq\" } } */\n+  w4 = (w0 == w1) ? w2 : (w3 + 1);\n+  return w4;\n+}\n+\n+unsigned long long\n+test_csinc64_ifcvt(unsigned long long x0,\n+\t\t   unsigned long long x1,\n+\t\t   unsigned long long x2) {\n+  /* { dg-final { scan-assembler \"csinc\\tx\\[0-9\\]*.*ne\" } } */\n+  if (x0 == x1)\n+    ++ x2;\n+\n+  return x2;\n+}\n+\n+unsigned long long\n+test_csinc64_condasn1(unsigned long long x0,\n+\t\t      unsigned long long x1,\n+\t\t      unsigned long long x2,\n+\t\t      unsigned long long x3) {\n+  unsigned long long x4;\n+\n+  /* { dg-final { scan-assembler \"csinc\\tx\\[0-9\\]*.*ne\" } } */\n+  x4 = (x0 == x1) ? (x3 + 1) : x2;\n+  return x4;\n+}\n+\n+unsigned long long\n+test_csinc64_condasn2(unsigned long long x0,\n+\t\t      unsigned long long x1,\n+\t\t      unsigned long long x2,\n+\t\t      unsigned long long x3) {\n+  unsigned long long x4;\n+\n+  /* { dg-final { scan-assembler \"csinc\\tx\\[0-9\\]*.*eq\" } } */\n+  x4 = (x0 == x1) ? x2 : (x3 + 1);\n+  return x4;\n+}"}, {"sha": "8d44449f477f6f11508987046207908ea29311a9", "filename": "gcc/testsuite/gcc.target/aarch64/csinv-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinv-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int\n+test_csinv32_condasn1(unsigned int w0,\n+\t\t      unsigned int w1,\n+\t\t      unsigned int w2,\n+\t\t      unsigned int w3) {\n+  unsigned int w4;\n+\n+  /* { dg-final { scan-assembler \"csinv\\tw\\[0-9\\]*.*ne\" } } */\n+  w4 = (w0 == w1) ? ~w3 : w2;\n+  return w4;\n+}\n+\n+unsigned int\n+test_csinv32_condasn2(unsigned int w0,\n+\t\t      unsigned int w1,\n+\t\t      unsigned int w2,\n+\t\t      unsigned int w3) {\n+  unsigned int w4;\n+\n+  /* { dg-final { scan-assembler \"csinv\\tw\\[0-9\\]*.*eq\" } } */\n+  w4 = (w0 == w1) ? w3 : ~w2;\n+  return w4;\n+}\n+\n+unsigned long long\n+test_csinv64_condasn1(unsigned long long x0,\n+\t\t      unsigned long long x1,\n+\t\t      unsigned long long x2,\n+\t\t      unsigned long long x3) {\n+  unsigned long long x4;\n+\n+  /* { dg-final { scan-assembler \"csinv\\tx\\[0-9\\]*.*ne\" } } */\n+  x4 = (x0 == x1) ? ~x3 : x2;\n+  return x4;\n+}\n+\n+unsigned long long\n+test_csinv64_condasn2(unsigned long long x0,\n+\t\t      unsigned long long x1,\n+\t\t      unsigned long long x2,\n+\t\t      unsigned long long x3) {\n+  unsigned long long x4;\n+\n+  /* { dg-final { scan-assembler \"csinv\\tx\\[0-9\\]*.*eq\" } } */\n+  x4 = (x0 == x1) ? x3 : ~x2;\n+  return x4;\n+}"}, {"sha": "08001afd8ca4532b66562e5f631923daa7a34ec9", "filename": "gcc/testsuite/gcc.target/aarch64/csneg-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsneg-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+test_csneg32_condasn1(int w0,\n+\t\t      int w1,\n+\t\t      int w2,\n+\t\t      int w3) {\n+  int w4;\n+\n+  /* { dg-final { scan-assembler \"csneg\\tw\\[0-9\\]*.*ne\" } } */\n+  w4 = (w0 == w1) ? -w3 : w2;\n+  return w4;\n+}\n+\n+int\n+test_csneg32_condasn2(int w0,\n+\t\t      int w1,\n+\t\t      int w2,\n+\t\t      int w3) {\n+  int w4;\n+\n+  /* { dg-final { scan-assembler \"csneg\\tw\\[0-9\\]*.*eq\" } } */\n+  w4 = (w0 == w1) ? w3 : -w2;\n+  return w4;\n+}\n+\n+long long\n+test_csneg64_condasn1(long long x0,\n+\t\t      long long x1,\n+\t\t      long long x2,\n+\t\t      long long x3) {\n+  long long x4;\n+\n+  /* { dg-final { scan-assembler \"csneg\\tx\\[0-9\\]*.*ne\" } } */\n+  x4 = (x0 == x1) ? -x3 : x2;\n+  return x4;\n+}\n+\n+long long\n+test_csneg64_condasn2(long long x0,\n+\t\t      long long x1,\n+\t\t      long long x2,\n+\t\t      long long x3) {\n+  long long x4;\n+\n+  /* { dg-final { scan-assembler \"csneg\\tx\\[0-9\\]*.*eq\" } } */\n+  x4 = (x0 == x1) ? x3 : -x2;\n+  return x4;\n+}"}, {"sha": "89d6fb442bf6236f6390866602cbd6e79145969b", "filename": "gcc/testsuite/gcc.target/aarch64/ctz.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fctz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fctz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fctz.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int functest (unsigned int x)\n+{\n+  return __builtin_ctz (x);\n+}\n+\n+/* { dg-final { scan-assembler \"rbit\\tw\" } } */\n+/* { dg-final { scan-assembler \"clz\\tw\" } } */\n+"}, {"sha": "f399e55ce8b82386f0ff9cb1d51540d30be0e34a", "filename": "gcc/testsuite/gcc.target/aarch64/extend.c", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,170 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+ldr_uxtw (int *arr, unsigned int i)\n+{\n+  /* { dg-final { scan-assembler \"ldr\\tw\\[0-9\\]+,.*uxtw #?2]\" } } */\n+  return arr[i];\n+}\n+\n+int\n+ldr_uxtw0 (char *arr, unsigned int i)\n+{\n+  /* { dg-final { scan-assembler \"ldr\\tw\\[0-9\\]+,.*uxtw]\" } } */\n+  return arr[i];\n+}\n+\n+int\n+ldr_sxtw (int *arr, int i)\n+{\n+  /* { dg-final { scan-assembler \"ldr\\tw\\[0-9\\]+,.*sxtw #?2]\" } } */\n+  return arr[i];\n+}\n+\n+int\n+ldr_sxtw0 (char *arr, int i)\n+{\n+  /* { dg-final { scan-assembler \"ldr\\tw\\[0-9\\]+,.*sxtw]\" } } */\n+  return arr[i];\n+}\n+\n+unsigned long long\n+adddi_uxtw (unsigned long long a, unsigned int i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tx\\[0-9\\]+,.*uxtw #?3\" } } */\n+  return a + ((unsigned long long)i << 3);\n+}\n+\n+unsigned long long\n+adddi_uxtw0 (unsigned long long a, unsigned int i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tx\\[0-9\\]+,.*uxtw\\n\" } } */\n+  return a + i;\n+}\n+\n+long long\n+adddi_sxtw (long long a, int i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tx\\[0-9\\]+,.*sxtw #?3\" } } */\n+  return a + ((long long)i << 3);\n+}\n+\n+long long\n+adddi_sxtw0 (long long a, int i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tx\\[0-9\\]+,.*sxtw\\n\" } } */\n+  return a + i;\n+}\n+\n+unsigned long long\n+subdi_uxtw (unsigned long long a, unsigned int i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*uxtw #?3\" } } */\n+  return a - ((unsigned long long)i << 3);\n+}\n+\n+unsigned long long\n+subdi_uxtw0 (unsigned long long a, unsigned int i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*uxtw\\n\" } } */\n+  return a - i;\n+}\n+\n+long long\n+subdi_sxtw (long long a, int i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*sxtw #?3\" } } */\n+  return a - ((long long)i << 3);\n+}\n+\n+long long\n+subdi_sxtw0 (long long a, int i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*sxtw\\n\" } } */\n+  return a - (long long)i;\n+}\n+\n+unsigned long long\n+subdi_uxth (unsigned long long a, unsigned short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*uxth #?1\" } } */\n+  return a - ((unsigned long long)i << 1);\n+}\n+\n+unsigned long long\n+subdi_uxth0 (unsigned long long a, unsigned short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*uxth\\n\" } } */\n+  return a - i;\n+}\n+\n+long long\n+subdi_sxth (long long a, short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*sxth #?1\" } } */\n+  return a - ((long long)i << 1);\n+}\n+\n+long long\n+subdi_sxth0 (long long a, short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tx\\[0-9\\]+,.*sxth\\n\" } } */\n+  return a - (long long)i;\n+}\n+\n+unsigned int\n+subsi_uxth (unsigned int a, unsigned short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tw\\[0-9\\]+,.*uxth #?1\" } } */\n+  return a - ((unsigned int)i << 1);\n+}\n+\n+unsigned int\n+subsi_uxth0 (unsigned int a, unsigned short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tw\\[0-9\\]+,.*uxth\\n\" } } */\n+  return a - i;\n+}\n+\n+int\n+subsi_sxth (int a, short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tw\\[0-9\\]+,.*sxth #?1\" } } */\n+  return a - ((int)i << 1);\n+}\n+\n+int\n+subsi_sxth0 (int a, short i)\n+{\n+  /* { dg-final { scan-assembler \"sub\\tw\\[0-9\\]+,.*sxth\\n\" } } */\n+  return a - (int)i;\n+}\n+\n+unsigned int\n+addsi_uxth (unsigned int a, unsigned short i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tw\\[0-9\\]+,.*uxth #?1\" } } */\n+  return a + ((unsigned int)i << 1);\n+}\n+\n+unsigned int\n+addsi_uxth0 (unsigned int a, unsigned short i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tw\\[0-9\\]+,.*uxth\\n\" } } */\n+  return a + i;\n+}\n+\n+int\n+addsi_sxth (int a, short i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tw\\[0-9\\]+,.*sxth #?1\" } } */\n+  return a + ((int)i << 1);\n+}\n+\n+int\n+addsi_sxth0 (int a, short i)\n+{\n+  /* { dg-final { scan-assembler \"add\\tw\\[0-9\\]+,.*sxth\\n\" } } */\n+  return a + (int)i;\n+}"}, {"sha": "be50ee50f9812c128446af63e60a36b6d1d38596", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt.x", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,55 @@\n+extern GPF SUFFIX(trunc) (GPF);\n+extern GPF SUFFIX(ceil) (GPF);\n+extern GPF SUFFIX(floor) (GPF);\n+extern GPF SUFFIX(round) (GPF);\n+\n+GPI test1a (GPF x) {\n+  return SUFFIX(__builtin_trunc)(x);\n+}\n+\n+GPI test1b (GPF x)\n+{\n+  return SUFFIX(trunc)(x);\n+}\n+\n+GPI test2a (GPF x)\n+{\n+  return SUFFIX(__builtin_lceil)(x);\n+}\n+\n+GPI test2b (GPF x)\n+{\n+  return SUFFIX(ceil)(x);\n+}\n+\n+GPI test2c (GPF x)\n+{\n+  return SUFFIX(__builtin_ceil)(x);\n+}\n+\n+GPI test3a (GPF x)\n+{\n+  return SUFFIX(__builtin_lfloor)(x);\n+}\n+\n+GPI test3b (GPF x)\n+{\n+  return SUFFIX(floor)(x);\n+}\n+\n+GPI test3c (GPF x)\n+{\n+  return SUFFIX(__builtin_floor)(x);\n+}\n+\n+GPI test4a (GPF x)\n+{\n+  return SUFFIX(__builtin_round)(x);\n+}\n+\n+GPI test4b (GPF x)\n+{\n+  return SUFFIX(round)(x);\n+}\n+\n+"}, {"sha": "697aab1c478534dc4f860eeddd71e054248d0c93", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_double_int.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_int.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF double\n+#define SUFFIX(x) x\n+#define GPI int\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *d\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *d\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtas\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */"}, {"sha": "edf640bda4bd60a258941f7ba2e57b35772f6831", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_double_long.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_long.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF double\n+#define SUFFIX(x) x\n+#define GPI long\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *d\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *d\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtas\\tx\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */"}, {"sha": "a1fae764fdb4eac25892e1f11d1032542a53327c", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_double_uint.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_uint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_uint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_uint.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF double\n+#define SUFFIX(x) x\n+#define GPI unsigned int\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *d\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtpu\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *d\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtmu\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtau\\tw\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */"}, {"sha": "f95fe55c6742884e3303c19ae566a745249da9b7", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_double_ulong.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_ulong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_ulong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_double_ulong.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF double\n+#define SUFFIX(x) x\n+#define GPI unsigned long\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *d\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtpu\\tx\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *d\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtmu\\tx\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtau\\tx\\[0-9\\]+, *d\\[0-9\\]\" 2 } } */"}, {"sha": "ac1509857c4b84564303eeaae3fda888aad938a6", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_float_int.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_int.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF float\n+#define SUFFIX(x) x##f\n+#define GPI int\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *s\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *s\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtas\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */"}, {"sha": "928ac52f7bccef2360127d1f50035fea0583f049", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_float_long.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_long.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF float\n+#define SUFFIX(x) x##f\n+#define GPI long\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *s\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *s\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtas\\tx\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */"}, {"sha": "a7d1868ba7393fae95bdc875588ed02ed97a27fa", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_float_uint.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_uint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_uint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_uint.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF float\n+#define SUFFIX(x) x##f\n+#define GPI unsigned int\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *s\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtpu\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *s\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtmu\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtau\\tw\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */"}, {"sha": "ab6f46e7134b00d4b14d725d02a7b471843982a5", "filename": "gcc/testsuite/gcc.target/aarch64/fcvt_float_ulong.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_ulong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_ulong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffcvt_float_ulong.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF float\n+#define SUFFIX(x) x##f\n+#define GPI unsigned long\n+\n+#include \"fcvt.x\"\n+\n+/* { dg-final { scan-assembler-times \"fcvtzu\\tx\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtps\\tx\\[0-9\\]+, *s\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtpu\\tx\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtms\\tx\\[0-9\\]+, *s\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtmu\\tx\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtau\\tx\\[0-9\\]+, *s\\[0-9\\]\" 2 } } */"}, {"sha": "a3447619d235adda6800e7c197d181ab9615a10e", "filename": "gcc/testsuite/gcc.target/aarch64/ffs.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fffs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fffs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fffs.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int functest(unsigned int x)\n+{\n+  return __builtin_ffs(x);\n+}\n+\n+/* { dg-final { scan-assembler \"cmp\\tw\" } } */\n+/* { dg-final { scan-assembler \"rbit\\tw\" } } */\n+/* { dg-final { scan-assembler \"clz\\tw\" } } */\n+/* { dg-final { scan-assembler \"csinc\\tw\" } } */"}, {"sha": "39975dbae0af52e8d67ab288864980272b03f26c", "filename": "gcc/testsuite/gcc.target/aarch64/fmadd.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmadd.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern double fma (double, double, double);\n+extern float fmaf (float, float, float);\n+\n+double test_fma1 (double x, double y, double z)\n+{\n+  return fma (x, y, z);\n+}\n+\n+float test_fma2 (float x, float y, float z)\n+{\n+  return fmaf (x, y, z);\n+}\n+\n+double test_fnma1 (double x, double y, double z)\n+{\n+  return fma (-x, y, z);\n+}\n+\n+float test_fnma2 (float x, float y, float z)\n+{\n+  return fmaf (-x, y, z);\n+}\n+\n+double test_fms1 (double x, double y, double z)\n+{\n+  return fma (x, y, -z);\n+}\n+\n+float test_fms2 (float x, float y, float z)\n+{\n+  return fmaf (x, y, -z);\n+}\n+\n+double test_fnms1 (double x, double y, double z)\n+{\n+  return fma (-x, y, -z);\n+}\n+\n+float test_fnms2 (float x, float y, float z)\n+{\n+  return fmaf (-x, y, -z);\n+}\n+\n+/* { dg-final { scan-assembler-times \"fmadd\\td\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmadd\\ts\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmsub\\td\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fmsub\\ts\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fnmsub\\td\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fnmsub\\ts\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fnmadd\\td\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fnmadd\\ts\\[0-9\\]\" 1 } } */\n+"}, {"sha": "9c115df08ef1e865043c4f26a283f76384d509b3", "filename": "gcc/testsuite/gcc.target/aarch64/fnmadd-fastmath.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffnmadd-fastmath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffnmadd-fastmath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffnmadd-fastmath.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double fma (double, double, double);\n+extern float fmaf (float, float, float);\n+\n+double test_fma1 (double x, double y, double z)\n+{\n+  return - fma (x, y, z);\n+}\n+\n+float test_fma2 (float x, float y, float z)\n+{\n+  return - fmaf (x, y, z);\n+}\n+\n+/* { dg-final { scan-assembler-times \"fnmadd\\td\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fnmadd\\ts\\[0-9\\]\" 1 } } */\n+"}, {"sha": "1403740686ea3927d2c39eb2466ef8cc67e223b2", "filename": "gcc/testsuite/gcc.target/aarch64/frint.x", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,66 @@\n+extern GPF SUFFIX(trunc) (GPF);\n+extern GPF SUFFIX(ceil) (GPF);\n+extern GPF SUFFIX(floor) (GPF);\n+extern GPF SUFFIX(nearbyint) (GPF);\n+extern GPF SUFFIX(rint) (GPF);\n+extern GPF SUFFIX(round) (GPF);\n+\n+GPF test1a (GPF x)\n+{\n+  return SUFFIX(__builtin_trunc)(x);\n+}\n+\n+GPF test1b (GPF x)\n+{\n+  return SUFFIX(trunc)(x);\n+}\n+\n+GPF test2a (GPF x)\n+{\n+  return SUFFIX(__builtin_ceil)(x);\n+}\n+\n+GPF test2b (GPF x)\n+{\n+  return SUFFIX(ceil)(x);\n+}\n+\n+GPF test3a (GPF x)\n+{\n+  return SUFFIX(__builtin_floor)(x);\n+}\n+\n+GPF test3b (GPF x)\n+{\n+  return SUFFIX(floor)(x);\n+}\n+\n+GPF test4a (GPF x)\n+{\n+  return SUFFIX(__builtin_nearbyint)(x);\n+}\n+\n+GPF test4b (GPF x)\n+{\n+  return SUFFIX(nearbyint)(x);\n+}\n+\n+GPF test5a (GPF x)\n+{\n+  return SUFFIX(__builtin_rint)(x);\n+}\n+\n+GPF test5b (GPF x)\n+{\n+  return SUFFIX(rint)(x);\n+}\n+\n+GPF test6a (GPF x)\n+{\n+  return SUFFIX(__builtin_round)(x);\n+}\n+\n+GPF test6b (GPF x)\n+{\n+  return SUFFIX(round)(x);\n+}"}, {"sha": "96139496ca454cebd41d31e8b018dab7ffa33a3f", "filename": "gcc/testsuite/gcc.target/aarch64/frint_double.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint_double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint_double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint_double.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF double\n+#define SUFFIX(x) x\n+\n+#include \"frint.x\"\n+\n+/* { dg-final { scan-assembler-times \"frintz\\td\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frintp\\td\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frintm\\td\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frinti\\td\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\td\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frinta\\td\\[0-9\\]\" 2 } } */"}, {"sha": "493ec37f940a6e8cb01ea7e324073fa22099636c", "filename": "gcc/testsuite/gcc.target/aarch64/frint_float.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint_float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint_float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffrint_float.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define GPF float\n+#define SUFFIX(x) x##f\n+\n+#include \"frint.x\"\n+\n+/* { dg-final { scan-assembler-times \"frintz\\ts\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frintp\\ts\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frintm\\ts\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frinti\\ts\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\ts\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"frinta\\ts\\[0-9\\]\" 2 } } */"}, {"sha": "582771ba1c288a98d5bacc6ed6334a9b308fef33", "filename": "gcc/testsuite/gcc.target/aarch64/index.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Findex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Findex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Findex.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\[us\\]xtw\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\[us\\]bfiz\\t\" } } */\n+/* { dg-final { scan-assembler-not \"lsl\\t\" } } */\n+\n+int\n+load_scaled_sxtw (int *arr, int i)\n+{\n+  return arr[arr[i]];\n+}\n+\n+unsigned int\n+load_scaled_uxtw (unsigned int *arr, unsigned int i)\n+{\n+  return arr[arr[i]];\n+}\n+\n+void\n+store_scaled_sxtw (int *arr, int i)\n+{\n+  arr[arr[i]] = 0;\n+}\n+\n+void\n+store_scaled_uxtw (unsigned int *arr, unsigned int i)\n+{\n+  arr[arr[i]] = 0;\n+}\n+\n+int\n+load_unscaled_sxtw (signed char *arr, int i)\n+{\n+  return arr[arr[i]];\n+}\n+\n+unsigned int\n+load_unscaled_uxtw (unsigned char *arr, unsigned int i)\n+{\n+  return arr[arr[i]];\n+}\n+\n+void\n+store_unscaled_sxtw (signed char *arr, int i)\n+{\n+  arr[arr[i]] = 0;\n+}\n+\n+void\n+store_unscaled_uxtw (unsigned char *arr, unsigned int i)\n+{\n+  arr[arr[i]] = 0;\n+}\n+\n+\n+\f\n+int\n+load_scaled_tmp_sxtw (int *arr, int i)\n+{\n+  int j = arr[i];\n+  return arr[j];\n+}\n+\n+unsigned int\n+load_scaled_tmp_uxtw (unsigned int *arr, unsigned int i)\n+{\n+  unsigned int j = arr[i];\n+  return arr[j];\n+}\n+\n+void\n+store_scaled_tmp_sxtw (int *arr, int i)\n+{\n+  int j = arr[i];\n+  arr[j] = 0;\n+}\n+\n+void\n+store_scaled_tmp_uxtw (unsigned int *arr, unsigned int i)\n+{\n+  unsigned int j = arr[i];\n+  arr[j] = 0;\n+}\n+\n+int\n+load_unscaled_tmp_sxtw (signed char *arr, int i)\n+{\n+  signed char j = arr[i];\n+  return arr[j];\n+}\n+\n+unsigned int\n+load_unscaled_tmp_uxtw (unsigned char *arr, unsigned int i)\n+{\n+  unsigned char j = arr[i];\n+  return arr[j];\n+}\n+\n+void\n+store_unscaled_tmp_sxtw (signed char *arr, int i)\n+{\n+  signed char j = arr[i];\n+  arr[j] = 0;\n+}\n+\n+void\n+store_unscaled_tmp_uxtw (unsigned char *arr, unsigned int i)\n+{\n+  unsigned char j = arr[i];\n+  arr[j] = 0;\n+}"}, {"sha": "618854a6a52a7bd9d4e7292da1b217a0295e4452", "filename": "gcc/testsuite/gcc.target/aarch64/mneg-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int r;\n+\n+void test (int a, int b)\n+{\n+  /* { dg-final { scan-assembler \"mneg\\tw\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = (-a) * b;\n+}"}, {"sha": "25f817b9c5ca49ed9d94937f308e37a2c2ae8cfb", "filename": "gcc/testsuite/gcc.target/aarch64/mneg-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int r;\n+\n+void test (int a, int b)\n+{\n+  /* { dg-final { scan-assembler \"mneg\\tw\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = a * (-b);\n+}"}, {"sha": "d9a135465a2f606ac76dcdcb9f3acf0f519d1c13", "filename": "gcc/testsuite/gcc.target/aarch64/mneg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmneg-3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int r;\n+\n+void test (int a, int b)\n+{\n+  /* { dg-final { scan-assembler \"mneg\\tw\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = - (a * b);\n+}"}, {"sha": "b45debbc26786f9a739f67b29e63edcb333aed83", "filename": "gcc/testsuite/gcc.target/aarch64/mnegl-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmnegl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmnegl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmnegl-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long r;\n+\n+void test_signed (int a, int b)\n+{\n+  /* { dg-final { scan-assembler \"smnegl\\tx\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = (-((long long) a)) * ((long long) b);\n+}\n+\n+void test_unsigned (unsigned int a, unsigned int b)\n+{\n+  /* { dg-final { scan-assembler \"umnegl\\tx\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = (-((long long) a)) * ((long long) b);\n+}"}, {"sha": "1c5dc758196ea438cca1c2384732f906c6541b14", "filename": "gcc/testsuite/gcc.target/aarch64/mnegl-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmnegl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmnegl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmnegl-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long r;\n+\n+void test_signed (int a, int b)\n+{\n+  /* { dg-final { scan-assembler \"smnegl\\tx\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = ((long long) a) * (-((long long) b));\n+}\n+\n+void test_unsigned (unsigned int a, unsigned int b)\n+{\n+  /* { dg-final { scan-assembler \"umnegl\\tx\\[0-9\\]*, w\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  r = ((long long) a) * (-((long long) b));\n+}"}, {"sha": "0f23cc9c7b51ddc06915b6b3d41dd0fa362c5d56", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high-intrinsics.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high-intrinsics.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,125 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define TWO(name, rettype, rmwtype, intype, fs) \\\n+  rettype test_ ## name ## _ ## fs \\\n+\t\t(rmwtype a, intype b, intype c) \\\n+\t{ \\\n+\t\treturn name ## _ ## fs (a, b, c); \\\n+\t}\n+\n+TWO (vsubhn_high, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWO (vsubhn_high, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWO (vsubhn_high, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWO (vsubhn_high, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWO (vsubhn_high, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWO (vsubhn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+TWO (vaddhn_high, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWO (vaddhn_high, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWO (vaddhn_high, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWO (vaddhn_high, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWO (vaddhn_high, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWO (vaddhn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+TWO (vrsubhn_high, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWO (vrsubhn_high, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWO (vrsubhn_high, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWO (vrsubhn_high, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWO (vrsubhn_high, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWO (vrsubhn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+TWO (vraddhn_high, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWO (vraddhn_high, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWO (vraddhn_high, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWO (vraddhn_high, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWO (vraddhn_high, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWO (vraddhn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+#define TWOn(name, rettype, rmwtype, intype, fs) \\\n+  rettype test_ ## name ## _ ## fs \\\n+\t\t(rmwtype a, intype b) \\\n+\t{ \\\n+\t\treturn name ## _ ## fs (a, b, 4); \\\n+\t}\n+\n+TWOn (vrshrn_high_n, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWOn (vrshrn_high_n, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWOn (vrshrn_high_n, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWOn (vrshrn_high_n, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWOn (vrshrn_high_n, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWOn (vrshrn_high_n, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+TWOn (vshrn_high_n, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWOn (vshrn_high_n, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWOn (vshrn_high_n, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWOn (vshrn_high_n, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWOn (vshrn_high_n, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWOn (vshrn_high_n, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+TWOn (vqshrun_high_n, uint8x16_t, uint8x8_t, int16x8_t,  s16)\n+TWOn (vqshrun_high_n, uint16x8_t, uint16x4_t, int32x4_t, s32)\n+TWOn (vqshrun_high_n, uint32x4_t, uint32x2_t, int64x2_t, s64)\n+\n+TWOn (vqrshrun_high_n, uint8x16_t, uint8x8_t, int16x8_t,  s16)\n+TWOn (vqrshrun_high_n, uint16x8_t, uint16x4_t, int32x4_t, s32)\n+TWOn (vqrshrun_high_n, uint32x4_t, uint32x2_t, int64x2_t, s64)\n+\n+TWOn (vqshrn_high_n, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWOn (vqshrn_high_n, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWOn (vqshrn_high_n, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWOn (vqshrn_high_n, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWOn (vqshrn_high_n, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWOn (vqshrn_high_n, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+TWOn (vqrshrn_high_n, int8x16_t, int8x8_t, int16x8_t,  s16)\n+TWOn (vqrshrn_high_n, int16x8_t, int16x4_t, int32x4_t, s32)\n+TWOn (vqrshrn_high_n, int32x4_t, int32x2_t, int64x2_t, s64)\n+TWOn (vqrshrn_high_n, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+TWOn (vqrshrn_high_n, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+TWOn (vqrshrn_high_n, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+#define ONE(name, rettype, rmwtype, intype, fs) \\\n+  rettype test_ ## name ## _ ## fs \\\n+\t\t(rmwtype a, intype b) \\\n+\t{ \\\n+\t\treturn name ## _ ## fs (a, b); \\\n+\t}\n+\n+ONE (vqmovn_high, int8x16_t, int8x8_t, int16x8_t,  s16)\n+ONE (vqmovn_high, int16x8_t, int16x4_t, int32x4_t, s32)\n+ONE (vqmovn_high, int32x4_t, int32x2_t, int64x2_t, s64)\n+ONE (vqmovn_high, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+ONE (vqmovn_high, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+ONE (vqmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+ONE (vqmovun_high, uint8x16_t, uint8x8_t, int16x8_t,  s16)\n+ONE (vqmovun_high, uint16x8_t, uint16x4_t, int32x4_t, s32)\n+ONE (vqmovun_high, uint32x4_t, uint32x2_t, int64x2_t, s64)\n+\n+ONE (vmovn_high, int8x16_t, int8x8_t, int16x8_t,  s16)\n+ONE (vmovn_high, int16x8_t, int16x4_t, int32x4_t, s32)\n+ONE (vmovn_high, int32x4_t, int32x2_t, int64x2_t, s64)\n+ONE (vmovn_high, uint8x16_t, uint8x8_t, uint16x8_t,  u16)\n+ONE (vmovn_high, uint16x8_t, uint16x4_t, uint32x4_t, u32)\n+ONE (vmovn_high, uint32x4_t, uint32x2_t, uint64x2_t, u64)\n+\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsubhn2 v\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\taddhn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"rsubhn2 v\" 6} }  */\n+/* { dg-final { scan-assembler-times \"raddhn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trshrn2 v\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tshrn2 v\" 6} }  */\n+/* { dg-final { scan-assembler-times \"sqshrun2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqrshrun2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqshrn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"uqshrn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqrshrn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"uqrshrn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"uqxtn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqxtn2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"sqxtun2 v\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\txtn2 v\" 6} }  */"}, {"sha": "3109d9d4e9a8ee62099d208b9b5cf39e848a2fb8", "filename": "gcc/testsuite/gcc.target/aarch64/pic-constantpool1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-constantpool1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-constantpool1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-constantpool1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-options \"-O2 -mcmodel=small -fPIC\" }  */\n+/* { dg-do compile } */\n+\n+extern int __finite (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));\n+int\n+__ecvt_r (value, ndigit, decpt, sign, buf, len)\n+     double value;\n+     int ndigit, *decpt, *sign;\n+     char *buf;\n+{\n+  if ((sizeof (value) == sizeof (float) ? __finitef (value) : __finite (value)) && value != 0.0)\n+    {\n+      double d;\n+      double f = 1.0;\n+      d = -value;\n+      if (d < 1.0e-307)\n+\t{\n+\t  do\n+\t    {\n+\t      f *= 10.0;\n+\t    }\n+\t  while (d * f < 1.0);\n+\t}\n+    }\n+  if (ndigit <= 0 && len > 0)\n+    {\n+      buf[0] = '\\0';\n+      *sign = (sizeof (value) == sizeof (float) ? __finitef (value) : __finite (value)) ? (sizeof (value) == sizeof (float) ? __signbitf (value) : __signbit (value)) != 0 : 0;\n+    }\n+}"}, {"sha": "f277a5285783959ec5c156dba50f02b6295eeda8", "filename": "gcc/testsuite/gcc.target/aarch64/pic-symrefplus.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-symrefplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-symrefplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-symrefplus.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-options \"-O2 -mcmodel=small -fPIC -fno-builtin\" }  */\n+/* { dg-do compile } */\n+\n+typedef long unsigned int size_t;\n+enum\n+{\n+  __LC_TIME = 2,\n+};\n+enum\n+{\n+  ABDAY_1 = (((__LC_TIME) << 16) | (0)),\n+  DAY_1,\n+  ABMON_1,\n+  MON_1,\n+  D_T_FMT,\n+};\n+typedef struct __locale_struct\n+{\n+  struct locale_data *__locales[13];\n+} *__locale_t;\n+struct tm\n+{\n+  int tm_sec;\n+  int tm_min;\n+  int tm_hour;\n+};\n+struct locale_data\n+{\n+  const char *name;\n+  struct\n+  {\n+    const char *string;\n+  }\n+  values [];\n+};\n+extern const struct locale_data _nl_C_LC_TIME __attribute__ ((visibility (\"hidden\")));\n+char *\n+__strptime_internal (rp, fmt, tmp, statep , locale)\n+     const char *rp;\n+     const char *fmt;\n+     __locale_t locale;\n+     void *statep;\n+{\n+  struct locale_data *const current = locale->__locales[__LC_TIME];\n+  const char *rp_backup;\n+  const char *rp_longest;\n+  int cnt;\n+  size_t val;\n+  enum ptime_locale_status { not, loc, raw } decided_longest;\n+  struct __strptime_state\n+  {\n+    enum ptime_locale_status decided : 2;\n+  } s;\n+  struct tm tmb;\n+  struct tm *tm;\n+  if (statep == ((void *)0))\n+    {\n+      memset (&s, 0, sizeof (s));\n+    }\n+    {\n+      tm = &tmb;\n+    }\n+  while (*fmt != '\\0')\n+    {\n+      if (*fmt != '%')\n+ {\n+   if (*fmt++ != *rp++) return ((void *)0);\n+   continue;\n+ }\n+      if (statep != ((void *)0))\n+ {\n+     ++fmt;\n+ }\n+      rp_backup = rp;\n+      switch (*fmt++)\n+ {\n+ case '%':\n+   for (cnt = 0; cnt < 7; ++cnt)\n+     {\n+       const char *trp;\n+       if (s.decided !=raw)\n+  {\n+    if (({ size_t len = strlen ((current->values[((int) (DAY_1 + cnt) & 0xffff)].string)); int result = __strncasecmp_l (((current->values[((int) (DAY_1 + cnt) & 0xffff)].string)), (trp), len, locale) == 0; if (result) (trp) += len; result; })\n+        && trp > rp_longest)\n+      {\n+      }\n+    if (({ size_t len = strlen ((current->values[((int) (ABDAY_1 + cnt) & 0xffff)].string)); int result = __strncasecmp_l (((current->values[((int) (ABDAY_1 + cnt) & 0xffff)].string)), (trp), len, locale) == 0; if (result) (trp) += len; result; })\n+        && trp > rp_longest)\n+      {\n+      }\n+  }\n+       if (s.decided != loc\n+    && (((trp = rp, ({ size_t len = strlen ((&_nl_C_LC_TIME.values[((int) (DAY_1) & 0xffff)].string)[cnt]); int result = __strncasecmp_l (((&_nl_C_LC_TIME.values[((int) (DAY_1) & 0xffff)].string)[cnt]), (trp), len, locale) == 0; if (result) (trp) += len; result; }))\n+         && trp > rp_longest)\n+        || ((trp = rp, ({ size_t len = strlen ((&_nl_C_LC_TIME.values[((int) (ABDAY_1) & 0xffff)].string)[cnt]); int result = __strncasecmp_l (((&_nl_C_LC_TIME.values[((int) (ABDAY_1) & 0xffff)].string)[cnt]), (rp), len, locale) == 0; if (result) (rp) += len; result; }))\n+     && trp > rp_longest)))\n+  {\n+  }\n+     }\n+     {\n+       const char *trp;\n+       if (s.decided != loc\n+    && (((trp = rp, ({ size_t len = strlen ((&_nl_C_LC_TIME.values[((int) (MON_1) & 0xffff)].string)[cnt]); int result = __strncasecmp_l (((&_nl_C_LC_TIME.values[((int) (MON_1) & 0xffff)].string)[cnt]), (trp), len, locale) == 0; if (result) (trp) += len; result; }))\n+         && trp > rp_longest)\n+        || ((trp = rp, ({ size_t len = strlen ((&_nl_C_LC_TIME.values[((int) (ABMON_1) & 0xffff)].string)[cnt]); int result = __strncasecmp_l (((&_nl_C_LC_TIME.values[((int) (ABMON_1) & 0xffff)].string)[cnt]), (trp), len, locale) == 0; if (result) (trp) += len; result; }))\n+     && trp > rp_longest)))\n+  {\n+  }\n+     }\n+ case 'c':\n+     {\n+       if (!(*((current->values[((int) (D_T_FMT) & 0xffff)].string)) != '\\0' && (rp = __strptime_internal (rp, ((current->values[((int) (D_T_FMT) & 0xffff)].string)), tm, &s , locale)) != ((void *)0)))\n+  {\n+      rp = rp_backup;\n+  }\n+     }\n+ case 'C':\n+   do { int __n = 2; val = 0; while (*rp == ' ') ++rp; if (*rp < '0' || *rp > '9') return ((void *)0); do { val *= 10; val += *rp++ - '0'; } while (--__n > 0 && val * 10 <= 99 && *rp >= '0' && *rp <= '9'); if (val < 0 || val > 99) return ((void *)0); } while (0);\n+ case 'F':\n+   if (!(*(\"%Y-%m-%d\") != '\\0' && (rp = __strptime_internal (rp, (\"%Y-%m-%d\"), tm, &s , locale)) != ((void *)0)))\n+   tm->tm_hour = val % 12;\n+ }\n+    }\n+}\n+char *\n+__strptime_l (buf, format, tm , locale)\n+{\n+}"}, {"sha": "0d7d4da47ade416a05c7a62f48e49c6bd43a3622", "filename": "gcc/testsuite/gcc.target/aarch64/predefine_large.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_large.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_large.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_large.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-skip-if \"Code model already defined\" { aarch64_tiny || aarch64_small } } */\n+\n+#ifdef __AARCH64_CMODEL_LARGE__\n+  int dummy;\n+#else\n+  #error\n+#endif"}, {"sha": "b1362845cf51020190ad9227c4ada530a2678e6b", "filename": "gcc/testsuite/gcc.target/aarch64/predefine_small.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_small.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-skip-if \"Code model already defined\" { aarch64_tiny || aarch64_large } } */\n+\n+#ifdef __AARCH64_CMODEL_SMALL__\n+  int dummy;\n+#else\n+  #error\n+#endif"}, {"sha": "d2c844bacd00156f77f16fe1beef2a460312bbe9", "filename": "gcc/testsuite/gcc.target/aarch64/predefine_tiny.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_tiny.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_tiny.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpredefine_tiny.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-skip-if \"Code model already defined\" { aarch64_small || aarch64_large } } */\n+\n+#ifdef __AARCH64_CMODEL_TINY__\n+  int dummy;\n+#else\n+  #error\n+#endif"}, {"sha": "b44e56023af242e6410f49c36415cb546c919102", "filename": "gcc/testsuite/gcc.target/aarch64/reload-valid-spoff.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freload-valid-spoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freload-valid-spoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freload-valid-spoff.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcmodel=large -fno-builtin\" }  */\n+/* { dg-skip-if \"-mcmodel=large -fPIC not currently supported\" { aarch64-*-* }  { \"-fPIC\" } { \"\" } } */\n+\n+typedef long unsigned int size_t;\n+typedef unsigned short int sa_family_t;\n+\n+struct sockaddr\n+{\n+  sa_family_t sa_family;\n+  char sa_data[14];\n+};\n+struct arpreq\n+{\n+  int arp_flags;\n+  struct sockaddr arp_netmask;\n+};\n+typedef struct _IO_FILE FILE;\n+extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream);\n+extern struct _IO_FILE *stderr;\n+extern int optind;\n+struct aftype {\n+  int (*input) (int type, char *bufp, struct sockaddr *);\n+};\n+struct aftype *ap;\n+static int arp_set(char **args)\n+{\n+  char host[128];\n+  struct arpreq req;\n+  struct sockaddr sa;\n+  memset((char *) &req, 0, sizeof(req));\n+  if (*args == ((void *)0)) {\n+    fprintf(stderr, (\"arp: need host name\\n\"));\n+  }\n+  safe_strncpy(host, *args++, (sizeof host));\n+  if (ap->input(0, host, &sa) < 0) {\n+  }\n+  while (*args != ((void *)0)) {\n+    if (!__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (*args) && __builtin_constant_p (\"netmask\") && (__s1_len = strlen (*args), __s2_len = strlen (\"netmask\"), (!((size_t)(const void *)((*args) + 1) - (size_t)(const void *)(*args) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"netmask\") + 1) - (size_t)(const void *)(\"netmask\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (*args, \"netmask\") : (__builtin_constant_p (*args) && ((size_t)(const void *)((*args) + 1) - (size_t)(const void *)(*args) == 1) && (__s1_len = strlen (*args), __s1_len < 4) ? (__builtin_constant_p (\"netmask\") && ((size_t)(const void *)((\"netmask\") + 1) - (size_t)(const void *)(\"netmask\") == 1) ? __builtin_strcmp (*args, \"netmask\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"netmask\"); register int __result = (((__const unsigned char *) (__const char *) (*args))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (*args))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (*args))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (*args))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"netmask\") && ((size_t)(const void *)((\"netmask\") + 1) - (size_t)(const void *)(\"netmask\") == 1) && (__s2_len = strlen (\"netmask\"), __s2_len < 4) ? (__builtin_constant_p (*args) && ((size_t)(const void *)((*args) + 1) - (size_t)(const void *)(*args) == 1) ? __builtin_strcmp (*args, \"netmask\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (*args); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"netmask\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"netmask\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"netmask\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"netmask\"))[3]); } } __result; }))) : __builtin_strcmp (*args, \"netmask\")))); })) {\n+      if (__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (*args) && __builtin_constant_p (\"255.255.255.255\") && (__s1_len = strlen (*args), __s2_len = strlen (\"255.255.255.255\"), (!((size_t)(const void *)((*args) + 1) - (size_t)(const void *)(*args) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((\"255.255.255.255\") + 1) - (size_t)(const void *)(\"255.255.255.255\") == 1) || __s2_len >= 4)) ? __builtin_strcmp (*args, \"255.255.255.255\") : (__builtin_constant_p (*args) && ((size_t)(const void *)((*args) + 1) - (size_t)(const void *)(*args) == 1) && (__s1_len = strlen (*args), __s1_len < 4) ? (__builtin_constant_p (\"255.255.255.255\") && ((size_t)(const void *)((\"255.255.255.255\") + 1) - (size_t)(const void *)(\"255.255.255.255\") == 1) ? __builtin_strcmp (*args, \"255.255.255.255\") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) (\"255.255.255.255\"); register int __result = (((__const unsigned char *) (__const char *) (*args))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (*args))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (*args))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (*args))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (\"255.255.255.255\") && ((size_t)(const void *)((\"255.255.255.255\") + 1) - (size_t)(const void *)(\"255.255.255.255\") == 1) && (__s2_len = strlen (\"255.255.255.255\"), __s2_len < 4) ? (__builtin_constant_p (*args) && ((size_t)(const void *)((*args) + 1) - (size_t)(const void *)(*args) == 1) ? __builtin_strcmp (*args, \"255.255.255.255\") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (*args); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) (\"255.255.255.255\"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) (\"255.255.255.255\"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) (\"255.255.255.255\"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) (\"255.255.255.255\"))[3]); } } __result; }))) : __builtin_strcmp (*args, \"255.255.255.255\")))); }) != 0) {\n+\tmemcpy((char *) &req.arp_netmask, (char *) &sa,\n+\t       sizeof(struct sockaddr));\n+      }\n+    }\n+  }\n+}\n+static int arp_file(char *name)\n+{\n+  char buff[1024];\n+  char *sp, *args[32];\n+  int linenr, argc;\n+  FILE *fp;\n+  while (fgets(buff, sizeof(buff), fp) != (char *) ((void *)0)) {\n+    if (arp_set(args) != 0)\n+      fprintf(stderr, (\"arp: cannot set entry on line %u on line %u of etherfile %s !\\n\"),\n+\t      linenr, name);\n+  }\n+}\n+int main(int argc, char **argv)\n+{\n+  int i, lop, what;\n+  switch (what) {\n+  case 0:\n+    what = arp_file(argv[optind] ? argv[optind] : \"/etc/ethers\");\n+  }\n+}"}, {"sha": "1b853084328e6d7a4e5af9826f860085ac7aa8b9", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "added", "additions": 1181, "deletions": 0, "changes": 1181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,1181 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"../../../config/aarch64/arm_neon.h\"\n+\n+/* { dg-final { scan-assembler-times \"\\\\tadd\\\\tx\\[0-9\\]+\" 2 } } */\n+\n+uint64x1_t\n+test_vaddd_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vaddd_u64 (a, b);\n+}\n+\n+int64x1_t\n+test_vaddd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vaddd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tadd\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vaddd_s64_2 (int64x1_t a, int64x1_t b, int64x1_t c, int64x1_t d)\n+{\n+  return vqaddd_s64 (vaddd_s64 (vqaddd_s64 (a, b), vqaddd_s64 (c, d)),\n+\t\t     vqaddd_s64 (a, d));\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmeq\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vceqd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vceqd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmeq\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+\n+uint64x1_t\n+test_vceqzd_s64 (int64x1_t a)\n+{\n+  return vceqzd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmge\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+\n+uint64x1_t\n+test_vcged_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vcged_s64 (a, b);\n+}\n+\n+uint64x1_t\n+test_vcled_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vcled_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmge\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+\n+uint64x1_t\n+test_vcgezd_s64 (int64x1_t a)\n+{\n+  return vcgezd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmhs\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vcged_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vcged_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmgt\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+\n+uint64x1_t\n+test_vcgtd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vcgtd_s64 (a, b);\n+}\n+\n+uint64x1_t\n+test_vcltd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vcltd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmgt\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+\n+uint64x1_t\n+test_vcgtzd_s64 (int64x1_t a)\n+{\n+  return vcgtzd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmhi\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vcgtd_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vcgtd_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmle\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+\n+uint64x1_t\n+test_vclezd_s64 (int64x1_t a)\n+{\n+  return vclezd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmlt\\\\td\\[0-9\\]+, d\\[0-9\\]+, #?0\" 1 } } */\n+\n+uint64x1_t\n+test_vcltzd_s64 (int64x1_t a)\n+{\n+  return vcltzd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tdup\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.b\" 2 } } */\n+\n+int8x1_t\n+test_vdupb_lane_s8 (int8x16_t a)\n+{\n+  return vdupb_lane_s8 (a, 2);\n+}\n+\n+uint8x1_t\n+test_vdupb_lane_u8 (uint8x16_t a)\n+{\n+  return vdupb_lane_u8 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tdup\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.h\" 2 } } */\n+\n+int16x1_t\n+test_vduph_lane_s16 (int16x8_t a)\n+{\n+  return vduph_lane_s16 (a, 2);\n+}\n+\n+uint16x1_t\n+test_vduph_lane_u16 (uint16x8_t a)\n+{\n+  return vduph_lane_u16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tdup\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.s\" 2 } } */\n+\n+int32x1_t\n+test_vdups_lane_s32 (int32x4_t a)\n+{\n+  return vdups_lane_s32 (a, 2);\n+}\n+\n+uint32x1_t\n+test_vdups_lane_u32 (uint32x4_t a)\n+{\n+  return vdups_lane_u32 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tdup\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.d\" 2 } } */\n+\n+int64x1_t\n+test_vdupd_lane_s64 (int64x2_t a)\n+{\n+  return vdupd_lane_s64 (a, 2);\n+}\n+\n+uint64x1_t\n+test_vdupd_lane_u64 (uint64x2_t a)\n+{\n+  return vdupd_lane_u64 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tcmtst\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+\n+int64x1_t\n+test_vtst_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vtstd_s64 (a, b);\n+}\n+\n+uint64x1_t\n+test_vtst_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vtstd_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+\n+test_vpaddd_s64 (int64x2_t a)\n+{\n+  return vpaddd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vqaddd_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vqaddd_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vqadds_u32 (uint32x1_t a, uint32x1_t b)\n+{\n+  return vqadds_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vqaddh_u16 (uint16x1_t a, uint16x1_t b)\n+{\n+  return vqaddh_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vqaddb_u8 (uint8x1_t a, uint8x1_t b)\n+{\n+  return vqaddb_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\td\\[0-9\\]+\" 5 } } */\n+\n+int64x1_t\n+test_vqaddd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vqaddd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqadds_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqadds_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\th\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqaddh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqaddh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\tb\\[0-9\\]+, b\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqaddb_s8 (int8x1_t a, int8x1_t b)\n+{\n+  return vqaddb_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqdmlalh_s16 (int32x1_t a, int16x1_t b, int16x1_t c)\n+{\n+  return vqdmlalh_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n+\n+int32x1_t\n+test_vqdmlalh_lane_s16 (int32x1_t a, int16x1_t b, int16x8_t c)\n+{\n+  return vqdmlalh_lane_s16 (a, b, c, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\td\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vqdmlals_s32 (int64x1_t a, int32x1_t b, int32x1_t c)\n+{\n+  return vqdmlals_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n+\n+int64x1_t\n+test_vqdmlals_lane_s32 (int64x1_t a, int32x1_t b, int32x4_t c)\n+{\n+  return vqdmlals_lane_s32 (a, b, c, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqdmlslh_s16 (int32x1_t a, int16x1_t b, int16x1_t c)\n+{\n+  return vqdmlslh_s16 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n+\n+int32x1_t\n+test_vqdmlslh_lane_s16 (int32x1_t a, int16x1_t b, int16x8_t c)\n+{\n+  return vqdmlslh_lane_s16 (a, b, c, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\td\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vqdmlsls_s32 (int64x1_t a, int32x1_t b, int32x1_t c)\n+{\n+  return vqdmlsls_s32 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n+\n+int64x1_t\n+test_vqdmlsls_lane_s32 (int64x1_t a, int32x1_t b, int32x4_t c)\n+{\n+  return vqdmlsls_lane_s32 (a, b, c, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqdmulhh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqdmulhh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n+\n+int16x1_t\n+test_vqdmulhh_lane_s16 (int16x1_t a, int16x8_t b)\n+{\n+  return vqdmulhh_lane_s16 (a, b, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqdmulhs_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqdmulhs_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n+\n+int32x1_t\n+test_vqdmulhs_lane_s32 (int32x1_t a, int32x4_t b)\n+{\n+  return vqdmulhs_lane_s32 (a, b, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqdmullh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqdmullh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n+\n+int32x1_t\n+test_vqdmullh_lane_s16 (int16x1_t a, int16x8_t b)\n+{\n+  return vqdmullh_lane_s16 (a, b, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\td\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vqdmulls_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqdmulls_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n+\n+int64x1_t\n+test_vqdmulls_lane_s32 (int32x1_t a, int32x4_t b)\n+{\n+  return vqdmulls_lane_s32 (a, b, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqrdmulhh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqrdmulhh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n+\n+int16x1_t\n+test_vqrdmulhh_lane_s16 (int16x1_t a, int16x8_t b)\n+{\n+  return vqrdmulhh_lane_s16 (a, b, 6);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqrdmulhs_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqrdmulhs_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n+\n+int32x1_t\n+test_vqrdmulhs_lane_s32 (int32x1_t a, int32x4_t b)\n+{\n+  return vqrdmulhs_lane_s32 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vuqaddb_s8 (int8x1_t a, int8x1_t b)\n+{\n+  return vuqaddb_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vuqaddh_s16 (int16x1_t a, int8x1_t b)\n+{\n+  return vuqaddh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vuqadds_s32 (int32x1_t a, int8x1_t b)\n+{\n+  return vuqadds_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vuqaddd_s64 (int64x1_t a, int8x1_t b)\n+{\n+  return vuqaddd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vsqaddb_u8 (uint8x1_t a, int8x1_t b)\n+{\n+  return vsqaddb_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vsqaddh_u16 (uint16x1_t a, int8x1_t b)\n+{\n+  return vsqaddh_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vsqadds_u32 (uint32x1_t a, int8x1_t b)\n+{\n+  return vsqadds_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vsqaddd_u64 (uint64x1_t a, int8x1_t b)\n+{\n+  return vsqaddd_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqabs\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqabsb_s8 (int8x1_t a)\n+{\n+  return vqabsb_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqabs\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqabsh_s16 (int16x1_t a)\n+{\n+  return vqabsh_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqabs\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqabss_s32 (int32x1_t a)\n+{\n+  return vqabss_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqneg\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqnegb_s8 (int8x1_t a)\n+{\n+  return vqnegb_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqneg\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqnegh_s16 (int16x1_t a)\n+{\n+  return vqnegh_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqneg\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqnegs_s32 (int32x1_t a)\n+{\n+  return vqnegs_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqmovunh_s16 (int16x1_t a)\n+{\n+  return vqmovunh_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqmovuns_s32 (int32x1_t a)\n+{\n+  return vqmovuns_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqmovund_s64 (int64x1_t a)\n+{\n+  return vqmovund_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqmovnh_s16 (int16x1_t a)\n+{\n+  return vqmovnh_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqmovns_s32 (int32x1_t a)\n+{\n+  return vqmovns_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqmovnd_s64 (int64x1_t a)\n+{\n+  return vqmovnd_s64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vqmovnh_u16 (uint16x1_t a)\n+{\n+  return vqmovnh_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vqmovns_u32 (uint32x1_t a)\n+{\n+  return vqmovns_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vqmovnd_u64 (uint64x1_t a)\n+{\n+  return vqmovnd_u64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsub\\\\tx\\[0-9\\]+\" 2 } } */\n+\n+uint64x1_t\n+test_vsubd_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vsubd_u64 (a, b);\n+}\n+\n+int64x1_t\n+test_vsubd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vsubd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsub\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vsubd_s64_2 (int64x1_t a, int64x1_t b, int64x1_t c, int64x1_t d)\n+{\n+  return vqsubd_s64 (vsubd_s64 (vqsubd_s64 (a, b), vqsubd_s64 (c, d)),\n+\t\t     vqsubd_s64 (a, d));\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vqsubd_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vqsubd_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vqsubs_u32 (uint32x1_t a, uint32x1_t b)\n+{\n+  return vqsubs_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vqsubh_u16 (uint16x1_t a, uint16x1_t b)\n+{\n+  return vqsubh_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vqsubb_u8 (uint8x1_t a, uint8x1_t b)\n+{\n+  return vqsubb_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\td\\[0-9\\]+\" 5 } } */\n+\n+int64x1_t\n+test_vqsubd_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vqsubd_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqsubs_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqsubs_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqsubh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqsubh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqsubb_s8 (int8x1_t a, int8x1_t b)\n+{\n+  return vqsubb_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshl\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vshld_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vshld_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushl\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vshld_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vshld_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsrshl\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vrshld_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vrshld_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\turshl\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vrshld_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vrshld_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tasr\\\\tx\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vshrd_n_s64 (int64x1_t a)\n+{\n+  return vshrd_n_s64 (a, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tlsr\\\\tx\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vshrd_n_u64 (uint64x1_t a)\n+{\n+  return vshrd_n_u64 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tssra\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vsrad_n_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vsrad_n_s64 (a, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tusra\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vsrad_n_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vsrad_n_u64 (a, b, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsrshr\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vrshrd_n_s64 (int64x1_t a)\n+{\n+  return vrshrd_n_s64 (a, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\turshr\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vrshrd_n_u64 (uint64x1_t a)\n+{\n+  return vrshrd_n_u64 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsrsra\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vrsrad_n_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vrsrad_n_s64 (a, b, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsrsra\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vrsrad_n_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vrsrad_n_u64 (a, b, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqrshlb_s8 (int8x1_t a, int8x1_t b)\n+{\n+  return vqrshlb_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqrshlh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqrshlh_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqrshls_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqrshls_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vqrshld_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vqrshld_s64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vqrshlb_u8 (uint8x1_t a, uint8x1_t b)\n+{\n+  return vqrshlb_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vqrshlh_u16 (uint16x1_t a, uint16x1_t b)\n+{\n+  return vqrshlh_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vqrshls_u32 (uint32x1_t a, uint32x1_t b)\n+{\n+  return vqrshls_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\td\\[0-9\\]+\" 1 } } */\n+\n+uint64x1_t\n+test_vqrshld_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vqrshld_u64 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqshlub_n_s8 (int8x1_t a)\n+{\n+  return vqshlub_n_s8 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqshluh_n_s16 (int16x1_t a)\n+{\n+  return vqshluh_n_s16 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqshlus_n_s32 (int32x1_t a)\n+{\n+  return vqshlus_n_s32 (a, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\td\\[0-9\\]+\" 1 } } */\n+\n+int64x1_t\n+test_vqshlud_n_s64 (int64x1_t a)\n+{\n+  return vqshlud_n_s64 (a, 6);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\tb\\[0-9\\]+\" 2 } } */\n+\n+int8x1_t\n+test_vqshlb_s8 (int8x1_t a, int8x1_t b)\n+{\n+  return vqshlb_s8 (a, b);\n+}\n+\n+int8x1_t\n+test_vqshlb_n_s8 (int8x1_t a)\n+{\n+  return vqshlb_n_s8 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\th\\[0-9\\]+\" 2 } } */\n+\n+int16x1_t\n+test_vqshlh_s16 (int16x1_t a, int16x1_t b)\n+{\n+  return vqshlh_s16 (a, b);\n+}\n+\n+int16x1_t\n+test_vqshlh_n_s16 (int16x1_t a)\n+{\n+  return vqshlh_n_s16 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\ts\\[0-9\\]+\" 2 } } */\n+\n+int32x1_t\n+test_vqshls_s32 (int32x1_t a, int32x1_t b)\n+{\n+  return vqshls_s32 (a, b);\n+}\n+\n+int32x1_t\n+test_vqshls_n_s32 (int32x1_t a)\n+{\n+  return vqshls_n_s32 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\td\\[0-9\\]+\" 2 } } */\n+\n+int64x1_t\n+test_vqshld_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vqshld_s64 (a, b);\n+}\n+\n+int64x1_t\n+test_vqshld_n_s64 (int64x1_t a)\n+{\n+  return vqshld_n_s64 (a, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\tb\\[0-9\\]+\" 2 } } */\n+\n+uint8x1_t\n+test_vqshlb_u8 (uint8x1_t a, uint8x1_t b)\n+{\n+  return vqshlb_u8 (a, b);\n+}\n+\n+uint8x1_t\n+test_vqshlb_n_u8 (uint8x1_t a)\n+{\n+  return vqshlb_n_u8 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\th\\[0-9\\]+\" 2 } } */\n+\n+uint16x1_t\n+test_vqshlh_u16 (uint16x1_t a, uint16x1_t b)\n+{\n+  return vqshlh_u16 (a, b);\n+}\n+\n+uint16x1_t\n+test_vqshlh_n_u16 (uint16x1_t a)\n+{\n+  return vqshlh_n_u16 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\ts\\[0-9\\]+\" 2 } } */\n+\n+uint32x1_t\n+test_vqshls_u32 (uint32x1_t a, uint32x1_t b)\n+{\n+  return vqshls_u32 (a, b);\n+}\n+\n+uint32x1_t\n+test_vqshls_n_u32 (uint32x1_t a)\n+{\n+  return vqshls_n_u32 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\td\\[0-9\\]+\" 2 } } */\n+\n+uint64x1_t\n+test_vqshld_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vqshld_u64 (a, b);\n+}\n+\n+uint64x1_t\n+test_vqshld_n_u64 (uint64x1_t a)\n+{\n+  return vqshld_n_u64 (a, 5);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqshrunh_n_s16 (int16x1_t a)\n+{\n+  return vqshrunh_n_s16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqshruns_n_s32 (int32x1_t a)\n+{\n+  return vqshruns_n_s32 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqshrund_n_s64 (int64x1_t a)\n+{\n+  return vqshrund_n_s64 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqrshrunh_n_s16 (int16x1_t a)\n+{\n+  return vqrshrunh_n_s16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqrshruns_n_s32 (int32x1_t a)\n+{\n+  return vqrshruns_n_s32 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqrshrund_n_s64 (int64x1_t a)\n+{\n+  return vqrshrund_n_s64 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqshrnh_n_s16 (int16x1_t a)\n+{\n+  return vqshrnh_n_s16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqshrns_n_s32 (int32x1_t a)\n+{\n+  return vqshrns_n_s32 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqshrnd_n_s64 (int64x1_t a)\n+{\n+  return vqshrnd_n_s64 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vqshrnh_n_u16 (uint16x1_t a)\n+{\n+  return vqshrnh_n_u16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vqshrns_n_u32 (uint32x1_t a)\n+{\n+  return vqshrns_n_u32 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vqshrnd_n_u64 (uint64x1_t a)\n+{\n+  return vqshrnd_n_u64 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+int8x1_t\n+test_vqrshrnh_n_s16 (int16x1_t a)\n+{\n+  return vqrshrnh_n_s16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\th\\[0-9\\]+\" 1 } } */\n+\n+int16x1_t\n+test_vqrshrns_n_s32 (int32x1_t a)\n+{\n+  return vqrshrns_n_s32 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+int32x1_t\n+test_vqrshrnd_n_s64 (int64x1_t a)\n+{\n+  return vqrshrnd_n_s64 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\tb\\[0-9\\]+\" 1 } } */\n+\n+uint8x1_t\n+test_vqrshrnh_n_u16 (uint16x1_t a)\n+{\n+  return vqrshrnh_n_u16 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\th\\[0-9\\]+\" 1 } } */\n+\n+uint16x1_t\n+test_vqrshrns_n_u32 (uint32x1_t a)\n+{\n+  return vqrshrns_n_u32 (a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\ts\\[0-9\\]+\" 1 } } */\n+\n+uint32x1_t\n+test_vqrshrnd_n_u64 (uint64x1_t a)\n+{\n+  return vqrshrnd_n_u64 (a, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tlsl\\\\tx\\[0-9\\]+\" 2 } } */\n+\n+int64x1_t\n+test_vshl_n_s64 (int64x1_t a)\n+{\n+  return vshld_n_s64 (a, 9);\n+}\n+\n+uint64x1_t\n+test_vshl_n_u64 (uint64x1_t a)\n+{\n+  return vshld_n_u64 (a, 9);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsli\\\\td\\[0-9\\]+\" 2 } } */\n+\n+int64x1_t\n+test_vsli_n_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vslid_n_s64 (a, b, 9);\n+}\n+\n+uint64x1_t\n+test_vsli_n_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vslid_n_u64 (a, b, 9);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsri\\\\td\\[0-9\\]+\" 2 } } */\n+\n+int64x1_t\n+test_vsri_n_s64 (int64x1_t a, int64x1_t b)\n+{\n+  return vsrid_n_s64 (a, b, 9);\n+}\n+\n+uint64x1_t\n+test_vsri_n_u64 (uint64x1_t a, uint64x1_t b)\n+{\n+  return vsrid_n_u64 (a, b, 9);\n+}"}, {"sha": "5d53abe8d10a0dfc6c002f4bc32bdcee8e2ecf53", "filename": "gcc/testsuite/gcc.target/aarch64/table-intrinsics.c", "status": "added", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftable-intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftable-intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftable-intrinsics.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,439 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int8x8_t\n+tbl_tests8_ (int8x8_t tab, int8x8_t idx)\n+{\n+  return vtbl1_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+tbl_testu8_ (uint8x8_t tab, uint8x8_t idx)\n+{\n+  return vtbl1_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+tbl_testp8_ (poly8x8_t tab, uint8x8_t idx)\n+{\n+  return vtbl1_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+tbl_tests8_2 (int8x8x2_t tab, int8x8_t idx)\n+{\n+  return vtbl2_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+tbl_testu8_2 (uint8x8x2_t tab, uint8x8_t idx)\n+{\n+  return vtbl2_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+tbl_testp8_2 (poly8x8x2_t tab, uint8x8_t idx)\n+{\n+  return vtbl2_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+tbl_tests8_3 (int8x8x3_t tab, int8x8_t idx)\n+{\n+  return vtbl3_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+tbl_testu8_3 (uint8x8x3_t tab, uint8x8_t idx)\n+{\n+  return vtbl3_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+tbl_testp8_3 (poly8x8x3_t tab, uint8x8_t idx)\n+{\n+  return vtbl3_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+tbl_tests8_4 (int8x8x4_t tab, int8x8_t idx)\n+{\n+  return vtbl4_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+tbl_testu8_4 (uint8x8x4_t tab, uint8x8_t idx)\n+{\n+  return vtbl4_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+tbl_testp8_4 (poly8x8x4_t tab, uint8x8_t idx)\n+{\n+  return vtbl4_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+tb_tests8_ (int8x8_t r, int8x8_t tab, int8x8_t idx)\n+{\n+  return vtbx1_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+tb_testu8_ (uint8x8_t r, uint8x8_t tab, uint8x8_t idx)\n+{\n+  return vtbx1_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+tb_testp8_ (poly8x8_t r, poly8x8_t tab, uint8x8_t idx)\n+{\n+  return vtbx1_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+tb_tests8_2 (int8x8_t r, int8x8x2_t tab, int8x8_t idx)\n+{\n+  return vtbx2_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+tb_testu8_2 (uint8x8_t r, uint8x8x2_t tab, uint8x8_t idx)\n+{\n+  return vtbx2_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+tb_testp8_2 (poly8x8_t r, poly8x8x2_t tab, uint8x8_t idx)\n+{\n+  return vtbx2_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+tb_tests8_3 (int8x8_t r, int8x8x3_t tab, int8x8_t idx)\n+{\n+  return vtbx3_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+tb_testu8_3 (uint8x8_t r, uint8x8x3_t tab, uint8x8_t idx)\n+{\n+  return vtbx3_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+tb_testp8_3 (poly8x8_t r, poly8x8x3_t tab, uint8x8_t idx)\n+{\n+  return vtbx3_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+tb_tests8_4 (int8x8_t r, int8x8x4_t tab, int8x8_t idx)\n+{\n+  return vtbx4_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+tb_testu8_4 (uint8x8_t r, uint8x8x4_t tab, uint8x8_t idx)\n+{\n+  return vtbx4_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+tb_testp8_4 (poly8x8_t r, poly8x8x4_t tab, uint8x8_t idx)\n+{\n+  return vtbx4_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+qtbl_tests8_ (int8x16_t tab, int8x8_t idx)\n+{\n+  return vqtbl1_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+qtbl_testu8_ (uint8x16_t tab, uint8x8_t idx)\n+{\n+  return vqtbl1_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+qtbl_testp8_ (poly8x16_t tab, uint8x8_t idx)\n+{\n+  return vqtbl1_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+qtbl_tests8_2 (int8x16x2_t tab, int8x8_t idx)\n+{\n+  return vqtbl2_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+qtbl_testu8_2 (uint8x16x2_t tab, uint8x8_t idx)\n+{\n+  return vqtbl2_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+qtbl_testp8_2 (poly8x16x2_t tab, uint8x8_t idx)\n+{\n+  return vqtbl2_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+qtbl_tests8_3 (int8x16x3_t tab, int8x8_t idx)\n+{\n+  return vqtbl3_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+qtbl_testu8_3 (uint8x16x3_t tab, uint8x8_t idx)\n+{\n+  return vqtbl3_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+qtbl_testp8_3 (poly8x16x3_t tab, uint8x8_t idx)\n+{\n+  return vqtbl3_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+qtbl_tests8_4 (int8x16x4_t tab, int8x8_t idx)\n+{\n+  return vqtbl4_s8 (tab, idx);\n+}\n+\n+uint8x8_t\n+qtbl_testu8_4 (uint8x16x4_t tab, uint8x8_t idx)\n+{\n+  return vqtbl4_u8 (tab, idx);\n+}\n+\n+poly8x8_t\n+qtbl_testp8_4 (poly8x16x4_t tab, uint8x8_t idx)\n+{\n+  return vqtbl4_p8 (tab, idx);\n+}\n+\n+int8x8_t\n+qtb_tests8_ (int8x8_t r, int8x16_t tab, int8x8_t idx)\n+{\n+  return vqtbx1_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+qtb_testu8_ (uint8x8_t r, uint8x16_t tab, uint8x8_t idx)\n+{\n+  return vqtbx1_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+qtb_testp8_ (poly8x8_t r, poly8x16_t tab, uint8x8_t idx)\n+{\n+  return vqtbx1_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+qtb_tests8_2 (int8x8_t r, int8x16x2_t tab, int8x8_t idx)\n+{\n+  return vqtbx2_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+qtb_testu8_2 (uint8x8_t r, uint8x16x2_t tab, uint8x8_t idx)\n+{\n+  return vqtbx2_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+qtb_testp8_2 (poly8x8_t r, poly8x16x2_t tab, uint8x8_t idx)\n+{\n+  return vqtbx2_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+qtb_tests8_3 (int8x8_t r, int8x16x3_t tab, int8x8_t idx)\n+{\n+  return vqtbx3_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+qtb_testu8_3 (uint8x8_t r, uint8x16x3_t tab, uint8x8_t idx)\n+{\n+  return vqtbx3_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+qtb_testp8_3 (poly8x8_t r, poly8x16x3_t tab, uint8x8_t idx)\n+{\n+  return vqtbx3_p8 (r, tab, idx);\n+}\n+\n+int8x8_t\n+qtb_tests8_4 (int8x8_t r, int8x16x4_t tab, int8x8_t idx)\n+{\n+  return vqtbx4_s8 (r, tab, idx);\n+}\n+\n+uint8x8_t\n+qtb_testu8_4 (uint8x8_t r, uint8x16x4_t tab, uint8x8_t idx)\n+{\n+  return vqtbx4_u8 (r, tab, idx);\n+}\n+\n+poly8x8_t\n+qtb_testp8_4 (poly8x8_t r, poly8x16x4_t tab, uint8x8_t idx)\n+{\n+  return vqtbx4_p8 (r, tab, idx);\n+}\n+\n+int8x16_t\n+qtblq_tests8_ (int8x16_t tab, int8x16_t idx)\n+{\n+  return vqtbl1q_s8 (tab, idx);\n+}\n+\n+uint8x16_t\n+qtblq_testu8_ (uint8x16_t tab, uint8x16_t idx)\n+{\n+  return vqtbl1q_u8 (tab, idx);\n+}\n+\n+poly8x16_t\n+qtblq_testp8_ (poly8x16_t tab, uint8x16_t idx)\n+{\n+  return vqtbl1q_p8 (tab, idx);\n+}\n+\n+int8x16_t\n+qtblq_tests8_2 (int8x16x2_t tab, int8x16_t idx)\n+{\n+  return vqtbl2q_s8 (tab, idx);\n+}\n+\n+uint8x16_t\n+qtblq_testu8_2 (uint8x16x2_t tab, uint8x16_t idx)\n+{\n+  return vqtbl2q_u8 (tab, idx);\n+}\n+\n+poly8x16_t\n+qtblq_testp8_2 (poly8x16x2_t tab, uint8x16_t idx)\n+{\n+  return vqtbl2q_p8 (tab, idx);\n+}\n+\n+int8x16_t\n+qtblq_tests8_3 (int8x16x3_t tab, int8x16_t idx)\n+{\n+  return vqtbl3q_s8 (tab, idx);\n+}\n+\n+uint8x16_t\n+qtblq_testu8_3 (uint8x16x3_t tab, uint8x16_t idx)\n+{\n+  return vqtbl3q_u8 (tab, idx);\n+}\n+\n+poly8x16_t\n+qtblq_testp8_3 (poly8x16x3_t tab, uint8x16_t idx)\n+{\n+  return vqtbl3q_p8 (tab, idx);\n+}\n+\n+int8x16_t\n+qtblq_tests8_4 (int8x16x4_t tab, int8x16_t idx)\n+{\n+  return vqtbl4q_s8 (tab, idx);\n+}\n+\n+uint8x16_t\n+qtblq_testu8_4 (uint8x16x4_t tab, uint8x16_t idx)\n+{\n+  return vqtbl4q_u8 (tab, idx);\n+}\n+\n+poly8x16_t\n+qtblq_testp8_4 (poly8x16x4_t tab, uint8x16_t idx)\n+{\n+  return vqtbl4q_p8 (tab, idx);\n+}\n+\n+int8x16_t\n+qtbxq_tests8_ (int8x16_t r, int8x16_t tab, int8x16_t idx)\n+{\n+  return vqtbx1q_s8 (r, tab, idx);\n+}\n+\n+uint8x16_t\n+qtbxq_testu8_ (uint8x16_t r, uint8x16_t tab, uint8x16_t idx)\n+{\n+  return vqtbx1q_u8 (r, tab, idx);\n+}\n+\n+poly8x16_t\n+qtbxq_testp8_ (poly8x16_t r, poly8x16_t tab, uint8x16_t idx)\n+{\n+  return vqtbx1q_p8 (r, tab, idx);\n+}\n+\n+int8x16_t\n+qtbxq_tests8_2 (int8x16_t r, int8x16x2_t tab, int8x16_t idx)\n+{\n+  return vqtbx2q_s8 (r, tab, idx);\n+}\n+\n+uint8x16_t\n+qtbxq_testu8_2 (uint8x16_t r, uint8x16x2_t tab, uint8x16_t idx)\n+{\n+  return vqtbx2q_u8 (r, tab, idx);\n+}\n+\n+poly8x16_t\n+qtbxq_testp8_2 (poly8x16_t r, poly8x16x2_t tab, uint8x16_t idx)\n+{\n+  return vqtbx2q_p8 (r, tab, idx);\n+}\n+\n+int8x16_t\n+qtbxq_tests8_3 (int8x16_t r, int8x16x3_t tab, int8x16_t idx)\n+{\n+  return vqtbx3q_s8 (r, tab, idx);\n+}\n+\n+uint8x16_t\n+qtbxq_testu8_3 (uint8x16_t r, uint8x16x3_t tab, uint8x16_t idx)\n+{\n+  return vqtbx3q_u8 (r, tab, idx);\n+}\n+\n+poly8x16_t\n+qtbxq_testp8_3 (poly8x16_t r, poly8x16x3_t tab, uint8x16_t idx)\n+{\n+  return vqtbx3q_p8 (r, tab, idx);\n+}\n+\n+int8x16_t\n+qtbxq_tests8_4 (int8x16_t r, int8x16x4_t tab, int8x16_t idx)\n+{\n+  return vqtbx4q_s8 (r, tab, idx);\n+}\n+\n+uint8x16_t\n+qtbxq_testu8_4 (uint8x16_t r, uint8x16x4_t tab, uint8x16_t idx)\n+{\n+  return vqtbx4q_u8 (r, tab, idx);\n+}\n+\n+poly8x16_t\n+qtbxq_testp8_4 (poly8x16_t r, poly8x16x4_t tab, uint8x16_t idx)\n+{\n+  return vqtbx4q_p8 (r, tab, idx);\n+}\n+\n+/* { dg-final { scan-assembler-times \"tbl v\" 42} }  */\n+/* { dg-final { scan-assembler-times \"tbx v\" 30} }  */"}, {"sha": "b37c522e2b3bec2c02bf3efed95ae912e881f499", "filename": "gcc/testsuite/gcc.target/aarch64/tst-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftst-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+volatile unsigned int w0, w1;\n+volatile int result;\n+\n+void test_si() {\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]*, w\\[0-9\\]*\\n\" } } */\n+  result = !(w0 & w1);\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]*, \\(0x\\[0-9a-fA-F\\]+\\)|\\(\\[0-9\\]+\\)\" } } */\n+  result = !(w0 & 0x00f0);\n+  /* { dg-final { scan-assembler \"tst\\tw\\[0-9\\]*.*lsl 4\" } } */\n+  result = !(w0 & (w1 << 4));\n+}\n+\n+void test_si_tbnz() {\n+  /* { dg-final { scan-assembler \"tbnz\\t\\[wx\\]\\[0-9\\]*\" } } */\n+jumpto:\n+  if (w0 & 0x08) goto jumpto;\n+}\n+\n+void test_si_tbz() {\n+  /* { dg-final { scan-assembler \"tbz\\t\\[wx\\]\\[0-9\\]*\" } } */\n+jumpto:\n+  if (!(w1 & 0x08)) goto jumpto;\n+}\n+\n+volatile unsigned long long x0, x1;\n+\n+void test_di() {\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]*, x\\[0-9\\]*\\n\" } } */\n+  result = !(x0 & x1);\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]*, \\(0x\\[0-9a-fA-F\\]+\\)|\\(\\[0-9\\]+\\)\" } } */\n+  result = !(x0 & 0x00f0);\n+  /* { dg-final { scan-assembler \"tst\\tx\\[0-9\\]*.*lsl 4\" } } */\n+  result = !(x0 & (x1 << 4));\n+}\n+\n+void test_di_tbnz() {\n+  /* { dg-final { scan-assembler \"tbnz\\tx\\[0-9\\]*\" } } */\n+jumpto:\n+  if (x0 & 0x08) goto jumpto;\n+}\n+\n+void test_di_tbz() {\n+  /* { dg-final { scan-assembler \"tbz\\tx\\[0-9\\]*\" } } */\n+jumpto:\n+  if (!(x1 & 0x08)) goto jumpto;\n+}"}, {"sha": "27146b843d608b9b1cc5c64367bd4233229c6ad3", "filename": "gcc/testsuite/gcc.target/aarch64/vect-abs-compile.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,12 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#define N 16\n+\n+#include \"vect-abs.x\"\n+\n+/* { dg-final { scan-assembler \"abs\\\\tv\\[0-9\\]+\\.16b\" } } */\n+/* { dg-final { scan-assembler \"abs\\\\tv\\[0-9\\]+\\.8h\" } } */\n+/* { dg-final { scan-assembler \"abs\\\\tv\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"abs\\\\tv\\[0-9\\]+\\.2d\" } } */"}, {"sha": "954b10615a3a0588a1373346c6a6bac37c099283", "filename": "gcc/testsuite/gcc.target/aarch64/vect-abs.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,131 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"limits.h\"\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+#include \"vect-abs.x\"\n+\n+#define SET_VEC(size, type) void set_vector_##size (pRINT##size a) \\\n+\t\t      \t    {\t\t\t\t        \\\n+\t\t\t      int i;\t\t\t        \\\n+\t\t\t      for (i=0; i<N; i++)\t        \\\n+\t\t\t        a[i] = (type##_MIN) + (i + 1);  \\\n+\t\t      \t    }\n+\n+#define SET_RVEC(size, type) void set_rvector_##size (pRINT##size a) \\\n+\t\t      \t     {\t\t\t\t      \\\n+\t\t\t       int i;\t\t\t      \\\n+\t\t\t       for (i=0; i<N; i++)\t      \\\n+\t\t\t         a[i] = type##_MAX - i;       \\\n+\t\t      \t     }\n+\n+#define CHECK_VEC(size) void check_vector_##size (pRINT##size a, \\\n+\t\t\t\t\t\t  pRINT##size b) \\\n+\t\t\t{\t\t\t\t       \\\n+\t\t\t  int i;\t\t\t       \\\n+\t\t\t  for (i=0; i<N; i++)\t\t       \\\n+\t\t\t    if (a[i] != b[i])  \t\t       \\\n+\t\t\t      abort (); \t\t       \\\n+\t\t\t}\n+\n+\n+SET_RVEC (8, SCHAR)\n+SET_RVEC (16, SHRT)\n+SET_RVEC (32, INT)\n+SET_RVEC (64, LONG_LONG)\n+\n+set_rvector_long (pRLONG a)\n+{\n+  int i;\n+  for (i=0; i<N; i++)\n+    a[i] = (LONG_MAX) - i;\n+}\n+\n+SET_VEC (8, SCHAR)\n+SET_VEC (16, SHRT)\n+SET_VEC (32, INT)\n+SET_VEC (64, LONG_LONG)\n+\n+set_vector_long (long *__restrict__ a)\n+{\n+  long i;\n+  for (i=0; i<N; i++)\n+    a[i] = (LONG_MIN) + i + 1;\n+}\n+\n+CHECK_VEC (8)\n+CHECK_VEC (16)\n+CHECK_VEC (32)\n+CHECK_VEC (64)\n+\n+check_vector_long (long *__restrict__ a, long *__restrict__ b)\n+{\n+  long i;\n+  for (i=0; i<N; i++)\n+    if (a[i] != b[i])\n+      abort ();\n+}\n+\n+int main (void)\n+{\n+\n+  signed char a8[N];\n+  short a16[N];\n+  int a32[N];\n+  long long a64[N];\n+  /* abs () from stdlib.  */\n+  int alib32[N];\n+  long alibl[N];\n+\n+\n+  signed char b8[N];\n+  short b16[N];\n+  int b32[N];\n+  long long b64[N];\n+  /* abs () from stdlib.  */\n+  long blibl[N];\n+\n+  signed char abs_vector_8[N];\n+  short abs_vector_16[N];\n+  int abs_vector_32[N];\n+  long long abs_vector_64[N];\n+  long abs_vector_long[N];\n+\n+  /* Set up result vectors.  */\n+  set_rvector_8 (abs_vector_8);\n+  set_rvector_16 (abs_vector_16);\n+  set_rvector_32 (abs_vector_32);\n+  set_rvector_long (abs_vector_long);\n+  set_rvector_64 (abs_vector_64);\n+\n+  /* Set up inputs.  */\n+  set_vector_8 (b8);\n+  set_vector_16 (b16);\n+  set_vector_32 (b32);\n+  set_vector_64 (b64);\n+  set_vector_long (blibl);\n+\n+  /* Calculate their absolute values.  */\n+  absolute_s8 (a8, b8);\n+  absolute_s16 (a16, b16);\n+  absolute_s32 (a32, b32);\n+  absolute_s64 (a64, b64);\n+  /* abs () from stdlib.  */\n+  absolute_s32_lib (alib32, b32);\n+  absolute_l32_lib (alibl, blibl);\n+\n+  /* Check.  */\n+  check_vector_8 (a8, abs_vector_8);\n+  check_vector_16 (a16, abs_vector_16);\n+  check_vector_32 (a32, abs_vector_32);\n+  check_vector_64 (a64, abs_vector_64);\n+  check_vector_32 (alib32, abs_vector_32);\n+  check_vector_long (alibl, abs_vector_long);\n+\n+  return 0;\n+}"}, {"sha": "2e67cc296b5515f4803b0e174167946f770ded9a", "filename": "gcc/testsuite/gcc.target/aarch64/vect-abs.x", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-abs.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,36 @@\n+\n+extern int abs (int);\n+extern long labs (long);\n+\n+typedef signed char *__restrict__ pRINT8;\n+typedef short *__restrict__ pRINT16;\n+typedef int *__restrict__ pRINT32;\n+typedef long *__restrict__ pRLONG;\n+typedef long long *__restrict__ pRINT64;\n+\n+#define DEF_ABS(size)  void absolute_s##size (pRINT##size a, pRINT##size b) \\\n+\t\t       { \\\n+\t\t\t int i;  \\\n+\t\t\t for (i=0; i<N; i++)     \\\n+\t\t\t    a[i] = (b[i] > 0 ? b[i] : -b[i]); \\\n+\t\t       }\n+\n+DEF_ABS (8);\n+DEF_ABS (16);\n+DEF_ABS (32);\n+DEF_ABS (64);\n+\n+/* Test abs () vectorization.  */\n+void absolute_s32_lib (pRINT32 a, pRINT32 b)\n+{\n+  int i;\n+  for (i=0; i<N; i++)\n+    a[i] = abs (b[i]);\n+}\n+\n+void absolute_l32_lib (pRLONG a, pRLONG b)\n+{\n+  int i;\n+  for (i=0; i<N; i++)\n+    a[i] = labs (b[i]);\n+}"}, {"sha": "260c1e041c09a9c2ca8451760e2a54cc52578d34", "filename": "gcc/testsuite/gcc.target/aarch64/vect-compile.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,20 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"vect.x\"\n+\n+/* { dg-final { scan-assembler \"orn\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"bic\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"mla\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"mls\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"smax\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"smin\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"umax\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"umin\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"umaxv\" } } */\n+/* { dg-final { scan-assembler \"uminv\" } } */\n+/* { dg-final { scan-assembler \"smaxv\" } } */\n+/* { dg-final { scan-assembler \"sminv\" } } */\n+/* { dg-final { scan-assembler-times \"addv\" 2} } */\n+/* { dg-final { scan-assembler-times \"addp\" 2} } */"}, {"sha": "cce9240343f0f9c47f589a39ad4d26d9b41ab209", "filename": "gcc/testsuite/gcc.target/aarch64/vect-faddv-compile.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ffast-math\" } */\n+\n+#include \"vect-faddv.x\"\n+\n+/* { dg-final { scan-assembler-times \"faddp\\\\tv\" 2} } */"}, {"sha": "f30bde8e8dfb1da82ce1d2b7f05d60db45e80cc1", "filename": "gcc/testsuite/gcc.target/aarch64/vect-faddv.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,31 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -ffast-math\" } */\n+\n+extern void abort (void);\n+\n+#include \"vect-faddv.x\"\n+\n+int main (void)\n+{\n+  float addv_f32_value = -120.0f;\n+  double addv_f64_value = 120.0;\n+  float af32[16];\n+  double af64[16];\n+  int i;\n+\n+  /* Set up input vectors.  */\n+  for (i=0; i<16; i++)\n+    {\n+      af32[i] = (float)-i;\n+      af64[i] = (double)i;\n+    }\n+\n+  if (addv_f32 (af32) != addv_f32_value)\n+    abort ();\n+\n+  if (addv_f64 (af64) != addv_f64_value)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "d99ab215639a9fb75f5b8058885f0dce87bea0f4", "filename": "gcc/testsuite/gcc.target/aarch64/vect-faddv.x", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,23 @@\n+\n+typedef float *__restrict__ pRF32;\n+typedef double *__restrict__ pRF64;\n+\n+float addv_f32 (pRF32 a)\n+{\n+  int i;\n+  float s = 0.0;\n+  for (i=0; i<16; i++)\n+    s += a[i];\n+\n+  return s;\n+}\n+\n+double addv_f64 (pRF64 a)\n+{\n+  int i;\n+  double  s = 0.0;\n+  for (i=0; i<16; i++)\n+    s += a[i];\n+\n+  return s;\n+}"}, {"sha": "1285a506320dafdff60e7e18ee4e22157ee3c493", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmax-fmin-compile.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ffast-math\" } */\n+\n+#include \"vect-fmax-fmin.x\"\n+\n+/* { dg-final { scan-assembler \"fmaxnm\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fminnm\\\\tv\" } } */"}, {"sha": "42600b7393d1c4edd4be69d094971952095d193c", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmax-fmin.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -ffast-math\" } */\n+\n+extern void abort (void);\n+\n+#include \"vect-fmax-fmin.x\"\n+\n+#include \"vect-fmaxv-fminv.x\"\n+\n+#define DEFN_SETV(type) \\\n+\t\tset_vector_##type (pR##type a, type n)   \\\n+\t\t{ \t\t\t\t         \\\n+\t\t  int i;\t\t\t         \\\n+\t\t  for (i=0; i<16; i++)\t\t         \\\n+\t\t    a[i] = n;\t\t\t\t \\\n+\t\t}\n+\n+#define DEFN_CHECKV(type) \\\n+\t\tvoid check_vector_##type (pR##type a, pR##type vec) \\\n+\t\t{\t\t\t\t\t\t    \\\n+\t\t  int i;\t\t\t\t\t    \\\n+\t\t  for (i=0; i<16; i++)\t\t\t\t    \\\n+\t\t    if (a[i] != vec[i])\t\t\t\t    \\\n+\t\t      abort ();\t\t\t\t\t    \\\n+\t\t}\n+\n+#define TEST2(fname, type) \\\n+\t\t\tset_vector_##type (c##type, 0.0);              \\\n+\t\t\tfname##_##type (a##type, b##type);             \\\n+\t\t\tcheck_vector_##type (c##type, fname##_##type##_vector);\n+\n+#define TEST3(fname, type) \\\n+\t\t\tset_vector_##type (c##type, 0.0);              \\\n+\t\t\tfname##_##type (a##type, b##type, c##type);    \\\n+\t\t\tcheck_vector_##type (c##type, fname##_##type##_vector);\n+\n+#define TEST(fname, N) \\\n+\t\tTEST##N (fname, F32); \\\n+\t\tTEST##N (fname, F64);\n+\n+typedef float F32;\n+typedef double F64;\n+\n+DEFN_SETV (F32)\n+DEFN_SETV (F64)\n+\n+DEFN_CHECKV (F32)\n+DEFN_CHECKV (F64)\n+\n+int main (void)\n+{\n+\n+  F32 aF32[16];\n+  F32 bF32[16];\n+  F32 cF32[16];\n+\n+  F64 aF64[16];\n+  F64 bF64[16];\n+  F64 cF64[16];\n+  int i;\n+\n+  /* Golden vectors.  */\n+  F32 max_F32_vector[] = { 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0,\n+\t\t\t   8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 };\n+\n+  F64 max_F64_vector[] = { 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0,\n+\t\t\t   8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 };\n+\n+  F32 min_F32_vector[] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\n+\t\t\t   7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0 };\n+\n+  F64 min_F64_vector[] = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\n+\t\t\t   7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0 };\n+\n+  F32 minv_F32_value = 0.0f;\n+  F32 maxv_F32_value = 15.0f;\n+\n+  F64 minv_F64_value = 0.0;\n+  F64 maxv_F64_value = 15.0;\n+\n+  /* Setup input vectors.  */\n+  for (i=0; i<16; i++)\n+    {\n+      aF32[i] = (float)(15-i);\n+      bF32[i] = (float)i;\n+      aF64[i] = (double)(15-i);\n+      bF64[i] = (double)i;\n+    }\n+\n+  TEST (max, 3);\n+  TEST (min, 3);\n+\n+  /* Test across lanes ops.  */\n+  if (maxv_f32 (max_F32_vector) != maxv_F32_value)\n+    abort ();\n+  if (minv_f32 (min_F32_vector) != minv_F32_value)\n+    abort ();\n+\n+  if (maxv_f64 (max_F64_vector) != maxv_F64_value)\n+    abort ();\n+  if (minv_f64 (min_F64_vector) != minv_F64_value)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "a8948208a1e8efdb2c2e51de5e123366f399947f", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmax-fmin.x", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,32 @@\n+\n+typedef float *__restrict__ pRF32;\n+typedef double *__restrict__ pRF64;\n+\n+\n+void max_F32 (pRF32 a, pRF32 b, pRF32 c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] > b[i] ? a[i] : b[i]);\n+}\n+\n+void min_F32 (pRF32 a, pRF32 b, pRF32 c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] < b[i] ? a[i] : b[i]);\n+}\n+\n+void max_F64 (pRF64 a, pRF64 b, pRF64 c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] > b[i] ? a[i] : b[i]);\n+}\n+\n+void min_F64 (pRF64 a, pRF64 b, pRF64 c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] < b[i] ? a[i] : b[i]);\n+}"}, {"sha": "913cc8ce8838a14c9b0051affb11fca1815bedac", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmaxv-fminv-compile.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,10 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -ffast-math\" } */\n+\n+#include \"vect-fmaxv-fminv.x\"\n+\n+/* { dg-final { scan-assembler \"fminnmv\" } } */\n+/* { dg-final { scan-assembler \"fmaxnmv\" } } */\n+/* { dg-final { scan-assembler \"fminnmp\" } } */\n+/* { dg-final { scan-assembler \"fmaxnmp\" } } */"}, {"sha": "0bc6ba494cf76e606a7084d74e71f629c4bb01a9", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmaxv-fminv.x", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,43 @@\n+\n+typedef float *__restrict__ pRF32;\n+typedef double *__restrict__ pRF64;\n+\n+float maxv_f32 (pRF32 a)\n+{\n+  int i;\n+  float s = a[0];\n+  for (i=1;i<8;i++)\n+    s = (s > a[i] ? s :  a[i]);\n+\n+  return s;\n+}\n+\n+float minv_f32 (pRF32 a)\n+{\n+  int i;\n+  float s = a[0];\n+  for (i=1;i<16;i++)\n+    s = (s < a[i] ? s :  a[i]);\n+\n+  return s;\n+}\n+\n+double maxv_f64 (pRF64 a)\n+{\n+  int i;\n+  double s = a[0];\n+  for (i=1;i<8;i++)\n+    s = (s > a[i] ? s :  a[i]);\n+\n+  return s;\n+}\n+\n+double minv_f64 (pRF64 a)\n+{\n+  int i;\n+  double s = a[0];\n+  for (i=1;i<16;i++)\n+    s = (s < a[i] ? s :  a[i]);\n+\n+  return s;\n+}"}, {"sha": "b953dfae3b815420ad913c8311dacfc272247c90", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp-compile.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,13 @@\n+\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"vect-fp.x\"\n+\n+/* { dg-final { scan-assembler \"fadd\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fsub\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fmul\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fdiv\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fneg\\\\tv\" } } */\n+/* { dg-final { scan-assembler \"fabs\\\\tv\" } } */"}, {"sha": "a7357b7f065720a496db184439a4c55c2a6eeb84", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,137 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+extern void abort (void);\n+\n+#include \"vect-fp.x\"\n+\n+\n+#define DEFN_SETV(type) \\\n+\t\tset_vector_##type (pR##type a, type n)   \\\n+\t\t{ \t\t\t\t         \\\n+\t\t  int i;\t\t\t         \\\n+\t\t  for (i=0; i<16; i++)\t\t         \\\n+\t\t    a[i] = n;\t\t\t\t \\\n+\t\t}\n+\n+#define DEFN_CHECKV(type) \\\n+\t\tvoid check_vector_##type (pR##type a, pR##type vec) \\\n+\t\t{\t\t\t\t\t\t    \\\n+\t\t  int i;\t\t\t\t\t    \\\n+\t\t  for (i=0; i<16; i++)\t\t\t\t    \\\n+\t\t    if (a[i] != vec[i])\t\t\t\t    \\\n+\t\t      abort ();\t\t\t\t\t    \\\n+\t\t}\n+\n+#define TEST2(fname, type) \\\n+\t\t\tset_vector_##type (a##type, 0.0);              \\\n+\t\t\tfname##_##type (a##type, b##type);             \\\n+\t\t\tcheck_vector_##type (a##type, fname##_##type##_vector);\n+\n+#define TEST3(fname, type) \\\n+\t\t\tset_vector_##type (a##type, 0.0);              \\\n+\t\t\tfname##_##type (a##type, b##type, c##type);    \\\n+\t\t\tcheck_vector_##type (a##type, fname##_##type##_vector);\n+\n+#define TEST(fname, N) \\\n+\t\tTEST##N(fname, F32); \\\n+\t\tTEST##N(fname, F64);\n+\n+DEFN_SETV (F32)\n+DEFN_SETV (F64)\n+\n+DEFN_CHECKV (F32)\n+DEFN_CHECKV (F64)\n+\n+int main (void)\n+{\n+  F32 aF32[16];\n+  F32 bF32[16];\n+  F32 cF32[16];\n+\n+  F64 aF64[16];\n+  F64 bF64[16];\n+  F64 cF64[16];\n+  int i;\n+\n+  F32  add_F32_vector[] = { 3.0f, 5.0f, 7.0f, 9.0f, 11.0f,\n+\t\t\t    13.0f, 15.0f, 17.0f, 19.0f,\n+\t\t\t    21.0f, 23.0f, 25.0f, 27.0f,\n+\t\t\t    29.0f, 31.0f, 33.0f };\n+\n+  F64  add_F64_vector[] = { 3.0, 5.0, 7.0, 9.0, 11.0,\n+\t\t\t    13.0, 15.0, 17.0, 19.0,\n+\t\t\t    21.0, 23.0, 25.0, 27.0,\n+\t\t\t    29.0, 31.0, 33.0 };\n+\n+  F32  sub_F32_vector[] = { -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,\n+\t\t\t    -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,\n+\t\t\t    -1.0f, -1.0f, -1.0f, -1.0f, -1.0f,\n+\t\t\t    -1.0f };\n+\n+  F64  sub_F64_vector[] = { -1.0, -1.0, -1.0, -1.0, -1.0,\n+\t\t\t    -1.0, -1.0, -1.0, -1.0, -1.0,\n+\t\t\t    -1.0, -1.0, -1.0, -1.0, -1.0,\n+\t\t\t    -1.0 };\n+\n+  F32  mul_F32_vector[] = { 2.0f, 6.0f, 12.0f, 20.0f, 30.0f,\n+\t\t\t    42.0f, 56.0f, 72.0f, 90.0f,\n+\t\t\t    110.0f, 132.0f, 156.0f, 182.0f,\n+\t\t\t    210.0f, 240.0f, 272.0f };\n+\n+  F64  mul_F64_vector[] = { 2.0, 6.0, 12.0, 20.0, 30.0,\n+\t\t\t    42.0, 56.0, 72.0, 90.0,\n+\t\t\t    110.0, 132.0, 156.0, 182.0,\n+\t\t\t    210.0, 240.0, 272.0 };\n+\n+  F32  div_F32_vector[] = { 0.5f, (float)(2.0/3.0), 0.75f, 0.8f,\n+\t\t\t    (float)(5.0/6.0), (float)(6.0/7.0), 0.875000f,\n+\t\t\t    (float)(8.0/9.0), 0.900000f, (float)(10.0/11.0),\n+\t\t\t    (float)(11.0/12.0), (float)(12.0/13.0),\n+\t\t\t    (float)(13.0/14.0), (float)(14.0/15.0), 0.937500f,\n+\t\t\t    (float)(16.0/17.0) };\n+\n+  F64  div_F64_vector[] = { 0.5, (2.0/3.0), 0.75, 0.8, (5.0/6.0),\n+\t\t\t    (6.0/7.0), 0.875000, (8.0/9.0), 0.900000,\n+\t\t\t    (10.0/11.0), (11.0/12.0), (12.0/13.0), (13.0/14.0),\n+\t\t\t    (14.0/15.0), 0.937500, (16.0/17.0) };\n+\n+  F32  neg_F32_vector[] = { -1.0f, -2.0f, -3.0f, -4.0f,\n+\t\t\t    -5.0f, -6.0f, -7.0f, -8.0f,\n+\t\t\t    -9.0f, -10.0f, -11.0f, -12.0f,\n+\t\t\t    -13.0f, -14.0f, -15.0f, -16.0f };\n+\n+  F64  neg_F64_vector[] = { -1.0, -2.0, -3.0, -4.0,\n+\t\t\t    -5.0, -6.0, -7.0, -8.0,\n+\t\t\t    -9.0, -10.0, -11.0, -12.0,\n+\t\t\t    -13.0, -14.0, -15.0, -16.0 };\n+\n+  F32  abs_F32_vector[] = { 1.0f, 2.0f, 3.0f, 4.0f,\n+\t\t\t    5.0f, 6.0f, 7.0f, 8.0f,\n+\t\t\t    9.0f, 10.0f, 11.0f, 12.0f,\n+\t\t\t    13.0f, 14.0f, 15.0f, 16.0f };\n+\n+  F64  abs_F64_vector[] = { 1.0, 2.0, 3.0, 4.0,\n+\t\t\t    5.0, 6.0, 7.0, 8.0,\n+\t\t\t    9.0, 10.0, 11.0, 12.0,\n+\t\t\t    13.0, 14.0, 15.0, 16.0 };\n+\n+  /* Setup input vectors.  */\n+  for (i=1; i<=16; i++)\n+    {\n+      bF32[i-1] = (float)i;\n+      cF32[i-1] = (float)(i+1);\n+      bF64[i-1] = (double)i;\n+      cF64[i-1] = (double)(i+1);\n+    }\n+\n+  TEST (add, 3);\n+  TEST (sub, 3);\n+  TEST (mul, 3);\n+  TEST (div, 3);\n+  TEST (neg, 2);\n+  TEST (abs, 2);\n+\n+  return 0;\n+}"}, {"sha": "338f6edf945217ad85a63671ffdf0e590d5e61b7", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp.x", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,44 @@\n+\n+typedef float F32;\n+typedef double F64;\n+typedef float *__restrict__ pRF32;\n+typedef double *__restrict__ pRF64;\n+\n+extern float fabsf (float);\n+extern double fabs (double);\n+\n+#define DEF3(fname, type, op) \\\n+\t\t\tvoid  fname##_##type (pR##type a,   \\\n+\t\t\t\t\t      pR##type b,   \\\n+\t\t\t\t\t      pR##type c)   \\\n+\t\t\t{\t\t\t\t    \\\n+\t\t\t  int i; \t\t\t    \\\n+\t\t\t  for (i=0; i<16; i++)\t\t    \\\n+\t\t\t    a[i] = b[i] op c[i];\t    \\\n+\t\t\t}\n+\n+#define DEF2(fname, type, op) \\\n+\t\t\tvoid fname##_##type (pR##type a, \\\n+\t\t\t\t\t     pR##type b) \\\n+\t\t\t{\t\t\t\t  \\\n+\t\t\t  int i; \t\t\t  \\\n+\t\t\t  for (i=0; i<16; i++)\t\t  \\\n+\t\t\t    a[i] = op(b[i]);\t\t  \\\n+\t\t\t}\n+\n+\n+#define DEFN3(fname, op) \\\n+\t\tDEF3 (fname, F32, op) \\\n+\t\tDEF3 (fname, F64, op)\n+\n+#define DEFN2(fname, op) \\\n+\t\tDEF2 (fname, F32, op) \\\n+\t\tDEF2 (fname, F64, op)\n+\n+DEFN3 (add, +)\n+DEFN3 (sub, -)\n+DEFN3 (mul, *)\n+DEFN3 (div, /)\n+DEFN2 (neg, -)\n+DEF2 (abs, F32, fabsf)\n+DEF2 (abs, F64, fabs)"}, {"sha": "e51eaee5429e40347cd1114924f257eb6530b617", "filename": "gcc/testsuite/gcc.target/aarch64/vect-mull-compile.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull-compile.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,16 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#define N 16\n+\n+#include \"vect-mull.x\"\n+\n+DEF_MULL2 (DEF_MULLB)\n+DEF_MULL2 (DEF_MULLH)\n+DEF_MULL2 (DEF_MULLS)\n+\n+/* { dg-final { scan-assembler-times \"smull v\" 3 } } */\n+/* { dg-final { scan-assembler-times \"smull2 v\" 3 } } */\n+/* { dg-final { scan-assembler-times \"umull v\" 3 } } */\n+/* { dg-final { scan-assembler-times \"umull2 v\" 3 } } */"}, {"sha": "62a3552f7b1e87bca3f92b9587455d9371fc4fc5", "filename": "gcc/testsuite/gcc.target/aarch64/vect-mull.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,138 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"limits.h\"\n+\n+extern void abort (void);\n+\n+#define N 16\n+\n+#include \"vect-mull.x\"\n+\n+#define SET_VEC(size, type, sign)  \\\n+\t\t\t    void set_vector_##sign##size \\\n+\t\t\t\t\t\t   (pR##sign##INT##size b, \\\n+\t\t\t\t\t\t    pR##sign##INT##size c) \\\n+\t\t      \t    {\t\t\t\t        \\\n+\t\t\t      int i;\t\t\t        \\\n+\t\t\t      for (i=0; i<N; i++)\t        \\\n+\t\t\t      { \\\n+\t\t\t        b[i] = (type)((INT_MAX >> (32 - size)) - i); \\\n+\t\t\t        c[i] = (type)((INT_MAX >> (32 - size)) - i * 2); \\\n+\t\t\t      } \\\n+\t\t      \t    }\n+\n+#define CHECK_VEC(size, sign) void check_vector_##sign##size (pR##sign##INT##size a, \\\n+\t\t\t\t\t\t  pR##sign##INT##size b) \\\n+\t\t\t{\t\t\t\t       \\\n+\t\t\t  int i;\t\t\t       \\\n+\t\t\t  for (i=0; i<N; i++)\t\t       \\\n+\t\t\t    if (a[i] != b[i])  \t\t       \\\n+\t\t\t      abort (); \t\t       \\\n+\t\t\t}\n+\n+SET_VEC (8,  signed char,  S)\n+SET_VEC (16, signed short, S)\n+SET_VEC (32, signed int,   S)\n+\n+SET_VEC (8,  unsigned char,  U)\n+SET_VEC (16, unsigned short, U)\n+SET_VEC (32, unsigned int,   U)\n+\n+DEF_MULL2 (DEF_MULLB)\n+DEF_MULL2 (DEF_MULLH)\n+DEF_MULL2 (DEF_MULLS)\n+\n+CHECK_VEC (8, S)\n+CHECK_VEC (8, U)\n+CHECK_VEC (16, S)\n+CHECK_VEC (16, U)\n+CHECK_VEC (32, S)\n+CHECK_VEC (32, U)\n+CHECK_VEC (64, S)\n+CHECK_VEC (64, U)\n+\n+int main (void)\n+{\n+\n+#define DECL_VAR(name) signed char name##_S8[N]; \\\n+\t\t       signed short name##_S16[N]; \\\n+\t\t       signed int name##_S32[N]; \\\n+\t\t       unsigned char name##_U8[N]; \\\n+\t\t       unsigned short name##_U16[N]; \\\n+\t\t       unsigned int name##_U32[N];\n+\n+  DECL_VAR (output);\n+  signed long long output_S64[N];\n+  unsigned long long output_U64[N];\n+\n+  DECL_VAR (input1);\n+  DECL_VAR (input2);\n+\n+  signed short expected_S16[] =\n+\t\t    { 16129, 15750, 15375, 15004, 14637, 14274, 13915, 13560,\n+\t\t      13209, 12862, 12519, 12180, 11845, 11514, 11187, 10864 };\n+\n+  signed int expected_S32[] =\n+\t\t    { 1073676289, 1073577990, 1073479695, 1073381404, 1073283117,\n+\t\t      1073184834, 1073086555, 1072988280, 1072890009, 1072791742,\n+\t\t      1072693479, 1072595220, 1072496965, 1072398714, 1072300467,\n+\t\t      1072202224 };\n+\n+  signed long long expected_S64[] =\n+\t\t    { 4611686014132420609LL, 4611686007689969670LL,\n+\t\t      4611686001247518735LL, 4611685994805067804LL,\n+\t\t      4611685988362616877LL, 4611685981920165954LL,\n+\t\t      4611685975477715035LL, 4611685969035264120LL,\n+\t\t      4611685962592813209LL, 4611685956150362302LL,\n+\t\t      4611685949707911399LL, 4611685943265460500LL,\n+\t\t      4611685936823009605LL, 4611685930380558714LL,\n+\t\t      4611685923938107827LL, 4611685917495656944LL };\n+\n+  unsigned short expected_U16[] =\n+\t\t    { 16129, 15750, 15375, 15004, 14637, 14274, 13915, 13560,\n+\t\t      13209, 12862, 12519, 12180, 11845, 11514, 11187, 10864 };\n+\n+  unsigned int expected_U32[] =\n+\t\t    { 1073676289, 1073577990, 1073479695, 1073381404, 1073283117,\n+\t\t      1073184834, 1073086555, 1072988280, 1072890009, 1072791742,\n+\t\t      1072693479, 1072595220, 1072496965, 1072398714, 1072300467,\n+\t\t      1072202224 };\n+\n+  unsigned long long expected_U64[] =\n+\t\t    { 4611686014132420609ULL, 4611686007689969670ULL,\n+\t\t      4611686001247518735ULL, 4611685994805067804ULL,\n+\t\t      4611685988362616877ULL, 4611685981920165954ULL,\n+\t\t      4611685975477715035ULL, 4611685969035264120ULL,\n+\t\t      4611685962592813209ULL, 4611685956150362302ULL,\n+\t\t      4611685949707911399ULL, 4611685943265460500ULL,\n+\t\t      4611685936823009605ULL, 4611685930380558714ULL,\n+\t\t      4611685923938107827ULL, 4611685917495656944ULL };\n+\n+  /* Set up input.  */\n+  set_vector_S8 (input1_S8, input2_S8);\n+  set_vector_S16 (input1_S16, input2_S16);\n+  set_vector_S32 (input1_S32, input2_S32);\n+  set_vector_U8 (input1_U8, input2_U8);\n+  set_vector_U16 (input1_U16, input2_U16);\n+  set_vector_U32 (input1_U32, input2_U32);\n+\n+  /* Calculate actual results.  */\n+  widen_mult_Sb (output_S16, input1_S8, input2_S8);\n+  widen_mult_Sh (output_S32, input1_S16, input2_S16);\n+  widen_mult_Ss (output_S64, input1_S32, input2_S32);\n+  widen_mult_Ub (output_U16, input1_U8, input2_U8);\n+  widen_mult_Uh (output_U32, input1_U16, input2_U16);\n+  widen_mult_Us (output_U64, input1_U32, input2_U32);\n+\n+  /* Check actual vs. expected.  */\n+  check_vector_S16 (expected_S16, output_S16);\n+  check_vector_S32 (expected_S32, output_S32);\n+  check_vector_S64 (expected_S64, output_S64);\n+  check_vector_U16 (expected_U16, output_U16);\n+  check_vector_U32 (expected_U32, output_U32);\n+  check_vector_U64 (expected_U64, output_U64);\n+\n+  return 0;\n+}"}, {"sha": "39ec43d77e3f8671329448850b49a93499750b4f", "filename": "gcc/testsuite/gcc.target/aarch64/vect-mull.x", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,49 @@\n+\n+typedef signed char *__restrict__ pRSINT8;\n+typedef signed short *__restrict__ pRSINT16;\n+typedef signed int *__restrict__ pRSINT32;\n+typedef signed long long *__restrict__ pRSINT64;\n+\n+typedef unsigned char *__restrict__ pRUINT8;\n+typedef unsigned short *__restrict__ pRUINT16;\n+typedef unsigned int *__restrict__ pRUINT32;\n+typedef unsigned long long *__restrict__ pRUINT64;\n+\n+typedef signed short SH;\n+typedef unsigned short UH;\n+typedef signed int SS;\n+typedef unsigned int US;\n+typedef signed long long SLL;\n+typedef unsigned long long ULL;\n+\n+#define DEF_MULLB(sign)   \\\n+\t\t   void widen_mult_##sign##b  (pR##sign##INT##16 a, \\\n+\t\t\t\t\t       pR##sign##INT##8 b, \\\n+\t\t\t\t\t       pR##sign##INT##8 c) \\\n+\t\t   { \\\n+\t\t\tint i;  \\\n+\t\t\tfor (i=0; i<N; i++)     \\\n+\t\t\t  a[i] = (sign##H)b[i] * c[i];   \\\n+\t\t   }\n+\n+#define DEF_MULLH(sign)   \\\n+\t\t   void widen_mult_##sign##h (pR##sign##INT##32 a, \\\n+\t\t\t\t\t      pR##sign##INT##16 b, \\\n+\t\t\t\t\t      pR##sign##INT##16 c) \\\n+\t\t   { \\\n+\t\t\tint i;  \\\n+\t\t\tfor (i=0; i<N; i++)     \\\n+\t\t\t  a[i] = (sign##S)b[i] * c[i];   \\\n+\t\t   }\n+#define DEF_MULLS(sign)   \\\n+\t\t   void widen_mult_##sign##s (pR##sign##INT##64 a, \\\n+\t\t\t\t\t      pR##sign##INT##32 b, \\\n+\t\t\t\t\t      pR##sign##INT##32 c) \\\n+\t\t   { \\\n+\t\t\tint i;  \\\n+\t\t\tfor (i=0; i<N; i++)     \\\n+\t\t\t  a[i] = (sign##LL)b[i] * c[i];   \\\n+\t\t   }\n+\n+#define DEF_MULL2(x) x (S) \\\n+\t\t     x (U)"}, {"sha": "fc4874440a0a13f599b06039f45535d760d29090", "filename": "gcc/testsuite/gcc.target/aarch64/vect.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,93 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"vect.x\"\n+\n+extern void abort (void);\n+\n+void set_vector (int *a, int n)\n+{\n+  int i;\n+  for (i=0; i<16; i++)\n+    a[i] = n;\n+}\n+\n+void check_vector (pRINT c, pRINT result, char *str)\n+{\n+  int i;\n+  for (i=0; i<16 ; i++)\n+    if (c[i] != result[i])\n+      abort ();\n+}\n+\n+#define TEST(func, sign) set_vector (sign##c, 0); \\\n+\t\t         func (sign##a, sign##b, sign##c);    \\\n+\t\t         check_vector (sign##c, func##_vector, #func);\n+\n+\n+#define TESTV(func, sign)  \\\n+                    if (func (sign##a) != func##_value) \\\n+\t\t      abort ();\n+\n+#define TESTVLL(func, sign)  \\\n+                    if (func (ll##sign##a) != func##_value) \\\n+\t\t      abort ();\n+\t\t          \n+int main (void)\n+{\n+  int sa[16];\n+  int sb[16];\n+  int sc[16];\n+  unsigned int ua[16];\n+  unsigned int ub[16];\n+  unsigned int uc[16];\n+  long long llsa[16];\n+  unsigned long long llua[16];\n+  int i;\n+\n+  /* Table of standard values to compare against.  */\n+  unsigned int test_bic_vector[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n+  unsigned int test_orn_vector[] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};\n+  int mla_vector[] = {0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225};\n+  int mls_vector[] = {0, -1, -4, -9, -16, -25, -36, -49, -64, -81, -100, -121, -144, -169, -196, -225};\n+  int smax_vector[] = {0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15};\n+  int smin_vector[] = {0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15};\n+  unsigned int umax_vector[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+  unsigned int umin_vector[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+  int reduce_smax_value = 0;\n+  int reduce_smin_value = -15;\n+  unsigned int reduce_umax_value = 15;\n+  unsigned int reduce_umin_value = 0;\n+  unsigned int reduce_add_u32_value = 120;\n+  int reduce_add_s32_value = -120;\n+  long long reduce_add_s64_value = -120;\n+  unsigned long long reduce_add_u64_value = 120;\n+\n+  /* Set up input vectors.  */\n+  for (i=0; i < 16; i++)\n+    {\n+      sa[i] = sb[i] = -i;\n+      llsa[i] = (long long)-i;\n+      ua[i] = ub[i] = i;\n+      llua[i] = (unsigned long long)i;\n+    }\n+\n+  TEST (test_bic, s);\n+  TEST (test_orn, s);\n+  TEST (mla, s);\n+  TEST (mls, s);\n+  TEST (smax, s);\n+  TEST (smin, s);\n+  TEST (umax, u);\n+  TEST (umin, u);\n+  TESTV (reduce_smax, s);\n+  TESTV (reduce_smin, s);\n+  TESTV (reduce_umax, u);\n+  TESTV (reduce_umin, u);\n+  TESTV (reduce_add_u32, u);\n+  TESTV (reduce_add_s32, s);\n+  TESTVLL (reduce_add_u64, u);\n+  TESTVLL (reduce_add_s64, s);\n+  return 0;\n+}"}, {"sha": "88078349750ab619b97632a0b21f7ff2fa1b5a61", "filename": "gcc/testsuite/gcc.target/aarch64/vect.x", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,140 @@\n+typedef int *__restrict__ pRINT;\n+typedef unsigned int *__restrict__ pRUINT;\n+typedef long long *__restrict__ pRINT64;\n+typedef unsigned long long *__restrict__ pRUINT64;\n+\n+void test_orn (pRUINT a, pRUINT b, pRUINT c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+     c[i] = a[i] | (~b[i]);\n+}\n+\n+void test_bic (pRUINT a, pRUINT b, pRUINT c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+     c[i] = a[i] & (~b[i]);\n+}\n+\n+void mla (pRINT a, pRINT b, pRINT c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] += a[i] * b[i]; \n+}\n+\n+void mls (pRINT a, pRINT b, pRINT c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] -= a[i] * b[i];\n+}\n+\n+void smax (pRINT a, pRINT b, pRINT c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] > b[i] ? a[i] : b[i]);\n+}\n+\n+void smin (pRINT a, pRINT b, pRINT c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] < b[i] ? a[i] : b[i]);\n+}\n+\n+void umax (pRUINT a, pRUINT b, pRUINT c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] > b[i] ? a[i] : b[i]);\n+}\n+\n+void umin (pRUINT a, pRUINT b, pRUINT c)\n+{\n+  int i;\n+  for (i=0;i<16;i++)\n+    c[i] = (a[i] < b[i] ? a[i] : b[i]);\n+}\n+\n+unsigned int reduce_umax (pRUINT a)\n+{\n+  int i;\n+  unsigned int s = a[0];\n+  for (i = 1; i < 16; i++)\n+    s = (s > a[i] ? s : a[i]);\n+\n+  return s;\n+}\n+\n+unsigned int reduce_umin (pRUINT a)\n+{\n+  int i;\n+  unsigned int s = a[0];\n+  for (i = 1; i < 16; i++)\n+    s = (s < a[i] ? s : a[i]);\n+\n+  return s;\n+}\n+\n+int reduce_smax (pRINT a)\n+{\n+  int i;\n+  int s = a[0];\n+  for (i = 1; i < 16; i++)\n+    s = (s > a[i] ? s : a[i]);\n+\n+  return s;\n+}\n+\n+int reduce_smin (pRINT a)\n+{\n+  int i;\n+  int s = a[0];\n+  for (i = 1; i < 16; i++)\n+    s = (s < a[i] ? s : a[i]);\n+\n+  return s;\n+}\n+\n+unsigned int reduce_add_u32 (pRINT a)\n+{\n+  int i;\n+  unsigned int s = 0;\n+  for (i = 0; i < 16; i++)\n+    s += a[i];\n+\n+  return s;\n+}\n+\n+int reduce_add_s32 (pRINT a)\n+{\n+  int i;\n+  int s = 0;\n+  for (i = 0; i < 16; i++)\n+    s += a[i];\n+\n+  return s;\n+}\n+\n+unsigned long long reduce_add_u64 (pRUINT64 a)\n+{\n+  int i;\n+  unsigned long long s = 0;\n+  for (i = 0; i < 16; i++)\n+    s += a[i];\n+\n+  return s;\n+}\n+\n+long long reduce_add_s64 (pRINT64 a)\n+{\n+  int i;\n+  long long s = 0;\n+  for (i = 0; i < 16; i++)\n+    s += a[i];\n+\n+  return s;\n+}"}, {"sha": "affb8a8a13a31efb3e25a095c87c962950ca756a", "filename": "gcc/testsuite/gcc.target/aarch64/vector_intrinsics.c", "status": "added", "additions": 803, "deletions": 0, "changes": 803, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_intrinsics.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,803 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"../../../config/aarch64/arm_neon.h\"\n+\n+\n+/* { dg-final { scan-assembler-times \"\\\\tfmax\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n+\n+float32x2_t\n+test_vmax_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return vmax_f32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmax\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\].8b, v\\[0-9\\].8b\" 1 } } */\n+\n+int8x8_t\n+test_vmax_s8 (int8x8_t __a, int8x8_t __b)\n+{\n+  return vmax_s8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumax\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\].8b, v\\[0-9\\].8b\" 1 } } */\n+\n+uint8x8_t\n+test_vmax_u8 (uint8x8_t __a, uint8x8_t __b)\n+{\n+  return vmax_u8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmax\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\].4h, v\\[0-9\\].4h\" 1 } } */\n+\n+int16x4_t\n+test_vmax_s16 (int16x4_t __a, int16x4_t __b)\n+{\n+  return vmax_s16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumax\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\].4h, v\\[0-9\\].4h\" 1 } } */\n+\n+uint16x4_t\n+test_vmax_u16 (uint16x4_t __a, uint16x4_t __b)\n+{\n+  return vmax_u16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmax\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n+\n+int32x2_t\n+test_vmax_s32 (int32x2_t __a, int32x2_t __b)\n+{\n+  return vmax_s32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumax\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n+\n+uint32x2_t\n+test_vmax_u32 (uint32x2_t __a, uint32x2_t __b)\n+{\n+  return vmax_u32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tfmax\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\].4s, v\\[0-9\\].4s\" 1 } } */\n+\n+float32x4_t\n+test_vmaxq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return vmaxq_f32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tfmax\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\].2d, v\\[0-9\\].2d\" 1 } } */\n+\n+float64x2_t\n+test_vmaxq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return vmaxq_f64(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\].16b, v\\[0-9\\].16b\" 1 } } */\n+\n+int8x16_t\n+test_vmaxq_s8 (int8x16_t __a, int8x16_t __b)\n+{\n+  return vmaxq_s8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumax\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\].16b, v\\[0-9\\].16b\" 1 } } */\n+\n+uint8x16_t\n+test_vmaxq_u8 (uint8x16_t __a, uint8x16_t __b)\n+{\n+  return vmaxq_u8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmax\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\].8h, v\\[0-9\\].8h\" 1 } } */\n+\n+int16x8_t\n+test_vmaxq_s16 (int16x8_t __a, int16x8_t __b)\n+{\n+  return vmaxq_s16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumax\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\].8h, v\\[0-9\\].8h\" 1 } } */\n+\n+uint16x8_t\n+test_vmaxq_u16 (uint16x8_t __a, uint16x8_t __b)\n+{\n+  return vmaxq_u16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmax\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\].4s, v\\[0-9\\].4s\" 1 } } */\n+\n+int32x4_t\n+test_vmaxq_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return vmaxq_s32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumax\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\].4s, v\\[0-9\\].4s\" 1 } } */\n+\n+uint32x4_t\n+test_vmaxq_u32 (uint32x4_t __a, uint32x4_t __b)\n+{\n+  return vmaxq_u32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tfmin\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n+\n+float32x2_t\n+test_vmin_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return vmin_f32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmin\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\].8b, v\\[0-9\\].8b\" 1 } } */\n+\n+int8x8_t\n+test_vmin_s8 (int8x8_t __a, int8x8_t __b)\n+{\n+  return vmin_s8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumin\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\].8b, v\\[0-9\\].8b\" 1 } } */\n+\n+uint8x8_t\n+test_vmin_u8 (uint8x8_t __a, uint8x8_t __b)\n+{\n+  return vmin_u8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmin\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\].4h, v\\[0-9\\].4h\" 1 } } */\n+\n+int16x4_t\n+test_vmin_s16 (int16x4_t __a, int16x4_t __b)\n+{\n+  return vmin_s16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumin\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\].4h, v\\[0-9\\].4h\" 1 } } */\n+\n+uint16x4_t\n+test_vmin_u16 (uint16x4_t __a, uint16x4_t __b)\n+{\n+  return vmin_u16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmin\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n+\n+int32x2_t\n+test_vmin_s32 (int32x2_t __a, int32x2_t __b)\n+{\n+  return vmin_s32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumin\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n+\n+uint32x2_t\n+test_vmin_u32 (uint32x2_t __a, uint32x2_t __b)\n+{\n+  return vmin_u32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tfmin\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\].4s, v\\[0-9\\].4s\" 1 } } */\n+\n+float32x4_t\n+test_vminq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return vminq_f32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tfmin\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\].2d, v\\[0-9\\].2d\" 1 } } */\n+\n+float64x2_t\n+test_vminq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return vminq_f64(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmin\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\].16b, v\\[0-9\\].16b\" 1 } } */\n+\n+int8x16_t\n+test_vminq_s8 (int8x16_t __a, int8x16_t __b)\n+{\n+  return vminq_s8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumin\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\].16b, v\\[0-9\\].16b\" 1 } } */\n+\n+uint8x16_t\n+test_vminq_u8 (uint8x16_t __a, uint8x16_t __b)\n+{\n+  return vminq_u8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmin\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\].8h, v\\[0-9\\].8h\" 1 } } */\n+\n+int16x8_t\n+test_vminq_s16 (int16x8_t __a, int16x8_t __b)\n+{\n+  return vminq_s16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumin\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\].8h, v\\[0-9\\].8h\" 1 } } */\n+\n+uint16x8_t\n+test_vminq_u16 (uint16x8_t __a, uint16x8_t __b)\n+{\n+  return vminq_u16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsmin\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\].4s, v\\[0-9\\].4s\" 1 } } */\n+\n+int32x4_t\n+test_vminq_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return vminq_s32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tumin\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\].4s, v\\[0-9\\].4s\" 1 } } */\n+\n+uint32x4_t\n+test_vminq_u32 (uint32x4_t __a, uint32x4_t __b)\n+{\n+  return vminq_u32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddp\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\].8b, v\\[0-9\\].8b\" 2 } } */\n+\n+int8x8_t\n+test_vpadd_s8 (int8x8_t __a, int8x8_t __b)\n+{\n+  return vpadd_s8(__a, __b);\n+}\n+\n+uint8x8_t\n+test_vpadd_u8 (uint8x8_t __a, uint8x8_t __b)\n+{\n+  return vpadd_u8(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddp\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\].4h, v\\[0-9\\].4h\" 2 } } */\n+\n+int16x4_t\n+test_vpadd_s16 (int16x4_t __a, int16x4_t __b)\n+{\n+  return vpadd_s16(__a, __b);\n+}\n+\n+uint16x4_t\n+test_vpadd_u16 (uint16x4_t __a, uint16x4_t __b)\n+{\n+  return vpadd_u16(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 2 } } */\n+\n+int32x2_t\n+test_vpadd_s32 (int32x2_t __a, int32x2_t __b)\n+{\n+  return vpadd_s32(__a, __b);\n+}\n+\n+uint32x2_t\n+test_vpadd_u32 (uint32x2_t __a, uint32x2_t __b)\n+{\n+  return vpadd_u32(__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+\n+int32x4_t\n+test_vqdmlal_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c)\n+{\n+  return vqdmlal_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n+\n+int32x4_t\n+test_vqdmlal_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return vqdmlal_high_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\" 3 } } */\n+\n+int32x4_t\n+test_vqdmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vqdmlal_high_lane_s16 (a, b, c, 3);\n+}\n+\n+int32x4_t\n+test_vqdmlal_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vqdmlal_high_laneq_s16 (a, b, c, 6);\n+}\n+\n+int32x4_t\n+test_vqdmlal_high_n_s16 (int32x4_t __a, int16x8_t __b, int16_t __c)\n+{\n+  return vqdmlal_high_n_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\" 3 } } */\n+\n+int32x4_t\n+test_vqdmlal_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t c)\n+{\n+  return vqdmlal_lane_s16 (a, b, c, 3);\n+}\n+\n+int32x4_t\n+test_vqdmlal_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t c)\n+{\n+  return vqdmlal_laneq_s16 (a, b, c, 6);\n+}\n+\n+int32x4_t\n+test_vqdmlal_n_s16 (int32x4_t __a, int16x4_t __b, int16_t __c)\n+{\n+  return vqdmlal_n_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 1 } } */\n+\n+int64x2_t\n+test_vqdmlal_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n+{\n+  return vqdmlal_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+int64x2_t\n+test_vqdmlal_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return vqdmlal_high_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\" 3 } } */\n+\n+int64x2_t\n+test_vqdmlal_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return vqdmlal_high_lane_s32 (__a, __b, __c, 1);\n+}\n+\n+int64x2_t\n+test_vqdmlal_high_laneq_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return vqdmlal_high_laneq_s32 (__a, __b, __c, 3);\n+}\n+\n+int64x2_t\n+test_vqdmlal_high_n_s32 (int64x2_t __a, int32x4_t __b, int32_t __c)\n+{\n+  return vqdmlal_high_n_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\" 3 } } */\n+\n+int64x2_t\n+test_vqdmlal_lane_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n+{\n+  return vqdmlal_lane_s32 (__a, __b, __c, 1);\n+}\n+\n+int64x2_t\n+test_vqdmlal_laneq_s32 (int64x2_t __a, int32x2_t __b, int32x4_t __c)\n+{\n+  return vqdmlal_laneq_s32 (__a, __b, __c, 3);\n+}\n+\n+int64x2_t\n+test_vqdmlal_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n+{\n+  return vqdmlal_n_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+\n+int32x4_t\n+test_vqdmlsl_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c)\n+{\n+  return vqdmlsl_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n+\n+int32x4_t\n+test_vqdmlsl_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n+{\n+  return vqdmlsl_high_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\" 3 } } */\n+\n+int32x4_t\n+test_vqdmlsl_high_lane_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vqdmlsl_high_lane_s16 (a, b, c, 3);\n+}\n+\n+int32x4_t\n+test_vqdmlsl_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vqdmlsl_high_laneq_s16 (a, b, c, 6);\n+}\n+\n+int32x4_t\n+test_vqdmlsl_high_n_s16 (int32x4_t __a, int16x8_t __b, int16_t __c)\n+{\n+  return vqdmlsl_high_n_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\" 3 } } */\n+\n+int32x4_t\n+test_vqdmlsl_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t c)\n+{\n+  return vqdmlsl_lane_s16 (a, b, c, 3);\n+}\n+\n+int32x4_t\n+test_vqdmlsl_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t c)\n+{\n+  return vqdmlsl_laneq_s16 (a, b, c, 6);\n+}\n+\n+int32x4_t\n+test_vqdmlsl_n_s16 (int32x4_t __a, int16x4_t __b, int16_t __c)\n+{\n+  return vqdmlsl_n_s16 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 1 } } */\n+\n+int64x2_t\n+test_vqdmlsl_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n+{\n+  return vqdmlsl_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+int64x2_t\n+test_vqdmlsl_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return vqdmlsl_high_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\" 3 } } */\n+\n+int64x2_t\n+test_vqdmlsl_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return vqdmlsl_high_lane_s32 (__a, __b, __c, 1);\n+}\n+\n+int64x2_t\n+test_vqdmlsl_high_laneq_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+{\n+  return vqdmlsl_high_laneq_s32 (__a, __b, __c, 3);\n+}\n+\n+int64x2_t\n+test_vqdmlsl_high_n_s32 (int64x2_t __a, int32x4_t __b, int32_t __c)\n+{\n+  return vqdmlsl_high_n_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\" 3 } } */\n+\n+int64x2_t\n+test_vqdmlsl_lane_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n+{\n+  return vqdmlsl_lane_s32 (__a, __b, __c, 1);\n+}\n+\n+int64x2_t\n+test_vqdmlsl_laneq_s32 (int64x2_t __a, int32x2_t __b, int32x4_t __c)\n+{\n+  return vqdmlsl_laneq_s32 (__a, __b, __c, 3);\n+}\n+\n+int64x2_t\n+test_vqdmlsl_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n+{\n+  return vqdmlsl_n_s32 (__a, __b, __c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+\n+int32x4_t\n+test_vqdmull_s16 (int16x4_t __a, int16x4_t __b)\n+{\n+  return vqdmull_s16 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n+\n+int32x4_t\n+test_vqdmull_high_s16 (int16x8_t __a, int16x8_t __b)\n+{\n+  return vqdmull_high_s16 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\" 3 } } */\n+\n+int32x4_t\n+test_vqdmull_high_lane_s16 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmull_high_lane_s16 (a, b, 3);\n+}\n+\n+int32x4_t\n+test_vqdmull_high_laneq_s16 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmull_high_laneq_s16 (a, b, 6);\n+}\n+\n+int32x4_t\n+test_vqdmull_high_n_s16 (int16x8_t __a, int16_t __b)\n+{\n+  return vqdmull_high_n_s16 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.h\" 3 } } */\n+\n+int32x4_t\n+test_vqdmull_lane_s16 (int16x4_t a, int16x4_t b)\n+{\n+  return vqdmull_lane_s16 (a, b, 3);\n+}\n+\n+int32x4_t\n+test_vqdmull_laneq_s16 (int16x4_t a, int16x8_t b)\n+{\n+  return vqdmull_laneq_s16 (a, b, 6);\n+}\n+\n+int32x4_t\n+test_vqdmull_n_s16 (int16x4_t __a, int16_t __b)\n+{\n+  return vqdmull_n_s16 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 1 } } */\n+\n+int64x2_t\n+test_vqdmull_s32 (int32x2_t __a, int32x2_t __b)\n+{\n+  return vqdmull_s32 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+\n+int64x2_t\n+test_vqdmull_high_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return vqdmull_high_s32 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\" 3 } } */\n+\n+int64x2_t\n+test_vqdmull_high_lane_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return vqdmull_high_lane_s32 (__a, __b, 1);\n+}\n+\n+int64x2_t\n+test_vqdmull_high_laneq_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return vqdmull_high_laneq_s32 (__a, __b, 3);\n+}\n+\n+int64x2_t\n+test_vqdmull_high_n_s32 (int32x4_t __a, int32_t __b)\n+{\n+  return vqdmull_high_n_s32 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.s\" 3 } } */\n+\n+int64x2_t\n+test_vqdmull_lane_s32 (int32x2_t __a, int32x2_t __b)\n+{\n+  return vqdmull_lane_s32 (__a, __b, 1);\n+}\n+\n+int64x2_t\n+test_vqdmull_laneq_s32 (int32x2_t __a, int32x4_t __b)\n+{\n+  return vqdmull_laneq_s32 (__a, __b, 1);\n+}\n+\n+int64x2_t\n+test_vqdmull_n_s32 (int32x2_t __a, int32_t __b)\n+{\n+  return vqdmull_n_s32 (__a, __b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshll\\\\tv\\[0-9\\]+\\.2d\" 1 } } */\n+\n+int64x2_t\n+test_vshll_n_s32 (int32x2_t __a)\n+{\n+  return vshll_n_s32 (__a, 9);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushll\\\\tv\\[0-9\\]+\\.2d\" 1 } } */\n+\n+uint64x2_t\n+test_vshll_n_u32 (uint32x2_t __a)\n+{\n+  return vshll_n_u32 (__a, 9);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshll\\\\tv\\[0-9\\]+\\.2d\" 2 } } */\n+\n+int64x2_t\n+test_vshll_n_s32_2 (int32x2_t __a)\n+{\n+  return vshll_n_s32 (__a, 32);\n+}\n+\n+uint64x2_t\n+test_vshll_n_u32_2 (uint32x2_t __a)\n+{\n+  return vshll_n_u32 (__a, 32);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshll\\\\tv\\[0-9\\]+\\.4s\" 1 } } */\n+\n+int32x4_t\n+test_vshll_n_s16 (int16x4_t __a)\n+{\n+  return vshll_n_s16 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushll\\\\tv\\[0-9\\]+\\.4s\" 1 } } */\n+\n+uint32x4_t\n+test_vshll_n_u16 (uint16x4_t __a)\n+{\n+  return vshll_n_u16 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshll\\\\tv\\[0-9\\]+\\.4s\" 2 } } */\n+\n+int32x4_t\n+test_vshll_n_s16_2 (int16x4_t __a)\n+{\n+  return vshll_n_s16 (__a, 16);\n+}\n+\n+uint32x4_t\n+test_vshll_n_u16_2 (uint16x4_t __a)\n+{\n+  return vshll_n_u16 (__a, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshll\\\\tv\\[0-9\\]+\\.8h\" 1 } } */\n+\n+int16x8_t\n+test_vshll_n_s8 (int8x8_t __a)\n+{\n+  return vshll_n_s8 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushll\\\\tv\\[0-9\\]+\\.8h\" 1 } } */\n+\n+uint16x8_t\n+test_vshll_n_u8 (uint8x8_t __a)\n+{\n+  return vshll_n_u8 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshll\\\\tv\\[0-9\\]+\\.8h\" 2 } } */\n+\n+int16x8_t\n+test_vshll_n_s8_2 (int8x8_t __a)\n+{\n+  return vshll_n_s8 (__a, 8);\n+}\n+\n+uint16x8_t\n+test_vshll_n_u8_2 (uint8x8_t __a)\n+{\n+  return vshll_n_u8 (__a, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshll2\\\\tv\\[0-9\\]+\\.2d\" 1 } } */\n+\n+int64x2_t\n+test_vshll_high_n_s32 (int32x4_t __a)\n+{\n+  return vshll_high_n_s32 (__a, 9);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushll2\\\\tv\\[0-9\\]+\\.2d\" 1 } } */\n+\n+uint64x2_t\n+test_vshll_high_n_u32 (uint32x4_t __a)\n+{\n+  return vshll_high_n_u32 (__a, 9);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshll2\\\\tv\\[0-9\\]+\\.2d\" 2 } } */\n+\n+int64x2_t\n+test_vshll_high_n_s32_2 (int32x4_t __a)\n+{\n+  return vshll_high_n_s32 (__a, 32);\n+}\n+\n+uint64x2_t\n+test_vshll_high_n_u32_2 (uint32x4_t __a)\n+{\n+  return vshll_high_n_u32 (__a, 32);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshll2\\\\tv\\[0-9\\]+\\.4s\" 1 } } */\n+\n+int32x4_t\n+test_vshll_high_n_s16 (int16x8_t __a)\n+{\n+  return vshll_high_n_s16 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushll2\\\\tv\\[0-9\\]+\\.4s\" 1 } } */\n+\n+uint32x4_t\n+test_vshll_high_n_u16 (uint16x8_t __a)\n+{\n+  return vshll_high_n_u16 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshll2\\\\tv\\[0-9\\]+\\.4s\" 2 } } */\n+\n+int32x4_t\n+test_vshll_high_n_s16_2 (int16x8_t __a)\n+{\n+  return vshll_high_n_s16 (__a, 16);\n+}\n+\n+uint32x4_t\n+test_vshll_high_n_u16_2 (uint16x8_t __a)\n+{\n+  return vshll_high_n_u16 (__a, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tsshll2\\\\tv\\[0-9\\]+\\.8h\" 1 } } */\n+\n+int16x8_t\n+test_vshll_high_n_s8 (int8x16_t __a)\n+{\n+  return vshll_high_n_s8 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tushll2\\\\tv\\[0-9\\]+\\.8h\" 1 } } */\n+\n+uint16x8_t\n+test_vshll_high_n_u8 (uint8x16_t __a)\n+{\n+  return vshll_high_n_u8 (__a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\tshll2\\\\tv\\[0-9\\]+\\.8h\" 2 } } */\n+\n+int16x8_t\n+test_vshll_high_n_s8_2 (int8x16_t __a)\n+{\n+  return vshll_high_n_s8 (__a, 8);\n+}\n+\n+uint16x8_t\n+test_vshll_high_n_u8_2 (uint8x16_t __a)\n+{\n+  return vshll_high_n_u8 (__a, 8);\n+}"}, {"sha": "79c571402cc1c5e3a8b6c71a30edb230a101e1a0", "filename": "gcc/testsuite/gcc.target/aarch64/vfp-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvfp-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern float fabsf (float);\n+extern float sqrtf (float);\n+extern double fabs (double);\n+extern double sqrt (double);\n+\n+volatile float f1, f2, f3;\n+volatile int cond1, cond2;\n+\n+void test_sf() {\n+  /* abssf2 */\n+  /* { dg-final { scan-assembler \"fabs\\ts\\[0-9\\]*\" } } */\n+  f1 = fabsf (f1);\n+  /* negsf2 */\n+  /* { dg-final { scan-assembler \"fneg\\ts\\[0-9\\]*\" } } */\n+  f1 = -f1;\n+  /* addsf3 */\n+  /* { dg-final { scan-assembler \"fadd\\ts\\[0-9\\]*\" } } */\n+  f1 = f2 + f3;\n+  /* subsf3 */\n+  /* { dg-final { scan-assembler \"fsub\\ts\\[0-9\\]*\" } } */\n+  f1 = f2 - f3;\n+  /* divsf3 */\n+  /* { dg-final { scan-assembler \"fdiv\\ts\\[0-9\\]*\" } } */\n+  f1 = f2 / f3;\n+  /* mulsf3 */\n+  /* { dg-final { scan-assembler \"fmul\\ts\\[0-9\\]*\" } } */\n+  f1 = f2 * f3;\n+  /* sqrtsf2 */\n+  /* { dg-final { scan-assembler \"fsqrt\\ts\\[0-9\\]*\" } } */\n+  f1 = sqrtf (f1);\n+  /* cmpsf */\n+  /* { dg-final { scan-assembler \"fcmp\\ts\\[0-9\\]*\" } } */\n+  if (f1 < f2)\n+    cond1 = 1;\n+  else\n+    cond2 = 1;\n+}\n+\n+volatile double d1, d2, d3;\n+\n+void test_df() {\n+  /* absdf2 */\n+  /* { dg-final { scan-assembler \"fabs\\td\\[0-9\\]*\" } } */\n+  d1 = fabs (d1);\n+  /* negdf2 */\n+  /* { dg-final { scan-assembler \"fneg\\td\\[0-9\\]*\" } } */\n+  d1 = -d1;\n+  /* adddf3 */\n+  /* { dg-final { scan-assembler \"fadd\\td\\[0-9\\]*\" } } */\n+  d1 = d2 + d3;\n+  /* subdf3 */\n+  /* { dg-final { scan-assembler \"fsub\\td\\[0-9\\]*\" } } */\n+  d1 = d2 - d3;\n+  /* divdf3 */\n+  /* { dg-final { scan-assembler \"fdiv\\td\\[0-9\\]*\" } } */\n+  d1 = d2 / d3;\n+  /* muldf3 */\n+  /* { dg-final { scan-assembler \"fmul\\td\\[0-9\\]*\" } } */\n+  d1 = d2 * d3;\n+  /* sqrtdf2 */\n+  /* { dg-final { scan-assembler \"fsqrt\\td\\[0-9\\]*\" } } */\n+  d1 = sqrt (d1);\n+  /* cmpdf */\n+  /* { dg-final { scan-assembler \"fcmp\\td\\[0-9\\]*\" } } */\n+  if (d1 < d2)\n+    cond1 = 1;\n+  else\n+    cond2 = 1;\n+}\n+\n+volatile int i1;\n+volatile unsigned int u1;\n+\n+void test_convert () {\n+  /* extendsfdf2 */\n+  /* { dg-final { scan-assembler \"fcvt\\td\\[0-9\\]*\" } } */\n+  d1 = f1;\n+  /* truncdfsf2 */\n+  /* { dg-final { scan-assembler \"fcvt\\ts\\[0-9\\]*\" } } */\n+  f1 = d1;\n+  /* fixsfsi2 */\n+  /* { dg-final { scan-assembler \"fcvtzs\\tw\\[0-9\\], s\\[0-9\\]*\" } } */\n+  i1 = f1;\n+  /* fixdfsi2 */\n+  /* { dg-final { scan-assembler \"fcvtzs\\tw\\[0-9\\], d\\[0-9\\]*\" } } */\n+  i1 = d1;\n+  /* fixunsfsi2 */\n+  /* { dg-final { scan-assembler \"fcvtzu\\tw\\[0-9\\], s\\[0-9\\]*\" } } */\n+  u1 = f1;\n+  /* fixunsdfsi2 */\n+  /* { dg-final { scan-assembler \"fcvtzu\\tw\\[0-9\\], d\\[0-9\\]*\" } } */\n+  u1 = d1;\n+  /* floatsisf2 */\n+  /* { dg-final { scan-assembler \"scvtf\\ts\\[0-9\\]*\" } } */\n+  f1 = i1;\n+  /* floatsidf2 */\n+  /* { dg-final { scan-assembler \"scvtf\\td\\[0-9\\]*\" } } */\n+  d1 = i1;\n+  /* floatunssisf2 */\n+  /* { dg-final { scan-assembler \"ucvtf\\ts\\[0-9\\]*\" } } */\n+  f1 = u1;\n+  /* floatunssidf2 */\n+  /* { dg-final { scan-assembler \"ucvtf\\td\\[0-9\\]*\" } } */\n+  d1 = u1;\n+}\n+"}, {"sha": "dd3fb81198545826f98cdce51ef2124cd24a958c", "filename": "gcc/testsuite/gcc.target/aarch64/vmlsq_laneq.c", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmlsq_laneq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmlsq_laneq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvmlsq_laneq.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,158 @@\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+void\n+test1 ()\n+{\n+  int16x8_t val1, val2, val3;\n+  int16x8_t result;\n+  uint64_t act, exp;\n+\n+  val1 = vcombine_s16 (vcreate_s16 (UINT64_C (0xffff9ab680000000)),\n+\t\t       vcreate_s16 (UINT64_C (0x00000000ffff0000)));\n+  val2 = vcombine_s16 (vcreate_s16 (UINT64_C (0x32b77fffffff7fff)),\n+\t\t       vcreate_s16 (UINT64_C (0x0000ffff00007fff)));\n+  val3 = vcombine_s16 (vcreate_s16 (UINT64_C (0x7fff00007fff0000)),\n+\t\t       vcreate_s16 (UINT64_C (0x80007fff00000000)));\n+  result = vmlsq_laneq_s16 (val1, val2, val3, 6);\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_s16 (result), 0);\n+  exp = UINT64_C (0xb2b69ab5ffffffff);\n+  if (act != exp)\n+    abort ();\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_s16 (result), 1);\n+  exp = UINT64_C (0x00007fffffffffff);\n+  if (act != exp)\n+    abort ();\n+}\n+\n+void\n+test2 ()\n+{\n+  int32x4_t val1, val2, val3;\n+  int32x4_t result;\n+  uint64_t exp, act;\n+\n+  val1 = vcombine_s32 (vcreate_s32 (UINT64_C (0x00008000f46f7fff)),\n+\t\t       vcreate_s32 (UINT64_C (0x7fffffffffff8000)));\n+  val2 = vcombine_s32 (vcreate_s32 (UINT64_C (0x7fff7fff0e700000)),\n+\t\t       vcreate_s32 (UINT64_C (0xffff000080000000)));\n+  val3 = vcombine_s32 (vcreate_s32 (UINT64_C (0x00000000ffff0000)),\n+\t\t       vcreate_s32 (UINT64_C (0xd9edea1a8000fb28)));\n+  result = vmlsq_laneq_s32 (val1, val2, val3, 3);\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_s32 (result), 0);\n+  exp = UINT64_C (0xcefb6a1a1d0f7fff);\n+  if (act != exp)\n+    abort ();\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_s32 (result), 1);\n+  exp = UINT64_C (0x6a19ffffffff8000);\n+  if (act != exp)\n+    abort ();\n+}\n+\n+void\n+test3 ()\n+{\n+  uint16x8_t val1, val2, val3;\n+  uint16x8_t result;\n+  uint64_t act, exp;\n+\n+  val1 = vcombine_u16 (vcreate_u16 (UINT64_C (0x000080008000802a)),\n+\t\t       vcreate_u16 (UINT64_C (0x7fffffff00007fff)));\n+  val2 = vcombine_u16 (vcreate_u16 (UINT64_C (0x7fffcdf1ffff0000)),\n+\t\t       vcreate_u16 (UINT64_C (0xe2550000ffffffff)));\n+  val3 = vcombine_u16 (vcreate_u16 (UINT64_C (0x80007fff80000000)),\n+\t\t       vcreate_u16 (UINT64_C (0xbe2100007fffffff)));\n+\n+  result = vmlsq_laneq_u16 (val1, val2, val3, 7);\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_u16 (result), 0);\n+  exp = UINT64_C (0x3e2115ef3e21802a);\n+  if (act != exp)\n+    abort ();\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_u16 (result), 1);\n+  exp = UINT64_C (0x3d0affffbe213e20);\n+  if (act != exp)\n+    abort ();\n+}\n+\n+void\n+test4 ()\n+{\n+  uint32x4_t val1, val2, val3;\n+  uint32x4_t result;\n+  uint64_t act, exp;\n+\n+  val1 = vcombine_u32 (vcreate_u32 (UINT64_C (0x3295fe3d7fff7fff)),\n+\t\t       vcreate_u32 (UINT64_C (0x7fff00007fff7fff)));\n+  val2 = vcombine_u32 (vcreate_u32 (UINT64_C (0xffff7fff7fff8000)),\n+\t\t       vcreate_u32 (UINT64_C (0x7fff80008000ffff)));\n+  val3 = vcombine_u32 (vcreate_u32 (UINT64_C (0x7fff7fff80008000)),\n+\t\t       vcreate_u32 (UINT64_C (0x0000800053ab7fff)));\n+\n+  result = vmlsq_laneq_u32 (val1, val2, val3, 2);\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_u32 (result), 0);\n+  exp = UINT64_C (0x4640fe3cbffeffff);\n+  if (act != exp)\n+    abort ();\n+\n+  act = vgetq_lane_u64 (vreinterpretq_u64_u32 (result), 1);\n+  exp = UINT64_C (0xbffe8000d3abfffe);\n+  if (act != exp)\n+    abort ();\n+}\n+\n+void\n+test5 ()\n+{\n+  float32x4_t val1, val2, val3;\n+  float32x4_t result;\n+  float32_t act;\n+\n+  val1 = vcombine_f32 (vcreate_f32 (UINT64_C (0x3f49daf03ef3dc73)),\n+\t\t       vcreate_f32 (UINT64_C (0x3f5d467a3ef3dc73)));\n+  val2 = vcombine_f32 (vcreate_f32 (UINT64_C (0x3d2064c83d10cd28)),\n+\t\t       vcreate_f32 (UINT64_C (0x3ea7d1a23d10cd28)));\n+  val3 = vcombine_f32 (vcreate_f32 (UINT64_C (0x3f6131993edb1e04)),\n+\t\t       vcreate_f32 (UINT64_C (0x3f37f4bf3edb1e04)));\n+\n+  result = vmlsq_laneq_f32 (val1, val2, val3, 0);\n+\n+  act = vgetq_lane_f32 (result, 0);\n+  if (act != 0.46116194128990173f)\n+    abort ();\n+\n+  act = vgetq_lane_f32 (result, 1);\n+  if (act != 0.7717385292053223f)\n+    abort ();\n+\n+  act = vgetq_lane_f32 (result, 2);\n+  if (act != 0.46116194128990173f)\n+    abort ();\n+\n+  act = vgetq_lane_f32 (result, 3);\n+  if (act != 0.7240825295448303f)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  test1 ();\n+  test2 ();\n+  test3 ();\n+  test4 ();\n+  test5 ();\n+\n+  return 0;\n+}"}, {"sha": "c69d3a358b44e35239bc42d65e921260927123d6", "filename": "gcc/testsuite/gcc.target/aarch64/volatile-bitfields-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-1.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct {\n+  char a:1;\n+  char b:7;\n+  int c;\n+} BitStruct;\n+\n+volatile BitStruct bits;\n+\n+int foo ()\n+{\n+  return bits.b;\n+}\n+\n+/* { dg-final { scan-assembler \"ldrb\\[\\\\t \\]+\\[^\\n\\]*,\\[\\\\t \\]*\\\\\\[\\[^\\n\\]*\\\\\\]\" } } */"}, {"sha": "c7a9ebaa2b8ff2223dc5539412b833279d4be6f1", "filename": "gcc/testsuite/gcc.target/aarch64/volatile-bitfields-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-2.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct {\n+  volatile unsigned long a:8;\n+  volatile unsigned long b:8;\n+  volatile unsigned long c:16;\n+} BitStruct;\n+\n+BitStruct bits;\n+\n+unsigned long foo ()\n+{\n+  return bits.b;\n+}\n+\n+/* { dg-final { scan-assembler \"ldr\\[\\\\t \\]+\\[^\\n\\]*,\\[\\\\t \\]*\\\\\\[\\[^\\n\\]*\\\\\\]\" } } */"}, {"sha": "ea371dbac95e8b61913d30b8500a61d2b55265f3", "filename": "gcc/testsuite/gcc.target/aarch64/volatile-bitfields-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvolatile-bitfields-3.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct {\n+  volatile unsigned long a:8;\n+  volatile unsigned long b:8;\n+  volatile unsigned long c:16;\n+} BitStruct;\n+\n+BitStruct bits;\n+\n+unsigned long foo ()\n+{\n+  return bits.c;\n+}\n+\n+/* { dg-final { scan-assembler \"ldr\\[\\\\t \\]+\\[^\\n\\]*,\\[\\\\t \\]*\\\\\\[\\[^\\n\\]*\\\\\\]\" } } */"}, {"sha": "b59535a9b5fb81ee8bdb0efa1c33010c377de63f", "filename": "gcc/testsuite/gcc.target/aarch64/vsqrt.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt.c?ref=77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "patch": "@@ -0,0 +1,66 @@\n+\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"arm_neon.h\"\n+#include \"stdio.h\"\n+\n+extern void abort (void);\n+\n+void\n+test_square_root_v2sf ()\n+{\n+  float32x2_t val = {4.0f, 9.0f};\n+  float32x2_t res;\n+\n+  res = vsqrt_f32 (val);\n+\n+  if (vget_lane_f32 (res, 0) != 2.0f)\n+    abort ();\n+  if (vget_lane_f32 (res, 1) != 3.0f)\n+    abort ();\n+}\n+\n+void\n+test_square_root_v4sf ()\n+{\n+  float32x4_t val = {4.0f, 9.0f, 16.0f, 25.0f};\n+  float32x4_t res;\n+\n+  res = vsqrtq_f32 (val);\n+\n+  if (vgetq_lane_f32 (res, 0) != 2.0f)\n+    abort ();\n+  if (vgetq_lane_f32 (res, 1) != 3.0f)\n+    abort ();\n+  if (vgetq_lane_f32 (res, 2) != 4.0f)\n+    abort ();\n+  if (vgetq_lane_f32 (res, 3) != 5.0f)\n+    abort ();\n+}\n+\n+void\n+test_square_root_v2df ()\n+{\n+  float64x2_t val = {4.0, 9.0};\n+  float64x2_t res;\n+\n+  res = vsqrtq_f64 (val);\n+\n+  if (vgetq_lane_f64 (res, 0) != 2.0)\n+    abort ();\n+\n+  if (vgetq_lane_f64 (res, 1) != 3.0)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  test_square_root_v2sf ();\n+  test_square_root_v4sf ();\n+  test_square_root_v2df ();\n+\n+  return 0;\n+}"}]}