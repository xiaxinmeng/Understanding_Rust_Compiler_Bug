{"sha": "d38f8441bed01127358d46196aea2a2f55d0c949", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4Zjg0NDFiZWQwMTEyNzM1OGQ0NjE5NmFlYTJhMmY1NWQwYzk0OQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:26Z"}, "message": "VAX: Fix predicates and constraints for bit-field comparison insns\n\nIt makes no sense for insn operand predicates, as long as they accept a\nregister operand, to be more restrictive than the set of the associated\nconstraints, because expand will choose the insn based on the relevant\noperand being a pseudo register then and reload keep it happily as a\nmemory reference if a constraint permits it.  So the restriction posed\nby such a predicate will be happily ignored, and moreover if a splitter\nis added, such as required for MODE_CC support, the new instructions\nwill reject the original operands supplied, causing an ICE.  An actual\nexample will be given with a subsequent change.\n\nTherefore, similarly to EXTV/EXTZV/INSV insns, remove inconsistencies\nwith predicates and constraints of bit-field comparison insns, observing\nthat a bit-field located in memory is byte-addressed by the respective\nmachine instructions and therefore SImode may only be used with a\nregister or an offsettable memory operand (i.e. not an indexed,\npre-decremented, or post-incremented one).\n\nAlso give the insns names, for easier reference here and elsewhere.\n\n\tgcc/\n\t* config/vax/vax.md (*cmpv_2): Name insn.\n\t(*cmpv, *cmpzv, *cmpzv_2): Likewise.  Fix location predicate and\n\tconstraint.", "tree": {"sha": "663e80b995a2f2e26500effb77105eb6fd89d420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/663e80b995a2f2e26500effb77105eb6fd89d420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38f8441bed01127358d46196aea2a2f55d0c949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38f8441bed01127358d46196aea2a2f55d0c949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38f8441bed01127358d46196aea2a2f55d0c949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38f8441bed01127358d46196aea2a2f55d0c949/comments", "author": null, "committer": null, "parents": [{"sha": "0a9ea215f7400612f6dae2c77351e503798ea599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9ea215f7400612f6dae2c77351e503798ea599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9ea215f7400612f6dae2c77351e503798ea599"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "34fdf67bb6d005ef66d0cf5704ba676d1b24b244", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38f8441bed01127358d46196aea2a2f55d0c949/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38f8441bed01127358d46196aea2a2f55d0c949/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=d38f8441bed01127358d46196aea2a2f55d0c949", "patch": "@@ -853,20 +853,20 @@\n \f\n ;; Register and non-offsettable-memory SImode cases of bit-field insns.\n \n-(define_insn \"\"\n+(define_insn \"*cmpv\"\n   [(set (cc0)\n \t(compare\n-\t (sign_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t (sign_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"ro\")\n \t\t\t  (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t  (match_operand:SI 2 \"general_operand\" \"nrmT\"))\n \t (match_operand:SI 3 \"general_operand\" \"nrmT\")))]\n   \"\"\n   \"cmpv %2,%1,%0,%3\")\n \n-(define_insn \"\"\n+(define_insn \"*cmpzv\"\n   [(set (cc0)\n \t(compare\n-\t (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"ro\")\n \t\t\t  (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t  (match_operand:SI 2 \"general_operand\" \"nrmT\"))\n \t (match_operand:SI 3 \"general_operand\" \"nrmT\")))]\n@@ -921,7 +921,7 @@\n ;; nonimmediate_operand is used to make sure that mode-ambiguous cases\n ;; don't match these (and therefore match the cases above instead).\n \n-(define_insn \"\"\n+(define_insn \"*cmpv_2\"\n   [(set (cc0)\n \t(compare\n \t (sign_extract:SI (match_operand:QI 0 \"memory_operand\" \"m\")\n@@ -931,10 +931,10 @@\n   \"\"\n   \"cmpv %2,%1,%0,%3\")\n \n-(define_insn \"\"\n+(define_insn \"*cmpzv_2\"\n   [(set (cc0)\n \t(compare\n-\t (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"rm\")\n+\t (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t  (match_operand:QI 1 \"general_operand\" \"g\")\n \t\t\t  (match_operand:SI 2 \"general_operand\" \"nrmT\"))\n \t (match_operand:SI 3 \"general_operand\" \"nrmT\")))]"}]}