{"sha": "eb337d28c32b1b460cc85b3c00f8418ca535c77b", "node_id": "C_kwDOANBUbNoAKGViMzM3ZDI4YzMyYjFiNDYwY2M4NWIzYzAwZjg0MThjYTUzNWM3N2I", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-07T10:04:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-13T07:43:36Z"}, "message": "tree-optimization/109046 - re-combine complex loads\n\nThe following addresses PR109046 by adding an optimization to forwprop\nto combine a piecewise complex load to a complex load when there are\nno other uses of the components.  That's something useful in general and\neasier to do than avoiding the splitting in complex lowering.\n\nThe testcase exercises both the manual and the complex lowering case.\n\n\tPR tree-optimization/109046\n\t* tree-ssa-forwprop.cc (pass_forwprop::execute): Combine\n\tpiecewise complex loads.\n\n\t* gcc.dg/tree-ssa/forwprop-39.c: New testcase.", "tree": {"sha": "a38b73b69ffe7491022a0bd018213eee91b7fd8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a38b73b69ffe7491022a0bd018213eee91b7fd8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb337d28c32b1b460cc85b3c00f8418ca535c77b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb337d28c32b1b460cc85b3c00f8418ca535c77b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb337d28c32b1b460cc85b3c00f8418ca535c77b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb337d28c32b1b460cc85b3c00f8418ca535c77b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ea73185a84fd42e86c4c823043f6063576aac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ea73185a84fd42e86c4c823043f6063576aac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ea73185a84fd42e86c4c823043f6063576aac5"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "eb2930e77fd4e6dc1e976a94e41dad6c4a587655", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-39.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb337d28c32b1b460cc85b3c00f8418ca535c77b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb337d28c32b1b460cc85b3c00f8418ca535c77b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-39.c?ref=eb337d28c32b1b460cc85b3c00f8418ca535c77b", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -O2 -fdump-tree-forwprop1 -fdump-tree-optimized\" } */\n+\n+#include <complex.h>\n+\n+extern void push1(void *p, float _Complex x);\n+void foo (void *q, float _Complex *x)\n+{\n+  float r = __real *x;\n+  float i = __imag *x;\n+  push1 (q, CMPLXF (r, i));\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"COMPLEX_EXPR\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-not \"REALPART_EXPR\" \"optimized\" } } */"}, {"sha": "e34f08889542ad56ddd550fc0d9e8a1ac012a5a9", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb337d28c32b1b460cc85b3c00f8418ca535c77b/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb337d28c32b1b460cc85b3c00f8418ca535c77b/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=eb337d28c32b1b460cc85b3c00f8418ca535c77b", "patch": "@@ -3669,7 +3669,8 @@ pass_forwprop::execute (function *fun)\n \t      /* Rewrite stores of a single-use complex build expression\n \t         to component-wise stores.  */\n \t      use_operand_p use_p;\n-\t      gimple *use_stmt;\n+\t      gimple *use_stmt, *def1, *def2;\n+\t      tree rhs2;\n \t      if (single_imm_use (lhs, &use_p, &use_stmt)\n \t\t  && gimple_store_p (use_stmt)\n \t\t  && !gimple_has_volatile_ops (use_stmt)\n@@ -3703,6 +3704,36 @@ pass_forwprop::execute (function *fun)\n \t\t  release_defs (stmt);\n \t\t  gsi_remove (&gsi, true);\n \t\t}\n+\t      /* Rewrite a component-wise load of a complex to a complex\n+\t\t load if the components are not used separately.  */\n+\t      else if (TREE_CODE (rhs) == SSA_NAME\n+\t\t       && has_single_use (rhs)\n+\t\t       && ((rhs2 = gimple_assign_rhs2 (stmt)), true)\n+\t\t       && TREE_CODE (rhs2) == SSA_NAME\n+\t\t       && has_single_use (rhs2)\n+\t\t       && (def1 = SSA_NAME_DEF_STMT (rhs),\n+\t\t\t   gimple_assign_load_p (def1))\n+\t\t       && (def2 = SSA_NAME_DEF_STMT (rhs2),\n+\t\t\t   gimple_assign_load_p (def2))\n+\t\t       && (gimple_vuse (def1) == gimple_vuse (def2))\n+\t\t       && !gimple_has_volatile_ops (def1)\n+\t\t       && !gimple_has_volatile_ops (def2)\n+\t\t       && gimple_assign_rhs_code (def1) == REALPART_EXPR\n+\t\t       && gimple_assign_rhs_code (def2) == IMAGPART_EXPR\n+\t\t       && operand_equal_p (TREE_OPERAND (gimple_assign_rhs1\n+\t\t\t\t\t\t\t\t (def1), 0),\n+\t\t\t\t\t   TREE_OPERAND (gimple_assign_rhs1\n+\t\t\t\t\t\t\t\t (def2), 0)))\n+\t\t{\n+\t\t  tree cl = TREE_OPERAND (gimple_assign_rhs1 (def1), 0);\n+\t\t  gimple_assign_set_rhs_from_tree (&gsi, unshare_expr (cl));\n+\t\t  gcc_assert (gsi_stmt (gsi) == stmt);\n+\t\t  gimple_set_vuse (stmt, gimple_vuse (def1));\n+\t\t  gimple_set_modified (stmt, true);\n+\t\t  gimple_stmt_iterator gsi2 = gsi_for_stmt (def1);\n+\t\t  gsi_remove (&gsi, false);\n+\t\t  gsi_insert_after (&gsi2, stmt, GSI_SAME_STMT);\n+\t\t}\n \t      else\n \t\tgsi_next (&gsi);\n \t    }"}]}