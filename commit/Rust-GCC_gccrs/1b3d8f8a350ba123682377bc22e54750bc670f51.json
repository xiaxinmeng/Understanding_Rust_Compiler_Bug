{"sha": "1b3d8f8a350ba123682377bc22e54750bc670f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzZDhmOGEzNTBiYTEyMzY4MjM3N2JjMjJlNTQ3NTBiYzY3MGY1MQ==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-09-01T01:03:29Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-09-01T01:03:29Z"}, "message": "stmt.c (expand_asm_operands): Twiddle generating_concat_p so that CONCATs are not generated for ASMs.\n\n* stmt.c (expand_asm_operands): Twiddle generating_concat_p\nso that CONCATs are not generated for ASMs.\n* emit-rtl.c (gen_reg_rtx): Don't generate CONCATs when\nnot generating_concat_p.\n* function.c (pop_function_context_from): Reset\ngenerating_concat_p.\n(prepare_function_start): Likewise.\n* rtl.c (generating_concat_p): Define.\n* rtl.h (generating_concat_p): Declare.\n* toplev.c (rest_of_compilation): No CONCATs after RTL generation.\n\nFrom-SVN: r36088", "tree": {"sha": "72e5e800965de1a0aefec76ff7020c0d0810bdc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e5e800965de1a0aefec76ff7020c0d0810bdc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3d8f8a350ba123682377bc22e54750bc670f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3d8f8a350ba123682377bc22e54750bc670f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3d8f8a350ba123682377bc22e54750bc670f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3d8f8a350ba123682377bc22e54750bc670f51/comments", "author": null, "committer": null, "parents": [{"sha": "b7fc330e447b35d8b6192ab0569e90d736f79406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc330e447b35d8b6192ab0569e90d736f79406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc330e447b35d8b6192ab0569e90d736f79406"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "f2f017df187f6577f1f6ac174ff3379bad15f8bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -1,3 +1,16 @@\n+2000-08-31  Geoffrey Keating  <geoffk@cygnus.com>\n+\n+\t* stmt.c (expand_asm_operands): Twiddle generating_concat_p\n+\tso that CONCATs are not generated for ASMs.\n+\t* emit-rtl.c (gen_reg_rtx): Don't generate CONCATs when\n+\tnot generating_concat_p.\n+\t* function.c (pop_function_context_from): Reset\n+\tgenerating_concat_p.\n+\t(prepare_function_start): Likewise.\n+\t* rtl.c (generating_concat_p): Define.\n+\t* rtl.h (generating_concat_p): Declare.\n+\t* toplev.c (rest_of_compilation): No CONCATs after RTL generation.\n+\n 2000-08-22  Philipp Thomas  <pthomas@suse.de>\n             Masanobu Yuhara <yuhara@flab.fujitsu.co.jp>\n "}, {"sha": "9a3258248bd259512649dc71203a28d15e231817", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -539,8 +539,9 @@ gen_reg_rtx (mode)\n   if (no_new_pseudos)\n     abort ();\n \n-  if (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT\n-      || GET_MODE_CLASS (mode) == MODE_COMPLEX_INT)\n+  if (generating_concat_p\n+      && (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT\n+\t  || GET_MODE_CLASS (mode) == MODE_COMPLEX_INT))\n     {\n       /* For complex modes, don't make a single pseudo.\n \t Instead, make a CONCAT of two pseudos."}, {"sha": "4141c4132642d21e581e5c270d509ed5661daaf8", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -413,6 +413,7 @@ pop_function_context_from (context)\n   /* Reset variables that have known state during rtx generation.  */\n   rtx_equal_function_value_matters = 1;\n   virtuals_instantiated = 0;\n+  generating_concat_p = 1;\n }\n \n void\n@@ -5920,6 +5921,9 @@ prepare_function_start ()\n   /* Indicate that we have not instantiated virtual registers yet.  */\n   virtuals_instantiated = 0;\n \n+  /* Indicate that we want CONCATs now.  */\n+  generating_concat_p = 1;\n+\n   /* Indicate we have no need of a frame pointer yet.  */\n   frame_pointer_needed = 0;\n "}, {"sha": "ad89fff092068b9ec850675a2426efe17359fd71", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -578,6 +578,9 @@ shallow_copy_rtx (orig)\n \f\n /* This is 1 until after the rtl generation pass.  */\n int rtx_equal_function_value_matters;\n+\n+/* Nonzero when we are generating CONCATs.  */\n+int generating_concat_p;\n \f\n /* Return 1 if X and Y are identical-looking rtx's.\n    This is the Lisp function EQUAL for rtx arguments.  */"}, {"sha": "42b8f425728b829692c179ce9fe42ad15d31ef4c", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -1102,6 +1102,9 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n    This is 1 until after the rtl generation pass.  */\n extern int rtx_equal_function_value_matters;\n \n+/* Nonzero when we are generating CONCATs.  */\n+extern int generating_concat_p;\n+\n /* Generally useful functions.  */\n \n /* The following functions accept a wide integer argument.  Rather than"}, {"sha": "f2763e7396f7bd254495a3799973fabe2f5be907", "filename": "gcc/stmt.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -1330,6 +1330,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n     = (enum machine_mode *) alloca (noutputs * sizeof (enum machine_mode));\n   /* The insn we have emitted.  */\n   rtx insn;\n+  int old_generating_concat_p = generating_concat_p;\n \n   /* An ASM with no outputs needs to be treated as volatile, for now.  */\n   if (noutputs == 0)\n@@ -1537,6 +1538,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t Make the asm insn write into that, then our caller will copy it to\n \t the real output operand.  Likewise for promoted variables.  */\n \n+      generating_concat_p = 0;\n+\n       real_output_rtx[i] = NULL_RTX;\n       if ((TREE_CODE (val) == INDIRECT_REF\n \t   && allows_mem)\n@@ -1556,7 +1559,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n \t  if (! allows_reg && GET_CODE (output_rtx[i]) != MEM)\n \t    error (\"output number %d not directly addressable\", i);\n-\t  if (! allows_mem && GET_CODE (output_rtx[i]) == MEM)\n+\t  if ((! allows_mem && GET_CODE (output_rtx[i]) == MEM)\n+\t      || GET_CODE (output_rtx[i]) == CONCAT)\n \t    {\n     \t      real_output_rtx[i] = protect_from_queue (output_rtx[i], 1);\n \t      output_rtx[i] = gen_reg_rtx (GET_MODE (output_rtx[i]));\n@@ -1570,6 +1574,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  TREE_VALUE (tail) = make_tree (type, output_rtx[i]);\n \t}\n \n+      generating_concat_p = old_generating_concat_p;\n+\n       if (is_inout)\n \t{\n \t  inout_mode[ninout] = TYPE_MODE (TREE_TYPE (TREE_VALUE (tail)));\n@@ -1727,6 +1733,11 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       op = expand_expr (TREE_VALUE (tail), NULL_RTX, VOIDmode, 0);\n \n+      /* Never pass a CONCAT to an ASM.  */\n+      generating_concat_p = 0;\n+      if (GET_CODE (op) == CONCAT)\n+\top = force_reg (GET_MODE (op), op);\n+\n       if (asm_operand_ok (op, constraint) <= 0)\n \t{\n \t  if (allows_reg)\n@@ -1759,6 +1770,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t       not satisfied.  */\n \t    warning (\"asm operand %d probably doesn't match constraints\", i);\n \t}\n+      generating_concat_p = old_generating_concat_p;\n       XVECEXP (body, 3, i) = op;\n \n       XVECEXP (body, 4, i)      /* constraints */\n@@ -1770,6 +1782,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   /* Protect all the operands from the queue now that they have all been\n      evaluated.  */\n \n+  generating_concat_p = 0;\n+\n   for (i = 0; i < ninputs - ninout; i++)\n     XVECEXP (body, 3, i) = protect_from_queue (XVECEXP (body, 3, i), 0);\n \n@@ -1787,6 +1801,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t= gen_rtx_ASM_INPUT (inout_mode[i], digit_strings[j]);\n     }\n \n+  generating_concat_p = old_generating_concat_p;\n+\n   /* Now, for each output, construct an rtx\n      (set OUTPUT (asm_operands INSN OUTPUTNUMBER OUTPUTCONSTRAINT\n \t\t\t       ARGVEC CONSTRAINTS))"}, {"sha": "20c6385edcf239583830ff490271a2cc37fdeff8", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3d8f8a350ba123682377bc22e54750bc670f51/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1b3d8f8a350ba123682377bc22e54750bc670f51", "patch": "@@ -2662,6 +2662,10 @@ rest_of_compilation (decl)\n \n   timevar_push (TV_REST_OF_COMPILATION);\n \n+  /* Now that we're out of the frontend, we shouldn't have any more\n+     CONCATs anywhere.  */\n+  generating_concat_p = 0;\n+\n   /* When processing delayed functions, prepare_function_start() won't\n      have been run to re-initialize it.  */\n   cse_not_expected = ! optimize;"}]}