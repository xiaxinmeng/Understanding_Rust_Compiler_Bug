{"sha": "da13e4ebebb07a47d5fb50eab8893f8fe38683df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExM2U0ZWJlYmIwN2E0N2Q1ZmI1MGVhYjg4OTNmOGZlMzg2ODNkZg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2021-06-23T08:09:29Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2021-06-23T08:17:14Z"}, "message": "fortran: Fix deref of optional in gen. code. [PR100337]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100337\n\t* trans-intrinsic.c (conv_co_collective): Check stat for null ptr\n\tbefore dereferrencing.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100337\n\t* gfortran.dg/coarray_collectives_17.f90: New test.", "tree": {"sha": "be97db67a3e6d107e10b87906ced9b9e6474ba04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be97db67a3e6d107e10b87906ced9b9e6474ba04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da13e4ebebb07a47d5fb50eab8893f8fe38683df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da13e4ebebb07a47d5fb50eab8893f8fe38683df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da13e4ebebb07a47d5fb50eab8893f8fe38683df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da13e4ebebb07a47d5fb50eab8893f8fe38683df/comments", "author": null, "committer": null, "parents": [{"sha": "679506c3830ea1a93c755413609bfac3538e2cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679506c3830ea1a93c755413609bfac3538e2cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679506c3830ea1a93c755413609bfac3538e2cbd"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "46670baae558d564c26b0c391a65d4fb05de9bb0", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da13e4ebebb07a47d5fb50eab8893f8fe38683df/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da13e4ebebb07a47d5fb50eab8893f8fe38683df/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=da13e4ebebb07a47d5fb50eab8893f8fe38683df", "patch": "@@ -11242,8 +11242,28 @@ conv_co_collective (gfc_code *code)\n   if (flag_coarray == GFC_FCOARRAY_SINGLE)\n     {\n       if (stat != NULL_TREE)\n-\tgfc_add_modify (&block, stat,\n-\t\t\tfold_convert (TREE_TYPE (stat), integer_zero_node));\n+\t{\n+\t  /* For optional stats, check the pointer is valid before zero'ing.  */\n+\t  if (gfc_expr_attr (stat_expr).optional)\n+\t    {\n+\t      tree tmp;\n+\t      stmtblock_t ass_block;\n+\t      gfc_start_block (&ass_block);\n+\t      gfc_add_modify (&ass_block, stat,\n+\t\t\t      fold_convert (TREE_TYPE (stat),\n+\t\t\t\t\t    integer_zero_node));\n+\t      tmp = fold_build2 (NE_EXPR, logical_type_node,\n+\t\t\t\t gfc_build_addr_expr (NULL_TREE, stat),\n+\t\t\t\t null_pointer_node);\n+\t      tmp = fold_build3 (COND_EXPR, void_type_node, tmp,\n+\t\t\t\t gfc_finish_block (&ass_block),\n+\t\t\t\t build_empty_stmt (input_location));\n+\t      gfc_add_expr_to_block (&block, tmp);\n+\t    }\n+\t  else\n+\t    gfc_add_modify (&block, stat,\n+\t\t\t    fold_convert (TREE_TYPE (stat), integer_zero_node));\n+\t}\n       return gfc_finish_block (&block);\n     }\n "}, {"sha": "84a6645865e07f79c1823c307c1ea35921bf5add", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_17.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da13e4ebebb07a47d5fb50eab8893f8fe38683df/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da13e4ebebb07a47d5fb50eab8893f8fe38683df/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_17.f90?ref=da13e4ebebb07a47d5fb50eab8893f8fe38683df", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR 100337\n+! Test case inspired by code submitted by Brad Richardson\n+\n+program main\n+    implicit none\n+\n+    integer, parameter :: MESSAGE = 42\n+    integer :: result\n+\n+    call myco_broadcast(MESSAGE, result, 1)\n+\n+    if (result /= MESSAGE) error stop 1\n+contains\n+    subroutine myco_broadcast(m, r, source_image, stat, errmsg)\n+        integer, intent(in) :: m\n+        integer, intent(out) :: r\n+        integer, intent(in) :: source_image\n+        integer, intent(out), optional :: stat\n+        character(len=*), intent(inout), optional :: errmsg\n+\n+        integer :: data_length \n+\n+        data_length = 1\n+\n+        call co_broadcast(data_length, source_image, stat, errmsg)\n+\n+        if (present(stat)) then\n+            if (stat /= 0) return\n+        end if\n+\n+        if (this_image() == source_image) then\n+            r = m\n+        end if\n+\n+        call co_broadcast(r, source_image, stat, errmsg)\n+    end subroutine\n+\n+end program\n+"}]}