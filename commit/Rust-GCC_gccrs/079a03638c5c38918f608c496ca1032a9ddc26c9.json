{"sha": "079a03638c5c38918f608c496ca1032a9ddc26c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5YTAzNjM4YzVjMzg5MThmNjA4YzQ5NmNhMTAzMmE5ZGRjMjZjOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-08-07T11:49:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-08-07T11:49:10Z"}, "message": "i386: Don't use frame pointer without stack access\n\nWhen there is no stack access, there is no need to use frame pointer\neven if -fno-omit-frame-pointer is used.\n\ngcc/\n\n\tPR target/81736\n\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Renamed\n\tto ...\n\t(ix86_finalize_stack_frame_flags): This.  Also clear\n\tframe_pointer_needed if -fno-omit-frame-pointer is used without\n\tstack access.\n\t(ix86_expand_prologue): Replace ix86_finalize_stack_realign_flags\n\twith ix86_finalize_stack_frame_flags.\n\t(ix86_expand_epilogue): Likewise.\n\t(ix86_expand_split_stack_prologue): Likewise.\n\ngcc/testsuite/\n\n\tPR target/81736\n\t* gcc.target/i386/pr81736-1.c: New test.\n\t* gcc.target/i386/pr81736-2.c: Likewise.\n\t* gcc.target/i386/pr81736-3.c: Likewise.\n\t* gcc.target/i386/pr81736-4.c: Likewise.\n\nFrom-SVN: r250916", "tree": {"sha": "8789d79f13ef45850fab00accf16b4d49977cbf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8789d79f13ef45850fab00accf16b4d49977cbf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/079a03638c5c38918f608c496ca1032a9ddc26c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079a03638c5c38918f608c496ca1032a9ddc26c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079a03638c5c38918f608c496ca1032a9ddc26c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079a03638c5c38918f608c496ca1032a9ddc26c9/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "356512c0660a1f549c48128ab63cc56077d05db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356512c0660a1f549c48128ab63cc56077d05db2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356512c0660a1f549c48128ab63cc56077d05db2"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "01eb3354dc59a03f92cfc064f168abb42688d1c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -1,3 +1,16 @@\n+2017-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/81736\n+\t* config/i386/i386.c (ix86_finalize_stack_realign_flags): Renamed\n+\tto ...\n+\t(ix86_finalize_stack_frame_flags): This.  Also clear\n+\tframe_pointer_needed if -fno-omit-frame-pointer is used without\n+\tstack access.\n+\t(ix86_expand_prologue): Replace ix86_finalize_stack_realign_flags\n+\twith ix86_finalize_stack_frame_flags.\n+\t(ix86_expand_epilogue): Likewise.\n+\t(ix86_expand_split_stack_prologue): Likewise.\n+\n 2017-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/81743"}, {"sha": "4683da3f24d1f2c7d0d2dd12c903cb2badfc2cac", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -14116,22 +14116,24 @@ output_probe_stack_range (rtx reg, rtx end)\n   return \"\";\n }\n \n-/* Finalize stack_realign_needed flag, which will guide prologue/epilogue\n-   to be generated in correct form.  */\n+/* Finalize stack_realign_needed and frame_pointer_needed flags, which\n+   will guide prologue/epilogue to be generated in correct form.  */\n+\n static void\n-ix86_finalize_stack_realign_flags (void)\n+ix86_finalize_stack_frame_flags (void)\n {\n   /* Check if stack realign is really needed after reload, and\n      stores result in cfun */\n   unsigned int incoming_stack_boundary\n     = (crtl->parm_stack_boundary > ix86_incoming_stack_boundary\n        ? crtl->parm_stack_boundary : ix86_incoming_stack_boundary);\n-  unsigned int stack_realign\n+  bool stack_realign\n     = (incoming_stack_boundary\n        < (crtl->is_leaf && !ix86_current_function_calls_tls_descriptor\n \t  ? crtl->max_used_stack_slot_alignment\n \t  : crtl->stack_alignment_needed));\n   bool recompute_frame_layout_p = false;\n+  bool omit_frame_pointer = flag_omit_frame_pointer != 0;\n \n   if (crtl->stack_realign_finalized)\n     {\n@@ -14142,13 +14144,13 @@ ix86_finalize_stack_realign_flags (void)\n     }\n \n   /* If the only reason for frame_pointer_needed is that we conservatively\n-     assumed stack realignment might be needed, but in the end nothing that\n-     needed the stack alignment had been spilled, clear frame_pointer_needed\n-     and say we don't need stack realignment.  */\n-  if (stack_realign\n+     assumed stack realignment might be needed or -fno-omit-frame-pointer\n+     is used, but in the end nothing that needed the stack alignment had\n+     been spilled nor stack access, clear frame_pointer_needed and say we\n+     don't need stack realignment.  */\n+  if (stack_realign == omit_frame_pointer\n       && frame_pointer_needed\n       && crtl->is_leaf\n-      && flag_omit_frame_pointer\n       && crtl->sp_is_unchanging\n       && !ix86_current_function_calls_tls_descriptor\n       && !crtl->accesses_prior_frames\n@@ -14339,7 +14341,7 @@ ix86_expand_prologue (void)\n   if (ix86_function_naked (current_function_decl))\n     return;\n \n-  ix86_finalize_stack_realign_flags ();\n+  ix86_finalize_stack_frame_flags ();\n \n   /* DRAP should not coexist with stack_realign_fp */\n   gcc_assert (!(crtl->drap_reg && stack_realign_fp));\n@@ -15203,7 +15205,7 @@ ix86_expand_epilogue (int style)\n       return;\n     }\n \n-  ix86_finalize_stack_realign_flags ();\n+  ix86_finalize_stack_frame_flags ();\n   frame = m->frame;\n \n   m->fs.sp_realigned = stack_realign_fp;\n@@ -15738,7 +15740,7 @@ ix86_expand_split_stack_prologue (void)\n \n   gcc_assert (flag_split_stack && reload_completed);\n \n-  ix86_finalize_stack_realign_flags ();\n+  ix86_finalize_stack_frame_flags ();\n   frame = cfun->machine->frame;\n   allocate = frame.stack_pointer_offset - INCOMING_FRAME_SP_OFFSET;\n "}, {"sha": "0e7503286450f1f17e2ee6d7a8f9124bcd924b86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -1,3 +1,11 @@\n+2017-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/81736\n+\t* gcc.target/i386/pr81736-1.c: New test.\n+\t* gcc.target/i386/pr81736-2.c: Likewise.\n+\t* gcc.target/i386/pr81736-3.c: Likewise.\n+\t* gcc.target/i386/pr81736-4.c: Likewise.\n+\n 2017-08-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/81737"}, {"sha": "92c7bc97a0d092577a8278a1ed5df38bba5c5982", "filename": "gcc/testsuite/gcc.target/i386/pr81736-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-1.c?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+extern int i;\n+\n+int\n+foo (void)\n+{\n+  return i;\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "a3720879937eedaf36a75e6bc6d80454b18faa55", "filename": "gcc/testsuite/gcc.target/i386/pr81736-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-2.c?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+int\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (int i)\n+{\n+  return i;\n+}\n+\n+/* No need to use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "c3bde7dd9334e604b3a1e920a85d016437a5656b", "filename": "gcc/testsuite/gcc.target/i386/pr81736-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-3.c?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+void\n+foo (void)\n+{\n+  asm (\"# \" : : : \"ebx\");\n+}\n+\n+/* Need to use a frame pointer.  */\n+/* { dg-final { scan-assembler \"%\\[re\\]bp\" } } */"}, {"sha": "25f50016a645d91e7dbddcf3a45ba98486a5771b", "filename": "gcc/testsuite/gcc.target/i386/pr81736-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/079a03638c5c38918f608c496ca1032a9ddc26c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81736-4.c?ref=079a03638c5c38918f608c496ca1032a9ddc26c9", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer\" } */\n+\n+int\n+foo (int i1, int i2, int i3, int i4, int i5, int i6, int i7)\n+{\n+  return i7;\n+}\n+\n+/* Need to use a frame pointer.  */\n+/* { dg-final { scan-assembler \"%\\[re\\]bp\" } } */"}]}