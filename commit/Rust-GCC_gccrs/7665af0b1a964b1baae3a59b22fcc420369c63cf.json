{"sha": "7665af0b1a964b1baae3a59b22fcc420369c63cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2NWFmMGIxYTk2NGIxYmFhZTNhNTliMjJmY2M0MjAzNjljNjNjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-10T09:34:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-10T09:34:53Z"}, "message": "i386: Improve single operand AVX512F permutations [PR80355]\n\nOn the following testcase we emit\n\tvmovdqa32\t.LC0(%rip), %zmm1\n\tvpermd\t%zmm0, %zmm1, %zmm0\nand\n\tvmovdqa64\t.LC1(%rip), %zmm1\n\tvpermq\t%zmm0, %zmm1, %zmm0\ninstead of\n\tvshufi32x4\t$78, %zmm0, %zmm0, %zmm0\nand\n\tvshufi64x2\t$78, %zmm0, %zmm0, %zmm0\nwe can emit with the patch.  We have patterns that match two argument\npermutations for vshuf[if]*, but for one argument it doesn't trigger.\nEither we can add two patterns for that, or we would need to add another\nroutine to i386-expand.c that would transform under certain condition\nthese cases to the two argument vshuf*, doing it in sse.md looked simpler.\nWe don't need this for 32-byte vectors, we already emit single insn\npermutation that doesn't need memory op there.\n\n2021-08-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/80355\n\t* config/i386/sse.md (*avx512f_shuf_<shuffletype>64x2_1<mask_name>_1,\n\t*avx512f_shuf_<shuffletype>32x4_1<mask_name>_1): New define_insn\n\tpatterns.\n\n\t* gcc.target/i386/avx512f-pr80355-1.c: New test.", "tree": {"sha": "e441dfbd9f7b4201bc58b550a857fc8e4a8adce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e441dfbd9f7b4201bc58b550a857fc8e4a8adce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7665af0b1a964b1baae3a59b22fcc420369c63cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7665af0b1a964b1baae3a59b22fcc420369c63cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7665af0b1a964b1baae3a59b22fcc420369c63cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7665af0b1a964b1baae3a59b22fcc420369c63cf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40c6a50fd4da342c87a715ae83927a37797e094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c40c6a50fd4da342c87a715ae83927a37797e094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c40c6a50fd4da342c87a715ae83927a37797e094"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "3957c86c3dfc254563a718d577256c25bbaaf41b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7665af0b1a964b1baae3a59b22fcc420369c63cf/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7665af0b1a964b1baae3a59b22fcc420369c63cf/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7665af0b1a964b1baae3a59b22fcc420369c63cf", "patch": "@@ -15336,6 +15336,42 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*avx512f_shuf_<shuffletype>64x2_1<mask_name>_1\"\n+  [(set (match_operand:V8FI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8FI\n+\t  (match_operand:V8FI 1 \"register_operand\" \"v\")\n+\t  (parallel [(match_operand 2 \"const_0_to_7_operand\")\n+\t\t     (match_operand 3 \"const_0_to_7_operand\")\n+\t\t     (match_operand 4 \"const_0_to_7_operand\")\n+\t\t     (match_operand 5 \"const_0_to_7_operand\")\n+\t\t     (match_operand 6 \"const_0_to_7_operand\")\n+\t\t     (match_operand 7 \"const_0_to_7_operand\")\n+\t\t     (match_operand 8 \"const_0_to_7_operand\")\n+\t\t     (match_operand 9 \"const_0_to_7_operand\")])))]\n+  \"TARGET_AVX512F\n+   && (INTVAL (operands[2]) & 1) == 0\n+   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n+   && (INTVAL (operands[4]) & 1) == 0\n+   && INTVAL (operands[4]) == INTVAL (operands[5]) - 1\n+   && (INTVAL (operands[6]) & 1) == 0\n+   && INTVAL (operands[6]) == INTVAL (operands[7]) - 1\n+   && (INTVAL (operands[8]) & 1) == 0\n+   && INTVAL (operands[8]) == INTVAL (operands[9]) - 1\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[2]) / 2;\n+  mask |= INTVAL (operands[4]) / 2 << 2;\n+  mask |= INTVAL (operands[6]) / 2 << 4;\n+  mask |= INTVAL (operands[8]) / 2 << 6;\n+  operands[2] = GEN_INT (mask);\n+\n+  return \"vshuf<shuffletype>64x2\\t{%2, %1, %1, %0<mask_operand10>|%0<mask_operand10>, %1, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"avx512vl_shuf_<shuffletype>32x4_mask\"\n   [(match_operand:VI4F_256 0 \"register_operand\")\n    (match_operand:VI4F_256 1 \"register_operand\")\n@@ -15482,6 +15518,58 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"*avx512f_shuf_<shuffletype>32x4_1<mask_name>_1\"\n+  [(set (match_operand:V16FI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16FI\n+\t  (match_operand:V16FI 1 \"register_operand\" \"v\")\n+\t  (parallel [(match_operand 2 \"const_0_to_15_operand\")\n+\t\t     (match_operand 3 \"const_0_to_15_operand\")\n+\t\t     (match_operand 4 \"const_0_to_15_operand\")\n+\t\t     (match_operand 5 \"const_0_to_15_operand\")\n+\t\t     (match_operand 6 \"const_0_to_15_operand\")\n+\t\t     (match_operand 7 \"const_0_to_15_operand\")\n+\t\t     (match_operand 8 \"const_0_to_15_operand\")\n+\t\t     (match_operand 9 \"const_0_to_15_operand\")\n+\t\t     (match_operand 10 \"const_0_to_15_operand\")\n+\t\t     (match_operand 11 \"const_0_to_15_operand\")\n+\t\t     (match_operand 12 \"const_0_to_15_operand\")\n+\t\t     (match_operand 13 \"const_0_to_15_operand\")\n+\t\t     (match_operand 14 \"const_0_to_15_operand\")\n+\t\t     (match_operand 15 \"const_0_to_15_operand\")\n+\t\t     (match_operand 16 \"const_0_to_15_operand\")\n+\t\t     (match_operand 17 \"const_0_to_15_operand\")])))]\n+  \"TARGET_AVX512F\n+   && (INTVAL (operands[2]) & 3) == 0\n+   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n+   && INTVAL (operands[2]) == INTVAL (operands[4]) - 2\n+   && INTVAL (operands[2]) == INTVAL (operands[5]) - 3\n+   && (INTVAL (operands[6]) & 3) == 0\n+   && INTVAL (operands[6]) == INTVAL (operands[7]) - 1\n+   && INTVAL (operands[6]) == INTVAL (operands[8]) - 2\n+   && INTVAL (operands[6]) == INTVAL (operands[9]) - 3\n+   && (INTVAL (operands[10]) & 3) == 0\n+   && INTVAL (operands[10]) == INTVAL (operands[11]) - 1\n+   && INTVAL (operands[10]) == INTVAL (operands[12]) - 2\n+   && INTVAL (operands[10]) == INTVAL (operands[13]) - 3\n+   && (INTVAL (operands[14]) & 3) == 0\n+   && INTVAL (operands[14]) == INTVAL (operands[15]) - 1\n+   && INTVAL (operands[14]) == INTVAL (operands[16]) - 2\n+   && INTVAL (operands[14]) == INTVAL (operands[17]) - 3\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[2]) / 4;\n+  mask |= INTVAL (operands[6]) / 4 << 2;\n+  mask |= INTVAL (operands[10]) / 4 << 4;\n+  mask |= INTVAL (operands[14]) / 4 << 6;\n+  operands[2] = GEN_INT (mask);\n+\n+  return \"vshuf<shuffletype>32x4\\t{%2, %1, %1, %0<mask_operand18>|%0<mask_operand18>, %1, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"avx512f_pshufdv3_mask\"\n   [(match_operand:V16SI 0 \"register_operand\")\n    (match_operand:V16SI 1 \"nonimmediate_operand\")"}, {"sha": "b1ff0102b05d39bedd625fb41d25376fcbdd4839", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr80355-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7665af0b1a964b1baae3a59b22fcc420369c63cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80355-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7665af0b1a964b1baae3a59b22fcc420369c63cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80355-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr80355-1.c?ref=7665af0b1a964b1baae3a59b22fcc420369c63cf", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/80355 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512vl -mno-avx512dq\" } */\n+/* { dg-final { scan-assembler \"\\tvshufi32x4\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tvshufi64x2\\t\" } } */\n+\n+typedef long long V __attribute__((vector_size (64)));\n+typedef int W __attribute__((vector_size (64)));\n+\n+W\n+f0 (W x)\n+{\n+  return __builtin_shuffle (x, (W) { 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7 });\n+}\n+V\n+f1 (V x)\n+{\n+  return __builtin_shuffle (x, (V) { 4, 5, 6, 7, 0, 1, 2, 3 });\n+}"}]}