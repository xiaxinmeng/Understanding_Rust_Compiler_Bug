{"sha": "bc2738455bf4e405cf0ad3d61482b49cd4382113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMyNzM4NDU1YmY0ZTQwNWNmMGFkM2Q2MTQ4MmI0OWNkNDM4MjExMw==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2014-12-13T22:19:18Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-12-13T22:19:18Z"}, "message": "re PR libstdc++/64239 (regex_iterator::operator= should copy match_results::position)\n\n\tPR libstdc++/64239\n\t* include/bits/regex.h (match_results<>::match_results,\n\tmatch_results<>::operator=, match_results<>::position,\n\tmatch_results<>::swap): Remove match_results::_M_in_iterator.\n\tFix ctor/assign/swap.\n\t* include/bits/regex.tcc: (__regex_algo_impl<>,\n\tregex_iterator<>::operator++): Set match_results::_M_begin as\n\t\"start position\".\n\t* testsuite/28_regex/iterators/regex_iterator/char/\n\tstring_position_01.cc: Test cases.\n\nFrom-SVN: r218710", "tree": {"sha": "8fbd14b1bfca1e100c674f1a08fca314b98923e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fbd14b1bfca1e100c674f1a08fca314b98923e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2738455bf4e405cf0ad3d61482b49cd4382113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2738455bf4e405cf0ad3d61482b49cd4382113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2738455bf4e405cf0ad3d61482b49cd4382113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2738455bf4e405cf0ad3d61482b49cd4382113/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6554581713da6cc9bb96cf86cf7a0cece80a448e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6554581713da6cc9bb96cf86cf7a0cece80a448e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6554581713da6cc9bb96cf86cf7a0cece80a448e"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "4e79925ff0fa888a94f1ea764cc3f753093ef0c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bc2738455bf4e405cf0ad3d61482b49cd4382113", "patch": "@@ -1,3 +1,16 @@\n+2014-12-13  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/64239\n+\t* include/bits/regex.h (match_results<>::match_results,\n+\tmatch_results<>::operator=, match_results<>::position,\n+\tmatch_results<>::swap): Remove match_results::_M_in_iterator.\n+\tFix ctor/assign/swap.\n+\t* include/bits/regex.tcc: (__regex_algo_impl<>,\n+\tregex_iterator<>::operator++): Set match_results::_M_begin as\n+\t\"start position\".\n+\t* testsuite/28_regex/iterators/regex_iterator/char/\n+\tstring_position_01.cc: Test cases.\n+\n 2014-12-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/any (any): Remove allocator support and update"}, {"sha": "3afec37ab165234abf8bca28ac40661fd62ad9f8", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=bc2738455bf4e405cf0ad3d61482b49cd4382113", "patch": "@@ -1563,42 +1563,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       explicit\n       match_results(const _Alloc& __a = _Alloc())\n-      : _Base_type(__a), _M_in_iterator(false)\n+      : _Base_type(__a)\n       { }\n \n       /**\n        * @brief Copy constructs a %match_results.\n        */\n-      match_results(const match_results& __rhs)\n-      : _Base_type(__rhs), _M_in_iterator(false)\n-      { }\n+      match_results(const match_results& __rhs) = default;\n \n       /**\n        * @brief Move constructs a %match_results.\n        */\n-      match_results(match_results&& __rhs) noexcept\n-      : _Base_type(std::move(__rhs)), _M_in_iterator(false)\n-      { }\n+      match_results(match_results&& __rhs) noexcept = default;\n \n       /**\n        * @brief Assigns rhs to *this.\n        */\n       match_results&\n-      operator=(const match_results& __rhs)\n-      {\n-\tmatch_results(__rhs).swap(*this);\n-\treturn *this;\n-      }\n+      operator=(const match_results& __rhs) = default;\n \n       /**\n        * @brief Move-assigns rhs to *this.\n        */\n       match_results&\n-      operator=(match_results&& __rhs)\n-      {\n-\tmatch_results(std::move(__rhs)).swap(*this);\n-\treturn *this;\n-      }\n+      operator=(match_results&& __rhs) = default;\n \n       /**\n        * @brief Destroys a %match_results object.\n@@ -1685,13 +1673,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       difference_type\n       position(size_type __sub = 0) const\n       {\n-\t// [28.12.1.4.5]\n-\tif (_M_in_iterator)\n-\t  return __sub < size() ? std::distance(_M_begin,\n-\t\t\t\t\t\t(*this)[__sub].first) : -1;\n-\telse\n-\t  return __sub < size() ? std::distance(this->prefix().first,\n-\t\t\t\t\t\t(*this)[__sub].first) : -1;\n+\treturn __sub < size() ? std::distance(_M_begin,\n+\t\t\t\t\t      (*this)[__sub].first) : -1;\n       }\n \n       /**\n@@ -1876,7 +1859,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       void\n       swap(match_results& __that)\n-      { _Base_type::swap(__that); }\n+      {\n+\t_Base_type::swap(__that);\n+\tswap(_M_begin, __that._M_begin);\n+      }\n       //@}\n \n     private:\n@@ -1894,7 +1880,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t    regex_constants::match_flag_type);\n \n       _Bi_iter _M_begin;\n-      bool     _M_in_iterator;\n     };\n \n   typedef match_results<const char*>             cmatch;"}, {"sha": "b6764288d19fd34e4f16a517a188c81fecd81416", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=bc2738455bf4e405cf0ad3d61482b49cd4382113", "patch": "@@ -62,6 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn false;\n \n       typename match_results<_BiIter, _Alloc>::_Base_type& __res = __m;\n+      __m._M_begin = __s;\n       __res.resize(__re._M_automaton->_M_sub_count() + 2);\n       for (auto& __it : __res)\n \t__it.matched = false;\n@@ -572,7 +573,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      auto& __prefix = _M_match.at(_M_match.size());\n \t\t      __prefix.first = __prefix_first;\n \t\t      __prefix.matched = __prefix.first != __prefix.second;\n-\t\t      _M_match._M_in_iterator = true;\n+\t\t      // [28.12.1.4.5]\n \t\t      _M_match._M_begin = _M_begin;\n \t\t      return *this;\n \t\t    }\n@@ -587,7 +588,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      auto& __prefix = _M_match.at(_M_match.size());\n \t      __prefix.first = __prefix_first;\n \t      __prefix.matched = __prefix.first != __prefix.second;\n-\t      _M_match._M_in_iterator = true;\n+\t      // [28.12.1.4.5]\n \t      _M_match._M_begin = _M_begin;\n \t    }\n \t  else"}, {"sha": "91aa06137f5b0a8dc71a7da4110a7036bc579298", "filename": "libstdc++-v3/testsuite/28_regex/iterators/regex_iterator/char/string_position_01.cc", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2738455bf4e405cf0ad3d61482b49cd4382113/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fiterators%2Fregex_iterator%2Fchar%2Fstring_position_01.cc?ref=bc2738455bf4e405cf0ad3d61482b49cd4382113", "patch": "@@ -24,6 +24,7 @@\n // Tests iter->position() behavior\n \n #include <regex>\n+#include <tuple>\n #include <testsuite_hooks.h>\n \n void\n@@ -41,9 +42,53 @@ test01()\n   }\n }\n \n+// PR libstdc++/64239\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::regex re(\"\\\\w+\");\n+  std::string s(\"-a-b-c-\");\n+\n+  std::tuple<int, int, const char*> expected[] =\n+  {\n+    std::make_tuple(1, 1, \"a\"),\n+    std::make_tuple(3, 1, \"b\"),\n+    std::make_tuple(5, 1, \"c\"),\n+  };\n+\n+  int i = 0;\n+  for (auto it1 = std::sregex_iterator(s.begin(), s.end(), re),\n+       end = std::sregex_iterator(); it1 != end; ++it1, i++)\n+    {\n+      auto it2 = it1;\n+      VERIFY(it1->position() == std::get<0>(expected[i]));\n+      VERIFY(it1->length() == std::get<1>(expected[i]));\n+      VERIFY(it1->str() == std::get<2>(expected[i]));\n+      VERIFY(it2->position() == std::get<0>(expected[i]));\n+      VERIFY(it2->length() == std::get<1>(expected[i]));\n+      VERIFY(it2->str() == std::get<2>(expected[i]));\n+    }\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::smatch m;\n+  std::string s = \"abcde\";\n+  std::regex_search(s, m, std::regex(\"bcd\"));\n+  VERIFY(m.position() == 1);\n+  VERIFY(m.position() == m.prefix().length());\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n   return 0;\n }"}]}