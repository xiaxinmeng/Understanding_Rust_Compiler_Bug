{"sha": "3023ce4262d7de329d1082347943a91621b88e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyM2NlNDI2MmQ3ZGUzMjlkMTA4MjM0Nzk0M2E5MTYyMWI4OGUxZA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-07-31T08:17:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-31T08:17:31Z"}, "message": "sem_attr.adb: 'Result can have an ambiguous prefix, and is resolved from context.\n\n2008-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\tsem_attr.adb: 'Result can have an ambiguous prefix, and is resolved\n\tfrom context. This attribute must be usable in Ada95 mode.\n\tThe attribute can appear in the body of a function marked\n\tInline_Always, but in this case the postocondition is not enforced.\n\t\n\tsem_prag.adb (Check_Precondition_Postcondition): within the expansion\n\tof an inlined call pre- and postconditions are legal\n\nFrom-SVN: r138364", "tree": {"sha": "3ef533639b476810f12a0417048a001d97ae786e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef533639b476810f12a0417048a001d97ae786e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3023ce4262d7de329d1082347943a91621b88e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3023ce4262d7de329d1082347943a91621b88e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3023ce4262d7de329d1082347943a91621b88e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3023ce4262d7de329d1082347943a91621b88e1d/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aaf891732c67b50f16f81653e19a363251cd2e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf891732c67b50f16f81653e19a363251cd2e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf891732c67b50f16f81653e19a363251cd2e89"}], "stats": {"total": 115, "additions": 86, "deletions": 29}, "files": [{"sha": "c13182745d3ac3f203a30820fccab4ff82809010", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3023ce4262d7de329d1082347943a91621b88e1d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3023ce4262d7de329d1082347943a91621b88e1d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3023ce4262d7de329d1082347943a91621b88e1d", "patch": "@@ -1898,6 +1898,7 @@ package body Sem_Attr is\n         and then Aname /= Name_Address\n         and then Aname /= Name_Code_Address\n         and then Aname /= Name_Count\n+        and then Aname /= Name_Result\n         and then Aname /= Name_Unchecked_Access\n       then\n          Error_Attr (\"ambiguous prefix for % attribute\", P);\n@@ -3738,9 +3739,23 @@ package body Sem_Attr is\n \n       when Attribute_Result => Result : declare\n          CS : constant Entity_Id := Current_Scope;\n-         PS : constant Entity_Id := Scope (CS);\n+         PS : Entity_Id;\n \n       begin\n+         PS := Scope (CS);\n+\n+         --  If we are analyzing a body to be inlined, there is an additional\n+         --  scope present, used to gather global references. Retrieve the\n+         --  source scope.\n+\n+         if Chars (PS) = Name_uParent then\n+            PS := Scope (PS);\n+            if Warn_On_Redundant_Constructs then\n+               Error_Msg_N\n+                 (\"postconditions on inlined functions not enforced\", N);\n+            end if;\n+         end if;\n+\n          --  If we are in the scope of a function and in Spec_Expression mode,\n          --  this is likely the prescan of the postcondition pragma, and we\n          --  just set the proper type. If there is an error it will be caught\n@@ -3775,9 +3790,13 @@ package body Sem_Attr is\n          then\n             --  Check OK prefix\n \n-            if Nkind (P) /= N_Identifier\n-              or else Chars (P) /= Chars (PS)\n+            if (Nkind (P) = N_Identifier\n+                  or else Nkind (P) = N_Operator_Symbol)\n+              and then Chars (P) = Chars (PS)\n             then\n+               null;\n+\n+            else\n                Error_Msg_NE\n                  (\"incorrect prefix for % attribute, expected &\", P, PS);\n                Error_Attr;"}, {"sha": "a7cce6f2f0939c88cb03e89e9b5e36fe26835d4e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 64, "deletions": 26, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3023ce4262d7de329d1082347943a91621b88e1d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3023ce4262d7de329d1082347943a91621b88e1d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3023ce4262d7de329d1082347943a91621b88e1d", "patch": "@@ -583,6 +583,7 @@ package body Sem_Prag is\n       --  expression, returns True if so, False if non-static or not String.\n \n       procedure Pragma_Misplaced;\n+      pragma No_Return (Pragma_Misplaced);\n       --  Issue fatal error message for misplaced pragma\n \n       procedure Process_Atomic_Shared_Volatile;\n@@ -1350,9 +1351,48 @@ package body Sem_Prag is\n \n       procedure Check_Precondition_Postcondition (In_Body : out Boolean) is\n          P  : Node_Id;\n-         S  : Entity_Id;\n          PO : Node_Id;\n \n+         procedure Chain_PPC (PO : Node_Id);\n+         --  PO is the N_Subprogram_Declaration node for the subprogram to\n+         --  which the precondition/postcondition applies. This procedure\n+         --  completes the processing for the pragma.\n+\n+         ---------------\n+         -- Chain_PPC --\n+         ---------------\n+\n+         procedure Chain_PPC (PO : Node_Id) is\n+            S : Node_Id;\n+\n+         begin\n+            S := Defining_Unit_Name (Specification (PO));\n+\n+            --  Analyze the pragma unless it appears within a package spec,\n+            --  which is the case where we delay the analysis of the PPC until\n+            --  the end of the package declarations (for details, see\n+            --  Analyze_Package_Specification.Analyze_PPCs).\n+\n+            if Ekind (Scope (S)) /= E_Package\n+                 and then\n+               Ekind (Scope (S)) /= E_Generic_Package\n+            then\n+               Analyze_PPC_In_Decl_Part (N, S);\n+            end if;\n+\n+            --  Chain spec PPC pragma to list for subprogram\n+\n+            Set_Next_Pragma (N, Spec_PPC_List (S));\n+            Set_Spec_PPC_List (S, N);\n+\n+            --  Return indicating spec case\n+\n+            In_Body := False;\n+            return;\n+         end Chain_PPC;\n+\n+         --  Start of processing for Check_Precondition_Postcondition\n+\n       begin\n          if not Is_List_Member (N) then\n             Pragma_Misplaced;\n@@ -1362,6 +1402,14 @@ package body Sem_Prag is\n \n          Set_PPC_Enabled (N, Check_Enabled (Pname));\n \n+         --  If we are within an inlined body, the legality of the pragma\n+         --  has been checked already.\n+\n+         if In_Inlined_Body then\n+            In_Body := True;\n+            return;\n+         end if;\n+\n          --  Search prior declarations\n \n          P := N;\n@@ -1382,28 +1430,7 @@ package body Sem_Prag is\n             --  Here if we hit a subprogram declaration\n \n             elsif Nkind (PO) = N_Subprogram_Declaration then\n-               S := Defining_Unit_Name (Specification (PO));\n-\n-               --  Analyze the pragma unless it appears within a package spec,\n-               --  which is the case where we delay the analysis of the PPC\n-               --  until the end of the package declarations (for details,\n-               --  see Analyze_Package_Specification.Analyze_PPCs).\n-\n-               if Ekind (Scope (S)) /= E_Package\n-                    and then\n-                  Ekind (Scope (S)) /= E_Generic_Package\n-               then\n-                  Analyze_PPC_In_Decl_Part (N, S);\n-               end if;\n-\n-               --  Chain spec PPC pragma to list for subprogram\n-\n-               Set_Next_Pragma (N, Spec_PPC_List (S));\n-               Set_Spec_PPC_List (S, N);\n-\n-               --  Return indicating spec case\n-\n-               In_Body := False;\n+               Chain_PPC (PO);\n                return;\n \n             --  If we encounter any other declaration moving back, misplaced\n@@ -1422,11 +1449,22 @@ package body Sem_Prag is\n             In_Body := True;\n             return;\n \n-         --  If not, it was misplaced\n+         --  See if it is in the pragmas after a library level subprogram\n \n-         else\n-            Pragma_Misplaced;\n+         elsif Nkind (Parent (N)) = N_Compilation_Unit_Aux then\n+            declare\n+               Decl : constant Node_Id := Unit (Parent (Parent (N)));\n+            begin\n+               if Nkind (Decl) = N_Subprogram_Declaration then\n+                  Chain_PPC (Decl);\n+                  return;\n+               end if;\n+            end;\n          end if;\n+\n+         --  If we fall through, pragma was misplaced\n+\n+         Pragma_Misplaced;\n       end Check_Precondition_Postcondition;\n \n       -----------------------------"}]}