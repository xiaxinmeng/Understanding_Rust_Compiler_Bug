{"sha": "90a747032a88e99270a882e1d33a87fd55ef8520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhNzQ3MDMyYTg4ZTk5MjcwYTg4MmUxZDMzYTg3ZmQ1NWVmODUyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-01-05T15:34:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-01-05T15:34:39Z"}, "message": "simplify-rtx.c (cfc_args): add \"unordered\" field.\n\n\t* simplify-rtx.c (cfc_args): add \"unordered\" field.\n\t(check_fold_consts): Set unordered field.\n\t(simplify_relational_operation): Simplify the unordered\n\tcomparisons.\n\n\t* reg-stack.c (swap_rtx_condition): Ensure that the transformation\n\tis valid.\n\n\t* emit-rtl.c (try_split): Fix code to mark labels.\n\t* jump.c (mark_jump_label): Make global.\n\t* rtl.h (mark_jump_label): Declare.\n\n\t* predict.c (estimate_probability): Handle unordred comparisons.\n\nFrom-SVN: r38711", "tree": {"sha": "d2b56b14315659a1bb2e03a1ca419f699c2cffb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2b56b14315659a1bb2e03a1ca419f699c2cffb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90a747032a88e99270a882e1d33a87fd55ef8520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a747032a88e99270a882e1d33a87fd55ef8520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a747032a88e99270a882e1d33a87fd55ef8520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a747032a88e99270a882e1d33a87fd55ef8520/comments", "author": null, "committer": null, "parents": [{"sha": "bfa2cb330e3f3e8f72df900b60af4b9886553f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa2cb330e3f3e8f72df900b60af4b9886553f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa2cb330e3f3e8f72df900b60af4b9886553f47"}], "stats": {"total": 116, "additions": 91, "deletions": 25}, "files": [{"sha": "6a12ecae04cf45844063b4538204724e5be69696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,3 +1,19 @@\n+Fri Jan  5 16:29:49 MET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* simplify-rtx.c (cfc_args): add \"unordered\" field.\n+\t(check_fold_consts): Set unordered field.\n+\t(simplify_relational_operation): Simplify the unordered\n+\tcomparisons.\n+\n+\t* reg-stack.c (swap_rtx_condition): Ensure that the transformation\n+\tis valid.\n+\n+\t* emit-rtl.c (try_split): Fix code to mark labels.\n+\t* jump.c (mark_jump_label): Make global.\n+\t* rtl.h (mark_jump_label): Declare.\n+\n+\t* predict.c (estimate_probability): Handle unordred comparisons.\n+\n 2001-01-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * cpp.texi: Update for -MP.  Clarify behaviour of -MT."}, {"sha": "0206bbdc008a6b7cddbb1fe391d23cc72f3b0d6b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,6 +1,6 @@\n /* Emit RTL for the GNU C-Compiler expander.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2433,19 +2433,11 @@ try_split (pat, trial, last)\n \t\t&& rtx_equal_p (PATTERN (XVECEXP (seq, 0, i)), pat))\n   \t      return trial;\n \n-\t  /* If we are splitting a JUMP_INSN, look for the JUMP_INSN in\n-\t     SEQ and copy our JUMP_LABEL to it.  If JUMP_LABEL is non-zero,\n-\t     increment the usage count so we don't delete the label.  */\n-\n-\t  if (GET_CODE (trial) == JUMP_INSN)\n-\t    for (i = XVECLEN (seq, 0) - 1; i >= 0; i--)\n-\t      if (GET_CODE (XVECEXP (seq, 0, i)) == JUMP_INSN)\n-\t\t{\n-\t\t  JUMP_LABEL (XVECEXP (seq, 0, i)) = JUMP_LABEL (trial);\n-\n-\t\t  if (JUMP_LABEL (trial))\n-\t\t    LABEL_NUSES (JUMP_LABEL (trial))++;\n-\t\t}\n+\t  /* Mark labels.  */\n+\t  for (i = XVECLEN (seq, 0) - 1; i >= 0; i--)\n+\t    if (GET_CODE (XVECEXP (seq, 0, i)) == JUMP_INSN)\n+\t      mark_jump_label (PATTERN (XVECEXP (seq, 0, i)),\n+\t\t\t       XVECEXP (seq, 0, i), 0, 0);\n \n \t  /* If we are splitting a CALL_INSN, look for the CALL_INSN\n \t     in SEQ and copy our CALL_INSN_FUNCTION_USAGE to it.  */"}, {"sha": "1c6c3a633d67adf26134abfff948db43db300127", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,6 +1,6 @@\n /* Optimize jump instructions, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997\n-   1998, 1999, 2000 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -113,7 +113,6 @@ static void find_cross_jump\t\tPARAMS ((rtx, rtx, int, rtx *, rtx *));\n static void do_cross_jump\t\tPARAMS ((rtx, rtx, rtx));\n static int jump_back_p\t\t\tPARAMS ((rtx, rtx));\n static int tension_vector_labels\tPARAMS ((rtx, int));\n-static void mark_jump_label\t\tPARAMS ((rtx, rtx, int, int));\n static void delete_computation\t\tPARAMS ((rtx));\n static void redirect_exp_1\t\tPARAMS ((rtx *, rtx, rtx, rtx));\n static int redirect_exp\t\t\tPARAMS ((rtx, rtx, rtx));\n@@ -2377,7 +2376,7 @@ tension_vector_labels (x, idx)\n    Once reload has completed (CROSS_JUMP non-zero), we need not consider\n    two labels distinct if they are separated by only USE or CLOBBER insns.  */\n \n-static void\n+void\n mark_jump_label (x, insn, cross_jump, in_mem)\n      register rtx x;\n      rtx insn;"}, {"sha": "d598ef92e6c0a2eafa901eb6e9a644fd422fb432", "filename": "gcc/predict.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,5 +1,5 @@\n /* Branch prediction routines for the GNU compiler.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -183,11 +183,19 @@ estimate_probability (loops_info)\n \t  goto emitnote;\n \n \tcase EQ:\n+\tcase UNEQ:\n \t  prob = PROB_UNLIKELY;\n \t  goto emitnote;\n \tcase NE:\n+\tcase LTGT:\n \t  prob = PROB_LIKELY;\n \t  goto emitnote;\n+\tcase ORDERED:\n+\t  prob = PROB_LIKELY;\n+\t  goto emitnote;\n+\tcase UNORDERED:\n+\t  prob = PROB_UNLIKELY;\n+\t  goto emitnote;\n \tcase LE:\n \tcase LT:\n \t  if (XEXP (cond, 1) == const0_rtx)"}, {"sha": "48dd3bd6966ac13fd6145027eb2dbd680538830e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,6 +1,6 @@\n /* Register to Stack convert for GNU compiler.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n    This file is part of GNU CC.\n \n@@ -1261,7 +1261,17 @@ swap_rtx_condition (insn)\n       pat = PATTERN (insn);\n     }\n \n-  return swap_rtx_condition_1 (pat);\n+  if (swap_rtx_condition_1 (pat))\n+    {\n+      INSN_CODE (insn) = -1;\n+      if (recog_memoized (insn) == -1)\n+\t{\n+\t  swap_rtx_condition_1 (pat);\n+\t  return 0;\n+\t}\n+      return 1;\n+    }\n+  return 0;\n }\n \n /* Handle a comparison.  Special care needs to be taken to avoid"}, {"sha": "bb353be4dfbfa8744de3cd1ac453106ff412aae4", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,6 +1,6 @@\n /* Register Transfer Language (RTL) definitions for GNU C-Compiler\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1287,6 +1287,7 @@ extern enum rtx_code reverse_condition_maybe_unordered PARAMS ((enum rtx_code));\n extern enum rtx_code swap_condition\tPARAMS ((enum rtx_code));\n extern enum rtx_code unsigned_condition\tPARAMS ((enum rtx_code));\n extern enum rtx_code signed_condition\tPARAMS ((enum rtx_code));\n+extern void mark_jump_label\t\tPARAMS ((rtx, rtx, int, int));\n \n /* In reload.c */\n extern rtx find_equiv_reg\t\tPARAMS ((rtx, rtx, enum reg_class, int, short *, int, enum machine_mode));"}, {"sha": "13d693cbdfe091d8928246d51974566516673c55", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90a747032a88e99270a882e1d33a87fd55ef8520/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=90a747032a88e99270a882e1d33a87fd55ef8520", "patch": "@@ -1,6 +1,6 @@\n /* RTL simplification functions for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1676,6 +1676,7 @@ struct cfc_args\n {\n   rtx op0, op1;\t\t\t/* Input */\n   int equal, op0lt, op1lt;\t/* Output */\n+  int unordered;\n };\n \n static void\n@@ -1685,11 +1686,19 @@ check_fold_consts (data)\n   struct cfc_args *args = (struct cfc_args *) data;\n   REAL_VALUE_TYPE d0, d1;\n \n+  /* We may possibly raise an exception while reading the value.  */\n+  args->unordered = 1;\n   REAL_VALUE_FROM_CONST_DOUBLE (d0, args->op0);\n   REAL_VALUE_FROM_CONST_DOUBLE (d1, args->op1);\n+\n+  /* Comparisons of Inf versus Inf are ordered.  */\n+  if (REAL_VALUE_ISNAN (d0)\n+      || REAL_VALUE_ISNAN (d1))\n+    return;\n   args->equal = REAL_VALUES_EQUAL (d0, d1);\n   args->op0lt = REAL_VALUES_LESS (d0, d1);\n   args->op1lt = REAL_VALUES_LESS (d1, d0);\n+  args->unordered = 0;\n }\n \n /* Like simplify_binary_operation except used for relational operators.\n@@ -1772,9 +1781,32 @@ simplify_relational_operation (code, mode, op0, op1)\n       args.op0 = op0;\n       args.op1 = op1;\n       \n-      if (do_float_handler(check_fold_consts, (PTR) &args) == 0)\n-\t/* We got an exception from check_fold_consts() */\n-\treturn 0;\n+      \n+      if (!do_float_handler(check_fold_consts, (PTR) &args))\n+\targs.unordered = 1;\n+\n+      if (args.unordered)\n+\tswitch (code)\n+\t  {\n+\t  case UNEQ:\n+\t  case UNLT:\n+\t  case UNGT:\n+\t  case UNLE:\n+\t  case UNGE:\n+\t  case NE:\n+\t  case UNORDERED:\n+\t    return const_true_rtx;\n+\t  case EQ:\n+\t  case LT:\n+\t  case GT:\n+\t  case LE:\n+\t  case GE:\n+\t  case LTGT:\n+\t  case ORDERED:\n+\t    return const0_rtx;\n+\t  default:\n+\t    return 0;\n+\t  }\n \n       /* Receive output from check_fold_consts() */\n       equal = args.equal;\n@@ -1905,12 +1937,16 @@ simplify_relational_operation (code, mode, op0, op1)\n   switch (code)\n     {\n     case EQ:\n+    case UNEQ:\n       return equal ? const_true_rtx : const0_rtx;\n     case NE:\n+    case LTGT:\n       return ! equal ? const_true_rtx : const0_rtx;\n     case LT:\n+    case UNLT:\n       return op0lt ? const_true_rtx : const0_rtx;\n     case GT:\n+    case UNGT:\n       return op1lt ? const_true_rtx : const0_rtx;\n     case LTU:\n       return op0ltu ? const_true_rtx : const0_rtx;\n@@ -1924,6 +1960,10 @@ simplify_relational_operation (code, mode, op0, op1)\n       return equal || op0ltu ? const_true_rtx : const0_rtx;\n     case GEU:\n       return equal || op1ltu ? const_true_rtx : const0_rtx;\n+    case ORDERED:\n+      return const_true_rtx;\n+    case UNORDERED:\n+      return const0_rtx;\n     default:\n       abort ();\n     }"}]}