{"sha": "5728868b825368b02d73a4474c23b0016850af3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcyODg2OGI4MjUzNjhiMDJkNzNhNDQ3NGMyM2IwMDE2ODUwYWYzYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-10-19T15:22:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-10-19T15:22:15Z"}, "message": "arm.c (output_move_neon): Use DImode in call to adjust_address.\n\n\t* config/arm/arm.c (output_move_neon): Use DImode in call to\n\tadjust_address.\n\ntestsuite:\n\t* gcc.target/arm/neon-thumb2-move.c: New test.\n\nFrom-SVN: r152977", "tree": {"sha": "96505bd19d105cb2157f329de264a3b2a50c62ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96505bd19d105cb2157f329de264a3b2a50c62ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5728868b825368b02d73a4474c23b0016850af3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5728868b825368b02d73a4474c23b0016850af3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5728868b825368b02d73a4474c23b0016850af3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5728868b825368b02d73a4474c23b0016850af3c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21750c78c4afdc2ca2baa639bfc19365a8487e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21750c78c4afdc2ca2baa639bfc19365a8487e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21750c78c4afdc2ca2baa639bfc19365a8487e22"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "19b0169c62541e39262bdfa3b82ae7122149c38e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5728868b825368b02d73a4474c23b0016850af3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5728868b825368b02d73a4474c23b0016850af3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5728868b825368b02d73a4474c23b0016850af3c", "patch": "@@ -1,3 +1,8 @@\n+2009-10-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/arm.c (output_move_neon): Use DImode in call to\n+\tadjust_address.\n+\n 2009-10-19  Matthias Klose  <doko@ubuntu.com>\n \n \tPR target/40134"}, {"sha": "e013dc2f70f3f14d836c3248c3be5f34316b1f1d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5728868b825368b02d73a4474c23b0016850af3c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5728868b825368b02d73a4474c23b0016850af3c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5728868b825368b02d73a4474c23b0016850af3c", "patch": "@@ -12269,7 +12269,7 @@ output_move_neon (rtx *operands)\n \t  {\n \t    /* We're only using DImode here because it's a convenient size.  */\n \t    ops[0] = gen_rtx_REG (DImode, REGNO (reg) + 2 * i);\n-\t    ops[1] = adjust_address (mem, SImode, 8 * i);\n+\t    ops[1] = adjust_address (mem, DImode, 8 * i);\n \t    if (reg_overlap_mentioned_p (ops[0], mem))\n \t      {\n \t\tgcc_assert (overlap == -1);"}, {"sha": "0042764aea8124212c0df92d02cae20f163019a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5728868b825368b02d73a4474c23b0016850af3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5728868b825368b02d73a4474c23b0016850af3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5728868b825368b02d73a4474c23b0016850af3c", "patch": "@@ -1,3 +1,7 @@\n+2009-10-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.target/arm/neon-thumb2-move.c: New test.\n+\n 2009-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/debug/vta-3.c: New test."}, {"sha": "882285131304e472f140dbe44475fcd6c459a4f4", "filename": "gcc/testsuite/gcc.target/arm/neon-thumb2-move.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5728868b825368b02d73a4474c23b0016850af3c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-thumb2-move.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5728868b825368b02d73a4474c23b0016850af3c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-thumb2-move.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-thumb2-move.c?ref=5728868b825368b02d73a4474c23b0016850af3c", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2 -mthumb -march=armv7-a -mfloat-abi=softfp -mfpu=neon\" } */\n+\n+#include <arm_neon.h>\n+#include <stddef.h>\n+\n+void *\n+memset (DST, C, LENGTH)\n+     void *DST;\n+     int C;\n+     size_t LENGTH;\n+{\n+  void* DST0 = DST;\n+  unsigned char C_BYTE = C;\n+\n+\n+  if (__builtin_expect(LENGTH < 4, 1)) {\n+    size_t i = 0;\n+    while (i < LENGTH) {\n+      ((char*)DST)[i] = C_BYTE;\n+      i++;\n+    }\n+    return DST;\n+  }\n+\n+  const char* DST_end = (char*)DST + LENGTH;\n+\n+\n+  while ((uintptr_t)DST % 4 != 0) {\n+    *(char*) (DST++) = C_BYTE;\n+  }\n+\n+\n+  uint32_t C_SHORTWORD = (uint32_t)(unsigned char)(C_BYTE) * 0x01010101;\n+\n+\n+  if (__builtin_expect(DST_end - (char*)DST >= 16, 0)) {\n+    while ((uintptr_t)DST % 16 != 0) {\n+      *((uint32_t*)((char*)(DST) + (0))) = C_SHORTWORD;\n+      DST += 4;\n+    }\n+\n+\n+    uint8x16_t C_WORD = vdupq_n_u8(C_BYTE);\n+\n+\n+\n+\n+\n+    size_t i = 0;\n+    LENGTH = DST_end - (char*)DST;\n+    while (i + 16 * 16 <= LENGTH) {\n+      *((uint8x16_t*)((char*)(DST) + (i))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 1))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 2))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 3))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 4))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 5))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 6))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 7))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 8))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 9))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 10))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 11))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 12))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 13))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 14))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 15))) = C_WORD;\n+      i += 16 * 16;\n+    }\n+    while (i + 16 * 4 <= LENGTH) {\n+      *((uint8x16_t*)((char*)(DST) + (i))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 1))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 2))) = C_WORD;\n+      *((uint8x16_t*)((char*)(DST) + (i + 16 * 3))) = C_WORD;\n+      i += 16 * 4;\n+    }\n+    while (i + 16 <= LENGTH) {\n+      *((uint8x16_t*)((char*)(DST) + (i))) = C_WORD;\n+      i += 16;\n+    }\n+    DST += i;\n+  }\n+\n+  while (4 <= DST_end - (char*)DST) {\n+    *((uint32_t*)((char*)(DST) + (0))) = C_SHORTWORD;\n+    DST += 4;\n+  }\n+\n+\n+  while ((char*)DST < DST_end) {\n+    *((char*)DST) = C_BYTE;\n+    DST++;\n+  }\n+\n+  return DST0;\n+}"}]}