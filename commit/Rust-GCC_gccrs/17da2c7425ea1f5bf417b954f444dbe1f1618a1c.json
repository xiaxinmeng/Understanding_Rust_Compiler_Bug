{"sha": "17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "node_id": "C_kwDOANBUbNoAKDE3ZGEyYzc0MjVlYTFmNWJmNDE3Yjk1NGY0NDRkYmUxZjE2MThhMWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-18T08:10:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-18T08:10:40Z"}, "message": "libgomp: Ensure that either gomp_team is properly aligned [PR102838]\n\nstruct gomp_team has struct gomp_work_share array inside of it.\nIf that latter structure has 64-byte aligned member in the middle,\nthe whole struct gomp_team needs to be 64-byte aligned, but we weren't\nallocating it using gomp_aligned_alloc.\n\nThis patch fixes that, except that on gcn team_malloc is special, so\nI've instead decided at least for now to avoid using aligned member\nand use the padding instead on gcn.\n\n2021-11-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/102838\n\t* libgomp.h (GOMP_USE_ALIGNED_WORK_SHARES): Define if\n\tGOMP_HAVE_EFFICIENT_ALIGNED_ALLOC is defined and __AMDGCN__ is not.\n\t(struct gomp_work_share): Use GOMP_USE_ALIGNED_WORK_SHARES instead of\n\tGOMP_HAVE_EFFICIENT_ALIGNED_ALLOC.\n\t* work.c (alloc_work_share, gomp_work_share_start): Likewise.\n\t* team.c (gomp_new_team): If GOMP_USE_ALIGNED_WORK_SHARES, use\n\tgomp_aligned_alloc instead of team_malloc.", "tree": {"sha": "9ce2dd3deabea300a014828072e33f3abfa6c277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ce2dd3deabea300a014828072e33f3abfa6c277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2aa63fad06a72d9770b08491f1a7809eac7c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2aa63fad06a72d9770b08491f1a7809eac7c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2aa63fad06a72d9770b08491f1a7809eac7c50"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "299cf42be21f7e02cbb046a8d2383f725c6648dc", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "patch": "@@ -95,6 +95,10 @@ enum memmodel\n #define GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC 1\n #endif\n \n+#if defined(GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC) && !defined(__AMDGCN__)\n+#define GOMP_USE_ALIGNED_WORK_SHARES 1\n+#endif\n+\n extern void *gomp_malloc (size_t) __attribute__((malloc));\n extern void *gomp_malloc_cleared (size_t) __attribute__((malloc));\n extern void *gomp_realloc (void *, size_t);\n@@ -348,7 +352,7 @@ struct gomp_work_share\n      are in a different cache line.  */\n \n   /* This lock protects the update of the following members.  */\n-#ifdef GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC\n+#ifdef GOMP_USE_ALIGNED_WORK_SHARES\n   gomp_mutex_t lock __attribute__((aligned (64)));\n #else\n   char pad[64 - offsetof (struct gomp_work_share_1st_cacheline, pad)];"}, {"sha": "19cc392a532aceede4644487b39733a773328cbd", "filename": "libgomp/team.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "patch": "@@ -177,7 +177,12 @@ gomp_new_team (unsigned nthreads)\n     {\n       size_t extra = sizeof (team->ordered_release[0])\n \t\t     + sizeof (team->implicit_task[0]);\n+#ifdef GOMP_USE_ALIGNED_WORK_SHARES\n+      team = gomp_aligned_alloc (__alignof (struct gomp_team),\n+\t\t\t\t sizeof (*team) + nthreads * extra);\n+#else\n       team = team_malloc (sizeof (*team) + nthreads * extra);\n+#endif\n \n #ifndef HAVE_SYNC_BUILTINS\n       gomp_mutex_init (&team->work_share_list_free_lock);"}, {"sha": "b75ba485182b9bd04f7c04877781dbf784d0517d", "filename": "libgomp/work.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/libgomp%2Fwork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17da2c7425ea1f5bf417b954f444dbe1f1618a1c/libgomp%2Fwork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fwork.c?ref=17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "patch": "@@ -78,7 +78,7 @@ alloc_work_share (struct gomp_team *team)\n   team->work_share_chunk *= 2;\n   /* Allocating gomp_work_share structures aligned is just an\n      optimization, don't do it when using the fallback method.  */\n-#ifdef GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC\n+#ifdef GOMP_USE_ALIGNED_WORK_SHARES\n   ws = gomp_aligned_alloc (__alignof (struct gomp_work_share),\n \t\t\t   team->work_share_chunk\n \t\t\t   * sizeof (struct gomp_work_share));\n@@ -191,7 +191,7 @@ gomp_work_share_start (size_t ordered)\n   /* Work sharing constructs can be orphaned.  */\n   if (team == NULL)\n     {\n-#ifdef GOMP_HAVE_EFFICIENT_ALIGNED_ALLOC\n+#ifdef GOMP_USE_ALIGNED_WORK_SHARES\n       ws = gomp_aligned_alloc (__alignof (struct gomp_work_share),\n \t\t\t       sizeof (*ws));\n #else"}]}