{"sha": "a855b1b189e7df04070f35cd87e4b213e1c5ced7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1NWIxYjE4OWU3ZGYwNDA3MGYzNWNkODdlNGIyMTNlMWM1Y2VkNw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-09-08T12:40:24Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-09-08T12:40:24Z"}, "message": "re PR tree-optimization/43430 (Missed vectorization: \"stmt not supported: cond_expr\")\n\n\tPR tree-optimization/43430\n\t* tree-vect-stmts.c (vectorizable_condition): Support multiple\n\tcopies for conditional statements if it's not part of a reduction.\n\ntestsuite/\n\tPR tree-optimization/43430\n\t* gcc.dg/vect/pr43430-2.c: New test.\n\nFrom-SVN: r163999", "tree": {"sha": "991973ac570623da65bd5452d3dd2dedd2190ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/991973ac570623da65bd5452d3dd2dedd2190ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a855b1b189e7df04070f35cd87e4b213e1c5ced7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a855b1b189e7df04070f35cd87e4b213e1c5ced7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a855b1b189e7df04070f35cd87e4b213e1c5ced7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a855b1b189e7df04070f35cd87e4b213e1c5ced7/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3834917dbfa662ad3c358508dc40e3b7f4c70182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3834917dbfa662ad3c358508dc40e3b7f4c70182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3834917dbfa662ad3c358508dc40e3b7f4c70182"}], "stats": {"total": 119, "additions": 94, "deletions": 25}, "files": [{"sha": "788fd0204979d22a600b8add55fc09a3bbd13651", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a855b1b189e7df04070f35cd87e4b213e1c5ced7", "patch": "@@ -1,3 +1,9 @@\n+2010-09-08  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/43430\n+\t* tree-vect-stmts.c (vectorizable_condition): Support multiple\n+\tcopies for conditional statements if it's not part of a reduction.\n+\n 2010-09-08  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/33244"}, {"sha": "13a7ccee7ad825c903db162a5d6d6bc9ad887fbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a855b1b189e7df04070f35cd87e4b213e1c5ced7", "patch": "@@ -1,3 +1,8 @@\n+2010-09-08  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/43430\n+\t* gcc.dg/vect/pr43430-2.c: New test.\n+\t\n 2010-09-08  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/33244"}, {"sha": "631dadea021110f35ee1bf1e6bc72220781cfded", "filename": "gcc/testsuite/gcc.dg/vect/pr43430-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43430-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43430-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43430-2.c?ref=a855b1b189e7df04070f35cd87e4b213e1c5ced7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-options \"-O3 -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+typedef unsigned char uint8_t;\n+vsad16_c (void *c, uint8_t * s1, uint8_t * s2, int stride, int h)\n+{\n+  int score = 0;\n+  int x, y;\n+  for (x = 0; x < 16; x++)\n+    score += ((s1[x] - s1[x + stride] + s2[x + stride]) >= 0 ?\n+              s1[x] + s2[x + stride] :\n+              s2[x + stride]);\n+  return score;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_condition } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6d15bda937e810b8d7b183c7e604b80d36fe31bd", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 66, "deletions": 25, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a855b1b189e7df04070f35cd87e4b213e1c5ced7/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a855b1b189e7df04070f35cd87e4b213e1c5ced7", "patch": "@@ -4038,16 +4038,18 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   enum machine_mode vec_mode;\n   tree def;\n-  enum vect_def_type dt;\n+  enum vect_def_type dt, dts[4];\n   int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   int ncopies = LOOP_VINFO_VECT_FACTOR (loop_vinfo) / nunits;\n   enum tree_code code;\n+  stmt_vec_info prev_stmt_info = NULL;\n+  int j;\n \n   /* FORNOW: unsupported in basic block SLP.  */\n   gcc_assert (loop_vinfo);\n \n   gcc_assert (ncopies >= 1);\n-  if (ncopies > 1)\n+  if (reduc_index && ncopies > 1)\n     return false; /* FORNOW */\n \n   if (!STMT_VINFO_RELEVANT_P (stmt_info))\n@@ -4134,29 +4136,68 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n   vec_dest = vect_create_destination_var (scalar_dest, vectype);\n \n   /* Handle cond expr.  */\n-  vec_cond_lhs =\n-    vect_get_vec_def_for_operand (TREE_OPERAND (cond_expr, 0), stmt, NULL);\n-  vec_cond_rhs =\n-    vect_get_vec_def_for_operand (TREE_OPERAND (cond_expr, 1), stmt, NULL);\n-  if (reduc_index == 1)\n-    vec_then_clause = reduc_def;\n-  else\n-    vec_then_clause = vect_get_vec_def_for_operand (then_clause, stmt, NULL);\n-  if (reduc_index == 2)\n-    vec_else_clause = reduc_def;\n-  else\n-    vec_else_clause = vect_get_vec_def_for_operand (else_clause, stmt, NULL);\n-\n-  /* Arguments are ready. Create the new vector stmt.  */\n-  vec_compare = build2 (TREE_CODE (cond_expr), vectype,\n-\t\t\tvec_cond_lhs, vec_cond_rhs);\n-  vec_cond_expr = build3 (VEC_COND_EXPR, vectype,\n-\t\t\t  vec_compare, vec_then_clause, vec_else_clause);\n-\n-  *vec_stmt = gimple_build_assign (vec_dest, vec_cond_expr);\n-  new_temp = make_ssa_name (vec_dest, *vec_stmt);\n-  gimple_assign_set_lhs (*vec_stmt, new_temp);\n-  vect_finish_stmt_generation (stmt, *vec_stmt, gsi);\n+  for (j = 0; j < ncopies; j++)\n+    {\n+      gimple new_stmt;\n+      if (j == 0)\n+\t{\n+\t  gimple gtemp;\n+\t  vec_cond_lhs =\n+\t      vect_get_vec_def_for_operand (TREE_OPERAND (cond_expr, 0),\n+\t\t\t\t\t    stmt, NULL);\n+\t  vect_is_simple_use (TREE_OPERAND (cond_expr, 0), loop_vinfo,\n+\t\t\t      NULL, &gtemp, &def, &dts[0]);\n+\t  vec_cond_rhs =\n+\t      vect_get_vec_def_for_operand (TREE_OPERAND (cond_expr, 1),\n+\t\t\t\t\t    stmt, NULL);\n+\t  vect_is_simple_use (TREE_OPERAND (cond_expr, 1), loop_vinfo,\n+\t\t\t      NULL, &gtemp, &def, &dts[1]);\n+\t  if (reduc_index == 1)\n+\t    vec_then_clause = reduc_def;\n+\t  else\n+\t    {\n+\t      vec_then_clause = vect_get_vec_def_for_operand (then_clause,\n+\t\t\t\t\t\t\t      stmt, NULL);\n+\t      vect_is_simple_use (then_clause, loop_vinfo,\n+\t\t\t\t  NULL, &gtemp, &def, &dts[2]);\n+\t    }\n+\t  if (reduc_index == 2)\n+\t    vec_else_clause = reduc_def;\n+\t  else\n+\t    {\n+\t      vec_else_clause = vect_get_vec_def_for_operand (else_clause,\n+\t\t\t\t\t\t\t      stmt, NULL);\n+\t      vect_is_simple_use (else_clause, loop_vinfo,\n+\t\t\t\t  NULL, &gtemp, &def, &dts[3]);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  vec_cond_lhs = vect_get_vec_def_for_stmt_copy (dts[0], vec_cond_lhs);\n+\t  vec_cond_rhs = vect_get_vec_def_for_stmt_copy (dts[1], vec_cond_rhs);\n+\t  vec_then_clause = vect_get_vec_def_for_stmt_copy (dts[2],\n+\t\t\t\t\t\t\t    vec_then_clause);\n+\t  vec_else_clause = vect_get_vec_def_for_stmt_copy (dts[3],\n+\t\t\t\t\t\t\t    vec_else_clause);\n+\t}\n+\n+      /* Arguments are ready. Create the new vector stmt.  */\n+      vec_compare = build2 (TREE_CODE (cond_expr), vectype,\n+\t\t\t    vec_cond_lhs, vec_cond_rhs);\n+      vec_cond_expr = build3 (VEC_COND_EXPR, vectype,\n+\t\t\t      vec_compare, vec_then_clause, vec_else_clause);\n+\n+      new_stmt = gimple_build_assign (vec_dest, vec_cond_expr);\n+      new_temp = make_ssa_name (vec_dest, new_stmt);\n+      gimple_assign_set_lhs (new_stmt, new_temp);\n+      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+      if (j == 0)\n+        STMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt;\n+      else\n+        STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n+\n+      prev_stmt_info = vinfo_for_stmt (new_stmt);\n+    }\n \n   return true;\n }"}]}