{"sha": "13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmZGVhYWYwNDJhNTY5Yzc4NWY5YmM1ZGNmMWJmNDlhM2VlNjliYw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-02T16:21:34Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-02T16:21:34Z"}, "message": "tree-ssa-loop-ivopts.c (get_scaled_computation_cost_at): Delete parameter cand.\n\n\t* tree-ssa-loop-ivopts.c (get_scaled_computation_cost_at): Delete\n\tparameter cand.  Update dump information.\n\t(get_computation_cost): Update uses.\n\nFrom-SVN: r247519", "tree": {"sha": "a16902c00d8215fd1c725a6785bc0ce8b49a9631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16902c00d8215fd1c725a6785bc0ce8b49a9631"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc/comments", "author": null, "committer": null, "parents": [{"sha": "db61fc7a63008db8abf26f6a96ac8dde45f53383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db61fc7a63008db8abf26f6a96ac8dde45f53383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db61fc7a63008db8abf26f6a96ac8dde45f53383"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "f4a64804589e0e3e12d173849d1987cbbc4eaf19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc", "patch": "@@ -1,3 +1,9 @@\n+2017-05-02  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (get_scaled_computation_cost_at): Delete\n+\tparameter cand.  Update dump information.\n+\t(get_computation_cost): Update uses.\n+\n 2017-05-02  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (get_computation_aff_1): New."}, {"sha": "7caa40df07f479af45315b86a8532895b99290f7", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=13fdeaaf042a569c785f9bc5dcf1bf49a3ee69bc", "patch": "@@ -4810,12 +4810,11 @@ get_loop_invariant_expr (struct ivopts_data *data, tree ubase,\n }\n \n /* Scale (multiply) the computed COST (except scratch part that should be\n-   hoisted out a loop) by header->frequency / AT->frequency,\n-   which makes expected cost more accurate.  */\n+   hoisted out a loop) by header->frequency / AT->frequency, which makes\n+   expected cost more accurate.  */\n \n static comp_cost\n-get_scaled_computation_cost_at (ivopts_data *data, gimple *at, iv_cand *cand,\n-\t\t\t\tcomp_cost cost)\n+get_scaled_computation_cost_at (ivopts_data *data, gimple *at, comp_cost cost)\n {\n    int loop_freq = data->current_loop->header->frequency;\n    int bb_freq = gimple_bb (at)->frequency;\n@@ -4826,9 +4825,9 @@ get_scaled_computation_cost_at (ivopts_data *data, gimple *at, iv_cand *cand,\n \t = cost.scratch + (cost.cost - cost.scratch) * bb_freq / loop_freq;\n \n        if (dump_file && (dump_flags & TDF_DETAILS))\n-\t fprintf (dump_file, \"Scaling iv_use based on cand %d \"\n+\t fprintf (dump_file, \"Scaling cost based on bb prob \"\n \t\t  \"by %2.2f: %d (scratch: %d) -> %d (%d/%d)\\n\",\n-\t\t  cand->id, 1.0f * bb_freq / loop_freq, cost.cost,\n+\t\t  1.0f * bb_freq / loop_freq, cost.cost,\n \t\t  cost.scratch, scaled_cost, bb_freq, loop_freq);\n \n        cost.cost = scaled_cost;\n@@ -5024,15 +5023,15 @@ get_computation_cost (struct ivopts_data *data, struct iv_use *use,\n \t\t\t\tmem_mode,\n \t\t\t\tTYPE_ADDR_SPACE (TREE_TYPE (utype)),\n \t\t\t\tspeed, stmt_is_after_inc, can_autoinc);\n-      return get_scaled_computation_cost_at (data, at, cand, cost);\n+      return get_scaled_computation_cost_at (data, at, cost);\n     }\n \n   /* Otherwise estimate the costs for computing the expression.  */\n   if (!symbol_present && !var_present && !offset)\n     {\n       if (ratio != 1)\n \tcost += mult_by_coeff_cost (ratio, TYPE_MODE (ctype), speed);\n-      return get_scaled_computation_cost_at (data, at, cand, cost);\n+      return get_scaled_computation_cost_at (data, at, cost);\n     }\n \n   /* Symbol + offset should be compile-time computable so consider that they\n@@ -5052,7 +5051,7 @@ get_computation_cost (struct ivopts_data *data, struct iv_use *use,\n   if (aratio != 1)\n     cost += mult_by_coeff_cost (aratio, TYPE_MODE (ctype), speed);\n \n-  return get_scaled_computation_cost_at (data, at, cand, cost);\n+  return get_scaled_computation_cost_at (data, at, cost);\n \n fallback:\n   if (can_autoinc)\n@@ -5069,7 +5068,7 @@ get_computation_cost (struct ivopts_data *data, struct iv_use *use,\n \n   cost = comp_cost (computation_cost (comp, speed), 0);\n \n-  return get_scaled_computation_cost_at (data, at, cand, cost);\n+  return get_scaled_computation_cost_at (data, at, cost);\n }\n \n /* Determines cost of computing the use in GROUP with CAND in a generic"}]}