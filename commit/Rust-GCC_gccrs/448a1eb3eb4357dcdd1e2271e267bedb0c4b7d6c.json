{"sha": "448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4YTFlYjNlYjQzNTdkY2RkMWUyMjcxZTI2N2JlZGIwYzRiN2Q2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:51:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:51:45Z"}, "message": "[multiple changes]\n\n2017-01-13  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (Freeze_Expr_Types): New subprogram.\n\t(Analyze_Subprogram_Body_Helper): At the occurrence of an\n\texpression function declaration that is a completion, its\n\texpression causes freezing (AI12-0103).\n\n2017-01-13  Vadim Godunko  <godunko@adacore.com>\n\n\t* a-coinho-shared.adb: Fix memory leaks in Constant_Reference and\n\tReference functions of Ada.Containers.Indefinite_Holders.\n\n2017-01-13  Bob Duff  <duff@adacore.com>\n\n\t* s-os_lib.ads: Minor comment fixes.\n\n2017-01-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Default_Initialize_Object): Do not default\n\tinitialize an object when it is of a task type and restriction\n\tNo_Tasking is in effect because the initialization is obsolete.\n\t* exp_ch9.adb (Build_Master_Entity): Do not generate a master when\n\trestriction No_Tasking is in effect.\n\t(Build_Master_Renaming): Do not rename a master when restriction\n\tNo_Tasking is in effect.\n\nFrom-SVN: r244418", "tree": {"sha": "5046dc349b497c30eee1bc5826b72386ac220e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5046dc349b497c30eee1bc5826b72386ac220e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/comments", "author": null, "committer": null, "parents": [{"sha": "b2c1aa8fe9463fcfe5f1750023bff9093f5b3b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c1aa8fe9463fcfe5f1750023bff9093f5b3b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c1aa8fe9463fcfe5f1750023bff9093f5b3b41"}], "stats": {"total": 241, "additions": 178, "deletions": 63}, "files": [{"sha": "5d5be94bc322b45a39a8708113047961ddaddc79", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "patch": "@@ -1,3 +1,29 @@\n+2017-01-13  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Freeze_Expr_Types): New subprogram.\n+\t(Analyze_Subprogram_Body_Helper): At the occurrence of an\n+\texpression function declaration that is a completion, its\n+\texpression causes freezing (AI12-0103).\n+\n+2017-01-13  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* a-coinho-shared.adb: Fix memory leaks in Constant_Reference and\n+\tReference functions of Ada.Containers.Indefinite_Holders.\n+\n+2017-01-13  Bob Duff  <duff@adacore.com>\n+\n+\t* s-os_lib.ads: Minor comment fixes.\n+\n+2017-01-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Default_Initialize_Object): Do not default\n+\tinitialize an object when it is of a task type and restriction\n+\tNo_Tasking is in effect because the initialization is obsolete.\n+\t* exp_ch9.adb (Build_Master_Entity): Do not generate a master when\n+\trestriction No_Tasking is in effect.\n+\t(Build_Master_Renaming): Do not rename a master when restriction\n+\tNo_Tasking is in effect.\n+\n 2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_aggr.adb (Resolve_Array_Aggregate): The code that verifies"}, {"sha": "3373dbdfd38b9913f03fd59ef8a8ee32a745bfa5", "filename": "gcc/ada/a-coinho-shared.adb", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fa-coinho-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fa-coinho-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho-shared.adb?ref=448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2013-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2013-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,10 @@ package body Ada.Containers.Indefinite_Holders is\n    procedure Free is\n      new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n \n+   procedure Detach (Container : Holder);\n+   --  Detach data from shared copy if necessary. This is necessary to prepare\n+   --  container to be modified.\n+\n    ---------\n    -- \"=\" --\n    ---------\n@@ -142,21 +146,10 @@ package body Ada.Containers.Indefinite_Holders is\n    begin\n       if Container.Reference = null then\n          raise Constraint_Error with \"container is empty\";\n-\n-      elsif Container.Busy = 0\n-        and then not System.Atomic_Counters.Is_One\n-                       (Container.Reference.Counter)\n-      then\n-         --  Container is not locked and internal shared object is used by\n-         --  other container, create copy of both internal shared object and\n-         --  element.\n-\n-         Container'Unrestricted_Access.Reference :=\n-            new Shared_Holder'\n-              (Counter => <>,\n-               Element => new Element_Type'(Container.Reference.Element.all));\n       end if;\n \n+      Detach (Container);\n+\n       declare\n          Ref : constant Constant_Reference_Type :=\n                  (Element => Container.Reference.Element.all'Access,\n@@ -197,6 +190,34 @@ package body Ada.Containers.Indefinite_Holders is\n       end if;\n    end Copy;\n \n+   ------------\n+   -- Detach --\n+   ------------\n+\n+   procedure Detach (Container : Holder) is\n+   begin\n+      if Container.Busy = 0\n+        and then not System.Atomic_Counters.Is_One\n+                       (Container.Reference.Counter)\n+      then\n+         --  Container is not locked and internal shared object is used by\n+         --  other container, create copy of both internal shared object and\n+         --  element.\n+\n+         declare\n+            Old : constant Shared_Holder_Access := Container.Reference;\n+\n+         begin\n+            Container'Unrestricted_Access.Reference :=\n+               new Shared_Holder'\n+                 (Counter => <>,\n+                  Element =>\n+                    new Element_Type'(Container.Reference.Element.all));\n+            Unreference (Old);\n+         end;\n+      end if;\n+   end Detach;\n+\n    -------------\n    -- Element --\n    -------------\n@@ -281,21 +302,10 @@ package body Ada.Containers.Indefinite_Holders is\n    begin\n       if Container.Reference = null then\n          raise Constraint_Error with \"container is empty\";\n-\n-      elsif Container.Busy = 0\n-        and then\n-          not System.Atomic_Counters.Is_One (Container.Reference.Counter)\n-      then\n-         --  Container is not locked and internal shared object is used by\n-         --  other container, create copy of both internal shared object and\n-         --  element.\n-\n-         Container'Unrestricted_Access.Reference :=\n-            new Shared_Holder'\n-              (Counter => <>,\n-               Element => new Element_Type'(Container.Reference.Element.all));\n       end if;\n \n+      Detach (Container);\n+\n       B := B + 1;\n \n       begin\n@@ -359,21 +369,10 @@ package body Ada.Containers.Indefinite_Holders is\n    begin\n       if Container.Reference = null then\n          raise Constraint_Error with \"container is empty\";\n-\n-      elsif Container.Busy = 0\n-        and then\n-          not System.Atomic_Counters.Is_One (Container.Reference.Counter)\n-      then\n-         --  Container is not locked and internal shared object is used by\n-         --  other container, create copy of both internal shared object and\n-         --  element.\n-\n-         Container.Reference :=\n-            new Shared_Holder'\n-              (Counter => <>,\n-               Element => new Element_Type'(Container.Reference.Element.all));\n       end if;\n \n+      Detach (Container);\n+\n       declare\n          Ref : constant Reference_Type :=\n                  (Element => Container.Reference.Element.all'Access,\n@@ -477,21 +476,10 @@ package body Ada.Containers.Indefinite_Holders is\n    begin\n       if Container.Reference = null then\n          raise Constraint_Error with \"container is empty\";\n-\n-      elsif Container.Busy = 0\n-        and then\n-          not System.Atomic_Counters.Is_One (Container.Reference.Counter)\n-      then\n-         --  Container is not locked and internal shared object is used by\n-         --  other container, create copy of both internal shared object and\n-         --  element.\n-\n-         Container'Unrestricted_Access.Reference :=\n-            new Shared_Holder'\n-              (Counter => <>,\n-               Element => new Element_Type'(Container.Reference.Element.all));\n       end if;\n \n+      Detach (Container);\n+\n       B := B + 1;\n \n       begin"}, {"sha": "219262dd550ec904184d65c1534dad5dbf43afd7", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "patch": "@@ -5654,6 +5654,15 @@ package body Exp_Ch3 is\n \n          if Is_Imported (Def_Id) or else Suppress_Initialization (Def_Id) then\n             return;\n+\n+         --  Nothing to do if the object being initializes is of a task type\n+         --  and restriction No_Tasking is in effect because this is a direct\n+         --  violation of the restriction.\n+\n+         elsif Is_Task_Type (Base_Typ)\n+           and then Restriction_Active (No_Tasking)\n+         then\n+            return;\n          end if;\n \n          --  The expansion performed by this routine is as follows:"}, {"sha": "4a98f191d86ef9c0df8e8051cd518b9d229efc92", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "patch": "@@ -3349,10 +3349,14 @@ package body Exp_Ch9 is\n          Find_Enclosing_Context (Par, Context, Context_Id, Decls);\n       end if;\n \n-      --  Do not create a master if one already exists or there is no task\n-      --  hierarchy.\n+      --  Nothing to do if the context already has a master\n \n-      if Has_Master_Entity (Context_Id)\n+      if Has_Master_Entity (Context_Id) then\n+         return;\n+\n+      --  Nothing to do if tasks or tasking hierarchies are prohibited\n+\n+      elsif Restriction_Active (No_Tasking)\n         or else Restriction_Active (No_Task_Hierarchy)\n       then\n          return;\n@@ -3425,9 +3429,11 @@ package body Exp_Ch9 is\n       Master_Id   : Entity_Id;\n \n    begin\n-      --  Nothing to do if there is no task hierarchy\n+      --  Nothing to do if tasks or tasking hierarchies are prohibited\n \n-      if Restriction_Active (No_Task_Hierarchy) then\n+      if Restriction_Active (No_Tasking)\n+        or else Restriction_Active (No_Task_Hierarchy)\n+      then\n          return;\n       end if;\n "}, {"sha": "21f9ec5556ff0839226c21ea240da6a360d08706", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "patch": "@@ -375,7 +375,7 @@ package System.OS_Lib is\n    function File_Time_Stamp (Name : String) return OS_Time;\n    --  Given the name of a file or directory, Name, obtains and returns the\n    --  time stamp. This function can be used for an unopened file. Returns\n-   --  Invalid_Time is Name doesn't correspond to an existing file.\n+   --  Invalid_Time if Name doesn't correspond to an existing file.\n \n    function File_Time_Stamp (FD : File_Descriptor) return OS_Time;\n    --  Get time stamp of file from file descriptor FD Returns Invalid_Time is\n@@ -662,8 +662,6 @@ package System.OS_Lib is\n    --  This subtype is used to document that a parameter is the address of a\n    --  null-terminated string containing the name of a file.\n \n-   --  All the following functions need comments ???\n-\n    procedure Copy_File\n      (Name     : C_File_Name;\n       Pathname : C_File_Name;\n@@ -687,7 +685,6 @@ package System.OS_Lib is\n    procedure Delete_File (Name : C_File_Name; Success : out Boolean);\n \n    function File_Time_Stamp (Name : C_File_Name) return OS_Time;\n-   --  Returns Invalid_Time is Name doesn't correspond to an existing file\n \n    function Is_Directory (Name : C_File_Name) return Boolean;\n    function Is_Executable_File (Name : C_File_Name) return Boolean;"}, {"sha": "d125bf2846df4507eb80eba0a2678428f1db369c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=448a1eb3eb4357dcdd1e2271e267bedb0c4b7d6c", "patch": "@@ -632,7 +632,7 @@ package body Sem_Ch6 is\n       --  Function result subtype\n \n       procedure Check_Aggregate_Accessibility (Aggr : Node_Id);\n-      --  Apply legality rule of 6.5 (8.2) to the access discriminants of an\n+      --  Apply legality rule of 6.5 (5.8) to the access discriminants of an\n       --  aggregate in a return statement.\n \n       procedure Check_Return_Subtype_Indication (Obj_Decl : Node_Id);\n@@ -2225,6 +2225,11 @@ package body Sem_Ch6 is\n       --  limited views with the non-limited ones. Return the list of changes\n       --  to be used to undo the transformation.\n \n+      procedure Freeze_Expr_Types (Spec_Id : Entity_Id);\n+      --  (AI12-0103) N is the body associated with an expression function that\n+      --  is a completion, and Spec_Id its defining entity. Freeze before N all\n+      --  the types referenced by the expression of the function.\n+\n       function Is_Private_Concurrent_Primitive\n         (Subp_Id : Entity_Id) return Boolean;\n       --  Determine whether subprogram Subp_Id is a primitive of a concurrent\n@@ -2945,6 +2950,81 @@ package body Sem_Ch6 is\n          return Result;\n       end Exchange_Limited_Views;\n \n+      -----------------------\n+      -- Freeze_Expr_Types --\n+      -----------------------\n+\n+      procedure Freeze_Expr_Types (Spec_Id : Entity_Id) is\n+         function Freeze_Type_Refs (Node : Node_Id) return Traverse_Result;\n+         --  Freeze all types referenced in the subtree rooted at Node\n+\n+         ----------------------\n+         -- Freeze_Type_Refs --\n+         ----------------------\n+\n+         function Freeze_Type_Refs (Node : Node_Id) return Traverse_Result is\n+         begin\n+            if Nkind (Node) = N_Identifier\n+              and then Present (Entity (Node))\n+            then\n+               if Is_Type (Entity (Node)) then\n+                  Freeze_Before (N, Entity (Node));\n+\n+               elsif Ekind_In (Entity (Node), E_Component,\n+                                              E_Discriminant)\n+               then\n+                  Freeze_Before (N, Scope (Entity (Node)));\n+               end if;\n+            end if;\n+\n+            return OK;\n+         end Freeze_Type_Refs;\n+\n+         procedure Freeze_References is new Traverse_Proc (Freeze_Type_Refs);\n+\n+         --  Local variables\n+\n+         Return_Stmt : constant Node_Id :=\n+                         First (Statements (Handled_Statement_Sequence (N)));\n+         Dup_Expr    : constant Node_Id :=\n+                         New_Copy_Tree (Expression (Return_Stmt));\n+\n+         Saved_First_Entity : constant Entity_Id := First_Entity (Spec_Id);\n+         Saved_Last_Entity  : constant Entity_Id := Last_Entity  (Spec_Id);\n+\n+      --  Start of processing for Freeze_Expr_Types\n+\n+      begin\n+         pragma Assert (Nkind (Return_Stmt) = N_Simple_Return_Statement);\n+\n+         --  Preanalyze a duplicate of the expression to have available the\n+         --  minimum decoration needed to locate referenced unfrozen types\n+         --  without adding any decoration to the function expression. This\n+         --  preanalysis is performed with errors disabled to avoid reporting\n+         --  spurious errors on Ghost entities (since the expression is not\n+         --  fully analyzed).\n+\n+         Push_Scope (Spec_Id);\n+         Install_Formals (Spec_Id);\n+         Ignore_Errors_Enable := Ignore_Errors_Enable + 1;\n+\n+         Preanalyze_Spec_Expression (Dup_Expr, Etype (Spec_Id));\n+\n+         Ignore_Errors_Enable := Ignore_Errors_Enable - 1;\n+         End_Scope;\n+\n+         --  Restore certain attributes of Spec_Id since the preanalysis may\n+         --  have introduced itypes to this scope, thus modifying attributes\n+         --  First_Entity and Last_Entity.\n+\n+         Set_First_Entity (Spec_Id, Saved_First_Entity);\n+         Set_Last_Entity  (Spec_Id, Saved_Last_Entity);\n+\n+         --  Freeze all types referenced in the expression\n+\n+         Freeze_References (Dup_Expr);\n+      end Freeze_Expr_Types;\n+\n       -------------------------------------\n       -- Is_Private_Concurrent_Primitive --\n       -------------------------------------\n@@ -3398,6 +3478,15 @@ package body Sem_Ch6 is\n          then\n             Set_Has_Delayed_Freeze (Spec_Id);\n             Freeze_Before (N, Spec_Id);\n+\n+            --  At the occurrence of an expression function declaration that is\n+            --  a completion, its expression causes freezing (AI12-0103).\n+\n+            if Has_Completion (Spec_Id)\n+              and then Was_Expression_Function (N)\n+            then\n+               Freeze_Expr_Types (Spec_Id);\n+            end if;\n          end if;\n       end if;\n "}]}