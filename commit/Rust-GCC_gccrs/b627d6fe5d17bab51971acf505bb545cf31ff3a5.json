{"sha": "b627d6fe5d17bab51971acf505bb545cf31ff3a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyN2Q2ZmU1ZDE3YmFiNTE5NzFhY2Y1MDViYjU0NWNmMzFmZjNhNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-13T04:30:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-13T04:30:09Z"}, "message": "dwarf2asm.c (size_of_encoded_value): New function.\n\n        * dwarf2asm.c (size_of_encoded_value): New function.\n        * dwarf2asm.h: Declare it.\n        * except.c (output_function_exception_table): Align the TType\n        array only as wide as the encoding.\n\nFrom-SVN: r42028", "tree": {"sha": "9cb53ce676b1db0e40a14c11f71adb621954cbb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb53ce676b1db0e40a14c11f71adb621954cbb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b627d6fe5d17bab51971acf505bb545cf31ff3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b627d6fe5d17bab51971acf505bb545cf31ff3a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b627d6fe5d17bab51971acf505bb545cf31ff3a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b627d6fe5d17bab51971acf505bb545cf31ff3a5/comments", "author": null, "committer": null, "parents": [{"sha": "1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f730ff7b674c4309a3684f9e7f901ccf01da9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f730ff7b674c4309a3684f9e7f901ccf01da9c7"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "1ddf31a4b0a3d76edb7ced96e7d2a9f83440ce6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b627d6fe5d17bab51971acf505bb545cf31ff3a5", "patch": "@@ -1,3 +1,10 @@\n+2001-06-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2asm.c (size_of_encoded_value): New function.\n+\t* dwarf2asm.h: Declare it.\n+\t* except.c (output_function_exception_table): Align the TType\n+\tarray only as wide as the encoding.\n+\n 2001-05-12  Zack Weinberg  <zackw@stanford.edu>\n \n \t* extend.texi: Document #pragma GCC java_exceptions."}, {"sha": "a18607aaf82aa369805c6849828b0a7db68264c1", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=b627d6fe5d17bab51971acf505bb545cf31ff3a5", "patch": "@@ -445,6 +445,31 @@ size_of_sleb128 (value)\n   return size;\n }\n \n+/* Given an encoding, return the number of bytes the format occupies.\n+   This is only defined for fixed-size encodings, and so does not \n+   include leb128.  */\n+\n+int\n+size_of_encoded_value (encoding)\n+     int encoding;\n+{\n+  if (encoding == DW_EH_PE_omit)\n+    return 0;\n+\n+  switch (encoding & 0x07)\n+    {\n+    case DW_EH_PE_absptr:\n+      return POINTER_SIZE / BITS_PER_UNIT;\n+    case DW_EH_PE_udata2:\n+      return 2;\n+    case DW_EH_PE_udata4:\n+      return 4;\n+    case DW_EH_PE_udata8:\n+      return 8;\n+    }\n+  abort ();\n+}\n+\n /* Output an unsigned LEB128 quantity.  */\n \n void"}, {"sha": "7f3baed0816c2248d3342bec2de49cf902633d27", "filename": "gcc/dwarf2asm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2Fdwarf2asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2Fdwarf2asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.h?ref=b627d6fe5d17bab51971acf505bb545cf31ff3a5", "patch": "@@ -72,5 +72,6 @@ extern void dw2_asm_output_delta_sleb128 PARAMS ((const char *, const char *,\n \n extern int size_of_uleb128\t\tPARAMS ((unsigned HOST_WIDE_INT));\n extern int size_of_sleb128\t\tPARAMS ((HOST_WIDE_INT));\n+extern int size_of_encoded_value\tPARAMS ((int));\n \n extern void dw2_output_indirect_constants PARAMS ((void));"}, {"sha": "3afb1edd4f045875f320ba1d4de74c4257b50839", "filename": "gcc/except.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b627d6fe5d17bab51971acf505bb545cf31ff3a5/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b627d6fe5d17bab51971acf505bb545cf31ff3a5", "patch": "@@ -3612,6 +3612,7 @@ output_function_exception_table ()\n #endif\n   int have_tt_data;\n   int funcdef_number;\n+  int tt_format_size;\n \n   /* Not all functions need anything.  */\n   if (! cfun->uses_eh_lsda)\n@@ -3634,8 +3635,19 @@ output_function_exception_table ()\n   have_tt_data = (VARRAY_ACTIVE_SIZE (cfun->eh->ttype_data) > 0\n \t\t  || VARRAY_ACTIVE_SIZE (cfun->eh->ehspec_data) > 0);\n \n-  if (have_tt_data)\n-    assemble_eh_align (GET_MODE_ALIGNMENT (ptr_mode));\n+  /* Indicate the format of the @TType entries.  */\n+  if (! have_tt_data)\n+    tt_format = DW_EH_PE_omit;\n+  else\n+    {\n+      tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n+#ifdef HAVE_AS_LEB128\n+      ASM_GENERATE_INTERNAL_LABEL (ttype_label, \"LLSDATT\", funcdef_number);\n+#endif\n+      tt_format_size = size_of_encoded_value (tt_format);\n+\n+      assemble_eh_align (tt_format_size * BITS_PER_UNIT);\n+    }\n \n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LLSDA\", funcdef_number);\n \n@@ -3653,16 +3665,6 @@ output_function_exception_table ()\n \n   /* @LPStart pointer would go here.  */\n \n-  /* Indicate the format of the @TType entries.  */\n-  if (! have_tt_data)\n-    tt_format = DW_EH_PE_omit;\n-  else\n-    {\n-      tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n-#ifdef HAVE_AS_LEB128\n-      ASM_GENERATE_INTERNAL_LABEL (ttype_label, \"LLSDATT\", funcdef_number);\n-#endif\n-    }\n   dw2_asm_output_data (1, tt_format, \"@TType format (%s)\",\n \t\t       eh_data_format_name (tt_format));\n \n@@ -3685,14 +3687,14 @@ output_function_exception_table ()\n       ASM_OUTPUT_LABEL (asm_out_file, ttype_after_disp_label);\n #else\n       /* Ug.  Alignment queers things.  */\n-      unsigned int before_disp, after_disp, last_disp, disp, align;\n+      unsigned int before_disp, after_disp, last_disp, disp;\n \n-      align = POINTER_SIZE / BITS_PER_UNIT;\n       before_disp = 1 + 1;\n       after_disp = (1 + size_of_uleb128 (call_site_len)\n \t\t    + call_site_len\n \t\t    + VARRAY_ACTIVE_SIZE (cfun->eh->action_record_data)\n-\t\t    + VARRAY_ACTIVE_SIZE (cfun->eh->ttype_data) * align);\n+\t\t    + (VARRAY_ACTIVE_SIZE (cfun->eh->ttype_data)\n+\t\t       * tt_format_size));\n \n       disp = after_disp;\n       do\n@@ -3702,8 +3704,8 @@ output_function_exception_table ()\n \t  last_disp = disp;\n \t  disp_size = size_of_uleb128 (disp);\n \t  pad = before_disp + disp_size + after_disp;\n-\t  if (pad % align)\n-\t    pad = align - (pad % align);\n+\t  if (pad % tt_format_size)\n+\t    pad = tt_format_size - (pad % tt_format_size);\n \t  else\n \t    pad = 0;\n \t  disp = after_disp + pad;\n@@ -3751,7 +3753,7 @@ output_function_exception_table ()\n \t\t\t (i ? NULL : \"Action record table\"));\n \n   if (have_tt_data)\n-    assemble_eh_align (GET_MODE_ALIGNMENT (ptr_mode));\n+    assemble_eh_align (tt_format_size * BITS_PER_UNIT);\n \n   i = VARRAY_ACTIVE_SIZE (cfun->eh->ttype_data);\n   while (i-- > 0)"}]}