{"sha": "8f975c18ed141fa8c40ad7b19c9e57f95ed26b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5NzVjMThlZDE0MWZhOGM0MGFkN2IxOWM5ZTU3Zjk1ZWQyNmIzNg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-06-03T00:46:44Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-06-03T00:46:44Z"}, "message": "class.c (get_dispatch_table): Build the vtable dummy entry list element with a null purpose.\n\nFri Jun  2 16:48:55 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * class.c (get_dispatch_table): Build the vtable dummy entry list\n        element with a null purpose. Fixed leading comment.\n        (build_dtable_decl): Build an accurate dtable type when appropriate\n        and use it.\n\nFrom-SVN: r34369", "tree": {"sha": "d18797b287bb05dc755688b57c7f7921f0329539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d18797b287bb05dc755688b57c7f7921f0329539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36/comments", "author": null, "committer": null, "parents": [{"sha": "2e761e491932350e080453897ae449040a102897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e761e491932350e080453897ae449040a102897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e761e491932350e080453897ae449040a102897"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "ff312a12bd62df8356198f8657ea488bf5e65d12", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8f975c18ed141fa8c40ad7b19c9e57f95ed26b36", "patch": "@@ -1,3 +1,10 @@\n+Fri Jun  2 16:48:55 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* class.c (get_dispatch_table): Build the vtable dummy entry list\n+ \telement with a null purpose. Fixed leading comment.\n+\t(build_dtable_decl): Build an accurate dtable type when appropriate\n+ \tand use it.\n+\n 2000-06-02  Richard Henderson  <rth@cygnus.com>\n \n \t* lang.c (lang_get_alias_set): New."}, {"sha": "dc5d16a52be330663bdeca320299ebb39fe5052d", "filename": "gcc/java/class.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f975c18ed141fa8c40ad7b19c9e57f95ed26b36/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=8f975c18ed141fa8c40ad7b19c9e57f95ed26b36", "patch": "@@ -1229,8 +1229,9 @@ get_dispatch_table (type, this_class_addr)\n     }\n   /* Dummy entry for compatibility with G++ -fvtable-thunks.  When\n      using the Boehm GC we sometimes stash a GC type descriptor\n-     there.  */\n-  list = tree_cons (integer_zero_node, get_boehm_type_descriptor (type),\n+     there. We set the PURPOSE to NULL_TREE not to interfere (reset)\n+     the emitted byte count during the output to the assembly file. */\n+  list = tree_cons (NULL_TREE, get_boehm_type_descriptor (type),\n \t\t    list);\n   list = tree_cons (integer_zero_node, this_class_addr, list);\n   return build (CONSTRUCTOR, build_prim_array_type (nativecode_ptr_type_node,\n@@ -1673,13 +1674,33 @@ tree\n build_dtable_decl (type)\n      tree type;\n {\n-  tree name;\n+  tree name, dtype;\n+\n+  /* We need to build a new dtable type so that its size is uniquely\n+     computed when we're dealing with the class for real and not just\n+     faking it (like java.lang.Class during the initialization of the\n+     compiler.) We now we're not faking a class when CURRENT_CLASS is\n+     TYPE. */\n+  if (current_class == type)\n+    {\n+      tree dummy, aomt, n;\n+\n+      dtype = make_node (RECORD_TYPE);\n+      PUSH_FIELD (dtype, dummy, \"class\", class_ptr_type);\n+      n = build_int_2 (TREE_VEC_LENGTH (get_dispatch_vector (type)), 0);\n+      aomt = build_array_type (ptr_type_node, build_index_type (n));\n+      PUSH_FIELD (dtype, dummy, \"methods\", aomt);\n+      layout_type (dtype);\n+    }\n+  else\n+    dtype = dtable_type;\n+\n   obstack_grow (&temporary_obstack, \"__vt_\", 5);\n   append_gpp_mangled_type (&temporary_obstack, type);\n   obstack_1grow (&temporary_obstack, '\\0');\n   name = get_identifier (obstack_base (&temporary_obstack));\n   obstack_free (&temporary_obstack, obstack_base (&temporary_obstack));\n-  return build_decl (VAR_DECL, name, dtable_type);\n+  return build_decl (VAR_DECL, name, dtype);\n }\n \n /* Pre-pend the TYPE_FIELDS of THIS_CLASS with a dummy FIELD_DECL for the"}]}