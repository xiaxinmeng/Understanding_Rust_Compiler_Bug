{"sha": "1c494c6a0fef59c2a5c68766572398f897195a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0OTRjNmEwZmVmNTljMmE1YzY4NzY2NTcyMzk4Zjg5NzE5NWEyZg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-01-14T18:09:34Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-14T18:09:34Z"}, "message": "avr-arch.h (struct base_arch_s): Use typedef avr_arch_t instead.\n\n\t* config/avr/avr-arch.h\n\t(struct base_arch_s): Use typedef avr_arch_t instead.\n\t(struct arch_info_s): Use typedef avr_arch_info_t instead.\n\t(struct mcu_type_s): Use typedef avr_mcu_t instead.\n\t* config/avr/avr.c: Same.\n\t* config/avr/avr-devices.c: Same.\n\t* config/avr/driver-avr.c: Same.\n\t* config/avr/gen-avr-mmcu-texi.c: Same.\n\t* config/avr/avr-mcus.def: Adjust comment.\n\nFrom-SVN: r195160", "tree": {"sha": "587d3288cd2d90280deaa501f0d318ebbe30affe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/587d3288cd2d90280deaa501f0d318ebbe30affe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c494c6a0fef59c2a5c68766572398f897195a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c494c6a0fef59c2a5c68766572398f897195a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c494c6a0fef59c2a5c68766572398f897195a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c494c6a0fef59c2a5c68766572398f897195a2f/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50344cbf3ba75fd3ff5b089b46f58e7050290ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50344cbf3ba75fd3ff5b089b46f58e7050290ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50344cbf3ba75fd3ff5b089b46f58e7050290ee"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "eeb6c0bcdb6d39bccffc66c7ec405bdf7c2b59cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -1,3 +1,15 @@\n+2013-01-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-arch.h\n+\t(struct base_arch_s): Use typedef avr_arch_t instead.\n+\t(struct arch_info_s): Use typedef avr_arch_info_t instead.\n+\t(struct mcu_type_s): Use typedef avr_mcu_t instead.\n+\t* config/avr/avr.c: Same.\n+\t* config/avr/avr-devices.c: Same.\n+\t* config/avr/driver-avr.c: Same.\n+\t* config/avr/gen-avr-mmcu-texi.c: Same.\n+\t* config/avr/avr-mcus.def: Adjust comment.\n+\n 2013-01-14  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_simd_ld1r<mode>): New. "}, {"sha": "27cea736e06a0dc539851635c16e80ad51bae142", "filename": "gcc/config/avr/avr-arch.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-arch.h?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -45,7 +45,7 @@ enum avr_arch\n \n /* Architecture-specific properties.  */\n \n-struct base_arch_s\n+typedef struct\n {\n   /* Assembler only.  */\n   int asm_only;\n@@ -87,12 +87,12 @@ struct base_arch_s\n \n   /* Architecture name.  */\n   const char *const arch_name;\n-};\n+} avr_arch_t;\n \n \n /* Device-specific properties.  */\n \n-struct mcu_type_s\n+typedef struct\n {\n   /* Device name.  */\n   const char *const name;\n@@ -134,22 +134,23 @@ struct mcu_type_s\n \n   /* Name of device library.  */\n   const char *const library_name;\n-};\n+} avr_mcu_t;\n \n /* Map architecture to its texinfo string.  */\n \n-struct arch_info_s\n+typedef struct\n {\n   /* Architecture ID.  */\n   enum avr_arch arch;\n \n   /* textinfo source to describe the archtiecture.  */\n   const char *texinfo;\n-};\n+} avr_arch_info_t;\n \n /* Preprocessor macros to define depending on MCU type.  */\n \n-extern const struct base_arch_s *avr_current_arch;\n-extern const struct mcu_type_s *avr_current_device;\n-extern const struct mcu_type_s avr_mcu_types[];\n-extern const struct base_arch_s avr_arch_types[];\n+extern const avr_arch_t avr_arch_types[];\n+extern const avr_arch_t *avr_current_arch;\n+\n+extern const avr_mcu_t avr_mcu_types[];\n+extern const avr_mcu_t *avr_current_device;"}, {"sha": "48a952318ad77b70ac8232b6687816c4b61d0c44", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -27,7 +27,7 @@\n /* List of all known AVR MCU architectures.\n    Order as of enum avr_arch from avr.h.  */\n \n-const struct base_arch_s\n+const avr_arch_t\n avr_arch_types[] =\n {\n   /* unknown device specified */\n@@ -56,7 +56,7 @@ avr_arch_types[] =\n   { 0, 1, 1, 1, 1, 1, 1, 1, 1, 0x2000,  0, \"107\", \"avrxmega7\" }\n };\n \n-const struct arch_info_s\n+const avr_arch_info_t\n avr_texinfo[] =\n {\n   { ARCH_AVR1,\n@@ -101,9 +101,11 @@ avr_texinfo[] =\n     \"and more than 64@tie{}KiB of RAM.\" }\n };\n \n-const struct mcu_type_s avr_mcu_types[] = {\n-#define AVR_MCU(NAME,ARCH,MACRO,SHORT_SP,ERRATA_SKIP,DATA_SEC,N_FLASH,LIB_NAME)\\\n-  { NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, N_FLASH, LIB_NAME },\n+const avr_mcu_t\n+avr_mcu_types[] =\n+{\n+#define AVR_MCU(NAME, ARCH, MACRO, SP8, ERR_SKIP, DATA_SEC, N_FLASH, LIBNAME)\\\n+  { NAME, ARCH, MACRO, SP8, ERR_SKIP, DATA_SEC, N_FLASH, LIBNAME },\n #include \"avr-mcus.def\"\n #undef AVR_MCU\n     /* End of list.  */"}, {"sha": "b4100840431a12a4fa820b196c701c0ddf65533a", "filename": "gcc/config/avr/avr-mcus.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -39,7 +39,7 @@\n    AVR_MCU (NAME, ARCH, MACRO, SHORT_SP, ERRATA_SKIP, DATA_SEC, N_FLASH,\n             LIBRARY_NAME)\n \n-   where the arguments are the fields of struct mcu_type_s:\n+   where the arguments are the fields of avr_mcu_t:\n    \n        NAME         Accept -mmcu=<NAME>\n "}, {"sha": "440ca69079519b32d59a4292449bc8a7619846b7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -184,10 +184,10 @@ static GTY(()) rtx xstring_empty;\n static GTY(()) rtx xstring_e;\n \n /* Current architecture.  */\n-const struct base_arch_s *avr_current_arch;\n+const avr_arch_t *avr_current_arch;\n \n /* Current device.  */\n-const struct mcu_type_s *avr_current_device;\n+const avr_mcu_t *avr_current_device;\n \n /* Section to put switch tables in.  */\n static GTY(()) section *progmem_swtable_section;"}, {"sha": "47a04e507c5890854a79f814ce77863e25408a62", "filename": "gcc/config/avr/driver-avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -24,10 +24,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n \n /* Current architecture.  */\n-const struct base_arch_s *avr_current_arch = NULL;\n+const avr_arch_t *avr_current_arch = NULL;\n \n /* Current device.  */\n-const struct mcu_type_s *avr_current_device = NULL;\n+const avr_mcu_t *avr_current_device = NULL;\n \n /* Initialize avr_current_arch and avr_current_device variables.  */\n "}, {"sha": "55335f98dd953a3554e17dc9b8cb35b88eb10258", "filename": "gcc/config/avr/gen-avr-mmcu-texi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c494c6a0fef59c2a5c68766572398f897195a2f/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c?ref=1c494c6a0fef59c2a5c68766572398f897195a2f", "patch": "@@ -85,7 +85,7 @@ int main (void)\n {\n   enum avr_arch arch = ARCH_UNKNOWN;\n   size_t i, n_mcus = 0;\n-  const struct mcu_type_s *mcu;\n+  const avr_mcu_t *mcu;\n \n   printf (\"@c Copyright (C) 2012-2013 Free Software Foundation, Inc.\\n\");\n   printf (\"@c This is part of the GCC manual.\\n\");"}]}