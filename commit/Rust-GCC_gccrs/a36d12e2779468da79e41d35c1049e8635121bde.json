{"sha": "a36d12e2779468da79e41d35c1049e8635121bde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2ZDEyZTI3Nzk0NjhkYTc5ZTQxZDM1YzEwNDllODYzNTEyMWJkZQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:54:59Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:54:59Z"}, "message": "graphite-poly.c (print_scop): Print SCOP_ORIGINAL_SCHEDULE and SCOP_TRANSFORMED_SCHEDULE.\n\n2009-10-06  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-poly.c (print_scop): Print SCOP_ORIGINAL_SCHEDULE and\n\tSCOP_TRANSFORMED_SCHEDULE.\n\t(loop_to_lst): New.\n\t(scop_to_lst): New.\n\t(print_lst): New.\n\t(debug_lst): New.\n\t* graphite-poly.h (lst_p): New.\n\t(struct lst): New.\n\t(LST_LOOP_P): New.\n\t(LST_LOOP_FATHER): New.\n\t(LST_PBB): New.\n\t(LST_SEQ): New.\n\t(scop_to_lst): Declared.\n\t(print_lst): Declared.\n\t(debug_lst): Declared.\n\t(new_lst_loop): New.\n\t(new_lst_stmt): New.\n\t(copy_lst): New.\n\t(lst_depth): New.\n\t(lst_dewey_number): New.\n\t(struct scop): Add original_schedule and transformed_schedule fields.\n\t(SCOP_ORIGINAL_SCHEDULE): New.\n\t(SCOP_TRANSFORMED_SCHEDULE): New.\n\t* graphite-sese-to-poly.c (build_poly_scop): Call scop_to_lst.\n\nFrom-SVN: r154562", "tree": {"sha": "02e35480ed7c4b55e69634fdedb15db36377cafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e35480ed7c4b55e69634fdedb15db36377cafe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a36d12e2779468da79e41d35c1049e8635121bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36d12e2779468da79e41d35c1049e8635121bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36d12e2779468da79e41d35c1049e8635121bde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36d12e2779468da79e41d35c1049e8635121bde/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0dd14403d8cd1bbf4d47eec81b7eae81c9605d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0dd14403d8cd1bbf4d47eec81b7eae81c9605d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0dd14403d8cd1bbf4d47eec81b7eae81c9605d3"}], "stats": {"total": 236, "additions": 236, "deletions": 0}, "files": [{"sha": "d316aac6043e17cd3f0f668647f9f3f0d1a79ded", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=a36d12e2779468da79e41d35c1049e8635121bde", "patch": "@@ -1,3 +1,30 @@\n+2009-10-06  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-poly.c (print_scop): Print SCOP_ORIGINAL_SCHEDULE and\n+\tSCOP_TRANSFORMED_SCHEDULE.\n+\t(loop_to_lst): New.\n+\t(scop_to_lst): New.\n+\t(print_lst): New.\n+\t(debug_lst): New.\n+\t* graphite-poly.h (lst_p): New.\n+\t(struct lst): New.\n+\t(LST_LOOP_P): New.\n+\t(LST_LOOP_FATHER): New.\n+\t(LST_PBB): New.\n+\t(LST_SEQ): New.\n+\t(scop_to_lst): Declared.\n+\t(print_lst): Declared.\n+\t(debug_lst): Declared.\n+\t(new_lst_loop): New.\n+\t(new_lst_stmt): New.\n+\t(copy_lst): New.\n+\t(lst_depth): New.\n+\t(lst_dewey_number): New.\n+\t(struct scop): Add original_schedule and transformed_schedule fields.\n+\t(SCOP_ORIGINAL_SCHEDULE): New.\n+\t(SCOP_TRANSFORMED_SCHEDULE): New.\n+\t* graphite-sese-to-poly.c (build_poly_scop): Call scop_to_lst.\n+\n 2009-10-05  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (reduction_ddr): New."}, {"sha": "843640c705d19f72cee4e13255b4ee18339dbea2", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=a36d12e2779468da79e41d35c1049e8635121bde", "patch": "@@ -643,6 +643,14 @@ print_scop (FILE *file, scop_p scop)\n     print_pbb (file, pbb);\n \n   fprintf (file, \")\\n\");\n+\n+  fprintf (file, \"original_lst (\\n\");\n+  print_lst (file, SCOP_ORIGINAL_SCHEDULE (scop), 0);\n+  fprintf (file, \")\\n\");\n+\n+  fprintf (file, \"transformed_lst (\\n\");\n+  print_lst (file, SCOP_TRANSFORMED_SCHEDULE (scop), 0);\n+  fprintf (file, \")\\n\");\n }\n \n /* Print to STDERR the domain of PBB.  */\n@@ -807,5 +815,92 @@ pbb_number_of_iterations_at_time (poly_bb_p pbb,\n   ppl_delete_Pointset_Powerset_C_Polyhedron (ext_domain);\n }\n \n+/* Translates LOOP to LST.  */\n+\n+static lst_p\n+loop_to_lst (loop_p loop, VEC (poly_bb_p, heap) *bbs, int *i)\n+{\n+  poly_bb_p pbb;\n+  VEC (lst_p, heap) *seq = VEC_alloc (lst_p, heap, 5);\n+\n+  for (; VEC_iterate (poly_bb_p, bbs, *i, pbb); (*i)++)\n+    {\n+      lst_p stmt;\n+      basic_block bb = GBB_BB (PBB_BLACK_BOX (pbb));\n+\n+      if (bb->loop_father == loop)\n+\tstmt = new_lst_stmt (pbb);\n+      else\n+\t{\n+\t  if (flow_bb_inside_loop_p (loop, bb))\n+\t    stmt = loop_to_lst (loop->inner, bbs, i);\n+\t  else\n+\t    {\n+\t      loop_p next = loop;\n+\n+\t      while ((next = next->next)\n+\t\t     && !flow_bb_inside_loop_p (next, bb));\n+\n+\t      if (!next)\n+\t\treturn new_lst_loop (seq);\n+\n+\t      stmt = loop_to_lst (next, bbs, i);\n+\t    }\n+\t}\n+\n+      VEC_safe_push (lst_p, heap, seq, stmt);\n+    }\n+\n+  return new_lst_loop (seq);\n+}\n+\n+/* Reads the original scattering of the SCOP and returns an LST\n+   representing it.  */\n+\n+void\n+scop_to_lst (scop_p scop)\n+{\n+  poly_bb_p pbb = VEC_index (poly_bb_p, SCOP_BBS (scop), 0);\n+  loop_p loop = outermost_loop_in_sese (SCOP_REGION (scop), GBB_BB (PBB_BLACK_BOX (pbb)));\n+  int i = 0;\n+\n+  SCOP_ORIGINAL_SCHEDULE (scop) = loop_to_lst (loop, SCOP_BBS (scop), &i);\n+  SCOP_TRANSFORMED_SCHEDULE (scop) = copy_lst (SCOP_ORIGINAL_SCHEDULE (scop));\n+}\n+\n+/* Print LST to FILE with INDENT spaces of indentation.  */\n+\n+void\n+print_lst (FILE *file, lst_p lst, int indent)\n+{\n+  if (!lst)\n+    return;\n+\n+  indent_to (file, indent);\n+\n+  if (LST_LOOP_P (lst))\n+    {\n+      int i;\n+      lst_p l;\n+\n+      fprintf (file, \"%d (loop\", lst_dewey_number (lst));\n+\n+      for (i = 0; VEC_iterate (lst_p, LST_SEQ (lst), i, l); i++)\n+\tprint_lst (file, l, indent + 2);\n+\n+      fprintf (file, \")\");\n+    }\n+  else\n+    fprintf (file, \"%d stmt_%d\", lst_dewey_number (lst), pbb_index (LST_PBB (lst)));\n+}\n+\n+/* Print LST to STDERR.  */\n+\n+void\n+debug_lst (lst_p lst)\n+{\n+  print_lst (stderr, lst, 0);\n+}\n+\n #endif\n "}, {"sha": "f9e59db89e59459536e2985af954fe73e33e5423", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=a36d12e2779468da79e41d35c1049e8635121bde", "patch": "@@ -580,6 +580,114 @@ psct_add_scattering_dimension (poly_bb_p pbb, ppl_dimension_type index)\n   PBB_NB_SCATTERING_TRANSFORM (pbb) += 1;\n }\n \n+typedef struct lst *lst_p;\n+DEF_VEC_P(lst_p);\n+DEF_VEC_ALLOC_P (lst_p, heap);\n+\n+/* Loops and Statements Tree.  */\n+struct lst {\n+\n+  /* LOOP_P is true when an LST node is a loop.  */\n+  bool loop_p;\n+\n+  /* A pointer to the loop that contains this node.  */\n+  lst_p loop_father;\n+\n+  /* Loop nodes contain a sequence SEQ of LST nodes, statements\n+     contain a pointer to their polyhedral representation PBB.  */\n+  union {\n+    poly_bb_p pbb;\n+    VEC (lst_p, heap) *seq;\n+  } node;\n+};\n+\n+#define LST_LOOP_P(LST) ((LST)->loop_p)\n+#define LST_LOOP_FATHER(LST) ((LST)->loop_father)\n+#define LST_PBB(LST) ((LST)->node.pbb)\n+#define LST_SEQ(LST) ((LST)->node.seq)\n+\n+void scop_to_lst (scop_p);\n+void print_lst (FILE *, lst_p, int);\n+void debug_lst (lst_p);\n+\n+/* Creates a new LST loop with SEQ.  */\n+\n+static inline lst_p\n+new_lst_loop (VEC (lst_p, heap) *seq)\n+{\n+  lst_p lst = XNEW (struct lst);\n+  int i;\n+  lst_p l;\n+\n+  LST_LOOP_P (lst) = true;\n+  LST_SEQ (lst) = seq;\n+  LST_LOOP_FATHER (lst) = NULL;\n+\n+  for (i = 0; VEC_iterate (lst_p, seq, i, l); i++)\n+    LST_LOOP_FATHER (l) = lst;\n+\n+  return lst;\n+}\n+\n+/* Creates a new LST statement with PBB.  */\n+\n+static inline lst_p\n+new_lst_stmt (poly_bb_p pbb)\n+{\n+  lst_p lst = XNEW (struct lst);\n+\n+  LST_LOOP_P (lst) = false;\n+  LST_PBB (lst) = pbb;\n+  LST_LOOP_FATHER (lst) = NULL;\n+  return lst;\n+}\n+\n+/* Returns a copy of LST.  */\n+\n+static inline lst_p\n+copy_lst (lst_p lst)\n+{\n+  if (!lst)\n+    return NULL;\n+\n+  if (LST_LOOP_P (lst))\n+    return new_lst_loop (VEC_copy (lst_p, heap, LST_SEQ (lst)));\n+\n+  return new_lst_stmt (LST_PBB (lst));\n+}\n+\n+/* Returns the loop depth of LST.  */\n+\n+static inline int\n+lst_depth (lst_p lst)\n+{\n+  if (!lst)\n+    return -1;\n+\n+  return lst_depth (LST_LOOP_FATHER (lst)) + 1;\n+}\n+\n+/* Returns the Dewey number for LST.  */\n+\n+static inline int\n+lst_dewey_number (lst_p lst)\n+{\n+  int i;\n+  lst_p l;\n+\n+  if (!lst)\n+    return -1;\n+\n+  if (!LST_LOOP_FATHER (lst))\n+    return 0;\n+\n+  for (i = 0; VEC_iterate (lst_p, LST_SEQ (LST_LOOP_FATHER (lst)), i, l); i++)\n+    if (l == lst)\n+      return i;\n+\n+  return -1;\n+}\n+\n /* A SCOP is a Static Control Part of the program, simple enough to be\n    represented in polyhedral form.  */\n struct scop\n@@ -595,6 +703,9 @@ struct scop\n      representation.  */\n   VEC (poly_bb_p, heap) *bbs;\n \n+  /* Original and transformed schedules.  */\n+  lst_p original_schedule, transformed_schedule;\n+\n   /* Data dependence graph for this SCoP.  */\n   struct graph *dep_graph;\n \n@@ -623,6 +734,8 @@ struct scop\n #define SCOP_DEP_GRAPH(S) (S->dep_graph)\n #define SCOP_CONTEXT(S) (S->context)\n #define SCOP_ORIGINAL_PDDRS(S) (S->original_pddrs)\n+#define SCOP_ORIGINAL_SCHEDULE(S) (S->original_schedule)\n+#define SCOP_TRANSFORMED_SCHEDULE(S) (S->transformed_schedule)\n \n extern scop_p new_scop (void *);\n extern void free_scop (scop_p);"}, {"sha": "807e287f62297214088bbbbb7b518fca6af275db", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36d12e2779468da79e41d35c1049e8635121bde/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=a36d12e2779468da79e41d35c1049e8635121bde", "patch": "@@ -2605,6 +2605,7 @@ build_poly_scop (scop_p scop)\n   build_scop_context (scop);\n \n   add_conditions_to_constraints (scop);\n+  scop_to_lst (scop);\n   build_scop_scattering (scop);\n   build_scop_drs (scop);\n "}]}