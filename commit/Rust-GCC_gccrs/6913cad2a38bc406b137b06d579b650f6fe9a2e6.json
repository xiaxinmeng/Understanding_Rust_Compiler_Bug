{"sha": "6913cad2a38bc406b137b06d579b650f6fe9a2e6", "node_id": "C_kwDOANBUbNoAKDY5MTNjYWQyYTM4YmM0MDZiMTM3YjA2ZDU3OWI2NTBmNmZlOWEyZTY", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-10-25T05:31:54Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-10-31T01:50:07Z"}, "message": "Enable V4BFmode and V2BFmode.\n\nEnable V4BFmode and V2BFmode with the same ABI as V4HFmode and\nV2HFmode. No real operation is supported for them except for movement.\nThis should solve PR target/107261.\n\nAlso I notice there's redundancy in VALID_AVX512FP16_REG_MODE, and\nremove V2BFmode remove it.\n\ngcc/ChangeLog:\n\n\tPR target/107261\n\t* config/i386/i386-modes.def (VECTOR_MODE): Support V2BFmode.\n\t* config/i386/i386.cc (classify_argument): Handle V4BFmode and\n\tV2BFmode.\n\t(ix86_convert_const_vector_to_integer): Ditto.\n\t* config/i386/i386.h (VALID_AVX512FP16_REG_MODE): Remove\n\tV2BFmode.\n\t(VALID_SSE2_REG_MODE): Add V4BFmode and V2BFmode.\n\t(VALID_MMX_REG_MODE): Add V4BFmode.\n\t* config/i386/i386.md (mode): Add V4BF and V2BF.\n\t(MODE_SIZE): Ditto.\n\t* config/i386/mmx.md (MMXMODE) Add V4BF.\n\t(V_32): Add V2BF.\n\t(V_16_32_64): Add V4BF and V2BF.\n\t(mmxinsnmode): Add V4BF and V2BF.\n\t(*mov<mode>_internal): Hanlde V4BFmode and V2BFmode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr107261.c: New test.", "tree": {"sha": "160fcedc12fd05945ecb4498483368395ec2d7c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160fcedc12fd05945ecb4498483368395ec2d7c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6913cad2a38bc406b137b06d579b650f6fe9a2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6913cad2a38bc406b137b06d579b650f6fe9a2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6913cad2a38bc406b137b06d579b650f6fe9a2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6913cad2a38bc406b137b06d579b650f6fe9a2e6/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5e884411903f82cb665476a0e8df3fe51a84ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5e884411903f82cb665476a0e8df3fe51a84ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5e884411903f82cb665476a0e8df3fe51a84ae"}], "stats": {"total": 85, "additions": 68, "deletions": 17}, "files": [{"sha": "dbc3165c5fc6b15515e5e427b3b82ebbdb4c72b7", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=6913cad2a38bc406b137b06d579b650f6fe9a2e6", "patch": "@@ -93,6 +93,7 @@ VECTOR_MODES (FLOAT, 64);     /*  V32HF V16SF V8DF V4TF */\n VECTOR_MODES (FLOAT, 128);    /* V64HF V32SF V16DF V8TF */\n VECTOR_MODES (FLOAT, 256);    /* V128HF V64SF V32DF V16TF */\n VECTOR_MODE (FLOAT, HF, 2);   /* \t      \t   V2HF */\n+VECTOR_MODE (FLOAT, BF, 2);   /* \t      \t   V2BF */\n VECTOR_MODE (FLOAT, HF, 6);   /*\t\t   V6HF */\n VECTOR_MODE (INT, TI, 1);     /*                   V1TI */\n VECTOR_MODE (INT, DI, 1);     /*                   V1DI */"}, {"sha": "c0f37149ed00427f4a34648925264b4cd9bf287a", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=6913cad2a38bc406b137b06d579b650f6fe9a2e6", "patch": "@@ -2507,7 +2507,9 @@ classify_argument (machine_mode mode, const_tree type,\n     case E_V2SImode:\n     case E_V4HImode:\n     case E_V4HFmode:\n+    case E_V4BFmode:\n     case E_V2HFmode:\n+    case E_V2BFmode:\n     case E_V8QImode:\n       classes[0] = X86_64_SSE_CLASS;\n       return 1;\n@@ -2991,6 +2993,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V8QImode:\n     case E_V4HImode:\n     case E_V4HFmode:\n+    case E_V4BFmode:\n     case E_V2SImode:\n     case E_V2SFmode:\n     case E_V1TImode:\n@@ -3240,6 +3243,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     case E_V8QImode:\n     case E_V4HImode:\n     case E_V4HFmode:\n+    case E_V4BFmode:\n     case E_V2SImode:\n     case E_V2SFmode:\n     case E_V1TImode:\n@@ -15811,7 +15815,9 @@ ix86_convert_const_vector_to_integer (rtx op, machine_mode mode)\n \t}\n       break;\n     case E_V2HFmode:\n+    case E_V2BFmode:\n     case E_V4HFmode:\n+    case E_V4BFmode:\n     case E_V2SFmode:\n       for (int i = 0; i < nunits; ++i)\n \t{"}, {"sha": "16d9c60607751cb070714dbc50d2d738ea3a853f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6913cad2a38bc406b137b06d579b650f6fe9a2e6", "patch": "@@ -1033,13 +1033,12 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V8BFmode || (MODE) == TImode)\n \n #define VALID_AVX512FP16_REG_MODE(MODE)\t\t\t\t\t\\\n-  ((MODE) == V8HFmode || (MODE) == V16HFmode || (MODE) == V32HFmode\t\\\n-   || (MODE) == V2HFmode)\n+  ((MODE) == V8HFmode || (MODE) == V16HFmode || (MODE) == V32HFmode)\n \n #define VALID_SSE2_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n    || (MODE) == V8HFmode || (MODE) == V4HFmode || (MODE) == V2HFmode\t\\\n-   || (MODE) == V8BFmode \\\n+   || (MODE) == V8BFmode || (MODE) == V4BFmode || (MODE) == V2BFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n    || (MODE) == V2DImode || (MODE) == V2QImode || (MODE) == DFmode\t\\\n    || (MODE) == HFmode || (MODE) == BFmode)\n@@ -1057,7 +1056,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   ((MODE) == V1DImode || (MODE) == DImode\t\t\t\t\\\n    || (MODE) == V2SImode || (MODE) == SImode\t\t\t\t\\\n    || (MODE) == V4HImode || (MODE) == V8QImode\t\t\t\t\\\n-   || (MODE) == V4HFmode)\n+   || (MODE) == V4HFmode || (MODE) == V4BFmode)\n \n #define VALID_MASK_REG_MODE(MODE) ((MODE) == HImode || (MODE) == QImode)\n \n@@ -1074,7 +1073,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n    || (MODE) == SDmode || (MODE) == DDmode\t\t\t\t\\\n    || (MODE) == HFmode || (MODE) == HCmode || (MODE) == BFmode\t\t\\\n-   || (MODE) == V2HImode || (MODE) == V2HFmode\t\t\t\t\\\n+   || (MODE) == V2HImode || (MODE) == V2HFmode || (MODE) == V2BFmode\t\\\n    || (MODE) == V1SImode || (MODE) == V4QImode || (MODE) == V2QImode\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\\n        && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\"}, {"sha": "8081df767417dd48a85fcf9e8082736a16621852", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6913cad2a38bc406b137b06d579b650f6fe9a2e6", "patch": "@@ -501,7 +501,7 @@\n ;; Main data type used by the insn\n (define_attr \"mode\"\n   \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,BF,SF,DF,XF,TF,V32HF,V16HF,V8HF,\n-   V16SF,V8SF,V4DF,V4SF,V2DF,V2SF,V1DF,V8DF,V4HF,V2HF\"\n+   V16SF,V8SF,V4DF,V4SF,V2DF,V2SF,V1DF,V8DF,V4HF,V4BF,V2HF,V2BF\"\n   (const_string \"unknown\"))\n \n ;; The CPU unit operations uses.\n@@ -1120,7 +1120,8 @@\n \t\t\t     (V4SF \"16\") (V8SF \"32\") (V16SF \"64\")\n \t\t\t     (V8HF \"16\") (V16HF \"32\") (V32HF \"64\")\n \t\t\t     (V4HF \"8\") (V2HF \"4\")\n-\t\t\t     (V8BF \"16\") (V16BF \"32\") (V32BF \"64\")])\n+\t\t\t     (V8BF \"16\") (V16BF \"32\") (V32BF \"64\")\n+\t\t\t     (V4BF \"8\") (V2BF \"4\")])\n \n ;; Double word integer modes as mode attribute.\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\") (TI \"OI\")])"}, {"sha": "d5134cc351efcf3233ba01eab24f9d42346e388c", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=6913cad2a38bc406b137b06d579b650f6fe9a2e6", "patch": "@@ -48,7 +48,7 @@\n (define_mode_iterator MMXMODEI8 [V8QI V4HI V2SI (V1DI \"TARGET_SSE2\")])\n \n ;; All 8-byte vector modes handled by MMX\n-(define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF V4HF])\n+(define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF V4HF V4BF])\n (define_mode_iterator MMXMODE124 [V8QI V4HI V2SI V2SF])\n \n ;; Mix-n-match\n@@ -58,7 +58,7 @@\n (define_mode_iterator MMXMODE248 [V4HI V2SI V1DI])\n \n ;; All 4-byte integer/float16 vector modes\n-(define_mode_iterator V_32 [V4QI V2HI V1SI V2HF])\n+(define_mode_iterator V_32 [V4QI V2HI V1SI V2HF V2BF])\n \n ;; 4-byte integer vector modes\n (define_mode_iterator VI_32 [V4QI V2HI])\n@@ -72,7 +72,8 @@\n ;; All 2-byte, 4-byte and 8-byte vector modes with more than 1 element\n (define_mode_iterator V_16_32_64\n    [V2QI V4QI V2HI V2HF\n-    (V8QI \"TARGET_64BIT\") (V4HI \"TARGET_64BIT\") (V4HF \"TARGET_64BIT\")\n+    (V8QI \"TARGET_64BIT\") (V4HI \"TARGET_64BIT\")\n+    (V4HF \"TARGET_64BIT\") (V4BF \"TARGET_64BIT\")\n     (V2SI \"TARGET_64BIT\") (V2SF \"TARGET_64BIT\")])\n \n ;; V2S* modes\n@@ -92,6 +93,7 @@\n    (V4HI \"DI\") (V2HI \"SI\")\n    (V2SI \"DI\")\n    (V4HF \"DI\") (V2HF \"SI\")\n+   (V4BF \"DI\") (V2BF \"SI\")\n    (V2SF \"DI\")])\n \n (define_mode_attr mmxdoublemode\n@@ -213,9 +215,9 @@\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"SI\")\n \t    (eq_attr \"alternative\" \"11,12\")\n-\t      (cond [(match_test \"<MODE>mode == V2SFmode\")\n-\t\t       (const_string \"V4SF\")\n-\t\t     (match_test \"<MODE>mode == V4HFmode\")\n+\t      (cond [(match_test \"<MODE>mode == V2SFmode\n+\t\t\t\t  || <MODE>mode == V4HFmode\n+\t\t\t\t  || <MODE>mode == V4BFmode\")\n \t\t       (const_string \"V4SF\")\n \t\t     (ior (not (match_test \"TARGET_SSE2\"))\n \t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n@@ -227,13 +229,15 @@\n \t\t (ior (ior (and (match_test \"<MODE>mode == V2SFmode\")\n \t\t\t\t(not (match_test \"TARGET_MMX_WITH_SSE\")))\n \t\t\t   (not (match_test \"TARGET_SSE2\")))\n-\t\t      (match_test \"<MODE>mode == V4HFmode\")))\n+\t\t      (match_test \"<MODE>mode == V4HFmode\n+\t\t\t\t  || <MODE>mode == V4BFmode\")))\n \t      (const_string \"V2SF\")\n \n \t    (and (eq_attr \"alternative\" \"14\")\n \t\t (ior (ior (match_test \"<MODE>mode == V2SFmode\")\n \t\t\t   (not (match_test \"TARGET_SSE2\")))\n-\t\t      (match_test \"<MODE>mode == V4HFmode\")))\n+\t\t      (match_test \"<MODE>mode == V4HFmode\n+\t\t\t\t  || <MODE>mode == V4BFmode\")))\n \t      (const_string \"V2SF\")\n \t   ]\n \t   (const_string \"DI\")))\n@@ -321,7 +325,8 @@\n        (const_string \"*\")))\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"2,3\")\n-\t      (cond [(match_test \"<MODE>mode == V2HFmode\")\n+\t      (cond [(match_test \"<MODE>mode == V2HFmode\n+\t\t\t\t || <MODE>mode == V2BFmode\")\n \t\t       (const_string \"V4SF\")\n \t\t     (match_test \"TARGET_AVX\")\n \t\t       (const_string \"TI\")\n@@ -332,7 +337,8 @@\n \t\t    (const_string \"TI\"))\n \n \t    (and (eq_attr \"alternative\" \"4,5\")\n-\t\t (ior (match_test \"<MODE>mode == V2HFmode\")\n+\t\t (ior (match_test \"<MODE>mode == V2HFmode\n+\t\t\t\t || <MODE>mode == V2BFmode\")\n \t\t      (not (match_test \"TARGET_SSE2\"))))\n \t      (const_string \"SF\")\n \t   ]"}, {"sha": "eb1d232fbfc4bdcfbf5824916d14c792290befb5", "filename": "gcc/testsuite/gcc.target/i386/pr107261.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107261.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6913cad2a38bc406b137b06d579b650f6fe9a2e6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107261.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107261.c?ref=6913cad2a38bc406b137b06d579b650f6fe9a2e6", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef __bf16 v4bf __attribute__ ((vector_size (8)));\n+typedef __bf16 v2bf __attribute__ ((vector_size (4)));\n+\n+v4bf\n+v4bf_abi_1 (v4bf a)\n+{\n+  return a;\n+}\n+\n+v4bf\n+v4bf_abi_3 (v4bf a, v4bf b, v4bf c)\n+{\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*%mm2, %mm0\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movaps\\[\\\\t \\]*%xmm2, %xmm0\" 1 { target { ! ia32 } } } } */\n+\n+v4bf\n+v4bf_abi_4 (v4bf a, v4bf b, v4bf c, v4bf d)\n+{\n+  return d;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*4\\\\(%esp\\\\), %mm0\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movaps\\[\\\\t \\]*%xmm3, %xmm0\" 1 { target { ! ia32 } } } } */\n+\n+v2bf\n+v2bf_test (v2bf a, v2bf b, v2bf c, v2bf d)\n+{\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*8\\\\(%esp\\\\), %eax\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"movaps\\[\\\\t \\]*%xmm1, %xmm0\" 1 { target { ! ia32 } } } } */"}]}