{"sha": "2d39086779c6d404d8b61ea08c2ff343000dfd77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzOTA4Njc3OWM2ZDQwNGQ4YjYxZWEwOGMyZmYzNDMwMDBkZmQ3Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-15T16:56:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-15T16:56:50Z"}, "message": "decl2.c (arg_assoc_type): Handle METHOD_TYPE like FUNCTION_TYPE.\n\n\t* decl2.c (arg_assoc_type): Handle METHOD_TYPE like FUNCTION_TYPE.\n\tHandle TEMPLATE_TYPE_PARM.\n\t(arg_assoc): Rewrite.\n\nFrom-SVN: r21199", "tree": {"sha": "0c39820a8b3af2c64ee768e07e5251679c5d333a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c39820a8b3af2c64ee768e07e5251679c5d333a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d39086779c6d404d8b61ea08c2ff343000dfd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d39086779c6d404d8b61ea08c2ff343000dfd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d39086779c6d404d8b61ea08c2ff343000dfd77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d39086779c6d404d8b61ea08c2ff343000dfd77/comments", "author": null, "committer": null, "parents": [{"sha": "2d2ad82da4fdd52b434a7202f77a63ebc330366d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2ad82da4fdd52b434a7202f77a63ebc330366d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2ad82da4fdd52b434a7202f77a63ebc330366d"}], "stats": {"total": 106, "additions": 35, "deletions": 71}, "files": [{"sha": "1425f4b336e991242991be43120ad4965bf7dd8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d39086779c6d404d8b61ea08c2ff343000dfd77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d39086779c6d404d8b61ea08c2ff343000dfd77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d39086779c6d404d8b61ea08c2ff343000dfd77", "patch": "@@ -1,7 +1,11 @@\n 1998-07-15  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl2.c (arg_assoc_type): Handle METHOD_TYPE like FUNCTION_TYPE.\n+\tHandle TEMPLATE_TYPE_PARM.\n+\t(arg_assoc): Rewrite.\n+\n \t* pt.c (complete_template_args): Don't look at the context unless\n-\twe have too.\n+\twe have to.\n \n \t* method.c (build_decl_overload_real): Fix namespace handling.\n "}, {"sha": "9570bc0393cbb36fde895683ca55559a767f6199", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 30, "deletions": 70, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d39086779c6d404d8b61ea08c2ff343000dfd77/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d39086779c6d404d8b61ea08c2ff343000dfd77/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2d39086779c6d404d8b61ea08c2ff343000dfd77", "patch": "@@ -4140,7 +4140,8 @@ struct arg_lookup\n static int arg_assoc         PROTO((struct arg_lookup*, tree));\n static int arg_assoc_args    PROTO((struct arg_lookup*, tree));\n \n-/* Add a function to the lookup structure. */\n+/* Add a function to the lookup structure.\n+   Returns 1 on error.  */\n \n static int\n add_function (k, fn)\n@@ -4172,7 +4173,8 @@ add_function (k, fn)\n   return 0;\n }\n \n-/* Add functions of a namespace to the lookup structure. */\n+/* Add functions of a namespace to the lookup structure.\n+   Returns 1 on error.  */\n \n static int\n arg_assoc_namespace (k, scope)\n@@ -4196,7 +4198,8 @@ arg_assoc_namespace (k, scope)\n   return 0;\n }\n \n-/* Adds everything associated with class to the lookup structure. */\n+/* Adds everything associated with class to the lookup structure.\n+   Returns 1 on error.  */\n \n static int\n arg_assoc_class (k, type)\n@@ -4234,7 +4237,8 @@ arg_assoc_class (k, type)\n   return 0;\n }\n \n-/* Adds everything associated with a given type. */\n+/* Adds everything associated with a given type.\n+   Returns 1 on error.  */\n \n static int\n arg_assoc_type (k, type)\n@@ -4267,16 +4271,16 @@ arg_assoc_type (k, type)\n \treturn 1;\n       return arg_assoc_type (k, TREE_TYPE (type));\n     case METHOD_TYPE:\n-      /* Associate the class of the method. */\n-      if (arg_assoc_type (k, TYPE_METHOD_BASETYPE (type)))\n-\treturn 1;\n-      /* Fall through. */\n+      /* The basetype is referenced in the first arg type, so just\n+\t fall through.  */\n     case FUNCTION_TYPE:\n       /* Associate the parameter types. */\n       if (arg_assoc_args (k, TYPE_ARG_TYPES (type)))\n \treturn 1;\n       /* Associate the return type. */\n       return arg_assoc_type (k, TREE_TYPE (type));\n+    case TEMPLATE_TYPE_PARM:\n+      return 0;\n     case LANG_TYPE:\n       if (type == unknown_type_node)\n \treturn 0;\n@@ -4287,7 +4291,7 @@ arg_assoc_type (k, type)\n   return 0;\n }\n \n-/* Adds everything associated with arguments. */\n+/* Adds everything associated with arguments.  Returns 1 on error.  */\n \n static int\n arg_assoc_args (k, args)\n@@ -4300,74 +4304,30 @@ arg_assoc_args (k, args)\n   return 0;\n }\n \n-/* Adds everything associated with a given tree_node. */\n+/* Adds everything associated with a given tree_node.  Returns 1 on error.  */\n \n static int\n arg_assoc (k, n)\n      struct arg_lookup* k;\n      tree n;\n {\n-  switch (TREE_CODE_CLASS (TREE_CODE (n)))\n-    {\n-    case 't':\n-      return arg_assoc_type (k, n);\n-    case 'c':\n-    case '1':\n-    case '2':\n-    case '<':\n-    case 'r':\n-      return arg_assoc_type (k, TREE_TYPE (n));\n-    case 'e':\n-      switch (TREE_CODE (n))\n-\t{\n-\tcase ADDR_EXPR:\n-\t  /* special processing */\n-\t  break;\n-\tdefault:\n-\t  return arg_assoc_type (k, TREE_TYPE (n));\n-\t}\n-    default:\n-      break;\n-    }\n+  if (TREE_CODE_CLASS (TREE_CODE (n)) == 't')\n+    return arg_assoc_type (k, n);\n+\n+  if (! type_unknown_p (n))\n+    return arg_assoc_type (k, TREE_TYPE (n));\n+\n+  if (TREE_CODE (n) == ADDR_EXPR)\n+    n = TREE_OPERAND (n, 0);\n+  if (TREE_CODE (n) == TREE_LIST)\n+    n = TREE_VALUE (n);\n+\n+  my_friendly_assert (TREE_CODE (n) == OVERLOAD, 980715);\n+\n+  for (; n; n = TREE_CHAIN (n))\n+    if (arg_assoc (k, OVL_FUNCTION (n)))\n+      return 1;\n \n-  while (n)\n-    switch (TREE_CODE (n))\n-      {\n-      case CONST_DECL: /* 'd' */\n-      case VAR_DECL:\n-      case PARM_DECL:\n-      case RESULT_DECL:\n-\treturn arg_assoc_type (k, TREE_TYPE (n));\n-      case ADDR_EXPR: /* 'e' */\n-\t/* We can't use the TREE_TYPE, as the type of an overloaded function\n-\t   will be useless here. */\n-\tn = TREE_OPERAND (n, 0);\n-\tcontinue;\n-      case OVERLOAD:  /* 'x' */\n-\tif (arg_assoc (k, OVL_CURRENT (n)))\n-\t  return 1;\n-\tn = OVL_NEXT (n);\n-\tcontinue;\n-      case TREE_LIST: /* 'x' */\n-\t/* XXX Overloaded member, should get an OVERLOAD directly, here. */\n-\tn = TREE_VALUE (n);\n-\tcontinue;\n-      case FUNCTION_DECL: /* 'd' */\n-\tif (arg_assoc_args (k, TYPE_ARG_TYPES (TREE_TYPE (n))))\n-\t  return 1;\t\n-\treturn 0;\n-      case TEMPLATE_DECL:\n-        /* XXX Type of a function template in the context of Koenig lookup?\n-           Assume that template parameters are non-deduced for the moment. */\n-        n = DECL_RESULT (n);\n-        continue;\n-      case ERROR_MARK:\n-        return 0;\n-      default:\n-\tcp_error (\"sorry, Koenig lookup for `%s' of type `%T' failed\",\n-\t\t  tree_code_name [(int)TREE_CODE (n)], TREE_TYPE (n));\n-\tmy_friendly_abort (391);\n-      }\n   return 0;\n }\n "}]}