{"sha": "ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2Y2JkY2E4YTcyMjNlOWI3ZWQ4MjgzMDZiMDlmODBkYjkyZmRiNw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-06-13T03:17:02Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-06-13T03:17:02Z"}, "message": "re PR tree-optimization/61375 (ICE in int_cst_value at -O3 in tree-ssa pass when compiling a reference to an __int128 value)\n\n2014-06-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR tree-optimization/61375\n    * tree-ssa-math-opts.c (init_symbolic_number): Cancel optimization if\n    symbolic number cannot be represented in an uint64_t.\n    (find_bswap_or_nop_1): Likewise.\n\n    gcc/testsuite/\n    PR tree-optimization/61375\n    * gcc.c-torture/execute/pr61375-1.c: New test.\n\nFrom-SVN: r211604", "tree": {"sha": "00dc9bc1a5848830de25e289b8e25e3225dafefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00dc9bc1a5848830de25e289b8e25e3225dafefb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aa1bac557c40373654ca4c15f3502ecb9b8b951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa1bac557c40373654ca4c15f3502ecb9b8b951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa1bac557c40373654ca4c15f3502ecb9b8b951"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "3ddd98ca5246a9c95726511d12982357bba071fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "patch": "@@ -1,3 +1,10 @@\n+2014-06-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/61375\n+\t* tree-ssa-math-opts.c (init_symbolic_number): Cancel optimization if\n+\tsymbolic number cannot be represented in an uint64_t.\n+\t(find_bswap_or_nop_1): Likewise.\n+\n 2014-06-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* symtab.c (symtab_node::reset_section): New method."}, {"sha": "7bb2d7a91d343d466283ad0b4dd585a53bacd7d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "patch": "@@ -1,3 +1,8 @@\n+2014-06-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/61375\n+\t* gcc.c-torture/execute/pr61375-1.c: New test.\n+\n 2014-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/61486"}, {"sha": "89302b2a1d61e28755fcba56029b1235cb44d154", "filename": "gcc/testsuite/gcc.c-torture/execute/pr61375.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61375.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61375.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61375.c?ref=ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "patch": "@@ -0,0 +1,35 @@\n+#ifdef __UINT64_TYPE__\n+typedef __UINT64_TYPE__ uint64_t;\n+#else\n+typedef unsigned long long uint64_t;\n+#endif\n+\n+#ifndef __SIZEOF_INT128__\n+#define __int128 long long\n+#endif\n+\n+/* Some version of bswap optimization would ICE when analyzing a mask constant\n+   too big for an uint64_t variable (PR210931).  */\n+\n+__attribute__ ((noinline, noclone)) uint64_t\n+uint128_central_bitsi_ior (unsigned __int128 in1, uint64_t in2)\n+{\n+  __int128 mask = (__int128)0xffff << 56;\n+  return ((in1 & mask) >> 56) | in2;\n+}\n+\n+int\n+main(int argc)\n+{\n+  __int128 in = 1;\n+#ifdef __SIZEOF_INT128__\n+  in <<= 64;\n+#endif\n+  if (sizeof (uint64_t) * __CHAR_BIT__ != 64)\n+    return 0;\n+  if (sizeof (unsigned __int128) * __CHAR_BIT__ != 128)\n+    return 0;\n+  if (uint128_central_bitsi_ior (in, 2) != 0x102)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "066548d85bedd802d56542363ad415d4fe7e5d9b", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6cbdca8a7223e9b7ed828306b09f80db92fdb7/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ca6cbdca8a7223e9b7ed828306b09f80db92fdb7", "patch": "@@ -1725,6 +1725,8 @@ init_symbolic_number (struct symbolic_number *n, tree src)\n   if (size % BITS_PER_UNIT != 0)\n     return false;\n   size /= BITS_PER_UNIT;\n+  if (size > (int)sizeof (uint64_t))\n+    return false;\n   n->range = size;\n   n->n = CMPNOP;\n \n@@ -1894,6 +1896,8 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t    type_size = TYPE_PRECISION (type);\n \t    if (type_size % BITS_PER_UNIT != 0)\n \t      return NULL_TREE;\n+\t    if (type_size > (int)sizeof (uint64_t) * 8)\n+\t      return NULL_TREE;\n \n \t    /* Sign extension: result is dependent on the value.  */\n \t    old_type_size = TYPE_PRECISION (n->type);"}]}