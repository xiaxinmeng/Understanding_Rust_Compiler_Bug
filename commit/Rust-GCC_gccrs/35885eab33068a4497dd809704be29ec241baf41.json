{"sha": "35885eab33068a4497dd809704be29ec241baf41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU4ODVlYWIzMzA2OGE0NDk3ZGQ4MDk3MDRiZTI5ZWMyNDFiYWY0MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2002-08-27T09:38:05Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-27T09:38:05Z"}, "message": "c-common.c (cpp_define_data_format): New function.\n\n\t* c-common.c (cpp_define_data_format): New function.\n\t(cb_register_builtins): Call it.\n\n\t* doc/cpp.texi (Common Predefined Macros): Document\n\t__TARGET_BITS_ORDER__, __TARGET_BYTES_ORDER__,\n\t__TARGET_INT_WORDS_ORDER__, __TARGET_FLOAT_WORDS_ORDER__,\n\t__TARGET_FLOAT_FORMAT__, __TARGET_USES_VAX_F_FLOAT__,\n\t__TARGET_USES_VAX_D_FLOAT__, __TARGET_USES_VAX_G_FLOAT__,\n\t__TARGET_USES_VAX_H_FLOAT__.\n\nFrom-SVN: r56597", "tree": {"sha": "b643a71ed2bf8c628bac297990e0dd2b52c5eadc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b643a71ed2bf8c628bac297990e0dd2b52c5eadc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35885eab33068a4497dd809704be29ec241baf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35885eab33068a4497dd809704be29ec241baf41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35885eab33068a4497dd809704be29ec241baf41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35885eab33068a4497dd809704be29ec241baf41/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0c6c224e23387e0e5a21e75098bd68f06c32c2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c6c224e23387e0e5a21e75098bd68f06c32c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c6c224e23387e0e5a21e75098bd68f06c32c2b"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "4add4da5e4c29696ac309e5540addae081a95243", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35885eab33068a4497dd809704be29ec241baf41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35885eab33068a4497dd809704be29ec241baf41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35885eab33068a4497dd809704be29ec241baf41", "patch": "@@ -1,3 +1,15 @@\n+2002-08-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-common.c (cpp_define_data_format): New function.\n+\t(cb_register_builtins): Call it.\n+\n+\t* doc/cpp.texi (Common Predefined Macros): Document\n+\t__TARGET_BITS_ORDER__, __TARGET_BYTES_ORDER__,\n+\t__TARGET_INT_WORDS_ORDER__, __TARGET_FLOAT_WORDS_ORDER__,\n+\t__TARGET_FLOAT_FORMAT__, __TARGET_USES_VAX_F_FLOAT__,\n+\t__TARGET_USES_VAX_D_FLOAT__, __TARGET_USES_VAX_G_FLOAT__,\n+\t__TARGET_USES_VAX_H_FLOAT__.\n+\n 2002-08-26  Ziemowit Laski <zlaski@apple.com>\n \n \t* objc/objc-act.c (get_super_receiver): If inside a class method"}, {"sha": "9e9e409c69a0ff36463a570fc99421febb667e4b", "filename": "gcc/c-common.c", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35885eab33068a4497dd809704be29ec241baf41/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35885eab33068a4497dd809704be29ec241baf41/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=35885eab33068a4497dd809704be29ec241baf41", "patch": "@@ -749,6 +749,7 @@ void builtin_define_std PARAMS ((const char *));\n static void builtin_define_with_value PARAMS ((const char *, const char *,\n \t\t\t\t\t       int));\n static void builtin_define_type_max PARAMS ((const char *, tree, int));\n+static void cpp_define_data_format PARAMS ((cpp_reader *));\n \n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n@@ -4661,6 +4662,96 @@ boolean_increment (code, arg)\n   return val;\n }\n \f\n+/* Define macros necessary to describe fundamental data type formats.  */\n+static void\n+cpp_define_data_format (pfile)\n+    cpp_reader *pfile;\n+{\n+  const char *format;\n+  /* Define endianness enumeration values.  */\n+  cpp_define (pfile, \"__GCC_LITTLE_ENDIAN__=0\");\n+  cpp_define (pfile, \"__GCC_BIG_ENDIAN__=1\");\n+\n+  /* Define supported floating-point format enumeration values.  */\n+  cpp_define (pfile, \"__UNKNOWN_FORMAT__=0\");\n+  cpp_define (pfile, \"__IEEE_FORMAT__=1\");\n+  cpp_define (pfile, \"__IBM_FORMAT__=2\");\n+  cpp_define (pfile, \"__C4X_FORMAT__=3\");\n+  cpp_define (pfile, \"__VAX_FORMAT__=4\");\n+  \n+  /* Define target endianness:\n+       - bit order\n+       - byte order\n+       - word order in an integer that spans a multi-word\n+       - word order in a floating-poing that spans a multi-word  */\n+  if (BITS_BIG_ENDIAN)\n+    cpp_define (pfile, \"__TARGET_BITS_ORDER__=__GCC_BIG_ENDIAN__\");\n+  else\n+    cpp_define (pfile, \"__TARGET_BITS_ORDER__=__GCC_BIG_ENDIAN__\");\n+  if (BYTES_BIG_ENDIAN)\n+    cpp_define (pfile, \"__TARGET_BYTES_ORDER__=__GCC_BIG_ENDIAN__\");\n+  else\n+    cpp_define (pfile, \"__TARGET_BYTES_ORDER__=__GCC_LITTLE_ENDIAN__\");\n+  /* Define words order in a multi-word integer.  */\n+  if (WORDS_BIG_ENDIAN)\n+    cpp_define (pfile, \"__TARGET_INT_WORDS_ORDER__=__GCC_BIG_ENDIAN__\");\n+  else\n+    cpp_define (pfile, \"__TARGET_INT_WORDS_ORDER__=__GCC_LITTLE_ENDIAN__\");\n+  /* Define words order in a multi-word floating point.  */\n+  if (FLOAT_WORDS_BIG_ENDIAN)\n+    cpp_define (pfile, \"__TARGET_FLOAT_WORDS_ORDER__=__GCC_BIG_ENDIAN__\");\n+  else\n+    cpp_define (pfile, \"__TARGET_FLOAT_WORDS_ORDER__=__GCC_LITTLE_ENDIAN__\");\n+\n+  switch (TARGET_FLOAT_FORMAT)\n+    {\n+    case UNKNOWN_FLOAT_FORMAT:\n+      format = \"__UNKNOWN_FORMAT__\";\n+      break;\n+\n+    case IEEE_FLOAT_FORMAT:\n+      format = \"__IEEE_FORMAT__\";\n+      break;\n+\n+    case VAX_FLOAT_FORMAT:\n+      format = \"__VAX_FORMAT__\";\n+      cpp_define (pfile, \"__TARGET_USES_VAX_F_FLOAT__=1\");\n+#ifdef TARGET_G_FLOAT      \n+      if (TARGET_G_FLOAT)\n+        {\n+          cpp_define (pfile, \"__TARGET_USES_VAX_D_FLOAT__=0\");\n+          cpp_define (pfile, \"__TARGET_USES_VAX_G_FLOAT__=1\");\n+        }\n+      else\n+        {\n+          cpp_define (pfile, \"__TARGET_USES_VAX_D_FLOAT__=1\");\n+          cpp_define (pfile, \"__TARGET_USES_VAX_G_FLOAT__=0\");\n+        }\n+#endif       \n+      cpp_define (pfile, \"__TARGET_USES_VAX_H_FLOAT__=1\");\n+      break;\n+\n+    case IBM_FLOAT_FORMAT:\n+      format = \"__IBM_FORMAT__\";\n+      break;\n+\n+    case C4X_FLOAT_FORMAT:\n+      format = \"__C4X_FORMAT__\";\n+      break;\n+\n+    default:\n+      abort();\n+    }\n+  if (TARGET_FLOAT_FORMAT != VAX_FLOAT_FORMAT)\n+    {\n+      cpp_define (pfile, \"__TARGET_USES_VAX_F_FLOAT__=0\");\n+      cpp_define (pfile, \"__TARGET_USES_VAX_D_FLOAT__=0\");\n+      cpp_define (pfile, \"__TARGET_USES_VAX_G_FLOAT__=0\");\n+      cpp_define (pfile, \"__TARGET_USES_VAX_H_FLOAT__=0\");\n+    }\n+  builtin_define_with_value (\"__GCC_FLOAT_FORMAT__\", format, 0);\n+}\n+\n /* Hook that registers front end and target-specific built-ins.  */\n void\n cb_register_builtins (pfile)\n@@ -4745,6 +4836,8 @@ cb_register_builtins (pfile)\n   if (!flag_signed_char)\n     cpp_define (pfile, \"__CHAR_UNSIGNED__\");\n \n+  cpp_define_data_format (pfile);\n+  \n   /* Make the choice of ObjC runtime visible to source code.  */\n   if (flag_objc && flag_next_runtime)\n     cpp_define (pfile, \"__NEXT_RUNTIME__\");"}, {"sha": "66edaab348e87a5eac2ab81a8dd4e2705a884c9f", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35885eab33068a4497dd809704be29ec241baf41/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35885eab33068a4497dd809704be29ec241baf41/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=35885eab33068a4497dd809704be29ec241baf41", "patch": "@@ -2012,6 +2012,48 @@ This macro is defined, with value 1, when the NeXT runtime\n (as in @option{-fnext-runtime}) is in use for Objective-C.\n @end table\n \n+@item __TARGET_BITS_ORDER__\n+This macro describes the target's bits order in a byte.  Its value is\n+@code{__GCC_LITTLE_ENDIAN__} or @code{__GCC_BIG_ENDIAN__}.\n+\n+@item __TARGET_BYTES_ORDER__\n+This macro is defined with value @code{__GCC_LITTLE_ENDIAN__} or\n+@code{__GCC_BIG_ENDIAN__} if the target's bytes order within a word\n+is little-endian or big-endian, respectively.\n+\n+@item __TARGET_INT_WORDS_ORDER__\n+This macro is defined with value @code{__GCC_LITTLE_ENDIAN__} or\n+@code{__GCC_BIG_ENDIAN__} if the target's words order within a\n+multi-word integer datum is little-endian or big-endian, respectively.\n+\n+@item __TARGET_FLOAT_WORDS_ORDER__\n+This macro is defined with value @code{__GCC_LITTLE_ENDIAN__} or\n+@code{__GCC_BIG_ENDIAN__} if the target's words order within a\n+multi-word floating-point datum is little-endian or big-endian, respectively.\n+\n+@item __TARGET_FLOAT_FORMAT__\n+This macro is defined to describe the floating-point format used by the\n+target.  It has value in the set comprised of:\n+@code{__UNKNOWN_FORMAT__}, @code{__IEEE_FORMAT__},\n+@code{__IBM_FORMAT__}, @code{__C4X_FORMAT__} and @code{__VAX_FORMAT__}.\n+\n+@item __TARGET_USES_VAX_F_FLOAT__\n+This macro is defined with value 1 if the target uses the VAX F-format\n+for the single precision floating-point data type; else if has value 0.\n+\n+@item __TARGET_USES_VAX_D_FLOAT__\n+@item __TARGET_USES_VAX_G_FLOAT__\n+These macros are always defined, with values 0 or 1.  If\n+@code{__TARGET_FLOAT_FORMAT__} is @code{__VAX_FORMAT__} then they have\n+mutually exclusive values; else both have value 0.  Non-zero\n+@code{__TARGET_USES_VAX_D_FLOAT__} means the target uses the VAX\n+D-format for the double precision floating-point data type; non-zero\n+@code{__TARGET_USES_VAX_G_FLOAT__} means the VAX G-format is used.\n+\n+@item __TARGET_USES_VAX_H_FLOAT__\n+When non-zero, the target uses the VAX H-format for the extended\n+precision floating-point data type.\n+\n @node System-specific Predefined Macros\n @subsection System-specific Predefined Macros\n "}]}