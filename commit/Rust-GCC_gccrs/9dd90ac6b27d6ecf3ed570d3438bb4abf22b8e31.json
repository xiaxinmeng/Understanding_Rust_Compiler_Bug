{"sha": "9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkOTBhYzZiMjdkNmVjZjNlZDU3MGQzNDM4YmI0YWJmMjJiOGUzMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-04T12:10:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-04T12:10:13Z"}, "message": "stl_list.h: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_list.h: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\t* include/bits/stl_queue.h: Likewise.\n\t* include/bits/stl_raw_storage_iter.h: Likewise.\n\t* include/bits/stl_tempbuf.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\t* include/bits/stl_uninitialized.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/ext/rope: Change includes order.\n\nFrom-SVN: r68919", "tree": {"sha": "1999215064ffeb9a8939eecd44b3df6f30154644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1999215064ffeb9a8939eecd44b3df6f30154644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/comments", "author": null, "committer": null, "parents": [{"sha": "1b33b6b2f076b5d042402b15383bf360ffda550f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b33b6b2f076b5d042402b15383bf360ffda550f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b33b6b2f076b5d042402b15383bf360ffda550f"}], "stats": {"total": 121, "additions": 66, "deletions": 55}, "files": [{"sha": "f5a7826c3d8bed7444299bdcee2393897c2bd3ea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -1,3 +1,15 @@\n+2003-07-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_list.h: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\t* include/bits/stl_queue.h: Likewise.\n+\t* include/bits/stl_raw_storage_iter.h: Likewise.\n+\t* include/bits/stl_tempbuf.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\t* include/bits/stl_uninitialized.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/ext/rope: Change includes order.\t\n+\n 2003-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.host (fpos_include_dir): Fix."}, {"sha": "0fa7cd23a7b2d921bd350097bc6096374fee6965", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -410,7 +410,7 @@ namespace std\n     {\n       _Node* __p = _M_get_node();\n       try {\n-        _Construct(&__p->_M_data, __x);\n+        std::_Construct(&__p->_M_data, __x);\n       }\n       catch(...)\n       {\n@@ -431,7 +431,7 @@ namespace std\n     {\n       _Node* __p = _M_get_node();\n       try {\n-        _Construct(&__p->_M_data);\n+        std::_Construct(&__p->_M_data);\n       }\n       catch(...)\n       {\n@@ -1073,8 +1073,8 @@ namespace std\n     inline bool\n     operator<(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)\n     {\n-      return lexicographical_compare(__x.begin(), __x.end(),\n-                                     __y.begin(), __y.end());\n+      return std::lexicographical_compare(__x.begin(), __x.end(),\n+\t\t\t\t\t  __y.begin(), __y.end());\n     }\n   \n   /// Based on operator=="}, {"sha": "38c378c877334996e6c4a1f2df494d497420f473", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -1,6 +1,6 @@\n // Queue implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -332,7 +332,7 @@ namespace std\n     priority_queue(const _Compare& __x = _Compare(),\n                    const _Sequence& __s = _Sequence()) \n     : c(__s), comp(__x) \n-    { make_heap(c.begin(), c.end(), comp); }\n+    { std::make_heap(c.begin(), c.end(), comp); }\n   \n     /**\n      *  @brief  Builds a %queue from a range.\n@@ -355,7 +355,7 @@ namespace std\n       : c(__s), comp(__x)\n       { \n         c.insert(c.end(), __first, __last);\n-        make_heap(c.begin(), c.end(), comp);\n+        std::make_heap(c.begin(), c.end(), comp);\n       }\n   \n     /**\n@@ -389,7 +389,7 @@ namespace std\n       try \n         {\n           c.push_back(__x); \n-          push_heap(c.begin(), c.end(), comp);\n+          std::push_heap(c.begin(), c.end(), comp);\n         }\n       catch(...)\n         {\n@@ -413,7 +413,7 @@ namespace std\n     {\n       try \n         {\n-          pop_heap(c.begin(), c.end(), comp);\n+          std::pop_heap(c.begin(), c.end(), comp);\n           c.pop_back();\n         }\n       catch(...)"}, {"sha": "c4ff66963c542a4d25970d1f31b145033ecccb41", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -84,7 +84,7 @@ namespace std\n       raw_storage_iterator& \n       operator=(const _Tp& __element) \n       {\n-\t_Construct(&*_M_iter, __element);\n+\tstd::_Construct(&*_M_iter, __element);\n \treturn *this;\n       }        \n "}, {"sha": "4f90402fea24919b4a00c79679a39fb1c657129f", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -99,7 +99,7 @@ template <class _ForwardIterator, class _Tp>\n \n   void _M_initialize_buffer(const _Tp&, __true_type) {}\n   void _M_initialize_buffer(const _Tp& val, __false_type) {\n-    uninitialized_fill_n(_M_buffer, _M_len, val);\n+    std::uninitialized_fill_n(_M_buffer, _M_len, val);\n   }\n \n public:\n@@ -133,7 +133,7 @@ template <class _ForwardIterator, class _Tp>\n   }\n  \n   ~_Temporary_buffer() {  \n-    _Destroy(_M_buffer, _M_buffer + _M_len);\n+    std::_Destroy(_M_buffer, _M_buffer + _M_len);\n     free(_M_buffer);\n   }\n "}, {"sha": "95482f25de04dd0d015a56aadcf9f0efa31c0984", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -615,7 +615,7 @@ namespace std\n       {\n \t_Link_type __tmp = _M_get_node();\n \ttry \n-\t  { _Construct(&__tmp->_M_value_field, __x); }\n+\t  { std::_Construct(&__tmp->_M_value_field, __x); }\n \tcatch(...)\n \t  {\n \t  _M_put_node(__tmp);\n@@ -637,7 +637,7 @@ namespace std\n       void\n       destroy_node(_Link_type __p)\n       {\n-\t_Destroy(&__p->_M_value_field);\n+\tstd::_Destroy(&__p->_M_value_field);\n \t_M_put_node(__p);\n       }\n "}, {"sha": "e2106e0a50a9d31775cac8bb2c37c2ddfd8c7541", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -73,7 +73,7 @@ namespace std\n     __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,\n \t\t\t     _ForwardIterator __result,\n \t\t\t     __true_type)\n-    { return copy(__first, __last, __result); }\n+    { return std::copy(__first, __last, __result); }\n \n   template<typename _InputIterator, typename _ForwardIterator>\n     _ForwardIterator \n@@ -84,12 +84,12 @@ namespace std\n       _ForwardIterator __cur = __result;\n       try {\n \tfor ( ; __first != __last; ++__first, ++__cur)\n-\t  _Construct(&*__cur, *__first);\n+\t  std::_Construct(&*__cur, *__first);\n \treturn __cur;\n       }\n       catch(...)\n \t{\n-\t  _Destroy(__result, __cur);\n+\t  std::_Destroy(__result, __cur);\n \t  __throw_exception_again; \n \t}\n     }\n@@ -109,21 +109,21 @@ namespace std\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n-      return __uninitialized_copy_aux(__first, __last, __result, _Is_POD());\n+      return std::__uninitialized_copy_aux(__first, __last, __result, _Is_POD());\n     }\n \n   inline char*\n   uninitialized_copy(const char* __first, const char* __last, char* __result)\n   {\n-    memmove(__result, __first, __last - __first);\n+    std::memmove(__result, __first, __last - __first);\n     return __result + (__last - __first);\n   }\n \n   inline wchar_t* \n   uninitialized_copy(const wchar_t* __first, const wchar_t* __last,\n \t\t     wchar_t* __result)\n   {\n-    memmove(__result, __first, sizeof(wchar_t) * (__last - __first));\n+    std::memmove(__result, __first, sizeof(wchar_t) * (__last - __first));\n     return __result + (__last - __first);\n   }\n \n@@ -133,7 +133,7 @@ namespace std\n     inline void\n     __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, \n \t\t\t     const _Tp& __x, __true_type)\n-    { fill(__first, __last, __x); }\n+    { std::fill(__first, __last, __x); }\n \n   template<typename _ForwardIterator, typename _Tp>\n     void\n@@ -143,11 +143,11 @@ namespace std\n       _ForwardIterator __cur = __first;\n       try {\n \tfor ( ; __cur != __last; ++__cur)\n-\t  _Construct(&*__cur, __x);\n+\t  std::_Construct(&*__cur, __x);\n       }\n       catch(...)\n \t{\n-\t  _Destroy(__first, __cur);\n+\t  std::_Destroy(__first, __cur);\n \t  __throw_exception_again; \n \t}\n     }\n@@ -167,7 +167,7 @@ namespace std\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n-      __uninitialized_fill_aux(__first, __last, __x, _Is_POD());\n+      std::__uninitialized_fill_aux(__first, __last, __x, _Is_POD());\n     }\n \n   // Valid if copy construction is equivalent to assignment, and if the\n@@ -177,7 +177,7 @@ namespace std\n     __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,\n \t\t\t       const _Tp& __x, __true_type)\n     {\n-      return fill_n(__first, __n, __x);\n+      return std::fill_n(__first, __n, __x);\n     }\n \n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n@@ -188,12 +188,12 @@ namespace std\n       _ForwardIterator __cur = __first;\n       try {\n \tfor ( ; __n > 0; --__n, ++__cur)\n-\t  _Construct(&*__cur, __x);\n+\t  std::_Construct(&*__cur, __x);\n \treturn __cur;\n       }\n       catch(...)\n \t{ \n-\t  _Destroy(__first, __cur);\n+\t  std::_Destroy(__first, __cur);\n \t  __throw_exception_again; \n \t}\n     }\n@@ -213,7 +213,7 @@ namespace std\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::is_POD_type _Is_POD;\n-      return __uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n+      return std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());\n     }\n \n   // Extensions: __uninitialized_copy_copy, __uninitialized_copy_fill, \n@@ -230,13 +230,13 @@ namespace std\n \t\t\t      _InputIterator2 __first2, _InputIterator2 __last2,\n \t\t\t      _ForwardIterator __result)\n     {\n-      _ForwardIterator __mid = uninitialized_copy(__first1, __last1, __result);\n+      _ForwardIterator __mid = std::uninitialized_copy(__first1, __last1, __result);\n       try {\n-\treturn uninitialized_copy(__first2, __last2, __mid);\n+\treturn std::uninitialized_copy(__first2, __last2, __mid);\n       }\n       catch(...)\n \t{ \n-\t  _Destroy(__result, __mid);\n+\t  std::_Destroy(__result, __mid);\n \t  __throw_exception_again; \n \t}\n     }\n@@ -250,13 +250,13 @@ namespace std\n \t\t\t      const _Tp& __x,\n \t\t\t      _InputIterator __first, _InputIterator __last)\n     {\n-      uninitialized_fill(__result, __mid, __x);\n+      std::uninitialized_fill(__result, __mid, __x);\n       try {\n-\treturn uninitialized_copy(__first, __last, __mid);\n+\treturn std::uninitialized_copy(__first, __last, __mid);\n       }\n       catch(...)\n \t{\n-\t  _Destroy(__result, __mid);\n+\t  std::_Destroy(__result, __mid);\n \t  __throw_exception_again; \n \t}\n     }\n@@ -270,13 +270,13 @@ namespace std\n \t\t\t      _ForwardIterator __first2, _ForwardIterator __last2,\n \t\t\t      const _Tp& __x)\n     {\n-      _ForwardIterator __mid2 = uninitialized_copy(__first1, __last1, __first2);\n+      _ForwardIterator __mid2 = std::uninitialized_copy(__first1, __last1, __first2);\n       try {\n-\tuninitialized_fill(__mid2, __last2, __x);\n+\tstd::uninitialized_fill(__mid2, __last2, __x);\n       }\n       catch(...)\n \t{\n-\t  _Destroy(__first2, __mid2);\n+\t  std::_Destroy(__first2, __mid2);\n \t  __throw_exception_again; \n \t}\n     }"}, {"sha": "91a6d9ba9ab06c7d81be6038791abb710e4be849", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -239,7 +239,7 @@ namespace std\n       vector(size_type __n, const value_type& __value,\n \t     const allocator_type& __a = allocator_type())\n       : _Base(__n, __a)\n-      { this->_M_finish = uninitialized_fill_n(this->_M_start, __n, __value); }\n+      { this->_M_finish = std::uninitialized_fill_n(this->_M_start, __n, __value); }\n   \n       /**\n        *  @brief  Create a %vector with default elements.\n@@ -251,8 +251,8 @@ namespace std\n       explicit\n       vector(size_type __n)\n       : _Base(__n, allocator_type())\n-      { this->_M_finish = uninitialized_fill_n(this->_M_start,\n-\t\t\t\t\t       __n, value_type()); }\n+      { this->_M_finish = std::uninitialized_fill_n(this->_M_start,\n+\t\t\t\t\t\t    __n, value_type()); }\n       \n       /**\n        *  @brief  %Vector copy constructor.\n@@ -265,8 +265,8 @@ namespace std\n        */\n       vector(const vector& __x)\n       : _Base(__x.size(), __x.get_allocator())\n-      { this->_M_finish = uninitialized_copy(__x.begin(), __x.end(),\n-\t\t\t\t\t     this->_M_start);\n+      { this->_M_finish = std::uninitialized_copy(__x.begin(), __x.end(),\n+\t\t\t\t\t\t  this->_M_start);\n       }\n   \n       /**\n@@ -298,7 +298,7 @@ namespace std\n        *  themselves are pointers, the pointed-to memory is not touched in any\n        *  way.  Managing the pointer is the user's responsibilty.\n        */\n-      ~vector() { _Destroy(this->_M_start, this->_M_finish); }\n+      ~vector() { std::_Destroy(this->_M_start, this->_M_finish); }\n   \n       /**\n        *  @brief  %Vector assignment operator.\n@@ -600,7 +600,7 @@ namespace std\n       {\n \tif (this->_M_finish != this->_M_end_of_storage)\n \t  {\n-\t    _Construct(this->_M_finish, __x);\n+\t    std::_Construct(this->_M_finish, __x);\n \t    ++this->_M_finish;\n \t  }\n \telse\n@@ -619,7 +619,7 @@ namespace std\n       pop_back()\n       {\n \t--this->_M_finish;\n-\t_Destroy(this->_M_finish);\n+\tstd::_Destroy(this->_M_finish);\n       }\n       \n       /**\n@@ -756,7 +756,7 @@ namespace std\n \t  pointer __result = _M_allocate(__n);\n \t  try\n \t    {\n-\t      uninitialized_copy(__first, __last, __result);\n+\t      std::uninitialized_copy(__first, __last, __result);\n \t      return __result;\n \t    }\n \t  catch(...)\n@@ -776,7 +776,7 @@ namespace std\n         {\n \t  this->_M_start = _M_allocate(__n);\n \t  this->_M_end_of_storage = this->_M_start + __n;\n-\t  this->_M_finish = uninitialized_fill_n(this->_M_start, __n, __value);\n+\t  this->_M_finish = std::uninitialized_fill_n(this->_M_start, __n, __value);\n \t}\n       \n       // Called by the range constructor to implement [23.1.1]/9\n@@ -809,8 +809,8 @@ namespace std\n \t  size_type __n = std::distance(__first, __last);\n \t  this->_M_start = _M_allocate(__n);\n \t  this->_M_end_of_storage = this->_M_start + __n;\n-\t  this->_M_finish = uninitialized_copy(__first, __last,\n-\t\t\t\t\t       this->_M_start);\n+\t  this->_M_finish = std::uninitialized_copy(__first, __last,\n+\t\t\t\t\t\t    this->_M_start);\n \t}\n       \n       \n@@ -915,7 +915,7 @@ namespace std\n     operator==(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n     {\n       return __x.size() == __y.size() &&\n-             equal(__x.begin(), __x.end(), __y.begin());\n+             std::equal(__x.begin(), __x.end(), __y.begin());\n     }\n   \n   /**\n@@ -933,8 +933,8 @@ namespace std\n     inline bool\n     operator<(const vector<_Tp,_Alloc>& __x, const vector<_Tp,_Alloc>& __y)\n     {\n-      return lexicographical_compare(__x.begin(), __x.end(),\n-                                     __y.begin(), __y.end());\n+      return std::lexicographical_compare(__x.begin(), __x.end(),\n+\t\t\t\t\t  __y.begin(), __y.end());\n     }\n   \n   /// Based on operator=="}, {"sha": "9cb0d68b3efbaa19e7383b65e639be99bd7a47af", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=9dd90ac6b27d6ecf3ed570d3438bb4abf22b8e31", "patch": "@@ -50,15 +50,14 @@\n #define _ROPE 1\n \n #include <bits/stl_algobase.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n #include <bits/stl_algo.h>\n #include <bits/stl_function.h>\n #include <bits/stl_numeric.h>\n #include <bits/allocator.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n #include <ext/hash_fun.h>\n \n-\n # ifdef __GC\n #   define __GC_CONST const\n # else"}]}