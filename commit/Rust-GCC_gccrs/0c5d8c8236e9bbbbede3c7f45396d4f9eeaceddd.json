{"sha": "0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1ZDhjODIzNmU5YmJiYmVkZTNjN2Y0NTM5NmQ0ZjllZWFjZWRkZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-01-02T23:11:30Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-01-02T23:11:30Z"}, "message": "real.c (GET_REAL, PUT_REAL): Don't cast away const-ness.\n\n\t* real.c (GET_REAL, PUT_REAL): Don't cast away const-ness.\n\t(ezero, ehalf, eone, etwo, e32, elog2, esqrt2, epi): Const-ify.\n\tAdd array size in declaration.\n\t(endian, emov, eisneg, eisinf, eisnan, eiisnan, eiisneg, emovi,\n\temovo, emovz, eiisinf, ecmpm, eaddm, esubm, m16m, edivm, emulm,\n\tesub, eadd, eadd1, ediv, emul, e53toe, e64toe, e113toe, e24toe,\n\tetoe113, etoe64, etoe53, etoe24, ecmp, eround, ltoe, ultoe,\n\teifrac, euifrac, e24toasc, e53toasc, e64toasc, e113toasc, etoasc,\n\tefloor, efrexp, eldexp, eremain, dectoe, etodec, ibmtoe, etoibm,\n\tc4xtoe, etoc4x, uditoe, ditoe, etoudi, etodi, esqrt, etens,\n\temtens, make_nan): Const-ify.\n\t(TFbignan, TFlittlenan, XFbignan, XFlittlenan, DFbignan,\n\tDFlittlenan, SFbignan, SFlittlenan): Make static and const-ify.\n\nFrom-SVN: r48484", "tree": {"sha": "0353565d7ff7b3692d662d13135368a12f67d425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0353565d7ff7b3692d662d13135368a12f67d425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd/comments", "author": null, "committer": null, "parents": [{"sha": "817e13c4d9f94562586b960b38f126d410fe2392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817e13c4d9f94562586b960b38f126d410fe2392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817e13c4d9f94562586b960b38f126d410fe2392"}], "stats": {"total": 431, "additions": 240, "deletions": 191}, "files": [{"sha": "b093ea91e3ce5dbfa2bfb889d29966719f599dd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "patch": "@@ -1,3 +1,19 @@\n+2002-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* real.c (GET_REAL, PUT_REAL): Don't cast away const-ness.\n+\t(ezero, ehalf, eone, etwo, e32, elog2, esqrt2, epi): Const-ify.\n+\tAdd array size in declaration.\n+\t(endian, emov, eisneg, eisinf, eisnan, eiisnan, eiisneg, emovi,\n+\temovo, emovz, eiisinf, ecmpm, eaddm, esubm, m16m, edivm, emulm,\n+\tesub, eadd, eadd1, ediv, emul, e53toe, e64toe, e113toe, e24toe,\n+\tetoe113, etoe64, etoe53, etoe24, ecmp, eround, ltoe, ultoe,\n+\teifrac, euifrac, e24toasc, e53toasc, e64toasc, e113toasc, etoasc,\n+\tefloor, efrexp, eldexp, eremain, dectoe, etodec, ibmtoe, etoibm,\n+\tc4xtoe, etoc4x, uditoe, ditoe, etoudi, etodi, esqrt, etens,\n+\temtens, make_nan): Const-ify.\n+\t(TFbignan, TFlittlenan, XFbignan, XFlittlenan, DFbignan,\n+\tDFlittlenan, SFbignan, SFlittlenan): Make static and const-ify.\n+\n 2002-01-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config.gcc (ia64-*-*): Set extra_headers."}, {"sha": "a52ef0b900bc13e488c4e66adb4931f3c8e61db9", "filename": "gcc/real.c", "status": "modified", "additions": 224, "deletions": 191, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=0c5d8c8236e9bbbbede3c7f45396d4f9eeaceddd", "patch": "@@ -267,10 +267,10 @@ typedef unsigned int UHItype __attribute__ ((mode (HI)));\n # define NE 6\n # define MAXDECEXP 4932\n # define MINDECEXP -4956\n-# define GET_REAL(r,e)  memcpy ((char *)(e), (char *)(r), 2*NE)\n+# define GET_REAL(r,e)  memcpy ((e), (r), 2*NE)\n # define PUT_REAL(e,r)\t\t\t\t\t\t\\\n \tdo {\t\t\t\t\t\t\t\\\n-\t  memcpy ((char *)(r), (char *)(e), 2*NE);\t\t\\\n+\t  memcpy ((r), (e), 2*NE);\t\t\t\t\\\n \t  if (2*NE < sizeof(*r))\t\t\t\t\\\n \t    memset ((char *)(r) + 2*NE, 0, sizeof(*r) - 2*NE);\t\\\n \t} while (0)\n@@ -279,10 +279,10 @@ typedef unsigned int UHItype __attribute__ ((mode (HI)));\n #   define NE 10\n #   define MAXDECEXP 4932\n #   define MINDECEXP -4977\n-#   define GET_REAL(r,e) memcpy ((char *)(e), (char *)(r), 2*NE)\n+#   define GET_REAL(r,e) memcpy ((e), (r), 2*NE)\n #   define PUT_REAL(e,r)\t\t\t\t\t\\\n \tdo {\t\t\t\t\t\t\t\\\n-\t  memcpy ((char *)(r), (char *)(e), 2*NE);\t\t\\\n+\t  memcpy ((r), (e), 2*NE);\t\t\t\t\\\n \t  if (2*NE < sizeof(*r))\t\t\t\t\\\n \t    memset ((char *)(r) + 2*NE, 0, sizeof(*r) - 2*NE);\t\\\n \t} while (0)\n@@ -297,14 +297,14 @@ typedef unsigned int UHItype __attribute__ ((mode (HI)));\n #define GET_REAL(r,e)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n      if (HOST_FLOAT_WORDS_BIG_ENDIAN == REAL_WORDS_BIG_ENDIAN)\t\t\\\n-       e53toe ((UEMUSHORT *) (r), (e));\t\t\t\t\\\n+       e53toe ((const UEMUSHORT *) (r), (e));\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n        {\t\t\t\t\t\t\t\t\\\n \t UEMUSHORT w[4];\t\t\t\t\t\\\n-         memcpy (&w[3], ((EMUSHORT *) r), sizeof (EMUSHORT));\t\t\\\n-         memcpy (&w[2], ((EMUSHORT *) r) + 1, sizeof (EMUSHORT));\t\\\n-         memcpy (&w[1], ((EMUSHORT *) r) + 2, sizeof (EMUSHORT));\t\\\n-         memcpy (&w[0], ((EMUSHORT *) r) + 3, sizeof (EMUSHORT));\t\\\n+         memcpy (&w[3], ((const EMUSHORT *) r), sizeof (EMUSHORT));\t\\\n+         memcpy (&w[2], ((const EMUSHORT *) r) + 1, sizeof (EMUSHORT));\t\\\n+         memcpy (&w[1], ((const EMUSHORT *) r) + 2, sizeof (EMUSHORT));\t\\\n+         memcpy (&w[0], ((const EMUSHORT *) r) + 3, sizeof (EMUSHORT));\t\\\n \t e53toe (w, (e));\t\t\t\t\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n    } while (0)\n@@ -327,7 +327,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #else /* not REAL_ARITHMETIC */\n \n /* emulator uses host format */\n-#define GET_REAL(r,e) e53toe ((UEMUSHORT *) (r), (e))\n+#define GET_REAL(r,e) e53toe ((const UEMUSHORT *) (r), (e))\n #define PUT_REAL(e,r) etoe53 ((e), (UEMUSHORT *) (r))\n \n #endif /* not REAL_ARITHMETIC */\n@@ -363,97 +363,97 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n extern int extra_warnings;\n-extern UEMUSHORT ezero[], ehalf[], eone[], etwo[];\n-extern UEMUSHORT elog2[], esqrt2[];\n+extern const UEMUSHORT ezero[NE], ehalf[NE], eone[NE], etwo[NE];\n+extern const UEMUSHORT elog2[NE], esqrt2[NE];\n \n-static void endian\tPARAMS ((UEMUSHORT *, long *,\n+static void endian\tPARAMS ((const UEMUSHORT *, long *,\n \t\t\t       enum machine_mode));\n static void eclear\tPARAMS ((UEMUSHORT *));\n-static void emov\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void emov\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #if 0\n static void eabs\tPARAMS ((UEMUSHORT *));\n #endif\n static void eneg\tPARAMS ((UEMUSHORT *));\n-static int eisneg\tPARAMS ((UEMUSHORT *));\n-static int eisinf\tPARAMS ((UEMUSHORT *));\n-static int eisnan\tPARAMS ((UEMUSHORT *));\n+static int eisneg\tPARAMS ((const UEMUSHORT *));\n+static int eisinf\tPARAMS ((const UEMUSHORT *));\n+static int eisnan\tPARAMS ((const UEMUSHORT *));\n static void einfin\tPARAMS ((UEMUSHORT *));\n #ifdef NANS\n static void enan\tPARAMS ((UEMUSHORT *, int));\n static void einan\tPARAMS ((UEMUSHORT *));\n-static int eiisnan\tPARAMS ((UEMUSHORT *));\n-static int eiisneg\tPARAMS ((UEMUSHORT *));\n+static int eiisnan\tPARAMS ((const UEMUSHORT *));\n+static int eiisneg\tPARAMS ((const UEMUSHORT *));\n static void make_nan\tPARAMS ((UEMUSHORT *, int, enum machine_mode));\n #endif\n-static void emovi\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void emovo\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void emovi\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void emovo\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void ecleaz\tPARAMS ((UEMUSHORT *));\n static void ecleazs\tPARAMS ((UEMUSHORT *));\n-static void emovz\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void emovz\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #if 0\n static void eiinfin\tPARAMS ((UEMUSHORT *));\n #endif\n #ifdef INFINITY\n-static int eiisinf\tPARAMS ((UEMUSHORT *));\n+static int eiisinf\tPARAMS ((const UEMUSHORT *));\n #endif\n-static int ecmpm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static int ecmpm\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *));\n static void eshdn1\tPARAMS ((UEMUSHORT *));\n static void eshup1\tPARAMS ((UEMUSHORT *));\n static void eshdn8\tPARAMS ((UEMUSHORT *));\n static void eshup8\tPARAMS ((UEMUSHORT *));\n static void eshup6\tPARAMS ((UEMUSHORT *));\n static void eshdn6\tPARAMS ((UEMUSHORT *));\n-static void eaddm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\f\n-static void esubm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void m16m\tPARAMS ((unsigned int, UEMUSHORT *, UEMUSHORT *));\n-static int edivm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static int emulm\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void eaddm\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\f\n+static void esubm\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void m16m\tPARAMS ((unsigned int, const UEMUSHORT *, UEMUSHORT *));\n+static int edivm\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static int emulm\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void emdnorm\tPARAMS ((UEMUSHORT *, int, int, EMULONG, int));\n-static void esub\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       UEMUSHORT *));\n-static void eadd\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       UEMUSHORT *));\n-static void eadd1\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       UEMUSHORT *));\n-static void ediv\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       UEMUSHORT *));\n-static void emul\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       UEMUSHORT *));\n-static void e53toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void e64toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void esub\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *,\n+\t\t\t\t UEMUSHORT *));\n+static void eadd\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *,\n+\t\t\t\t UEMUSHORT *));\n+static void eadd1\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *,\n+\t\t\t\t UEMUSHORT *));\n+static void ediv\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *,\n+\t\t\t\t UEMUSHORT *));\n+static void emul\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *,\n+\t\t\t\t UEMUSHORT *));\n+static void e53toe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void e64toe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n-static void e113toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void e113toe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #endif\n-static void e24toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void e24toe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n-static void etoe113\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe113\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void toe113\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #endif\n-static void etoe64\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe64\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void toe64\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void etoe53\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe53\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void toe53\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void etoe24\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void etoe24\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void toe24\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static int ecmp\t\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static int ecmp\t\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *));\n #if 0\n-static void eround\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-#endif\n-static void ltoe\tPARAMS ((HOST_WIDE_INT *, UEMUSHORT *));\n-static void ultoe\tPARAMS ((unsigned HOST_WIDE_INT *, UEMUSHORT *));\n-static void eifrac\tPARAMS ((UEMUSHORT *, HOST_WIDE_INT *,\n-\t\t\t       UEMUSHORT *));\n-static void euifrac\tPARAMS ((UEMUSHORT *, unsigned HOST_WIDE_INT *,\n-\t\t\t       UEMUSHORT *));\n+static void eround\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+#endif\n+static void ltoe\tPARAMS ((const HOST_WIDE_INT *, UEMUSHORT *));\n+static void ultoe\tPARAMS ((const unsigned HOST_WIDE_INT *, UEMUSHORT *));\n+static void eifrac\tPARAMS ((const UEMUSHORT *, HOST_WIDE_INT *,\n+\t\t\t\t UEMUSHORT *));\n+static void euifrac\tPARAMS ((const UEMUSHORT *, unsigned HOST_WIDE_INT *,\n+\t\t\t\t UEMUSHORT *));\n static int eshift\tPARAMS ((UEMUSHORT *, int));\n static int enormlz\tPARAMS ((UEMUSHORT *));\n #if 0\n-static void e24toasc\tPARAMS ((UEMUSHORT *, char *, int));\n-static void e53toasc\tPARAMS ((UEMUSHORT *, char *, int));\n-static void e64toasc\tPARAMS ((UEMUSHORT *, char *, int));\n-static void e113toasc\tPARAMS ((UEMUSHORT *, char *, int));\n+static void e24toasc\tPARAMS ((const UEMUSHORT *, char *, int));\n+static void e53toasc\tPARAMS ((const UEMUSHORT *, char *, int));\n+static void e64toasc\tPARAMS ((const UEMUSHORT *, char *, int));\n+static void e113toasc\tPARAMS ((const UEMUSHORT *, char *, int));\n #endif /* 0 */\n-static void etoasc\tPARAMS ((UEMUSHORT *, char *, int));\n+static void etoasc\tPARAMS ((const UEMUSHORT *, char *, int));\n static void asctoe24\tPARAMS ((const char *, UEMUSHORT *));\n static void asctoe53\tPARAMS ((const char *, UEMUSHORT *));\n static void asctoe64\tPARAMS ((const char *, UEMUSHORT *));\n@@ -462,45 +462,45 @@ static void asctoe113\tPARAMS ((const char *, UEMUSHORT *));\n #endif\n static void asctoe\tPARAMS ((const char *, UEMUSHORT *));\n static void asctoeg\tPARAMS ((const char *, UEMUSHORT *, int));\n-static void efloor\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void efloor\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #if 0\n-static void efrexp\tPARAMS ((UEMUSHORT *, int *,\n-\t\t\t       UEMUSHORT *));\n+static void efrexp\tPARAMS ((const UEMUSHORT *, int *,\n+\t\t\t\t UEMUSHORT *));\n #endif\n-static void eldexp\tPARAMS ((UEMUSHORT *, int, UEMUSHORT *));\n+static void eldexp\tPARAMS ((const UEMUSHORT *, int, UEMUSHORT *));\n #if 0\n-static void eremain\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       UEMUSHORT *));\n+static void eremain\tPARAMS ((const UEMUSHORT *, const UEMUSHORT *,\n+\t\t\t\t UEMUSHORT *));\n #endif\n static void eiremain\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n static void mtherr\tPARAMS ((const char *, int));\n #ifdef DEC\n-static void dectoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void etodec\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void dectoe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void etodec\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n static void todec\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #endif\n #ifdef IBM\n-static void ibmtoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       enum machine_mode));\n-static void etoibm\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       enum machine_mode));\n+static void ibmtoe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *,\n+\t\t\t\t enum machine_mode));\n+static void etoibm\tPARAMS ((const UEMUSHORT *, UEMUSHORT *,\n+\t\t\t\t enum machine_mode));\n static void toibm\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n-\t\t\t       enum machine_mode));\n+\t\t\t\t enum machine_mode));\n #endif\n #ifdef C4X\n-static void c4xtoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n- \t\t\t       enum machine_mode));\n-static void etoc4x\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n- \t\t\t       enum machine_mode));\n+static void c4xtoe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *,\n+\t\t\t\t enum machine_mode));\n+static void etoc4x\tPARAMS ((const UEMUSHORT *, UEMUSHORT *,\n+\t\t\t\t enum machine_mode));\n static void toc4x\tPARAMS ((UEMUSHORT *, UEMUSHORT *,\n- \t\t\t       enum machine_mode));\n+\t\t\t\t enum machine_mode));\n #endif\n #if 0\n-static void uditoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void ditoe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void etoudi\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void etodi\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n-static void esqrt\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+static void uditoe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void ditoe\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void etoudi\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void etodi\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n+static void esqrt\tPARAMS ((const UEMUSHORT *, UEMUSHORT *));\n #endif\n \f\n /* Copy 32-bit numbers obtained from array containing 16-bit numbers,\n@@ -509,7 +509,7 @@ static void esqrt\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n \n static void\n endian (e, x, mode)\n-     UEMUSHORT e[];\n+     const UEMUSHORT e[];\n      long x[];\n      enum machine_mode mode;\n {\n@@ -1541,70 +1541,62 @@ ereal_isneg (x)\n \n #if MAX_LONG_DOUBLE_TYPE_SIZE == 128 && (INTEL_EXTENDED_IEEE_FORMAT == 0)\n /* 0.0 */\n-UEMUSHORT ezero[NE] =\n+const UEMUSHORT ezero[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,};\n-extern UEMUSHORT ezero[];\n \n /* 5.0E-1 */\n-UEMUSHORT ehalf[NE] =\n+const UEMUSHORT ehalf[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x3ffe,};\n-extern UEMUSHORT ehalf[];\n \n /* 1.0E0 */\n-UEMUSHORT eone[NE] =\n+const UEMUSHORT eone[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x3fff,};\n-extern UEMUSHORT eone[];\n \n /* 2.0E0 */\n-UEMUSHORT etwo[NE] =\n+const UEMUSHORT etwo[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x4000,};\n-extern UEMUSHORT etwo[];\n \n /* 3.2E1 */\n-UEMUSHORT e32[NE] =\n+const UEMUSHORT e32[NE] =\n  {0x0000, 0x0000, 0x0000, 0x0000,\n   0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 0x4004,};\n-extern UEMUSHORT e32[];\n \n /* 6.93147180559945309417232121458176568075500134360255E-1 */\n-UEMUSHORT elog2[NE] =\n+const UEMUSHORT elog2[NE] =\n  {0x40f3, 0xf6af, 0x03f2, 0xb398,\n   0xc9e3, 0x79ab, 0150717, 0013767, 0130562, 0x3ffe,};\n-extern UEMUSHORT elog2[];\n \n /* 1.41421356237309504880168872420969807856967187537695E0 */\n-UEMUSHORT esqrt2[NE] =\n+const UEMUSHORT esqrt2[NE] =\n  {0x1d6f, 0xbe9f, 0x754a, 0x89b3,\n   0x597d, 0x6484, 0174736, 0171463, 0132404, 0x3fff,};\n-extern UEMUSHORT esqrt2[];\n \n /* 3.14159265358979323846264338327950288419716939937511E0 */\n-UEMUSHORT epi[NE] =\n+const UEMUSHORT epi[NE] =\n  {0x2902, 0x1cd1, 0x80dc, 0x628b,\n   0xc4c6, 0xc234, 0020550, 0155242, 0144417, 0040000,};\n-extern UEMUSHORT epi[];\n \n #else\n /* LONG_DOUBLE_TYPE_SIZE is other than 128 */\n-UEMUSHORT ezero[NE] =\n+const UEMUSHORT ezero[NE] =\n  {0, 0000000, 0000000, 0000000, 0000000, 0000000,};\n-UEMUSHORT ehalf[NE] =\n+const UEMUSHORT ehalf[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0x3ffe,};\n-UEMUSHORT eone[NE] =\n+const UEMUSHORT eone[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0x3fff,};\n-UEMUSHORT etwo[NE] =\n+const UEMUSHORT etwo[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0040000,};\n-UEMUSHORT e32[NE] =\n+const UEMUSHORT e32[NE] =\n  {0, 0000000, 0000000, 0000000, 0100000, 0040004,};\n-UEMUSHORT elog2[NE] =\n+const UEMUSHORT elog2[NE] =\n  {0xc9e4, 0x79ab, 0150717, 0013767, 0130562, 0x3ffe,};\n-UEMUSHORT esqrt2[NE] =\n+const UEMUSHORT esqrt2[NE] =\n  {0x597e, 0x6484, 0174736, 0171463, 0132404, 0x3fff,};\n-UEMUSHORT epi[NE] =\n+const UEMUSHORT epi[NE] =\n  {0xc4c6, 0xc234, 0020550, 0155242, 0144417, 0040000,};\n #endif\n \n@@ -1630,7 +1622,8 @@ eclear (x)\n \n static void\n emov (a, b)\n-     UEMUSHORT *a, *b;\n+     const UEMUSHORT *a;\n+     UEMUSHORT *b;\n {\n   int i;\n \n@@ -1665,7 +1658,7 @@ eneg (x)\n \n static int\n eisneg (x)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n {\n \n   if (x[NE - 1] & 0x8000)\n@@ -1678,7 +1671,7 @@ eisneg (x)\n \n static int\n eisinf (x)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n {\n \n #ifdef NANS\n@@ -1696,7 +1689,7 @@ eisinf (x)\n \n static int\n eisnan (x)\n-     UEMUSHORT x[] ATTRIBUTE_UNUSED;\n+     const UEMUSHORT x[] ATTRIBUTE_UNUSED;\n {\n #ifdef NANS\n   int i;\n@@ -1780,9 +1773,11 @@ enan (x, sign)\n \n static void\n emovi (a, b)\n-     UEMUSHORT *a, *b;\n+     const UEMUSHORT *a;\n+     UEMUSHORT *b;\n {\n-  UEMUSHORT *p, *q;\n+  const UEMUSHORT *p;\n+  UEMUSHORT *q;\n   int i;\n \n   q = b;\n@@ -1827,9 +1822,11 @@ emovi (a, b)\n \n static void\n emovo (a, b)\n-     UEMUSHORT *a, *b;\n+     const UEMUSHORT *a;\n+     UEMUSHORT *b;\n {\n-  UEMUSHORT *p, *q;\n+  const UEMUSHORT *p;\n+  UEMUSHORT *q;\n   UEMUSHORT i;\n   int j;\n \n@@ -1891,7 +1888,8 @@ ecleazs (xi)\n \n static void\n emovz (a, b)\n-     UEMUSHORT *a, *b;\n+     const UEMUSHORT *a;\n+     UEMUSHORT *b;\n {\n   int i;\n \n@@ -1922,7 +1920,7 @@ einan (x)\n #ifdef NANS\n static int\n eiisnan (x)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n {\n   int i;\n \n@@ -1943,7 +1941,7 @@ eiisnan (x)\n #ifdef NANS\n static int\n eiisneg (x)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n {\n \n   return x[0] != 0;\n@@ -1969,7 +1967,7 @@ eiinfin (x)\n #ifdef INFINITY\n static int\n eiisinf (x)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n {\n \n #ifdef NANS\n@@ -1991,7 +1989,7 @@ eiisinf (x)\n \n static int\n ecmpm (a, b)\n-     UEMUSHORT *a, *b;\n+     const UEMUSHORT *a, *b;\n {\n   int i;\n \n@@ -2143,7 +2141,8 @@ eshdn6 (x)\n \n static void\n eaddm (x, y)\n-     UEMUSHORT *x, *y;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *y;\n {\n   unsigned EMULONG a;\n   int i;\n@@ -2169,7 +2168,8 @@ eaddm (x, y)\n \n static void\n esubm (x, y)\n-     UEMUSHORT *x, *y;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *y;\n {\n   unsigned EMULONG a;\n   int i;\n@@ -2354,11 +2354,12 @@ emulm (a, b)\n static void\n m16m (a, b, c)\n      unsigned int a;\n-     UEMUSHORT b[], c[];\n+     const UEMUSHORT b[];\n+     UEMUSHORT c[];\n {\n   UEMUSHORT *pp;\n   unsigned EMULONG carry;\n-  UEMUSHORT *ps;\n+  const UEMUSHORT *ps;\n   UEMUSHORT p[NI];\n   unsigned EMULONG aa, m;\n   int i;\n@@ -2397,7 +2398,8 @@ m16m (a, b, c)\n \n static int\n edivm (den, num)\n-     UEMUSHORT den[], num[];\n+     const UEMUSHORT den[];\n+     UEMUSHORT num[];\n {\n   int i;\n   UEMUSHORT *p;\n@@ -2462,9 +2464,11 @@ edivm (den, num)\n \n static int\n emulm (a, b)\n-     UEMUSHORT a[], b[];\n+     const UEMUSHORT a[];\n+     UEMUSHORT b[];\n {\n-  UEMUSHORT *p, *q;\n+  const UEMUSHORT *p;\n+  UEMUSHORT *q;\n   UEMUSHORT pprod[NI];\n   UEMUSHORT j;\n   int i;\n@@ -2754,7 +2758,8 @@ static int subflg = 0;\n \n static void\n esub (a, b, c)\n-     UEMUSHORT *a, *b, *c;\n+     const UEMUSHORT *a, *b;\n+     UEMUSHORT *c;\n {\n \n #ifdef NANS\n@@ -2786,7 +2791,8 @@ esub (a, b, c)\n \n static void\n eadd (a, b, c)\n-     UEMUSHORT *a, *b, *c;\n+     const UEMUSHORT *a, *b;\n+     UEMUSHORT *c;\n {\n \n #ifdef NANS\n@@ -2819,7 +2825,8 @@ eadd (a, b, c)\n \n static void\n eadd1 (a, b, c)\n-     UEMUSHORT *a, *b, *c;\n+     const UEMUSHORT *a, *b;\n+     UEMUSHORT *c;\n {\n   UEMUSHORT ai[NI], bi[NI], ci[NI];\n   int i, lost, j, k;\n@@ -2930,7 +2937,8 @@ eadd1 (a, b, c)\n \n static void\n ediv (a, b, c)\n-     UEMUSHORT *a, *b, *c;\n+     const UEMUSHORT *a, *b;\n+     UEMUSHORT *c;\n {\n   UEMUSHORT ai[NI], bi[NI];\n   int i, sign;\n@@ -3034,7 +3042,8 @@ ediv (a, b, c)\n \n static void\n emul (a, b, c)\n-     UEMUSHORT *a, *b, *c;\n+     const UEMUSHORT *a, *b;\n+     UEMUSHORT *c;\n {\n   UEMUSHORT ai[NI], bi[NI];\n   int i, j, sign;\n@@ -3130,7 +3139,8 @@ emul (a, b, c)\n \n static void\n e53toe (pe, y)\n-     UEMUSHORT *pe, *y;\n+     const UEMUSHORT *pe;\n+     UEMUSHORT *y;\n {\n #ifdef DEC\n \n@@ -3148,7 +3158,8 @@ e53toe (pe, y)\n \n #else\n   UEMUSHORT r;\n-  UEMUSHORT *e, *p;\n+  const UEMUSHORT *e;\n+  UEMUSHORT *p;\n   UEMUSHORT yy[NI];\n   int denorm, k;\n \n@@ -3239,10 +3250,12 @@ e53toe (pe, y)\n \n static void\n e64toe (pe, y)\n-     UEMUSHORT *pe, *y;\n+     const UEMUSHORT *pe;\n+     UEMUSHORT *y;\n {\n   UEMUSHORT yy[NI];\n-  UEMUSHORT *e, *p, *q;\n+  const UEMUSHORT *e;\n+  UEMUSHORT *p, *q;\n   int i;\n \n   e = pe;\n@@ -3362,10 +3375,12 @@ e64toe (pe, y)\n \n static void\n e113toe (pe, y)\n-     UEMUSHORT *pe, *y;\n+     const UEMUSHORT *pe;\n+     UEMUSHORT *y;\n {\n   UEMUSHORT r;\n-  UEMUSHORT *e, *p;\n+  const UEMUSHORT *e;\n+  UEMUSHORT *p;\n   UEMUSHORT yy[NI];\n   int denorm, i;\n \n@@ -3448,7 +3463,8 @@ e113toe (pe, y)\n \n static void\n e24toe (pe, y)\n-     UEMUSHORT *pe, *y;\n+     const UEMUSHORT *pe;\n+     UEMUSHORT *y;\n {\n #ifdef IBM\n \n@@ -3463,7 +3479,8 @@ e24toe (pe, y)\n #else\n \n   UEMUSHORT r;\n-  UEMUSHORT *e, *p;\n+  const UEMUSHORT *e;\n+  UEMUSHORT *p;\n   UEMUSHORT yy[NI];\n   int denorm, k;\n \n@@ -3552,7 +3569,8 @@ e24toe (pe, y)\n \n static void\n etoe113 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   UEMUSHORT xi[NI];\n   EMULONG exp;\n@@ -3646,7 +3664,8 @@ toe113 (a, b)\n \n static void\n etoe64 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   UEMUSHORT xi[NI];\n   EMULONG exp;\n@@ -3799,7 +3818,8 @@ toe64 (a, b)\n \n static void\n etoe53 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   etodec (x, e);\t\t/* see etodec.c */\n }\n@@ -3820,7 +3840,8 @@ toe53 (x, y)\n \n static void\n etoe53 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   etoibm (x, e, DFmode);\n }\n@@ -3841,7 +3862,8 @@ toe53 (x, y)\n \n static void\n etoe53 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   etoc4x (x, e, HFmode);\n }\n@@ -3862,7 +3884,8 @@ toe53 (x, y)\n \n static void\n etoe53 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   UEMUSHORT xi[NI];\n   EMULONG exp;\n@@ -3995,7 +4018,8 @@ toe53 (x, y)\n \n static void\n etoe24 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   etoibm (x, e, SFmode);\n }\n@@ -4017,7 +4041,8 @@ toe24 (x, y)\n \n static void\n etoe24 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   etoc4x (x, e, QFmode);\n }\n@@ -4038,7 +4063,8 @@ toe24 (x, y)\n \n static void\n etoe24 (x, e)\n-     UEMUSHORT *x, *e;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *e;\n {\n   EMULONG exp;\n   UEMUSHORT xi[NI];\n@@ -4172,7 +4198,7 @@ toe24 (x, y)\n \n static int\n ecmp (a, b)\n-     UEMUSHORT *a, *b;\n+     const UEMUSHORT *a, *b;\n {\n   UEMUSHORT ai[NI], bi[NI];\n   UEMUSHORT *p, *q;\n@@ -4235,7 +4261,8 @@ ecmp (a, b)\n \n static void\n eround (x, y)\n-     UEMUSHORT *x, *y;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *y;\n {\n   eadd (ehalf, x, y);\n   efloor (y, y);\n@@ -4246,7 +4273,7 @@ eround (x, y)\n \n static void\n ltoe (lp, y)\n-     HOST_WIDE_INT *lp;\n+     const HOST_WIDE_INT *lp;\n      UEMUSHORT *y;\n {\n   UEMUSHORT yi[NI];\n@@ -4288,7 +4315,7 @@ ltoe (lp, y)\n \n static void\n ultoe (lp, y)\n-     unsigned HOST_WIDE_INT *lp;\n+     const unsigned HOST_WIDE_INT *lp;\n      UEMUSHORT *y;\n {\n   UEMUSHORT yi[NI];\n@@ -4328,7 +4355,7 @@ ultoe (lp, y)\n \n static void\n eifrac (x, i, frac)\n-     UEMUSHORT *x;\n+     const UEMUSHORT *x;\n      HOST_WIDE_INT *i;\n      UEMUSHORT *frac;\n {\n@@ -4411,7 +4438,7 @@ eifrac (x, i, frac)\n \n static void\n euifrac (x, i, frac)\n-     UEMUSHORT *x;\n+     const UEMUSHORT *x;\n      unsigned HOST_WIDE_INT *i;\n      UEMUSHORT *frac;\n {\n@@ -4616,7 +4643,7 @@ enormlz (x)\n #define MAXP 4096\n \n #if MAX_LONG_DOUBLE_TYPE_SIZE == 128 && (INTEL_EXTENDED_IEEE_FORMAT == 0)\n-static UEMUSHORT etens[NTEN + 1][NE] =\n+static const UEMUSHORT etens[NTEN + 1][NE] =\n {\n   {0x6576, 0x4a92, 0x804a, 0x153f,\n    0xc94c, 0x979a, 0x8a20, 0x5202, 0xc460, 0x7525,},\t/* 10**4096 */\n@@ -4646,7 +4673,7 @@ static UEMUSHORT etens[NTEN + 1][NE] =\n    0x0000, 0x0000, 0x0000, 0x0000, 0xa000, 0x4002,},\t/* 10**1 */\n };\n \n-static UEMUSHORT emtens[NTEN + 1][NE] =\n+static const UEMUSHORT emtens[NTEN + 1][NE] =\n {\n   {0x2030, 0xcffc, 0xa1c3, 0x8123,\n    0x2de3, 0x9fde, 0xd2ce, 0x04c8, 0xa6dd, 0x0ad8,},\t/* 10**-4096 */\n@@ -4677,7 +4704,7 @@ static UEMUSHORT emtens[NTEN + 1][NE] =\n };\n #else\n /* LONG_DOUBLE_TYPE_SIZE is other than 128 */\n-static UEMUSHORT etens[NTEN + 1][NE] =\n+static const UEMUSHORT etens[NTEN + 1][NE] =\n {\n   {0xc94c, 0x979a, 0x8a20, 0x5202, 0xc460, 0x7525,},\t/* 10**4096 */\n   {0xa74d, 0x5de4, 0xc53d, 0x3b5d, 0x9e8b, 0x5a92,},\t/* 10**2048 */\n@@ -4694,7 +4721,7 @@ static UEMUSHORT etens[NTEN + 1][NE] =\n   {0x0000, 0x0000, 0x0000, 0x0000, 0xa000, 0x4002,},\t/* 10**1 */\n };\n \n-static UEMUSHORT emtens[NTEN + 1][NE] =\n+static const UEMUSHORT emtens[NTEN + 1][NE] =\n {\n   {0x2de4, 0x9fde, 0xd2ce, 0x04c8, 0xa6dd, 0x0ad8,},\t/* 10**-4096 */\n   {0x4925, 0x2de4, 0x3436, 0x534f, 0xceae, 0x256b,},\t/* 10**-2048 */\n@@ -4718,7 +4745,7 @@ static UEMUSHORT emtens[NTEN + 1][NE] =\n \n static void\n e24toasc (x, string, ndigs)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n@@ -4733,7 +4760,7 @@ e24toasc (x, string, ndigs)\n \n static void\n e53toasc (x, string, ndigs)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n@@ -4748,7 +4775,7 @@ e53toasc (x, string, ndigs)\n \n static void\n e64toasc (x, string, ndigs)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n@@ -4763,7 +4790,7 @@ e64toasc (x, string, ndigs)\n \n static void\n e113toasc (x, string, ndigs)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n@@ -4781,13 +4808,13 @@ static char wstring[80];\t/* working storage for ASCII output */\n \n static void\n etoasc (x, string, ndigs)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      char *string;\n      int ndigs;\n {\n   EMUSHORT digit;\n   UEMUSHORT y[NI], t[NI], u[NI], w[NI];\n-  UEMUSHORT *p, *r, *ten;\n+  const UEMUSHORT *p, *r, *ten;\n   UEMUSHORT sign;\n   int i, j, k, expon, rndsav;\n   char *s, *ss;\n@@ -5568,7 +5595,8 @@ static const UEMUSHORT bmask[] =\n \n static void\n efloor (x, y)\n-     UEMUSHORT x[], y[];\n+     const UEMUSHORT x[];\n+     UEMUSHORT y[];\n {\n   UEMUSHORT *p;\n   int e, expon, i;\n@@ -5619,7 +5647,7 @@ efloor (x, y)\n \n static void\n efrexp (x, exp, s)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      int *exp;\n      UEMUSHORT s[];\n {\n@@ -5644,7 +5672,7 @@ efrexp (x, exp, s)\n \n static void\n eldexp (x, pwr2, y)\n-     UEMUSHORT x[];\n+     const UEMUSHORT x[];\n      int pwr2;\n      UEMUSHORT y[];\n {\n@@ -5667,7 +5695,8 @@ eldexp (x, pwr2, y)\n \n static void\n eremain (a, b, c)\n-     UEMUSHORT a[], b[], c[];\n+     const UEMUSHORT a[], b[];\n+     UEMUSHORT c[];\n {\n   UEMUSHORT den[NI], num[NI];\n \n@@ -5800,7 +5829,7 @@ mtherr (name, code)\n \n static void\n dectoe (d, e)\n-     UEMUSHORT *d;\n+     const UEMUSHORT *d;\n      UEMUSHORT *e;\n {\n   UEMUSHORT y[NI];\n@@ -5840,7 +5869,8 @@ dectoe (d, e)\n \n static void\n etodec (x, d)\n-     UEMUSHORT *x, *d;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *d;\n {\n   UEMUSHORT xi[NI];\n   EMULONG exp;\n@@ -5908,7 +5938,7 @@ todec (x, y)\n \n static void\n ibmtoe (d, e, mode)\n-     UEMUSHORT *d;\n+     const UEMUSHORT *d;\n      UEMUSHORT *e;\n      enum machine_mode mode;\n {\n@@ -5951,7 +5981,8 @@ ibmtoe (d, e, mode)\n \n static void\n etoibm (x, d, mode)\n-     UEMUSHORT *x, *d;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *d;\n      enum machine_mode mode;\n {\n   UEMUSHORT xi[NI];\n@@ -6028,7 +6059,7 @@ toibm (x, y, mode)\n \n static void\n c4xtoe (d, e, mode)\n-     UEMUSHORT *d;\n+     const UEMUSHORT *d;\n      UEMUSHORT *e;\n      enum machine_mode mode;\n {\n@@ -6144,7 +6175,8 @@ c4xtoe (d, e, mode)\n \n static void\n etoc4x (x, d, mode)\n-     UEMUSHORT *x, *d;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *d;\n      enum machine_mode mode;\n {\n   UEMUSHORT xi[NI];\n@@ -6277,37 +6309,37 @@ toc4x (x, y, mode)\n TFMODE_NAN;\n #else\n #ifdef IEEE\n-UEMUSHORT TFbignan[8] =\n+static const UEMUSHORT TFbignan[8] =\n  {0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};\n-UEMUSHORT TFlittlenan[8] = {0, 0, 0, 0, 0, 0, 0x8000, 0xffff};\n+static const UEMUSHORT TFlittlenan[8] = {0, 0, 0, 0, 0, 0, 0x8000, 0xffff};\n #endif\n #endif\n \n #ifdef XFMODE_NAN\n XFMODE_NAN;\n #else\n #ifdef IEEE\n-UEMUSHORT XFbignan[6] =\n+static const UEMUSHORT XFbignan[6] =\n  {0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};\n-UEMUSHORT XFlittlenan[6] = {0, 0, 0, 0xc000, 0xffff, 0};\n+static const UEMUSHORT XFlittlenan[6] = {0, 0, 0, 0xc000, 0xffff, 0};\n #endif\n #endif\n \n #ifdef DFMODE_NAN\n DFMODE_NAN;\n #else\n #ifdef IEEE\n-UEMUSHORT DFbignan[4] = {0x7fff, 0xffff, 0xffff, 0xffff};\n-UEMUSHORT DFlittlenan[4] = {0, 0, 0, 0xfff8};\n+static const UEMUSHORT DFbignan[4] = {0x7fff, 0xffff, 0xffff, 0xffff};\n+static const UEMUSHORT DFlittlenan[4] = {0, 0, 0, 0xfff8};\n #endif\n #endif\n \n #ifdef SFMODE_NAN\n SFMODE_NAN;\n #else\n #ifdef IEEE\n-UEMUSHORT SFbignan[2] = {0x7fff, 0xffff};\n-UEMUSHORT SFlittlenan[2] = {0, 0xffc0};\n+static const UEMUSHORT SFbignan[2] = {0x7fff, 0xffff};\n+static const UEMUSHORT SFlittlenan[2] = {0, 0xffc0};\n #endif\n #endif\n \n@@ -6320,7 +6352,7 @@ make_nan (nan, sign, mode)\n      enum machine_mode mode;\n {\n   int n;\n-  UEMUSHORT *p;\n+  const UEMUSHORT *p;\n \n   switch (mode)\n     {\n@@ -6537,7 +6569,7 @@ ereal_from_double (d)\n \n static void\n uditoe (di, e)\n-     UEMUSHORT *di;  /* Address of the 64-bit int.  */\n+     const UEMUSHORT *di;  /* Address of the 64-bit int.  */\n      UEMUSHORT *e;\n {\n   UEMUSHORT yi[NI];\n@@ -6566,7 +6598,7 @@ uditoe (di, e)\n \n static void\n ditoe (di, e)\n-     UEMUSHORT *di;  /* Address of the 64-bit int.  */\n+     const UEMUSHORT *di;  /* Address of the 64-bit int.  */\n      UEMUSHORT *e;\n {\n   unsigned EMULONG acc;\n@@ -6615,7 +6647,7 @@ ditoe (di, e)\n \n static void\n etoudi (x, i)\n-     UEMUSHORT *x;\n+     const UEMUSHORT *x;\n      UEMUSHORT *i;\n {\n   UEMUSHORT xi[NI];\n@@ -6698,7 +6730,7 @@ etoudi (x, i)\n \n static void\n etodi (x, i)\n-     UEMUSHORT *x;\n+     const UEMUSHORT *x;\n      UEMUSHORT *i;\n {\n   unsigned EMULONG acc;\n@@ -6800,7 +6832,8 @@ static unsigned short sqrndbit[NI];\n \n static void\n esqrt (x, y)\n-     UEMUSHORT *x, *y;\n+     const UEMUSHORT *x;\n+     UEMUSHORT *y;\n {\n   UEMUSHORT temp[NI], num[NI], sq[NI], xx[NI];\n   EMULONG m, exp;"}]}