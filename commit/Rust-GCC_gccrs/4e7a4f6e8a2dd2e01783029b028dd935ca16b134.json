{"sha": "4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3YTRmNmU4YTJkZDJlMDE3ODMwMjliMDI4ZGQ5MzVjYTE2YjEzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T12:49:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T12:49:36Z"}, "message": "[multiple changes]\n\n2009-05-06  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: For Misnamed_Identifiers rule all description of the\n\tnew form of the rule parameter that allows to specify the suffix for\n\taccess-to-access type names.\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Useless_Assignment): Avoid false negative for\n\tout parameter assigned when exception handlers are present.\n\n\t* sem_ch5.adb (Analyze_Exit_Statement): Kill current value last\n\tassignments on exit.\n\n\t* par-ch9.adb, sem_aggr.adb, par-endh.adb, sem_res.adb, par-ch6.adb,\n\tsinput-l.adb, par-load.adb, errout.ads, sem_ch4.adb, lib-load.adb,\n\tprj-dect.adb, par-ch12.adb, sem_ch8.adb, par-util.adb, par-ch3.adb,\n\tpar-tchk.adb, par-ch5.adb: This patch adds stylized comments to error\n\tmessages that are included in the codefix circuitry of IDE's such as\n\tGPS.\n\n\t* sinput.ads, sinput.adb (Expr_First_Char): New function\n        (Expr_Last_Char): New function\n\nFrom-SVN: r147172", "tree": {"sha": "b5f5ea3ebea2c5432c20e775f16bdf8fb46616db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f5ea3ebea2c5432c20e775f16bdf8fb46616db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/comments", "author": null, "committer": null, "parents": [{"sha": "35117aa8a959b64c128715b6142a6ab45efb9169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35117aa8a959b64c128715b6142a6ab45efb9169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35117aa8a959b64c128715b6142a6ab45efb9169"}], "stats": {"total": 492, "additions": 414, "deletions": 78}, "files": [{"sha": "05c34ab5684c169ae552b34e5aa388a67459a53b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -1,3 +1,27 @@\n+2009-05-06  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: For Misnamed_Identifiers rule all description of the\n+\tnew form of the rule parameter that allows to specify the suffix for\n+\taccess-to-access type names.\n+\n+2009-05-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Useless_Assignment): Avoid false negative for\n+\tout parameter assigned when exception handlers are present.\n+\n+\t* sem_ch5.adb (Analyze_Exit_Statement): Kill current value last\n+\tassignments on exit.\n+\n+\t* par-ch9.adb, sem_aggr.adb, par-endh.adb, sem_res.adb, par-ch6.adb,\n+\tsinput-l.adb, par-load.adb, errout.ads, sem_ch4.adb, lib-load.adb,\n+\tprj-dect.adb, par-ch12.adb, sem_ch8.adb, par-util.adb, par-ch3.adb,\n+\tpar-tchk.adb, par-ch5.adb: This patch adds stylized comments to error\n+\tmessages that are included in the codefix circuitry of IDE's such as\n+\tGPS.\n+\n+\t* sinput.ads, sinput.adb (Expr_First_Char): New function\n+        (Expr_Last_Char): New function\n+\n 2009-05-06  Sergey Rybin  <rybin@adacore.com>\n \n \t* gnat_ugn.texi: Add subsection for Exits_From_Conditional_Loops rule"}, {"sha": "e4d8a62e6dc14f34df06a8d96035e03e4e509040", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -581,6 +581,33 @@ package Errout is\n    --  Triggering switch. If non-zero, then ignore errors mode is activated.\n    --  This is a counter to allow convenient nesting of enable/disable.\n \n+   -----------------------\n+   --  CODEFIX Facility --\n+   -----------------------\n+\n+   --  The GPS and GNATBench IDE's have a codefix facility that allows for\n+   --  automatic correction of a subset of the errors and warnings issued\n+   --  by the compiler. This is done by recognizing the text of specific\n+   --  messages using appropriate matching patterns.\n+\n+   --  The text of such messages should not be altered without coordinating\n+   --  with the codefix code. All such messages are marked by a specific\n+   --  style of comments, as shown by the following example:\n+\n+   --     Error_Msg_N -- CODEFIX\n+   --       (parameters ....)\n+\n+   --  Any message marked with this -- CODEFIX comment should not be modified\n+   --  without appropriate coordination. If new messages are added which may\n+   --  be susceptible to automatic codefix action, they are marked using:\n+\n+   --     Error_Msg -- CODEFIX???\n+   --       (parameters)\n+\n+   --  And subsequently either the appropriate code is added to codefix and the\n+   --  ??? are removed, or it is determined that this is not an appropriate\n+   --  case for codefix action, and the comment is removed.\n+\n    ------------------------------\n    -- Error Output Subprograms --\n    ------------------------------"}, {"sha": "4e5e2141fda07a88e82e3404e2976a5f12e4b2ce", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -21556,6 +21556,11 @@ Specifies the suffix for a type name.\n Specifies the suffix for an access type name. If\n this parameter is set, it overrides for access\n types the suffix set by the @code{Type_Suffix} parameter.\n+For access types, @emph{string} may have the following format:\n+@emph{suffix1(suffix2)}. That means that an access type name\n+should have the @emph{suffix1} suffix except for the case when\n+the designated type is also an access type, in this case the\n+type name should have the @emph{suffix1 & suffix2} suffix.\n \n @item Constant_Suffix=@emph{string}\n Specifies the suffix for a constant name."}, {"sha": "ee956dc3f77ac4c04a268c3f13dcbee740f8b8e5", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -724,7 +724,7 @@ package body Lib.Load is\n                   Check_Restricted_Unit (Load_Name, Error_Node);\n \n                   Error_Msg_Unit_1 := Uname_Actual;\n-                  Error_Msg\n+                  Error_Msg -- CODEFIX\n                     (\"$$ is not a predefined library unit\", Load_Msg_Sloc);\n \n                else"}, {"sha": "046ac43e77584209784ea1dfef275516d5b7f067", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -100,7 +100,8 @@ package body Ch12 is\n       Scan; -- past GENERIC\n \n       if Token = Tok_Private then\n-         Error_Msg_SC (\"PRIVATE goes before GENERIC, not after\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"PRIVATE goes before GENERIC, not after\");\n          Scan; -- past junk PRIVATE token\n       end if;\n \n@@ -179,7 +180,7 @@ package body Ch12 is\n                   Append (P_Formal_Subprogram_Declaration, Decls);\n \n                else\n-                  Error_Msg_BC\n+                  Error_Msg_BC -- CODEFIX\n                     (\"FUNCTION, PROCEDURE or PACKAGE expected here\");\n                   Resync_Past_Semicolon;\n                end if;\n@@ -657,7 +658,8 @@ package body Ch12 is\n \n             else\n                if Token = Tok_Abstract then\n-                  Error_Msg_SC (\"ABSTRACT must come before LIMITED\");\n+                  Error_Msg_SC -- CODEFIX\n+                    (\"ABSTRACT must come before LIMITED\");\n                   Scan;  --  past improper ABSTRACT\n \n                   if Token = Tok_New then\n@@ -805,15 +807,18 @@ package body Ch12 is\n \n       if Token = Tok_Abstract then\n          if Prev_Token = Tok_Tagged then\n-            Error_Msg_SC (\"ABSTRACT must come before TAGGED\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"ABSTRACT must come before TAGGED\");\n          elsif Prev_Token = Tok_Limited then\n-            Error_Msg_SC (\"ABSTRACT must come before LIMITED\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"ABSTRACT must come before LIMITED\");\n          end if;\n \n          Resync_Past_Semicolon;\n \n       elsif Token = Tok_Tagged then\n-         Error_Msg_SC (\"TAGGED must come before LIMITED\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"TAGGED must come before LIMITED\");\n          Resync_Past_Semicolon;\n       end if;\n "}, {"sha": "973f64360df54317a1eb9c03f9e629b4ecce1f94", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -541,7 +541,8 @@ package body Ch3 is\n                end if;\n \n                if Token = Tok_Abstract then\n-                  Error_Msg_SC (\"ABSTRACT must come before TAGGED\");\n+                  Error_Msg_SC -- CODEFIX\n+                    (\"ABSTRACT must come before TAGGED\");\n                   Abstract_Present := True;\n                   Abstract_Loc := Token_Ptr;\n                   Scan; -- past ABSTRACT\n@@ -606,11 +607,13 @@ package body Ch3 is\n \n                loop\n                   if Token = Tok_Tagged then\n-                     Error_Msg_SC (\"TAGGED must come before LIMITED\");\n+                     Error_Msg_SC -- CODEFIX\n+                       (\"TAGGED must come before LIMITED\");\n                      Scan; -- past TAGGED\n \n                   elsif Token = Tok_Abstract then\n-                     Error_Msg_SC (\"ABSTRACT must come before LIMITED\");\n+                     Error_Msg_SC -- CODEFIX\n+                       (\"ABSTRACT must come before LIMITED\");\n                      Scan; -- past ABSTRACT\n \n                   else\n@@ -1526,7 +1529,8 @@ package body Ch3 is\n                end if;\n \n                if Token = Tok_Aliased then\n-                  Error_Msg_SC (\"ALIASED should be before CONSTANT\");\n+                  Error_Msg_SC -- CODEFIX\n+                    (\"ALIASED should be before CONSTANT\");\n                   Scan; -- past ALIASED\n                   Set_Aliased_Present (Decl_Node, True);\n                end if;\n@@ -1888,7 +1892,8 @@ package body Ch3 is\n       end if;\n \n       if Token = Tok_Abstract then\n-         Error_Msg_SC (\"ABSTRACT must come before NEW, not after\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"ABSTRACT must come before NEW, not after\");\n          Scan;\n       end if;\n \n@@ -2306,7 +2311,8 @@ package body Ch3 is\n       --  Handle decimal fixed-point defn with DIGITS/DELTA in wrong order\n \n       if Token = Tok_Delta then\n-         Error_Msg_SC (\"|DELTA must come before DIGITS\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"|DELTA must come before DIGITS\");\n          Def_Node := New_Node (N_Decimal_Fixed_Point_Definition, Digits_Loc);\n          Scan; -- past DELTA\n          Set_Delta_Expression (Def_Node, P_Expression_No_Right_Paren);\n@@ -3791,7 +3797,8 @@ package body Ch3 is\n          Scan; -- past PROTECTED\n \n          if Token /= Tok_Procedure and then Token /= Tok_Function then\n-            Error_Msg_SC (\"FUNCTION or PROCEDURE expected\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"FUNCTION or PROCEDURE expected\");\n          end if;\n       end if;\n "}, {"sha": "f782f51e024f6e6bf978838a3f3877def3069641", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,7 +178,8 @@ package body Ch5 is\n       procedure Junk_Declaration is\n       begin\n          if (not Declaration_Found) or All_Errors_Mode then\n-            Error_Msg_SC (\"declarations must come before BEGIN\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"declarations must come before BEGIN\");\n             Declaration_Found := True;\n          end if;\n \n@@ -450,7 +451,8 @@ package body Ch5 is\n                     and then Block_Label = Name_Go\n                     and then Token_Name = Name_To\n                   then\n-                     Error_Msg_SP (\"goto is one word\");\n+                     Error_Msg_SP -- CODEFIX\n+                       (\"goto is one word\");\n                      Append_To (Statement_List, P_Goto_Statement);\n                      Statement_Required := False;\n "}, {"sha": "0cf71a79e1544d73e920643ba1dc88510fe8b996", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -227,7 +227,8 @@ package body Ch6 is\n             Error_Msg_SC (\"overriding indicator not allowed here!\");\n \n          elsif Token /= Tok_Function and then Token /= Tok_Procedure then\n-            Error_Msg_SC (\"FUNCTION or PROCEDURE expected!\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"FUNCTION or PROCEDURE expected!\");\n          end if;\n       end if;\n \n@@ -1430,7 +1431,8 @@ package body Ch6 is\n          Set_Constant_Present (Decl_Node);\n \n          if Token = Tok_Aliased then\n-            Error_Msg_SC (\"ALIASED should be before CONSTANT\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"ALIASED should be before CONSTANT\");\n             Scan; -- past ALIASED\n             Set_Aliased_Present (Decl_Node);\n          end if;"}, {"sha": "1271d478a73c46bc84a9693171a8c6d864b18cca", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -651,7 +651,8 @@ package body Ch9 is\n                Set_Must_Not_Override (Specification (Decl), Not_Overriding);\n \n             else\n-               Error_Msg_SC (\"ENTRY, FUNCTION or PROCEDURE expected!\");\n+               Error_Msg_SC -- CODEFIX\n+                 (\"ENTRY, FUNCTION or PROCEDURE expected!\");\n             end if;\n          end if;\n "}, {"sha": "94e753976aa4bed35f47a016cd6336ecca348510", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -717,7 +717,8 @@ package body Endh is\n                if Error_Msg_Name_1 > Error_Name then\n                   if Is_Bad_Spelling_Of (Chars (Nam), Chars (End_Labl)) then\n                      Error_Msg_Name_1 := Chars (Nam);\n-                     Error_Msg_N (\"misspelling of %\", End_Labl);\n+                     Error_Msg_N -- CODEFIX\n+                       (\"misspelling of %\", End_Labl);\n                      Syntax_OK := True;\n                      return;\n                   end if;\n@@ -839,29 +840,32 @@ package body Endh is\n       end if;\n \n       if End_Type = E_Case then\n-         Error_Msg_SC (\"`END CASE;` expected@ for CASE#!\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"`END CASE;` expected@ for CASE#!\");\n \n       elsif End_Type = E_If then\n-         Error_Msg_SC (\"`END IF;` expected@ for IF#!\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"`END IF;` expected@ for IF#!\");\n \n       elsif End_Type = E_Loop then\n          if Error_Msg_Node_1 = Empty then\n-            Error_Msg_SC\n+            Error_Msg_SC -- CODEFIX\n               (\"`END LOOP;` expected@ for LOOP#!\");\n          else\n-            Error_Msg_SC (\"`END LOOP &;` expected@!\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"`END LOOP &;` expected@!\");\n          end if;\n \n       elsif End_Type = E_Record then\n-         Error_Msg_SC\n+         Error_Msg_SC -- CODEFIX\n            (\"`END RECORD;` expected@ for RECORD#!\");\n \n       elsif End_Type = E_Return then\n-         Error_Msg_SC\n+         Error_Msg_SC -- CODEFIX\n            (\"`END RETURN;` expected@ for RETURN#!\");\n \n       elsif End_Type = E_Select then\n-         Error_Msg_SC\n+         Error_Msg_SC -- CODEFIX\n            (\"`END SELECT;` expected@ for SELECT#!\");\n \n       --  All remaining cases are cases with a name (we do not treat\n@@ -870,9 +874,11 @@ package body Endh is\n \n       elsif End_Type = E_Name or else (not Ins) then\n          if Error_Msg_Node_1 = Empty then\n-            Error_Msg_SC (\"`END;` expected@ for BEGIN#!\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"`END;` expected@ for BEGIN#!\");\n          else\n-            Error_Msg_SC (\"`END &;` expected@!\");\n+            Error_Msg_SC -- CODEFIX\n+              (\"`END &;` expected@!\");\n          end if;\n \n       --  The other possibility is a missing END for a subprogram with a"}, {"sha": "e21fb0434c6b0a5a153713bffbffc9e60009ba76", "filename": "gcc/ada/par-load.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-load.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -205,7 +205,8 @@ begin\n \n          begin\n             Error_Msg_Unit_1 := Expect_Name;\n-            Error_Msg (\"$$ is not a predefined library unit!\", Loc);\n+            Error_Msg -- CODEFIX\n+              (\"$$ is not a predefined library unit!\", Loc);\n \n             --  In the predefined file case, we know the user did not\n             --  construct their own package, but we got the wrong one.\n@@ -229,7 +230,8 @@ begin\n               (Name_Id (Expect_Name), Name_Id (Actual_Name))\n             then\n                Error_Msg_Unit_1 := Actual_Name;\n-               Error_Msg (\"possible misspelling of $$!\", Loc);\n+               Error_Msg -- CODEFIX\n+                 (\"possible misspelling of $$!\", Loc);\n             end if;\n          end;\n "}, {"sha": "9329b41cd14a54644e5e3e3cf47e1b4af9cd3de5", "filename": "gcc/ada/par-tchk.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-tchk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-tchk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-tchk.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -443,7 +443,8 @@ package body Tchk is\n       --  the possibility of a \"C\" confusion.\n \n       elsif Token = Tok_Vertical_Bar then\n-         Error_Msg_SC (\"unexpected occurrence of \"\"'|\"\", did you mean OR'?\");\n+         Error_Msg_SC -- CODEFIX\n+           (\"unexpected occurrence of \"\"'|\"\", did you mean OR'?\");\n          Resync_Past_Semicolon;\n          return;\n "}, {"sha": "82ffdd00f1cc5aada5f36773a40d4a3251c4621c", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,7 +86,8 @@ package body Util is\n             M2 (P2 + J - 1) := Fold_Upper (S (J));\n          end loop;\n \n-         Error_Msg_SC (M2 (1 .. P2 - 1 + S'Last));\n+         Error_Msg_SC -- CODEFIX???\n+           (M2 (1 .. P2 - 1 + S'Last));\n          Token := T;\n          return True;\n       end if;\n@@ -119,7 +120,8 @@ package body Util is\n             M1 (P1 + J - 1) := Fold_Upper (S (J));\n          end loop;\n \n-         Error_Msg_SC (M1 (1 .. P1 - 1 + S'Last));\n+         Error_Msg_SC -- CODFIX\n+           (M1 (1 .. P1 - 1 + S'Last));\n          Token := T;\n          return True;\n \n@@ -678,7 +680,8 @@ package body Util is\n       Error_Msg_Name_1 := First_Attribute_Name;\n       while Error_Msg_Name_1 <= Last_Attribute_Name loop\n          if Is_Bad_Spelling_Of (Token_Name, Error_Msg_Name_1) then\n-            Error_Msg_N (\"\\possible misspelling of %\", Token_Node);\n+            Error_Msg_N -- CODEFIX\n+              (\"\\possible misspelling of %\", Token_Node);\n             exit;\n          end if;\n "}, {"sha": "001b2596d480b1bd7ad459b9cddc132b2f417868", "filename": "gcc/ada/prj-dect.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fprj-dect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fprj-dect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-dect.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1052,9 +1052,9 @@ package body Prj.Dect is\n                   end if;\n \n                   if Index /= 0 then\n-                     Error_Msg (\"\\?possible misspelling of \"\"\" &\n-                                List (Index).all & \"\"\"\",\n-                                Token_Ptr);\n+                     Error_Msg -- CODEFIX\n+                       (\"\\?possible misspelling of \"\"\" &\n+                        List (Index).all & \"\"\"\", Token_Ptr);\n                   end if;\n                end;\n             end if;"}, {"sha": "66653f643e973bb1afdd107286bca76508f0db70", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -756,12 +756,12 @@ package body Sem_Aggr is\n       --  Report at most two suggestions\n \n       if Nr_Of_Suggestions = 1 then\n-         Error_Msg_NE\n+         Error_Msg_NE -- CODEFIX\n            (\"\\possible misspelling of&\", Component, Suggestion_1);\n \n       elsif Nr_Of_Suggestions = 2 then\n          Error_Msg_Node_2 := Suggestion_2;\n-         Error_Msg_NE\n+         Error_Msg_NE -- CODEFIX\n            (\"\\possible misspelling of& or&\", Component, Suggestion_1);\n       end if;\n    end Check_Misspelled_Component;"}, {"sha": "b8e8b42d211108768a0f5887e05c16ba776dc645", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -446,7 +446,7 @@ package body Sem_Ch4 is\n                      if Nkind (Constraint (E)) =\n                        N_Index_Or_Discriminant_Constraint\n                      then\n-                        Error_Msg_N\n+                        Error_Msg_N -- CODEFIX\n                           (\"\\if qualified expression was meant, \" &\n                               \"use apostrophe\", Constraint (E));\n                      end if;\n@@ -483,7 +483,7 @@ package body Sem_Ch4 is\n                     and then Nkind (Constraint (E)) =\n                                N_Index_Or_Discriminant_Constraint\n                   then\n-                     Error_Msg_N\n+                     Error_Msg_N -- CODEFIX\n                        (\"if qualified expression was meant, \" &\n                            \"use apostrophe!\", Constraint (E));\n                   end if;\n@@ -2466,7 +2466,7 @@ package body Sem_Ch4 is\n                         Formal := First_Formal (Nam);\n                         while Present (Formal) loop\n                            if Chars (Left_Opnd (Actual)) = Chars (Formal) then\n-                              Error_Msg_N\n+                              Error_Msg_N -- CODEFIX\n                                 (\"possible misspelling of `='>`!\", Actual);\n                               exit;\n                            end if;\n@@ -4245,12 +4245,12 @@ package body Sem_Ch4 is\n       --  Report at most two suggestions\n \n       if Nr_Of_Suggestions = 1 then\n-         Error_Msg_NE\n+         Error_Msg_NE -- CODEFIX\n            (\"\\possible misspelling of&\", Sel, Suggestion_1);\n \n       elsif Nr_Of_Suggestions = 2 then\n          Error_Msg_Node_2 := Suggestion_2;\n-         Error_Msg_NE\n+         Error_Msg_NE -- CODEFIX\n            (\"\\possible misspelling of& or&\", Sel, Suggestion_1);\n       end if;\n    end Check_Misspelled_Selector;\n@@ -4359,8 +4359,8 @@ package body Sem_Ch4 is\n          if Nkind (Parent (N)) = N_Selected_Component\n            and then N = Prefix (Parent (N))\n          then\n-            Error_Msg_N (\n-              \"\\period should probably be semicolon\", Parent (N));\n+            Error_Msg_N -- CODEFIX\n+              (\"\\period should probably be semicolon\", Parent (N));\n          end if;\n \n       elsif Nkind (N) = N_Procedure_Call_Statement\n@@ -5238,7 +5238,8 @@ package body Sem_Ch4 is\n               and then Valid_Boolean_Arg (Etype (R))\n             then\n                Error_Msg_N (\"invalid operands for concatenation\", N);\n-               Error_Msg_N (\"\\maybe AND was meant\", N);\n+               Error_Msg_N -- CODEFIX\n+                 (\"\\maybe AND was meant\", N);\n                return;\n \n             --  A special case for comparison of access parameter with null\n@@ -6073,7 +6074,8 @@ package body Sem_Ch4 is\n             if Nkind (Parent (Op)) = N_Full_Type_Declaration then\n                Error_Msg_N (\"\\possible interpretation (inherited)#\", N);\n             else\n-               Error_Msg_N (\"\\possible interpretation#\", N);\n+               Error_Msg_N -- CODEFIX\n+                 (\"\\possible interpretation#\", N);\n             end if;\n          end if;\n       end Report_Ambiguity;"}, {"sha": "4c047b49c5327bad7c5b8b9c1f121253aa81f771", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -1208,6 +1208,13 @@ package body Sem_Ch5 is\n          Analyze_And_Resolve (Cond, Any_Boolean);\n          Check_Unset_Reference (Cond);\n       end if;\n+\n+      --  Since the exit may take us out of a loop, any previous assignment\n+      --  statement is not useless, so clear last assignment indications. It\n+      --  is OK to keep other current values, since if the exit statement\n+      --  does not exit, then the current values are still valid.\n+\n+      Kill_Current_Values (Last_Assignment_Only => True);\n    end Analyze_Exit_Statement;\n \n    ----------------------------"}, {"sha": "d8cfb4b00c365efb41fe898fe2128661df576ce0", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -3747,7 +3747,8 @@ package body Sem_Ch8 is\n                   end if;\n \n                   Error_Msg_Sloc := Sloc (Ent);\n-                  Error_Msg_N (\"hidden declaration#!\", N);\n+                  Error_Msg_N -- CODEFIX\n+                    (\"hidden declaration#!\", N);\n                end if;\n \n                Ent := Homonym (Ent);"}, {"sha": "7914e4a06e39db51359ee1bcbd40876662942fa7", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -2007,7 +2007,8 @@ package body Sem_Res is\n                            Error_Msg_N\n                              (\"\\\\possible interpretation (inherited)#!\", N);\n                         else\n-                           Error_Msg_N (\"\\\\possible interpretation#!\", N);\n+                           Error_Msg_N -- CODEFIX\n+                             (\"\\\\possible interpretation#!\", N);\n                         end if;\n                      end if;\n \n@@ -2089,7 +2090,8 @@ package body Sem_Res is\n                         Error_Msg_N\n                           (\"\\\\possible interpretation (inherited)#!\", N);\n                      else\n-                        Error_Msg_N (\"\\\\possible interpretation#!\", N);\n+                        Error_Msg_N -- CODEFIX\n+                          (\"\\\\possible interpretation#!\", N);\n                      end if;\n \n                   end if;\n@@ -6936,7 +6938,8 @@ package body Sem_Res is\n                           or else Base_Type (It.Typ) =\n                             Base_Type (Component_Type (Typ))\n                         then\n-                           Error_Msg_N (\"\\\\possible interpretation#\", Arg);\n+                           Error_Msg_N -- CODEFIX\n+                             (\"\\\\possible interpretation#\", Arg);\n                         end if;\n \n                         Get_Next_Interp (I, It);\n@@ -9314,10 +9317,12 @@ package body Sem_Res is\n                   Error_Msg_N (\"ambiguous operand in conversion\", Operand);\n \n                   Error_Msg_Sloc := Sloc (It.Nam);\n-                  Error_Msg_N (\"\\\\possible interpretation#!\", Operand);\n+                  Error_Msg_N -- CODEFIX\n+                    (\"\\\\possible interpretation#!\", Operand);\n \n                   Error_Msg_Sloc := Sloc (N1);\n-                  Error_Msg_N (\"\\\\possible interpretation#!\", Operand);\n+                  Error_Msg_N -- CODEFIX\n+                    (\"\\\\possible interpretation#!\", Operand);\n \n                   return False;\n                end if;"}, {"sha": "515e727bdb8fa49c6e63ed0f036f3626f1a97aa1", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -3903,8 +3903,8 @@ package body Sem_Warn is\n       X    : Node_Id;\n \n       function Check_Ref (N : Node_Id) return Traverse_Result;\n-      --  Used to instantiate Traverse_Func. Returns Abandon if\n-      --  a reference to the entity in question is found.\n+      --  Used to instantiate Traverse_Func. Returns Abandon if a reference to\n+      --  the entity in question is found.\n \n       function Test_No_Refs is new Traverse_Func (Check_Ref);\n \n@@ -3935,7 +3935,7 @@ package body Sem_Warn is\n       --  variable with the last assignment field set, with warnings enabled,\n       --  and which is not imported or exported. We also check that it is OK\n       --  to capture the value. We are not going to capture any value, but\n-      --  the warning messages depends on the same kind of conditions.\n+      --  the warning message depends on the same kind of conditions.\n \n       if Is_Assignable (Ent)\n         and then not Is_Return_Object (Ent)\n@@ -4027,18 +4027,27 @@ package body Sem_Warn is\n \n                      --  Otherwise we are at the outer level. An exception\n                      --  handler is significant only if it references the\n-                     --  variable in question.\n+                     --  variable in question, or if the entity in question\n+                     --  is an OUT or IN OUT parameter, which which case\n+                     --  the caller can reference it after the exception\n+                     --  hanlder completes\n \n                   else\n-                     X := First (Exception_Handlers (P));\n-                     while Present (X) loop\n-                        if Test_No_Refs (X) = Abandon then\n-                           Set_Last_Assignment (Ent, Empty);\n-                           return;\n-                        end if;\n+                     if Is_Formal (Ent) then\n+                        Set_Last_Assignment (Ent, Empty);\n+                        return;\n \n-                        X := Next (X);\n-                     end loop;\n+                     else\n+                        X := First (Exception_Handlers (P));\n+                        while Present (X) loop\n+                           if Test_No_Refs (X) = Abandon then\n+                              Set_Last_Assignment (Ent, Empty);\n+                              return;\n+                           end if;\n+\n+                           X := Next (X);\n+                        end loop;\n+                     end if;\n                   end if;\n                end if;\n             end if;"}, {"sha": "fe38b751dd26aaa978597b707aae122fc8fdc7dc", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -453,7 +453,8 @@ package body Sinput.L is\n          --  Preprocess the source if it needs to be preprocessed\n \n          if Preprocessing_Needed then\n-            --  Set temporarily the Source_File_Index_Table entries for the\n+\n+            --  Temporarily set the Source_File_Index_Table entries for the\n             --  source, to avoid crash when reporting an error.\n \n             Set_Source_File_Index_Table (X);"}, {"sha": "949fcc3afa256febb1ccfcd957a8c6418b810d1e", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -32,10 +32,12 @@\n pragma Style_Checks (All_Checks);\n --  Subprograms not all in alpha order\n \n+with Atree;    use Atree;\n with Debug;    use Debug;\n with Opt;      use Opt;\n with Output;   use Output;\n with Tree_IO;  use Tree_IO;\n+with Sinfo;    use Sinfo;\n with System;   use System;\n with Widechar; use Widechar;\n \n@@ -238,6 +240,222 @@ package body Sinput is\n       return;\n    end Build_Location_String;\n \n+   ---------------------\n+   -- Expr_First_Char --\n+   ---------------------\n+\n+   function Expr_First_Char (Expr : Node_Id) return Source_Ptr is\n+\n+      function First_Char (Expr : Node_Id; PC : Nat) return Source_Ptr;\n+      --  Internal recursive function used to traverse the expression tree.\n+      --  Returns the source pointer corresponding to the first location of\n+      --  the subexpression N, followed by backing up the given (PC) number of\n+      --  preceding left parentheses.\n+\n+      ----------------\n+      -- First_Char --\n+      ----------------\n+\n+      function First_Char (Expr : Node_Id; PC : Nat) return Source_Ptr is\n+         N     : constant Node_Id   := Original_Node (Expr);\n+         Count : constant Nat       := PC + Paren_Count (N);\n+         Kind  : constant N_Subexpr := Nkind (N);\n+         Loc   : Source_Ptr;\n+\n+      begin\n+         case Kind is\n+            when N_And_Then  |\n+                 N_In        |\n+                 N_Not_In    |\n+                 N_Or_Else   |\n+                 N_Binary_Op  =>\n+               return First_Char (Left_Opnd (N), Count);\n+\n+            when N_Attribute_Reference  |\n+                 N_Expanded_Name        |\n+                 N_Explicit_Dereference |\n+                 N_Indexed_Component    |\n+                 N_Reference            |\n+                 N_Selected_Component   |\n+                 N_Slice                =>\n+               return First_Char (Prefix (N), Count);\n+\n+            when N_Function_Call =>\n+               return First_Char (Sinfo.Name (N), Count);\n+\n+            when N_Qualified_Expression |\n+                 N_Type_Conversion      =>\n+               return First_Char (Subtype_Mark (N), Count);\n+\n+            when N_Range =>\n+               return First_Char (Low_Bound (N), Count);\n+\n+            --  Nodes that should not appear in original expression trees\n+\n+            when N_Procedure_Call_Statement  |\n+                 N_Raise_xxx_Error           |\n+                 N_Subprogram_Info           |\n+                 N_Unchecked_Expression      |\n+                 N_Unchecked_Type_Conversion |\n+                 N_Conditional_Expression    =>\n+               raise Program_Error;\n+\n+            --  Cases where the Sloc points to the start of the tokem, but we\n+            --  still need to handle the sequence of left parentheses.\n+\n+            when N_Identifier          |\n+                 N_Operator_Symbol     |\n+                 N_Character_Literal   |\n+                 N_Integer_Literal     |\n+                 N_Null                |\n+                 N_Unary_Op            |\n+                 N_Aggregate           |\n+                 N_Allocator           |\n+                 N_Extension_Aggregate |\n+                 N_Real_Literal        |\n+                 N_String_Literal      =>\n+\n+               Loc := Sloc (N);\n+\n+               if Count > 0 then\n+                  declare\n+                     SFI : constant Source_File_Index :=\n+                             Get_Source_File_Index (Loc);\n+                     Src : constant Source_Buffer_Ptr := Source_Text (SFI);\n+                     Fst : constant Source_Ptr        := Source_First (SFI);\n+\n+                  begin\n+                     for J in 1 .. Count loop\n+                        loop\n+                           exit when Loc = Fst;\n+                           Loc := Loc - 1;\n+                           exit when Src (Loc) >= ' ';\n+                        end loop;\n+\n+                        exit when Src (Loc) /= '(';\n+                     end loop;\n+                  end;\n+               end if;\n+\n+               return Loc;\n+         end case;\n+      end First_Char;\n+\n+   --  Start of processing for Expr_First_Char\n+\n+   begin\n+      pragma Assert (Nkind (Expr) in N_Subexpr);\n+      return First_Char (Expr, 0);\n+   end Expr_First_Char;\n+\n+   --------------------\n+   -- Expr_Last_Char --\n+   --------------------\n+\n+   function Expr_Last_Char (Expr : Node_Id) return Source_Ptr is\n+\n+      function Last_Char (Expr : Node_Id; PC : Nat) return Source_Ptr;\n+      --  Internal recursive function used to traverse the expression tree.\n+      --  Returns the source pointer corresponding to the last location of\n+      --  the subexpression N, followed by ztepping to the last of the given\n+      --  number of right parentheses.\n+\n+      ---------------\n+      -- Last_Char --\n+      ---------------\n+\n+      function Last_Char (Expr : Node_Id; PC : Nat) return Source_Ptr is\n+         N     : constant Node_Id   := Original_Node (Expr);\n+         Count : constant Nat       := PC + Paren_Count (N);\n+         Kind  : constant N_Subexpr := Nkind (N);\n+         Loc   : Source_Ptr;\n+\n+      begin\n+         case Kind is\n+            when N_And_Then  |\n+                 N_In        |\n+                 N_Not_In    |\n+                 N_Or_Else   |\n+                 N_Binary_Op  =>\n+               return Last_Char (Right_Opnd (N), Count);\n+\n+            when N_Attribute_Reference  |\n+                 N_Expanded_Name        |\n+                 N_Explicit_Dereference |\n+                 N_Indexed_Component    |\n+                 N_Reference            |\n+                 N_Selected_Component   |\n+                 N_Slice                =>\n+               return Last_Char (Prefix (N), Count);\n+\n+            when N_Function_Call =>\n+               return Last_Char (Sinfo.Name (N), Count);\n+\n+            when N_Qualified_Expression |\n+                 N_Type_Conversion      =>\n+               return Last_Char (Subtype_Mark (N), Count);\n+\n+            when N_Range =>\n+               return Last_Char (Low_Bound (N), Count);\n+\n+            --  Nodes that should not appear in original expression trees\n+\n+            when N_Procedure_Call_Statement  |\n+                 N_Raise_xxx_Error           |\n+                 N_Subprogram_Info           |\n+                 N_Unchecked_Expression      |\n+                 N_Unchecked_Type_Conversion |\n+                 N_Conditional_Expression    =>\n+               raise Program_Error;\n+\n+            --  Cases where the Sloc points to the start of the tokem, but we\n+            --  still need to handle the sequence of left parentheses.\n+\n+            when N_Identifier          |\n+                 N_Operator_Symbol     |\n+                 N_Character_Literal   |\n+                 N_Integer_Literal     |\n+                 N_Null                |\n+                 N_Unary_Op            |\n+                 N_Aggregate           |\n+                 N_Allocator           |\n+                 N_Extension_Aggregate |\n+                 N_Real_Literal        |\n+                 N_String_Literal      =>\n+\n+               Loc := Sloc (N);\n+\n+               if Count > 0 then\n+                  declare\n+                     SFI : constant Source_File_Index :=\n+                             Get_Source_File_Index (Loc);\n+                     Src : constant Source_Buffer_Ptr := Source_Text (SFI);\n+                     Fst : constant Source_Ptr        := Source_Last (SFI);\n+\n+                  begin\n+                     for J in 1 .. Count loop\n+                        loop\n+                           exit when Loc = Fst;\n+                           Loc := Loc - 1;\n+                           exit when Src (Loc) >= ' ';\n+                        end loop;\n+\n+                        exit when Src (Loc) /= '(';\n+                     end loop;\n+                  end;\n+               end if;\n+\n+               return Loc;\n+         end case;\n+      end Last_Char;\n+\n+   --  Start of processing for Expr_Last_Char\n+\n+   begin\n+      pragma Assert (Nkind (Expr) in N_Subexpr);\n+      return Last_Char (Expr, 0);\n+   end Expr_Last_Char;\n+\n    -----------------------\n    -- Get_Column_Number --\n    -----------------------"}, {"sha": "c679e24d84baf37e614aa5cf6df34c727f7bbb9a", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a4f6e8a2dd2e01783029b028dd935ca16b134/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=4e7a4f6e8a2dd2e01783029b028dd935ca16b134", "patch": "@@ -471,6 +471,14 @@ package Sinput is\n    --  ASCII.NUL, with Name_Length indicating the length not including the\n    --  terminating Nul.\n \n+   function Expr_First_Char (Expr : Node_Id) return Source_Ptr;\n+   --  Given a node for a subexpression, returns the source location of the\n+   --  first character of the expression.\n+\n+   function Expr_Last_Char (Expr : Node_Id) return Source_Ptr;\n+   --  Given a node for a subexpression, returns the source location of the\n+   --  last character of the expression.\n+\n    function Get_Column_Number (P : Source_Ptr) return Column_Number;\n    --  The ones-origin column number of the specified Source_Ptr value is\n    --  determined and returned. Tab characters if present are assumed to"}]}