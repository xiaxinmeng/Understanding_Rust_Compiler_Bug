{"sha": "cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1MWVjZDJhNTM1MjFkMDQxYjIyNjA1ZDNmOGZmNmZiZTYyNDJiMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-12-01T23:26:19Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-12-01T23:26:19Z"}, "message": "sh.c (reg_class_from_letter): Assign `k' to SIBCALL_REGS.\n\n* config/sh/sh.c (reg_class_from_letter): Assign `k' to SIBCALL_REGS.\n(machine_dependent_reorg): Split all insns.\n* config/sh/sh.h (CONDITIONAL_REGISTER_USAGE): Compute\nreg_class_contents[SIBCALL_REGS].\n(reg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add SIBCALL_REGS.\n* config/sh/sh.md (calli_pcrel, call_pcrel, call_valuei_pcrel,\ncall_value_pcrel, call, call_value, sibcall): Match even when\nnot optimizing.\n(sibcalli_pcrel, sibcall_pcrel): Likewise.  Use constraint `k'\nfor call address.\n(sibcalli): Likewise.\n\nFrom-SVN: r37934", "tree": {"sha": "9423aacde7cd5a83dafefcfc6150d8e26dcc9eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9423aacde7cd5a83dafefcfc6150d8e26dcc9eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/comments", "author": null, "committer": null, "parents": [{"sha": "4d80892796677b2beaf9d47d80e337b315395582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d80892796677b2beaf9d47d80e337b315395582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d80892796677b2beaf9d47d80e337b315395582"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "6c94d07a5a25c9299421fc5c9c69d3d498706d37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "patch": "@@ -1,3 +1,17 @@\n+2000-12-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.c (reg_class_from_letter): Assign `k' to SIBCALL_REGS.\n+\t(machine_dependent_reorg): Split all insns.\n+\t* config/sh/sh.h (CONDITIONAL_REGISTER_USAGE): Compute\n+\treg_class_contents[SIBCALL_REGS].\n+\t(reg_class, REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add SIBCALL_REGS.\n+\t* config/sh/sh.md (calli_pcrel, call_pcrel, call_valuei_pcrel,\n+\tcall_value_pcrel, call, call_value, sibcall): Match even when\n+\tnot optimizing.\n+\t(sibcalli_pcrel, sibcall_pcrel): Likewise.  Use constraint `k'\n+\tfor call address.\n+\t(sibcalli): Likewise.\n+\n 2000-12-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (warn_format, warn_format_y2k,"}, {"sha": "8f25be8b43bf84594976a476e3c35504cdae2335", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "patch": "@@ -120,7 +120,7 @@ enum reg_class reg_class_from_letter[] =\n {\n   /* a */ ALL_REGS, /* b */ NO_REGS, /* c */ FPSCR_REGS, /* d */ DF_REGS,\n   /* e */ NO_REGS, /* f */ FP_REGS, /* g */ NO_REGS, /* h */ NO_REGS,\n-  /* i */ NO_REGS, /* j */ NO_REGS, /* k */ NO_REGS, /* l */ PR_REGS,\n+  /* i */ NO_REGS, /* j */ NO_REGS, /* k */ SIBCALL_REGS, /* l */ PR_REGS,\n   /* m */ NO_REGS, /* n */ NO_REGS, /* o */ NO_REGS, /* p */ NO_REGS,\n   /* q */ NO_REGS, /* r */ NO_REGS, /* s */ NO_REGS, /* t */ T_REGS,\n   /* u */ NO_REGS, /* v */ NO_REGS, /* w */ FP0_REGS, /* x */ MAC_REGS,\n@@ -2913,6 +2913,12 @@ machine_dependent_reorg (first)\n   rtx r0_rtx = gen_rtx_REG (Pmode, 0);\n   rtx r0_inc_rtx = gen_rtx_POST_INC (Pmode, r0_rtx);\n \n+  /* We must split call insns before introducing `mova's.  If we're\n+     optimizing, they'll have already been split.  Otherwise, make\n+     sure we don't split them too late.  */\n+  if (! optimize)\n+    split_all_insns (0);\n+\n   /* If relaxing, generate pseudo-ops to associate function calls with\n      the symbols they call.  It does no harm to not generate these\n      pseudo-ops.  However, when we can generate them, it enables to"}, {"sha": "076539ec3c9c479708ac9b517a4ac32103c95bcc", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "patch": "@@ -63,17 +63,17 @@ extern int code_for_indirect_jump_scratch;\n /* We can not debug without a frame pointer.  */\n /* #define CAN_DEBUG_WITHOUT_FP */\n \n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\t\t\\\n+#define CONDITIONAL_REGISTER_USAGE do\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int regno;\t\t\t\t\t\t\t\t\\\n   if (! TARGET_SH4 || ! TARGET_FMOVD)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      int regno;\t\t\t\t\t\t\t\\\n       for (regno = FIRST_XD_REG; regno <= LAST_XD_REG; regno++)\t\t\\\n \tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\t\\\n       if (! TARGET_SH4)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (! TARGET_SH3E)\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      int regno;\t\t\t\t\t\t\\\n \t      for (regno = FIRST_FP_REG; regno <= LAST_FP_REG; regno++)\t\\\n \t\tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n \t      fixed_regs[FPUL_REG] = call_used_regs[FPUL_REG] = 1;\t\\\n@@ -87,7 +87,11 @@ extern int code_for_indirect_jump_scratch;\n     {\t\t\t\t\t\t\t\t\t\\\n       call_used_regs[MACH_REG] = 0;\t\t\t\t\t\\\n       call_used_regs[MACL_REG] = 0;\t\t\t\t\t\\\n-    }\n+    }\t\t\t\t\t\t\t\t\t\\\n+  for (regno = FIRST_GENERAL_REG; regno <= LAST_GENERAL_REG; regno++)\t\\\n+    if (! fixed_regs[regno] && call_used_regs[regno])\t\t\t\\\n+      SET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\t\\\n+} while (0)\n \f\n /* ??? Need to write documentation for all SH options and add it to the\n    invoke.texi file.  */\n@@ -712,6 +716,7 @@ enum reg_class\n   T_REGS,\n   MAC_REGS,\n   FPUL_REGS,\n+  SIBCALL_REGS,\n   GENERAL_REGS,\n   FP0_REGS,\n   FP_REGS,\n@@ -733,6 +738,7 @@ enum reg_class\n   \"T_REGS\",\t\t\\\n   \"MAC_REGS\",\t\t\\\n   \"FPUL_REGS\",\t\t\\\n+  \"SIBCALL_REGS\",\t\\\n   \"GENERAL_REGS\",\t\\\n   \"FP0_REGS\",\t\t\\\n   \"FP_REGS\",\t\t\\\n@@ -754,6 +760,8 @@ enum reg_class\n   { 0x00040000, 0x00000000 }, /* T_REGS\t\t*/\t\\\n   { 0x00300000, 0x00000000 }, /* MAC_REGS\t*/\t\\\n   { 0x00400000, 0x00000000 }, /* FPUL_REGS\t*/\t\\\n+  /* SIBCALL_REGS is initialized in CONDITIONAL_REGISTER_USAGE.  */ \\\n+  { 0x00000000, 0x00000000 }, /* SIBCALL_REGS   */\t\\\n   { 0x0081FFFF, 0x00000000 }, /* GENERAL_REGS\t*/\t\\\n   { 0x01000000, 0x00000000 }, /* FP0_REGS\t*/\t\\\n   { 0xFF000000, 0x000000FF }, /* FP_REGS\t*/\t\\"}, {"sha": "8904831f5fae75f6a0348f46e732d2857c5edb30", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb51ecd2a53521d041b22605d3f8ff6fbe6242b2/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=cb51ecd2a53521d041b22605d3f8ff6fbe6242b2", "patch": "@@ -3410,7 +3410,7 @@\n    (use (reg:SI PIC_REG))\n    (clobber (reg:SI PR_REG))\n    (clobber (match_scratch:SI 2 \"=r\"))]\n-  \"TARGET_SH2 && optimize\"\n+  \"TARGET_SH2\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 0)]\n@@ -3469,7 +3469,7 @@\n    (use (reg:SI PIC_REG))\n    (clobber (reg:SI PR_REG))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"TARGET_SH2 && optimize\"\n+  \"TARGET_SH2\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 0)]\n@@ -3499,7 +3499,7 @@\n   \"\"\n   \"\n {\n-  if (flag_pic && TARGET_SH2 && optimize\n+  if (flag_pic && TARGET_SH2\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     {\n@@ -3519,7 +3519,7 @@\n   \"\"\n   \"\n {\n-  if (flag_pic && TARGET_SH2 && optimize\n+  if (flag_pic && TARGET_SH2\n       && GET_CODE (operands[1]) == MEM\n       && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n     {\n@@ -3532,8 +3532,7 @@\n }\")\n \n (define_insn \"sibcalli\"\n-  ;; FIXME: any call-clobbered register will do\n-  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"z\"))\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"k\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (reg:PSI FPSCR_REG))\n    (return)]\n@@ -3543,8 +3542,7 @@\n    (set_attr \"type\" \"jump_ind\")])\n \n (define_insn \"sibcalli_pcrel\"\n-  ;; FIXME: any call-clobbered register will do\n-  [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"z\"))\n+  [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"k\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (use (reg:PSI FPSCR_REG))\n@@ -3558,10 +3556,9 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (reg:PSI FPSCR_REG))\n-   ;; FIXME: any call-clobbered register will do\n-   (clobber (match_scratch:SI 2 \"=z\"))\n+   (clobber (match_scratch:SI 2 \"=k\"))\n    (return)]\n-  \"TARGET_SH2 && optimize\"\n+  \"TARGET_SH2\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 0)]\n@@ -3586,7 +3583,7 @@\n   \"\"\n   \"\n {\n-  if (flag_pic && TARGET_SH2 && optimize\n+  if (flag_pic && TARGET_SH2\n       && GET_CODE (operands[0]) == MEM\n       && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n       /* The PLT needs the PIC register, but the epilogue would have"}]}