{"sha": "93c094b52446169562292970e81c963517b58b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjMDk0YjUyNDQ2MTY5NTYyMjkyOTcwZTgxYzk2MzUxN2I1OGIzNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-09-12T10:11:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-09-12T10:11:04Z"}, "message": "re PR middle-end/28071 (A file that can not be compiled in reasonable time/space)\n\n\n\tPR rtl-optimization/28071\n\t* tree-vect-transform.c (vect_create_data_ref_ptr): Kill cast.\n\t(vect_transform_loop): Likewise.\n\t* tree-vectorizer.c (new_loop_vec_info): Likewise.\n\t(new_loop_vec_info): Likewise.\n\t(destroy_loop_vec_info): Likewise.\n\t* tree-dfa.c (create_var_ann): Use GCC_CNEW.\n\t(create_stmt_ann): Likewise.\n\t(create_tree_ann): Rename to ...\n\t(create_tree_common_ann): ... this one; allocate only the common part\n\tof annotations.\n\t* tree-vn.c (set_value_handle): Use get_tree_common_ann.\n\t(get_value_handle): Likewise.\n\t* tree-ssa-pre.c (phi_translate): Delay annotation allocation for\n\tget_tree_common_ann.\n\t* tree-vectorizer.h (set_stmt_info): Take stmt annotation.\n\t(vinfo_for_stmt): Use stmt annotations.\n\t* tree-flow.h (tree_ann_common_t): New type.\n\t(tree_common_ann, get_tree_common_ann, create_tree_common_ann): New.\n\t(tree_ann, get_tree_ann, create_tree_ann): New.\n\t* tree-flow-inline.h (get_function_ann): Do more type checking.\n\t(stmt_ann): Likewise.\n\t(tree_ann): Rename to ...\n\t(tree_common_ann): ... this one; return ony common_ann\n\t(get_tree_ann): Rename to ...\n\t(tree_common_ann): This one; return only common_ann.\n\t* tree-vect-patterns.c (vect_pattern_recog_1): Update call\n\tof set_stmt_info.\n\nFrom-SVN: r116886", "tree": {"sha": "266a9bc23ee1dd47eaa2dd6b1ce2a9e99f2bdc7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/266a9bc23ee1dd47eaa2dd6b1ce2a9e99f2bdc7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93c094b52446169562292970e81c963517b58b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c094b52446169562292970e81c963517b58b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c094b52446169562292970e81c963517b58b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c094b52446169562292970e81c963517b58b37/comments", "author": null, "committer": null, "parents": [{"sha": "5f86874e9f21a041d50230024699d8d0cef78bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f86874e9f21a041d50230024699d8d0cef78bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f86874e9f21a041d50230024699d8d0cef78bf3"}], "stats": {"total": 107, "additions": 69, "deletions": 38}, "files": [{"sha": "5d66902f67fb68c0492608ccd4025766a898fe8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -1,3 +1,34 @@\n+2006-09-12  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR rtl-optimization/28071\n+\t* tree-vect-transform.c (vect_create_data_ref_ptr): Kill cast.\n+\t(vect_transform_loop): Likewise.\n+\t* tree-vectorizer.c (new_loop_vec_info): Likewise.\n+\t(new_loop_vec_info): Likewise.\n+\t(destroy_loop_vec_info): Likewise.\n+\t* tree-dfa.c (create_var_ann): Use GCC_CNEW.\n+\t(create_stmt_ann): Likewise.\n+\t(create_tree_ann): Rename to ...\n+\t(create_tree_common_ann): ... this one; allocate only the common part\n+\tof annotations.\n+\t* tree-vn.c (set_value_handle): Use get_tree_common_ann.\n+\t(get_value_handle): Likewise.\n+\t* tree-ssa-pre.c (phi_translate): Delay annotation allocation for\n+\tget_tree_common_ann.\n+\t* tree-vectorizer.h (set_stmt_info): Take stmt annotation.\n+\t(vinfo_for_stmt): Use stmt annotations.\n+\t* tree-flow.h (tree_ann_common_t): New type.\n+\t(tree_common_ann, get_tree_common_ann, create_tree_common_ann): New.\n+\t(tree_ann, get_tree_ann, create_tree_ann): New.\n+\t* tree-flow-inline.h (get_function_ann): Do more type checking.\n+\t(stmt_ann): Likewise.\n+\t(tree_ann): Rename to ...\n+\t(tree_common_ann): ... this one; return ony common_ann\n+\t(get_tree_ann): Rename to ...\n+\t(tree_common_ann): This one; return only common_ann.\n+\t* tree-vect-patterns.c (vect_pattern_recog_1): Update call\n+\tof set_stmt_info.\n+\n 2006-09-11  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config.gcc (i[34567]86-*-darwin*): Set with_arch and"}, {"sha": "088c45ab33552b5b3bd18b5369ddb8ef0cca33d0", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -142,8 +142,7 @@ create_var_ann (tree t)\n   gcc_assert (DECL_P (t));\n   gcc_assert (!t->common.ann || t->common.ann->common.type == VAR_ANN);\n \n-  ann = GGC_NEW (struct var_ann_d);\n-  memset ((void *) ann, 0, sizeof (*ann));\n+  ann = GGC_CNEW (struct var_ann_d);\n \n   ann->common.type = VAR_ANN;\n \n@@ -183,8 +182,7 @@ create_stmt_ann (tree t)\n   gcc_assert (is_gimple_stmt (t));\n   gcc_assert (!t->common.ann || t->common.ann->common.type == STMT_ANN);\n \n-  ann = GGC_NEW (struct stmt_ann_d);\n-  memset ((void *) ann, 0, sizeof (*ann));\n+  ann = GGC_CNEW (struct stmt_ann_d);\n \n   ann->common.type = STMT_ANN;\n \n@@ -198,19 +196,18 @@ create_stmt_ann (tree t)\n \n /* Create a new annotation for a tree T.  */\n \n-tree_ann_t\n-create_tree_ann (tree t)\n+tree_ann_common_t\n+create_tree_common_ann (tree t)\n {\n-  tree_ann_t ann;\n+  tree_ann_common_t ann;\n \n   gcc_assert (t);\n   gcc_assert (!t->common.ann || t->common.ann->common.type == TREE_ANN_COMMON);\n \n-  ann = GGC_NEW (union tree_ann_d);\n-  memset ((void *) ann, 0, sizeof (*ann));\n+  ann = GGC_CNEW (struct tree_ann_common_d);\n \n-  ann->common.type = TREE_ANN_COMMON;\n-  t->common.ann = ann;\n+  ann->type = TREE_ANN_COMMON;\n+  t->common.ann = (tree_ann_t) ann;\n \n   return ann;\n }"}, {"sha": "892be56a61ccc223cccd9412abb1664f99720237", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -159,6 +159,7 @@ static inline function_ann_t\n get_function_ann (tree var)\n {\n   function_ann_t ann = function_ann (var);\n+  gcc_assert (!var->common.ann || var->common.ann->common.type == FUNCTION_ANN);\n   return (ann) ? ann : create_function_ann (var);\n }\n \n@@ -170,6 +171,7 @@ stmt_ann (tree t)\n #ifdef ENABLE_CHECKING\n   gcc_assert (is_gimple_stmt (t));\n #endif\n+  gcc_assert (!t->common.ann || t->common.ann->common.type == STMT_ANN);\n   return (stmt_ann_t) t->common.ann;\n }\n \n@@ -785,19 +787,19 @@ mark_non_addressable (tree var)\n \n /* Return the common annotation for T.  Return NULL if the annotation\n    doesn't already exist.  */\n-static inline tree_ann_t\n-tree_ann (tree t)\n+static inline tree_ann_common_t\n+tree_common_ann (tree t)\n {\n-  return t->common.ann;\n+  return &t->common.ann->common;\n }\n \n /* Return a common annotation for T.  Create the constant annotation if it\n    doesn't exist.  */\n-static inline tree_ann_t\n-get_tree_ann (tree t)\n+static inline tree_ann_common_t\n+get_tree_common_ann (tree t)\n {\n-  tree_ann_t ann = tree_ann (t);\n-  return (ann) ? ann : create_tree_ann (t);\n+  tree_ann_common_t ann = tree_common_ann (t);\n+  return (ann) ? ann : create_tree_common_ann (t);\n }\n \n /*  -----------------------------------------------------------------------  */"}, {"sha": "e8fa099f65d3a548469556b67a3b921378bcb293", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -332,9 +332,10 @@ typedef union tree_ann_d *tree_ann_t;\n typedef struct var_ann_d *var_ann_t;\n typedef struct function_ann_d *function_ann_t;\n typedef struct stmt_ann_d *stmt_ann_t;\n+typedef struct tree_ann_common_d *tree_ann_common_t;\n \n-static inline tree_ann_t tree_ann (tree);\n-static inline tree_ann_t get_tree_ann (tree);\n+static inline tree_ann_common_t tree_common_ann (tree);\n+static inline tree_ann_common_t get_tree_common_ann (tree);\n static inline var_ann_t var_ann (tree);\n static inline var_ann_t get_var_ann (tree);\n static inline function_ann_t function_ann (tree);\n@@ -623,7 +624,7 @@ extern void dump_generic_bb (FILE *, basic_block, int, int);\n extern var_ann_t create_var_ann (tree);\n extern function_ann_t create_function_ann (tree);\n extern stmt_ann_t create_stmt_ann (tree);\n-extern tree_ann_t create_tree_ann (tree);\n+extern tree_ann_common_t create_tree_common_ann (tree);\n extern void dump_dfa_stats (FILE *);\n extern void debug_dfa_stats (void);\n extern void debug_referenced_vars (void);"}, {"sha": "9c7b89faaf3f3cc41caaca13caf25cba15972d7b", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -1151,7 +1151,7 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n \t\tTREE_OPERAND (newexpr, 0) = newop0 == oldop0 ? oldop0 : get_value_handle (newop0);\n \t\tTREE_OPERAND (newexpr, 1) = listchanged ? newarglist : oldarglist;\n \t\tTREE_OPERAND (newexpr, 2) = newop2 == oldop2 ? oldop2 : get_value_handle (newop2);\n-\t\tcreate_tree_ann (newexpr);\n+\t\tnewexpr->common.ann = NULL;\n \t\tvn_lookup_or_add_with_vuses (newexpr, tvuses);\n \t\texpr = newexpr;\n \t\tphi_trans_add (oldexpr, newexpr, pred, tvuses);\n@@ -1260,7 +1260,7 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n \t      }\n \t    else\n \t      {\n-\t\tcreate_tree_ann (newexpr);\n+\t\tnewexpr->common.ann = NULL;\n \t\tvn_lookup_or_add_with_vuses (newexpr, newvuses);\n \t      }\n \t    expr = newexpr;\n@@ -1302,7 +1302,7 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n \t      }\n \t    else\n \t      {\n-\t\tcreate_tree_ann (newexpr);\n+\t\tnewexpr->common.ann = NULL;\n \t\tvn_lookup_or_add (newexpr, NULL);\n \t      }\n \t    expr = newexpr;\n@@ -1335,7 +1335,7 @@ phi_translate (tree expr, value_set_t set, basic_block pred,\n \t      }\n \t    else\n \t      {\n-\t\tcreate_tree_ann (newexpr);\n+\t\tnewexpr->common.ann = NULL;\n \t\tvn_lookup_or_add (newexpr, NULL);\n \t      }\n \t    expr = newexpr;"}, {"sha": "9ac11b07bd35202dd45bf9eaf6e9c55412fb2b10", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -522,7 +522,7 @@ vect_pattern_recog_1 (\n   SSA_NAME_DEF_STMT (var_name) = pattern_expr;\n   bsi_insert_before (&si, pattern_expr, BSI_SAME_STMT);\n   ann = stmt_ann (pattern_expr);\n-  set_stmt_info ((tree_ann_t)ann, new_stmt_vec_info (pattern_expr, loop_vinfo));\n+  set_stmt_info (ann, new_stmt_vec_info (pattern_expr, loop_vinfo));\n   pattern_stmt_info = vinfo_for_stmt (pattern_expr);\n   \n   STMT_VINFO_RELATED_STMT (pattern_stmt_info) = stmt;"}, {"sha": "14d3cc5e2d0eb759844d5e31f866e3619775e885", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -351,7 +351,7 @@ vect_create_data_ref_ptr (tree stmt,\n \t\t NULL_TREE, loop, &incr_bsi, insert_after,\n \t\t &indx_before_incr, &indx_after_incr);\n       incr = bsi_stmt (incr_bsi);\n-      set_stmt_info ((tree_ann_t)stmt_ann (incr),\n+      set_stmt_info (stmt_ann (incr),\n \t\t     new_stmt_vec_info (incr, loop_vinfo));\n \n       /* Copy the points-to information if it exists. */\n@@ -3114,7 +3114,7 @@ vect_transform_loop (loop_vec_info loop_vinfo,\n \t      /* Free the attached stmt_vec_info and remove the stmt.  */\n \t      stmt_ann_t ann = stmt_ann (stmt);\n \t      free (stmt_info);\n-\t      set_stmt_info ((tree_ann_t)ann, NULL);\n+\t      set_stmt_info (ann, NULL);\n \t      bsi_remove (&si, true);\n \t      continue;\n \t    }"}, {"sha": "8a361b7ad0608cf5196976b9765d377eb37ae2bb", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -1401,7 +1401,7 @@ new_loop_vec_info (struct loop *loop)\n \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n         {\n-          tree_ann_t ann = get_tree_ann (phi);\n+          stmt_ann_t ann = get_stmt_ann (phi);\n           set_stmt_info (ann, new_stmt_vec_info (phi, res));\n         }\n \n@@ -1411,7 +1411,7 @@ new_loop_vec_info (struct loop *loop)\n \t  stmt_ann_t ann;\n \n \t  ann = stmt_ann (stmt);\n-\t  set_stmt_info ((tree_ann_t)ann, new_stmt_vec_info (stmt, res));\n+\t  set_stmt_info (ann, new_stmt_vec_info (stmt, res));\n \t}\n     }\n \n@@ -1462,7 +1462,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo)\n \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n         {\n-          tree_ann_t ann = get_tree_ann (phi);\n+          stmt_ann_t ann = stmt_ann (phi);\n \n           stmt_info = vinfo_for_stmt (phi);\n           free (stmt_info);\n@@ -1492,7 +1492,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo)\n \t      /* Free stmt_vec_info.  */\n \t      VEC_free (dr_p, heap, STMT_VINFO_SAME_ALIGN_REFS (stmt_info));\n \t      free (stmt_info);\n-\t      set_stmt_info ((tree_ann_t)ann, NULL);\n+\t      set_stmt_info (ann, NULL);\n \n \t      /* Remove dead \"pattern stmts\".  */\n \t      if (remove_stmt_p)"}, {"sha": "536aae803cec90a9a4c7abc03a1a8f49d01cf0e0", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -242,11 +242,11 @@ typedef struct _stmt_vec_info {\n #define STMT_VINFO_SAME_ALIGN_REFS(S)     (S)->same_align_refs\n #define STMT_VINFO_DEF_TYPE(S)            (S)->def_type\n \n-static inline void set_stmt_info (tree_ann_t ann, stmt_vec_info stmt_info);\n+static inline void set_stmt_info (stmt_ann_t ann, stmt_vec_info stmt_info);\n static inline stmt_vec_info vinfo_for_stmt (tree stmt);\n \n static inline void\n-set_stmt_info (tree_ann_t ann, stmt_vec_info stmt_info)\n+set_stmt_info (stmt_ann_t ann, stmt_vec_info stmt_info)\n {\n   if (ann)\n     ann->common.aux = (char *) stmt_info;\n@@ -255,7 +255,7 @@ set_stmt_info (tree_ann_t ann, stmt_vec_info stmt_info)\n static inline stmt_vec_info\n vinfo_for_stmt (tree stmt)\n {\n-  tree_ann_t ann = tree_ann (stmt);\n+  stmt_ann_t ann = stmt_ann (stmt);\n   return ann ? (stmt_vec_info) ann->common.aux : NULL;\n }\n "}, {"sha": "3c88e5adc933cb44d130e0a259d345d6cba3e22d", "filename": "gcc/tree-vn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c094b52446169562292970e81c963517b58b37/gcc%2Ftree-vn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vn.c?ref=93c094b52446169562292970e81c963517b58b37", "patch": "@@ -182,7 +182,7 @@ set_value_handle (tree e, tree v)\n     SSA_NAME_VALUE (e) = v;\n   else if (EXPR_P (e) || DECL_P (e) || TREE_CODE (e) == TREE_LIST\n \t   || TREE_CODE (e) == CONSTRUCTOR)\n-    get_tree_ann (e)->common.value_handle = v;\n+    get_tree_common_ann (e)->value_handle = v;\n   else\n     /* Do nothing.  Constants are their own value handles.  */\n     gcc_assert (is_gimple_min_invariant (e));\n@@ -438,8 +438,8 @@ get_value_handle (tree expr)\n   else if (EXPR_P (expr) || DECL_P (expr) || TREE_CODE (expr) == TREE_LIST\n \t   || TREE_CODE (expr) == CONSTRUCTOR)\n     {\n-      tree_ann_t ann = tree_ann (expr);\n-      return ((ann) ? ann->common.value_handle : NULL_TREE);\n+      tree_ann_common_t ann = tree_common_ann (expr);\n+      return ((ann) ? ann->value_handle : NULL_TREE);\n     }\n   else\n     gcc_unreachable ();"}]}