{"sha": "0494626aae628174dd5d510d25a1fabac300387a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5NDYyNmFhZTYyODE3NGRkNWQ1MTBkMjVhMWZhYmFjMzAwMzg3YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-17T15:00:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-17T15:00:59Z"}, "message": "re PR middle-end/18071 (-Winline does not respect -fno-default-inline)\n\n\tPR c++/18071\n\t* tree.h (DECL_INLINE): remove.\n\t(DECL_DECLARED_INLINE_P): Update docs.\n\t(DECL_NO_INLINE_WARNING_P): new.\n\t(tree_function_decl): Replace inline_flag by no_inline_warning_flag.\n\t* tree-inline.c (inlinable_function_p): Set DECL_NO_INLINE_WARNING_P.\n\n\tJava:\n\t* class.c (add_method_1): Do not initialize DECL_INLINE.\n\t(make_local_function_alias): Likewise.\n\t* expr.c (rewrite_arglist_getcaller): Set DECL_UNINLINABLE.\n\t* lang.c (java_decl_ok_for_sibcall): Use DECL_UNINLINABLE.\n\n\tObjc:\n\t* objc/objc-act.c (objc_finish_method_definition): Do not set DECL_INLINE.\n\t\n\tC++:\n\t* cp/decl.c (start_method): Set DECL_NO_INLINE_WARNING_P.\n\nFrom-SVN: r140418", "tree": {"sha": "04fe9640a665ee7bf86c70b57f060c685b31ee95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04fe9640a665ee7bf86c70b57f060c685b31ee95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0494626aae628174dd5d510d25a1fabac300387a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0494626aae628174dd5d510d25a1fabac300387a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0494626aae628174dd5d510d25a1fabac300387a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0494626aae628174dd5d510d25a1fabac300387a/comments", "author": null, "committer": null, "parents": [{"sha": "1c1b0507d40b99ad6356f8feb2b43430b30568bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1b0507d40b99ad6356f8feb2b43430b30568bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1b0507d40b99ad6356f8feb2b43430b30568bb"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "9b763f828250a4e132a14ef0b2cf811dff23f5cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -1,3 +1,12 @@\n+2008-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/18071\n+\t* tree.h (DECL_INLINE): remove.\n+\t(DECL_DECLARED_INLINE_P): Update docs.\n+\t(DECL_NO_INLINE_WARNING_P): new.\n+\t(tree_function_decl): Replace inline_flag by no_inline_warning_flag.\n+\t* tree-inline.c (inlinable_function_p): Set DECL_NO_INLINE_WARNING_P.\n+\n 2008-09-17  Jakub Jelinek  <jakub@redhat.com>\n \t    Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n "}, {"sha": "903f45cb411f564c00aa2f3b80f9ddb50761169f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -1,3 +1,8 @@\n+2008-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/18071\n+\t* cp/decl.c (start_method): Set DECL_NO_INLINE_WARNING_P.\n+\n 2008-09-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37531"}, {"sha": "f57ca871254fb15a9c61453d6636b715c8730063", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -12332,6 +12332,7 @@ start_method (cp_decl_specifier_seq *declspecs,\n   check_template_shadow (fndecl);\n \n   DECL_DECLARED_INLINE_P (fndecl) = 1;\n+  DECL_NO_INLINE_WARNING_P (fndecl) = 1;\n \n   /* We process method specializations in finish_struct_1.  */\n   if (processing_template_decl && !DECL_TEMPLATE_SPECIALIZATION (fndecl))"}, {"sha": "c5a9ecfc147c70fc0ff6de735e8f1fc9bb8c6764", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -1,3 +1,11 @@\n+2008-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/18071\n+\t* class.c (add_method_1): Do not initialize DECL_INLINE.\n+\t(make_local_function_alias): Likewise.\n+\t* expr.c (rewrite_arglist_getcaller): Set DECL_UNINLINABLE.\n+\t* lang.c (java_decl_ok_for_sibcall): Use DECL_UNINLINABLE.\n+\n 2008-09-09  Richard Guenther  <rguenther@suse.de>\n \n \t* decl.c (build_result_decl): Remove no longer applicable"}, {"sha": "13cc54e024d96be14ee7bec36c390726c93a8469", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -795,7 +795,7 @@ add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n   if (access_flags & ACC_PUBLIC) METHOD_PUBLIC (fndecl) = 1;\n   if (access_flags & ACC_PROTECTED) METHOD_PROTECTED (fndecl) = 1;\n   if (access_flags & ACC_PRIVATE)\n-    METHOD_PRIVATE (fndecl) = DECL_INLINE (fndecl) = 1;\n+    METHOD_PRIVATE (fndecl) = 1;\n   if (access_flags & ACC_NATIVE)\n     {\n       METHOD_NATIVE (fndecl) = 1;\n@@ -806,9 +806,9 @@ add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n        file.  */\n     DECL_EXTERNAL (fndecl) = CLASS_FROM_CURRENTLY_COMPILED_P (this_class) == 0;\n   if (access_flags & ACC_STATIC) \n-    METHOD_STATIC (fndecl) = DECL_INLINE (fndecl) = 1;\n+    METHOD_STATIC (fndecl) = 1;\n   if (access_flags & ACC_FINAL) \n-    METHOD_FINAL (fndecl) = DECL_INLINE (fndecl) = 1;\n+    METHOD_FINAL (fndecl) = 1;\n   if (access_flags & ACC_SYNCHRONIZED) METHOD_SYNCHRONIZED (fndecl) = 1;\n   if (access_flags & ACC_ABSTRACT) METHOD_ABSTRACT (fndecl) = 1;\n   if (access_flags & ACC_STRICT) METHOD_STRICTFP (fndecl) = 1;\n@@ -1393,7 +1393,6 @@ make_local_function_alias (tree method)\n   TREE_PUBLIC (alias) = 0;\n   DECL_EXTERNAL (alias) = 0;\n   DECL_ARTIFICIAL (alias) = 1;\n-  DECL_INLINE (alias) = 0;\n   DECL_INITIAL (alias) = error_mark_node;\n   TREE_ADDRESSABLE (alias) = 1;\n   TREE_USED (alias) = 1;"}, {"sha": "0882b520d5170f8890bedfeae7bf472e3fdaa2cc", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -2089,9 +2089,9 @@ rewrite_arglist_getcaller (tree arglist)\n   tree retaddr \n     = build_call_expr (built_in_decls[BUILT_IN_RETURN_ADDRESS],\n \t\t       1, integer_zero_node);\n-  \n-  DECL_INLINE (current_function_decl) = 0;\n \n+  DECL_UNINLINABLE (current_function_decl) = 1;\n+  \n   return chainon (arglist, \n \t\t  tree_cons (NULL_TREE, retaddr, \n \t\t\t     NULL_TREE));"}, {"sha": "af2ed8065c68dd88c78a75ea705ff24b0454ba39", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -845,7 +845,7 @@ static bool\n java_decl_ok_for_sibcall (const_tree decl)\n {\n   return (decl != NULL && DECL_CONTEXT (decl) == output_class\n-\t  && DECL_INLINE (decl));\n+          && !DECL_UNINLINABLE (decl));\n }\n \n /* Given a call_expr, try to figure out what its target might be.  In"}, {"sha": "1457f7f49ab697449e1d031cd60426492603dd65", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -1,3 +1,9 @@\n+2008-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c++/18071\n+\t* objc/objc-act.c (objc_finish_method_definition): Do not set\n+\tDECL_INLINE.\n+\n 2008-09-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* objc-act.c (build_typed_selector_reference): Pass input_location to"}, {"sha": "1fd52f0643577f258279270034151be1571f7249", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -8800,7 +8800,6 @@ objc_finish_method_definition (tree fndecl)\n   /* We cannot validly inline ObjC methods, at least not without a language\n      extension to declare that a method need not be dynamically\n      dispatched, so suppress all thoughts of doing so.  */\n-  DECL_INLINE (fndecl) = 0;\n   DECL_UNINLINABLE (fndecl) = 1;\n \n #ifndef OBJCPLUS"}, {"sha": "69f0c80c09433ae01f07da57c83a802f294ee541", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -2594,6 +2594,7 @@ inlinable_function_p (tree fn)\n   /* We only warn for functions declared `inline' by the user.  */\n   do_warning = (warn_inline\n \t\t&& DECL_DECLARED_INLINE_P (fn)\n+\t\t&& !DECL_NO_INLINE_WARNING_P (fn)\n \t\t&& !DECL_IN_SYSTEM_HEADER (fn));\n \n   always_inline = lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn));"}, {"sha": "4c046c29d645289397bdb34fda464bf99246ac90", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0494626aae628174dd5d510d25a1fabac300387a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0494626aae628174dd5d510d25a1fabac300387a", "patch": "@@ -3235,17 +3235,17 @@ struct tree_decl_non_common GTY(())\n #define DECL_POSSIBLY_INLINED(DECL) \\\n   FUNCTION_DECL_CHECK (DECL)->function_decl.possibly_inlined\n \n-/* Nonzero in a FUNCTION_DECL means this function can be substituted\n-   where it is called.  */\n-#define DECL_INLINE(NODE) (FUNCTION_DECL_CHECK (NODE)->function_decl.inline_flag)\n-\n /* Nonzero in a FUNCTION_DECL means that this function was declared inline,\n    such as via the `inline' keyword in C/C++.  This flag controls the linkage\n-   semantics of 'inline'; whether or not the function is inlined is\n-   controlled by DECL_INLINE.  */\n+   semantics of 'inline'  */\n #define DECL_DECLARED_INLINE_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.declared_inline_flag)\n \n+/* Nonzero in a FUNCTION_DECL means this function should not get\n+   -Winline warnings.  */\n+#define DECL_NO_INLINE_WARNING_P(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.no_inline_warning_flag)\n+\n /* Nonzero in a FUNCTION_DECL that should be always inlined by the inliner\n    disregarding size and cost heuristics.  This is equivalent to using\n    the always_inline attribute without the required diagnostics if the\n@@ -3314,7 +3314,7 @@ struct tree_function_decl GTY(())\n   unsigned declared_inline_flag : 1;\n   unsigned regdecl_flag : 1;\n \n-  unsigned inline_flag : 1;\n+  unsigned no_inline_warning_flag : 1;\n   unsigned no_instrument_function_entry_exit : 1;\n   unsigned no_limit_stack : 1;\n   unsigned disregard_inline_limits : 1;"}]}