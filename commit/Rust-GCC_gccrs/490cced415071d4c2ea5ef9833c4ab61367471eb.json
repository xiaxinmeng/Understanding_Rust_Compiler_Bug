{"sha": "490cced415071d4c2ea5ef9833c4ab61367471eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkwY2NlZDQxNTA3MWQ0YzJlYTVlZjk4MzNjNGFiNjEzNjc0NzFlYg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2018-06-15T15:25:16Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2018-06-15T15:25:16Z"}, "message": "Force user provided warning and error messages to only occupy one line.\n\n \tPR 84195\ngcc: \t* tree.c (escaped_string): New class.  Converts an unescaped\n \tstring into its escaped equivalent.\n \t(warn_deprecated_use): Use the new class to convert the\n \tdeprecation message, if present.\n \t(test_escaped_strings): New self test.\n \t(test_c_tests): Add test_escaped_strings.\n \t* doc/extend.texi (deprecated): Add a note that the\n \tdeprecation message is affected by the -fmessage-length\n \toption, and that control characters will be escaped.\n \t(#pragma GCC error): Document this pragma.\n \t(#pragma GCC warning): Likewise.\n \t* doc/invoke.texi (-fmessage-length): Document this option's\n \teffect on the #warning and #error preprocessor directives and\n \tthe deprecated attribute.\n\t\ntestsuite;\n \t* gcc.c-torture/compile/pr84195.c: New test.\n\nFrom-SVN: r261633", "tree": {"sha": "d032e0e439bf1d005b9dede218d85db79cbe223c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d032e0e439bf1d005b9dede218d85db79cbe223c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/490cced415071d4c2ea5ef9833c4ab61367471eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490cced415071d4c2ea5ef9833c4ab61367471eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490cced415071d4c2ea5ef9833c4ab61367471eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490cced415071d4c2ea5ef9833c4ab61367471eb/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f93abd805763ef3827fce9194b0adcd2419a45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f93abd805763ef3827fce9194b0adcd2419a45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f93abd805763ef3827fce9194b0adcd2419a45c"}], "stats": {"total": 93, "additions": 91, "deletions": 2}, "files": [{"sha": "d30dc553872fb4a1bb321c0be146aad09e9a967e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=490cced415071d4c2ea5ef9833c4ab61367471eb", "patch": "@@ -1,3 +1,21 @@\n+2018-06-15  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 84195\n+\t* tree.c (escaped_string): New class.  Converts an unescaped\n+\tstring into its escaped equivalent.\n+\t(warn_deprecated_use): Use the new class to convert the\n+\tdeprecation message, if present.\n+\t(test_escaped_strings): New self test.\n+\t(test_c_tests): Add test_escaped_strings.\n+\t* doc/extend.texi (deprecated): Add a note that the\n+\tdeprecation message is affected by the -fmessage-length\n+\toption, and that control characters will be escaped.\n+\t(#pragma GCC error): Document this pragma.\n+\t(#pragma GCC warning): Likewise.\n+\t* doc/invoke.texi (-fmessage-length): Document this option's\n+\teffect on the #warning and #error preprocessor directives and\n+\tthe deprecated attribute.\n+\n 2018-06-15  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_slp_bb): Dump MSG_OPTIMIZED_LOCATIONS"}, {"sha": "ca96c083f9fbed7907ae458776e26ad4f58b872f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=490cced415071d4c2ea5ef9833c4ab61367471eb", "patch": "@@ -2553,6 +2553,9 @@ present.\n The @code{deprecated} attribute can also be used for variables and\n types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n \n+The message attached to the attribute is affected by the setting of\n+the @option{-fmessage-length} option.\n+\n @item error (\"@var{message}\")\n @itemx warning (\"@var{message}\")\n @cindex @code{error} function attribute\n@@ -6092,6 +6095,9 @@ The @code{deprecated} attribute can also be used for functions and\n types (@pxref{Common Function Attributes},\n @pxref{Common Type Attributes}).\n \n+The message attached to the attribute is affected by the setting of\n+the @option{-fmessage-length} option.\n+\n @item nonstring\n @cindex @code{nonstring} variable attribute\n The @code{nonstring} variable attribute specifies that an object or member\n@@ -7018,11 +7024,16 @@ warning is issued for line 4 because T2 is not explicitly\n deprecated.  Line 5 has no warning because T3 is explicitly\n deprecated.  Similarly for line 6.  The optional @var{msg}\n argument, which must be a string, is printed in the warning if\n-present.\n+present.  Control characters in the string will be replaced with\n+escape sequences, and if the @option{-fmessage-length} option is set\n+to 0 (its default value) then any newline characters will be ignored.\n \n The @code{deprecated} attribute can also be used for functions and\n variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n \n+The message attached to the attribute is affected by the setting of\n+the @option{-fmessage-length} option.\n+\n @item designated_init\n @cindex @code{designated_init} type attribute\n This attribute may only be applied to structure types.  It indicates\n@@ -21973,7 +21984,9 @@ compilation.\n @cindex pragma, diagnostic\n \n Prints @var{string} as a compiler message on compilation.  The message\n-is informational only, and is neither a compilation warning nor an error.\n+is informational only, and is neither a compilation warning nor an\n+error.  Newlines can be included in the string by using the @samp{\\n}\n+escape sequence.\n \n @smallexample\n #pragma message \"Compiling \" __FILE__ \"...\"\n@@ -21993,6 +22006,37 @@ TODO(Remember to fix this)\n prints @samp{/tmp/file.c:4: note: #pragma message:\n TODO - Remember to fix this}.\n \n+@item #pragma GCC error @var{message}\n+@cindex pragma, diagnostic\n+Generates an error message.  This pragma @emph{is} considered to\n+indicate an error in the compilation, and it will be treated as such.\n+\n+Newlines can be included in the string by using the @samp{\\n}\n+escape sequence.  They will be displayed as newlines even if the\n+@option{-fmessage-length} option is set to zero.\n+\n+The error is only generated if the pragma is present in the code after\n+pre-processing has been completed.  It does not matter however if the\n+code containing the pragma is unreachable:\n+\n+@smallexample\n+#if 0\n+#pragma GCC error \"this error is not seen\"\n+#endif\n+void foo (void)\n+@{\n+  return;\n+#pragma GCC error \"this error is seen\"\n+@}\n+@end smallexample\n+\n+@item #pragma GCC warning @var{message}\n+@cindex pragma, diagnostic\n+This is just like @samp{pragma GCC error} except that a warning\n+message is issued instead of an error message.  Unless\n+@option{-Werror} is in effect, in which case this pragma will generate\n+an error as well.\n+\n @end table\n \n @node Visibility Pragmas"}, {"sha": "3c279ff8efa97b7b6bd21bff5f83f0aaba53e879", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=490cced415071d4c2ea5ef9833c4ab61367471eb", "patch": "@@ -3536,6 +3536,11 @@ Try to format error messages so that they fit on lines of about\n done; each error message appears on a single line.  This is the\n default for all front ends.\n \n+Note - this option also affects the display of the @samp{#error} and\n+@samp{#warning} pre-processor directives, and the @samp{deprecated}\n+function/type/variable attribute.  It does not however affect the\n+@samp{pragma GCC warning} and @samp{pragma GCC error} pragmas.\n+\n @item -fdiagnostics-show-location=once\n @opindex fdiagnostics-show-location\n Only meaningful in line-wrapping mode.  Instructs the diagnostic messages"}, {"sha": "fc0659608daf4f876c3f81a6bc99dcc28eb3bae7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=490cced415071d4c2ea5ef9833c4ab61367471eb", "patch": "@@ -1,3 +1,8 @@\n+2018-06-15  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 84195\n+\t* gcc.c-torture/compile/pr84195.c: New test.\n+\n 2018-06-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/86159"}, {"sha": "4f1e70bbd7648531a65c72c43cc7ebeb01287b92", "filename": "gcc/testsuite/gcc.c-torture/compile/pr84195.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84195.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490cced415071d4c2ea5ef9833c4ab61367471eb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84195.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr84195.c?ref=490cced415071d4c2ea5ef9833c4ab61367471eb", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* Check that MSG is printed without the escape characters being interpreted.\n+   Especially the newlines.\n+\n+   Note - gcc's behaviour is inconsistent in this regard as #error and\n+   #warning will also display control characters as escape sequences,\n+   whereas #pragma GCC error and #pragma GCC warning will perform the\n+   control operations of the control characters.  */\n+   \n+#define MSG \"foo\\n\\t\\rbar\"\n+\n+int f (int i __attribute__ ((deprecated (MSG))))\n+{\n+  return 0 ? i : 0; /* { dg-warning \"'i' is deprecated: foo.n.t.rbar\" } */\n+}\n+"}]}