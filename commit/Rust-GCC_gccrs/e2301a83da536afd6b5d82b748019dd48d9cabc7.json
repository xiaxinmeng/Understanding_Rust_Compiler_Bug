{"sha": "e2301a83da536afd6b5d82b748019dd48d9cabc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzMDFhODNkYTUzNmFmZDZiNWQ4MmI3NDgwMTlkZDQ4ZDljYWJjNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-01T18:08:36Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-01T18:08:36Z"}, "message": "(layout_record): Take account of\nmaximum_field_alignment when using the field's alignment.\n\nFrom-SVN: r1739", "tree": {"sha": "40e73f0a23fc59f5585a281fd729089ba68d8b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e73f0a23fc59f5585a281fd729089ba68d8b9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2301a83da536afd6b5d82b748019dd48d9cabc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2301a83da536afd6b5d82b748019dd48d9cabc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2301a83da536afd6b5d82b748019dd48d9cabc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2301a83da536afd6b5d82b748019dd48d9cabc7/comments", "author": null, "committer": null, "parents": [{"sha": "88dd95c1c02029e682ed32d94452a21eac8c559a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88dd95c1c02029e682ed32d94452a21eac8c559a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88dd95c1c02029e682ed32d94452a21eac8c559a"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "b2e330324ea861713f7d9b3e51c1f348f2145630", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2301a83da536afd6b5d82b748019dd48d9cabc7/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2301a83da536afd6b5d82b748019dd48d9cabc7/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=e2301a83da536afd6b5d82b748019dd48d9cabc7", "patch": "@@ -327,7 +327,13 @@ layout_record (rec)\n \t  /* A named bit field of declared type `int'\n \t     forces the entire structure to have `int' alignment.  */\n \t  if (DECL_NAME (field) != 0)\n-\t    record_align = MAX (record_align, TYPE_ALIGN (TREE_TYPE (field)));\n+\t    {\n+\t      int type_align = TYPE_ALIGN (TREE_TYPE (field));\n+\t      if (maximum_field_alignment != 0)\n+\t\ttype_align = MIN (type_align, maximum_field_alignment);\n+\n+\t      record_align = MAX (record_align, type_align);\n+\t    }\n \t}\n       else\n \trecord_align = MAX (record_align, desired_align);\n@@ -371,8 +377,15 @@ layout_record (rec)\n \t  register tree dsize = DECL_SIZE (field);\n \t  int field_size = TREE_INT_CST_LOW (dsize);\n \n+\t  if (maximum_field_alignment != 0)\n+\t    type_align = MIN (type_align, maximum_field_alignment);\n+\n \t  /* A bit field may not span the unit of alignment of its type.\n \t     Advance to next boundary if necessary.  */\n+\t  /* ??? There is some uncertainty here as to what\n+\t     should be done if type_align is less than the width of the type.\n+\t     That can happen because the width exceeds BIGGEST_ALIGNMENT\n+\t     or because it exceeds maximum_field_alignment.  */\n \t  if (const_size / type_align\n \t      != (const_size + field_size - 1) / type_align)\n \t    const_size = CEIL (const_size, type_align) * type_align;\n@@ -393,6 +406,9 @@ layout_record (rec)\n \t  register tree dsize = DECL_SIZE (field);\n \t  int field_size = TREE_INT_CST_LOW (dsize);\n \n+\t  if (maximum_field_alignment != 0)\n+\t    type_align = MIN (type_align, maximum_field_alignment);\n+\n \t  /* A bit field may not span the unit of alignment of its type.\n \t     Advance to next boundary if necessary.  */\n \t  if (const_size / type_align"}]}