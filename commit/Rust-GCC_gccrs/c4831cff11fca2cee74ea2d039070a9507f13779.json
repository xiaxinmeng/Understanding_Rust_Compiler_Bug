{"sha": "c4831cff11fca2cee74ea2d039070a9507f13779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ4MzFjZmYxMWZjYTJjZWU3NGVhMmQwMzkwNzBhOTUwN2YxMzc3OQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-08-22T20:26:26Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-08-22T20:26:26Z"}, "message": "m32c.h (CLASS_MAX_NREGS): Remove macro.\n\n\t* config/m32c/m32c.h (CLASS_MAX_NREGS): Remove macro.\n\t* config/m32c/m32c-protos.h (m32c_class_max_nregs): Remove.\n\t* config/m32c/m32c.c (m32c_class_max_nregs): Make static. Change\n\tregclass argument type to reg_class_t. Change 'max' and 'v' vars\n\tand return types to unsigned char. Use reg_class_contents instead\n\tof class_contents.\n\t(TARGET_CLASS_MAX_NREGS): Define.\n\nFrom-SVN: r177971", "tree": {"sha": "aae9fef3887d712b43ee7f9d6e459b6f750cd145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae9fef3887d712b43ee7f9d6e459b6f750cd145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4831cff11fca2cee74ea2d039070a9507f13779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4831cff11fca2cee74ea2d039070a9507f13779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4831cff11fca2cee74ea2d039070a9507f13779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4831cff11fca2cee74ea2d039070a9507f13779/comments", "author": null, "committer": null, "parents": [{"sha": "8b46e440e312cf2f6c01422ec7c6446b21ada9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b46e440e312cf2f6c01422ec7c6446b21ada9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b46e440e312cf2f6c01422ec7c6446b21ada9e8"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "c8f66e0a24b51901401bf62e3cb45a234a7d8504", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4831cff11fca2cee74ea2d039070a9507f13779", "patch": "@@ -1,3 +1,13 @@\n+2011-08-22  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/m32c/m32c.h (CLASS_MAX_NREGS): Remove macro.\n+\t* config/m32c/m32c-protos.h (m32c_class_max_nregs): Remove.\n+\t* config/m32c/m32c.c (m32c_class_max_nregs): Make static. Change\n+\tregclass argument type to reg_class_t. Change 'max' and 'v' vars\n+\tand return types to unsigned char. Use reg_class_contents instead\n+\tof class_contents.\n+\t(TARGET_CLASS_MAX_NREGS): Define.\n+\n 2011-08-22  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* config/c6x/c6x.md (indirect_jump_shadow): Tweak representation"}, {"sha": "9c247dcfd5bfd6f0022bd62f6f3675c050a2043c", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=c4831cff11fca2cee74ea2d039070a9507f13779", "patch": "@@ -44,7 +44,6 @@ int  m32c_trampoline_size (void);\n #ifdef RTX_CODE\n \n int  m32c_cannot_change_mode_class (enum machine_mode, enum machine_mode, int);\n-int  m32c_class_max_nregs (int, enum machine_mode);\n rtx  m32c_eh_return_stackadj_rtx (void);\n void m32c_emit_eh_epilogue (rtx);\n int  m32c_expand_cmpstr (rtx *);"}, {"sha": "7040df69fcfc9b5b226e4f9a18c89f540654a5d6", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=c4831cff11fca2cee74ea2d039070a9507f13779", "patch": "@@ -859,18 +859,23 @@ m32c_class_likely_spilled_p (reg_class_t regclass)\n   return (reg_class_size[(int) regclass] == 1);\n }\n \n-/* Implements CLASS_MAX_NREGS.  We calculate this according to its\n+/* Implements TARGET_CLASS_MAX_NREGS.  We calculate this according to its\n    documented meaning, to avoid potential inconsistencies with actual\n    class definitions.  */\n-int\n-m32c_class_max_nregs (int regclass, enum machine_mode mode)\n+\n+#undef TARGET_CLASS_MAX_NREGS\n+#define TARGET_CLASS_MAX_NREGS m32c_class_max_nregs\n+\n+static unsigned char\n+m32c_class_max_nregs (reg_class_t regclass, enum machine_mode mode)\n {\n-  int rn, max = 0;\n+  int rn;\n+  unsigned char max = 0;\n \n   for (rn = 0; rn < FIRST_PSEUDO_REGISTER; rn++)\n-    if (class_contents[regclass][0] & (1 << rn))\n+    if (TEST_HARD_REG_BIT (reg_class_contents[(int) regclass], rn))\n       {\n-\tint n = m32c_hard_regno_nregs (rn, mode);\n+\tunsigned char n = m32c_hard_regno_nregs (rn, mode);\n \tif (max < n)\n \t  max = n;\n       }"}, {"sha": "00f8a2c52a1c29e8a4c22d939aee7f83d7cafa5e", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4831cff11fca2cee74ea2d039070a9507f13779/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=c4831cff11fca2cee74ea2d039070a9507f13779", "patch": "@@ -425,8 +425,6 @@ enum reg_class\n \n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n \n-#define CLASS_MAX_NREGS(C,M) m32c_class_max_nregs (C, M)\n-\n #define CANNOT_CHANGE_MODE_CLASS(F,T,C) m32c_cannot_change_mode_class(F,T,C)\n \n #define CONST_OK_FOR_CONSTRAINT_P(VALUE,C,STR) \\"}]}