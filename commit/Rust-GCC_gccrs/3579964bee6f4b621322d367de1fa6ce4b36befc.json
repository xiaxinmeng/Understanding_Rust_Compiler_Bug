{"sha": "3579964bee6f4b621322d367de1fa6ce4b36befc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3OTk2NGJlZTZmNGI2MjEzMjJkMzY3ZGUxZmE2Y2U0YjM2YmVmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-22T20:40:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-22T20:40:54Z"}, "message": "pt.c (fn_type_unification): Push tinst level around type_unification_real if we aren't explaining.\n\ngcc/cp/\n\t* pt.c (fn_type_unification): Push tinst level around\n\ttype_unification_real if we aren't explaining.\n\t* cp-tree.h (TFF_NO_TEMPLATE_BINDINGS): New.\n\t* error.c (dump_function_decl): Respect it.\n\t(subst_to_string): Pass it.\nlibstdc++-v3/\n\t* testsuite/lib/prune.exp (libstdc++-dg-prune): Also ignore \"In\n\tsubstitution\" lines.\n\nFrom-SVN: r198161", "tree": {"sha": "2557ab41483c15f17bc88b693aca993a7c24de7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2557ab41483c15f17bc88b693aca993a7c24de7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3579964bee6f4b621322d367de1fa6ce4b36befc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3579964bee6f4b621322d367de1fa6ce4b36befc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3579964bee6f4b621322d367de1fa6ce4b36befc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3579964bee6f4b621322d367de1fa6ce4b36befc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80f7a782fd5a8030805a56db68c85db3bd139e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f7a782fd5a8030805a56db68c85db3bd139e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f7a782fd5a8030805a56db68c85db3bd139e23"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "8b0225b35e93a8728f96bc5e1f79b31ecbfbe3ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -1,5 +1,11 @@\n 2013-04-22  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (fn_type_unification): Push tinst level around\n+\ttype_unification_real if we aren't explaining.\n+\t* cp-tree.h (TFF_NO_TEMPLATE_BINDINGS): New.\n+\t* error.c (dump_function_decl): Respect it.\n+\t(subst_to_string): Pass it.\n+\n \tPR c++/48665\n \t* rtti.c (get_typeid): Diagnose qualified function type.\n \t* pt.c (tsubst) [POINTER_TYPE]: Likewise."}, {"sha": "d96340a13756a133792f3777dcd8c23a26fcf95c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -4636,7 +4636,9 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n    TFF_UNQUALIFIED_NAME: do not print the qualifying scope of the\n        top-level entity.\n    TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS: do not omit template arguments\n-       identical to their defaults.  */\n+       identical to their defaults.\n+   TFF_NO_TEMPLATE_BINDINGS: do not print information about the template\n+       arguments for a function template specialization.  */\n \n #define TFF_PLAIN_IDENTIFIER\t\t\t(0)\n #define TFF_SCOPE\t\t\t\t(1)\n@@ -4652,6 +4654,7 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n #define TFF_NO_FUNCTION_ARGUMENTS\t\t(1 << 10)\n #define TFF_UNQUALIFIED_NAME\t\t\t(1 << 11)\n #define TFF_NO_OMIT_DEFAULT_TEMPLATE_ARGUMENTS\t(1 << 12)\n+#define TFF_NO_TEMPLATE_BINDINGS\t\t(1 << 13)\n \n /* Returns the TEMPLATE_DECL associated to a TEMPLATE_TEMPLATE_PARM\n    node.  */"}, {"sha": "7a8c0bca3c144126057d73b31ec01629b5579a4c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -1451,7 +1451,8 @@ dump_function_decl (tree t, int flags)\n \tdump_type_suffix (TREE_TYPE (fntype), flags);\n \n       /* If T is a template instantiation, dump the parameter binding.  */\n-      if (template_parms != NULL_TREE && template_args != NULL_TREE)\n+      if (template_parms != NULL_TREE && template_args != NULL_TREE\n+\t  && !(flags & TFF_NO_TEMPLATE_BINDINGS))\n \t{\n \t  pp_cxx_whitespace (cxx_pp);\n \t  pp_cxx_left_bracket (cxx_pp);\n@@ -2889,7 +2890,8 @@ subst_to_string (tree p)\n   tree decl = TREE_PURPOSE (p);\n   tree targs = TREE_VALUE (p);\n   tree tparms = DECL_TEMPLATE_PARMS (decl);\n-  int flags = TFF_DECL_SPECIFIERS|TFF_TEMPLATE_HEADER;\n+  int flags = (TFF_DECL_SPECIFIERS|TFF_TEMPLATE_HEADER\n+\t       |TFF_NO_TEMPLATE_BINDINGS);\n \n   if (p == NULL_TREE)\n     return \"\";"}, {"sha": "855c1f7abe4144482c979809be22d9f599f978aa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -15125,9 +15125,21 @@ fn_type_unification (tree fn,\n      callers must be ready to deal with unification failures in any\n      event.  */\n \n+  TREE_VALUE (tinst) = targs;\n+  /* If we aren't explaining yet, push tinst context so we can see where\n+     any errors (e.g. from class instantiations triggered by instantiation\n+     of default template arguments) come from.  If we are explaining, this\n+     context is redundant.  */\n+  if (!explain_p && !push_tinst_level (tinst))\n+    {\n+      excessive_deduction_depth = true;\n+      goto fail;\n+    }\n   ok = !type_unification_real (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n \t\t\t       targs, parms, args, nargs, /*subr=*/0,\n \t\t\t       strict, flags, explain_p);\n+  if (!explain_p)\n+    pop_tinst_level ();\n   if (!ok)\n     goto fail;\n "}, {"sha": "0821fc094932860f4e33b8bdeba25234769322f1", "filename": "gcc/testsuite/g++.dg/cpp0x/fntmpdefarg5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffntmpdefarg5.C?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -0,0 +1,17 @@\n+// Only print template subst context when it isn't redundant.\n+// { dg-require-effective-target c++11 }\n+// { dg-prune-output \"error\" }\n+\n+template<class T> struct A { typedef typename T::type type; };\n+\n+template <class T, class U = typename A<T>::type>\n+void f(T);\n+\n+template <class T, class U = typename T::type>\n+void g(T);\n+\n+int main()\n+{\n+  f(1);\t\t\t\t// { dg-message \"required from here\" }\n+  g(1);\t\t\t\t// { dg-bogus \"required from here\" }\n+}"}, {"sha": "ec91a2412a6760b3ef1629569fdf62d43c985519", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -1,5 +1,8 @@\n 2013-04-22  Jason Merrill  <jason@redhat.com>\n \n+\t* testsuite/lib/prune.exp (libstdc++-dg-prune): Also ignore \"In\n+\tsubstitution\" lines.\n+\n \t* testsuite/20_util/is_assignable/value.cc: Comment out tests involving\n \tfunction-cv-quals.\n \t* testsuite/20_util/is_constructible/value-2.cc: Likewise."}, {"sha": "6ed3efbf474aa3754eaa5e23f3a65dac4728656b", "filename": "libstdc++-v3/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3579964bee6f4b621322d367de1fa6ce4b36befc/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3579964bee6f4b621322d367de1fa6ce4b36befc/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp?ref=3579964bee6f4b621322d367de1fa6ce4b36befc", "patch": "@@ -42,7 +42,7 @@ proc libstdc++-dg-prune { system text } {\n \n     # Remove parts of warnings that refer to location of previous\n     # definitions, etc as these confuse dejagnu\n-    regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|substitution|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?required \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text"}]}