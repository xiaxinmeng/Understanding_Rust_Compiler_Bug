{"sha": "65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmMzJlNWQ2YmJlYjkzYTdkOGQxMjFmZDU2YWY2NTU1ZTE2ZDc0Nw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-20T00:16:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-20T00:16:40Z"}, "message": "Daily bump.", "tree": {"sha": "0e24b6e0c9d3793ee71514deb0c8cc14eae4ed12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e24b6e0c9d3793ee71514deb0c8cc14eae4ed12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/comments", "author": null, "committer": null, "parents": [{"sha": "eb2a917fa0779b689f09ac8d8c41b0456facbe62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2a917fa0779b689f09ac8d8c41b0456facbe62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2a917fa0779b689f09ac8d8c41b0456facbe62"}], "stats": {"total": 382, "additions": 381, "deletions": 1}, "files": [{"sha": "88ce3e9ae7e6d997b9299cc8e0e779ccc6f189d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,182 @@\n+2021-05-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (fur_source::get_operand): New.\n+\t(gimple_range_fold): Delete.\n+\t(fold_using_range::fold_stmt): Move from gimple_ranger::calc_stmt.\n+\t(fold_using_range::range_of_range_op): Move from gimple_ranger.\n+\t(fold_using_range::range_of_address): Ditto.\n+\t(fold_using_range::range_of_phi): Ditto.\n+\t(fold_using_range::range_of_call): Ditto.\n+\t(fold_using_range::range_of_builtin_ubsan_call): Move from\n+\trange_of_builtin_ubsan_call.\n+\t(fold_using_range::range_of_builtin_call): Move from\n+\trange_of_builtin_call.\n+\t(gimple_ranger::range_of_builtin_call): Delete.\n+\t(fold_using_range::range_of_cond_expr): Move from gimple_ranger.\n+\t(gimple_ranger::fold_range_internal): New.\n+\t(gimple_ranger::range_of_stmt): Use new fold_using_range API.\n+\t(fold_using_range::range_of_ssa_name_with_loop_info): Move from\n+\tgimple_ranger.  Improve ranges of SSA_NAMES when possible.\n+\t* gimple-range.h (gimple_ranger): Remove various range_of routines.\n+\t(class fur_source): New.\n+\t(class fold_using_range): New.\n+\t(fur_source::fur_source): New.\n+\t(fold_range): New.\n+\t* vr-values.c (vr_values::extract_range_basic): Use fold_using_range\n+\tinstead of range_of_builtin_call.\n+\n+2021-05-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/cpp.texi (Common Predefined Macros): Update documentation\n+\tfor the __GXX_EXPERIMENTAL_CXX0X__ macro.\n+\n+2021-05-19  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/100333\n+\t* config/arm/arm.md (nonsecure_call_internal): Always ensure\n+\tcallee's address is in a register.\n+\n+2021-05-19  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* common/config/riscv/riscv-common.c\n+\t(riscv_subset_list::parsing_subset_version): Properly parse the letter\n+\t'p' in '-march'.\n+\t(riscv_subset_list::parse_std_ext,\n+\t riscv_subset_list::parse_multiletter_ext): To handle errors generated\n+\tin riscv_subset_list::parsing_subset_version.\n+\n+2021-05-19  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md: Use \"neon_move_narrow_q\"\n+\ttype attribute in patterns generating XTN(2).\n+\n+2021-05-19  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_pack_trunc_<mode>):\n+\tRemove as duplicate of...\n+\t(aarch64_xtn<mode>): This.\n+\t(aarch64_xtn2<mode>_le): Move position in file.\n+\t(aarch64_xtn2<mode>_be): Move position in file.\n+\t(aarch64_xtn2<mode>): Move position in file.\n+\t(vec_pack_trunc_<mode>): Define as an expander.\n+\n+2021-05-19  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Split builtin\n+\tgeneration for aarch64_<sur>q<r>shr<u>n_n<mode> pattern into\n+\tseparate scalar and vector generators.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_<sur>q<r>shr<u>n_n<mode>): Define as an expander and\n+\tsplit into...\n+\t(aarch64_<sur>q<r>shr<u>n_n<mode>_insn_le): This and...\n+\t(aarch64_<sur>q<r>shr<u>n_n<mode>_insn_be): This.\n+\t* config/aarch64/iterators.md: Define SD_HSDI iterator.\n+\n+2021-05-19  Jonathn Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md: Use UNSPEC_SQXTUN instead\n+\tof UNSPEC_SQXTUN2.\n+\t* config/aarch64/iterators.md: Remove UNSPEC_SQXTUN2.\n+\n+2021-05-19  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>q<r>shr<u>n2_n<mode>):\n+\tImplement as an expand emitting a big/little endian\n+\tinstruction pattern.\n+\t(aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_le): Define.\n+\t(aarch64_<sur>q<r>shr<u>n2_n<mode>_insn_be): Define.\n+\n+2021-05-19  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur><addsub>hn2<mode>):\n+\tImplement as an expand emitting a big/little endian\n+\tinstruction pattern.\n+\t(aarch64_<sur><addsub>hn2<mode>_insn_le): Define.\n+\t(aarch64_<sur><addsub>hn2<mode>_insn_be): Define.\n+\t* config/aarch64/iterators.md: Remove UNSPEC_[R]ADDHN2 and\n+\tUNSPEC_[R]SUBHN2 unspecs and ADDSUBHN2 iterator.\n+\n+2021-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100672\n+\t* fold-const.c (fold_negate_expr_1): Use element_precision.\n+\t(negate_expr_p): Likewise.\n+\n+2021-05-19  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_PRED_LOAD): New iterator.\n+\t(pred_load): New int attribute.\n+\t* config/aarch64/aarch64-sve.md\n+\t(aarch64_load_<ANY_EXTEND:optab><SVE_HSDI:mode><SVE_PARTIAL_I:mode>): Use\n+\tSVE_PRED_LOAD enum iterator and corresponding pred_load attribute.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (expand): Update call to\n+\tcode_for_aarch64_load.\n+\n+2021-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgexpand.c (discover_nonconstant_array_refs_r): Make\n+\tsure TARGET_MEM_REF bases are expanded as memory.\n+\t* tree-ssa-operands.c (operands_scanner::get_tmr_operands):\n+\tDo not mark TARGET_MEM_REF bases addressable.\n+\t* tree-ssa.c (non_rewritable_mem_ref_base): Handle\n+\tTARGET_MEM_REF bases as never rewritable.\n+\t* gimple-walk.c (walk_stmt_load_store_addr_ops): Do not\n+\twalk TARGET_MEM_REF bases as address-takens.\n+\t* tree-ssa-dce.c (ref_may_be_aliased): Handle TARGET_MEM_REF.\n+\n+2021-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* builtins.c (get_object_alignment_1): Strip outer\n+\tWITH_SIZE_EXPR.\n+\t* tree-dfa.c (get_ref_base_and_extent): Handle outer\n+\tWITH_SIZE_EXPR for size processing and process the\n+\tcontaining ref.\n+\t* tree-ssa-alias.c (ao_ref_base_alias_set): Strip\n+\touter WITH_SIZE_EXPR.\n+\t(ao_ref_base_alias_ptr_type): Likewise.\n+\t(refs_may_alias_p_2): Allow WITH_SIZE_EXPR in ref->ref\n+\tand handle that accordingly, stripping it for the\n+\tcore alias workers.\n+\t* tree.c (get_base_address): Handle WITH_SIZE_EXPR by\n+\tlooking through it instead of returning NULL.\n+\n+2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/100576\n+\t* builtins.c (check_read_access): Convert bound to size_type_node if\n+\tnon-NULL.\n+\n+2021-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_types_in_gimple_min_lval): Inline...\n+\t(verify_types_in_gimple_reference): ... here.  Sanitize.\n+\t(verify_gimple_call): Verify references in LHS and arguments.\n+\t(verify_gimple_assign_single): Reject WITH_SIZE_EXPR.\n+\n+2021-05-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (VALID_INT_MODE_P):\n+\tAdd V8QI, V4HI and V2SI modes for TARGET_64BIT.\n+\t* config/i386/i386.md (isa): Add x64_bmi.\n+\t(enabled): Handle x64_bmi.\n+\t* config/i386/mmx.md (mmx_andnot<MMXMODEI:mode>3):\n+\tAdd alternative using 64bit general registers.\n+\t(*mmx_<any_logic:code><MMXMODEI:mode>3): Ditto.\n+\n+2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* tree.h (OMP_MASTER_COMBINED): Define.\n+\t* gimplify.c (gimplify_scan_omp_clauses): Rewrite lastprivate\n+\thandling for outer combined/composite constructs to a loop.\n+\tHandle lastprivate on combined target.\n+\t(gimplify_expr): Formatting fix.\n+\n+2021-05-19  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* passes.def: Add sink_code pass before store_merging.\n+\t* tree-ssa-sink.c (pass_sink_code:clone): New.\n+\n 2021-05-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/freebsd64.h (ADJUST_FIELD_ALIGN): Remove call to"}, {"sha": "e63f6d4142a927799f8be8034647d5bbca57a683", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1 +1 @@\n-20210519\n+20210520"}, {"sha": "6fd6790098b6e639166e40eb4cdbc838f3e029fa", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,9 @@\n+2021-05-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/100619\n+\t* c-attribs.c (build_attr_access_from_parms): Handle arbitrarily many\n+\tbounds.\n+\n 2021-05-18  Richard Biener  <rguenther@suse.de>\n \n \tPR c/100547"}, {"sha": "305d8166d6a280ab11cf94a9a21b62cc4605eeae", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,11 @@\n+2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-parser.c (c_parser_omp_master): Set OMP_MASTER_COMBINED on\n+\tmaster when combined with taskloop.\n+\t(c_parser_omp_parallel): Don't set OMP_PARALLEL_COMBINED on\n+\tparallel master when not combined with taskloop.\n+\n 2021-05-18  Richard Biener  <rguenther@suse.de>\n \n \tPR c/100522"}, {"sha": "3f7cf15d5b71b9481f3c76f0e7457e68c4785f33", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,50 @@\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100367\n+\tPR c++/96299\n+\t* method.c (genericize_spaceship): Use fold_build2 for scalar\n+\toperands.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (build_deduction_guide): Treat the implicit deduction guide\n+\tas a member of the class.\n+\n+2021-05-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100596\n+\t* cp-tree.h (any_non_type_attribute_p): Remove.\n+\t* decl.c (grokdeclarator): Turn an error into a warning and only\n+\twarn for standard attributes.\n+\t* decl2.c (any_non_type_attribute_p): Remove.\n+\t* parser.c (cp_parser_elaborated_type_specifier): Turn an error\n+\tinto a warning and only warn for standard attributes.\n+\t(cp_parser_member_declaration): Likewise.\n+\n+2021-05-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/100658\n+\t* mangle.c (write_encoding): Fix typos.\n+\n+2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* parser.c (cp_parser_omp_master): Set OMP_MASTER_COMBINED on\n+\tmaster when combined with taskloop.\n+\t(cp_parser_omp_parallel): Don't set OMP_PARALLEL_COMBINED on\n+\tparallel master when not combined with taskloop.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100261\n+\t* rtti.c (get_tinfo_decl_direct): Check TYPE_TRANSPARENT_AGGR.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100372\n+\t* tree.c (strip_typedefs): Only look at the pattern of a\n+\tTYPE_PACK_EXPANSION if it's a type.\n+\n 2021-05-18  Marek Polacek  <polacek@redhat.com>\n \n \t* class.c (classtype_has_non_deleted_copy_ctor): Remove."}, {"sha": "819aa97450cf59b65e364a2d45b3ffd266ef908b", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,8 @@\n+2021-05-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/100658\n+\t* libgccjit.c (gcc_jit_context_new_function): Fix typos.\n+\n 2021-03-24  Matthias Klose  <doko@ubuntu.com>\n \n \t* Make-lang.in (jit.sphinx.html, jit.sphinx.pdf): Use $(mkinstalldirs),"}, {"sha": "740f985b8d9f6967951dcf3ce681875d7734959f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,129 @@\n+2021-05-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/100619\n+\t* gcc.dg/pr100619.c: New test.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100367\n+\tPR c++/96299\n+\t* g++.dg/cpp2a/spaceship-fallback1.C: New test.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp1z/class-deduction-access1.C: New test.\n+\t* g++.dg/cpp1z/class-deduction-access2.C: New test.\n+\n+2021-05-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/100596\n+\t* g++.dg/cpp0x/friend7.C: Turn a few dg-warnings into dg-errors.\n+\tRemove dg-errors for GNU attributes.\n+\t* g++.dg/ext/attrib63.C: Remove dg-error.\n+\t* g++.dg/cpp0x/friend8.C: New test.\n+\n+2021-05-19  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* g++.dg/modules/omp-1_a.C: Check pthread is available.\n+\t* g++.dg/modules/omp-1_b.C: Ditto.\n+\t* g++.dg/modules/omp-1_c.C: Ditto.\n+\t* g++.dg/modules/omp-2_a.C: Ditto.\n+\t* g++.dg/modules/omp-2_b.C: Ditto.\n+\n+2021-05-19  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/100333\n+\t* gcc.target/arm/cmse/pr100333.c: New test.\n+\n+2021-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/99977\n+\t* gcc.target/arm/pr99977.c: Require arm_arch_v8m_base.\n+\n+2021-05-19  Geng Qi  <gengqi@linux.alibaba.com>\n+\n+\t* gcc.target/riscv/arch-12.c: New.\n+\t* gcc.target/riscv/attribute-19.c: New.\n+\n+2021-05-19  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high_combine.c: New test.\n+\n+2021-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100672\n+\t* gcc.dg/torture/pr100672.c: New testcase.\n+\n+2021-05-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/100658\n+\t* gcc.dg/local1.c: Fix typos.\n+\t* gcc.dg/ucnid-5-utf8.c: Likewise.\n+\t* gcc.dg/ucnid-5.c: Likewise.\n+\n+2021-05-19  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_2.c: Change\n+\tscan-assembly-times to scan-assembly not for superfluous uxtb.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_and_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_eor_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_unpacked_orr_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/ld1_extend.c: New test.\n+\n+2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/100576\n+\t* gcc.c-torture/compile/pr100576.c: New test.\n+\n+2021-05-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-sink-3.c: Fix test case.\n+\n+2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-c++-common/gomp/pr99928-2.c: Remove all xfails.\n+\t* c-c++-common/gomp/pr99928-12.c: New test.\n+\n+2021-05-19  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-sink-1.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-sink-2.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-3.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-4.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-5.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-6.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-7.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-8.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-9.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-10.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-13.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-14.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-16.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-17.c: Ditto.\n+\t* gcc.dg/tree-ssa/ssa-sink-18.c: New.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100261\n+\t* g++.dg/dfp/mangle-6.C: New test.\n+\n+2021-05-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100372\n+\t* g++.dg/cpp0x/alias-decl-ttp1.C: New test.\n+\n 2021-05-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* gcc.target/powerpc/ppc64-abi-warn-1.c: Remove."}, {"sha": "69cdadeaba5ccc1363b1da4d19c8c711f3a8fa28", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65f32e5d6bbeb93a7d8d121fd56af6555e16d747/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=65f32e5d6bbeb93a7d8d121fd56af6555e16d747", "patch": "@@ -1,3 +1,12 @@\n+2021-05-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/83812\n+\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1.c: New.\n+\n+2021-05-19  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c: New.\n+\n 2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/lib/libgomp.exp"}]}