{"sha": "6969ac301f2229366a812942a906257e5c060762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2OWFjMzAxZjIyMjkzNjZhODEyOTQyYTkwNjI1N2U1YzA2MDc2Mg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-26T13:42:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-27T14:04:57Z"}, "message": "analyzer: fix malloc pointer NULL-ness\n\nFixes to exploded_path::feasible_p exposed a pre-existing bug\nwith pointer NULL-ness for pointers to symbolic_region.\n\nsymbolic_region has an \"m_possibly_null\" flag which if set means\nthat a region_svalue pointing to that region is treated as possibly\nNULL.  Adding a constraint of \"!= NULL\" on an edge records that\nthe pointer is non-NULL, but doesn't affect other pointers (e.g.\nif the first if a void *, but the other pointers are cast to other\npointer types).  This showed up in the tests\ngcc.dg/analyzer/data-model-5b.c and -5c.c, which malloc a buffer\nand test for NULL, but then cast that to a struct * and later test\nthat struct *: a path for the first test being non-NULL and the\nsecond being NULL was erroneously found to be feasible.\n\nThis patch clears the m_possibly_null flag when a \"!= NULL\" constraint\nis added, fixing that erroneous path (but not yet fixing the false\npositive in the above tests, which seems to go on to hit a different\nissue).  It also adds the field to dumps.\n\ngcc/analyzer/ChangeLog:\n\t* program-state.cc (selftest::test_program_state_dumping): Update\n\texpected dump to include symbolic_region's possibly_null field.\n\t* region-model.cc (symbolic_region::print_fields): New vfunc\n\timplementation.\n\t(region_model::add_constraint): Clear m_possibly_null from\n\tsymbolic_regions now known to be non-NULL.\n\t(selftest::test_malloc_constraints): New selftest.\n\t(selftest::analyzer_region_model_cc_tests): Call it.\n\t* region-model.h (region::dyn_cast_symbolic_region): Add non-const\n\toverload.\n\t(symbolic_region::dyn_cast_symbolic_region): Implement it.\n\t(symbolic_region::print_fields): New vfunc override decl.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/data-model-5b.c: Add xfail for new false\n\tpositive leak.\n\t* gcc.dg/analyzer/data-model-5c.c: Likewise.\n\t* gcc.dg/analyzer/malloc-5.c: New test.", "tree": {"sha": "cb6843707780950674bcdfd10f4db886d4e0e70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb6843707780950674bcdfd10f4db886d4e0e70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6969ac301f2229366a812942a906257e5c060762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6969ac301f2229366a812942a906257e5c060762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6969ac301f2229366a812942a906257e5c060762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6969ac301f2229366a812942a906257e5c060762/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c633132521c8c2874cef54852090d587ce66c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c633132521c8c2874cef54852090d587ce66c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c633132521c8c2874cef54852090d587ce66c3"}], "stats": {"total": 120, "additions": 115, "deletions": 5}, "files": [{"sha": "98093cd4f35913122aa95762b2cdacda16efc76c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -1,3 +1,18 @@\n+2020-03-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* program-state.cc (selftest::test_program_state_dumping): Update\n+\texpected dump to include symbolic_region's possibly_null field.\n+\t* region-model.cc (symbolic_region::print_fields): New vfunc\n+\timplementation.\n+\t(region_model::add_constraint): Clear m_possibly_null from\n+\tsymbolic_regions now known to be non-NULL.\n+\t(selftest::test_malloc_constraints): New selftest.\n+\t(selftest::analyzer_region_model_cc_tests): Call it.\n+\t* region-model.h (region::dyn_cast_symbolic_region): Add non-const\n+\toverload.\n+\t(symbolic_region::dyn_cast_symbolic_region): Implement it.\n+\t(symbolic_region::print_fields): New vfunc override decl.\n+\n 2020-03-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (class feasibility_problem): New forward decl."}, {"sha": "a6049604ca847810413ded65fe4bc993cdd903d9", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -1450,7 +1450,7 @@ test_program_state_dumping ()\n      \"rmodel: r0: {kind: `root', parent: null, sval: null}\\n\"\n      \"|-heap: r1: {kind: `heap', parent: r0, sval: sv0}\\n\"\n      \"|  |: sval: sv0: {poisoned: uninit}\\n\"\n-     \"|  `-r2: {kind: `symbolic', parent: r1, sval: null}\\n\"\n+     \"|  `-r2: {kind: `symbolic', parent: r1, sval: null, possibly_null: true}\\n\"\n      \"`-globals: r3: {kind: `globals', parent: r0, sval: null, map: {`p': r4}}\\n\"\n      \"  `-`p': r4: {kind: `primitive', parent: r3, sval: sv1, type: `void *'}\\n\"\n      \"    |: sval: sv1: {type: `void *', &r2}\\n\""}, {"sha": "68152526486ab03a4cf72de13fabba2247ec046b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -3305,6 +3305,17 @@ symbolic_region::walk_for_canonicalization (canonicalization *) const\n   /* Empty.  */\n }\n \n+/* Implementation of region::print_fields vfunc for symbolic_region.  */\n+\n+void\n+symbolic_region::print_fields (const region_model &model,\n+\t\t\t       region_id this_rid,\n+\t\t\t       pretty_printer *pp) const\n+{\n+  region::print_fields (model, this_rid, pp);\n+  pp_printf (pp, \", possibly_null: %s\", m_possibly_null ? \"true\" : \"false\");\n+}\n+\n /* class region_model.  */\n \n /* region_model's default ctor.  */\n@@ -5520,6 +5531,16 @@ region_model::add_constraint (tree lhs, enum tree_code op, tree rhs,\n \n   add_any_constraints_from_ssa_def_stmt (lhs, op, rhs, ctxt);\n \n+  /* If we now know a symbolic_region is non-NULL, clear its\n+     m_possibly_null.  */\n+  if (zerop (rhs) && op == NE_EXPR)\n+    if (region_svalue *ptr = get_svalue (lhs_sid)->dyn_cast_region_svalue ())\n+      {\n+\tregion *pointee = get_region (ptr->get_pointee ());\n+\tif (symbolic_region *sym_reg = pointee->dyn_cast_symbolic_region ())\n+\t  sym_reg->m_possibly_null = false;\n+      }\n+\n   /* Notify the context, if any.  This exists so that the state machines\n      in a program_state can be notified about the condition, and so can\n      set sm-state for e.g. unchecked->checked, both for cfg-edges, and\n@@ -8595,6 +8616,45 @@ test_constraint_merging ()\n \t     tristate (tristate::TS_UNKNOWN));\n }\n \n+/* Verify that if we mark a pointer to a malloc-ed region as non-NULL,\n+   all cast pointers to that region are also known to be non-NULL.  */\n+\n+static void\n+test_malloc_constraints ()\n+{\n+  region_model model;\n+  tree p = build_global_decl (\"p\", ptr_type_node);\n+  tree char_star = build_pointer_type (char_type_node);\n+  tree q = build_global_decl (\"q\", char_star);\n+  tree null_ptr = build_int_cst (ptr_type_node, 0);\n+\n+  region_id rid = model.add_new_malloc_region ();\n+  svalue_id sid = model.get_or_create_ptr_svalue (ptr_type_node, rid);\n+  model.set_value (model.get_lvalue (p, NULL), sid, NULL);\n+  model.set_value (q, p, NULL);\n+\n+  /* We should have a symbolic_region with m_possibly_null: true.  */\n+  region *pointee = model.get_region (rid);\n+  symbolic_region *sym_reg = pointee->dyn_cast_symbolic_region ();\n+  ASSERT_NE (sym_reg, NULL);\n+  ASSERT_TRUE (sym_reg->m_possibly_null);\n+\n+  ASSERT_CONDITION_UNKNOWN (model, p, NE_EXPR, null_ptr);\n+  ASSERT_CONDITION_UNKNOWN (model, p, EQ_EXPR, null_ptr);\n+  ASSERT_CONDITION_UNKNOWN (model, q, NE_EXPR, null_ptr);\n+  ASSERT_CONDITION_UNKNOWN (model, q, EQ_EXPR, null_ptr);\n+\n+  model.add_constraint (p, NE_EXPR, null_ptr, NULL);\n+\n+  /* Adding the constraint should have cleared m_possibly_null.  */\n+  ASSERT_FALSE (sym_reg->m_possibly_null);\n+\n+  ASSERT_CONDITION_TRUE (model, p, NE_EXPR, null_ptr);\n+  ASSERT_CONDITION_FALSE (model, p, EQ_EXPR, null_ptr);\n+  ASSERT_CONDITION_TRUE (model, q, NE_EXPR, null_ptr);\n+  ASSERT_CONDITION_FALSE (model, q, EQ_EXPR, null_ptr);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -8619,6 +8679,7 @@ analyzer_region_model_cc_tests ()\n   test_canonicalization_4 ();\n   test_state_merging ();\n   test_constraint_merging ();\n+  test_malloc_constraints ();\n }\n \n } // namespace selftest"}, {"sha": "235db72141eb81d7e47639146877b229c9be3017", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -845,8 +845,8 @@ class region\n   virtual enum region_kind get_kind () const = 0;\n   virtual map_region *dyn_cast_map_region () { return NULL; }\n   virtual array_region *dyn_cast_array_region () { return NULL; }\n-  virtual const symbolic_region *dyn_cast_symbolic_region () const\n-  { return NULL; }\n+  virtual symbolic_region *dyn_cast_symbolic_region () { return NULL; }\n+  virtual const symbolic_region *dyn_cast_symbolic_region () const { return NULL; }\n \n   region_id get_parent () const { return m_parent_rid; }\n   region *get_parent_region (const region_model &model) const;\n@@ -1625,6 +1625,8 @@ class symbolic_region : public region\n \n   const symbolic_region *dyn_cast_symbolic_region () const FINAL OVERRIDE\n   { return this; }\n+  symbolic_region *dyn_cast_symbolic_region () FINAL OVERRIDE\n+  { return this; }\n \n   bool compare_fields (const symbolic_region &other) const;\n \n@@ -1634,6 +1636,10 @@ class symbolic_region : public region\n \n   void walk_for_canonicalization (canonicalization *c) const FINAL OVERRIDE;\n \n+  void print_fields (const region_model &model,\n+\t\t     region_id this_rid,\n+\t\t     pretty_printer *pp) const FINAL OVERRIDE;\n+\n   bool m_possibly_null;\n };\n "}, {"sha": "2baa6e800cbafe4f146409854bbad3e436e35915", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -1,3 +1,10 @@\n+2020-03-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/data-model-5b.c: Add xfail for new false\n+\tpositive leak.\n+\t* gcc.dg/analyzer/data-model-5c.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-5.c: New test.\n+\n 2020-03-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/dot-output.c: Check that"}, {"sha": "11b56719a66b4cba1a96e34ccde900cdbbe7dc6b", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-5b.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5b.c?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -87,4 +87,8 @@ void test_1 (const char *str)\n   //__analyzer_dump();\n   if (obj)\n     unref (obj);\n-}\n+} /* { dg-bogus \"leak of 'obj'\" \"\" { xfail *-*-* } } */\n+/* TODO(xfail): the false leak report involves the base_obj.ob_refcnt\n+   being 1, but the string_obj.str_base.ob_refcnt being unknown (when\n+   they ought to be the same region), thus allowing for a path in which\n+   the object is allocated but not freed.  */"}, {"sha": "3aba7bdc2aa1642410f9b585aa6304f45df03abf", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-5c.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5c.c?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -75,4 +75,9 @@ void test_1 (const char *str)\n   string_obj *obj = new_string_obj (str);\n   if (obj)\n     unref (obj);\n-}\n+} /* { dg-bogus \"leak of 'obj'\" \"\" { xfail *-*-* } } */\n+/* TODO(xfail): the false leak report involves the base_obj.ob_refcnt\n+   being 1, but the string_obj.str_base.ob_refcnt being unknown (when\n+   they ought to be the same region), thus allowing for a path in which\n+   the object is allocated but not freed.  */\n+"}, {"sha": "b75135f26a3fcbed04271a7f7a0119ccc2fe71a4", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6969ac301f2229366a812942a906257e5c060762/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-5.c?ref=6969ac301f2229366a812942a906257e5c060762", "patch": "@@ -0,0 +1,12 @@\n+#include <stdlib.h>\n+\n+void test (void)\n+{\n+  void *p = malloc (sizeof (int));\n+  if (!p)\n+    return;\n+  int *q = p;\n+  if (!q)\n+    return;\n+  free (q);\n+}"}]}