{"sha": "818e305ea692ebc6578fb40881887d45382f876b", "node_id": "C_kwDOANBUbNoAKDgxOGUzMDVlYTY5MmViYzY1NzhmYjQwODgxODg3ZDQ1MzgyZjg3NmI", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-03-16T10:40:51Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-03-16T10:40:51Z"}, "message": "tree-optimization/104942: Retain sizetype conversions till the end\n\nRetain the sizetype alloc_object_size to guarantee the assertion in\nsize_for_offset and to avoid adding a conversion there.  nop conversions\nare eliminated at the end anyway in dynamic object size computation.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104942\n\t* tree-object-size.cc (alloc_object_size): Remove STRIP_NOPS.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/104942\n\t* gcc.dg/builtin-dynamic-object-size-0.c (alloc_func_long,\n\ttest_builtin_malloc_long): New functions.\n\t(main): Use it.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "6d0218fb04a76aa34bbd0e3d7505b68860eb177c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0218fb04a76aa34bbd0e3d7505b68860eb177c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818e305ea692ebc6578fb40881887d45382f876b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818e305ea692ebc6578fb40881887d45382f876b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818e305ea692ebc6578fb40881887d45382f876b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818e305ea692ebc6578fb40881887d45382f876b/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952155629ca1a4dfe7c7b26e53d118a9b853ed4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952155629ca1a4dfe7c7b26e53d118a9b853ed4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952155629ca1a4dfe7c7b26e53d118a9b853ed4a"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "2fca0a9c5b418b45891d53d24d16f89b48862a9c", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818e305ea692ebc6578fb40881887d45382f876b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818e305ea692ebc6578fb40881887d45382f876b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=818e305ea692ebc6578fb40881887d45382f876b", "patch": "@@ -4,6 +4,15 @@\n typedef __SIZE_TYPE__ size_t;\n #define abort __builtin_abort\n \n+void *\n+__attribute__ ((alloc_size (1)))\n+__attribute__ ((__nothrow__ , __leaf__))\n+__attribute__ ((noinline))\n+alloc_func_long (long sz)\n+{\n+  return __builtin_malloc (sz);\n+}\n+\n void *\n __attribute__ ((alloc_size (1)))\n __attribute__ ((__nothrow__ , __leaf__))\n@@ -145,6 +154,16 @@ test_builtin_malloc_condphi5 (size_t sz, int cond, char *c)\n   return ret;\n }\n \n+long\n+__attribute__ ((noinline))\n+test_builtin_malloc_long (long sz, long off)\n+{\n+  char *a = alloc_func_long (sz);\n+  char *dest = a + off;\n+  long ret = __builtin_dynamic_object_size (dest, 0);\n+  return ret;\n+}\n+\n /* Calloc-like allocator.  */\n \n size_t\n@@ -419,6 +438,9 @@ main (int argc, char **argv)\n     FAIL ();\n   if (test_builtin_malloc_condphi5 (128, 0, argv[0]) != -1)\n     FAIL ();\n+  long x = 42;\n+  if (test_builtin_malloc_long (x, 0) != x)\n+    FAIL ();\n   if (test_calloc (2048, 4) != 2048 * 4)\n     FAIL ();\n   if (test_builtin_calloc (2048, 8) != 2048 * 8)"}, {"sha": "9728f79da75345fc0d83192d18f8143b2940538f", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818e305ea692ebc6578fb40881887d45382f876b/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818e305ea692ebc6578fb40881887d45382f876b/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=818e305ea692ebc6578fb40881887d45382f876b", "patch": "@@ -784,10 +784,7 @@ alloc_object_size (const gcall *call, int object_size_type)\n   else if (arg1 >= 0)\n     bytes = fold_convert (sizetype, gimple_call_arg (call, arg1));\n \n-  if (bytes)\n-    return STRIP_NOPS (bytes);\n-\n-  return size_unknown (object_size_type);\n+  return bytes ? bytes : size_unknown (object_size_type);\n }\n \n "}]}