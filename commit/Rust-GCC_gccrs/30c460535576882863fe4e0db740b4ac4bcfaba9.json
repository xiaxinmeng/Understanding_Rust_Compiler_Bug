{"sha": "30c460535576882863fe4e0db740b4ac4bcfaba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjNDYwNTM1NTc2ODgyODYzZmU0ZTBkYjc0MGI0YWM0YmNmYWJhOQ==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@arm.com", "date": "2018-07-19T20:24:47Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2018-07-19T20:24:47Z"}, "message": "aarch64.md (subv<GPI>4, [...]): New patterns.\n\n2018-07-19  Michael Collison  <michael.collison@arm.com>\n\t    Richard Henderson <rth@redhat.com>\n\n\t* config/aarch64/aarch64.md (subv<GPI>4, usubv<GPI>4): New patterns.\n\t(subti): Handle op1 zero.\n\t(subvti4, usub4ti4): New.\n\t(*sub<GPI>3_compare1_imm): New.\n\t(sub<GPI>3_carryinCV): New.\n\t(*sub<GPI>3_carryinCV_z1_z2, *sub<GPI>3_carryinCV_z1): New.\n\t(*sub<GPI>3_carryinCV_z2, *sub<GPI>3_carryinCV): New.\n\n2018-07-19  Michael Collison  <michael.collison@arm.com>\n\t    Richard Henderson <rth@redhat.com>\n\n\t* config/aarch64/aarch64.md: (addv<GPI>4, uaddv<GPI>4): New.\n\t(addti3): Create simpler code if low part is already known to be 0.\n\t(addvti4, uaddvti4): New.\n\t(*add<GPI>3_compareC_cconly_imm): New.\n\t(*add<GPI>3_compareC_cconly): New.\n\t(*add<GPI>3_compareC_imm): New.\n\t(*add<GPI>3_compareC): Rename from add<GPI>3_compare1; do not\n\thandle constants within this pattern..\n\t(*add<GPI>3_compareV_cconly_imm): New.\n\t(*add<GPI>3_compareV_cconly): New.\n\t(*add<GPI>3_compareV_imm): New.\n\t(add<GPI>3_compareV): New.\n\t(add<GPI>3_carryinC, add<GPI>3_carryinV): New.\n\t(*add<GPI>3_carryinC_zero, *add<GPI>3_carryinV_zero): New.\n\t(*add<GPI>3_carryinC, *add<GPI>3_carryinV): New.\n\t((*add<GPI>3_compareC_cconly_imm): Replace 'ne' operator\n\twith 'comparison' operator.\n\t(*add<GPI>3_compareV_cconly_imm): Ditto.\n\t(*add<GPI>3_compareV_cconly): Ditto.\n\t(*add<GPI>3_compareV_imm): Ditto.\n\t(add<GPI>3_compareV): Ditto.\n\t(add<mode>3_carryinC): Ditto.\n\t(*add<mode>3_carryinC_zero): Ditto.\n\t(*add<mode>3_carryinC): Ditto.\n\t(add<mode>3_carryinV): Ditto.\n\t(*add<mode>3_carryinV_zero): Ditto.\n\t(*add<mode>3_carryinV): Ditto.\n\n2018-07-19  Michael Collison  <michael.collison@arm.com>\n\t    Richard Henderson <rth@redhat.com>\n\n\t* config/aarch64/aarch64-modes.def (CC_V): New.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_addti_scratch_regs): Declare\n\t(aarch64_subvti_scratch_regs): Declare.\n\t(aarch64_expand_subvti): Declare.\n\t(aarch64_gen_unlikely_cbranch): Declare\n\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Test\n\tfor signed overflow using CC_Vmode.\n\t(aarch64_get_condition_code_1): Handle CC_Vmode.\n\t(aarch64_gen_unlikely_cbranch): New function.\n\t(aarch64_addti_scratch_regs): New function.\n\t(aarch64_subvti_scratch_regs): New function.\n\t(aarch64_expand_subvti): New function.\n\n2018-07-19  Michael Collison  <michael.collison@arm.com>\n\t    Richard Henderson <rth@redhat.com>\n\n\t* gcc.target/aarch64/builtin_sadd_128.c: New testcase.\n\t* gcc.target/aarch64/builtin_saddl.c: New testcase.\n\t* gcc.target/aarch64/builtin_saddll.c: New testcase.\n\t* gcc.target/aarch64/builtin_uadd_128.c: New testcase.\n\t* gcc.target/aarch64/builtin_uaddl.c: New testcase.\n\t* gcc.target/aarch64/builtin_uaddll.c: New testcase.\n\t* gcc.target/aarch64/builtin_ssub_128.c: New testcase.\n\t* gcc.target/aarch64/builtin_ssubl.c: New testcase.\n\t* gcc.target/aarch64/builtin_ssubll.c: New testcase.\n\t* gcc.target/aarch64/builtin_usub_128.c: New testcase.\n\t* gcc.target/aarch64/builtin_usubl.c: New testcase.\n\t* gcc.target/aarch64/builtin_usubll.c: New testcase.\n\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r262890", "tree": {"sha": "e3f57437a11137166c2b81807d77c72acaaa42d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f57437a11137166c2b81807d77c72acaaa42d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c460535576882863fe4e0db740b4ac4bcfaba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c460535576882863fe4e0db740b4ac4bcfaba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c460535576882863fe4e0db740b4ac4bcfaba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c460535576882863fe4e0db740b4ac4bcfaba9/comments", "author": null, "committer": null, "parents": [{"sha": "c01f9216b73597b7dc03d9387ac7e21a5089f801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01f9216b73597b7dc03d9387ac7e21a5089f801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01f9216b73597b7dc03d9387ac7e21a5089f801"}], "stats": {"total": 943, "additions": 922, "deletions": 21}, "files": [{"sha": "bb4ed8e3e919e8af07504aa5c4379c3dd5b0a220", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -1,3 +1,62 @@\n+2018-07-19  Michael Collison  <michael.collison@arm.com>\n+\t    Richard Henderson <rth@redhat.com>\n+\n+\t* config/aarch64/aarch64.md (subv<GPI>4, usubv<GPI>4): New patterns.\n+\t(subti): Handle op1 zero.\n+\t(subvti4, usub4ti4): New.\n+\t(*sub<GPI>3_compare1_imm): New.\n+\t(sub<GPI>3_carryinCV): New.\n+\t(*sub<GPI>3_carryinCV_z1_z2, *sub<GPI>3_carryinCV_z1): New.\n+\t(*sub<GPI>3_carryinCV_z2, *sub<GPI>3_carryinCV): New.\n+\n+2018-07-19  Michael Collison  <michael.collison@arm.com>\n+\t    Richard Henderson <rth@redhat.com>\n+\n+\t* config/aarch64/aarch64.md: (addv<GPI>4, uaddv<GPI>4): New.\n+\t(addti3): Create simpler code if low part is already known to be 0.\n+\t(addvti4, uaddvti4): New.\n+\t(*add<GPI>3_compareC_cconly_imm): New.\n+\t(*add<GPI>3_compareC_cconly): New.\n+\t(*add<GPI>3_compareC_imm): New.\n+\t(*add<GPI>3_compareC): Rename from add<GPI>3_compare1; do not\n+\thandle constants within this pattern..\n+\t(*add<GPI>3_compareV_cconly_imm): New.\n+\t(*add<GPI>3_compareV_cconly): New.\n+\t(*add<GPI>3_compareV_imm): New.\n+\t(add<GPI>3_compareV): New.\n+\t(add<GPI>3_carryinC, add<GPI>3_carryinV): New.\n+\t(*add<GPI>3_carryinC_zero, *add<GPI>3_carryinV_zero): New.\n+\t(*add<GPI>3_carryinC, *add<GPI>3_carryinV): New.\n+\t((*add<GPI>3_compareC_cconly_imm): Replace 'ne' operator\n+\twith 'comparison' operator.\n+\t(*add<GPI>3_compareV_cconly_imm): Ditto.\n+\t(*add<GPI>3_compareV_cconly): Ditto.\n+\t(*add<GPI>3_compareV_imm): Ditto.\n+\t(add<GPI>3_compareV): Ditto.\n+\t(add<mode>3_carryinC): Ditto.\n+\t(*add<mode>3_carryinC_zero): Ditto.\n+\t(*add<mode>3_carryinC): Ditto.\n+\t(add<mode>3_carryinV): Ditto.\n+\t(*add<mode>3_carryinV_zero): Ditto.\n+\t(*add<mode>3_carryinV): Ditto.\n+\n+2018-07-19  Michael Collison  <michael.collison@arm.com>\n+\t    Richard Henderson <rth@redhat.com>\n+\n+\t* config/aarch64/aarch64-modes.def (CC_V): New.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_addti_scratch_regs): Declare\n+\t(aarch64_subvti_scratch_regs): Declare.\n+\t(aarch64_expand_subvti): Declare.\n+\t(aarch64_gen_unlikely_cbranch): Declare\n+\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Test\n+\tfor signed overflow using CC_Vmode.\n+\t(aarch64_get_condition_code_1): Handle CC_Vmode.\n+\t(aarch64_gen_unlikely_cbranch): New function.\n+\t(aarch64_addti_scratch_regs): New function.\n+\t(aarch64_subvti_scratch_regs): New function.\n+\t(aarch64_expand_subvti): New function.\n+\n 2018-07-19  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/aarch64/aarch64-option-extensions.def: New entry for profile"}, {"sha": "ea7ecc2d5e4ce18d2ff25862cc9eb998a169a9cd", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -24,6 +24,7 @@ CC_MODE (CC_SWP);\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n CC_MODE (CC_C);     /* Only C bit of condition flags is valid.  */\n+CC_MODE (CC_V);     /* Only V bit of condition flags is valid.  */\n \n /* Half-precision floating point for __fp16.  */\n FLOAT_MODE (HF, 2, 0);"}, {"sha": "af5db9c595385f7586692258f750b6aceb3ed9c8", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -472,6 +472,16 @@ void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n bool aarch64_return_address_signing_enabled (void);\n void aarch64_save_restore_target_globals (tree);\n+void aarch64_addti_scratch_regs (rtx, rtx, rtx *,\n+\t\t\t\t rtx *, rtx *,\n+\t\t\t\t rtx *, rtx *,\n+\t\t\t\t rtx *);\n+void aarch64_subvti_scratch_regs (rtx, rtx, rtx *,\n+\t\t\t\t  rtx *, rtx *,\n+\t\t\t\t  rtx *, rtx *, rtx *);\n+void aarch64_expand_subvti (rtx, rtx, rtx,\n+\t\t\t    rtx, rtx, rtx, rtx);\n+\n \n /* Initialize builtins for SIMD intrinsics.  */\n void init_aarch64_simd_builtins (void);\n@@ -498,7 +508,8 @@ void aarch64_split_simd_move (rtx, rtx);\n bool aarch64_float_const_representable_p (rtx);\n \n #if defined (RTX_CODE)\n-\n+void aarch64_gen_unlikely_cbranch (enum rtx_code, machine_mode cc_mode,\n+\t\t\t\t   rtx label_ref);\n bool aarch64_legitimate_address_p (machine_mode, rtx, bool,\n \t\t\t\t   aarch64_addr_query_type = ADDR_QUERY_M);\n machine_mode aarch64_select_cc_mode (RTX_CODE, rtx, rtx);"}, {"sha": "fa01475aa9ee579b6a3b2526295b622157120660", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -6414,6 +6414,13 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n       && GET_CODE (y) == ZERO_EXTEND)\n     return CC_Cmode;\n \n+  /* A test for signed overflow.  */\n+  if ((GET_MODE (x) == DImode || GET_MODE (x) == TImode)\n+      && code == NE\n+      && GET_CODE (x) == PLUS\n+      && GET_CODE (y) == SIGN_EXTEND)\n+    return CC_Vmode;\n+\n   /* For everything else, return CCmode.  */\n   return CCmode;\n }\n@@ -6520,6 +6527,15 @@ aarch64_get_condition_code_1 (machine_mode mode, enum rtx_code comp_code)\n \t}\n       break;\n \n+    case E_CC_Vmode:\n+      switch (comp_code)\n+\t{\n+\tcase NE: return AARCH64_VS;\n+\tcase EQ: return AARCH64_VC;\n+\tdefault: return -1;\n+\t}\n+      break;\n+\n     default:\n       return -1;\n     }\n@@ -16274,6 +16290,131 @@ aarch64_split_dimode_const_store (rtx dst, rtx src)\n   return true;\n }\n \n+/* Generate RTL for a conditional branch with rtx comparison CODE in\n+   mode CC_MODE.  The destination of the unlikely conditional branch\n+   is LABEL_REF.  */\n+\n+void\n+aarch64_gen_unlikely_cbranch (enum rtx_code code, machine_mode cc_mode,\n+\t\t\t      rtx label_ref)\n+{\n+  rtx x;\n+  x = gen_rtx_fmt_ee (code, VOIDmode,\n+\t\t      gen_rtx_REG (cc_mode, CC_REGNUM),\n+\t\t      const0_rtx);\n+\n+  x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n+\t\t\t    gen_rtx_LABEL_REF (VOIDmode, label_ref),\n+\t\t\t    pc_rtx);\n+  aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n+}\n+\n+/* Generate DImode scratch registers for 128-bit (TImode) addition.\n+\n+   OP1 represents the TImode destination operand 1\n+   OP2 represents the TImode destination operand 2\n+   LOW_DEST represents the low half (DImode) of TImode operand 0\n+   LOW_IN1 represents the low half (DImode) of TImode operand 1\n+   LOW_IN2 represents the low half (DImode) of TImode operand 2\n+   HIGH_DEST represents the high half (DImode) of TImode operand 0\n+   HIGH_IN1 represents the high half (DImode) of TImode operand 1\n+   HIGH_IN2 represents the high half (DImode) of TImode operand 2.  */\n+\n+void\n+aarch64_addti_scratch_regs (rtx op1, rtx op2, rtx *low_dest,\n+\t\t\t    rtx *low_in1, rtx *low_in2,\n+\t\t\t    rtx *high_dest, rtx *high_in1,\n+\t\t\t    rtx *high_in2)\n+{\n+  *low_dest = gen_reg_rtx (DImode);\n+  *low_in1 = gen_lowpart (DImode, op1);\n+  *low_in2 = simplify_gen_subreg (DImode, op2, TImode,\n+\t\t\t\t  subreg_lowpart_offset (DImode, TImode));\n+  *high_dest = gen_reg_rtx (DImode);\n+  *high_in1 = gen_highpart (DImode, op1);\n+  *high_in2 = simplify_gen_subreg (DImode, op2, TImode,\n+\t\t\t\t   subreg_highpart_offset (DImode, TImode));\n+}\n+\n+/* Generate DImode scratch registers for 128-bit (TImode) subtraction.\n+\n+   This function differs from 'arch64_addti_scratch_regs' in that\n+   OP1 can be an immediate constant (zero). We must call\n+   subreg_highpart_offset with DImode and TImode arguments, otherwise\n+   VOIDmode will be used for the const_int which generates an internal\n+   error from subreg_size_highpart_offset which does not expect a size of zero.\n+\n+   OP1 represents the TImode destination operand 1\n+   OP2 represents the TImode destination operand 2\n+   LOW_DEST represents the low half (DImode) of TImode operand 0\n+   LOW_IN1 represents the low half (DImode) of TImode operand 1\n+   LOW_IN2 represents the low half (DImode) of TImode operand 2\n+   HIGH_DEST represents the high half (DImode) of TImode operand 0\n+   HIGH_IN1 represents the high half (DImode) of TImode operand 1\n+   HIGH_IN2 represents the high half (DImode) of TImode operand 2.  */\n+\n+\n+void\n+aarch64_subvti_scratch_regs (rtx op1, rtx op2, rtx *low_dest,\n+\t\t\t     rtx *low_in1, rtx *low_in2,\n+\t\t\t     rtx *high_dest, rtx *high_in1,\n+\t\t\t     rtx *high_in2)\n+{\n+  *low_dest = gen_reg_rtx (DImode);\n+  *low_in1 = simplify_gen_subreg (DImode, op1, TImode,\n+\t\t\t\t  subreg_lowpart_offset (DImode, TImode));\n+\n+  *low_in2 = simplify_gen_subreg (DImode, op2, TImode,\n+\t\t\t\t  subreg_lowpart_offset (DImode, TImode));\n+  *high_dest = gen_reg_rtx (DImode);\n+\n+  *high_in1 = simplify_gen_subreg (DImode, op1, TImode,\n+\t\t\t\t   subreg_highpart_offset (DImode, TImode));\n+  *high_in2 = simplify_gen_subreg (DImode, op2, TImode,\n+\t\t\t\t   subreg_highpart_offset (DImode, TImode));\n+}\n+\n+/* Generate RTL for 128-bit (TImode) subtraction with overflow.\n+\n+   OP0 represents the TImode destination operand 0\n+   LOW_DEST represents the low half (DImode) of TImode operand 0\n+   LOW_IN1 represents the low half (DImode) of TImode operand 1\n+   LOW_IN2 represents the low half (DImode) of TImode operand 2\n+   HIGH_DEST represents the high half (DImode) of TImode operand 0\n+   HIGH_IN1 represents the high half (DImode) of TImode operand 1\n+   HIGH_IN2 represents the high half (DImode) of TImode operand 2.  */\n+\n+void\n+aarch64_expand_subvti (rtx op0, rtx low_dest, rtx low_in1,\n+\t\t       rtx low_in2, rtx high_dest, rtx high_in1,\n+\t\t       rtx high_in2)\n+{\n+  if (low_in2 == const0_rtx)\n+    {\n+      low_dest = low_in1;\n+      emit_insn (gen_subdi3_compare1 (high_dest, high_in1,\n+\t\t\t\t      force_reg (DImode, high_in2)));\n+    }\n+  else\n+    {\n+      if (CONST_INT_P (low_in2))\n+\t{\n+\t  low_in2 = force_reg (DImode, GEN_INT (-UINTVAL (low_in2)));\n+\t  high_in2 = force_reg (DImode, high_in2);\n+\t  emit_insn (gen_adddi3_compareC (low_dest, low_in1, low_in2));\n+\t}\n+      else\n+\temit_insn (gen_subdi3_compare1 (low_dest, low_in1, low_in2));\n+      emit_insn (gen_subdi3_carryinCV (high_dest,\n+\t\t\t\t       force_reg (DImode, high_in1),\n+\t\t\t\t       high_in2));\n+    }\n+\n+  emit_move_insn (gen_lowpart (DImode, op0), low_dest);\n+  emit_move_insn (gen_highpart (DImode, op0), high_dest);\n+\n+}\n+\n /* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n \n static unsigned HOST_WIDE_INT"}, {"sha": "e9c16f9697b766a5c56b6269a83b7276654c5668", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 481, "deletions": 20, "changes": 501, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -1726,25 +1726,133 @@\n   }\n )\n \n+(define_expand \"addv<mode>4\"\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"register_operand\")\n+   (match_operand:GPI 2 \"register_operand\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  emit_insn (gen_add<mode>3_compareV (operands[0], operands[1], operands[2]));\n+  aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"uaddv<mode>4\"\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"register_operand\")\n+   (match_operand:GPI 2 \"register_operand\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  emit_insn (gen_add<mode>3_compareC (operands[0], operands[1], operands[2]));\n+  aarch64_gen_unlikely_cbranch (NE, CC_Cmode, operands[3]);\n+\n+  DONE;\n+})\n+\n (define_expand \"addti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n \t(plus:TI (match_operand:TI 1 \"register_operand\" \"\")\n-\t\t (match_operand:TI 2 \"register_operand\" \"\")))]\n+\t\t (match_operand:TI 2 \"aarch64_reg_or_imm\" \"\")))]\n   \"\"\n {\n-  rtx low = gen_reg_rtx (DImode);\n-  emit_insn (gen_adddi3_compareC (low, gen_lowpart (DImode, operands[1]),\n-\t\t\t\t  gen_lowpart (DImode, operands[2])));\n+  rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n \n-  rtx high = gen_reg_rtx (DImode);\n-  emit_insn (gen_adddi3_carryin (high, gen_highpart (DImode, operands[1]),\n-\t\t\t\t gen_highpart (DImode, operands[2])));\n+  aarch64_addti_scratch_regs (operands[1], operands[2],\n+\t\t\t      &low_dest, &op1_low, &op2_low,\n+\t\t\t      &high_dest, &op1_high, &op2_high);\n \n-  emit_move_insn (gen_lowpart (DImode, operands[0]), low);\n-  emit_move_insn (gen_highpart (DImode, operands[0]), high);\n+  if (op2_low == const0_rtx)\n+    {\n+      low_dest = op1_low;\n+      if (!aarch64_pluslong_operand (op2_high, DImode))\n+\top2_high = force_reg (DImode, op2_high);\n+      emit_insn (gen_adddi3 (high_dest, op1_high, op2_high));\n+    }\n+  else\n+    {\n+      emit_insn (gen_adddi3_compareC (low_dest, op1_low,\n+\t\t\t\t      force_reg (DImode, op2_low)));\n+      emit_insn (gen_adddi3_carryin (high_dest, op1_high,\n+\t\t\t\t     force_reg (DImode, op2_high)));\n+    }\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low_dest);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high_dest);\n+\n+  DONE;\n+})\n+\n+(define_expand \"addvti4\"\n+  [(match_operand:TI 0 \"register_operand\" \"\")\n+   (match_operand:TI 1 \"register_operand\" \"\")\n+   (match_operand:TI 2 \"aarch64_reg_or_imm\" \"\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n+\n+  aarch64_addti_scratch_regs (operands[1], operands[2],\n+\t\t\t      &low_dest, &op1_low, &op2_low,\n+\t\t\t      &high_dest, &op1_high, &op2_high);\n+\n+  if (op2_low == const0_rtx)\n+    {\n+      low_dest = op1_low;\n+      emit_insn (gen_adddi3_compareV (high_dest, op1_high,\n+\t\t\t\t      force_reg (DImode, op2_high)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_adddi3_compareC (low_dest, op1_low,\n+\t\t\t\t      force_reg (DImode, op2_low)));\n+      emit_insn (gen_adddi3_carryinV (high_dest, op1_high,\n+\t\t\t\t      force_reg (DImode, op2_high)));\n+    }\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low_dest);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high_dest);\n+\n+  aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n   DONE;\n })\n \n+(define_expand \"uaddvti4\"\n+  [(match_operand:TI 0 \"register_operand\" \"\")\n+   (match_operand:TI 1 \"register_operand\" \"\")\n+   (match_operand:TI 2 \"aarch64_reg_or_imm\" \"\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n+\n+  aarch64_addti_scratch_regs (operands[1], operands[2],\n+\t\t\t      &low_dest, &op1_low, &op2_low,\n+\t\t\t      &high_dest, &op1_high, &op2_high);\n+\n+  if (op2_low == const0_rtx)\n+    {\n+      low_dest = op1_low;\n+      emit_insn (gen_adddi3_compareC (high_dest, op1_high,\n+\t\t\t\t      force_reg (DImode, op2_high)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_adddi3_compareC (low_dest, op1_low,\n+\t\t\t\t      force_reg (DImode, op2_low)));\n+      emit_insn (gen_adddi3_carryinC (high_dest, op1_high,\n+\t\t\t\t      force_reg (DImode, op2_high)));\n+    }\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low_dest);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high_dest);\n+\n+  aarch64_gen_unlikely_cbranch (NE, CC_Cmode, operands[3]);\n+  DONE;\n+ })\n+\n (define_insn \"add<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -1830,7 +1938,7 @@\n \n (define_insn \"add<mode>3_compareC\"\n   [(set (reg:CC_C CC_REGNUM)\n-\t(ne:CC_C\n+\t(compare:CC_C\n \t  (plus:<DWI>\n \t    (zero_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\"))\n \t    (zero_extend:<DWI> (match_operand:GPI 2 \"register_operand\" \"r\")))\n@@ -1843,10 +1951,71 @@\n   [(set_attr \"type\" \"alus_sreg\")]\n )\n \n+(define_insn \"*add<mode>3_compareV_cconly_imm\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI> (match_operand:GPI 0 \"register_operand\" \"r,r\"))\n+\t    (match_operand:<DWI> 1 \"const_scalar_int_operand\" \"\"))\n+\t  (sign_extend:<DWI>\n+\t   (plus:GPI\n+\t    (match_dup 0)\n+\t    (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\")))))]\n+  \"INTVAL (operands[1]) == INTVAL (operands[2])\"\n+  \"@\n+  cmn\\\\t%<w>0, %<w>1\n+  cmp\\\\t%<w>0, #%n1\"\n+  [(set_attr \"type\" \"alus_imm\")]\n+)\n+\n+(define_insn \"*add<mode>3_compareV_cconly\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI> (match_operand:GPI 0 \"register_operand\" \"r\"))\n+\t    (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t  (sign_extend:<DWI> (plus:GPI (match_dup 0) (match_dup 1)))))]\n+  \"\"\n+  \"cmn\\\\t%<w>0, %<w>1\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"*add<mode>3_compareV_imm\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI>\n+\t      (match_operand:GPI 1 \"register_operand\" \"r,r\"))\n+\t    (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\"))\n+\t  (sign_extend:<DWI>\n+\t    (plus:GPI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n+\t(plus:GPI (match_dup 1) (match_dup 2)))]\n+   \"\"\n+   \"@\n+   adds\\\\t%<w>0, %<w>1, %<w>2\n+   subs\\\\t%<w>0, %<w>1, #%n2\"\n+  [(set_attr \"type\" \"alus_imm,alus_imm\")]\n+)\n+\n+(define_insn \"add<mode>3_compareV\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t    (sign_extend:<DWI> (match_operand:GPI 2 \"register_operand\" \"r\")))\n+\t  (sign_extend:<DWI> (plus:GPI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"adds\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_insn \"*adds_shift_imm_<mode>\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n-\t (plus:GPI (ASHIFT:GPI \n+\t (plus:GPI (ASHIFT:GPI\n \t\t    (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t    (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n \t\t   (match_operand:GPI 3 \"register_operand\" \"r\"))\n@@ -2213,6 +2382,138 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n+(define_expand \"add<mode>3_carryinC\"\n+  [(parallel\n+     [(set (match_dup 3)\n+\t   (compare:CC_C\n+\t     (plus:<DWI>\n+\t       (plus:<DWI>\n+\t\t (match_dup 4)\n+\t\t (zero_extend:<DWI>\n+\t\t   (match_operand:GPI 1 \"register_operand\" \"\")))\n+\t       (zero_extend:<DWI>\n+\t\t (match_operand:GPI 2 \"register_operand\" \"\")))\n+\t   (zero_extend:<DWI>\n+\t     (plus:GPI\n+\t       (plus:GPI (match_dup 5) (match_dup 1))\n+\t       (match_dup 2)))))\n+      (set (match_operand:GPI 0 \"register_operand\")\n+\t   (plus:GPI\n+\t     (plus:GPI (match_dup 5) (match_dup 1))\n+\t     (match_dup 2)))])]\n+   \"\"\n+{\n+  operands[3] = gen_rtx_REG (CC_Cmode, CC_REGNUM);\n+  operands[4] = gen_rtx_NE (<DWI>mode, operands[3], const0_rtx);\n+  operands[5] = gen_rtx_NE (<MODE>mode, operands[3], const0_rtx);\n+})\n+\n+(define_insn \"*add<mode>3_carryinC_zero\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(compare:CC_C\n+\t  (plus:<DWI>\n+\t    (match_operand:<DWI> 2 \"aarch64_carry_operation\" \"\")\n+\t    (zero_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t  (zero_extend:<DWI>\n+\t    (plus:GPI\n+\t      (match_operand:GPI 3 \"aarch64_carry_operation\" \"\")\n+\t      (match_dup 1)))))\n+   (set (match_operand:GPI 0 \"register_operand\")\n+\t(plus:GPI (match_dup 3) (match_dup 1)))]\n+   \"\"\n+   \"adcs\\\\t%<w>0, %<w>1, <w>zr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*add<mode>3_carryinC\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(compare:CC_C\n+\t  (plus:<DWI>\n+\t    (plus:<DWI>\n+\t      (match_operand:<DWI> 3 \"aarch64_carry_operation\" \"\")\n+\t      (zero_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t    (zero_extend:<DWI> (match_operand:GPI 2 \"register_operand\" \"r\")))\n+\t  (zero_extend:<DWI>\n+\t    (plus:GPI\n+\t      (plus:GPI\n+\t\t(match_operand:GPI 4 \"aarch64_carry_operation\" \"\")\n+\t\t(match_dup 1))\n+\t      (match_dup 2)))))\n+   (set (match_operand:GPI 0 \"register_operand\")\n+\t(plus:GPI\n+\t  (plus:GPI (match_dup 4) (match_dup 1))\n+\t  (match_dup 2)))]\n+   \"\"\n+   \"adcs\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_expand \"add<mode>3_carryinV\"\n+  [(parallel\n+     [(set (reg:CC_V CC_REGNUM)\n+\t   (compare:CC_V\n+\t     (plus:<DWI>\n+\t       (plus:<DWI>\n+\t\t (match_dup 3)\n+\t\t (sign_extend:<DWI>\n+\t\t   (match_operand:GPI 1 \"register_operand\" \"\")))\n+\t       (sign_extend:<DWI>\n+\t\t (match_operand:GPI 2 \"register_operand\" \"\")))\n+\t   (sign_extend:<DWI>\n+\t     (plus:GPI\n+\t       (plus:GPI (match_dup 4) (match_dup 1))\n+\t       (match_dup 2)))))\n+      (set (match_operand:GPI 0 \"register_operand\")\n+\t   (plus:GPI\n+\t     (plus:GPI (match_dup 4) (match_dup 1))\n+\t     (match_dup 2)))])]\n+   \"\"\n+{\n+  rtx cc = gen_rtx_REG (CC_Cmode, CC_REGNUM);\n+  operands[3] = gen_rtx_NE (<DWI>mode, cc, const0_rtx);\n+  operands[4] = gen_rtx_NE (<MODE>mode, cc, const0_rtx);\n+})\n+\n+(define_insn \"*add<mode>3_carryinV_zero\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:<DWI>\n+\t    (match_operand:<DWI> 2 \"aarch64_carry_operation\" \"\")\n+\t    (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t  (sign_extend:<DWI>\n+\t    (plus:GPI\n+\t      (match_operand:GPI 3 \"aarch64_carry_operation\" \"\")\n+\t      (match_dup 1)))))\n+   (set (match_operand:GPI 0 \"register_operand\")\n+\t(plus:GPI (match_dup 3) (match_dup 1)))]\n+   \"\"\n+   \"adcs\\\\t%<w>0, %<w>1, <w>zr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*add<mode>3_carryinV\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:<DWI>\n+\t    (plus:<DWI>\n+\t      (match_operand:<DWI> 3 \"aarch64_carry_operation\" \"\")\n+\t      (sign_extend:<DWI> (match_operand:GPI 1 \"register_operand\" \"r\")))\n+\t    (sign_extend:<DWI> (match_operand:GPI 2 \"register_operand\" \"r\")))\n+\t  (sign_extend:<DWI>\n+\t    (plus:GPI\n+\t      (plus:GPI\n+\t\t(match_operand:GPI 4 \"aarch64_carry_operation\" \"\")\n+\t\t(match_dup 1))\n+\t      (match_dup 2)))))\n+   (set (match_operand:GPI 0 \"register_operand\")\n+\t(plus:GPI\n+\t  (plus:GPI (match_dup 4) (match_dup 1))\n+\t  (match_dup 2)))]\n+   \"\"\n+   \"adcs\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n (define_insn \"*add_uxt<mode>_shift2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (and:GPI\n@@ -2309,22 +2610,87 @@\n    (set_attr \"simd\" \"*,yes\")]\n )\n \n+(define_expand \"subv<mode>4\"\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n+   (match_operand:GPI 2 \"aarch64_reg_or_zero\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"usubv<mode>4\"\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPI 1 \"aarch64_reg_or_zero\")\n+   (match_operand:GPI 2 \"aarch64_reg_or_zero\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  aarch64_gen_unlikely_cbranch (LTU, CCmode, operands[3]);\n+\n+  DONE;\n+})\n+\n (define_expand \"subti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"\")\n-\t(minus:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t(minus:TI (match_operand:TI 1 \"aarch64_reg_or_zero\" \"\")\n \t\t  (match_operand:TI 2 \"register_operand\" \"\")))]\n   \"\"\n {\n-  rtx low = gen_reg_rtx (DImode);\n-  emit_insn (gen_subdi3_compare1 (low, gen_lowpart (DImode, operands[1]),\n-\t\t\t\t  gen_lowpart (DImode, operands[2])));\n+  rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n \n-  rtx high = gen_reg_rtx (DImode);\n-  emit_insn (gen_subdi3_carryin (high, gen_highpart (DImode, operands[1]),\n-\t\t\t\t gen_highpart (DImode, operands[2])));\n+  aarch64_subvti_scratch_regs (operands[1], operands[2],\n+\t\t\t       &low_dest, &op1_low, &op2_low,\n+\t\t\t       &high_dest, &op1_high, &op2_high);\n \n-  emit_move_insn (gen_lowpart (DImode, operands[0]), low);\n-  emit_move_insn (gen_highpart (DImode, operands[0]), high);\n+  emit_insn (gen_subdi3_compare1 (low_dest, op1_low, op2_low));\n+  emit_insn (gen_subdi3_carryin (high_dest, op1_high, op2_high));\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low_dest);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high_dest);\n+  DONE;\n+})\n+\n+(define_expand \"subvti4\"\n+  [(match_operand:TI 0 \"register_operand\")\n+   (match_operand:TI 1 \"aarch64_reg_or_zero\")\n+   (match_operand:TI 2 \"aarch64_reg_or_imm\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n+\n+  aarch64_subvti_scratch_regs (operands[1], operands[2],\n+\t\t\t       &low_dest, &op1_low, &op2_low,\n+\t\t\t       &high_dest, &op1_high, &op2_high);\n+  aarch64_expand_subvti (operands[0], low_dest, op1_low, op2_low,\n+\t\t\t high_dest, op1_high, op2_high);\n+\n+  aarch64_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+  DONE;\n+})\n+\n+(define_expand \"usubvti4\"\n+  [(match_operand:TI 0 \"register_operand\")\n+   (match_operand:TI 1 \"aarch64_reg_or_zero\")\n+   (match_operand:TI 2 \"aarch64_reg_or_imm\")\n+   (label_ref (match_operand 3 \"\" \"\"))]\n+  \"\"\n+{\n+  rtx low_dest, op1_low, op2_low, high_dest, op1_high, op2_high;\n+\n+  aarch64_subvti_scratch_regs (operands[1], operands[2],\n+\t\t\t\t    &low_dest, &op1_low, &op2_low,\n+\t\t\t       &high_dest, &op1_high, &op2_high);\n+  aarch64_expand_subvti (operands[0], low_dest, op1_low, op2_low,\n+\t\t\t high_dest, op1_high, op2_high);\n+\n+  aarch64_gen_unlikely_cbranch (LTU, CCmode, operands[3]);\n   DONE;\n })\n \n@@ -2353,6 +2719,22 @@\n   [(set_attr \"type\" \"alus_sreg\")]\n )\n \n+(define_insn \"*sub<mode>3_compare1_imm\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ,rZ\")\n+\t  (match_operand:GPI 2 \"aarch64_plus_immediate\" \"I,J\")))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n+\t(plus:GPI\n+\t  (match_dup 1)\n+\t  (match_operand:GPI 3 \"aarch64_plus_immediate\" \"J,I\")))]\n+  \"UINTVAL (operands[2]) == -UINTVAL (operands[3])\"\n+  \"@\n+  subs\\\\t%<w>0, %<w>1, #%n3\n+  adds\\\\t%<w>0, %<w>1, %3\"\n+  [(set_attr \"type\" \"alus_imm\")]\n+)\n+\n (define_insn \"sub<mode>3_compare1\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n@@ -2669,6 +3051,85 @@\n   [(set_attr \"type\" \"adc_reg\")]\n )\n \n+(define_expand \"sub<mode>3_carryinCV\"\n+  [(parallel\n+     [(set (reg:CC CC_REGNUM)\n+\t   (compare:CC\n+\t     (sign_extend:<DWI>\n+\t       (match_operand:GPI 1 \"aarch64_reg_or_zero\" \"\"))\n+\t     (plus:<DWI>\n+\t       (sign_extend:<DWI>\n+\t\t (match_operand:GPI 2 \"register_operand\" \"\"))\n+\t       (ltu:<DWI> (reg:CC CC_REGNUM) (const_int 0)))))\n+      (set (match_operand:GPI 0 \"register_operand\" \"\")\n+\t   (minus:GPI\n+\t     (minus:GPI (match_dup 1) (match_dup 2))\n+\t     (ltu:GPI (reg:CC CC_REGNUM) (const_int 0))))])]\n+   \"\"\n+)\n+\n+(define_insn \"*sub<mode>3_carryinCV_z1_z2\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (const_int 0)\n+\t  (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\")))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(neg:GPI (match_operand:GPI 1 \"aarch64_borrow_operation\" \"\")))]\n+   \"\"\n+   \"sbcs\\\\t%<w>0, <w>zr, <w>zr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*sub<mode>3_carryinCV_z1\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (const_int 0)\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI>\n+\t      (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t    (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\"))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (neg:GPI (match_dup 1))\n+\t  (match_operand:GPI 3 \"aarch64_borrow_operation\" \"\")))]\n+   \"\"\n+   \"sbcs\\\\t%<w>0, <w>zr, %<w>1\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*sub<mode>3_carryinCV_z2\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (sign_extend:<DWI>\n+\t    (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t  (match_operand:<DWI> 2 \"aarch64_borrow_operation\" \"\")))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (match_dup 1)\n+\t  (match_operand:GPI 3 \"aarch64_borrow_operation\" \"\")))]\n+   \"\"\n+   \"sbcs\\\\t%<w>0, %<w>1, <w>zr\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n+(define_insn \"*sub<mode>3_carryinCV\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (sign_extend:<DWI>\n+\t    (match_operand:GPI 1 \"register_operand\" \"r\"))\n+\t  (plus:<DWI>\n+\t    (sign_extend:<DWI>\n+\t      (match_operand:GPI 2 \"register_operand\" \"r\"))\n+\t    (match_operand:<DWI> 3 \"aarch64_borrow_operation\" \"\"))))\n+   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(minus:GPI\n+\t  (minus:GPI (match_dup 1) (match_dup 2))\n+\t  (match_operand:GPI 4 \"aarch64_borrow_operation\" \"\")))]\n+   \"\"\n+   \"sbcs\\\\t%<w>0, %<w>1, %<w>2\"\n+  [(set_attr \"type\" \"adc_reg\")]\n+)\n+\n (define_insn \"*sub_uxt<mode>_shift2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")"}, {"sha": "b8b309f71f94bd2bbe4be9fda5c07ac33515ec01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -1,3 +1,19 @@\n+2018-07-19  Michael Collison  <michael.collison@arm.com>\n+\t    Richard Henderson <rth@redhat.com>\n+\n+\t* gcc.target/aarch64/builtin_sadd_128.c: New testcase.\n+\t* gcc.target/aarch64/builtin_saddl.c: New testcase.\n+\t* gcc.target/aarch64/builtin_saddll.c: New testcase.\n+\t* gcc.target/aarch64/builtin_uadd_128.c: New testcase.\n+\t* gcc.target/aarch64/builtin_uaddl.c: New testcase.\n+\t* gcc.target/aarch64/builtin_uaddll.c: New testcase.\n+\t* gcc.target/aarch64/builtin_ssub_128.c: New testcase.\n+\t* gcc.target/aarch64/builtin_ssubl.c: New testcase.\n+\t* gcc.target/aarch64/builtin_ssubll.c: New testcase.\n+\t* gcc.target/aarch64/builtin_usub_128.c: New testcase.\n+\t* gcc.target/aarch64/builtin_usubl.c: New testcase.\n+\t* gcc.target/aarch64/builtin_usubll.c: New testcase.\n+\n 2018-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert fix for c++/59480 (and testsuite followup)"}, {"sha": "0b31500575bff2544b5b8e749de726b85f77bb86", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_sadd_128.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_sadd_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_sadd_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_sadd_128.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+__int128 overflow_add (__int128 x, __int128 y)\n+{\n+  __int128 r;\n+\n+  int ovr = __builtin_add_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */\n+/* { dg-final { scan-assembler \"adcs\" } } */"}, {"sha": "9768a98b8650b43e72bf50e7393e0371dc103926", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_saddl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_saddl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_saddl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_saddl.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+long overflow_add (long x, long y)\n+{\n+  long r;\n+\n+  int ovr = __builtin_saddl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */"}, {"sha": "126a52671f19170e1c258f706135459765ae6ca7", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_saddll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_saddll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_saddll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_saddll.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+long long overflow_add (long long x, long long y)\n+{\n+  long long r;\n+\n+  int ovr = __builtin_saddll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */\n+"}, {"sha": "c1261e3f80f7832aee0bce161c0922ca6d7ddfdb", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_ssub_128.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssub_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssub_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssub_128.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+__int128 overflow_sub (__int128 x, __int128 y)\n+{\n+  __int128 r;\n+\n+  int ovr = __builtin_sub_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */\n+/* { dg-final { scan-assembler \"sbcs\" } } */"}, {"sha": "10404640896ed20a7ca8436f114c2cfbf4c8e8ea", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_ssubl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssubl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssubl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssubl.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+long overflow_sub (long x, long y)\n+{\n+  long r;\n+\n+  int ovr = __builtin_ssubl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */"}, {"sha": "a03df88a65a1c41cd1205617d94f345727feb2ee", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_ssubll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssubll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssubll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_ssubll.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+long long overflow_sub (long long x, long long y)\n+{\n+  long long r;\n+\n+  int ovr = __builtin_ssubll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */\n+"}, {"sha": "c573c2ae918d4f71ecaca75aeac646ed0896aa93", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_uadd_128.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uadd_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uadd_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uadd_128.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+unsigned __int128 overflow_add (unsigned __int128 x, unsigned __int128 y)\n+{\n+  unsigned __int128 r;\n+\n+  int ovr = __builtin_add_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */\n+/* { dg-final { scan-assembler \"adcs\" } } */"}, {"sha": "e325591899bade4a0f537d720ffcdd3e110f1fd8", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_uaddl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uaddl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uaddl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uaddl.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+unsigned long overflow_add (unsigned long x, unsigned long y)\n+{\n+  unsigned long r;\n+\n+  int ovr = __builtin_uaddl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */"}, {"sha": "5f428865330383e88ecdf5ca01c5aa887d72679a", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_uaddll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uaddll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uaddll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_uaddll.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+unsigned long long overflow_add (unsigned long long x, unsigned long long y)\n+{\n+  unsigned long long r;\n+\n+  int ovr = __builtin_uaddll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */\n+"}, {"sha": "a84f4a40c23f23525d9c9c17bb3e0778da704100", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_usub_128.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usub_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usub_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usub_128.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+unsigned __int128 overflow_sub (unsigned __int128 x, unsigned __int128 y)\n+{\n+  unsigned __int128 r;\n+\n+  int ovr = __builtin_sub_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */\n+/* { dg-final { scan-assembler \"sbcs\" } } */"}, {"sha": "ed033dad936621eb076c5e6bf3eae99383b60a0d", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_usubl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usubl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usubl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usubl.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+unsigned long overflow_sub (unsigned long x, unsigned long y)\n+{\n+  unsigned long r;\n+\n+  int ovr = __builtin_usubl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */"}, {"sha": "a742f0c747843abec08bbba3d777dd84d6687551", "filename": "gcc/testsuite/gcc.target/aarch64/builtin_usubll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usubll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c460535576882863fe4e0db740b4ac4bcfaba9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usubll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbuiltin_usubll.c?ref=30c460535576882863fe4e0db740b4ac4bcfaba9", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+\n+extern void overflow_handler ();\n+\n+unsigned long long overflow_sub (unsigned long long x, unsigned long long y)\n+{\n+  unsigned long long r;\n+\n+  int ovr = __builtin_usubll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */\n+"}]}