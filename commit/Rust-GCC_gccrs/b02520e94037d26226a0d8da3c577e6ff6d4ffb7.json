{"sha": "b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyNTIwZTk0MDM3ZDI2MjI2YTBkOGRhM2M1NzdlNmZmNmQ0ZmZiNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-13T01:04:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-08-13T01:04:42Z"}, "message": "compiler: Flatten erroneous subtrees into errors.\n\n    \n    Between the lowering and flattening passes of the compiler, there are\n    several passes that modify the lowered Go parse tree and as errors are\n    discovered, several nodes transform into error nodes.  However, for a\n    higher level node such as a construction expression, the erroneous\n    nodes in the subtrees might not propagate their error.  The flatten\n    phase for a node now looks for errors in the subtree and flattens the\n    node into an error node if any are found.\n    \n    Fixes golang/go#11559, golang/go#11536, golang/go#11558.\n    \n    Reviewed-on: https://go-review.googlesource.com/13097\n\nFrom-SVN: r226845", "tree": {"sha": "a38ed0948a185084f013a359229cd87e97988d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a38ed0948a185084f013a359229cd87e97988d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/comments", "author": null, "committer": null, "parents": [{"sha": "2f4fdc09b0e34c96b2283d81971983d65fa02a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f4fdc09b0e34c96b2283d81971983d65fa02a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f4fdc09b0e34c96b2283d81971983d65fa02a8f"}], "stats": {"total": 202, "additions": 183, "deletions": 19}, "files": [{"sha": "1961c7ea6ff56353ddd57ffc64bf47935aa8294a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "patch": "@@ -1,4 +1,4 @@\n-5fc38e74d132cd6f4e7b56e6bcf9fe57031ab203\n+fc9da313b4f5c13b4ac3bdddd98e699fd1c89613\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9f757a2aa26540a059cf75c5030f813539f0e987", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 145, "deletions": 18, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "patch": "@@ -3101,6 +3101,12 @@ Expression*\n Type_conversion_expression::do_flatten(Gogo*, Named_object*,\n                                        Statement_inserter* inserter)\n {\n+  if (this->type()->is_error_type() || this->expr_->is_error_expression())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(this->location());\n+    }\n+\n   if (((this->type()->is_string_type()\n         && this->expr_->type()->is_slice_type())\n        || this->expr_->type()->interface_type() != NULL)\n@@ -3585,8 +3591,13 @@ Expression*\n Unary_expression::do_flatten(Gogo* gogo, Named_object*,\n                              Statement_inserter* inserter)\n {\n-  if (this->is_error_expression() || this->expr_->is_error_expression())\n-    return Expression::make_error(this->location());\n+  if (this->is_error_expression()\n+      || this->expr_->is_error_expression()\n+      || this->expr_->type()->is_error_type())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(this->location());\n+    }\n \n   Location location = this->location();\n   if (this->op_ == OPERATOR_MULT\n@@ -5062,10 +5073,16 @@ Expression*\n Binary_expression::do_flatten(Gogo* gogo, Named_object*,\n                               Statement_inserter* inserter)\n {\n-  if (this->classification() == EXPRESSION_ERROR)\n-    return this;\n-\n   Location loc = this->location();\n+  if (this->left_->type()->is_error_type()\n+      || this->right_->type()->is_error_type()\n+      || this->left_->is_error_expression()\n+      || this->right_->is_error_expression())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(loc);\n+    }\n+\n   Temporary_statement* temp;\n   if (this->left_->type()->is_string_type()\n       && this->op_ == OPERATOR_PLUS)\n@@ -6806,6 +6823,11 @@ Builtin_call_expression::do_flatten(Gogo*, Named_object*,\n                                     Statement_inserter* inserter)\n {\n   Location loc = this->location();\n+  if (this->is_erroneous_call())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(loc);\n+    }\n \n   switch (this->code_)\n     {\n@@ -8733,8 +8755,11 @@ Expression*\n Call_expression::do_flatten(Gogo* gogo, Named_object*,\n \t\t\t    Statement_inserter* inserter)\n {\n-  if (this->classification() == EXPRESSION_ERROR)\n-    return this;\n+  if (this->is_erroneous_call())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(this->location());\n+    }\n \n   if (this->is_flattened_)\n     return this;\n@@ -8902,6 +8927,27 @@ Call_expression::issue_error()\n     }\n }\n \n+// Whether or not this call contains errors, either in the call or the\n+// arguments to the call.\n+\n+bool\n+Call_expression::is_erroneous_call()\n+{\n+  if (this->is_error_expression() || this->fn()->is_error_expression())\n+    return true;\n+\n+  if (this->args() == NULL)\n+    return false;\n+  for (Expression_list::iterator pa = this->args()->begin();\n+       pa != this->args()->end();\n+       ++pa)\n+    {\n+      if ((*pa)->type()->is_error_type() || (*pa)->is_error_expression())\n+        return true;\n+    }\n+  return false;\n+}\n+\n // Get the type.\n \n Type*\n@@ -9848,30 +9894,47 @@ Array_index_expression::do_flatten(Gogo*, Named_object*,\n                                    Statement_inserter* inserter)\n {\n   Location loc = this->location();\n+  Expression* array = this->array_;\n+  Expression* start = this->start_;\n+  Expression* end = this->end_;\n+  Expression* cap = this->cap_;\n+  if (array->is_error_expression()\n+      || array->type()->is_error_type()\n+      || start->is_error_expression()\n+      || start->type()->is_error_type()\n+      || (end != NULL\n+          && (end->is_error_expression() || end->type()->is_error_type()))\n+      || (cap != NULL\n+          && (cap->is_error_expression() || cap->type()->is_error_type())))\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(loc);\n+    }\n+\n   Temporary_statement* temp;\n-  if (this->array_->type()->is_slice_type() && !this->array_->is_variable())\n+  if (array->type()->is_slice_type() && !array->is_variable())\n     {\n-      temp = Statement::make_temporary(NULL, this->array_, loc);\n+      temp = Statement::make_temporary(NULL, array, loc);\n       inserter->insert(temp);\n       this->array_ = Expression::make_temporary_reference(temp, loc);\n     }\n-  if (!this->start_->is_variable())\n+  if (!start->is_variable())\n     {\n-      temp = Statement::make_temporary(NULL, this->start_, loc);\n+      temp = Statement::make_temporary(NULL, start, loc);\n       inserter->insert(temp);\n       this->start_ = Expression::make_temporary_reference(temp, loc);\n     }\n-  if (this->end_ != NULL\n-      && !this->end_->is_nil_expression()\n-      && !this->end_->is_variable())\n+  if (end != NULL\n+      && !end->is_nil_expression()\n+      && !end->is_variable())\n     {\n-      temp = Statement::make_temporary(NULL, this->end_, loc);\n+      temp = Statement::make_temporary(NULL, end, loc);\n       inserter->insert(temp);\n       this->end_ = Expression::make_temporary_reference(temp, loc);\n     }\n-  if (this->cap_ != NULL && !this->cap_->is_variable())\n+  if (cap!= NULL && !cap->is_variable())\n     {\n-      temp = Statement::make_temporary(NULL, this->cap_, loc);\n+      temp = Statement::make_temporary(NULL, cap, loc);\n       inserter->insert(temp);\n       this->cap_ = Expression::make_temporary_reference(temp, loc);\n     }\n@@ -10179,8 +10242,22 @@ Expression*\n String_index_expression::do_flatten(Gogo*, Named_object*,\n                                     Statement_inserter* inserter)\n {\n-  Temporary_statement* temp;\n   Location loc = this->location();\n+  Expression* string = this->string_;\n+  Expression* start = this->start_;\n+  Expression* end = this->end_;\n+  if (string->is_error_expression()\n+      || string->type()->is_error_type()\n+      || start->is_error_expression()\n+      || start->type()->is_error_type()\n+      || (end != NULL\n+          && (end->is_error_expression() || end->type()->is_error_type())))\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(loc);\n+    }\n+\n+  Temporary_statement* temp;\n   if (!this->string_->is_variable())\n     {\n       temp = Statement::make_temporary(NULL, this->string_, loc);\n@@ -10419,6 +10496,14 @@ Map_index_expression::do_flatten(Gogo* gogo, Named_object*,\n {\n   Location loc = this->location();\n   Map_type* mt = this->get_map_type();\n+  if (this->index()->is_error_expression()\n+      || this->index()->type()->is_error_type()\n+      || mt->is_error_type())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(loc);\n+    }\n+\n   if (!Type::are_identical(mt->key_type(), this->index_->type(), false, NULL))\n     {\n       if (this->index_->type()->interface_type() != NULL\n@@ -10443,6 +10528,9 @@ Map_index_expression::do_flatten(Gogo* gogo, Named_object*,\n \n   if (this->value_pointer_ == NULL)\n     this->get_value_pointer(this->is_lvalue_);\n+  if (this->value_pointer_->is_error_expression()\n+      || this->value_pointer_->type()->is_error_type())\n+    return Expression::make_error(loc);\n   if (!this->value_pointer_->is_variable())\n     {\n       Temporary_statement* temp =\n@@ -10819,6 +10907,13 @@ Expression*\n Interface_field_reference_expression::do_flatten(Gogo*, Named_object*,\n \t\t\t\t\t\t Statement_inserter* inserter)\n {\n+  if (this->expr_->is_error_expression()\n+      || this->expr_->type()->is_error_type())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(this->location());\n+    }\n+\n   if (!this->expr_->is_variable())\n     {\n       Temporary_statement* temp =\n@@ -11598,6 +11693,11 @@ Struct_construction_expression::do_flatten(Gogo*, Named_object*,\n     {\n       if (*pv != NULL)\n \t{\n+          if ((*pv)->is_error_expression() || (*pv)->type()->is_error_type())\n+            {\n+              go_assert(saw_errors());\n+              return Expression::make_error(loc);\n+            }\n \t  if (!(*pv)->is_variable())\n \t    {\n \t      Temporary_statement* temp =\n@@ -11809,6 +11909,11 @@ Array_construction_expression::do_flatten(Gogo*, Named_object*,\n     {\n       if (*pv != NULL)\n \t{\n+          if ((*pv)->is_error_expression() || (*pv)->type()->is_error_type())\n+            {\n+              go_assert(saw_errors());\n+              return Expression::make_error(loc);\n+            }\n \t  if (!(*pv)->is_variable())\n \t    {\n \t      Temporary_statement* temp =\n@@ -12124,6 +12229,11 @@ Map_construction_expression::do_flatten(Gogo* gogo, Named_object*,\n         {\n           Expression_list* key_value_pair = new Expression_list();\n           Expression* key = *pv;\n+          if (key->is_error_expression() || key->type()->is_error_type())\n+            {\n+              go_assert(saw_errors());\n+              return Expression::make_error(loc);\n+            }\n \t  if (key->type()->interface_type() != NULL && !key->is_variable())\n \t    {\n \t      Temporary_statement* temp =\n@@ -12135,6 +12245,11 @@ Map_construction_expression::do_flatten(Gogo* gogo, Named_object*,\n \n           ++pv;\n           Expression* val = *pv;\n+          if (val->is_error_expression() || val->type()->is_error_type())\n+            {\n+              go_assert(saw_errors());\n+              return Expression::make_error(loc);\n+            }\n \t  if (val->type()->interface_type() != NULL && !val->is_variable())\n \t    {\n \t      Temporary_statement* temp =\n@@ -13103,6 +13218,13 @@ Expression*\n Type_guard_expression::do_flatten(Gogo*, Named_object*,\n                                   Statement_inserter* inserter)\n {\n+  if (this->expr_->is_error_expression()\n+      || this->expr_->type()->is_error_type())\n+    {\n+      go_assert(saw_errors());\n+      return Expression::make_error(this->location());\n+    }\n+\n   if (!this->expr_->is_variable())\n     {\n       Temporary_statement* temp = Statement::make_temporary(NULL, this->expr_,\n@@ -13297,6 +13419,11 @@ Receive_expression::do_flatten(Gogo*, Named_object*,\n       go_assert(saw_errors());\n       return this;\n     }\n+  else if (this->channel_->is_error_expression())\n+   {\n+     go_assert(saw_errors());\n+     return Expression::make_error(this->location());\n+   }\n \n   Type* element_type = channel_type->element_type();\n   if (this->temp_receiver_ == NULL)"}, {"sha": "5358b021339da740803023acfbdeafe9eb40895d", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "patch": "@@ -1958,6 +1958,11 @@ class Call_expression : public Expression\n   bool\n   issue_error();\n \n+  // Whether or not this call contains errors, either in the call or the\n+  // arguments to the call.\n+  bool\n+  is_erroneous_call();\n+\n   // Whether this call returns multiple results that are used as an\n   // multi-valued argument.\n   bool"}, {"sha": "72b41cb09a35cacecd4b48ece57bcc7e77dac4a8", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b02520e94037d26226a0d8da3c577e6ff6d4ffb7/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=b02520e94037d26226a0d8da3c577e6ff6d4ffb7", "patch": "@@ -253,6 +253,14 @@ Statement*\n Variable_declaration_statement::do_flatten(Gogo* gogo, Named_object* function,\n                                            Block*, Statement_inserter* inserter)\n {\n+  Variable* var = this->var_->var_value();\n+  if (var->type()->is_error_type()\n+      || (var->init() != NULL\n+          && var->init()->is_error_expression()))\n+    {\n+      go_assert(saw_errors());\n+      return Statement::make_error_statement(this->location());\n+    }\n   this->var_->var_value()->flatten_init_expression(gogo, function, inserter);\n   return this;\n }\n@@ -437,6 +445,14 @@ Statement*\n Temporary_statement::do_flatten(Gogo*, Named_object*, Block*,\n \t\t\t\tStatement_inserter* inserter)\n {\n+  if (this->type()->is_error_type()\n+      || (this->init_ != NULL\n+          && this->init_->is_error_expression()))\n+    {\n+      go_assert(saw_errors());\n+      return Statement::make_error_statement(this->location());\n+    }\n+\n   if (this->type_ != NULL\n       && this->init_ != NULL\n       && !Type::are_identical(this->type_, this->init_->type(), false, NULL)\n@@ -610,6 +626,15 @@ Statement*\n Assignment_statement::do_flatten(Gogo*, Named_object*, Block*,\n \t\t\t\t Statement_inserter* inserter)\n {\n+  if (this->lhs_->is_error_expression()\n+      || this->lhs_->type()->is_error_type()\n+      || this->rhs_->is_error_expression()\n+      || this->rhs_->type()->is_error_type())\n+    {\n+      go_assert(saw_errors());\n+      return Statement::make_error_statement(this->location());\n+    }\n+\n   if (!this->lhs_->is_sink_expression()\n       && !Type::are_identical(this->lhs_->type(), this->rhs_->type(),\n \t\t\t      false, NULL)\n@@ -4397,6 +4422,13 @@ Statement*\n Send_statement::do_flatten(Gogo*, Named_object*, Block*,\n \t\t\t   Statement_inserter* inserter)\n {\n+  if (this->channel_->is_error_expression()\n+      || this->channel_->type()->is_error_type())\n+    {\n+      go_assert(saw_errors());\n+      return Statement::make_error_statement(this->location());\n+    }\n+\n   Type* element_type = this->channel_->type()->channel_type()->element_type();\n   if (!Type::are_identical(element_type, this->val_->type(), false, NULL)\n       && this->val_->type()->interface_type() != NULL"}]}