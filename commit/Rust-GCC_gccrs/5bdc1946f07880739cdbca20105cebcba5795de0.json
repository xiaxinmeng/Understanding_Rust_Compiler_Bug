{"sha": "5bdc1946f07880739cdbca20105cebcba5795de0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJkYzE5NDZmMDc4ODA3MzljZGJjYTIwMTA1Y2ViY2JhNTc5NWRlMA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2008-08-28T14:49:48Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2008-08-28T14:49:48Z"}, "message": "re PR c++/36741 (Bogus \"large integer implicitly truncated\" passing size_t constant to new)\n\n2008-08-28  Dodji Seketeli  <dodji@redhat.com>\n\n\tPR c++/36741\n\t* tree.c (int_fits_type_p): Don't forget unsigned integers\n\t  of type sizetype which higher end word equals -1.\n\nFrom-SVN: r139712", "tree": {"sha": "cedeeece4140a9cc8474c6215439d0802ddad3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cedeeece4140a9cc8474c6215439d0802ddad3f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bdc1946f07880739cdbca20105cebcba5795de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bdc1946f07880739cdbca20105cebcba5795de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bdc1946f07880739cdbca20105cebcba5795de0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bdc1946f07880739cdbca20105cebcba5795de0/comments", "author": null, "committer": null, "parents": [{"sha": "0fca40f598654f83453b17e44f902183859b16e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fca40f598654f83453b17e44f902183859b16e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fca40f598654f83453b17e44f902183859b16e4"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "4af737ee94c610921fb5d523cf204fd5257ac67e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bdc1946f07880739cdbca20105cebcba5795de0", "patch": "@@ -1,3 +1,9 @@\n+2008-08-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/36741\n+\t* tree.c (int_fits_type_p): Don't forget unsigned integers\n+\t  of type sizetype which higher end word equals -1.\n+\n 2008-08-28  Ira Rosen  <irar@il.ibm.com>\n \n \t* target.h (struct vectorize): Add new target builtin."}, {"sha": "3eed73a6f2403a3509786b0bc3d17abf3ebf0840", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bdc1946f07880739cdbca20105cebcba5795de0", "patch": "@@ -1,3 +1,8 @@\n+2008-08-28  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/36741\n+\t* g++.dg/other/new-size-type.C: New test.\n+\n 2008-08-28  Ira Rosen  <irar@il.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_perm): New."}, {"sha": "04933fd4a2c1d7d94cbed6cd2c0d3dc45a2129a5", "filename": "gcc/testsuite/g++.dg/other/new-size-type.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew-size-type.C?ref=5bdc1946f07880739cdbca20105cebcba5795de0", "patch": "@@ -0,0 +1,10 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin: PR c++/36741\n+\n+#include <stddef.h>\n+const char*\n+foo()\n+{\n+    return new char[~static_cast<size_t>(0)];// { dg-bogus \"large\" }\n+}\n+"}, {"sha": "f058fd70f1403be31589456f02a2bfd9e664fcde", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bdc1946f07880739cdbca20105cebcba5795de0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5bdc1946f07880739cdbca20105cebcba5795de0", "patch": "@@ -6319,6 +6319,21 @@ int_fits_type_p (const_tree c, const_tree type)\n      for \"unknown if constant fits\", 0 for \"constant known *not* to fit\" and 1\n      for \"constant known to fit\".  */\n \n+  if (TREE_TYPE (c) == sizetype\n+      && TYPE_UNSIGNED (TREE_TYPE (c))\n+      && TREE_INT_CST_HIGH (c) == -1\n+      && !TREE_OVERFLOW (c))\n+      /* So c is an unsigned integer which type is sizetype.\n+         sizetype'd integers are sign extended even though they are\n+\t unsigned. If the integer value fits in the lower end word of c,\n+\t and if the higher end word has all its bits set to 1, that\n+\t means the higher end bits are set to 1 only for sign extension.\n+\t So let's convert c into an equivalent zero extended unsigned\n+\t integer.  */\n+      c = force_fit_type_double (size_type_node,\n+\t\t\t\t TREE_INT_CST_LOW (c),\n+\t\t\t\t TREE_INT_CST_HIGH (c),\n+\t\t\t\t false, false);\n   /* Check if C >= type_low_bound.  */\n   if (type_low_bound && TREE_CODE (type_low_bound) == INTEGER_CST)\n     {"}]}