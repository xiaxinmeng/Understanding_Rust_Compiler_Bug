{"sha": "b856c15d7e97280853a83042ccb3ba29c79e7e9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg1NmMxNWQ3ZTk3MjgwODUzYTgzMDQyY2NiM2JhMjljNzllN2U5Zg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2001-11-27T17:31:38Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2001-11-27T17:31:38Z"}, "message": "re PR other/3968 (COLLECT_GCC_OPTIONS empty)\n\n\t* gcc.c (set_collect_gcc_options): New function, split out from\n\tmain.\n\tIgnore elided switches.\n\t(do_spec): Invoke before executing command.\n\t(do_spec_1): Likewise.\n\tFixes PR other/3968.\n\n\t* gcc.c (set_input): Export.\n\tMove declaration ...\n\tgcc.h (set_input): ... here.\n\n\tjava:\n\t* jvspec.c (jvgenmain_spec): Cannot use %umain, breaks\n\tASM_FINAL_SPEC.\n\t(lang_specific_pre_link): Use set_input to set input_filename.\n\tAppend `main' here.\n\t* jvgenmain.c (usage): Append literal `main' to CLASSNAME.\n\t(main): Fix definition.\n\tStrip `main' from classname.\n\tFixes PR java/227.\n\nFrom-SVN: r47385", "tree": {"sha": "ee26d5564cb1ec6bb1e597398f2094f13bbfc5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee26d5564cb1ec6bb1e597398f2094f13bbfc5c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b856c15d7e97280853a83042ccb3ba29c79e7e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b856c15d7e97280853a83042ccb3ba29c79e7e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b856c15d7e97280853a83042ccb3ba29c79e7e9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b856c15d7e97280853a83042ccb3ba29c79e7e9f/comments", "author": null, "committer": null, "parents": [{"sha": "ae08d4c0e94fd3f08cd1e47ed92b1fb1628f15e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae08d4c0e94fd3f08cd1e47ed92b1fb1628f15e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae08d4c0e94fd3f08cd1e47ed92b1fb1628f15e2"}], "stats": {"total": 168, "additions": 111, "deletions": 57}, "files": [{"sha": "b118193aedb38b8071e5165897ce3ca63e929f58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b856c15d7e97280853a83042ccb3ba29c79e7e9f", "patch": "@@ -1,3 +1,18 @@\n+2001-11-27  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* gcc.c (set_input): Export.\n+\tMove declaration ...\n+\tgcc.h (set_input): ... here.\n+\n+2001-11-27  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* gcc.c (set_collect_gcc_options): New function, split out from\n+\tmain.\n+\tIgnore elided switches.\n+\t(do_spec): Invoke before executing command.\n+\t(do_spec_1): Likewise.\n+\tFixes PR other/3968.\n+\n 2001-11-27  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.h (INT_ASM_OP): Remove."}, {"sha": "7a5cad2a7a72c4ca47eb32982b1749cb3023c7ce", "filename": "gcc/gcc.c", "status": "modified", "additions": 63, "deletions": 48, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b856c15d7e97280853a83042ccb3ba29c79e7e9f", "patch": "@@ -286,6 +286,7 @@ static void clear_failure_queue PARAMS ((void));\n static int check_live_switch\tPARAMS ((int, int));\n static const char *handle_braces PARAMS ((const char *));\n static char *save_string\tPARAMS ((const char *, int));\n+static void set_collect_gcc_options PARAMS ((void));\n static int do_spec_1\t\tPARAMS ((const char *, int, const char *));\n static const char *find_file\tPARAMS ((const char *));\n static int is_directory\t\tPARAMS ((const char *, const char *, int));\n@@ -309,7 +310,6 @@ static void process_command\t\tPARAMS ((int, const char *const *));\n static int execute\t\t\tPARAMS ((void));\n static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n-static void set_input\t\t\tPARAMS ((const char *));\n #ifdef ENABLE_SHARED_LIBGCC\n static void init_gcc_specs              PARAMS ((struct obstack *,\n \t\t\t\t\t\t const char *,\n@@ -3985,6 +3985,63 @@ process_command (argc, argv)\n   switches[n_switches].part1 = 0;\n   infiles[n_infiles].name = 0;\n }\n+\n+/* Store switches not filtered out by %{<S} in spec in COLLECT_GCC_OPTIONS\n+   and place that in the environment.  */\n+\n+static void\n+set_collect_gcc_options ()\n+{\n+  int i;\n+  int first_time;\n+\n+  /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n+     the compiler.  */\n+  obstack_grow (&collect_obstack, \"COLLECT_GCC_OPTIONS=\",\n+\t\tsizeof (\"COLLECT_GCC_OPTIONS=\") - 1);\n+\n+  first_time = TRUE;\n+  for (i = 0; (int) i < n_switches; i++)\n+    {\n+      const char *const *args;\n+      const char *p, *q;\n+      if (!first_time)\n+\tobstack_grow (&collect_obstack, \" \", 1);\n+\n+      first_time = FALSE;\n+\n+      /* Ignore elided switches.  */\n+      if (switches[i].live_cond == SWITCH_IGNORE)\n+\tcontinue;\n+\n+      obstack_grow (&collect_obstack, \"'-\", 2);\n+      q = switches[i].part1;\n+      while ((p = strchr (q, '\\'')))\n+\t{\n+\t  obstack_grow (&collect_obstack, q, p - q);\n+\t  obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n+\t  q = ++p;\n+\t}\n+      obstack_grow (&collect_obstack, q, strlen (q));\n+      obstack_grow (&collect_obstack, \"'\", 1);\n+\n+      for (args = switches[i].args; args && *args; args++)\n+\t{\n+\t  obstack_grow (&collect_obstack, \" '\", 2);\n+\t  q = *args;\n+\t  while ((p = strchr (q, '\\'')))\n+\t    {\n+\t      obstack_grow (&collect_obstack, q, p - q);\n+\t      obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n+\t      q = ++p;\n+\t    }\n+\t  obstack_grow (&collect_obstack, q, strlen (q));\n+\t  obstack_grow (&collect_obstack, \"'\", 1);\n+\t}\n+    }\n+  obstack_grow (&collect_obstack, \"\\0\", 1);\n+  putenv (obstack_finish (&collect_obstack));\n+}\n \f\n /* Process a spec string, accumulating and running commands.  */\n \n@@ -4058,6 +4115,8 @@ do_spec (spec)\n       if (argbuf_index > 0 && !strcmp (argbuf[argbuf_index - 1], \"|\"))\n \targbuf_index--;\n \n+      set_collect_gcc_options ();\n+\n       if (argbuf_index > 0)\n \tvalue = execute ();\n     }\n@@ -4128,6 +4187,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      argbuf_index--;\n \t  }\n \n+\tset_collect_gcc_options ();\n+\n \tif (argbuf_index > 0)\n \t  {\n \t    value = execute ();\n@@ -5506,7 +5567,7 @@ is_directory (path1, path2, linker)\n /* Set up the various global variables to indicate that we're processing\n    the input file named FILENAME.  */\n \n-static void\n+void\n set_input (filename)\n      const char *filename;\n {\n@@ -5668,52 +5729,6 @@ main (argc, argv)\n \n   process_command (argc, argv);\n \n-  {\n-    int first_time;\n-\n-    /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n-       the compiler.  */\n-    obstack_grow (&collect_obstack, \"COLLECT_GCC_OPTIONS=\",\n-\t\t  sizeof (\"COLLECT_GCC_OPTIONS=\") - 1);\n-\n-    first_time = TRUE;\n-    for (i = 0; (int) i < n_switches; i++)\n-      {\n-\tconst char *const *args;\n-\tconst char *p, *q;\n-\tif (!first_time)\n-\t  obstack_grow (&collect_obstack, \" \", 1);\n-\n-\tfirst_time = FALSE;\n-\tobstack_grow (&collect_obstack, \"'-\", 2);\n-\tq = switches[i].part1;\n-\twhile ((p = strchr (q, '\\'')))\n-\t  {\n-\t    obstack_grow (&collect_obstack, q, p - q);\n-\t    obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n-\t    q = ++p;\n-\t  }\n-\tobstack_grow (&collect_obstack, q, strlen (q));\n-\tobstack_grow (&collect_obstack, \"'\", 1);\n-\n-\tfor (args = switches[i].args; args && *args; args++)\n-\t  {\n-\t    obstack_grow (&collect_obstack, \" '\", 2);\n-\t    q = *args;\n-\t    while ((p = strchr (q, '\\'')))\n-\t      {\n-\t\tobstack_grow (&collect_obstack, q, p - q);\n-\t\tobstack_grow (&collect_obstack, \"'\\\\''\", 4);\n-\t\tq = ++p;\n-\t      }\n-\t    obstack_grow (&collect_obstack, q, strlen (q));\n-\t    obstack_grow (&collect_obstack, \"'\", 1);\n-\t  }\n-      }\n-    obstack_grow (&collect_obstack, \"\\0\", 1);\n-    putenv (obstack_finish (&collect_obstack));\n-  }\n-\n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */\n "}, {"sha": "206089ad5dad19fb74280b583c4bc2fad82951b0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b856c15d7e97280853a83042ccb3ba29c79e7e9f", "patch": "@@ -1,3 +1,14 @@\n+2001-11-27  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* jvspec.c (jvgenmain_spec): Cannot use %umain, breaks\n+\tASM_FINAL_SPEC.\n+\t(lang_specific_pre_link): Use set_input to set input_filename.\n+\tAppend `main' here.\n+\t* jvgenmain.c (usage): Append literal `main' to CLASSNAME.\n+\t(main): Fix definition.\n+\tStrip `main' from classname.\n+\tFixes PR java/227.\n+\n 2001-11-18  Roger Sayle <roger@eyesopen.com>\n \n \t* parse.h (java_expand_switch): Remove old prototype."}, {"sha": "9a425715066180edad4b8d8578f8ede0175302ad", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=b856c15d7e97280853a83042ccb3ba29c79e7e9f", "patch": "@@ -61,14 +61,14 @@ static void usage (const char *) ATTRIBUTE_NORETURN;\n static void\n usage (const char *name)\n {\n-  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAME [OUTFILE]\\n\", name);\n+  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAMEmain [OUTFILE]\\n\", name);\n   exit (1);\n }\n \n int\n-main (int argc, const char **argv)\n+main (int argc, char **argv)\n {\n-  const char *classname;\n+  char *classname, *p;\n   FILE *stream;\n   const char *mangled_classname;\n   int i, last_arg;\n@@ -92,6 +92,13 @@ main (int argc, const char **argv)\n \n   classname = argv[i];\n \n+  /* gcj always appends `main' to classname.  We need to strip this here.  */\n+  p = strrchr (classname, 'm');\n+  if (p == NULL || p == classname || strcmp (p, \"main\") != 0)\n+    usage (argv[0]);\n+  else\n+    *p = '\\0';\n+\n   gcc_obstack_init (mangle_obstack);\n   mangled_classname = do_mangle_classname (classname);\n "}, {"sha": "0150d039ee629796febc18cd2498eb144d8172e1", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b856c15d7e97280853a83042ccb3ba29c79e7e9f/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=b856c15d7e97280853a83042ccb3ba29c79e7e9f", "patch": "@@ -54,8 +54,8 @@ int lang_specific_extra_outfiles = 0;\n int shared_libgcc = 1;\n \n const char jvgenmain_spec[] =\n-  \"jvgenmain %{D*} %i %{!pipe:%umain.i} |\\n\\\n-   cc1 %{!pipe:%Umain.i} %1 \\\n+  \"jvgenmain %{D*} %b %{!pipe:%u.i} |\\n\\\n+   cc1 %{!pipe:%U.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n \t\t   %{g*} %{O*} \\\n \t\t   %{v:-version} %{pg:-p} %{p}\\\n@@ -71,8 +71,8 @@ const char jvgenmain_spec[] =\n \t\t   %{f*} -fdollars-in-identifiers\\\n \t\t   %{aux-info*}\\\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%Umain.s}} |\\n\\\n-              %{!S:as %a %Y -o %d%w%umain%O %{!pipe:%Umain.s} %A\\n }\";\n+\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n+              %{!S:as %a %Y -o %d%w%u%O %{!pipe:%g.s} %A\\n }\";\n \n /* Return full path name of spec file if it is in DIR, or NULL if\n    not.  */\n@@ -571,8 +571,14 @@ lang_specific_pre_link ()\n   int err;\n   if (main_class_name == NULL)\n     return 0;\n-  input_filename = main_class_name;\n-  input_filename_length = strlen (main_class_name);\n+  /* Append `main' to make the filename unique and allow\n+\n+\tgcj --main=hello -save-temps hello.java\n+\n+     to work.  jvgenmain needs to strip this `main' to arrive at the correct\n+     class name.  Append dummy `.c' that can be stripped by set_input so %b\n+     is correct.  */ \n+  set_input (concat (main_class_name, \"main.c\", NULL));\n   err = do_spec (jvgenmain_spec);\n   if (err == 0)\n     {"}]}