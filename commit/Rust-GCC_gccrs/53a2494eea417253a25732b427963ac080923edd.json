{"sha": "53a2494eea417253a25732b427963ac080923edd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNhMjQ5NGVlYTQxNzI1M2EyNTczMmI0Mjc5NjNhYzA4MDkyM2VkZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-04-20T01:10:00Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-04-20T01:10:00Z"}, "message": "c.opt (Wint-to-pointer-cast, [...]): New options.\n\n2005-04-20  Michael Pogue  <michael.pogue@sun.com>\n            Joseph S. Myers  <joseph@codesourcery.com>\n\n\t* c.opt (Wint-to-pointer-cast, Wpointer-to-int-cast): New options.\n\t* c-typeck.c (build_c_cast): Check these options.\n\t* doc/invoke.texi: Document these options.\n\ntestsuite:\n\t* gcc.dg/Wint-to-pointer-cast-1.c,\n\tgcc.dg/Wint-to-pointer-cast-2.c, gcc.dg/Wint-to-pointer-cast-3.c,\n\tgcc.dg/Wpointer-to-int-cast-1.c, gcc.dg/Wpointer-to-int-cast-2.c,\n\tgcc.dg/Wpointer-to-int-cast-3.c: New tests.\n\nFrom-SVN: r98429", "tree": {"sha": "14947a42d28eff84a4539188551c43e15026cc3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14947a42d28eff84a4539188551c43e15026cc3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53a2494eea417253a25732b427963ac080923edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a2494eea417253a25732b427963ac080923edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53a2494eea417253a25732b427963ac080923edd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a2494eea417253a25732b427963ac080923edd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7195b4148a916bab2451894b84e1298b5c42b8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7195b4148a916bab2451894b84e1298b5c42b8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7195b4148a916bab2451894b84e1298b5c42b8fe"}], "stats": {"total": 131, "additions": 128, "deletions": 3}, "files": [{"sha": "6b1c0404a1389a69c99d3ac4191280f366a37840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -1,3 +1,10 @@\n+2005-04-20  Michael Pogue  <michael.pogue@sun.com>\n+            Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (Wint-to-pointer-cast, Wpointer-to-int-cast): New options.\n+\t* c-typeck.c (build_c_cast): Check these options.\n+\t* doc/invoke.texi: Document these options.\n+\n 2005-04-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-phiopt.c: Update a comment about the pass."}, {"sha": "a39d703c0f7d29ae70c0726349135c871388466a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -3259,7 +3259,8 @@ build_c_cast (tree type, tree expr)\n \t  && TYPE_ALIGN (TREE_TYPE (type)) > TYPE_ALIGN (TREE_TYPE (otype)))\n \twarning (\"cast increases required alignment of target type\");\n \n-      if (TREE_CODE (type) == INTEGER_TYPE\n+      if (warn_pointer_to_int_cast\n+\t  && TREE_CODE (type) == INTEGER_TYPE\n \t  && TREE_CODE (otype) == POINTER_TYPE\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (otype)\n \t  && !TREE_CONSTANT (value))\n@@ -3271,7 +3272,8 @@ build_c_cast (tree type, tree expr)\n \twarning (\"cast from function call of type %qT to non-matching \"\n \t\t \"type %qT\", otype, type);\n \n-      if (TREE_CODE (type) == POINTER_TYPE\n+      if (warn_int_to_pointer_cast\n+\t  && TREE_CODE (type) == POINTER_TYPE\n \t  && TREE_CODE (otype) == INTEGER_TYPE\n \t  && TYPE_PRECISION (type) != TYPE_PRECISION (otype)\n \t  /* Don't warn about converting any constant.  */"}, {"sha": "ee456fc45ccf4edefd86e3648cab606d4f93974b", "filename": "gcc/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -226,6 +226,10 @@ Wimport\n C ObjC C++ ObjC++\n Deprecated.  This switch has no effect.\n \n+Wint-to-pointer-cast\n+C ObjC Var(warn_int_to_pointer_cast) Init(1)\n+Warn when there is a cast to a pointer from an integer of a different size\n+\n Winvalid-offsetof\n C++ ObjC++ Var(warn_invalid_offsetof) Init(1)\n Warn about invalid uses of the \\\"offsetof\\\" macro\n@@ -314,6 +318,10 @@ Wpointer-arith\n C ObjC C++ ObjC++ Var(warn_pointer_arith)\n Warn about function pointer arithmetic\n \n+Wpointer-to-int-cast\n+C ObjC Var(warn_pointer_to_int_cast) Init(1)\n+Warn when a pointer is cast to an integer of a different size\n+\n Wprotocol\n ObjC ObjC++ Var(warn_protocol) Init(1)\n Warn if inherited methods are unimplemented"}, {"sha": "cb1e7761289d524311f0204b946c0b33278d4bb8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -221,13 +221,15 @@ Objective-C and Objective-C++ Dialects}.\n -Wformat-security  -Wformat-y2k @gol\n -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int @gol\n -Wimport  -Wno-import  -Winit-self  -Winline @gol\n+-Wno-int-to-pointer-cast @gol\n -Wno-invalid-offsetof  -Winvalid-pch @gol\n -Wlarger-than-@var{len}  -Wlong-long @gol\n -Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n -Wmissing-noreturn @gol\n -Wno-multichar  -Wnonnull  -Wpacked  -Wpadded @gol\n--Wparentheses  -Wpointer-arith  -Wredundant-decls @gol\n+-Wparentheses  -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n+-Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n -Wsign-compare  -Wstrict-aliasing -Wstrict-aliasing=2 @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum @gol\n@@ -3179,6 +3181,16 @@ warning about it.\n The restrictions on @samp{offsetof} may be relaxed in a future version\n of the C++ standard.\n \n+@item -Wno-int-to-pointer-cast @r{(C only)}\n+@opindex Wno-int-to-pointer-cast\n+Suppress warnings from casts to pointer type of an integer of a\n+different size.\n+\n+@item -Wno-pointer-to-int-cast @r{(C only)}\n+@opindex Wno-pointer-to-int-cast\n+Suppress warnings from casts from a pointer to an integer type of a\n+different size.\n+\n @item -Winvalid-pch\n @opindex Winvalid-pch\n Warn if a precompiled header (@pxref{Precompiled Headers}) is found in"}, {"sha": "8b2e027ca41e6195546da3dfbfdffdf4fe993564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -1,3 +1,10 @@\n+2005-04-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/Wint-to-pointer-cast-1.c,\n+\tgcc.dg/Wint-to-pointer-cast-2.c, gcc.dg/Wint-to-pointer-cast-3.c,\n+\tgcc.dg/Wpointer-to-int-cast-1.c, gcc.dg/Wpointer-to-int-cast-2.c,\n+\tgcc.dg/Wpointer-to-int-cast-3.c: New tests.\n+\n 2005-04-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/16861"}, {"sha": "ddb10577d08f7416ebafe40240636990857f07a5", "filename": "gcc/testsuite/gcc.dg/Wint-to-pointer-cast-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-1.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -0,0 +1,12 @@\n+/* Test -Wint-to-pointer-cast - on by default.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+char c;\n+\n+void *\n+f (void)\n+{\n+  return (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+}"}, {"sha": "e4c980dd42c59c6f6c788ffe373b04c06c704a08", "filename": "gcc/testsuite/gcc.dg/Wint-to-pointer-cast-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-2.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -0,0 +1,12 @@\n+/* Test -Wint-to-pointer-cast.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wint-to-pointer-cast\" } */\n+\n+char c;\n+\n+void *\n+f (void)\n+{\n+  return (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+}"}, {"sha": "457a53afedd925f96a3806ce6c59b0e69a604e2b", "filename": "gcc/testsuite/gcc.dg/Wint-to-pointer-cast-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-to-pointer-cast-3.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -0,0 +1,20 @@\n+/* Test -Wno-int-to-pointer-cast.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-int-to-pointer-cast\" } */\n+\n+char c;\n+\n+void *\n+f (void)\n+{\n+  return (void *) c;\n+}\n+\n+void *p;\n+\n+char\n+g (void)\n+{\n+  return (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+}"}, {"sha": "d9362a2d119e033951b957a15a7612e8ef718adc", "filename": "gcc/testsuite/gcc.dg/Wpointer-to-int-cast-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-1.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -0,0 +1,12 @@\n+/* Test -Wpointer-to-int-cast - on by default.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void *p;\n+\n+char\n+f (void)\n+{\n+  return (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+}"}, {"sha": "a8d97ea6d2a3c3d56a40e2a7d8faabc6e37bf439", "filename": "gcc/testsuite/gcc.dg/Wpointer-to-int-cast-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-2.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -0,0 +1,12 @@\n+/* Test -Wpointer-to-int-cast.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wpointer-to-int-cast\" } */\n+\n+void *p;\n+\n+char\n+f (void)\n+{\n+  return (char) p; /* { dg-warning \"warning: cast from pointer to integer of different size\" } */\n+}"}, {"sha": "12bfd4284d47f4b9157240cbcdcf4d2d8025033c", "filename": "gcc/testsuite/gcc.dg/Wpointer-to-int-cast-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a2494eea417253a25732b427963ac080923edd/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-to-int-cast-3.c?ref=53a2494eea417253a25732b427963ac080923edd", "patch": "@@ -0,0 +1,21 @@\n+/* Test -Wno-pointer-to-int-cast.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-pointer-to-int-cast\" } */\n+\n+void *p;\n+\n+char\n+f (void)\n+{\n+  return (char) p;\n+}\n+\n+\n+char c;\n+\n+void *\n+g (void)\n+{\n+  return (void *) c; /* { dg-warning \"warning: cast to pointer from integer of different size\" } */\n+}"}]}