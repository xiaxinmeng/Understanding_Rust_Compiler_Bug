{"sha": "9e8be1e49e810a2147662a085f5b2e62d79c06b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU4YmUxZTQ5ZTgxMGEyMTQ3NjYyYTA4NWY1YjJlNjJkNzljMDZiOQ==", "commit": {"author": {"name": "Hariharan Sandanagobalane", "email": "hariharan@picochip.com", "date": "2009-01-30T10:25:54Z"}, "committer": {"name": "Hariharan Sandanagobalane", "email": "hariharans@gcc.gnu.org", "date": "2009-01-30T10:25:54Z"}, "message": "picochip.c (flag_conserve_stack): set PARAM_LARGE_STACK_FRAME and PARAM_STACK_FRAME_GROWTH to zero under...\n\n        * config/picochip/picochip.c (flag_conserve_stack): set\n        PARAM_LARGE_STACK_FRAME and PARAM_STACK_FRAME_GROWTH to zero under\n        fconserve-stack. Reduce call-overhead used by inliner.\n\nFrom-SVN: r143785", "tree": {"sha": "8239064a5f039dd58adc19e087aca9d4d9e48c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8239064a5f039dd58adc19e087aca9d4d9e48c53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e8be1e49e810a2147662a085f5b2e62d79c06b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8be1e49e810a2147662a085f5b2e62d79c06b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e8be1e49e810a2147662a085f5b2e62d79c06b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8be1e49e810a2147662a085f5b2e62d79c06b9/comments", "author": null, "committer": null, "parents": [{"sha": "df9198abb2b7096e0be52419bacf35b94585bdb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9198abb2b7096e0be52419bacf35b94585bdb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9198abb2b7096e0be52419bacf35b94585bdb4"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "6dc807bb4ca92fa966d2117be07312c5806bd534", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e8be1e49e810a2147662a085f5b2e62d79c06b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e8be1e49e810a2147662a085f5b2e62d79c06b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e8be1e49e810a2147662a085f5b2e62d79c06b9", "patch": "@@ -1,3 +1,9 @@\n+Hariharan Sandanagobalane <hariharan@picochip.com>\n+\n+\t* config/picochip/picochip.c (flag_conserve_stack): set\n+\tPARAM_LARGE_STACK_FRAME and PARAM_STACK_FRAME_GROWTH to zero under\n+\tfconserve-stack. Reduce call-overhead used by inliner.\n+\n Hariharan Sandanagobalane <hariharan@picochip.com>\n \n \tPR/38157"}, {"sha": "a0686bdb262b56ee51948f35c466621fee230ba0", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e8be1e49e810a2147662a085f5b2e62d79c06b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e8be1e49e810a2147662a085f5b2e62d79c06b9/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=9e8be1e49e810a2147662a085f5b2e62d79c06b9", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not, see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"reload.h\"\n+#include \"params.h\"\n \n #include \"picochip-protos.h\"\n \n@@ -303,6 +304,16 @@ picochip_return_in_memory(const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n void\n picochip_override_options (void)\n {\n+  /* If we are optimizing for stack, dont let inliner to inline functions\n+     that could potentially increase stack size.*/\n+   if (flag_conserve_stack)\n+   {\n+     PARAM_VALUE (PARAM_LARGE_STACK_FRAME) = 0;\n+     PARAM_VALUE (PARAM_STACK_FRAME_GROWTH) = 0;\n+   }\n+   /* The function call overhead on picochip is not very high. Let the\n+      inliner know so its heuristics become more reasonable. */\n+   PARAM_VALUE (PARAM_INLINE_CALL_COST) = 2;\n \n   /* Turn off the elimination of unused types. The elaborator\n      generates various interesting types to represent constants,"}]}