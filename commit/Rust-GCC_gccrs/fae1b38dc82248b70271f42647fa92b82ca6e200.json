{"sha": "fae1b38dc82248b70271f42647fa92b82ca6e200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlMWIzOGRjODIyNDhiNzAyNzFmNDI2NDdmYTkyYjgyY2E2ZTIwMA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-11T09:45:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-11T09:45:39Z"}, "message": "re PR tree-optimization/16437 (New c-torture failures after bitfield patch)\n\n\tPR tree-optimization/16437\n\t* c-common.c (shorten_compare): Don't mark result of conversion to\n\tnarrower signed type as overflowing.\n\t* fold-const.c (decode_field_reference): Determine whether\n\tsignedness comes from outer type using precision rather than size.\n\ntestsuite:\n\t* gcc.c-torture/execute/bitfld-4.c: New test.\n\nFrom-SVN: r84498", "tree": {"sha": "1b02a4649bd7dcfe9f9116eb1060eb0d1e1d01b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b02a4649bd7dcfe9f9116eb1060eb0d1e1d01b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae1b38dc82248b70271f42647fa92b82ca6e200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae1b38dc82248b70271f42647fa92b82ca6e200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae1b38dc82248b70271f42647fa92b82ca6e200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae1b38dc82248b70271f42647fa92b82ca6e200/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3998a4453d9aa086113cb353eebda4c0a87563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d3998a4453d9aa086113cb353eebda4c0a87563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d3998a4453d9aa086113cb353eebda4c0a87563"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "efd1f2465e268c6fd1cd4078b60f3a8fc990c7d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fae1b38dc82248b70271f42647fa92b82ca6e200", "patch": "@@ -1,3 +1,11 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR tree-optimization/16437\n+\t* c-common.c (shorten_compare): Don't mark result of conversion to\n+\tnarrower signed type as overflowing.\n+\t* fold-const.c (decode_field_reference): Determine whether\n+\tsignedness comes from outer type using precision rather than size.\n+\n 2004-07-11  Phil Edwards  <phil@codesourcery.com>\n \n \t* configure.ac:  Alphabetize --enable-checking list, add"}, {"sha": "e177d884b2bbbdc5db28133879102cd110eb906a", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fae1b38dc82248b70271f42647fa92b82ca6e200", "patch": "@@ -1924,7 +1924,12 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t*restype_ptr = c_common_signed_type (*restype_ptr);\n \n       if (TREE_TYPE (primop1) != *restype_ptr)\n-\tprimop1 = convert (*restype_ptr, primop1);\n+\t{\n+\t  tree tmp = convert (*restype_ptr, primop1);\n+\t  TREE_OVERFLOW (tmp) = TREE_OVERFLOW (primop1);\n+\t  TREE_CONSTANT_OVERFLOW (tmp) = TREE_CONSTANT_OVERFLOW (primop1);\n+\t  primop1 = tmp;\n+\t}\n       if (type != *restype_ptr)\n \t{\n \t  minval = convert (*restype_ptr, minval);"}, {"sha": "b35dfbf390319553bd69bf7eedaa0cf7953f7e98", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fae1b38dc82248b70271f42647fa92b82ca6e200", "patch": "@@ -3296,7 +3296,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   /* If the number of bits in the reference is the same as the bitsize of\n      the outer type, then the outer type gives the signedness. Otherwise\n      (in case of a small bitfield) the signedness is unchanged.  */\n-  if (outer_type && *pbitsize == tree_low_cst (TYPE_SIZE (outer_type), 1))\n+  if (outer_type && *pbitsize == TYPE_PRECISION (outer_type))\n     *punsignedp = TYPE_UNSIGNED (outer_type);\n \n   /* Compute the mask to access the bitfield.  */"}, {"sha": "20104dd0da811ffbc5cd7296c8063304bc9f70be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fae1b38dc82248b70271f42647fa92b82ca6e200", "patch": "@@ -1,3 +1,8 @@\n+2004-07-11  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR tree-optimization/16437\n+\t* gcc.c-torture/execute/bitfld-4.c: New test.\n+\n 2004-07-10  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \t\n \t* gfortran.fortran-torture/execute/common_2.f90: Add check for"}, {"sha": "6f7d7e25c2f9c9695117f1506a2ef05613818629", "filename": "gcc/testsuite/gcc.c-torture/execute/bitfld-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae1b38dc82248b70271f42647fa92b82ca6e200/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-4.c?ref=fae1b38dc82248b70271f42647fa92b82ca6e200", "patch": "@@ -0,0 +1,21 @@\n+/* When comparisons of bit-fields to unsigned constants got shortened,\n+   the shortened signed constant was wrongly marked as overflowing,\n+   leading to a later integer_zerop failure and misoptimization.\n+\n+   Related to bug tree-optimization/16437 but shows the problem on\n+   32-bit systems.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+\n+extern void abort (void);\n+\n+struct s { int a:12, b:20; };\n+\n+struct s x = { -123, -456 };\n+\n+int\n+main (void)\n+{\n+  if (x.a != -123U || x.b != -456U)\n+    abort ();\n+  return 0;\n+}"}]}