{"sha": "7c9560a578a06125cb30458a26605f91feb29b0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5NTYwYTU3OGEwNjEyNWNiMzA0NThhMjY2MDVmOTFmZWIyOWIwZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-01-13T15:50:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-01-13T15:50:11Z"}, "message": "tree-ssa-dse.c (decrement_count): New function.\n\n\t* tree-ssa-dse.c (decrement_count): New function.\n\t(increment_start_addr, maybe_trim_memstar_call): Likewise.\n\t(dse_dom_walker::optimize_stmt): Call maybe_trim_memstar_call directly\n\twhen we know the partially dead statement is a mem* function.\n\n\t* gcc.dg/tree-ssa/ssa-dse-25.c: New test.\n\nFrom-SVN: r244444", "tree": {"sha": "adb4b9543c487f0b0c01eb958a60ade732154805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb4b9543c487f0b0c01eb958a60ade732154805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c9560a578a06125cb30458a26605f91feb29b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9560a578a06125cb30458a26605f91feb29b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9560a578a06125cb30458a26605f91feb29b0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9560a578a06125cb30458a26605f91feb29b0d/comments", "author": null, "committer": null, "parents": [{"sha": "9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e59e99a6016420f36eb3a2a8a7912c58ef99a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e59e99a6016420f36eb3a2a8a7912c58ef99a17"}], "stats": {"total": 118, "additions": 117, "deletions": 1}, "files": [{"sha": "203967016730ff9e5529eea105a770b79d84d9fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c9560a578a06125cb30458a26605f91feb29b0d", "patch": "@@ -1,5 +1,10 @@\n 2017-01-13  Jeff Law  <law@redhat.com>\n \n+\t* tree-ssa-dse.c (decrement_count): New function.\n+\t(increment_start_addr, maybe_trim_memstar_call): Likewise.\n+\t(dse_dom_walker::optimize_stmt): Call maybe_trim_memstar_call directly\n+\twhen we know the partially dead statement is a mem* function.\n+\n \tPR tree-optimization/61912\n \tPR tree-optimization/77485\n \t* tree-ssa-dse.c: Include expr.h."}, {"sha": "3dd5ae1ffea70219c499b8660a69bf49b9f215f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c9560a578a06125cb30458a26605f91feb29b0d", "patch": "@@ -1,5 +1,7 @@\n 2017-01-13  Jeff Law  <law@redhat.com>\n \n+\t* gcc.dg/tree-ssa/ssa-dse-25.c: New test.\n+\n \tPR tree-optimization/61912\n \tPR tree-optimization/77485\n \t* g++.dg/tree-ssa/ssa-dse-1.C: New test."}, {"sha": "8b7db3a238545eded92fd97413955e31a1839c89", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-25.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-25.c?ref=7c9560a578a06125cb30458a26605f91feb29b0d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse1-details -w\" } */\n+\n+char z[32];\n+\n+\n+int\n+foo(void)\n+{\n+  memset (z, 0, 16);\n+  memset (z+8, 0, 24);\n+}\n+\n+/* { dg-final { scan-tree-dump \"memset .&z, 0, 8.\" \"dse1\" } } */\n+\n+"}, {"sha": "20cf3b4c7fd143481f94cd50e316221528bc7659", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9560a578a06125cb30458a26605f91feb29b0d/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=7c9560a578a06125cb30458a26605f91feb29b0d", "patch": "@@ -332,6 +332,99 @@ maybe_trim_constructor_store (ao_ref *ref, sbitmap live, gimple *stmt)\n     }\n }\n \n+/* STMT is a memcpy, memmove or memset.  Decrement the number of bytes\n+   copied/set by DECREMENT.  */\n+static void\n+decrement_count (gimple *stmt, int decrement)\n+{\n+  tree *countp = gimple_call_arg_ptr (stmt, 2);\n+  gcc_assert (TREE_CODE (*countp) == INTEGER_CST);\n+  *countp = wide_int_to_tree (TREE_TYPE (*countp), (TREE_INT_CST_LOW (*countp)\n+\t\t\t\t\t\t    - decrement));\n+\n+}\n+\n+static void\n+increment_start_addr (gimple *stmt, tree *where, int increment)\n+{\n+  if (TREE_CODE (*where) == SSA_NAME)\n+    {\n+      tree tem = make_ssa_name (TREE_TYPE (*where));\n+      gassign *newop\n+        = gimple_build_assign (tem, POINTER_PLUS_EXPR, *where,\n+\t\t\t       build_int_cst (sizetype, increment));\n+      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+      gsi_insert_before (&gsi, newop, GSI_SAME_STMT);\n+      *where = tem;\n+      update_stmt (gsi_stmt (gsi));\n+      return;\n+    }\n+\n+  *where = build_fold_addr_expr (fold_build2 (MEM_REF, char_type_node,\n+                                             *where,\n+                                             build_int_cst (ptr_type_node,\n+                                                            increment)));\n+}\n+\n+/* STMT is builtin call that writes bytes in bitmap ORIG, some bytes are dead\n+   (ORIG & ~NEW) and need not be stored.  Try to rewrite STMT to reduce\n+   the amount of data it actually writes.\n+\n+   Right now we only support trimming from the head or the tail of the\n+   memory region.  In theory we could split the mem* call, but it's\n+   likely of marginal value.  */\n+\n+static void\n+maybe_trim_memstar_call (ao_ref *ref, sbitmap live, gimple *stmt)\n+{\n+  switch (DECL_FUNCTION_CODE (gimple_call_fndecl (stmt)))\n+    {\n+    case BUILT_IN_MEMCPY:\n+    case BUILT_IN_MEMMOVE:\n+      {\n+\tint head_trim, tail_trim;\n+\tcompute_trims (ref, live, &head_trim, &tail_trim);\n+\n+\t/* Tail trimming is easy, we can just reduce the count.  */\n+        if (tail_trim)\n+\t  decrement_count (stmt, tail_trim);\n+\n+\t/* Head trimming requires adjusting all the arguments.  */\n+        if (head_trim)\n+          {\n+\t    tree *dst = gimple_call_arg_ptr (stmt, 0);\n+\t    increment_start_addr (stmt, dst, head_trim);\n+\t    tree *src = gimple_call_arg_ptr (stmt, 1);\n+\t    increment_start_addr (stmt, src, head_trim);\n+\t    decrement_count (stmt, head_trim);\n+\t  }\n+        break;\n+      }\n+\n+    case BUILT_IN_MEMSET:\n+      {\n+\tint head_trim, tail_trim;\n+\tcompute_trims (ref, live, &head_trim, &tail_trim);\n+\n+\t/* Tail trimming is easy, we can just reduce the count.  */\n+        if (tail_trim)\n+\t  decrement_count (stmt, tail_trim);\n+\n+\t/* Head trimming requires adjusting all the arguments.  */\n+        if (head_trim)\n+          {\n+\t    tree *dst = gimple_call_arg_ptr (stmt, 0);\n+\t    increment_start_addr (stmt, dst, head_trim);\n+\t    decrement_count (stmt, head_trim);\n+\t  }\n+\tbreak;\n+      }\n+\n+      default:\n+\tbreak;\n+    }\n+}\n+\n /* STMT is a memory write where one or more bytes written are dead\n    stores.  ORIG is the bitmap of bytes stored by STMT.  LIVE is the\n    bitmap of stores that are actually live.\n@@ -619,7 +712,7 @@ dse_dom_walker::dse_optimize_stmt (gimple_stmt_iterator *gsi)\n \n \t      if (store_status == DSE_STORE_MAYBE_PARTIAL_DEAD)\n \t\t{\n-\t\t  maybe_trim_partially_dead_store (&ref, m_live_bytes, stmt);\n+\t\t  maybe_trim_memstar_call (&ref, m_live_bytes, stmt);\n \t\t  return;\n \t\t}\n "}]}