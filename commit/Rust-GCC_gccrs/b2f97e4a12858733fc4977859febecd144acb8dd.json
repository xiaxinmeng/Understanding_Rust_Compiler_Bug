{"sha": "b2f97e4a12858733fc4977859febecd144acb8dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJmOTdlNGExMjg1ODczM2ZjNDk3Nzg1OWZlYmVjZDE0NGFjYjhkZA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2005-05-02T04:22:45Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2005-05-02T04:22:45Z"}, "message": "re PR c++/19542 (attribute(sentinel) has problems with C++ __null)\n\n        PR c++/19542\n        * c-common.c (c_common_nodes_and_builtins): Create global null_node.\n        (warn_strict_null_sentinel): Define.\n        (check_function_sentinel): Check for null_node as valid sentinel too.\n        * c-common.h (c_tree_index): Added CTI_NULL.\n        (null_node) Define global_tree[CTI_NULL].\n        (warn_strict_null_sentinel): Declare.\n        * c-opts.c: (c_common_handle_option): Handle -Wstrict-null-sentinel.\n        * c.opt: (Wstrict-null-sentinel): New C++ option.\n        * doc/invoke.texi (C++ Options): Document -Wstrict-null-sentinel.\n\n        * cp-tree.h (cp_tree_index): Remove CPTI_NULL, to be defined in C\n        common frontend.\n        (null_node): Remove.\n        * lex.c (cxx_init): Move null_node initialisation to C common frontend.\n\n        * g++.dg/warn/sentinel.C: New testcase for __null sentinels added.\n\nFrom-SVN: r99091", "tree": {"sha": "81e0ec0700839598638506aadcfb471636db87e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e0ec0700839598638506aadcfb471636db87e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2f97e4a12858733fc4977859febecd144acb8dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f97e4a12858733fc4977859febecd144acb8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f97e4a12858733fc4977859febecd144acb8dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f97e4a12858733fc4977859febecd144acb8dd/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8f9fb4526bea97382af2024b7b268725d544239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f9fb4526bea97382af2024b7b268725d544239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f9fb4526bea97382af2024b7b268725d544239"}], "stats": {"total": 97, "additions": 85, "deletions": 12}, "files": [{"sha": "8efc9dc7c9bc38f8811a55d8ef2097b8dfcea76b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -1,3 +1,16 @@\n+2005-05-02  Michael Matz  <matz@suse.de>\n+\n+\tPR c++/19542\n+\t* c-common.c (c_common_nodes_and_builtins): Create global null_node.\n+\t(warn_strict_null_sentinel): Define.\n+\t(check_function_sentinel): Check for null_node as valid sentinel too.\n+\t* c-common.h (c_tree_index): Added CTI_NULL.\n+\t(null_node) Define global_tree[CTI_NULL].\n+\t(warn_strict_null_sentinel): Declare.\n+\t* c-opts.c: (c_common_handle_option): Handle -Wstrict-null-sentinel.\n+\t* c.opt: (Wstrict-null-sentinel): New C++ option.\n+\t* doc/invoke.texi (C++ Options): Document -Wstrict-null-sentinel.\n+\n 2005-05-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gimplify.c (gimplify_compound_lval): Use VEC instead of"}, {"sha": "22aa82e8d48a9038c36a8075366d898362f61ceb", "filename": "gcc/c-common.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -284,6 +284,12 @@ int warn_unknown_pragmas; /* Tri state variable.  */\n \n int warn_format;\n \n+/* Warn about using __null (as NULL in C++) as sentinel.  For code compiled\n+   with GCC this doesn't matter as __null is guaranteed to have the right\n+   size.  */\n+\n+int warn_strict_null_sentinel;\n+\n /* Zero means that faster, ...NonNil variants of objc_msgSend...\n    calls will be used in ObjC; passing nil receivers to such calls\n    will most likely result in crashes.  */\n@@ -3279,6 +3285,11 @@ c_common_nodes_and_builtins (void)\n     mudflap_init ();\n \n   main_identifier_node = get_identifier (\"main\");\n+\n+  /* Create the built-in __null node.  It is important that this is\n+     not shared.  */\n+  null_node = make_node (INTEGER_CST);\n+  TREE_TYPE (null_node) = c_common_type_for_size (POINTER_SIZE, 0);\n }\n \n /* Look up the function in built_in_decls that corresponds to DECL\n@@ -5134,8 +5145,15 @@ check_function_sentinel (tree attrs, tree params)\n \t    }\n \n \t  /* Validate the sentinel.  */\n-\t  if (!POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (sentinel)))\n-\t      || !integer_zerop (TREE_VALUE (sentinel)))\n+\t  if ((!POINTER_TYPE_P (TREE_TYPE (TREE_VALUE (sentinel)))\n+\t       || !integer_zerop (TREE_VALUE (sentinel)))\n+\t      /* Although __null (in C++) is only an integer we allow it\n+\t\t nevertheless, as we are guaranteed that it's exactly\n+\t\t as wide as a pointer, and we don't want to force\n+\t\t users to cast the NULL they have written there.\n+\t\t We warn with -Wstrict-null-sentinel, though.  */\n+              && (warn_strict_null_sentinel\n+\t\t  || null_node != TREE_VALUE (sentinel)))\n \t    warning (0, \"missing sentinel in function call\");\n \t}\n     }"}, {"sha": "c43531bc88a2b7e2c90164e6beab611129ca081f", "filename": "gcc/c-common.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -159,6 +159,8 @@ enum c_tree_index\n     \n     CTI_VOID_ZERO,\n \n+    CTI_NULL,\n+\n     CTI_MAX\n };\n \n@@ -203,6 +205,9 @@ struct c_common_identifier GTY(())\n /* A node for `((void) 0)'.  */\n #define void_zero_node                  c_global_trees[CTI_VOID_ZERO]\n \n+/* The node for C++ `__null'.  */\n+#define null_node                       c_global_trees[CTI_NULL]\n+\n extern GTY(()) tree c_global_trees[CTI_MAX];\n \n /* In a RECORD_TYPE, a sorted array of the fields of the type, not a\n@@ -570,6 +575,12 @@ extern int flag_threadsafe_statics;\n \n extern int warn_implicit;\n \n+/* Warn about using __null (as NULL in C++) as sentinel.  For code compiled\n+   with GCC this doesn't matter as __null is guaranteed to have the right\n+   size.  */\n+\n+extern int warn_strict_null_sentinel;\n+\n /* Maximum template instantiation depth.  This limit is rather\n    arbitrary, but it exists to limit the time it takes to notice\n    infinite template instantiations.  */"}, {"sha": "ebf23e571d79fb5a94d7930ffb1e6040f5f25e65", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -477,6 +477,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warn_return_type = value;\n       break;\n \n+    case OPT_Wstrict_null_sentinel:\n+      warn_strict_null_sentinel = value;\n+      break;\n+\n     case OPT_Wsystem_headers:\n       cpp_opts->warn_system_headers = value;\n       break;"}, {"sha": "4467df3eb80765bd8bd4018481a18821d975cb68", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -354,6 +354,10 @@ Wsign-promo\n C++ ObjC++ Var(warn_sign_promo)\n Warn when overload promotes from unsigned to signed\n \n+Wstrict-null-sentinel\n+C++ ObjC++\n+Warn about uncasted NULL used as sentinel\n+\n Wstrict-prototypes\n C ObjC Var(warn_strict_prototypes)\n Warn about unprototyped function declarations"}, {"sha": "30fbba682d8d84548dddab69a0add214c5f9b72f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -1,3 +1,11 @@\n+2005-05-02  Michael Matz  <matz@suse.de>\n+\n+\tPR c++/19542\n+\t* cp-tree.h (cp_tree_index): Remove CPTI_NULL, to be defined in C\n+\tcommon frontend.\n+\t(null_node): Remove.\n+\t* lex.c (cxx_init): Move null_node initialisation to C common frontend.\n+\n 2005-04-25  Ian Lance Taylor  <ian@airs.com>\n \n \t* cp-tree.def: Add EXPR_STMT."}, {"sha": "87129241f358927f565dedb3f3ef743be71bb1cb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -518,7 +518,6 @@ enum cp_tree_index\n     CPTI_LANG_NAME_JAVA,\n \n     CPTI_EMPTY_EXCEPT_SPEC,\n-    CPTI_NULL,\n     CPTI_JCLASS,\n     CPTI_TERMINATE,\n     CPTI_CALL_UNEXPECTED,\n@@ -614,9 +613,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n /* Exception specifier used for throw().  */\n #define empty_except_spec               cp_global_trees[CPTI_EMPTY_EXCEPT_SPEC]\n \n-/* The node for `__null'.  */\n-#define null_node                       cp_global_trees[CPTI_NULL]\n-\n /* If non-NULL, a POINTER_TYPE equivalent to (java::lang::Class*).  */\n #define jclass_node                     cp_global_trees[CPTI_JCLASS]\n "}, {"sha": "04f648fddc87903356246049c62985e8cddb877a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -347,11 +347,6 @@ cxx_init (void)\n \n   cxx_init_decl_processing ();\n \n-  /* Create the built-in __null node.  It is important that this is\n-     not shared.  */\n-  null_node = make_node (INTEGER_CST);\n-  TREE_TYPE (null_node) = c_common_type_for_size (POINTER_SIZE, 0);\n-\n   /* The fact that G++ uses COMDAT for many entities (inline\n      functions, template instantiations, virtual tables, etc.) mean\n      that it is fundamentally unreliable to try to make decisions"}, {"sha": "2bb87440a5cd955672dfea16f4ce6f8b967272c5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -185,7 +185,7 @@ in the following sections.\n -fno-default-inline  -fvisibility-inlines-hidden @gol\n -Wabi  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n--Weffc++  -Wno-deprecated @gol\n+-Weffc++  -Wno-deprecated  -Wstrict-null-sentinel @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n -Wsign-promo}\n@@ -1741,6 +1741,14 @@ to filter out those warnings.\n @opindex Wno-deprecated\n Do not warn about usage of deprecated features.  @xref{Deprecated Features}.\n \n+@item -Wstrict-null-sentinel @r{(C++ only)}\n+@opindex Wstrict-null-sentinel\n+Warn also about the use of an uncasted @code{NULL} as sentinel.  When\n+compiling only with GCC this is a valid sentinel, as @code{NULL} is defined\n+to @code{__null}.  Although it is a null pointer constant not a null pointer,\n+it is guaranteed to of the same size as a pointer.  But this use is\n+not portable across different compilers.\n+\n @item -Wno-non-template-friend @r{(C++ only)}\n @opindex Wno-non-template-friend\n Disable warnings when non-templatized friend functions are declared"}, {"sha": "a2fcc8b7a65a6eb12c5c1b99151ca251a9cd7324", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -1,3 +1,8 @@\n+2005-05-02  Michael Matz  <matz@suse.de>\n+\n+\tPR c++/19542\n+\t* g++.dg/warn/sentinel.C: New testcase for __null sentinels added.\n+\n 2005-05-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/cpp/weak.C: New test."}, {"sha": "5f718f83047c249b0717319d701e77d5c70c3517", "filename": "gcc/testsuite/g++.dg/warn/sentinel.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsentinel.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2f97e4a12858733fc4977859febecd144acb8dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsentinel.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fsentinel.C?ref=b2f97e4a12858733fc4977859febecd144acb8dd", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+extern void ex (int i, ...) __attribute__ ((__sentinel__(0)));\n+\n+void f()\n+{\n+  ex (1, 0);\t\t/* { dg-warning \"missing sentinel in function call\" \"\" } */\n+  ex (1, 0L);\t\t/* { dg-warning \"missing sentinel in function call\" \"\" } */\n+  ex (1, (void *)0);\n+  ex (1, __null);\t/* { dg-bogus \"sentinel\" } */\n+}"}]}