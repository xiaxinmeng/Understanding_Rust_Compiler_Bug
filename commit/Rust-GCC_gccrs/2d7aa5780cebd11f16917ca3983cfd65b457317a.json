{"sha": "2d7aa5780cebd11f16917ca3983cfd65b457317a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3YWE1NzgwY2ViZDExZjE2OTE3Y2EzOTgzY2ZkNjViNDU3MzE3YQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2012-11-29T02:30:44Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-11-29T02:30:44Z"}, "message": "re PR c++/52654 ([C++11] Warn on overflow in user-defined literals)\n\ngcc/c-family/\n\n2012-11-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/52654\n\t* c-common.h (overflow_type): New enum.\n\t(build_userdef_literal): Add overflow_type argument.\n\t(tree_userdef_literal): Add overflow_type.\n\t(USERDEF_LITERAL_OVERFLOW): New access macro.\n\t* c-common.c (build_userdef_literal): Add overflow_type\n\targument.\n\t* c-lex.c (c_lex_with_flags): Add overflow_type to\n\tbuild_userdef_literal calls.\n\t(interpret_integer, interpret_float): Add overflow_type argument.\n\n\ngcc/cp/\n\n2012-11-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/52654\n\t* parser.c (cp_parser_string_literal): Add overflow_type arg.\n\t(cp_parser_userdef_numeric_literal): Warn on numeric overflow.\n\n\ngcc/testsuite/\n\n2012-11-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/52654\n\t* g++.dg/cpp0x/udlit-overflow.C: New.\n\t* g++.dg/cpp0x/udlit-overflow-neg.C: New.\n\nFrom-SVN: r193918", "tree": {"sha": "82d134dee495ddba8519c473b5cbfa7009581d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d134dee495ddba8519c473b5cbfa7009581d18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d7aa5780cebd11f16917ca3983cfd65b457317a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7aa5780cebd11f16917ca3983cfd65b457317a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7aa5780cebd11f16917ca3983cfd65b457317a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7aa5780cebd11f16917ca3983cfd65b457317a/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48ac1c945b6960be0f88ed15d6f17ae4788d58db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ac1c945b6960be0f88ed15d6f17ae4788d58db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ac1c945b6960be0f88ed15d6f17ae4788d58db"}], "stats": {"total": 157, "additions": 136, "deletions": 21}, "files": [{"sha": "fb39e9dd79975a9859cedba1a692a90e11759dc4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -1,3 +1,16 @@\n+2012-11-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/52654\n+\t* c-common.h (overflow_type): New enum.\n+\t(build_userdef_literal): Add overflow_type argument.\n+\t(tree_userdef_literal): Add overflow_type.\n+\t(USERDEF_LITERAL_OVERFLOW): New access macro.\n+\t* c-common.c (build_userdef_literal): Add overflow_type\n+\targument.\n+\t* c-lex.c (c_lex_with_flags): Add overflow_type to\n+\tbuild_userdef_literal calls.\n+\t(interpret_integer, interpret_float): Add overflow_type argument.\n+\n 2012-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR c/35634"}, {"sha": "5927edf5ef0d45cf80d3958c9fb63366af565e47", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -11395,11 +11395,13 @@ c_common_init_ts (void)\n    with identifier SUFFIX.  */\n \n tree\n-build_userdef_literal (tree suffix_id, tree value, tree num_string)\n+build_userdef_literal (tree suffix_id, tree value,\n+\t\t       enum overflow_type overflow, tree num_string)\n {\n   tree literal = make_node (USERDEF_LITERAL);\n   USERDEF_LITERAL_SUFFIX_ID (literal) = suffix_id;\n   USERDEF_LITERAL_VALUE (literal) = value;\n+  USERDEF_LITERAL_OVERFLOW (literal) = overflow;\n   USERDEF_LITERAL_NUM_STRING (literal) = num_string;\n   return literal;\n }"}, {"sha": "609be73a8ffb3a870e4a3ab548fc777278770106", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -1089,11 +1089,18 @@ extern tree find_tm_attribute (tree);\n \n /* A suffix-identifier value doublet that represents user-defined literals\n    for C++-0x.  */\n+enum overflow_type {\n+  OT_UNDERFLOW = -1,\n+  OT_NONE,\n+  OT_OVERFLOW\n+};\n+\n struct GTY(()) tree_userdef_literal {\n   struct tree_base base;\n   tree suffix_id;\n   tree value;\n   tree num_string;\n+  enum overflow_type overflow;\n };\n \n #define USERDEF_LITERAL_SUFFIX_ID(NODE) \\\n@@ -1102,13 +1109,18 @@ struct GTY(()) tree_userdef_literal {\n #define USERDEF_LITERAL_VALUE(NODE) \\\n   (((struct tree_userdef_literal *)USERDEF_LITERAL_CHECK (NODE))->value)\n \n+#define USERDEF_LITERAL_OVERFLOW(NODE) \\\n+  (((struct tree_userdef_literal *)USERDEF_LITERAL_CHECK (NODE))->overflow)\n+\n #define USERDEF_LITERAL_NUM_STRING(NODE) \\\n   (((struct tree_userdef_literal *)USERDEF_LITERAL_CHECK (NODE))->num_string)\n \n #define USERDEF_LITERAL_TYPE(NODE) \\\n   (TREE_TYPE (USERDEF_LITERAL_VALUE (NODE)))\n \n-extern tree build_userdef_literal (tree suffix_id, tree value, tree num_string);\n+extern tree build_userdef_literal (tree suffix_id, tree value,\n+\t\t\t\t   enum overflow_type overflow,\n+\t\t\t\t   tree num_string);\n \n extern void convert_vector_to_pointer_for_subscript (location_t, tree*, tree);\n "}, {"sha": "95ec2df2183d4871937b69272805041c5929e5f6", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -43,8 +43,10 @@ static splay_tree file_info_tree;\n int pending_lang_change; /* If we need to switch languages - C++ only */\n int c_header_level;\t /* depth in C headers - C++ only */\n \n-static tree interpret_integer (const cpp_token *, unsigned int);\n-static tree interpret_float (const cpp_token *, unsigned int, const char *);\n+static tree interpret_integer (const cpp_token *, unsigned int,\n+\t\t\t       enum overflow_type *);\n+static tree interpret_float (const cpp_token *, unsigned int, const char *,\n+\t\t\t     enum overflow_type *);\n static tree interpret_fixed (const cpp_token *, unsigned int);\n static enum integer_type_kind narrowest_unsigned_type\n \t(unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT, unsigned int);\n@@ -293,6 +295,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n   const cpp_token *tok;\n   enum cpp_ttype type;\n   unsigned char add_flags = 0;\n+  enum overflow_type overflow = OT_NONE;\n \n   timevar_push (TV_CPP);\n  retry:\n@@ -326,11 +329,11 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t       Set PURE_ZERO to pass this information to the C++ parser.  */\n \t    if (tok->val.str.len == 1 && *tok->val.str.text == '0')\n \t      add_flags = PURE_ZERO;\n-\t    *value = interpret_integer (tok, flags);\n+\t    *value = interpret_integer (tok, flags, &overflow);\n \t    break;\n \n \t  case CPP_N_FLOATING:\n-\t    *value = interpret_float (tok, flags, suffix);\n+\t    *value = interpret_float (tok, flags, suffix, &overflow);\n \t    break;\n \n \t  default:\n@@ -351,8 +354,8 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t    num_string = fix_string_type (num_string);\n \t    str = CONST_CAST (char *, TREE_STRING_POINTER (num_string));\n \t    str[len] = '\\0';\n-\t    literal = build_userdef_literal (suffix_id, *value,\n-\t\t\t\t\t\t  num_string);\n+\t    literal = build_userdef_literal (suffix_id, *value, overflow,\n+\t\t\t\t\t     num_string);\n \t    *value = literal;\n \t  }\n       }\n@@ -443,7 +446,8 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \ttemp_tok.val.str.len -= strlen (suffix);\n \ttemp_tok.type = cpp_userdef_char_remove_type (type);\n \tliteral = build_userdef_literal (get_identifier (suffix),\n-\t\t\t\t\t lex_charconst (&temp_tok), NULL_TREE);\n+\t\t\t\t\t lex_charconst (&temp_tok),\n+\t\t\t\t\t OT_NONE, NULL_TREE);\n \t*value = literal;\n       }\n       break;\n@@ -466,7 +470,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \tstring = build_string (tok->val.str.len - strlen (suffix),\n \t\t\t       (const char *) tok->val.str.text);\n \tliteral = build_userdef_literal (get_identifier (suffix),\n-\t\t\t\t\t string, NULL_TREE);\n+\t\t\t\t\t string, OT_NONE, NULL_TREE);\n \t*value = literal;\n       }\n       break;\n@@ -587,15 +591,20 @@ narrowest_signed_type (unsigned HOST_WIDE_INT low,\n \n /* Interpret TOKEN, an integer with FLAGS as classified by cpplib.  */\n static tree\n-interpret_integer (const cpp_token *token, unsigned int flags)\n+interpret_integer (const cpp_token *token, unsigned int flags,\n+\t\t   enum overflow_type *overflow)\n {\n   tree value, type;\n   enum integer_type_kind itk;\n   cpp_num integer;\n   cpp_options *options = cpp_get_options (parse_in);\n \n+  *overflow = OT_NONE;\n+\n   integer = cpp_interpret_integer (parse_in, token, flags);\n   integer = cpp_num_sign_extend (integer, options->precision);\n+  if (integer.overflow)\n+    *overflow = OT_OVERFLOW;\n \n   /* The type of a constant with a U suffix is straightforward.  */\n   if (flags & CPP_N_UNSIGNED)\n@@ -673,7 +682,7 @@ interpret_integer (const cpp_token *token, unsigned int flags)\n    by cpplib.  For C++0X SUFFIX may contain a user-defined literal suffix.  */\n static tree\n interpret_float (const cpp_token *token, unsigned int flags,\n-\t\t const char *suffix)\n+\t\t const char *suffix, enum overflow_type *overflow)\n {\n   tree type;\n   tree const_type;\n@@ -683,6 +692,8 @@ interpret_float (const cpp_token *token, unsigned int flags,\n   char *copy;\n   size_t copylen;\n \n+  *overflow = OT_NONE;\n+\n   /* Default (no suffix) depends on whether the FLOAT_CONST_DECIMAL64\n      pragma has been used and is either double or _Decimal64.  Types\n      that are not allowed with decimal float default to double.  */\n@@ -786,19 +797,31 @@ interpret_float (const cpp_token *token, unsigned int flags,\n   if (REAL_VALUE_ISINF (real)\n       || (const_type != type && REAL_VALUE_ISINF (real_trunc)))\n     {\n-      if (!MODE_HAS_INFINITIES (TYPE_MODE (type)))\n-\tpedwarn (input_location, 0, \"floating constant exceeds range of %qT\", type);\n-      else\n-\twarning (OPT_Woverflow, \"floating constant exceeds range of %qT\", type);\n+      *overflow = OT_OVERFLOW;\n+      if (!(flags & CPP_N_USERDEF))\n+\t{\n+\t  if (!MODE_HAS_INFINITIES (TYPE_MODE (type)))\n+\t    pedwarn (input_location, 0,\n+\t\t     \"floating constant exceeds range of %qT\", type);\n+\t  else\n+\t    warning (OPT_Woverflow,\n+\t\t     \"floating constant exceeds range of %qT\", type);\n+\t}\n     }\n   /* We also give a warning if the value underflows.  */\n   else if (REAL_VALUES_EQUAL (real, dconst0)\n-\t   || (const_type != type && REAL_VALUES_EQUAL (real_trunc, dconst0)))\n+\t   || (const_type != type\n+\t       && REAL_VALUES_EQUAL (real_trunc, dconst0)))\n     {\n       REAL_VALUE_TYPE realvoidmode;\n-      int overflow = real_from_string (&realvoidmode, copy);\n-      if (overflow < 0 || !REAL_VALUES_EQUAL (realvoidmode, dconst0))\n-\twarning (OPT_Woverflow, \"floating constant truncated to zero\");\n+      int oflow = real_from_string (&realvoidmode, copy);\n+      *overflow = (oflow == 0 ? OT_NONE\n+\t\t\t      : (oflow < 0 ? OT_UNDERFLOW : OT_OVERFLOW));\n+      if (!(flags & CPP_N_USERDEF))\n+\t{\n+\t  if (oflow < 0 || !REAL_VALUES_EQUAL (realvoidmode, dconst0))\n+\t    warning (OPT_Woverflow, \"floating constant truncated to zero\");\n+\t}\n     }\n \n   /* Create a node with determined type and value.  */"}, {"sha": "c202bdf50251707a896107045c7deeaf915a6e51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -1,3 +1,9 @@\n+2012-11-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/52654\n+\t* parser.c (cp_parser_string_literal): Add overflow_type arg.\n+\t(cp_parser_userdef_numeric_literal): Warn on numeric overflow.\n+\n 2012-11-28  Andrew Pinski  <apinski@cavium.com>\n \n \tPR bootstrap/54279"}, {"sha": "1fe6246f03258c538ecf1fa0d702e39732db8635", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -3529,7 +3529,8 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok)\n \n       if (have_suffix_p)\n \t{\n-\t  tree literal = build_userdef_literal (suffix_id, value, NULL_TREE);\n+\t  tree literal = build_userdef_literal (suffix_id, value,\n+\t\t\t\t\t\tOT_NONE, NULL_TREE);\n \t  tok->u.value = literal;\n \t  return cp_parser_userdef_string_literal (tok);\n \t}\n@@ -3661,6 +3662,7 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n   tree literal = token->u.value;\n   tree suffix_id = USERDEF_LITERAL_SUFFIX_ID (literal);\n   tree value = USERDEF_LITERAL_VALUE (literal);\n+  int overflow = USERDEF_LITERAL_OVERFLOW (literal);\n   tree num_string = USERDEF_LITERAL_NUM_STRING (literal);\n   tree name = cp_literal_operator_id (IDENTIFIER_POINTER (suffix_id));\n   tree decl, result;\n@@ -3676,6 +3678,20 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n       result = finish_call_expr (decl, &args, false, true, tf_none);\n       if (result != error_mark_node)\n \t{\n+\t  if (TREE_CODE (TREE_TYPE (value)) == INTEGER_TYPE && overflow > 0)\n+\t    warning_at (token->location, OPT_Woverflow,\n+\t\t        \"integer literal exceeds range of %qT type\",\n+\t\t        long_long_unsigned_type_node);\n+\t  else\n+\t    {\n+\t      if (overflow > 0)\n+\t\twarning_at (token->location, OPT_Woverflow,\n+\t\t\t    \"floating literal exceeds range of %qT type\",\n+\t\t\t    long_double_type_node);\n+\t      else if (overflow < 0)\n+\t\twarning_at (token->location, OPT_Woverflow,\n+\t\t\t    \"floating literal truncated to zero\");\n+\t    }\n \t  release_tree_vector (args);\n \t  return result;\n \t}"}, {"sha": "cea4e76a88ce4e3d617a7062071097efe39c6ba8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -1,3 +1,9 @@\n+2012-11-29  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/52654\n+\t* g++.dg/cpp0x/udlit-overflow.C: New.\n+\t* g++.dg/cpp0x/udlit-overflow-neg.C: New.\n+\n 2012-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/36728"}, {"sha": "ed2de22e49d783d8e20a67727c7d2f3e08bc16db", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-overflow-neg.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow-neg.C?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-std=c++0x -Woverflow\" }\n+// PR c++/52654\n+\n+int\n+operator\"\" _w(unsigned long long)\n+{ return 0; }\n+\n+int\n+operator\"\" _w(long double)\n+{ return 0.0L; }\n+\n+int i = 12345678901234567890123456789012345678901234567890_w;\n+int j = 12345678901234567890123456789.012345678901234567890e+1234567890_w;\n+int k = 12345678901234567890123456789.012345678901234567890e-1234567890_w;\n+\n+// { dg-warning \"integer literal exceeds range of \" \"\" { target *-*-* } 12 }\n+// { dg-warning \"floating literal exceeds range of \" \"\" { target *-*-* } 13 }\n+// { dg-warning \"floating literal truncated to zero\" \"\" { target *-*-* } 14 }"}, {"sha": "85c15721887d988e72704d0e7fc24912e693f0f5", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-overflow.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d7aa5780cebd11f16917ca3983cfd65b457317a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-overflow.C?ref=2d7aa5780cebd11f16917ca3983cfd65b457317a", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options -std=c++0x }\r\n+// PR c++/52654\r\n+\r\n+int\r\n+operator\"\" _w(const char*)\r\n+{ return 0; }\r\n+\r\n+template<char...>\r\n+  int\r\n+  operator\"\" _tw()\r\n+  { return 0; }\r\n+\r\n+int i = 12345678901234567890123456789012345678901234567890_w;\r\n+int j = 12345678901234567890123456789.012345678901234567890e+1234567890_w;\r\n+int k = 12345678901234567890123456789.012345678901234567890e-1234567890_w;\r\n+\r\n+int ti = 12345678901234567890123456789012345678901234567890_tw;\r\n+int tj = 12345678901234567890123456789.012345678901234567890e+1234567890_tw;\r\n+int tk = 12345678901234567890123456789.012345678901234567890e-1234567890_tw;\r"}]}