{"sha": "42f4929d5a0ef969f8657e463c52a2f6af3758e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmNDkyOWQ1YTBlZjk2OWY4NjU3ZTQ2M2M1MmEyZjZhZjM3NThlOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-10-28T22:40:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1997-10-28T22:40:01Z"}, "message": "alpha.md (reload_inqi): Check for MEM before strict_memory_address_p...\n\n* alpha.md (reload_inqi): Check for MEM before strict_memory_address_p,\nsince any_memory_operand() allows pseudos during reload.\n(reload_inhi, reload_outqi, reload_outhi): Likewise.\n\nFrom-SVN: r16219", "tree": {"sha": "12de5b34cc7c374615572b9dbe055d411d6983c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12de5b34cc7c374615572b9dbe055d411d6983c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42f4929d5a0ef969f8657e463c52a2f6af3758e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f4929d5a0ef969f8657e463c52a2f6af3758e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f4929d5a0ef969f8657e463c52a2f6af3758e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f4929d5a0ef969f8657e463c52a2f6af3758e8/comments", "author": null, "committer": null, "parents": [{"sha": "0841747819935a6f6def03b9c5f335e5755b7dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0841747819935a6f6def03b9c5f335e5755b7dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0841747819935a6f6def03b9c5f335e5755b7dc2"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "f6a96bdac105c73b68ec0b651d29b29093a2b55a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42f4929d5a0ef969f8657e463c52a2f6af3758e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42f4929d5a0ef969f8657e463c52a2f6af3758e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42f4929d5a0ef969f8657e463c52a2f6af3758e8", "patch": "@@ -1,3 +1,9 @@\n+Tue Oct 28 14:36:45 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.md (reload_inqi): Check for MEM before strict_memory_address_p,\n+\tsince any_memory_operand() allows pseudos during reload.\n+\t(reload_inhi, reload_outqi, reload_outhi): Likewise.\n+\n Tue Oct 28 11:53:14 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* m68k.md (btst patterns): Add 5200 support."}, {"sha": "570ab915ae26ed68304ad6a4a5b3f46f587ebe58", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42f4929d5a0ef969f8657e463c52a2f6af3758e8/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42f4929d5a0ef969f8657e463c52a2f6af3758e8/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=42f4929d5a0ef969f8657e463c52a2f6af3758e8", "patch": "@@ -4291,7 +4291,8 @@\n \t\t     ? REGNO (operands[2]) + 1 : REGNO (operands[2]));\n \n   /* We must be careful to make sure that the new rtx won't need reloading.  */\n-  if (! strict_memory_address_p (DImode, XEXP (operands[1], 0)))\n+  if (GET_CODE (operands[1]) == MEM &&\n+      ! strict_memory_address_p (DImode, XEXP (operands[1], 0)))\n     {\n       tmp = gen_rtx (REG, Pmode, REGNO (operands[0]));\n       emit_insn (gen_move_insn (tmp, XEXP (operands[1], 0)));\n@@ -4324,7 +4325,8 @@\n \t\t     ? REGNO (operands[2]) + 1 : REGNO (operands[2]));\n \n   /* We must be careful to make sure that the new rtx won't need reloading.  */\n-  if (!strict_memory_address_p (DImode, XEXP (operands[1], 0)))\n+  if (GET_CODE (operands[1]) == MEM &&\n+      ! strict_memory_address_p (DImode, XEXP (operands[1], 0)))\n     {\n       tmp = gen_rtx (REG, Pmode, REGNO (operands[0]));\n       emit_insn (gen_move_insn (tmp, XEXP (operands[1], 0)));\n@@ -4348,7 +4350,9 @@\n   \"\n { extern rtx get_unaligned_address ();\n \n-  if (!strict_memory_address_p (DImode, XEXP (operands[0], 0)))\n+  /* Note that any_memory_operand allows pseudos during reload.  */\n+  if (GET_CODE (operands[0]) == MEM &&\n+      ! strict_memory_address_p (DImode, XEXP (operands[0], 0)))\n     {\n       rtx scratch1 = gen_rtx (REG, DImode, REGNO (operands[2]));\n       emit_insn (gen_move_insn (scratch1, XEXP (operands[0], 0)));\n@@ -4394,7 +4398,9 @@\n   \"\n { extern rtx get_unaligned_address ();\n \n-  if (!strict_memory_address_p (DImode, XEXP (operands[0], 0)))\n+  /* Note that any_memory_operand allows pseudos during reload.  */\n+  if (GET_CODE (operands[0]) == MEM &&\n+      ! strict_memory_address_p (DImode, XEXP (operands[0], 0)))\n     {\n       rtx scratch1 = gen_rtx (REG, DImode, REGNO (operands[2]));\n       emit_insn (gen_move_insn (scratch1, XEXP (operands[0], 0)));"}]}