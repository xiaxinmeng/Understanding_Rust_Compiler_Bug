{"sha": "ef796bef889d8a1590430a9da06c40ec4977d79e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3OTZiZWY4ODlkOGExNTkwNDMwYTlkYTA2YzQwZWM0OTc3ZDc5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-02-13T22:07:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-02-13T22:07:30Z"}, "message": "re PR c++/65054 (internal compiler error: in maybe_constant_value, at cp/constexpr.c:3646)\n\n\tPR c++/65054\n\t* pt.c (template_args_equal): Look through conversions here.\n\t* tree.c (cp_tree_equal): Not here.\n\nFrom-SVN: r220697", "tree": {"sha": "a3d3d0ff70776f75d1e90655b7d95c53b16ab059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d3d0ff70776f75d1e90655b7d95c53b16ab059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef796bef889d8a1590430a9da06c40ec4977d79e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef796bef889d8a1590430a9da06c40ec4977d79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef796bef889d8a1590430a9da06c40ec4977d79e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef796bef889d8a1590430a9da06c40ec4977d79e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f895cf1ac7babe0c89533e8e9e6b6ca6bb33950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f895cf1ac7babe0c89533e8e9e6b6ca6bb33950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f895cf1ac7babe0c89533e8e9e6b6ca6bb33950"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "0738e8b7b143fef79d409271158abb05cc63c6df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef796bef889d8a1590430a9da06c40ec4977d79e", "patch": "@@ -1,3 +1,9 @@\n+2015-02-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/65054\n+\t* pt.c (template_args_equal): Look through conversions here.\n+\t* tree.c (cp_tree_equal): Not here.\n+\n 2015-02-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60211"}, {"sha": "d415dd4e6d27c41cb281a6450d2956edcc1c0b50", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ef796bef889d8a1590430a9da06c40ec4977d79e", "patch": "@@ -3638,7 +3638,6 @@ maybe_constant_value (tree t, tree decl)\n \n   r = cxx_eval_outermost_constant_expr (t, true, true, decl);\n #ifdef ENABLE_CHECKING\n-  /* cp_tree_equal looks through NOPs, so allow them.  */\n   gcc_assert (r == t\n \t      || CONVERT_EXPR_P (t)\n \t      || TREE_CODE (t) == VIEW_CONVERT_EXPR"}, {"sha": "9a00d0d30e6b79e85fe088dfd272f42189e44bb6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ef796bef889d8a1590430a9da06c40ec4977d79e", "patch": "@@ -7324,7 +7324,22 @@ template_args_equal (tree ot, tree nt)\n   else if (TREE_CODE (ot) == TREE_VEC || TYPE_P (ot))\n     return 0;\n   else\n-    return cp_tree_equal (ot, nt);\n+    {\n+      /* Try to treat a template non-type argument that has been converted\n+\t to the parameter type as equivalent to one that hasn't yet.  */\n+      for (enum tree_code code1 = TREE_CODE (ot);\n+\t   CONVERT_EXPR_CODE_P (code1)\n+\t     || code1 == NON_LVALUE_EXPR;\n+\t   code1 = TREE_CODE (ot))\n+\tot = TREE_OPERAND (ot, 0);\n+      for (enum tree_code code2 = TREE_CODE (nt);\n+\t   CONVERT_EXPR_CODE_P (code2)\n+\t     || code2 == NON_LVALUE_EXPR;\n+\t   code2 = TREE_CODE (nt))\n+\tnt = TREE_OPERAND (nt, 0);\n+\n+      return cp_tree_equal (ot, nt);\n+    }\n }\n \n /* Returns 1 iff the OLDARGS and NEWARGS are in fact identical sets of"}, {"sha": "c8e6f0c796f68fb2a8288397920bf07d333c0a4b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ef796bef889d8a1590430a9da06c40ec4977d79e", "patch": "@@ -2745,20 +2745,8 @@ cp_tree_equal (tree t1, tree t2)\n   if (!t1 || !t2)\n     return false;\n \n-  for (code1 = TREE_CODE (t1);\n-       CONVERT_EXPR_CODE_P (code1)\n-\t || code1 == NON_LVALUE_EXPR;\n-       code1 = TREE_CODE (t1))\n-    t1 = TREE_OPERAND (t1, 0);\n-  for (code2 = TREE_CODE (t2);\n-       CONVERT_EXPR_CODE_P (code2)\n-\t || code2 == NON_LVALUE_EXPR;\n-       code2 = TREE_CODE (t2))\n-    t2 = TREE_OPERAND (t2, 0);\n-\n-  /* They might have become equal now.  */\n-  if (t1 == t2)\n-    return true;\n+  code1 = TREE_CODE (t1);\n+  code2 = TREE_CODE (t2);\n \n   if (code1 != code2)\n     return false;\n@@ -2996,6 +2984,9 @@ cp_tree_equal (tree t1, tree t2)\n     case DYNAMIC_CAST_EXPR:\n     case IMPLICIT_CONV_EXPR:\n     case NEW_EXPR:\n+    CASE_CONVERT:\n+    case NON_LVALUE_EXPR:\n+    case VIEW_CONVERT_EXPR:\n       if (!same_type_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n \treturn false;\n       /* Now compare operands as usual.  */"}, {"sha": "71e97f72b7b901ce30bc954482246d57ce275d78", "filename": "gcc/testsuite/g++.dg/expr/ptr-arith1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptr-arith1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef796bef889d8a1590430a9da06c40ec4977d79e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptr-arith1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fptr-arith1.C?ref=ef796bef889d8a1590430a9da06c40ec4977d79e", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/65054\n+\n+const char *\n+foo (void)\n+{\n+  return ((char *const) \"abc\" + 1);\n+}"}]}