{"sha": "5c74d5b03c53581f8f555a958f139740b1ad884c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3NGQ1YjAzYzUzNTgxZjhmNTU1YTk1OGYxMzk3NDBiMWFkODg0Yw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-11-09T11:53:18Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-11-09T11:53:18Z"}, "message": "re PR c++/8389 (Access to members of base class & templates)\n\n\tPR c++/8389\n\t* pt.c (instantiate_template): Push class scope for member\n\tfunctions.\n\t(get_mostly_instantiated_function_type): Likewise.  Don't call\n\ttsubst on context.  Remove CONTEXTP and TPARMSP parameters.\n\t* cp-tree.h (get_mostly_instantiated_function_type): Adjust.\n\t* mangle.c (write_encoding, write_unqualified_name): Adjust.\n\n\tPR c++/8389\n\t* g++.dg/template/access6.C: New test.\n\nFrom-SVN: r58950", "tree": {"sha": "230f8e2c8b355db4b3b87f5ed6e91bde71543770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/230f8e2c8b355db4b3b87f5ed6e91bde71543770"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c74d5b03c53581f8f555a958f139740b1ad884c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c74d5b03c53581f8f555a958f139740b1ad884c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c74d5b03c53581f8f555a958f139740b1ad884c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c74d5b03c53581f8f555a958f139740b1ad884c/comments", "author": null, "committer": null, "parents": [{"sha": "8a9a176bf6e3d1974642d1ecb67555bef4be0acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9a176bf6e3d1974642d1ecb67555bef4be0acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9a176bf6e3d1974642d1ecb67555bef4be0acd"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "0b5b67089e87c79196caf6b1d869a6081c0d1d8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c74d5b03c53581f8f555a958f139740b1ad884c", "patch": "@@ -1,3 +1,13 @@\n+2002-11-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/8389\n+\t* pt.c (instantiate_template): Push class scope for member\n+\tfunctions.\n+\t(get_mostly_instantiated_function_type): Likewise.  Don't call\n+\ttsubst on context.  Remove CONTEXTP and TPARMSP parameters.\n+\t* cp-tree.h (get_mostly_instantiated_function_type): Adjust.\n+\t* mangle.c (write_encoding, write_unqualified_name): Adjust.\n+\n 2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (add_vcall_offset_vtbl_entries_1): Correct ordering of"}, {"sha": "262f6a1fd69559cc07810fd05df32e36dae313f3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5c74d5b03c53581f8f555a958f139740b1ad884c", "patch": "@@ -4013,7 +4013,7 @@ extern void print_candidates                    PARAMS ((tree));\n extern int instantiate_pending_templates        PARAMS ((void));\n extern tree tsubst_default_argument             PARAMS ((tree, tree, tree));\n extern tree most_general_template\t\tPARAMS ((tree));\n-extern tree get_mostly_instantiated_function_type PARAMS ((tree, tree *, tree *));\n+extern tree get_mostly_instantiated_function_type PARAMS ((tree));\n extern int problematic_instantiation_changed    PARAMS ((void));\n extern void record_last_problematic_instantiation PARAMS ((void));\n extern tree current_instantiation               PARAMS ((void));"}, {"sha": "523db85ab388996441d567a295281cac31395951", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5c74d5b03c53581f8f555a958f139740b1ad884c", "patch": "@@ -656,7 +656,7 @@ write_encoding (decl)\n       tree fn_type;\n \n       if (decl_is_template_id (decl, NULL))\n-\tfn_type = get_mostly_instantiated_function_type (decl, NULL, NULL);\n+\tfn_type = get_mostly_instantiated_function_type (decl);\n       else\n \tfn_type = TREE_TYPE (decl);\n \n@@ -1011,8 +1011,7 @@ write_unqualified_name (decl)\n       tree type;\n       if (decl_is_template_id (decl, NULL))\n \t{\n-\t  tree fn_type = get_mostly_instantiated_function_type (decl, NULL,\n-\t\t\t\t\t\t\t\tNULL);\n+\t  tree fn_type = get_mostly_instantiated_function_type (decl);\n \t  type = TREE_TYPE (fn_type);\n \t}\n       else"}, {"sha": "db8e33f7fcbfb99af0d5438c1e6b26c48c7775c4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5c74d5b03c53581f8f555a958f139740b1ad884c", "patch": "@@ -7786,9 +7786,19 @@ instantiate_template (tmpl, targ_ptr)\n \t}\n     }\n \n+  /* Make sure that we can see identifiers, and compute access\n+     correctly.  */\n+  if (DECL_CLASS_SCOPE_P (gen_tmpl))\n+    pushclass (tsubst (DECL_CONTEXT (gen_tmpl), targ_ptr, tf_error,\n+\t\t       gen_tmpl), 1);\n+\n   /* substitute template parameters */\n   fndecl = tsubst (DECL_TEMPLATE_RESULT (gen_tmpl),\n \t\t   targ_ptr, tf_error, gen_tmpl);\n+\n+  if (DECL_CLASS_SCOPE_P (gen_tmpl))\n+    popclass ();\n+\n   /* The DECL_TI_TEMPLATE should always be the immediate parent\n      template, not the most general template.  */\n   DECL_TI_TEMPLATE (fndecl) = tmpl;\n@@ -10414,18 +10424,12 @@ tsubst_enum (tag, newtag, args)\n /* DECL is a FUNCTION_DECL that is a template specialization.  Return\n    its type -- but without substituting the innermost set of template\n    arguments.  So, innermost set of template parameters will appear in\n-   the type.  If CONTEXTP is non-NULL, then the partially substituted\n-   DECL_CONTEXT (if any) will also be filled in.  Similarly, TPARMSP\n-   will be filled in with the substituted template parameters, if it\n-   is non-NULL.  */\n+   the type.  */\n \n tree \n-get_mostly_instantiated_function_type (decl, contextp, tparmsp)\n+get_mostly_instantiated_function_type (decl)\n      tree decl;\n-     tree *contextp;\n-     tree *tparmsp;\n {\n-  tree context = NULL_TREE;\n   tree fn_type;\n   tree tmpl;\n   tree targs;\n@@ -10442,8 +10446,6 @@ get_mostly_instantiated_function_type (decl, contextp, tparmsp)\n   my_friendly_assert (parm_depth == TMPL_ARGS_DEPTH (targs), 0);\n \n   fn_type = TREE_TYPE (tmpl);\n-  if (DECL_STATIC_FUNCTION_P (decl))\n-    context = DECL_CONTEXT (decl);\n \n   if (parm_depth == 1)\n     /* No substitution is necessary.  */\n@@ -10463,24 +10465,28 @@ get_mostly_instantiated_function_type (decl, contextp, tparmsp)\n \t\t\t   TMPL_ARGS_DEPTH (targs),\n \t\t\t   make_tree_vec (DECL_NTPARMS (tmpl)));\n \n+      /* Make sure that we can see identifiers, and compute access\n+\t correctly.  We can just use the context of DECL for the\n+\t partial substitution here.  It depends only on outer template\n+\t parameters, regardless of whether the innermost level is\n+\t specialized or not.  */\n+      if (DECL_CLASS_SCOPE_P (decl))\n+\tpushclass (DECL_CONTEXT (decl), 1);\n+\n       /* Now, do the (partial) substitution to figure out the\n \t appropriate function type.  */\n       fn_type = tsubst (fn_type, partial_args, tf_error, NULL_TREE);\n-      if (DECL_STATIC_FUNCTION_P (decl))\n-\tcontext = tsubst (context, partial_args, tf_error, NULL_TREE);\n \n       /* Substitute into the template parameters to obtain the real\n \t innermost set of parameters.  This step is important if the\n \t innermost set of template parameters contains value\n \t parameters whose types depend on outer template parameters.  */\n       TREE_VEC_LENGTH (partial_args)--;\n       tparms = tsubst_template_parms (tparms, partial_args, tf_error);\n-    }\n \n-  if (contextp)\n-    *contextp = context;\n-  if (tparmsp)\n-    *tparmsp = tparms;\n+      if (DECL_CLASS_SCOPE_P (decl))\n+\tpopclass ();\n+    }\n \n   return fn_type;\n }"}, {"sha": "97b80de9a0596ca7d57d894387899410c135ca38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c74d5b03c53581f8f555a958f139740b1ad884c", "patch": "@@ -1,3 +1,8 @@\n+2002-11-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/8389\n+\t* g++.dg/template/access6.C: New test.\n+\n Fri Nov  8 10:52:15 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/compile/20021108-1.c: New testcase for x86-64 failure."}, {"sha": "fc80402ba1b801bfccaf6d254512f5af65c21dea", "filename": "gcc/testsuite/g++.dg/template/access6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c74d5b03c53581f8f555a958f139740b1ad884c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess6.C?ref=5c74d5b03c53581f8f555a958f139740b1ad884c", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// Origin: Detlef Vollmann <dv@vollmann.ch>\n+\n+// PR c++/8389\n+// Access control ICE for typename during instantiation and name mangling\n+\n+template <class> class Base {\n+  protected:\n+    typedef int Type;\n+};\n+    \n+template <class T> struct Derived : public Base<T> {\n+  typedef typename Base<T>::Type Type;\n+  template <class Arg> void f(Type = Type()) {};\n+};\n+    \n+template void Derived<char>::f<int> (Type);"}]}