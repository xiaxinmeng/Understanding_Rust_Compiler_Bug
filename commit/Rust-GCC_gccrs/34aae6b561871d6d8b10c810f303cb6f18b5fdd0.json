{"sha": "34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhYWU2YjU2MTg3MWQ2ZDhiMTBjODEwZjMwM2NiNmYxOGI1ZmRkMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-05-31T12:25:28Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-01T18:25:47Z"}, "message": "Use is_empty_type instead of zero-sized type.\n\nInstead of only removing assignments of zero-sized types,\nassignments of all empty types should be removed during gimplification.\nThis moves to use is_empty_type which will be used in other places too.\n\nOK?  Bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\t* gimplify.c (zero_sized_field_decl): Delete\n\t(zero_sized_type): Delete\n\t(gimplify_init_ctor_eval): Use is_empty_type instead\n\tof zero_sized_field_decl.\n\t(gimplify_modify_expr): Use is_empty_type instead of\n\tzero_sized_type.", "tree": {"sha": "de7a043d78d5540fa219a3e12778edf1344942eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7a043d78d5540fa219a3e12778edf1344942eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34aae6b561871d6d8b10c810f303cb6f18b5fdd0/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "833d348aec154f231525ad2bf4c8a51c8d16b213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833d348aec154f231525ad2bf4c8a51c8d16b213", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833d348aec154f231525ad2bf4c8a51c8d16b213"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "39f5b973d18132c7f056bac4fbe0bee7f3afe43f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34aae6b561871d6d8b10c810f303cb6f18b5fdd0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34aae6b561871d6d8b10c810f303cb6f18b5fdd0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=34aae6b561871d6d8b10c810f303cb6f18b5fdd0", "patch": "@@ -4644,28 +4644,6 @@ gimplify_init_ctor_eval_range (tree object, tree lower, tree upper,\n   gimplify_seq_add_stmt (pre_p, gimple_build_label (loop_exit_label));\n }\n \n-/* Return true if FDECL is accessing a field that is zero sized.  */\n-\n-static bool\n-zero_sized_field_decl (const_tree fdecl)\n-{\n-  if (TREE_CODE (fdecl) == FIELD_DECL && DECL_SIZE (fdecl)\n-      && integer_zerop (DECL_SIZE (fdecl)))\n-    return true;\n-  return false;\n-}\n-\n-/* Return true if TYPE is zero sized.  */\n-\n-static bool\n-zero_sized_type (const_tree type)\n-{\n-  if (AGGREGATE_TYPE_P (type) && TYPE_SIZE (type)\n-      && integer_zerop (TYPE_SIZE (type)))\n-    return true;\n-  return false;\n-}\n-\n /* A subroutine of gimplify_init_constructor.  Generate individual\n    MODIFY_EXPRs for a CONSTRUCTOR.  OBJECT is the LHS against which the\n    assignments should happen.  ELTS is the CONSTRUCTOR_ELTS of the\n@@ -4699,11 +4677,13 @@ gimplify_init_ctor_eval (tree object, vec<constructor_elt, va_gc> *elts,\n       gcc_assert (purpose);\n \n       /* Skip zero-sized fields, unless value has side-effects.  This can\n-\t happen with calls to functions returning a zero-sized type, which\n+\t happen with calls to functions returning a empty type, which\n \t we shouldn't discard.  As a number of downstream passes don't\n-\t expect sets of zero-sized fields, we rely on the gimplification of\n+\t expect sets of empty type fields, we rely on the gimplification of\n \t the MODIFY_EXPR we make below to drop the assignment statement.  */\n-      if (! TREE_SIDE_EFFECTS (value) && zero_sized_field_decl (purpose))\n+      if (!TREE_SIDE_EFFECTS (value)\n+\t  && TREE_CODE (purpose) == FIELD_DECL\n+\t  && is_empty_type (TREE_TYPE (purpose)))\n \tcontinue;\n \n       /* If we have a RANGE_EXPR, we have to build a loop to assign the\n@@ -5781,11 +5761,11 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   if (ret != GS_UNHANDLED)\n     return ret;\n \n-  /* For zero sized types only gimplify the left hand side and right hand\n+  /* For empty types only gimplify the left hand side and right hand\n      side as statements and throw away the assignment.  Do this after\n      gimplify_modify_expr_rhs so we handle TARGET_EXPRs of addressable\n      types properly.  */\n-  if (zero_sized_type (TREE_TYPE (*from_p))\n+  if (is_empty_type (TREE_TYPE (*from_p))\n       && !want_value\n       /* Don't do this for calls that return addressable types, expand_call\n \t relies on those having a lhs.  */"}]}