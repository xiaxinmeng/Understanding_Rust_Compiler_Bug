{"sha": "6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2ZWZiYjNiMzA4NzRhN2UzZTJiNjYwODVlMzkwZjQ0ZjUwMGFiMw==", "commit": {"author": {"name": "Balaji V. Iyer", "email": "balaji.v.iyer@intel.com", "date": "2013-06-05T19:43:44Z"}, "committer": {"name": "Balaji V. Iyer", "email": "bviyer@gcc.gnu.org", "date": "2013-06-05T19:43:44Z"}, "message": "+2013-06-04 Balaji V.\n\n+2013-06-04  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       * c-typeck.c (convert_arguments): Moved checking of builtin cilkplus\n+       reduction functions outside the for-loop.  Also, added a check if the\n+       fundecl is non-NULL.\n+\n\n+2013-06-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+       PR C/57457\n+       * c-c++-common/cilk-plus/AN/pr57457.c: New test.\n+       * c-c++-common/cilk-plus/AN/pr57457-2.c: Likewise.\n+\n\nFrom-SVN: r199709", "tree": {"sha": "005efb9d7ed1ced3b6adc7e7e531abbb322c6363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005efb9d7ed1ced3b6adc7e7e531abbb322c6363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/comments", "author": null, "committer": null, "parents": [{"sha": "0d471c50a327e5fae65e4ab29bf48ad0f700d295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d471c50a327e5fae65e4ab29bf48ad0f700d295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d471c50a327e5fae65e4ab29bf48ad0f700d295"}], "stats": {"total": 94, "additions": 73, "deletions": 21}, "files": [{"sha": "2543f5d6eb55cd1b972ede37f5c417fdf57cb0d4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "patch": "@@ -1,3 +1,10 @@\n+2013-06-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\t* c-typeck.c (convert_arguments): Moved checking of builtin cilkplus\n+\treduction functions outside the for-loop.  Added a check if the fundecl\n+\tis non-NULL.  Finally, removed an unwanted if-statement, and made the\n+\tbody unconditional.\n+\n 2013-06-03  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* c-typeck.c (c_finish_if_stmt): Added a check to see if the rank of the"}, {"sha": "3a923111429821b41a0f8b18722d2c547dfdbdaf", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "patch": "@@ -2942,6 +2942,8 @@ convert_arguments (tree typelist, vec<tree, va_gc> *values,\n \t  break;\n \t}\n     }\n+  if (flag_enable_cilkplus && fundecl && is_cilkplus_reduce_builtin (fundecl))\n+    return vec_safe_length (values);\n \n   /* Scan the given expressions and types, producing individual\n      converted arguments.  */\n@@ -2959,17 +2961,6 @@ convert_arguments (tree typelist, vec<tree, va_gc> *values,\n       bool npc;\n       tree parmval;\n \n-      // FIXME: I assume this code is here to handle the overloaded\n-      // behavior of the __sec_reduce* builtins, and avoid giving\n-      // argument mismatch warnings/errors.  We should probably handle\n-      // this with the resolve_overloaded_builtin infrastructure.\n-      /* If the function call is a builtin function call, then we do not\n-\t worry about it since we break them up into its equivalent later and\n-\t we do the appropriate checks there.  */\n-      if (flag_enable_cilkplus\n-\t  && is_cilkplus_reduce_builtin (fundecl))\n-\tcontinue;\n-      \n       if (type == void_type_node)\n \t{\n \t  if (selector)\n@@ -3207,16 +3198,10 @@ convert_arguments (tree typelist, vec<tree, va_gc> *values,\n \n   if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n     {\n-      /* If array notation is used and Cilk Plus is enabled, then we do not\n-\t worry about this error now.  We will handle them in a later place.  */\n-      if (!flag_enable_cilkplus\n-\t  || !is_cilkplus_reduce_builtin (fundecl))\n-\t{\n-\t  error_at (input_location,\n-\t\t    \"too few arguments to function %qE\", function);\n-\t  inform_declaration (fundecl);\n-\t  return -1;\n-\t}\n+      error_at (input_location,\n+\t\t\"too few arguments to function %qE\", function);\n+      inform_declaration (fundecl);\n+      return -1;\n     }\n \n   return error_args ? -1 : (int) parmnum;"}, {"sha": "71b76ad6cd7773e26b9849903d7e0178b85a9b10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "patch": "@@ -1,3 +1,9 @@\n+2013-06-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n+\n+\tPR C/57457\n+\t* c-c++-common/cilk-plus/AN/pr57457.c: New test.\n+\t* c-c++-common/cilk-plus/AN/pr57457-2.c: Likewise.\n+\n 2013-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51908"}, {"sha": "ac11b9209b11c06f973b235ca6bc18229403a371", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57457-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57457-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57457-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57457-2.c?ref=6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+/* Test-case contains no array notation but is compiled with -fcilkplus.  \n+   It will still print the too few arguments func, thereby saying the\n+   if-statement after the for-loop to check for !flag_enable_cilkplus ||\n+   !is_cilkplus_reduce_function (fundecl) is not valid is always taken.  */\n+\n+int func (int, int); /* { dg-message \"declared here\" } */\n+\n+int main (void)\n+{\n+  int a = 5, b = 2;\n+  return func (a); /* { dg-error \"too few arguments to function\" } */\n+}"}, {"sha": "68a1fd8118500e18f1f2327224c371f19c50748f", "filename": "gcc/testsuite/c-c++-common/cilk-plus/AN/pr57457.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d6efbb3b30874a7e3e2b66085e390f44f500ab3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FAN%2Fpr57457.c?ref=6d6efbb3b30874a7e3e2b66085e390f44f500ab3", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+/* This test has no array notation components in it and thus should compile\n+   fine without crashing.  */\n+\n+typedef unsigned int size_t;\n+typedef int (*__compar_fn_t) (const void *, const void *);\n+extern void *bsearch (const void *__key, const void *__base,\n+\t\t      size_t __nmemb, size_t __size, __compar_fn_t\n+\t\t      __compar)\n+  __attribute__ ((__nonnull__ (1, 2, 5))) ;\n+extern __inline __attribute__ ((__gnu_inline__)) void *\n+bsearch (const void *__key, const void *__base, size_t __nmemb, size_t\n+\t __size,\n+\t __compar_fn_t __compar)\n+{\n+  size_t __l, __u, __idx;\n+  const void *__p;\n+  int __comparison;\n+  __l = 0;\n+  __u = __nmemb;\n+  while (__l < __u)\n+    {\n+      __idx = (__l + __u) / 2;\n+      __p = (void *) (((const char *) __base) +\n+\t\t      (__idx * __size));\n+      __comparison = (*__compar) (__key,\n+\t\t\t\t  __p);\n+      if (__comparison < 0)\n+\t__u = __idx;\n+      else if (__comparison > 0)\n+\t__l = __idx + 1;\n+      else\n+\treturn (void *)\n+\t  __p;\n+    }\n+  return ((void *)0);\n+}"}]}