{"sha": "57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhYzdiZTkzZTg2OGU5Y2E2ZWNhYTIzMGNjMDYyNGFmNTRhYzY2Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-07-26T23:46:47Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-07-26T23:46:47Z"}, "message": "rs6000.c (rs6000_traceback_name): New var.\n\n\t* config/rs6000/rs6000.c (rs6000_traceback_name): New var.\n\t(rs6000_traceback): New var.\n\t(rs6000_override_options): Set rs6000_traceback.\n\t(rs6000_output_function_epilogue): Implement traceback options.\n\t* config/rs6000/rs6000.h (TARGET_OPTIONS): Add \"traceback=\".\n\t(rs6000_traceback_name): Declare.\n\n\t* config/rs6000/rs6000.c (output_profile_hook): Don't generate profile\n\tlabel reference when NO_PROFILE_COUNTERS.\n\nFrom-SVN: r55787", "tree": {"sha": "9ad5b3b5206936ffde891a2f95e1f1f96404a1eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ad5b3b5206936ffde891a2f95e1f1f96404a1eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/comments", "author": null, "committer": null, "parents": [{"sha": "bacb811db6c463aa04b689174f612009cfa02f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacb811db6c463aa04b689174f612009cfa02f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bacb811db6c463aa04b689174f612009cfa02f49"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "ffed7636123a14fcf0ed09ecb0557aa0f163d3ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "patch": "@@ -1,3 +1,15 @@\n+2002-07-27  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (rs6000_traceback_name): New var.\n+\t(rs6000_traceback): New var.\n+\t(rs6000_override_options): Set rs6000_traceback.\n+\t(rs6000_output_function_epilogue): Implement traceback options.\n+\t* config/rs6000/rs6000.h (TARGET_OPTIONS): Add \"traceback=\".\n+\t(rs6000_traceback_name): Declare.\n+\n+\t* config/rs6000/rs6000.c (output_profile_hook): Don't generate profile\n+\tlabel reference when NO_PROFILE_COUNTERS.\n+\n 2002-07-26  Jason Merrill  <jason@redhat.com>\n \n \t* function.c (assign_parms): Handle frontend-directed pass by"}, {"sha": "2df15f238e8be38bd9b6bccbc1f0d19a9467e822", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "patch": "@@ -129,6 +129,14 @@ const char *rs6000_debug_name;\n int rs6000_debug_stack;\t\t/* debug stack applications */\n int rs6000_debug_arg;\t\t/* debug argument handling */\n \n+const char *rs6000_traceback_name;\n+static enum {\n+  traceback_default = 0,\n+  traceback_none,\n+  traceback_part,\n+  traceback_full\n+} rs6000_traceback;\n+\n /* Flag to say the TOC is initialized */\n int toc_initialized;\n char toc_label_name[10];\n@@ -600,6 +608,19 @@ rs6000_override_options (default_cpu)\n \terror (\"unknown -mdebug-%s switch\", rs6000_debug_name);\n     }\n \n+  if (rs6000_traceback_name)\n+    {\n+      if (! strncmp (rs6000_traceback_name, \"full\", 4))\n+\trs6000_traceback = traceback_full;\n+      else if (! strncmp (rs6000_traceback_name, \"part\", 4))\n+\trs6000_traceback = traceback_part;\n+      else if (! strncmp (rs6000_traceback_name, \"no\", 2))\n+\trs6000_traceback = traceback_none;\n+      else\n+\terror (\"unknown -mtraceback arg `%s'; expecting `full', `partial' or `none'\",\n+\t       rs6000_traceback_name);\n+    }\n+\n   /* Set size of long double */\n   rs6000_long_double_type_size = 64;\n   if (rs6000_long_double_size_string)\n@@ -10818,7 +10839,6 @@ rs6000_output_function_epilogue (file, size)\n      HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n-  int optional_tbtab = (optimize_size || TARGET_ELF) ? 0 : 1;\n \n   if (! HAVE_epilogue)\n     {\n@@ -10871,12 +10891,21 @@ rs6000_output_function_epilogue (file, size)\n \n      System V.4 Powerpc's (and the embedded ABI derived from it) use a\n      different traceback table.  */\n-  if (DEFAULT_ABI == ABI_AIX && ! flag_inhibit_size_directive)\n+  if (DEFAULT_ABI == ABI_AIX && ! flag_inhibit_size_directive\n+      && rs6000_traceback != traceback_none)\n     {\n       const char *fname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n       const char *language_string = lang_hooks.name;\n       int fixed_parms = 0, float_parms = 0, parm_info = 0;\n       int i;\n+      int optional_tbtab;\n+\n+      if (rs6000_traceback == traceback_full)\n+\toptional_tbtab = 1;\n+      else if (rs6000_traceback == traceback_part)\n+\toptional_tbtab = 0;\n+      else\n+\toptional_tbtab = !optimize_size && !TARGET_ELF;\n \n       while (*fname == '.')\t/* V.4 encodes . in the name */\n \tfname++;\n@@ -11070,7 +11099,6 @@ rs6000_output_function_epilogue (file, size)\n \n       fputs (\"\\t.align 2\\n\", file);\n     }\n-  return;\n }\n \f\n /* A C compound statement that outputs the assembler code for a thunk\n@@ -11835,10 +11863,13 @@ rs6000_gen_section_name (buf, filename, section_desc)\n \n void\n output_profile_hook (labelno)\n-     int labelno;\n+     int labelno ATTRIBUTE_UNUSED;\n {\n   if (DEFAULT_ABI == ABI_AIX)\n     {\n+#ifdef NO_PROFILE_COUNTERS\n+      emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 0);\n+#else\n       char buf[30];\n       const char *label_name;\n       rtx fun;\n@@ -11849,6 +11880,7 @@ output_profile_hook (labelno)\n \n       emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 1,\n                          fun, Pmode);\n+#endif\n     }\n   else if (DEFAULT_ABI == ABI_DARWIN)\n     {"}, {"sha": "332609e3767ce6de6de7b4344cbf1aba727214fb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac7be93e868e9ca6ecaa230cc0624af54ac66f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=57ac7be93e868e9ca6ecaa230cc0624af54ac66f", "patch": "@@ -392,6 +392,8 @@ extern enum processor_type rs6000_cpu;\n    {\"tune=\", &rs6000_select[2].string,\t\t\t\t\t\\\n     N_(\"Schedule code for given CPU\") },\t\t\t\t\\\n    {\"debug=\", &rs6000_debug_name, N_(\"Enable debug output\") },\t\t\\\n+   {\"traceback=\", &rs6000_traceback_name,\t\t\t\t\\\n+    N_(\"Select full, part, or no traceback table\") },\t\t\t\\\n    {\"abi=\", &rs6000_abi_string, N_(\"Specify ABI to use\") },\t\t\\\n    {\"long-double-\", &rs6000_long_double_size_string,\t\t\t\\\n     N_(\"Specify size of long double (64 or 128 bits)\") },\t\t\\\n@@ -425,6 +427,8 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define\tTARGET_DEBUG_STACK\trs6000_debug_stack\n #define\tTARGET_DEBUG_ARG\trs6000_debug_arg\n \n+extern const char *rs6000_traceback_name; /* Type of traceback table.  */\n+\n /* These are separate from target_flags because we've run out of bits\n    there.  */\n extern const char *rs6000_long_double_size_string;"}]}