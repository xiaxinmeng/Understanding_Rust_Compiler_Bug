{"sha": "f3920a1360919acd091ba23a9566ecfda3dc37f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5MjBhMTM2MDkxOWFjZDA5MWJhMjNhOTU2NmVjZmRhM2RjMzdmNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-31T15:59:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-31T15:59:59Z"}, "message": "[multiple changes]\n\n2014-01-31  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Minor update.\n\t* gnat_rm.texi: Add example to Restriction_Warnings documentation.\n\t* exp_util.adb: Minor reformatting.\n\n2014-01-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Expand_Entry_Barrier): Warn if the barrier\n\tdepends on data that is not private to the protected object,\n\tand potentially modifiable in unsynchronized fashion.\n\nFrom-SVN: r207357", "tree": {"sha": "df6dbe0da6722b2edede24d28ad9d24e00b61a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6dbe0da6722b2edede24d28ad9d24e00b61a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3920a1360919acd091ba23a9566ecfda3dc37f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3920a1360919acd091ba23a9566ecfda3dc37f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3920a1360919acd091ba23a9566ecfda3dc37f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3920a1360919acd091ba23a9566ecfda3dc37f4/comments", "author": null, "committer": null, "parents": [{"sha": "31d922e39a06670353f2633232f6bb444c95cfc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d922e39a06670353f2633232f6bb444c95cfc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d922e39a06670353f2633232f6bb444c95cfc4"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "b46a2d50dbd79b89e27688304149a13cc5fb90aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3920a1360919acd091ba23a9566ecfda3dc37f4", "patch": "@@ -1,3 +1,15 @@\n+2014-01-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor update.\n+\t* gnat_rm.texi: Add example to Restriction_Warnings documentation.\n+\t* exp_util.adb: Minor reformatting.\n+\n+2014-01-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_Entry_Barrier): Warn if the barrier\n+\tdepends on data that is not private to the protected object,\n+\tand potentially modifiable in unsynchronized fashion.\n+\n 2014-01-31  Yannick Moy  <moy@adacore.com>\n \n \t* erroutc.adb (Validate_Specific_Warnings): Remove special case for"}, {"sha": "94674378f8c49435cd8564b730f8a85ea31659be", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=f3920a1360919acd091ba23a9566ecfda3dc37f4", "patch": "@@ -6180,10 +6180,60 @@ package body Exp_Ch9 is\n                     Condition (Entry_Body_Formal_Part (N));\n       Prot      : constant Entity_Id := Scope (Ent);\n       Spec_Decl : constant Node_Id   := Parent (Prot);\n-      Func      : Node_Id;\n+      Func      : Entity_Id;\n       B_F       : Node_Id;\n       Body_Decl : Node_Id;\n \n+      function Is_Global_Entity (N : Node_Id) return Traverse_Result;\n+      --  Check whether entity in Barrier is external to protected type.\n+      --  If so, barrier may not be properly synchronized.\n+\n+      ----------------------\n+      -- Is_Global_Entity --\n+      ----------------------\n+\n+      function Is_Global_Entity (N : Node_Id) return Traverse_Result is\n+         E : Entity_Id;\n+         S : Entity_Id;\n+      begin\n+         if Is_Entity_Name (N) and then Present (Entity (N)) then\n+            E := Entity (N);\n+            S := Scope  (E);\n+\n+            if Ekind (E) = E_Variable then\n+               if Scope (E) = Func then\n+                  null;\n+\n+               --  A protected call from a barrier to another object is ok\n+\n+               elsif Ekind (Etype (E)) = E_Protected_Type then\n+                  null;\n+\n+               --  If the variable is within the package body we consider\n+               --  this safe. This is a common (if dubious) idiom.\n+\n+               elsif S = Scope (Prot)\n+                 and then (Ekind (S) = E_Package\n+                   or else Ekind (S) = E_Generic_Package)\n+                 and then Nkind (Parent (E)) = N_Object_Declaration\n+                 and then Nkind (Parent (Parent (E))) = N_Package_Body\n+               then\n+                  null;\n+\n+               else\n+                  Error_Msg_N (\"potentially unsynchronized barrier ?\", N);\n+                  Error_Msg_N (\"!& should be private component of type?\", N);\n+               end if;\n+            end if;\n+         end if;\n+\n+         return OK;\n+      end Is_Global_Entity;\n+\n+      procedure Check_Unprotected_Barrier is\n+         new Traverse_Proc (Is_Global_Entity);\n+      --  Start of processing for Expand_Entry_Barrier\n+\n    begin\n       if No_Run_Time_Mode then\n          Error_Msg_CRT (\"entry barrier\", N);\n@@ -6268,8 +6318,11 @@ package body Exp_Ch9 is\n       end if;\n \n       --  It is not a boolean variable or literal, so check the restriction\n+      --  and otherwise emit warning if barrier contains global entities and\n+      --  is thus potentially unsynchronized.\n \n       Check_Restriction (Simple_Barriers, Cond);\n+      Check_Unprotected_Barrier (Cond);\n    end Expand_Entry_Barrier;\n \n    ------------------------------"}, {"sha": "7c1c75c8bf338df82d66e1796808214797bf2d43", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f3920a1360919acd091ba23a9566ecfda3dc37f4", "patch": "@@ -523,9 +523,9 @@ package body Exp_Util is\n                --  the expander introduces several levels of address arithmetic\n                --  to perform dispatch table displacement. In this scenario the\n                --  object appears as:\n-               --\n+\n                --    Tag_Ptr (Base_Address (<object>'Address))\n-               --\n+\n                --  Detect this case and utilize the whole expression as the\n                --  \"object\" since it now points to the proper dispatch table.\n \n@@ -831,8 +831,9 @@ package body Exp_Util is\n                  and then Is_Type (Entity (Temp))\n                then\n                   Flag_Expr :=\n-                    New_Reference_To (Boolean_Literals\n-                      (Needs_Finalization (Entity (Temp))), Loc);\n+                    New_Reference_To\n+                      (Boolean_Literals\n+                         (Needs_Finalization (Entity (Temp))), Loc);\n \n                --  The allocation / deallocation of a class-wide object relies\n                --  on a runtime check to determine whether the object is truly\n@@ -844,11 +845,11 @@ package body Exp_Util is\n \n                   --  Detect a special case where interface class-wide types\n                   --  are involved as the object appears as:\n-                  --\n+\n                   --    Tag_Ptr (Base_Address (<object>'Address))\n-                  --\n+\n                   --  The expression already yields the proper tag, generate:\n-                  --\n+\n                   --    Temp.all\n \n                   if Is_RTE (Etype (Temp), RE_Tag_Ptr) then\n@@ -858,7 +859,7 @@ package body Exp_Util is\n \n                   --  In the default case, obtain the tag of the object about\n                   --  to be allocated / deallocated. Generate:\n-                  --\n+\n                   --    Temp'Tag\n \n                   else"}, {"sha": "19e22cee98a40429e36a0354ca2db0111e12c9cf", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=f3920a1360919acd091ba23a9566ecfda3dc37f4", "patch": "@@ -6026,6 +6026,26 @@ the compiler checks for violations of the restriction, but\n generates a warning message rather than an error message\n if the restriction is violated.\n \n+One use of this is in situations where you want to know\n+about violations of a restriction, but you want to ignore some of\n+these violations. Consider this example, where you want to set\n+Ada_95 mode and enable style checks, but you want to know about\n+any other use of implementation pragmas:\n+\n+@smallexample @c ada\n+pragma Restriction_Warnings (No_Implementation_Pragmas);\n+pragma Warnings (Off, \"violation of*No_Implementation_Pragmas*\");\n+pragma Ada_95;\n+pragma Style_Checks (\"2bfhkM160\");\n+pragma Warnings (On, \"violation of*No_Implementation_Pragmas*\");\n+@end smallexample\n+\n+@noindent\n+By including the above lines in a configuration pragmas file,\n+the Ada_95 and Style_Checks pragmas are accepted without\n+generating a warning, but any other use of implementation\n+defined pragmas will cause a warning to be generated.\n+\n @node Pragma Share_Generic\n @unnumberedsec Pragma Share_Generic\n @findex Share_Generic"}, {"sha": "af3d2c2a2215e41d8683d6a1a7bcca25dea2e045", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3920a1360919acd091ba23a9566ecfda3dc37f4/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f3920a1360919acd091ba23a9566ecfda3dc37f4", "patch": "@@ -15262,14 +15262,16 @@ Options:\n -mdir -- generate one .xml file for each Ada source file, in directory\n          @file{dir}. (Default is to generate the XML to standard output.)\n \n--q -- debugging version, with interspersed source, and a more\n+--compact -- debugging version, with interspersed source, and a more\n       compact representation of \"sloc\". This version does not conform\n       to any schema.\n \n -I <include-dir>\n     directories to search for dependencies\n     You can also set the ADA_INCLUDE_PATH environment variable for this.\n \n+-q -- quiet\n+\n -v -- verbose (print out the command line options, and the names of\n       output files as they are generated).\n "}]}