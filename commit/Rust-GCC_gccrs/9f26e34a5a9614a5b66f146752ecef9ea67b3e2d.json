{"sha": "9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyNmUzNGE1YTk2MTRhNWI2NmYxNDY3NTJlY2VmOWVhNjdiM2UyZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-26T15:05:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-26T15:05:54Z"}, "message": "c++: access scope during partial spec matching [PR96204]\n\nHere, when determining whether the partial specialization matches\nhas_type_member<Child>, we do so from the scope of where the template-id\nappears rather than from the scope of the specialization, and this\ncauses us to select the partial specialization (since Child::type is\naccessible from Parent).  When we later instantiate this partial\nspecialization, we've entered the scope of the specialization and so\nsubstitution into e.g. the DECL_CONTEXT of has_type_member::value fails\nwith access errors since the friend declaration that we relied on to\nchoose the partial specialization no longer applies.\n\nIt seems the appropriate access scope from which to perform partial\nspecialization matching is the specialization itself (similar to how\nwe check access of base-clauses), which is what this patch implements.\n\n\tPR c++/96204\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (instantiate_class_template_1): Enter the scope of the\n\ttype when calling most_specialized_partial_spec.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/access40.C: New test.\n\t* g++.dg/template/access40a.C: New test.", "tree": {"sha": "78c1e0590cf7d9cc960f0d09d3b7d98455b7046f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78c1e0590cf7d9cc960f0d09d3b7d98455b7046f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/comments", "author": null, "committer": null, "parents": [{"sha": "5b1ce655b25040048861af6c0264cb667b66fcd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1ce655b25040048861af6c0264cb667b66fcd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1ce655b25040048861af6c0264cb667b66fcd7"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "f2039e09cd7c01862a1604cf641f6aa1c8a3c920", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "patch": "@@ -11769,8 +11769,11 @@ instantiate_class_template_1 (tree type)\n   deferring_access_check_sentinel acs (dk_no_deferred);\n \n   /* Determine what specialization of the original template to\n-     instantiate.  */\n+     instantiate; do this relative to the scope of the class for\n+     sake of access checking.  */\n+  push_nested_class (type);\n   t = most_specialized_partial_spec (type, tf_warning_or_error);\n+  pop_nested_class ();\n   if (t == error_mark_node)\n     return error_mark_node;\n   else if (t)"}, {"sha": "d035e99e462fb61264d65cadaa98858910ec673e", "filename": "gcc/testsuite/g++.dg/template/access40.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess40.C?ref=9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/96204\n+\n+template<class, class = void>\n+struct has_type_member {\n+  static const bool value = false;\n+};\n+\n+template<class T>\n+struct has_type_member<T, typename T::type> {\n+  static const bool value = true;\n+};\n+\n+struct Parent;\n+\n+struct Child {\n+private:\n+  friend struct Parent;\n+  typedef void type;\n+};\n+\n+struct Parent {\n+  static void f() {\n+    // The partial specialization does not match despite Child::type\n+    // being accessible from the current scope.\n+    extern int x[1];\n+    extern int x[!has_type_member<Child>::value];\n+  }\n+};"}, {"sha": "94025c513b7898a6bb2828abd47999f3dff9ce5e", "filename": "gcc/testsuite/g++.dg/template/access40a.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess40a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f26e34a5a9614a5b66f146752ecef9ea67b3e2d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess40a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess40a.C?ref=9f26e34a5a9614a5b66f146752ecef9ea67b3e2d", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/96204\n+\n+template<class, class = void>\n+struct has_type_member {\n+  static const bool value = false;\n+};\n+\n+template<class T>\n+struct has_type_member<T, typename T::type> {\n+  static const bool value = true;\n+};\n+\n+struct Parent;\n+\n+struct Child {\n+private:\n+  friend struct has_type_member<Child>;\n+  typedef void type;\n+};\n+\n+struct Parent {\n+  static void f() {\n+    // The partial specialization matches because has_type_member<Child>\n+    // is a friend of Child.\n+    extern int x[1];\n+    extern int x[has_type_member<Child>::value];\n+  }\n+};"}]}