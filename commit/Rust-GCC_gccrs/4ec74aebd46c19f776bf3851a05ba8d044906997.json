{"sha": "4ec74aebd46c19f776bf3851a05ba8d044906997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVjNzRhZWJkNDZjMTlmNzc2YmYzODUxYTA1YmE4ZDA0NDkwNjk5Nw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-20T03:48:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-20T03:48:11Z"}, "message": "(addsi3): Clean up condition for when to use subo.\n\n(umulsidi3): New pattern.\n(non-canonical nand, nor): Remove paterns.\n(clrbit, notbit static bit): New patterns.\n(setbit, clrbit, notbit dynamic bit): New patterns.\n(setbit static bit non-canonical): Remove pattern.\n(muldf3, mulsf3, multf3): Add % to operand1.\n(test recognizers): Use TAB efter mnemonic.\n\nFrom-SVN: r3292", "tree": {"sha": "40018a8908104f6e220a7b3116cafa371167828d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40018a8908104f6e220a7b3116cafa371167828d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ec74aebd46c19f776bf3851a05ba8d044906997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec74aebd46c19f776bf3851a05ba8d044906997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec74aebd46c19f776bf3851a05ba8d044906997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec74aebd46c19f776bf3851a05ba8d044906997/comments", "author": null, "committer": null, "parents": [{"sha": "28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c9500b057a89356f1bf6a5f68ad29f1fb26a1e"}], "stats": {"total": 88, "additions": 56, "deletions": 32}, "files": [{"sha": "216866a098e208b65e82ce5843803f5d4e1fdc62", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 56, "deletions": 32, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec74aebd46c19f776bf3851a05ba8d044906997/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec74aebd46c19f776bf3851a05ba8d044906997/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=4ec74aebd46c19f776bf3851a05ba8d044906997", "patch": "@@ -353,14 +353,14 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n \t(match_operator 1 \"comparison_operator\" [(reg:CC 36) (const_int 0)]))]\n   \"\"\n-  \"test%C1 %0\"\n+  \"test%C1\t%0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d\")\n \t(match_operator 1 \"comparison_operator\" [(reg:CC_UNS 36) (const_int 0)]))]\n   \"\"\n-  \"test%C1 %0\"\n+  \"test%C1\t%0\"\n   [(set_attr \"type\" \"compare\")])\n \f\n ;; These control RTL generation for conditional jump insns\n@@ -1461,8 +1461,7 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[2]) == CONST_INT\n-      && INTVAL (operands[2]) < 0 && INTVAL (operands[2]) > -32)\n+  if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n     return \\\"subo\t%n2,%1,%0\\\";\n   if (i960_bypass (insn, operands[1], operands[2], 0))\n     return \\\"addo\t%2,%1,%0\\\";\n@@ -1482,6 +1481,19 @@\n }\"\n   [(set_attr \"type\" \"mult\")])\n \n+(define_insn \"umulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  \"\"\n+  \"*\n+{\n+  if (i960_bypass (insn, operands[1], operands[2], 0))\n+    return \\\"emul\t%2,%1,%0\\\";\n+  return \\\"emul\t%1,%2,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"mult\")])\n+\n ;; This goes after the move/add/sub/mul instructions  \n ;; because those instructions are better when they apply.\n \n@@ -1581,40 +1593,64 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(not:SI (and:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n-\t\t\t(match_operand:SI 2 \"arith_operand\" \"dI\"))))]\n+\t(ior:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n+\t\t(match_operand:SI 2 \"power2_operand\" \"n\")))]\n   \"\"\n   \"*\n {\n-  if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"nand\t%2,%1,%0\\\";\n-  return \\\"nand\t%1,%2,%0\\\";\n+  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t bitpos (INTVAL (operands[2])));\n+  return \\\"setbit\t%2,%1,%0\\\";\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n-\t\t(match_operand:SI 2 \"power2_operand\" \"n\")))]\n+\t(ior:SI (ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+  \"\"\n+  \"setbit\t%1,%2,%0\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(and:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n+\t\t(match_operand:SI 2 \"cmplpower2_operand\" \"n\")))]\n   \"\"\n   \"*\n {\n   operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t bitpos (INTVAL (operands[2])));\n-  return \\\"setbit\t%2,%1,%0\\\";\n+\t\t\t bitpos (~INTVAL (operands[2])));\n+  return \\\"clrbit\t%2,%1,%0\\\";\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"power2_operand\" \"n\")\n+\t(and:SI (ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"\"\n+  \"clrbit\t%1,%2,%0\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(xor:SI (match_operand:SI 1 \"arith_operand\" \"dI\")\n+\t\t(match_operand:SI 2 \"power2_operand\" \"n\")))]\n+  \"\"\n   \"*\n {\n-  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t bitpos (INTVAL (operands[1])));\n-  return \\\"setbit\t%1,%2,%0\\\";\n+  operands[2] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t bitpos (INTVAL (operands[2])));\n+  return \\\"notbit\t%2,%1,%0\\\";\n }\")\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(xor:SI (ashift:SI (const_int 1)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n+  \"\"\n+  \"notbit\t%1,%2,%0\")\n+\n (define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ior:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n@@ -1651,18 +1687,6 @@\n   return \\\"nor\t%1,%2,%0\\\";\n }\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(not:SI (ior:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n-\t\t\t(match_operand:SI 2 \"arith_operand\" \"dI\"))))]\n-  \"\"\n-  \"*\n-{\n-  if (i960_bypass (insn, operands[1], operands[2], 0))\n-    return \\\"nor\t%2,%1,%0\\\";\n-  return \\\"nor\t%1,%2,%0\\\";\n-}\")\n-\n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(xor:SI (match_operand:SI 1 \"arith_operand\" \"%dI\")\n@@ -1739,15 +1763,15 @@\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=d*f\")\n-\t(mult:DF (match_operand:DF 1 \"fp_arith_operand\" \"rGH\")\n+\t(mult:DF (match_operand:DF 1 \"fp_arith_operand\" \"%rGH\")\n \t\t (match_operand:DF 2 \"fp_arith_operand\" \"rGH\")))]\n   \"TARGET_NUMERICS\"\n   \"mulrl\t%1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=d*f\")\n-\t(mult:SF (match_operand:SF 1 \"fp_arith_operand\" \"rGH\")\n+\t(mult:SF (match_operand:SF 1 \"fp_arith_operand\" \"%rGH\")\n \t\t (match_operand:SF 2 \"fp_arith_operand\" \"rGH\")))]\n   \"TARGET_NUMERICS\"\n   \"mulr\t%1,%2,%0\"\n@@ -2002,7 +2026,7 @@\n \n (define_insn \"multf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(mult:TF (match_operand:TF 1 \"nonmemory_operand\" \"fG\")\n+\t(mult:TF (match_operand:TF 1 \"nonmemory_operand\" \"%fG\")\n \t\t (match_operand:TF 2 \"nonmemory_operand\" \"fG\")))]\n   \"TARGET_NUMERICS\"\n   \"mulr\t%1,%2,%0\""}]}