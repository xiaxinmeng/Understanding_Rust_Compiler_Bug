{"sha": "c77b6f95e014ad1f6654683ff56f9508fe7f268d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3YjZmOTVlMDE0YWQxZjY2NTQ2ODNmZjU2Zjk1MDhmZTdmMjY4ZA==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-24T14:33:35Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-24T14:33:35Z"}, "message": "fortran: ICE in gfc_conv_constant_to_tree PR93604\n\nUsing a BOZ constant in a structure constructor in a data statement\nresulted in an ICE. Output a \"BOZ literal constant cannot appear in\na structure constructor\" error message instead.\n\nOriginal patch provided by Steven G. Kargl  <kargl@gcc.gnu.org>.\n\nTest case added later.\n\ngcc/fortran/ChangeLog\n\n\tPR fortran/93604\n\t* decl.c (gfc_match_data) : Check whether the data expression\n\tis a derived type and is a constructor. If a BOZ constant\n\tis encountered in the constructor output an error and return\n\tMATCH_ERROR.\n\ngcc/testsuite/ChangeLog\n\n\tPR fortran/93604\n\t* gfortran.dg/pr93604.f90 : New test.", "tree": {"sha": "01af0228aa662dd697ed018bbc48333cedc984e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01af0228aa662dd697ed018bbc48333cedc984e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77b6f95e014ad1f6654683ff56f9508fe7f268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77b6f95e014ad1f6654683ff56f9508fe7f268d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77b6f95e014ad1f6654683ff56f9508fe7f268d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77b6f95e014ad1f6654683ff56f9508fe7f268d/comments", "author": null, "committer": null, "parents": [{"sha": "fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6a8b230ad98ab3c42efc2968483ceb5ef62886"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "e25d05cf79431cdb8a150cd35197bbebf54d9027", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c77b6f95e014ad1f6654683ff56f9508fe7f268d", "patch": "@@ -1,3 +1,11 @@\n+2020-02-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/93604\n+\t* decl.c (gfc_match_data) : Check whether the data expression\n+\tis a derived type and is a constructor. If a BOZ constant\n+\tis encountered in the constructor output an error and return\n+\tMATCH_ERROR.\n+\n 2020-02-24  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/93552"}, {"sha": "7382fea03e4633d25530aeb912bc1e0998bdf9cc", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c77b6f95e014ad1f6654683ff56f9508fe7f268d", "patch": "@@ -716,6 +716,22 @@ gfc_match_data (void)\n       new_data->next = gfc_current_ns->data;\n       gfc_current_ns->data = new_data;\n \n+      /* A BOZ literal constant cannot appear in a structure constructor.\n+\t Check for that here for a data statement value.  */\n+      if (new_data->value->expr->ts.type == BT_DERIVED\n+\t  && new_data->value->expr->value.constructor)\n+\t{\n+\t  gfc_constructor *c;\n+\t  c = gfc_constructor_first (new_data->value->expr->value.constructor);\n+\t  for (; c; c = gfc_constructor_next (c))\n+\t    if (c->expr->ts.type == BT_BOZ)\n+\t      {\n+\t\tgfc_error (\"BOZ literal constant at %L cannot appear in a \"\n+\t\t\t   \"structure constructor\", &c->expr->where);\n+\t\treturn MATCH_ERROR;\n+\t      }\n+\t}\n+\n       if (gfc_match_eos () == MATCH_YES)\n \tbreak;\n "}, {"sha": "272d4ea478cf438eadb3d4e522e5ac6725423ced", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c77b6f95e014ad1f6654683ff56f9508fe7f268d", "patch": "@@ -1,3 +1,8 @@\n+2020-02-20  Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/93604\n+\t* gfortran.dg/pr93604.f90 : New test.\n+\n 2020-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1937R2 - Fixing inconsistencies between const{expr,eval} functions"}, {"sha": "2c695d378290a73adadd3390e701cc7af8794fde", "filename": "gcc/testsuite/gfortran.dg/pr93604.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93604.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77b6f95e014ad1f6654683ff56f9508fe7f268d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93604.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93604.f90?ref=c77b6f95e014ad1f6654683ff56f9508fe7f268d", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+\n+program p\n+   type t\n+      integer :: a\n+   end type\n+   type(t) :: x\n+   data x /t(z'1')/ ! { dg-error \"cannot appear in a structure constructor\" }\n+end\n+"}]}