{"sha": "39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "node_id": "C_kwDOANBUbNoAKDM5ZDgwMzAwYjNjNzY5YzNhNzgwNWE0NmVlNWZhY2M2YWRmMWE0ZDA", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-03-30T19:45:23Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-04-28T18:46:49Z"}, "message": "gcov: Add __gcov_filename_to_gcfn()\n\ngcc/\n\n\t* doc/invoke.texi (fprofile-info-section): Mention\n\t__gcov_filename_to_gcfn().  Use \"freestanding\" to match with C11\n\tstandard language.  Fix minor example code issues.\n\t* gcov-io.h (GCOV_FILENAME_MAGIC): Define and document.\n\ngcc/testsuite/\n\n\t* gcc.dg/gcov-info-to-gcda.c: Test __gcov_filename_to_gcfn().\n\nlibgcc/\n\n\t* gcov.h (__gcov_info_to_gcda): Mention __gcov_filename_to_gcfn().\n\t(__gcov_filename_to_gcfn): Declare and document.\n\t* libgcov-driver.c (dump_string): New.\n\t(__gcov_filename_to_gcfn): Likewise.\n\t(__gcov_info_to_gcda): Adjust comment to match C11 standard language.", "tree": {"sha": "2c8609ca844a90b8006e39f11c2735a91fe73dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c8609ca844a90b8006e39f11c2735a91fe73dff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a4673fe25e067df74373a45180d80c70da102f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a4673fe25e067df74373a45180d80c70da102f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a4673fe25e067df74373a45180d80c70da102f"}], "stats": {"total": 135, "additions": 105, "deletions": 30}, "files": [{"sha": "7cff38b780ed846e82cfb0e834fea0f281efe370", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "patch": "@@ -15462,7 +15462,7 @@ profile information generated by @option{-fprofile-arcs} is placed in the\n specified section for each translation unit.  This option disables the profile\n information registration through a constructor and it disables the profile\n information processing through a destructor.  This option is not intended to be\n-used in hosted environments such as GNU/Linux.  It targets free-standing\n+used in hosted environments such as GNU/Linux.  It targets freestanding\n environments (for example embedded systems) with limited resources which do not\n support constructors/destructors or the C library file I/O.\n \n@@ -15487,14 +15487,8 @@ for example like this:\n #include <stdio.h>\n #include <stdlib.h>\n \n-extern const struct gcov_info *__gcov_info_start[];\n-extern const struct gcov_info *__gcov_info_end[];\n-\n-static void\n-filename (const char *f, void *arg)\n-@{\n-  puts (f);\n-@}\n+extern const struct gcov_info *const __gcov_info_start[];\n+extern const struct gcov_info *const __gcov_info_end[];\n \n static void\n dump (const void *d, unsigned n, void *arg)\n@@ -15505,6 +15499,12 @@ dump (const void *d, unsigned n, void *arg)\n     printf (\"%02x\", c[i]);\n @}\n \n+static void\n+filename (const char *f, void *arg)\n+@{\n+  __gcov_filename_to_gcfn (f, dump, arg );\n+@}\n+\n static void *\n allocate (unsigned length, void *arg)\n @{\n@@ -15514,8 +15514,8 @@ allocate (unsigned length, void *arg)\n static void\n dump_gcov_info (void)\n @{\n-  const struct gcov_info **info = __gcov_info_start;\n-  const struct gcov_info **end = __gcov_info_end;\n+  const struct gcov_info *const *info = __gcov_info_start;\n+  const struct gcov_info *const *end = __gcov_info_end;\n \n   /* Obfuscate variable to prevent compiler optimizations.  */\n   __asm__ (\"\" : \"+r\" (info));\n@@ -15530,9 +15530,9 @@ dump_gcov_info (void)\n @}\n \n int\n-main()\n+main (void)\n @{\n-  dump_gcov_info();\n+  dump_gcov_info ();\n   return 0;\n @}\n @end smallexample"}, {"sha": "30947634d739958490e896c5f2b032f7d3c28214", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "patch": "@@ -60,14 +60,21 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n    \tfile : int32:magic int32:version int32:stamp record*\n \n-   The magic ident is different for the notes and the data files.  The\n-   magic ident is used to determine the endianness of the file, when\n-   reading.  The version is the same for both files and is derived\n-   from gcc's version number. The stamp value is used to synchronize\n-   note and data files and to synchronize merging within a data\n-   file. It need not be an absolute time stamp, merely a ticker that\n-   increments fast enough and cycles slow enough to distinguish\n-   different compile/run/compile cycles.\n+   A filename header may be used to provide a filename for the data in\n+   a stream of data to support gcov in freestanding environments.  This\n+   header is used by the merge-stream subcommand of the gcov-tool.  The\n+   format of the filename header is\n+\n+\tfilename-header : int32:magic int32:version string\n+\n+   The magic ident is different for the notes and the data files as\n+   well as the filename header.  The magic ident is used to determine\n+   the endianness of the file, when reading.  The version is the same\n+   for both files and is derived from gcc's version number. The stamp\n+   value is used to synchronize note and data files and to synchronize\n+   merging within a data file. It need not be an absolute time stamp,\n+   merely a ticker that increments fast enough and cycles slow enough\n+   to distinguish different compile/run/compile cycles.\n \n    Although the ident and version are formally 32 bit numbers, they\n    are derived from 4 character ASCII strings.  The version number\n@@ -228,6 +235,7 @@ typedef uint64_t gcov_type_unsigned;\n /* File magic. Must not be palindromes.  */\n #define GCOV_DATA_MAGIC ((gcov_unsigned_t)0x67636461) /* \"gcda\" */\n #define GCOV_NOTE_MAGIC ((gcov_unsigned_t)0x67636e6f) /* \"gcno\" */\n+#define GCOV_FILENAME_MAGIC ((gcov_unsigned_t)0x6763666e) /* \"gcfn\" */\n \n #include \"version.h\"\n "}, {"sha": "ca9b3e831fe7db720e7443d994b95f298ba35a58", "filename": "gcc/testsuite/gcc.dg/gcov-info-to-gcda.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/gcc%2Ftestsuite%2Fgcc.dg%2Fgcov-info-to-gcda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/gcc%2Ftestsuite%2Fgcc.dg%2Fgcov-info-to-gcda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgcov-info-to-gcda.c?ref=39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "patch": "@@ -17,16 +17,20 @@ __gcov_info_to_gcda (const struct gcov_info *__info,\n \t\t     void *(*__allocate_fn) (unsigned, void *),\n \t\t     void *__arg);\n \n+extern void\n+__gcov_filename_to_gcfn (const char *__filename,\n+\t\t\t void (*__dump_fn) (const void *, unsigned, void *),\n+\t\t\t void *__arg);\n+\n extern const struct gcov_info *my_info;\n \n static unsigned counter;\n \n-static void\n-filename (const char *f, void *arg)\n-{\n-  assert (arg == &counter);\n-  assert (__builtin_strstr (f, \"gcov-info-to-gcda.c\") == 0);\n-}\n+static unsigned counter_after_filename;\n+\n+static int check_zero;\n+\n+static int check_after_filename;\n \n static void\n dump (const void *d, unsigned n, void *arg)\n@@ -35,14 +39,30 @@ dump (const void *d, unsigned n, void *arg)\n   assert (arg == &counter);\n \n   if (*m == 0)\n+  {\n+    const unsigned *u = d;\n+    assert (*u == 0x6763666e);\n+    check_zero = 1;\n+  }\n+  else if (*m == counter_after_filename)\n   {\n     const unsigned *u = d;\n     assert (*u == 0x67636461);\n+    check_after_filename = 1;\n   }\n \n   *m += n;\n }\n \n+static void\n+filename (const char *f, void *arg)\n+{\n+  assert (arg == &counter);\n+  assert (__builtin_strstr (f, \"gcov-info-to-gcda.c\") == 0);\n+  __gcov_filename_to_gcfn (f, dump, arg);\n+  counter_after_filename = counter;\n+}\n+\n static void *\n allocate (unsigned length, void *arg)\n {\n@@ -54,6 +74,8 @@ int main()\n {\n   __asm__ volatile (\".set my_info, .LPBX2\");\n   __gcov_info_to_gcda (my_info, filename, dump, allocate, &counter);\n-  assert (counter > 4);\n+  assert (counter > 8);\n+  assert (check_zero);\n+  assert (check_after_filename);\n   return 0;\n }"}, {"sha": "cdd4206f62522f20a13ba7ff3056777c13e9bc97", "filename": "libgcc/gcov.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/libgcc%2Fgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/libgcc%2Fgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgcov.h?ref=39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "patch": "@@ -43,7 +43,8 @@ extern void __gcov_dump (void);\n    stream.  The ALLOCATE_FN callback shall allocate memory with a size in\n    characters specified by the first callback parameter.  The ARG parameter is\n    a user-provided argument passed as the last argument to the callback\n-   functions.  */\n+   functions.  It is recommended to use the __gcov_filename_to_gcfn()\n+   in the filename callback function.  */\n \n extern void\n __gcov_info_to_gcda (const struct gcov_info *__info,\n@@ -52,4 +53,18 @@ __gcov_info_to_gcda (const struct gcov_info *__info,\n \t\t     void *(*__allocate_fn) (unsigned, void *),\n \t\t     void *__arg);\n \n+/* Convert the FILENAME to a gcfn data stream.  The DUMP_FN callback is\n+   subsequently called with chunks (the begin and length of the chunk are\n+   passed as the first two callback parameters) of the gcfn data stream.\n+   The ARG parameter is a user-provided argument passed as the last\n+   argument to the DUMP_FN callback function.  This function is intended\n+   to be used by the filename callback of __gcov_info_to_gcda().  The gcfn\n+   data stream is used by the merge-stream subcommand of the gcov-tool to\n+   get the filename associated with a gcda data stream.  */\n+\n+extern void\n+__gcov_filename_to_gcfn (const char *__filename,\n+\t\t\t void (*__dump_fn) (const void *, unsigned, void *),\n+\t\t\t void *__arg);\n+\n #endif /* GCC_GCOV_H */"}, {"sha": "d4517d269eb32ca84ee1dfa069bda4e872a1ac98", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d80300b3c769c3a7805a46ee5facc6adf1a4d0/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "patch": "@@ -410,6 +410,23 @@ dump_counter (gcov_type counter,\n     dump_unsigned (0, dump_fn, arg);\n }\n \n+/* Dump the STRING using the DUMP handler called with ARG.  */\n+\n+static inline void\n+dump_string (const char *string,\n+\t     void (*dump_fn) (const void *, unsigned, void *),\n+\t     void *arg)\n+{\n+  unsigned length = 0;\n+\n+  if (string)\n+    length = strlen (string) + 1;\n+\n+  dump_unsigned (length, dump_fn, arg);\n+  if (string)\n+    (*dump_fn) (string, length, arg);\n+}\n+\n #define MAX(X,Y) ((X) > (Y) ? (X) : (Y))\n \n /* Store all TOP N counters where each has a dynamic length.  */\n@@ -768,7 +785,7 @@ __gcov_init (struct gcov_info *info)\n \n #ifdef NEED_L_GCOV_INFO_TO_GCDA\n /* Convert the gcov info to a gcda data stream.  It is intended for\n-   free-standing environments which do not support the C library file I/O.  */\n+   freestanding environments which do not support the C library file I/O.  */\n \n void\n __gcov_info_to_gcda (const struct gcov_info *gi_ptr,\n@@ -780,4 +797,17 @@ __gcov_info_to_gcda (const struct gcov_info *gi_ptr,\n   (*filename_fn) (gi_ptr->filename, arg);\n   write_one_data (gi_ptr, NULL, dump_fn, allocate_fn, arg);\n }\n+\n+/* Convert the filename to a gcfn data stream.  It is intended for\n+   freestanding environments which do not support the C library file I/O.  */\n+\n+void\n+__gcov_filename_to_gcfn (const char *filename,\n+\t\t\t void (*dump_fn) (const void *, unsigned, void *),\n+\t\t\t void *arg)\n+{\n+  dump_unsigned (GCOV_FILENAME_MAGIC, dump_fn, arg);\n+  dump_unsigned (GCOV_VERSION, dump_fn, arg);\n+  dump_string (filename, dump_fn, arg);\n+}\n #endif /* NEED_L_GCOV_INFO_TO_GCDA */"}]}