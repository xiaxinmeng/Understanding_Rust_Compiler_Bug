{"sha": "343c49ce753ba631174df2a3898b1e16ac4aba4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzYzQ5Y2U3NTNiYTYzMTE3NGRmMmEzODk4YjFlMTZhYzRhYmE0Yg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-22T16:49:47Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-22T16:49:47Z"}, "message": "2003-11-22  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc\n\t(peekData): Use offset and maximal free space in datagram packet.\n\t(receive): Likewise.\n\t(send): Use offset in datagram packet.\n\nFrom-SVN: r73843", "tree": {"sha": "07b85030c05a2a3bd9173046e8a48efddd22af29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07b85030c05a2a3bd9173046e8a48efddd22af29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/343c49ce753ba631174df2a3898b1e16ac4aba4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343c49ce753ba631174df2a3898b1e16ac4aba4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343c49ce753ba631174df2a3898b1e16ac4aba4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343c49ce753ba631174df2a3898b1e16ac4aba4b/comments", "author": null, "committer": null, "parents": [{"sha": "cf2348cb34832645326d71c306ac25d12bec5e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2348cb34832645326d71c306ac25d12bec5e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2348cb34832645326d71c306ac25d12bec5e60"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "f5a23b28186b992521e8b4cc3e61cfca3be42e61", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343c49ce753ba631174df2a3898b1e16ac4aba4b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343c49ce753ba631174df2a3898b1e16ac4aba4b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=343c49ce753ba631174df2a3898b1e16ac4aba4b", "patch": "@@ -1,3 +1,10 @@\n+2003-11-22  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/natPlainDatagramSocketImplPosix.cc\n+\t(peekData): Use offset and maximal free space in datagram packet.\n+\t(receive): Likewise.\n+\t(send): Use offset in datagram packet.\n+\n 2003-11-22  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/DatagramChannelImpl.java"}, {"sha": "f0e7ed7629f8f06f8b8e957f10fadd277783efeb", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343c49ce753ba631174df2a3898b1e16ac4aba4b/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343c49ce753ba631174df2a3898b1e16ac4aba4b/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=343c49ce753ba631174df2a3898b1e16ac4aba4b", "patch": "@@ -208,7 +208,8 @@ gnu::java::net::PlainDatagramSocketImpl::peekData (::java::net::DatagramPacket *\n   // FIXME: Deal with Multicast and if the socket is connected.\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n-  jbyte *dbytes = elements (p->getData());\n+  jbyte *dbytes = elements (p->getData()) + p->getOffset();\n+  jint maxlen = p->getData()->length - p->getOffset();\n   ssize_t retlen = 0;\n \n   // Do timeouts via select since SO_RCVTIMEO is not always available.\n@@ -228,7 +229,7 @@ gnu::java::net::PlainDatagramSocketImpl::peekData (::java::net::DatagramPacket *\n     }\n \n   retlen =\n-    ::recvfrom (native_fd, (char *) dbytes, p->getLength(), MSG_PEEK, (sockaddr*) &u,\n+    ::recvfrom (native_fd, (char *) dbytes, maxlen, MSG_PEEK, (sockaddr*) &u,\n       &addrlen);\n   if (retlen < 0)\n     goto error;\n@@ -290,7 +291,7 @@ gnu::java::net::PlainDatagramSocketImpl::send (::java::net::DatagramPacket *p)\n   jbyte *bytes = elements (haddress);\n   int len = haddress->length;\n   struct sockaddr *ptr = (struct sockaddr *) &u.address;\n-  jbyte *dbytes = elements (p->getData());\n+  jbyte *dbytes = elements (p->getData()) + p->getOffset();\n   if (len == 4)\n     {\n       u.address.sin_family = AF_INET;\n@@ -327,7 +328,8 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n   // FIXME: Deal with Multicast and if the socket is connected.\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);\n-  jbyte *dbytes = elements (p->getData());\n+  jbyte *dbytes = elements (p->getData()) + p->getOffset();\n+  jint maxlen = p->getData()->length - p->getOffset();\n   ssize_t retlen = 0;\n \n   // Do timeouts via select since SO_RCVTIMEO is not always available.\n@@ -347,7 +349,7 @@ gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p\n     }\n \n   retlen =\n-    ::recvfrom (native_fd, (char *) dbytes, p->getLength(), 0, (sockaddr*) &u,\n+    ::recvfrom (native_fd, (char *) dbytes, maxlen, 0, (sockaddr*) &u,\n       &addrlen);\n   if (retlen < 0)\n     goto error;"}]}