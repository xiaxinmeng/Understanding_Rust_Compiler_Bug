{"sha": "6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4MWM2ZjQ5YzNlMmFlMWQ5MWI1NGE1MzMxM2UwNWVlMWI0ODEyZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-12T18:12:27Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-12T18:12:27Z"}, "message": "From-SVN: r66726", "tree": {"sha": "7aec026a35820533fea51c2cf636cd67936133fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aec026a35820533fea51c2cf636cd67936133fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/comments", "author": null, "committer": null, "parents": [{"sha": "f64f0687f3ac3523b43a1eae1f70995180e4f272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64f0687f3ac3523b43a1eae1f70995180e4f272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64f0687f3ac3523b43a1eae1f70995180e4f272"}], "stats": {"total": 137, "additions": 70, "deletions": 67}, "files": [{"sha": "fd0ac14c42fae5f608848e20f2c527a807eab252", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "patch": "@@ -1,3 +1,15 @@\n+2003-05-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/fstream.tcc (_M_overflow): Remove unbuffered bits.\n+\n+2003-05-12  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/std/std_fstream.h (_M_convert_to_external): Change\n+\tto return bool, take two less streamsize parameters.\n+\t* include/bits/fstream.tcc (_M_convert_to_external): Tweak\n+\tconsistently definition.\n+\t(_M_overflow): Adjust call points.\n+\n 2003-05-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/27_io/basic_filebuf/underflow/10096.cc: Add weak bits."}, {"sha": "40d1ece324a317ee1393c6bc5a77544d9ccfd877", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 56, "deletions": 65, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "patch": "@@ -182,7 +182,8 @@ namespace std\n   \n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::int_type \n-    basic_filebuf<_CharT, _Traits>::_M_underflow(bool __bump)\n+    basic_filebuf<_CharT, _Traits>::\n+    _M_underflow(bool __bump)\n     {\n       int_type __ret = traits_type::eof();\n       const bool __testin = this->_M_mode & ios_base::in;\n@@ -330,6 +331,53 @@ namespace std\n       return __ret;\n     }\n \n+  template<typename _CharT, typename _Traits>\n+    typename basic_filebuf<_CharT, _Traits>::int_type \n+    basic_filebuf<_CharT, _Traits>::\n+    _M_overflow(int_type __c)\n+    {\n+      int_type __ret = traits_type::eof();\n+      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n+\n+      if (__testput)\n+\t{\n+\t  // Need to restore current position. The position of the external\n+\t  // byte sequence (_M_file) corresponds to _M_filepos, and we need\n+\t  // to move it to _M_out_beg for the write.\n+\t  if (_M_filepos && _M_filepos != this->_M_out_beg)\n+\t    {\n+\t      off_type __off = this->_M_out_beg - _M_filepos;\n+\t      _M_file.seekoff(__off, ios_base::cur);\n+\t    }\n+\n+\t  // Convert internal buffer to external representation, output.\n+\t  if (_M_convert_to_external(this->_M_out_beg, \n+\t\t\t\t     this->_M_out_lim - this->_M_out_beg))\n+\t    {\n+\t      // Convert pending sequence to external representation, output.\n+\t      // If eof, then just attempt sync.\n+\t      if (!traits_type::eq_int_type(__c, traits_type::eof()))\n+\t\t{\n+\t\t  // User code must flush when switching modes (thus\n+\t\t  // don't sync).\n+\t\t  char_type __pending = traits_type::to_char_type(__c);\n+\t\t  if (_M_convert_to_external(&__pending, 1))\n+\t\t    {\n+\t\t      _M_set_indeterminate();\n+\t\t      __ret = traits_type::not_eof(__c);\n+\t\t    }\n+\t\t}\n+\t      else if (!_M_file.sync())\n+\t\t{\n+\t\t  _M_set_indeterminate();\n+\t\t  __ret = traits_type::not_eof(__c);\n+\t\t}\n+\t    }\n+\t}\n+      _M_last_overflowed = true;\t\n+      return __ret;\n+    }\n+\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::int_type \n     basic_filebuf<_CharT, _Traits>::\n@@ -358,14 +406,16 @@ namespace std\n     }\n   \n   template<typename _CharT, typename _Traits>\n-    void\n+    bool\n     basic_filebuf<_CharT, _Traits>::\n-    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen,\n-\t\t\t   streamsize& __elen, streamsize& __plen)\n+    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)\n     {\n+      // Sizes of external and pending output.\n+      streamsize __elen = 0;\n+      streamsize __plen = 0;\n+\n       const locale __loc = this->getloc();\n       const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n-\n       if (__cvt.always_noconv() && __ilen)\n \t{\n \t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n@@ -420,67 +470,8 @@ namespace std\n \t\t}\n \t    }\n \t}\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    typename basic_filebuf<_CharT, _Traits>::int_type \n-    basic_filebuf<_CharT, _Traits>::\n-    _M_overflow(int_type __c)\n-    {\n-      int_type __ret = traits_type::eof();\n-      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n-      const bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size;\n-\n-      if (__testput || __testunbuffered)\n-\t{\n-\t  // Sizes of external and pending output.\n-\t  streamsize __elen = 0;\n-\t  streamsize __plen = 0;\n \n-\t  // Need to restore current position. The position of the external\n-\t  // byte sequence (_M_file) corresponds to _M_filepos, and we need\n-\t  // to move it to _M_out_beg for the write.\n-\t  if (_M_filepos && _M_filepos != this->_M_out_beg)\n-\t    {\n-\t      off_type __off = this->_M_out_beg - _M_filepos;\n-\t      _M_file.seekoff(__off, ios_base::cur);\n-\t    }\n-\n-\t  // Convert internal buffer to external representation, output.\n-\t  // NB: In the unbuffered case, no internal buffer exists. \n-\t  if (!__testunbuffered)\n-\t    _M_convert_to_external(this->_M_out_beg,\n-\t\t\t\t   this->_M_out_lim - this->_M_out_beg, \n-\t\t\t\t   __elen, __plen);\n-\n-\t  // Checks for codecvt.out failures and _M_file.xsputn failures,\n-\t  // respectively, inside _M_convert_to_external.\n-\t  if (__testunbuffered || (__elen && __elen == __plen))\n-\t    {\n-\t      // Convert pending sequence to external representation, output.\n-\t      // If eof, then just attempt sync.\n-\t      if (!traits_type::eq_int_type(__c, traits_type::eof()))\n-\t\t{\n-\t\t  char_type __pending = traits_type::to_char_type(__c);\n-\t\t  _M_convert_to_external(&__pending, 1, __elen, __plen);\n-\n-\t\t  // User code must flush when switching modes (thus\n-\t\t  // don't sync).\n-\t\t  if (__elen == __plen && __elen)\n-\t\t    {\n-\t\t      _M_set_indeterminate();\n-\t\t      __ret = traits_type::not_eof(__c);\n-\t\t    }\n-\t\t}\n-\t      else if (!_M_file.sync())\n-\t\t{\n-\t\t  _M_set_indeterminate();\n-\t\t  __ret = traits_type::not_eof(__c);\n-\t\t}\n-\t    }\n-\t}\n-      _M_last_overflowed = true;\t\n-      return __ret;\n+      return __elen && __elen == __plen;\n     }\n \n   template<typename _CharT, typename _Traits>"}, {"sha": "0781f0d5294e6b993571eb23499a15e4949b4950", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=6e81c6f49c3e2ae1d91b54a53313e05ee1b4812d", "patch": "@@ -353,8 +353,8 @@ namespace std\n        *  @doctodo\n        *  @endif\n       */\n-      void\n-      _M_convert_to_external(char_type*, streamsize, streamsize&, streamsize&);\n+      bool\n+      _M_convert_to_external(char_type*, streamsize);\n \n       /**\n        *  @brief  Manipulates the buffer."}]}