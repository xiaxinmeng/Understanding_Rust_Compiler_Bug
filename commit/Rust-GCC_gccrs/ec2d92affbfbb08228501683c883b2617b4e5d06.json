{"sha": "ec2d92affbfbb08228501683c883b2617b4e5d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyZDkyYWZmYmZiYjA4MjI4NTAxNjgzYzg4M2IyNjE3YjRlNWQwNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-17T00:11:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-17T00:11:55Z"}, "message": "(record_reg_classes): Handle case of single SET between a hard\nregister alone in a class and a pseudo.\n\nFrom-SVN: r8474", "tree": {"sha": "df17d59cee230edb92dfa082805b3d1fecd2cf57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df17d59cee230edb92dfa082805b3d1fecd2cf57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec2d92affbfbb08228501683c883b2617b4e5d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2d92affbfbb08228501683c883b2617b4e5d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2d92affbfbb08228501683c883b2617b4e5d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2d92affbfbb08228501683c883b2617b4e5d06/comments", "author": null, "committer": null, "parents": [{"sha": "9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad265b05ed2c5b516f15dc4ca9f5b17944a1951"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "129fbaf1131b75928147367894a22f08cdf08793", "filename": "gcc/regclass.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2d92affbfbb08228501683c883b2617b4e5d06/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2d92affbfbb08228501683c883b2617b4e5d06/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=ec2d92affbfbb08228501683c883b2617b4e5d06", "patch": "@@ -1015,6 +1015,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n   int alt;\n   enum op_type {OP_READ, OP_WRITE, OP_READ_WRITE} op_types[MAX_RECOG_OPERANDS];\n   int i, j;\n+  rtx set;\n \n   /* By default, each operand is an input operand.  */\n \n@@ -1349,6 +1350,31 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t\t\t\t     (qq->cost[class] + alt_cost) * scale);\n \t  }\n     }\n+\n+  /* If this insn is a single set copying operand 1 to operand 0\n+     and one is a pseudo with the other a hard reg that is in its\n+     own register class, set the cost of that register class to -1.  */\n+\n+  if ((set = single_set (insn)) != 0\n+      && ops[0] == SET_DEST (set) && ops[1] == SET_SRC (set)\n+      && GET_CODE (ops[0]) == REG && GET_CODE (ops[1]) == REG)\n+    for (i = 0; i <= 1; i++)\n+      if (REGNO (ops[i]) >= FIRST_PSEUDO_REGISTER)\n+\t{\n+\t  int regno = REGNO (ops[!i]);\n+\t  enum machine_mode mode = GET_MODE (ops[!i]);\n+\t  int class;\n+\n+\t  if (regno >= FIRST_PSEUDO_REGISTER && prefclass != 0\n+\t      && (reg_class_size[prefclass[regno]]\n+\t\t  == CLASS_MAX_NREGS (prefclass[regno], mode)))\n+\t    op_costs[i].cost[prefclass[regno]] = -1;\n+\t  else if (regno < FIRST_PSEUDO_REGISTER)\n+\t    for (class = 0; class < N_REG_CLASSES; class++)\n+\t      if (TEST_HARD_REG_BIT (reg_class_contents[class], regno)\n+\t\t  && reg_class_size[class] == CLASS_MAX_NREGS (class, mode))\n+\t\top_costs[i].cost[class] = -1;\n+\t}\n }\n \f\n /* Compute the cost of loading X into (if TO_P is non-zero) or from (if"}]}