{"sha": "a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "node_id": "C_kwDOANBUbNoAKGE4MDI5YWRkMzA2NWU0YWJiNWRiYWE5MmNlM2YxYjMwN2YzZTE2ZWY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-14T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-14T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "59cea048a1fdbb21410d62ed9dc9558c36cefa8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59cea048a1fdbb21410d62ed9dc9558c36cefa8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/comments", "author": null, "committer": null, "parents": [{"sha": "6471396dec0cfc30e30e64a70b0d0e6a02de2de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6471396dec0cfc30e30e64a70b0d0e6a02de2de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6471396dec0cfc30e30e64a70b0d0e6a02de2de7"}], "stats": {"total": 274, "additions": 273, "deletions": 1}, "files": [{"sha": "dfc6ee7276b1ff912725ece333761ddc35d6bfd1", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1,3 +1,11 @@\n+2021-11-13  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR other/21823\n+\tPR bootstrap/80047\n+\t* fixincl.c (process): Simplify the handling for highly\n+\t  unlikely access() failure, to avoid using non-standard\n+\t  extensions.\n+\n 2021-08-30  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* inclhack.def (hpux_c99_inttypes5): New hack to define PRIdPTR, etc."}, {"sha": "ea79d3746a55cdd3651c429df7c267d1ee609273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1,3 +1,148 @@\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/103211\n+\t* dbgcnt.def (ipa_attr): New counters.\n+\t* ipa-pure-const.c: Include dbgcnt.c\n+\t(ipa_make_function_const): Use debug counter.\n+\t(ipa_make_function_pure): Likewise.\n+\t(propagate_pure_const): Fix bug in my previous change.\n+\n+2021-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.c (modref_access_node::range_info_useful_p):\n+\tOffline from ipa-modref-tree.h.\n+\t(modref_access_node::dump): Move from ipa-modref.c; make member\n+\tfunction.\n+\t* ipa-modref-tree.h (modref_access_node::range_info_useful_p.\n+\tmodref_access_node::dump): Declare.\n+\t* ipa-modref.c (dump_access): Remove.\n+\t(dump_records): Update.\n+\t(dump_lto_records): Update.\n+\t(record_access): Update.\n+\t(record_access_lto): Update.\n+\n+2021-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (modref_summary::modref_summary): Clear new flags.\n+\t(modref_summary::dump): Dump try_dse.\n+\t(modref_summary::finalize): Add FUN attribute; compute try-dse.\n+\t(analyze_function): Update.\n+\t(read_section): Update.\n+\t(update_signature): Update.\n+\t(pass_ipa_modref::execute): Update.\n+\t* ipa-modref.h (struct modref_summary):\n+\t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_range): Export.\n+\t* tree-ssa-alias.h (ao_ref_init_from_ptr_and_range): Declare.\n+\t* tree-ssa-dse.c (dse_optimize_call): New function.\n+\t(dse_optimize_stmt): Use it.\n+\n+2021-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.c: Move #if CHECKING_P to proper place.\n+\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref-tree.h\n+\t(struct modref_access_node): Move longer member functions to\n+\tipa-modref-tree.c\n+\t(modref_ref_node::try_merge_with): Turn into modreef_acces_node member\n+\tfunction.\n+\t* ipa-modref-tree.c (modref_access_node::contains): Move here\n+\tfrom ipa-modref-tree.h.\n+\t(modref_access_node::update): Likewise.\n+\t(modref_access_node::merge): Likewise.\n+\t(modref_access_node::closer_pair_p): Likewise.\n+\t(modref_access_node::forced_merge): Likewise.\n+\t(modref_access_node::update2): Likewise.\n+\t(modref_access_node::combined_offsets): Likewise.\n+\t(modref_access_node::try_merge_with): Likewise.\n+\t(modref_access_node::insert): Likewise.\n+\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (modref_summary::global_memory_read_p): Remove.\n+\t(modref_summary::global_memory_written_p): Remove.\n+\t(modref_summary::dump): Dump new flags.\n+\t(modref_summary::finalize): New member function.\n+\t(analyze_function): Call it.\n+\t(read_section): Call it.\n+\t(update_signature): Call it.\n+\t(pass_ipa_modref::execute): Call it.\n+\t* ipa-modref.h (struct modref_summary): Remove\n+\tglobal_memory_read_p and global_memory_written_p.\n+\tAdd global_memory_read, global_memory_written.\n+\t* tree-ssa-structalias.c (determine_global_memory_access):\n+\tUpdate.\n+\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-fnsummary.c (compute_fn_summary): Use type_attribut_allowed_p\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_adjustments::type_attribute_allowed_p):\n+\tNew member function.\n+\t(drop_type_attribute_if_params_changed_p): New function.\n+\t(build_adjusted_function_type): Use it.\n+\t* ipa-param-manipulation.h: Add type_attribute_allowed_p.\n+\n+2021-11-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (Static Analyzer Options): Add\n+\t-Wno-analyzer-tainted-allocation-size,\n+\t-Wno-analyzer-tainted-divisor, -Wno-analyzer-tainted-offset, and\n+\t-Wno-analyzer-tainted-size to list.  Add\n+\t-Wanalyzer-tainted-allocation-size, -Wanalyzer-tainted-divisor,\n+\t-Wanalyzer-tainted-offset, and -Wanalyzer-tainted-size to list\n+\tof options effectively enabled by -fanalyzer.\n+\t(-Wanalyzer-tainted-allocation-size): New.\n+\t(-Wanalyzer-tainted-array-index): Tweak wording; add link to CWE.\n+\t(-Wanalyzer-tainted-divisor): New.\n+\t(-Wanalyzer-tainted-offset): New.\n+\t(-Wanalyzer-tainted-size): New.\n+\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* attr-fnspec.h (attr_fnspec::arg_eaf_flags): Break out from ...\n+\t* gimple.c (gimple_call_arg_flags): ... here.\n+\t* ipa-modref.c (analyze_parms): Record flags known from fnspec.\n+\t(modref_merge_call_site_flags): Use arg_eaf_flags.\n+\n+2021-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103222\n+\t* gimple-range-path.cc (path_range_query::compute_ranges_in_phis):\n+\tNew.\n+\t(path_range_query::compute_ranges_in_block): Call\n+\tcompute_ranges_in_phis.\n+\t* gimple-range-path.h (path_range_query::compute_ranges_in_phis):\n+\tNew.\n+\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-fnsummary.c (compute_fn_summary): Do not give up on signature\n+\tchanges on \"fn spec\" attribute; give up on varadic types.\n+\t* ipa-param-manipulation.c: Include attribs.h.\n+\t(build_adjusted_function_type): New parameter ARG_MODIFIED; if it is\n+\ttrue remove \"fn spec\" attribute.\n+\t(ipa_param_adjustments::build_new_function_type): Update.\n+\t(ipa_param_body_adjustments::modify_formal_parameters): update.\n+\t* ipa-sra.c: Include attribs.h.\n+\t(ipa_sra_preliminary_function_checks): Do not check for TYPE_ATTRIBUTES.\n+\n+2021-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::path_range_query): Merge\n+\tctors.\n+\t(path_range_query::import_p): Move from header file.\n+\t(path_range_query::~path_range_query): Adjust for combined ctors.\n+\t* gimple-range-path.h: Merge ctors.\n+\t(path_range_query::import_p): Move to .cc file.\n+\n+2021-11-13  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/103182\n+\t* ipa-modref.c (callee_to_caller_flags): Fix merging of flags.\n+\t(modref_eaf_analysis::analyze_ssa_name): Fix merging of flags.\n+\n 2021-11-12  Stafford Horne  <shorne@gmail.com>\n \n \t* config/or1k/or1k-protos.h (or1k_profile_hook): New function."}, {"sha": "7b6a519184bcb54adc2cef11920e414c1f1ffe42", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1 +1 @@\n-20211113\n+20211114"}, {"sha": "40678a1607778a386c095b731e375435ec9b2f7f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1,3 +1,76 @@\n+2021-11-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.opt (Wanalyzer-tainted-allocation-size): New.\n+\t(Wanalyzer-tainted-divisor): New.\n+\t(Wanalyzer-tainted-offset): New.\n+\t(Wanalyzer-tainted-size): New.\n+\t* engine.cc (impl_region_model_context::get_taint_map): New.\n+\t* exploded-graph.h (impl_region_model_context::get_taint_map):\n+\tNew decl.\n+\t* program-state.cc (sm_state_map::get_state): Call\n+\talt_get_inherited_state.\n+\t(sm_state_map::impl_set_state): Modify states within\n+\tcompound svalues.\n+\t(program_state::impl_call_analyzer_dump_state): Undo casts.\n+\t(selftest::test_program_state_1): Update for new context param of\n+\tcreate_region_for_heap_alloc.\n+\t(selftest::test_program_state_merging): Likewise.\n+\t* region-model-impl-calls.cc (region_model::impl_call_alloca):\n+\tLikewise.\n+\t(region_model::impl_call_calloc): Likewise.\n+\t(region_model::impl_call_malloc): Likewise.\n+\t(region_model::impl_call_operator_new): Likewise.\n+\t(region_model::impl_call_realloc): Likewise.\n+\t* region-model.cc (region_model::check_region_access): Call\n+\tcheck_region_for_taint.\n+\t(region_model::get_representative_path_var_1): Handle binops.\n+\t(region_model::create_region_for_heap_alloc): Add \"ctxt\" param and\n+\tpass it to set_dynamic_extents.\n+\t(region_model::create_region_for_alloca): Likewise.\n+\t(region_model::set_dynamic_extents): Add \"ctxt\" param and use it\n+\tto call check_dynamic_size_for_taint.\n+\t(selftest::test_state_merging): Update for new context param of\n+\tcreate_region_for_heap_alloc.\n+\t(selftest::test_malloc_constraints): Likewise.\n+\t(selftest::test_malloc): Likewise.\n+\t(selftest::test_alloca): Likewise for create_region_for_alloca.\n+\t* region-model.h (region_model::create_region_for_heap_alloc): Add\n+\t\"ctxt\" param.\n+\t(region_model::create_region_for_alloca): Likewise.\n+\t(region_model::set_dynamic_extents): Likewise.\n+\t(region_model::check_dynamic_size_for_taint): New decl.\n+\t(region_model::check_region_for_taint): New decl.\n+\t(region_model_context::get_taint_map): New vfunc.\n+\t(noop_region_model_context::get_taint_map): New.\n+\t* sm-taint.cc: Remove include of \"diagnostic-event-id.h\"; add\n+\tincludes of \"gimple-iterator.h\", \"tristate.h\", \"selftest.h\",\n+\t\"ordered-hash-map.h\", \"cgraph.h\", \"cfg.h\", \"digraph.h\",\n+\t\"analyzer/supergraph.h\", \"analyzer/call-string.h\",\n+\t\"analyzer/program-point.h\", \"analyzer/store.h\",\n+\t\"analyzer/region-model.h\", and \"analyzer/program-state.h\".\n+\t(enum bounds): Move to top of file.\n+\t(class taint_diagnostic): New.\n+\t(class tainted_array_index): Convert to subclass of taint_diagnostic.\n+\t(tainted_array_index::emit): Add CWE-129.  Reword warning to use\n+\t\"attacker-controlled\" rather than \"tainted\".\n+\t(tainted_array_index::describe_state_change): Move to\n+\ttaint_diagnostic::describe_state_change.\n+\t(tainted_array_index::describe_final_event): Reword to use\n+\t\"attacker-controlled\" rather than \"tainted\".\n+\t(class tainted_offset): New.\n+\t(class tainted_size): New.\n+\t(class tainted_divisor): New.\n+\t(class tainted_allocation_size): New.\n+\t(taint_state_machine::alt_get_inherited_state): New.\n+\t(taint_state_machine::on_stmt): In assignment handling, remove\n+\tARRAY_REF handling in favor of check_region_for_taint.  Add\n+\tdetection of tainted divisors.\n+\t(taint_state_machine::get_taint): New.\n+\t(taint_state_machine::combine_states): New.\n+\t(region_model::check_region_for_taint): New.\n+\t(region_model::check_dynamic_size_for_taint): New.\n+\t* sm.h (state_machine::alt_get_inherited_state): New.\n+\n 2021-11-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (exploded_node::on_stmt_pre): Return when handling"}, {"sha": "c262b55f474bcf7e5529017af6f6ca41bc256708", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1,3 +1,28 @@\n+2021-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/cpp1z/inh-ctor23.C: Fix template\n+\t* g++.dg/ipa/ipa-icf-4.C: Fix template\n+\t* gcc.dg/tree-ssa/modref-dse-1.c: New test.\n+\t* gcc.dg/tree-ssa/modref-dse-2.c: New test.\n+\n+2021-11-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/pr93382.c: Tweak expected wording.\n+\t* gcc.dg/analyzer/taint-alloc-1.c: New test.\n+\t* gcc.dg/analyzer/taint-alloc-2.c: New test.\n+\t* gcc.dg/analyzer/taint-divisor-1.c: New test.\n+\t* gcc.dg/analyzer/taint-1.c: Rename to...\n+\t* gcc.dg/analyzer/taint-read-index-1.c: ...this.  Tweak expected\n+\twording.  Mark some events as xfail.\n+\t* gcc.dg/analyzer/taint-read-offset-1.c: New test.\n+\t* gcc.dg/analyzer/taint-size-1.c: New test.\n+\t* gcc.dg/analyzer/taint-write-index-1.c: New test.\n+\t* gcc.dg/analyzer/taint-write-offset-1.c: New test.\n+\n+2021-11-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr103222.c: New test.\n+\n 2021-11-12  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/103209"}, {"sha": "495245d9d0432c5c2a84565c4432de749b356fef", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1,3 +1,7 @@\n+2021-11-13  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: Update to the corresponding revision.\n+\n 2021-11-04  Martin Liska  <mliska@suse.cz>\n \n \t* LOCAL_PATCHES: Update git revision."}, {"sha": "56d90d6f7852d60884c43f92c0bcc6b6478b5014", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8029add3065e4abb5dbaa92ce3f1b307f3e16ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a8029add3065e4abb5dbaa92ce3f1b307f3e16ef", "patch": "@@ -1,3 +1,20 @@\n+2021-11-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add spanstream header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/precompiled/stdc++.h: Add spanstream header.\n+\t* include/std/version (__cpp_lib_spanstream): Define.\n+\t* include/std/spanstream: New file.\n+\t* testsuite/27_io/spanstream/1.cc: New test.\n+\t* testsuite/27_io/spanstream/version.cc: New test.\n+\n+2021-11-13  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR libstdc++/103166\n+\t* acinclude.m4 (GLIBCXX_CHECK_GETENTROPY, GLIBCXX_CHECK_ARC4RANDOM):\n+\tUse GCC_TRY_COMPILE_OR_LINK instead of AC_TRY_COMPILE.\n+\t* configure: Regenerate.\n+\n 2021-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59675"}]}