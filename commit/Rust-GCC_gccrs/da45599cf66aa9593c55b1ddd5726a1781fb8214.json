{"sha": "da45599cf66aa9593c55b1ddd5726a1781fb8214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0NTU5OWNmNjZhYTk1OTNjNTViMWRkZDU3MjZhMTc4MWZiODIxNA==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-07-15T20:40:02Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-07-15T20:40:02Z"}, "message": "* config/mips/mips.md (*extenddi_truncate<mode>,\n\n\t*extendsi_truncate<mode>): Change type attribute to move_type\n\twith shift_shift.  Split out code handling exts from here ...\n\t(*extend<GPR:mode>_truncate<SHORT:mode>_exts): ... to this new\n\tpattern.\n\t(*extendhi_truncateqi): Change type attribute to move_type with\n\tshift_shift.  Split out code handling exts from here ...\n\t(*extendhi_truncateqi_exts): ... to this new pattern.\n\nFrom-SVN: r149694", "tree": {"sha": "b65ecc4109165fccb60c845cfa72f126ff87b523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b65ecc4109165fccb60c845cfa72f126ff87b523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da45599cf66aa9593c55b1ddd5726a1781fb8214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da45599cf66aa9593c55b1ddd5726a1781fb8214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da45599cf66aa9593c55b1ddd5726a1781fb8214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da45599cf66aa9593c55b1ddd5726a1781fb8214/comments", "author": null, "committer": null, "parents": [{"sha": "31f44cd09ad0001da1bf2e12fb18931a1c4142df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f44cd09ad0001da1bf2e12fb18931a1c4142df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f44cd09ad0001da1bf2e12fb18931a1c4142df"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "c600bcb6c20d9b910c1c73ccfa7f6e1856ff59d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da45599cf66aa9593c55b1ddd5726a1781fb8214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da45599cf66aa9593c55b1ddd5726a1781fb8214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da45599cf66aa9593c55b1ddd5726a1781fb8214", "patch": "@@ -1,3 +1,14 @@\n+2009-07-15  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.md (*extenddi_truncate<mode>,\n+\t*extendsi_truncate<mode>): Change type attribute to move_type\n+\twith shift_shift.  Split out code handling exts from here ...\n+\t(*extend<GPR:mode>_truncate<SHORT:mode>_exts): ... to this new\n+\tpattern.\n+\t(*extendhi_truncateqi): Change type attribute to move_type with\n+\tshift_shift.  Split out code handling exts from here ...\n+\t(*extendhi_truncateqi_exts): ... to this new pattern.\n+\n 2009-07-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (copysign<mode>3): Use \"and-not\" SSE instruction"}, {"sha": "fc32c7586886f71df6fcc7bfe3e1ab31ac984f27", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da45599cf66aa9593c55b1ddd5726a1781fb8214/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da45599cf66aa9593c55b1ddd5726a1781fb8214/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=da45599cf66aa9593c55b1ddd5726a1781fb8214", "patch": "@@ -3016,14 +3016,9 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(sign_extend:DI\n \t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-{\n-  if (!ISA_HAS_EXTS)\n-    return \"#\";\n-  operands[2] = GEN_INT (GET_MODE_BITSIZE (<SHORT:MODE>mode));\n-  return \"exts\\t%0,%1,0,%m2\";\n-}\n-  \"&& reload_completed && !ISA_HAS_EXTS\"\n+  \"TARGET_64BIT && !TARGET_MIPS16 && !ISA_HAS_EXTS\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(ashift:DI (match_dup 1)\n \t\t   (match_dup 3)))\n@@ -3034,21 +3029,16 @@\n   operands[2] = gen_lowpart (DImode, operands[0]);\n   operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n }\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"move_type\" \"shift_shift\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn_and_split \"*extendsi_truncate<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(sign_extend:SI\n \t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-{\n-  if (!ISA_HAS_EXTS)\n-    return \"#\";\n-  operands[2] = GEN_INT (GET_MODE_BITSIZE (<SHORT:MODE>mode));\n-  return \"exts\\t%0,%1,0,%m2\";\n-}\n-  \"&& reload_completed && !ISA_HAS_EXTS\"\n+  \"TARGET_64BIT && !TARGET_MIPS16 && !ISA_HAS_EXTS\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(ashift:DI (match_dup 1)\n \t\t   (match_dup 3)))\n@@ -3059,18 +3049,16 @@\n   operands[2] = gen_lowpart (DImode, operands[0]);\n   operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n }\n-  [(set_attr \"type\" \"arith\")\n+  [(set_attr \"move_type\" \"shift_shift\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn_and_split \"*extendhi_truncateqi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(sign_extend:HI\n \t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-{\n-  return ISA_HAS_EXTS ? \"exts\\t%0,%1,0,7\" : \"#\";\n-}\n-  \"&& reload_completed && !ISA_HAS_EXTS\"\n+  \"TARGET_64BIT && !TARGET_MIPS16 && !ISA_HAS_EXTS\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(ashift:DI (match_dup 1)\n \t\t   (const_int 56)))\n@@ -3080,6 +3068,27 @@\n {\n   operands[2] = gen_lowpart (DImode, operands[0]);\n }\n+  [(set_attr \"move_type\" \"shift_shift\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*extend<GPR:mode>_truncate<SHORT:mode>_exts\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(sign_extend:GPR\n+\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+  \"TARGET_64BIT && !TARGET_MIPS16 && ISA_HAS_EXTS\"\n+{\n+  operands[2] = GEN_INT (GET_MODE_BITSIZE (<SHORT:MODE>mode));\n+  return \"exts\\t%0,%1,0,%m2\";\n+}\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+(define_insn \"*extendhi_truncateqi_exts\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+\t(sign_extend:HI\n+\t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+  \"TARGET_64BIT && !TARGET_MIPS16 && ISA_HAS_EXTS\"\n+  \"exts\\t%0,%1,0,7\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n "}]}