{"sha": "6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3M2U4YTBhOWE1MjQyYTMwY2FmYzcyOTBlOWQ2NDQ5YThjZWU1Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-17T02:34:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-17T02:34:22Z"}, "message": "pt.c (tinst_level_tick, [...]): Replace with last_error_tinst_level.\n\ngcc/cp/\n\t* pt.c (tinst_level_tick, last_template_error_tick): Replace with\n\tlast_error_tinst_level.\n\t(push_tinst_level, pop_tinst_level): Adjust.\n\t(problematic_instantiation_changed): Adjust.\n\t(record_last_problematic_instantiation): Adjust.\n\t* error.c (cp_print_error_function): Don't print\n\tcurrent_function_decl if we're in a template instantiation context.\n\t(print_instantiation_full_context): Always print first line.\ngcc/testsuite/\n\t* lib/prune.exp (prune_gcc_output): Prune \"In substitution\" too.\n\nFrom-SVN: r176366", "tree": {"sha": "a63c4991199e85d2676b29a436459f79f0374054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63c4991199e85d2676b29a436459f79f0374054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d2f6864225cc660adfc9136c859dd26e2a40135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2f6864225cc660adfc9136c859dd26e2a40135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2f6864225cc660adfc9136c859dd26e2a40135"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "d27ba873d6eeb51b1a5165176d5b6decc9e172b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -1,3 +1,14 @@\n+2011-07-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (tinst_level_tick, last_template_error_tick): Replace with\n+\tlast_error_tinst_level.\n+\t(push_tinst_level, pop_tinst_level): Adjust.\n+\t(problematic_instantiation_changed): Adjust.\n+\t(record_last_problematic_instantiation): Adjust.\n+\t* error.c (cp_print_error_function): Don't print\n+\tcurrent_function_decl if we're in a template instantiation context.\n+\t(print_instantiation_full_context): Always print first line.\n+\n 2011-07-16  Nathan Froyd  <froydnj@codesourcery.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "2d7c0f1f0b616de16411f43f129fd5b503bc4d0d", "filename": "gcc/cp/error.c", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -2784,6 +2784,10 @@ static void\n cp_print_error_function (diagnostic_context *context,\n \t\t\t diagnostic_info *diagnostic)\n {\n+  /* If we are in an instantiation context, current_function_decl is likely\n+     to be wrong, so just rely on print_instantiation_full_context.  */\n+  if (current_instantiation ())\n+    return;\n   if (diagnostic_last_function_changed (context, diagnostic))\n     {\n       const char *old_prefix = context->printer->prefix;\n@@ -2927,26 +2931,15 @@ print_instantiation_full_context (diagnostic_context *context)\n \n   if (p)\n     {\n-      if (current_function_decl != p->decl\n-\t  && current_function_decl != NULL_TREE)\n-\t/* We can get here during the processing of some synthesized\n-\t   method.  Then, P->DECL will be the function that's causing\n-\t   the synthesis.  */\n-\t;\n-      else\n-\t{\n-\t  if (current_function_decl == p->decl)\n-\t    /* Avoid redundancy with the \"In function\" line.  */;\n-\t  else\n-\t    pp_verbatim (context->printer,\n-\t\t\t _(\"%s: In instantiation of %qs:\\n\"),\n-\t\t\t LOCATION_FILE (location),\n-\t\t\t decl_as_string_translate (p->decl,\n-\t\t\t\t\t\t   TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n-\n-\t  location = p->locus;\n-\t  p = p->next;\n-\t}\n+      pp_verbatim (context->printer,\n+\t\t   TREE_CODE (p->decl) == TREE_LIST\n+\t\t   ? _(\"%s: In substitution of %qS:\\n\")\n+\t\t   : _(\"%s: In instantiation of %q#D:\\n\"),\n+\t\t   LOCATION_FILE (location),\n+\t\t   p->decl);\n+\n+      location = p->locus;\n+      p = p->next;\n     }\n \n   print_instantiation_partial_context (context, p, location);"}, {"sha": "f34e1df818b553f626dbfaf6586716d56307fcc2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -7766,8 +7766,7 @@ extern int max_tinst_depth;\n #ifdef GATHER_STATISTICS\n int depth_reached;\n #endif\n-static int tinst_level_tick;\n-static int last_template_error_tick;\n+static GTY(()) struct tinst_level *last_error_tinst_level;\n \n /* We're starting to instantiate D; record the template instantiation context\n    for diagnostics and to restore it later.  */\n@@ -7779,7 +7778,7 @@ push_tinst_level (tree d)\n \n   if (tinst_depth >= max_tinst_depth)\n     {\n-      last_template_error_tick = tinst_level_tick;\n+      last_error_tinst_level = current_tinst_level;\n       if (TREE_CODE (d) == TREE_LIST)\n \terror (\"template instantiation depth exceeds maximum of %d (use \"\n \t       \"-ftemplate-depth= to increase the maximum) substituting %qS\",\n@@ -7814,7 +7813,6 @@ push_tinst_level (tree d)\n     depth_reached = tinst_depth;\n #endif\n \n-  ++tinst_level_tick;\n   return 1;\n }\n \n@@ -7829,7 +7827,6 @@ pop_tinst_level (void)\n   input_location = current_tinst_level->locus;\n   current_tinst_level = current_tinst_level->next;\n   --tinst_depth;\n-  ++tinst_level_tick;\n }\n \n /* We're instantiating a deferred template; restore the template\n@@ -13961,6 +13958,7 @@ deduction_tsubst_fntype (tree fn, tree targs, tsubst_flags_t complain)\n   static bool excessive_deduction_depth;\n   static int deduction_depth;\n   struct pending_template *old_last_pend = last_pending_template;\n+  struct tinst_level *old_error_tinst = last_error_tinst_level;\n \n   tree fntype = TREE_TYPE (fn);\n   tree tinst;\n@@ -13993,8 +13991,10 @@ deduction_tsubst_fntype (tree fn, tree targs, tsubst_flags_t complain)\n     }\n \n   pop_tinst_level ();\n-  /* We can't free this if a pending_template entry is pointing at it.  */\n-  if (last_pending_template == old_last_pend)\n+  /* We can't free this if a pending_template entry or last_error_tinst_level\n+     is pointing at it.  */\n+  if (last_pending_template == old_last_pend\n+      && last_error_tinst_level == old_error_tinst)\n     ggc_free (tinst);\n   return r;\n }\n@@ -18564,14 +18564,14 @@ get_mostly_instantiated_function_type (tree decl)\n int\n problematic_instantiation_changed (void)\n {\n-  return last_template_error_tick != tinst_level_tick;\n+  return current_tinst_level != last_error_tinst_level;\n }\n \n /* Remember current template involved in diagnostics.  */\n void\n record_last_problematic_instantiation (void)\n {\n-  last_template_error_tick = tinst_level_tick;\n+  last_error_tinst_level = current_tinst_level;\n }\n \n struct tinst_level *"}, {"sha": "ffecc486dc7ce228d9f6b382e8f19af898d61b22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -1,3 +1,7 @@\n+2011-07-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* lib/prune.exp (prune_gcc_output): Prune \"In substitution\" too.\n+\n 2011-07-16  Nathan Froyd  <froydnj@codesourcery.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "4683f9315896e5ffdaedb7459f0968c2d8af9590", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -20,7 +20,7 @@\n proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\"\n \n-    regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|substitution|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?required \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   . skipping \\[0-9\\]* instantiation contexts \\[^\\n\\]*\" $text \"\" text"}, {"sha": "a884d0171df8a6f3e9aa1a0bdfd4fa4410960cce", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -47,6 +47,6 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"In member function\" \"\" { target *-*-* } 0 }\n+// { dg-error \"In instantiation\" \"\" { target *-*-* } 0 }\n // { dg-error \"cannot convert\" \"\" { target *-*-* } 0 }\n // { dg-error \"required from\" \"\" { target *-*-* } 0 }"}, {"sha": "ec41e5be85284443326e4b0c0d358226d8d64ca9", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/assign/shared_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6573e8a0a9a5242a30cafc7290e9d6449a8cee52/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc?ref=6573e8a0a9a5242a30cafc7290e9d6449a8cee52", "patch": "@@ -46,6 +46,6 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"In member function\" \"\" { target *-*-* } 0 }\n+// { dg-error \"In instantiation\" \"\" { target *-*-* } 0 }\n // { dg-error \"cannot convert\" \"\" { target *-*-* } 0 }\n // { dg-error \"required from\" \"\" { target *-*-* } 0 }"}]}