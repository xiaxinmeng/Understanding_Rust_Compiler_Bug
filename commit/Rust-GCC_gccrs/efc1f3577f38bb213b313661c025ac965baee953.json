{"sha": "efc1f3577f38bb213b313661c025ac965baee953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMWYzNTc3ZjM4YmIyMTNiMzEzNjYxYzAyNWFjOTY1YmFlZTk1Mw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-13T11:23:05Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-13T11:23:17Z"}, "message": "x86: Restore the frame pointer in word_mode\n\nWe must restore the frame pointer in word_mode for eh_return epilogues\nsince the upper 32 bits of RBP register can have any values.\n\nTested on Linux/x32 and Linux/x86-64.\n\n\tPR target/94556\n\t* config/i386/i386.c (ix86_expand_epilogue): Restore the frame\n\tpointer in word_mode for eh_return epilogues.", "tree": {"sha": "7f417aa1e394fe1abdf0726c095be6e86e7c037f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f417aa1e394fe1abdf0726c095be6e86e7c037f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc1f3577f38bb213b313661c025ac965baee953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc1f3577f38bb213b313661c025ac965baee953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc1f3577f38bb213b313661c025ac965baee953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc1f3577f38bb213b313661c025ac965baee953/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04637536a6b69c6bf7e22e2ccd5ff3bfc4892394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04637536a6b69c6bf7e22e2ccd5ff3bfc4892394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04637536a6b69c6bf7e22e2ccd5ff3bfc4892394"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "b4229419bc21e8d9c50b434034a190ccd472ff7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc1f3577f38bb213b313661c025ac965baee953/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc1f3577f38bb213b313661c025ac965baee953/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efc1f3577f38bb213b313661c025ac965baee953", "patch": "@@ -1,3 +1,9 @@\n+2020-04-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/94556\n+\t* config/i386/i386.c (ix86_expand_epilogue): Restore the frame\n+\tpointer in word_mode for eh_return epilogues.\n+\n 2020-04-13  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_print_operand): Don't add offsets to"}, {"sha": "5e87cd463d058240ceba9129cc3ba88d7ff92f31", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc1f3577f38bb213b313661c025ac965baee953/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc1f3577f38bb213b313661c025ac965baee953/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=efc1f3577f38bb213b313661c025ac965baee953", "patch": "@@ -9052,8 +9052,13 @@ ix86_expand_epilogue (int style)\n \t      t = plus_constant (Pmode, t, m->fs.fp_offset - UNITS_PER_WORD);\n \t      emit_insn (gen_rtx_SET (sa, t));\n \n-\t      t = gen_frame_mem (Pmode, hard_frame_pointer_rtx);\n-\t      insn = emit_move_insn (hard_frame_pointer_rtx, t);\n+\t      /* NB: eh_return epilogues must restore the frame pointer\n+\t\t in word_mode since the upper 32 bits of RBP register\n+\t\t can have any values.  */\n+\t      t = gen_frame_mem (word_mode, hard_frame_pointer_rtx);\n+\t      rtx frame_reg = gen_rtx_REG (word_mode,\n+\t\t\t\t\t   HARD_FRAME_POINTER_REGNUM);\n+\t      insn = emit_move_insn (frame_reg, t);\n \n \t      /* Note that we use SA as a temporary CFA, as the return\n \t\t address is at the proper place relative to it.  We\n@@ -9068,7 +9073,7 @@ ix86_expand_epilogue (int style)\n \t      add_reg_note (insn, REG_CFA_DEF_CFA,\n \t\t\t    plus_constant (Pmode, sa, UNITS_PER_WORD));\n \t      ix86_add_queued_cfa_restore_notes (insn);\n-\t      add_reg_note (insn, REG_CFA_RESTORE, hard_frame_pointer_rtx);\n+\t      add_reg_note (insn, REG_CFA_RESTORE, frame_reg);\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \n \t      m->fs.cfa_reg = sa;"}]}