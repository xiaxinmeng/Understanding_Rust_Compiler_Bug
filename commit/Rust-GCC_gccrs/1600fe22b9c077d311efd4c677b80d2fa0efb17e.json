{"sha": "1600fe22b9c077d311efd4c677b80d2fa0efb17e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwMGZlMjJiOWMwNzdkMzExZWZkNGM2NzdiODBkMmZhMGVmYjE3ZQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-03T22:35:41Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-03T22:35:41Z"}, "message": "gfortran.h (gfc_actual_arglist): New field missing_arg_type.\n\nfortran/\n* gfortran.h (gfc_actual_arglist): New field missing_arg_type.\n* interface.c (compare_actual_formal): Keep type of omitted\noptional arguments.\n* trans-expr.c (gfc_conv_function_call): Add string length\nargument for omitted string argument.\n\ntestsuite/\n* gfortran.fortran-torture/execute/optstring_1.f90: New testcase.\n\nFrom-SVN: r82608", "tree": {"sha": "1c845ff438eb6e41b7432a288e671baf85346e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c845ff438eb6e41b7432a288e671baf85346e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1600fe22b9c077d311efd4c677b80d2fa0efb17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1600fe22b9c077d311efd4c677b80d2fa0efb17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1600fe22b9c077d311efd4c677b80d2fa0efb17e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1600fe22b9c077d311efd4c677b80d2fa0efb17e/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed5947c9bcae4c500c8e96f2809b4df527234804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5947c9bcae4c500c8e96f2809b4df527234804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5947c9bcae4c500c8e96f2809b4df527234804"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "75168d8e49dc29497fef1de390a969be9de27bc4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1600fe22b9c077d311efd4c677b80d2fa0efb17e", "patch": "@@ -1,4 +1,12 @@\n-2004-05-03  Paul Brook  <paul@codesourcery.com>\n+2004-06-03  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h (gfc_actual_arglist): New field missing_arg_type.\n+\t* interface.c (compare_actual_formal): Keep type of omitted\n+\toptional arguments.\n+\t* trans-expr.c (gfc_conv_function_call): Add string length\n+\targument for omitted string argument.\n+\n+2004-06-03  Paul Brook  <paul@codesourcery.com>\n \n \t* trans.c (gfc_finish_block, gfc_add_expr_to_block): Build statement\n \tlists instead of compound expr chains."}, {"sha": "c82483e985185195cc34a20968565ef30e558cee", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=1600fe22b9c077d311efd4c677b80d2fa0efb17e", "patch": "@@ -538,6 +538,11 @@ typedef struct gfc_actual_arglist\n   /* Alternate return label when the expr member is null.  */\n   struct gfc_st_label *label;\n \n+  /* This is set to the type of an eventual omitted optional\n+     argument. This is used to determine if a hidden string length\n+     argument has to be added to a function call.  */\n+  bt missing_arg_type;\n+\n   struct gfc_expr *expr;\n   struct gfc_actual_arglist *next;\n }"}, {"sha": "30706d413d5eaab34395c251971f15f910c9c4ac", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=1600fe22b9c077d311efd4c677b80d2fa0efb17e", "patch": "@@ -1096,7 +1096,8 @@ compare_parameter (gfc_symbol * formal, gfc_expr * actual,\n       return compare_interfaces (formal, actual->symtree->n.sym, 0);\n     }\n \n-  if (!gfc_compare_types (&formal->ts, &actual->ts))\n+  if (actual->expr_type != EXPR_NULL\n+      && !gfc_compare_types (&formal->ts, &actual->ts))\n     return 0;\n \n   if (symbol_rank (formal) == actual->rank)\n@@ -1235,7 +1236,8 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n \t  return 0;\n \t}\n \n-      if (compare_pointer (f->sym, a->expr) == 0)\n+      if (a->expr->expr_type != EXPR_NULL\n+\t  && compare_pointer (f->sym, a->expr) == 0)\n \t{\n \t  if (where)\n \t    gfc_error (\"Actual argument for '%s' must be a pointer at %L\",\n@@ -1291,6 +1293,11 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n   if (*ap == NULL && n > 0)\n     *ap = new[0];\n \n+  /* Note the types of omitted optional arguments.  */\n+  for (a = actual, f = formal; a; a = a->next, f = f->next)\n+    if (a->expr == NULL && a->label == NULL)\n+      a->missing_arg_type = f->sym->ts.type;\n+\n   return 1;\n }\n "}, {"sha": "dda08bbed81b42f07ee95af7be63fd222eda85db", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1600fe22b9c077d311efd4c677b80d2fa0efb17e", "patch": "@@ -1077,7 +1077,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t      /* Pass a NULL pointer for an absent arg.  */\n \t      gfc_init_se (&parmse, NULL);\n \t      parmse.expr = null_pointer_node;\n-              if (formal && formal->sym->ts.type == BT_CHARACTER)\n+              if (arg->missing_arg_type == BT_CHARACTER)\n                 {\n                   stringargs = gfc_chainon_list (stringargs,\n                       convert (gfc_strlen_type_node, integer_zero_node));"}, {"sha": "14252999c6bbe1dcebe8383305016d12852a3368", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1600fe22b9c077d311efd4c677b80d2fa0efb17e", "patch": "@@ -1,3 +1,7 @@\n+2004-06-03  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.fortran-torture/execute/optstring_1.f90: New testcase.\n+\n 2004-06-02  Ziemowit Laski  <zlaski@apple.com>\n \n \t* lib/objc.exp (objc_target_compile): When running tests on"}, {"sha": "58c397d1647a1ae0fe20154561af9645840b3523", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/optstring_1.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Foptstring_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1600fe22b9c077d311efd4c677b80d2fa0efb17e/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Foptstring_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Foptstring_1.f90?ref=1600fe22b9c077d311efd4c677b80d2fa0efb17e", "patch": "@@ -0,0 +1,21 @@\n+! Test optional character arguments.  We still need to pass a string\n+! length for the absent arguments\n+program optional_string_1\n+  implicit none\n+\n+  call test(1, \"test\");\n+  call test(2, c=42, b=\"Hello World\")\n+contains\n+subroutine test(i, a, b, c)\n+  integer ::  i\n+  character(len=4), optional :: a\n+  character(len=*), optional :: b\n+  integer, optional :: c\n+  if (i .eq. 1) then\n+    if (a .ne. \"test\") call abort\n+  else\n+    if (b .ne. \"Hello World\") call abort\n+    if (c .ne. 42) call abort\n+  end if\n+end subroutine\n+end program"}]}