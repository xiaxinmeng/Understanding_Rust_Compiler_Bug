{"sha": "871afdc512be0510cbd4fa0928e5a1bd0681766e", "node_id": "C_kwDOANBUbNoAKDg3MWFmZGM1MTJiZTA1MTBjYmQ0ZmEwOTI4ZTVhMWJkMDY4MTc2NmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-09T08:11:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-09T09:07:29Z"}, "message": "middle-end/104450 - ISEL and non-call EH\n\nThe following avoids merging a vector compare with EH with a\nVEC_COND_EXPR.  We should be able to do fallback expansion and if\nwe really are for the optimization we need quite some shuffling\nto arrange for the proper EH redirection in all cases, IMHO not\nworth it.\n\n2022-02-09  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/104450\n\t* gimple-isel.cc: Pass cfun around.\n\t(+gimple_expand_vec_cond_expr): Do not combine a throwing\n\tcomparison with the select.\n\n\t* g++.dg/torture/pr104450.C: New testcase.", "tree": {"sha": "59a1ab5c8095d6ab34799fc4b0e77f35653fbe65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59a1ab5c8095d6ab34799fc4b0e77f35653fbe65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/871afdc512be0510cbd4fa0928e5a1bd0681766e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871afdc512be0510cbd4fa0928e5a1bd0681766e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871afdc512be0510cbd4fa0928e5a1bd0681766e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871afdc512be0510cbd4fa0928e5a1bd0681766e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c827873ed283df282f2df11dfe0ff607e07dab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c827873ed283df282f2df11dfe0ff607e07dab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c827873ed283df282f2df11dfe0ff607e07dab3"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "1d93766b704e08070dd9be48556e3ae9ee3c786f", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871afdc512be0510cbd4fa0928e5a1bd0681766e/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871afdc512be0510cbd4fa0928e5a1bd0681766e/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=871afdc512be0510cbd4fa0928e5a1bd0681766e", "patch": "@@ -50,7 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n      u = _8;  */\n \n static gimple *\n-gimple_expand_vec_set_expr (gimple_stmt_iterator *gsi)\n+gimple_expand_vec_set_expr (struct function *fun, gimple_stmt_iterator *gsi)\n {\n   enum tree_code code;\n   gcall *new_stmt = NULL;\n@@ -76,7 +76,7 @@ gimple_expand_vec_set_expr (gimple_stmt_iterator *gsi)\n       tree pos = TREE_OPERAND (lhs, 1);\n       tree view_op0 = TREE_OPERAND (op0, 0);\n       machine_mode outermode = TYPE_MODE (TREE_TYPE (view_op0));\n-      if (auto_var_in_fn_p (view_op0, cfun->decl)\n+      if (auto_var_in_fn_p (view_op0, fun->decl)\n \t  && !TREE_ADDRESSABLE (view_op0) && can_vec_set_var_idx_p (outermode))\n \t{\n \t  location_t loc = gimple_location (stmt);\n@@ -110,7 +110,7 @@ gimple_expand_vec_set_expr (gimple_stmt_iterator *gsi)\n    function based on type of selected expansion.  */\n \n static gimple *\n-gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n+gimple_expand_vec_cond_expr (struct function *fun, gimple_stmt_iterator *gsi,\n \t\t\t     hash_map<tree, unsigned int> *vec_cond_ssa_name_uses)\n {\n   tree lhs, op0a = NULL_TREE, op0b = NULL_TREE;\n@@ -178,7 +178,11 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n \t}\n \n       gassign *def_stmt = dyn_cast<gassign *> (SSA_NAME_DEF_STMT (op0));\n-      if (def_stmt)\n+      if (def_stmt\n+\t  /* When the compare has EH we do not want to forward it when\n+\t     it has multiple uses and in general because of the complication\n+\t     with EH redirection.  */\n+\t  && !stmt_can_throw_internal (fun, def_stmt))\n \t{\n \t  tcode = gimple_assign_rhs_code (def_stmt);\n \t  op0a = gimple_assign_rhs1 (def_stmt);\n@@ -279,18 +283,18 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n    VEC_COND_EXPR assignments.  */\n \n static unsigned int\n-gimple_expand_vec_exprs (void)\n+gimple_expand_vec_exprs (struct function *fun)\n {\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n   hash_map<tree, unsigned int> vec_cond_ssa_name_uses;\n   auto_bitmap dce_ssa_names;\n \n-  FOR_EACH_BB_FN (bb, cfun)\n+  FOR_EACH_BB_FN (bb, fun)\n     {\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n-\t  gimple *g = gimple_expand_vec_cond_expr (&gsi,\n+\t  gimple *g = gimple_expand_vec_cond_expr (fun, &gsi,\n \t\t\t\t\t\t   &vec_cond_ssa_name_uses);\n \t  if (g != NULL)\n \t    {\n@@ -299,7 +303,7 @@ gimple_expand_vec_exprs (void)\n \t      gsi_replace (&gsi, g, false);\n \t    }\n \n-\t  gimple_expand_vec_set_expr (&gsi);\n+\t  gimple_expand_vec_set_expr (fun, &gsi);\n \t  if (gsi_end_p (gsi))\n \t    break;\n \t}\n@@ -342,9 +346,9 @@ class pass_gimple_isel : public gimple_opt_pass\n       return true;\n     }\n \n-  virtual unsigned int execute (function *)\n+  virtual unsigned int execute (function *fun)\n     {\n-      return gimple_expand_vec_exprs ();\n+      return gimple_expand_vec_exprs (fun);\n     }\n \n }; // class pass_gimple_isel"}, {"sha": "402a4849e54ef985f4fc98f19abef87cbc7c7b4e", "filename": "gcc/testsuite/g++.dg/torture/pr104450.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871afdc512be0510cbd4fa0928e5a1bd0681766e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr104450.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871afdc512be0510cbd4fa0928e5a1bd0681766e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr104450.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr104450.C?ref=871afdc512be0510cbd4fa0928e5a1bd0681766e", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fnon-call-exceptions\" }\n+// { dg-additional-options \"-mavx512f\" { target x86_64-*-* i?86-*-* } }\n+\n+#define vectsize 64\n+typedef int __attribute__((__vector_size__ (vectsize))) V;\n+typedef float __attribute__((__vector_size__ (vectsize))) F;\n+F f;\n+V v;\n+struct g{~g();};\n+void\n+foo (void)\n+{\n+  g t;\n+  v += (V) (0 <= f);\n+}"}]}