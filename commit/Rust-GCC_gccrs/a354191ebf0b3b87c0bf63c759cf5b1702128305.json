{"sha": "a354191ebf0b3b87c0bf63c759cf5b1702128305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM1NDE5MWViZjBiM2I4N2MwYmY2M2M3NTljZjViMTcwMjEyODMwNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-21T00:27:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-21T00:27:04Z"}, "message": "libiberty.h (physmem_total, [...]): Prototype.\n\ninclude:\n\t* libiberty.h (physmem_total, physmem_available): Prototype.\n\nlibiberty:\n\t* Makefile.in (CFILES): Add physmem.c.\n\t(REQUIRED_OFILES): Add physmem.o.\n\t* configure.in: Check for sys/pstat.h.\n\t(checkfuncs): Add pstat_getstatic and pstat_getdynamic.\n\t* physmem.c: New file, copied from textutils.\n\n\t* config.in, configure: Regenerated.\n\nFrom-SVN: r63198", "tree": {"sha": "d7ff9fd0ca6913444d43463d7cf61e8571d20621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7ff9fd0ca6913444d43463d7cf61e8571d20621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a354191ebf0b3b87c0bf63c759cf5b1702128305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a354191ebf0b3b87c0bf63c759cf5b1702128305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a354191ebf0b3b87c0bf63c759cf5b1702128305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a354191ebf0b3b87c0bf63c759cf5b1702128305/comments", "author": null, "committer": null, "parents": [{"sha": "763b929241319ef2d738555a2e43a6e1587e5b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763b929241319ef2d738555a2e43a6e1587e5b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763b929241319ef2d738555a2e43a6e1587e5b76"}], "stats": {"total": 127, "additions": 120, "deletions": 7}, "files": [{"sha": "861aefc08ff4d1abc1c8b7680a132bb9e83c7833", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -1,3 +1,7 @@\n+2003-02-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (physmem_total, physmem_available): Prototype.\n+\n 2003-02-20  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* libiberty.h (lrealpath): Add declaration."}, {"sha": "dca120efaea4335fe20c55c3b3a1d6d997bad4f7", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -246,6 +246,10 @@ extern char *xstrdup PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n \n extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;\n \n+/* Physical memory routines.  */\n+extern double physmem_total PARAMS ((void));\n+extern double physmem_available PARAMS ((void));\n+\n /* hex character manipulation routines */\n \n #define _hex_array_size 256"}, {"sha": "2c72bfc6d90578f321360dee9c2ab6de2189c33c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -1,3 +1,13 @@\n+2003-02-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (CFILES): Add physmem.c.\n+\t(REQUIRED_OFILES): Add physmem.o.\n+\t* configure.in: Check for sys/pstat.h.\n+\t(checkfuncs): Add pstat_getstatic and pstat_getdynamic.\n+\t* physmem.c: New file, copied from textutils.\n+\n+\t* config.in, configure: Regenerated.\n+\n 2003-02-20  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* Makefile.in (CFILES): Add lrealpath.c."}, {"sha": "a12ebb156f4bd0f692c193621c9f01718ac97d71", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -145,7 +145,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tpartition.c\t\t\t\t\t\t\t\\\n \t pex-djgpp.c pex-mpw.c pex-msdos.c pex-os2.c\t\t\t\\\n \t pex-unix.c pex-win32.c\t\t\t\t\t\t\\\n-         putenv.c\t\t\t\t\t\t\t\\\n+         physmem.c putenv.c\t\t\t\t\t\t\\\n \trandom.c regex.c rename.c rindex.c\t\t\t\t\\\n \tsafe-ctype.c setenv.c sigsetmask.c sort.c spaces.c\t\t\\\n \t splay-tree.c strcasecmp.c strchr.c strdup.c strerror.c\t\t\\\n@@ -170,7 +170,7 @@ REQUIRED_OFILES = regex.o cplus-dem.o cp-demangle.o md5.o\t\t\\\n \tmake-relative-prefix.o\t\t\t\t\t\t\\\n \tmake-temp-file.o\t\t\t\t\t\t\\\n \tobjalloc.o obstack.o\t\t\t\t\t\t\\\n-\tpartition.o @pexecute@\t\t\t\t\t\t\\\n+\tpartition.o physmem.o @pexecute@\t\t\t\t\t\t\\\n \tsafe-ctype.o sort.o spaces.o splay-tree.o strerror.o\t\t\\\n \t strsignal.o\t\t\t\t\t\t\t\\\n \tternary.o\t\t\t\t\t\t\t\\"}, {"sha": "97c5702c2b11077bd58521c9348d1f968e202c79", "filename": "libiberty/config.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define to empty if the keyword does not work.  */\n #undef const\n@@ -222,6 +222,9 @@\n /* Define if you have the <sys/param.h> header file.  */\n #undef HAVE_SYS_PARAM_H\n \n+/* Define if you have the <sys/pstat.h> header file.  */\n+#undef HAVE_SYS_PSTAT_H\n+\n /* Define if you have the <sys/resource.h> header file.  */\n #undef HAVE_SYS_RESOURCE_H\n "}, {"sha": "75e7564dbbfc26dacdd8ed0a769242015d321e84", "filename": "libiberty/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -1356,7 +1356,7 @@ else\n fi\n echo \"$ac_t\"\"$CPP\" 1>&6\n \n-for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h\n+for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -1738,7 +1738,7 @@ funcs=\"$funcs waitpid\"\n vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n-checkfuncs=\"$checkfuncs realpath canonicalize_file_name\"\n+checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h."}, {"sha": "71e7a0928c9e63187751235f342621a9d091605a", "filename": "libiberty/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -142,7 +142,7 @@ AC_SUBST_FILE(host_makefile_frag)\n # It's OK to check for header files.  Although the compiler may not be\n # able to link anything, it had better be able to at least compile\n # something.\n-AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h)\n+AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h)\n AC_HEADER_SYS_WAIT\n AC_HEADER_TIME\n \n@@ -207,7 +207,7 @@ funcs=\"$funcs waitpid\"\n vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n-checkfuncs=\"$checkfuncs realpath canonicalize_file_name\"\n+checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h."}, {"sha": "c540d18d0dc5c78829d3e8d7a40f0ffd6151b377", "filename": "libiberty/physmem.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fphysmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a354191ebf0b3b87c0bf63c759cf5b1702128305/libiberty%2Fphysmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fphysmem.c?ref=a354191ebf0b3b87c0bf63c759cf5b1702128305", "patch": "@@ -0,0 +1,92 @@\n+/* Calculate the size of physical memory.\n+   Copyright 2000, 2001 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software Foundation,\n+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n+\n+/* Written by Paul Eggert.  */\n+\n+#if HAVE_CONFIG_H\n+# include <config.h>\n+#endif\n+\n+#if HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+\n+#if HAVE_SYS_PSTAT_H\n+# include <sys/pstat.h>\n+#endif\n+\n+/* Return the total amount of physical memory.  */\n+double\n+physmem_total (void)\n+{\n+#if defined _SC_PHYS_PAGES && defined _SC_PAGESIZE\n+  {\n+    double pages = sysconf (_SC_PHYS_PAGES);\n+    double pagesize = sysconf (_SC_PAGESIZE);\n+    if (0 <= pages && 0 <= pagesize)\n+      return pages * pagesize;\n+  }\n+#endif\n+\n+#if HAVE_PSTAT_GETSTATIC\n+  {\n+    struct pst_static pss;\n+    if (0 <= pstat_getstatic (&pss, sizeof pss, 1, 0))\n+      {\n+\tdouble pages = pss.physical_memory;\n+\tdouble pagesize = pss.page_size;\n+\tif (0 <= pages && 0 <= pagesize)\n+\t  return pages * pagesize;\n+      }\n+  }\n+#endif\n+\n+  /* Return 0 if we can't determine the value.  */\n+  return 0;\n+}\n+\n+/* Return the amount of physical memory available.  */\n+double\n+physmem_available (void)\n+{\n+#if defined _SC_AVPHYS_PAGES && defined _SC_PAGESIZE\n+  {\n+    double pages = sysconf (_SC_AVPHYS_PAGES);\n+    double pagesize = sysconf (_SC_PAGESIZE);\n+    if (0 <= pages && 0 <= pagesize)\n+      return pages * pagesize;\n+  }\n+#endif\n+\n+#if HAVE_PSTAT_GETSTATIC && HAVE_PSTAT_GETDYNAMIC\n+  {\n+    struct pst_static pss;\n+    struct pst_dynamic psd;\n+    if (0 <= pstat_getstatic (&pss, sizeof pss, 1, 0)\n+\t&& 0 <= pstat_getdynamic (&psd, sizeof psd, 1, 0))\n+      {\n+\tdouble pages = psd.psd_free;\n+\tdouble pagesize = pss.page_size;\n+\tif (0 <= pages && 0 <= pagesize)\n+\t  return pages * pagesize;\n+      }\n+  }\n+#endif\n+\n+  /* Guess 25% of physical memory.  */\n+  return physmem_total () / 4;\n+}"}]}