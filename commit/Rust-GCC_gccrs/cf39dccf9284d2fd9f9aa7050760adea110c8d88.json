{"sha": "cf39dccf9284d2fd9f9aa7050760adea110c8d88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzOWRjY2Y5Mjg0ZDJmZDlmOWFhNzA1MDc2MGFkZWExMTBjOGQ4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-24T22:10:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-24T22:10:01Z"}, "message": "cselim: Don't assume it is safe to cstore replace a store to a local variable with unknown offset [PR94734]\n\nAs the new testcase shows, it is not safe to assume we can optimize\na conditional store into an automatic non-addressable var, we can do it\nonly if we can prove that the unconditional load or store actually will\nnot be outside of the boundaries of the variable.\nIf the offset and size are constant, we can, but this is already all\nchecked in !tree_could_trap_p, otherwise we really need to check for\na dominating unconditional store, or for the specific case of automatic\nnon-addressable variables, it is enough if there is a dominating load\n(that is what those 4 testcases have).  tree-ssa-phiopt.c has some\ninfrastructure for this already, see the add_or_mark_expr method etc.,\nbut right now it handles only MEM_REFs with SSA_NAME first operand\nand some integral offset.  So, I think it can be for GCC11 extended\nto handle other memory references, possibly up to just doing\nget_inner_reference and hasing based on the base, offset expressions\nand bit_offset and bit_size, and have also a special case that for\n!TREE_ADDRESSABLE automatic variables it could ignore whether something\nis a load or store because the local stack should be always writable.\nBut it feels way too dangerous to do this this late for GCC10, so this\npatch just restricts the optimization to the safe case (where lhs doesn't\ntrap), and on Richi's request also ignores TREE_ADDRESSABLE bit if\nflag_store_data_races, because my understanding the reason for\nTREE_ADDRESSABLE check is that we want to avoid introducing\nstore data races (if address of an automatic var escapes, some other thread\ncould be accessing it concurrently).\n\n2020-04-25  Jakub Jelinek  <jakub@redhat.com>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/94734\n\tPR tree-optimization/89430\n\t* tree-ssa-phiopt.c: Include tree-eh.h.\n\t(cond_store_replacement): Return false if an automatic variable\n\taccess could trap.  If -fstore-data-races, don't return false\n\tjust because an automatic variable is addressable.\n\n\t* gcc.dg/tree-ssa/pr89430-1.c: Add xfail.\n\t* gcc.dg/tree-ssa/pr89430-2.c: Add xfail.\n\t* gcc.dg/tree-ssa/pr89430-5.c: Add xfail.\n\t* gcc.dg/tree-ssa/pr89430-6.c: Add xfail.\n\t* gcc.c-torture/execute/pr94734.c: New test.", "tree": {"sha": "4602602ee97b5a38c297fc109c9c31a06ecda0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4602602ee97b5a38c297fc109c9c31a06ecda0c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf39dccf9284d2fd9f9aa7050760adea110c8d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf39dccf9284d2fd9f9aa7050760adea110c8d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf39dccf9284d2fd9f9aa7050760adea110c8d88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf39dccf9284d2fd9f9aa7050760adea110c8d88/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4718956d6a3030dacd0e65f6a21c674593b9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4718956d6a3030dacd0e65f6a21c674593b9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4718956d6a3030dacd0e65f6a21c674593b9ca"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "3c0d67b206f3d43829a106a3ff0b11d81b02b88e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -1,3 +1,13 @@\n+2020-04-25  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94734\n+\tPR tree-optimization/89430\n+\t* tree-ssa-phiopt.c: Include tree-eh.h.\n+\t(cond_store_replacement): Return false if an automatic variable\n+\taccess could trap.  If -fstore-data-races, don't return false\n+\tjust because an automatic variable is addressable.\n+\n 2020-04-24  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (add<mode>_zext_dup2_exec): Fix merge"}, {"sha": "fa583670bafc333e323b60766c1ba3dc476296be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -1,3 +1,13 @@\n+2020-04-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94734\n+\tPR tree-optimization/89430\n+\t* gcc.dg/tree-ssa/pr89430-1.c: Add xfail.\n+\t* gcc.dg/tree-ssa/pr89430-2.c: Add xfail.\n+\t* gcc.dg/tree-ssa/pr89430-5.c: Add xfail.\n+\t* gcc.dg/tree-ssa/pr89430-6.c: Add xfail.\n+\t* gcc.c-torture/execute/pr94734.c: New test.\n+\n 2020-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94383"}, {"sha": "9df0de626ed84b1158615bdd069f365683afeda8", "filename": "gcc/testsuite/gcc.c-torture/execute/pr94734.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94734.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94734.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94734.c?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -0,0 +1,59 @@\n+/* PR tree-optimization/94734 */\n+\n+__attribute__((noipa)) int\n+foo (int n)\n+{\n+  int arr[16], s = 0;\n+  for (int i = 0; i < n; i++)\n+    {\n+      if (i < 16)\n+\tarr[i] = i;\n+    }\n+  for (int i = 0; i < 16; i++)\n+    s += arr[i];\n+  return s;\n+}\n+\n+__attribute__((noipa)) int\n+bar (int n, int x, unsigned long y, unsigned long z)\n+{\n+  int arr[16], s = 0;\n+  arr[4] = 42;\n+  for (int i = 0; i < n; i++)\n+    {\n+      if (x == (i & 0x25))\n+\tarr[y] = i;\n+    }\n+  return arr[z];\n+}\n+\n+__attribute__((noipa)) int\n+baz (int n, int x, unsigned long z)\n+{\n+  int arr[16], s = 0;\n+  arr[12] = 42;\n+  for (int i = 0; i < n; i++)\n+    {\n+      if (x == (i & 0x25))\n+\tarr[7] = i;\n+    }\n+  return arr[z];\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (10374) != 15 * 16 / 2)\n+    __builtin_abort ();\n+  if (bar (25, 0x25, (unsigned long) 0xdeadbeefbeefdeadULL, 4) != 42)\n+    __builtin_abort ();\n+  if (bar (25, 4, 15, 15) != 22)\n+    __builtin_abort ();\n+  if (baz (25, 0x25, 12) != 42)\n+    __builtin_abort ();\n+  if (baz (25, 4, 7) != 22)\n+    __builtin_abort ();\n+  if (baz (25, 4, 12) != 42)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "ce242ba569b184264c7ce532deab5690a299a908", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-1.c?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -9,4 +9,4 @@ unsigned test(unsigned k, unsigned b) {\n         return a[0]+a[1];\n }\n \n-/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" { xfail *-*-* } } } */"}, {"sha": "90ae36bfce28a83ed0eac627ee28de3caae57224", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-2.c?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -11,4 +11,4 @@ unsigned test(unsigned k, unsigned b) {\n         return a[0]+a[1];\n }\n \n-/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" { xfail *-*-* } } } */"}, {"sha": "c633cbe947dc3b87403190b07d42500f133a1965", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-5.c?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -13,4 +13,4 @@ int test(int b, int k) {\n     return a.data[0] + a.data[1];\n }\n \n-/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" { xfail *-*-* } } } */"}, {"sha": "7cad563128dc6afe23b6537a8b7d4b4431333596", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89430-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89430-6.c?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -16,4 +16,4 @@ int test(int b, int k) {\n     return a.data[0].x + a.data[1].x;\n }\n \n-/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" } } */\n+/* { dg-final { scan-tree-dump \"Conditional store replacement\" \"cselim\" { xfail *-*-* } } } */"}, {"sha": "b1e0dce93d88dc57388a5204c20bc2527dc44664", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf39dccf9284d2fd9f9aa7050760adea110c8d88/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=cf39dccf9284d2fd9f9aa7050760adea110c8d88", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"tree-inline.h\"\n #include \"case-cfn-macros.h\"\n+#include \"tree-eh.h\"\n \n static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool two_value_replacement (basic_block, basic_block, edge, gphi *,\n@@ -2237,10 +2238,13 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n      whose value is not available readily, which we want to avoid.  */\n   if (!nontrap->contains (lhs))\n     {\n-      /* If LHS is a local variable without address-taken, we could\n+      /* If LHS is an access to a local variable without address-taken\n+\t (or when we allow data races) and known not to trap, we could\n \t always safely move down the store.  */\n       tree base = get_base_address (lhs);\n-      if (!auto_var_p (base) || TREE_ADDRESSABLE (base))\n+      if (!auto_var_p (base)\n+\t  || (TREE_ADDRESSABLE (base) && !flag_store_data_races)\n+\t  || tree_could_trap_p (lhs))\n \treturn false;\n     }\n "}]}