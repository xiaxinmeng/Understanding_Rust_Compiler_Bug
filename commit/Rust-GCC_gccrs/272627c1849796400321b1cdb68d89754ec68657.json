{"sha": "272627c1849796400321b1cdb68d89754ec68657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyNjI3YzE4NDk3OTY0MDAzMjFiMWNkYjY4ZDg5NzU0ZWM2ODY1Nw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-02-06T21:57:18Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-02-06T21:57:18Z"}, "message": "(__udivsi3, __divsi3, __umodsi3, __modsi3):\n\nRewrite to actually work for more than a few small operands,\nand to be reasonably small.\n(__mulsi3): Eliminate usage of link register (i.e. a6).\n(shift patterns): Delete.\n(__umulsi3): Delete.\n\nFrom-SVN: r8880", "tree": {"sha": "7cfffc8cb211adbcb70d2098d7b704a55845aa4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cfffc8cb211adbcb70d2098d7b704a55845aa4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272627c1849796400321b1cdb68d89754ec68657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272627c1849796400321b1cdb68d89754ec68657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272627c1849796400321b1cdb68d89754ec68657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272627c1849796400321b1cdb68d89754ec68657/comments", "author": null, "committer": null, "parents": [{"sha": "d35a9101b951ed0d7c117b36584fd1266907a788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35a9101b951ed0d7c117b36584fd1266907a788", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35a9101b951ed0d7c117b36584fd1266907a788"}], "stats": {"total": 396, "additions": 85, "deletions": 311}, "files": [{"sha": "9e70269f52480be69ddd0261239a26133d745cb9", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 85, "deletions": 311, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272627c1849796400321b1cdb68d89754ec68657/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272627c1849796400321b1cdb68d89754ec68657/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=272627c1849796400321b1cdb68d89754ec68657", "patch": "@@ -261,372 +261,146 @@ $_exception_handler:\n #ifdef  L_mulsi3\n \t.text\n \t.proc\n-|#PROC# 04\n \t.globl\tSYM (__mulsi3)\n SYM (__mulsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#0\n-\taddl\t#-LF14,sp\n-\tmoveml\t#LS14,sp@\n-|#PROLOGUE# 1\n-\tmovew\ta6@(0x8), d0\t/* x0 -> d0 */\n-\tmuluw\ta6@(0xe), d0\t/* x0*y1 */\n-\tmovew\ta6@(0xa), d1\t/* x1 -> d1 */\n-\tmuluw\ta6@(0xc), d1\t/* x1*y0 */\n+\tmovew\tsp@(4), d0\t/* x0 -> d0 */\n+\tmuluw\tsp@(10), d0\t/* x0*y1 */\n+\tmovew\tsp@(6), d1\t/* x1 -> d1 */\n+\tmuluw\tsp@(8), d1\t/* x1*y0 */\n \taddw\td1, d0\n-\tlsll\t#8, d0\n-\tlsll\t#8, d0\n-\tmovew\ta6@(0xa), d1\t/* x1 -> d1 */\n-\tmuluw\ta6@(0xe), d1\t/* x1*y1 */\n+\tswap\td0\n+\tclrw\td0\n+\tmovew\tsp@(6), d1\t/* x1 -> d1 */\n+\tmuluw\tsp@(10), d1\t/* x1*y1 */\n \taddl\td1, d0\n-\tjra\tLE14\n-LE14:\n-|#PROLOGUE# 2\n-\tmoveml\tsp@, #LS14\n-\tunlk\ta6\n-|#PROLOGUE# 3\n+\n \trts\n-\tLF14 = 4\n-\tLS14 = 0x0002\t\t/* d1 will be saved and restored */\n-\tLFF14 = 0\n-\tLSS14 = 0x0\n-\tLV14 = 0\n #endif /* L_mulsi3 */\n \n #ifdef  L_udivsi3\n \t.text\n \t.proc\n-|#PROC# 04\n \t.globl\tSYM (__udivsi3)\n SYM (__udivsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#0\n-\taddl\t#-LF14,sp\n-\tmoveml\t#LS14,sp@\n-|#PROLOGUE# 1\n-\tmovel\ta6@(0xc), d0\t/* d0 = divisor */\n-\tmovel\ta6@(0x8), d1\t/* d1 = dividend */\n-\tmovel\td1, d3\n-\n-\n-\tcmpl\t#0x10000, d0\t/* divisor >= 2 ^ 16 ?   */\n-\tbge\tl4\t\t/* then try next algorithm */\n-\tmovel\td1, d2\n-\tlsrl\t#8, d2\t\t/* get high dividend */\n-\tlsrl\t#8, d2\n-\tdivu\td0, d2          /* high quotient in lower word */\n-\tmovew\td2, d1\t\t/* save high quotient */\n-\tswap\td1\n-\tmovew\td3, d2\t\t/* get low dividend + high rest */\n-\tdivu\td0, d2\t\t/* low quotient */\n-\tmovew\td2, d1\n-\tjra\tl5\n-\n-l4:\tmovel\td0, d2\t\t/* use d2 as divisor backup */\n-l4a:\tlsrl\t#1, d0\t\t/* shift divisor */\n-\tlsrl\t#1, d1\t\t/* shift dividend */\n-\tcmpl\t#0x10000, d0\t/* still divisor >= 2 ^ 16 ?  */\n-\tbge\tl4a\n-\tdivu\td0, d1\t\t/* now we have 16bit divisor => compute remainder */\n-\tandl\t#0xffff, d1\n-\tmovel\td1, sp@-\t/* multiply divisor with */\n-\tmovel\td2, sp@-\t/* remainder             */\n-\tjbsr\tSYM (__umulsi3)\t/* and                   */\n-\taddql\t#8, sp\n-\tcmpl\td0, d3\t\t/* compare the result with the dividend */\n-\tbge\tl5\t\t/* if dividend >= result => nofix */\n-\tsubql\t#1, d1\n-\n-l5:\tmovel\td1, d0\t\n+\tmovel\td2, sp@-\n+\tmovel\tsp@(12), d1\t/* d1 = divisor */\n+\tmovel\tsp@(8), d0\t/* d0 = dividend */\n \n-l6:\tjra\tLE14\n-LE14:\n-|#PROLOGUE# 2\n-\tmoveml\tsp@, #LS14\n-\tunlk\ta6\n-|#PROLOGUE# 3\n+\tcmpl\t#0x10000, d1\t/* divisor >= 2 ^ 16 ?   */\n+\tjcc\tL3\t\t/* then try next algorithm */\n+\tmovel\td0, d2\n+\tclrw\td2\n+\tswap\td2\n+\tdivu\td1, d2          /* high quotient in lower word */\n+\tmovew\td2, d0\t\t/* save high quotient */\n+\tswap\td0\n+\tmovew\tsp@(10), d2\t/* get low dividend + high rest */\n+\tdivu\td1, d2\t\t/* low quotient */\n+\tmovew\td2, d0\n+\tjra\tL6\n+\n+L3:\tmovel\td1, d2\t\t/* use d2 as divisor backup */\n+L4:\tlsrl\t#1, d1\t\t/* shift divisor */\n+\tlsrl\t#1, d0\t\t/* shift dividend */\n+\tcmpl\t#0x10000, d1\t/* still divisor >= 2 ^ 16 ?  */\n+\tjcc\tL4\n+\tdivu\td1, d0\t\t/* now we have 16 bit divisor */\n+\tandl\t#0xffff, d0\t/* mask out divisor, ignore remainder */\n+\n+/* Muliply the 16 bit tentative quotient with the 32 bit divisor.  Because of\n+   the operand ranges, this might give a 33 bit product.  If this product is\n+   greater than the dividend, the tentative quotient was too large. */\n+\tmovel\td2, d1\n+\tmulu\td0, d1\t\t/* low part, 32 bits */\n+\tswap\td2\n+\tmulu\td0, d2\t\t/* high part, at most 17 bits */\n+\tswap\td2\t\t/* align high part with low part */\n+\tbtst\t#0, d2\t\t/* high part 17 bits? */\n+\tjne\tL5\t\t/* if 17 bits, quotient was too large */\n+\taddl\td2, d1\t\t/* add parts */\n+\tjcs\tL5\t\t/* if sum is 33 bits, quotient was too large */\n+\tcmpl\tsp@(8), d1\t/* compare the sum with the dividend */\n+\tjls\tL6\t\t/* if sum > dividend, quotient was too large */\n+L5:\tsubql\t#1, d0\t\t/* adjust quotient */\n+\n+L6:\tmovel\tsp@+, d2\n \trts\n-\tLF14 = 16\n-\tLS14 = 0x000e\t\t/* d1-d3 will be saved and restored */\n-\tLFF14 = 0\n-\tLSS14 = 0x0\n-\tLV14 = 0\n #endif /* L_udivsi3 */\n \n-#ifdef L_umulsi3\n-\t.text\n-\t.proc\n-|#PROC# 04\n-\t.globl\tSYM (__umulsi3)\n-SYM (__umulsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#0\n-\taddl\t#-LF14,sp\n-\tmoveml\t#LS14,sp@\n-|#PROLOGUE# 1\n-\tmovew\ta6@(0x8), d0\t/* x0 -> d0 */\n-\tmuluw\ta6@(0xe), d0\t/* x0*y1 */\n-\tmovew\ta6@(0xa), d1\t/* x1 -> d1 */\n-\tmuluw\ta6@(0xc), d1\t/* x1*y0 */\n-\taddw\td1, d0\n-\tlsll\t#8, d0\n-\tlsll\t#8, d0\n-\tmovew\ta6@(0xa), d1\t/* x1 -> d1 */\n-\tmuluw\ta6@(0xe), d1\t/* x1*y1 */\n-\taddl\td1, d0\n-\tjra\tLE15\n-LE15:\n-|#PROLOGUE# 2\n-\tmoveml\tsp@, #LS14\n-\tunlk\ta6\n-|#PROLOGUE# 3\n-\trts\n-\tLF14 = 4\n-\tLS14 = 0x0002\t\t/* d1 will be saved and restored */\n-\tLFF14 = 0\n-\tLSS14 = 0x0\n-\tLV14 = 0\n-#endif /* L_umulsi3 */\n-\n #ifdef  L_divsi3\n \t.text\n \t.proc\n-|#PROC# 04\n \t.globl\tSYM (__divsi3)\n SYM (__divsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#0\n-\taddl\t#-LF14,sp\n-\tmoveml\t#LS14,sp@\n-|#PROLOGUE# 1\n-\tmoveb\t#1, d4\t\t/* sign of result stored in d4 (=1 or =-1) */\n-\tmovel\ta6@(0xc), d0\t/* d0 = divisor */\n-\tbpl\tl1\n-\tnegl\td0\n-\tnegb\td4\t\t/* change sign because divisor <0  */\n-l1:\tmovel\ta6@(0x8), d1\t/* d1 = dividend */\n-\tbpl\tl2\n-\tnegl\td1\n-\tnegb\td4\n-l2:\tmovel\td1, d3\n+\tmovel\td2, sp@-\n \n+\tmoveb\t#1, d2\t\t/* sign of result stored in d2 (=1 or =-1) */\n+\tmovel\tsp@(12), d1\t/* d1 = divisor */\n+\tjpl\tL1\n+\tnegl\td1\n+\tnegb\td2\t\t/* change sign because divisor <0  */\n+L1:\tmovel\tsp@(8), d0\t/* d0 = dividend */\n+\tjpl\tL2\n+\tnegl\td0\n+\tnegb\td2\n \n-\tcmpl\t#0x10000, d0\t/* divisor >= 2 ^ 16 ?   */\n-\tbge\tl4\t\t/* then try next algorithm */\n-\tmovel\td1, d2\n-\tlsrl\t#8, d2\t\t/* get high dividend */\n-\tlsrl\t#8, d2\n-\tdivu\td0, d2          /* high quotient in lower word */\n-\tmovew\td2, d1\t\t/* save high quotient */\n-\tswap\td1\n-\tmovew\td3, d2\t\t/* get low dividend + high rest */\n-\tdivu\td0, d2\t\t/* low quotient */\n-\tmovew\td2, d1\n-\tjra\tl5\n-\n-l4:\tmovel\td0, d2\t\t/* use d2 as divisor backup */\n-l4a:\tlsrl\t#1, d0\t\t/* shift divisor */\n-\tlsrl\t#1, d1\t\t/* shift dividend */\n-\tcmpl\t#0x10000, d0\t/* still divisor >= 2 ^ 16 ?  */\n-\tbge\tl4a\n-\tdivu\td0, d1\t\t/* now we have 16bit divisor => compute remainder */\n-\tandl\t#0xffff, d1\n-\tmovel\td1, sp@-\t/* multiply divisor with */\n-\tmovel\td2, sp@-\t/* remainder             */\n-\tjbsr\tSYM (__umulsi3)\t/* and                   */\n+L2:\tmovel\td1, sp@-\n+\tmovel\td0, sp@-\n+\tjbsr\tSYM (__udivsi3)\t/* divide abs(dividend) by abs(divisor) */\n \taddql\t#8, sp\n-\tcmpl\td0, d3\t\t/* compare the result with the dividend */\n-\tbge\tl5\t\t/* if dividend >= result => nofix */\n-\tsubql\t#1, d1\n \n-l5:\tmovel\td1, d0\t\n-\ttstb\td4\n-\tbpl\tl6\n+\ttstb\td2\n+\tjpl\tL3\n \tnegl\td0\n \n-l6:\tjra\tLE14\n-LE14:\n-|#PROLOGUE# 2\n-\tmoveml\tsp@, #LS14\n-\tunlk\ta6\n-|#PROLOGUE# 3\n+L3:\tmovel\tsp@+, d2\n \trts\n-\tLF14 = 16\n-\tLS14 = 0x001e\t\t/* d1-d4 will be saved and restored */\n-\tLFF14 = 8\n-\tLSS14 = 0x0\n-\tLV14 = 8\n #endif /* L_divsi3 */\n \n #ifdef  L_umodsi3\n \t.text\n \t.proc\n-|#PROC# 04\n \t.globl\tSYM (__umodsi3)\n SYM (__umodsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#0\n-\taddl\t#-LF14,sp\n-\tmoveml\t#LS14,sp@\n-|#PROLOGUE# 1\n-\tmovel\ta6@(0xc),d1\t/* divisor */\n-\tmovel\ta6@(0x8),d2\t/* dividend */\n+\tmovel\tsp@(8), d1\t/* d1 = divisor */\n+\tmovel\tsp@(4), d0\t/* d0 = dividend */\n \tmovel\td1, sp@-\n-\tmovel\td2, sp@-\n-\tjbsr\tSYM (__udivsi3)\t/* d0 = a/b */\n-\taddql\t#8, sp\n \tmovel\td0, sp@-\n+\tjbsr\tSYM (__udivsi3)\n+\taddql\t#8, sp\n+\tmovel\tsp@(8), d1\t/* d1 = divisor */\n \tmovel\td1, sp@-\n-\tjbsr\tSYM (__umulsi3)\t/* d0 = (a/b)*b */\n+\tmovel\td0, sp@-\n+\tjbsr\tSYM (__mulsi3)\t/* d0 = (a/b)*b */\n \taddql\t#8, sp\n-\tnegl\td0\n-\taddl\td2, d0\t\t/* d0 = a - (a/b)*b */\n-\tjra\tLE14\n-LE14:\n-|#PROLOGUE# 2\n-\tmoveml\tsp@, #LS14\n-\tunlk\ta6\n-|#PROLOGUE# 3\n+\tmovel\tsp@(4), d1\t/* d1 = dividend */\n+\tsubl\td0, d1\t\t/* d1 = a - (a/b)*b */\n+\tmovel\td1, d0\n \trts\n-\tLF14 = 8\n-\tLS14 = 0x006\t\t/* d1-d2 will be saved and restored */\n-\tLFF14 = 0\n-\tLSS14 = 0x0\n-\tLV14 = 0\n #endif /* L_umodsi3 */\n \n #ifdef  L_modsi3\n \t.text\n \t.proc\n-|#PROC# 04\n \t.globl\tSYM (__modsi3)\n SYM (__modsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#0\n-\taddl\t#-LF14,sp\n-\tmoveml\t#LS14,sp@\n-|#PROLOGUE# 1\n-\tmovel\ta6@(0xc),d1\t/* divisor */\n-\tmovel\ta6@(0x8),d2\t/* dividend */\n+\tmovel\tsp@(8), d1\t/* d1 = divisor */\n+\tmovel\tsp@(4), d0\t/* d0 = dividend */\n \tmovel\td1, sp@-\n-\tmovel\td2, sp@-\n-\tjbsr\tSYM (__divsi3)\t/* d0 = a/b */\n-\taddql\t#8, sp\n \tmovel\td0, sp@-\n+\tjbsr\tSYM (__divsi3)\n+\taddql\t#8, sp\n+\tmovel\tsp@(8), d1\t/* d1 = divisor */\n \tmovel\td1, sp@-\n+\tmovel\td0, sp@-\n \tjbsr\tSYM (__mulsi3)\t/* d0 = (a/b)*b */\n \taddql\t#8, sp\n-\tnegl\td0\n-\taddl\td2, d0\t\t/* d0 = a - (a/b)*b */\n-\tjra\tLE14\n-LE14:\n-|#PROLOGUE# 2\n-\tmoveml\tsp@, #LS14\n-\tunlk\ta6\n-|#PROLOGUE# 3\n+\tmovel\tsp@(4), d1\t/* d1 = dividend */\n+\tsubl\td0, d1\t\t/* d1 = a - (a/b)*b */\n+\tmovel\td1, d0\n \trts\n-\tLF14 = 8\n-\tLS14 = 0x006\t\t/* d1-d2 will be saved and restored */\n-\tLFF14 = 0\n-\tLSS14 = 0x0\n-\tLV14 = 0\n #endif /* L_modsi3 */\n \n-#ifdef  L_lshrsi3\n-\t.text\n-\t.proc\n-|#PROC# 04\n-\tLF18\t=\t4\n-\tLS18\t=\t128\n-\tLFF18\t=\t0\n-\tLSS18\t=\t0\n-\tLV18\t=\t0\n-\t.text\n-\t.globl\tSYM (__lshrsi3)\n-SYM (__lshrsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#-4\n-|#PROLOGUE# 1\n-\tmovl\ta6@(8),d0\n-\tmovw\ta6@(14),d1\n-\tlsrl\td1,d0\n-|#PROLOGUE# 2\n-\tunlk\ta6\n-|#PROLOGUE# 3\n-\trts\n-#endif /* L_lshrsi3 */\n-\n-#ifdef  L_lshlsi3\n-\t.text\n-\t.proc\n-|#PROC# 04\n-\tLF18\t=\t4\n-\tLS18\t=\t128\n-\tLFF18\t=\t0\n-\tLSS18\t=\t0\n-\tLV18\t=\t0\n-\t.text\n-\t.globl\tSYM (__lshlsi3)\n-SYM (__lshlsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#-4\n-|#PROLOGUE# 1\n-\tmovl\ta6@(8),d0\n-\tmovw\ta6@(14),d1\n-\tlsll\td1,d0\n-|#PROLOGUE# 2\n-\tunlk\ta6\n-|#PROLOGUE# 3\n-\trts\n-#endif /* L_lshlsi3 */\n-\n-#ifdef  L_ashrsi3\n-\t.text\n-\t.proc\n-|#PROC# 04\n-\tLF18\t=\t4\n-\tLS18\t=\t128\n-\tLFF18\t=\t0\n-\tLSS18\t=\t0\n-\tLV18\t=\t0\n-\t.text\n-\t.globl\tSYM (__ashrsi3)\n-SYM (__ashrsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#-4\n-|#PROLOGUE# 1\n-\tmovl\ta6@(8),d0\n-\tmovw\ta6@(14),d1\n-\tasrl\td1,d0\n-|#PROLOGUE# 2\n-\tunlk\ta6\n-|#PROLOGUE# 3\n-\trts\n-#endif /* L_ashrsi3 */\n-\n-#ifdef  L_ashlsi3\n-\t.text\n-\t.proc\n-|#PROC# 04\n-\tLF18\t=\t4\n-\tLS18\t=\t128\n-\tLFF18\t=\t0\n-\tLSS18\t=\t0\n-\tLV18\t=\t0\n-\t.text\n-\t.globl\tSYM (__ashlsi3)\n-SYM (__ashlsi3):\n-|#PROLOGUE# 0\n-\tlink\ta6,#-4\n-|#PROLOGUE# 1\n-\tmovl\ta6@(8),d0\n-\tmovw\ta6@(14),d1\n-\tasll\td1,d0\n-|#PROLOGUE# 2\n-\tunlk\ta6\n-|#PROLOGUE# 3\n-\trts\n-#endif /* L_ashlsi3 */\n \n #ifdef  L_double\n "}]}