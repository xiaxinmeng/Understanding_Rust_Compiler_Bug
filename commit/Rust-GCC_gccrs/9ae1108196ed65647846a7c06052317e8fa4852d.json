{"sha": "9ae1108196ed65647846a7c06052317e8fa4852d", "node_id": "C_kwDOANBUbNoAKDlhZTExMDgxOTZlZDY1NjQ3ODQ2YTdjMDYwNTIzMTdlOGZhNDg1MmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-22T11:36:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-22T17:48:19Z"}, "message": "libstdc++: Add allocator-extended constructors to std::match_results (LWG 2195)\n\nThis was approved in Issaquah last month.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex.h (match_results): Add allocator-extended\n\tcopy and move constructors, as per LWG 2195.\n\t* testsuite/28_regex/match_results/ctors/char/alloc.cc: New test.", "tree": {"sha": "5957b4014e2afc2e7d7f132c3b9dfeddaf55de82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5957b4014e2afc2e7d7f132c3b9dfeddaf55de82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ae1108196ed65647846a7c06052317e8fa4852d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae1108196ed65647846a7c06052317e8fa4852d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae1108196ed65647846a7c06052317e8fa4852d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae1108196ed65647846a7c06052317e8fa4852d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad0b9cf1a076fb9a802d9ba7fa2223aa3166dca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0b9cf1a076fb9a802d9ba7fa2223aa3166dca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0b9cf1a076fb9a802d9ba7fa2223aa3166dca2"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "79903fad1e530f4db516358446bb21bc55ec832b", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae1108196ed65647846a7c06052317e8fa4852d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae1108196ed65647846a7c06052317e8fa4852d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=9ae1108196ed65647846a7c06052317e8fa4852d", "patch": "@@ -1826,6 +1826,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       ~match_results() = default;\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2195. Missing constructors for match_results\n+\n+      match_results(const match_results& __m, const _Alloc& __a)\n+      : _Base_type(__m, __a) { }\n+\n+      match_results(match_results&& __m, const _Alloc& __a)\n+      noexcept(noexcept(_Base_type(std::move(__m), __a)))\n+      : _Base_type(std::move(__m), __a) { }\n+\n       ///@}\n \n       // 28.10.2, state:"}, {"sha": "bb5e7a91bd78e6b6c84cca015c361830e6c03d6e", "filename": "libstdc++-v3/testsuite/28_regex/match_results/ctors/char/alloc.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae1108196ed65647846a7c06052317e8fa4852d/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fchar%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae1108196ed65647846a7c06052317e8fa4852d/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fchar%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fctors%2Fchar%2Falloc.cc?ref=9ae1108196ed65647846a7c06052317e8fa4852d", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+// LWG 2195. Missing constructors for match_results\n+\n+void\n+test01()\n+{\n+  using Alloc = std::cmatch::allocator_type;\n+  std::cmatch m1;\n+  std::cmatch m2(m1, m1.get_allocator());\n+  VERIFY( m2 == m1 );\n+\n+  static_assert( ! std::is_nothrow_constructible<std::cmatch,\n+\t\t\t\t\t\t const std::cmatch&,\n+\t\t\t\t\t\t const Alloc&>(),\n+\t\t \"Allocator-extended copy ctor is potentially-throwing\" );\n+\n+  std::cmatch m3(std::move(m1), m2.get_allocator());\n+  VERIFY( m3 == m2 );\n+\n+  // Libstdc++ extension:\n+  static_assert( std::is_nothrow_constructible<std::cmatch,\n+\t\t\t\t\t       std::cmatch,\n+\t\t\t\t\t       const Alloc&>(),\n+\t\t \"Allocator-extended move ctor is non-throwing\" );\n+}\n+\n+void\n+test02()\n+{\n+  using Alloc = __gnu_test::uneq_allocator<std::csub_match>;\n+  using MR = std::match_results<const char*, Alloc>;\n+\n+  MR m1(Alloc(1));\n+  MR m2(m1, Alloc(2));\n+  VERIFY( m2 == m1 );\n+\n+  static_assert( ! std::is_nothrow_constructible<MR, const MR&, const Alloc&>(),\n+\t\t \"Allocator-extended copy ctor is potentially-throwing\" );\n+\n+  MR m3(std::move(m1), Alloc(3));\n+  VERIFY( m3 == m2 );\n+\n+  static_assert( ! std::is_nothrow_constructible<MR, MR, const Alloc&>(),\n+\t\t \"Allocator-extended move ctor is potentially-throwing\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}