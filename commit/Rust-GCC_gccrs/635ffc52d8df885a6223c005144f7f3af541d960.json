{"sha": "635ffc52d8df885a6223c005144f7f3af541d960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1ZmZjNTJkOGRmODg1YTYyMjNjMDA1MTQ0ZjdmM2FmNTQxZDk2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:24:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:24:52Z"}, "message": "[multiple changes]\n\n2015-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* a-sytaco.ads (Ada.Synchronous_Task_Control): Package\n\tnow withs System.Task_Identification. The visible part\n\tof the spec has SPARK_Mode. The private part has pragma\n\tSPARK_Mode (Off).\n\t(Set_True): Added Global and Depends aspects\n\t(Set_False): Added Global and Depends aspects (Current_State):\n\tAdded Volatile_Function aspect and added external state\n\tAda.Task_Identification.Tasking_State as a Global input.\n\t(Suspend_Until_True): Added Global and Depends aspects\n\t* a-sytaco.adb (Ada.Synchronous_Task_Control):\n\tPackage body has SPARK_Mode => Off\n\t* a-extiin.ads (Ada.Execution_Time.Interrupts):\n\tPackage now withs Ada.Real_Time and has SPARK_Mode.\n\t(Clock): Added Volatile_Function aspect and added external state\n\tAda.Real_Time.Clock_Time as a Global input.\n\t* a-reatim.ads (Ada.Real_Time): The visible part of the spec has\n\tSPARK_Mode. The private part has pragma SPARK_Mode (Off). The package\n\tdeclares external state Clock_Time with properties Async_Readers and\n\tAsync_Writers.\n\t(Clock): Added Volatile_Function aspect and\n\tadded external state Clock_Time as a Global input.\n\t* a-reatim.adb (Ada.Real_Time): Package body has SPARK_Mode => Off\n\t* a-exetim-default.ads, a-exetim-mingw.ads (Ada.Execution_Time):\n\tThe visible part of the spec has SPARK_Mode. The private part\n\thas pragma SPARK_Mode (Off).\n\t(Clock): Added Volatile_Function\n\taspect and added external state Clock_Time as a Global input.\n\t(Clock_For_Interrupts): Added Volatile_Function aspect and added\n\texternal state Ada.Real_Time.Clock_Time as a Global input.\n\t* a-exetim-mingw.adb (Ada.Execution_Time): Package body has\n\tSPARK_Mode => Off\n\t* a-interr.ads (Ada.Interrupts): Package now\n\twiths Ada.Task_Identification (Is_Reserved): Added\n\tSPARK_Mode, Volatile_Function and external state\n\tAda.Task_Identification.Tasking_State as a Global input.\n\t(Is_Attached): Added SPARK_Mode, Volatile_Function and external\n\tstate Ada.Task_Identification.Tasking_State as a Global input.\n\t(Attach_Handler): Added SPARK_Mode => Off (Exchange_Handler):\n\tAdded SPARK_Mode => Off (Detach_Handler): Added SPARK_Mode\n\tand external state Ada.Task_Identification.Tasking_State as a\n\tGlobal In_Out.\t(Reference): Added SPARK_Mode => Off\n\t* a-disedf.ads (Get_Deadline): Added SPARK_Mode, Volatile_Function\n\tand external state Ada.Task_Identification.Tasking_State as a\n\tGlobal input.\n\t* a-taside.ads (Ada.Task_Identification): The visible part of\n\tthe spec has SPARK_Mode.  The private part has pragma SPARK_Mode\n\t(Off). The package declares external state Tasking_State with\n\tproperties Async_Readers and Async_Writers.\n\t(Current_Task): Added\n\tVolatile_Function aspect and added external state Tasking_State\n\tas a Global input.\n\t(Environment_Task): Added SPARK_Mode => Off\n\t(Is_Terminated): Added Volatile_Function aspect and added external\n\tstate Tasking_State as a Global input.\t(Is_Callable): Added\n\tVolatile_Function aspect and added external state Tasking_State as\n\ta Global input.\n\t(Activation_Is_Complete): Added Volatile_Function\n\taspect and added external state Tasking_State as a Global input.\n\t* a-taside.adb (Ada.Task_Identification): Package body has\n\tSPARK_Mode => Off.\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* atree.ads, atree.adb: Enable List38 and List39 on entities.\n\t* einfo.ads, einfo.adb (Class_Wide_Preconds) new attribute defined\n\ton subprograms. Holds the list of class-wide precondition\n\tfunctions inherited from ancestors. Each such function is an\n\tinstantiation of the generic function generated from an explicit\n\taspect specification for a class-wide precondition. A type is\n\tan ancestor of itself, and therefore a root type has such an\n\tinstance on its own list.\n\t(Class_Wide_Postconds): ditto for postconditions.\n\n2015-10-20  Vincent Celier  <celier@adacore.com>\n\n\t* prj-attr.adb: Add packages Prove and GnatTest.\n\n2015-10-20  Steve Baird  <baird@adacore.com>\n\n\t* a-conhel.adb: Add an Annotate pragma to help suppress CodePeer's\n\tanalysis of internals of container generic instances. This pragma\n\thas no other effect.\n\t* a-conhel.adb (Generic_Implementation) Add \"pragma Annotate\n\t(CodePeer, Skip_Analysis);\".\n\nFrom-SVN: r229070", "tree": {"sha": "3b52cde47c2fc04673c4a1f020ef5892198b11c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b52cde47c2fc04673c4a1f020ef5892198b11c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/635ffc52d8df885a6223c005144f7f3af541d960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635ffc52d8df885a6223c005144f7f3af541d960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635ffc52d8df885a6223c005144f7f3af541d960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635ffc52d8df885a6223c005144f7f3af541d960/comments", "author": null, "committer": null, "parents": [{"sha": "fb159eb789755380ef1ec61001d0a78734400d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb159eb789755380ef1ec61001d0a78734400d0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb159eb789755380ef1ec61001d0a78734400d0f"}], "stats": {"total": 354, "additions": 316, "deletions": 38}, "files": [{"sha": "e983e4c7f5caa65a044db6b67c08ec6569eef474", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -1,3 +1,90 @@\n+2015-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-sytaco.ads (Ada.Synchronous_Task_Control): Package\n+\tnow withs System.Task_Identification. The visible part\n+\tof the spec has SPARK_Mode. The private part has pragma\n+\tSPARK_Mode (Off).\n+\t(Set_True): Added Global and Depends aspects\n+\t(Set_False): Added Global and Depends aspects (Current_State):\n+\tAdded Volatile_Function aspect and added external state\n+\tAda.Task_Identification.Tasking_State as a Global input.\n+\t(Suspend_Until_True): Added Global and Depends aspects\n+\t* a-sytaco.adb (Ada.Synchronous_Task_Control):\n+\tPackage body has SPARK_Mode => Off\n+\t* a-extiin.ads (Ada.Execution_Time.Interrupts):\n+\tPackage now withs Ada.Real_Time and has SPARK_Mode.\n+\t(Clock): Added Volatile_Function aspect and added external state\n+\tAda.Real_Time.Clock_Time as a Global input.\n+\t* a-reatim.ads (Ada.Real_Time): The visible part of the spec has\n+\tSPARK_Mode. The private part has pragma SPARK_Mode (Off). The package\n+\tdeclares external state Clock_Time with properties Async_Readers and\n+\tAsync_Writers.\n+\t(Clock): Added Volatile_Function aspect and\n+\tadded external state Clock_Time as a Global input.\n+\t* a-reatim.adb (Ada.Real_Time): Package body has SPARK_Mode => Off\n+\t* a-exetim-default.ads, a-exetim-mingw.ads (Ada.Execution_Time):\n+\tThe visible part of the spec has SPARK_Mode. The private part\n+\thas pragma SPARK_Mode (Off).\n+\t(Clock): Added Volatile_Function\n+\taspect and added external state Clock_Time as a Global input.\n+\t(Clock_For_Interrupts): Added Volatile_Function aspect and added\n+\texternal state Ada.Real_Time.Clock_Time as a Global input.\n+\t* a-exetim-mingw.adb (Ada.Execution_Time): Package body has\n+\tSPARK_Mode => Off\n+\t* a-interr.ads (Ada.Interrupts): Package now\n+\twiths Ada.Task_Identification (Is_Reserved): Added\n+\tSPARK_Mode, Volatile_Function and external state\n+\tAda.Task_Identification.Tasking_State as a Global input.\n+\t(Is_Attached): Added SPARK_Mode, Volatile_Function and external\n+\tstate Ada.Task_Identification.Tasking_State as a Global input.\n+\t(Attach_Handler): Added SPARK_Mode => Off (Exchange_Handler):\n+\tAdded SPARK_Mode => Off (Detach_Handler): Added SPARK_Mode\n+\tand external state Ada.Task_Identification.Tasking_State as a\n+\tGlobal In_Out.\t(Reference): Added SPARK_Mode => Off\n+\t* a-disedf.ads (Get_Deadline): Added SPARK_Mode, Volatile_Function\n+\tand external state Ada.Task_Identification.Tasking_State as a\n+\tGlobal input.\n+\t* a-taside.ads (Ada.Task_Identification): The visible part of\n+\tthe spec has SPARK_Mode.  The private part has pragma SPARK_Mode\n+\t(Off). The package declares external state Tasking_State with\n+\tproperties Async_Readers and Async_Writers.\n+\t(Current_Task): Added\n+\tVolatile_Function aspect and added external state Tasking_State\n+\tas a Global input.\n+\t(Environment_Task): Added SPARK_Mode => Off\n+\t(Is_Terminated): Added Volatile_Function aspect and added external\n+\tstate Tasking_State as a Global input.\t(Is_Callable): Added\n+\tVolatile_Function aspect and added external state Tasking_State as\n+\ta Global input.\n+\t(Activation_Is_Complete): Added Volatile_Function\n+\taspect and added external state Tasking_State as a Global input.\n+\t* a-taside.adb (Ada.Task_Identification): Package body has\n+\tSPARK_Mode => Off.\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* atree.ads, atree.adb: Enable List38 and List39 on entities.\n+\t* einfo.ads, einfo.adb (Class_Wide_Preconds) new attribute defined\n+\ton subprograms. Holds the list of class-wide precondition\n+\tfunctions inherited from ancestors. Each such function is an\n+\tinstantiation of the generic function generated from an explicit\n+\taspect specification for a class-wide precondition. A type is\n+\tan ancestor of itself, and therefore a root type has such an\n+\tinstance on its own list.\n+\t(Class_Wide_Postconds): ditto for postconditions.\n+\n+2015-10-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-attr.adb: Add packages Prove and GnatTest.\n+\n+2015-10-20  Steve Baird  <baird@adacore.com>\n+\n+\t* a-conhel.adb: Add an Annotate pragma to help suppress CodePeer's\n+\tanalysis of internals of container generic instances. This pragma\n+\thas no other effect.\n+\t* a-conhel.adb (Generic_Implementation) Add \"pragma Annotate\n+\t(CodePeer, Skip_Analysis);\".\n+\n 2015-10-20  Steve Baird  <baird@adacore.com>\n \n \t* pprint.adb: Code clean up."}, {"sha": "de66a50397c60516fdd22a950641026e319a93af", "filename": "gcc/ada/a-conhel.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-conhel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-conhel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-conhel.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -29,6 +29,8 @@ package body Ada.Containers.Helpers is\n \n    package body Generic_Implementation is\n \n+      pragma Annotate (CodePeer, Skip_Analysis);\n+\n       use type SAC.Atomic_Unsigned;\n \n       ------------"}, {"sha": "4b28a6db333fb54b2df66964af29b50eb2ac4250", "filename": "gcc/ada/a-disedf.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-disedf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-disedf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-disedf.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -45,6 +45,10 @@ package Ada.Dispatching.EDF is\n    function Get_Deadline\n       (T : Ada.Task_Identification.Task_Id :=\n              Ada.Task_Identification.Current_Task)\n-       return Deadline;\n+       return Deadline\n+   with\n+     SPARK_Mode,\n+     Volatile_Function,\n+     Global => Ada.Task_Identification.Tasking_State;\n \n end Ada.Dispatching.EDF;"}, {"sha": "c1ccda5a694f0ca788f993f0eb3ca2e263a47ff3", "filename": "gcc/ada/a-exetim-default.ads", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim-default.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim-default.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-default.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -36,7 +36,9 @@\n with Ada.Task_Identification;\n with Ada.Real_Time;\n \n-package Ada.Execution_Time is\n+package Ada.Execution_Time with\n+  SPARK_Mode\n+is\n \n    type CPU_Time is private;\n \n@@ -48,7 +50,10 @@ package Ada.Execution_Time is\n    function Clock\n      (T : Ada.Task_Identification.Task_Id :=\n         Ada.Task_Identification.Current_Task)\n-      return CPU_Time;\n+      return CPU_Time\n+   with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n    function \"+\"\n      (Left  : CPU_Time;\n@@ -84,9 +89,12 @@ package Ada.Execution_Time is\n    Interrupt_Clocks_Supported          : constant Boolean := False;\n    Separate_Interrupt_Clocks_Supported : constant Boolean := False;\n \n-   function Clock_For_Interrupts return CPU_Time;\n+   function Clock_For_Interrupts return CPU_Time with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n private\n+   pragma SPARK_Mode (Off);\n \n    type CPU_Time is new Ada.Real_Time.Time;\n "}, {"sha": "44f4ac3b37ca011e20e305b931b11d75c50513de", "filename": "gcc/ada/a-exetim-mingw.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -39,7 +39,9 @@ with System.Task_Primitives.Operations; use System.Task_Primitives.Operations;\n with System.Tasking;                    use System.Tasking;\n with System.Win32;                      use System.Win32;\n \n-package body Ada.Execution_Time is\n+package body Ada.Execution_Time with\n+  SPARK_Mode => Off\n+is\n \n    ---------\n    -- \"+\" --"}, {"sha": "8dcd32018b3d6411fbc7a8932d5169cfbaae61ba", "filename": "gcc/ada/a-exetim-mingw.ads", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -38,7 +38,9 @@\n with Ada.Task_Identification;\n with Ada.Real_Time;\n \n-package Ada.Execution_Time is\n+package Ada.Execution_Time with\n+  SPARK_Mode\n+is\n \n    type CPU_Time is private;\n \n@@ -50,7 +52,10 @@ package Ada.Execution_Time is\n    function Clock\n      (T : Ada.Task_Identification.Task_Id :=\n         Ada.Task_Identification.Current_Task)\n-      return CPU_Time;\n+      return CPU_Time\n+   with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n    function \"+\"\n      (Left  : CPU_Time;\n@@ -86,9 +91,12 @@ package Ada.Execution_Time is\n    Interrupt_Clocks_Supported          : constant Boolean := False;\n    Separate_Interrupt_Clocks_Supported : constant Boolean := False;\n \n-   function Clock_For_Interrupts return CPU_Time;\n+   function Clock_For_Interrupts return CPU_Time with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n private\n+   pragma SPARK_Mode (Off);\n \n    type CPU_Time is new Ada.Real_Time.Time;\n "}, {"sha": "54a9b41fe8594aaffeb3524affd161c433fec56d", "filename": "gcc/ada/a-exetim.ads", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-exetim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -24,7 +24,9 @@\n with Ada.Task_Identification;\n with Ada.Real_Time;\n \n-package Ada.Execution_Time is\n+package Ada.Execution_Time with\n+  SPARK_Mode\n+is\n    pragma Preelaborate;\n \n    pragma Unimplemented_Unit;\n@@ -39,7 +41,10 @@ package Ada.Execution_Time is\n    function Clock\n      (T : Ada.Task_Identification.Task_Id :=\n         Ada.Task_Identification.Current_Task)\n-      return CPU_Time;\n+      return CPU_Time\n+   with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n    function \"+\"\n      (Left  : CPU_Time;\n@@ -75,9 +80,12 @@ package Ada.Execution_Time is\n    Interrupt_Clocks_Supported          : constant Boolean := False;\n    Separate_Interrupt_Clocks_Supported : constant Boolean := False;\n \n-   function Clock_For_Interrupts return CPU_Time;\n+   function Clock_For_Interrupts return CPU_Time with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n private\n+   pragma SPARK_Mode (Off);\n \n    type CPU_Time is new Ada.Real_Time.Time;\n "}, {"sha": "8e8563dcdf1623bc3972f5bc434538dd07a95010", "filename": "gcc/ada/a-extiin.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-extiin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-extiin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-extiin.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -14,12 +14,18 @@\n ------------------------------------------------------------------------------\n \n with Ada.Interrupts;\n+with Ada.Real_Time;\n \n-package Ada.Execution_Time.Interrupts is\n+package Ada.Execution_Time.Interrupts with\n+  SPARK_Mode\n+is\n \n    pragma Unimplemented_Unit;\n \n-   function Clock (Interrupt : Ada.Interrupts.Interrupt_ID) return CPU_Time;\n+   function Clock (Interrupt : Ada.Interrupts.Interrupt_ID) return CPU_Time\n+   with\n+     Volatile_Function,\n+     Global => Ada.Real_Time.Clock_Time;\n \n    function Supported (Interrupt : Ada.Interrupts.Interrupt_ID) return Boolean;\n "}, {"sha": "09a58687a324c46886ad75da869f9cb4f9eb6d3a", "filename": "gcc/ada/a-interr.ads", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-interr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-interr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-interr.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -34,32 +34,48 @@\n ------------------------------------------------------------------------------\n \n with System.Interrupts;\n+with Ada.Task_Identification;\n \n package Ada.Interrupts is\n \n    type Interrupt_ID is new System.Interrupts.Ada_Interrupt_ID;\n \n    type Parameterless_Handler is access protected procedure;\n \n-   function Is_Reserved (Interrupt : Interrupt_ID) return Boolean;\n+   function Is_Reserved (Interrupt : Interrupt_ID) return Boolean with\n+     SPARK_Mode,\n+     Volatile_Function,\n+     Global => Ada.Task_Identification.Tasking_State;\n \n-   function Is_Attached (Interrupt : Interrupt_ID) return Boolean;\n+   function Is_Attached (Interrupt : Interrupt_ID) return Boolean with\n+     SPARK_Mode,\n+     Volatile_Function,\n+     Global => Ada.Task_Identification.Tasking_State;\n \n    function Current_Handler\n-     (Interrupt : Interrupt_ID) return Parameterless_Handler;\n+     (Interrupt : Interrupt_ID) return Parameterless_Handler\n+   with\n+     SPARK_Mode => Off;\n \n    procedure Attach_Handler\n      (New_Handler : Parameterless_Handler;\n-      Interrupt   : Interrupt_ID);\n+      Interrupt   : Interrupt_ID)\n+   with\n+     SPARK_Mode => Off;\n \n    procedure Exchange_Handler\n      (Old_Handler : out Parameterless_Handler;\n       New_Handler : Parameterless_Handler;\n-      Interrupt   : Interrupt_ID);\n+      Interrupt   : Interrupt_ID)\n+   with\n+     SPARK_Mode => Off;\n \n-   procedure Detach_Handler (Interrupt : Interrupt_ID);\n+   procedure Detach_Handler (Interrupt : Interrupt_ID) with\n+     SPARK_Mode,\n+     Global => (In_Out => Ada.Task_Identification.Tasking_State);\n \n-   function Reference (Interrupt : Interrupt_ID) return System.Address;\n+   function Reference (Interrupt : Interrupt_ID) return System.Address with\n+     SPARK_Mode => Off;\n \n private\n    pragma Inline (Is_Reserved);"}, {"sha": "4bac97b889bfd85d37599021abebf9fd8407c17a", "filename": "gcc/ada/a-reatim.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-reatim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-reatim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -32,7 +32,9 @@\n \n with System.Tasking;\n \n-package body Ada.Real_Time is\n+package body Ada.Real_Time with\n+  SPARK_Mode => Off\n+is\n \n    ---------\n    -- \"*\" --"}, {"sha": "ff73167d95d35ae811a13aefe39df7962f7464e2", "filename": "gcc/ada/a-reatim.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-reatim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-reatim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -36,7 +36,11 @@\n with System.Task_Primitives.Operations;\n pragma Elaborate_All (System.Task_Primitives.Operations);\n \n-package Ada.Real_Time is\n+package Ada.Real_Time with\n+  SPARK_Mode,\n+  Abstract_State => (Clock_Time with External => (Async_Readers,\n+                                                  Async_Writers))\n+is\n \n    pragma Compile_Time_Error\n      (Duration'Size /= 64,\n@@ -54,7 +58,9 @@ package Ada.Real_Time is\n    Time_Span_Unit  : constant Time_Span;\n \n    Tick : constant Time_Span;\n-   function Clock return Time;\n+   function Clock return Time with\n+     Volatile_Function,\n+     Global => Clock_Time;\n \n    function \"+\"  (Left : Time;      Right : Time_Span) return Time;\n    function \"+\"  (Left : Time_Span; Right : Time)      return Time;\n@@ -107,6 +113,8 @@ package Ada.Real_Time is\n    function Time_Of (SC : Seconds_Count; TS : Time_Span) return Time;\n \n private\n+   pragma SPARK_Mode (Off);\n+\n    --  Time and Time_Span are represented in 64-bit Duration value in\n    --  nanoseconds. For example, 1 second and 1 nanosecond is represented\n    --  as the stored integer 1_000_000_001. This is for the 64-bit Duration"}, {"sha": "ab7c9ad162916bec784d33772ecf75b84738e853", "filename": "gcc/ada/a-sytaco.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-sytaco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-sytaco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sytaco.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -34,7 +34,9 @@ with Ada.Exceptions;\n with System.Tasking;\n with System.Task_Primitives.Operations;\n \n-package body Ada.Synchronous_Task_Control is\n+package body Ada.Synchronous_Task_Control with\n+  SPARK_Mode => Off\n+is\n \n    ----------------\n    -- Initialize --"}, {"sha": "bf1ab8720c9c17b046799dae331383b535718661", "filename": "gcc/ada/a-sytaco.ads", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-sytaco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-sytaco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sytaco.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -36,22 +36,37 @@\n with System.Task_Primitives;\n \n with Ada.Finalization;\n+with Ada.Task_Identification;\n \n-package Ada.Synchronous_Task_Control is\n+package Ada.Synchronous_Task_Control with\n+  SPARK_Mode\n+is\n    pragma Preelaborate;\n    --  In accordance with Ada 2005 AI-362\n \n    type Suspension_Object is limited private;\n \n-   procedure Set_True (S : in out Suspension_Object);\n+   procedure Set_True (S : in out Suspension_Object) with\n+     Global  => null,\n+     Depends => (S    => null,\n+                 null => S);\n \n-   procedure Set_False (S : in out Suspension_Object);\n+   procedure Set_False (S : in out Suspension_Object) with\n+     Global  => null,\n+     Depends => (S    => null,\n+                 null => S);\n \n-   function Current_State (S : Suspension_Object) return Boolean;\n+   function Current_State (S : Suspension_Object) return Boolean with\n+     Volatile_Function,\n+     Global => Ada.Task_Identification.Tasking_State;\n \n-   procedure Suspend_Until_True (S : in out Suspension_Object);\n+   procedure Suspend_Until_True (S : in out Suspension_Object) with\n+     Global  => null,\n+     Depends => (S    => null,\n+                 null => S);\n \n private\n+   pragma SPARK_Mode (Off);\n \n    procedure Initialize (S : in out Suspension_Object);\n    --  Initialization for Suspension_Object"}, {"sha": "b916c7609a141cdacab4aed38e8db388b7af11b1", "filename": "gcc/ada/a-taside.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-taside.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-taside.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -45,7 +45,9 @@ with System.Tasking.Utilities;\n \n pragma Warnings (On);\n \n-package body Ada.Task_Identification is\n+package body Ada.Task_Identification with\n+  SPARK_Mode => Off\n+is\n \n    use System.Parameters;\n "}, {"sha": "3a3df7c0d2d562e7ff2517dcfb9e137bff33a349", "filename": "gcc/ada/a-taside.ads", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-taside.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fa-taside.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -36,7 +36,11 @@\n with System;\n with System.Tasking;\n \n-package Ada.Task_Identification is\n+package Ada.Task_Identification with\n+  SPARK_Mode,\n+  Abstract_State => (Tasking_State with External => (Async_Readers,\n+                                                     Async_Writers))\n+is\n    pragma Preelaborate;\n    --  In accordance with Ada 2005 AI-362\n \n@@ -50,25 +54,35 @@ package Ada.Task_Identification is\n \n    function Image (T : Task_Id) return String;\n \n-   function Current_Task return Task_Id;\n+   function Current_Task return Task_Id with\n+     Volatile_Function,\n+     Global => Tasking_State;\n    pragma Inline (Current_Task);\n \n-   function Environment_Task return Task_Id;\n+   function Environment_Task return Task_Id with\n+     SPARK_Mode => Off;\n    pragma Inline (Environment_Task);\n \n    procedure Abort_Task (T : Task_Id);\n    pragma Inline (Abort_Task);\n    --  Note: parameter is mode IN, not IN OUT, per AI-00101\n \n-   function Is_Terminated (T : Task_Id) return Boolean;\n+   function Is_Terminated (T : Task_Id) return Boolean with\n+     Volatile_Function,\n+     Global => Tasking_State;\n    pragma Inline (Is_Terminated);\n \n-   function Is_Callable (T : Task_Id) return Boolean;\n+   function Is_Callable (T : Task_Id) return Boolean with\n+     Volatile_Function,\n+     Global => Tasking_State;\n    pragma Inline (Is_Callable);\n \n-   function Activation_Is_Complete (T : Task_Id) return Boolean;\n+   function Activation_Is_Complete (T : Task_Id) return Boolean with\n+     Volatile_Function,\n+     Global => Tasking_State;\n \n private\n+   pragma SPARK_Mode (Off);\n \n    type Task_Id is new System.Tasking.Task_Id;\n "}, {"sha": "973bdde80f858984be0e0d48491db6115faff682", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -828,6 +828,7 @@ package body Atree is\n          end case;\n \n          Set_Chars (New_Ent, Chars (E));\n+         --  Set_Comes_From_Source (New_Ent, Comes_From_Source (E));\n          return New_Ent;\n       end Copy_Entity;\n \n@@ -2905,6 +2906,16 @@ package body Atree is\n          return List_Id (Nodes.Table (N + 4).Field7);\n       end List25;\n \n+      function List38 (N : Node_Id) return List_Id is\n+      begin\n+         return List_Id (Nodes.Table (N + 6).Field8);\n+      end List38;\n+\n+      function List39 (N : Node_Id) return List_Id is\n+      begin\n+         return List_Id (Nodes.Table (N + 6).Field9);\n+      end List39;\n+\n       function Elist1 (N : Node_Id) return Elist_Id is\n          pragma Assert (N <= Nodes.Last);\n          Value : constant Union_Id := Nodes.Table (N).Field1;\n@@ -5758,6 +5769,18 @@ package body Atree is\n          Nodes.Table (N + 4).Field7 := Union_Id (Val);\n       end Set_List25;\n \n+      procedure Set_List38 (N : Node_Id; Val : List_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 6).Field8 := Union_Id (Val);\n+      end Set_List38;\n+\n+      procedure Set_List39 (N : Node_Id; Val : List_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 6).Field9 := Union_Id (Val);\n+      end Set_List39;\n+\n       procedure Set_Elist1 (N : Node_Id; Val : Elist_Id) is\n       begin\n          Nodes.Table (N).Field1 := Union_Id (Val);"}, {"sha": "0b4d24531c7490198a5d964eb1e0396918411a96", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -1355,6 +1355,12 @@ package Atree is\n       function List25 (N : Node_Id) return List_Id;\n       pragma Inline (List25);\n \n+      function List38 (N : Node_Id) return List_Id;\n+      pragma Inline (List38);\n+\n+      function List39 (N : Node_Id) return List_Id;\n+      pragma Inline (List39);\n+\n       function Elist1 (N : Node_Id) return Elist_Id;\n       pragma Inline (Elist1);\n \n@@ -2706,6 +2712,12 @@ package Atree is\n       procedure Set_List25 (N : Node_Id; Val : List_Id);\n       pragma Inline (Set_List25);\n \n+      procedure Set_List38 (N : Node_Id; Val : List_Id);\n+      pragma Inline (Set_List38);\n+\n+      procedure Set_List39 (N : Node_Id; Val : List_Id);\n+      pragma Inline (Set_List39);\n+\n       procedure Set_Elist1 (N : Node_Id; Val : Elist_Id);\n       pragma Inline (Set_Elist1);\n "}, {"sha": "adb636a82e8dbe54b2de18954adcdba162604ce7", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -505,6 +505,8 @@ extern Node_Id Current_Error_Node;\n #define List10(N)     Field10 (N)\n #define List14(N)     Field14 (N)\n #define List25(N)     Field25 (N)\n+#define List38(N)     Field38 (N)\n+#define List39(N)     Field39 (N)\n \n #define Elist1(N)     Field1  (N)\n #define Elist2(N)     Field2  (N)"}, {"sha": "dff2a2b7843fc5362351ce14fe1f10a633cce754", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -267,8 +267,10 @@ package body Einfo is\n \n    --    Anonymous_Master                Node36\n \n-   --    (unused)                        Node38\n-   --    (unused)                        Node39\n+   --    (Class_Wide_Preconds)           List38\n+\n+   --    (Class_Wide_Postconds)          List39\n+\n    --    (unused)                        Node40\n    --    (unused)                        Node41\n \n@@ -842,6 +844,18 @@ package body Einfo is\n       return Flag31 (Id);\n    end Checks_May_Be_Suppressed;\n \n+   function Class_Wide_Postconds (Id : E) return S is\n+   begin\n+      pragma Assert (Is_Subprogram (Id));\n+      return List39 (Id);\n+   end Class_Wide_Postconds;\n+\n+   function Class_Wide_Preconds (Id : E) return S is\n+   begin\n+      pragma Assert (Is_Subprogram (Id));\n+      return List38 (Id);\n+   end Class_Wide_Preconds;\n+\n    function Class_Wide_Type (Id : E) return E is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -3732,6 +3746,18 @@ package body Einfo is\n       Set_Flag31 (Id, V);\n    end Set_Checks_May_Be_Suppressed;\n \n+   procedure Set_Class_Wide_Preconds (Id : E; V : S) is\n+   begin\n+      pragma Assert (Is_Subprogram (Id));\n+      Set_List38 (Id, V);\n+   end Set_Class_Wide_Preconds;\n+\n+   procedure Set_Class_Wide_Postconds (Id : E; V : S) is\n+   begin\n+      pragma Assert (Is_Subprogram (Id));\n+      Set_List39 (Id, V);\n+   end Set_Class_Wide_Postconds;\n+\n    procedure Set_Class_Wide_Type (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Type (Id));"}, {"sha": "bea9dacf5024c40610704f61ea9e5f04e0fc1600", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -607,6 +607,17 @@ package Einfo is\n --       tables must be consulted to determine if there actually is an active\n --       Suppress or Unsuppress pragma that applies to the entity.\n \n+--    Class_Wide_Preconds (List38)\n+--       Defined on subprograms. Holds the list of class-wide precondition\n+--       functions inherited from ancestors. Each such function is an\n+--       instantiation of the generic function generated from an explicit\n+--       aspect specification for a class-wide precondition. A type is an\n+--       ancestor of itself, and therefore a root type has such an instance\n+--       on its own list.\n+\n+--    Class_Wide_Postconds (List39)\n+--       Ditto for class-wide postconditions.\n+\n --    Class_Wide_Type (Node9)\n --       Defined in all type entities. For a tagged type or subtype, returns\n --       the corresponding implicitly declared class-wide type. For a\n@@ -5844,6 +5855,8 @@ package Einfo is\n    --    Contract                            (Node34)\n    --    Import_Pragma                       (Node35)   (non-generic case only)\n    --    Anonymous_Master                    (Node36)   (non-generic case only)\n+   --    Class_Wide_Preconds                 (List38)\n+   --    Class_Wide_Postconds                (List39)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Default_Expressions_Processed       (Flag108)\n@@ -6151,6 +6164,8 @@ package Einfo is\n    --    Contract                            (Node34)\n    --    Import_Pragma                       (Node35)   (non-generic case only)\n    --    Anonymous_Master                    (Node36)   (non-generic case only)\n+   --    Class_Wide_Preconds                 (List38)\n+   --    Class_Wide_Postconds                (List39)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Delay_Cleanups                      (Flag114)\n@@ -6675,6 +6690,8 @@ package Einfo is\n    function Can_Never_Be_Null                   (Id : E) return B;\n    function Can_Use_Internal_Rep                (Id : E) return B;\n    function Checks_May_Be_Suppressed            (Id : E) return B;\n+   function Class_Wide_Postconds                (Id : E) return S;\n+   function Class_Wide_Preconds                 (Id : E) return S;\n    function Class_Wide_Type                     (Id : E) return E;\n    function Cloned_Subtype                      (Id : E) return E;\n    function Component_Alignment                 (Id : E) return C;\n@@ -7334,6 +7351,8 @@ package Einfo is\n    procedure Set_Can_Never_Be_Null               (Id : E; V : B := True);\n    procedure Set_Can_Use_Internal_Rep            (Id : E; V : B := True);\n    procedure Set_Checks_May_Be_Suppressed        (Id : E; V : B := True);\n+   procedure Set_Class_Wide_Postconds            (Id : E; V : S);\n+   procedure Set_Class_Wide_Preconds             (Id : E; V : S);\n    procedure Set_Class_Wide_Type                 (Id : E; V : E);\n    procedure Set_Cloned_Subtype                  (Id : E; V : E);\n    procedure Set_Component_Alignment             (Id : E; V : C);\n@@ -8111,6 +8130,8 @@ package Einfo is\n    pragma Inline (Can_Never_Be_Null);\n    pragma Inline (Can_Use_Internal_Rep);\n    pragma Inline (Checks_May_Be_Suppressed);\n+   pragma Inline (Class_Wide_Preconds);\n+   pragma Inline (Class_Wide_Postconds);\n    pragma Inline (Class_Wide_Type);\n    pragma Inline (Cloned_Subtype);\n    pragma Inline (Component_Bit_Offset);\n@@ -8615,6 +8636,8 @@ package Einfo is\n    pragma Inline (Set_Can_Never_Be_Null);\n    pragma Inline (Set_Can_Use_Internal_Rep);\n    pragma Inline (Set_Checks_May_Be_Suppressed);\n+   pragma Inline (Set_Class_Wide_Postconds);\n+   pragma Inline (Set_Class_Wide_Preconds);\n    pragma Inline (Set_Class_Wide_Type);\n    pragma Inline (Set_Cloned_Subtype);\n    pragma Inline (Set_Component_Bit_Offset);"}, {"sha": "791fe2113f9678b00253f14f7af606c8280a8fed", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635ffc52d8df885a6223c005144f7f3af541d960/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=635ffc52d8df885a6223c005144f7f3af541d960", "patch": "@@ -389,6 +389,14 @@ package body Prj.Attr is\n    \"LVswitches#\" &\n    \"LVexcluded_source_files#\" &\n \n+   --  package Prove\n+\n+   \"Pprove#\" &\n+\n+   --  package GnatTest\n+\n+   \"Pgnattest#\" &\n+\n    \"#\";\n \n    Initialized : Boolean := False;"}]}