{"sha": "c01ee93565332d96080cdfecaa32827d0c7fa623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxZWU5MzU2NTMzMmQ5NjA4MGNkZmVjYWEzMjgyN2QwYzdmYTYyMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-08-21T09:22:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-08-21T09:22:14Z"}, "message": "re PR middle-end/32912 (ICE with vector code)\n\n\tPR middle-end/32912\n\t* fold-const.c (fold_unary): Optimize BIT_NOT_EXPR of VECTOR_CST.\n\t(fold_binary): Handle vectors in X | ~X and X ^ ~X optimizations.\n\n\t* gcc.dg/pr32912-1.c: New test.\n\t* gcc.dg/pr32912-2.c: New test.\n\t* gcc.dg/pr32912-3.c: New test.\n\nFrom-SVN: r127661", "tree": {"sha": "e69367431695e71d8953aafa59574d63eb548731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69367431695e71d8953aafa59574d63eb548731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01ee93565332d96080cdfecaa32827d0c7fa623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01ee93565332d96080cdfecaa32827d0c7fa623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01ee93565332d96080cdfecaa32827d0c7fa623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01ee93565332d96080cdfecaa32827d0c7fa623/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7d1e0c6cb12146eaddeac1386e1a5b9394f5955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d1e0c6cb12146eaddeac1386e1a5b9394f5955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d1e0c6cb12146eaddeac1386e1a5b9394f5955"}], "stats": {"total": 151, "additions": 147, "deletions": 4}, "files": [{"sha": "e89bbbcb90b7f77f58e19b90d8de3d24ae49f90b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c01ee93565332d96080cdfecaa32827d0c7fa623", "patch": "@@ -1,3 +1,9 @@\n+2007-08-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/32912\n+\t* fold-const.c (fold_unary): Optimize BIT_NOT_EXPR of VECTOR_CST.\n+\t(fold_binary): Handle vectors in X | ~X and X ^ ~X optimizations.\n+\n 2007-08-21  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary): Revert removing of index +p PTR folding."}, {"sha": "77187596d2574c069c27c857a0bfa9899a8e3511", "filename": "gcc/fold-const.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c01ee93565332d96080cdfecaa32827d0c7fa623", "patch": "@@ -8397,6 +8397,29 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t\t\t\t\t     \t   TREE_OPERAND (arg0, 1)))))\n \treturn fold_build2 (BIT_XOR_EXPR, type,\n \t\t\t    fold_convert (type, TREE_OPERAND (arg0, 0)), tem);\n+      /* Perform BIT_NOT_EXPR on each element individually.  */\n+      else if (TREE_CODE (arg0) == VECTOR_CST)\n+\t{\n+\t  tree elements = TREE_VECTOR_CST_ELTS (arg0), elem, list = NULL_TREE;\n+\t  int count = TYPE_VECTOR_SUBPARTS (type), i;\n+\n+\t  for (i = 0; i < count; i++)\n+\t    {\n+\t      if (elements)\n+\t\t{\n+\t\t  elem = TREE_VALUE (elements);\n+\t\t  elem = fold_unary (BIT_NOT_EXPR, TREE_TYPE (type), elem);\n+\t\t  if (elem == NULL_TREE)\n+\t\t    break;\n+\t\t  elements = TREE_CHAIN (elements);\n+\t\t}\n+\t      else\n+\t\telem = build_int_cst (TREE_TYPE (type), -1);\n+\t      list = tree_cons (NULL_TREE, elem, list);\n+\t    }\n+\t  if (i == count)\n+\t    return build_vector (type, nreverse (list));\n+\t}\n \n       return NULL_TREE;\n \n@@ -10485,15 +10508,17 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = build_int_cst_type (type, -1);\n+\t  t1 = fold_convert (type, integer_zero_node);\n+\t  t1 = fold_unary (BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand (type, t1, arg1);\n \t}\n \n       /* X | ~X is -1.  */\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = build_int_cst_type (type, -1);\n+\t  t1 = fold_convert (type, integer_zero_node);\n+\t  t1 = fold_unary (BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n \n@@ -10599,15 +10624,17 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = build_int_cst_type (type, -1);\n+\t  t1 = fold_convert (type, integer_zero_node);\n+\t  t1 = fold_unary (BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand (type, t1, arg1);\n \t}\n \n       /* X ^ ~X is -1.  */\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = build_int_cst_type (type, -1);\n+\t  t1 = fold_convert (type, integer_zero_node);\n+\t  t1 = fold_unary (BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n "}, {"sha": "74321c891d726ba85dd0c136ea1cba3be5e2604d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c01ee93565332d96080cdfecaa32827d0c7fa623", "patch": "@@ -1,3 +1,10 @@\n+2007-08-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/32912\n+\t* gcc.dg/pr32912-1.c: New test.\n+\t* gcc.dg/pr32912-2.c: New test.\n+\t* gcc.dg/pr32912-3.c: New test.\n+\n 2007-08-21  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/pointer-arith-10.c: New testcase."}, {"sha": "7526ee145aa5af0d828cbcd340d7f213e4a4d06e", "filename": "gcc/testsuite/gcc.dg/pr32912-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-1.c?ref=c01ee93565332d96080cdfecaa32827d0c7fa623", "patch": "@@ -0,0 +1,44 @@\n+/* PR middle-end/32912 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+typedef int __m128i __attribute__ ((__vector_size__ (16)));\n+\n+__m128i a, b, c, d, e, f;\n+\n+void\n+foo (__m128i x)\n+{\n+  a = x ^ ~x;\n+  b = ~x ^ x;\n+  c = x | ~x;\n+  d = ~x | x;\n+  e = x & ~x;\n+  f = ~x & x;\n+}\n+\n+int\n+main (void)\n+{\n+  union { __m128i v; int i[sizeof (__m128i) / sizeof (int)]; } u;\n+  int i;\n+\n+  for (i = 0; i < sizeof (u.i) / sizeof (u.i[0]); i++)\n+    u.i[i] = i * 49 - 36;\n+  foo (u.v);\n+#define check(x, val) \\\n+  u.v = (x); \\\n+  for (i = 0; i < sizeof (u.i) / sizeof (u.i[0]); i++) \\\n+    if (u.i[i] != (val)) \\\n+      abort ()\n+\n+  check (a, ~0);\n+  check (b, ~0);\n+  check (c, ~0);\n+  check (d, ~0);\n+  check (e, 0);\n+  check (f, 0);\n+  return 0;\n+}"}, {"sha": "4254086b05d0a49511c8e4a85e94deb1440416da", "filename": "gcc/testsuite/gcc.dg/pr32912-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-2.c?ref=c01ee93565332d96080cdfecaa32827d0c7fa623", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+typedef int __m128i __attribute__ ((__vector_size__ (16)));\n+\n+__m128i a, b, c, d, e, f;\n+\n+__m128i\n+foo (void)\n+{\n+  __m128i x = { 0x11111111, 0x22222222, 0x44444444 };\n+  return x;\n+}\n+\n+__m128i\n+bar (void)\n+{\n+  __m128i x = { 0x11111111, 0x22222222, 0x44444444 };\n+  return ~x;\n+}\n+\n+int\n+main (void)\n+{\n+  union { __m128i v; int i[sizeof (__m128i) / sizeof (int)]; } u, v;\n+  int i;\n+\n+  u.v = foo ();\n+  v.v = bar ();\n+  for (i = 0; i < sizeof (u.i) / sizeof (u.i[0]); i++)\n+    {\n+      if (u.i[i] != ~v.i[i])\n+\tabort ();\n+      if (i < 3)\n+\t{\n+\t  if (u.i[i] != (0x11111111 << i))\n+\t    abort ();\n+\t}\n+      else if (u.i[i])\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "e87a32f6c91cee3c2348c830157920ebf86f79b2", "filename": "gcc/testsuite/gcc.dg/pr32912-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01ee93565332d96080cdfecaa32827d0c7fa623/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32912-3.c?ref=c01ee93565332d96080cdfecaa32827d0c7fa623", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+typedef int __m128i __attribute__ ((__vector_size__ (16)));\n+\n+__m128i\n+bar (void)\n+{\n+  __m128i x = { 0x11111111, 0x22222222, 0x44444444 };\n+  return ~x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"~\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}