{"sha": "4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlM2ExZTE2YTg2ZDIzZGVjN2NlYTZlNWY3ZjcxMGNmNTc2OWU3MQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2018-07-31T15:41:59Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-07-31T15:41:59Z"}, "message": "S/390: Don't emit prefetch instructions for clrmem\n\ngcc/ChangeLog:\n\n2018-07-31  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_setmem): Make the unrolling to\n\tdepend on whether prefetch instructions will be emitted or not.\n\tUse TARGET_SETMEM_PFD for checking whether prefetch instructions\n\twill be emitted or not.\n\t* config/s390/s390.h (TARGET_SETMEM_PREFETCH_DISTANCE)\n\t(TARGET_SETMEM_PFD): New macros.\n\ngcc/testsuite/ChangeLog:\n\n2018-07-31  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/memset-1.c: Improve testcase.\n\nFrom-SVN: r263165", "tree": {"sha": "99ad4974f0a81db70ba385e29054114204ce9541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99ad4974f0a81db70ba385e29054114204ce9541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77b4604223e6e40ad6f6918a7cd63380fcc931ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b4604223e6e40ad6f6918a7cd63380fcc931ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b4604223e6e40ad6f6918a7cd63380fcc931ce"}], "stats": {"total": 126, "additions": 97, "deletions": 29}, "files": [{"sha": "50bd14c7af1d888e8c914e9f70b250097374575a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "patch": "@@ -1,3 +1,12 @@\n+2018-07-31  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_setmem): Make the unrolling to\n+\tdepend on whether prefetch instructions will be emitted or not.\n+\tUse TARGET_SETMEM_PFD for checking whether prefetch instructions\n+\twill be emitted or not.\n+\t* config/s390/s390.h (TARGET_SETMEM_PREFETCH_DISTANCE)\n+\t(TARGET_SETMEM_PFD): New macros.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (stmt_vec_info): Turn back into a typedef."}, {"sha": "ec588a2e72e1f2028d73ef8864bceeccddb1d9a3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "patch": "@@ -5499,12 +5499,15 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n \n   /* Expand setmem/clrmem for a constant length operand without a\n      loop if it will be shorter that way.\n-     With a constant length and without pfd argument a\n-     clrmem loop is 32 bytes -> 5.3 * xc\n-     setmem loop is 36 bytes -> 3.6 * (mvi/stc + mvc) */\n+     clrmem loop (with PFD)    is 30 bytes -> 5 * xc\n+     clrmem loop (without PFD) is 24 bytes -> 4 * xc\n+     setmem loop (with PFD)    is 38 bytes -> ~4 * (mvi/stc + mvc)\n+     setmem loop (without PFD) is 32 bytes -> ~4 * (mvi/stc + mvc) */\n   if (GET_CODE (len) == CONST_INT\n-      && ((INTVAL (len) <= 256 * 5 && val == const0_rtx)\n-\t  || INTVAL (len) <= 257 * 3)\n+      && ((val == const0_rtx\n+\t   && (INTVAL (len) <= 256 * 4\n+\t       || (INTVAL (len) <= 256 * 5 && TARGET_SETMEM_PFD(val,len))))\n+\t  || (val != const0_rtx && INTVAL (len) <= 257 * 4))\n       && (!TARGET_MVCLE || INTVAL (len) <= 256))\n     {\n       HOST_WIDE_INT o, l;\n@@ -5618,12 +5621,11 @@ s390_expand_setmem (rtx dst, rtx len, rtx val)\n \n       emit_label (loop_start_label);\n \n-      if (TARGET_Z10\n-\t  && (GET_CODE (len) != CONST_INT || INTVAL (len) > 1024))\n+      if (TARGET_SETMEM_PFD (val, len))\n \t{\n-\t  /* Issue a write prefetch for the +4 cache line.  */\n-\t  rtx prefetch = gen_prefetch (gen_rtx_PLUS (Pmode, dst_addr,\n-\t\t\t\t\t\t     GEN_INT (1024)),\n+\t  /* Issue a write prefetch.  */\n+\t  rtx distance = GEN_INT (TARGET_SETMEM_PREFETCH_DISTANCE);\n+\t  rtx prefetch = gen_prefetch (gen_rtx_PLUS (Pmode, dst_addr, distance),\n \t\t\t\t       const1_rtx, const0_rtx);\n \t  emit_insn (prefetch);\n \t  PREFETCH_SCHEDULE_BARRIER_P (prefetch) = true;"}, {"sha": "c6aedcd5eaa48901a14b2337a2975744e8d7afb4", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "patch": "@@ -181,6 +181,16 @@ enum processor_flags\n \n #define TARGET_AVOID_CMP_AND_BRANCH (s390_tune == PROCESSOR_2817_Z196)\n \n+/* Issue a write prefetch for the +4 cache line.  */\n+#define TARGET_SETMEM_PREFETCH_DISTANCE 1024\n+\n+/* Expand to a C expressions evaluating to true if a setmem to VAL of\n+   length LEN should be emitted using prefetch instructions.  */\n+#define TARGET_SETMEM_PFD(VAL,LEN)\t\t\t\t\t\\\n+  (TARGET_Z10\t\t\t\t\t\t\t\t\\\n+   && (s390_tune < PROCESSOR_2964_Z13 || (VAL) != const0_rtx)\t\t\\\n+   && (!CONST_INT_P (LEN) || INTVAL ((LEN)) > TARGET_SETMEM_PREFETCH_DISTANCE))\n+\n /* Run-time target specification.  */\n \n /* Defaults for option flags defined only on some subtargets.  */"}, {"sha": "f741d280fd5d08905a3673367451ba964a6901f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "patch": "@@ -1,3 +1,7 @@\n+2018-07-31  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/memset-1.c: Improve testcase.\n+\n 2018-07-31  Tom de Vries  <tdevries@suse.de>\n \n \tPR debug/86687"}, {"sha": "3e201df1aede491bbfde4dfde6132b50d87a6883", "filename": "gcc/testsuite/gcc.target/s390/memset-1.c", "status": "modified", "additions": 62, "deletions": 19, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemset-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de3a1e16a86d23dec7cea6e5f7f710cf5769e71/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemset-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmemset-1.c?ref=4de3a1e16a86d23dec7cea6e5f7f710cf5769e71", "patch": "@@ -2,16 +2,23 @@\n    without loop statements.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O3 -mzarch\" } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n \n-/* 1 mvc */\n+/* 1 stc */\n+void\n+*memset0(void *s, int c)\n+{\n+  return __builtin_memset (s, c, 1);\n+}\n+\n+/* 1 stc 1 mvc */\n void\n *memset1(void *s, int c)\n {\n   return __builtin_memset (s, c, 42);\n }\n \n-/* 3 mvc */\n+/* 3 stc 3 mvc */\n void\n *memset2(void *s, int c)\n {\n@@ -25,55 +32,62 @@ void\n   return __builtin_memset (s, c, 0);\n }\n \n-/* mvc */\n+/* 1 stc 1 mvc */\n void\n *memset4(void *s, int c)\n {\n   return __builtin_memset (s, c, 256);\n }\n \n-/* 2 mvc */\n+/* 2 stc 2 mvc */\n void\n *memset5(void *s, int c)\n {\n   return __builtin_memset (s, c, 512);\n }\n \n-/* still 2 mvc through the additional first byte  */\n+/* 2 stc 2 mvc - still due to the stc bytes */\n void\n *memset6(void *s, int c)\n {\n   return __builtin_memset (s, c, 514);\n }\n \n-/* 3 mvc */\n+/* 3 stc 2 mvc */\n void\n *memset7(void *s, int c)\n {\n   return __builtin_memset (s, c, 515);\n }\n \n-/* still 3 mvc through the additional first byte  */\n+/* 4 stc 4 mvc - 4 * 256 + 4 stc bytes */\n void\n *memset8(void *s, int c)\n {\n-  return __builtin_memset (s, c, 771);\n+  return __builtin_memset (s, c, 1028);\n }\n \n-/* Use mvc loop: 2 mvc */\n+/* 2 stc 1 pfd 2 mvc - start using mvc loop */\n void\n *memset9(void *s, int c)\n {\n-  return __builtin_memset (s, c, 772);\n+  return __builtin_memset (s, c, 1029);\n }\n \n-/* 3 mvc with displacement overflow after the first */\n+/* 2 stc 1 stcy 3 mvc - displacement overflow after the first */\n void\n *memset10(void *s, int c)\n {\n   return __builtin_memset ((char*)s + 4000, c, 700);\n }\n \n+/* 1 mvi */\n+void\n+*clrmem0(void *s)\n+{\n+  return __builtin_memset (s, 0, 1);\n+}\n+\n /* 1 xc */\n void\n *clrmem1(void *s)\n@@ -109,26 +123,55 @@ void\n   return __builtin_memset (s, 0, 512);\n }\n \n-/* 3 xc */\n+/* 4 xc */\n void\n *clrmem6(void *s)\n {\n-  return __builtin_memset (s, 0, 768);\n+  return __builtin_memset (s, 0, 1024);\n }\n \n-/* start using xc loop */\n+/* 2 xc - start using xc loop*/\n void\n *clrmem7(void *s)\n+{\n+  return __builtin_memset (s, 0, 1025);\n+}\n+\n+/* 5 xc - on z10 PFD would be used in the loop body so the unrolled\n+   variant would still be shorter.  */\n+__attribute__ ((target(\"tune=z10\")))\n+void\n+*clrmem7_z10(void *s)\n+{\n+  return __builtin_memset (s, 0, 1025);\n+}\n+\n+/* 5 xc */\n+__attribute__ ((target(\"tune=z10\")))\n+void\n+*clrmem8_z10(void *s)\n+{\n+  return __builtin_memset (s, 0, 1280);\n+}\n+\n+/* 1 pfd 2 xc - start using xc loop also on z10 */\n+__attribute__ ((target(\"tune=z10\")))\n+void\n+*clrmem9_z10(void *s)\n {\n   return __builtin_memset (s, 0, 1281);\n }\n \n-/* 3 xc with displacement overflow after the first */\n+/* 3 xc - displacement overflow after the first */\n void\n-*clrmem8(void *s)\n+*clrmem10(void *s)\n {\n   return __builtin_memset (s + 4000, 0, 700);\n }\n \n-/* { dg-final { scan-assembler-times \"mvc\" 19 } } */\n-/* { dg-final { scan-assembler-times \"xc\" 15 } } */\n+/* { dg-final { scan-assembler-times \"mvi\\\\s\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mvc\\\\s\" 20 } } */\n+/* { dg-final { scan-assembler-times \"xc\\\\s\" 28 } } */\n+/* { dg-final { scan-assembler-times \"stc\\\\s\" 21 } } */\n+/* { dg-final { scan-assembler-times \"stcy\\\\s\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pfd\\\\s\" 2 } } */"}]}