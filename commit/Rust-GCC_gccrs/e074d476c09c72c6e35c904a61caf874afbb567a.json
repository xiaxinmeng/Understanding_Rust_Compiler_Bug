{"sha": "e074d476c09c72c6e35c904a61caf874afbb567a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3NGQ0NzZjMDljNzJjNmUzNWM5MDRhNjFjYWY4NzRhZmJiNTY3YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T08:27:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T08:27:05Z"}, "message": "[multiple changes]\n\n2010-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* a-convec.adb, sem_prag.adb, checks.adb: Minor reformatting\n\n2010-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* init.c: Code clean up.\n\n2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case Address): Do\n\tnot insert address clause in table for later validation if type of\n\tentity is generic, to prevent possible spurious errors. \n\n\t* sem_ch8.adb: Code clean up.\n\n2010-06-14  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Expanded @ovar macro inline to solve problem with\n\ttexi2pdf and texi2html.\n\tDocument how to change scheduling properties on HP-UX.\n\n2010-06-14  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.ads: Remove misleading comments.\n\nFrom-SVN: r160711", "tree": {"sha": "ee6e80da2c8b0f47fcfe335443bad67c02958fa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee6e80da2c8b0f47fcfe335443bad67c02958fa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e074d476c09c72c6e35c904a61caf874afbb567a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e074d476c09c72c6e35c904a61caf874afbb567a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e074d476c09c72c6e35c904a61caf874afbb567a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e074d476c09c72c6e35c904a61caf874afbb567a/comments", "author": null, "committer": null, "parents": [{"sha": "8255bc9ded23dd735b703d94855c60f4713310d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8255bc9ded23dd735b703d94855c60f4713310d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8255bc9ded23dd735b703d94855c60f4713310d2"}], "stats": {"total": 395, "additions": 216, "deletions": 179}, "files": [{"sha": "8a761ab0b59613dfc52085302df0f9fe6fda0889", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -1,3 +1,29 @@\n+2010-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-convec.adb, sem_prag.adb, checks.adb: Minor reformatting\n+\n+2010-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* init.c: Code clean up.\n+\n+2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case Address): Do\n+\tnot insert address clause in table for later validation if type of\n+\tentity is generic, to prevent possible spurious errors. \n+\n+\t* sem_ch8.adb: Code clean up.\n+\n+2010-06-14  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Expanded @ovar macro inline to solve problem with\n+\ttexi2pdf and texi2html.\n+\tDocument how to change scheduling properties on HP-UX.\n+\n+2010-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.ads: Remove misleading comments.\n+\n 2010-06-14  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* sem_prag.adb (Check_Duplicated_Export_Name): Remove check for"}, {"sha": "8d146b07decb97ef66b66957c3c62f4ecba35eb3", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -103,10 +103,12 @@ package body Ada.Containers.Vectors is\n          --  end of the range of Int.\n \n          if Index_Type'First <= 0 then\n+\n             --  Compute the potential Last index value in the normal way, using\n             --  Int as the type in which to perform intermediate\n             --  calculations. Int is a 64-bit type, and Count_Type is a 32-bit\n             --  type, so no overflow can occur.\n+\n             J := Int (Index_Type'First - 1) + N;\n \n             if J > Int (Index_Type'Last) then\n@@ -120,6 +122,7 @@ package body Ada.Containers.Vectors is\n             --  greater than Index_Type'Last (as we do above), we work\n             --  backwards by computing the potential First index value, and\n             --  then checking whether that value is less than Index_Type'First.\n+\n             J := Int (Index_Type'Last) - N + 1;\n \n             if J < Int (Index_Type'First) then\n@@ -129,6 +132,7 @@ package body Ada.Containers.Vectors is\n             --  We have determined that Length would not create a Last index\n             --  value outside of the range of Index_Type, so we can now safely\n             --  compute its value.\n+\n             J := Int (Index_Type'First - 1) + N;\n          end if;\n "}, {"sha": "a193c2998614e299d7fc651bd2e721784262ec6b", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -1107,8 +1107,8 @@ package body Checks is\n              or else\n                (Is_Entity_Name (Obj)\n                  and then Present (Renamed_Object (Entity (Obj)))\n-                and then Nkind (Renamed_Object (Entity (Obj)))\n-                  = N_Explicit_Dereference);\n+                 and then Nkind (Renamed_Object (Entity (Obj))) =\n+                                              N_Explicit_Dereference);\n       end Denotes_Explicit_Dereference;\n \n       ----------------------------------------"}, {"sha": "d81f7da6b899f85fd8d3cb9d5ec8eb77e7bef007", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -459,8 +459,7 @@ package GNAT.Sockets is\n \n    type Family_Type is (Family_Inet, Family_Inet6);\n    --  Address family (or protocol family) identifies the communication domain\n-   --  and groups protocols with similar address formats. IPv6 will soon be\n-   --  supported.\n+   --  and groups protocols with similar address formats.\n \n    type Mode_Type is (Socket_Stream, Socket_Datagram);\n    --  Stream sockets provide connection-oriented byte streams. Datagram"}, {"sha": "d21606c21aa7944bcc4f5def6bb4342ad0a1401c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 125, "deletions": 27, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -107,6 +107,13 @@ Texts.  A copy of the license is included in the section entitled\n @macro ovar{varname}\n @r{[}@var{\\varname\\}@r{]}@c\n @end macro\n+@c Status as of November 2009:\n+@c Unfortunately texi2pdf and texi2html treat the trailing \"@c\"\n+@c differently, and faulty output is produced by one or the other\n+@c depending on whether the \"@c\" is present or absent.\n+@c As a result, the @ovar macro is not used, and all invocations\n+@c of the @ovar macro have been expanded inline.\n+\n \n @settitle @value{EDITION} User's Guide @value{PLATFORM}\n @dircategory GNU Ada tools\n@@ -597,6 +604,8 @@ Platform-Specific Information for the Run-Time Libraries\n * Linux-Specific Considerations::\n * AIX-Specific Considerations::\n * Irix-Specific Considerations::\n+* RTX-Specific Considerations::\n+* HP-UX-Specific Considerations::\n \n Example of Binder Output File\n \n@@ -3873,7 +3882,9 @@ without generating code, then use the @option{-gnatc} switch.\n The basic command for compiling a file containing an Ada unit is\n \n @smallexample\n-$ gcc -c @ovar{switches} @file{file name}\n+@c $ gcc -c @ovar{switches} @file{file name}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gcc -c @r{[}@var{switches}@r{]} @file{file name}\n @end smallexample\n \n @noindent\n@@ -4419,7 +4430,9 @@ Inhibit the search of the default location for the GNAT Run Time\n Library (RTL) ALI files.\n \n @ifclear vms\n-@item -O@ovar{n}\n+@c @item -O@ovar{n}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+@item -O@r{[}@var{n}@r{]}\n @cindex @option{-O} (@command{gcc})\n @var{n} controls the optimization level.\n \n@@ -7187,7 +7200,9 @@ Shows the storage pool associated with a @code{free} statement.\n Used to list an equivalent declaration for an internally generated\n type that is referenced elsewhere in the listing.\n \n-@item freeze @var{type-name} @ovar{actions}\n+@c @item freeze @var{type-name} @ovar{actions}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+@item freeze @var{type-name} @r{[}@var{actions}@r{]}\n Shows the point at which @var{type-name} is frozen, with possible\n associated actions to be performed at the freeze point.\n \n@@ -7886,7 +7901,9 @@ to be read by the @command{gnatlink} utility used to link the Ada application.\n The form of the @code{gnatbind} command is\n \n @smallexample\n-$ gnatbind @ovar{switches} @var{mainprog}@r{[}.ali@r{]} @ovar{switches}\n+@c $ gnatbind @ovar{switches} @var{mainprog}@r{[}.ali@r{]} @ovar{switches}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatbind @r{[}@var{switches}@r{]} @var{mainprog}@r{[}.ali@r{]} @r{[}@var{switches}@r{]}\n @end smallexample\n \n @noindent\n@@ -8865,8 +8882,12 @@ driver (see @ref{The GNAT Driver and Project Files}).\n The form of the @command{gnatlink} command is\n \n @smallexample\n-$ gnatlink @ovar{switches} @var{mainprog}@r{[}.ali@r{]}\n-           @ovar{non-Ada objects} @ovar{linker options}\n+@c $ gnatlink @ovar{switches} @var{mainprog}@r{[}.ali@r{]}\n+@c            @ovar{non-Ada objects} @ovar{linker options}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatlink @r{[}@var{switches}@r{]} @var{mainprog}@r{[}.ali@r{]}\n+           @r{[}@var{non-Ada objects}@r{]} @r{[}@var{linker options}@r{]}\n+\n @end smallexample\n \n @noindent\n@@ -9144,8 +9165,11 @@ dependencies, they will always be tracked exactly correctly by\n The usual form of the @command{gnatmake} command is\n \n @smallexample\n-$ gnatmake @ovar{switches} @var{file_name}\n-      @ovar{file_names} @ovar{mode_switches}\n+@c $ gnatmake @ovar{switches} @var{file_name}\n+@c       @ovar{file_names} @ovar{mode_switches}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatmake @r{[}@var{switches}@r{]} @var{file_name}\n+      @r{[}@var{file_names}@r{]} @r{[}@var{mode_switches}@r{]}\n @end smallexample\n \n @noindent\n@@ -10715,7 +10739,7 @@ Note that @code{gnatelim} needs neither object nor ALI files.\n @code{gnatelim} has the following command-line interface:\n \n @smallexample\n-$ gnatelim @ovar{options} name\n+$ gnatelim [@var{options}] name\n @end smallexample\n \n @noindent\n@@ -11119,8 +11143,11 @@ in which GNAT processes the ACVC tests.\n The @code{gnatchop} command has the form:\n \n @smallexample\n+@c $ gnatchop switches @var{file name} @r{[}@var{file name} @dots{}@r{]}\n+@c      @ovar{directory}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n $ gnatchop switches @var{file name} @r{[}@var{file name} @dots{}@r{]}\n-      @ovar{directory}\n+      @r{[}@var{directory}@r{]}\n @end smallexample\n \n @noindent\n@@ -11546,8 +11573,11 @@ set of files.\n The usual form of the @code{gnatname} command is\n \n @smallexample\n-$ gnatname @ovar{switches} @var{naming_pattern} @ovar{naming_patterns}\n-      @r{[}--and @ovar{switches} @var{naming_pattern} @ovar{naming_patterns}@r{]}\n+@c $ gnatname @ovar{switches} @var{naming_pattern} @ovar{naming_patterns}\n+@c       @r{[}--and @ovar{switches} @var{naming_pattern} @ovar{naming_patterns}@r{]}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatname @r{[}@var{switches}@r{]} @var{naming_pattern} @r{[}@var{naming_patterns}@r{]}\n+      @r{[}--and @r{[}@var{switches}@r{]} @var{naming_pattern} @r{[}@var{naming_patterns}@r{]}@r{]}\n @end smallexample\n \n @noindent\n@@ -15403,7 +15433,9 @@ use the @code{gnat} driver (see @ref{The GNAT Driver and Project Files}).\n @noindent\n The command invocation for @code{gnatxref} is:\n @smallexample\n-$ gnatxref @ovar{switches} @var{sourcefile1} @r{[}@var{sourcefile2} @dots{}@r{]}\n+@c $ gnatxref @ovar{switches} @var{sourcefile1} @r{[}@var{sourcefile2} @dots{}@r{]}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatxref @r{[}@var{switches}@r{]} @var{sourcefile1} @r{[}@var{sourcefile2} @dots{}@r{]}\n @end smallexample\n \n @noindent\n@@ -15535,8 +15567,11 @@ you can say @samp{gnatxref ^-ag^/ALL_FILES/IGNORE_LOCALS^} instead of\n The command line for @code{gnatfind} is:\n \n @smallexample\n-$ gnatfind @ovar{switches} @var{pattern}@r{[}:@var{sourcefile}@r{[}:@var{line}@r{[}:@var{column}@r{]]]}\n-      @r{[}@var{file1} @var{file2} @dots{}]\n+@c $ gnatfind @ovar{switches} @var{pattern}@r{[}:@var{sourcefile}@r{[}:@var{line}@r{[}:@var{column}@r{]]]}\n+@c       @r{[}@var{file1} @var{file2} @dots{}]\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatfind @r{[}@var{switches}@r{]} @var{pattern}@r{[}:@var{sourcefile}@r{[}:@var{line}@r{[}:@var{column}@r{]]]}\n+      @r{[}@var{file1} @var{file2} @dots{}@r{]}\n @end smallexample\n \n @noindent\n@@ -16122,7 +16157,9 @@ call @command{gnatpp} through the @command{gnat} driver\n The @command{gnatpp} command has the form\n \n @smallexample\n-$ gnatpp @ovar{switches} @var{filename}\n+@c $ gnatpp @ovar{switches} @var{filename}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatpp @r{[}@var{switches}@r{]} @var{filename}\n @end smallexample\n \n @noindent\n@@ -17224,7 +17261,9 @@ through the @command{gnat} driver.\n The @command{gnatmetric} command has the form\n \n @smallexample\n-$ gnatmetric @ovar{switches} @{@var{filename}@} @r{[}-cargs @var{gcc_switches}@r{]}\n+@c $ gnatmetric @ovar{switches} @{@var{filename}@} @r{[}-cargs @var{gcc_switches}@r{]}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatmetric @r{[}@var{switches}@r{]} @{@var{filename}@} @r{[}-cargs @var{gcc_switches}@r{]}\n @end smallexample\n \n @noindent\n@@ -18006,7 +18045,9 @@ The @code{gnatkr} command has the form\n \n @ifclear vms\n @smallexample\n-$ gnatkr @var{name} @ovar{length}\n+@c $ gnatkr @var{name} @ovar{length}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatkr @var{name} @r{[}@var{length}@r{]}\n @end smallexample\n @end ifclear\n \n@@ -18194,7 +18235,9 @@ all characters need to be in the ASCII set (no accented letters).\n To call @code{gnatprep} use\n \n @smallexample\n-$ gnatprep @ovar{switches} @var{infile} @var{outfile} @ovar{deffile}\n+@c $ gnatprep @ovar{switches} @var{infile} @var{outfile} @ovar{deffile}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatprep @r{[}@var{switches}@r{]} @var{infile} @var{outfile} @r{[}@var{deffile}@r{]}\n @end smallexample\n \n @noindent\n@@ -20170,7 +20213,9 @@ Solaris and Windows NT/2000/XP (x86).\n The @code{gnatmem} command has the form\n \n @smallexample\n-   $ gnatmem @ovar{switches} user_program\n+@c    $ gnatmem @ovar{switches} user_program\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+      $ gnatmem @r{[}@var{switches}@r{]} @var{user_program}\n @end smallexample\n \n @noindent\n@@ -20698,7 +20743,11 @@ driver (see @ref{The GNAT Driver and Project Files}).\n Invoking @command{gnatcheck} on the command line has the form:\n \n @smallexample\n-$ gnatcheck @ovar{switches}  @{@var{filename}@}\n+@c $ gnatcheck @ovar{switches}  @{@var{filename}@}\n+@c       @r{[}^-files^/FILES^=@{@var{arg_list_filename}@}@r{]}\n+@c       @r{[}-cargs @var{gcc_switches}@r{]} -rules @var{rule_options}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatcheck @r{[}@var{switches}@r{]}  @{@var{filename}@}\n       @r{[}^-files^/FILES^=@{@var{arg_list_filename}@}@r{]}\n       @r{[}-cargs @var{gcc_switches}@r{]} -rules @var{rule_options}\n @end smallexample\n@@ -23157,7 +23206,9 @@ option @option{^--no-exception^/NO_EXCEPTION^} (see below).\n @command{gnatstub} has the command-line interface of the form\n \n @smallexample\n-$ gnatstub @ovar{switches} @var{filename} @ovar{directory}\n+@c $ gnatstub @ovar{switches} @var{filename} @ovar{directory}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatstub @r{[}@var{switches}@r{]} @var{filename} @r{[}@var{directory}@r{]}\n @end smallexample\n \n @noindent\n@@ -23689,7 +23740,9 @@ be able to click on any identifier and go to its declaration.\n \n The command line is as follow:\n @smallexample\n-$ perl gnathtml.pl @ovar{^switches^options^} @var{ada-files}\n+@c $ perl gnathtml.pl @ovar{^switches^options^} @var{ada-files}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ perl gnathtml.pl @r{[}@var{^switches^options^}@r{]} @var{ada-files}\n @end smallexample\n \n @noindent\n@@ -23795,7 +23848,9 @@ is. The syntax of this line is:\n Alternatively, you may run the script using the following command line:\n \n @smallexample\n-$ perl gnathtml.pl @ovar{switches} @var{files}\n+@c $ perl gnathtml.pl @ovar{switches} @var{files}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ perl gnathtml.pl @r{[}@var{switches}@r{]} @var{files}\n @end smallexample\n \n @ifset vms\n@@ -26919,6 +26974,7 @@ information about several specific platforms.\n * AIX-Specific Considerations::\n * Irix-Specific Considerations::\n * RTX-Specific Considerations::\n+* HP-UX-Specific Considerations::\n @end menu\n \n @node Summary of Run-Time Configurations\n@@ -27282,6 +27338,42 @@ over all Windows applications (@emph{rts-rtx-rtss}).\n \n @end itemize\n \n+@node HP-UX-Specific Considerations\n+@section HP-UX-Specific Considerations\n+@cindex HP-UX Scheduling\n+\n+@noindent\n+On HP-UX, appropriate privileges are required to change the scheduling\n+parameters of a task. The calling process must have appropriate\n+privileges or be a member of a group having @code{PRIV_RTSCHED} access to\n+successfully change the scheduling parameters.\n+\n+By default, GNAT uses the @code{SCHED_HPUX} policy. To have access to the\n+priority range 0-31 either the @code{FIFO_Within_Priorities} or the\n+@code{Round_Robin_Within_Priorities} scheduling policies need to be set.\n+\n+To specify the @code{FIFO_Within_Priorities} scheduling policy you can use\n+one of the following:\n+\n+@itemize @bullet\n+@item\n+@code{pragma Time_Slice (0.0)}\n+@cindex pragma Time_Slice\n+@item\n+the corresponding binder option @option{-T0}\n+@cindex @option{-T0} option\n+@item\n+@code{pragma Task_Dispatching_Policy (FIFO_Within_Priorities)}\n+@cindex pragma Task_Dispatching_Policy\n+@end itemize\n+\n+@noindent\n+To specify the @code{Round_Robin_Within_Priorities}, scheduling policy\n+you should use @code{pragma Time_Slice} with a\n+value greater than @code{0.0}, or use the corresponding @option{-T}\n+binder option, or set the @code{pragma Task_Dispatching_Policy\n+(Round_Robin_Within_Priorities)}.\n+\n @c *******************************\n @node Example of Binder Output File\n @appendix Example of Binder Output File\n@@ -33270,7 +33362,9 @@ static import library for the DLL and the actual DLL. The form of the\n \n @smallexample\n @cartouche\n-$ gnatdll @ovar{switches} @var{list-of-files} @r{[}-largs @var{opts}@r{]}\n+@c $ gnatdll @ovar{switches} @var{list-of-files} @r{[}-largs @var{opts}@r{]}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ gnatdll @r{[}@var{switches}@r{]} @var{list-of-files} @r{[}-largs @var{opts}@r{]}\n @end cartouche\n @end smallexample\n \n@@ -33286,7 +33380,9 @@ missing, only the static import library is generated.\n You may specify any of the following switches to @code{gnatdll}:\n \n @table @code\n-@item -a@ovar{address}\n+@c @item -a@ovar{address}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+@item -a@r{[}@var{address}@r{]}\n @cindex @option{-a} (@code{gnatdll})\n Build a non-relocatable DLL at @var{address}. If @var{address} is not\n specified the default address @var{0x11000000} will be used. By default,\n@@ -33489,7 +33585,9 @@ common @code{dlltool} switches. The form of the @code{dlltool} command\n is\n \n @smallexample\n-$ dlltool @ovar{switches}\n+@c $ dlltool @ovar{switches}\n+@c Expanding @ovar macro inline (explanation in macro def comments)\n+$ dlltool @r{[}@var{switches}@r{]}\n @end smallexample\n \n @noindent"}, {"sha": "ad4928d8276c370d6707a1df98844a90bc28dd9f", "filename": "gcc/ada/init.c", "status": "modified", "additions": 43, "deletions": 138, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -214,12 +214,10 @@ nanosleep (struct timestruc_t *Rqtp, struct timestruc_t *Rmtp)\n \n #endif /* _AIXVERSION_430 */\n \n-static void __gnat_error_handler (int sig, siginfo_t * si, void * uc);\n-\n static void\n __gnat_error_handler (int sig,\n-\t\t      siginfo_t * si ATTRIBUTE_UNUSED,\n-\t\t      void * uc ATTRIBUTE_UNUSED)\n+\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n+\t\t      void *ucontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -287,7 +285,6 @@ __gnat_install_handler (void)\n #include <signal.h>\n #include <sys/siginfo.h>\n \n-static void __gnat_error_handler (int, siginfo_t *, struct sigcontext *);\n extern char *__gnat_get_code_loc (struct sigcontext *);\n extern void __gnat_set_code_loc (struct sigcontext *, char *);\n extern size_t __gnat_machine_state_length (void);\n@@ -310,18 +307,18 @@ __gnat_adjust_context_for_raise (int signo, void *ucontext)\n }\n \n static void\n-__gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n+__gnat_error_handler (int sig, siginfo_t *si, void *ucontext)\n {\n   struct Exception_Data *exception;\n   static int recurse = 0;\n   const char *msg;\n \n   /* Adjusting is required for every fault context, so adjust for this one\n      now, before we possibly trigger a recursive fault below.  */\n-  __gnat_adjust_context_for_raise (sig, context);\n+  __gnat_adjust_context_for_raise (sig, ucontext);\n \n   /* If this was an explicit signal from a \"kill\", just resignal it.  */\n-  if (SI_FROMUSER (sip))\n+  if (SI_FROMUSER (si))\n     {\n       signal (sig, SIG_DFL);\n       kill (getpid(), sig);\n@@ -338,8 +335,9 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n \t ??? Using a static variable here isn't task-safe, but it's\n \t much too hard to do anything else and we're just determining\n \t which exception to raise.  */\n-      if (sip->si_code == SEGV_ACCERR\n-\t  || (((long) sip->si_addr) & 3) != 0\n+      if (si->si_code == SEGV_ACCERR\n+\t  || (long) si->si_addr == 0\n+\t  || (((long) si->si_addr) & 3) != 0\n \t  || recurse)\n \t{\n \t  exception = &constraint_error;\n@@ -353,9 +351,9 @@ __gnat_error_handler (int sig, siginfo_t *sip, struct sigcontext *context)\n \t     the actual address, just to be on the same page.  */\n \t  recurse++;\n \t  ((volatile char *)\n-\t   ((long) sip->si_addr & - getpagesize ()))[getpagesize ()];\n-\t  msg = \"stack overflow (or erroneous memory access)\";\n+\t   ((long) si->si_addr & - getpagesize ()))[getpagesize ()];\n \t  exception = &storage_error;\n+\t  msg = \"stack overflow (or erroneous memory access)\";\n \t}\n       break;\n \n@@ -438,13 +436,9 @@ __gnat_machine_state_length (void)\n #include <sys/ucontext.h>\n \n static void\n-__gnat_error_handler (int sig, siginfo_t *siginfo, void *ucontext);\n-\n-static void\n-__gnat_error_handler\n-  (int sig,\n-   siginfo_t *siginfo ATTRIBUTE_UNUSED,\n-   void *ucontext ATTRIBUTE_UNUSED)\n+__gnat_error_handler (int sig,\n+\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n+\t\t      void *ucontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -570,8 +564,6 @@ void fake_linux_sigemptyset (sigset_t *set) {\n \n #endif\n \n-static void __gnat_error_handler (int, siginfo_t *siginfo, void *ucontext);\n-\n #if defined (i386) || defined (__x86_64__) || defined (__ia64__)\n \n #define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n@@ -581,11 +573,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n {\n   mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n \n-  /* On the i386 and x86-64 architectures, we specifically detect calls to\n-     the null address and entirely fold the not-yet-fully-established frame\n-     to prevent it from stopping the unwinding.\n-\n-     On the i386 and x86-64 architectures, stack checking is performed by\n+  /* On the i386 and x86-64 architectures, stack checking is performed by\n      means of probes with moving stack pointer, that is to say the probed\n      address is always the value of the stack pointer.  Upon hitting the\n      guard page, the stack pointer therefore points to an inaccessible\n@@ -605,25 +593,13 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n \n #if defined (i386)\n   unsigned long *pc = (unsigned long *)mcontext->gregs[REG_EIP];\n-  /* The call insn pushes the return address onto the stack.  Pop it.  */\n-  if (pc == NULL)\n-    {\n-      mcontext->gregs[REG_EIP] = *(unsigned long *)mcontext->gregs[REG_ESP];\n-      mcontext->gregs[REG_ESP] += 4;\n-    }\n   /* The pattern is \"orl $0x0,(%esp)\" for a probe in 32-bit mode.  */\n-  else if (signo == SIGSEGV && *pc == 0x00240c83)\n+  if (signo == SIGSEGV && pc && *pc == 0x00240c83)\n     mcontext->gregs[REG_ESP] += 4096 + 4 * sizeof (unsigned long);\n #elif defined (__x86_64__)\n   unsigned long *pc = (unsigned long *)mcontext->gregs[REG_RIP];\n-  /* The call insn pushes the return address onto the stack.  Pop it.  */\n-  if (pc == NULL)\n-    {\n-      mcontext->gregs[REG_RIP] = *(unsigned long *)mcontext->gregs[REG_RSP];\n-      mcontext->gregs[REG_RSP] += 8;\n-    }\n   /* The pattern is \"orq $0x0,(%rsp)\" for a probe in 64-bit mode.  */\n-  else if (signo == SIGSEGV && (*pc & 0xffffffffff) == 0x00240c8348)\n+  if (signo == SIGSEGV && pc && (*pc & 0xffffffffff) == 0x00240c8348)\n     mcontext->gregs[REG_RSP] += 4096 + 4 * sizeof (unsigned long);\n #elif defined (__ia64__)\n   /* ??? The IA-64 unwinder doesn't compensate for signals.  */\n@@ -634,12 +610,9 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n #endif\n \n static void\n-__gnat_error_handler (int sig,\n-                      siginfo_t *siginfo ATTRIBUTE_UNUSED,\n-                      void *ucontext)\n+__gnat_error_handler (int sig, siginfo_t *si ATTRIBUTE_UNUSED, void *ucontext)\n {\n   struct Exception_Data *exception;\n-  static int recurse = 0;\n   const char *msg;\n \n   /* Adjusting is required for every fault context, so adjust for this one\n@@ -649,42 +622,24 @@ __gnat_error_handler (int sig,\n   switch (sig)\n     {\n     case SIGSEGV:\n-      /* If the problem was permissions, this is a constraint error.\n-       Likewise if the failing address isn't maximally aligned or if\n-       we've recursed.\n-\n-       ??? Using a static variable here isn't task-safe, but it's\n-       much too hard to do anything else and we're just determining\n-       which exception to raise.  */\n-      if (recurse)\n-      {\n-        exception = &constraint_error;\n-        msg = \"SIGSEGV\";\n-      }\n-      else\n-      {\n-        /* Here we would like a discrimination test to see whether the\n-           page before the faulting address is accessible. Unfortunately\n-           Linux seems to have no way of giving us the faulting address.\n+      /* Here we would like a discrimination test to see whether the page\n+\t before the faulting address is accessible.  Unfortunately, Linux\n+\t seems to have no way of giving us the faulting address.\n \n-           In versions of a-init.c before 1.95, we had a test of the page\n-           before the stack pointer using:\n+\t In old versions of init.c, we had a test of the page before the\n+\t stack pointer:\n \n-            recurse++;\n-             ((volatile char *)\n-              ((long) info->esp_at_signal & - getpagesize ()))[getpagesize ()];\n+\t   ((volatile char *)\n+\t    ((long) si->esp_at_signal & - getpagesize ()))[getpagesize ()];\n \n-           but that's wrong, since it tests the stack pointer location, and\n-           the current stack probe code does not move the stack pointer\n-           until all probes succeed.\n+\t but that's wrong since it tests the stack pointer location and the\n+\t stack probing code may not move it until all probes succeed.\n \n-           For now we simply do not attempt any discrimination at all. Note\n-           that this is quite acceptable, since a \"real\" SIGSEGV can only\n-           occur as the result of an erroneous program.  */\n-\n-        msg = \"stack overflow (or erroneous memory access)\";\n-        exception = &storage_error;\n-      }\n+\t For now we simply do not attempt any discrimination at all. Note\n+\t that this is quite acceptable, since a \"real\" SIGSEGV can only\n+\t occur as the result of an erroneous program.  */\n+      exception = &storage_error;\n+      msg = \"stack overflow (or erroneous memory access)\";\n       break;\n \n     case SIGBUS:\n@@ -702,7 +657,6 @@ __gnat_error_handler (int sig,\n       msg = \"unhandled signal\";\n     }\n \n-  recurse = 0;\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n@@ -800,8 +754,6 @@ extern int (*Check_Abort_Status) (void);\n \n extern struct Exception_Data _abort_signal;\n \n-static void __gnat_error_handler (int, int, sigcontext_t *);\n-\n /* We are not setting the SA_SIGINFO bit in the sigaction flags when\n    connecting that handler, with the effects described in the sigaction\n    man page:\n@@ -1007,58 +959,13 @@ __gnat_install_handler(void)\n #define RETURN_ADDR_OFFSET 0\n #endif\n \n-/* Likewise regarding how the \"instruction pointer\" register slot can\n-   be identified in signal machine contexts.  We have either \"REG_PC\"\n-   or \"PC\" at hand, depending on the target CPU and Solaris version.  */\n-#if !defined (REG_PC)\n-#define REG_PC PC\n-#endif\n-\n-static void __gnat_error_handler (int, siginfo_t *, void *);\n-\n-#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n-\n-void\n-__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n-{\n-  mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n-  unsigned long *pc = (unsigned long *)mcontext->gregs[REG_PC];\n-\n-  /* We specifically detect calls to the null address and entirely fold\n-     the not-yet-fully-established frame to prevent it from stopping the\n-     unwinding.  */\n-  if (pc == NULL)\n-#if defined (__sparc)\n-    /* The call insn moves the return address into %o7.  Move it back.  */\n-    mcontext->gregs[REG_PC] = mcontext->gregs[REG_O7];\n-#elif defined (i386)\n-    {\n-      /* The call insn pushes the return address onto the stack.  Pop it.  */\n-      mcontext->gregs[REG_PC] = *(unsigned long *)mcontext->gregs[UESP];\n-      mcontext->gregs[UESP] += 4;\n-    }\n-#elif defined (__x86_64__)\n-    {\n-      /* The call insn pushes the return address onto the stack.  Pop it.  */\n-      mcontext->gregs[REG_PC] = *(unsigned long *)mcontext->gregs[REG_RSP];\n-      mcontext->gregs[REG_RSP] += 8;\n-    }\n-#else\n-#error architecture not supported on Solaris\n-#endif\n-}\n-\n static void\n-__gnat_error_handler (int sig, siginfo_t *sip, void *ucontext)\n+__gnat_error_handler (int sig, siginfo_t *si, void *ucontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   static int recurse = 0;\n   const char *msg;\n \n-  /* Adjusting is required for every fault context, so adjust for this one\n-     now, before we possibly trigger a recursive fault below.  */\n-  __gnat_adjust_context_for_raise (sig, ucontext);\n-\n   switch (sig)\n     {\n     case SIGSEGV:\n@@ -1069,9 +976,9 @@ __gnat_error_handler (int sig, siginfo_t *sip, void *ucontext)\n \t ??? Using a static variable here isn't task-safe, but it's\n \t much too hard to do anything else and we're just determining\n \t which exception to raise.  */\n-      if (sip->si_code == SEGV_ACCERR\n-\t  || (long) sip->si_addr == 0\n-\t  || (((long) sip->si_addr) & 3) != 0\n+      if (si->si_code == SEGV_ACCERR\n+\t  || (long) si->si_addr == 0\n+\t  || (((long) si->si_addr) & 3) != 0\n \t  || recurse)\n \t{\n \t  exception = &constraint_error;\n@@ -1085,7 +992,7 @@ __gnat_error_handler (int sig, siginfo_t *sip, void *ucontext)\n \t     the actual address, just to be on the same page.  */\n \t  recurse++;\n \t  ((volatile char *)\n-\t   ((long) sip->si_addr & - getpagesize ()))[getpagesize ()];\n+\t   ((long) si->si_addr & - getpagesize ()))[getpagesize ()];\n \t  exception = &storage_error;\n \t  msg = \"stack overflow (or erroneous memory access)\";\n \t}\n@@ -1719,11 +1626,10 @@ void __gnat_set_features ()\n #include <sys/ucontext.h>\n #include <unistd.h>\n \n-static void __gnat_error_handler (int, siginfo_t *, ucontext_t *);\n-\n static void\n-__gnat_error_handler (int sig, siginfo_t *info __attribute__ ((unused)),\n-\t\t      ucontext_t *ucontext)\n+__gnat_error_handler (int sig,\n+\t\t      siginfo_t *si ATTRIBUTE_UNUSED,\n+\t\t      void *ucontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   const char *msg;\n@@ -1939,8 +1845,9 @@ __gnat_map_signal (int sig)\n    propagation after the required low level adjustments.  */\n \n void\n-__gnat_error_handler (int sig, void * si ATTRIBUTE_UNUSED,\n-\t\t      struct sigcontext * sc)\n+__gnat_error_handler (int sig,\n+\t\t      void *si ATTRIBUTE_UNUSED,\n+\t\t      struct sigcontext *sc ATTRIBUTE_UNUSED)\n {\n   sigset_t mask;\n \n@@ -2176,8 +2083,6 @@ __gnat_install_handler(void)\n /* This must be in keeping with System.OS_Interface.Alternate_Stack_Size.  */\n char __gnat_alternate_stack[32 * 1024]; /* 1 * MINSIGSTKSZ */\n \n-static void __gnat_error_handler (int sig, siginfo_t * si, void * uc);\n-\n /* Defined in xnu unix_signal.c.\n    Tell the kernel to re-use alt stack when delivering a signal.  */\n #define\tUC_RESET_ALT_STACK\t0x80000000\n@@ -2208,7 +2113,7 @@ __gnat_is_stack_guard (mach_vm_address_t addr)\n }\n \n static void\n-__gnat_error_handler (int sig, siginfo_t * si, void * uc ATTRIBUTE_UNUSED)\n+__gnat_error_handler (int sig, siginfo_t *si, void *ucontext ATTRIBUTE_UNUSED)\n {\n   struct Exception_Data *exception;\n   const char *msg;"}, {"sha": "fe956110dbc59ad0de78ae0080d4679ed6571aa9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -1026,13 +1026,19 @@ package body Sem_Ch13 is\n                   --  check till after code generation to take full advantage\n                   --  of the annotation done by the back end. This entry is\n                   --  only made if the address clause comes from source.\n+                  --  If the entity has a generic type, the check will be\n+                  --  performed in the instance if the actual type justfies it,\n+                  --  and we do not insert the clause in the table to prevent\n+                  --  spurious warnings.\n \n                   if Address_Clause_Overlay_Warnings\n                     and then Comes_From_Source (N)\n                     and then Present (O_Ent)\n                     and then Is_Object (O_Ent)\n                   then\n-                     Address_Clause_Checks.Append ((N, U_Ent, O_Ent, Off));\n+                     if not Is_Generic_Type (Etype (U_Ent)) then\n+                        Address_Clause_Checks.Append ((N, U_Ent, O_Ent, Off));\n+                     end if;\n \n                      --  If variable overlays a constant view, and we are\n                      --  warning on overlays, then mark the variable as"}, {"sha": "6a909c88fb1300744985d400869b51773e277dcf", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -7162,11 +7162,11 @@ package body Sem_Ch8 is\n                --  we compare the scope depth of its scope with that of the\n                --  current instance. However, a generic actual of a subprogram\n                --  instance is declared in the wrapper package but will not be\n-               --  hidden by a use-visible entity. Similarly, a generic actual\n-               --  will not be hidden by an entity declared in another generic\n-               --  actual, which can only have been use-visible in the generic.\n-               --  Is this condition complete, and can the following complex\n-               --  test be simplified ???\n+               --  hidden by a use-visible entity. similarly, an entity that is\n+               --  declared in an enclosing instance will not be hidden by an\n+               --  an entity declared in a generic actual, which can only have\n+               --  been use-visible in the generic and will not have hidden the\n+               --  entity in the generic parent.\n \n                --  If Id is called Standard, the predefined package with the\n                --  same name is in the homonym chain. It has to be ignored\n@@ -7181,8 +7181,8 @@ package body Sem_Ch8 is\n                  and then (Scope (Prev) /= Standard_Standard\n                             or else Sloc (Prev) > Standard_Location)\n                then\n-                  if Ekind (Prev) = E_Package\n-                    and then Present (Associated_Formal_Package (Prev))\n+                  if In_Open_Scopes (Scope (Prev))\n+                    and then Is_Generic_Instance (Scope (Prev))\n                     and then Present (Associated_Formal_Package (P))\n                   then\n                      null;"}, {"sha": "4f2a8ec3461ff01a28bff9d7480cf11da8f12335", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e074d476c09c72c6e35c904a61caf874afbb567a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e074d476c09c72c6e35c904a61caf874afbb567a", "patch": "@@ -2589,7 +2589,7 @@ package body Sem_Prag is\n            and then Ekind (E) /= E_Variable\n            and then not\n              (Is_Access_Type (E)\n-                and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n+               and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n          then\n             Error_Pragma_Arg\n               (\"second argument of pragma% must be subprogram (type)\",\n@@ -2602,7 +2602,6 @@ package body Sem_Prag is\n             Set_Convention_From_Pragma (E);\n \n             if Is_Type (E) then\n-\n                Check_First_Subtype (Arg2);\n                Set_Convention_From_Pragma (Base_Type (E));\n "}]}