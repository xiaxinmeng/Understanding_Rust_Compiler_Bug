{"sha": "72de8622ae2d5aaeb58173f454aed87640a989b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkZTg2MjJhZTJkNWFhZWI1ODE3M2Y0NTRhZWQ4NzY0MGE5ODliNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-25T15:17:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-25T15:17:59Z"}, "message": "re PR c++/53202 (Copy constructor not called when starting a thread)\n\n\tPR c++/53202\n\t* semantics.c (build_data_member_initialization): Always keep\n\tinitializer for empty base.\n\t(cxx_eval_bare_aggregate): Discard it here.\n\nFrom-SVN: r188940", "tree": {"sha": "245bea25403bebfde4c9b5f9652145736aa9e004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245bea25403bebfde4c9b5f9652145736aa9e004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72de8622ae2d5aaeb58173f454aed87640a989b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de8622ae2d5aaeb58173f454aed87640a989b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72de8622ae2d5aaeb58173f454aed87640a989b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de8622ae2d5aaeb58173f454aed87640a989b5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "443679ae80afd9cc621d0d6bae5d431a294d0ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443679ae80afd9cc621d0d6bae5d431a294d0ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443679ae80afd9cc621d0d6bae5d431a294d0ec2"}], "stats": {"total": 129, "additions": 124, "deletions": 5}, "files": [{"sha": "f87b4d68ec14600a919ead358864f2179d0dc2ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72de8622ae2d5aaeb58173f454aed87640a989b5", "patch": "@@ -1,5 +1,10 @@\n 2012-06-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53202\n+\t* semantics.c (build_data_member_initialization): Always keep\n+\tinitializer for empty base.\n+\t(cxx_eval_bare_aggregate): Discard it here.\n+\n \tPR c++/53565\n \t* pt.c (tsubst_omp_for_iterator): Simplify DECL_EXPR handling.\n \t(tsubst_expr) [OMP_FOR]: Here, too."}, {"sha": "2d64a6671e4d7ef220ab648f815c46be8856d8ca", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=72de8622ae2d5aaeb58173f454aed87640a989b5", "patch": "@@ -5838,12 +5838,9 @@ build_data_member_initialization (tree t, VEC(constructor_elt,gc) **vec)\n \tmember = op;\n       else\n \t{\n-\t  /* We don't put out anything for an empty base.  */\n+\t  /* This is an initializer for an empty base; keep it for now so\n+\t     we can check it in cxx_eval_bare_aggregate.  */\n \t  gcc_assert (is_empty_class (TREE_TYPE (TREE_TYPE (member))));\n-\t  /* But if the initializer isn't constexpr, leave it in so we\n-\t     complain later.  */\n-\t  if (potential_constant_expression (init))\n-\t    return true;\n \t}\n     }\n   if (TREE_CODE (member) == ADDR_EXPR)\n@@ -7064,6 +7061,12 @@ cxx_eval_bare_aggregate (const constexpr_call *call, tree t,\n \t  constructor_elt *inner = base_field_constructor_elt (n, ce->index);\n \t  inner->value = elt;\n \t}\n+      else if (TREE_CODE (ce->index) == NOP_EXPR)\n+\t{\n+\t  /* This is an initializer for an empty base; now that we've\n+\t     checked that it's constant, we can ignore it.  */\n+\t  gcc_assert (is_empty_class (TREE_TYPE (TREE_TYPE (ce->index))));\n+\t}\n       else\n \tCONSTRUCTOR_APPEND_ELT (n, ce->index, elt);\n     }"}, {"sha": "2f6f22e227ad5bc3612e288d16f02515926af793", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72de8622ae2d5aaeb58173f454aed87640a989b5", "patch": "@@ -1,3 +1,8 @@\n+2012-06-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53202\n+\t* g++.dg/cpp0x/constexpr-tuple.C: New.\n+\n 2012-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/53759"}, {"sha": "f59cd845304278c5f9c76a699e487acd6f893bf7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-tuple.C", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-tuple.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de8622ae2d5aaeb58173f454aed87640a989b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-tuple.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-tuple.C?ref=72de8622ae2d5aaeb58173f454aed87640a989b5", "patch": "@@ -0,0 +1,106 @@\n+// PR c++/53202\n+// { dg-do run { target c++11 } }\n+\n+#include <tuple>\n+\n+template<typename Callable>\n+  struct Bind_simple\n+  {\n+    explicit\n+    Bind_simple(const Callable& callable)\n+    : _M_bound(callable)\n+    { }\n+\n+    Bind_simple(const Bind_simple&) = default;\n+    Bind_simple(Bind_simple&&) = default;\n+\n+    auto operator()() -> decltype((*(Callable*)0)())\n+    {\n+      return std::get<0>(_M_bound)();\n+    }\n+\n+  private:\n+\n+    std::tuple<Callable> _M_bound;\n+  };\n+\n+template<typename Callable>\n+  Bind_simple<Callable>\n+  bind_simple(Callable& callable)\n+  {\n+    return Bind_simple<Callable>(callable);\n+  }\n+\n+struct thread\n+{\n+  struct ImplBase { };\n+\n+  template<typename T>\n+    struct Impl : ImplBase {\n+      T t;\n+      Impl(T&& t) : t(std::move(t)) { }\n+    };\n+\n+  template<typename T>\n+    thread(T& t)\n+    {\n+      auto p = make_routine(bind_simple(t));\n+\n+      p->t();\n+\n+      delete p;\n+    }\n+\n+  template<typename Callable>\n+    Impl<Callable>*\n+    make_routine(Callable&& f)\n+    {\n+      return new Impl<Callable>(std::forward<Callable>(f));\n+    }\n+};\n+\n+\n+int c;\n+class background_hello\n+{\n+public:\n+    background_hello()\n+    {\n+      __builtin_printf(\"default ctor called, this=%p\\n\", this);\n+      ++c;\n+    }\n+\n+    background_hello(const background_hello &)\n+    {\n+      __builtin_printf(\"copy ctor called\\n\");\n+      ++c;\n+    }\n+\n+    background_hello(background_hello &&)\n+    {\n+      __builtin_printf(\"move ctor called\\n\");\n+      ++c;\n+    }\n+\n+    void operator ()() const\n+    {\n+      __builtin_printf(\"void background_hello::operator()() called, this=%p\\n\", this);\n+    }\n+\n+    ~background_hello()\n+    {\n+      __builtin_printf(\"destructor called, this=%p\\n\", this);\n+      --c;\n+    }\n+\n+};\n+\n+int main()\n+{\n+  {\n+    background_hello bh;\n+    thread t(bh);\n+  }\n+  if (c != 0)\n+    __builtin_abort ();\n+}"}]}