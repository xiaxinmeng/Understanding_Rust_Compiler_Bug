{"sha": "07e938fc863ee4cec163cb9290476274242ca68d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlOTM4ZmM4NjNlZTRjZWMxNjNjYjkyOTA0NzYyNzQyNDJjYTY4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-06-25T14:17:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-06-25T14:17:58Z"}, "message": "stl_algobase.h (fill, fill_n): Revert last change...\n\n2004-06-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (fill, fill_n): Revert last\n\tchange: actually we need to copy construct an object of type\n\t_Tp, not of type iterator_traits<>::value_type, therefore the\n\tcode is ok.\n\nFrom-SVN: r83652", "tree": {"sha": "4ac33c7676268dc40b45ea1e1a303e64f8656d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac33c7676268dc40b45ea1e1a303e64f8656d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07e938fc863ee4cec163cb9290476274242ca68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e938fc863ee4cec163cb9290476274242ca68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e938fc863ee4cec163cb9290476274242ca68d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e938fc863ee4cec163cb9290476274242ca68d/comments", "author": null, "committer": null, "parents": [{"sha": "4adf3e34b2ece6f4caac9d42dd4f636b8fc342b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf3e34b2ece6f4caac9d42dd4f636b8fc342b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adf3e34b2ece6f4caac9d42dd4f636b8fc342b3"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "63df31b327fe337ac65045bb59a5e9b5538962fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e938fc863ee4cec163cb9290476274242ca68d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e938fc863ee4cec163cb9290476274242ca68d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=07e938fc863ee4cec163cb9290476274242ca68d", "patch": "@@ -1,3 +1,10 @@\n+2004-06-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (fill, fill_n): Revert last\n+\tchange: actually we need to copy construct an object of type\n+\t_Tp, not of type iterator_traits<>::value_type, therefore the\n+\tcode is ok.\n+\n 2004-06-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (fill, fill_n): Tighten the"}, {"sha": "0db0ef7daac92a14473eed807d0d1b00cc7fe366", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e938fc863ee4cec163cb9290476274242ca68d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e938fc863ee4cec163cb9290476274242ca68d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=07e938fc863ee4cec163cb9290476274242ca68d", "patch": "@@ -546,8 +546,7 @@ namespace std\n \t\t\t\t  _ForwardIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;\n-      typedef typename __type_traits<_ValueType>::has_trivial_copy_constructor\n+      typedef typename __type_traits<_Tp>::has_trivial_copy_constructor\n \t_Trivial;\n       std::__fill<_Trivial>::fill(__first, __last, __value);\n     }\n@@ -622,8 +621,7 @@ namespace std\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)\n \n-      typedef typename iterator_traits<_OutputIterator>::value_type _ValueType;\n-      typedef typename __type_traits<_ValueType>::has_trivial_copy_constructor\n+      typedef typename __type_traits<_Tp>::has_trivial_copy_constructor\n \t_Trivial;\n       return std::__fill_n<_Trivial>::fill_n(__first, __n, __value);\n     }"}]}