{"sha": "dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkYzdiNmM5ZDNiM2QwMTcwY2ZlZWQxZDRlYmU1ZDg0YjczYjM0Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-11T20:58:48Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-11T20:58:48Z"}, "message": "re PR fortran/30554 ([4.1 only] ICE in mio_pointer_ref at module.c:1945)\n\n2007-02-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30554\n\t* module.c (find_symtree_for_symbol): New function to return\n\ta symtree that is not a \"unique symtree\" given a symbol.\n\t(read_module): Do not automatically set pointer_info to\n\treferenced because this inhibits the generation of a unique\n\tsymtree.  Recycle the existing symtree if possible by calling\n\tfind_symtree_for_symbol.\n\n\tPR fortran/30319\n\t* decl.c (add_init_expr_to_sym): Make new charlen for an array\n\tconstructor initializer.\n\n2007-02-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30554\n\t* gfortran.dg/used_dummy_types_6.f90: Add the \"privatized\"\n\tversions of the modules.\n\n\tPR fortran/30617\n\t* gfortran.dg/intrinsic_actual_2.f90: Make this legal fortran\n\tby getting rid of recursive I/O and providing functions with\n\tresults.\n\n\tPR fortran/30319\n\t* gfortran.dg/char_array_constructor_2.f90\n\nFrom-SVN: r121824", "tree": {"sha": "97afc311a32371e5a733bcc5f86550b0ef6fcc6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97afc311a32371e5a733bcc5f86550b0ef6fcc6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/comments", "author": null, "committer": null, "parents": [{"sha": "ba139ba8b7f96b2f1867945d8cec54a99239d31a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba139ba8b7f96b2f1867945d8cec54a99239d31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba139ba8b7f96b2f1867945d8cec54a99239d31a"}], "stats": {"total": 136, "additions": 123, "deletions": 13}, "files": [{"sha": "32ae40e23c1840b79c21568051ca296aa5404e72", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -1,3 +1,17 @@\n+2007-02-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30554\n+\t* module.c (find_symtree_for_symbol): New function to return\n+\ta symtree that is not a \"unique symtree\" given a symbol.\n+\t(read_module): Do not automatically set pointer_info to\n+\treferenced because this inhibits the generation of a unique\n+\tsymtree.  Recycle the existing symtree if possible by calling\n+\tfind_symtree_for_symbol.\n+\n+\tPR fortran/30319\n+\t* decl.c (add_init_expr_to_sym): Make new charlen for an array\n+\tconstructor initializer.\n+\n 2007-02-10  Richard Henderson  <rth@redhat.com>, Jakub Jelinek  <jakub@redhat.com>\n \n \t* f95-lang.c (gfc_init_builtin_functions): Add __emutls_get_address"}, {"sha": "f29b0353d33752eb09cdc9bf68bf9834ee61016f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -939,8 +939,13 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp,\n \t\tgfc_set_constant_character_len (len, init, false);\n \t      else if (init->expr_type == EXPR_ARRAY)\n \t\t{\n-\t\t  gfc_free_expr (init->ts.cl->length);\n+\t\t  /* Build a new charlen to prevent simplification from\n+\t\t     deleting the length before it is resolved.  */\n+\t\t  init->ts.cl = gfc_get_charlen ();\n+\t\t  init->ts.cl->next = gfc_current_ns->cl_list;\n+\t\t  gfc_current_ns->cl_list = sym->ts.cl;\n \t\t  init->ts.cl->length = gfc_copy_expr (sym->ts.cl->length);\n+\n \t\t  for (p = init->value.constructor; p; p = p->next)\n \t\t    gfc_set_constant_character_len (len, p->expr, false);\n \t\t}"}, {"sha": "1dd81e389b4f8ef07f7fb608953ef84279f23068", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -3304,6 +3304,31 @@ read_cleanup (pointer_info *p)\n }\n \n \n+/* Given a root symtree node and a symbol, try to find a symtree that\n+   references the symbol that is not a unique name.  */\n+\n+static gfc_symtree *\n+find_symtree_for_symbol (gfc_symtree *st, gfc_symbol *sym)\n+{\n+  gfc_symtree *s = NULL;\n+\n+  if (st == NULL)\n+    return s;\n+\n+  s = find_symtree_for_symbol (st->right, sym);\n+  if (s != NULL)\n+    return s;\n+  s = find_symtree_for_symbol (st->left, sym);\n+  if (s != NULL)\n+    return s;\n+\n+  if (st->n.sym == sym && !check_unique_name (st->name))\n+    return st;\n+\n+  return s;\n+}\n+\n+\n /* Read a module file.  */\n \n static void\n@@ -3363,8 +3388,17 @@ read_module (void)\n \tcontinue;\n \n       info->u.rsym.state = USED;\n-      info->u.rsym.referenced = 1;\n       info->u.rsym.sym = sym;\n+\n+      /* If possible recycle the symtree that references the symbol.\n+\t If a symtree is not found and the module does not import one,\n+\t a unique-name symtree is found by read_cleanup.  */\n+      st = find_symtree_for_symbol (gfc_current_ns->sym_root, sym);\n+      if (st != NULL)\n+\t{\n+\t  info->u.rsym.symtree = st;\n+\t  info->u.rsym.referenced = 1;\n+\t}\n     }\n \n   mio_rparen ();"}, {"sha": "7637326ec4bc9ec879a7450775898d65a62fb363", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -1,3 +1,17 @@\n+2007-02-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30554\n+\t* gfortran.dg/used_dummy_types_6.f90: Add the \"privatized\"\n+\tversions of the modules.\n+\n+\tPR fortran/30617\n+\t* gfortran.dg/intrinsic_actual_2.f90: Make this legal fortran\n+\tby getting rid of recursive I/O and providing functions with\n+\tresults.\n+\n+\tPR fortran/30319\n+\t* gfortran.dg/char_array_constructor_2.f90\n+\n 2007-02-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/26988"}, {"sha": "766eb5290332aa4b43235fcc5860407d8c99638d", "filename": "gcc/testsuite/gfortran.dg/char_array_constructor_2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_constructor_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_constructor_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_constructor_2.f90?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! Tests the fix for PR30319, in which the use of the parameter 'aa' in\n+! the array constructor that initialises bb would cause an internal\n+! error in resolution.\n+!\n+! Contributed by Vivek Rao <vivekrao4@yahoo.com>\n+!\n+module foomod\n+  character (len=1), parameter :: aa = \"z\", bb(1) = (/aa/)\n+end module foomod\n+  use foomod\n+  print *, aa, bb\n+end\n+! { dg-final { cleanup-modules \"foomod\" } }"}, {"sha": "d7a9c0d8733c51162e647314dcb55a743ca13505", "filename": "gcc/testsuite/gfortran.dg/intrinsic_actual_2.f90", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_actual_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_actual_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_actual_2.f90?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -4,34 +4,41 @@\n !\n ! Contributed by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n !\n+  integer  :: ans\n   TYPE T1 \n     INTEGER, POINTER :: I=>NULL() \n-  END TYPE T1 \n+  END TYPE T1\n+  type(T1), pointer :: tar(:)\n+ \n   character(20) res\n \n   j = 10\n-  PRINT *, LEN(SUB(8))\n-  PRINT *, LEN(SUB(j))\n-! print *, len(SUB(j + 2)//\"a\")   ! This still fails (no charlen).\n-  print *, len(bar(2))\n+  PRINT *, LEN(SUB(8)), ans\n+  PRINT *, LEN(SUB(j)), ans\n+!  print *, len(SUB(j + 2)//\"a\"), ans   ! This still fails (no charlen).\n+  print *, len(bar(2)), ans\n \n-  IF(.NOT.ASSOCIATED(F1(10))) CALL ABORT() \n+  IF(.NOT.ASSOCIATED(F1(10))) CALL ABORT()\n+  deallocate (tar)\n \n CONTAINS\n \n   FUNCTION SUB(I)  \n     CHARACTER(LEN=I) :: SUB(1)\n-    PRINT *, LEN(SUB(1))\n+    ans = LEN(SUB(1))\n+    SUB = \"\"\n   END FUNCTION\n \n   FUNCTION BAR(I)  \n     CHARACTER(LEN=I*10) :: BAR(1)\n-    PRINT *, LEN(BAR)\n+    ans = LEN(BAR)\n+    BAR = \"\"\n   END FUNCTION\n \n   FUNCTION F1(I) RESULT(R) \n    TYPE(T1), DIMENSION(:), POINTER :: R \n    INTEGER :: I \n-   ALLOCATE(R(I)) \n-  END FUNCTION F1 \n+   ALLOCATE(tar(I))\n+   R => tar \n+  END FUNCTION F1\n END "}, {"sha": "ea3905122305fc6680d54efca44da45aaa6deac0", "filename": "gcc/testsuite/gfortran.dg/used_dummy_types_6.f90", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_6.f90?ref=dcdc7b6c9d3b3d0170cfeed1d4ebe5d84b73b346", "patch": "@@ -4,6 +4,12 @@\n ! from constraint would not find the existing symtree coming directly\n ! from atom.\n !\n+! The last two modules came up subsequently to the original fix.  The\n+! PRIVATE statement caused a revival of the original problem.  This\n+! was tracked down to an interaction between the symbols being set\n+! referenced during module read and the application of the access\n+! attribute.\n+!\n ! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n \n MODULE ATOMS\n@@ -22,4 +28,20 @@ MODULE POTENTIAL_ENERGY\n USE ATOMS\n USE CONSTRAINT,         ONLY : ENERGY_CONSTRAINT\n END MODULE POTENTIAL_ENERGY\n-! { dg-final { cleanup-modules \"atoms constraint potential_energy\" } }\n+\n+MODULE P_CONSTRAINT\n+USE ATOMS, ONLY: NFREE\n+PRIVATE\n+PUBLIC :: ENERGY_CONSTRAINT\n+CONTAINS\n+   SUBROUTINE ENERGY_CONSTRAINT ( HESSIAN )\n+   REAL , DIMENSION(1:(3*NFREE*(3*NFREE+1))/2):: HESSIAN\n+   END SUBROUTINE ENERGY_CONSTRAINT\n+END MODULE P_CONSTRAINT\n+\n+MODULE P_POTENTIAL_ENERGY\n+USE ATOMS\n+USE CONSTRAINT,         ONLY : ENERGY_CONSTRAINT\n+END MODULE P_POTENTIAL_ENERGY\n+\n+! { dg-final { cleanup-modules \"atoms constraint potential_energy p_constraint p_potential_energy\" } }"}]}