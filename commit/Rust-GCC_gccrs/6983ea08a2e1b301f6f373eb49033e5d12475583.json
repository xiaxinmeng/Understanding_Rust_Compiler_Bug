{"sha": "6983ea08a2e1b301f6f373eb49033e5d12475583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk4M2VhMDhhMmUxYjMwMWY2ZjM3M2ViNDkwMzNlNWQxMjQ3NTU4Mw==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2004-09-03T23:12:38Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2004-09-03T23:12:38Z"}, "message": "Compile speed improvement.\n\n\t* parser.c (cp_lexer_print_token): Only define if ENABLE_CHECKING set.\n\tOtherwise define a stub macro that expands to nothing.\n\t(cp_lexer_debugging_p): Only define if ENABLE_CHECKING set.  Otherwise\n\tdefine a stub macro that expands to 0.\n\t(cp_lexer_start_debugging): Only define if ENABLE_CHECKING set.\n\t(cp_lexer_stop_debugging): Likewise.\n\t(cp_lexer_debug_stream): Only define if ENABLE_CHECKING set.  Otherwise\n\tdefine a stub macro that expands to NULL.\n\t(cp_lexer_new_main): Only set debugging_p if ENABLE_CHECKING set.\n\t(cp_lexer_new_from_tokens): Likewise.\n\nFrom-SVN: r87059", "tree": {"sha": "73c556621e0d71d58f121d9b67e7f8333bfceafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73c556621e0d71d58f121d9b67e7f8333bfceafb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6983ea08a2e1b301f6f373eb49033e5d12475583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6983ea08a2e1b301f6f373eb49033e5d12475583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6983ea08a2e1b301f6f373eb49033e5d12475583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6983ea08a2e1b301f6f373eb49033e5d12475583/comments", "author": null, "committer": null, "parents": [{"sha": "80d8221e0c34594db9939116db262200b4b7c242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d8221e0c34594db9939116db262200b4b7c242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d8221e0c34594db9939116db262200b4b7c242"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "ec6988c616299cb056e1a5c797aaec21ab4d4660", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6983ea08a2e1b301f6f373eb49033e5d12475583/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6983ea08a2e1b301f6f373eb49033e5d12475583/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6983ea08a2e1b301f6f373eb49033e5d12475583", "patch": "@@ -1,3 +1,16 @@\n+2004-0903  Matt Austern  <austern@apple.com>\n+\tCompile speed improvement.\n+\t* parser.c (cp_lexer_print_token): Only define if ENABLE_CHECKING set.\n+\tOtherwise define a stub macro that expands to nothing.\n+\t(cp_lexer_debugging_p): Only define if ENABLE_CHECKING set.  Otherwise\n+\tdefine a stub macro that expands to 0.\n+\t(cp_lexer_start_debugging): Only define if ENABLE_CHECKING set.\n+\t(cp_lexer_stop_debugging): Likewise.\n+\t(cp_lexer_debug_stream): Only define if ENABLE_CHECKING set.  Otherwise\n+\tdefine a stub macro that expands to NULL.\n+\t(cp_lexer_new_main): Only set debugging_p if ENABLE_CHECKING set.\n+\t(cp_lexer_new_from_tokens): Likewise.\n+\t\n 2004-09-03  Jan Hubicka  <jh@suse.cz>\n \n \t* decl.c (finish_function): Clean out pointers we no longer need."}, {"sha": "c3f741dff99200c4e7a9b3c7350bf70fc1df26e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6983ea08a2e1b301f6f373eb49033e5d12475583/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6983ea08a2e1b301f6f373eb49033e5d12475583/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6983ea08a2e1b301f6f373eb49033e5d12475583", "patch": "@@ -256,6 +256,7 @@ static void cp_lexer_rollback_tokens\n   (cp_lexer *);\n static inline void cp_lexer_set_source_position_from_token\n   (cp_lexer *, const cp_token *);\n+#ifdef ENABLE_CHECKING\n static void cp_lexer_print_token\n   (FILE *, cp_token *);\n static inline bool cp_lexer_debugging_p\n@@ -264,6 +265,11 @@ static void cp_lexer_start_debugging\n   (cp_lexer *) ATTRIBUTE_UNUSED;\n static void cp_lexer_stop_debugging\n   (cp_lexer *) ATTRIBUTE_UNUSED;\n+#else\n+#define cp_lexer_debug_stream NULL\n+#define cp_lexer_print_token(str, tok)\n+#define cp_lexer_debugging_p(lexer) 0\n+#endif /* ENABLE_CHECKING */\n \n /* Manifest constants.  */\n \n@@ -292,8 +298,10 @@ static void cp_lexer_stop_debugging\n \n /* Variables.  */\n \n+#ifdef ENABLE_CHECKING\n /* The stream to which debugging output should be written.  */\n static FILE *cp_lexer_debug_stream;\n+#endif /* ENABLE_CHECKING */\n \n /* Create a new main C++ lexer, the lexer that gets tokens from the\n    preprocessor.  */\n@@ -332,8 +340,10 @@ cp_lexer_new_main (void)\n   /* Create the STRINGS array.  */\n   VARRAY_TREE_INIT (lexer->string_tokens, 32, \"strings\");\n \n+#ifdef ENABLE_CHECKING  \n   /* Assume we are not debugging.  */\n   lexer->debugging_p = false;\n+#endif /* ENABLE_CHECKING */\n \n   return lexer;\n }\n@@ -383,20 +393,26 @@ cp_lexer_new_from_tokens (cp_token_cache *tokens)\n   /* Create the STRINGS array.  */\n   VARRAY_TREE_INIT (lexer->string_tokens, 32, \"strings\");\n \n+#ifdef ENABLE_CHECKING\n   /* Assume we are not debugging.  */\n   lexer->debugging_p = false;\n+#endif /* ENABLE_CHECKING */\n \n   return lexer;\n }\n \n /* Returns nonzero if debugging information should be output.  */\n \n+#ifdef ENABLE_CHECKING\n+\n static inline bool\n cp_lexer_debugging_p (cp_lexer *lexer)\n {\n   return lexer->debugging_p;\n }\n \n+#endif /* ENABLE_CHECKING */\n+\n /* Set the current source position from the information stored in\n    TOKEN.  */\n \n@@ -910,6 +926,8 @@ cp_lexer_rollback_tokens (cp_lexer* lexer)\n \n /* Print a representation of the TOKEN on the STREAM.  */\n \n+#ifdef ENABLE_CHECKING\n+\n static void\n cp_lexer_print_token (FILE * stream, cp_token* token)\n {\n@@ -994,6 +1012,8 @@ cp_lexer_stop_debugging (cp_lexer* lexer)\n   --lexer->debugging_p;\n }\n \n+#endif /* ENABLE_CHECKING */\n+\n \f\n /* Decl-specifiers.  */\n "}]}