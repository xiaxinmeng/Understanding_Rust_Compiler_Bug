{"sha": "2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4NmRlNTdlMTZiMmQyYmIyOTRkZDFjMDdjMmNhYjVjYTNmOTVlMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-06T10:35:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-06T10:35:20Z"}, "message": "fold-const.c (fold_ternary_loc): Also fold non-constant vector CONSTRUCTORs.\n\n2011-10-06  Richard Guenther  <rguenther@suse.de>\n\n\t* fold-const.c (fold_ternary_loc): Also fold non-constant\n\tvector CONSTRUCTORs.  Make more efficient.\n\t* tree-ssa-dom.c (cprop_operand): Don't handle virtual operands.\n\t(cprop_into_stmt): Don't propagate into virtual operands.\n\t(optimize_stmt): Really dump original statement.\n\nFrom-SVN: r179598", "tree": {"sha": "c1f39c24e478331f15459fbfa9e8bed4f8f41d72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f39c24e478331f15459fbfa9e8bed4f8f41d72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2/comments", "author": null, "committer": null, "parents": [{"sha": "69c2fbf1ec048f4b6e98d87c9eac15a2f3517fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c2fbf1ec048f4b6e98d87c9eac15a2f3517fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c2fbf1ec048f4b6e98d87c9eac15a2f3517fae"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "8bfc91aae4f90871bde6e6b92182123fcd8ab7ff", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=2a86de57e16b2d2bb294dd1c07c2cab5ca3f95e2", "patch": "@@ -1995,17 +1995,6 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n   val = SSA_NAME_VALUE (op);\n   if (val && val != op)\n     {\n-      /* Do not change the base variable in the virtual operand\n-\t tables.  That would make it impossible to reconstruct\n-\t the renamed virtual operand if we later modify this\n-\t statement.  Also only allow the new value to be an SSA_NAME\n-\t for propagation into virtual operands.  */\n-      if (!is_gimple_reg (op)\n-\t  && (TREE_CODE (val) != SSA_NAME\n-\t      || is_gimple_reg (val)\n-\t      || get_virtual_var (val) != get_virtual_var (op)))\n-\treturn;\n-\n       /* Do not replace hard register operands in asm statements.  */\n       if (gimple_code (stmt) == GIMPLE_ASM\n \t  && !may_propagate_copy_into_asm (op))\n@@ -2076,11 +2065,8 @@ cprop_into_stmt (gimple stmt)\n   use_operand_p op_p;\n   ssa_op_iter iter;\n \n-  FOR_EACH_SSA_USE_OPERAND (op_p, stmt, iter, SSA_OP_ALL_USES)\n-    {\n-      if (TREE_CODE (USE_FROM_PTR (op_p)) == SSA_NAME)\n-\tcprop_operand (stmt, op_p);\n-    }\n+  FOR_EACH_SSA_USE_OPERAND (op_p, stmt, iter, SSA_OP_USE)\n+    cprop_operand (stmt, op_p);\n }\n \n /* Optimize the statement pointed to by iterator SI.\n@@ -2107,18 +2093,18 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \n   old_stmt = stmt = gsi_stmt (si);\n \n-  if (gimple_code (stmt) == GIMPLE_COND)\n-    canonicalize_comparison (stmt);\n-\n-  update_stmt_if_modified (stmt);\n-  opt_stats.num_stmts++;\n-\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Optimizing statement \");\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n \n+  if (gimple_code (stmt) == GIMPLE_COND)\n+    canonicalize_comparison (stmt);\n+\n+  update_stmt_if_modified (stmt);\n+  opt_stats.num_stmts++;\n+\n   /* Const/copy propagate into USES, VUSES and the RHS of VDEFs.  */\n   cprop_into_stmt (stmt);\n "}]}