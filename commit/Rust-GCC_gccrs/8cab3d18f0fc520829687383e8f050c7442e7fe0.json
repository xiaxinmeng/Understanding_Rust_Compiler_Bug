{"sha": "8cab3d18f0fc520829687383e8f050c7442e7fe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhYjNkMThmMGZjNTIwODI5Njg3MzgzZThmMDUwYzc0NDJlN2ZlMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-22T15:03:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-22T15:03:11Z"}, "message": "Move allocator in std::string and RB tree move constructors\n\n\tPR libstdc++/71964\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::_Alloc_hider(pointer, _Alloc&&)): Add constructor.\n\t* include/bits/stl_tree.h (_Rb_tree(_Rb_tree&&)): Move allocator.\n\t* testsuite/21_strings/basic_string/allocator/71964.cc: New test.\n\t* testsuite/23_containers/set/allocator/71964.cc: New test.\n\nFrom-SVN: r238647", "tree": {"sha": "ad44efb5939aae18b013483305b9eec60adca5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad44efb5939aae18b013483305b9eec60adca5e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cab3d18f0fc520829687383e8f050c7442e7fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cab3d18f0fc520829687383e8f050c7442e7fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cab3d18f0fc520829687383e8f050c7442e7fe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cab3d18f0fc520829687383e8f050c7442e7fe0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58b3986e3458ed69301e4128fd704598ad01cb89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b3986e3458ed69301e4128fd704598ad01cb89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b3986e3458ed69301e4128fd704598ad01cb89"}], "stats": {"total": 163, "additions": 162, "deletions": 1}, "files": [{"sha": "3f5d6b0781479d7b89f49ef97c7226a1995a5748", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8cab3d18f0fc520829687383e8f050c7442e7fe0", "patch": "@@ -1,5 +1,12 @@\n 2016-07-22  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/71964\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::_Alloc_hider(pointer, _Alloc&&)): Add constructor.\n+\t* include/bits/stl_tree.h (_Rb_tree(_Rb_tree&&)): Move allocator.\n+\t* testsuite/21_strings/basic_string/allocator/71964.cc: New test.\n+\t* testsuite/23_containers/set/allocator/71964.cc: New test.\n+\n \t* testsuite/lib/libstdc++.exp (check_v3_target_namedlocale): Use\n \tdelete[] instead of delete.\n "}, {"sha": "58d6e4d4e3afc252900740a568edb35c82857be2", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=8cab3d18f0fc520829687383e8f050c7442e7fe0", "patch": "@@ -106,8 +106,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n       struct _Alloc_hider : allocator_type // TODO check __is_final\n       {\n+#if __cplusplus < 201103L\n \t_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())\n \t: allocator_type(__a), _M_p(__dat) { }\n+#else\n+\t_Alloc_hider(pointer __dat, const _Alloc& __a)\n+\t: allocator_type(__a), _M_p(__dat) { }\n+\n+\t_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())\n+\t: allocator_type(std::move(__a)), _M_p(__dat) { }\n+#endif\n \n \tpointer _M_p; // The actual data.\n       };"}, {"sha": "7a9a4a6c277f214e415a7bcb46b032c522b3a5bd", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=8cab3d18f0fc520829687383e8f050c7442e7fe0", "patch": "@@ -851,7 +851,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       _Rb_tree(_Rb_tree&& __x)\n-      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())\n+      : _M_impl(__x._M_impl._M_key_compare,\n+\t\tstd::move(__x._M_get_Node_allocator()))\n       {\n \tif (__x._M_root() != 0)\n \t  _M_move_data(__x, std::true_type());"}, {"sha": "ebb66cfc7bfdf21b839959592697c6d7224a49f1", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/71964.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2F71964.cc?ref=8cab3d18f0fc520829687383e8f050c7442e7fe0", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  struct mv_allocator\n+  {\n+    using value_type = T;\n+    using size_type = unsigned;\n+\n+    mv_allocator()\n+    : moved_to(false), moved_from(false) { }\n+\n+    template<typename U>\n+      mv_allocator(const mv_allocator<U> & a)\n+      : moved_to(a.moved_to), moved_from(a.moved_from) { }\n+\n+    mv_allocator(const mv_allocator &) = default;\n+\n+    mv_allocator(mv_allocator && a) noexcept : moved_to(true)\n+    {\n+      a.moved_from = true;\n+    }\n+\n+    T* allocate(unsigned n) { return std::allocator<T>{}.allcoate(n); }\n+    void deallocate(T* p, unsigned n) { std::allocator<T>{}.deallocate(p, n); }\n+\n+    bool moved_to;\n+    bool moved_from;\n+  };\n+\n+template<typename T, typename U>\n+bool\n+operator==(const mv_allocator<T>&, const mv_allocator<U>&) { return true; }\n+\n+template<typename T, typename U>\n+bool\n+operator!=(const mv_allocator<T>&, const mv_allocator<U>&) { return false; }\n+\n+void\n+test01()\n+{\n+  // COW strings don't support C++11 allocators\n+#if _GLIBCXX_USE_CXX11_ABI\n+  std::basic_string<char, std::char_traits<char>, mv_allocator<char>> s;\n+  auto t = std::move(s);\n+  VERIFY( s.get_allocator().moved_from );\n+  VERIFY( t.get_allocator().moved_to );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "f13828feffd051d51f4a7161027a3c8366a28dd9", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/71964.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2F71964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cab3d18f0fc520829687383e8f050c7442e7fe0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2F71964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2F71964.cc?ref=8cab3d18f0fc520829687383e8f050c7442e7fe0", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  struct mv_allocator\n+  {\n+    using value_type = T;\n+    using size_type = unsigned;\n+\n+    mv_allocator()\n+    : moved_to(false), moved_from(false) { }\n+\n+    template<typename U>\n+      mv_allocator(const mv_allocator<U> & a)\n+      : moved_to(a.moved_to), moved_from(a.moved_from) { }\n+\n+    mv_allocator(const mv_allocator &) = default;\n+\n+    mv_allocator(mv_allocator && a) noexcept : moved_to(true)\n+    {\n+      a.moved_from = true;\n+    }\n+\n+    T* allocate(unsigned n) { return std::allocator<T>{}.allcoate(n); }\n+    void deallocate(T* p, unsigned n) { std::allocator<T>{}.deallocate(p, n); }\n+\n+    bool moved_to;\n+    bool moved_from;\n+  };\n+\n+template<typename T, typename U>\n+bool\n+operator==(const mv_allocator<T>&, const mv_allocator<U>&) { return true; }\n+\n+template<typename T, typename U>\n+bool\n+operator!=(const mv_allocator<T>&, const mv_allocator<U>&) { return false; }\n+\n+void\n+test01()\n+{\n+  std::set<int, std::less<int>, mv_allocator<int>> s;\n+  auto t = std::move(s);\n+  VERIFY( s.get_allocator().moved_from );\n+  VERIFY( t.get_allocator().moved_to );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}