{"sha": "343f01f4cde17003b6721722361e190bd6cffd15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQzZjAxZjRjZGUxNzAwM2I2NzIxNzIyMzYxZTE5MGJkNmNmZmQxNQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-24T13:20:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-24T13:20:14Z"}, "message": "libstdc++: Improve simd fixed_size codegen\n\nSometimes fixed_size objects will get unnecessarily copied on the stack.\nThe simd implementation should never pass _SimdTuple by value to avoid\nrequiring the optimizer to see through these copies.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd_converter.h\n\t(_SimdConverter::operator()): Pass _SimdTuple by const-ref.\n\t* include/experimental/bits/simd_fixed_size.h\n\t(_GLIBCXX_SIMD_FIXED_OP): Pass binary operator _SimdTuple\n\targuments by const-ref.\n\t(_S_masked_unary): Pass _SimdTuple by const-ref.", "tree": {"sha": "8341fe8a94a5fefef4ee3f552363b07326a92fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8341fe8a94a5fefef4ee3f552363b07326a92fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/343f01f4cde17003b6721722361e190bd6cffd15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343f01f4cde17003b6721722361e190bd6cffd15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343f01f4cde17003b6721722361e190bd6cffd15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343f01f4cde17003b6721722361e190bd6cffd15/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb45cb816e3b808b29f05a934f6012a92d0c261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb45cb816e3b808b29f05a934f6012a92d0c261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb45cb816e3b808b29f05a934f6012a92d0c261"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "11999df25e49575799b22797b17f4d521b76ada7", "filename": "libstdc++-v3/include/experimental/bits/simd_converter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343f01f4cde17003b6721722361e190bd6cffd15/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_converter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343f01f4cde17003b6721722361e190bd6cffd15/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_converter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_converter.h?ref=343f01f4cde17003b6721722361e190bd6cffd15", "patch": "@@ -316,7 +316,7 @@ template <typename _From, int _Np, typename _To, typename _Ap>\n \n     _GLIBCXX_SIMD_INTRINSIC constexpr\n       typename _SimdTraits<_To, _Ap>::_SimdMember\n-      operator()(_Arg __x) const noexcept\n+      operator()(const _Arg& __x) const noexcept\n     {\n       if constexpr (_Arg::_S_tuple_size == 1)\n \treturn __vector_convert<__vector_type_t<_To, _Np>>(__x.first);"}, {"sha": "dc2fb90b9b2e5cb69b10838cf621d5cdb27a42b1", "filename": "libstdc++-v3/include/experimental/bits/simd_fixed_size.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/343f01f4cde17003b6721722361e190bd6cffd15/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/343f01f4cde17003b6721722361e190bd6cffd15/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd_fixed_size.h?ref=343f01f4cde17003b6721722361e190bd6cffd15", "patch": "@@ -1480,7 +1480,7 @@ template <int _Np>\n #define _GLIBCXX_SIMD_FIXED_OP(name_, op_)                                     \\\n     template <typename _Tp, typename... _As>                                   \\\n       static inline constexpr _SimdTuple<_Tp, _As...> name_(                   \\\n-\tconst _SimdTuple<_Tp, _As...> __x, const _SimdTuple<_Tp, _As...> __y)  \\\n+\tconst _SimdTuple<_Tp, _As...>& __x, const _SimdTuple<_Tp, _As...>& __y)\\\n       {                                                                        \\\n \treturn __x._M_apply_per_chunk(                                         \\\n \t  [](auto __impl, auto __xx, auto __yy) constexpr {                    \\\n@@ -1780,8 +1780,7 @@ template <int _Np>\n     // _S_masked_unary {{{2\n     template <template <typename> class _Op, typename _Tp, typename... _As>\n       static inline _SimdTuple<_Tp, _As...>\n-      _S_masked_unary(const _MaskMember __bits,\n-\t\t      const _SimdTuple<_Tp, _As...> __v) // TODO: const-ref __v?\n+      _S_masked_unary(const _MaskMember __bits, const _SimdTuple<_Tp, _As...>& __v)\n       {\n \treturn __v._M_apply_wrapped([&__bits](auto __meta,\n \t\t\t\t\t      auto __native) constexpr {"}]}