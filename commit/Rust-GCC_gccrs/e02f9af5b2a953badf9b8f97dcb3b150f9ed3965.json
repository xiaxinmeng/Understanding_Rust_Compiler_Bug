{"sha": "e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAyZjlhZjViMmE5NTNiYWRmOWI4Zjk3ZGNiM2IxNTBmOWVkMzk2NQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-01-13T16:17:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-05T08:19:05Z"}, "message": "[Ada] Detect unchecked union subcomponents in nested variant parts\n\ngcc/ada/\n\n\t* exp_ch4.adb (Has_Unconstrained_UU_Component): Rewrite to\n\tfollow the Ada RM grammar.", "tree": {"sha": "1e0779cfa0467f23c1e081ea8f6be92bd95087b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e0779cfa0467f23c1e081ea8f6be92bd95087b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3870f3bcf02c780d73639080d5195f4be4ef1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3870f3bcf02c780d73639080d5195f4be4ef1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3870f3bcf02c780d73639080d5195f4be4ef1ac"}], "stats": {"total": 184, "additions": 89, "deletions": 95}, "files": [{"sha": "5093bb156d2da6b44dc4212ee116b7fd2977af90", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 89, "deletions": 95, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e02f9af5b2a953badf9b8f97dcb3b150f9ed3965/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e02f9af5b2a953badf9b8f97dcb3b150f9ed3965", "patch": "@@ -8119,130 +8119,124 @@ package body Exp_Ch4 is\n       function Has_Unconstrained_UU_Component\n         (Typ : Entity_Id) return Boolean\n       is\n-         Tdef  : constant Node_Id :=\n-                   Type_Definition (Declaration_Node (Base_Type (Typ)));\n-         Clist : Node_Id;\n-         Vpart : Node_Id;\n-\n-         function Component_Is_Unconstrained_UU\n-           (Comp : Node_Id) return Boolean;\n-         --  Determines whether the subtype of the component is an\n-         --  unconstrained Unchecked_Union.\n-\n-         function Variant_Is_Unconstrained_UU\n-           (Variant : Node_Id) return Boolean;\n-         --  Determines whether a component of the variant has an unconstrained\n-         --  Unchecked_Union subtype.\n-\n-         -----------------------------------\n-         -- Component_Is_Unconstrained_UU --\n-         -----------------------------------\n-\n-         function Component_Is_Unconstrained_UU\n-           (Comp : Node_Id) return Boolean\n-         is\n-         begin\n-            if Nkind (Comp) /= N_Component_Declaration then\n-               return False;\n-            end if;\n+         function Unconstrained_UU_In_Component_Declaration\n+           (N : Node_Id) return Boolean;\n \n-            declare\n-               Sindic : constant Node_Id :=\n-                          Subtype_Indication (Component_Definition (Comp));\n+         function Unconstrained_UU_In_Component_Items\n+           (L : List_Id) return Boolean;\n \n-            begin\n-               --  Unconstrained nominal type. In the case of a constraint\n-               --  present, the node kind would have been N_Subtype_Indication.\n+         function Unconstrained_UU_In_Component_List\n+           (N : Node_Id) return Boolean;\n \n-               if Nkind (Sindic) in N_Expanded_Name | N_Identifier then\n-                  return Is_Unchecked_Union (Base_Type (Etype (Sindic)));\n-               end if;\n-\n-               return False;\n-            end;\n-         end Component_Is_Unconstrained_UU;\n+         function Unconstrained_UU_In_Variant_Part\n+           (N : Node_Id) return Boolean;\n+         --  A family of routines that determine whether a particular construct\n+         --  of a record type definition contains a subcomponent of an\n+         --  unchecked union type whose nominal subtype is unconstrained.\n+         --\n+         --  Individual routines correspond to the production rules of the Ada\n+         --  grammar, as described in the Ada RM (P).\n \n-         ---------------------------------\n-         -- Variant_Is_Unconstrained_UU --\n-         ---------------------------------\n+         -----------------------------------------------\n+         -- Unconstrained_UU_In_Component_Declaration --\n+         -----------------------------------------------\n \n-         function Variant_Is_Unconstrained_UU\n-           (Variant : Node_Id) return Boolean\n+         function Unconstrained_UU_In_Component_Declaration\n+           (N : Node_Id) return Boolean\n          is\n-            Clist : constant Node_Id := Component_List (Variant);\n-            Comp  : Node_Id := First (Component_Items (Clist));\n+            pragma Assert (Nkind (N) = N_Component_Declaration);\n \n+            Sindic : constant Node_Id :=\n+                       Subtype_Indication (Component_Definition (N));\n          begin\n-            --  We only need to test one component\n+            --  Unconstrained nominal type. In the case of a constraint\n+            --  present, the node kind would have been N_Subtype_Indication.\n+\n+            return Nkind (Sindic) in N_Expanded_Name | N_Identifier\n+              and then Is_Unchecked_Union (Base_Type (Etype (Sindic)));\n+         end Unconstrained_UU_In_Component_Declaration;\n+\n+         -----------------------------------------\n+         -- Unconstrained_UU_In_Component_Items --\n+         -----------------------------------------\n \n-            while Present (Comp) loop\n-               if Component_Is_Unconstrained_UU (Comp) then\n+         function Unconstrained_UU_In_Component_Items\n+           (L : List_Id) return Boolean\n+         is\n+            N : Node_Id := First (L);\n+         begin\n+            while Present (N) loop\n+               if Nkind (N) = N_Component_Declaration\n+                 and then Unconstrained_UU_In_Component_Declaration (N)\n+               then\n                   return True;\n                end if;\n \n-               Next (Comp);\n+               Next (N);\n             end loop;\n \n-            --  None of the components withing the variant were of\n-            --  unconstrained Unchecked_Union type.\n-\n             return False;\n-         end Variant_Is_Unconstrained_UU;\n+         end Unconstrained_UU_In_Component_Items;\n \n-      --  Start of processing for Has_Unconstrained_UU_Component\n+         ----------------------------------------\n+         -- Unconstrained_UU_In_Component_List --\n+         ----------------------------------------\n \n-      begin\n-         if Null_Present (Tdef) then\n-            return False;\n-         end if;\n-\n-         Clist := Component_List (Tdef);\n-         Vpart := Variant_Part (Clist);\n-\n-         --  Inspect available components\n-\n-         if Present (Component_Items (Clist)) then\n-            declare\n-               Comp : Node_Id := First (Component_Items (Clist));\n+         function Unconstrained_UU_In_Component_List\n+           (N : Node_Id) return Boolean\n+         is\n+            pragma Assert (Nkind (N) = N_Component_List);\n \n-            begin\n-               while Present (Comp) loop\n+            Optional_Variant_Part : Node_Id;\n+         begin\n+            if Unconstrained_UU_In_Component_Items (Component_Items (N)) then\n+               return True;\n+            end if;\n \n-                  --  One component is sufficient\n+            Optional_Variant_Part := Variant_Part (N);\n \n-                  if Component_Is_Unconstrained_UU (Comp) then\n-                     return True;\n-                  end if;\n+            return\n+              Present (Optional_Variant_Part)\n+              and then\n+                Unconstrained_UU_In_Variant_Part (Optional_Variant_Part);\n+         end Unconstrained_UU_In_Component_List;\n \n-                  Next (Comp);\n-               end loop;\n-            end;\n-         end if;\n+         --------------------------------------\n+         -- Unconstrained_UU_In_Variant_Part --\n+         --------------------------------------\n \n-         --  Inspect available components withing variants\n+         function Unconstrained_UU_In_Variant_Part\n+           (N : Node_Id) return Boolean\n+         is\n+            pragma Assert (Nkind (N) = N_Variant_Part);\n \n-         if Present (Vpart) then\n-            declare\n-               Variant : Node_Id := First (Variants (Vpart));\n+            Variant : Node_Id := First (Variants (N));\n+         begin\n+            loop\n+               if Unconstrained_UU_In_Component_List (Component_List (Variant))\n+               then\n+                  return True;\n+               end if;\n \n-            begin\n-               while Present (Variant) loop\n+               Next (Variant);\n+               exit when No (Variant);\n+            end loop;\n \n-                  --  One component within a variant is sufficient\n+            return False;\n+         end Unconstrained_UU_In_Variant_Part;\n \n-                  if Variant_Is_Unconstrained_UU (Variant) then\n-                     return True;\n-                  end if;\n+         Typ_Def : constant Node_Id :=\n+           Type_Definition (Declaration_Node (Base_Type (Typ)));\n \n-                  Next (Variant);\n-               end loop;\n-            end;\n-         end if;\n+         Optional_Component_List : constant Node_Id :=\n+           Component_List (Typ_Def);\n \n-         --  Neither the available components, nor the components inside the\n-         --  variant parts were of an unconstrained Unchecked_Union subtype.\n+      --  Start of processing for Has_Unconstrained_UU_Component\n \n-         return False;\n+      begin\n+         return Present (Optional_Component_List)\n+           and then\n+             Unconstrained_UU_In_Component_List (Optional_Component_List);\n       end Has_Unconstrained_UU_Component;\n \n       --  Local variables"}]}