{"sha": "3413f632ec84dca6489fe1ca47545b5543c2a1d5", "node_id": "C_kwDOANBUbNoAKDM0MTNmNjMyZWM4NGRjYTY0ODlmZTFjYTQ3NTQ1YjU1NDNjMmExZDU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-28T08:52:29Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-31T07:42:26Z"}, "message": "ast_fragment: Add take_type_fragment() method\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "b0df64ca7f59bfd3af6b504f75ba5ceeb3a5a4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0df64ca7f59bfd3af6b504f75ba5ceeb3a5a4bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3413f632ec84dca6489fe1ca47545b5543c2a1d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3413f632ec84dca6489fe1ca47545b5543c2a1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3413f632ec84dca6489fe1ca47545b5543c2a1d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3413f632ec84dca6489fe1ca47545b5543c2a1d5/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6bbf1fa724bada60173ea93c5b604cee9c66da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bbf1fa724bada60173ea93c5b604cee9c66da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bbf1fa724bada60173ea93c5b604cee9c66da0"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "5817a0e8f8466040a5a9c3e2f5d6ad0364d92203", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3413f632ec84dca6489fe1ca47545b5543c2a1d5/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3413f632ec84dca6489fe1ca47545b5543c2a1d5/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=3413f632ec84dca6489fe1ca47545b5543c2a1d5", "patch": "@@ -1827,6 +1827,18 @@ class ASTFragment\n   std::vector<SingleASTNode> nodes;\n   bool fragment_is_error;\n \n+  /**\n+   * We need to make a special case for Expression and Type fragments as only\n+   * one Node will be extracted from the `nodes` vector\n+   */\n+\n+  bool is_single_fragment () const { return nodes.size () == 1; }\n+\n+  bool is_single_fragment_kind (SingleASTNode::NodeType kind) const\n+  {\n+    return is_single_fragment () && nodes[0].get_kind () == kind;\n+  }\n+\n public:\n   ASTFragment (std::vector<SingleASTNode> nodes, bool fragment_is_error = false)\n     : nodes (std::move (nodes)), fragment_is_error (fragment_is_error)\n@@ -1867,21 +1879,16 @@ class ASTFragment\n \n   bool should_expand () const { return !is_error () && !nodes.empty (); }\n \n-  /**\n-   * We need to make a special case for Expression fragments as only one\n-   * Node will be extracted from the `nodes` vector\n-   */\n-\n-  bool is_expression_fragment () const\n+  std::unique_ptr<Expr> take_expression_fragment ()\n   {\n-    return nodes.size () == 1\n-\t   && nodes[0].get_kind () == SingleASTNode::NodeType::EXPRESSION;\n+    rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::EXPRESSION));\n+    return nodes[0].take_expr ();\n   }\n \n-  std::unique_ptr<Expr> take_expression_fragment ()\n+  std::unique_ptr<Type> take_type_fragment ()\n   {\n-    rust_assert (is_expression_fragment ());\n-    return nodes[0].take_expr ();\n+    rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::TYPE));\n+    return nodes[0].take_type ();\n   }\n \n   void accept_vis (ASTVisitor &vis)"}]}