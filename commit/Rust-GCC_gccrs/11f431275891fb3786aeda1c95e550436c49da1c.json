{"sha": "11f431275891fb3786aeda1c95e550436c49da1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmNDMxMjc1ODkxZmIzNzg2YWVkYTFjOTVlNTUwNDM2YzQ5ZGExYw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2002-12-20T23:24:39Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-12-20T23:24:39Z"}, "message": "pa-linux.h (TARGET_HAS_STUBS_AND_ELF_SECTIONS): Delete define.\n\n\t* pa-linux.h (TARGET_HAS_STUBS_AND_ELF_SECTIONS): Delete define.\n\t* pa32-linux.h (FUNCTION_OK_FOR_SIBCALL): Delete define.\n\t* pa.c (pa_function_ok_for_sibcall): Allow non indirect sibcalls on\n\tTARGET_ELF32.  Add comment on sibcall issues for TARGET_64BIT.\n\nFrom-SVN: r60377", "tree": {"sha": "9513667b50e316edb92635496711edf57728bbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9513667b50e316edb92635496711edf57728bbaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f431275891fb3786aeda1c95e550436c49da1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f431275891fb3786aeda1c95e550436c49da1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f431275891fb3786aeda1c95e550436c49da1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f431275891fb3786aeda1c95e550436c49da1c/comments", "author": null, "committer": null, "parents": [{"sha": "f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d2de4d0dc6eb961d12eb1888e387dfbdf33ae4"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "ff855b7439e8af8387bdacd5de813c9311e4e5eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11f431275891fb3786aeda1c95e550436c49da1c", "patch": "@@ -1,3 +1,10 @@\n+2002-12-20  John David Anglin  <dave.anglin@nrc.gc.ca>\n+\n+\t* pa-linux.h (TARGET_HAS_STUBS_AND_ELF_SECTIONS): Delete define.\n+\t* pa32-linux.h (FUNCTION_OK_FOR_SIBCALL): Delete define.\n+\t* pa.c (pa_function_ok_for_sibcall): Allow non indirect sibcalls on\n+\tTARGET_ELF32.  Add comment on sibcall issues for TARGET_64BIT.\n+\n 2002-12-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300-protos.h: Add prototypes for"}, {"sha": "b2c0998168905f4afb9546d062d07678e0b00925", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=11f431275891fb3786aeda1c95e550436c49da1c", "patch": "@@ -167,11 +167,6 @@ Boston, MA 02111-1307, USA.  */\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \".globl \"\n \n-/* This definition is used inside pa.c to disable all\n-   sibcall optimization, because sibcalls, stubs and\n-   elf sections don't play well.  */\n-#define TARGET_HAS_STUBS_AND_ELF_SECTIONS 1\n-\n /* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n    labels in a function declaration (since pa.c seems determined to do\n    it differently)  */"}, {"sha": "651fc96eb37101887bec604339c6697bb35d7d13", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=11f431275891fb3786aeda1c95e550436c49da1c", "patch": "@@ -6878,14 +6878,26 @@ pa_function_ok_for_sibcall (decl, exp)\n      tree decl;\n      tree exp ATTRIBUTE_UNUSED;\n {\n-#ifdef TARGET_HAS_STUBS_AND_ELF_SECTIONS\n-  /* Sibcalls, stubs, and elf sections don't play well.  */\n-  return false;\n-#endif\n+  /* Sibcalls are ok for TARGET_ELF32 as along as the linker is used in\n+     single subspace mode and the call is not indirect.  As far as I know,\n+     there is no operating system support for the multiple subspace mode.\n+     It might be possible to support indirect calls if we didn't use\n+     $$dyncall (see the indirect sequence generated in output_call).  */\n+  if (TARGET_ELF32)\n+    return (decl != NULL_TREE);\n+\n+  /* Sibcalls are not ok because the arg pointer register is not a fixed\n+     register.  This prevents the sibcall optimization from occuring.  In\n+     addition, there are problems with stub placement using GNU ld.  This\n+     is because a normal sibcall branch uses a 17-bit relocation while\n+     a regular call branch uses a 22-bit relocation.  As a result, more\n+     care needs to be taken in the placement of long-branch stubs.  */\n+  if (TARGET_64BIT)\n+    return false;\n+\n   return (decl\n-\t  && ! TARGET_PORTABLE_RUNTIME\n-\t  && ! TARGET_64BIT\n-\t  && ! TREE_PUBLIC (decl));\n+\t  && !TARGET_PORTABLE_RUNTIME\n+\t  && !TREE_PUBLIC (decl));\n }\n \n /* Returns 1 if the 6 operands specified in OPERANDS are suitable for"}, {"sha": "c8e7b37012b041833e22115ae0917745870199ee", "filename": "gcc/config/pa/pa32-linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f431275891fb3786aeda1c95e550436c49da1c/gcc%2Fconfig%2Fpa%2Fpa32-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-linux.h?ref=11f431275891fb3786aeda1c95e550436c49da1c", "patch": "@@ -22,14 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_ELF32\n #define TARGET_ELF32 1\n \n-/* Sibcalls are ok when ld is used in single subspace mode.  The\n-   multiple subspace mode is not compatible with sibcalls to external\n-   functions because the linker generated stubs store the return\n-   pointer into the frame.  This target does not need multiple\n-   subspace stubs, so we allow sibcalls to all functions.  */\n-#undef FUNCTION_OK_FOR_SIBCALL\n-#define FUNCTION_OK_FOR_SIBCALL(DECL) 1\n-\n /* The libcall __canonicalize_funcptr_for_compare is referenced in\n    crtend.o and the reference isn't resolved in objects that don't\n    compare function pointers.  Thus, we need to play games to provide"}]}