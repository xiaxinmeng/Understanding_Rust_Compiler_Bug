{"sha": "6b4c99cc92242903c81a7168d467269197955269", "node_id": "C_kwDOANBUbNoAKDZiNGM5OWNjOTIyNDI5MDNjODFhNzE2OGQ0NjcyNjkxOTc5NTUyNjk", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2021-12-21T07:49:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:28Z"}, "message": "[Ada] Remove unused parameter from __gnat_kill\n\nRemove close parameter from __gnat_kill because it is not used in\nimplementation.\n\ngcc/ada/\n\n\t* adaint.c (__gnat_kill): Remove close parameter.\n\t(__gnat_killprocesstree): Do not provide close parameter on call\n\tto __gnat_kill.\n\t* libgnat/g-expect.adb (Kill): Remove Close parameter.\n\t(Close): Do not provide Close parameter on call to Kill.\n\t(Send_Signal): Do not provide Close parameter on call to Kill.\n\t* libgnat/s-os_lib.adb (Kill): Do not provide close parameter on\n\tcall to __gnat_kill.", "tree": {"sha": "fee457a2a69d662a2b8343cd957b90b7a1a894b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee457a2a69d662a2b8343cd957b90b7a1a894b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b4c99cc92242903c81a7168d467269197955269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4c99cc92242903c81a7168d467269197955269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b4c99cc92242903c81a7168d467269197955269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4c99cc92242903c81a7168d467269197955269/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6f7575c153e7036152002bb7b58166762592f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6f7575c153e7036152002bb7b58166762592f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6f7575c153e7036152002bb7b58166762592f1"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2ae4dedeb2b73dd7f2d4cb464f2ea2113f4006c5", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4c99cc92242903c81a7168d467269197955269/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4c99cc92242903c81a7168d467269197955269/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=6b4c99cc92242903c81a7168d467269197955269", "patch": "@@ -3556,7 +3556,7 @@ __gnat_get_executable_load_address (void)\n }\n \n void\n-__gnat_kill (int pid, int sig, int close ATTRIBUTE_UNUSED)\n+__gnat_kill (int pid, int sig)\n {\n #if defined(_WIN32)\n   HANDLE h;\n@@ -3595,7 +3595,7 @@ void __gnat_killprocesstree (int pid, int sig_num)\n \n   if (hSnap == INVALID_HANDLE_VALUE)\n     {\n-      __gnat_kill (pid, sig_num, 1);\n+      __gnat_kill (pid, sig_num);\n       return;\n     }\n \n@@ -3618,7 +3618,7 @@ void __gnat_killprocesstree (int pid, int sig_num)\n \n   /* kill process */\n \n-  __gnat_kill (pid, sig_num, 1);\n+  __gnat_kill (pid, sig_num);\n \n #elif defined (__vxworks)\n   /* not implemented */\n@@ -3635,7 +3635,7 @@ void __gnat_killprocesstree (int pid, int sig_num)\n \n   if (!dir)\n     {\n-      __gnat_kill (pid, sig_num, 1);\n+      __gnat_kill (pid, sig_num);\n       return;\n     }\n \n@@ -3673,9 +3673,9 @@ void __gnat_killprocesstree (int pid, int sig_num)\n \n   /* kill process */\n \n-  __gnat_kill (pid, sig_num, 1);\n+  __gnat_kill (pid, sig_num);\n #else\n-  __gnat_kill (pid, sig_num, 1);\n+  __gnat_kill (pid, sig_num);\n #endif\n   /* Note on Solaris it is possible to read /proc/<PID>/status.\n      The 5th and 6th words are the pid and the 7th and 8th the ppid."}, {"sha": "56554c01bcd4a7b607e85fb22ad2f7ab94e27308", "filename": "gcc/ada/libgnat/g-expect.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4c99cc92242903c81a7168d467269197955269/gcc%2Fada%2Flibgnat%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4c99cc92242903c81a7168d467269197955269/gcc%2Fada%2Flibgnat%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-expect.adb?ref=6b4c99cc92242903c81a7168d467269197955269", "patch": "@@ -96,7 +96,7 @@ package body GNAT.Expect is\n    procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n    pragma Import (C, Dup2);\n \n-   procedure Kill (Pid : Process_Id; Sig_Num : Integer; Close : Integer);\n+   procedure Kill (Pid : Process_Id; Sig_Num : Integer);\n    pragma Import (C, Kill, \"__gnat_kill\");\n    --  if Close is set to 1 all OS resources used by the Pid must be freed\n \n@@ -223,7 +223,7 @@ package body GNAT.Expect is\n \n    begin\n       if Descriptor.Pid > 0 then  --  see comment in Send_Signal\n-         Kill (Descriptor.Pid, Sig_Num => 9, Close => 0);\n+         Kill (Descriptor.Pid, Sig_Num => 9);\n       end if;\n \n       Close_Input (Descriptor);\n@@ -1347,7 +1347,7 @@ package body GNAT.Expect is\n       --  started; we don't want to kill ourself in that case.\n \n       if Descriptor.Pid > 0 then\n-         Kill (Descriptor.Pid, Signal, Close => 1);\n+         Kill (Descriptor.Pid, Signal);\n          --  ??? Need to check process status here\n       else\n          raise Invalid_Process;"}, {"sha": "5af65866b2b332f48371f845d1292a8125407ef9", "filename": "gcc/ada/libgnat/s-os_lib.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4c99cc92242903c81a7168d467269197955269/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4c99cc92242903c81a7168d467269197955269/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb?ref=6b4c99cc92242903c81a7168d467269197955269", "patch": "@@ -1602,15 +1602,15 @@ package body System.OS_Lib is\n       SIGKILL : constant := 9;\n       SIGINT  : constant := 2;\n \n-      procedure C_Kill (Pid : Process_Id; Sig_Num : Integer; Close : Integer);\n+      procedure C_Kill (Pid : Process_Id; Sig_Num : Integer);\n       pragma Import (C, C_Kill, \"__gnat_kill\");\n \n    begin\n       if Pid /= Invalid_Pid then\n          if Hard_Kill then\n-            C_Kill (Pid, SIGKILL, 1);\n+            C_Kill (Pid, SIGKILL);\n          else\n-            C_Kill (Pid, SIGINT, 1);\n+            C_Kill (Pid, SIGINT);\n          end if;\n       end if;\n    end Kill;"}]}