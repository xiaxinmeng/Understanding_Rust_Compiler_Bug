{"sha": "187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3ZmRhZWE2N2I1ZjI3ZjQzYTJjMTE5YjJhNjZjY2E3ZTZkN2NiMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-03-11T16:28:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-03-11T16:28:11Z"}, "message": "PR libstdc++/89460 Fix Networking TS test failures on HP-UX\n\nCheck for availability of POSIX sockatmark before using it.\n\nRename _S_ntoh overloads that are ambiguous when passed an integral type\nthat is neither uint16_t nor uint32_t.\n\n\tPR libstdc++/89460\n\t* configure.ac: Check for sockatmark.\n\t* crossconfig.m4: Check for sockatmark.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/experimental/internet (address_v4::_S_hton): Rename\n\toverloaded functions to _S_hton_16 and _S_ntoh_16.\n\t(address_v4::_S_ntoh): Rename to _S_ntoh_16 and _S_ntoh_32.\n\t(basic_endpoint): Adjust calls to _S_hton and _S_ntoh.\n\t* include/experimental/socket (basic_socket::at_mark): Check\n\t_GLIBCXX_HAVE_SOCKATMARK.\n\nFrom-SVN: r269588", "tree": {"sha": "8847a9acf155c8bc3fecb9dc1621522df9d6898f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8847a9acf155c8bc3fecb9dc1621522df9d6898f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93964ebd2fec8d9e2132e118b02f93bea074ebd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93964ebd2fec8d9e2132e118b02f93bea074ebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93964ebd2fec8d9e2132e118b02f93bea074ebd2"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "5c0e968d94224b9412110735a99b73f57d6fce91", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -1,5 +1,17 @@\n 2019-03-11  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/89460\n+\t* configure.ac: Check for sockatmark.\n+\t* crossconfig.m4: Check for sockatmark.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/experimental/internet (address_v4::_S_hton): Rename\n+\toverloaded functions to _S_hton_16 and _S_ntoh_16.\n+\t(address_v4::_S_ntoh): Rename to _S_ntoh_16 and _S_ntoh_32.\n+\t(basic_endpoint): Adjust calls to _S_hton and _S_ntoh.\n+\t* include/experimental/socket (basic_socket::at_mark): Check\n+\t_GLIBCXX_HAVE_SOCKATMARK.\n+\n \t* testsuite/29_atomics/atomic_flag/test_and_set/explicit-hle.cc: Use\n \tconst variables instead of macros.\n "}, {"sha": "3a6f180c06db005b05ba3475af52be0386784f08", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -390,6 +390,9 @@\n /* Defined if sleep exists. */\n #undef HAVE_SLEEP\n \n+/* Define to 1 if you have the `sockatmark' function. */\n+#undef HAVE_SOCKATMARK\n+\n /* Define to 1 if you have the `sqrtf' function. */\n #undef HAVE_SQRTF\n "}, {"sha": "7d134a0034b8f20ab94dbd40d43580e6c7b24975", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -28442,6 +28442,19 @@ if test \"x$ac_cv_func_timespec_get\" = xyes; then :\n #define HAVE_TIMESPEC_GET 1\n _ACEOF\n \n+fi\n+done\n+\n+\n+  # For Networking TS.\n+  for ac_func in sockatmark\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"sockatmark\" \"ac_cv_func_sockatmark\"\n+if test \"x$ac_cv_func_sockatmark\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SOCKATMARK 1\n+_ACEOF\n+\n fi\n done\n \n@@ -53638,6 +53651,17 @@ if test \"x$ac_cv_func_timespec_get\" = xyes; then :\n #define HAVE_TIMESPEC_GET 1\n _ACEOF\n \n+fi\n+done\n+\n+    for ac_func in sockatmark\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"sockatmark\" \"ac_cv_func_sockatmark\"\n+if test \"x$ac_cv_func_sockatmark\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SOCKATMARK 1\n+_ACEOF\n+\n fi\n done\n \n@@ -60268,6 +60292,17 @@ _ACEOF\n fi\n done\n \n+    for ac_func in sockatmark\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"sockatmark\" \"ac_cv_func_sockatmark\"\n+if test \"x$ac_cv_func_sockatmark\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SOCKATMARK 1\n+_ACEOF\n+\n+fi\n+done\n+\n \n \n \n@@ -66589,6 +66624,17 @@ if test \"x$ac_cv_func_timespec_get\" = xyes; then :\n #define HAVE_TIMESPEC_GET 1\n _ACEOF\n \n+fi\n+done\n+\n+    for ac_func in sockatmark\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"sockatmark\" \"ac_cv_func_sockatmark\"\n+if test \"x$ac_cv_func_sockatmark\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SOCKATMARK 1\n+_ACEOF\n+\n fi\n done\n "}, {"sha": "dadd8827b493e1ea8b5c34ba727f8b1946878e00", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -268,6 +268,9 @@ if $GLIBCXX_IS_NATIVE; then\n   # C11 functions for C++17 library\n   AC_CHECK_FUNCS(timespec_get)\n \n+  # For Networking TS.\n+  AC_CHECK_FUNCS(sockatmark)\n+\n   # For iconv support.\n   AM_ICONV\n "}, {"sha": "344eec09d8e7c86a85d6c0eb58789782ac4d455a", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -136,6 +136,7 @@ case \"${host}\" in\n     AC_CHECK_FUNCS(__cxa_thread_atexit)\n     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n     AC_CHECK_FUNCS(timespec_get)\n+    AC_CHECK_FUNCS(sockatmark)\n     ;;\n \n   *-fuchsia*)\n@@ -196,6 +197,7 @@ case \"${host}\" in\n     AC_CHECK_FUNCS(__cxa_thread_atexit_impl)\n     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n     AC_CHECK_FUNCS(timespec_get)\n+    AC_CHECK_FUNCS(sockatmark)\n     AM_ICONV\n     ;;\n   *-mingw32*)\n@@ -224,6 +226,7 @@ case \"${host}\" in\n     fi\n     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n     AC_CHECK_FUNCS(timespec_get)\n+    AC_CHECK_FUNCS(sockatmark)\n     ;;\n   *-qnx6.1* | *-qnx6.2*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'"}, {"sha": "467bdfda3ed1f2c2eeca4ccca5c44201f191a641", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -158,7 +158,7 @@ namespace ip\n     { }\n \n     explicit constexpr\n-    address_v4(uint_type __val) : _M_addr(_S_hton(__val))\n+    address_v4(uint_type __val) : _M_addr(_S_hton_32(__val))\n     {\n #if UINT_LEAST32_MAX > 0xFFFFFFFF\n       if (__val > 0xFFFFFFFF)\n@@ -191,7 +191,8 @@ namespace ip\n       };\n     }\n \n-    constexpr uint_type to_uint() const noexcept { return _S_ntoh(_M_addr); }\n+    constexpr uint_type\n+    to_uint() const noexcept { return _S_ntoh_32(_M_addr); }\n \n #ifdef _GLIBCXX_HAVE_ARPA_INET_H\n     template<typename _Allocator = allocator<char>>\n@@ -224,22 +225,22 @@ namespace ip\n     friend address_v4 make_address_v4(const char*, error_code&) noexcept;\n \n #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n-    static constexpr uint16_t _S_hton(uint16_t __h) { return __h; }\n-    static constexpr uint16_t _S_ntoh(uint16_t __n) { return __n; }\n-    static constexpr uint32_t _S_hton(uint32_t __h) { return __h; }\n-    static constexpr uint32_t _S_ntoh(uint32_t __n) { return __n; }\n+    static constexpr uint16_t _S_hton_16(uint16_t __h) { return __h; }\n+    static constexpr uint16_t _S_ntoh_16(uint16_t __n) { return __n; }\n+    static constexpr uint32_t _S_hton_32(uint32_t __h) { return __h; }\n+    static constexpr uint32_t _S_ntoh_32(uint32_t __n) { return __n; }\n #else\n     static constexpr uint16_t\n-    _S_hton(uint16_t __h) { return __builtin_bswap16(__h); }\n+    _S_hton_16(uint16_t __h) { return __builtin_bswap16(__h); }\n \n     static constexpr uint16_t\n-    _S_ntoh(uint16_t __n) { return __builtin_bswap16(__n); }\n+    _S_ntoh_16(uint16_t __n) { return __builtin_bswap16(__n); }\n \n     static constexpr uint32_t\n-    _S_hton(uint32_t __h) { return __builtin_bswap32(__h); }\n+    _S_hton_32(uint32_t __h) { return __builtin_bswap32(__h); }\n \n     static constexpr uint32_t\n-    _S_ntoh(uint32_t __n) { return __builtin_bswap32(__n); }\n+    _S_ntoh_32(uint32_t __n) { return __builtin_bswap32(__n); }\n #endif\n \n     in_addr_t _M_addr; // network byte order\n@@ -1396,7 +1397,7 @@ namespace ip\n \t\t\t  || __proto == protocol_type::v6());\n \n \t_M_data._M_v4.sin_family = __proto.family();\n-\t_M_data._M_v4.sin_port = address_v4::_S_hton(__port_num);\n+\t_M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n       }\n \n       constexpr\n@@ -1407,14 +1408,14 @@ namespace ip\n \tif (__addr.is_v4())\n \t  {\n \t    _M_data._M_v4.sin_family = protocol_type::v4().family();\n-\t    _M_data._M_v4.sin_port = address_v4::_S_hton(__port_num);\n+\t    _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num);\n \t    _M_data._M_v4.sin_addr.s_addr = __addr._M_v4._M_addr;\n \t  }\n \telse\n \t  {\n \t    _M_data._M_v6 = {};\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n-\t    _M_data._M_v6.sin6_port = address_v4::_S_hton(__port_num);\n+\t    _M_data._M_v6.sin6_port = address_v4::_S_hton_16(__port_num);\n \t    __builtin_memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n \t\t\t     __addr._M_v6._M_bytes.data(), 16);\n \t    _M_data._M_v6.sin6_scope_id = __addr._M_v6._M_scope_id;\n@@ -1466,11 +1467,11 @@ namespace ip\n \n       constexpr port_type\n       port() const noexcept\n-      { return address_v4::_S_ntoh(_M_data._M_v4.sin_port); }\n+      { return address_v4::_S_ntoh_16(_M_data._M_v4.sin_port); }\n \n       void\n       port(port_type __port_num) noexcept\n-      { _M_data._M_v4.sin_port = address_v4::_S_hton(__port_num); }\n+      { _M_data._M_v4.sin_port = address_v4::_S_hton_16(__port_num); }\n \n       void* data() noexcept { return &_M_data; }\n       const void* data() const noexcept { return &_M_data; }"}, {"sha": "e80626528ce5b2f79a4eebdb92d2de763c4bef03", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=187fdaea67b5f27f43a2c119b2a66cca7e6d7cb3", "patch": "@@ -794,7 +794,7 @@ inline namespace v1\n       bool\n       at_mark(error_code& __ec) const\n       {\n-#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n+#ifdef _GLIBCXX_HAVE_SOCKATMARK\n \tconst int __result = ::sockatmark(native_handle());\n \tif (__result == -1)\n \t  {"}]}