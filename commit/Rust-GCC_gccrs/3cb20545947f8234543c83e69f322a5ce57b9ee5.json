{"sha": "3cb20545947f8234543c83e69f322a5ce57b9ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiMjA1NDU5NDdmODIzNDU0M2M4M2U2OWYzMjJhNWNlNTdiOWVlNQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cambridge.redhat.com", "date": "2002-03-27T17:08:47Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-03-27T17:08:47Z"}, "message": "dwarf2-signal.h (MAKE_THROW_FRAME): Add for IA-64.\n\n2002-03-25  Andrew Haley <aph@cambridge.redhat.com>, Hans Boehm <Hans_Boehm@hp.com>\n\n        * include/dwarf2-signal.h (MAKE_THROW_FRAME): Add for IA-64.\n        (INIT_SEGV, INIT_FPE): Add versions that use __libc_sigaction\n        instead of syscall on IA-64.\n        Add FIXME comment.\n\nFrom-SVN: r51459", "tree": {"sha": "ea513140d8d39b278904ffee2b2456d22ec84f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea513140d8d39b278904ffee2b2456d22ec84f39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cb20545947f8234543c83e69f322a5ce57b9ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb20545947f8234543c83e69f322a5ce57b9ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cb20545947f8234543c83e69f322a5ce57b9ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cb20545947f8234543c83e69f322a5ce57b9ee5/comments", "author": null, "committer": null, "parents": [{"sha": "5cb27a469762e8762cf572b9190aa4fe5e070deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb27a469762e8762cf572b9190aa4fe5e070deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb27a469762e8762cf572b9190aa4fe5e070deb"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "878854b92201c238886063c2878c965c01606330", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb20545947f8234543c83e69f322a5ce57b9ee5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb20545947f8234543c83e69f322a5ce57b9ee5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3cb20545947f8234543c83e69f322a5ce57b9ee5", "patch": "@@ -1,3 +1,10 @@\n+2002-03-25  Andrew Haley <aph@cambridge.redhat.com>, Hans Boehm <Hans_Boehm@hp.com>\n+\n+        * include/dwarf2-signal.h (MAKE_THROW_FRAME): Add for IA-64.\n+        (INIT_SEGV, INIT_FPE): Add versions that use __libc_sigaction\n+        instead of syscall on IA-64.\n+        Add FIXME comment.\n+\n 2002-03-27  Anthony Green  <green@redhat.com>\n \n \t* libgcj.spec.in: Add CHECKREFSPEC."}, {"sha": "cde0fa9d8ccf0f7348fee54a86b4a84f0998ca30", "filename": "libjava/include/dwarf2-signal.h", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cb20545947f8234543c83e69f322a5ce57b9ee5/libjava%2Finclude%2Fdwarf2-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cb20545947f8234543c83e69f322a5ce57b9ee5/libjava%2Finclude%2Fdwarf2-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdwarf2-signal.h?ref=3cb20545947f8234543c83e69f322a5ce57b9ee5", "patch": "@@ -41,6 +41,23 @@ do\t\t\t\t\t\t\t\t\t\\\n   _sc->sc_pc += 4;\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n while (0)\n+\n+#elif defined(__ia64__)\n+\n+#define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  /* IA-64 either leaves PC pointing at a faulting instruction or the\t\\\n+   following instruction, depending on the signal.  SEGV always does\t\\\n+   the former, so we adjust the saved PC to point to the following\t\\\n+   instruction; this is what the handler in libgcc expects.  */\t\t\\\n+  /* Note that we are lying to the unwinder here, which expects the\t\\\n+   faulting pc, not pc+1.  But we claim the unwind information can't\t\\\n+   be changed by such a ld or st instruction, so it doesn't matter. */\t\\\n+  struct sigcontext *_sc = (struct sigcontext *)_p;\t\t\t\\\n+  _sc->sc_ip++;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+while (0)\n #else\n #define MAKE_THROW_FRAME(_exception)\t\t\\\n do\t\t\t\t\t\t\\\n@@ -50,6 +67,7 @@ do\t\t\t\t\t\t\\\n while (0)\n #endif\n \n+#ifndef __ia64__\n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n@@ -82,4 +100,41 @@ while (0)\n  * go away once all systems have pthreads libraries that are\n  * compiled with full unwind info.  */\n \n+#else  /* __ia64__ */\n+\n+// FIXME: We shouldn't be using libc_sigaction here, since it should\n+// be glibc private.  But using syscall here would mean translating to\n+// the kernel's struct sigaction and argument sequence, which we\n+// shouldn't either.  The right solution is to call sigaction and to\n+// make sure that we can unwind correctly through the pthread signal\n+// wrapper.\n+extern \"C\" int __libc_sigaction (int __sig, \n+\t\t      __const struct sigaction *__restrict __act,\n+                      struct sigaction *__restrict __oact) throw ();\n+\n+#define INIT_SEGV\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    nullp = new java::lang::NullPointerException ();    \t\\\n+    struct sigaction act;\t\t\t\t\t\\\n+    act.sa_sigaction = _Jv_catch_segv;      \t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n+    act.sa_flags = SA_SIGINFO;\t       \t\t\t\t\\\n+    __libc_sigaction (SIGSEGV, &act, NULL);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#define INIT_FPE\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  { \t\t\t\t\t\t\t\t\\\n+    arithexception = new java::lang::ArithmeticException \t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\\\n+    struct sigaction act;\t\t\t\t\t\\\n+    act.sa_sigaction = _Jv_catch_fpe;\t\t\t\t\\\n+    sigemptyset (&act.sa_mask);\t\t\t\t\t\\\n+    act.sa_flags = SA_SIGINFO;\t\t       \t\t\t\\\n+    __libc_sigaction (SIGFPE, &act, NULL);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)  \n+#endif /* __ia64__ */\n #endif /* JAVA_SIGNAL_H */"}]}