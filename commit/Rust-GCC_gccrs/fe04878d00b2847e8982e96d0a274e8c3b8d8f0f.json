{"sha": "fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwNDg3OGQwMGIyODQ3ZTg5ODJlOTZkMGEyNzRlOGMzYjhkOGYwZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-03-21T09:31:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-21T09:31:52Z"}, "message": "re PR bootstrap/56656 (Suffix or operands invalid for 'movq')\n\n\tPR bootstrap/56656\n\t* configure.ac (HAVE_AS_IX86_INTERUNIT_MOVQ): New test.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/i386/i386.md (*movdf_internal): Use\n\tHAVE_AS_IX86_INTERUNIT_MOVQ to handle broken assemblers that require\n\tmovd instead of movq mnemonic for interunit moves.\n\t(*movdi_internal): Ditto.\n\nFrom-SVN: r196861", "tree": {"sha": "f3f069c571a8f10f954b123113318bd57b393d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3f069c571a8f10f954b123113318bd57b393d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2e9a58ced07c6244c82cabc4a68b2db6b97911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2e9a58ced07c6244c82cabc4a68b2db6b97911"}], "stats": {"total": 90, "additions": 84, "deletions": 6}, "files": [{"sha": "bdbe7671a77869cf4d2464c81892669ccf9cf5f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "patch": "@@ -1,3 +1,14 @@\n+2013-03-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR bootstrap/56656\n+\t* configure.ac (HAVE_AS_IX86_INTERUNIT_MOVQ): New test.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/i386/i386.md (*movdf_internal): Use\n+\tHAVE_AS_IX86_INTERUNIT_MOVQ to handle broken assemblers that require\n+\tmovd instead of movq mnemonic for interunit moves.\n+\t(*movdi_internal): Ditto.\n+\n 2013-03-21   Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* config/aarch64/aarch64-simd.md (simd_fabd): New Attribute."}, {"sha": "223ce935d1e4c2f99cf479d18b6eb722e56fb210", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "patch": "@@ -327,6 +327,12 @@\n #endif\n \n \n+/* Define if your assembler supports interunit movq mnemonic. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_INTERUNIT_MOVQ\n+#endif\n+\n+\n /* Define if your assembler supports the .quad directive. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_QUAD"}, {"sha": "d622346fe6f9cbc4264ac0b74c77dc83c6d75111", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "patch": "@@ -1878,9 +1878,11 @@\n       return \"pxor\\t%0, %0\";\n \n     case TYPE_MMXMOV:\n+#ifndef HAVE_AS_IX86_INTERUNIT_MOVQ\n       /* Handle broken assemblers that require movd instead of movq.  */\n       if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n \treturn \"movd\\t{%1, %0|%0, %1}\";\n+#endif\n       return \"movq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n@@ -1890,9 +1892,11 @@\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_DI:\n+#ifndef HAVE_AS_IX86_INTERUNIT_MOVQ\n \t  /* Handle broken assemblers that require movd instead of movq.  */\n \t  if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n \t    return \"%vmovd\\t{%1, %0|%0, %1}\";\n+#endif\n \t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \tcase MODE_TI:\n \t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n@@ -2043,9 +2047,16 @@\n       return \"pxor\\t%0, %0\";\n \n     case TYPE_MMXMOV:\n-      if (get_attr_mode (insn) == MODE_DI)\n-\treturn \"movq\\t{%1, %0|%0, %1}\";\n-      return \"movd\\t{%1, %0|%0, %1}\";\n+      switch (get_attr_mode (insn))\n+\t{\n+\tcase MODE_DI:\n+\t  return \"movq\\t{%1, %0|%0, %1}\";\n+\tcase MODE_SI:\n+\t  return \"movd\\t{%1, %0|%0, %1}\";\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n \n     case TYPE_LEA:\n       return \"lea{l}\\t{%E1, %0|%0, %E1}\";\n@@ -2797,9 +2808,11 @@\n \t  return \"movlpd\\t{%1, %0|%0, %1}\";\n \n \tcase MODE_DI:\n+#ifndef HAVE_AS_IX86_INTERUNIT_MOVQ\n \t  /* Handle broken assemblers that require movd instead of movq.  */\n \t  if (GENERAL_REG_P (operands[0]) || GENERAL_REG_P (operands[1]))\n \t    return \"%vmovd\\t{%1, %0|%0, %1}\";\n+#endif\n  \t  return \"%vmovq\\t{%1, %0|%0, %1}\";\n \n \tdefault:\n@@ -2952,9 +2965,16 @@\n \t}\n \n     case TYPE_MMXMOV:\n-      if (get_attr_mode (insn) == MODE_DI)\n-\treturn \"movq\\t{%1, %0|%0, %1}\";\n-      return \"movd\\t{%1, %0|%0, %1}\";\n+      switch (get_attr_mode (insn))\n+\t{\n+\tcase MODE_DI:\n+\t  return \"movq\\t{%1, %0|%0, %1}\";\n+\tcase MODE_SI:\n+\t  return \"movd\\t{%1, %0|%0, %1}\";\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n \n     default:\n       gcc_unreachable ();"}, {"sha": "69d99af62a615912de7efd1a7f5700f8d17e8c4d", "filename": "gcc/configure", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "patch": "@@ -24642,6 +24642,39 @@ if test $gcc_cv_as_ix86_sahf = yes; then\n \n $as_echo \"#define HAVE_AS_IX86_SAHF 1\" >>confdefs.h\n \n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for interunit movq mnemonic\" >&5\n+$as_echo_n \"checking assembler for interunit movq mnemonic... \" >&6; }\n+if test \"${gcc_cv_as_ix86_interunit_movq+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_ix86_interunit_movq=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.code64\n+       movq %mm0, %rax\n+       movq %rax, %xmm0' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_ix86_interunit_movq=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_ix86_interunit_movq\" >&5\n+$as_echo \"$gcc_cv_as_ix86_interunit_movq\" >&6; }\n+if test $gcc_cv_as_ix86_interunit_movq = yes; then\n+\n+$as_echo \"#define HAVE_AS_IX86_INTERUNIT_MOVQ 1\" >>confdefs.h\n+\n fi\n \n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for hle prefixes\" >&5"}, {"sha": "53cea1d5f9ee313619bae09f170810f9428989cb", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "patch": "@@ -3723,6 +3723,14 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_IX86_SAHF, 1,\n         [Define if your assembler supports the sahf mnemonic in 64bit mode.])])\n \n+    gcc_GAS_CHECK_FEATURE([interunit movq mnemonic],\n+      gcc_cv_as_ix86_interunit_movq,,,\n+      [.code64\n+       movq %mm0, %rax\n+       movq %rax, %xmm0],,\n+      [AC_DEFINE(HAVE_AS_IX86_INTERUNIT_MOVQ, 1,\n+        [Define if your assembler supports interunit movq mnemonic.])])\n+\n     gcc_GAS_CHECK_FEATURE([hle prefixes],\n       gcc_cv_as_ix86_hle,,,\n       [lock xacquire cmpxchg %esi, (%ecx)],,"}]}