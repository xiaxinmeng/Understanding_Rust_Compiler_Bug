{"sha": "3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y3NDBjNjdkYmI5MDE3N2FhNzFkM2M2MGVmOWIwZmQyZjQ0ZGJkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-06T10:08:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-06T10:08:59Z"}, "message": "i386: Improve avx* vector concatenation [PR93594]\n\nThe following testcase shows that for _mm256_set*_m128i and similar\nintrinsics, we sometimes generate bad code.  All 4 routines are expressing\nthe same thing, a 128-bit vector zero padded to 256-bit vector, but only the\n3rd one actually emits the desired vmovdqa      %xmm0, %xmm0 insn, the\nothers vpxor    %xmm1, %xmm1, %xmm1; vinserti128        $0x1, %xmm1, %ymm0, %ymm0\nThe problem is that the cast builtins use UNSPEC_CAST which is after reload\nsimplified using a splitter, but during combine it prevents optimizations.\nWe do have avx_vec_concat* patterns that generate efficient code, both for\nthis low part + zero concatenation special case and for other cases too, so\nthe following define_insn_and_split just recognizes avx_vec_concat made of a\nlow half of a cast and some other reg.\n\n2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93594\n\t* config/i386/predicates.md (avx_identity_operand): New predicate.\n\t* config/i386/sse.md (*avx_vec_concat<mode>_1): New\n\tdefine_insn_and_split.\n\n\t* gcc.target/i386/avx2-pr93594.c: New test.", "tree": {"sha": "da4f56c7d249b3940ba60ff223273b8326db16fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da4f56c7d249b3940ba60ff223273b8326db16fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3f06480a17f98579704b9927632627a3814c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3f06480a17f98579704b9927632627a3814c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3f06480a17f98579704b9927632627a3814c5c"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "382e31368dc11822707dbc9d190e9f93eeb08d05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "patch": "@@ -1,5 +1,10 @@\n 2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93594\n+\t* config/i386/predicates.md (avx_identity_operand): New predicate.\n+\t* config/i386/sse.md (*avx_vec_concat<mode>_1): New\n+\tdefine_insn_and_split.\n+\n \tPR libgomp/93515\n \t* omp-low.c (use_pointer_for_field): For nested constructs, also\n \tlook for map clauses on target construct."}, {"sha": "3ab9da45ffbba3c4fc1e03212397081d59e813fc", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "patch": "@@ -1584,6 +1584,19 @@\n   return true;\n })\n \n+;; Return true if OP is a parallel for identity permute.\n+(define_predicate \"avx_identity_operand\"\n+  (and (match_code \"parallel\")\n+       (match_code \"const_int\" \"a\"))\n+{\n+  int i, nelt = XVECLEN (op, 0);\n+\n+  for (i = 0; i < nelt; ++i)\n+    if (INTVAL (XVECEXP (op, 0, i)) != i)\n+      return false;\n+  return true;\n+})\n+\n ;; Return true if OP is a proper third operand to vpblendw256.\n (define_predicate \"avx2_pblendw_operand\"\n   (match_code \"const_int\")"}, {"sha": "cfd79a8354469097af79eab539ea72d35bb9f2b9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "patch": "@@ -21358,6 +21358,24 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*avx_vec_concat<mode>_1\"\n+  [(set (match_operand:V_256_512 0 \"register_operand\")\n+\t(vec_concat:V_256_512\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (unspec:V_256_512\n+\t      [(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\")]\n+\t      UNSPEC_CAST)\n+\t    (match_parallel 3 \"avx_identity_operand\"\n+\t      [(match_operand 4 \"const_int_operand\")]))\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimm_or_0_operand\")))]\n+  \"TARGET_AVX\n+   && (operands[2] == CONST0_RTX (<ssehalfvecmode>mode)\n+       || !MEM_P (operands[1]))\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0) (vec_concat:V_256_512 (match_dup 1) (match_dup 2)))])\n+\n (define_insn \"vcvtph2ps<mask_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF"}, {"sha": "7b0b9c2c2421c7c2ee6076e1f9929f89be481c85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "patch": "@@ -1,3 +1,8 @@\n+2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93594\n+\t* gcc.target/i386/avx2-pr93594.c: New test.\n+\n 2020-02-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92765"}, {"sha": "963c8deeb3919b8e58c12115738d5b81ea8361f0", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr93594.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr93594.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr93594.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr93594.c?ref=3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/93594 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\t%xmm0, %xmm0\" 4 } } */\n+/* { dg-final { scan-assembler-not \"vpxor\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"vinserti128\\t\\\\\\$\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m256i\n+foo (__m128i x)\n+{\n+  return _mm256_setr_m128i (x, _mm_setzero_si128 ());\n+}\n+\n+__m256i\n+bar (__m128i x)\n+{\n+  return _mm256_set_m128i (_mm_setzero_si128 (), x);\n+}\n+\n+__m256i\n+baz (__m128i x)\n+{\n+  return _mm256_insertf128_si256 (_mm256_setzero_si256 (), x, 0);\n+}\n+\n+__m256i\n+qux (__m128i x)\n+{\n+  return _mm256_insertf128_si256 (_mm256_castsi128_si256 (x), _mm_setzero_si128 (), 1);\n+}"}]}