{"sha": "bfaa17c183b35b1a21537b9cd7880dcba2be8540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhYTE3YzE4M2IzNWIxYTIxNTM3YjljZDc4ODBkY2JhMmJlODU0MA==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-10-18T17:25:44Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-10-18T17:25:44Z"}, "message": "predict.c (probably_never_executed): Compare frequency-based count to number of training runs.\n\n2013-10-18  Teresa Johnson  <tejohnson@google.com>\n\n\t* predict.c (probably_never_executed): Compare frequency-based\n\tcount to number of training runs.\n\t* params.def (UNLIKELY_BB_COUNT_FRACTION): New parameter.\n\nFrom-SVN: r203830", "tree": {"sha": "4eafca465dab7b2da07686cc73ac95aea2125ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eafca465dab7b2da07686cc73ac95aea2125ec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfaa17c183b35b1a21537b9cd7880dcba2be8540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfaa17c183b35b1a21537b9cd7880dcba2be8540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfaa17c183b35b1a21537b9cd7880dcba2be8540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfaa17c183b35b1a21537b9cd7880dcba2be8540/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f58883bdbc26d55e64d20bdb6691274eb5f750a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58883bdbc26d55e64d20bdb6691274eb5f750a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58883bdbc26d55e64d20bdb6691274eb5f750a8"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "43ae71725794b81dd6431c7e68e3dc2cff643c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfaa17c183b35b1a21537b9cd7880dcba2be8540", "patch": "@@ -1,3 +1,9 @@\n+2013-10-18  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* predict.c (probably_never_executed): Compare frequency-based\n+\tcount to number of training runs.\n+\t* params.def (UNLIKELY_BB_COUNT_FRACTION): New parameter.\n+\n 2013-10-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c (cortexa9_extra_costs): New table."}, {"sha": "c0f962256f1f42ebd1ffecdb2c9330ba257d4439", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=bfaa17c183b35b1a21537b9cd7880dcba2be8540", "patch": "@@ -373,6 +373,11 @@ DEFPARAM(HOT_BB_FREQUENCY_FRACTION,\n \t \"Select fraction of the maximal frequency of executions of basic block in function given basic block needs to have to be considered hot\",\n \t 1000, 0, 0)\n \n+DEFPARAM(UNLIKELY_BB_COUNT_FRACTION,\n+\t \"unlikely-bb-count-fraction\",\n+         \"The minimum fraction of profile runs a given basic block execution count must be not to be considered unlikely\",\n+\t 20, 1, 10000)\n+\n DEFPARAM (PARAM_ALIGN_THRESHOLD,\n \t  \"align-threshold\",\n \t  \"Select fraction of the maximal frequency of executions of basic block in function given basic block get alignment\","}, {"sha": "2f1cb89c4aba18f9e7f965994d05b1e97be97c4c", "filename": "gcc/predict.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfaa17c183b35b1a21537b9cd7880dcba2be8540/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=bfaa17c183b35b1a21537b9cd7880dcba2be8540", "patch": "@@ -237,17 +237,33 @@ probably_never_executed (struct function *fun,\n   gcc_checking_assert (fun);\n   if (profile_status_for_function (fun) == PROFILE_READ)\n     {\n-      if ((count * 4 + profile_info->runs / 2) / profile_info->runs > 0)\n+      int unlikely_count_fraction = PARAM_VALUE (UNLIKELY_BB_COUNT_FRACTION);\n+      if (count * unlikely_count_fraction >= profile_info->runs)\n \treturn false;\n       if (!frequency)\n \treturn true;\n       if (!ENTRY_BLOCK_PTR->frequency)\n \treturn false;\n-      if (ENTRY_BLOCK_PTR->count && ENTRY_BLOCK_PTR->count < REG_BR_PROB_BASE)\n+      if (ENTRY_BLOCK_PTR->count)\n \t{\n-\t  return (RDIV (frequency * ENTRY_BLOCK_PTR->count,\n-\t\t        ENTRY_BLOCK_PTR->frequency)\n-\t\t  < REG_BR_PROB_BASE / 4);\n+          gcov_type computed_count;\n+          /* Check for possibility of overflow, in which case entry bb count\n+             is large enough to do the division first without losing much\n+             precision.  */\n+          if (ENTRY_BLOCK_PTR->count < REG_BR_PROB_BASE * REG_BR_PROB_BASE)\n+            {\n+              gcov_type scaled_count\n+                  = frequency * ENTRY_BLOCK_PTR->count * unlikely_count_fraction;\n+              computed_count = RDIV (scaled_count, ENTRY_BLOCK_PTR->frequency);\n+            }\n+          else\n+            {\n+              computed_count = RDIV (ENTRY_BLOCK_PTR->count,\n+                                     ENTRY_BLOCK_PTR->frequency);\n+              computed_count *= frequency * unlikely_count_fraction;\n+            }\n+          if (computed_count >= profile_info->runs)\n+            return false;\n \t}\n       return true;\n     }"}]}