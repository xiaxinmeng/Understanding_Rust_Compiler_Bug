{"sha": "e05de6f246b5bb905229c0f9365010d7adf15bdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1ZGU2ZjI0NmI1YmI5MDUyMjljMGY5MzY1MDEwZDdhZGYxNWJkYw==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-07-20T00:34:03Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-07-20T00:34:03Z"}, "message": "Remove DOS style trailing Carriage Returns\n\nFrom-SVN: r84941", "tree": {"sha": "f180e44ddbb4dc8ab183fc78e11e922afb93048f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f180e44ddbb4dc8ab183fc78e11e922afb93048f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e05de6f246b5bb905229c0f9365010d7adf15bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05de6f246b5bb905229c0f9365010d7adf15bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05de6f246b5bb905229c0f9365010d7adf15bdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05de6f246b5bb905229c0f9365010d7adf15bdc/comments", "author": null, "committer": null, "parents": [{"sha": "a57c6d6b633f16420c6bf17996af525c106184bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57c6d6b633f16420c6bf17996af525c106184bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a57c6d6b633f16420c6bf17996af525c106184bf"}], "stats": {"total": 495, "additions": 253, "deletions": 242}, "files": [{"sha": "84b4bddafa3c53e933340574f8338a021fd76636", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,3 +1,7 @@\n+2004-07-19  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* except.c: Remove two spurious carriage returns.\n+\n 2004-07-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16623"}, {"sha": "91f9c87849d5946e31db688a58d54a37b6f0d8d8", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -595,9 +595,9 @@ build_throw (tree exp)\n \t  fn = push_throw_library_fn (fn, tmp);\n \t}\n       else if (really_overloaded_fn (fn))\n-\t{\r\n+\t{\n \t  error (\"`%D' should never be overloaded\", fn);\n-\t  return error_mark_node;\r\n+\t  return error_mark_node;\n \t}\n       fn = OVL_CURRENT (fn);\n       exp = build_function_call (fn, tree_cons (NULL_TREE, exp, NULL_TREE));"}, {"sha": "caadf495fede9334ce669daa43e44d24456c4155", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,3 +1,10 @@\n+2004-07-19  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* g++.dg/lookup/java1.C, g++.dg/lookup/java2.C, g++.dg/other/crash-2.C,\n+\tg++.dg/parse/casting-operator2.C, g++.dg/parse/dtor3.C,\n+\tg++.dg/parse/typename6.C, g++.dg/template/dependent-expr4.C,\n+\tg++.dg/template/nontype3.C: Remove trailing CR from tests.\n+\t\n 2004-07-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16623"}, {"sha": "0d9b22ee1d55811361a56bd67fb93e6b35b353cd", "filename": "gcc/testsuite/g++.dg/lookup/java1.C", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava1.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,68 +1,68 @@\n-// { dg-do compile }\r\n-// { dg-options \"-fdollars-in-identifiers\" }\r\n-// Origin: Giovanni Bajo <giovannibajo at libero dot it>\r\n-// Make sure that Java special functions can be called correctly.\r\n-\r\n-extern \"Java\"\r\n-{\r\n-  typedef __java_int jint;\r\n-  namespace java\r\n-  {\r\n-    namespace lang\r\n-    {\r\n-      class Class;\r\n-      class Object;\r\n-      class Throwable {};\r\n-      class Foo;\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-typedef struct java::lang::Object* jobject;\r\n-typedef struct java::lang::Throwable* jthrowable;\r\n-typedef class java::lang::Class* jclass;\r\n-using java::lang::Foo;\r\n-\r\n-class Foo : public java::lang::Throwable\r\n-{\r\n-public:\r\n-  static ::java::lang::Class class$;\r\n-};\r\n-\r\n-\r\n-/*\r\n- * Step 1: no declarations. A declaration for _Jv_Throw is created.\r\n- */\r\n-\r\n-void Bar1(void)\r\n-{\r\n-  Foo* f = new java::lang::Foo;   // { dg-error \"call to Java constructor\" }\r\n-  throw (f);\r\n-}\r\n-\r\n-\r\n-/*\r\n- * Step 2: constructor declaration\r\n- */\r\n-\r\n-extern \"C\" jobject _Jv_AllocObject (jclass) __attribute__((__malloc__));\r\n-\r\n-void Bar2(void)\r\n-{\r\n-  Foo* f = new java::lang::Foo; \r\n-  throw (f);  \r\n-}\r\n-\r\n-\r\n-/*\r\n- * Step 3: overloads\r\n- */\r\n-\r\n-jobject _Jv_AllocObject (jclass, jint, float) __attribute__((__malloc__));\r\n-void _Jv_Throw (int, float) __attribute__ ((__noreturn__));\r\n-\r\n-void Bar3(void)\r\n-{\r\n-  Foo* f = new java::lang::Foo;\t  // { dg-error \"should never be overloaded\" }\r\n-  throw (f);\t\t\t  // { dg-error \"should never be overloaded\" }\r\n-}\r\n+// { dg-do compile }\n+// { dg-options \"-fdollars-in-identifiers\" }\n+// Origin: Giovanni Bajo <giovannibajo at libero dot it>\n+// Make sure that Java special functions can be called correctly.\n+\n+extern \"Java\"\n+{\n+  typedef __java_int jint;\n+  namespace java\n+  {\n+    namespace lang\n+    {\n+      class Class;\n+      class Object;\n+      class Throwable {};\n+      class Foo;\n+    }\n+  }\n+}\n+\n+typedef struct java::lang::Object* jobject;\n+typedef struct java::lang::Throwable* jthrowable;\n+typedef class java::lang::Class* jclass;\n+using java::lang::Foo;\n+\n+class Foo : public java::lang::Throwable\n+{\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+\n+/*\n+ * Step 1: no declarations. A declaration for _Jv_Throw is created.\n+ */\n+\n+void Bar1(void)\n+{\n+  Foo* f = new java::lang::Foo;   // { dg-error \"call to Java constructor\" }\n+  throw (f);\n+}\n+\n+\n+/*\n+ * Step 2: constructor declaration\n+ */\n+\n+extern \"C\" jobject _Jv_AllocObject (jclass) __attribute__((__malloc__));\n+\n+void Bar2(void)\n+{\n+  Foo* f = new java::lang::Foo; \n+  throw (f);  \n+}\n+\n+\n+/*\n+ * Step 3: overloads\n+ */\n+\n+jobject _Jv_AllocObject (jclass, jint, float) __attribute__((__malloc__));\n+void _Jv_Throw (int, float) __attribute__ ((__noreturn__));\n+\n+void Bar3(void)\n+{\n+  Foo* f = new java::lang::Foo;\t  // { dg-error \"should never be overloaded\" }\n+  throw (f);\t\t\t  // { dg-error \"should never be overloaded\" }\n+}"}, {"sha": "26fd36922b626b64335bb92751d52712a3f5709a", "filename": "gcc/testsuite/g++.dg/lookup/java2.C", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fjava2.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,47 +1,47 @@\n-// { dg-do compile }\r\n-// { dg-options \"-fdollars-in-identifiers\" }\r\n-// Origin: Giovanni Bajo <giovannibajo at libero dot it>\r\n-// Make sure that Java special functions can be called correctly.\r\n-// (continue from java1.C)\r\n-\r\n-extern \"Java\"\r\n-{\r\n-  typedef __java_int jint;\r\n-  namespace java\r\n-  {\r\n-    namespace lang\r\n-    {\r\n-      class Class;\r\n-      class Object;\r\n-      class Throwable {};\r\n-      class Foo;\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-typedef struct java::lang::Object* jobject;\r\n-typedef struct java::lang::Throwable* jthrowable;\r\n-typedef class java::lang::Class* jclass;\r\n-using java::lang::Foo;\r\n-\r\n-class Foo : public java::lang::Throwable\r\n-{\r\n-public:\r\n-  static ::java::lang::Class class$;\r\n-};\r\n-\r\n-/*\r\n- * Step 4: Manual declaration of _Jv_Throw\r\n- *  This is the last case we need to test. In the other file we're testing\r\n- *  the compiler is able to generate an artifical declaration for this \r\n- *  function, so we need to test here if it works with a normal declaration.\r\n- */\r\n-\r\n-extern \"C\" jobject _Jv_AllocObject (jclass) __attribute__((__malloc__));\r\n-extern \"C\" void _Jv_Throw (jthrowable) __attribute__ ((__noreturn__));\r\n-\r\n-void Bar4(void)\r\n-{\r\n-  Foo* f = new java::lang::Foo;\r\n-  throw (f);\r\n-}\r\n+// { dg-do compile }\n+// { dg-options \"-fdollars-in-identifiers\" }\n+// Origin: Giovanni Bajo <giovannibajo at libero dot it>\n+// Make sure that Java special functions can be called correctly.\n+// (continue from java1.C)\n+\n+extern \"Java\"\n+{\n+  typedef __java_int jint;\n+  namespace java\n+  {\n+    namespace lang\n+    {\n+      class Class;\n+      class Object;\n+      class Throwable {};\n+      class Foo;\n+    }\n+  }\n+}\n+\n+typedef struct java::lang::Object* jobject;\n+typedef struct java::lang::Throwable* jthrowable;\n+typedef class java::lang::Class* jclass;\n+using java::lang::Foo;\n+\n+class Foo : public java::lang::Throwable\n+{\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+/*\n+ * Step 4: Manual declaration of _Jv_Throw\n+ *  This is the last case we need to test. In the other file we're testing\n+ *  the compiler is able to generate an artifical declaration for this \n+ *  function, so we need to test here if it works with a normal declaration.\n+ */\n+\n+extern \"C\" jobject _Jv_AllocObject (jclass) __attribute__((__malloc__));\n+extern \"C\" void _Jv_Throw (jthrowable) __attribute__ ((__noreturn__));\n+\n+void Bar4(void)\n+{\n+  Foo* f = new java::lang::Foo;\n+  throw (f);\n+}"}, {"sha": "961a18a2384fcd75cd085ed7c876df58f6878d7c", "filename": "gcc/testsuite/g++.dg/other/crash-2.C", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-2.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,13 +1,13 @@\n-// { dg-do compile }\r\n-// { dg-options \"-finline -finline-functions\" }\r\n-// Contributed by Hans Buchmann <hans dot buchmann at fhso dot ch>\r\n-// PR c++/14033: ICE while inlining a function with incomplete parameter\r\n-\r\n-struct A;           // { dg-error \"forward declaration\" }\r\n-void foo(A a) {}    // { dg-error \"incomplete\" }\r\n-struct A {};\r\n-\r\n-void bar(void)\r\n-{\r\n- foo(A());\r\n-}\r\n+// { dg-do compile }\n+// { dg-options \"-finline -finline-functions\" }\n+// Contributed by Hans Buchmann <hans dot buchmann at fhso dot ch>\n+// PR c++/14033: ICE while inlining a function with incomplete parameter\n+\n+struct A;           // { dg-error \"forward declaration\" }\n+void foo(A a) {}    // { dg-error \"incomplete\" }\n+struct A {};\n+\n+void bar(void)\n+{\n+ foo(A());\n+}"}, {"sha": "008fa62dc74b78ad5868e5a3dc49b7ec556b23f2", "filename": "gcc/testsuite/g++.dg/parse/casting-operator2.C", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcasting-operator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcasting-operator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcasting-operator2.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,27 +1,27 @@\n-// { dg-do compile }\r\n-// Contributed by Martin Loewis <loewis at informatik dot hu-berlin dot de>\r\n-// PR c++/8856: Make sure template conversion operators are not parsed as\r\n-//   template names.\r\n-\r\n-struct K {};\r\n-template <bool> struct K2 {};\r\n-\r\n-template <class T> struct A {\r\n-  template <class U> operator U() { return U(); }\r\n-};\r\n-\r\n-int main() {\r\n-  A<double> a;\r\n-\r\n-  (void)a.operator int();\r\n-  (void)a.operator double();\r\n-  (void)a.operator K2<true>();\r\n-  (void)a.A<double>::operator int();\r\n-  (void)a.A<double>::operator double();\r\n-  (void)a.A<double>::operator K2<true>();\r\n-\r\n-  (void)a.operator double<int>();             // { dg-error \"not a template\" }\r\n-  (void)a.operator K<int>();                  // { dg-error \"not a template\" }\r\n-  (void)a.A<double>::operator double<int>();  // { dg-error \"not a template\" }\r\n-  (void)a.A<double>::operator K<int>();       // { dg-error \"not a template\" }\r\n-}\r\n+// { dg-do compile }\n+// Contributed by Martin Loewis <loewis at informatik dot hu-berlin dot de>\n+// PR c++/8856: Make sure template conversion operators are not parsed as\n+//   template names.\n+\n+struct K {};\n+template <bool> struct K2 {};\n+\n+template <class T> struct A {\n+  template <class U> operator U() { return U(); }\n+};\n+\n+int main() {\n+  A<double> a;\n+\n+  (void)a.operator int();\n+  (void)a.operator double();\n+  (void)a.operator K2<true>();\n+  (void)a.A<double>::operator int();\n+  (void)a.A<double>::operator double();\n+  (void)a.A<double>::operator K2<true>();\n+\n+  (void)a.operator double<int>();             // { dg-error \"not a template\" }\n+  (void)a.operator K<int>();                  // { dg-error \"not a template\" }\n+  (void)a.A<double>::operator double<int>();  // { dg-error \"not a template\" }\n+  (void)a.A<double>::operator K<int>();       // { dg-error \"not a template\" }\n+}"}, {"sha": "3041ae4a568f9ee93e654a36a9a79b251a96c9ef", "filename": "gcc/testsuite/g++.dg/parse/dtor3.C", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor3.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,16 +1,16 @@\n-// { dg-do compile }\r\n-// Contributed by Wolfgang Bangerth <bangerth at dealii dot org>\r\n-// PR c++/12335: Make sure we don't ICE on the qualified-id form of a \r\n-//  destructor call.\r\n-\r\n-struct Y { \r\n-  ~Y() {}      // { dg-bogus \"note\" \"implemented DR272\" { xfail *-*-* } }  \r\n-};\r\n-\r\n-struct X : Y { \r\n-  ~X() {}      // { dg-bogus \"note\" \"implemented DR272\" { xfail *-*-* } }  \r\n-  void f() { \r\n-    X::~X();   // { dg-bogus \"\" \"implemented DR272\" { xfail *-*-* } }  \r\n-    Y::~Y();   // { dg-bogus \"\" \"implemented DR272\" { xfail *-*-* } }  \r\n-  } \r\n-};\r\n+// { dg-do compile }\n+// Contributed by Wolfgang Bangerth <bangerth at dealii dot org>\n+// PR c++/12335: Make sure we don't ICE on the qualified-id form of a \n+//  destructor call.\n+\n+struct Y { \n+  ~Y() {}      // { dg-bogus \"note\" \"implemented DR272\" { xfail *-*-* } }  \n+};\n+\n+struct X : Y { \n+  ~X() {}      // { dg-bogus \"note\" \"implemented DR272\" { xfail *-*-* } }  \n+  void f() { \n+    X::~X();   // { dg-bogus \"\" \"implemented DR272\" { xfail *-*-* } }  \n+    Y::~Y();   // { dg-bogus \"\" \"implemented DR272\" { xfail *-*-* } }  \n+  } \n+};"}, {"sha": "dc458bee558353b0d217bc0727572fd7cada83e4", "filename": "gcc/testsuite/g++.dg/parse/typename6.C", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename6.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,17 +1,17 @@\n-// { dg-do compile }\r\n-// Contributed by Matt Austern <austern at apple dot com>\r\n-// PR c++/13407: Gracefully handle keyword typename in base class specifier.\r\n-\r\n-struct A { };\r\n-struct B { typedef A Type; };\r\n-\r\n-template <typename T>\r\n-struct X : \r\n-  public typename T::Type  // { dg-error \"not allowed in this context\" }\r\n-{ };\r\n-\r\n-X<B> x;\r\n-\r\n-struct C : \r\n-  public typename A        // { dg-error \"not allowed outside of templates\" }\r\n-{ };\r\n+// { dg-do compile }\n+// Contributed by Matt Austern <austern at apple dot com>\n+// PR c++/13407: Gracefully handle keyword typename in base class specifier.\n+\n+struct A { };\n+struct B { typedef A Type; };\n+\n+template <typename T>\n+struct X : \n+  public typename T::Type  // { dg-error \"not allowed in this context\" }\n+{ };\n+\n+X<B> x;\n+\n+struct C : \n+  public typename A        // { dg-error \"not allowed outside of templates\" }\n+{ };"}, {"sha": "b36c8729b02eac4a1a1c825e76959944d0f7afe5", "filename": "gcc/testsuite/g++.dg/template/dependent-expr4.C", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr4.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,15 +1,15 @@\n-// { dg-do compile }\r\n-// Origin: jbrandmeyer at users dot sourceforge dot net\r\n-// PR c++/12573: COMPONENT_REFs must be inspected for dependness.\r\n-// Or, more specifically OFFSETOF.\r\n-\r\n-template <bool> struct S;\r\n-\r\n-template <typename K> struct Y {\r\n-  int x;\r\n-};\r\n-\r\n-template <class T> struct Z {\r\n-  S< (bool)(__builtin_offsetof (Y<T>*, x) == 0) >\r\n-    s;\r\n-};\r\n+// { dg-do compile }\n+// Origin: jbrandmeyer at users dot sourceforge dot net\n+// PR c++/12573: COMPONENT_REFs must be inspected for dependness.\n+// Or, more specifically OFFSETOF.\n+\n+template <bool> struct S;\n+\n+template <typename K> struct Y {\n+  int x;\n+};\n+\n+template <class T> struct Z {\n+  S< (bool)(__builtin_offsetof (Y<T>*, x) == 0) >\n+    s;\n+};"}, {"sha": "5f245620a838fe0eb888d5d3b4085d0cfdd2f3a8", "filename": "gcc/testsuite/g++.dg/template/nontype3.C", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05de6f246b5bb905229c0f9365010d7adf15bdc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C?ref=e05de6f246b5bb905229c0f9365010d7adf15bdc", "patch": "@@ -1,37 +1,37 @@\n-// { dg-do compile }\r\n-// Origin: <drow at gcc dot gnu dot org>,\r\n-//         <giovannibajo at gcc dot gnu dot org>\r\n-// c++/13243: Template parameters of non integral or enumeration type can't be\r\n-//  used for integral constant expressions. ADDR_EXPR and INDIRECT_REF are\r\n-//  invalid too.\r\n-\r\n-template <int T> class foo {};\r\n-template <int *T> class bar {};\r\n-\r\n-template <int *PI>\r\n-void dep5(bar<PI> *);\r\n-\r\n-template <int *PI>\r\n-void dep6(bar<PI+1> *); // { dg-error \"\" \"integral or enumeration\" }\r\n-\r\n-template <int I>\r\n-void dep7(bar<I+1> *);\r\n-\r\n-template <int *PI>\r\n-void dep8(foo< *PI > *); // { dg-error \"\" \"integral or enumeration\" }\r\n-\r\n-template <int PI[1]>\r\n-void dep9(foo< *PI > *); // { dg-error \"\" \"integral or enumeration\" }\r\n-\r\n-template <int PI[1]>\r\n-void dep9a(foo< sizeof(*PI) > *);\r\n-\r\n-template <int PI[1]>\r\n-void dep10(foo< PI[0] > *); // { dg-error \"\" \"integral or enumeration\" }\r\n-\r\n-template <int I>\r\n-void dep11(foo< *&I > *); // { dg-error \"\" \"constant-expression\" }\r\n-\r\n-template <int I>\r\n-void dep12(foo< (&I)[4] > *); // { dg-error \"\" \"constant-expression\" }\r\n-\r\n+// { dg-do compile }\n+// Origin: <drow at gcc dot gnu dot org>,\n+//         <giovannibajo at gcc dot gnu dot org>\n+// c++/13243: Template parameters of non integral or enumeration type can't be\n+//  used for integral constant expressions. ADDR_EXPR and INDIRECT_REF are\n+//  invalid too.\n+\n+template <int T> class foo {};\n+template <int *T> class bar {};\n+\n+template <int *PI>\n+void dep5(bar<PI> *);\n+\n+template <int *PI>\n+void dep6(bar<PI+1> *); // { dg-error \"\" \"integral or enumeration\" }\n+\n+template <int I>\n+void dep7(bar<I+1> *);\n+\n+template <int *PI>\n+void dep8(foo< *PI > *); // { dg-error \"\" \"integral or enumeration\" }\n+\n+template <int PI[1]>\n+void dep9(foo< *PI > *); // { dg-error \"\" \"integral or enumeration\" }\n+\n+template <int PI[1]>\n+void dep9a(foo< sizeof(*PI) > *);\n+\n+template <int PI[1]>\n+void dep10(foo< PI[0] > *); // { dg-error \"\" \"integral or enumeration\" }\n+\n+template <int I>\n+void dep11(foo< *&I > *); // { dg-error \"\" \"constant-expression\" }\n+\n+template <int I>\n+void dep12(foo< (&I)[4] > *); // { dg-error \"\" \"constant-expression\" }\n+"}]}