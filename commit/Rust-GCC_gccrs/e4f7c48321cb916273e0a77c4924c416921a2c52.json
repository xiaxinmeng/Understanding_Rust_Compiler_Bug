{"sha": "e4f7c48321cb916273e0a77c4924c416921a2c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmN2M0ODMyMWNiOTE2MjczZTBhNzdjNDkyNGM0MTY5MjFhMmM1Mg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-06-15T21:01:57Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-06-15T21:01:57Z"}, "message": "* target.h (struct asm_out):Add declare_constant_name field.\n\n\t* target-def.h (TARGET_ASM_DECLARE_CONSTANT_NAME): Define.\n\t(TARGET_INITIALIZER): Use TARGET_ASM_DECLARE_CONSTANT_NAME.\n\t* output.h (default_asm_declare_constant_name): Declare.\n\t(assemble_label): Update prototype.\n\t* varasm.c (assemble_constant_contents): Use\n\ttargetm.asm_out.declare_constant_name target hook.\n\t(assemble_label): Add 'file' argument.\n\t(default_asm_declare_constant_name): New function.\n\t* system.h (ASM_DECLARE_CONSTANT_NAME): Poison.\n\t* doc/tm.texi (ASM_DECLARE_CONSTANT_NAME): Remove.\n\t(TARGET_ASM_DECLARE_CONSTANT_NAME): Document it.\n\n\t* config/darwin-protos.h (darwin_asm_declare_constant_name): Declare.\n\t* config/darwin.c (darwin_asm_declare_constant_name): New function.\n\t(machopic_output_indirection): Update assemble_label argument list.\n\t* config/darwin.h (ASM_DECLARE_CONSTANT_NAME): Remove.\n\t(TARGET_ASM_DECLARE_CONSTANT_NAME): Define.\n\nFrom-SVN: r160811", "tree": {"sha": "17306d02a0afd6f48b81bff1a4163e2b152c10be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17306d02a0afd6f48b81bff1a4163e2b152c10be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f7c48321cb916273e0a77c4924c416921a2c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f7c48321cb916273e0a77c4924c416921a2c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f7c48321cb916273e0a77c4924c416921a2c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f7c48321cb916273e0a77c4924c416921a2c52/comments", "author": null, "committer": null, "parents": [{"sha": "d1a115f895b6bd7658f1222d57d38caec192dbcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a115f895b6bd7658f1222d57d38caec192dbcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a115f895b6bd7658f1222d57d38caec192dbcc"}], "stats": {"total": 114, "additions": 81, "deletions": 33}, "files": [{"sha": "c68a874a0e84200ddb2b2c1224a5f938fb4079e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -1,3 +1,24 @@\n+2010-06-15  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.h (struct asm_out):Add declare_constant_name field.\n+\t* target-def.h (TARGET_ASM_DECLARE_CONSTANT_NAME): Define.\n+\t(TARGET_INITIALIZER): Use TARGET_ASM_DECLARE_CONSTANT_NAME.\n+\t* output.h (default_asm_declare_constant_name): Declare.\n+\t(assemble_label): Update prototype.\n+\t* varasm.c (assemble_constant_contents): Use\n+\ttargetm.asm_out.declare_constant_name target hook.\n+\t(assemble_label): Add 'file' argument.\n+\t(default_asm_declare_constant_name): New function.\n+\t* system.h (ASM_DECLARE_CONSTANT_NAME): Poison.\n+\t* doc/tm.texi (ASM_DECLARE_CONSTANT_NAME): Remove.\n+\t(TARGET_ASM_DECLARE_CONSTANT_NAME): Document it.\n+\n+\t* config/darwin-protos.h (darwin_asm_declare_constant_name): Declare.\n+\t* config/darwin.c (darwin_asm_declare_constant_name): New function.\n+\t(machopic_output_indirection): Update assemble_label argument list.\n+\t* config/darwin.h (ASM_DECLARE_CONSTANT_NAME): Remove.\n+\t(TARGET_ASM_DECLARE_CONSTANT_NAME): Define.\n+\n 2010-06-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/44391"}, {"sha": "115349a64cb0d9c1813076fc744f0c6dd2b69866", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -87,6 +87,8 @@ extern void darwin_asm_output_dwarf_delta (FILE *, int, const char *,\n \t\t\t\t\t   const char *);\n extern void darwin_asm_output_dwarf_offset (FILE *, int, const char *,\n \t\t\t\t\t    section *);\n+extern void darwin_asm_declare_constant_name (FILE *, const char *,\n+\t\t\t\t\t      const_tree, HOST_WIDE_INT);\n extern bool darwin_binds_local_p (const_tree);\n extern void darwin_cpp_builtins (struct cpp_reader *);\n extern void darwin_asm_output_anchor (rtx symbol);"}, {"sha": "1adff12ea73c269be9f54f308870a928619f7faf", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -966,7 +966,7 @@ machopic_output_indirection (void **slot, void *data)\n     {\n       switch_to_section (data_section);\n       assemble_align (GET_MODE_ALIGNMENT (Pmode));\n-      assemble_label (ptr_name);\n+      assemble_label (asm_out_file, ptr_name);\n       assemble_integer (gen_rtx_SYMBOL_REF (Pmode, sym_name),\n \t\t\tGET_MODE_SIZE (Pmode),\n \t\t\tGET_MODE_ALIGNMENT (Pmode), 1);\n@@ -1617,6 +1617,20 @@ darwin_non_lazy_pcrel (FILE *file, rtx addr)\n   fputs (\"-.\", file);\n }\n \n+/* The implementation of ASM_DECLARE_CONSTANT_NAME.  */\n+\n+void\n+darwin_asm_declare_constant_name (FILE *file, const char *name,\n+\t\t\t\t  const_tree exp ATTRIBUTE_UNUSED,\n+\t\t\t\t  HOST_WIDE_INT size)\n+{\n+  assemble_label (file, name);\n+\n+  /* Darwin doesn't support zero-size objects, so give them a byte.  */\n+  if ((size) == 0)\n+    assemble_zeros (1);\n+}\n+\n /* Emit an assembler directive to set visibility for a symbol.  The\n    only supported visibilities are VISIBILITY_DEFAULT and\n    VISIBILITY_HIDDEN; the latter corresponds to Darwin's \"private"}, {"sha": "a1e805c6d5b1da9229dd77dd081d4ab0a99968ac", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -652,14 +652,8 @@ extern GTY(()) int darwin_ms_struct;\n     ASM_OUTPUT_LABEL (FILE, xname);\t\t\t\t\t\\\n   } while (0)\n \n-#define ASM_DECLARE_CONSTANT_NAME(FILE, NAME, EXP, SIZE)\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n-    /* Darwin doesn't support zero-size objects, so give them a\t\\\n-       byte.  */\t\t\t\t\t\t\\\n-    if ((SIZE) == 0)\t\t\t\t\t\t\\\n-      assemble_zeros (1);\t\t\t\t\t\\\n-  } while (0)\n+#undef TARGET_ASM_DECLARE_CONSTANT_NAME\n+#define TARGET_ASM_DECLARE_CONSTANT_NAME darwin_asm_declare_constant_name\n \n /* Wrap new method names in quotes so the assembler doesn't gag.\n    Make Objective-C internal symbols local and in doing this, we need "}, {"sha": "495bdfa0a2f46c83976a46769531e129895ef013", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -7787,21 +7787,19 @@ You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} and/or\n @code{ASM_OUTPUT_SIZE_DIRECTIVE} in the definition of this macro.\n @end defmac\n \n-@defmac ASM_DECLARE_CONSTANT_NAME (@var{stream}, @var{name}, @var{exp}, @var{size})\n-A C statement (sans semicolon) to output to the stdio stream\n-@var{stream} any text necessary for declaring the name @var{name} of a\n-constant which is being defined.  This macro is responsible for\n-outputting the label definition (perhaps using\n-@code{ASM_OUTPUT_LABEL}).  The argument @var{exp} is the\n-value of the constant, and @var{size} is the size of the constant\n-in bytes.  @var{name} will be an internal label.\n+@deftypefn {Target Hook} void TARGET_ASM_DECLARE_CONSTANT_NAME (FILE * @var{file}, const char * @var{name}, const_tree @var{expr}, HOST_WIDE_INT @var{size})\n+A target hook to output to the stdio stream @var{file} any text necessary\n+for declaring the name @var{name} of a constant which is being defined.  This\n+target hook is responsible for outputting the label definition (perhaps using\n+@code{assemble_label}).  The argument @var{exp} is the value of the constant,\n+and @var{size} is the size of the constant in bytes.  The @var{name}\n+will be an internal label.\n \n-If this macro is not defined, then the @var{name} is defined in the\n-usual manner as a label (by means of @code{ASM_OUTPUT_LABEL}).\n+The default version of this target hook, define the @var{name} in the\n+usual manner as a label (by means of @code{assemble_label}).\n \n-You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} in the definition\n-of this macro.\n-@end defmac\n+You may wish to use @code{ASM_OUTPUT_TYPE_DIRECTIVE} in this target hook.\n+@end deftypefn\n \n @defmac ASM_DECLARE_REGISTER_GLOBAL (@var{stream}, @var{decl}, @var{regno}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "d1e5f245bf624a586b87232008832b2999a3339e", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -1,7 +1,8 @@\n /* Declarations for insn-output.c.  These functions are defined in recog.c,\n    final.c, and varasm.c.\n    Copyright (C) 1987, 1991, 1994, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -230,7 +231,7 @@ extern void assemble_string (const char *, int);\n extern void assemble_external_libcall (rtx);\n \n /* Assemble a label named NAME.  */\n-extern void assemble_label (const char *);\n+extern void assemble_label (FILE *, const char *);\n \n /* Output to FILE (an assembly file) a reference to NAME.  If NAME\n    starts with a *, the rest of NAME is output verbatim.  Otherwise\n@@ -630,6 +631,8 @@ extern void default_globalize_decl_name (FILE *, tree);\n extern void default_emit_unwind_label (FILE *, tree, int, int);\n extern void default_emit_except_table_label (FILE *);\n extern void default_internal_label (FILE *, const char *, unsigned long);\n+extern void default_asm_declare_constant_name (FILE *, const char *,\n+\t\t\t\t\t       const_tree, HOST_WIDE_INT);\n extern void default_file_start (void);\n extern void file_end_indicate_exec_stack (void);\n "}, {"sha": "38a7c017af0738de09bce6452b6bb0846fe73b5b", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -768,7 +768,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tSMALL_ARG_MAX ASM_OUTPUT_SHARED_BSS ASM_OUTPUT_SHARED_COMMON\t   \\\n \tASM_OUTPUT_SHARED_LOCAL ASM_MAKE_LABEL_LINKONCE\t\t\t   \\\n \tSTACK_CHECK_PROBE_INTERVAL STACK_CHECK_PROBE_LOAD\t\t   \\\n-\tORDER_REGS_FOR_LOCAL_ALLOC FUNCTION_OUTGOING_VALUE\n+\tORDER_REGS_FOR_LOCAL_ALLOC FUNCTION_OUTGOING_VALUE\t\t   \\\n+\tASM_DECLARE_CONSTANT_NAME\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "1aaf38c2e533a39bde28c6c1ee4aecb8728d8bac", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -84,6 +84,10 @@\n #define TARGET_ASM_INTERNAL_LABEL default_internal_label\n #endif\n \n+#ifndef TARGET_ASM_DECLARE_CONSTANT_NAME\n+#define TARGET_ASM_DECLARE_CONSTANT_NAME default_asm_declare_constant_name\n+#endif\n+\n #ifndef TARGET_ASM_TTYPE\n #define TARGET_ASM_TTYPE hook_bool_rtx_false\n #endif\n@@ -297,6 +301,7 @@\n \t\t\tTARGET_ASM_EMIT_EXCEPT_TABLE_LABEL,\t\\\n \t\t\tTARGET_UNWIND_EMIT,\t\t\t\\\n \t\t\tTARGET_ASM_INTERNAL_LABEL,\t\t\\\n+\t\t\tTARGET_ASM_DECLARE_CONSTANT_NAME,\t\\\n \t\t\tTARGET_ASM_TTYPE,\t\t\t\\\n \t\t\tTARGET_ASM_ASSEMBLE_VISIBILITY,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\"}, {"sha": "2f181eb63c2246e476e03f21e79be69f5f3b51d6", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -171,6 +171,10 @@ struct gcc_target\n     /* Output an internal label.  */\n     void (* internal_label) (FILE *, const char *, unsigned long);\n \n+    /* Output label for the constant.  */\n+    void (* declare_constant_name) (FILE *, const char *, const_tree, \n+\t\t\t\t    HOST_WIDE_INT);\n+\n     /* Emit a ttype table reference to a typeinfo object.  */\n     bool (* ttype) (rtx);\n "}, {"sha": "8ef41e3264b6507bff5dcdfcd467b06ef14ccb8f", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f7c48321cb916273e0a77c4924c416921a2c52/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e4f7c48321cb916273e0a77c4924c416921a2c52", "patch": "@@ -2461,9 +2461,9 @@ assemble_external_libcall (rtx fun)\n /* Assemble a label named NAME.  */\n \n void\n-assemble_label (const char *name)\n+assemble_label (FILE *file, const char *name)\n {\n-  ASM_OUTPUT_LABEL (asm_out_file, name);\n+  ASM_OUTPUT_LABEL (file, name);\n }\n \n /* Set the symbol_referenced flag for ID.  */\n@@ -3475,12 +3475,7 @@ assemble_constant_contents (tree exp, const char *label, unsigned int align)\n   size = get_constant_size (exp);\n \n   /* Do any machine/system dependent processing of the constant.  */\n-#ifdef ASM_DECLARE_CONSTANT_NAME\n-  ASM_DECLARE_CONSTANT_NAME (asm_out_file, label, exp, size);\n-#else\n-  /* Standard thing is just output label for the constant.  */\n-  ASM_OUTPUT_LABEL (asm_out_file, label);\n-#endif /* ASM_DECLARE_CONSTANT_NAME */\n+  targetm.asm_out.declare_constant_name (asm_out_file, label, exp, size);\n \n   /* Output the value of EXP.  */\n   output_constant (exp, size, align);\n@@ -6894,6 +6889,17 @@ default_internal_label (FILE *stream, const char *prefix,\n   ASM_OUTPUT_INTERNAL_LABEL (stream, buf);\n }\n \n+\n+/* The default implementation of ASM_DECLARE_CONSTANT_NAME.  */\n+\n+void\n+default_asm_declare_constant_name (FILE *file, const char *name,\n+\t\t\t\t   const_tree exp ATTRIBUTE_UNUSED,\n+\t\t\t\t   HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n+{\n+  assemble_label (file, name);\n+}\n+\n /* This is the default behavior at the beginning of a file.  It's\n    controlled by two other target-hook toggles.  */\n void"}]}