{"sha": "8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhMDdhMzA3MjQzOGZhNWU3NmYyYjJjZWE5ZTUxYTk4NzYwYTg2Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-15T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-15T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "e01de3d5d94756ac36a4b189c720433d2ffee046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01de3d5d94756ac36a4b189c720433d2ffee046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/comments", "author": null, "committer": null, "parents": [{"sha": "4358099049cbb8180c5354c6754b04ff0b330835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4358099049cbb8180c5354c6754b04ff0b330835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4358099049cbb8180c5354c6754b04ff0b330835"}], "stats": {"total": 409, "additions": 408, "deletions": 1}, "files": [{"sha": "5c4140650347a258208f5898a1e229c44ea5a8fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,130 @@\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.md (rotldi3_insert_sf): Add TARGET_POWERPC64\n+\tcondition.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Add\n+\tTARGET_POWERPC64 requirement to TARGET_P8_VECTOR case.\n+\n+2020-07-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/49973\n+\tPR other/86904\n+\t* common.opt: Handle -ftabstop here instead of in c-family\n+\toptions.  Add -fdiagnostics-column-unit= and\n+\t-fdiagnostics-column-origin= options.\n+\t* opts.c (common_handle_option): Handle the new options.\n+\t* diagnostic-format-json.cc (json_from_expanded_location): Add\n+\tdiagnostic_context argument.  Use it to convert column numbers as per\n+\tthe new options.\n+\t(json_from_location_range): Likewise.\n+\t(json_from_fixit_hint): Likewise.\n+\t(json_end_diagnostic): Pass the new context argument to helper\n+\tfunctions above.  Add \"column-origin\" field to the output.\n+\t(test_unknown_location): Add the new context argument to calls to\n+\thelper functions.\n+\t(test_bad_endpoints): Likewise.\n+\t* diagnostic-show-locus.c\n+\t(exploc_with_display_col::exploc_with_display_col): Support\n+\ttabstop parameter.\n+\t(layout_point::layout_point): Make use of class\n+\texploc_with_display_col.\n+\t(layout_range::layout_range): Likewise.\n+\t(struct line_bounds): Clarify that the units are now always\n+\tdisplay columns.  Rename members accordingly.  Add constructor.\n+\t(layout::print_source_line): Add support for tab expansion.\n+\t(make_range): Adapt to class layout_range changes.\n+\t(layout::maybe_add_location_range): Likewise.\n+\t(layout::layout): Adapt to class exploc_with_display_col changes.\n+\t(layout::calculate_x_offset_display): Support tabstop parameter.\n+\t(layout::print_annotation_line): Adapt to struct line_bounds changes.\n+\t(layout::print_line): Likewise.\n+\t(line_label::line_label): Add diagnostic_context argument.\n+\t(get_affected_range): Likewise.\n+\t(get_printed_columns): Likewise.\n+\t(layout::print_any_labels): Adapt to struct line_label changes.\n+\t(class correction): Add m_tabstop member.\n+\t(correction::correction): Add tabstop argument.\n+\t(correction::compute_display_cols): Use m_tabstop.\n+\t(class line_corrections): Add m_context member.\n+\t(line_corrections::line_corrections): Add diagnostic_context argument.\n+\t(line_corrections::add_hint): Use m_context to handle tabstops.\n+\t(layout::print_trailing_fixits): Adapt to class line_corrections\n+\tchanges.\n+\t(test_layout_x_offset_display_utf8): Support tabstop parameter.\n+\t(test_layout_x_offset_display_tab): New selftest.\n+\t(test_one_liner_colorized_utf8): Likewise.\n+\t(test_tab_expansion): Likewise.\n+\t(test_diagnostic_show_locus_one_liner_utf8): Call the new tests.\n+\t(diagnostic_show_locus_c_tests): Likewise.\n+\t(test_overlapped_fixit_printing): Adapt to helper class and\n+\tfunction changes.\n+\t(test_overlapped_fixit_printing_utf8): Likewise.\n+\t(test_overlapped_fixit_printing_2): Likewise.\n+\t* diagnostic.h (enum diagnostics_column_unit): New enum.\n+\t(struct diagnostic_context): Add members for the new options.\n+\t(diagnostic_converted_column): Declare.\n+\t(json_from_expanded_location): Add new context argument.\n+\t* diagnostic.c (diagnostic_initialize): Initialize new members.\n+\t(diagnostic_converted_column): New function.\n+\t(maybe_line_and_column): Be willing to output a column of 0.\n+\t(diagnostic_get_location_text): Convert column number as per the new\n+\toptions.\n+\t(diagnostic_report_current_module): Likewise.\n+\t(assert_location_text): Add origin and column_unit arguments for\n+\ttesting the new functionality.\n+\t(test_diagnostic_get_location_text): Test the new functionality.\n+\t* doc/invoke.texi: Document the new options and behavior.\n+\t* input.h (location_compute_display_column): Add tabstop argument.\n+\t* input.c (location_compute_display_column): Likewise.\n+\t(test_cpp_utf8): Add selftests for tab expansion.\n+\t* tree-diagnostic-path.cc (default_tree_make_json_for_path): Pass the\n+\tnew context argument to json_from_expanded_location().\n+\n+2020-07-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96194\n+\t* expr.c (expand_constructor): Don't create temporary for store to\n+\tvolatile MEM if exp has an addressable type.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* hash-map.h (hash_map::get): Note it is a pointer to value.\n+\t* incpath.h (incpath_kind): Align comments.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree-core.h (tree_decl_with_vis, tree_function_decl):\n+\tNote additional padding on 64-bits\n+\t* tree.c (cache_integer_cst): Note why no caching of enum literals.\n+\t(get_tree_code_name): Robustify error case.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/gty.texi: Fic gt_cleare_cache name.\n+\t* doc/invoke.texi: Remove duplicate opindex Wabi-tag.\n+\n+2020-07-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-general.h (struct omp_for_data): Add adjn1 member.\n+\t* omp-general.c (omp_extract_for_data): For non-rect loop, punt on\n+\tcount computing if n1, n2 or step are not INTEGER_CST earlier.\n+\tNarrow the outer iterator range if needed so that non-rect loop\n+\thas at least one iteration for each outer range iteration.  Compute\n+\tadjn1.\n+\t* omp-expand.c (expand_omp_for_init_vars): Use adjn1 if non-NULL\n+\tinstead of the outer loop's n1.\n+\n+2020-07-14  Matthias Klose  <doko@ubuntu.com>\n+\n+\tPR lto/95604\n+\t* lto-wrapper.c (merge_and_complain): Add decoded options as parameter,\n+\terror on different values for -fcf-protection.\n+\t(append_compiler_options): Pass -fcf-protection option.\n+\t(find_and_merge_options): Add decoded options as parameter,\n+\tpass decoded_options to merge_and_complain.\n+\t(run_gcc): Pass decoded options to find_and_merge_options.\n+\t* lto-opts.c (lto_write_options): Pass -fcf-protection option.\n+\n 2020-07-13  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.md (sibcall_local): Merge sibcall_local32"}, {"sha": "579ecf278ade233a657d5a65328edc6899aef254", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1 +1 @@\n-20200714\n+20200715"}, {"sha": "9565a0bba84e51c2a6210c525915d19b12b397cf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,12 @@\n+2020-07-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR other/86904\n+\t* c-indentation.c (should_warn_for_misleading_indentation): Get\n+\tglobal tabstop from the new source.\n+\t* c-opts.c (c_common_handle_option): Remove handling of -ftabstop, which\n+\tis now a common option.\n+\t* c.opt: Likewise.\n+\n 2020-07-08  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* c.opt (Wscalar-storage-order): Add explicit variable."}, {"sha": "4abd1f14f17991bc7fcec0722013a9ac9ab683f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,67 @@\n+2020-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95789\n+\tPR c++/96104\n+\tPR c++/96179\n+\t* call.c (convert_like_real_1): Renamed from convert_like_real.\n+\t(convert_like_real): New wrapper for convert_like_real_1.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_lexer_alloc): Do not deal with PCH here.\n+\t(cp_lexer_new_main): Deal with PCH here.  Store the tokens directly\n+\tinto the buffer.\n+\t(cp_lexer_new_from_tokens): Assert last token isn't purged either.\n+\t(cp_lexer_get_preprocessor_token): Change first arg to flags, adjust.\n+\t(cp_parser_new): Pass the lexer in, don't create it here.\n+\t(cp_parser_translation_unit): Initialize access checks here.\n+\t(cp_parser_initial_pragma): First token is provided by caller,\n+\tdon't deal with PCH stopping here.  Adjust error message.\n+\t(c_parse_file): Adjust, change error message to avoid C++20 module\n+\tconfusion.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* ptree.c (cxx_print_type): Add TYPEOF_TYPE and BASES.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (build_base_field_1): Cache CLASSTYPE_AS_BASE.\n+\t(build_self_reference): Rename value -> decl.\n+\t(dump_class_hierarchy_1): Cache CLASSTYPE_AS_BASE.\n+\n+2020-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95820\n+\t* decl.c (grokdeclarator) <case cdk_function>: Check also\n+\tpointers/references/... to functions.\n+\n+2020-07-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h: Correct some tree lang flag comments,\n+\treformat some structure definitions.  Note some structure\n+\tsizes.  Clarify some comments.\n+\t(yyungetc): Delete.  Not been a thing for some time.\n+\t* class.c (copy_fndecl_with_name): Comment.\n+\t(check_bases_and_members): Unnecessary {}.\n+\t(layout_class_type): Comment.\n+\t* cp-tree.def (UNBOUND_CLASS_TEMPLATE): Adjust comment.\n+\t* decl.c:  Fix some formatting & whitespace issues.\n+\t(function_requirements_equivalent_p): Note why\n+\tsubstitutions are needed.\n+\t* decl2.c (no_linkage_error): Note that heroics about\n+\t'typedef struct { ... };' are no longer needed.\n+\t* method.c: Whitespace.\n+\t* name-lookup.c: Whitespace.\n+\t(add_decl_to_level): Reformat a line.\n+\t(print_binding_stack): Mark as DEBUG_FUNCTION.\n+\t(has_using_namespace_std_directive_p): Delete comment.\n+\t* pt.c: Whitespace\n+\t* ptree.c: Whitespace.\n+\t* rtti.c: Whitespace & comment.\n+\t* tree.c: Comment.\n+\t* typeck.c (structural_comptypes): Add comment.\n+\n 2020-07-13  Nathan Sidwell  <nathan@acm.org>\n \n \t* Make-lang.in (c++.disclean): Likewise."}, {"sha": "cd1ad2f9c209ab057ec74d5e1a8a2edcc374e064", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,36 @@\n+2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95612\n+\t* expr.c (gfc_check_pointer_assigb): Output an error if\n+\trvalue is a zero sized array or output an error if rvalue\n+\tdoesn't have a symbol tree.\n+\n+2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_omp_clauses): Match also derived-type\n+\tcomponent refs in OMP_CLAUSE_MAP.\n+\t(resolve_omp_clauses): Resolve those.\n+\t* trans-openmp.c (gfc_trans_omp_array_section, gfc_trans_omp_clauses):\n+\tHandle OpenMP structure-element mapping.\n+\t(gfc_trans_oacc_construct, gfc_trans_oacc_executable_directive,\n+\t(gfc_trans_oacc_combined_directive, gfc_trans_oacc_declare): Update\n+\tadd openacc=true in gfc_trans_omp_clauses call.\n+\n+2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/67311\n+\t* trans-openmp.c (gfc_has_alloc_comps): Return false also for\n+\tpointers to arrays.\n+\n+2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/96038\n+\t* decl.c (add_init_expr_sym):  For a symbol that is a\n+\tparameter accept an initialisation if it does not have a\n+\tvalue otherwise output a error and reject.\n+\n 2020-07-13  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tPR fortran/45337"}, {"sha": "4483c8a90df9467d86be42731368b101a0ed9cd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,97 @@\n+2020-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/59978\n+\t* g++.dg/cpp0x/vt-59978.C: New test.\n+\n+2020-07-14  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95443\n+\t* gcc.target/i386/pr95443-1.c (simple_strstr): Replace\n+\t__glibc_unlikely with __builtin_expect.\n+\n+2020-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95789\n+\tPR c++/96104\n+\tPR c++/96179\n+\t* g++.dg/conversion/ref4.C: New test.\n+\t* g++.dg/conversion/ref5.C: New test.\n+\t* g++.dg/conversion/ref6.C: New test.\n+\n+2020-07-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/49973\n+\tPR other/86904\n+\t* c-c++-common/Wmisleading-indentation-3.c: Adjust expected output\n+\tfor new defaults.\n+\t* c-c++-common/Wmisleading-indentation.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-1.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-2.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-3.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-4.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-5.c: Likewise.\n+\t* c-c++-common/missing-close-symbol.c: Likewise.\n+\t* g++.dg/diagnostic/bad-binary-ops.C: Likewise.\n+\t* g++.dg/parse/error4.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash11.C: Likewise.\n+\t* g++.old-deja/g++.pt/overload2.C: Likewise.\n+\t* g++.old-deja/g++.robertl/eb109.C: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-9.c: Likewise.\n+\t* gcc.dg/bad-binary-ops.c: Likewise.\n+\t* gcc.dg/format/branch-1.c: Likewise.\n+\t* gcc.dg/format/pr79210.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic-test-expressions-1.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c: Likewise.\n+\t* gcc.dg/redecl-4.c: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-1.F90: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-2.F90: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-3.F90: Likewise.\n+\t* go.dg/arrayclear.go: Add a comment explaining why adding a\n+\tcomment was necessary to work around a dejagnu bug.\n+\t* c-c++-common/diagnostic-units-1.c: New test.\n+\t* c-c++-common/diagnostic-units-2.c: New test.\n+\t* c-c++-common/diagnostic-units-3.c: New test.\n+\t* c-c++-common/diagnostic-units-4.c: New test.\n+\t* c-c++-common/diagnostic-units-5.c: New test.\n+\t* c-c++-common/diagnostic-units-6.c: New test.\n+\t* c-c++-common/diagnostic-units-7.c: New test.\n+\t* c-c++-common/diagnostic-units-8.c: New test.\n+\n+2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/finalize-1.f: Relax scan-tree-dump-times\n+\tpattern to work on 32bit-pointer systems.\n+\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/ipa/pr83667.C: Allow 0 or more dots between THUNK and 0.\n+\n+2020-07-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/96194\n+\t* g++.dg/opt/pr96194.C: New test.\n+\n+2020-07-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95820\n+\t* g++.dg/cpp1y/auto-fn58.C: New test.\n+\n+2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/95612\n+\t* gfortran.dg/pr95612.f90: New test.\n+\n+2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/finalize-1.f: Update dump scan pattern.\n+\t* gfortran.dg/gomp/map-1.f90: Update dg-error.\n+\t* gfortran.dg/gomp/map-2.f90: New test.\n+\n+2020-07-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/96038\n+\t* gfortran.dg/pr96038.f90: New test.\n+\n 2020-07-13  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* lib/target-supports.exp (is-effective-target):"}, {"sha": "9a0eb04f1c1ad0b504940b11e54cdc832d903282", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,7 @@\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/t-aix: Set BITS from compiler cpp macro.\n+\n 2020-06-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.am: Use -include."}, {"sha": "f1abcbdc56e1e97208b8c672d4d309d00427277c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,26 @@\n+2020-07-14  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\tPR preprocessor/49973\n+\tPR other/86904\n+\t* include/cpplib.h (struct cpp_options):  Removed support for -ftabstop,\n+\twhich is now handled by diagnostic_context.\n+\t(class cpp_display_width_computation): New class.\n+\t(cpp_byte_column_to_display_column): Add optional tabstop argument.\n+\t(cpp_display_width): Likewise.\n+\t(cpp_display_column_to_byte_column): Likewise.\n+\t* charset.c\n+\t(cpp_display_width_computation::cpp_display_width_computation): New\n+\tfunction.\n+\t(cpp_display_width_computation::advance_display_cols): Likewise.\n+\t(compute_next_display_width): Removed and implemented this\n+\tfunctionality in a new function...\n+\t(cpp_display_width_computation::process_next_codepoint): ...here.\n+\t(cpp_byte_column_to_display_column): Added tabstop argument.\n+\tReimplemented in terms of class cpp_display_width_computation.\n+\t(cpp_display_column_to_byte_column): Likewise.\n+\t* init.c (cpp_create_reader): Remove handling of -ftabstop, which is now\n+\thandled by diagnostic_context.\n+\n 2020-07-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* directives.c (do_linemarker): Optimize rewinding to line zero."}, {"sha": "5f5fc065da941a9030b06bd5e03ae88a7aee5329", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,7 @@\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/t-slibgcc-aix: Set BITS from compiler cpp macro.\n+\n 2020-07-13  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/94891"}, {"sha": "d43941a9b5f5fdb31212e24365794e67228544e2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,7 @@\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/t-aix: Set BITS from compiler cpp macro.\n+\n 2020-06-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.am: Use -include."}, {"sha": "9b3a857562e6937231bb20f0ff1b462132646150", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,37 @@\n+2020-07-14  Tom de Vries  <tom@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* oacc-init.c (acc_init_state_lock, acc_init_state, acc_init_thread):\n+\tNew variable.\n+\t(acc_init_1): Set acc_init_thread to pthread_self ().  Set\n+\tacc_init_state to initializing at the start, and to initialized at the\n+\tend.\n+\t(self_initializing_p): New function.\n+\t(acc_get_device_type): Return acc_device_none if called by thread that\n+\tis currently executing acc_init_1.\n+\t* libgomp.texi (acc_get_device_type): Update documentation.\n+\t(Implementation Status and Implementation-Defined Behavior): Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-init-2.c: New.\n+\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/t-aix: Set BITS from compiler cpp macro.\n+\n+2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/struct-elem-map-1.f90: New test.\n+\n+2020-07-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/67311\n+\t* testsuite/libgomp.fortran/target-map-1.f90: New test.\n+\n+2020-07-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/loop-21.c: New test.\n+\n 2020-07-13  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "45514ef1a5358672fbebc2dd4f97808a68c29139", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,10 @@\n+2020-07-14  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR demangler/96143\n+\t* cp-demangle.c (d_lambda): Don't add substitution candidate.\n+\t* testsuite/demangle-expected: Update a few existing test cases\n+\taccordingly, and add a new test case.\n+\n 2020-07-10  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (cplus_demangle_operators): Add di, dx, dX."}, {"sha": "bdc5f5ad65a2f5297a37f6924f207db71bb94b6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07a3072438fa5e76f2b2cea9e51a98760a86f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8ca07a3072438fa5e76f2b2cea9e51a98760a86f", "patch": "@@ -1,3 +1,7 @@\n+2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/os/aix/t-aix: Set BITS from compiler cpp macro.\n+\n 2020-07-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94749"}]}