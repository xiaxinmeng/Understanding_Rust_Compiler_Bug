{"sha": "3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y5YjVmZmI0MWU1OTY3YzFmYzRjZmNjM2YxODFhNWM2ZjIwYWI4NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-02-11T23:29:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-02-11T23:29:11Z"}, "message": "re PR target/63347 (m68k misoptimisation with -fschedule-insns)\n\n\tPR target/63347\n\t* haifa-sched.c (prune_ready_list): If we have a SCHED_GROUP_P insn\n\tthat needs to be queued, just queue it for a single cycle.\n\n\tPR target/63347\n\t* gcc.target/m68k/pr63347.c: New test.\n\nFrom-SVN: r220632", "tree": {"sha": "1dfe645fc06da450f2a1aba1a08b1dbb40021bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfe645fc06da450f2a1aba1a08b1dbb40021bf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/comments", "author": null, "committer": null, "parents": [{"sha": "b06479fd41cf0460cc28aea063a28f1e8c0d95a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06479fd41cf0460cc28aea063a28f1e8c0d95a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06479fd41cf0460cc28aea063a28f1e8c0d95a3"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "c9ac04539cc30dfbdb8f9d5739451da2572f162a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "patch": "@@ -1,3 +1,9 @@\n+2015-02-11  Jeff Law  <law@redhat.com>\n+\n+\tPR target/63347\n+\t* haifa-sched.c (prune_ready_list): If we have a SCHED_GROUP_P insn\n+\tthat needs to be queued, just queue it for a single cycle.\n+\n 2015-02-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa.c (symbol_table::remove_unreachable_nodes): Avoid releasing"}, {"sha": "64c8c9c1f70bb7a685098f64249848d933c22482", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "patch": "@@ -6291,7 +6291,15 @@ prune_ready_list (state_t temp_state, bool first_cycle_insn_p,\n \t      if (SCHED_GROUP_P (insn) && cost > min_cost_group)\n \t\tmin_cost_group = cost;\n \t      ready_remove (&ready, i);\n-\t      queue_insn (insn, cost, reason);\n+\t      /* Normally we'd want to queue INSN for COST cycles.  However,\n+\t\t if SCHED_GROUP_P is set, then we must ensure that nothing\n+\t\t else comes between INSN and its predecessor.  If there is\n+\t\t some other insn ready to fire on the next cycle, then that\n+\t\t invariant would be broken.\n+\n+\t\t So when SCHED_GROUP_P is set, just queue this insn for a\n+\t\t single cycle.  */\n+\t      queue_insn (insn, SCHED_GROUP_P (insn) ? 1 : cost, reason);\n \t      if (i + 1 < n)\n \t\tbreak;\n \t    }"}, {"sha": "ee5be51b54a189ca2e7e571064bb70997d6438fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "patch": "@@ -1,3 +1,8 @@\n+2015-02-11  Jeff Law  <law@redhat.com>\n+\n+\tPR target/63347\n+\t* gcc.target/m68k/pr63347.c: New test.\n+\n 2015-02-11  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/ubsan/shift-1.C: New test."}, {"sha": "1d23e9a827aa6f4a5e179c6fd27e13ee3e264254", "filename": "gcc/testsuite/gcc.target/m68k/pr63347.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr63347.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr63347.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr63347.c?ref=3f9b5ffb41e5967c1fc4cfcc3f181a5c6f20ab85", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=5208\" } */\n+\n+#include <stdlib.h>\n+\n+void __attribute__ ((noinline))\n+oof()\n+{\n+  asm volatile (\"\" ::: \"memory\");\n+}\n+int print_info(unsigned int *ip_addr)\n+{\n+    int invalid = 0;\n+\n+    if (ip_addr) {\n+        unsigned int haddr = *ip_addr;\n+        oof(\"stuff\");\n+        if (0x0 == haddr) {\n+            invalid = 1;\n+        }\n+        oof(\"stuff2\");\n+    } else {\n+        invalid = 1;\n+    }\n+\n+    return invalid;\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+    unsigned int myaddr;\n+    int ret;\n+\n+    myaddr = 0x0;\n+    ret = print_info(&myaddr);\n+    if (!ret)\n+        abort ();\n+\n+    myaddr = 0x01020304;\n+    ret = print_info(&myaddr);\n+    if (ret)\n+        abort ();\n+    exit (0);\n+}\n+\n+"}]}