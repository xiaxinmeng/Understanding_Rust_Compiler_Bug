{"sha": "5ea7a4ae88ef6b3400d0c4163647bf89eefef396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVhN2E0YWU4OGVmNmIzNDAwZDBjNDE2MzY0N2JmODllZWZlZjM5Ng==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-18T20:31:41Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-18T20:31:41Z"}, "message": "(scan_loop): New variable loop_depth.\n\n(scan_loop): New variable loop_depth.\tIncrement and\ndecrement on LOOP_BEG and LOOP_END notes.  Only use LOOP_VTOP note\nif loop_depth is zero.\n(strength_reduce): Likewise.\n\nFrom-SVN: r6811", "tree": {"sha": "b558a51cb8115d592db2061479d67d1a9677da11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b558a51cb8115d592db2061479d67d1a9677da11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ea7a4ae88ef6b3400d0c4163647bf89eefef396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea7a4ae88ef6b3400d0c4163647bf89eefef396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea7a4ae88ef6b3400d0c4163647bf89eefef396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea7a4ae88ef6b3400d0c4163647bf89eefef396/comments", "author": null, "committer": null, "parents": [{"sha": "4c1b367c4128e0e22c471fe0e7879057d15d1f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1b367c4128e0e22c471fe0e7879057d15d1f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1b367c4128e0e22c471fe0e7879057d15d1f4d"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "fb38dc1ae60e994368cb1de22bb821ddaf97a215", "filename": "gcc/loop.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea7a4ae88ef6b3400d0c4163647bf89eefef396/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea7a4ae88ef6b3400d0c4163647bf89eefef396/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=5ea7a4ae88ef6b3400d0c4163647bf89eefef396", "patch": "@@ -490,6 +490,8 @@ scan_loop (loop_start, end, nregs)\n      if it was used exactly once; contains const0_rtx if it was used more\n      than once.  */\n   rtx *reg_single_usage = 0;\n+  /* Nonzero if we are scanning instructions in a sub-loop.  */\n+  int loop_depth = 0;\n \n   n_times_set = (short *) alloca (nregs * sizeof (short));\n   n_times_used = (short *) alloca (nregs * sizeof (short));\n@@ -921,12 +923,18 @@ scan_loop (loop_start, end, nregs)\n \t\t     && NEXT_INSN (NEXT_INSN (p)) == end\n \t\t     && simplejump_p (p)))\n \tmaybe_never = 1;\n-      /* At the virtual top of a converted loop, insns are again known to\n-\t be executed: logically, the loop begins here even though the exit\n-\t code has been duplicated.  */\n-      else if (GET_CODE (p) == NOTE\n-\t       && NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_VTOP)\n-\tmaybe_never = call_passed = 0;\n+      else if (GET_CODE (p) == NOTE)\n+\t{\n+\t  /* At the virtual top of a converted loop, insns are again known to\n+\t     be executed: logically, the loop begins here even though the exit\n+\t     code has been duplicated.  */\n+\t  if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_VTOP && loop_depth == 0)\n+\t    maybe_never = call_passed = 0;\n+\t  else if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG)\n+\t    loop_depth++;\n+\t  else if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)\n+\t    loop_depth--;\n+\t}\n     }\n \n   /* If one movable subsumes another, ignore that other.  */\n@@ -3157,6 +3165,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n   int call_seen;\n   rtx test;\n   rtx end_insert_before;\n+  int loop_depth = 0;\n \n   reg_iv_type = (enum iv_mode *) alloca (max_reg_before_loop\n \t\t\t\t\t * sizeof (enum iv_mode *));\n@@ -3288,13 +3297,18 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t    || (NEXT_INSN (p) == loop_end && condjump_p (p)))))\n \tnot_every_iteration = 1;\n \n-      /* At the virtual top of a converted loop, insns are again known to\n-\t be executed each iteration: logically, the loop begins here\n-\t even though the exit code has been duplicated.  */\n-\n-      else if (GET_CODE (p) == NOTE\n-\t       && NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_VTOP)\n-\tnot_every_iteration = 0;\n+      else if (GET_CODE (p) == NOTE)\n+\t{\n+\t  /* At the virtual top of a converted loop, insns are again known to\n+\t     be executed each iteration: logically, the loop begins here\n+\t     even though the exit code has been duplicated.  */\n+\t  if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_VTOP && loop_depth == 0)\n+\t    not_every_iteration = 0;\n+\t  else if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG)\n+\t    loop_depth++;\n+\t  else if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)\n+\t    loop_depth--;\n+\t}\n \n       /* Unlike in the code motion pass where MAYBE_NEVER indicates that\n \t an insn may never be executed, NOT_EVERY_ITERATION indicates whether\n@@ -3444,6 +3458,7 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n      biv and a constant (or invariant), and it is not a biv.  */\n \n   not_every_iteration = 0;\n+  loop_depth = 0;\n   p = scan_start;\n   while (1)\n     {\n@@ -3560,13 +3575,18 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t\t    || (NEXT_INSN (p) == loop_end && condjump_p (p)))))\n \tnot_every_iteration = 1;\n \n-      /* At the virtual top of a converted loop, insns are again known to\n-\t be executed each iteration: logically, the loop begins here\n-\t even though the exit code has been duplicated.  */\n-\n-      else if (GET_CODE (p) == NOTE\n-\t       && NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_VTOP)\n-\tnot_every_iteration = 0;\n+      else if (GET_CODE (p) == NOTE)\n+\t{\n+\t  /* At the virtual top of a converted loop, insns are again known to\n+\t     be executed each iteration: logically, the loop begins here\n+\t     even though the exit code has been duplicated.  */\n+\t  if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_VTOP && loop_depth == 0)\n+\t    not_every_iteration = 0;\n+\t  else if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG)\n+\t    loop_depth++;\n+\t  else if (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)\n+\t    loop_depth--;\n+\t}\n \n       /* Unlike in the code motion pass where MAYBE_NEVER indicates that\n \t an insn may never be executed, NOT_EVERY_ITERATION indicates whether"}]}