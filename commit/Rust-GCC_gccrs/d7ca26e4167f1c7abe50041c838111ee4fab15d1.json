{"sha": "d7ca26e4167f1c7abe50041c838111ee4fab15d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdjYTI2ZTQxNjdmMWM3YWJlNTAwNDFjODM4MTExZWU0ZmFiMTVkMQ==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "markus@trippelsdorf.de", "date": "2014-11-20T16:36:14Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2014-11-20T16:36:14Z"}, "message": "PR63426 Fix various signed integer overflows\n\nRunning the testsuite after bootstrap-ubsan on gcc112 shows several issues. See\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=63426 for the full list.\n\nThis patch fixes several of them.\n\n2014-11-20  Markus Trippelsdorf  <markus@trippelsdorf.de>\n\n\t* config/rs6000/constraints.md: Avoid signed integer overflows.\n\t* config/rs6000/predicates.md: Likewise.\n\t* config/rs6000/rs6000.c (num_insns_constant_wide): Likewise.\n\t(includes_rldic_lshift_p): Likewise.\n\t(includes_rldicr_lshift_p): Likewise.\n\t* emit-rtl.c (const_wide_int_htab_hash): Likewise.\n\t* loop-iv.c (determine_max_iter): Likewise.\n\t(iv_number_of_iterations): Likewise.\n\t* tree-ssa-loop-ivopts.c (get_computation_cost_at): Likewise.\n\t* varasm.c (get_section_anchor): Likewise.\n\nFrom-SVN: r217886", "tree": {"sha": "bd5b144b7bbe1e7b714275f855291e53127e214a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd5b144b7bbe1e7b714275f855291e53127e214a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7ca26e4167f1c7abe50041c838111ee4fab15d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ca26e4167f1c7abe50041c838111ee4fab15d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ca26e4167f1c7abe50041c838111ee4fab15d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ca26e4167f1c7abe50041c838111ee4fab15d1/comments", "author": null, "committer": null, "parents": [{"sha": "46ed60245a76b90e6161134fc6a22480aa1248fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ed60245a76b90e6161134fc6a22480aa1248fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ed60245a76b90e6161134fc6a22480aa1248fe"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "5f25791af2dbe58b208dfe8406aea427703bc2c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -1,3 +1,16 @@\n+2014-11-20  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\t* config/rs6000/constraints.md: Avoid signed integer overflows.\n+\t* config/rs6000/predicates.md: Likewise.\n+\t* config/rs6000/rs6000.c (num_insns_constant_wide): Likewise.\n+\t(includes_rldic_lshift_p): Likewise.\n+\t(includes_rldicr_lshift_p): Likewise. \n+\t* emit-rtl.c (const_wide_int_htab_hash): Likewise.\n+\t* loop-iv.c (determine_max_iter): Likewise.\n+\t(iv_number_of_iterations): Likewise.\n+\t* tree-ssa-loop-ivopts.c (get_computation_cost_at): Likewise.\n+\t* varasm.c (get_section_anchor): Likewise.\n+\n 2014-11-20  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/63870"}, {"sha": "3f12b07e48999bf4c7674165c03d6c1360b1869b", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -176,7 +176,7 @@\n (define_constraint \"P\"\n   \"constant whose negation is signed 16-bit constant\"\n   (and (match_code \"const_int\")\n-       (match_test \"(unsigned HOST_WIDE_INT) ((- ival) + 0x8000) < 0x10000\")))\n+       (match_test \"((- (unsigned HOST_WIDE_INT) ival) + 0x8000) < 0x10000\")))\n \n ;; Floating-point constraints\n "}, {"sha": "ea230a5b29a672839c51f86963269c9b0fd3f115", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -408,7 +408,7 @@\n (define_predicate \"reg_or_sub_cint_operand\"\n   (if_then_else (match_code \"const_int\")\n     (match_test \"(unsigned HOST_WIDE_INT)\n-\t\t   (- INTVAL (op) + (mode == SImode ? 0x80000000 : 0x80008000))\n+\t\t   (- UINTVAL (op) + (mode == SImode ? 0x80000000 : 0x80008000))\n \t\t < (unsigned HOST_WIDE_INT) 0x100000000ll\")\n     (match_operand 0 \"gpc_reg_operand\")))\n "}, {"sha": "a9604cf3fa970f9ce8ae6b7a2fba64604982a8cc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -5083,7 +5083,7 @@ int\n num_insns_constant_wide (HOST_WIDE_INT value)\n {\n   /* signed constant loadable with addi */\n-  if ((unsigned HOST_WIDE_INT) (value + 0x8000) < 0x10000)\n+  if (((unsigned HOST_WIDE_INT) value + 0x8000) < 0x10000)\n     return 1;\n \n   /* constant loadable with addis */\n@@ -16194,7 +16194,7 @@ includes_rldic_lshift_p (rtx shiftop, rtx andop)\n {\n   if (GET_CODE (andop) == CONST_INT)\n     {\n-      HOST_WIDE_INT c, lsb, shift_mask;\n+      unsigned HOST_WIDE_INT c, lsb, shift_mask;\n \n       c = INTVAL (andop);\n       if (c == 0 || c == ~0)\n@@ -16233,7 +16233,7 @@ includes_rldicr_lshift_p (rtx shiftop, rtx andop)\n {\n   if (GET_CODE (andop) == CONST_INT)\n     {\n-      HOST_WIDE_INT c, lsb, shift_mask;\n+      unsigned HOST_WIDE_INT c, lsb, shift_mask;\n \n       shift_mask = ~0;\n       shift_mask <<= INTVAL (shiftop);"}, {"sha": "fa5e41beb463ae04c707ae4dadd2c0199828de84", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -220,7 +220,7 @@ hashval_t\n const_wide_int_hasher::hash (rtx x)\n {\n   int i;\n-  HOST_WIDE_INT hash = 0;\n+  unsigned HOST_WIDE_INT hash = 0;\n   const_rtx xr = x;\n \n   for (i = 0; i < CONST_WIDE_INT_NUNITS (xr); i++)"}, {"sha": "f55cea2a98595acab12402b9e92a1c02b6d74baa", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -2311,7 +2311,7 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n     }\n \n   get_mode_bounds (desc->mode, desc->signed_p, desc->mode, &mmin, &mmax);\n-  nmax = INTVAL (mmax) - INTVAL (mmin);\n+  nmax = UINTVAL (mmax) - UINTVAL (mmin);\n \n   if (GET_CODE (niter) == UDIV)\n     {\n@@ -2649,7 +2649,7 @@ iv_number_of_iterations (struct loop *loop, rtx_insn *insn, rtx condition,\n \t  down = INTVAL (CONST_INT_P (iv0.base)\n \t\t\t ? iv0.base\n \t\t\t : mode_mmin);\n-\t  max = (up - down) / inc + 1;\n+\t  max = (uint64_t) (up - down) / inc + 1;\n \t  if (!desc->infinite\n \t      && !desc->assumptions)\n \t    record_niter_bound (loop, max, false, true);"}, {"sha": "fca18b6cdfe36e74e7c3900492d512b1102875c6", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -4183,7 +4183,7 @@ get_computation_cost_at (struct ivopts_data *data,\n \n   if (cst_and_fits_in_hwi (cbase))\n     {\n-      offset = - ratio * int_cst_value (cbase);\n+      offset = - ratio * (unsigned HOST_WIDE_INT) int_cst_value (cbase);\n       cost = difference_cost (data,\n \t\t\t      ubase, build_int_cst (utype, 0),\n \t\t\t      &symbol_present, &var_present, &offset,"}, {"sha": "99dae5d7098ce281c352b0b3ce59cceb313ab7e7", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7ca26e4167f1c7abe50041c838111ee4fab15d1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d7ca26e4167f1c7abe50041c838111ee4fab15d1", "patch": "@@ -7196,7 +7196,7 @@ get_section_anchor (struct object_block *block, HOST_WIDE_INT offset,\n     offset = 0;\n   else\n     {\n-      bias = 1 << (GET_MODE_BITSIZE (ptr_mode) - 1);\n+      bias = HOST_WIDE_INT_1U << (GET_MODE_BITSIZE (ptr_mode) - 1);\n       if (offset < 0)\n \t{\n \t  delta = -(unsigned HOST_WIDE_INT) offset + max_offset;"}]}