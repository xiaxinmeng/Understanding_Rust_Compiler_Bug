{"sha": "c06de95d2e44fbd569ba2469aea0e2420cbdfcd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2ZGU5NWQyZTQ0ZmJkNTY5YmEyNDY5YWVhMGUyNDIwY2JkZmNkNA==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-05-19T23:40:06Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-05-19T23:40:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1020", "tree": {"sha": "1630470753709f6c2c0a02249455d18788252c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1630470753709f6c2c0a02249455d18788252c2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c06de95d2e44fbd569ba2469aea0e2420cbdfcd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06de95d2e44fbd569ba2469aea0e2420cbdfcd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06de95d2e44fbd569ba2469aea0e2420cbdfcd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06de95d2e44fbd569ba2469aea0e2420cbdfcd4/comments", "author": null, "committer": null, "parents": [{"sha": "fc769a066838ec9c30f813a7e96e0d92bb73d7c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc769a066838ec9c30f813a7e96e0d92bb73d7c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc769a066838ec9c30f813a7e96e0d92bb73d7c8"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "580a0c33e41bb11183576072d6118f5dfd26c41e", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 59, "deletions": 18, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06de95d2e44fbd569ba2469aea0e2420cbdfcd4/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06de95d2e44fbd569ba2469aea0e2420cbdfcd4/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=c06de95d2e44fbd569ba2469aea0e2420cbdfcd4", "patch": "@@ -71,23 +71,64 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    The SVR4 reference port C compiler uses the following register numbers\n    in its Dwarf output code:\n \n-\t0 for %eax (regno = 0)\n-\t1 for %ecx (regno = 2)\n-\t2 for %edx (regno = 1)\n-\t3 for %ebx (regno = 3)\n-\t4 for %esp (regno = 7)\n-\t5 for %ebp (regno = 6)\n-\t6 for %esi (regno = 4)\n-\t7 for %edi (regno = 5)\n-\n-\t8  for FP_REGS[tos]   (regno = 8)\n-\t9  for FP_REGS[tos-1] (regno = 9)\n-\t10 for FP_REGS[tos-2] (regno = 10)\n-\t11 for FP_REGS[tos-3] (regno = 11)\n-\t12 for FP_REGS[tos-4] (regno = 12)\n-\t13 for FP_REGS[tos-5] (regno = 13)\n-\t14 for FP_REGS[tos-6] (regno = 14)\n-\t15 for FP_REGS[tos-7] (regno = 15)\n+\t0 for %eax (gnu regno = 0)\n+\t1 for %ecx (gnu regno = 2)\n+\t2 for %edx (gnu regno = 1)\n+\t3 for %ebx (gnu regno = 3)\n+\t4 for %esp (gnu regno = 7)\n+\t5 for %ebp (gnu regno = 6)\n+\t6 for %esi (gnu regno = 4)\n+\t7 for %edi (gnu regno = 5)\n+\n+   The following three DWARF register numbers are never generated by\n+   the SVR4 C compiler or by the GNU compilers, but SDB on x86/svr4\n+   believes these numbers have these meanings.\n+\n+\t8  for %eip    (no gnu equivalent)\n+\t9  for %eflags (no gnu equivalent)\n+\t10 for %trapno (no gnu equivalent)\n+\n+   It is not at all clear how we should number the FP stack registers\n+   for the x86 architecture.  If the version of SDB on x86/svr4 were\n+   a bit less brain dead with respect to floating-point then we would\n+   have a precedent to follow with respect to DWARF register numbers\n+   for x86 FP registers, but the SDB on x86/svr4 is so completely\n+   broken with respect to FP registers that it is hardly worth thinking\n+   of it as something to strive for compatability with.\n+\n+   The verison of x86/svr4 SDB I have at the moment does (partially)\n+   seem to believe that DWARF register number 11 is associated with\n+   the x86 register %st(0), but that's about all.  Higher DWARF\n+   register numbers don't seem to be associated with anything in\n+   particular, and even for DWARF regno 11, SDB only seems to under-\n+   stand that it should say that a variable lives in %st(0) (when\n+   asked via an `=' command) if we said it was in DWARF regno 11,\n+   but SDB still prints garbage when asked for the value of the\n+   variable in question (via a `/' command).\n+\n+   (Also note that the labels SDB prints for various FP stack regs\n+   when doing an `x' command are all wrong.)\n+\n+   Note that these problems generally don't affect the native SVR4\n+   C compiler because it doesn't allow the use of -O with -g and\n+   because when it is *not* optimizing, it allocates a memory\n+   location for each floating-point variable, and the memory\n+   location is what gets described in the DWARF AT_location\n+   attribute for the variable in question.\n+\n+   Regardless of the severe mental illness of the x86/svr4 SDB, we\n+   do something sensible here and we use the following DWARF\n+   register numbers.  Note that these are all stack-top-relative\n+   numbers.\n+\n+\t11 for %st(0) (gnu regno = 8)\n+\t12 for %st(1) (gnu regno = 9)\n+\t13 for %st(2) (gnu regno = 10)\n+\t14 for %st(3) (gnu regno = 11)\n+\t15 for %st(4) (gnu regno = 12)\n+\t16 for %st(5) (gnu regno = 13)\n+\t17 for %st(6) (gnu regno = 14)\n+\t18 for %st(7) (gnu regno = 15)\n */\n \n #undef DBX_REGISTER_NUMBER\n@@ -100,7 +141,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n  : (n) == 5 ? 7 \\\n  : (n) == 6 ? 5 \\\n  : (n) == 7 ? 4 \\\n- : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n) \\\n+ : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+3 \\\n  : (abort (), 0))\n \n /* The routine used to output sequences of byte values.  We use a special"}]}