{"sha": "1f55088db5038881cc4836ba600edb1bb8fe0141", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1NTA4OGRiNTAzODg4MWNjNDgzNmJhNjAwZWRiMWJiOGZlMDE0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T10:41:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T10:41:18Z"}, "message": "[multiple changes]\n\n2016-04-18  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb, sem_util.ads (Has_Full_Default_Initialization): used\n\toutside of GNATprove, hence it should not be removed.\n\n2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Refinement_Clause):\n\tThe refinement of an external abstract state can now mention\n\tnon-external constituents.\n\t(Check_External_Property): Update all SPARK RM references.\n\n2016-04-18  Bob Duff  <duff@adacore.com>\n\n\t* exp_intr.adb: Remove some duplicated code.\n\n2016-04-18  Yannick Moy  <moy@adacore.com>\n\n\t* a-nudira.adb, a-nudira.ads, a-nuflra.adb, a-nuflra.ads: Mark\n\tpackage spec and body out of SPARK.\n\n2016-04-18  Johannes Kanig  <kanig@adacore.com>\n\n\t* spark_xrefs.ads: Minor comment update.\n\n2016-04-18  Johannes Kanig  <kanig@adacore.com>\n\n\t* gnat1drv.adb (Gnat1drv): Force loading of System\n\tunit for SPARK.\n\n2016-04-18  Bob Duff  <duff@adacore.com>\n\n\t* a-cuprqu.adb: Correction to previous change. If a new node\n\tis inserted at the front of the queue (because it is higher\n\tpriority than the previous front node), we need to update\n\tHeader.Next_Unequal -- not just in the case where the queue was\n\tpreviously empty.\n\nFrom-SVN: r235122", "tree": {"sha": "1a5dcd40078c74bc1cd52b4cdd52caafe65fb4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a5dcd40078c74bc1cd52b4cdd52caafe65fb4e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f55088db5038881cc4836ba600edb1bb8fe0141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f55088db5038881cc4836ba600edb1bb8fe0141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f55088db5038881cc4836ba600edb1bb8fe0141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f55088db5038881cc4836ba600edb1bb8fe0141/comments", "author": null, "committer": null, "parents": [{"sha": "142870f570d036ec06127bad47679743e68010f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142870f570d036ec06127bad47679743e68010f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/142870f570d036ec06127bad47679743e68010f7"}], "stats": {"total": 344, "additions": 223, "deletions": 121}, "files": [{"sha": "1269d30dcbfdedfec398c79111a2f62146c06fee", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -1,3 +1,41 @@\n+2016-04-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Has_Full_Default_Initialization): used\n+\toutside of GNATprove, hence it should not be removed.\n+\n+2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refinement_Clause):\n+\tThe refinement of an external abstract state can now mention\n+\tnon-external constituents.\n+\t(Check_External_Property): Update all SPARK RM references.\n+\n+2016-04-18  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_intr.adb: Remove some duplicated code.\n+\n+2016-04-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-nudira.adb, a-nudira.ads, a-nuflra.adb, a-nuflra.ads: Mark\n+\tpackage spec and body out of SPARK.\n+\n+2016-04-18  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* spark_xrefs.ads: Minor comment update.\n+\n+2016-04-18  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Force loading of System\n+\tunit for SPARK.\n+\n+2016-04-18  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cuprqu.adb: Correction to previous change. If a new node\n+\tis inserted at the front of the queue (because it is higher\n+\tpriority than the previous front node), we need to update\n+\tHeader.Next_Unequal -- not just in the case where the queue was\n+\tpreviously empty.\n+\n 2016-04-18  Bob Duff  <duff@adacore.com>\n \n \t* a-cuprqu.ads: Change the representation of List_Type from a"}, {"sha": "7502aa97cd8235b5a16da575a92aac3c1f09142c", "filename": "gcc/ada/a-cuprqu.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-cuprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-cuprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -187,10 +187,17 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n          Prev.Next.Prev := Node;\n          Prev.Next := Node;\n \n-         if List.Length = 0 then\n+         if Prev = H then\n+\n+            --  Make sure Next_Unequal of the Header always points to the first\n+            --  \"real\" node. Here, we've inserted a new first \"real\" node, so\n+            --  must update.\n+\n             List.Header.Next_Unequal := Node;\n          end if;\n \n+         pragma Assert (List.Header.Next_Unequal = List.Header.Next);\n+\n          List.Length := List.Length + 1;\n \n          if List.Length > List.Max_Length then"}, {"sha": "2e83600ffd29ca77af7015d1ceb697d2abd4eaa7", "filename": "gcc/ada/a-nudira.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nudira.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nudira.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nudira.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -29,7 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Numerics.Discrete_Random is\n+package body Ada.Numerics.Discrete_Random with\n+  SPARK_Mode => Off\n+is\n \n    package SRN renames System.Random_Numbers;\n    use SRN;"}, {"sha": "c2a7382cad90c6b9a27ab020b83bbfec20c10009", "filename": "gcc/ada/a-nudira.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nudira.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nudira.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nudira.ads?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -41,7 +41,9 @@ with System.Random_Numbers;\n generic\n    type Result_Subtype is (<>);\n \n-package Ada.Numerics.Discrete_Random is\n+package Ada.Numerics.Discrete_Random with\n+  SPARK_Mode => Off\n+is\n \n    --  Basic facilities\n "}, {"sha": "add19d453c24583d88aceff502f5793caa8e227a", "filename": "gcc/ada/a-nuflra.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nuflra.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nuflra.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nuflra.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Numerics.Float_Random is\n+package body Ada.Numerics.Float_Random with\n+  SPARK_Mode => Off\n+is\n \n    package SRN renames System.Random_Numbers;\n    use SRN;"}, {"sha": "ea4992c5a0c97a84c33b71e9d050bc6dd51772ad", "filename": "gcc/ada/a-nuflra.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nuflra.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fa-nuflra.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nuflra.ads?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -38,7 +38,9 @@\n \n with System.Random_Numbers;\n \n-package Ada.Numerics.Float_Random is\n+package Ada.Numerics.Float_Random with\n+  SPARK_Mode => Off\n+is\n \n    --  Basic facilities\n "}, {"sha": "f0307821c0826b84ea9380811b0a27e60907cbed", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -852,11 +852,7 @@ package body Exp_Intr is\n    ------------------------\n \n    procedure Expand_Source_Info (N : Node_Id; Nam : Name_Id) is\n-      --  ???There is duplicated code here (see Add_Source_Info)\n-\n       Loc : constant Source_Ptr := Sloc (N);\n-      Ent : Entity_Id;\n-\n    begin\n       --  Integer cases\n \n@@ -870,67 +866,7 @@ package body Exp_Intr is\n \n       else\n          Name_Len := 0;\n-\n-         case Nam is\n-            when Name_File =>\n-               Get_Decoded_Name_String\n-                 (Reference_Name (Get_Source_File_Index (Loc)));\n-\n-            when Name_Source_Location =>\n-               Build_Location_String (Loc);\n-\n-            when Name_Enclosing_Entity =>\n-\n-               --  Skip enclosing blocks to reach enclosing unit\n-\n-               Ent := Current_Scope;\n-               while Present (Ent) loop\n-                  exit when Ekind (Ent) /= E_Block\n-                    and then Ekind (Ent) /= E_Loop;\n-                  Ent := Scope (Ent);\n-               end loop;\n-\n-               --  Ent now points to the relevant defining entity\n-\n-               Write_Entity_Name (Ent);\n-\n-            when Name_Compilation_ISO_Date =>\n-               Name_Buffer (1 .. 10) := Opt.Compilation_Time (1 .. 10);\n-               Name_Len := 10;\n-\n-            when Name_Compilation_Date =>\n-               declare\n-                  subtype S13 is String (1 .. 3);\n-                  Months : constant array (1 .. 12) of S13 :=\n-                    (\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n-                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\");\n-\n-                  M1 : constant Character := Opt.Compilation_Time (6);\n-                  M2 : constant Character := Opt.Compilation_Time (7);\n-\n-                  MM : constant Natural range 1 .. 12 :=\n-                    (Character'Pos (M1) - Character'Pos ('0')) * 10 +\n-                    (Character'Pos (M2) - Character'Pos ('0'));\n-\n-               begin\n-                  --  Reformat ISO date into MMM DD YYYY (__DATE__) format\n-\n-                  Name_Buffer (1 .. 3)  := Months (MM);\n-                  Name_Buffer (4)       := ' ';\n-                  Name_Buffer (5 .. 6)  := Opt.Compilation_Time (9 .. 10);\n-                  Name_Buffer (7)       := ' ';\n-                  Name_Buffer (8 .. 11) := Opt.Compilation_Time (1 .. 4);\n-                  Name_Len := 11;\n-               end;\n-\n-            when Name_Compilation_Time =>\n-               Name_Buffer (1 .. 8) := Opt.Compilation_Time (12 .. 19);\n-               Name_Len := 8;\n-\n-            when others =>\n-               raise Program_Error;\n-         end case;\n-\n+         Add_Source_Info (Loc, Nam);\n          Rewrite (N,\n            Make_String_Literal (Loc,\n              Strval => String_From_Name_Buffer));"}, {"sha": "29f2f942f9ed994212a867c197c797f7affa520b", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -1045,6 +1045,20 @@ begin\n       Original_Operating_Mode := Operating_Mode;\n       Frontend;\n \n+      --  In GNATprove mode, force loading of System unit when tasking is\n+      --  used, so that in particular System.Interrupt_Priority is available\n+      --  to GNATprove for the generation of VCs for checking the respect of\n+      --  Ceiling Protocol.\n+\n+      if GNATprove_Mode and Opt.Tasking_Used then\n+         declare\n+            Unused_E : constant Entity_Id :=\n+              Rtsfind.RTE (Rtsfind.RE_Interrupt_Priority);\n+         begin\n+            null;\n+         end;\n+      end if;\n+\n       --  Exit with errors if the main source could not be parsed\n \n       if Sinput.Main_Source_File = No_Source_File then"}, {"sha": "118d43d914668b74f48940d6520478294dd28f21", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -25514,7 +25514,7 @@ package body Sem_Prag is\n             Error_Msg_Name_1 := Prop_Nam;\n \n             --  The property is enabled in the related Abstract_State pragma\n-            --  that defines the state (SPARK RM 7.2.8(3)).\n+            --  that defines the state (SPARK RM 7.2.8(2)).\n \n             if Enabled then\n                if No (Constit) then\n@@ -25525,7 +25525,7 @@ package body Sem_Prag is\n \n             --  The property is missing in the declaration of the state, but\n             --  a constituent is introducing it in the state refinement\n-            --  (SPARK RM 7.2.8(3)).\n+            --  (SPARK RM 7.2.8(2)).\n \n             elsif Present (Constit) then\n                Error_Msg_Name_2 := Chars (Constit);\n@@ -25746,49 +25746,31 @@ package body Sem_Prag is\n             Analyze_Constituent (Constit);\n          end if;\n \n-         --  A refined external state is subject to special rules with respect\n-         --  to its properties and constituents.\n+         --  The set of properties that all external constituents yield must\n+         --  match that of the refined state. There are two cases to detect:\n+         --  the refined state lacks a property or has an extra property\n+         --  (SPARK RM 7.2.8(2)).\n \n          if Is_External_State (State_Id) then\n-\n-            --  The set of properties that all external constituents yield must\n-            --  match that of the refined state. There are two cases to detect:\n-            --  the refined state lacks a property or has an extra property.\n-\n-            if External_Constit_Seen then\n-               Check_External_Property\n-                 (Prop_Nam => Name_Async_Readers,\n-                  Enabled  => Async_Readers_Enabled (State_Id),\n-                  Constit  => AR_Constit);\n-\n-               Check_External_Property\n-                 (Prop_Nam => Name_Async_Writers,\n-                  Enabled  => Async_Writers_Enabled (State_Id),\n-                  Constit  => AW_Constit);\n-\n-               Check_External_Property\n-                 (Prop_Nam => Name_Effective_Reads,\n-                  Enabled  => Effective_Reads_Enabled (State_Id),\n-                  Constit  => ER_Constit);\n-\n-               Check_External_Property\n-                 (Prop_Nam => Name_Effective_Writes,\n-                  Enabled  => Effective_Writes_Enabled (State_Id),\n-                  Constit  => EW_Constit);\n-\n-            --  An external state may be refined to null (SPARK RM 7.2.8(2))\n-\n-            elsif Null_Seen then\n-               null;\n-\n-            --  The external state has constituents, but none of them are\n-            --  external (SPARK RM 7.2.8(2)).\n-\n-            else\n-               SPARK_Msg_NE\n-                 (\"external state & requires at least one external \"\n-                  & \"constituent or null refinement\", State, State_Id);\n-            end if;\n+            Check_External_Property\n+              (Prop_Nam => Name_Async_Readers,\n+               Enabled  => Async_Readers_Enabled (State_Id),\n+               Constit  => AR_Constit);\n+\n+            Check_External_Property\n+              (Prop_Nam => Name_Async_Writers,\n+               Enabled  => Async_Writers_Enabled (State_Id),\n+               Constit  => AW_Constit);\n+\n+            Check_External_Property\n+              (Prop_Nam => Name_Effective_Reads,\n+               Enabled  => Effective_Reads_Enabled (State_Id),\n+               Constit  => ER_Constit);\n+\n+            Check_External_Property\n+              (Prop_Nam => Name_Effective_Writes,\n+               Enabled  => Effective_Writes_Enabled (State_Id),\n+               Constit  => EW_Constit);\n \n          --  When a refined state is not external, it should not have external\n          --  constituents (SPARK RM 7.2.8(1)).\n@@ -26760,17 +26742,17 @@ package body Sem_Prag is\n    ---------------------------------------------\n \n    procedure Collect_Inherited_Class_Wide_Conditions (Subp : Entity_Id) is\n-      Parent_Subp : constant Entity_Id := Overridden_Operation (Subp);\n-      Prags       : constant Node_Id   := Contract (Parent_Subp);\n+      Parent_Subp  : constant Entity_Id := Overridden_Operation (Subp);\n+      Prags        : constant Node_Id   := Contract (Parent_Subp);\n+      In_Spec_Expr : Boolean;\n+      Installed    : Boolean;\n       Prag         : Node_Id;\n       New_Prag     : Node_Id;\n-      Installed    : Boolean;\n-      In_Spec_Expr : Boolean;\n \n    begin\n       Installed := False;\n \n-      --  Iterate over the contract of the overridden subprogram  to find\n+      --  Iterate over the contract of the overridden subprogram to find all\n       --  inherited class-wide pre- and postconditions.\n \n       if Present (Prags) then"}, {"sha": "1146b9dfb1e4fc4c293f1506af9c10b197f4849e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -9046,6 +9046,110 @@ package body Sem_Util is\n       end if;\n    end Has_Enabled_Property;\n \n+   -------------------------------------\n+   -- Has_Full_Default_Initialization --\n+   -------------------------------------\n+\n+   function Has_Full_Default_Initialization (Typ : Entity_Id) return Boolean is\n+      Arg  : Node_Id;\n+      Comp : Entity_Id;\n+      Prag : Node_Id;\n+\n+   begin\n+      --  A private type and its full view is fully default initialized when it\n+      --  is subject to pragma Default_Initial_Condition without an argument or\n+      --  with a non-null argument. Since any type may act as the full view of\n+      --  a private type, this check must be performed prior to the specialized\n+      --  tests below.\n+\n+      if Has_Default_Init_Cond (Typ)\n+        or else Has_Inherited_Default_Init_Cond (Typ)\n+      then\n+         Prag := Get_Pragma (Typ, Pragma_Default_Initial_Condition);\n+\n+         --  Pragma Default_Initial_Condition must be present if one of the\n+         --  related entity flags is set.\n+\n+         pragma Assert (Present (Prag));\n+         Arg := First (Pragma_Argument_Associations (Prag));\n+\n+         --  A non-null argument guarantees full default initialization\n+\n+         if Present (Arg) then\n+            return Nkind (Arg) /= N_Null;\n+\n+         --  Otherwise the missing argument defaults the pragma to \"True\" which\n+         --  is considered a non-null argument (see above).\n+\n+         else\n+            return True;\n+         end if;\n+      end if;\n+\n+      --  A scalar type is fully default initialized if it is subject to aspect\n+      --  Default_Value.\n+\n+      if Is_Scalar_Type (Typ) then\n+         return Has_Default_Aspect (Typ);\n+\n+      --  An array type is fully default initialized if its element type is\n+      --  scalar and the array type carries aspect Default_Component_Value or\n+      --  the element type is fully default initialized.\n+\n+      elsif Is_Array_Type (Typ) then\n+         return\n+           Has_Default_Aspect (Typ)\n+             or else Has_Full_Default_Initialization (Component_Type (Typ));\n+\n+      --  A protected type, record type or type extension is fully default\n+      --  initialized if all its components either carry an initialization\n+      --  expression or have a type that is fully default initialized. The\n+      --  parent type of a type extension must be fully default initialized.\n+\n+      elsif Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n+\n+         --  Inspect all entities defined in the scope of the type, looking for\n+         --  uninitialized components.\n+\n+         Comp := First_Entity (Typ);\n+         while Present (Comp) loop\n+            if Ekind (Comp) = E_Component\n+              and then Comes_From_Source (Comp)\n+              and then No (Expression (Parent (Comp)))\n+              and then not Has_Full_Default_Initialization (Etype (Comp))\n+            then\n+               return False;\n+            end if;\n+\n+            Next_Entity (Comp);\n+         end loop;\n+\n+         --  Ensure that the parent type of a type extension is fully default\n+         --  initialized.\n+\n+         if Etype (Typ) /= Typ\n+           and then not Has_Full_Default_Initialization (Etype (Typ))\n+         then\n+            return False;\n+         end if;\n+\n+         --  If we get here, then all components and parent portion are fully\n+         --  default initialized.\n+\n+         return True;\n+\n+      --  A task type is fully default initialized by default\n+\n+      elsif Is_Task_Type (Typ) then\n+         return True;\n+\n+      --  Otherwise the type is not fully default initialized\n+\n+      else\n+         return False;\n+      end if;\n+   end Has_Full_Default_Initialization;\n+\n    --------------------\n    -- Has_Infinities --\n    --------------------"}, {"sha": "d8a9b52d34aa5cf08f310ddcc77af79fbf623a47", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -1034,6 +1034,19 @@ package Sem_Util is\n    --  Determine whether subprogram Subp_Id has an effectively volatile formal\n    --  parameter or returns an effectively volatile value.\n \n+   function Has_Full_Default_Initialization (Typ : Entity_Id) return Boolean;\n+   --  Determine whether type Typ defines \"full default initialization\" as\n+   --  specified by SPARK RM 3.1. To qualify as such, the type must be\n+   --    * A scalar type with specified Default_Value\n+   --    * An array-of-scalar type with specified Default_Component_Value\n+   --    * An array type whose element type defines full default initialization\n+   --    * A protected type, record type or type extension whose components\n+   --      either include a default expression or have a type which defines\n+   --      full default initialization. In the case of type extensions, the\n+   --      parent type defines full default initialization.\n+   --   * A task type\n+   --   * A private type whose Default_Initial_Condition is non-null\n+\n    function Has_Infinities (E : Entity_Id) return Boolean;\n    --  Determines if the range of the floating-point type E includes\n    --  infinities. Returns False if E is not a floating-point type."}, {"sha": "f02234f9d14a3cc380e17dfc684c34f747eadddc", "filename": "gcc/ada/spark_xrefs.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fspark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f55088db5038881cc4836ba600edb1bb8fe0141/gcc%2Fada%2Fspark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.ads?ref=1f55088db5038881cc4836ba600edb1bb8fe0141", "patch": "@@ -200,7 +200,7 @@ package SPARK_Xrefs is\n    --  not relate to Generated Globals.\n \n    --  The processing (reading and writing) of this section happens in\n-   --  package Flow_Computed_Globals (from the SPARK 2014 sources), for\n+   --  package Flow_Generated_Globals (from the SPARK 2014 sources), for\n    --  further information please refer there.\n \n    ----------------"}]}