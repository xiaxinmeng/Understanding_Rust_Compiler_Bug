{"sha": "ea28bb0b9da3f70832bb599b298f2ae019b83a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyOGJiMGI5ZGEzZjcwODMyYmI1OTliMjk4ZjJhZTAxOWI4M2ExNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-04-25T15:51:57Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-04-25T15:51:57Z"}, "message": "re PR tree-optimization/57066 (std::logb(-inf) returns wrong value)\n\n\tPR tree-optimization/57066\n        * builtins.c (fold_builtin_logb): Return +Inf for -Inf.\n\n        * gcc.dg/torture/builtin-logb-1.c: Adjust testcase.\n\nFrom-SVN: r198308", "tree": {"sha": "e3d276f447b6fd69f6286da14e514a8a6e73b76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3d276f447b6fd69f6286da14e514a8a6e73b76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea28bb0b9da3f70832bb599b298f2ae019b83a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea28bb0b9da3f70832bb599b298f2ae019b83a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea28bb0b9da3f70832bb599b298f2ae019b83a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea28bb0b9da3f70832bb599b298f2ae019b83a15/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96659611d2076dbae333a6a85ca55da7b0a32298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96659611d2076dbae333a6a85ca55da7b0a32298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96659611d2076dbae333a6a85ca55da7b0a32298"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "41a11e35bd3ba8c082b7ff7b552f4f89506dee88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea28bb0b9da3f70832bb599b298f2ae019b83a15", "patch": "@@ -1,3 +1,8 @@\n+2013-04-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/57066\n+        * builtins.c (fold_builtin_logb): Return +Inf for -Inf.\n+\n 2013-04-25  James Greenhalgh  <jame.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (neg<mode>2): Use VDQ iterator."}, {"sha": "1fbd2f32eddf80ccf4fe8cefa1dcbbac88aa235a", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ea28bb0b9da3f70832bb599b298f2ae019b83a15", "patch": "@@ -9698,7 +9698,16 @@ fold_builtin_logb (location_t loc, tree arg, tree rettype)\n       case rvc_inf:\n \t/* If arg is Inf or NaN and we're logb, return it.  */\n \tif (TREE_CODE (rettype) == REAL_TYPE)\n-\t  return fold_convert_loc (loc, rettype, arg);\n+\t  {\n+\t    /* For logb(-Inf) we have to return +Inf.  */\n+\t    if (real_isinf (value) && real_isneg (value))\n+\t      {\n+\t\tREAL_VALUE_TYPE tem;\n+\t\treal_inf (&tem);\n+\t\treturn build_real (rettype, tem);\n+\t      }\n+\t    return fold_convert_loc (loc, rettype, arg);\n+\t  }\n \t/* Fall through... */\n       case rvc_zero:\n \t/* Zero may set errno and/or raise an exception for logb, also"}, {"sha": "bcfc726fbb267caa38243c512e25657ba1b3b84c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea28bb0b9da3f70832bb599b298f2ae019b83a15", "patch": "@@ -1,3 +1,8 @@\n+2013-04-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/57066\n+        * gcc.dg/torture/builtin-logb-1.c: Adjust testcase.\n+\n 2013-04-25  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Tejas Belagod  <tejas.belagod@arm.com>\n "}, {"sha": "d759d1c6c8ef671a14097b2d4c6b90523b2c6ded", "filename": "gcc/testsuite/gcc.dg/torture/builtin-logb-1.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea28bb0b9da3f70832bb599b298f2ae019b83a15/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c?ref=ea28bb0b9da3f70832bb599b298f2ae019b83a15", "patch": "@@ -48,25 +48,25 @@ extern void link_error(int);\n /* Test if FUNCRES(FUNC(NEG FUNCARG(ARGARG))) is false.  Check the\n    sign as well.  */\n #ifndef __SPU__\n-#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n+#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES,NEG2) do { \\\n   if (!__builtin_##FUNCRES##f(__builtin_##FUNC(NEG __builtin_##FUNCARG##f(ARGARG))) \\\n-      || CKSGN_F(__builtin_##FUNC##f(NEG __builtin_##FUNCARG##f(ARGARG)), NEG __builtin_##FUNCARG##f(ARGARG))) \\\n+      || CKSGN_F(__builtin_##FUNC##f(NEG __builtin_##FUNCARG##f(ARGARG)), NEG2 __builtin_##FUNCARG##f(ARGARG))) \\\n     link_error(__LINE__); \\\n   if (!__builtin_##FUNCRES(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG))) \\\n-      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG)), NEG __builtin_##FUNCARG(ARGARG))) \\\n+      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG)), NEG2 __builtin_##FUNCARG(ARGARG))) \\\n     link_error(__LINE__); \\\n   if (!__builtin_##FUNCRES##l(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG))) \\\n-      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG2 __builtin_##FUNCARG##l(ARGARG))) \\\n     link_error(__LINE__); \\\n   } while (0)\n #else\n-#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n+#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES,NEG2) do { \\\n   /* SPU single-precision floating point format does not support Inf or Nan.  */ \\\n   if (!__builtin_##FUNCRES(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG))) \\\n-      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG)), NEG __builtin_##FUNCARG(ARGARG))) \\\n+      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG)), NEG2 __builtin_##FUNCARG(ARGARG))) \\\n     link_error(__LINE__); \\\n   if (!__builtin_##FUNCRES##l(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG))) \\\n-      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG2 __builtin_##FUNCARG##l(ARGARG))) \\\n     link_error(__LINE__); \\\n   } while (0)\n #endif\n@@ -173,15 +173,15 @@ foo(void)\n \n   /* Test for f(+-Inf) -> +-Inf and f(+-NaN) -> +-NaN, regardless of\n      the radix.  */\n-  TESTIT3 (logb, ,inf, , isinf);\n-  TESTIT3 (logb, - ,inf, , isinf);\n-  TESTIT3 (logb,  ,nan, \"\", isnan);\n-  TESTIT3 (logb, - ,nan, \"\", isnan);\n-\n-  TESTIT3 (significand, ,inf, , isinf);\n-  TESTIT3 (significand, - ,inf, , isinf);\n-  TESTIT3 (significand,  ,nan, \"\", isnan);\n-  TESTIT3 (significand, - ,nan, \"\", isnan);\n+  TESTIT3 (logb, ,inf, , isinf, );\n+  TESTIT3 (logb, - ,inf, , isinf, );\n+  TESTIT3 (logb,  ,nan, \"\", isnan, );\n+  TESTIT3 (logb, - ,nan, \"\", isnan, -);\n+\n+  TESTIT3 (significand, ,inf, , isinf, );\n+  TESTIT3 (significand, - ,inf, , isinf, -);\n+  TESTIT3 (significand,  ,nan, \"\", isnan, );\n+  TESTIT3 (significand, - ,nan, \"\", isnan, -);\n }\n \n int main()"}]}