{"sha": "849107c128378779f133c435d3f76d45b599361b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5MTA3YzEyODM3ODc3OWYxMzNjNDM1ZDNmNzZkNDViNTk5MzYxYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-09-09T13:16:44Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-09-09T13:16:44Z"}, "message": "re PR target/57735 (ICE with -mtune=xscale (error: could not split insn) when building webkit)\n\n2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR target/57735\n\t* g++.dg/ext/pr57735.C: New test.\n\nFrom-SVN: r202398", "tree": {"sha": "61323eed66de3e007b2f654e2cd75169bfda2b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61323eed66de3e007b2f654e2cd75169bfda2b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/849107c128378779f133c435d3f76d45b599361b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849107c128378779f133c435d3f76d45b599361b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849107c128378779f133c435d3f76d45b599361b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849107c128378779f133c435d3f76d45b599361b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "088c5368f1f9266a10b900b3ea290ca65b6908a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088c5368f1f9266a10b900b3ea290ca65b6908a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088c5368f1f9266a10b900b3ea290ca65b6908a9"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "9726eb6655f78ea6bc16d35c0199b6f9be740f90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849107c128378779f133c435d3f76d45b599361b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849107c128378779f133c435d3f76d45b599361b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=849107c128378779f133c435d3f76d45b599361b", "patch": "@@ -1,3 +1,8 @@\n+2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/57735\n+\t* g++.dg/ext/pr57735.C: New test.\n+\n 2013-09-09  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/58294"}, {"sha": "0eb95006dda418e961c820e737ee135ceb2084b7", "filename": "gcc/testsuite/g++.dg/ext/pr57735.C", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849107c128378779f133c435d3f76d45b599361b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57735.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849107c128378779f133c435d3f76d45b599361b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57735.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57735.C?ref=849107c128378779f133c435d3f76d45b599361b", "patch": "@@ -0,0 +1,145 @@\n+/* { dg-do compile { target arm*-*-* } } */\n+/* { dg-options \"-march=armv5te -marm  -mtune=xscale -mfloat-abi=soft -O1\" } */\n+\n+typedef unsigned int size_t;\n+__extension__\n+typedef long long int int64_t;\n+namespace WTF {\n+    template<typename T> class RefPtr {\n+    public:\n+        inline T* operator->() const { return m_ptr; }\n+        T* m_ptr;\n+    };\n+}\n+using WTF::RefPtr;\n+namespace JSC {\n+    class ExecState;\n+    class JSString;\n+    typedef int64_t EncodedJSValue;\n+    class JSValue {\n+    public:\n+        static EncodedJSValue encode(JSValue);\n+        JSString* toString(ExecState*) const;\n+    };\n+}\n+typedef unsigned char LChar;\n+    typedef short unsigned int UChar;\n+namespace WTF {\n+    template<typename T, size_t inlineCapacity = 0>\n+    class Vector {\n+    public:\n+        template<typename U> bool tryAppend(const U*, size_t);\n+    };\n+}\n+using WTF::Vector;\n+namespace WTF {\n+template<typename CharType> inline bool isASCIIDigit(CharType c)\n+{\n+}\n+template<typename CharType> inline bool isASCIIHexDigit(CharType c)\n+{\n+    return isASCIIDigit(c) || ((c | 0x20) >= 'a' && (c | 0x20) <= 'f');\n+}\n+    class StringImpl;\n+}\n+using WTF::StringImpl;\n+namespace WTF {\n+class StringImpl {\n+public:\n+    unsigned length() const { return m_length; }\n+    unsigned m_length;\n+};\n+}\n+namespace JSC {\n+    class Register {\n+    };\n+class UString {\n+public:\n+    unsigned length() const\n+    {\n+        return m_impl->length();\n+    }\n+    const LChar* characters8() const\n+    {\n+    }\n+    RefPtr<StringImpl> m_impl;\n+};\n+    class ExecState : private Register {\n+    public:\n+        JSValue argument(size_t argument)\n+        {\n+        }\n+    };\n+    class JSCell {\n+    };\n+    class JSString : public JSCell {\n+    public:\n+        const UString& value(ExecState*) const;\n+    };\n+class JSStringBuilder {\n+public:\n+    void append(const UChar u)\n+    {\n+        m_okay &= buffer16.tryAppend(&u, 1);\n+    }\n+    Vector<UChar, 64> buffer16;\n+    bool m_okay;\n+};\n+template <typename T>\n+class Lexer {\n+public:\n+    static unsigned char convertHex(int c1, int c2);\n+};\n+}\n+namespace WTF {\n+namespace Unicode {\n+    int UTF8SequenceLength(char);\n+    int decodeUTF8Sequence(const char*);\n+}\n+}\n+using namespace WTF;\n+using namespace Unicode;\n+namespace JSC {\n+template <typename CharType>\n+static JSValue decode(ExecState* exec, const CharType* characters, int length, const char* doNotUnescape, bool strict)\n+{\n+    JSStringBuilder builder;\n+    int k = 0;\n+    UChar u = 0;\n+    while (k < length) {\n+        const CharType* p = characters + k;\n+        CharType c = *p;\n+        if (c == '%') {\n+            int charLen = 0;\n+            if (k <= length - 3 && isASCIIHexDigit(p[1]) && isASCIIHexDigit(p[2])) {\n+                const char b0 = Lexer<CharType>::convertHex(p[1], p[2]);\n+                const int sequenceLen = UTF8SequenceLength(b0);\n+                if (sequenceLen && k <= length - sequenceLen * 3) {\n+                    charLen = sequenceLen * 3;\n+                    char sequence[5];\n+                    if (charLen != 0) {\n+                        const int character = decodeUTF8Sequence(sequence);\n+                        if (character < 0 || character >= 0x110000)\n+                            charLen = 0;\n+                        else if (character >= 0x10000) {\n+                            builder.append(static_cast<UChar>(0xD800 | ((character - 0x10000) >> 10)));\n+                        } else\n+                            u = static_cast<UChar>(character);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+static JSValue decode(ExecState* exec, const char* doNotUnescape, bool strict)\n+{\n+    UString str = exec->argument(0).toString(exec)->value(exec);\n+        return decode(exec, str.characters8(), str.length(), doNotUnescape, strict);\n+}\n+EncodedJSValue globalFuncDecodeURI(ExecState* exec)\n+{\n+    static const char do_not_unescape_when_decoding_URI[] =\n+        \"#$&+,/:;=?@\";\n+    return JSValue::encode(decode(exec, do_not_unescape_when_decoding_URI, true));\n+}\n+}"}]}