{"sha": "0cac82a0d30c211d3d0b093df4f5452cec11ef06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhYzgyYTBkMzBjMjExZDNkMGIwOTNkZjRmNTQ1MmNlYzExZWYwNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-16T17:11:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-16T17:11:38Z"}, "message": "pr45679-1_0.C: New file.\n\n\t* g++.dg/lto/pr45679-1_0.C: New file.\n\t* g++.dg/lto/pr45679-1_1.C: New file.\n\t* g++.dg/lto/pr45679-0_0.C: New file.\n\t* g++.dg/lto/pr45679-0_1.C: New file.\n\t* lto-cgraph.c (lto_output_node): Fix handling of clones.\n\t* ipa.c (cgraph_remove_unreachabloe_nodes): Fix handling of\n\tunreachable clones with reachable clones.\n\t* tree-inline.c (copy_bb): Fix sanity checking when producing\n\tunreachable clone.\n\nFrom-SVN: r164344", "tree": {"sha": "2a2125a45a84290bd78aea1dd0bd4f7f0e06dafc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a2125a45a84290bd78aea1dd0bd4f7f0e06dafc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cac82a0d30c211d3d0b093df4f5452cec11ef06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cac82a0d30c211d3d0b093df4f5452cec11ef06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cac82a0d30c211d3d0b093df4f5452cec11ef06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cac82a0d30c211d3d0b093df4f5452cec11ef06/comments", "author": null, "committer": null, "parents": [{"sha": "5ee996a2c62317d11b9ef0df4e2d7a1ac28d5759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee996a2c62317d11b9ef0df4e2d7a1ac28d5759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee996a2c62317d11b9ef0df4e2d7a1ac28d5759"}], "stats": {"total": 371, "additions": 359, "deletions": 12}, "files": [{"sha": "72f359191e58a119854a22f48005c7308841fd83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -1,3 +1,11 @@\n+2010-09-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-cgraph.c (lto_output_node): Fix handling of clones.\n+\t* ipa.c (cgraph_remove_unreachabloe_nodes): Fix handling of\n+\tunreachable clones with reachable clones.\n+\t* tree-inline.c (copy_bb): Fix sanity checking when producing\n+\tunreachable clone.\n+\n 2010-09-16  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m32r/m32r.c (TARGET_MEMORY_MOVE_COSTS): Remove."}, {"sha": "8c0ca86d59de196d3611f1aa2b6a073406ac73bb", "filename": "gcc/ipa.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -407,22 +407,26 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t\t  if (!clone)\n \t\t    {\n \t\t      cgraph_release_function_body (node);\n-\t\t      node->analyzed = false;\n \t\t      node->local.inlinable = false;\n+\t\t      if (node->prev_sibling_clone)\n+\t\t\tnode->prev_sibling_clone->next_sibling_clone = node->next_sibling_clone;\n+\t\t      else if (node->clone_of)\n+\t\t\tnode->clone_of->clones = node->next_sibling_clone;\n+\t\t      if (node->next_sibling_clone)\n+\t\t\tnode->next_sibling_clone->prev_sibling_clone = node->prev_sibling_clone;\n+#ifdef ENABLE_CHECKING\n+\t\t      if (node->clone_of)\n+\t\t\tnode->former_clone_of = node->clone_of->decl;\n+#endif\n+\t\t      node->clone_of = NULL;\n+\t\t      node->next_sibling_clone = NULL;\n+\t\t      node->prev_sibling_clone = NULL;\n \t\t    }\n \t\t  else\n \t\t    gcc_assert (!clone->in_other_partition);\n+\t\t  node->analyzed = false;\n \t\t  cgraph_node_remove_callees (node);\n \t\t  ipa_remove_all_references (&node->ref_list);\n-\t\t  if (node->prev_sibling_clone)\n-\t\t    node->prev_sibling_clone->next_sibling_clone = node->next_sibling_clone;\n-\t\t  else if (node->clone_of)\n-\t\t    node->clone_of->clones = node->next_sibling_clone;\n-\t\t  if (node->next_sibling_clone)\n-\t\t    node->next_sibling_clone->prev_sibling_clone = node->prev_sibling_clone;\n-\t\t  node->clone_of = NULL;\n-\t\t  node->next_sibling_clone = NULL;\n-\t\t  node->prev_sibling_clone = NULL;\n \t\t}\n \t      else\n \t\tcgraph_remove_node (node);"}, {"sha": "5410e8fcbc58ca46b68a85d03202ccb4e72b6404", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -447,11 +447,14 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \n   clone_of = node->clone_of;\n   while (clone_of\n-\t && (ref = lto_cgraph_encoder_lookup (encoder, node->clone_of)) == LCC_NOT_FOUND)\n+\t && (ref = lto_cgraph_encoder_lookup (encoder, clone_of)) == LCC_NOT_FOUND)\n     if (clone_of->prev_sibling_clone)\n       clone_of = clone_of->prev_sibling_clone;\n     else\n       clone_of = clone_of->clone_of;\n+\n+  if (LTO_cgraph_analyzed_node)\n+    gcc_assert (clone_of || !node->clone_of);\n   if (!clone_of)\n     lto_output_sleb128_stream (ob->main_stream, LCC_NOT_FOUND);\n   else"}, {"sha": "caceb8f9faacaf5c97733dcdfeacc469b95782ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -1,3 +1,10 @@\n+2010-09-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/lto/pr45679-1_0.C: New file.\n+\t* g++.dg/lto/pr45679-1_1.C: New file.\n+\t* g++.dg/lto/pr45679-0_0.C: New file.\n+\t* g++.dg/lto/pr45679-0_1.C: New file.\n+\n 2010-09-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45674"}, {"sha": "05f7b550d4d9cd74fd900b2538d5994f004a0400", "filename": "gcc/testsuite/g++.dg/lto/pr45679-1_0.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_0.C?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -0,0 +1,28 @@\n+// { dg-lto-do link }\n+// { dg-lto-options {{-O3 -Wno-multichar}} } \n+// { dg-extra-ld-options \"-fwhopr -r -nostdlib\" }\n+\n+     extern \"C\" {\n+   typedef struct __locale_struct {\n+  }\n+   *__locale_t;\n+   }\n+       typedef void * POVMSContext;\n+       struct POVMSData {\n+   };\n+        int POVMS_OpenContext (POVMSContext *contextrefptr);\n+       enum {\n+    kPOVMsgIdent_InitInfo = 'InIn',  kPOVMsgIdent_RenderOptions = 'ROpt',  kPOVMsgIdent_RenderAll = 'RAll',  kPOVMsgIdent_RenderArea = 'RAre',  kPOVMsgIdent_RenderPause = 'RPau',  kPOVMsgIdent_RenderStop = 'RSto',  kPOVMsgIdent_RenderStarted = 'RRun',  kPOVMsgIdent_RenderDone = 'REnd',  kPOVMsgIdent_FrameStatistics = 'FSta',  kPOVMsgIdent_ParseStatistics = 'PSta',  kPOVMsgIdent_RenderStatistics = 'RSta',  kPOVMsgIdent_Progress = 'Prog',  kPOVMsgIdent_Warning = 'Warn',  kPOVMsgIdent_Error = 'ErrW',  kPOVMsgIdent_FatalError = 'ErrF',  kPOVMsgIdent_Debug = 'Dbug' };\n+       namespace pov {\n+   }\n+       using namespace pov;\n+       namespace pov {\n+   int pre_init_flag = 0;\n+   }\n+       POVMSContext POVMS_Render_Context = __null;\n+       void povray_init() {\n+      if (pre_init_flag == 0)    {\n+        int err;\n+        err = POVMS_OpenContext(&POVMS_Render_Context);\n+     }\n+   }"}, {"sha": "c5e2db061fb77d0b3f6df7d68117a648cff27758", "filename": "gcc/testsuite/g++.dg/lto/pr45679-1_1.C", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-1_1.C?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -0,0 +1,77 @@\n+    extern \"C\" {\n+    typedef struct _IO_FILE FILE;\n+    extern struct _IO_FILE *stderr;\n+    extern int fprintf (FILE *__restrict __stream,       __const char *__restrict __format, ...);\n+    }\n+      enum {\n+        kPOVMSObjectClassID = 'OCLA',     kPOVMSMessageClassID = 'MCLA',     kPOVMSMessageIdentID = 'MIDE',     kPOVMSSourceAddressID = 'MSRC',     kPOVMSDestinationAddressID = 'MDST',     kPOVMSMessageTimeoutID = 'TOUT',     kPOVMSMessageErrorID = 'MERR' };\n+      typedef void * POVMSContext;\n+      typedef struct POVMSData POVMSObject, *POVMSObjectPtr;\n+      typedef struct POVMSData POVMSAttribute, *POVMSAttributePtr;\n+      struct POVMSData {\n+        union     {\n+           struct POVMSNode *root;\n+       };\n+    };\n+      struct POVMSNode {\n+        struct POVMSNode *next;\n+        unsigned int key;\n+        struct POVMSData data;\n+    };\n+       int POVMSObject_New (POVMSObjectPtr object, unsigned int objclass);\n+       int POVMSObject_Set (POVMSObjectPtr object, POVMSAttributePtr attr, unsigned int key);\n+       int POVMSAttr_Copy (POVMSAttributePtr sourceattr, POVMSAttributePtr destattr);\n+       int POVMSUtil_GetType (POVMSObjectPtr object, unsigned int key, unsigned int *typevalue);\n+      namespace pov_base {\n+    enum {\n+    kNoError = 0,  kNoErr = kNoError,  kParamErr = -1,  kMemFullErr = -2,  kOutOfMemoryErr = kMemFullErr,  kInvalidDataSizeErr = -3,  kCannotHandleDataErr = -4,  kNullPointerErr = -5,  kChecksumErr = -6,  kParseErr = -7,  kCannotOpenFileErr = -8,  kInvalidDestAddrErr = -9,  kCannotConnectErr = -10,  kDisconnectedErr = -11,  kHostDisconnectedErr = -12,  kNetworkDataErr = -13,  kNetworkConnectionErr = -14,  kObjectAccessErr = -15,  kVersionErr = -16,  kFileDataErr = -17,  kAuthorisationErr = -18,  kDataTypeErr = -19,  kTimeoutErr = -20,  kInvalidContextErr = -21 };\n+    }\n+      using namespace pov_base;\n+      struct POVMSContextData {\n+    };\n+      int POVMS_AssertFunction (int cond, const char *str, const char *filename, int line);\n+       int POVMS_OpenContext(POVMSContext *contextrefptr) {\n+     POVMSContextData *context = __null;\n+     if(contextrefptr == __null)   return kParamErr;\n+     if(POVMS_AssertFunction(context != __null, \"POVMS_Open_Context failed, out of memory\", \"povms.cpp\", 283) == false)   return kMemFullErr;\n+     return kNoErr;\n+    }\n+      int POVMS_AssertFunction(int cond, const char *str, const char *filename, int line) {\n+     if(cond == false)  {\n+     fprintf(stderr, \"POVMS_ASSERT failed in %s line %d: %s\\n\", filename, (int)line, str);\n+    }\n+    }\n+       int POVMSObject_Copy(POVMSObjectPtr sourceobject, POVMSObjectPtr destobject) {\n+     POVMSNode *cur = __null;\n+     POVMSAttribute attr;\n+     unsigned int t;\n+     int ret = kNoErr;\n+     if(sourceobject == destobject)   return kParamErr;\n+     if(POVMSUtil_GetType(sourceobject, kPOVMSObjectClassID, &t) != kNoErr)   return kObjectAccessErr;\n+     if(POVMSObject_New(destobject, t) != kNoErr)   return kObjectAccessErr;\n+     for(cur = sourceobject->root;\n+    cur != __null;\n+    cur = cur->next)  {\n+     if(POVMS_AssertFunction(POVMSAttr_Copy(&(cur->data), &attr) == kNoErr, \"POVMSObject_Copy failed, out of memory\", \"povms.cpp\", 2028) == false)   {\n+   }\n+     if(POVMS_AssertFunction(POVMSObject_Set(destobject, &attr, cur->key) == kNoErr, \"POVMSObject_Copy failed, out of memory\", \"povms.cpp\", 2034) == false)   {\n+   }\n+    }\n+     return ret;\n+    }\n+       int POVMSObject_Merge(POVMSObjectPtr sourceobject, POVMSObjectPtr destobject) {\n+     POVMSNode *cur = __null;\n+     POVMSAttribute attr;\n+     unsigned int t1, t2;\n+     int ret = kNoErr;\n+     if(destobject == __null)   return kParamErr;\n+     if(POVMSUtil_GetType(sourceobject, kPOVMSObjectClassID, &t1) != kNoErr)   return kObjectAccessErr;\n+     if(POVMSUtil_GetType(sourceobject, kPOVMSObjectClassID, &t2) != kNoErr)   return kObjectAccessErr;\n+     for(cur = sourceobject->root;\n+    cur != __null;\n+    cur = cur->next)  {\n+     if(POVMS_AssertFunction(POVMSObject_Set(destobject, &attr, cur->key) == kNoErr, \"POVMSObject_Merge failed, out of memory\", \"povms.cpp\", 2090) == false)   {\n+   }\n+    }\n+     return ret;\n+    }"}, {"sha": "dcc53a63eb86a74be0fe40c9567bfb2b50e63d89", "filename": "gcc/testsuite/g++.dg/lto/pr45679-2_0.C", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_0.C?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -0,0 +1,119 @@\n+// { dg-lto-do link }\n+// { dg-lto-options {{-O3 -Wno-multichar}} } \n+// { dg-extra-ld-options \"-fwhopr -r -nostdlib\" }\n+    extern \"C\" {\n+  typedef struct {\n+    union   {\n+   }\n+  __value;\n+  }\n+  __mbstate_t;\n+  struct _IO_marker {\n+  };\n+  extern \"C\" {\n+    }\n+  };\n+    namespace pov_base {\n+  class IOBase {\n+  };\n+  }\n+    namespace pov {\n+  typedef double VECTOR[3];\n+  enum {\n+   X = 0,  Y = 1,  Z = 2,  T = 3 };\n+  inline void Assign_Vector(VECTOR d, VECTOR s) {\n+  }\n+  typedef float BBOX_VAL;\n+  typedef BBOX_VAL BBOX_VECT[3];\n+  typedef struct Bounding_Box_Struct BBOX;\n+  struct Bounding_Box_Struct {\n+  };\n+  inline void Make_BBox_from_min_max(BBOX& BBox, BBOX_VECT mins, BBOX_VECT maxs) {\n+  }\n+  typedef long long COUNTER;\n+  inline double DBL_Counter(COUNTER x) {\n+  }\n+  struct Image_Struct {\n+    union   {\n+   }\n+  data;\n+  };\n+  struct Density_file_Data_Struct {\n+  union {\n+ }\n+  Vals;\n+  };\n+  struct Pigment_Struct {\n+  union {\n+ struct {\n+ }\n+ Brick;\n+ struct {\n+ }\n+ Fractal;\n+ struct {\n+ }\n+ Function;\n+ }\n+  Vals;\n+  };\n+  typedef enum shelltype {\n+     PRE_SCENE_SHL = 0,    PRE_FRAME_SHL,    POST_FRAME_SHL,    POST_SCENE_SHL,    USER_ABORT_SHL,    FATAL_SHL,    MAX_SHL }\n+  SHELLRET;\n+  }\n+    typedef void * POVMSContext;\n+    struct POVMSData {\n+  };\n+     int POVMS_OpenContext (POVMSContext *contextrefptr);\n+    namespace pov_base {\n+  enum {\n+   kFalseErr = 1,  kOutOfSyncErr = 2,  kNotNowErr = kOutOfSyncErr,  kQueueFullErr = 3 };\n+  }\n+    namespace pov_base {\n+  class OTextStream {\n+  };\n+  }\n+    enum {\n+   kPOVMsgClass_RenderControl = 'Ctrl',  kPOVMsgClass_RenderOutput = 'Outp',  kPOVMsgClass_IniOptions = 'IniO',  kPOVMsgClass_Miscellaneous = 'Misc' };\n+    namespace pov_base {\n+  class PlatformBase {\n+  };\n+  }\n+    class POVMS_Container {\n+    template<class T> void Read(T& stream)   {\n+    }\n+  };\n+    class POVMS_MessageReceiver {\n+   private:   class HandlerOO   {\n+    };\n+   protected:   template<class T> class MemberHandlerOO : public HandlerOO   {\n+    };\n+    class FunctionHandlerOO : public HandlerOO   {\n+    };\n+    template<class T> void InstallFront(unsigned int hclass, unsigned int hid, T *cptr, typename MemberHandlerOO<T>::MemberHandlerPtr hptr)   {\n+  }\n+  };\n+    namespace pov_base {\n+  class TextStreamBuffer {\n+  };\n+  }\n+    namespace pov_frontend {\n+  using namespace pov_base;\n+  class MessageOutput : public POVMS_MessageReceiver {\n+  };\n+  class DefaultPlatformBase : public PlatformBase {\n+  };\n+  }\n+    using namespace pov;\n+    namespace pov {\n+  int pre_init_flag = 0;\n+  }\n+    POVMSContext POVMS_Render_Context = __null;\n+    int main(int argc, char **argv) {\n+  }\n+    void povray_init() {\n+     if (pre_init_flag == 0)    {\n+        int err;\n+        err = POVMS_OpenContext(&POVMS_Render_Context);\n+     }\n+  }"}, {"sha": "23ba08aecfc6f87f9dc831381938bdcdfd3e4b88", "filename": "gcc/testsuite/g++.dg/lto/pr45679-2_1.C", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr45679-2_1.C?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -0,0 +1,100 @@\n+extern \"C\" {\n+   typedef struct __locale_struct {\n+   }\n+   *__locale_t;\n+   union wait   {\n+     };\n+   extern \"C\" {\n+   }\n+   typedef struct _IO_FILE FILE;\n+   typedef struct {\n+     union   {\n+    }\n+   __value;\n+   }\n+   _G_fpos64_t;\n+   struct _IO_marker {\n+   }\n+   _IO_cookie_io_functions_t;\n+   extern struct _IO_FILE *stderr;\n+   extern int fprintf (FILE *__restrict __stream,       __const char *__restrict __format, ...);\n+   }\n+    enum {\n+       kPOVMSObjectClassID = 'OCLA',     kPOVMSMessageClassID = 'MCLA',     kPOVMSMessageIdentID = 'MIDE',     kPOVMSSourceAddressID = 'MSRC',     kPOVMSDestinationAddressID = 'MDST',     kPOVMSMessageTimeoutID = 'TOUT',     kPOVMSMessageErrorID = 'MERR' };\n+    typedef void * POVMSContext;\n+    typedef struct POVMSData POVMSObject, *POVMSObjectPtr;\n+    typedef struct POVMSData POVMSAttribute, *POVMSAttributePtr;\n+    typedef struct POVMSData POVMSAttributeList, *POVMSAttributeListPtr;\n+    struct POVMSData {\n+       int size;\n+       union     {\n+           void *ptr;\n+           struct POVMSNode *root;\n+       };\n+   };\n+    struct POVMSNode {\n+       struct POVMSNode *next;\n+       unsigned int key;\n+       struct POVMSData data;\n+   };\n+     int POVMSObject_Set (POVMSObjectPtr object, POVMSAttributePtr attr, unsigned int key);\n+     int POVMSAttr_Copy (POVMSAttributePtr sourceattr, POVMSAttributePtr destattr);\n+     int POVMSUtil_GetType (POVMSObjectPtr object, unsigned int key, unsigned int *typevalue);\n+    namespace pov_base {\n+   enum {\n+    kNoError = 0,  kNoErr = kNoError,  kParamErr = -1,  kMemFullErr = -2,  kOutOfMemoryErr = kMemFullErr,  kInvalidDataSizeErr = -3,  kCannotHandleDataErr = -4,  kNullPointerErr = -5,  kChecksumErr = -6,  kParseErr = -7,  kCannotOpenFileErr = -8,  kInvalidDestAddrErr = -9,  kCannotConnectErr = -10,  kDisconnectedErr = -11,  kHostDisconnectedErr = -12,  kNetworkDataErr = -13,  kNetworkConnectionErr = -14,  kObjectAccessErr = -15,  kVersionErr = -16,  kFileDataErr = -17,  kAuthorisationErr = -18,  kDataTypeErr = -19,  kTimeoutErr = -20,  kInvalidContextErr = -21 };\n+   }\n+    using namespace pov_base;\n+    struct POVMSContextData {\n+   };\n+    int POVMS_AssertFunction (int cond, const char *str, const char *filename, int line);\n+     int POVMS_OpenContext(POVMSContext *contextrefptr) {\n+    POVMSContextData *context = __null;\n+    if(contextrefptr == __null)   return kParamErr;\n+    if(POVMS_AssertFunction(context != __null, \"POVMS_Open_Context failed, out of memory\", \"povms.cpp\", 283) == false)   return kMemFullErr;\n+    return kNoErr;\n+   }\n+    int POVMS_AssertFunction(int cond, const char *str, const char *filename, int line) {\n+    if(cond == false)  {\n+     fprintf(stderr, \"POVMS_ASSERT failed in %s line %d: %s\\n\", filename, (int)line, str);\n+    }\n+   }\n+     int POVMSObject_Copy(POVMSObjectPtr sourceobject, POVMSObjectPtr destobject) {\n+    POVMSNode *cur = __null;\n+    POVMSAttribute attr;\n+    unsigned int t1, t2;\n+    int ret = kNoErr;\n+    if(destobject == __null)   return kParamErr;\n+    if(POVMSUtil_GetType(sourceobject, kPOVMSObjectClassID, &t1) != kNoErr)   return kObjectAccessErr;\n+    if(POVMSUtil_GetType(sourceobject, kPOVMSObjectClassID, &t2) != kNoErr)   return kObjectAccessErr;\n+    if(t1 != t2)   return kDataTypeErr;\n+    for(cur = sourceobject->root;\n+   cur != __null;\n+   cur = cur->next)  {\n+     if(POVMS_AssertFunction(POVMSAttr_Copy(&(cur->data), &attr) == kNoErr, \"POVMSObject_Merge failed, out of memory\", \"povms.cpp\", 2084) == false)   {\n+    }\n+     if(POVMS_AssertFunction(POVMSObject_Set(destobject, &attr, cur->key) == kNoErr, \"POVMSObject_Merge failed, out of memory\", \"povms.cpp\", 2090) == false)   {\n+    }\n+    }\n+    return ret;\n+   }\n+     int POVMSObject_Set(POVMSObjectPtr object, POVMSAttributePtr attr, unsigned int key) {\n+   }\n+     int POVMSAttrList_Copy(POVMSAttributeListPtr sourcelist, POVMSAttributeListPtr destlist) {\n+    int cnt;\n+    int err = kNoErr;\n+    if(sourcelist == __null)   return kParamErr;\n+    if(destlist == __null)   return kParamErr;\n+    if(sourcelist == destlist)   return kParamErr;\n+    if(sourcelist->size < 0)   return kParamErr;\n+    if(sourcelist->size > 0)  {\n+     if(sourcelist->ptr != __null)   {\n+     if(POVMS_AssertFunction(destlist->ptr != __null, \"POVMSAttrList_Copy failed, out of memory\", \"povms.cpp\", 3020) == false)     return -1;\n+    }\n+     for(cnt = 0;\n+   cnt < sourcelist->size;\n+   cnt++)   {\n+    }\n+    }\n+    return err;\n+   }"}, {"sha": "2d3958f2c042201792f312922a44faff5c985c6d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cac82a0d30c211d3d0b093df4f5452cec11ef06/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0cac82a0d30c211d3d0b093df4f5452cec11ef06", "patch": "@@ -1741,7 +1741,8 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n \t\t     most common reason for missing edges).  */\n \t\t  gcc_assert (dest->needed || !dest->analyzed\n \t\t\t      || dest->address_taken\n-\t\t  \t      || !id->src_node->analyzed);\n+\t\t  \t      || !id->src_node->analyzed\n+\t\t\t      || !id->dst_node->analyzed);\n \t\t  if (id->transform_call_graph_edges == CB_CGE_MOVE_CLONES)\n \t\t    cgraph_create_edge_including_clones\n \t\t      (id->dst_node, dest, orig_stmt, stmt, bb->count,"}]}