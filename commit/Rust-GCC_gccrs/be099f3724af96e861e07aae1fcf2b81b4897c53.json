{"sha": "be099f3724af96e861e07aae1fcf2b81b4897c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwOTlmMzcyNGFmOTZlODYxZTA3YWFlMWZjZjJiODFiNDg5N2M1Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-10-02T10:55:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-10-02T10:55:33Z"}, "message": "dojump.h (do_jump): Delete.\n\n\t* dojump.h (do_jump): Delete.\n\t(do_jump_1): Likewise.\n\t(split_comparison): Move around.\n\t* dojump.c (do_jump): Make static.\n\t(do_jump_1): Likewise.\n\t(jumpifnot): Move around.\n\t(jumpifnot_1): Likewise.\n\t(jumpif): Likewise.\n\t(jumpif_1): Likewise.\n\t* expr.c (expand_expr_real_1): Call jumpif[not] instead of do_jump.\n\nFrom-SVN: r264781", "tree": {"sha": "1d5d4d1e2df98959771b82cc259421ee6b547483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d5d4d1e2df98959771b82cc259421ee6b547483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be099f3724af96e861e07aae1fcf2b81b4897c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be099f3724af96e861e07aae1fcf2b81b4897c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be099f3724af96e861e07aae1fcf2b81b4897c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be099f3724af96e861e07aae1fcf2b81b4897c53/comments", "author": null, "committer": null, "parents": [{"sha": "5d11b4bf36d7fc16f634a9d508ab5cc2ec47ab8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d11b4bf36d7fc16f634a9d508ab5cc2ec47ab8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d11b4bf36d7fc16f634a9d508ab5cc2ec47ab8d"}], "stats": {"total": 118, "additions": 66, "deletions": 52}, "files": [{"sha": "c930bd2007c98940963f7a484d43f70a26c9d12f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be099f3724af96e861e07aae1fcf2b81b4897c53", "patch": "@@ -1,3 +1,16 @@\n+2018-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dojump.h (do_jump): Delete.\n+\t(do_jump_1): Likewise.\n+\t(split_comparison): Move around.\n+\t* dojump.c (do_jump): Make static.\n+\t(do_jump_1): Likewise.\n+\t(jumpifnot): Move around.\n+\t(jumpifnot_1): Likewise.\n+\t(jumpif): Likewise.\n+\t(jumpif_1): Likewise.\n+\t* expr.c (expand_expr_real_1): Call jumpif[not] instead of do_jump.\n+\n 2018-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* reorg.c (make_return_insns): Use emit_copy_of_insn_after for the"}, {"sha": "9dccc7292a3d8ace45296d39603bbf3508df0aa3", "filename": "gcc/dojump.c", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=be099f3724af96e861e07aae1fcf2b81b4897c53", "patch": "@@ -38,6 +38,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n \n static bool prefer_and_bit_test (scalar_int_mode, int);\n+static void do_jump (tree, rtx_code_label *, rtx_code_label *,\n+\t\t     profile_probability);\n static void do_jump_by_parts_greater (scalar_int_mode, tree, tree, int,\n \t\t\t\t      rtx_code_label *, rtx_code_label *,\n \t\t\t\t      profile_probability);\n@@ -118,38 +120,6 @@ restore_pending_stack_adjust (saved_pending_stack_adjust *save)\n     }\n }\n \f\n-/* Expand conditional expressions.  */\n-\n-/* Generate code to evaluate EXP and jump to LABEL if the value is zero.  */\n-\n-void\n-jumpifnot (tree exp, rtx_code_label *label, profile_probability prob)\n-{\n-  do_jump (exp, label, NULL, prob.invert ());\n-}\n-\n-void\n-jumpifnot_1 (enum tree_code code, tree op0, tree op1, rtx_code_label *label,\n-\t     profile_probability prob)\n-{\n-  do_jump_1 (code, op0, op1, label, NULL, prob.invert ());\n-}\n-\n-/* Generate code to evaluate EXP and jump to LABEL if the value is nonzero.  */\n-\n-void\n-jumpif (tree exp, rtx_code_label *label, profile_probability prob)\n-{\n-  do_jump (exp, NULL, label, prob);\n-}\n-\n-void\n-jumpif_1 (enum tree_code code, tree op0, tree op1,\n-\t  rtx_code_label *label, profile_probability prob)\n-{\n-  do_jump_1 (code, op0, op1, NULL, label, prob);\n-}\n-\n /* Used internally by prefer_and_bit_test.  */\n \n static GTY(()) rtx and_reg;\n@@ -197,7 +167,7 @@ prefer_and_bit_test (scalar_int_mode mode, int bitnum)\n    OP0 CODE OP1 .  IF_FALSE_LABEL and IF_TRUE_LABEL like in do_jump.\n    PROB is probability of jump to if_true_label.  */\n \n-void\n+static void\n do_jump_1 (enum tree_code code, tree op0, tree op1,\n \t   rtx_code_label *if_false_label, rtx_code_label *if_true_label,\n \t   profile_probability prob)\n@@ -417,7 +387,7 @@ do_jump_1 (enum tree_code code, tree op0, tree op1,\n \n    PROB is probability of jump to if_true_label.  */\n \n-void\n+static void\n do_jump (tree exp, rtx_code_label *if_false_label,\n \t rtx_code_label *if_true_label, profile_probability prob)\n {\n@@ -946,6 +916,43 @@ split_comparison (enum rtx_code code, machine_mode mode,\n     }\n }\n \n+/* Generate code to evaluate EXP and jump to LABEL if the value is nonzero.\n+   PROB is probability of jump to LABEL.  */\n+\n+void\n+jumpif (tree exp, rtx_code_label *label, profile_probability prob)\n+{\n+  do_jump (exp, NULL, label, prob);\n+}\n+\n+/* Similar to jumpif but dealing with exploded comparisons of the type\n+   OP0 CODE OP1 .  LABEL and PROB are like in jumpif.  */\n+\n+void\n+jumpif_1 (enum tree_code code, tree op0, tree op1, rtx_code_label *label,\n+\t  profile_probability prob)\n+{\n+  do_jump_1 (code, op0, op1, NULL, label, prob);\n+}\n+\n+/* Generate code to evaluate EXP and jump to LABEL if the value is zero.\n+   PROB is probability of jump to LABEL.  */\n+\n+void\n+jumpifnot (tree exp, rtx_code_label *label, profile_probability prob)\n+{\n+  do_jump (exp, label, NULL, prob.invert ());\n+}\n+\n+/* Similar to jumpifnot but dealing with exploded comparisons of the type\n+   OP0 CODE OP1 .  LABEL and PROB are like in jumpifnot.  */\n+\n+void\n+jumpifnot_1 (enum tree_code code, tree op0, tree op1, rtx_code_label *label,\n+\t     profile_probability prob)\n+{\n+  do_jump_1 (code, op0, op1, label, NULL, prob.invert ());\n+}\n \n /* Like do_compare_and_jump but expects the values to compare as two rtx's.\n    The decision as to signed or unsigned comparison must be made by the caller."}, {"sha": "f948ee916e36eb15f46596f2db675dd77bcf563f", "filename": "gcc/dojump.h", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2Fdojump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2Fdojump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.h?ref=be099f3724af96e861e07aae1fcf2b81b4897c53", "patch": "@@ -56,29 +56,22 @@ extern void save_pending_stack_adjust (saved_pending_stack_adjust *);\n \n extern void restore_pending_stack_adjust (saved_pending_stack_adjust *);\n \n-/* Generate code to evaluate EXP and jump to LABEL if the value is zero.  */\n-extern void jumpifnot (tree exp, rtx_code_label *label,\n-\t\t       profile_probability prob);\n-extern void jumpifnot_1 (enum tree_code, tree, tree, rtx_code_label *,\n-\t\t\t profile_probability);\n+extern bool split_comparison (enum rtx_code, machine_mode,\n+\t\t\t      enum rtx_code *, enum rtx_code *);\n \n /* Generate code to evaluate EXP and jump to LABEL if the value is nonzero.  */\n extern void jumpif (tree exp, rtx_code_label *label, profile_probability prob);\n extern void jumpif_1 (enum tree_code, tree, tree, rtx_code_label *,\n \t\t      profile_probability);\n \n-/* Generate code to evaluate EXP and jump to IF_FALSE_LABEL if\n-   the result is zero, or IF_TRUE_LABEL if the result is one.  */\n-extern void do_jump (tree exp, rtx_code_label *if_false_label,\n-\t\t     rtx_code_label *if_true_label, profile_probability prob);\n-extern void do_jump_1 (enum tree_code, tree, tree, rtx_code_label *,\n-\t\t       rtx_code_label *, profile_probability);\n+/* Generate code to evaluate EXP and jump to LABEL if the value is zero.  */\n+extern void jumpifnot (tree exp, rtx_code_label *label,\n+\t\t       profile_probability prob);\n+extern void jumpifnot_1 (enum tree_code, tree, tree, rtx_code_label *,\n+\t\t\t profile_probability);\n \n extern void do_compare_rtx_and_jump (rtx, rtx, enum rtx_code, int,\n \t\t\t\t     machine_mode, rtx, rtx_code_label *,\n \t\t\t\t     rtx_code_label *, profile_probability);\n \n-extern bool split_comparison (enum rtx_code, machine_mode,\n-\t\t\t      enum rtx_code *, enum rtx_code *);\n-\n #endif /* GCC_DOJUMP_H */"}, {"sha": "03e5dc458e170d0de1df8db708fd9b623e1c117e", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be099f3724af96e861e07aae1fcf2b81b4897c53/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=be099f3724af96e861e07aae1fcf2b81b4897c53", "patch": "@@ -11155,10 +11155,11 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  {\n \t    rtx_code_label *label = gen_label_rtx ();\n \t    int value = TREE_CODE (rhs) == BIT_IOR_EXPR;\n-\t    do_jump (TREE_OPERAND (rhs, 1),\n-\t\t     value ? label : 0,\n-\t\t     value ? 0 : label,\n-\t\t     profile_probability::uninitialized ());\n+\t    profile_probability prob = profile_probability::uninitialized ();\n+ \t    if (value)\n+ \t      jumpifnot (TREE_OPERAND (rhs, 1), label, prob);\n+ \t    else\n+ \t      jumpif (TREE_OPERAND (rhs, 1), label, prob);\n \t    expand_assignment (lhs, build_int_cst (TREE_TYPE (rhs), value),\n \t\t\t       false);\n \t    do_pending_stack_adjust ();"}]}