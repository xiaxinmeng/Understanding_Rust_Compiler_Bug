{"sha": "43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyNzJiZjVmZDNkNjZiZjJmZDA1ZDExY2Y2NmRjMGQxMTE2YTcwMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2010-04-20T20:09:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2010-04-20T20:09:17Z"}, "message": "builtins.c (build_complex_cproj, [...]): New.\n\n        * builtins.c (build_complex_cproj, fold_builtin_cproj): New.\n        (fold_builtin_1): Fold builtin cproj.\n        * builtins.def (BUILT_IN_CPROJ, BUILT_IN_CPROJF, BUILT_IN_CPROJL):\n        Use ATTR_CONST_NOTHROW_LIST.\n\nFrom-SVN: r158573", "tree": {"sha": "69005f1c685a98a731edd08d1cb85b99b722570f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69005f1c685a98a731edd08d1cb85b99b722570f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/comments", "author": null, "committer": null, "parents": [{"sha": "5a80a1ddff8f6a6c5b7395a258361f8d46106657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a80a1ddff8f6a6c5b7395a258361f8d46106657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a80a1ddff8f6a6c5b7395a258361f8d46106657"}], "stats": {"total": 199, "additions": 196, "deletions": 3}, "files": [{"sha": "72c4c9a43cdfb5c5067faccb0acfcbe550d8fda1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "patch": "@@ -1,3 +1,10 @@\n+2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (build_complex_cproj, fold_builtin_cproj): New.\n+\t(fold_builtin_1): Fold builtin cproj.\n+\t* builtins.def (BUILT_IN_CPROJ, BUILT_IN_CPROJF, BUILT_IN_CPROJL):\n+\tUse ATTR_CONST_NOTHROW_LIST.\n+\n 2010-04-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ffs<mode>2): Macroize expander from ffs_cmove"}, {"sha": "8c3c8e0f4be21d2d89dd43eebfdcf4c91648e61a", "filename": "gcc/builtins.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "patch": "@@ -7042,6 +7042,50 @@ fold_builtin_cabs (location_t loc, tree arg, tree type, tree fndecl)\n   return NULL_TREE;\n }\n \n+/* Build a complex (inf +- 0i) for the result of cproj.  TYPE is the\n+   complex tree type of the result.  If NEG is true, the imaginary\n+   zero is negative.  */\n+\n+static tree\n+build_complex_cproj (tree type, bool neg)\n+{\n+  REAL_VALUE_TYPE rinf, rzero = dconst0;\n+  \n+  real_inf (&rinf);\n+  rzero.sign = neg;\n+  return build_complex (type, build_real (TREE_TYPE (type), rinf),\n+\t\t\tbuild_real (TREE_TYPE (type), rzero));\n+}\n+\n+/* Fold call to builtin cproj, cprojf or cprojl with argument ARG.  TYPE is the\n+   return type.  Return NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_cproj (location_t loc, tree arg, tree type)\n+{\n+  if (!validate_arg (arg, COMPLEX_TYPE)\n+      || TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) != REAL_TYPE)\n+    return NULL_TREE;\n+\n+  /* If there are no infinities, return arg.  */\n+  if (! HONOR_INFINITIES (TYPE_MODE (TREE_TYPE (type))))\n+    return non_lvalue_loc (loc, arg);\n+\n+  /* Calculate the result when the argument is a constant.  */\n+  if (TREE_CODE (arg) == COMPLEX_CST)\n+    {\n+      const REAL_VALUE_TYPE *real = TREE_REAL_CST_PTR (TREE_REALPART (arg));\n+      const REAL_VALUE_TYPE *imag = TREE_REAL_CST_PTR (TREE_IMAGPART (arg));\n+      \n+      if (real_isinf (real) || real_isinf (imag))\n+\treturn build_complex_cproj (type, imag->sign);\n+      else\n+\treturn arg;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Fold a builtin function call to sqrt, sqrtf, or sqrtl with argument ARG.\n    Return NULL_TREE if no simplification can be made.  */\n \n@@ -9799,6 +9843,9 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n     CASE_FLT_FN (BUILT_IN_CCOSH):\n       return fold_builtin_ccos(loc, arg0, type, fndecl, /*hyper=*/ true);\n \n+    CASE_FLT_FN (BUILT_IN_CPROJ):\n+      return fold_builtin_cproj(loc, arg0, type);\n+\n     CASE_FLT_FN (BUILT_IN_CSIN):\n       if (validate_arg (arg0, COMPLEX_TYPE)\n \t  && TREE_CODE (TREE_TYPE (TREE_TYPE (arg0))) == REAL_TYPE)"}, {"sha": "4e4eb3edc03214f605bb24e26ffb469dbe4d7486", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "patch": "@@ -479,9 +479,9 @@ DEF_C99_BUILTIN        (BUILT_IN_CONJL, \"conjl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLE\n DEF_C99_BUILTIN        (BUILT_IN_CPOW, \"cpow\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CPOWF, \"cpowf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CPOWL, \"cpowl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CPROJ, \"cproj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CPROJF, \"cprojf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n-DEF_C99_BUILTIN        (BUILT_IN_CPROJL, \"cprojl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_CPROJ, \"cproj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_CPROJF, \"cprojf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_CPROJL, \"cprojl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CREAL, \"creal\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CREALF, \"crealf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CREALL, \"creall\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "c2082071b29a429236bf6d31a49e877ec39ec9af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "patch": "@@ -1,3 +1,8 @@\n+2010-04-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-cproj-1.c: New.\n+\t* gcc.dg/torture/builtin-cproj-2.c: New.\n+\n 2010-04-20  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/43800"}, {"sha": "24540310b6674e345b740944d1935049a1e9a4c5", "filename": "gcc/testsuite/gcc.dg/torture/builtin-cproj-1.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c?ref=43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "patch": "@@ -0,0 +1,88 @@\n+/* Copyright (C) 2010  Free Software Foundation.\n+\n+   Verify that folding of built-in cproj is correctly performed by the\n+   compiler.\n+\n+   Origin: Kaveh R. Ghazi,  April 9, 2010.  */\n+\n+/* { dg-do link } */\n+\n+/* All references to link_error should go away at compile-time.  The\n+   argument is the __LINE__ number.  It appears in the tree dump file\n+   and aids in debugging should any of the tests fail.  */\n+extern void link_error(int);\n+\n+#define CPROJ(X) __builtin_cproj(X)\n+#define CPROJF(X) __builtin_cprojf(X)\n+#define CPROJL(X) __builtin_cprojl(X)\n+#define INF __builtin_inff()\n+#define I 1i\n+#define CPSGN(X,Y) __builtin_copysignf((X),(Y))\n+#define CIMAG(X) __builtin_cimagf(X)\n+#define CREAL(X) __builtin_crealf(X)\n+\n+/* Check that the signs of the real and/or imaginary parts of two\n+   complex numbers match.  */\n+#define CKSGN(X,Y) (CKSGN_R(X,Y) || CKSGN_I(X,Y))\n+#define CKSGN_R(X,Y) (CPSGN(1,CREAL(X)) != CPSGN(1,CREAL(Y)))\n+#define CKSGN_I(X,Y) (CPSGN(1,CIMAG(X)) != CPSGN(1,CIMAG(Y)))\n+\n+/* Test that (cproj(X) == ZERO+Inf) and that the signs of the\n+   imaginary parts match.  ZERO is +/- 0i.  */\n+#define TEST_CST_INF(X,ZERO) do { \\\n+  if (CPROJF(X) != ZERO+INF || CKSGN_I(CPROJF(X),ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJ(X) != ZERO+INF || CKSGN_I(CPROJ(X),ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJL(X) != ZERO+INF || CKSGN_I(CPROJL(X),ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+/* Test that (cproj(X) == X) for all finite (X).  */\n+#define TEST_CST(X) do { \\\n+  if (CPROJF(X) != (X) || CKSGN(CPROJF(X),(X))) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+void foo (void)\n+{\n+  TEST_CST_INF (INF+0I, 0);\n+  TEST_CST_INF (INF-0I, -0.FI);\n+  TEST_CST_INF (INF+4I, 0);\n+  TEST_CST_INF (INF-4I, -0.FI);\n+  TEST_CST_INF (-INF+0I, 0);\n+  TEST_CST_INF (-INF-0I, -0.FI);\n+  TEST_CST_INF (-INF+4I, 0);\n+  TEST_CST_INF (-INF-4I, -0.FI);\n+\n+  TEST_CST_INF (0+I*INF, 0);\n+  TEST_CST_INF (0-I*INF, -0.FI);\n+  TEST_CST_INF (23+I*INF, 0);\n+  TEST_CST_INF (23-I*INF, -0.FI);\n+  TEST_CST_INF (-0.F+I*INF, 0);\n+  TEST_CST_INF (-0.F-I*INF, -0.FI);\n+  TEST_CST_INF (-23+I*INF, 0);\n+  TEST_CST_INF (-23-I*INF, -0.FI);\n+\n+  TEST_CST_INF (INF+I*INF, 0);\n+  TEST_CST_INF (INF-I*INF, -0.FI);\n+  TEST_CST_INF (-INF+I*INF, 0);\n+  TEST_CST_INF (-INF-I*INF, -0.FI);\n+  \n+  TEST_CST (0);\n+  TEST_CST (-0.F);\n+  TEST_CST (0-0.FI);\n+  TEST_CST (-0.F-0.FI);\n+  \n+  TEST_CST (22+3I);\n+  TEST_CST (22-3I);\n+  TEST_CST (-22+3I);\n+  TEST_CST (-22-3I);\n+\n+  return;\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "39331651f193f37d387797397f605531881788b5", "filename": "gcc/testsuite/gcc.dg/torture/builtin-cproj-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43272bf5fd3d66bf2fd05d11cf66dc0d1116a701/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-2.c?ref=43272bf5fd3d66bf2fd05d11cf66dc0d1116a701", "patch": "@@ -0,0 +1,46 @@\n+/* Copyright (C) 2010  Free Software Foundation.\n+\n+   Verify that folding of built-in cproj is correctly performed by the\n+   compiler.  With -ffinite-math-only all cproj calls should be\n+   eliminated regardless of what the argument is, or what is known\n+   about it.\n+\n+   Origin: Kaveh R. Ghazi,  April 9, 2010.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-ffinite-math-only\" } */\n+\n+/* All references to link_error should go away at compile-time.  The\n+   argument is the __LINE__ number.  It appears in the tree dump file\n+   and aids in debugging should any of the tests fail.  */\n+extern void link_error(int);\n+\n+#define CPROJ(X) __builtin_cproj(X)\n+#define CPROJF(X) __builtin_cprojf(X)\n+#define CPROJL(X) __builtin_cprojl(X)\n+\n+/* Test that the supplied expressions eliminte the cproj call.  */\n+#define TEST_EXPRS(LD_EXPR, D_EXPR, F_EXPR) do { \\\n+  if (CPROJF(F_EXPR) != (F_EXPR)) \\\n+    link_error (__LINE__); \\\n+  if (CPROJ(D_EXPR) != (D_EXPR)) \\\n+    link_error (__LINE__); \\\n+  if (CPROJL(LD_EXPR) != (LD_EXPR)) \\\n+    link_error (__LINE__); \\\n+} while (0)\n+\n+void foo (_Complex long double cld, _Complex double cd, _Complex float cf)\n+{\n+#ifdef __OPTIMIZE__\n+  TEST_EXPRS (cld, cd, cf);\n+  TEST_EXPRS (cld*2, cd*2, cf*2);\n+  TEST_EXPRS (cld*cld, cd*cd, cf*cf);\n+#endif\n+\n+  return;\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}