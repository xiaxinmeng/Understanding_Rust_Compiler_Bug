{"sha": "3c7016b08f7a1f62e13a0805d1b5eb1685d3c475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3MDE2YjA4ZjdhMWY2MmUxM2EwODA1ZDFiNWViMTY4NWQzYzQ3NQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-01-30T16:14:12Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T02:07:09Z"}, "message": "cris: Enable movhi and movqi to set condition codes. Anonymize.\n\nLike with movsi_internal.  Looks like the \"cc\" attribute didn't\nneed tweaking for \"movhi\", but did for \"movqi\".  N.B.: disabled\nalternatives make cause a later alternative to match.\n\nAlso, non-anonymous insns get declarations and gen_* functions.\nWe don't want that; even if it doesn't affect generated code\nit's sloppy.  (This may or may not be preferable to the\nname decorations obfuscating standard pattern names.)\n\nAlso anonymize left-over non-anonymous branches; they haven't\nbeen needing names since the cbranch pattern was made the\ngeneric method.\n\ngcc:\n\t* config/cris/cris.md (\"anz\", \"anzvc\", \"acc\"): New define_subst_attrs.\n\t(\"<acc><anz><anzvc>movhi<setcc><setnz><setnzvc>\"): Rename from\n\t\"movhi\".  Rename \"cc\" attribute to \"cc<cccc><ccnz><ccnzvc>\".\n\t(\"<acc><anz><anzvc>movqi<setcc><setnz><setnzvc>\"): Similar from\n\t\"movqi\".  Correct contents of, and rename \"cc\" attribute to\n\t\"cc<cccc><ccnz><ccnzvc>\".\n\t(\"*b<zcond:code><mode>\"): Rename from \"b<zcond:code><mode>\".\n\t(\"*b<nzvccond:code><mode>\"): Rename from \"b<nzvccond:code><mode>\".\n\t(\"*b<rnzcond:code><mode>\"): Rename from \"*b<rnzcond:code><mode>\".", "tree": {"sha": "aa5ec2ee274e6e105ce7e1275d909f36d7720c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa5ec2ee274e6e105ce7e1275d909f36d7720c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a82c9fb3f70ddc750cba82589894d473de48016e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82c9fb3f70ddc750cba82589894d473de48016e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82c9fb3f70ddc750cba82589894d473de48016e"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "22178ad52ceb17cde2666ed5782a4ca5758661cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c7016b08f7a1f62e13a0805d1b5eb1685d3c475", "patch": "@@ -111,6 +111,15 @@\n \t(\"*movsi_internal<setcc><setnz><setnzvc>\"): Rename from\n \t\"*movsi_internal\".  Correct contents of, and rename attribute\n \t\"cc\" to \"cc<cccc><ccnz><ccnzvc>\".\n+\t(\"anz\", \"anzvc\", \"acc\"): New define_subst_attrs.\n+\t(\"<acc><anz><anzvc>movhi<setcc><setnz><setnzvc>\"): Rename from\n+\t\"movhi\".  Rename \"cc\" attribute to \"cc<cccc><ccnz><ccnzvc>\".\n+\t(\"<acc><anz><anzvc>movqi<setcc><setnz><setnzvc>\"): Similar from\n+\t\"movqi\".  Correct contents of, and rename \"cc\" attribute to\n+\t\"cc<cccc><ccnz><ccnzvc>\".\n+\t(\"*b<zcond:code><mode>\"): Rename from \"b<zcond:code><mode>\".\n+\t(\"*b<nzvccond:code><mode>\"): Rename from \"b<nzvccond:code><mode>\".\n+\t(\"*b<rnzcond:code><mode>\"): Rename from \"*b<rnzcond:code><mode>\".\n \n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n "}, {"sha": "5f77bc9e0fd35a7491f6ae50b7366d88d589081e", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7016b08f7a1f62e13a0805d1b5eb1685d3c475/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=3c7016b08f7a1f62e13a0805d1b5eb1685d3c475", "patch": "@@ -239,6 +239,7 @@\n \n (define_subst_attr \"setnz\" \"setnz_subst\" \"\" \"_setnz\")\n (define_subst_attr \"ccnz\" \"setnz_subst\" \"\" \"_enabled\")\n+(define_subst_attr \"anz\" \"setnz_subst\" \"\" \"*\")\n \n (define_subst \"setnz_subst\"\n   [(set (match_operand 0)\n@@ -251,6 +252,7 @@\n \n (define_subst_attr \"setnzvc\" \"setnzvc_subst\" \"\" \"_setnzvc\")\n (define_subst_attr \"ccnzvc\" \"setnzvc_subst\" \"\" \"_enabled\")\n+(define_subst_attr \"anzvc\" \"setnzvc_subst\" \"\" \"*\")\n \n (define_subst \"setnzvc_subst\"\n   [(set (match_operand 0)\n@@ -263,6 +265,7 @@\n \n (define_subst_attr \"setcc\" \"setcc_subst\" \"\" \"_setcc\")\n (define_subst_attr \"cccc\" \"setcc_subst\" \"\" \"_enabled\")\n+(define_subst_attr \"acc\" \"setcc_subst\" \"\" \"*\")\n \n (define_subst \"setcc_subst\"\n   [(set (match_operand 0)\n@@ -609,7 +612,7 @@\n \f\n ;; FIXME: See movsi.\n \n-(define_insn \"movhi\"\n+(define_insn \"<acc><anz><anzvc>movhi<setcc><setnz><setnzvc>\"\n   [(set\n     (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r, r,Q>,r,Q>,r,r,r,g,g,r,r,x\")\n     (match_operand:HI 1 \"general_operand\"\t\"r,Q>,M,M, I,r, L,O,n,M,r,g,x,r\"))\n@@ -649,7 +652,7 @@\n   }\n }\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,yes,no,yes,no,no,no,no,yes,yes\")\n-   (set_attr \"cc\" \"*,*,none,none,*,none,*,clobber,*,none,none,*,none,none\")])\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\" \"*,*,none,none,*,none,*,clobber,*,none,none,*,none,none\")])\n \n (define_insn \"movstricthi\"\n   [(set\n@@ -685,7 +688,7 @@\n   \"\"\n   \"\")\n \f\n-(define_insn \"movqi\"\n+(define_insn \"<acc><anz><anzvc>movqi<setcc><setnz><setnzvc>\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,Q>,r, r,Q>,r,g,g,r,r,r,x\")\n \t(match_operand:QI 1 \"general_operand\"\t    \"r,r, Q>,M,M, I,M,r,O,g,x,r\"))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n@@ -704,7 +707,8 @@\n    move %1,%0\n    move %1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,yes,no,no,yes,no,yes,yes\")\n-   (set_attr \"cc\" \"*,*,*,*,*,*,*,*,clobber,*,none,none\")])\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"*,none,*,none,none,*,none,none,clobber,*,none,none\")])\n \n (define_insn \"movstrictqi\"\n   [(set (strict_low_part\n@@ -2117,7 +2121,7 @@\n ;; e.g. m68k, so we have to check if overflow bit is set on all \"signed\"\n ;; conditions.\n \n-(define_insn \"b<zcond:code><mode>\"\n+(define_insn \"*b<zcond:code><mode>\"\n   [(set (pc)\n \t(if_then_else (zcond (reg:NZUSE CRIS_CC0_REGNUM)\n \t\t\t     (const_int 0))\n@@ -2127,7 +2131,7 @@\n   \"b<CC> %l0%#\"\n   [(set_attr \"slottable\" \"has_slot\")])\n \n-(define_insn \"b<nzvccond:code><mode>\"\n+(define_insn \"*b<nzvccond:code><mode>\"\n   [(set (pc)\n \t(if_then_else (nzvccond (reg:NZVCUSE CRIS_CC0_REGNUM)\n \t\t\t     (const_int 0))\n@@ -2137,7 +2141,7 @@\n   \"b<CC> %l0%#\"\n   [(set_attr \"slottable\" \"has_slot\")])\n \n-(define_insn \"b<rnzcond:code><mode>\"\n+(define_insn \"*b<rnzcond:code><mode>\"\n   [(set (pc)\n \t(if_then_else (rnzcond (reg:NZUSE CRIS_CC0_REGNUM)\n \t\t\t     (const_int 0))"}]}