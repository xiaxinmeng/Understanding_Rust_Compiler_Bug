{"sha": "8023568eaa1a93e7782e6854d21520374862034c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAyMzU2OGVhYTFhOTNlNzc4MmU2ODU0ZDIxNTIwMzc0ODYyMDM0Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-16T21:26:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-16T21:26:29Z"}, "message": "opts-common.c (opt_enum_arg_to_value): New.\n\n\t* opts-common.c (opt_enum_arg_to_value): New.\n\t* opts.h (opt_enum_arg_to_value): Declare.\n\t* config/i386/i386.opt (fpmath): Remove.\n\t(mfpmath=): Use Enum, Init and Save.\n\t(fpmath_unit): New Enum and EnumValue entries.\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Update field\n\tname for function fpmath state.\n\t* config/i386/i386-opts.h (enum fpmath_unit): Move from i386.h.\n\t* config/i386/i386.c: Include diagnostic.h.\n\t(ix86_fpmath, IX86_FUNCTION_SPECIFIC_FPMATH): Remove.\n\t(ix86_target_string): Take enum fpmath_unit value instead of\n\tstring.\n\t(ix86_debug_options): Update call to ix86_target_string.\n\t(ix86_option_override_internal): Don't process fpmath strings\n\there.\n\t(x86_function_specific_save, ix86_function_specific_restore):\n\tDon't handle fpmath state specially.\n\t(ix86_function_specific_print): Pass fpmath state to\n\tix86_target_string instead of printing in this function.\n\t(ix86_valid_target_attribute_inner_p): Take gcc_options pointer.\n\tHandle enum attributes.\n\t(IX86_ATTR_ENUM, ix86_opt_enum): New.\n\t(ix86_valid_target_attribute_tree): Update option_strings\n\thandling.  Handle fpmath as enum option.\n\t(ix86_can_inline_p): Update field names for function fpmath state.\n\t(ix86_expand_builtin): Update call to ix86_target_string.\n\t* config/i386/i386.h (enum fpmath_unit): Move to i386-opts.h.\n\t(ix86_fpmath): Remove.\n\t* config/i386/t-i386 (i386.o): Update dependencies.\n\nFrom-SVN: r173809", "tree": {"sha": "6301f581d3bace8b34ccc8f95eae30bd0d14b784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6301f581d3bace8b34ccc8f95eae30bd0d14b784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8023568eaa1a93e7782e6854d21520374862034c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8023568eaa1a93e7782e6854d21520374862034c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8023568eaa1a93e7782e6854d21520374862034c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8023568eaa1a93e7782e6854d21520374862034c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22cb03b643d263a60440a93c1b5fca3db600eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22cb03b643d263a60440a93c1b5fca3db600eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c22cb03b643d263a60440a93c1b5fca3db600eae"}], "stats": {"total": 231, "additions": 160, "deletions": 71}, "files": [{"sha": "7f140b84fab8dc4dc5b8ea11db02344c5bfc38f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -1,3 +1,35 @@\n+2011-05-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts-common.c (opt_enum_arg_to_value): New.\n+\t* opts.h (opt_enum_arg_to_value): Declare.\n+\t* config/i386/i386.opt (fpmath): Remove.\n+\t(mfpmath=): Use Enum, Init and Save.\n+\t(fpmath_unit): New Enum and EnumValue entries.\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Update field\n+\tname for function fpmath state.\n+\t* config/i386/i386-opts.h (enum fpmath_unit): Move from i386.h.\n+\t* config/i386/i386.c: Include diagnostic.h.\n+\t(ix86_fpmath, IX86_FUNCTION_SPECIFIC_FPMATH): Remove.\n+\t(ix86_target_string): Take enum fpmath_unit value instead of\n+\tstring.\n+\t(ix86_debug_options): Update call to ix86_target_string.\n+\t(ix86_option_override_internal): Don't process fpmath strings\n+\there.\n+\t(x86_function_specific_save, ix86_function_specific_restore):\n+\tDon't handle fpmath state specially.\n+\t(ix86_function_specific_print): Pass fpmath state to\n+\tix86_target_string instead of printing in this function.\n+\t(ix86_valid_target_attribute_inner_p): Take gcc_options pointer.\n+\tHandle enum attributes.\n+\t(IX86_ATTR_ENUM, ix86_opt_enum): New.\n+\t(ix86_valid_target_attribute_tree): Update option_strings\n+\thandling.  Handle fpmath as enum option.\n+\t(ix86_can_inline_p): Update field names for function fpmath state.\n+\t(ix86_expand_builtin): Update call to ix86_target_string.\n+\t* config/i386/i386.h (enum fpmath_unit): Move to i386-opts.h.\n+\t(ix86_fpmath): Remove.\n+\t* config/i386/t-i386 (i386.o): Update dependencies.\n+\n 2011-05-16  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/48677"}, {"sha": "5676548436496c411572b3ac9cfde3ae94503a33", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -340,14 +340,14 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n   ix86_target_macros_internal (prev_isa & diff_isa,\n \t\t\t       prev_arch,\n \t\t\t       prev_tune,\n-\t\t\t       (enum fpmath_unit) prev_opt->fpmath,\n+\t\t\t       (enum fpmath_unit) prev_opt->x_ix86_fpmath,\n \t\t\t       cpp_undef);\n \n   /* Define all of the macros for new options that were just turned on.  */\n   ix86_target_macros_internal (cur_isa & diff_isa,\n \t\t\t       cur_arch,\n \t\t\t       cur_tune,\n-\t\t\t       (enum fpmath_unit) cur_opt->fpmath,\n+\t\t\t       (enum fpmath_unit) cur_opt->x_ix86_fpmath,\n \t\t\t       cpp_define);\n \n   return true;"}, {"sha": "3cc2253c3c2698ca7d2c586fe969ae8f9068754a", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -47,6 +47,12 @@ enum calling_abi\n   MS_ABI = 1\n };\n \n+enum fpmath_unit\n+{\n+  FPMATH_387 = 1,\n+  FPMATH_SSE = 2\n+};\n+\n enum tls_dialect\n {\n   TLS_DIALECT_GNU,"}, {"sha": "80f356f3ee7785dd79d6587efc5bf7be91936b95", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 75, "deletions": 55, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sbitmap.h\"\n #include \"fibheap.h\"\n #include \"opts.h\"\n+#include \"diagnostic.h\"\n \n enum upper_128bits_state\n {\n@@ -2325,9 +2326,6 @@ struct ix86_frame\n   bool save_regs_using_mov;\n };\n \n-/* Which unit we are generating floating point math for.  */\n-enum fpmath_unit ix86_fpmath;\n-\n /* Which cpu are we scheduling for.  */\n enum attr_cpu ix86_schedule;\n \n@@ -2429,19 +2427,19 @@ enum ix86_function_specific_strings\n {\n   IX86_FUNCTION_SPECIFIC_ARCH,\n   IX86_FUNCTION_SPECIFIC_TUNE,\n-  IX86_FUNCTION_SPECIFIC_FPMATH,\n   IX86_FUNCTION_SPECIFIC_MAX\n };\n \n static char *ix86_target_string (int, int, const char *, const char *,\n-\t\t\t\t const char *, bool);\n+\t\t\t\t enum fpmath_unit, bool);\n static void ix86_debug_options (void) ATTRIBUTE_UNUSED;\n static void ix86_function_specific_save (struct cl_target_option *);\n static void ix86_function_specific_restore (struct cl_target_option *);\n static void ix86_function_specific_print (FILE *, int,\n \t\t\t\t\t  struct cl_target_option *);\n static bool ix86_valid_target_attribute_p (tree, tree, tree, int);\n-static bool ix86_valid_target_attribute_inner_p (tree, char *[]);\n+static bool ix86_valid_target_attribute_inner_p (tree, char *[],\n+\t\t\t\t\t\t struct gcc_options *);\n static bool ix86_can_inline_p (tree, tree);\n static void ix86_set_current_function (tree);\n static unsigned int ix86_minimum_incoming_stack_boundary (bool);\n@@ -3085,7 +3083,7 @@ ix86_handle_option (struct gcc_options *opts,\n \n static char *\n ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n-\t\t    const char *fpmath, bool add_nl_p)\n+\t\t    enum fpmath_unit fpmath, bool add_nl_p)\n {\n   struct ix86_target_opts\n   {\n@@ -3219,7 +3217,23 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n   if (fpmath)\n     {\n       opts[num][0] = \"-mfpmath=\";\n-      opts[num++][1] = fpmath;\n+      switch ((int) fpmath)\n+\t{\n+\tcase FPMATH_387:\n+\t  opts[num++][1] = \"387\";\n+\t  break;\n+\n+\tcase FPMATH_SSE:\n+\t  opts[num++][1] = \"sse\";\n+\t  break;\n+\n+\tcase FPMATH_387 | FPMATH_SSE:\n+\t  opts[num++][1] = \"sse+387\";\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n     }\n \n   /* Any options?  */\n@@ -3294,7 +3308,7 @@ ix86_debug_options (void)\n {\n   char *opts = ix86_target_string (ix86_isa_flags, target_flags,\n \t\t\t\t   ix86_arch_string, ix86_tune_string,\n-\t\t\t\t   ix86_fpmath_string, true);\n+\t\t\t\t   ix86_fpmath, true);\n \n   if (opts)\n     {\n@@ -4003,44 +4017,24 @@ ix86_option_override_internal (bool main_args_p)\n       && ! TARGET_SSE)\n     error (\"%ssseregparm%s used without SSE enabled\", prefix, suffix);\n \n-  ix86_fpmath = TARGET_FPMATH_DEFAULT;\n-  if (ix86_fpmath_string != 0)\n+  if (global_options_set.x_ix86_fpmath)\n     {\n-      if (! strcmp (ix86_fpmath_string, \"387\"))\n-\tix86_fpmath = FPMATH_387;\n-      else if (! strcmp (ix86_fpmath_string, \"sse\"))\n-\t{\n-\t  if (!TARGET_SSE)\n-\t    {\n-\t      warning (0, \"SSE instruction set disabled, using 387 arithmetics\");\n-\t      ix86_fpmath = FPMATH_387;\n-\t    }\n-\t  else\n-\t    ix86_fpmath = FPMATH_SSE;\n-\t}\n-      else if (! strcmp (ix86_fpmath_string, \"387,sse\")\n-\t       || ! strcmp (ix86_fpmath_string, \"387+sse\")\n-\t       || ! strcmp (ix86_fpmath_string, \"sse,387\")\n-\t       || ! strcmp (ix86_fpmath_string, \"sse+387\")\n-\t       || ! strcmp (ix86_fpmath_string, \"both\"))\n+      if (ix86_fpmath & FPMATH_SSE)\n \t{\n \t  if (!TARGET_SSE)\n \t    {\n \t      warning (0, \"SSE instruction set disabled, using 387 arithmetics\");\n \t      ix86_fpmath = FPMATH_387;\n \t    }\n-\t  else if (!TARGET_80387)\n+\t  else if ((ix86_fpmath & FPMATH_387) && !TARGET_80387)\n \t    {\n \t      warning (0, \"387 instruction set disabled, using SSE arithmetics\");\n \t      ix86_fpmath = FPMATH_SSE;\n \t    }\n-\t  else\n-\t    ix86_fpmath = (enum fpmath_unit) (FPMATH_SSE | FPMATH_387);\n \t}\n-      else\n-\terror (\"bad value (%s) for %sfpmath=%s %s\",\n-\t       ix86_fpmath_string, prefix, suffix, sw);\n     }\n+  else\n+    ix86_fpmath = TARGET_FPMATH_DEFAULT;\n \n   /* If the i387 is disabled, then do not return values in it. */\n   if (!TARGET_80387)\n@@ -4344,7 +4338,6 @@ ix86_function_specific_save (struct cl_target_option *ptr)\n   ptr->arch = ix86_arch;\n   ptr->schedule = ix86_schedule;\n   ptr->tune = ix86_tune;\n-  ptr->fpmath = ix86_fpmath;\n   ptr->branch_cost = ix86_branch_cost;\n   ptr->tune_defaulted = ix86_tune_defaulted;\n   ptr->arch_specified = ix86_arch_specified;\n@@ -4356,7 +4349,6 @@ ix86_function_specific_save (struct cl_target_option *ptr)\n   gcc_assert (ptr->arch == ix86_arch);\n   gcc_assert (ptr->schedule == ix86_schedule);\n   gcc_assert (ptr->tune == ix86_tune);\n-  gcc_assert (ptr->fpmath == ix86_fpmath);\n   gcc_assert (ptr->branch_cost == ix86_branch_cost);\n }\n \n@@ -4373,7 +4365,6 @@ ix86_function_specific_restore (struct cl_target_option *ptr)\n   ix86_arch = (enum processor_type) ptr->arch;\n   ix86_schedule = (enum attr_cpu) ptr->schedule;\n   ix86_tune = (enum processor_type) ptr->tune;\n-  ix86_fpmath = (enum fpmath_unit) ptr->fpmath;\n   ix86_branch_cost = ptr->branch_cost;\n   ix86_tune_defaulted = ptr->tune_defaulted;\n   ix86_arch_specified = ptr->arch_specified;\n@@ -4407,7 +4398,7 @@ ix86_function_specific_print (FILE *file, int indent,\n {\n   char *target_string\n     = ix86_target_string (ptr->x_ix86_isa_flags, ptr->x_target_flags,\n-\t\t\t  NULL, NULL, NULL, false);\n+\t\t\t  NULL, NULL, ptr->x_ix86_fpmath, false);\n \n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n \t   indent, \"\",\n@@ -4423,9 +4414,6 @@ ix86_function_specific_print (FILE *file, int indent,\n \t    ? cpu_names[ptr->tune]\n \t    : \"<unknown>\"));\n \n-  fprintf (file, \"%*sfpmath = %d%s%s\\n\", indent, \"\", ptr->fpmath,\n-\t   (ptr->fpmath & FPMATH_387) ? \", 387\" : \"\",\n-\t   (ptr->fpmath & FPMATH_SSE) ? \", sse\" : \"\");\n   fprintf (file, \"%*sbranch_cost = %d\\n\", indent, \"\", ptr->branch_cost);\n \n   if (target_string)\n@@ -4441,13 +4429,15 @@ ix86_function_specific_print (FILE *file, int indent,\n    over the list.  */\n \n static bool\n-ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n+ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n+\t\t\t\t     struct gcc_options *enum_opts_set)\n {\n   char *next_optstr;\n   bool ret = true;\n \n #define IX86_ATTR_ISA(S,O)   { S, sizeof (S)-1, ix86_opt_isa, O, 0 }\n #define IX86_ATTR_STR(S,O)   { S, sizeof (S)-1, ix86_opt_str, O, 0 }\n+#define IX86_ATTR_ENUM(S,O)  { S, sizeof (S)-1, ix86_opt_enum, O, 0 }\n #define IX86_ATTR_YES(S,O,M) { S, sizeof (S)-1, ix86_opt_yes, O, M }\n #define IX86_ATTR_NO(S,O,M)  { S, sizeof (S)-1, ix86_opt_no,  O, M }\n \n@@ -4457,6 +4447,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     ix86_opt_yes,\n     ix86_opt_no,\n     ix86_opt_str,\n+    ix86_opt_enum,\n     ix86_opt_isa\n   };\n \n@@ -4493,9 +4484,11 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     IX86_ATTR_ISA (\"rdrnd\",\tOPT_mrdrnd),\n     IX86_ATTR_ISA (\"f16c\",\tOPT_mf16c),\n \n+    /* enum options */\n+    IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n+\n     /* string options */\n     IX86_ATTR_STR (\"arch=\",\tIX86_FUNCTION_SPECIFIC_ARCH),\n-    IX86_ATTR_STR (\"fpmath=\",\tIX86_FUNCTION_SPECIFIC_FPMATH),\n     IX86_ATTR_STR (\"tune=\",\tIX86_FUNCTION_SPECIFIC_TUNE),\n \n     /* flag options */\n@@ -4536,7 +4529,8 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n \n       for (; args; args = TREE_CHAIN (args))\n \tif (TREE_VALUE (args)\n-\t    && !ix86_valid_target_attribute_inner_p (TREE_VALUE (args), p_strings))\n+\t    && !ix86_valid_target_attribute_inner_p (TREE_VALUE (args),\n+\t\t\t\t\t\t     p_strings, enum_opts_set))\n \t  ret = false;\n \n       return ret;\n@@ -4592,7 +4586,9 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n \t  type = attrs[i].type;\n \t  opt_len = attrs[i].len;\n \t  if (ch == attrs[i].string[0]\n-\t      && ((type != ix86_opt_str) ? len == opt_len : len > opt_len)\n+\t      && ((type != ix86_opt_str && type != ix86_opt_enum)\n+\t\t  ? len == opt_len\n+\t\t  : len > opt_len)\n \t      && memcmp (p, attrs[i].string, opt_len) == 0)\n \t    {\n \t      opt = attrs[i].opt;\n@@ -4640,6 +4636,23 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n \t    p_strings[opt] = xstrdup (p + opt_len);\n \t}\n \n+      else if (type == ix86_opt_enum)\n+\t{\n+\t  bool arg_ok;\n+\t  int value;\n+\n+\t  arg_ok = opt_enum_arg_to_value (opt, p + opt_len, &value, CL_TARGET);\n+\t  if (arg_ok)\n+\t    set_option (&global_options, enum_opts_set, opt, value,\n+\t\t\tp + opt_len, DK_UNSPECIFIED, input_location,\n+\t\t\tglobal_dc);\n+\t  else\n+\t    {\n+\t      error (\"attribute(target(\\\"%s\\\")) is unknown\", orig_p);\n+\t      ret = false;\n+\t    }\n+\t}\n+\n       else\n \tgcc_unreachable ();\n     }\n@@ -4654,17 +4667,21 @@ ix86_valid_target_attribute_tree (tree args)\n {\n   const char *orig_arch_string = ix86_arch_string;\n   const char *orig_tune_string = ix86_tune_string;\n-  const char *orig_fpmath_string = ix86_fpmath_string;\n+  enum fpmath_unit orig_fpmath_set = global_options_set.x_ix86_fpmath;\n   int orig_tune_defaulted = ix86_tune_defaulted;\n   int orig_arch_specified = ix86_arch_specified;\n-  char *option_strings[IX86_FUNCTION_SPECIFIC_MAX] = { NULL, NULL, NULL };\n+  char *option_strings[IX86_FUNCTION_SPECIFIC_MAX] = { NULL, NULL };\n   tree t = NULL_TREE;\n   int i;\n   struct cl_target_option *def\n     = TREE_TARGET_OPTION (target_option_default_node);\n+  struct gcc_options enum_opts_set;\n+\n+  memset (&enum_opts_set, 0, sizeof (enum_opts_set));\n \n   /* Process each of the options on the chain.  */\n-  if (! ix86_valid_target_attribute_inner_p (args, option_strings))\n+  if (! ix86_valid_target_attribute_inner_p (args, option_strings,\n+\t\t\t\t\t     &enum_opts_set))\n     return NULL_TREE;\n \n   /* If the changed options are different from the default, rerun\n@@ -4675,7 +4692,7 @@ ix86_valid_target_attribute_tree (tree args)\n       || target_flags != def->x_target_flags\n       || option_strings[IX86_FUNCTION_SPECIFIC_ARCH]\n       || option_strings[IX86_FUNCTION_SPECIFIC_TUNE]\n-      || option_strings[IX86_FUNCTION_SPECIFIC_FPMATH])\n+      || ix86_fpmath != def->x_ix86_fpmath)\n     {\n       /* If we are using the default tune= or arch=, undo the string assigned,\n \t and use the default.  */\n@@ -4690,10 +4707,13 @@ ix86_valid_target_attribute_tree (tree args)\n \tix86_tune_string = NULL;\n \n       /* If fpmath= is not set, and we now have sse2 on 32-bit, use it.  */\n-      if (option_strings[IX86_FUNCTION_SPECIFIC_FPMATH])\n-\tix86_fpmath_string = option_strings[IX86_FUNCTION_SPECIFIC_FPMATH];\n+      if (enum_opts_set.x_ix86_fpmath)\n+\tglobal_options_set.x_ix86_fpmath = (enum fpmath_unit) 1;\n       else if (!TARGET_64BIT && TARGET_SSE)\n-\tix86_fpmath_string = \"sse,387\";\n+\t{\n+\t  ix86_fpmath = (enum fpmath_unit) (FPMATH_SSE | FPMATH_387);\n+\t  global_options_set.x_ix86_fpmath = (enum fpmath_unit) 1;\n+\t}\n \n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n       ix86_option_override_internal (false);\n@@ -4707,7 +4727,7 @@ ix86_valid_target_attribute_tree (tree args)\n \n       ix86_arch_string = orig_arch_string;\n       ix86_tune_string = orig_tune_string;\n-      ix86_fpmath_string = orig_fpmath_string;\n+      global_options_set.x_ix86_fpmath = orig_fpmath_set;\n \n       /* Free up memory allocated to hold the strings */\n       for (i = 0; i < IX86_FUNCTION_SPECIFIC_MAX; i++)\n@@ -4805,7 +4825,7 @@ ix86_can_inline_p (tree caller, tree callee)\n       else if (caller_opts->tune != callee_opts->tune)\n \tret = false;\n \n-      else if (caller_opts->fpmath != callee_opts->fpmath)\n+      else if (caller_opts->x_ix86_fpmath != callee_opts->x_ix86_fpmath)\n \tret = false;\n \n       else if (caller_opts->branch_cost != callee_opts->branch_cost)\n@@ -27378,7 +27398,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       && !(ix86_builtins_isa[fcode].isa & ix86_isa_flags))\n     {\n       char *opts = ix86_target_string (ix86_builtins_isa[fcode].isa, 0, NULL,\n-\t\t\t\t       NULL, NULL, false);\n+\t\t\t\t       NULL, (enum fpmath_unit) 0, false);\n \n       if (!opts)\n \terror (\"%qE needs unknown isa option\", fndecl);"}, {"sha": "8badcbbce613e5e6ae13f25f4f6fd7850a225e30", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -2029,14 +2029,6 @@ enum processor_type\n extern enum processor_type ix86_tune;\n extern enum processor_type ix86_arch;\n \n-enum fpmath_unit\n-{\n-  FPMATH_387 = 1,\n-  FPMATH_SSE = 2\n-};\n-\n-extern enum fpmath_unit ix86_fpmath;\n-\n /* Size of the RED_ZONE area.  */\n #define RED_ZONE_SIZE 128\n /* Reserved area of the red zone for temporaries.  */"}, {"sha": "21e0def154910519c754e9b94bae4f442a2520a4", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -40,10 +40,6 @@ unsigned char arch\n TargetSave\n unsigned char tune\n \n-;; -mfpath=\n-TargetSave\n-unsigned char fpmath\n-\n ;; CPU schedule model\n TargetSave\n unsigned char schedule\n@@ -170,9 +166,34 @@ Target Report Mask(FLOAT_RETURNS) Save\n Return values of functions in FPU registers\n \n mfpmath=\n-Target RejectNegative Joined Var(ix86_fpmath_string)\n+Target RejectNegative Joined Var(ix86_fpmath) Enum(fpmath_unit) Init(FPMATH_387) Save\n Generate floating point mathematics using given instruction set\n \n+Enum\n+Name(fpmath_unit) Type(enum fpmath_unit)\n+Valid arguments to -mfpmath=:\n+\n+EnumValue\n+Enum(fpmath_unit) String(387) Value(FPMATH_387)\n+\n+EnumValue\n+Enum(fpmath_unit) String(sse) Value(FPMATH_SSE)\n+\n+EnumValue\n+Enum(fpmath_unit) String(387,sse) Value({(enum fpmath_unit) (FPMATH_SSE | FPMATH_387)})\n+\n+EnumValue\n+Enum(fpmath_unit) String(387+sse) Value({(enum fpmath_unit) (FPMATH_SSE | FPMATH_387)})\n+\n+EnumValue\n+Enum(fpmath_unit) String(sse,387) Value({(enum fpmath_unit) (FPMATH_SSE | FPMATH_387)})\n+\n+EnumValue\n+Enum(fpmath_unit) String(sse+387) Value({(enum fpmath_unit) (FPMATH_SSE | FPMATH_387)})\n+\n+EnumValue\n+Enum(fpmath_unit) String(both) Value({(enum fpmath_unit) (FPMATH_SSE | FPMATH_387)})\n+\n mhard-float\n Target RejectNegative Mask(80387) MaskExists Save\n Use hardware fp"}, {"sha": "a43843351a08f9be0964ac42beb6d78ae659e04f", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -24,7 +24,7 @@ i386.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(GGC_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h $(CGRAPH_H) \\\n   $(TREE_GIMPLE_H) $(DWARF2_H) $(DF_H) tm-constrs.h $(PARAMS_H) \\\n   i386-builtin-types.inc debug.h dwarf2out.h sbitmap.h $(FIBHEAP_H) \\\n-  $(OPTS_H)\n+  $(OPTS_H) $(DIAGNOSTIC_H)\n \n i386-c.o: $(srcdir)/config/i386/i386-c.c \\\n   $(srcdir)/config/i386/i386-protos.h $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "973dd7e97e7e1aa471aa03a94a1a50f4adec31cc", "filename": "gcc/opts-common.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -212,6 +212,22 @@ enum_arg_to_value (const struct cl_enum_arg *enum_args,\n   return false;\n }\n \n+/* Look up ARG in the enum used by option OPT_INDEX for language\n+   LANG_MASK, returning true and storing the value in *VALUE if found,\n+   and returning false without modifying *VALUE if not found.  */\n+\n+bool\n+opt_enum_arg_to_value (size_t opt_index, const char *arg, int *value,\n+\t\t       unsigned int lang_mask)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+\n+  gcc_assert (option->var_type == CLVC_ENUM);\n+\n+  return enum_arg_to_value (cl_enums[option->var_enum].values, arg,\n+\t\t\t    value, lang_mask);\n+}\n+\n /* Look of VALUE in ENUM_ARGS for language LANG_MASK and store the\n    corresponding string in *ARGP, returning true if the found string\n    was marked as canonical, false otherwise.  If VALUE is not found"}, {"sha": "b070c8fd6ac63ec4b4a04ae3e57d63b826543027", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8023568eaa1a93e7782e6854d21520374862034c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=8023568eaa1a93e7782e6854d21520374862034c", "patch": "@@ -395,4 +395,6 @@ extern void default_options_optimization (struct gcc_options *opts,\n extern void set_struct_debug_option (struct gcc_options *opts,\n \t\t\t\t     location_t loc,\n \t\t\t\t     const char *value);\n+extern bool opt_enum_arg_to_value (size_t opt_index, const char *arg,\n+\t\t\t\t   int *value, unsigned int lang_mask);\n #endif"}]}