{"sha": "b55d57460298a5e0f675b1e7a2af84690cb14f4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1ZDU3NDYwMjk4YTVlMGY2NzViMWU3YTJhZjg0NjkwY2IxNGY0ZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2004-10-19T23:17:06Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2004-10-19T23:17:06Z"}, "message": "extend.texi (Extended Asm): Warn and provide example solution for using a call-clobbered asm register.\n\n\t* doc/extend.texi (Extended Asm): Warn and provide example\n\tsolution for using a call-clobbered asm register.\n\t(Local Reg Vars): Similar.  Cross-reference example.\n\nFrom-SVN: r89299", "tree": {"sha": "b89f428228dd43542bbe4d2d1d9acc39948b054c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b89f428228dd43542bbe4d2d1d9acc39948b054c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55d57460298a5e0f675b1e7a2af84690cb14f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55d57460298a5e0f675b1e7a2af84690cb14f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55d57460298a5e0f675b1e7a2af84690cb14f4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55d57460298a5e0f675b1e7a2af84690cb14f4d/comments", "author": null, "committer": null, "parents": [{"sha": "9a7ac511547ff9cf0692eaffea7a21dc15ae30eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7ac511547ff9cf0692eaffea7a21dc15ae30eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7ac511547ff9cf0692eaffea7a21dc15ae30eb"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "561d864f94282746bd0ffa7480dfe993e55572a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55d57460298a5e0f675b1e7a2af84690cb14f4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55d57460298a5e0f675b1e7a2af84690cb14f4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b55d57460298a5e0f675b1e7a2af84690cb14f4d", "patch": "@@ -1,3 +1,9 @@\n+2004-10-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* doc/extend.texi (Extended Asm): Warn and provide example\n+\tsolution for using a call-clobbered asm register.\n+\t(Local Reg Vars): Similar.  Cross-reference example.\n+\n 2004-10-19  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* tree-cfg.c (group_case_labels): Look at the second to last"}, {"sha": "0667540ade30a54c1dd71b319b2f8fe07b0e5d71", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55d57460298a5e0f675b1e7a2af84690cb14f4d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55d57460298a5e0f675b1e7a2af84690cb14f4d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b55d57460298a5e0f675b1e7a2af84690cb14f4d", "patch": "@@ -3585,6 +3585,23 @@ register int *result asm (\"r0\");\n asm (\"sysint\" : \"=r\" (result) : \"0\" (p1), \"r\" (p2));\n @end smallexample\n \n+@anchor{Example of asm with clobbered asm reg}\n+In the above example, beware that a register that is call-clobbered by\n+the target ABI will be overwritten by any function call in the\n+assignment, including library calls for arithmetic operators.\n+Assuming it is a call-clobbered register, this may happen to @code{r0}\n+above by the assignment to @code{p2}.  If you have to use such a\n+register, use temporary variables for expressions between the register\n+assignment and use:\n+\n+@smallexample\n+int t1 = @dots{};\n+register int *p1 asm (\"r0\") = @dots{};\n+register int *p2 asm (\"r1\") = t1;\n+register int *result asm (\"r0\");\n+asm (\"sysint\" : \"=r\" (result) : \"0\" (p1), \"r\" (p2));\n+@end smallexample\n+\n Some instructions clobber specific hard registers.  To describe this,\n write a third colon after the input operands, followed by the names of\n the clobbered hard registers (given as strings).  Here is a realistic\n@@ -4141,6 +4158,20 @@ Stores into local register variables may be deleted when they appear to be dead\n according to dataflow analysis.  References to local register variables may\n be deleted or moved or simplified.\n \n+As for global register variables, it's recommended that you choose a\n+register which is normally saved and restored by function calls on\n+your machine, so that library routines will not clobber it.  A common\n+pitfall is to initialize multiple call-clobbered registers with\n+arbitrary expressions, where a function call or library call for an\n+arithmetic operator will overwrite a register value from a previous\n+assignment, for example @code{r0} below:\n+@smallexample\n+register int *p1 asm (\"r0\") = @dots{};\n+register int *p2 asm (\"r1\") = @dots{};\n+@end smallexample\n+In those cases, a solution is to use a temporary variable for\n+each arbitrary expression.   @xref{Example of asm with clobbered asm reg}.\n+\n @node Alternate Keywords\n @section Alternate Keywords\n @cindex alternate keywords"}]}