{"sha": "6414bad6d74db5a12d6dee4124309bb0e823c7fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxNGJhZDZkNzRkYjVhMTJkNmRlZTQxMjQzMDliYjBlODIzYzdmYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-06-19T16:55:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-06-19T16:55:22Z"}, "message": "c-decl.c (grokdeclarator): Only check TREE_OVERFLOW on INTEGER_CST nodes.\n\n\n\t* c-decl.c (grokdeclarator): Only check TREE_OVERFLOW on\n\tINTEGER_CST nodes.\n\t* c-typeck.c (build_c_cast): Only preserve TREE_OVERFLOW on\n\tCONSTANT_CLASS_P nodes.\n\nFrom-SVN: r101187", "tree": {"sha": "4115c5e8551c3d8c8c3f4e3245384e64b6e75c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4115c5e8551c3d8c8c3f4e3245384e64b6e75c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6414bad6d74db5a12d6dee4124309bb0e823c7fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6414bad6d74db5a12d6dee4124309bb0e823c7fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6414bad6d74db5a12d6dee4124309bb0e823c7fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6414bad6d74db5a12d6dee4124309bb0e823c7fc/comments", "author": null, "committer": null, "parents": [{"sha": "e364ab3ab7e21141218956a59dba88f04c34f8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e364ab3ab7e21141218956a59dba88f04c34f8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e364ab3ab7e21141218956a59dba88f04c34f8b9"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "4d0fbebdc9056e9571ef799b9daf3e12e6a56926", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6414bad6d74db5a12d6dee4124309bb0e823c7fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6414bad6d74db5a12d6dee4124309bb0e823c7fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6414bad6d74db5a12d6dee4124309bb0e823c7fc", "patch": "@@ -1,3 +1,10 @@\n+2005-06-19  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-decl.c (grokdeclarator): Only check TREE_OVERFLOW on\n+\tINTEGER_CST nodes.\n+\t* c-typeck.c (build_c_cast): Only preserve TREE_OVERFLOW on\n+\tCONSTANT_CLASS_P nodes.\n+\n 2005-06-19  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/vect.md (vec_extractv2sf_1): Fix cut-and-paste error;"}, {"sha": "b1260237c98bffa130ebb6ee2934910974e5170d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6414bad6d74db5a12d6dee4124309bb0e823c7fc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6414bad6d74db5a12d6dee4124309bb0e823c7fc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6414bad6d74db5a12d6dee4124309bb0e823c7fc", "patch": "@@ -4192,7 +4192,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       index_type, before the subtraction.  Handling\n \t\t       this case seems like an unnecessary\n \t\t       complication.  */\n-\t\t    if (TREE_OVERFLOW (itype))\n+\t\t    if (TREE_CODE (itype) == INTEGER_CST\n+\t\t\t&& TREE_OVERFLOW (itype))\n \t\t      {\n \t\t\terror (\"size of array %qs is too large\", name);\n \t\t\ttype = error_mark_node;\n@@ -4357,6 +4358,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   if (TREE_CODE (type) == ARRAY_TYPE\n       && COMPLETE_TYPE_P (type)\n+      && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n       && TREE_OVERFLOW (TYPE_SIZE (type)))\n     {\n       error (\"size of array %qs is too large\", name);"}, {"sha": "988d958e911a3ffcb2f08a86febfbd818e886f4b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6414bad6d74db5a12d6dee4124309bb0e823c7fc/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6414bad6d74db5a12d6dee4124309bb0e823c7fc/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6414bad6d74db5a12d6dee4124309bb0e823c7fc", "patch": "@@ -3331,17 +3331,16 @@ build_c_cast (tree type, tree expr)\n       /* Ignore any integer overflow caused by the cast.  */\n       if (TREE_CODE (value) == INTEGER_CST)\n \t{\n-\t  if (EXPR_P (ovalue))\n-\t    /* If OVALUE had overflow set, then so will VALUE, so it\n-\t       is safe to overwrite.  */\n-\t    TREE_OVERFLOW (value) = TREE_OVERFLOW (ovalue);\n+\t  /* If OVALUE had overflow set, then so will VALUE, so it\n+\t     is safe to overwrite.  */\n+\t  if (CONSTANT_CLASS_P (ovalue))\n+\t    {\n+\t      TREE_OVERFLOW (value) = TREE_OVERFLOW (ovalue);\n+\t      /* Similarly, constant_overflow cannot have become cleared.  */\n+\t      TREE_CONSTANT_OVERFLOW (value) = TREE_CONSTANT_OVERFLOW (ovalue);\n+\t    }\n \t  else\n \t    TREE_OVERFLOW (value) = 0;\n-\t  \n-\t  if (CONSTANT_CLASS_P (ovalue))\n-\t    /* Similarly, constant_overflow cannot have become\n-\t       cleared.  */\n-\t    TREE_CONSTANT_OVERFLOW (value) = TREE_CONSTANT_OVERFLOW (ovalue);\n \t}\n     }\n "}]}