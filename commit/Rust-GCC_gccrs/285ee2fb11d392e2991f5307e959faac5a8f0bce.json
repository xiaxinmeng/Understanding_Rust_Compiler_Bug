{"sha": "285ee2fb11d392e2991f5307e959faac5a8f0bce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1ZWUyZmIxMWQzOTJlMjk5MWY1MzA3ZTk1OWZhYWM1YThmMGJjZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-19T15:42:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-19T15:42:11Z"}, "message": "Fix ambiguities in C++17 mode\n\n\t* include/experimental/tuple (apply): Qualify call to __apply_impl.\n\t* include/std/tuple (apply): Likewise.\n\t* testsuite/experimental/system_error/value.cc: Fix ambiguities in\n\tC++17 mode.\n\t* testsuite/experimental/tuple/tuple_size.cc: Likewise.\n\t* testsuite/experimental/type_traits/value.cc: Likewise.\n\nFrom-SVN: r239621", "tree": {"sha": "574e5512f82d483440a03f0193a4e9a38e80c839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574e5512f82d483440a03f0193a4e9a38e80c839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/285ee2fb11d392e2991f5307e959faac5a8f0bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285ee2fb11d392e2991f5307e959faac5a8f0bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285ee2fb11d392e2991f5307e959faac5a8f0bce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285ee2fb11d392e2991f5307e959faac5a8f0bce/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cad92845380a2175e70f5d6772d172f5c334201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cad92845380a2175e70f5d6772d172f5c334201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cad92845380a2175e70f5d6772d172f5c334201"}], "stats": {"total": 106, "additions": 92, "deletions": 14}, "files": [{"sha": "2a3e6947304c6fe4a43b6a215f404bb04cc0be81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=285ee2fb11d392e2991f5307e959faac5a8f0bce", "patch": "@@ -1,5 +1,12 @@\n 2016-08-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/tuple (apply): Qualify call to __apply_impl.\n+\t* include/std/tuple (apply): Likewise.\n+\t* testsuite/experimental/system_error/value.cc: Fix ambiguities in\n+\tC++17 mode.\n+\t* testsuite/experimental/tuple/tuple_size.cc: Likewise.\n+\t* testsuite/experimental/type_traits/value.cc: Likewise.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update status of make_from_tuple\n \tand variant.\n \t* doc/html/*: Regenerate."}, {"sha": "b653ea72e2a853ffa7e73675b4e63edb3797f691", "filename": "libstdc++-v3/include/experimental/tuple", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ftuple?ref=285ee2fb11d392e2991f5307e959faac5a8f0bce", "patch": "@@ -66,8 +66,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       using _Indices =\n \tstd::make_index_sequence<tuple_size_v<std::decay_t<_Tuple>>>;\n-      return __apply_impl(std::forward<_Fn>(__f), std::forward<_Tuple>(__t),\n-\t\t\t  _Indices{});\n+      return experimental::__apply_impl(std::forward<_Fn>(__f),\n+\t\t\t\t\tstd::forward<_Tuple>(__t),\n+\t\t\t\t\t_Indices{});\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "c06a040a960995d18da4531a46757460c7ffc55f", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=285ee2fb11d392e2991f5307e959faac5a8f0bce", "patch": "@@ -1652,8 +1652,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     apply(_Fn&& __f, _Tuple&& __t)\n     {\n       using _Indices = make_index_sequence<tuple_size_v<decay_t<_Tuple>>>;\n-      return __apply_impl(std::forward<_Fn>(__f), std::forward<_Tuple>(__t),\n-\t\t\t  _Indices{});\n+      return std::__apply_impl(std::forward<_Fn>(__f),\n+\t\t\t       std::forward<_Tuple>(__t),\n+\t\t\t       _Indices{});\n     }\n \n #define __cpp_lib_make_from_tuple  201606"}, {"sha": "3b346ce95fb1cea8542c167fc45d4f092b617b20", "filename": "libstdc++-v3/testsuite/experimental/system_error/value.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsystem_error%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsystem_error%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsystem_error%2Fvalue.cc?ref=285ee2fb11d392e2991f5307e959faac5a8f0bce", "patch": "@@ -20,21 +20,23 @@\n \n #include <experimental/system_error>\n #include <future>\n-using namespace std;\n-using namespace std::experimental;\n+using std::is_error_code_enum;\n+using std::is_error_condition_enum;\n+using std::experimental::is_error_code_enum_v;\n+using std::experimental::is_error_condition_enum_v;\n \n // These tests are rather simple, the front-end tests already test\n // variable templates, and the library tests for the underlying\n // traits are more elaborate. These are just simple sanity tests.\n \n-static_assert(is_error_code_enum_v<future_errc>\n-\t      && is_error_code_enum<future_errc>::value, \"\");\n+static_assert(is_error_code_enum_v<std::future_errc>\n+\t      && is_error_code_enum<std::future_errc>::value, \"\");\n \n static_assert(!is_error_code_enum_v<int>\n \t      && !is_error_code_enum<int>::value, \"\");\n \n-static_assert(is_error_condition_enum_v<errc>\n-\t      && is_error_condition_enum<errc>::value, \"\");\n+static_assert(is_error_condition_enum_v<std::errc>\n+\t      && is_error_condition_enum<std::errc>::value, \"\");\n \n static_assert(!is_error_condition_enum_v<int>\n \t      && !is_error_condition_enum<int>::value, \"\");"}, {"sha": "e9a49ea037b1abd71c2832b339b20d9d7e69e95a", "filename": "libstdc++-v3/testsuite/experimental/tuple/tuple_size.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftuple%2Ftuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftuple%2Ftuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftuple%2Ftuple_size.cc?ref=285ee2fb11d392e2991f5307e959faac5a8f0bce", "patch": "@@ -20,8 +20,9 @@\n \n #include <experimental/tuple>\n \n-using namespace std;\n-using namespace std::experimental;\n+using std::tuple;\n+using std::tuple_size;\n+using std::experimental::tuple_size_v;\n \n // These tests are rather simple, the front-end tests already test\n // variable templates, and the library tests for the underlying"}, {"sha": "6a7a95dc5e14ac691f8efb08452165bca86fa9ba", "filename": "libstdc++-v3/testsuite/experimental/type_traits/value.cc", "status": "modified", "additions": 68, "deletions": 2, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285ee2fb11d392e2991f5307e959faac5a8f0bce/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc?ref=285ee2fb11d392e2991f5307e959faac5a8f0bce", "patch": "@@ -20,8 +20,74 @@\n \n #include <experimental/type_traits>\n \n-using namespace std;\n-using namespace experimental;\n+using std::true_type;\n+using std::false_type;\n+using std::nullptr_t;\n+using std::is_void;\n+using std::is_null_pointer;\n+using std::is_integral;\n+using std::is_floating_point;\n+using std::is_array;\n+using std::is_pointer;\n+using std::is_lvalue_reference;\n+using std::is_rvalue_reference;\n+using std::is_member_object_pointer;\n+using std::is_member_function_pointer;\n+using std::is_enum;\n+using std::is_union;\n+using std::is_class;\n+using std::is_function;\n+using std::is_reference;\n+using std::is_arithmetic;\n+using std::is_fundamental;\n+using std::is_object;\n+using std::is_scalar;\n+using std::is_compound;\n+using std::is_member_pointer;\n+using std::is_const;\n+using std::is_volatile;\n+using std::is_trivial;\n+using std::is_trivially_copyable;\n+using std::is_standard_layout;\n+using std::is_pod;\n+using std::is_literal_type;\n+using std::is_empty;\n+using std::is_polymorphic;\n+using std::is_abstract;\n+using std::is_final;\n+using std::is_signed;\n+using std::is_constructible;\n+using std::is_default_constructible;\n+using std::is_copy_constructible;\n+using std::is_move_constructible;\n+using std::is_assignable;\n+using std::is_copy_assignable;\n+using std::is_move_assignable;\n+using std::is_destructible;\n+using std::is_trivially_constructible;\n+using std::is_trivially_default_constructible;\n+using std::is_trivially_copy_constructible;\n+using std::is_trivially_move_constructible;\n+using std::is_trivially_assignable;\n+using std::is_trivially_copy_assignable;\n+using std::is_trivially_move_assignable;\n+using std::is_trivially_destructible;\n+using std::is_nothrow_constructible;\n+using std::is_nothrow_default_constructible;\n+using std::is_nothrow_copy_constructible;\n+using std::is_nothrow_move_constructible;\n+using std::is_nothrow_assignable;\n+using std::is_nothrow_copy_assignable;\n+using std::is_nothrow_move_assignable;\n+using std::is_nothrow_destructible;\n+using std::has_virtual_destructor;\n+using std::alignment_of;\n+using std::rank;\n+using std::extent;\n+using std::is_same;\n+using std::is_base_of;\n+using std::is_convertible;\n+using namespace std::experimental;\n \n // These tests are rather simple, the front-end tests already test\n // variable templates, and the library tests for the underlying"}]}