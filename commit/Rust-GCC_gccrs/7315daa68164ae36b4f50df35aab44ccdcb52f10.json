{"sha": "7315daa68164ae36b4f50df35aab44ccdcb52f10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxNWRhYTY4MTY0YWUzNmI0ZjUwZGYzNWFhYjQ0Y2NkY2I1MmYxMA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2014-05-21T15:44:59Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2014-05-21T15:44:59Z"}, "message": "PR debug/16063. Add DW_AT_type to DW_TAG_enumeration.\n\nAdd a new lang-hook that provides the underlying base type of an\nENUMERAL_TYPE. The default implementation will just use type_for_size.\nThe implementation for C++ will use the ENUM_UNDERLYING_TYPE if it exists.\nUse this enum_underlying_base_type lang-hook in dwarf2out.c to add a\nDW_AT_type base type reference to a DW_TAG_enumeration.\n\ngcc/\n\t* dwarf2out.c (gen_enumeration_type_die): Add DW_AT_type if DWARF\n\tversion >= 3 or not strict DWARF.\n\t* langhooks.h (struct lang_hooks_for_types): Add\n\tenum_underlying_base_type.\n\t* langhooks.c (lhd_enum_underlying_base_type): New function.\n\t* gcc/langhooks.h (struct lang_hooks_for_types): Add\n\tenum_underlying_base_type.\n\t* langhooks-def.h (lhd_enum_underlying_base_type): New declaration.\n\t(LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE): New define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add new lang hook.\n\ngcc/cp/\n\t* cp-lang.c (cxx_enum_underlying_base_type): New function.\n\t(LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE): Define.\n\nFrom-SVN: r210717", "tree": {"sha": "d20dfd76b6bd33f6d7a2c6e5a1ca0f62dcebe91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d20dfd76b6bd33f6d7a2c6e5a1ca0f62dcebe91a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7315daa68164ae36b4f50df35aab44ccdcb52f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7315daa68164ae36b4f50df35aab44ccdcb52f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7315daa68164ae36b4f50df35aab44ccdcb52f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7315daa68164ae36b4f50df35aab44ccdcb52f10/comments", "author": null, "committer": null, "parents": [{"sha": "ab65e21ab28c2e9a9955d3b7ede92cf2ffbb2a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab65e21ab28c2e9a9955d3b7ede92cf2ffbb2a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab65e21ab28c2e9a9955d3b7ede92cf2ffbb2a1c"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "452b4b0e6df7f68a60ff9d0887ac2a7dca6d535d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -1,3 +1,17 @@\n+2014-05-21  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/16063\n+\t* dwarf2out.c (gen_enumeration_type_die): Add DW_AT_type if DWARF\n+\tversion >= 3 or not strict DWARF.\n+\t* langhooks.h (struct lang_hooks_for_types): Add\n+\tenum_underlying_base_type.\n+\t* langhooks.c (lhd_enum_underlying_base_type): New function.\n+\t* gcc/langhooks.h (struct lang_hooks_for_types): Add\n+\tenum_underlying_base_type.\n+\t* langhooks-def.h (lhd_enum_underlying_base_type): New declaration.\n+\t(LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE): New define.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add new lang hook.\n+\n 2014-05-21  Richard Biener  <rguenther@suse.de>\n \n \t* doc/invoke.texi (-flto-partition=): Document one and"}, {"sha": "b0a06b1df8323ef18f9e4d2c3113b69701c5c170", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -1,3 +1,9 @@\n+2014-05-21  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/16063\n+\t* cp-lang.c (cxx_enum_underlying_base_type): New function.\n+\t(LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE): Define.\n+\n 2014-05-21  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* cvt.c (convert_to_void): Use void_node instead of void_zero_node."}, {"sha": "014f393ecfa71ffa62a84ee3807e49bb3007afd6", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"stor-layout.h\"\n #include \"cp-tree.h\"\n #include \"c-family/c-common.h\"\n #include \"langhooks.h\"\n@@ -40,6 +41,7 @@ static enum classify_record cp_classify_record (tree type);\n static tree cp_eh_personality (void);\n static tree get_template_innermost_arguments_folded (const_tree);\n static tree get_template_argument_pack_elems_folded (const_tree);\n+static tree cxx_enum_underlying_base_type (const_tree);\n \n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -81,6 +83,8 @@ static tree get_template_argument_pack_elems_folded (const_tree);\n #define LANG_HOOKS_EH_PERSONALITY cp_eh_personality\n #undef LANG_HOOKS_EH_RUNTIME_TYPE\n #define LANG_HOOKS_EH_RUNTIME_TYPE build_eh_type_type\n+#undef LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE\n+#define LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE cxx_enum_underlying_base_type\n \n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n@@ -219,5 +223,21 @@ get_template_argument_pack_elems_folded (const_tree t)\n   return fold_cplus_constants (get_template_argument_pack_elems (t));\n }\n \n+/* The C++ version of the enum_underlying_base_type langhook.\n+   See also cp/semantics.c (finish_underlying_type).  */\n+\n+static\n+tree cxx_enum_underlying_base_type (const_tree type)\n+{\n+  tree underlying_type = ENUM_UNDERLYING_TYPE (type);\n+\n+  if (! ENUM_FIXED_UNDERLYING_TYPE_P (type))\n+    underlying_type\n+      = c_common_type_for_mode (TYPE_MODE (underlying_type),\n+                                TYPE_UNSIGNED (underlying_type));\n+\n+  return underlying_type;\n+}\n+\n #include \"gt-cp-cp-lang.h\"\n #include \"gtype-cp.h\""}, {"sha": "7c930746e7b384cc2700ada807dbb9397f3ed0b4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -17537,6 +17537,11 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \n       TREE_ASM_WRITTEN (type) = 1;\n       add_byte_size_attribute (type_die, type);\n+      if (dwarf_version >= 3 || !dwarf_strict)\n+\t{\n+\t  tree underlying = lang_hooks.types.enum_underlying_base_type (type);\n+\t  add_type_attribute (type_die, underlying, 0, 0, context_die);\n+\t}\n       if (TYPE_STUB_DECL (type) != NULL_TREE)\n \t{\n \t  add_src_coords_attributes (type_die, TYPE_STUB_DECL (type));"}, {"sha": "d9a1dfdc194bc13af302926b0032041630265a1c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -60,6 +60,7 @@ extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n extern tree lhd_expr_to_decl (tree, bool *, bool *);\n extern tree lhd_builtin_function (tree);\n+extern tree lhd_enum_underlying_base_type (const_tree);\n \n /* Declarations of default tree inlining hooks.  */\n extern void lhd_initialize_diagnostics (diagnostic_context *);\n@@ -173,6 +174,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS\tNULL\n #define LANG_HOOKS_DESCRIPTIVE_TYPE\tNULL\n #define LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE reconstruct_complex_type\n+#define LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE lhd_enum_underlying_base_type\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n@@ -191,7 +193,8 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GET_ARRAY_DESCR_INFO, \\\n   LANG_HOOKS_GET_SUBRANGE_BOUNDS, \\\n   LANG_HOOKS_DESCRIPTIVE_TYPE, \\\n-  LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE \\\n+  LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE, \\\n+  LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "8f65c6860a54a92b51b29e2595b4bb5a5a41838f", "filename": "gcc/langhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -678,3 +678,12 @@ lhd_end_section (void)\n       saved_section = NULL;\n     }\n }\n+\n+/* Default implementation of enum_underlying_base_type using type_for_size.  */\n+\n+tree\n+lhd_enum_underlying_base_type (const_tree enum_type)\n+{\n+  return lang_hooks.types.type_for_size (TYPE_PRECISION (enum_type),\n+\t\t\t\t\t TYPE_UNSIGNED (enum_type));\n+}"}, {"sha": "35b47bc6574b3de494d9dcc00328c0872fbce456", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7315daa68164ae36b4f50df35aab44ccdcb52f10/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=7315daa68164ae36b4f50df35aab44ccdcb52f10", "patch": "@@ -137,6 +137,12 @@ struct lang_hooks_for_types\n      return values from functions.  The argument TYPE is the top of the\n      chain, and BOTTOM is the new type which we will point to.  */\n   tree (*reconstruct_complex_type) (tree, tree);\n+\n+  /* Returns the tree that represents the underlying data type used to\n+     implement the enumeration.  The default implementation will just use\n+     type_for_size.  Used in dwarf2out.c to add a DW_AT_type base type\n+     reference to a DW_TAG_enumeration.  */\n+  tree (*enum_underlying_base_type) (const_tree);\n };\n \n /* Language hooks related to decls and the symbol table.  */"}]}