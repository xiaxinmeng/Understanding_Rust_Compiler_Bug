{"sha": "85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0MDdjM2ZjNzRjM2MzNzRhYTJmNTA3YTdiYmQ3NjgxZmFlNjNjNQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2004-11-13T19:52:55Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2004-11-13T19:52:55Z"}, "message": "re PR target/18347 (mmix-knuth-mmixware testsuite failure: gcc.dg/uninit-C.c)\n\n\tPR target/18347\n\t* config/mmix/mmix.c (mmix_function_outgoing_value): Handle\n\tTImode.  Sorry for other non-complex larger-than-64-bit modes.\n\t* config/mmix/mmix.h (MIN_UNITS_PER_WORD): Do not define.\n\nFrom-SVN: r90592", "tree": {"sha": "44e25fac4f506c1caab43a2816b372106ed973a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e25fac4f506c1caab43a2816b372106ed973a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/comments", "author": null, "committer": null, "parents": [{"sha": "993bcda188c4faa0d17c6ec9246eaf1d050cd7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993bcda188c4faa0d17c6ec9246eaf1d050cd7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993bcda188c4faa0d17c6ec9246eaf1d050cd7d6"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "138d0e3c1a3b44a70c1414643b214492e7c98aa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "patch": "@@ -1,3 +1,10 @@\n+2004-11-13  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tPR target/18347\n+\t* config/mmix/mmix.c (mmix_function_outgoing_value): Handle\n+\tTImode.  Sorry for other non-complex larger-than-64-bit modes.\n+\t* config/mmix/mmix.h (MIN_UNITS_PER_WORD): Do not define.\n+\n 2004-11-13  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* doc/install.texi (automake): Document that everything now uses 1.9."}, {"sha": "e28c3b806f744995519ba3beccf167a4c2b518df", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "patch": "@@ -644,8 +644,22 @@ mmix_function_outgoing_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n     return\n       gen_rtx_REG (mode, MMIX_OUTGOING_RETURN_VALUE_REGNUM);\n \n-  /* A complex type, made up of components.  */\n-  cmode = TYPE_MODE (TREE_TYPE (valtype));\n+  if (COMPLEX_MODE_P (mode))\n+    /* A complex type, made up of components.  */\n+    cmode = TYPE_MODE (TREE_TYPE (valtype));\n+  else\n+    {\n+      /* Of the other larger-than-register modes, we only support\n+\t scalar mode TImode.  (At least, that's the only one that's\n+\t been rudimentally tested.)  Make sure we're alerted for\n+\t unexpected cases.  */\n+      if (mode != TImode)\n+\tsorry (\"support for mode %qs\", GET_MODE_NAME (mode));\n+\n+      /* In any case, we will fill registers to the natural size.  */\n+      cmode = DImode;\n+    }\n+\n   nregs = ((GET_MODE_BITSIZE (mode) + BITS_PER_WORD - 1) / BITS_PER_WORD);\n \n   /* We need to take care of the effect of the register hole on return"}, {"sha": "fd0bb1c650786b7f6cb2396480ee59a9ae9721cd", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85407c3fc74c3c374aa2f507a7bbd7681fae63c5/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=85407c3fc74c3c374aa2f507a7bbd7681fae63c5", "patch": "@@ -269,15 +269,6 @@ extern int target_flags;\n #define FLOAT_WORDS_BIG_ENDIAN 1\n #define UNITS_PER_WORD 8\n \n-/* FIXME: This macro is correlated to MAX_FIXED_MODE_SIZE in that\n-   e.g. this macro must not be 8 (default, UNITS_PER_WORD) when\n-   MAX_FIXED_MODE_SIZE is 64 (default, DImode), or really: this must be\n-   set manually if MAX_FIXED_MODE_SIZE is not at least twice the register\n-   size.  By setting it to 4, we don't have to worry about TImode things\n-   yet.  Revisit, perhaps get TImode going or get some solution that does\n-   not mandate TImode or lie in other ways.  */\n-#define MIN_UNITS_PER_WORD 4\n-\n /* FIXME: Promotion of modes currently generates slow code, extending\n    before every operation.  */\n /* I'm a little bit undecided about this one.  It might be beneficial to"}]}