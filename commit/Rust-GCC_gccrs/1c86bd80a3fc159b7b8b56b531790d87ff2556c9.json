{"sha": "1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4NmJkODBhM2ZjMTU5YjdiOGI1NmI1MzE3OTBkODdmZjI1NTZjOQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-02-12T17:44:47Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-02-12T17:44:47Z"}, "message": "re PR inline-asm/56148 (inline asm matching constraint with different mode)\n\n2013-02-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR inline-asm/56148\n\t* lra-constraints.c (process_alt_operands): Match early clobber\n\toperand with itself.  Check conflicts with earlyclobner only if\n\tthe operand is not reloaded.  Prefer to reload conflicting operand\n\tif earlyclobber and matching operands are the same.\n\n2013-02-12  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR inline-asm/56148\n\t* gcc.target/i386/pr56148.c: New test.\n\nFrom-SVN: r195988", "tree": {"sha": "fc606b44c9939a7cad6385d98896b6cc5edfbf75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc606b44c9939a7cad6385d98896b6cc5edfbf75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f8aec0030448f6a432414ebde4d610ab73b19db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8aec0030448f6a432414ebde4d610ab73b19db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8aec0030448f6a432414ebde4d610ab73b19db"}], "stats": {"total": 85, "additions": 65, "deletions": 20}, "files": [{"sha": "2e7171f2a04dc2b1c3021b13c7d5e2b34703f745", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "patch": "@@ -1,3 +1,11 @@\n+2013-02-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR inline-asm/56148\n+\t* lra-constraints.c (process_alt_operands): Match early clobber\n+\toperand with itself.  Check conflicts with earlyclobner only if\n+\tthe operand is not reloaded.  Prefer to reload conflicting operand\n+\tif earlyclobber and matching operands are the same.\n+\n 2013-02-12  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/56297"}, {"sha": "d3f4420b6a0013b9a267dfc28657fcfffbf1775f", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "patch": "@@ -1533,8 +1533,8 @@ process_alt_operands (int only_alternative)\n \t\t\tif (! curr_static_id->operand[m].early_clobber\n \t\t\t    || operand_reg[nop] == NULL_RTX\n \t\t\t    || (find_regno_note (curr_insn, REG_DEAD,\n-\t\t\t\t\t\t REGNO (operand_reg[nop]))\n-\t\t\t\t\t\t != NULL_RTX))\n+\t\t\t\t\t\t REGNO (op))\n+\t\t\t\t|| REGNO (op) == REGNO (operand_reg[m])))\n \t\t\t  match_p = true;\n \t\t      }\n \t\t    if (match_p)\n@@ -2059,6 +2059,7 @@ process_alt_operands (int only_alternative)\n \t  if ((! curr_alt_win[i] && ! curr_alt_match_win[i])\n \t      || hard_regno[i] < 0)\n \t    continue;\n+\t  lra_assert (operand_reg[i] != NULL_RTX);\n \t  clobbered_hard_regno = hard_regno[i];\n \t  CLEAR_HARD_REG_SET (temp_set);\n \t  add_to_hard_reg_set (&temp_set, biggest_mode[i], clobbered_hard_regno);\n@@ -2073,30 +2074,49 @@ process_alt_operands (int only_alternative)\n \t    else if ((curr_alt_matches[j] == i && curr_alt_match_win[j])\n \t\t     || (curr_alt_matches[i] == j && curr_alt_match_win[i]))\n \t      continue;\n-\t    else if (uses_hard_regs_p (*curr_id->operand_loc[j], temp_set))\n+\t    /* If we don't reload j-th operand, check conflicts.  */\n+\t    else if ((curr_alt_win[j] || curr_alt_match_win[j])\n+\t\t     && uses_hard_regs_p (*curr_id->operand_loc[j], temp_set))\n \t      break;\n \t  if (j >= n_operands)\n \t    continue;\n-\t  /* We need to reload early clobbered register.  */\n-\t  for (j = 0; j < n_operands; j++)\n-\t    if (curr_alt_matches[j] == i)\n-\t      {\n-\t\tcurr_alt_match_win[j] = false;\n-\t\tlosers++;\n-\t\toverall += LRA_LOSER_COST_FACTOR;\n-\t      }\n-\t  if (! curr_alt_match_win[i])\n-\t    curr_alt_dont_inherit_ops[curr_alt_dont_inherit_ops_num++] = i;\n+\t  /* If earlyclobber operand conflicts with another\n+\t     non-matching operand which is actually the same register\n+\t     as the earlyclobber operand, it is better to reload the\n+\t     another operand as an operand matching the earlyclobber\n+\t     operand can be also the same.  */\n+\t  if (operand_reg[j] != NULL_RTX && ! curr_alt_match_win[j]\n+\t      && REGNO (operand_reg[i]) == REGNO (operand_reg[j]))\n+\t    {\n+\t      curr_alt_win[j] = false;\n+\t      curr_alt_dont_inherit_ops[curr_alt_dont_inherit_ops_num++] = j;\n+\t      losers++;\n+\t      overall += LRA_LOSER_COST_FACTOR;\n+\t    }\n \t  else\n \t    {\n-\t      /* Remember pseudos used for match reloads are never\n-\t\t inherited.  */\n-\t      lra_assert (curr_alt_matches[i] >= 0);\n-\t      curr_alt_win[curr_alt_matches[i]] = false;\n+\t      /* We need to reload early clobbered register and the\n+\t\t matched registers.  */\n+\t      for (j = 0; j < n_operands; j++)\n+\t\tif (curr_alt_matches[j] == i)\n+\t\t  {\n+\t\t    curr_alt_match_win[j] = false;\n+\t\t    losers++;\n+\t\t    overall += LRA_LOSER_COST_FACTOR;\n+\t\t  }\n+\t      if (! curr_alt_match_win[i])\n+\t\tcurr_alt_dont_inherit_ops[curr_alt_dont_inherit_ops_num++] = i;\n+\t      else\n+\t\t{\n+\t\t  /* Remember pseudos used for match reloads are never\n+\t\t     inherited.  */\n+\t\t  lra_assert (curr_alt_matches[i] >= 0);\n+\t\t  curr_alt_win[curr_alt_matches[i]] = false;\n+\t\t}\n+\t      curr_alt_win[i] = curr_alt_match_win[i] = false;\n+\t      losers++;\n+\t      overall += LRA_LOSER_COST_FACTOR;\n \t    }\n-\t  curr_alt_win[i] = curr_alt_match_win[i] = false;\n-\t  losers++;\n-\t  overall += LRA_LOSER_COST_FACTOR;\n \t}\n       small_class_operands_num = 0;\n       for (nop = 0; nop < n_operands; nop++)"}, {"sha": "7d07c20554a68f3adffa9dca1b2bbfbf7c3ee602", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "patch": "@@ -1,3 +1,8 @@\n+2013-02-12  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR inline-asm/56148\n+\t* gcc.target/i386/pr56148.c: New test.\n+\n 2013-02-12  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "78d2efba191108984b278ee0dc0aece0da5927a8", "filename": "gcc/testsuite/gcc.target/i386/pr56148.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56148.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c86bd80a3fc159b7b8b56b531790d87ff2556c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56148.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56148.c?ref=1c86bd80a3fc159b7b8b56b531790d87ff2556c9", "patch": "@@ -0,0 +1,12 @@\n+/* PR inline-asm/56148 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void\n+foo (void)\n+{\n+  unsigned char e[16];\n+  unsigned long a, b, c, d;\n+  __asm__ __volatile__ (\"\" : \"=d\" (a), \"=&c\" (c), \"=&D\" (d), \"=&a\" (b)\n+               : \"0\" (-1U), \"mr\" (e), \"1\" (128 >> 5), \"2\" (e), \"3\" (-1U));\n+}"}]}