{"sha": "0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI1MDk4OGFmNTNhMWU2MjM3YThjM2I2MWM1ZGExYzRkMWE0MTExNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2006-07-04T07:52:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-07-04T07:52:47Z"}, "message": "re PR bootstrap/18058 (Bootstrap fails with non-GCC compilers)\n\n\tPR bootstrap/18058\n\t* configure.in: Add -fkeep-inline-functions to CFLAGS for stage 1\n\tif the bootstrap compiler is a GCC version that supports it.\n\t* configure: Regenerate.\ngcc/\n\t* Makefile.in (BUILD_RTL): Add build/vec.o.\n\t(build/gencondmd.o): Filter out -fkeep-inline-functions.\n\t(build/genextract): Delete.\n\t(build/genautomata): Likewise.\n\nFrom-SVN: r115172", "tree": {"sha": "c3b9e31f432f73e77358b1d33eac3ed3d9d9a590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3b9e31f432f73e77358b1d33eac3ed3d9d9a590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84e9ad15fabafedf6815d5a6c90d65c7774c7792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e9ad15fabafedf6815d5a6c90d65c7774c7792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e9ad15fabafedf6815d5a6c90d65c7774c7792"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "9464678126398f4de8fa1e2c06d88280f68d173d", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "patch": "@@ -1,3 +1,10 @@\n+2006-07-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR bootstrap/18058\n+\t* configure.in: Add -fkeep-inline-functions to CFLAGS for stage 1\n+\tif the bootstrap compiler is a GCC version that supports it.\n+\t* configure: Regenerate.\n+\n 2006-07-03  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.in: Fix thinkos in previous check-in."}, {"sha": "03d1e31ee7c64a28d4607da4163bfa1708b154a8", "filename": "configure", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "patch": "@@ -7257,6 +7257,37 @@ case $build in\n     ;;\n esac\n \n+# This is aimed to mimic bootstrap with a non-GCC compiler to catch problems.\n+if test \"$GCC\" = yes; then\n+  saved_CFLAGS=\"$CFLAGS\"\n+\n+  # Pass -fkeep-inline-functions for stage 1 if the GCC version supports it.\n+  CFLAGS=\"$CFLAGS -fkeep-inline-functions\"\n+  echo $ac_n \"checking whether -fkeep-inline-functions is supported\"\"... $ac_c\" 1>&6\n+echo \"configure:3894: checking whether -fkeep-inline-functions is supported\" >&5\n+  cat > conftest.$ac_ext <<EOF\n+#line 3896 \"configure\"\n+#include \"confdefs.h\"\n+\n+int main() {\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:3903: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+  rm -rf conftest*\n+  echo \"$ac_t\"\"yes\" 1>&6; stage1_cflags=\"$stage1_cflags -fkeep-inline-functions\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+rm -f conftest*\n+\n+  CFLAGS=\"$saved_CFLAGS\"\n+fi\n+\n+\n \n # Enable -Werror in bootstrap stage2 and later.\n # Change the default to \"no\" on release branches."}, {"sha": "a67a0a2bc905d6ca793b0b23a741fd10d555a98e", "filename": "configure.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "patch": "@@ -2411,6 +2411,21 @@ case $build in\n     stage1_cflags=\"-g -no-cpp-precomp -DHAVE_DESIGNATED_INITIALIZERS=0\"\n     ;;\n esac\n+\n+# This is aimed to mimic bootstrap with a non-GCC compiler to catch problems.\n+if test \"$GCC\" = yes; then\n+  saved_CFLAGS=\"$CFLAGS\"\n+\n+  # Pass -fkeep-inline-functions for stage 1 if the GCC version supports it.\n+  CFLAGS=\"$CFLAGS -fkeep-inline-functions\"\n+  AC_MSG_CHECKING([whether -fkeep-inline-functions is supported])\n+  AC_TRY_COMPILE(,,\n+    [AC_MSG_RESULT([yes]); stage1_cflags=\"$stage1_cflags -fkeep-inline-functions\"],\n+    [AC_MSG_RESULT([no])])\n+\n+  CFLAGS=\"$saved_CFLAGS\"\n+fi\n+\n AC_SUBST(stage1_cflags)\n \n # Enable -Werror in bootstrap stage2 and later."}, {"sha": "2905deb3a2c150465b1b5ca7a8432dea5265bbed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "patch": "@@ -1,3 +1,11 @@\n+2006-07-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR bootstrap/18058\n+\t* Makefile.in (BUILD_RTL): Add build/vec.o.\n+\t(build/gencondmd.o): Filter out -fkeep-inline-functions.\n+\t(build/genextract): Delete.\n+\t(build/genautomata): Likewise.\n+\n 2006-07-04  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/28207"}, {"sha": "9f29c7bfe4dc947e51690aea854b66529d87a0e5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b50988af53a1e6237a8c3b61c5da1c4d1a41117/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0b50988af53a1e6237a8c3b61c5da1c4d1a41117", "patch": "@@ -854,7 +854,7 @@ LDEXP_LIB = @LDEXP_LIB@\n # even if we are cross-building GCC.\n BUILD_LIBS = $(BUILD_LIBIBERTY)\n \n-BUILD_RTL = build/rtl.o build/read-rtl.o build/ggc-none.o \\\n+BUILD_RTL = build/rtl.o build/read-rtl.o build/ggc-none.o build/vec.o \\\n \t    build/min-insn-modes.o build/gensupport.o build/print-rtl.o\n BUILD_ERRORS = build/errors.o\n \n@@ -2956,6 +2956,11 @@ build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   coretypes.h $(GTM_H) insn-constants.h $(RTL_H) $(TM_P_H)\t\t\\\n   $(FUNCTION_H) $(REGS_H) $(RECOG_H) $(REAL_H) output.h $(FLAGS_H)\t\\\n   $(RESOURCE_H) toplev.h reload.h except.h tm-constrs.h\n+# This pulls in tm-pred.h which contains inline functions wrapping up\n+# predicates from the back-end so those functions must be discarded.\n+# No big deal since gencondmd.c is a dummy file for non-GCC compilers.\n+build/gencondmd.o : \\\n+  BUILD_CFLAGS := $(filter-out -fkeep-inline-functions, $(BUILD_CFLAGS))\n \n # ...these are the programs themselves.\n build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n@@ -3020,10 +3025,7 @@ genprogmd = attr attrtab automata codes conditions config constants emit \\\n \t    extract flags mddeps opinit output peep preds recog\n $(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_ERRORS)\n \n-# These programs need files over and above what they get from the above list.\n-build/genextract$(build_exeext) : build/vec.o\n-\n-build/genautomata$(build_exeext) : build/vec.o\n+# These programs need libs over and above what they get from the above list.\n build/genautomata$(build_exeext) : BUILD_LIBS += -lm\n \n # These programs are not linked with the MD reader."}]}