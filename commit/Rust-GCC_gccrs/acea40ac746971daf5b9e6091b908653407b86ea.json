{"sha": "acea40ac746971daf5b9e6091b908653407b86ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlYTQwYWM3NDY5NzFkYWY1YjllNjA5MWI5MDg2NTM0MDdiODZlYQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-10-24T16:58:02Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-10-24T16:58:02Z"}, "message": "PR60580: Fix frame pointer option magic\n\nTo fix PR60580 simplify the logic in aarch64_override_options_after_change_1 (). \nIf the frame pointer is enabled, set it to a special value that behaves similar\nto frame pointer omission.  If we don't do this all leaf functions will get a\nframe pointer even if flag_omit_leaf_frame_pointer is set.\n\nIf flag_omit_frame_pointer has this special value, we must force the frame\npointer if not in a leaf function.  We also need to force it in a leaf function\nif flag_omit_frame_pointer is not set or if LR is used.\n\nDoing this allows both -fomit-frame-pointer and -fomit-leaf-frame-pointer to be\nindependently set and changed in each function with the expected behaviour.\n\n    gcc/\n\tPR middle-end/60580\n\t* config/aarch64/aarch64.c (aarch64_frame_pointer_required)\n\tCheck special value of flag_omit_frame_pointer.\n\t(aarch64_can_eliminate): Likewise.\n\t(aarch64_override_options_after_change_1): Simplify handling of\n\t-fomit-frame-pointer and -fomit-leaf-frame-pointer.\n\nFrom-SVN: r254052", "tree": {"sha": "99bc19b4dda4e1334a78125b182efe17320df8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bc19b4dda4e1334a78125b182efe17320df8bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acea40ac746971daf5b9e6091b908653407b86ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acea40ac746971daf5b9e6091b908653407b86ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acea40ac746971daf5b9e6091b908653407b86ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acea40ac746971daf5b9e6091b908653407b86ea/comments", "author": null, "committer": null, "parents": [{"sha": "02b0c08c2c42c6e4e53525e14953ad4099536773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b0c08c2c42c6e4e53525e14953ad4099536773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b0c08c2c42c6e4e53525e14953ad4099536773"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "259dc01714a825a6f132b9b16d8cafe0f9fa36c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acea40ac746971daf5b9e6091b908653407b86ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acea40ac746971daf5b9e6091b908653407b86ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acea40ac746971daf5b9e6091b908653407b86ea", "patch": "@@ -1,3 +1,12 @@\n+2017-10-24  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR middle-end/60580\n+\t* config/aarch64/aarch64.c (aarch64_frame_pointer_required)\n+\tCheck special value of flag_omit_frame_pointer.\n+\t(aarch64_can_eliminate): Likewise.\n+\t(aarch64_override_options_after_change_1): Simplify handling of\n+\t-fomit-frame-pointer and -fomit-leaf-frame-pointer.\n+\n 2017-10-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82697"}, {"sha": "d1aaf19038a061b601e9584ec41f399417b498db", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acea40ac746971daf5b9e6091b908653407b86ea/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acea40ac746971daf5b9e6091b908653407b86ea/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=acea40ac746971daf5b9e6091b908653407b86ea", "patch": "@@ -2867,12 +2867,13 @@ aarch64_output_probe_stack_range (rtx reg1, rtx reg2)\n static bool\n aarch64_frame_pointer_required (void)\n {\n-  /* In aarch64_override_options_after_change\n-     flag_omit_leaf_frame_pointer turns off the frame pointer by\n-     default.  Turn it back on now if we've not got a leaf\n-     function.  */\n-  if (flag_omit_leaf_frame_pointer\n-      && (!crtl->is_leaf || df_regs_ever_live_p (LR_REGNUM)))\n+  /* Use the frame pointer if enabled and it is not a leaf function, unless\n+     leaf frame pointer omission is disabled.  If the frame pointer is enabled,\n+     force the frame pointer in leaf functions which use LR.  */\n+  if (flag_omit_frame_pointer == 2\n+      && !(flag_omit_leaf_frame_pointer\n+\t   && crtl->is_leaf\n+\t   && !df_regs_ever_live_p (LR_REGNUM)))\n     return true;\n \n   /* Force a frame pointer for EH returns so the return address is at FP+8.  */\n@@ -5926,6 +5927,7 @@ aarch64_can_eliminate (const int from, const int to)\n \t LR in the function, then we'll want a frame pointer after all, so\n \t prevent this elimination to ensure a frame pointer is used.  */\n       if (to == STACK_POINTER_REGNUM\n+\t  && flag_omit_frame_pointer == 2\n \t  && flag_omit_leaf_frame_pointer\n \t  && df_regs_ever_live_p (LR_REGNUM))\n \treturn false;\n@@ -8965,24 +8967,16 @@ aarch64_parse_override_string (const char* input_string,\n static void\n aarch64_override_options_after_change_1 (struct gcc_options *opts)\n {\n-  /* The logic here is that if we are disabling all frame pointer generation\n-     then we do not need to disable leaf frame pointer generation as a\n-     separate operation.  But if we are *only* disabling leaf frame pointer\n-     generation then we set flag_omit_frame_pointer to true, but in\n-     aarch64_frame_pointer_required we return false only for leaf functions.\n-\n-     PR 70044: We have to be careful about being called multiple times for the\n-     same function.  Once we have decided to set flag_omit_frame_pointer just\n-     so that we can omit leaf frame pointers, we must then not interpret a\n-     second call as meaning that all frame pointer generation should be\n-     omitted.  We do this by setting flag_omit_frame_pointer to a special,\n-     non-zero value.  */\n-  if (opts->x_flag_omit_frame_pointer == 2)\n-    opts->x_flag_omit_frame_pointer = 0;\n-\n-  if (opts->x_flag_omit_frame_pointer)\n-    opts->x_flag_omit_leaf_frame_pointer = false;\n-  else if (opts->x_flag_omit_leaf_frame_pointer)\n+  /* PR 70044: We have to be careful about being called multiple times for the\n+     same function.  This means all changes should be repeatable.  */\n+\n+  /* If the frame pointer is enabled, set it to a special value that behaves\n+     similar to frame pointer omission.  If we don't do this all leaf functions\n+     will get a frame pointer even if flag_omit_leaf_frame_pointer is set.\n+     If flag_omit_frame_pointer has this special value, we must force the\n+     frame pointer if not in a leaf function.  We also need to force it in a\n+     leaf function if flag_omit_frame_pointer is not set or if LR is used.  */\n+  if (opts->x_flag_omit_frame_pointer == 0)\n     opts->x_flag_omit_frame_pointer = 2;\n \n   /* If not optimizing for size, set the default"}]}