{"sha": "0078a058a569387153419876acca080142873b65", "node_id": "C_kwDOANBUbNoAKDAwNzhhMDU4YTU2OTM4NzE1MzQxOTg3NmFjY2EwODAxNDI4NzNiNjU", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-29T20:55:32Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-29T20:55:32Z"}, "message": "libcpp: Fix _Pragma expansion [PR102409]\n\nBoth #pragma and _Pragma ended up as CPP_PRAGMA. Presumably since\nr131819 (2008, GCC 4.3) for PR34692, pragmas are not expanded in\nmacro arguments but are output as is before. From the old bug report,\nthat was to fix usage like\n  FOO (\n    #pragma GCC diagnostic\n  )\nHowever, that change also affected _Pragma such that\n  BAR (\n    \"1\";\n    _Pragma(\"omp ...\"); )\nyielded\n  #pragma omp ...\nfollowed by what BAR expanded too, possibly including '\"1\";'.\n\nThis commit adds a flag, PRAGMA_OP, to tokens to make the two\ndistinguishable - and include again _Pragma in the expanded arguments.\n\nlibcpp/ChangeLog:\n\n\tPR c++/102409\n\t* directives.c (destringize_and_run): Add PRAGMA_OP to the\n\tCPP_PRAGMA token's flags to mark is as coming from _Pragma.\n\t* include/cpplib.h (PRAGMA_OP): #define, to be used with token flags.\n\t* macro.c (collect_args): Only handle CPP_PRAGMA special if PRAGMA_OP\n\tis set.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/pragma-1.c: New test.\n\t* c-c++-common/gomp/pragma-2.c: New test.", "tree": {"sha": "c377b39a4e8626b7fc4909f3bcd59029d990ea36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c377b39a4e8626b7fc4909f3bcd59029d990ea36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0078a058a569387153419876acca080142873b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0078a058a569387153419876acca080142873b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0078a058a569387153419876acca080142873b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0078a058a569387153419876acca080142873b65/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebfc3a2304383edf7ccd50a327e380ee6a8afa43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfc3a2304383edf7ccd50a327e380ee6a8afa43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfc3a2304383edf7ccd50a327e380ee6a8afa43"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "e330f17204a9868c74a9db0a1f06afd9797584da", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0078a058a569387153419876acca080142873b65/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0078a058a569387153419876acca080142873b65/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-1.c?ref=0078a058a569387153419876acca080142873b65", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-additional-options \"-fdump-tree-original\" }  */\n+/* PR c++/51484  */\n+\n+#define TEST(T) { \\\n+  int fail = 0, trial; \\\n+  for (int trial = 0; trial < TRIALS && fail == 0; trial++) { \\\n+    _Pragma(\"omp target teams num_teams(1) thread_limit(1024)\") \\\n+     {T} \\\n+  } \\\n+}\n+\n+#define TRIALS (1)\n+#define N (1024*3)\n+\n+int main(void) {\n+\n+  double C[N], D[N];\n+  double S[N];\n+  double p[2];\n+  int i; \n+  for (i = 0; i < N; i++)\n+  {C[i] = 1; D[i] = i;}\n+\n+  int max_threads = 224;\n+\n+#define PARALLEL(X) TEST({ \\\n+_Pragma(\"omp parallel if(threads[0] > 1) num_threads(threads[0])\") \\\n+{ \\\n+_Pragma(\"omp for ordered\") \\\n+  X  \\\n+_Pragma(\"omp for schedule(auto) ordered\") \\\n+  X  \\\n+} \\\n+})\n+\n+  for (int t = 0; t <= max_threads; t += max_threads) {\n+    int threads[1]; threads[0] = t;\n+    S[0] = 0;\n+    PARALLEL(\n+    for (int i = 0; i < N; i++) { \\\n+      _Pragma(\"omp ordered\") \\\n+      S[0] += C[i] + D[i]; \\\n+    })\n+  }\n+  return 0;\n+}\n+\n+/* On expansion, the _Pragma were wrongly placed, ensure the order is now correct: */\n+/* { dg-final { scan-tree-dump \"#pragma omp target.*#pragma omp teams num_teams\\\\(1\\\\) thread_limit\\\\(1024\\\\).*#pragma omp parallel num_threads\\\\(threads\\\\\\[0\\\\\\]\\\\) if\\\\(threads\\\\\\[0\\\\\\] > 1\\\\).*#pragma omp for ordered.*#pragma omp ordered.*#pragma omp for ordered schedule\\\\(auto\\\\).*#pragma omp ordered\" \"original\" } } */\n+"}, {"sha": "5358f87595931e7918e2ede2764701c41fbc4bf1", "filename": "gcc/testsuite/c-c++-common/gomp/pragma-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0078a058a569387153419876acca080142873b65/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0078a058a569387153419876acca080142873b65/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpragma-2.c?ref=0078a058a569387153419876acca080142873b65", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-additional-options \"-fdump-tree-original -save-temps\" }  */\n+/* PR c++/51484  */\n+\n+#define TEST(T) { \\\n+  int fail = 0, trial; \\\n+  for (int trial = 0; trial < TRIALS && fail == 0; trial++) { \\\n+    _Pragma(\"omp target teams num_teams(1) thread_limit(1024)\") \\\n+     {T} \\\n+  } \\\n+}\n+\n+#define TRIALS (1)\n+#define N (1024*3)\n+\n+int main(void) {\n+\n+  double C[N], D[N];\n+  double S[N];\n+  double p[2];\n+  int i; \n+  for (i = 0; i < N; i++)\n+  {C[i] = 1; D[i] = i;}\n+\n+  int max_threads = 224;\n+\n+#define PARALLEL(X) TEST({ \\\n+_Pragma(\"omp parallel if(threads[0] > 1) num_threads(threads[0])\") \\\n+{ \\\n+_Pragma(\"omp for ordered\") \\\n+  X  \\\n+_Pragma(\"omp for schedule(auto) ordered\") \\\n+  X  \\\n+} \\\n+})\n+\n+  for (int t = 0; t <= max_threads; t += max_threads) {\n+    int threads[1]; threads[0] = t;\n+    S[0] = 0;\n+    PARALLEL(\n+    for (int i = 0; i < N; i++) { \\\n+      _Pragma(\"omp ordered\") \\\n+      S[0] += C[i] + D[i]; \\\n+    })\n+  }\n+  return 0;\n+}\n+\n+/* On expansion, the _Pragma were wrongly placed, ensure the order is now correct: */\n+/* { dg-final { scan-tree-dump \"#pragma omp target.*#pragma omp teams num_teams\\\\(1\\\\) thread_limit\\\\(1024\\\\).*#pragma omp parallel num_threads\\\\(threads\\\\\\[0\\\\\\]\\\\) if\\\\(threads\\\\\\[0\\\\\\] > 1\\\\).*#pragma omp for ordered.*#pragma omp ordered.*#pragma omp for ordered schedule\\\\(auto\\\\).*#pragma omp ordered\" \"original\" } } */\n+"}, {"sha": "34f7677f7184b18a41d4a1de4bd504ff232feea0", "filename": "libcpp/directives.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0078a058a569387153419876acca080142873b65/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0078a058a569387153419876acca080142873b65/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=0078a058a569387153419876acca080142873b65", "patch": "@@ -1907,6 +1907,8 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in,\n   save_directive = pfile->directive;\n   pfile->directive = &dtable[T_PRAGMA];\n   do_pragma (pfile);\n+  if (pfile->directive_result.type == CPP_PRAGMA)\n+    pfile->directive_result.flags |= PRAGMA_OP;\n   end_directive (pfile, 1);\n   pfile->directive = save_directive;\n "}, {"sha": "56b07acc1d7d1bd4fb05a81a82d8024a1e6ef1c9", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0078a058a569387153419876acca080142873b65/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0078a058a569387153419876acca080142873b65/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=0078a058a569387153419876acca080142873b65", "patch": "@@ -198,6 +198,7 @@ struct GTY(()) cpp_string {\n \t\t\t\t    operator, or before this token\n \t\t\t\t    after a # operator.  */\n #define NO_EXPAND\t(1 << 10) /* Do not macro-expand this token.  */\n+#define PRAGMA_OP\t(1 << 11) /* _Pragma token.  */\n \n /* Specify which field, if any, of the cpp_token union is used.  */\n "}, {"sha": "b2f797cae35ab2a9408a6a84426af166b340e79b", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0078a058a569387153419876acca080142873b65/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0078a058a569387153419876acca080142873b65/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=0078a058a569387153419876acca080142873b65", "patch": "@@ -1259,7 +1259,7 @@ collect_args (cpp_reader *pfile, const cpp_hashnode *node,\n \t  else if (token->type == CPP_EOF\n \t\t   || (token->type == CPP_HASH && token->flags & BOL))\n \t    break;\n-\t  else if (token->type == CPP_PRAGMA)\n+\t  else if (token->type == CPP_PRAGMA && !(token->flags & PRAGMA_OP))\n \t    {\n \t      cpp_token *newtok = _cpp_temp_token (pfile);\n "}]}