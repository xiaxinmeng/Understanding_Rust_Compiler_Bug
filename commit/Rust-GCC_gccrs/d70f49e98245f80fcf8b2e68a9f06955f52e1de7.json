{"sha": "d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "node_id": "C_kwDOANBUbNoAKGQ3MGY0OWU5ODI0NWY4MGZjZjhiMmU2OGE5ZjA2OTU1ZjUyZTFkZTc", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2023-02-22T17:35:18Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2023-02-22T17:38:17Z"}, "message": "[libstdc++] do not destruct mutex_pool mutexes\n\nOn vxworks, after destroying the semaphore used to implement a mutex,\n__gthread_mutex_lock fails and __gnu_cxx::__mutex::lock calls\n__throw_concurrence_lock_error.  Nothing ensures the mutex_pool\nmutexes survive init-once objects containing _Safe_sequence_base.  If\nsuch an object completes construction before mutex_pool\ninitialization, it will be registered for atexit destruction after the\nmutex_pool mutexes, so the _M_detach_all() call in the\n_Safe_sequence_base dtor will use already-destructed mutexes, and\nbasic_string/requirements/citerators_cc fails calling terminate.\n\nThis patch fixes this problem by ensuring the mutex pool mutexes are\nconstructed on demand, on a statically-allocated buffer, but never\ndestructed.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* src/c++11/shared_ptr.cc (__gnu_internal::get_mutex):\n\tAvoid destruction of the mutex pool.", "tree": {"sha": "93bdea2b13844a22c91ff9395678592cec06e7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93bdea2b13844a22c91ff9395678592cec06e7e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70f49e98245f80fcf8b2e68a9f06955f52e1de7/comments", "author": null, "committer": null, "parents": [{"sha": "2ff710857fd315770d71061e1a938324c1654d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff710857fd315770d71061e1a938324c1654d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff710857fd315770d71061e1a938324c1654d81"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "74e879e58289696136f6ac67c289ed2ca246f7fd", "filename": "libstdc++-v3/src/c++11/shared_ptr.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70f49e98245f80fcf8b2e68a9f06955f52e1de7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70f49e98245f80fcf8b2e68a9f06955f52e1de7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fshared_ptr.cc?ref=d70f49e98245f80fcf8b2e68a9f06955f52e1de7", "patch": "@@ -36,7 +36,11 @@ namespace __gnu_internal _GLIBCXX_VISIBILITY(hidden)\n   {\n     // increase alignment to put each lock on a separate cache line\n     struct alignas(64) M : __gnu_cxx::__mutex { };\n-    static M m[mask + 1];\n+    // Use a static buffer, so that the mutexes are not destructed\n+    // before potential users (or at all)\n+    static __attribute__ ((aligned(__alignof__(M))))\n+      char buffer[(sizeof (M)) * (mask + 1)];\n+    static M *m = new (buffer) M[mask + 1];\n     return m[i];\n   }\n }"}]}