{"sha": "addf167a23f61c0ec97f6e71577a0623f3fc13e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRkZjE2N2EyM2Y2MWMwZWM5N2Y2ZTcxNTc3YTA2MjNmM2ZjMTNlNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-09T20:01:41Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-03T18:42:43Z"}, "message": "coroutines: Support for debugging implementation state.\n\nSome of the state that is associated with the implementation\nis of interest to a user debugging a coroutine.  In particular\nitems such as the suspend point, promise object, and current\nsuspend point.\n\nThese variables live in the coroutine frame, but we can inject\nproxies for them into the outermost bind expression of the\ncoroutine.  Such variables are automatically moved into the\ncoroutine frame (if they need to persist across a suspend\nexpression).  PLacing the proxies thus allows the user to\ninspect them by name in the debugger.\n\nTo implement this, we ensure that (at the outermost scope) the\nframe entries are not mangled (coroutine frame variables are\nusually mangled with scope nesting information so that they do\nnot clash).  We can safely avoid doing this for the outermost\nscope so that we can map frame entries directly to the variables.\n\nThis is partial contribution to debug support (PR 99215).\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (register_local_var_uses): Do not mangle\n\tframe entries for the outermost scope.  Record the outer\n\tscope as nesting depth 0.", "tree": {"sha": "7f704f2b3ea18eff8062ff7a8e4b8a141ba0ecbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f704f2b3ea18eff8062ff7a8e4b8a141ba0ecbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/addf167a23f61c0ec97f6e71577a0623f3fc13e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/addf167a23f61c0ec97f6e71577a0623f3fc13e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/addf167a23f61c0ec97f6e71577a0623f3fc13e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/addf167a23f61c0ec97f6e71577a0623f3fc13e7/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45a7ecdf34311587daa2e90cc732adcefac447b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45a7ecdf34311587daa2e90cc732adcefac447b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45a7ecdf34311587daa2e90cc732adcefac447b"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "9ab2be04266953a5a7f892fcf438ee9a45a3f601", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/addf167a23f61c0ec97f6e71577a0623f3fc13e7/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/addf167a23f61c0ec97f6e71577a0623f3fc13e7/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=addf167a23f61c0ec97f6e71577a0623f3fc13e7", "patch": "@@ -3885,8 +3885,6 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \n   if (TREE_CODE (*stmt) == BIND_EXPR)\n     {\n-      lvd->bind_indx++;\n-      lvd->nest_depth++;\n       tree lvar;\n       for (lvar = BIND_EXPR_VARS (*stmt); lvar != NULL;\n \t   lvar = DECL_CHAIN (lvar))\n@@ -3925,11 +3923,17 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t    continue;\n \n \t  /* Make names depth+index unique, so that we can support nested\n-\t     scopes with identically named locals.  */\n+\t     scopes with identically named locals and still be able to\n+\t     identify them in the coroutine frame.  */\n \t  tree lvname = DECL_NAME (lvar);\n \t  char *buf;\n-\t  if (lvname != NULL_TREE)\n-\t    buf = xasprintf (\"__%s.%u.%u\", IDENTIFIER_POINTER (lvname),\n+\t  /* The outermost bind scope contains the artificial variables that\n+\t     we inject to implement the coro state machine.  We want to be able\n+\t     to inspect these in debugging.  */\n+\t  if (lvname != NULL_TREE && lvd->nest_depth == 0)\n+\t    buf = xasprintf (\"%s\", IDENTIFIER_POINTER (lvname));\n+\t  else if (lvname != NULL_TREE)\n+\t    buf = xasprintf (\"%s_%u_%u\", IDENTIFIER_POINTER (lvname),\n \t\t\t     lvd->nest_depth, lvd->bind_indx);\n \t  else\n \t    buf = xasprintf (\"_D%u.%u.%u\", DECL_UID (lvar), lvd->nest_depth,\n@@ -3942,6 +3946,8 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t  /* We don't walk any of the local var sub-trees, they won't contain\n \t     any bind exprs.  */\n \t}\n+      lvd->bind_indx++;\n+      lvd->nest_depth++;\n       cp_walk_tree (&BIND_EXPR_BODY (*stmt), register_local_var_uses, d, NULL);\n       *do_subtree = 0; /* We've done this.  */\n       lvd->nest_depth--;"}]}