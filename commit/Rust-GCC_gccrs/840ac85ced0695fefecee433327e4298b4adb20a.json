{"sha": "840ac85ced0695fefecee433327e4298b4adb20a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwYWM4NWNlZDA2OTVmZWZlY2VlNDMzMzI3ZTQyOThiNGFkYjIwYQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T21:25:03Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T21:25:03Z"}, "message": "rs6000: Add xxeval and vec_ternarylogic\n\nAdd the xxeval insn and access it via the vec_ternarylogic built-in\nfunction.  As part of this, add support to the built-in function\ninfrastructure for functions that take four arguments.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_ternarylogic): New #define.\n\t* config/rs6000/altivec.md (UNSPEC_XXEVAL): New constant.\n\t(xxeval): New insn.\n\t* config/rs6000/predicates.md (u8bit_cint_operand): New predicate.\n\t* config/rs6000/rs6000-builtin.def: Add handling of new macro\n\tRS6000_BUILTIN_4.\n\t(BU_FUTURE_V_4): New macro. Use it.\n\t(BU_FUTURE_OVERLOAD_4): Likewise.\n\t* config/rs6000/rs6000-c.c (altivec_build_resolved_builtin): Add\n\thandling for quaternary built-in functions.\n\t(altivec_resolve_overloaded_builtin): Add special-case handling\n\tfor __builtin_vec_xxeval.\n\t* config/rs6000/rs6000-call.c: Add handling of new macro\n\tRS6000_BUILTIN_4 in initialization of rs6000_builtin_info,\n\tbdesc0_arg, bdesc1_arg, bdesc2_arg, bdesc_3arg,\n\tbdesc_altivec_preds, bdesc_abs, and bdesc_htm arrays.\n\t(altivec_overloaded_builtins): Add definitions for\n\tFUTURE_BUILTIN_VEC_XXEVAL.\n\t(bdesc_4arg): New array.\n\t(htm_expand_builtin): Add handling for quaternary built-in\n\tfunctions.\n\t(rs6000_expand_quaternop_builtin): New function.\n\t(rs6000_expand_builtin): Add handling for quaternary built-in\n\tfunctions.\n\t(rs6000_init_builtins): Initialize builtin_mode_to_type entries\n\tfor unsigned QImode and unsigned HImode.\n\t(builtin_quaternary_function_type): New function.\n\t(rs6000_common_init_builtins): Add handling of quaternary\n\toperations.\n\t* config/rs6000/rs6000.h (RS6000_BTC_QUATERNARY): New defined\n\tconstant.\n\t(RS6000_BTC_PREDICATE): Change value of constant.\n\t(RS6000_BTC_ABS): Likewise.\n\t(rs6000_builtins): Add support for new macro RS6000_BUILTIN_4.\n\t* doc/extend.texi (PowerPC AltiVec Built-In Functions Available\n\tfor a Future Architecture): Add description of vec_ternarylogic\n\tbuilt-in function.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <wschmidt@linux.ibm.com>\n\n\t* gcc.target/powerpc/vec-ternarylogic-0.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-1.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-10.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-2.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-3.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-4.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-5.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-6.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-7.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-8.c: New.\n\t* gcc.target/powerpc/vec-ternarylogic-9.c: New.", "tree": {"sha": "2ead3d269a344ed5865c2b409fdf5830c530eab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ead3d269a344ed5865c2b409fdf5830c530eab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/840ac85ced0695fefecee433327e4298b4adb20a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840ac85ced0695fefecee433327e4298b4adb20a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840ac85ced0695fefecee433327e4298b4adb20a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840ac85ced0695fefecee433327e4298b4adb20a/comments", "author": null, "committer": null, "parents": [{"sha": "2202299c2aa69385ca5e7574914dabc84fb6a40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2202299c2aa69385ca5e7574914dabc84fb6a40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2202299c2aa69385ca5e7574914dabc84fb6a40a"}], "stats": {"total": 1675, "additions": 1670, "deletions": 5}, "files": [{"sha": "f94dd522892abee7d6d8ef08576c64551d246c19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -1,3 +1,43 @@\n+2020-05-11  Kelvin Nilsen  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_ternarylogic): New #define.\n+\t* config/rs6000/altivec.md (UNSPEC_XXEVAL): New constant.\n+\t(xxeval): New insn.\n+\t* config/rs6000/predicates.md (u8bit_cint_operand): New predicate.\n+\t* config/rs6000/rs6000-builtin.def: Add handling of new macro\n+\tRS6000_BUILTIN_4.\n+\t(BU_FUTURE_V_4): New macro. Use it.\n+\t(BU_FUTURE_OVERLOAD_4): Likewise.\n+\t* config/rs6000/rs6000-c.c (altivec_build_resolved_builtin): Add\n+\thandling for quaternary built-in functions.\n+\t(altivec_resolve_overloaded_builtin): Add special-case handling\n+\tfor __builtin_vec_xxeval.\n+\t* config/rs6000/rs6000-call.c: Add handling of new macro\n+\tRS6000_BUILTIN_4 in initialization of rs6000_builtin_info,\n+\tbdesc0_arg, bdesc1_arg, bdesc2_arg, bdesc_3arg,\n+\tbdesc_altivec_preds, bdesc_abs, and bdesc_htm arrays.\n+\t(altivec_overloaded_builtins): Add definitions for\n+\tFUTURE_BUILTIN_VEC_XXEVAL.\n+\t(bdesc_4arg): New array.\n+\t(htm_expand_builtin): Add handling for quaternary built-in\n+\tfunctions.\n+\t(rs6000_expand_quaternop_builtin): New function.\n+\t(rs6000_expand_builtin): Add handling for quaternary built-in\n+\tfunctions.\n+\t(rs6000_init_builtins): Initialize builtin_mode_to_type entries\n+\tfor unsigned QImode and unsigned HImode.\n+\t(builtin_quaternary_function_type): New function.\n+\t(rs6000_common_init_builtins): Add handling of quaternary\n+\toperations.\n+\t* config/rs6000/rs6000.h (RS6000_BTC_QUATERNARY): New defined\n+\tconstant.\n+\t(RS6000_BTC_PREDICATE): Change value of constant.\n+\t(RS6000_BTC_ABS): Likewise.\n+\t(rs6000_builtins): Add support for new macro RS6000_BUILTIN_4.\n+\t* doc/extend.texi (PowerPC AltiVec Built-In Functions Available\n+\tfor a Future Architecture): Add description of vec_ternarylogic\n+\tbuilt-in function.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000-builtin.def (__builtin_pdepd): New built-in"}, {"sha": "addf7d0db52b96d05857a517e94555abd4e45ecf", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -699,6 +699,7 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)\n #define vec_clrr(a, b)\t__builtin_vec_clrr (a, b)\n+#define vec_ternarylogic(a, b, c, d)\t__builtin_vec_xxeval (a, b, c, d)\n #endif\n \n #endif /* _ALTIVEC_H */"}, {"sha": "7382d7c4b440e993c7916b99e3b599871ab1d623", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -168,6 +168,7 @@\n    UNSPEC_VPEXTD\n    UNSPEC_VCLRLB\n    UNSPEC_VCLRRB\n+   UNSPEC_XXEVAL\n ])\n \n (define_c_enum \"unspecv\"\n@@ -3271,6 +3272,16 @@\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"isa\" \"*,p9v\")])\n \n+(define_insn \"xxeval\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"wa\")\n+\t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"wa\")\n+\t\t      (match_operand:V2DI 3 \"altivec_register_operand\" \"wa\")\n+\t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXEVAL))]\n+   \"TARGET_FUTURE\"\n+   \"xxeval %0,%1,%2,%3,%4\"\n+   [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"vec_unpacku_hi_v16qi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")"}, {"sha": "c3f460face2c24b3d509d4f7524083e05bb5ddd5", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -234,6 +234,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 0, 127)\")))\n \n+;; Return 1 if op is a unsigned 8-bit constant integer.\n+(define_predicate \"u8bit_cint_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 255)\")))\n+\n ;; Return 1 if op is a signed 8-bit constant integer.\n ;; Integer multiplication complete more quickly\n (define_predicate \"s8bit_cint_operand\""}, {"sha": "7ff8db5dccce80b364c5874520b75210fa74ffe7", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -28,6 +28,7 @@\n    RS6000_BUILTIN_1 -- 1 arg builtins\n    RS6000_BUILTIN_2 -- 2 arg builtins\n    RS6000_BUILTIN_3 -- 3 arg builtins\n+   RS6000_BUILTIN_4 -- 4 arg builtins\n    RS6000_BUILTIN_A -- ABS builtins\n    RS6000_BUILTIN_D -- DST builtins\n    RS6000_BUILTIN_H -- HTM builtins\n@@ -57,6 +58,10 @@\n   #error \"RS6000_BUILTIN_3 is not defined.\"\n #endif\n \n+#ifndef RS6000_BUILTIN_4\n+  #error \"RS6000_BUILTIN_4 is not defined.\"\n+#endif\n+\n #ifndef RS6000_BUILTIN_A\n   #error \"RS6000_BUILTIN_A is not defined.\"\n #endif\n@@ -969,6 +974,14 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_FUTURE_V_4(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_4 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_QUATERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_FUTURE_OVERLOAD_1(ENUM, NAME)\t\t\t\t\\\n   RS6000_BUILTIN_1 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n@@ -993,6 +1006,14 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n+#define BU_FUTURE_OVERLOAD_4(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_4 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+\t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_QUATERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n /* Miscellaneous (non-vector) builtins for instructions which may be\n    added at some point in the future.  */\n \n@@ -2589,11 +2610,13 @@ BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n BU_FUTURE_V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)\n BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n BU_FUTURE_V_2 (VGNB, \"vgnb\", CONST, vgnb)\n+BU_FUTURE_V_4 (XXEVAL, \"xxeval\", CONST, xxeval)\n \n /* Future architecture overloaded vector built-ins.  */\n BU_FUTURE_OVERLOAD_2 (CLRL, \"clrl\")\n BU_FUTURE_OVERLOAD_2 (CLRR, \"clrr\")\n BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n+BU_FUTURE_OVERLOAD_4 (XXEVAL, \"xxeval\")\n \n \f\n /* 1 argument crypto functions.  */"}, {"sha": "cacaea00bd4a718c4b831f2c76c540d7e2e61dd2", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -846,7 +846,7 @@ altivec_build_resolved_builtin (tree *args, int n,\n   tree impl_fndecl = rs6000_builtin_decls[desc->overloaded_code];\n   tree ret_type = rs6000_builtin_type (desc->ret_type);\n   tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (impl_fndecl));\n-  tree arg_type[3];\n+  tree arg_type[4];\n   tree call;\n \n   int i;\n@@ -895,6 +895,13 @@ altivec_build_resolved_builtin (tree *args, int n,\n \t\t\t      fully_fold_convert (arg_type[1], args[1]),\n \t\t\t      fully_fold_convert (arg_type[2], args[2]));\n       break;\n+    case 4:\n+      call = build_call_expr (impl_fndecl, 4,\n+\t\t\t      fully_fold_convert (arg_type[0], args[0]),\n+\t\t\t      fully_fold_convert (arg_type[1], args[1]),\n+\t\t\t      fully_fold_convert (arg_type[2], args[2]),\n+\t\t\t      fully_fold_convert (arg_type[3], args[3]));\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -913,7 +920,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n   enum rs6000_builtins fcode\n     = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree fnargs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n-  tree types[3], args[3];\n+  tree types[4], args[4];\n   const struct altivec_builtin_types *desc;\n   unsigned int n;\n \n@@ -1606,7 +1613,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       if (arg == error_mark_node)\n \treturn error_mark_node;\n \n-      if (n >= 3)\n+      if (n >= 4)\n         abort ();\n \n       arg = default_conversion (arg);\n@@ -1789,6 +1796,40 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t      unsupported_builtin = true;\n \t  }\n       }\n+    else if (fcode == FUTURE_BUILTIN_VEC_XXEVAL)\n+      {\n+\t/* Need to special case __builtin_vec_xxeval because this takes\n+\t   4 arguments, and the existing infrastructure handles no\n+\t   more than three.  */\n+\tif (nargs != 4)\n+\t  {\n+\t    error (\"builtin %qs requires 4 arguments\",\n+\t\t   \"__builtin_vec_xxeval\");\n+\t    return error_mark_node;\n+\t  }\n+\tfor ( ; desc->code == fcode; desc++)\n+\t  {\n+\t    if (rs6000_builtin_type_compatible (types[0], desc->op1)\n+\t\t&& rs6000_builtin_type_compatible (types[1], desc->op2)\n+\t\t&& rs6000_builtin_type_compatible (types[2], desc->op3)\n+\t\t&& rs6000_builtin_type_compatible (types[3],\n+\t\t\t\t\t\t   RS6000_BTI_UINTQI))\n+\t      {\n+\t\tif (rs6000_builtin_decls[desc->overloaded_code] == NULL_TREE)\n+\t\t  unsupported_builtin = true;\n+\t\telse\n+\t\t  {\n+\t\t    result = altivec_build_resolved_builtin (args, n, desc);\n+\t\t    if (rs6000_builtin_is_supported_p (desc->overloaded_code))\n+\t\t      return result;\n+\t\t    /* Allow loop to continue in case a different\n+\t\t       definition is supported.  */\n+\t\t    overloaded_code = desc->overloaded_code;\n+\t\t    unsupported_builtin = true;\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n     else\n       {\n \t/* For arguments after the last, we have RS6000_BTI_NOT_OPAQUE in"}, {"sha": "7c43db18d65477ace0d2bc40480a6e9f59a8541e", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -237,6 +237,7 @@ builtin_hasher::equal (builtin_hash_struct *p1, builtin_hash_struct *p2)\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -255,6 +256,9 @@ builtin_hasher::equal (builtin_hash_struct *p1, builtin_hash_struct *p2)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)  \\\n   { NAME, ICODE, MASK, ATTR },\n \n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)  \\\n+  { NAME, ICODE, MASK, ATTR },\n+\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)  \\\n   { NAME, ICODE, MASK, ATTR },\n \n@@ -286,6 +290,7 @@ static const struct rs6000_builtin_info_type rs6000_builtin_info[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -5527,6 +5532,25 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI, 0 },\n   { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_UINTQI, 0 },\n+\n+  /* The overloaded XXEVAL definitions are handled specially because the\n+     fourth unsigned char operand is not encoded in this table.  */\n+  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n+  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI },\n+  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n+  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n+  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n+\n   { RS6000_BUILTIN_NONE, RS6000_BUILTIN_NONE, 0, 0, 0, 0 }\n };\n \f\n@@ -8275,6 +8299,7 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8287,6 +8312,7 @@ def_builtin (const char *name, tree type, enum rs6000_builtins code)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -8298,12 +8324,44 @@ static const struct builtin_description bdesc_3arg[] =\n #include \"rs6000-builtin.def\"\n };\n \n+/* Simple quaternary operations: VECd = foo (VECa, VECb, VECc, VECd).  */\n+\n+#undef RS6000_BUILTIN_0\n+#undef RS6000_BUILTIN_1\n+#undef RS6000_BUILTIN_2\n+#undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n+#undef RS6000_BUILTIN_A\n+#undef RS6000_BUILTIN_D\n+#undef RS6000_BUILTIN_H\n+#undef RS6000_BUILTIN_P\n+#undef RS6000_BUILTIN_X\n+\n+#define RS6000_BUILTIN_0(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE) \\\n+  { MASK, ICODE, NAME, ENUM },\n+\n+#define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_P(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_X(ENUM, NAME, MASK, ATTR, ICODE)\n+\n+static const struct builtin_description bdesc_4arg[] =\n+{\n+#include \"rs6000-builtin.def\"\n+};\n+\n /* DST operations: void foo (void *, const int, const char).  */\n \n #undef RS6000_BUILTIN_0\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8314,6 +8372,7 @@ static const struct builtin_description bdesc_3arg[] =\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n@@ -8333,6 +8392,7 @@ static const struct builtin_description bdesc_dst[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8345,6 +8405,7 @@ static const struct builtin_description bdesc_dst[] =\n   { MASK, ICODE, NAME, ENUM },\n \n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -8360,6 +8421,7 @@ static const struct builtin_description bdesc_2arg[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8370,6 +8432,7 @@ static const struct builtin_description bdesc_2arg[] =\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -8391,6 +8454,7 @@ static const struct builtin_description bdesc_altivec_preds[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8401,6 +8465,7 @@ static const struct builtin_description bdesc_altivec_preds[] =\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE) \\\n   { MASK, ICODE, NAME, ENUM },\n \n@@ -8421,6 +8486,7 @@ static const struct builtin_description bdesc_abs[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8433,6 +8499,7 @@ static const struct builtin_description bdesc_abs[] =\n \n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -8450,6 +8517,7 @@ static const struct builtin_description bdesc_1arg[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8462,6 +8530,7 @@ static const struct builtin_description bdesc_1arg[] =\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE)\n@@ -8478,6 +8547,7 @@ static const struct builtin_description bdesc_0arg[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -8488,6 +8558,7 @@ static const struct builtin_description bdesc_0arg[] =\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE)\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE)\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE) \\\n@@ -8505,6 +8576,7 @@ static const struct builtin_description bdesc_htm[] =\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -9404,6 +9476,8 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \t      expected_nopnds = 2;\n \t    else if ((attr & RS6000_BTC_TYPE_MASK) == RS6000_BTC_TERNARY)\n \t      expected_nopnds = 3;\n+\t    else if ((attr & RS6000_BTC_TYPE_MASK) == RS6000_BTC_QUATERNARY)\n+\t      expected_nopnds = 4;\n \t    if (!(attr & RS6000_BTC_VOID))\n \t      expected_nopnds += 1;\n \t    if (uses_spr)\n@@ -9580,6 +9654,76 @@ cpu_expand_builtin (enum rs6000_builtins fcode, tree exp ATTRIBUTE_UNUSED,\n   return target;\n }\n \n+static rtx\n+rs6000_expand_quaternop_builtin (enum insn_code icode, tree exp, rtx target)\n+{\n+  rtx pat;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  tree arg2 = CALL_EXPR_ARG (exp, 2);\n+  tree arg3 = CALL_EXPR_ARG (exp, 3);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  rtx op2 = expand_normal (arg2);\n+  rtx op3 = expand_normal (arg3);\n+  machine_mode tmode = insn_data[icode].operand[0].mode;\n+  machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  machine_mode mode1 = insn_data[icode].operand[2].mode;\n+  machine_mode mode2 = insn_data[icode].operand[3].mode;\n+  machine_mode mode3 = insn_data[icode].operand[4].mode;\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node\n+      || arg1 == error_mark_node\n+      || arg2 == error_mark_node\n+      || arg3 == error_mark_node)\n+    return const0_rtx;\n+\n+  /* Check and prepare argument depending on the instruction code.\n+\n+     Note that a switch statement instead of the sequence of tests\n+     would be incorrect as many of the CODE_FOR values could be\n+     CODE_FOR_nothing and that would yield multiple alternatives\n+     with identical values.  We'd never reach here at runtime in\n+     this case.  */\n+  if (icode == CODE_FOR_xxeval)\n+    {\n+      /* Only allow 8-bit unsigned literals.  */\n+      STRIP_NOPS (arg3);\n+      if (TREE_CODE (arg3) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg3) & ~0xff)\n+\t{\n+\t  error (\"argument 4 must be an 8-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+  if (! (*insn_data[icode].operand[3].predicate) (op2, mode2))\n+    op2 = copy_to_mode_reg (mode2, op2);\n+  if (! (*insn_data[icode].operand[4].predicate) (op3, mode3))\n+    op3 = copy_to_mode_reg (mode3, op3);\n+\n+  pat = GEN_FCN (icode) (target, op0, op1, op2, op3);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n+\n static rtx\n rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n {\n@@ -11613,6 +11757,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \tcase RS6000_BTC_UNARY:\t   name3 = \"unary\";\tbreak;\n \tcase RS6000_BTC_BINARY:\t   name3 = \"binary\";\tbreak;\n \tcase RS6000_BTC_TERNARY:   name3 = \"ternary\";\tbreak;\n+\tcase RS6000_BTC_QUATERNARY:name3 = \"quaternary\";break;\n \tcase RS6000_BTC_PREDICATE: name3 = \"predicate\";\tbreak;\n \tcase RS6000_BTC_ABS:\t   name3 = \"abs\";\tbreak;\n \tcase RS6000_BTC_DST:\t   name3 = \"dst\";\tbreak;\n@@ -11795,6 +11940,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   gcc_assert (attr == RS6000_BTC_UNARY\n \t      || attr == RS6000_BTC_BINARY\n \t      || attr == RS6000_BTC_TERNARY\n+\t      || attr == RS6000_BTC_QUATERNARY\n \t      || attr == RS6000_BTC_SPECIAL);\n   \n   /* Handle simple unary operations.  */\n@@ -11815,6 +11961,12 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return rs6000_expand_ternop_builtin (icode, exp, target);\n \n+  /* Handle simple quaternary operations.  */\n+  d = bdesc_4arg;\n+  for (i = 0; i < ARRAY_SIZE  (bdesc_4arg); i++, d++)\n+    if (d->code == fcode)\n+      return rs6000_expand_quaternop_builtin (icode, exp, target);\n+\n   /* Handle simple no-argument operations. */\n   d = bdesc_0arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_0arg); i++, d++)\n@@ -11969,7 +12121,9 @@ rs6000_init_builtins (void)\n   /* Initialize the modes for builtin_function_type, mapping a machine mode to\n      tree type node.  */\n   builtin_mode_to_type[QImode][0] = integer_type_node;\n+  builtin_mode_to_type[QImode][1] = unsigned_intSI_type_node;\n   builtin_mode_to_type[HImode][0] = integer_type_node;\n+  builtin_mode_to_type[HImode][1] = unsigned_intSI_type_node;\n   builtin_mode_to_type[SImode][0] = intSI_type_node;\n   builtin_mode_to_type[SImode][1] = unsigned_intSI_type_node;\n   builtin_mode_to_type[DImode][0] = intDI_type_node;\n@@ -12850,6 +13004,46 @@ htm_init_builtins (void)\n     }\n }\n \n+/* Map types for builtin functions with an explicit return type and\n+   exactly 4 arguments.  Functions with fewer than 3 arguments use\n+   builtin_function_type.  The number of quaternary built-in\n+   functions is very small.  Handle each case specially.  */\n+static tree\n+builtin_quaternary_function_type (machine_mode mode_ret,\n+\t\t\t\t  machine_mode mode_arg0,\n+\t\t\t\t  machine_mode mode_arg1,\n+\t\t\t\t  machine_mode mode_arg2,\n+\t\t\t\t  machine_mode mode_arg3,\n+\t\t\t\t  enum rs6000_builtins builtin)\n+{\n+  tree function_type = NULL;\n+\n+  static tree v2udi_type = builtin_mode_to_type[V2DImode][1];\n+  static tree uchar_type = builtin_mode_to_type[QImode][1];\n+\n+  static tree xxeval_type =\n+    build_function_type_list (v2udi_type, v2udi_type, v2udi_type,\n+\t\t\t      v2udi_type, uchar_type, NULL_TREE);\n+\n+  switch (builtin) {\n+\n+  case FUTURE_BUILTIN_XXEVAL:\n+    gcc_assert ((mode_ret == V2DImode)\n+\t\t&& (mode_arg0 == V2DImode)\n+\t\t&& (mode_arg1 == V2DImode)\n+\t\t&& (mode_arg2 == V2DImode)\n+\t\t&& (mode_arg3 == QImode));\n+    function_type = xxeval_type;\n+    break;\n+\n+  default:\n+    /* A case for each quaternary built-in must be provided above.  */\n+    gcc_unreachable ();\n+  }\n+\n+  return function_type;\n+}\n+\n /* Map types for builtin functions with an explicit return type and up to 3\n    arguments.  Functions with fewer than 3 arguments use VOIDmode as the type\n    of the argument.  */\n@@ -13145,6 +13339,63 @@ rs6000_common_init_builtins (void)\n   if (TARGET_EXTRA_BUILTINS)\n     builtin_mask |= RS6000_BTM_COMMON;\n \n+  /* Add the quaternary operators.  */\n+  d = bdesc_4arg;\n+  for (i = 0; i < ARRAY_SIZE (bdesc_4arg); i++, d++)\n+    {\n+      tree type;\n+      HOST_WIDE_INT mask = d->mask;\n+\n+      if ((mask & builtin_mask) != mask)\n+\t{\n+\t  if (TARGET_DEBUG_BUILTIN)\n+\t    fprintf (stderr, \"rs6000_builtin, skip quaternary %s\\n\", d->name);\n+\t  continue;\n+\t}\n+\n+      if (rs6000_overloaded_builtin_p (d->code))\n+\t{\n+\t  type = opaque_ftype_opaque_opaque_opaque;\n+\t  if (!type)\n+\t    type = opaque_ftype_opaque_opaque_opaque\n+\t      = build_function_type_list (opaque_V4SI_type_node,\n+\t\t\t\t\t  opaque_V4SI_type_node,\n+\t\t\t\t\t  opaque_V4SI_type_node,\n+\t\t\t\t\t  opaque_V4SI_type_node,\n+\t\t\t\t\t  opaque_V4SI_type_node,\n+\t\t\t\t\t  NULL_TREE);\n+\t}\n+      else\n+\t{\n+\t  enum insn_code icode = d->icode;\n+\t  if (d->name == 0)\n+\t    {\n+\t      if (TARGET_DEBUG_BUILTIN)\n+\t\tfprintf (stderr, \"rs6000_builtin, bdesc_4arg[%ld] no name\\n\",\n+\t\t\t (long) i);\n+\t      continue;\n+\t    }\n+\n+\t  if (icode == CODE_FOR_nothing)\n+\t    {\n+\t      if (TARGET_DEBUG_BUILTIN)\n+\t\tfprintf (stderr,\n+\t\t\t \"rs6000_builtin, skip quaternary %s (no code)\\n\",\n+\t\t\t d->name);\n+\t      continue;\n+\t    }\n+\n+\t  type =\n+\t    builtin_quaternary_function_type (insn_data[icode].operand[0].mode,\n+\t\t\t\t\t      insn_data[icode].operand[1].mode,\n+\t\t\t\t\t      insn_data[icode].operand[2].mode,\n+\t\t\t\t\t      insn_data[icode].operand[3].mode,\n+\t\t\t\t\t      insn_data[icode].operand[4].mode,\n+\t\t\t\t\t      d->code);\n+\t}\n+      def_builtin (d->name, type, d->code);\n+    }\n+\n   /* Add the ternary operators.  */\n   d = bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_3arg); i++, d++)"}, {"sha": "1209a33173e1be8c48b2f87b53eb45d904f358c3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -2254,9 +2254,14 @@ extern int frame_pointer_needed;\n #define RS6000_BTC_UNARY\t0x00000001\t/* normal unary function.  */\n #define RS6000_BTC_BINARY\t0x00000002\t/* normal binary function.  */\n #define RS6000_BTC_TERNARY\t0x00000003\t/* normal ternary function.  */\n-#define RS6000_BTC_PREDICATE\t0x00000004\t/* predicate function.  */\n-#define RS6000_BTC_ABS\t\t0x00000005\t/* Altivec/VSX ABS function.  */\n+#define RS6000_BTC_QUATERNARY\t0x00000004\t/* normal quaternary\n+\t\t\t\t\t\t   function. */\n+\n+#define RS6000_BTC_PREDICATE\t0x00000005\t/* predicate function.  */\n+#define RS6000_BTC_ABS\t\t0x00000006\t/* Altivec/VSX ABS\n+\t\t\t\t\t\t   function.  */\n #define RS6000_BTC_DST\t\t0x00000007\t/* Altivec DST function.  */\n+\n #define RS6000_BTC_TYPE_MASK\t0x0000000f\t/* Mask to isolate types */\n \n #define RS6000_BTC_MISC\t\t0x00000000\t/* No special attributes.  */\n@@ -2334,6 +2339,7 @@ extern int frame_pointer_needed;\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H\n@@ -2344,6 +2350,7 @@ extern int frame_pointer_needed;\n #define RS6000_BUILTIN_1(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_2(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_3(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n+#define RS6000_BUILTIN_4(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_A(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_D(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n #define RS6000_BUILTIN_H(ENUM, NAME, MASK, ATTR, ICODE) ENUM,\n@@ -2361,6 +2368,7 @@ enum rs6000_builtins\n #undef RS6000_BUILTIN_1\n #undef RS6000_BUILTIN_2\n #undef RS6000_BUILTIN_3\n+#undef RS6000_BUILTIN_4\n #undef RS6000_BUILTIN_A\n #undef RS6000_BUILTIN_D\n #undef RS6000_BUILTIN_H"}, {"sha": "c66a9ac7c3db02119931246f79214b737f4d77e9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -22055,6 +22055,27 @@ else\n @end smallexample\n @end deftypefn\n \n+@smallexample\n+@exdent vector unsigned char\n+@exdent vec_ternarylogic (vector unsigned char, vector unsigned char,\n+            vector unsigned char, const unsigned char)\n+@exdent vector unsigned short\n+@exdent vec_ternarylogic (vector unsigned short, vector unsigned short,\n+            vector unsigned short, const unsigned char)\n+@exdent vector unsigned int\n+@exdent vec_ternarylogic (vector unsigned int, vector unsigned int,\n+            vector unsigned int, const unsigned char)\n+@exdent vector unsigned long long int\n+@exdent vec_ternarylogic (vector unsigned long long int, vector unsigned long long int,\n+            vector unsigned long long int, const unsigned char)\n+@exdent vector unsigned __int128\n+@exdent vec_ternarylogic (vector unsigned __int128, vector unsigned __int128,\n+            vector unsigned __int128, const unsigned char)\n+@end smallexample\n+Perform a 128-bit vector evaluate operation, as if implemented by the\n+Future @code{xxeval} instruction.  The fourth argument must be a literal\n+integer value between 0 and 255 inclusive.\n+@findex vec_ternarylogic\n \n The following built-in functions are made available by @option{-mmmx}.\n All of them generate the machine instruction that is part of the name."}, {"sha": "0c54c522b7aae7e643dfe79239299d6db6f28cc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -1,3 +1,17 @@\n+2020-05-11  Kelvin Nilsen  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-ternarylogic-0.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-1.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-10.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-2.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-3.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-4.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-5.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-6.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-7.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-8.c: New.\n+\t* gcc.target/powerpc/vec-ternarylogic-9.c: New.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/pdep-0.c: New."}, {"sha": "bc1d05c008d2c8298abbd143ba40338070d53348", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-0.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-0.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,120 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned char a_sources [],\n+\t\t vector unsigned char b_sources [],\n+\t\t vector unsigned char c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned char a = a_sources [i];\n+\t  vector unsigned char b = b_sources [j];\n+\t  vector unsigned char c = c_sources [k];\n+\t  vector unsigned char result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned char intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11100101 (vector unsigned char a_sources [],\n+\t\t vector unsigned char b_sources [],\n+\t\t vector unsigned char c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned char a = a_sources [i];\n+\t  vector unsigned char b = b_sources [j];\n+\t  vector unsigned char c = c_sources [k];\n+\t  vector unsigned char result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned char intended =\n+\t    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 16; l++)\n+\t    {\n+\t      for (int m = 0; m < 8; m++)\n+\t      {\n+\t\tunsigned char bit_selector = (0x01 << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11110011 (vector unsigned char a_sources [],\n+\t\t vector unsigned char b_sources [],\n+\t\t vector unsigned char c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned char a = a_sources [i];\n+\t  vector unsigned char b = b_sources [j];\n+\t  vector unsigned char c = c_sources [k];\n+\t  vector unsigned char result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned char intended = {\n+\t    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  for (int i = 0; i < 16; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vec_all_eq (result, intended))\n+ \t    abort ();\n+\t}\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char a_sources [NumSamples] = {\n+    { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n+      0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 },\n+    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },\n+    { 0xcc, 0xcc, 0xcc, 0xcc, 0x55, 0x55, 0x55, 0x55,\n+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n+    { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,\n+      0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69 },\n+  };\n+  vector unsigned char b_sources [NumSamples] = {\n+    { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n+      0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 },\n+    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },\n+    { 0xcc, 0xcc, 0xcc, 0xcc, 0x55, 0x55, 0x55, 0x55,\n+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n+    { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,\n+      0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69 },\n+  };\n+  vector unsigned char c_sources [NumSamples] = {\n+    { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n+      0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 },\n+    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },\n+    { 0xcc, 0xcc, 0xcc, 0xcc, 0x55, 0x55, 0x55, 0x55,\n+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n+    { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,\n+      0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}, {"sha": "8beb80fe60ad7077db929848d0ffc672cd903b20", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-1.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-1.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do run} */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned char a_sources [],\n+\t\t vector unsigned char b_sources [],\n+\t\t vector unsigned char c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned char a = a_sources [i];\n+\t  vector unsigned char b = b_sources [j];\n+\t  vector unsigned char c = c_sources [k];\n+\t  vector unsigned char result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned char intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11100101 (vector unsigned char a_sources [],\n+\t\t vector unsigned char b_sources [],\n+\t\t vector unsigned char c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned char a = a_sources [i];\n+\t  vector unsigned char b = b_sources [j];\n+\t  vector unsigned char c = c_sources [k];\n+\t  vector unsigned char result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned char intended =\n+\t    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 16; l++)\n+\t    {\n+\t      for (int m = 0; m < 8; m++)\n+\t      {\n+\t\tunsigned char bit_selector = (0x01 << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11110011 (vector unsigned char a_sources [],\n+\t\t vector unsigned char b_sources [],\n+\t\t vector unsigned char c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned char a = a_sources [i];\n+\t  vector unsigned char b = b_sources [j];\n+\t  vector unsigned char c = c_sources [k];\n+\t  vector unsigned char result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned char intended = {\n+\t    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  for (int i = 0; i < 16; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned char a_sources [NumSamples] = {\n+    { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n+      0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 },\n+    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },\n+    { 0xcc, 0xcc, 0xcc, 0xcc, 0x55, 0x55, 0x55, 0x55,\n+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n+    { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,\n+      0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69 },\n+  };\n+  vector unsigned char b_sources [NumSamples] = {\n+    { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n+      0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 },\n+    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },\n+    { 0xcc, 0xcc, 0xcc, 0xcc, 0x55, 0x55, 0x55, 0x55,\n+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n+    { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,\n+      0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69 },\n+  };\n+  vector unsigned char c_sources [NumSamples] = {\n+    { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n+      0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0 },\n+    { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,\n+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },\n+    { 0xcc, 0xcc, 0xcc, 0xcc, 0x55, 0x55, 0x55, 0x55,\n+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },\n+    { 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,\n+      0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}"}, {"sha": "868fb23c01b60b7026df89feafb2df89a83ad575", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-10.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-10.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+/* vec_all_eq not yet supported for arguments of type\n+   vector unsigned __int128.  */\n+int\n+vector_equal (vector unsigned __int128 a, vector unsigned __int128 b)\n+{\n+  return a[0] == b[0];\n+}\n+\n+void\n+doTests00000001 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result;\n+\t  result = vec_ternarylogic (a, b, c, 0xfff); /* { dg-error \"8-bit unsigned literal\" } */\n+\t  vector unsigned __int128 intended = (a & b & c);\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11100101 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result;\n+\t  result = vec_ternarylogic (a, b, c, -1); /* { dg-error \"8-bit unsigned literal\" } */\n+\t  vector unsigned __int128 intended = { 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 1; l++)\n+\t    {\n+\t      for (int m = 0; m < 128; m++)\n+\t      {\n+\t\tunsigned __int128 bit_selector = 0x01;\n+\t\tbit_selector = bit_selector << m;\n+\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11110011 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result;\n+\t  result = vec_ternarylogic (a, b, c, i);  /* { dg-error \"8-bit unsigned literal\" } */\n+\t  vector unsigned __int128 intended = { 0 };\n+\t  for (int i = 0; i < 1; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, int *argv [])\n+{\n+  vector unsigned __int128 a_sources [NumSamples];\n+  vector unsigned __int128 b_sources [NumSamples];\n+  vector unsigned __int128 c_sources [NumSamples];\n+\n+  a_sources [0][0] = 0x0123456789abcdefull;\n+  a_sources [0][0] = a_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  a_sources [1][0] = 0x5555555555555555ull;\n+  a_sources [1][0] = a_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  a_sources [2][0] = 0xcccccccc55555555ull;\n+  a_sources [2][0] = a_sources [2][0] << 64 | 0x0000000000000000ull;\n+  a_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  a_sources [3][0] = a_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  b_sources [0][0] = 0x0123456789abcdefull;\n+  b_sources [0][0] = b_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  b_sources [1][0] = 0x5555555555555555ull;\n+  b_sources [1][0] = b_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  b_sources [2][0] = 0xcccccccc55555555ull;\n+  b_sources [2][0] = b_sources [2][0] << 64 | 0x0000000000000000ull;\n+  b_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  b_sources [3][0] = b_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  c_sources [0][0] = 0x0123456789abcdefull;\n+  c_sources [0][0] = c_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  c_sources [1][0] = 0x5555555555555555ull;\n+  c_sources [1][0] = c_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  c_sources [2][0] = 0xcccccccc55555555ull;\n+  c_sources [2][0] = c_sources [2][0] << 64 | 0x0000000000000000ull;\n+  c_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  c_sources [3][0] = c_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}"}, {"sha": "0d482b8e672e08bd402f3e7d6e85bb5e9e3ca0c4", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-2.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-2.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned short int a_sources [],\n+\t\t vector unsigned short int b_sources [],\n+\t\t vector unsigned short int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned short a = a_sources [i];\n+\t  vector unsigned short b = b_sources [j];\n+\t  vector unsigned short c = c_sources [k];\n+\t  vector unsigned short result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned short intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11100101 (vector unsigned short int a_sources [],\n+\t\t      vector unsigned short int b_sources [],\n+\t\t      vector unsigned short int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned short a = a_sources [i];\n+\t  vector unsigned short b = b_sources [j];\n+\t  vector unsigned short c = c_sources [k];\n+\t  vector unsigned short result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned short intended =\n+\t    { 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 8; l++)\n+\t    {\n+\t      for (int m = 0; m < 16; m++)\n+\t      {\n+\t\tunsigned short int bit_selector = (0x01 << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11110011 (vector unsigned short int a_sources [],\n+\t\t      vector unsigned short int b_sources [],\n+\t\t      vector unsigned short int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned short a = a_sources [i];\n+\t  vector unsigned short b = b_sources [j];\n+\t  vector unsigned short c = c_sources [k];\n+\t  vector unsigned short result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned short intended = { 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  for (int i = 0; i < 8; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short int a_sources [NumSamples] = {\n+    { 0x0123, 0x4567, 0x89ab, 0xcdef, 0x1234, 0x5678, 0x9abc, 0xdef0 },\n+    { 0x5555, 0x5555, 0x5555, 0x5555, 0xffff, 0xffff, 0xffff, 0xffff },\n+    { 0xcccc, 0xcccc, 0x5555, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000 },\n+    { 0xe7e7, 0xe7e7, 0xe7e7, 0xe7e7, 0x6969, 0x6969, 0x6969, 0x6969 },\n+  };\n+  vector unsigned short int b_sources [NumSamples] = {\n+    { 0x0123, 0x4567, 0x89ab, 0xcdef, 0x1234, 0x5678, 0x9abc, 0xdef0 },\n+    { 0x5555, 0x5555, 0x5555, 0x5555, 0xffff, 0xffff, 0xffff, 0xffff },\n+    { 0xcccc, 0xcccc, 0x5555, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000 },\n+    { 0xe7e7, 0xe7e7, 0xe7e7, 0xe7e7, 0x6969, 0x6969, 0x6969, 0x6969 },\n+  };\n+  vector unsigned short int c_sources [NumSamples] = {\n+    { 0x0123, 0x4567, 0x89ab, 0xcdef, 0x1234, 0x5678, 0x9abc, 0xdef0 },\n+    { 0x5555, 0x5555, 0x5555, 0x5555, 0xffff, 0xffff, 0xffff, 0xffff },\n+    { 0xcccc, 0xcccc, 0x5555, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000 },\n+    { 0xe7e7, 0xe7e7, 0xe7e7, 0xe7e7, 0x6969, 0x6969, 0x6969, 0x6969 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}, {"sha": "a7245e51da2904c0210ba94744729500caaae7e3", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-3.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-3.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned short int a_sources [],\n+\t\t vector unsigned short int b_sources [],\n+\t\t vector unsigned short int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned short a = a_sources [i];\n+\t  vector unsigned short b = b_sources [j];\n+\t  vector unsigned short c = c_sources [k];\n+\t  vector unsigned short result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned short intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11100101 (vector unsigned short int a_sources [],\n+\t\t      vector unsigned short int b_sources [],\n+\t\t      vector unsigned short int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned short a = a_sources [i];\n+\t  vector unsigned short b = b_sources [j];\n+\t  vector unsigned short c = c_sources [k];\n+\t  vector unsigned short result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned short intended =\n+\t    { 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 8; l++)\n+\t    {\n+\t      for (int m = 0; m < 16; m++)\n+\t      {\n+\t\tunsigned short int bit_selector = (0x01 << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11110011 (vector unsigned short int a_sources [],\n+\t\t      vector unsigned short int b_sources [],\n+\t\t      vector unsigned short int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned short a = a_sources [i];\n+\t  vector unsigned short b = b_sources [j];\n+\t  vector unsigned short c = c_sources [k];\n+\t  vector unsigned short result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned short intended = { 0, 0, 0, 0, 0, 0, 0, 0 };\n+\t  for (int i = 0; i < 8; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, short *argv [])\n+{\n+  vector unsigned short int a_sources [NumSamples] = {\n+    { 0x0123, 0x4567, 0x89ab, 0xcdef, 0x1234, 0x5678, 0x9abc, 0xdef0 },\n+    { 0x5555, 0x5555, 0x5555, 0x5555, 0xffff, 0xffff, 0xffff, 0xffff },\n+    { 0xcccc, 0xcccc, 0x5555, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000 },\n+    { 0xe7e7, 0xe7e7, 0xe7e7, 0xe7e7, 0x6969, 0x6969, 0x6969, 0x6969 },\n+  };\n+  vector unsigned short int b_sources [NumSamples] = {\n+    { 0x0123, 0x4567, 0x89ab, 0xcdef, 0x1234, 0x5678, 0x9abc, 0xdef0 },\n+    { 0x5555, 0x5555, 0x5555, 0x5555, 0xffff, 0xffff, 0xffff, 0xffff },\n+    { 0xcccc, 0xcccc, 0x5555, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000 },\n+    { 0xe7e7, 0xe7e7, 0xe7e7, 0xe7e7, 0x6969, 0x6969, 0x6969, 0x6969 },\n+  };\n+  vector unsigned short int c_sources [NumSamples] = {\n+    { 0x0123, 0x4567, 0x89ab, 0xcdef, 0x1234, 0x5678, 0x9abc, 0xdef0 },\n+    { 0x5555, 0x5555, 0x5555, 0x5555, 0xffff, 0xffff, 0xffff, 0xffff },\n+    { 0xcccc, 0xcccc, 0x5555, 0x5555, 0x0000, 0x0000, 0x0000, 0x0000 },\n+    { 0xe7e7, 0xe7e7, 0xe7e7, 0xe7e7, 0x6969, 0x6969, 0x6969, 0x6969 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}, {"sha": "dbd9ffb856e638a94d57557af2b5e0703e294cc6", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-4.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-4.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned int a_sources [],\n+\t\t vector unsigned int b_sources [],\n+\t\t vector unsigned int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned int a = a_sources [i];\n+\t  vector unsigned int b = b_sources [j];\n+\t  vector unsigned int c = c_sources [k];\n+\t  vector unsigned int result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned int intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11100101 (vector unsigned int a_sources [],\n+\t\t      vector unsigned int b_sources [],\n+\t\t      vector unsigned int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned int a = a_sources [i];\n+\t  vector unsigned int b = b_sources [j];\n+\t  vector unsigned int c = c_sources [k];\n+\t  vector unsigned int result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned int intended = { 0, 0, 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 4; l++)\n+\t    {\n+\t      for (int m = 0; m < 32; m++)\n+\t      {\n+\t\tunsigned int bit_selector = (0x01 << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11110011 (vector unsigned int a_sources [],\n+\t\t      vector unsigned int b_sources [],\n+\t\t      vector unsigned int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned int a = a_sources [i];\n+\t  vector unsigned int b = b_sources [j];\n+\t  vector unsigned int c = c_sources [k];\n+\t  vector unsigned int result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned int intended = { 0, 0, 0, 0 };\n+\t  for (int i = 0; i < 4; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, int *argv [])\n+{\n+  vector unsigned int a_sources [NumSamples] = {\n+    { 0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0 },\n+    { 0x55555555, 0x55555555, 0xffffffff, 0xffffffff },\n+    { 0xcccccccc, 0x55555555, 0x00000000, 0x00000000 },\n+    { 0xe7e7e7e7, 0xe7e7e7e7, 0x69696969, 0x69696969 },\n+  };\n+  vector unsigned int b_sources [NumSamples] = {\n+    { 0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0 },\n+    { 0x55555555, 0x55555555, 0xffffffff, 0xffffffff },\n+    { 0xcccccccc, 0x55555555, 0x00000000, 0x00000000 },\n+    { 0xe7e7e7e7, 0xe7e7e7e7, 0x69696969, 0x69696969 },\n+  };\n+  vector unsigned int c_sources [NumSamples] = {\n+    { 0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0 },\n+    { 0x55555555, 0x55555555, 0xffffffff, 0xffffffff },\n+    { 0xcccccccc, 0x55555555, 0x00000000, 0x00000000 },\n+    { 0xe7e7e7e7, 0xe7e7e7e7, 0x69696969, 0x69696969 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}, {"sha": "4d5d8e5e0d6a0776fc389ef47cc078a693a33e37", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-5.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-5.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned int a_sources [],\n+\t\t vector unsigned int b_sources [],\n+\t\t vector unsigned int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned int a = a_sources [i];\n+\t  vector unsigned int b = b_sources [j];\n+\t  vector unsigned int c = c_sources [k];\n+\t  vector unsigned int result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned int intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11100101 (vector unsigned int a_sources [],\n+\t\t      vector unsigned int b_sources [],\n+\t\t      vector unsigned int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned int a = a_sources [i];\n+\t  vector unsigned int b = b_sources [j];\n+\t  vector unsigned int c = c_sources [k];\n+\t  vector unsigned int result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned int intended = { 0, 0, 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 4; l++)\n+\t    {\n+\t      for (int m = 0; m < 32; m++)\n+\t      {\n+\t\tunsigned int bit_selector = (0x01 << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11110011 (vector unsigned int a_sources [],\n+\t\t      vector unsigned int b_sources [],\n+\t\t      vector unsigned int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned int a = a_sources [i];\n+\t  vector unsigned int b = b_sources [j];\n+\t  vector unsigned int c = c_sources [k];\n+\t  vector unsigned int result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned int intended = { 0, 0, 0, 0 };\n+\t  for (int i = 0; i < 4; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, int *argv [])\n+{\n+  vector unsigned int a_sources [NumSamples] = {\n+    { 0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0 },\n+    { 0x55555555, 0x55555555, 0xffffffff, 0xffffffff },\n+    { 0xcccccccc, 0x55555555, 0x00000000, 0x00000000 },\n+    { 0xe7e7e7e7, 0xe7e7e7e7, 0x69696969, 0x69696969 },\n+  };\n+  vector unsigned int b_sources [NumSamples] = {\n+    { 0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0 },\n+    { 0x55555555, 0x55555555, 0xffffffff, 0xffffffff },\n+    { 0xcccccccc, 0x55555555, 0x00000000, 0x00000000 },\n+    { 0xe7e7e7e7, 0xe7e7e7e7, 0x69696969, 0x69696969 },\n+  };\n+  vector unsigned int c_sources [NumSamples] = {\n+    { 0x01234567, 0x89abcdef, 0x12345678, 0x9abcdef0 },\n+    { 0x55555555, 0x55555555, 0xffffffff, 0xffffffff },\n+    { 0xcccccccc, 0x55555555, 0x00000000, 0x00000000 },\n+    { 0xe7e7e7e7, 0xe7e7e7e7, 0x69696969, 0x69696969 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}"}, {"sha": "0114bacd5fc1556745ed5bb29420510c29037cfa", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-6.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-6.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned long long int a_sources [],\n+\t\t vector unsigned long long int b_sources [],\n+\t\t vector unsigned long long int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned long long a = a_sources [i];\n+\t  vector unsigned long long b = b_sources [j];\n+\t  vector unsigned long long c = c_sources [k];\n+\t  vector unsigned long long result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned long long intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11100101 (vector unsigned long long int a_sources [],\n+\t\t      vector unsigned long long int b_sources [],\n+\t\t      vector unsigned long long int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned long long a = a_sources [i];\n+\t  vector unsigned long long b = b_sources [j];\n+\t  vector unsigned long long c = c_sources [k];\n+\t  vector unsigned long long result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned long long intended = { 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 2; l++)\n+\t    {\n+\t      for (int m = 0; m < 64; m++)\n+\t      {\n+\t\tunsigned long long int bit_selector = (0x01ll << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= (0x01ll << m);\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11110011 (vector unsigned long long int a_sources [],\n+\t\t      vector unsigned long long int b_sources [],\n+\t\t      vector unsigned long long int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned long long a = a_sources [i];\n+\t  vector unsigned long long b = b_sources [j];\n+\t  vector unsigned long long c = c_sources [k];\n+\t  vector unsigned long long result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned long long intended = { 0, 0 };\n+\t  intended [0] = b [0] | ~(a [0] & c [0]);\n+\t  intended [1] = b [1] | ~(a [1] & c [1]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int a_sources [NumSamples] = {\n+    { 0x0123456789abcdef, 0x123456789abcdef0 },\n+    { 0x5555555555555555, 0xffffffffffffffff },\n+    { 0xcccccccc55555555, 0x0000000000000000 },\n+    { 0xe7e7e7e7e7e7e7e7, 0x6969696969696969 },\n+  };\n+  vector unsigned long long int b_sources [NumSamples] = {\n+    { 0x0123456789abcdef, 0x123456789abcdef0 },\n+    { 0x5555555555555555, 0xffffffffffffffff },\n+    { 0xcccccccc55555555, 0x0000000000000000 },\n+    { 0xe7e7e7e7e7e7e7e7, 0x6969696969696969 },\n+  };\n+  vector unsigned long long int c_sources [NumSamples] = {\n+    { 0x0123456789abcdef, 0x123456789abcdef0 },\n+    { 0x5555555555555555, 0xffffffffffffffff },\n+    { 0xcccccccc55555555, 0x0000000000000000 },\n+    { 0xe7e7e7e7e7e7e7e7, 0x6969696969696969 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}, {"sha": "27ac4a22866eb9795c88e417ceb3bd476fd578d3", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-7.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-7.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+void\n+doTests00000001 (vector unsigned long long int a_sources [],\n+\t\t vector unsigned long long int b_sources [],\n+\t\t vector unsigned long long int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned long long a = a_sources [i];\n+\t  vector unsigned long long b = b_sources [j];\n+\t  vector unsigned long long c = c_sources [k];\n+\t  vector unsigned long long result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned long long intended = (a & b & c);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11100101 (vector unsigned long long int a_sources [],\n+\t\t      vector unsigned long long int b_sources [],\n+\t\t      vector unsigned long long int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned long long a = a_sources [i];\n+\t  vector unsigned long long b = b_sources [j];\n+\t  vector unsigned long long c = c_sources [k];\n+\t  vector unsigned long long result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned long long intended = { 0, 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 2; l++)\n+\t    {\n+\t      for (int m = 0; m < 64; m++)\n+\t      {\n+\t\tunsigned long long int bit_selector = (0x01ll << m);\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= (0x01ll << m);\n+\t      }\n+\t    }\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void doTests11110011 (vector unsigned long long int a_sources [],\n+\t\t      vector unsigned long long int b_sources [],\n+\t\t      vector unsigned long long int c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned long long a = a_sources [i];\n+\t  vector unsigned long long b = b_sources [j];\n+\t  vector unsigned long long c = c_sources [k];\n+\t  vector unsigned long long result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned long long intended = { 0, 0 };\n+\t  intended [0] = b [0] | ~(a [0] & c [0]);\n+\t  intended [1] = b [1] | ~(a [1] & c [1]);\n+\t  if (!vec_all_eq (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int a_sources [NumSamples] = {\n+    { 0x0123456789abcdef, 0x123456789abcdef0 },\n+    { 0x5555555555555555, 0xffffffffffffffff },\n+    { 0xcccccccc55555555, 0x0000000000000000 },\n+    { 0xe7e7e7e7e7e7e7e7, 0x6969696969696969 },\n+  };\n+  vector unsigned long long int b_sources [NumSamples] = {\n+    { 0x0123456789abcdef, 0x123456789abcdef0 },\n+    { 0x5555555555555555, 0xffffffffffffffff },\n+    { 0xcccccccc55555555, 0x0000000000000000 },\n+    { 0xe7e7e7e7e7e7e7e7, 0x6969696969696969 },\n+  };\n+  vector unsigned long long int c_sources [NumSamples] = {\n+    { 0x0123456789abcdef, 0x123456789abcdef0 },\n+    { 0x5555555555555555, 0xffffffffffffffff },\n+    { 0xcccccccc55555555, 0x0000000000000000 },\n+    { 0xe7e7e7e7e7e7e7e7, 0x6969696969696969 },\n+  };\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}"}, {"sha": "0d6b9e742393206fc7008969cfeb54dec005ed14", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-8.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-8.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+/* vec_all_eq not yet supported for arguments of type\n+   vector unsigned __int128.  */\n+int\n+vector_equal (vector unsigned __int128 a, vector unsigned __int128 b)\n+{\n+  return a[0] == b[0];\n+}\n+\n+void\n+doTests00000001 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned __int128 intended = (a & b & c);\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11100101 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned __int128 intended = { 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 1; l++)\n+\t    {\n+\t      for (int m = 0; m < 128; m++)\n+\t      {\n+\t\tunsigned __int128 bit_selector = 0x01;\n+\t\tbit_selector = bit_selector << m;\n+\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11110011 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned __int128 intended = { 0 };\n+\t  for (int i = 0; i < 1; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, int *argv [])\n+{\n+  vector unsigned __int128 a_sources [NumSamples];\n+  vector unsigned __int128 b_sources [NumSamples];\n+  vector unsigned __int128 c_sources [NumSamples];\n+\n+  a_sources [0][0] = 0x0123456789abcdefull;\n+  a_sources [0][0] = a_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  a_sources [1][0] = 0x5555555555555555ull;\n+  a_sources [1][0] = a_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  a_sources [2][0] = 0xcccccccc55555555ull;\n+  a_sources [2][0] = a_sources [2][0] << 64 | 0x0000000000000000ull;\n+  a_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  a_sources [3][0] = a_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  b_sources [0][0] = 0x0123456789abcdefull;\n+  b_sources [0][0] = b_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  b_sources [1][0] = 0x5555555555555555ull;\n+  b_sources [1][0] = b_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  b_sources [2][0] = 0xcccccccc55555555ull;\n+  b_sources [2][0] = b_sources [2][0] << 64 | 0x0000000000000000ull;\n+  b_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  b_sources [3][0] = b_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  c_sources [0][0] = 0x0123456789abcdefull;\n+  c_sources [0][0] = c_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  c_sources [1][0] = 0x5555555555555555ull;\n+  c_sources [1][0] = c_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  c_sources [2][0] = 0xcccccccc55555555ull;\n+  c_sources [2][0] = c_sources [2][0] << 64 | 0x0000000000000000ull;\n+  c_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  c_sources [3][0] = c_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}, {"sha": "b61135968679988943b34fa973c3e6a81e05ac72", "filename": "gcc/testsuite/gcc.target/powerpc/vec-ternarylogic-9.c", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/840ac85ced0695fefecee433327e4298b4adb20a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-ternarylogic-9.c?ref=840ac85ced0695fefecee433327e4298b4adb20a", "patch": "@@ -0,0 +1,129 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+#define NumSamples 4\n+\n+/* vec_all_eq not yet supported for arguments of type\n+   vector unsigned __int128.  */\n+int\n+vector_equal (vector unsigned __int128 a, vector unsigned __int128 b)\n+{\n+  return a[0] == b[0];\n+}\n+\n+void\n+doTests00000001 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result = vec_ternarylogic (a, b, c, 0x01);\n+\t  vector unsigned __int128 intended = (a & b & c);\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11100101 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result = vec_ternarylogic (a, b, c, 0xe5);\n+\t  vector unsigned __int128 intended = { 0 };\n+\t  // Supposed to be a ? c: nand (b,c)\n+\t  for (int l = 0; l < 1; l++)\n+\t    {\n+\t      for (int m = 0; m < 128; m++)\n+\t      {\n+\t\tunsigned __int128 bit_selector = 0x01;\n+\t\tbit_selector = bit_selector << m;\n+\n+\t\tif (a[l] & bit_selector)\n+\t\t  intended [l] |= c [l] & bit_selector;\n+\t\telse if ((b [l] & c [l] & bit_selector) == 0)\n+\t\t  intended [l] |= bit_selector;\n+\t      }\n+\t    }\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+void\n+doTests11110011 (vector unsigned __int128 a_sources [],\n+\t\t vector unsigned __int128 b_sources [],\n+\t\t vector unsigned __int128 c_sources []) {\n+  for (int i = 0; i < NumSamples; i++)\n+    for (int j = 0; j < NumSamples; j++)\n+      for (int k = 0; k < NumSamples; k++)\n+\t{\n+\t  vector unsigned __int128 a = a_sources [i];\n+\t  vector unsigned __int128 b = b_sources [j];\n+\t  vector unsigned __int128 c = c_sources [k];\n+\t  vector unsigned __int128 result = vec_ternarylogic (a, b, c, 0xfb);\n+\t  vector unsigned __int128 intended = { 0 };\n+\t  for (int i = 0; i < 1; i++)\n+\t    intended [i] = b [i] | ~(a [i] & c [i]);\n+\t  if (!vector_equal (result, intended))\n+\t    abort ();\n+\t}\n+}\n+\n+int main (int argc, int *argv [])\n+{\n+  vector unsigned __int128 a_sources [NumSamples];\n+  vector unsigned __int128 b_sources [NumSamples];\n+  vector unsigned __int128 c_sources [NumSamples];\n+\n+  a_sources [0][0] = 0x0123456789abcdefull;\n+  a_sources [0][0] = a_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  a_sources [1][0] = 0x5555555555555555ull;\n+  a_sources [1][0] = a_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  a_sources [2][0] = 0xcccccccc55555555ull;\n+  a_sources [2][0] = a_sources [2][0] << 64 | 0x0000000000000000ull;\n+  a_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  a_sources [3][0] = a_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  b_sources [0][0] = 0x0123456789abcdefull;\n+  b_sources [0][0] = b_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  b_sources [1][0] = 0x5555555555555555ull;\n+  b_sources [1][0] = b_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  b_sources [2][0] = 0xcccccccc55555555ull;\n+  b_sources [2][0] = b_sources [2][0] << 64 | 0x0000000000000000ull;\n+  b_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  b_sources [3][0] = b_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  c_sources [0][0] = 0x0123456789abcdefull;\n+  c_sources [0][0] = c_sources [0][0] << 64 | 0x123456789abcdef0ull;\n+  c_sources [1][0] = 0x5555555555555555ull;\n+  c_sources [1][0] = c_sources [1][0] << 64 | 0xffffffffffffffffull;\n+  c_sources [2][0] = 0xcccccccc55555555ull;\n+  c_sources [2][0] = c_sources [2][0] << 64 | 0x0000000000000000ull;\n+  c_sources [3][0] = 0xe7e7e7e7e7e7e7e7ull;\n+  c_sources [3][0] = c_sources [3][0] << 64 | 0x6969696969696969ull;\n+\n+  doTests00000001 (a_sources, b_sources, c_sources);\n+  doTests11100101 (a_sources, b_sources, c_sources);\n+  doTests11110011 (a_sources, b_sources, c_sources);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mxxeval\\M} } } */"}]}