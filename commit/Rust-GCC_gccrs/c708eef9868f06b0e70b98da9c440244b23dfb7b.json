{"sha": "c708eef9868f06b0e70b98da9c440244b23dfb7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwOGVlZjk4NjhmMDZiMGU3MGI5OGRhOWM0NDAyNDRiMjNkZmI3Yg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-09-09T21:48:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-09T21:48:42Z"}, "message": "except.h (current_function_eh_stub_label): Declare.\n\n        * except.h (current_function_eh_stub_label): Declare.\n        (current_function_eh_old_stub_label): Declare.\n        * function.h (struct function): New members eh_stub_label and\n        eh_old_stub_label.\n        * except.c (current_function_eh_stub_label): New variable.\n        (current_function_eh_old_stub_label): New variable.\n        (init_eh_for_function): Clear them.\n        (save_eh_status): Save them.\n        (restore_eh_status): Restore them.\n        (expand_builtin_eh_stub): Set current_function_eh_stub_label.\n        (expand_builtin_eh_stub_old): Set current_function_eh_old_stub_label.\n        * flow.c (find_basic_blocks_1): When handling a REG_LABEL note, don't\n        make an edge from the block that contains it to the block starting\n        with the label if this label is one of the eh stub labels.\n        If eh stub labels exist, show they are reachable from the last block\n        in the function.\n\nFrom-SVN: r22369", "tree": {"sha": "7c1fc5c74cfa08035d86375a446d67f690e81e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c1fc5c74cfa08035d86375a446d67f690e81e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c708eef9868f06b0e70b98da9c440244b23dfb7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c708eef9868f06b0e70b98da9c440244b23dfb7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c708eef9868f06b0e70b98da9c440244b23dfb7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c708eef9868f06b0e70b98da9c440244b23dfb7b/comments", "author": null, "committer": null, "parents": [{"sha": "e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e837810ee2bbfa22c4529a11ebc3a3a66aafbb"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "ccb15b3f1e852213afaf13f6ad9a504cb073e336", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c708eef9868f06b0e70b98da9c440244b23dfb7b", "patch": "@@ -1,5 +1,22 @@\n Wed Sep  9 21:58:41 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n+\t* except.h (current_function_eh_stub_label): Declare.\n+\t(current_function_eh_old_stub_label): Declare.\n+\t* function.h (struct function): New members eh_stub_label and\n+\teh_old_stub_label.\n+\t* except.c (current_function_eh_stub_label): New variable.\n+\t(current_function_eh_old_stub_label): New variable.\n+\t(init_eh_for_function): Clear them.\n+\t(save_eh_status): Save them.\n+\t(restore_eh_status): Restore them.\n+\t(expand_builtin_eh_stub): Set current_function_eh_stub_label.\n+\t(expand_builtin_eh_stub_old): Set current_function_eh_old_stub_label.\n+\t* flow.c (find_basic_blocks_1): When handling a REG_LABEL note, don't\n+\tmake an edge from the block that contains it to the block starting\n+\twith the label if this label is one of the eh stub labels.\n+\tIf eh stub labels exist, show they are reachable from the last block\n+\tin the function.\n+\n \t* reload1.c (reload): Break out several subroutines and make some\n \tvariables global.\n \t(calculate_needs_all_insns): New function, broken out of reload."}, {"sha": "5f2c61ad38809802a9eebb997e8b8b9f12176a38", "filename": "gcc/except.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=c708eef9868f06b0e70b98da9c440244b23dfb7b", "patch": "@@ -431,6 +431,12 @@ rtx exception_handler_labels;\n \n rtx current_function_ehc;\n \n+/* The labels generated by expand_builtin_eh_stub and\n+   expand_builtin_eh_stub_old.  */\n+\n+rtx current_function_eh_stub_label;\n+rtx current_function_eh_old_stub_label;\n+\n /* A stack used for keeping track of the currently active exception\n    handling region.  As each exception region is started, an entry\n    describing the region is pushed onto this stack.  The current\n@@ -2148,6 +2154,8 @@ init_eh_for_function ()\n   caught_return_label_stack = 0;\n   protect_list = NULL_TREE;\n   current_function_ehc = NULL_RTX;\n+  current_function_eh_stub_label = NULL_RTX;\n+  current_function_eh_old_stub_label = NULL_RTX;\n }\n \n /* Save some of the per-function EH info into the save area denoted by\n@@ -2170,6 +2178,8 @@ save_eh_status (p)\n   p->caught_return_label_stack = caught_return_label_stack;\n   p->protect_list = protect_list;\n   p->ehc = current_function_ehc;\n+  p->eh_stub_label = current_function_eh_stub_label;\n+  p->eh_old_stub_label = current_function_eh_old_stub_label;\n \n   init_eh_for_function ();\n }\n@@ -2193,6 +2203,8 @@ restore_eh_status (p)\n   ehstack = p->ehstack;\n   catchstack = p->catchstack;\n   current_function_ehc = p->ehc;\n+  current_function_eh_stub_label = p->eh_stub_label;\n+  current_function_eh_old_stub_label = p->eh_old_stub_label;\n }\n \f\n /* This section is for the exception handling specific optimization\n@@ -2502,6 +2514,8 @@ expand_builtin_eh_stub_old ()\n   rtx after_stub = gen_label_rtx ();\n   rtx handler, offset;\n \n+  current_function_eh_old_stub_label = stub_start;\n+\n   emit_jump (after_stub);\n   emit_label (stub_start);\n \n@@ -2521,6 +2535,8 @@ expand_builtin_eh_stub ()\n   rtx handler, offset;\n   rtx temp;\n \n+  current_function_eh_stub_label = stub_start;\n+\n   emit_jump (after_stub);\n   emit_label (stub_start);\n "}, {"sha": "d20b6067cb081c13268430d29ec5010d6c036b15", "filename": "gcc/except.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=c708eef9868f06b0e70b98da9c440244b23dfb7b", "patch": "@@ -24,6 +24,12 @@ typedef struct rtx_def *_except_rtx;\n #define rtx _except_rtx\n #endif\n \n+/* The labels generated by expand_builtin_eh_stub and\n+   expand_builtin_eh_stub_old.  */\n+\n+extern rtx current_function_eh_stub_label;\n+extern rtx current_function_eh_old_stub_label;\n+\n #ifdef TREE_CODE\n \n /* A stack of labels. CHAIN points to the next entry in the stack.  */\n@@ -82,7 +88,6 @@ struct eh_queue {\n   struct eh_node *tail;\n };\n \n-\n /* Start an exception handling region.  All instructions emitted after\n    this point are considered to be part of the region until\n    expand_eh_region_end () is invoked.  */"}, {"sha": "af9eb1cde836c9685e7d2884b1e9424ff4e4027e", "filename": "gcc/flow.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c708eef9868f06b0e70b98da9c440244b23dfb7b", "patch": "@@ -484,7 +484,9 @@ find_basic_blocks_1 (f, nonlocal_label_list, live_reachable_p)\n \t{\n \t  /* Make a list of all labels referred to other than by jumps.  */\n \t  for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t    if (REG_NOTE_KIND (note) == REG_LABEL)\n+\t    if (REG_NOTE_KIND (note) == REG_LABEL\n+\t\t&& XEXP (note, 0) != current_function_eh_stub_label\n+\t\t&& XEXP (note, 0) != current_function_eh_old_stub_label)\n \t      label_value_list = gen_rtx_EXPR_LIST (VOIDmode, XEXP (note, 0),\n \t\t\t\t\t\t    label_value_list);\n \t}\n@@ -589,7 +591,6 @@ find_basic_blocks_1 (f, nonlocal_label_list, live_reachable_p)\n \t\t  {\n \t\t    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n \t\t      {\n-\t\t\t\n \t\t\t/* References to labels in non-jumping insns have\n \t\t\t   REG_LABEL notes attached to them.\n \n@@ -609,12 +610,17 @@ find_basic_blocks_1 (f, nonlocal_label_list, live_reachable_p)\n \t\t\t   associated insns aren't marked dead, so we make\n \t\t\t   the block in question live and create an edge from\n \t\t\t   this insn to the label.  This is not strictly\n-\t\t\t   correct, but it is close enough for now.  */\n+\t\t\t   correct, but it is close enough for now.  \n+\n+\t\t\t   See below for code that handles the eh_stub labels\n+\t\t\t   specially.  */\n \t\t\tfor (note = REG_NOTES (insn);\n \t\t\t     note;\n \t\t\t     note = XEXP (note, 1))\n \t\t\t  {\n-\t\t\t    if (REG_NOTE_KIND (note) == REG_LABEL)\n+\t\t\t    if (REG_NOTE_KIND (note) == REG_LABEL\n+\t\t\t\t&& XEXP (note, 0) != current_function_eh_stub_label\n+\t\t\t\t&& XEXP (note, 0) != current_function_eh_old_stub_label)\n \t\t\t      {\n \t\t\t\tx = XEXP (note, 0);\n \t\t\t\tblock_live[BLOCK_NUM (x)] = 1;\n@@ -695,6 +701,22 @@ find_basic_blocks_1 (f, nonlocal_label_list, live_reachable_p)\n \t\t\t  }\n \t\t      }\n \t\t  }\n+\t\t/* We know something about the structure of the function\n+\t\t   __throw in libgcc2.c.  It is the only function that ever\n+\t\t   contains eh_stub labels.  It modifies its return address\n+\t\t   so that the last block returns to one of the eh_stub labels\n+\t\t   within it.  So we have to make additional edges in the\n+\t\t   flow graph.  */\n+\t\tif (i + 1 == n_basic_blocks\n+\t\t    && current_function_eh_stub_label != 0)\n+\t\t  {\n+\t\t    mark_label_ref (gen_rtx_LABEL_REF (VOIDmode,\n+\t\t\t\t\t\t       current_function_eh_stub_label),\n+\t\t\t\t    basic_block_end[i], 0);\n+\t\t    mark_label_ref (gen_rtx_LABEL_REF (VOIDmode,\n+\t\t\t\t\t\t       current_function_eh_old_stub_label),\n+\t\t\t\t    basic_block_end[i], 0);\n+\t\t  }\n \t      }\n \t}\n "}, {"sha": "786e062a4872d7db2e75af0bf2780c62a21be499", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c708eef9868f06b0e70b98da9c440244b23dfb7b/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=c708eef9868f06b0e70b98da9c440244b23dfb7b", "patch": "@@ -142,6 +142,8 @@ struct function\n   rtx catch_clauses;\n   struct label_node *false_label_stack;\n   struct label_node *caught_return_label_stack;\n+  rtx eh_stub_label;\n+  rtx eh_old_stub_label;\n   tree protect_list;\n   rtx ehc;\n "}]}