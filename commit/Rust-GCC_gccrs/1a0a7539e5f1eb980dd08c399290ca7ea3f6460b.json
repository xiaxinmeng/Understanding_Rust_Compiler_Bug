{"sha": "1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEwYTc1MzllNWYxZWI5ODBkZDA4YzM5OTI5MGNhN2VhM2Y2NDYwYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-03-31T09:32:52Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-03-31T09:32:52Z"}, "message": "gcc.c (LIBGCC_SPEC): Folded %L and duplicate %G here...\n\n* gcc.c (LIBGCC_SPEC): Folded %L and duplicate %G here...\n(LINK_COMMAND_SPEC): ... from here.\n(init_gcc_specs): Duplicate it here too, omitting\nshared_name in the second copy.\n(init_spec): Test for duplicate\n* config/i386/djgpp.h (LINK_COMMAND_SPEC): Remove `%L %G'.\n\nFrom-SVN: r51639", "tree": {"sha": "0c2e4b84b9367896cf15095063afbb4b0d85ba8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2e4b84b9367896cf15095063afbb4b0d85ba8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/comments", "author": null, "committer": null, "parents": [{"sha": "efe52a8241b82917ff410715a8e4a27221e9152a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe52a8241b82917ff410715a8e4a27221e9152a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe52a8241b82917ff410715a8e4a27221e9152a"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "eae2a27d6f016caf761cf1e0a66253c1163cfd7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "patch": "@@ -1,3 +1,12 @@\n+2002-03-31  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc.c (LIBGCC_SPEC): Folded %L and duplicate %G here...\n+\t(LINK_COMMAND_SPEC): ... from here.\n+\t(init_gcc_specs): Duplicate it here too, omitting \n+\tshared_name in the second copy.\n+\t(init_spec): Test for duplicate\n+\t* config/i386/djgpp.h (LINK_COMMAND_SPEC): Remove `%L %G'.\n+\n 2002-03-30  David S. Miller  <davem@redhat.com>\n \n \t* config/sparc/linux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Define."}, {"sha": "ba3060050dd336c91d5fa765692cb0ed1653d27f", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for an i386 running MS-DOS with DJGPP.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -106,7 +106,7 @@ Boston, MA 02111-1307, USA.  */\n \\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n \\t%{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n \\t%{static:} %{L*} %D %o\\\n-\\t%{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n+\\t%{!nostdlib:%{!nodefaultlibs:%G}}\\\n \\t%{!A:%{!nostdlib:%{!nostartfiles:%E}}}\\\n \\t-Tdjgpp.djl %{T*}}}}}}}\\n\\\n %{!c:%{!M:%{!MM:%{!E:%{!S:stubify %{v} %{o*:%*} %{!o*:a.out} }}}}}\""}, {"sha": "9b2aa0ea07c7021db852f3b168998e1b639bc62a", "filename": "gcc/gcc.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0a7539e5f1eb980dd08c399290ca7ea3f6460b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1a0a7539e5f1eb980dd08c399290ca7ea3f6460b", "patch": "@@ -558,9 +558,9 @@ proper position among the other output files.  */\n #ifndef LIBGCC_SPEC\n #if defined(LINK_LIBGCC_SPECIAL) || defined(LINK_LIBGCC_SPECIAL_1)\n /* Have gcc do the search for libgcc.a.  */\n-#define LIBGCC_SPEC \"libgcc.a%s\"\n+#define LIBGCC_SPEC \"libgcc.a%s %L libgcc.a%s\"\n #else\n-#define LIBGCC_SPEC \"-lgcc\"\n+#define LIBGCC_SPEC \"-lgcc %L -lgcc\"\n #endif\n #endif\n \n@@ -620,7 +620,7 @@ proper position among the other output files.  */\n %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n     %(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r} %{s} %{t}\\\n     %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n-    %{static:} %{L*} %(link_libgcc) %o %{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n+    %{static:} %{L*} %(link_libgcc) %o %{!nostdlib:%{!nodefaultlibs:%G}}\\\n     %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n #endif\n \n@@ -1426,7 +1426,16 @@ init_gcc_specs (obstack, shared_name, static_name, eh_name)\n #else\n \t\tshared_name,\n #endif\n-\t\t\"}}}\", NULL);\n+\t\t\"}}} %L \",\n+\t\t\"%{static|static-libgcc:\", static_name, \" \", eh_name,\n+\t\t\"}%{!static:%{!static-libgcc:\",\n+\t\t\"%{!shared:%{!shared-libgcc:\", static_name, \" \",\n+\t\teh_name, \"}%{shared-libgcc:\",\n+\t\tstatic_name, \"}}\",\n+#ifdef LINK_EH_SPEC\n+\t\t\"%{shared:%{!shared-libgcc:\", static_name, \"}}\",\n+#endif\n+\t\t\"}}\", NULL);\n \n   obstack_grow (obstack, buf, strlen (buf));\n   free (buf);\n@@ -1507,7 +1516,7 @@ init_spec ()\n        when given the proper command line arguments.  */\n     while (*p)\n       {\n-        if (in_sep && *p == '-' && strncmp (p, \"-lgcc\", 5) == 0)\n+        if (in_sep && *p == '-' && strncmp (p, \"-lgcc %L -lgcc\", 14) == 0)\n \t  {\n \t    init_gcc_specs (&obstack,\n #ifdef NO_SHARED_LIBGCC_MULTILIB\n@@ -1518,10 +1527,11 @@ init_spec ()\n \t\t\t    ,\n \t\t\t    \"-lgcc\",\n \t\t\t    \"-lgcc_eh\");\n-\t    p += 5;\n+\t    p += 14;\n \t    in_sep = 0;\n \t  }\n-\telse if (in_sep && *p == 'l' && strncmp (p, \"libgcc.a%s\", 10) == 0)\n+\telse if (in_sep && *p == 'l'\n+\t\t && strncmp (p, \"libgcc.a%s %L libgcc.a%s\", 24) == 0)\n \t  {\n \t    /* Ug.  We don't know shared library extensions.  Hope that\n \t       systems that use this form don't do shared libraries.  */\n@@ -1534,7 +1544,7 @@ init_spec ()\n \t\t\t    ,\n \t\t\t    \"libgcc.a%s\",\n \t\t\t    \"libgcc_eh.a%s\");\n-\t    p += 10;\n+\t    p += 24;\n \t    in_sep = 0;\n \t  }\n \telse"}]}