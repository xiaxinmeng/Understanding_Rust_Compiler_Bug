{"sha": "b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MzM2YjhiN2ExZjAzZjRiYTI3NzBiMGE1MjhjNzgxOGE3N2M3ZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-28T01:23:19Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-28T01:23:19Z"}, "message": "sh-protos.h (sh_function_arg): Delete.\n\n\t* config/sh/sh-protos.h (sh_function_arg): Delete.\n\t(sh_function_arg_advance): Delete.\n\t* config/sh/sh.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t(PASS_IN_REG_P): Eliminate cast.\n\t* config/sh/sh.c (sh_function_arg_advance): Make static.  Take a\n\tconst_tree and a bool.\n\t(sh_function_arg): Likewise.\n\t(sh_output_mi_thunk): Call sh_function_arg_advance) and\n\tsh_function_arg.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r163607", "tree": {"sha": "bb2791401fcb35fee99cef748df01dbce9252943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb2791401fcb35fee99cef748df01dbce9252943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/comments", "author": null, "committer": null, "parents": [{"sha": "79ad70f993c46eae3dfc828c37b7c9f90e5b3877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ad70f993c46eae3dfc828c37b7c9f90e5b3877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ad70f993c46eae3dfc828c37b7c9f90e5b3877"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "347fa14eae6b89d33d015d6435b7e7779b03b713", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "patch": "@@ -1,3 +1,16 @@\n+2010-08-27  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/sh/sh-protos.h (sh_function_arg): Delete.\n+\t(sh_function_arg_advance): Delete.\n+\t* config/sh/sh.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t(PASS_IN_REG_P): Eliminate cast.\n+\t* config/sh/sh.c (sh_function_arg_advance): Make static.  Take a\n+\tconst_tree and a bool.\n+\t(sh_function_arg): Likewise.\n+\t(sh_output_mi_thunk): Call sh_function_arg_advance) and\n+\tsh_function_arg.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-08-27  Naveen H.S  <naveen.S@kpitcummins.com>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "7a52adefcb5d99243d787fa251d1a4e0ff6b9ada", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "patch": "@@ -159,8 +159,6 @@ extern void sh_pr_nosave_low_regs (struct cpp_reader *);\n extern rtx function_symbol (rtx, const char *, enum sh_function_kind);\n extern rtx sh_get_pr_initial_val (void);\n \n-extern rtx sh_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern void sh_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, signed int, enum machine_mode);\n extern bool sh_function_value_regno_p (const unsigned int);"}, {"sha": "9eebf14ca7887b4e6fb5f743b38ea2c8c9d127a7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "patch": "@@ -282,6 +282,10 @@ static bool sh_callee_copies (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t      const_tree, bool);\n static int sh_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t         tree, bool);\n+static void sh_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t     const_tree, bool);\n+static rtx sh_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t    const_tree, bool);\n static bool sh_scalar_mode_supported_p (enum machine_mode);\n static int sh_dwarf_calling_convention (const_tree);\n static void sh_encode_section_info (tree, rtx, int);\n@@ -495,6 +499,10 @@ static const struct attribute_spec sh_attribute_table[] =\n #define TARGET_CALLEE_COPIES sh_callee_copies\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES sh_arg_partial_bytes\n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG sh_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE sh_function_arg_advance\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST sh_build_builtin_va_list\n@@ -8235,10 +8243,9 @@ sh_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    NPARM_REGS words is at least partially passed in a register unless\n    its data type forbids.  */\n \n-\n-rtx\n+static rtx\n sh_function_arg (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n-\t\t tree type, int named)\n+\t\t const_tree type, bool named)\n {\n   if (! TARGET_SH5 && mode == VOIDmode)\n     return GEN_INT (ca->renesas_abi ? 1 : 0);\n@@ -8324,17 +8331,17 @@ sh_function_arg (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n    (TYPE is null for libcalls where that information may not be\n    available.)  */\n \n-void\n+static void\n sh_function_arg_advance (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n-\t\t\t tree type, int named)\n+\t\t\t const_tree type, bool named)\n {\n   if (ca->force_mem)\n     ca->force_mem = 0;\n   else if (TARGET_SH5)\n     {\n-      tree type2 = (ca->byref && type\n-\t\t    ? TREE_TYPE (type)\n-\t\t    : type);\n+      const_tree type2 = (ca->byref && type\n+\t\t\t  ? TREE_TYPE (type)\n+\t\t\t  : type);\n       enum machine_mode mode2 = (ca->byref && type\n \t\t\t\t ? TYPE_MODE (type2)\n \t\t\t\t : mode);\n@@ -11493,9 +11500,9 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     {\n       tree ptype = build_pointer_type (TREE_TYPE (funtype));\n \n-      FUNCTION_ARG_ADVANCE (cum, Pmode, ptype, 1);\n+      sh_function_arg_advance (&cum, Pmode, ptype, true);\n     }\n-  this_rtx = FUNCTION_ARG (cum, Pmode, ptr_type_node, 1);\n+  this_rtx = sh_function_arg (&cum, Pmode, ptr_type_node, true);\n \n   /* For SHcompact, we only have r0 for a scratch register: r1 is the\n      static chain pointer (even if you can't have nested virtual functions"}, {"sha": "cb78667d8f0b31f16e4646aaaeb06c6115b8d0b6", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64336b8b7a1f03f4ba2770b0a528c7818a77c7e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b64336b8b7a1f03f4ba2770b0a528c7818a77c7e", "patch": "@@ -1625,17 +1625,12 @@ struct sh_args {\n #define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n   sh_init_cumulative_args (& (CUM), NULL_TREE, (LIBNAME), NULL_TREE, 0, (MODE))\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-\tsh_function_arg_advance (&(CUM), (MODE), (TYPE), (NAMED))\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\\\n-\tsh_function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n-\n /* Return boolean indicating arg of mode MODE will be passed in a reg.\n    This macro is only used in this file.  */\n \n #define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n   (((TYPE) == 0 \\\n-    || (! TREE_ADDRESSABLE ((tree)(TYPE)) \\\n+    || (! TREE_ADDRESSABLE ((TYPE)) \\\n \t&& (! (TARGET_HITACHI || (CUM).renesas_abi) \\\n \t    || ! (AGGREGATE_TYPE_P (TYPE) \\\n \t\t  || (!TARGET_FPU_ANY \\"}]}